
APPS_SIMPLE_EXAMPLE_LORA_STAR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001a614  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0001a614  0001a614  0002a614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000008c  20000000  0001a61c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .lpram        00000000  30000000  30000000  0003008c  2**0
                  CONTENTS
  4 .bss          00003d48  20000090  0001a6b0  00030090  2**3
                  ALLOC
  5 .stack        00002000  20003dd8  0001e3f8  00030090  2**0
                  ALLOC
  6 .ARM.attributes 00000028  00000000  00000000  0003008c  2**0
                  CONTENTS, READONLY
  7 .comment      0000008c  00000000  00000000  000300b4  2**0
                  CONTENTS, READONLY
  8 .debug_info   000a1557  00000000  00000000  00030140  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000e0a0  00000000  00000000  000d1697  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001fdbe  00000000  00000000  000df737  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001a40  00000000  00000000  000ff4f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000026d0  00000000  00000000  00100f35  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00034765  00000000  00000000  00103605  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00039baf  00000000  00000000  00137d6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b5b0f  00000000  00000000  00171919  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005664  00000000  00000000  00227428  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d8 5d 00 20 71 71 00 00 6d 71 00 00 6d 71 00 00     .]. qq..mq..mq..
	...
      2c:	6d 71 00 00 00 00 00 00 00 00 00 00 6d 71 00 00     mq..........mq..
      3c:	6d 71 00 00 6d 71 00 00 6d 71 00 00 f5 52 00 00     mq..mq..mq...R..
      4c:	29 4e 00 00 6d 71 00 00 6d 71 00 00 6d 71 00 00     )N..mq..mq..mq..
      5c:	6d 71 00 00 81 57 00 00 91 57 00 00 a1 57 00 00     mq...W...W...W..
      6c:	b1 57 00 00 c1 57 00 00 d1 57 00 00 6d 71 00 00     .W...W...W..mq..
      7c:	6d 71 00 00 6d 71 00 00 41 6d 00 00 51 6d 00 00     mq..mq..Am..Qm..
      8c:	6d 71 00 00 6d 71 00 00 61 6d 00 00 6d 71 00 00     mq..mq..am..mq..
      9c:	6d 71 00 00 6d 71 00 00 6d 71 00 00 a1 4d 00 00     mq..mq..mq...M..
      ac:	6d 71 00 00 00 00 00 00 00 00 00 00 00 00 00 00     mq..............
	...

00000400 <__d_nv_mem_start>:
     400:	ffffffff 	.word	0xffffffff
     404:	ffffffff 	.word	0xffffffff
     408:	ffffffff 	.word	0xffffffff
     40c:	ffffffff 	.word	0xffffffff
     410:	ffffffff 	.word	0xffffffff
     414:	ffffffff 	.word	0xffffffff
     418:	ffffffff 	.word	0xffffffff
     41c:	ffffffff 	.word	0xffffffff
     420:	ffffffff 	.word	0xffffffff
     424:	ffffffff 	.word	0xffffffff
     428:	ffffffff 	.word	0xffffffff
     42c:	ffffffff 	.word	0xffffffff
     430:	ffffffff 	.word	0xffffffff
     434:	ffffffff 	.word	0xffffffff
     438:	ffffffff 	.word	0xffffffff
     43c:	ffffffff 	.word	0xffffffff
     440:	ffffffff 	.word	0xffffffff
     444:	ffffffff 	.word	0xffffffff
     448:	ffffffff 	.word	0xffffffff
     44c:	ffffffff 	.word	0xffffffff
     450:	ffffffff 	.word	0xffffffff
     454:	ffffffff 	.word	0xffffffff
     458:	ffffffff 	.word	0xffffffff
     45c:	ffffffff 	.word	0xffffffff
     460:	ffffffff 	.word	0xffffffff
     464:	ffffffff 	.word	0xffffffff
     468:	ffffffff 	.word	0xffffffff
     46c:	ffffffff 	.word	0xffffffff
     470:	ffffffff 	.word	0xffffffff
     474:	ffffffff 	.word	0xffffffff
     478:	ffffffff 	.word	0xffffffff
     47c:	ffffffff 	.word	0xffffffff
     480:	ffffffff 	.word	0xffffffff
     484:	ffffffff 	.word	0xffffffff
     488:	ffffffff 	.word	0xffffffff
     48c:	ffffffff 	.word	0xffffffff
     490:	ffffffff 	.word	0xffffffff
     494:	ffffffff 	.word	0xffffffff
     498:	ffffffff 	.word	0xffffffff
     49c:	ffffffff 	.word	0xffffffff
     4a0:	ffffffff 	.word	0xffffffff
     4a4:	ffffffff 	.word	0xffffffff
     4a8:	ffffffff 	.word	0xffffffff
     4ac:	ffffffff 	.word	0xffffffff
     4b0:	ffffffff 	.word	0xffffffff
     4b4:	ffffffff 	.word	0xffffffff
     4b8:	ffffffff 	.word	0xffffffff
     4bc:	ffffffff 	.word	0xffffffff
     4c0:	ffffffff 	.word	0xffffffff
     4c4:	ffffffff 	.word	0xffffffff
     4c8:	ffffffff 	.word	0xffffffff
     4cc:	ffffffff 	.word	0xffffffff
     4d0:	ffffffff 	.word	0xffffffff
     4d4:	ffffffff 	.word	0xffffffff
     4d8:	ffffffff 	.word	0xffffffff
     4dc:	ffffffff 	.word	0xffffffff
     4e0:	ffffffff 	.word	0xffffffff
     4e4:	ffffffff 	.word	0xffffffff
     4e8:	ffffffff 	.word	0xffffffff
     4ec:	ffffffff 	.word	0xffffffff
     4f0:	ffffffff 	.word	0xffffffff
     4f4:	ffffffff 	.word	0xffffffff
     4f8:	ffffffff 	.word	0xffffffff
     4fc:	ffffffff 	.word	0xffffffff
     500:	ffffffff 	.word	0xffffffff
     504:	ffffffff 	.word	0xffffffff
     508:	ffffffff 	.word	0xffffffff
     50c:	ffffffff 	.word	0xffffffff
     510:	ffffffff 	.word	0xffffffff
     514:	ffffffff 	.word	0xffffffff
     518:	ffffffff 	.word	0xffffffff
     51c:	ffffffff 	.word	0xffffffff
     520:	ffffffff 	.word	0xffffffff
     524:	ffffffff 	.word	0xffffffff
     528:	ffffffff 	.word	0xffffffff
     52c:	ffffffff 	.word	0xffffffff
     530:	ffffffff 	.word	0xffffffff
     534:	ffffffff 	.word	0xffffffff
     538:	ffffffff 	.word	0xffffffff
     53c:	ffffffff 	.word	0xffffffff
     540:	ffffffff 	.word	0xffffffff
     544:	ffffffff 	.word	0xffffffff
     548:	ffffffff 	.word	0xffffffff
     54c:	ffffffff 	.word	0xffffffff
     550:	ffffffff 	.word	0xffffffff
     554:	ffffffff 	.word	0xffffffff
     558:	ffffffff 	.word	0xffffffff
     55c:	ffffffff 	.word	0xffffffff
     560:	ffffffff 	.word	0xffffffff
     564:	ffffffff 	.word	0xffffffff
     568:	ffffffff 	.word	0xffffffff
     56c:	ffffffff 	.word	0xffffffff
     570:	ffffffff 	.word	0xffffffff
     574:	ffffffff 	.word	0xffffffff
     578:	ffffffff 	.word	0xffffffff
     57c:	ffffffff 	.word	0xffffffff
     580:	ffffffff 	.word	0xffffffff
     584:	ffffffff 	.word	0xffffffff
     588:	ffffffff 	.word	0xffffffff
     58c:	ffffffff 	.word	0xffffffff
     590:	ffffffff 	.word	0xffffffff
     594:	ffffffff 	.word	0xffffffff
     598:	ffffffff 	.word	0xffffffff
     59c:	ffffffff 	.word	0xffffffff
     5a0:	ffffffff 	.word	0xffffffff
     5a4:	ffffffff 	.word	0xffffffff
     5a8:	ffffffff 	.word	0xffffffff
     5ac:	ffffffff 	.word	0xffffffff
     5b0:	ffffffff 	.word	0xffffffff
     5b4:	ffffffff 	.word	0xffffffff
     5b8:	ffffffff 	.word	0xffffffff
     5bc:	ffffffff 	.word	0xffffffff
     5c0:	ffffffff 	.word	0xffffffff
     5c4:	ffffffff 	.word	0xffffffff
     5c8:	ffffffff 	.word	0xffffffff
     5cc:	ffffffff 	.word	0xffffffff
     5d0:	ffffffff 	.word	0xffffffff
     5d4:	ffffffff 	.word	0xffffffff
     5d8:	ffffffff 	.word	0xffffffff
     5dc:	ffffffff 	.word	0xffffffff
     5e0:	ffffffff 	.word	0xffffffff
     5e4:	ffffffff 	.word	0xffffffff
     5e8:	ffffffff 	.word	0xffffffff
     5ec:	ffffffff 	.word	0xffffffff
     5f0:	ffffffff 	.word	0xffffffff
     5f4:	ffffffff 	.word	0xffffffff
     5f8:	ffffffff 	.word	0xffffffff
     5fc:	ffffffff 	.word	0xffffffff
     600:	ffffffff 	.word	0xffffffff
     604:	ffffffff 	.word	0xffffffff
     608:	ffffffff 	.word	0xffffffff
     60c:	ffffffff 	.word	0xffffffff
     610:	ffffffff 	.word	0xffffffff
     614:	ffffffff 	.word	0xffffffff
     618:	ffffffff 	.word	0xffffffff
     61c:	ffffffff 	.word	0xffffffff
     620:	ffffffff 	.word	0xffffffff
     624:	ffffffff 	.word	0xffffffff
     628:	ffffffff 	.word	0xffffffff
     62c:	ffffffff 	.word	0xffffffff
     630:	ffffffff 	.word	0xffffffff
     634:	ffffffff 	.word	0xffffffff
     638:	ffffffff 	.word	0xffffffff
     63c:	ffffffff 	.word	0xffffffff
     640:	ffffffff 	.word	0xffffffff
     644:	ffffffff 	.word	0xffffffff
     648:	ffffffff 	.word	0xffffffff
     64c:	ffffffff 	.word	0xffffffff
     650:	ffffffff 	.word	0xffffffff
     654:	ffffffff 	.word	0xffffffff
     658:	ffffffff 	.word	0xffffffff
     65c:	ffffffff 	.word	0xffffffff
     660:	ffffffff 	.word	0xffffffff
     664:	ffffffff 	.word	0xffffffff
     668:	ffffffff 	.word	0xffffffff
     66c:	ffffffff 	.word	0xffffffff
     670:	ffffffff 	.word	0xffffffff
     674:	ffffffff 	.word	0xffffffff
     678:	ffffffff 	.word	0xffffffff
     67c:	ffffffff 	.word	0xffffffff
     680:	ffffffff 	.word	0xffffffff
     684:	ffffffff 	.word	0xffffffff
     688:	ffffffff 	.word	0xffffffff
     68c:	ffffffff 	.word	0xffffffff
     690:	ffffffff 	.word	0xffffffff
     694:	ffffffff 	.word	0xffffffff
     698:	ffffffff 	.word	0xffffffff
     69c:	ffffffff 	.word	0xffffffff
     6a0:	ffffffff 	.word	0xffffffff
     6a4:	ffffffff 	.word	0xffffffff
     6a8:	ffffffff 	.word	0xffffffff
     6ac:	ffffffff 	.word	0xffffffff
     6b0:	ffffffff 	.word	0xffffffff
     6b4:	ffffffff 	.word	0xffffffff
     6b8:	ffffffff 	.word	0xffffffff
     6bc:	ffffffff 	.word	0xffffffff
     6c0:	ffffffff 	.word	0xffffffff
     6c4:	ffffffff 	.word	0xffffffff
     6c8:	ffffffff 	.word	0xffffffff
     6cc:	ffffffff 	.word	0xffffffff
     6d0:	ffffffff 	.word	0xffffffff
     6d4:	ffffffff 	.word	0xffffffff
     6d8:	ffffffff 	.word	0xffffffff
     6dc:	ffffffff 	.word	0xffffffff
     6e0:	ffffffff 	.word	0xffffffff
     6e4:	ffffffff 	.word	0xffffffff
     6e8:	ffffffff 	.word	0xffffffff
     6ec:	ffffffff 	.word	0xffffffff
     6f0:	ffffffff 	.word	0xffffffff
     6f4:	ffffffff 	.word	0xffffffff
     6f8:	ffffffff 	.word	0xffffffff
     6fc:	ffffffff 	.word	0xffffffff
     700:	ffffffff 	.word	0xffffffff
     704:	ffffffff 	.word	0xffffffff
     708:	ffffffff 	.word	0xffffffff
     70c:	ffffffff 	.word	0xffffffff
     710:	ffffffff 	.word	0xffffffff
     714:	ffffffff 	.word	0xffffffff
     718:	ffffffff 	.word	0xffffffff
     71c:	ffffffff 	.word	0xffffffff
     720:	ffffffff 	.word	0xffffffff
     724:	ffffffff 	.word	0xffffffff
     728:	ffffffff 	.word	0xffffffff
     72c:	ffffffff 	.word	0xffffffff
     730:	ffffffff 	.word	0xffffffff
     734:	ffffffff 	.word	0xffffffff
     738:	ffffffff 	.word	0xffffffff
     73c:	ffffffff 	.word	0xffffffff
     740:	ffffffff 	.word	0xffffffff
     744:	ffffffff 	.word	0xffffffff
     748:	ffffffff 	.word	0xffffffff
     74c:	ffffffff 	.word	0xffffffff
     750:	ffffffff 	.word	0xffffffff
     754:	ffffffff 	.word	0xffffffff
     758:	ffffffff 	.word	0xffffffff
     75c:	ffffffff 	.word	0xffffffff
     760:	ffffffff 	.word	0xffffffff
     764:	ffffffff 	.word	0xffffffff
     768:	ffffffff 	.word	0xffffffff
     76c:	ffffffff 	.word	0xffffffff
     770:	ffffffff 	.word	0xffffffff
     774:	ffffffff 	.word	0xffffffff
     778:	ffffffff 	.word	0xffffffff
     77c:	ffffffff 	.word	0xffffffff
     780:	ffffffff 	.word	0xffffffff
     784:	ffffffff 	.word	0xffffffff
     788:	ffffffff 	.word	0xffffffff
     78c:	ffffffff 	.word	0xffffffff
     790:	ffffffff 	.word	0xffffffff
     794:	ffffffff 	.word	0xffffffff
     798:	ffffffff 	.word	0xffffffff
     79c:	ffffffff 	.word	0xffffffff
     7a0:	ffffffff 	.word	0xffffffff
     7a4:	ffffffff 	.word	0xffffffff
     7a8:	ffffffff 	.word	0xffffffff
     7ac:	ffffffff 	.word	0xffffffff
     7b0:	ffffffff 	.word	0xffffffff
     7b4:	ffffffff 	.word	0xffffffff
     7b8:	ffffffff 	.word	0xffffffff
     7bc:	ffffffff 	.word	0xffffffff
     7c0:	ffffffff 	.word	0xffffffff
     7c4:	ffffffff 	.word	0xffffffff
     7c8:	ffffffff 	.word	0xffffffff
     7cc:	ffffffff 	.word	0xffffffff
     7d0:	ffffffff 	.word	0xffffffff
     7d4:	ffffffff 	.word	0xffffffff
     7d8:	ffffffff 	.word	0xffffffff
     7dc:	ffffffff 	.word	0xffffffff
     7e0:	ffffffff 	.word	0xffffffff
     7e4:	ffffffff 	.word	0xffffffff
     7e8:	ffffffff 	.word	0xffffffff
     7ec:	ffffffff 	.word	0xffffffff
     7f0:	ffffffff 	.word	0xffffffff
     7f4:	ffffffff 	.word	0xffffffff
     7f8:	ffffffff 	.word	0xffffffff
     7fc:	ffffffff 	.word	0xffffffff
     800:	ffffffff 	.word	0xffffffff
     804:	ffffffff 	.word	0xffffffff
     808:	ffffffff 	.word	0xffffffff
     80c:	ffffffff 	.word	0xffffffff
     810:	ffffffff 	.word	0xffffffff
     814:	ffffffff 	.word	0xffffffff
     818:	ffffffff 	.word	0xffffffff
     81c:	ffffffff 	.word	0xffffffff
     820:	ffffffff 	.word	0xffffffff
     824:	ffffffff 	.word	0xffffffff
     828:	ffffffff 	.word	0xffffffff
     82c:	ffffffff 	.word	0xffffffff
     830:	ffffffff 	.word	0xffffffff
     834:	ffffffff 	.word	0xffffffff
     838:	ffffffff 	.word	0xffffffff
     83c:	ffffffff 	.word	0xffffffff
     840:	ffffffff 	.word	0xffffffff
     844:	ffffffff 	.word	0xffffffff
     848:	ffffffff 	.word	0xffffffff
     84c:	ffffffff 	.word	0xffffffff
     850:	ffffffff 	.word	0xffffffff
     854:	ffffffff 	.word	0xffffffff
     858:	ffffffff 	.word	0xffffffff
     85c:	ffffffff 	.word	0xffffffff
     860:	ffffffff 	.word	0xffffffff
     864:	ffffffff 	.word	0xffffffff
     868:	ffffffff 	.word	0xffffffff
     86c:	ffffffff 	.word	0xffffffff
     870:	ffffffff 	.word	0xffffffff
     874:	ffffffff 	.word	0xffffffff
     878:	ffffffff 	.word	0xffffffff
     87c:	ffffffff 	.word	0xffffffff
     880:	ffffffff 	.word	0xffffffff
     884:	ffffffff 	.word	0xffffffff
     888:	ffffffff 	.word	0xffffffff
     88c:	ffffffff 	.word	0xffffffff
     890:	ffffffff 	.word	0xffffffff
     894:	ffffffff 	.word	0xffffffff
     898:	ffffffff 	.word	0xffffffff
     89c:	ffffffff 	.word	0xffffffff
     8a0:	ffffffff 	.word	0xffffffff
     8a4:	ffffffff 	.word	0xffffffff
     8a8:	ffffffff 	.word	0xffffffff
     8ac:	ffffffff 	.word	0xffffffff
     8b0:	ffffffff 	.word	0xffffffff
     8b4:	ffffffff 	.word	0xffffffff
     8b8:	ffffffff 	.word	0xffffffff
     8bc:	ffffffff 	.word	0xffffffff
     8c0:	ffffffff 	.word	0xffffffff
     8c4:	ffffffff 	.word	0xffffffff
     8c8:	ffffffff 	.word	0xffffffff
     8cc:	ffffffff 	.word	0xffffffff
     8d0:	ffffffff 	.word	0xffffffff
     8d4:	ffffffff 	.word	0xffffffff
     8d8:	ffffffff 	.word	0xffffffff
     8dc:	ffffffff 	.word	0xffffffff
     8e0:	ffffffff 	.word	0xffffffff
     8e4:	ffffffff 	.word	0xffffffff
     8e8:	ffffffff 	.word	0xffffffff
     8ec:	ffffffff 	.word	0xffffffff
     8f0:	ffffffff 	.word	0xffffffff
     8f4:	ffffffff 	.word	0xffffffff
     8f8:	ffffffff 	.word	0xffffffff
     8fc:	ffffffff 	.word	0xffffffff
     900:	ffffffff 	.word	0xffffffff
     904:	ffffffff 	.word	0xffffffff
     908:	ffffffff 	.word	0xffffffff
     90c:	ffffffff 	.word	0xffffffff
     910:	ffffffff 	.word	0xffffffff
     914:	ffffffff 	.word	0xffffffff
     918:	ffffffff 	.word	0xffffffff
     91c:	ffffffff 	.word	0xffffffff
     920:	ffffffff 	.word	0xffffffff
     924:	ffffffff 	.word	0xffffffff
     928:	ffffffff 	.word	0xffffffff
     92c:	ffffffff 	.word	0xffffffff
     930:	ffffffff 	.word	0xffffffff
     934:	ffffffff 	.word	0xffffffff
     938:	ffffffff 	.word	0xffffffff
     93c:	ffffffff 	.word	0xffffffff
     940:	ffffffff 	.word	0xffffffff
     944:	ffffffff 	.word	0xffffffff
     948:	ffffffff 	.word	0xffffffff
     94c:	ffffffff 	.word	0xffffffff
     950:	ffffffff 	.word	0xffffffff
     954:	ffffffff 	.word	0xffffffff
     958:	ffffffff 	.word	0xffffffff
     95c:	ffffffff 	.word	0xffffffff
     960:	ffffffff 	.word	0xffffffff
     964:	ffffffff 	.word	0xffffffff
     968:	ffffffff 	.word	0xffffffff
     96c:	ffffffff 	.word	0xffffffff
     970:	ffffffff 	.word	0xffffffff
     974:	ffffffff 	.word	0xffffffff
     978:	ffffffff 	.word	0xffffffff
     97c:	ffffffff 	.word	0xffffffff
     980:	ffffffff 	.word	0xffffffff
     984:	ffffffff 	.word	0xffffffff
     988:	ffffffff 	.word	0xffffffff
     98c:	ffffffff 	.word	0xffffffff
     990:	ffffffff 	.word	0xffffffff
     994:	ffffffff 	.word	0xffffffff
     998:	ffffffff 	.word	0xffffffff
     99c:	ffffffff 	.word	0xffffffff
     9a0:	ffffffff 	.word	0xffffffff
     9a4:	ffffffff 	.word	0xffffffff
     9a8:	ffffffff 	.word	0xffffffff
     9ac:	ffffffff 	.word	0xffffffff
     9b0:	ffffffff 	.word	0xffffffff
     9b4:	ffffffff 	.word	0xffffffff
     9b8:	ffffffff 	.word	0xffffffff
     9bc:	ffffffff 	.word	0xffffffff
     9c0:	ffffffff 	.word	0xffffffff
     9c4:	ffffffff 	.word	0xffffffff
     9c8:	ffffffff 	.word	0xffffffff
     9cc:	ffffffff 	.word	0xffffffff
     9d0:	ffffffff 	.word	0xffffffff
     9d4:	ffffffff 	.word	0xffffffff
     9d8:	ffffffff 	.word	0xffffffff
     9dc:	ffffffff 	.word	0xffffffff
     9e0:	ffffffff 	.word	0xffffffff
     9e4:	ffffffff 	.word	0xffffffff
     9e8:	ffffffff 	.word	0xffffffff
     9ec:	ffffffff 	.word	0xffffffff
     9f0:	ffffffff 	.word	0xffffffff
     9f4:	ffffffff 	.word	0xffffffff
     9f8:	ffffffff 	.word	0xffffffff
     9fc:	ffffffff 	.word	0xffffffff
     a00:	ffffffff 	.word	0xffffffff
     a04:	ffffffff 	.word	0xffffffff
     a08:	ffffffff 	.word	0xffffffff
     a0c:	ffffffff 	.word	0xffffffff
     a10:	ffffffff 	.word	0xffffffff
     a14:	ffffffff 	.word	0xffffffff
     a18:	ffffffff 	.word	0xffffffff
     a1c:	ffffffff 	.word	0xffffffff
     a20:	ffffffff 	.word	0xffffffff
     a24:	ffffffff 	.word	0xffffffff
     a28:	ffffffff 	.word	0xffffffff
     a2c:	ffffffff 	.word	0xffffffff
     a30:	ffffffff 	.word	0xffffffff
     a34:	ffffffff 	.word	0xffffffff
     a38:	ffffffff 	.word	0xffffffff
     a3c:	ffffffff 	.word	0xffffffff
     a40:	ffffffff 	.word	0xffffffff
     a44:	ffffffff 	.word	0xffffffff
     a48:	ffffffff 	.word	0xffffffff
     a4c:	ffffffff 	.word	0xffffffff
     a50:	ffffffff 	.word	0xffffffff
     a54:	ffffffff 	.word	0xffffffff
     a58:	ffffffff 	.word	0xffffffff
     a5c:	ffffffff 	.word	0xffffffff
     a60:	ffffffff 	.word	0xffffffff
     a64:	ffffffff 	.word	0xffffffff
     a68:	ffffffff 	.word	0xffffffff
     a6c:	ffffffff 	.word	0xffffffff
     a70:	ffffffff 	.word	0xffffffff
     a74:	ffffffff 	.word	0xffffffff
     a78:	ffffffff 	.word	0xffffffff
     a7c:	ffffffff 	.word	0xffffffff
     a80:	ffffffff 	.word	0xffffffff
     a84:	ffffffff 	.word	0xffffffff
     a88:	ffffffff 	.word	0xffffffff
     a8c:	ffffffff 	.word	0xffffffff
     a90:	ffffffff 	.word	0xffffffff
     a94:	ffffffff 	.word	0xffffffff
     a98:	ffffffff 	.word	0xffffffff
     a9c:	ffffffff 	.word	0xffffffff
     aa0:	ffffffff 	.word	0xffffffff
     aa4:	ffffffff 	.word	0xffffffff
     aa8:	ffffffff 	.word	0xffffffff
     aac:	ffffffff 	.word	0xffffffff
     ab0:	ffffffff 	.word	0xffffffff
     ab4:	ffffffff 	.word	0xffffffff
     ab8:	ffffffff 	.word	0xffffffff
     abc:	ffffffff 	.word	0xffffffff
     ac0:	ffffffff 	.word	0xffffffff
     ac4:	ffffffff 	.word	0xffffffff
     ac8:	ffffffff 	.word	0xffffffff
     acc:	ffffffff 	.word	0xffffffff
     ad0:	ffffffff 	.word	0xffffffff
     ad4:	ffffffff 	.word	0xffffffff
     ad8:	ffffffff 	.word	0xffffffff
     adc:	ffffffff 	.word	0xffffffff
     ae0:	ffffffff 	.word	0xffffffff
     ae4:	ffffffff 	.word	0xffffffff
     ae8:	ffffffff 	.word	0xffffffff
     aec:	ffffffff 	.word	0xffffffff
     af0:	ffffffff 	.word	0xffffffff
     af4:	ffffffff 	.word	0xffffffff
     af8:	ffffffff 	.word	0xffffffff
     afc:	ffffffff 	.word	0xffffffff
     b00:	ffffffff 	.word	0xffffffff
     b04:	ffffffff 	.word	0xffffffff
     b08:	ffffffff 	.word	0xffffffff
     b0c:	ffffffff 	.word	0xffffffff
     b10:	ffffffff 	.word	0xffffffff
     b14:	ffffffff 	.word	0xffffffff
     b18:	ffffffff 	.word	0xffffffff
     b1c:	ffffffff 	.word	0xffffffff
     b20:	ffffffff 	.word	0xffffffff
     b24:	ffffffff 	.word	0xffffffff
     b28:	ffffffff 	.word	0xffffffff
     b2c:	ffffffff 	.word	0xffffffff
     b30:	ffffffff 	.word	0xffffffff
     b34:	ffffffff 	.word	0xffffffff
     b38:	ffffffff 	.word	0xffffffff
     b3c:	ffffffff 	.word	0xffffffff
     b40:	ffffffff 	.word	0xffffffff
     b44:	ffffffff 	.word	0xffffffff
     b48:	ffffffff 	.word	0xffffffff
     b4c:	ffffffff 	.word	0xffffffff
     b50:	ffffffff 	.word	0xffffffff
     b54:	ffffffff 	.word	0xffffffff
     b58:	ffffffff 	.word	0xffffffff
     b5c:	ffffffff 	.word	0xffffffff
     b60:	ffffffff 	.word	0xffffffff
     b64:	ffffffff 	.word	0xffffffff
     b68:	ffffffff 	.word	0xffffffff
     b6c:	ffffffff 	.word	0xffffffff
     b70:	ffffffff 	.word	0xffffffff
     b74:	ffffffff 	.word	0xffffffff
     b78:	ffffffff 	.word	0xffffffff
     b7c:	ffffffff 	.word	0xffffffff
     b80:	ffffffff 	.word	0xffffffff
     b84:	ffffffff 	.word	0xffffffff
     b88:	ffffffff 	.word	0xffffffff
     b8c:	ffffffff 	.word	0xffffffff
     b90:	ffffffff 	.word	0xffffffff
     b94:	ffffffff 	.word	0xffffffff
     b98:	ffffffff 	.word	0xffffffff
     b9c:	ffffffff 	.word	0xffffffff
     ba0:	ffffffff 	.word	0xffffffff
     ba4:	ffffffff 	.word	0xffffffff
     ba8:	ffffffff 	.word	0xffffffff
     bac:	ffffffff 	.word	0xffffffff
     bb0:	ffffffff 	.word	0xffffffff
     bb4:	ffffffff 	.word	0xffffffff
     bb8:	ffffffff 	.word	0xffffffff
     bbc:	ffffffff 	.word	0xffffffff
     bc0:	ffffffff 	.word	0xffffffff
     bc4:	ffffffff 	.word	0xffffffff
     bc8:	ffffffff 	.word	0xffffffff
     bcc:	ffffffff 	.word	0xffffffff
     bd0:	ffffffff 	.word	0xffffffff
     bd4:	ffffffff 	.word	0xffffffff
     bd8:	ffffffff 	.word	0xffffffff
     bdc:	ffffffff 	.word	0xffffffff
     be0:	ffffffff 	.word	0xffffffff
     be4:	ffffffff 	.word	0xffffffff
     be8:	ffffffff 	.word	0xffffffff
     bec:	ffffffff 	.word	0xffffffff
     bf0:	ffffffff 	.word	0xffffffff
     bf4:	ffffffff 	.word	0xffffffff
     bf8:	ffffffff 	.word	0xffffffff
     bfc:	ffffffff 	.word	0xffffffff
     c00:	ffffffff 	.word	0xffffffff
     c04:	ffffffff 	.word	0xffffffff
     c08:	ffffffff 	.word	0xffffffff
     c0c:	ffffffff 	.word	0xffffffff
     c10:	ffffffff 	.word	0xffffffff
     c14:	ffffffff 	.word	0xffffffff
     c18:	ffffffff 	.word	0xffffffff
     c1c:	ffffffff 	.word	0xffffffff
     c20:	ffffffff 	.word	0xffffffff
     c24:	ffffffff 	.word	0xffffffff
     c28:	ffffffff 	.word	0xffffffff
     c2c:	ffffffff 	.word	0xffffffff
     c30:	ffffffff 	.word	0xffffffff
     c34:	ffffffff 	.word	0xffffffff
     c38:	ffffffff 	.word	0xffffffff
     c3c:	ffffffff 	.word	0xffffffff
     c40:	ffffffff 	.word	0xffffffff
     c44:	ffffffff 	.word	0xffffffff
     c48:	ffffffff 	.word	0xffffffff
     c4c:	ffffffff 	.word	0xffffffff
     c50:	ffffffff 	.word	0xffffffff
     c54:	ffffffff 	.word	0xffffffff
     c58:	ffffffff 	.word	0xffffffff
     c5c:	ffffffff 	.word	0xffffffff
     c60:	ffffffff 	.word	0xffffffff
     c64:	ffffffff 	.word	0xffffffff
     c68:	ffffffff 	.word	0xffffffff
     c6c:	ffffffff 	.word	0xffffffff
     c70:	ffffffff 	.word	0xffffffff
     c74:	ffffffff 	.word	0xffffffff
     c78:	ffffffff 	.word	0xffffffff
     c7c:	ffffffff 	.word	0xffffffff
     c80:	ffffffff 	.word	0xffffffff
     c84:	ffffffff 	.word	0xffffffff
     c88:	ffffffff 	.word	0xffffffff
     c8c:	ffffffff 	.word	0xffffffff
     c90:	ffffffff 	.word	0xffffffff
     c94:	ffffffff 	.word	0xffffffff
     c98:	ffffffff 	.word	0xffffffff
     c9c:	ffffffff 	.word	0xffffffff
     ca0:	ffffffff 	.word	0xffffffff
     ca4:	ffffffff 	.word	0xffffffff
     ca8:	ffffffff 	.word	0xffffffff
     cac:	ffffffff 	.word	0xffffffff
     cb0:	ffffffff 	.word	0xffffffff
     cb4:	ffffffff 	.word	0xffffffff
     cb8:	ffffffff 	.word	0xffffffff
     cbc:	ffffffff 	.word	0xffffffff
     cc0:	ffffffff 	.word	0xffffffff
     cc4:	ffffffff 	.word	0xffffffff
     cc8:	ffffffff 	.word	0xffffffff
     ccc:	ffffffff 	.word	0xffffffff
     cd0:	ffffffff 	.word	0xffffffff
     cd4:	ffffffff 	.word	0xffffffff
     cd8:	ffffffff 	.word	0xffffffff
     cdc:	ffffffff 	.word	0xffffffff
     ce0:	ffffffff 	.word	0xffffffff
     ce4:	ffffffff 	.word	0xffffffff
     ce8:	ffffffff 	.word	0xffffffff
     cec:	ffffffff 	.word	0xffffffff
     cf0:	ffffffff 	.word	0xffffffff
     cf4:	ffffffff 	.word	0xffffffff
     cf8:	ffffffff 	.word	0xffffffff
     cfc:	ffffffff 	.word	0xffffffff
     d00:	ffffffff 	.word	0xffffffff
     d04:	ffffffff 	.word	0xffffffff
     d08:	ffffffff 	.word	0xffffffff
     d0c:	ffffffff 	.word	0xffffffff
     d10:	ffffffff 	.word	0xffffffff
     d14:	ffffffff 	.word	0xffffffff
     d18:	ffffffff 	.word	0xffffffff
     d1c:	ffffffff 	.word	0xffffffff
     d20:	ffffffff 	.word	0xffffffff
     d24:	ffffffff 	.word	0xffffffff
     d28:	ffffffff 	.word	0xffffffff
     d2c:	ffffffff 	.word	0xffffffff
     d30:	ffffffff 	.word	0xffffffff
     d34:	ffffffff 	.word	0xffffffff
     d38:	ffffffff 	.word	0xffffffff
     d3c:	ffffffff 	.word	0xffffffff
     d40:	ffffffff 	.word	0xffffffff
     d44:	ffffffff 	.word	0xffffffff
     d48:	ffffffff 	.word	0xffffffff
     d4c:	ffffffff 	.word	0xffffffff
     d50:	ffffffff 	.word	0xffffffff
     d54:	ffffffff 	.word	0xffffffff
     d58:	ffffffff 	.word	0xffffffff
     d5c:	ffffffff 	.word	0xffffffff
     d60:	ffffffff 	.word	0xffffffff
     d64:	ffffffff 	.word	0xffffffff
     d68:	ffffffff 	.word	0xffffffff
     d6c:	ffffffff 	.word	0xffffffff
     d70:	ffffffff 	.word	0xffffffff
     d74:	ffffffff 	.word	0xffffffff
     d78:	ffffffff 	.word	0xffffffff
     d7c:	ffffffff 	.word	0xffffffff
     d80:	ffffffff 	.word	0xffffffff
     d84:	ffffffff 	.word	0xffffffff
     d88:	ffffffff 	.word	0xffffffff
     d8c:	ffffffff 	.word	0xffffffff
     d90:	ffffffff 	.word	0xffffffff
     d94:	ffffffff 	.word	0xffffffff
     d98:	ffffffff 	.word	0xffffffff
     d9c:	ffffffff 	.word	0xffffffff
     da0:	ffffffff 	.word	0xffffffff
     da4:	ffffffff 	.word	0xffffffff
     da8:	ffffffff 	.word	0xffffffff
     dac:	ffffffff 	.word	0xffffffff
     db0:	ffffffff 	.word	0xffffffff
     db4:	ffffffff 	.word	0xffffffff
     db8:	ffffffff 	.word	0xffffffff
     dbc:	ffffffff 	.word	0xffffffff
     dc0:	ffffffff 	.word	0xffffffff
     dc4:	ffffffff 	.word	0xffffffff
     dc8:	ffffffff 	.word	0xffffffff
     dcc:	ffffffff 	.word	0xffffffff
     dd0:	ffffffff 	.word	0xffffffff
     dd4:	ffffffff 	.word	0xffffffff
     dd8:	ffffffff 	.word	0xffffffff
     ddc:	ffffffff 	.word	0xffffffff
     de0:	ffffffff 	.word	0xffffffff
     de4:	ffffffff 	.word	0xffffffff
     de8:	ffffffff 	.word	0xffffffff
     dec:	ffffffff 	.word	0xffffffff
     df0:	ffffffff 	.word	0xffffffff
     df4:	ffffffff 	.word	0xffffffff
     df8:	ffffffff 	.word	0xffffffff
     dfc:	ffffffff 	.word	0xffffffff
     e00:	ffffffff 	.word	0xffffffff
     e04:	ffffffff 	.word	0xffffffff
     e08:	ffffffff 	.word	0xffffffff
     e0c:	ffffffff 	.word	0xffffffff
     e10:	ffffffff 	.word	0xffffffff
     e14:	ffffffff 	.word	0xffffffff
     e18:	ffffffff 	.word	0xffffffff
     e1c:	ffffffff 	.word	0xffffffff
     e20:	ffffffff 	.word	0xffffffff
     e24:	ffffffff 	.word	0xffffffff
     e28:	ffffffff 	.word	0xffffffff
     e2c:	ffffffff 	.word	0xffffffff
     e30:	ffffffff 	.word	0xffffffff
     e34:	ffffffff 	.word	0xffffffff
     e38:	ffffffff 	.word	0xffffffff
     e3c:	ffffffff 	.word	0xffffffff
     e40:	ffffffff 	.word	0xffffffff
     e44:	ffffffff 	.word	0xffffffff
     e48:	ffffffff 	.word	0xffffffff
     e4c:	ffffffff 	.word	0xffffffff
     e50:	ffffffff 	.word	0xffffffff
     e54:	ffffffff 	.word	0xffffffff
     e58:	ffffffff 	.word	0xffffffff
     e5c:	ffffffff 	.word	0xffffffff
     e60:	ffffffff 	.word	0xffffffff
     e64:	ffffffff 	.word	0xffffffff
     e68:	ffffffff 	.word	0xffffffff
     e6c:	ffffffff 	.word	0xffffffff
     e70:	ffffffff 	.word	0xffffffff
     e74:	ffffffff 	.word	0xffffffff
     e78:	ffffffff 	.word	0xffffffff
     e7c:	ffffffff 	.word	0xffffffff
     e80:	ffffffff 	.word	0xffffffff
     e84:	ffffffff 	.word	0xffffffff
     e88:	ffffffff 	.word	0xffffffff
     e8c:	ffffffff 	.word	0xffffffff
     e90:	ffffffff 	.word	0xffffffff
     e94:	ffffffff 	.word	0xffffffff
     e98:	ffffffff 	.word	0xffffffff
     e9c:	ffffffff 	.word	0xffffffff
     ea0:	ffffffff 	.word	0xffffffff
     ea4:	ffffffff 	.word	0xffffffff
     ea8:	ffffffff 	.word	0xffffffff
     eac:	ffffffff 	.word	0xffffffff
     eb0:	ffffffff 	.word	0xffffffff
     eb4:	ffffffff 	.word	0xffffffff
     eb8:	ffffffff 	.word	0xffffffff
     ebc:	ffffffff 	.word	0xffffffff
     ec0:	ffffffff 	.word	0xffffffff
     ec4:	ffffffff 	.word	0xffffffff
     ec8:	ffffffff 	.word	0xffffffff
     ecc:	ffffffff 	.word	0xffffffff
     ed0:	ffffffff 	.word	0xffffffff
     ed4:	ffffffff 	.word	0xffffffff
     ed8:	ffffffff 	.word	0xffffffff
     edc:	ffffffff 	.word	0xffffffff
     ee0:	ffffffff 	.word	0xffffffff
     ee4:	ffffffff 	.word	0xffffffff
     ee8:	ffffffff 	.word	0xffffffff
     eec:	ffffffff 	.word	0xffffffff
     ef0:	ffffffff 	.word	0xffffffff
     ef4:	ffffffff 	.word	0xffffffff
     ef8:	ffffffff 	.word	0xffffffff
     efc:	ffffffff 	.word	0xffffffff
     f00:	ffffffff 	.word	0xffffffff
     f04:	ffffffff 	.word	0xffffffff
     f08:	ffffffff 	.word	0xffffffff
     f0c:	ffffffff 	.word	0xffffffff
     f10:	ffffffff 	.word	0xffffffff
     f14:	ffffffff 	.word	0xffffffff
     f18:	ffffffff 	.word	0xffffffff
     f1c:	ffffffff 	.word	0xffffffff
     f20:	ffffffff 	.word	0xffffffff
     f24:	ffffffff 	.word	0xffffffff
     f28:	ffffffff 	.word	0xffffffff
     f2c:	ffffffff 	.word	0xffffffff
     f30:	ffffffff 	.word	0xffffffff
     f34:	ffffffff 	.word	0xffffffff
     f38:	ffffffff 	.word	0xffffffff
     f3c:	ffffffff 	.word	0xffffffff
     f40:	ffffffff 	.word	0xffffffff
     f44:	ffffffff 	.word	0xffffffff
     f48:	ffffffff 	.word	0xffffffff
     f4c:	ffffffff 	.word	0xffffffff
     f50:	ffffffff 	.word	0xffffffff
     f54:	ffffffff 	.word	0xffffffff
     f58:	ffffffff 	.word	0xffffffff
     f5c:	ffffffff 	.word	0xffffffff
     f60:	ffffffff 	.word	0xffffffff
     f64:	ffffffff 	.word	0xffffffff
     f68:	ffffffff 	.word	0xffffffff
     f6c:	ffffffff 	.word	0xffffffff
     f70:	ffffffff 	.word	0xffffffff
     f74:	ffffffff 	.word	0xffffffff
     f78:	ffffffff 	.word	0xffffffff
     f7c:	ffffffff 	.word	0xffffffff
     f80:	ffffffff 	.word	0xffffffff
     f84:	ffffffff 	.word	0xffffffff
     f88:	ffffffff 	.word	0xffffffff
     f8c:	ffffffff 	.word	0xffffffff
     f90:	ffffffff 	.word	0xffffffff
     f94:	ffffffff 	.word	0xffffffff
     f98:	ffffffff 	.word	0xffffffff
     f9c:	ffffffff 	.word	0xffffffff
     fa0:	ffffffff 	.word	0xffffffff
     fa4:	ffffffff 	.word	0xffffffff
     fa8:	ffffffff 	.word	0xffffffff
     fac:	ffffffff 	.word	0xffffffff
     fb0:	ffffffff 	.word	0xffffffff
     fb4:	ffffffff 	.word	0xffffffff
     fb8:	ffffffff 	.word	0xffffffff
     fbc:	ffffffff 	.word	0xffffffff
     fc0:	ffffffff 	.word	0xffffffff
     fc4:	ffffffff 	.word	0xffffffff
     fc8:	ffffffff 	.word	0xffffffff
     fcc:	ffffffff 	.word	0xffffffff
     fd0:	ffffffff 	.word	0xffffffff
     fd4:	ffffffff 	.word	0xffffffff
     fd8:	ffffffff 	.word	0xffffffff
     fdc:	ffffffff 	.word	0xffffffff
     fe0:	ffffffff 	.word	0xffffffff
     fe4:	ffffffff 	.word	0xffffffff
     fe8:	ffffffff 	.word	0xffffffff
     fec:	ffffffff 	.word	0xffffffff
     ff0:	ffffffff 	.word	0xffffffff
     ff4:	ffffffff 	.word	0xffffffff
     ff8:	ffffffff 	.word	0xffffffff
     ffc:	ffffffff 	.word	0xffffffff
    1000:	ffffffff 	.word	0xffffffff
    1004:	ffffffff 	.word	0xffffffff
    1008:	ffffffff 	.word	0xffffffff
    100c:	ffffffff 	.word	0xffffffff
    1010:	ffffffff 	.word	0xffffffff
    1014:	ffffffff 	.word	0xffffffff
    1018:	ffffffff 	.word	0xffffffff
    101c:	ffffffff 	.word	0xffffffff
    1020:	ffffffff 	.word	0xffffffff
    1024:	ffffffff 	.word	0xffffffff
    1028:	ffffffff 	.word	0xffffffff
    102c:	ffffffff 	.word	0xffffffff
    1030:	ffffffff 	.word	0xffffffff
    1034:	ffffffff 	.word	0xffffffff
    1038:	ffffffff 	.word	0xffffffff
    103c:	ffffffff 	.word	0xffffffff
    1040:	ffffffff 	.word	0xffffffff
    1044:	ffffffff 	.word	0xffffffff
    1048:	ffffffff 	.word	0xffffffff
    104c:	ffffffff 	.word	0xffffffff
    1050:	ffffffff 	.word	0xffffffff
    1054:	ffffffff 	.word	0xffffffff
    1058:	ffffffff 	.word	0xffffffff
    105c:	ffffffff 	.word	0xffffffff
    1060:	ffffffff 	.word	0xffffffff
    1064:	ffffffff 	.word	0xffffffff
    1068:	ffffffff 	.word	0xffffffff
    106c:	ffffffff 	.word	0xffffffff
    1070:	ffffffff 	.word	0xffffffff
    1074:	ffffffff 	.word	0xffffffff
    1078:	ffffffff 	.word	0xffffffff
    107c:	ffffffff 	.word	0xffffffff
    1080:	ffffffff 	.word	0xffffffff
    1084:	ffffffff 	.word	0xffffffff
    1088:	ffffffff 	.word	0xffffffff
    108c:	ffffffff 	.word	0xffffffff
    1090:	ffffffff 	.word	0xffffffff
    1094:	ffffffff 	.word	0xffffffff
    1098:	ffffffff 	.word	0xffffffff
    109c:	ffffffff 	.word	0xffffffff
    10a0:	ffffffff 	.word	0xffffffff
    10a4:	ffffffff 	.word	0xffffffff
    10a8:	ffffffff 	.word	0xffffffff
    10ac:	ffffffff 	.word	0xffffffff
    10b0:	ffffffff 	.word	0xffffffff
    10b4:	ffffffff 	.word	0xffffffff
    10b8:	ffffffff 	.word	0xffffffff
    10bc:	ffffffff 	.word	0xffffffff
    10c0:	ffffffff 	.word	0xffffffff
    10c4:	ffffffff 	.word	0xffffffff
    10c8:	ffffffff 	.word	0xffffffff
    10cc:	ffffffff 	.word	0xffffffff
    10d0:	ffffffff 	.word	0xffffffff
    10d4:	ffffffff 	.word	0xffffffff
    10d8:	ffffffff 	.word	0xffffffff
    10dc:	ffffffff 	.word	0xffffffff
    10e0:	ffffffff 	.word	0xffffffff
    10e4:	ffffffff 	.word	0xffffffff
    10e8:	ffffffff 	.word	0xffffffff
    10ec:	ffffffff 	.word	0xffffffff
    10f0:	ffffffff 	.word	0xffffffff
    10f4:	ffffffff 	.word	0xffffffff
    10f8:	ffffffff 	.word	0xffffffff
    10fc:	ffffffff 	.word	0xffffffff
    1100:	ffffffff 	.word	0xffffffff
    1104:	ffffffff 	.word	0xffffffff
    1108:	ffffffff 	.word	0xffffffff
    110c:	ffffffff 	.word	0xffffffff
    1110:	ffffffff 	.word	0xffffffff
    1114:	ffffffff 	.word	0xffffffff
    1118:	ffffffff 	.word	0xffffffff
    111c:	ffffffff 	.word	0xffffffff
    1120:	ffffffff 	.word	0xffffffff
    1124:	ffffffff 	.word	0xffffffff
    1128:	ffffffff 	.word	0xffffffff
    112c:	ffffffff 	.word	0xffffffff
    1130:	ffffffff 	.word	0xffffffff
    1134:	ffffffff 	.word	0xffffffff
    1138:	ffffffff 	.word	0xffffffff
    113c:	ffffffff 	.word	0xffffffff
    1140:	ffffffff 	.word	0xffffffff
    1144:	ffffffff 	.word	0xffffffff
    1148:	ffffffff 	.word	0xffffffff
    114c:	ffffffff 	.word	0xffffffff
    1150:	ffffffff 	.word	0xffffffff
    1154:	ffffffff 	.word	0xffffffff
    1158:	ffffffff 	.word	0xffffffff
    115c:	ffffffff 	.word	0xffffffff
    1160:	ffffffff 	.word	0xffffffff
    1164:	ffffffff 	.word	0xffffffff
    1168:	ffffffff 	.word	0xffffffff
    116c:	ffffffff 	.word	0xffffffff
    1170:	ffffffff 	.word	0xffffffff
    1174:	ffffffff 	.word	0xffffffff
    1178:	ffffffff 	.word	0xffffffff
    117c:	ffffffff 	.word	0xffffffff
    1180:	ffffffff 	.word	0xffffffff
    1184:	ffffffff 	.word	0xffffffff
    1188:	ffffffff 	.word	0xffffffff
    118c:	ffffffff 	.word	0xffffffff
    1190:	ffffffff 	.word	0xffffffff
    1194:	ffffffff 	.word	0xffffffff
    1198:	ffffffff 	.word	0xffffffff
    119c:	ffffffff 	.word	0xffffffff
    11a0:	ffffffff 	.word	0xffffffff
    11a4:	ffffffff 	.word	0xffffffff
    11a8:	ffffffff 	.word	0xffffffff
    11ac:	ffffffff 	.word	0xffffffff
    11b0:	ffffffff 	.word	0xffffffff
    11b4:	ffffffff 	.word	0xffffffff
    11b8:	ffffffff 	.word	0xffffffff
    11bc:	ffffffff 	.word	0xffffffff
    11c0:	ffffffff 	.word	0xffffffff
    11c4:	ffffffff 	.word	0xffffffff
    11c8:	ffffffff 	.word	0xffffffff
    11cc:	ffffffff 	.word	0xffffffff
    11d0:	ffffffff 	.word	0xffffffff
    11d4:	ffffffff 	.word	0xffffffff
    11d8:	ffffffff 	.word	0xffffffff
    11dc:	ffffffff 	.word	0xffffffff
    11e0:	ffffffff 	.word	0xffffffff
    11e4:	ffffffff 	.word	0xffffffff
    11e8:	ffffffff 	.word	0xffffffff
    11ec:	ffffffff 	.word	0xffffffff
    11f0:	ffffffff 	.word	0xffffffff
    11f4:	ffffffff 	.word	0xffffffff
    11f8:	ffffffff 	.word	0xffffffff
    11fc:	ffffffff 	.word	0xffffffff
    1200:	ffffffff 	.word	0xffffffff
    1204:	ffffffff 	.word	0xffffffff
    1208:	ffffffff 	.word	0xffffffff
    120c:	ffffffff 	.word	0xffffffff
    1210:	ffffffff 	.word	0xffffffff
    1214:	ffffffff 	.word	0xffffffff
    1218:	ffffffff 	.word	0xffffffff
    121c:	ffffffff 	.word	0xffffffff
    1220:	ffffffff 	.word	0xffffffff
    1224:	ffffffff 	.word	0xffffffff
    1228:	ffffffff 	.word	0xffffffff
    122c:	ffffffff 	.word	0xffffffff
    1230:	ffffffff 	.word	0xffffffff
    1234:	ffffffff 	.word	0xffffffff
    1238:	ffffffff 	.word	0xffffffff
    123c:	ffffffff 	.word	0xffffffff
    1240:	ffffffff 	.word	0xffffffff
    1244:	ffffffff 	.word	0xffffffff
    1248:	ffffffff 	.word	0xffffffff
    124c:	ffffffff 	.word	0xffffffff
    1250:	ffffffff 	.word	0xffffffff
    1254:	ffffffff 	.word	0xffffffff
    1258:	ffffffff 	.word	0xffffffff
    125c:	ffffffff 	.word	0xffffffff
    1260:	ffffffff 	.word	0xffffffff
    1264:	ffffffff 	.word	0xffffffff
    1268:	ffffffff 	.word	0xffffffff
    126c:	ffffffff 	.word	0xffffffff
    1270:	ffffffff 	.word	0xffffffff
    1274:	ffffffff 	.word	0xffffffff
    1278:	ffffffff 	.word	0xffffffff
    127c:	ffffffff 	.word	0xffffffff
    1280:	ffffffff 	.word	0xffffffff
    1284:	ffffffff 	.word	0xffffffff
    1288:	ffffffff 	.word	0xffffffff
    128c:	ffffffff 	.word	0xffffffff
    1290:	ffffffff 	.word	0xffffffff
    1294:	ffffffff 	.word	0xffffffff
    1298:	ffffffff 	.word	0xffffffff
    129c:	ffffffff 	.word	0xffffffff
    12a0:	ffffffff 	.word	0xffffffff
    12a4:	ffffffff 	.word	0xffffffff
    12a8:	ffffffff 	.word	0xffffffff
    12ac:	ffffffff 	.word	0xffffffff
    12b0:	ffffffff 	.word	0xffffffff
    12b4:	ffffffff 	.word	0xffffffff
    12b8:	ffffffff 	.word	0xffffffff
    12bc:	ffffffff 	.word	0xffffffff
    12c0:	ffffffff 	.word	0xffffffff
    12c4:	ffffffff 	.word	0xffffffff
    12c8:	ffffffff 	.word	0xffffffff
    12cc:	ffffffff 	.word	0xffffffff
    12d0:	ffffffff 	.word	0xffffffff
    12d4:	ffffffff 	.word	0xffffffff
    12d8:	ffffffff 	.word	0xffffffff
    12dc:	ffffffff 	.word	0xffffffff
    12e0:	ffffffff 	.word	0xffffffff
    12e4:	ffffffff 	.word	0xffffffff
    12e8:	ffffffff 	.word	0xffffffff
    12ec:	ffffffff 	.word	0xffffffff
    12f0:	ffffffff 	.word	0xffffffff
    12f4:	ffffffff 	.word	0xffffffff
    12f8:	ffffffff 	.word	0xffffffff
    12fc:	ffffffff 	.word	0xffffffff
    1300:	ffffffff 	.word	0xffffffff
    1304:	ffffffff 	.word	0xffffffff
    1308:	ffffffff 	.word	0xffffffff
    130c:	ffffffff 	.word	0xffffffff
    1310:	ffffffff 	.word	0xffffffff
    1314:	ffffffff 	.word	0xffffffff
    1318:	ffffffff 	.word	0xffffffff
    131c:	ffffffff 	.word	0xffffffff
    1320:	ffffffff 	.word	0xffffffff
    1324:	ffffffff 	.word	0xffffffff
    1328:	ffffffff 	.word	0xffffffff
    132c:	ffffffff 	.word	0xffffffff
    1330:	ffffffff 	.word	0xffffffff
    1334:	ffffffff 	.word	0xffffffff
    1338:	ffffffff 	.word	0xffffffff
    133c:	ffffffff 	.word	0xffffffff
    1340:	ffffffff 	.word	0xffffffff
    1344:	ffffffff 	.word	0xffffffff
    1348:	ffffffff 	.word	0xffffffff
    134c:	ffffffff 	.word	0xffffffff
    1350:	ffffffff 	.word	0xffffffff
    1354:	ffffffff 	.word	0xffffffff
    1358:	ffffffff 	.word	0xffffffff
    135c:	ffffffff 	.word	0xffffffff
    1360:	ffffffff 	.word	0xffffffff
    1364:	ffffffff 	.word	0xffffffff
    1368:	ffffffff 	.word	0xffffffff
    136c:	ffffffff 	.word	0xffffffff
    1370:	ffffffff 	.word	0xffffffff
    1374:	ffffffff 	.word	0xffffffff
    1378:	ffffffff 	.word	0xffffffff
    137c:	ffffffff 	.word	0xffffffff
    1380:	ffffffff 	.word	0xffffffff
    1384:	ffffffff 	.word	0xffffffff
    1388:	ffffffff 	.word	0xffffffff
    138c:	ffffffff 	.word	0xffffffff
    1390:	ffffffff 	.word	0xffffffff
    1394:	ffffffff 	.word	0xffffffff
    1398:	ffffffff 	.word	0xffffffff
    139c:	ffffffff 	.word	0xffffffff
    13a0:	ffffffff 	.word	0xffffffff
    13a4:	ffffffff 	.word	0xffffffff
    13a8:	ffffffff 	.word	0xffffffff
    13ac:	ffffffff 	.word	0xffffffff
    13b0:	ffffffff 	.word	0xffffffff
    13b4:	ffffffff 	.word	0xffffffff
    13b8:	ffffffff 	.word	0xffffffff
    13bc:	ffffffff 	.word	0xffffffff
    13c0:	ffffffff 	.word	0xffffffff
    13c4:	ffffffff 	.word	0xffffffff
    13c8:	ffffffff 	.word	0xffffffff
    13cc:	ffffffff 	.word	0xffffffff
    13d0:	ffffffff 	.word	0xffffffff
    13d4:	ffffffff 	.word	0xffffffff
    13d8:	ffffffff 	.word	0xffffffff
    13dc:	ffffffff 	.word	0xffffffff
    13e0:	ffffffff 	.word	0xffffffff
    13e4:	ffffffff 	.word	0xffffffff
    13e8:	ffffffff 	.word	0xffffffff
    13ec:	ffffffff 	.word	0xffffffff
    13f0:	ffffffff 	.word	0xffffffff
    13f4:	ffffffff 	.word	0xffffffff
    13f8:	ffffffff 	.word	0xffffffff
    13fc:	ffffffff 	.word	0xffffffff
    1400:	ffffffff 	.word	0xffffffff
    1404:	ffffffff 	.word	0xffffffff
    1408:	ffffffff 	.word	0xffffffff
    140c:	ffffffff 	.word	0xffffffff
    1410:	ffffffff 	.word	0xffffffff
    1414:	ffffffff 	.word	0xffffffff
    1418:	ffffffff 	.word	0xffffffff
    141c:	ffffffff 	.word	0xffffffff
    1420:	ffffffff 	.word	0xffffffff
    1424:	ffffffff 	.word	0xffffffff
    1428:	ffffffff 	.word	0xffffffff
    142c:	ffffffff 	.word	0xffffffff
    1430:	ffffffff 	.word	0xffffffff
    1434:	ffffffff 	.word	0xffffffff
    1438:	ffffffff 	.word	0xffffffff
    143c:	ffffffff 	.word	0xffffffff
    1440:	ffffffff 	.word	0xffffffff
    1444:	ffffffff 	.word	0xffffffff
    1448:	ffffffff 	.word	0xffffffff
    144c:	ffffffff 	.word	0xffffffff
    1450:	ffffffff 	.word	0xffffffff
    1454:	ffffffff 	.word	0xffffffff
    1458:	ffffffff 	.word	0xffffffff
    145c:	ffffffff 	.word	0xffffffff
    1460:	ffffffff 	.word	0xffffffff
    1464:	ffffffff 	.word	0xffffffff
    1468:	ffffffff 	.word	0xffffffff
    146c:	ffffffff 	.word	0xffffffff
    1470:	ffffffff 	.word	0xffffffff
    1474:	ffffffff 	.word	0xffffffff
    1478:	ffffffff 	.word	0xffffffff
    147c:	ffffffff 	.word	0xffffffff
    1480:	ffffffff 	.word	0xffffffff
    1484:	ffffffff 	.word	0xffffffff
    1488:	ffffffff 	.word	0xffffffff
    148c:	ffffffff 	.word	0xffffffff
    1490:	ffffffff 	.word	0xffffffff
    1494:	ffffffff 	.word	0xffffffff
    1498:	ffffffff 	.word	0xffffffff
    149c:	ffffffff 	.word	0xffffffff
    14a0:	ffffffff 	.word	0xffffffff
    14a4:	ffffffff 	.word	0xffffffff
    14a8:	ffffffff 	.word	0xffffffff
    14ac:	ffffffff 	.word	0xffffffff
    14b0:	ffffffff 	.word	0xffffffff
    14b4:	ffffffff 	.word	0xffffffff
    14b8:	ffffffff 	.word	0xffffffff
    14bc:	ffffffff 	.word	0xffffffff
    14c0:	ffffffff 	.word	0xffffffff
    14c4:	ffffffff 	.word	0xffffffff
    14c8:	ffffffff 	.word	0xffffffff
    14cc:	ffffffff 	.word	0xffffffff
    14d0:	ffffffff 	.word	0xffffffff
    14d4:	ffffffff 	.word	0xffffffff
    14d8:	ffffffff 	.word	0xffffffff
    14dc:	ffffffff 	.word	0xffffffff
    14e0:	ffffffff 	.word	0xffffffff
    14e4:	ffffffff 	.word	0xffffffff
    14e8:	ffffffff 	.word	0xffffffff
    14ec:	ffffffff 	.word	0xffffffff
    14f0:	ffffffff 	.word	0xffffffff
    14f4:	ffffffff 	.word	0xffffffff
    14f8:	ffffffff 	.word	0xffffffff
    14fc:	ffffffff 	.word	0xffffffff
    1500:	ffffffff 	.word	0xffffffff
    1504:	ffffffff 	.word	0xffffffff
    1508:	ffffffff 	.word	0xffffffff
    150c:	ffffffff 	.word	0xffffffff
    1510:	ffffffff 	.word	0xffffffff
    1514:	ffffffff 	.word	0xffffffff
    1518:	ffffffff 	.word	0xffffffff
    151c:	ffffffff 	.word	0xffffffff
    1520:	ffffffff 	.word	0xffffffff
    1524:	ffffffff 	.word	0xffffffff
    1528:	ffffffff 	.word	0xffffffff
    152c:	ffffffff 	.word	0xffffffff
    1530:	ffffffff 	.word	0xffffffff
    1534:	ffffffff 	.word	0xffffffff
    1538:	ffffffff 	.word	0xffffffff
    153c:	ffffffff 	.word	0xffffffff
    1540:	ffffffff 	.word	0xffffffff
    1544:	ffffffff 	.word	0xffffffff
    1548:	ffffffff 	.word	0xffffffff
    154c:	ffffffff 	.word	0xffffffff
    1550:	ffffffff 	.word	0xffffffff
    1554:	ffffffff 	.word	0xffffffff
    1558:	ffffffff 	.word	0xffffffff
    155c:	ffffffff 	.word	0xffffffff
    1560:	ffffffff 	.word	0xffffffff
    1564:	ffffffff 	.word	0xffffffff
    1568:	ffffffff 	.word	0xffffffff
    156c:	ffffffff 	.word	0xffffffff
    1570:	ffffffff 	.word	0xffffffff
    1574:	ffffffff 	.word	0xffffffff
    1578:	ffffffff 	.word	0xffffffff
    157c:	ffffffff 	.word	0xffffffff
    1580:	ffffffff 	.word	0xffffffff
    1584:	ffffffff 	.word	0xffffffff
    1588:	ffffffff 	.word	0xffffffff
    158c:	ffffffff 	.word	0xffffffff
    1590:	ffffffff 	.word	0xffffffff
    1594:	ffffffff 	.word	0xffffffff
    1598:	ffffffff 	.word	0xffffffff
    159c:	ffffffff 	.word	0xffffffff
    15a0:	ffffffff 	.word	0xffffffff
    15a4:	ffffffff 	.word	0xffffffff
    15a8:	ffffffff 	.word	0xffffffff
    15ac:	ffffffff 	.word	0xffffffff
    15b0:	ffffffff 	.word	0xffffffff
    15b4:	ffffffff 	.word	0xffffffff
    15b8:	ffffffff 	.word	0xffffffff
    15bc:	ffffffff 	.word	0xffffffff
    15c0:	ffffffff 	.word	0xffffffff
    15c4:	ffffffff 	.word	0xffffffff
    15c8:	ffffffff 	.word	0xffffffff
    15cc:	ffffffff 	.word	0xffffffff
    15d0:	ffffffff 	.word	0xffffffff
    15d4:	ffffffff 	.word	0xffffffff
    15d8:	ffffffff 	.word	0xffffffff
    15dc:	ffffffff 	.word	0xffffffff
    15e0:	ffffffff 	.word	0xffffffff
    15e4:	ffffffff 	.word	0xffffffff
    15e8:	ffffffff 	.word	0xffffffff
    15ec:	ffffffff 	.word	0xffffffff
    15f0:	ffffffff 	.word	0xffffffff
    15f4:	ffffffff 	.word	0xffffffff
    15f8:	ffffffff 	.word	0xffffffff
    15fc:	ffffffff 	.word	0xffffffff
    1600:	ffffffff 	.word	0xffffffff
    1604:	ffffffff 	.word	0xffffffff
    1608:	ffffffff 	.word	0xffffffff
    160c:	ffffffff 	.word	0xffffffff
    1610:	ffffffff 	.word	0xffffffff
    1614:	ffffffff 	.word	0xffffffff
    1618:	ffffffff 	.word	0xffffffff
    161c:	ffffffff 	.word	0xffffffff
    1620:	ffffffff 	.word	0xffffffff
    1624:	ffffffff 	.word	0xffffffff
    1628:	ffffffff 	.word	0xffffffff
    162c:	ffffffff 	.word	0xffffffff
    1630:	ffffffff 	.word	0xffffffff
    1634:	ffffffff 	.word	0xffffffff
    1638:	ffffffff 	.word	0xffffffff
    163c:	ffffffff 	.word	0xffffffff
    1640:	ffffffff 	.word	0xffffffff
    1644:	ffffffff 	.word	0xffffffff
    1648:	ffffffff 	.word	0xffffffff
    164c:	ffffffff 	.word	0xffffffff
    1650:	ffffffff 	.word	0xffffffff
    1654:	ffffffff 	.word	0xffffffff
    1658:	ffffffff 	.word	0xffffffff
    165c:	ffffffff 	.word	0xffffffff
    1660:	ffffffff 	.word	0xffffffff
    1664:	ffffffff 	.word	0xffffffff
    1668:	ffffffff 	.word	0xffffffff
    166c:	ffffffff 	.word	0xffffffff
    1670:	ffffffff 	.word	0xffffffff
    1674:	ffffffff 	.word	0xffffffff
    1678:	ffffffff 	.word	0xffffffff
    167c:	ffffffff 	.word	0xffffffff
    1680:	ffffffff 	.word	0xffffffff
    1684:	ffffffff 	.word	0xffffffff
    1688:	ffffffff 	.word	0xffffffff
    168c:	ffffffff 	.word	0xffffffff
    1690:	ffffffff 	.word	0xffffffff
    1694:	ffffffff 	.word	0xffffffff
    1698:	ffffffff 	.word	0xffffffff
    169c:	ffffffff 	.word	0xffffffff
    16a0:	ffffffff 	.word	0xffffffff
    16a4:	ffffffff 	.word	0xffffffff
    16a8:	ffffffff 	.word	0xffffffff
    16ac:	ffffffff 	.word	0xffffffff
    16b0:	ffffffff 	.word	0xffffffff
    16b4:	ffffffff 	.word	0xffffffff
    16b8:	ffffffff 	.word	0xffffffff
    16bc:	ffffffff 	.word	0xffffffff
    16c0:	ffffffff 	.word	0xffffffff
    16c4:	ffffffff 	.word	0xffffffff
    16c8:	ffffffff 	.word	0xffffffff
    16cc:	ffffffff 	.word	0xffffffff
    16d0:	ffffffff 	.word	0xffffffff
    16d4:	ffffffff 	.word	0xffffffff
    16d8:	ffffffff 	.word	0xffffffff
    16dc:	ffffffff 	.word	0xffffffff
    16e0:	ffffffff 	.word	0xffffffff
    16e4:	ffffffff 	.word	0xffffffff
    16e8:	ffffffff 	.word	0xffffffff
    16ec:	ffffffff 	.word	0xffffffff
    16f0:	ffffffff 	.word	0xffffffff
    16f4:	ffffffff 	.word	0xffffffff
    16f8:	ffffffff 	.word	0xffffffff
    16fc:	ffffffff 	.word	0xffffffff
    1700:	ffffffff 	.word	0xffffffff
    1704:	ffffffff 	.word	0xffffffff
    1708:	ffffffff 	.word	0xffffffff
    170c:	ffffffff 	.word	0xffffffff
    1710:	ffffffff 	.word	0xffffffff
    1714:	ffffffff 	.word	0xffffffff
    1718:	ffffffff 	.word	0xffffffff
    171c:	ffffffff 	.word	0xffffffff
    1720:	ffffffff 	.word	0xffffffff
    1724:	ffffffff 	.word	0xffffffff
    1728:	ffffffff 	.word	0xffffffff
    172c:	ffffffff 	.word	0xffffffff
    1730:	ffffffff 	.word	0xffffffff
    1734:	ffffffff 	.word	0xffffffff
    1738:	ffffffff 	.word	0xffffffff
    173c:	ffffffff 	.word	0xffffffff
    1740:	ffffffff 	.word	0xffffffff
    1744:	ffffffff 	.word	0xffffffff
    1748:	ffffffff 	.word	0xffffffff
    174c:	ffffffff 	.word	0xffffffff
    1750:	ffffffff 	.word	0xffffffff
    1754:	ffffffff 	.word	0xffffffff
    1758:	ffffffff 	.word	0xffffffff
    175c:	ffffffff 	.word	0xffffffff
    1760:	ffffffff 	.word	0xffffffff
    1764:	ffffffff 	.word	0xffffffff
    1768:	ffffffff 	.word	0xffffffff
    176c:	ffffffff 	.word	0xffffffff
    1770:	ffffffff 	.word	0xffffffff
    1774:	ffffffff 	.word	0xffffffff
    1778:	ffffffff 	.word	0xffffffff
    177c:	ffffffff 	.word	0xffffffff
    1780:	ffffffff 	.word	0xffffffff
    1784:	ffffffff 	.word	0xffffffff
    1788:	ffffffff 	.word	0xffffffff
    178c:	ffffffff 	.word	0xffffffff
    1790:	ffffffff 	.word	0xffffffff
    1794:	ffffffff 	.word	0xffffffff
    1798:	ffffffff 	.word	0xffffffff
    179c:	ffffffff 	.word	0xffffffff
    17a0:	ffffffff 	.word	0xffffffff
    17a4:	ffffffff 	.word	0xffffffff
    17a8:	ffffffff 	.word	0xffffffff
    17ac:	ffffffff 	.word	0xffffffff
    17b0:	ffffffff 	.word	0xffffffff
    17b4:	ffffffff 	.word	0xffffffff
    17b8:	ffffffff 	.word	0xffffffff
    17bc:	ffffffff 	.word	0xffffffff
    17c0:	ffffffff 	.word	0xffffffff
    17c4:	ffffffff 	.word	0xffffffff
    17c8:	ffffffff 	.word	0xffffffff
    17cc:	ffffffff 	.word	0xffffffff
    17d0:	ffffffff 	.word	0xffffffff
    17d4:	ffffffff 	.word	0xffffffff
    17d8:	ffffffff 	.word	0xffffffff
    17dc:	ffffffff 	.word	0xffffffff
    17e0:	ffffffff 	.word	0xffffffff
    17e4:	ffffffff 	.word	0xffffffff
    17e8:	ffffffff 	.word	0xffffffff
    17ec:	ffffffff 	.word	0xffffffff
    17f0:	ffffffff 	.word	0xffffffff
    17f4:	ffffffff 	.word	0xffffffff
    17f8:	ffffffff 	.word	0xffffffff
    17fc:	ffffffff 	.word	0xffffffff
    1800:	ffffffff 	.word	0xffffffff
    1804:	ffffffff 	.word	0xffffffff
    1808:	ffffffff 	.word	0xffffffff
    180c:	ffffffff 	.word	0xffffffff
    1810:	ffffffff 	.word	0xffffffff
    1814:	ffffffff 	.word	0xffffffff
    1818:	ffffffff 	.word	0xffffffff
    181c:	ffffffff 	.word	0xffffffff
    1820:	ffffffff 	.word	0xffffffff
    1824:	ffffffff 	.word	0xffffffff
    1828:	ffffffff 	.word	0xffffffff
    182c:	ffffffff 	.word	0xffffffff
    1830:	ffffffff 	.word	0xffffffff
    1834:	ffffffff 	.word	0xffffffff
    1838:	ffffffff 	.word	0xffffffff
    183c:	ffffffff 	.word	0xffffffff
    1840:	ffffffff 	.word	0xffffffff
    1844:	ffffffff 	.word	0xffffffff
    1848:	ffffffff 	.word	0xffffffff
    184c:	ffffffff 	.word	0xffffffff
    1850:	ffffffff 	.word	0xffffffff
    1854:	ffffffff 	.word	0xffffffff
    1858:	ffffffff 	.word	0xffffffff
    185c:	ffffffff 	.word	0xffffffff
    1860:	ffffffff 	.word	0xffffffff
    1864:	ffffffff 	.word	0xffffffff
    1868:	ffffffff 	.word	0xffffffff
    186c:	ffffffff 	.word	0xffffffff
    1870:	ffffffff 	.word	0xffffffff
    1874:	ffffffff 	.word	0xffffffff
    1878:	ffffffff 	.word	0xffffffff
    187c:	ffffffff 	.word	0xffffffff
    1880:	ffffffff 	.word	0xffffffff
    1884:	ffffffff 	.word	0xffffffff
    1888:	ffffffff 	.word	0xffffffff
    188c:	ffffffff 	.word	0xffffffff
    1890:	ffffffff 	.word	0xffffffff
    1894:	ffffffff 	.word	0xffffffff
    1898:	ffffffff 	.word	0xffffffff
    189c:	ffffffff 	.word	0xffffffff
    18a0:	ffffffff 	.word	0xffffffff
    18a4:	ffffffff 	.word	0xffffffff
    18a8:	ffffffff 	.word	0xffffffff
    18ac:	ffffffff 	.word	0xffffffff
    18b0:	ffffffff 	.word	0xffffffff
    18b4:	ffffffff 	.word	0xffffffff
    18b8:	ffffffff 	.word	0xffffffff
    18bc:	ffffffff 	.word	0xffffffff
    18c0:	ffffffff 	.word	0xffffffff
    18c4:	ffffffff 	.word	0xffffffff
    18c8:	ffffffff 	.word	0xffffffff
    18cc:	ffffffff 	.word	0xffffffff
    18d0:	ffffffff 	.word	0xffffffff
    18d4:	ffffffff 	.word	0xffffffff
    18d8:	ffffffff 	.word	0xffffffff
    18dc:	ffffffff 	.word	0xffffffff
    18e0:	ffffffff 	.word	0xffffffff
    18e4:	ffffffff 	.word	0xffffffff
    18e8:	ffffffff 	.word	0xffffffff
    18ec:	ffffffff 	.word	0xffffffff
    18f0:	ffffffff 	.word	0xffffffff
    18f4:	ffffffff 	.word	0xffffffff
    18f8:	ffffffff 	.word	0xffffffff
    18fc:	ffffffff 	.word	0xffffffff
    1900:	ffffffff 	.word	0xffffffff
    1904:	ffffffff 	.word	0xffffffff
    1908:	ffffffff 	.word	0xffffffff
    190c:	ffffffff 	.word	0xffffffff
    1910:	ffffffff 	.word	0xffffffff
    1914:	ffffffff 	.word	0xffffffff
    1918:	ffffffff 	.word	0xffffffff
    191c:	ffffffff 	.word	0xffffffff
    1920:	ffffffff 	.word	0xffffffff
    1924:	ffffffff 	.word	0xffffffff
    1928:	ffffffff 	.word	0xffffffff
    192c:	ffffffff 	.word	0xffffffff
    1930:	ffffffff 	.word	0xffffffff
    1934:	ffffffff 	.word	0xffffffff
    1938:	ffffffff 	.word	0xffffffff
    193c:	ffffffff 	.word	0xffffffff
    1940:	ffffffff 	.word	0xffffffff
    1944:	ffffffff 	.word	0xffffffff
    1948:	ffffffff 	.word	0xffffffff
    194c:	ffffffff 	.word	0xffffffff
    1950:	ffffffff 	.word	0xffffffff
    1954:	ffffffff 	.word	0xffffffff
    1958:	ffffffff 	.word	0xffffffff
    195c:	ffffffff 	.word	0xffffffff
    1960:	ffffffff 	.word	0xffffffff
    1964:	ffffffff 	.word	0xffffffff
    1968:	ffffffff 	.word	0xffffffff
    196c:	ffffffff 	.word	0xffffffff
    1970:	ffffffff 	.word	0xffffffff
    1974:	ffffffff 	.word	0xffffffff
    1978:	ffffffff 	.word	0xffffffff
    197c:	ffffffff 	.word	0xffffffff
    1980:	ffffffff 	.word	0xffffffff
    1984:	ffffffff 	.word	0xffffffff
    1988:	ffffffff 	.word	0xffffffff
    198c:	ffffffff 	.word	0xffffffff
    1990:	ffffffff 	.word	0xffffffff
    1994:	ffffffff 	.word	0xffffffff
    1998:	ffffffff 	.word	0xffffffff
    199c:	ffffffff 	.word	0xffffffff
    19a0:	ffffffff 	.word	0xffffffff
    19a4:	ffffffff 	.word	0xffffffff
    19a8:	ffffffff 	.word	0xffffffff
    19ac:	ffffffff 	.word	0xffffffff
    19b0:	ffffffff 	.word	0xffffffff
    19b4:	ffffffff 	.word	0xffffffff
    19b8:	ffffffff 	.word	0xffffffff
    19bc:	ffffffff 	.word	0xffffffff
    19c0:	ffffffff 	.word	0xffffffff
    19c4:	ffffffff 	.word	0xffffffff
    19c8:	ffffffff 	.word	0xffffffff
    19cc:	ffffffff 	.word	0xffffffff
    19d0:	ffffffff 	.word	0xffffffff
    19d4:	ffffffff 	.word	0xffffffff
    19d8:	ffffffff 	.word	0xffffffff
    19dc:	ffffffff 	.word	0xffffffff
    19e0:	ffffffff 	.word	0xffffffff
    19e4:	ffffffff 	.word	0xffffffff
    19e8:	ffffffff 	.word	0xffffffff
    19ec:	ffffffff 	.word	0xffffffff
    19f0:	ffffffff 	.word	0xffffffff
    19f4:	ffffffff 	.word	0xffffffff
    19f8:	ffffffff 	.word	0xffffffff
    19fc:	ffffffff 	.word	0xffffffff
    1a00:	ffffffff 	.word	0xffffffff
    1a04:	ffffffff 	.word	0xffffffff
    1a08:	ffffffff 	.word	0xffffffff
    1a0c:	ffffffff 	.word	0xffffffff
    1a10:	ffffffff 	.word	0xffffffff
    1a14:	ffffffff 	.word	0xffffffff
    1a18:	ffffffff 	.word	0xffffffff
    1a1c:	ffffffff 	.word	0xffffffff
    1a20:	ffffffff 	.word	0xffffffff
    1a24:	ffffffff 	.word	0xffffffff
    1a28:	ffffffff 	.word	0xffffffff
    1a2c:	ffffffff 	.word	0xffffffff
    1a30:	ffffffff 	.word	0xffffffff
    1a34:	ffffffff 	.word	0xffffffff
    1a38:	ffffffff 	.word	0xffffffff
    1a3c:	ffffffff 	.word	0xffffffff
    1a40:	ffffffff 	.word	0xffffffff
    1a44:	ffffffff 	.word	0xffffffff
    1a48:	ffffffff 	.word	0xffffffff
    1a4c:	ffffffff 	.word	0xffffffff
    1a50:	ffffffff 	.word	0xffffffff
    1a54:	ffffffff 	.word	0xffffffff
    1a58:	ffffffff 	.word	0xffffffff
    1a5c:	ffffffff 	.word	0xffffffff
    1a60:	ffffffff 	.word	0xffffffff
    1a64:	ffffffff 	.word	0xffffffff
    1a68:	ffffffff 	.word	0xffffffff
    1a6c:	ffffffff 	.word	0xffffffff
    1a70:	ffffffff 	.word	0xffffffff
    1a74:	ffffffff 	.word	0xffffffff
    1a78:	ffffffff 	.word	0xffffffff
    1a7c:	ffffffff 	.word	0xffffffff
    1a80:	ffffffff 	.word	0xffffffff
    1a84:	ffffffff 	.word	0xffffffff
    1a88:	ffffffff 	.word	0xffffffff
    1a8c:	ffffffff 	.word	0xffffffff
    1a90:	ffffffff 	.word	0xffffffff
    1a94:	ffffffff 	.word	0xffffffff
    1a98:	ffffffff 	.word	0xffffffff
    1a9c:	ffffffff 	.word	0xffffffff
    1aa0:	ffffffff 	.word	0xffffffff
    1aa4:	ffffffff 	.word	0xffffffff
    1aa8:	ffffffff 	.word	0xffffffff
    1aac:	ffffffff 	.word	0xffffffff
    1ab0:	ffffffff 	.word	0xffffffff
    1ab4:	ffffffff 	.word	0xffffffff
    1ab8:	ffffffff 	.word	0xffffffff
    1abc:	ffffffff 	.word	0xffffffff
    1ac0:	ffffffff 	.word	0xffffffff
    1ac4:	ffffffff 	.word	0xffffffff
    1ac8:	ffffffff 	.word	0xffffffff
    1acc:	ffffffff 	.word	0xffffffff
    1ad0:	ffffffff 	.word	0xffffffff
    1ad4:	ffffffff 	.word	0xffffffff
    1ad8:	ffffffff 	.word	0xffffffff
    1adc:	ffffffff 	.word	0xffffffff
    1ae0:	ffffffff 	.word	0xffffffff
    1ae4:	ffffffff 	.word	0xffffffff
    1ae8:	ffffffff 	.word	0xffffffff
    1aec:	ffffffff 	.word	0xffffffff
    1af0:	ffffffff 	.word	0xffffffff
    1af4:	ffffffff 	.word	0xffffffff
    1af8:	ffffffff 	.word	0xffffffff
    1afc:	ffffffff 	.word	0xffffffff
    1b00:	ffffffff 	.word	0xffffffff
    1b04:	ffffffff 	.word	0xffffffff
    1b08:	ffffffff 	.word	0xffffffff
    1b0c:	ffffffff 	.word	0xffffffff
    1b10:	ffffffff 	.word	0xffffffff
    1b14:	ffffffff 	.word	0xffffffff
    1b18:	ffffffff 	.word	0xffffffff
    1b1c:	ffffffff 	.word	0xffffffff
    1b20:	ffffffff 	.word	0xffffffff
    1b24:	ffffffff 	.word	0xffffffff
    1b28:	ffffffff 	.word	0xffffffff
    1b2c:	ffffffff 	.word	0xffffffff
    1b30:	ffffffff 	.word	0xffffffff
    1b34:	ffffffff 	.word	0xffffffff
    1b38:	ffffffff 	.word	0xffffffff
    1b3c:	ffffffff 	.word	0xffffffff
    1b40:	ffffffff 	.word	0xffffffff
    1b44:	ffffffff 	.word	0xffffffff
    1b48:	ffffffff 	.word	0xffffffff
    1b4c:	ffffffff 	.word	0xffffffff
    1b50:	ffffffff 	.word	0xffffffff
    1b54:	ffffffff 	.word	0xffffffff
    1b58:	ffffffff 	.word	0xffffffff
    1b5c:	ffffffff 	.word	0xffffffff
    1b60:	ffffffff 	.word	0xffffffff
    1b64:	ffffffff 	.word	0xffffffff
    1b68:	ffffffff 	.word	0xffffffff
    1b6c:	ffffffff 	.word	0xffffffff
    1b70:	ffffffff 	.word	0xffffffff
    1b74:	ffffffff 	.word	0xffffffff
    1b78:	ffffffff 	.word	0xffffffff
    1b7c:	ffffffff 	.word	0xffffffff
    1b80:	ffffffff 	.word	0xffffffff
    1b84:	ffffffff 	.word	0xffffffff
    1b88:	ffffffff 	.word	0xffffffff
    1b8c:	ffffffff 	.word	0xffffffff
    1b90:	ffffffff 	.word	0xffffffff
    1b94:	ffffffff 	.word	0xffffffff
    1b98:	ffffffff 	.word	0xffffffff
    1b9c:	ffffffff 	.word	0xffffffff
    1ba0:	ffffffff 	.word	0xffffffff
    1ba4:	ffffffff 	.word	0xffffffff
    1ba8:	ffffffff 	.word	0xffffffff
    1bac:	ffffffff 	.word	0xffffffff
    1bb0:	ffffffff 	.word	0xffffffff
    1bb4:	ffffffff 	.word	0xffffffff
    1bb8:	ffffffff 	.word	0xffffffff
    1bbc:	ffffffff 	.word	0xffffffff
    1bc0:	ffffffff 	.word	0xffffffff
    1bc4:	ffffffff 	.word	0xffffffff
    1bc8:	ffffffff 	.word	0xffffffff
    1bcc:	ffffffff 	.word	0xffffffff
    1bd0:	ffffffff 	.word	0xffffffff
    1bd4:	ffffffff 	.word	0xffffffff
    1bd8:	ffffffff 	.word	0xffffffff
    1bdc:	ffffffff 	.word	0xffffffff
    1be0:	ffffffff 	.word	0xffffffff
    1be4:	ffffffff 	.word	0xffffffff
    1be8:	ffffffff 	.word	0xffffffff
    1bec:	ffffffff 	.word	0xffffffff
    1bf0:	ffffffff 	.word	0xffffffff
    1bf4:	ffffffff 	.word	0xffffffff
    1bf8:	ffffffff 	.word	0xffffffff
    1bfc:	ffffffff 	.word	0xffffffff
    1c00:	ffffffff 	.word	0xffffffff
    1c04:	ffffffff 	.word	0xffffffff
    1c08:	ffffffff 	.word	0xffffffff
    1c0c:	ffffffff 	.word	0xffffffff
    1c10:	ffffffff 	.word	0xffffffff
    1c14:	ffffffff 	.word	0xffffffff
    1c18:	ffffffff 	.word	0xffffffff
    1c1c:	ffffffff 	.word	0xffffffff
    1c20:	ffffffff 	.word	0xffffffff
    1c24:	ffffffff 	.word	0xffffffff
    1c28:	ffffffff 	.word	0xffffffff
    1c2c:	ffffffff 	.word	0xffffffff
    1c30:	ffffffff 	.word	0xffffffff
    1c34:	ffffffff 	.word	0xffffffff
    1c38:	ffffffff 	.word	0xffffffff
    1c3c:	ffffffff 	.word	0xffffffff
    1c40:	ffffffff 	.word	0xffffffff
    1c44:	ffffffff 	.word	0xffffffff
    1c48:	ffffffff 	.word	0xffffffff
    1c4c:	ffffffff 	.word	0xffffffff
    1c50:	ffffffff 	.word	0xffffffff
    1c54:	ffffffff 	.word	0xffffffff
    1c58:	ffffffff 	.word	0xffffffff
    1c5c:	ffffffff 	.word	0xffffffff
    1c60:	ffffffff 	.word	0xffffffff
    1c64:	ffffffff 	.word	0xffffffff
    1c68:	ffffffff 	.word	0xffffffff
    1c6c:	ffffffff 	.word	0xffffffff
    1c70:	ffffffff 	.word	0xffffffff
    1c74:	ffffffff 	.word	0xffffffff
    1c78:	ffffffff 	.word	0xffffffff
    1c7c:	ffffffff 	.word	0xffffffff
    1c80:	ffffffff 	.word	0xffffffff
    1c84:	ffffffff 	.word	0xffffffff
    1c88:	ffffffff 	.word	0xffffffff
    1c8c:	ffffffff 	.word	0xffffffff
    1c90:	ffffffff 	.word	0xffffffff
    1c94:	ffffffff 	.word	0xffffffff
    1c98:	ffffffff 	.word	0xffffffff
    1c9c:	ffffffff 	.word	0xffffffff
    1ca0:	ffffffff 	.word	0xffffffff
    1ca4:	ffffffff 	.word	0xffffffff
    1ca8:	ffffffff 	.word	0xffffffff
    1cac:	ffffffff 	.word	0xffffffff
    1cb0:	ffffffff 	.word	0xffffffff
    1cb4:	ffffffff 	.word	0xffffffff
    1cb8:	ffffffff 	.word	0xffffffff
    1cbc:	ffffffff 	.word	0xffffffff
    1cc0:	ffffffff 	.word	0xffffffff
    1cc4:	ffffffff 	.word	0xffffffff
    1cc8:	ffffffff 	.word	0xffffffff
    1ccc:	ffffffff 	.word	0xffffffff
    1cd0:	ffffffff 	.word	0xffffffff
    1cd4:	ffffffff 	.word	0xffffffff
    1cd8:	ffffffff 	.word	0xffffffff
    1cdc:	ffffffff 	.word	0xffffffff
    1ce0:	ffffffff 	.word	0xffffffff
    1ce4:	ffffffff 	.word	0xffffffff
    1ce8:	ffffffff 	.word	0xffffffff
    1cec:	ffffffff 	.word	0xffffffff
    1cf0:	ffffffff 	.word	0xffffffff
    1cf4:	ffffffff 	.word	0xffffffff
    1cf8:	ffffffff 	.word	0xffffffff
    1cfc:	ffffffff 	.word	0xffffffff
    1d00:	ffffffff 	.word	0xffffffff
    1d04:	ffffffff 	.word	0xffffffff
    1d08:	ffffffff 	.word	0xffffffff
    1d0c:	ffffffff 	.word	0xffffffff
    1d10:	ffffffff 	.word	0xffffffff
    1d14:	ffffffff 	.word	0xffffffff
    1d18:	ffffffff 	.word	0xffffffff
    1d1c:	ffffffff 	.word	0xffffffff
    1d20:	ffffffff 	.word	0xffffffff
    1d24:	ffffffff 	.word	0xffffffff
    1d28:	ffffffff 	.word	0xffffffff
    1d2c:	ffffffff 	.word	0xffffffff
    1d30:	ffffffff 	.word	0xffffffff
    1d34:	ffffffff 	.word	0xffffffff
    1d38:	ffffffff 	.word	0xffffffff
    1d3c:	ffffffff 	.word	0xffffffff
    1d40:	ffffffff 	.word	0xffffffff
    1d44:	ffffffff 	.word	0xffffffff
    1d48:	ffffffff 	.word	0xffffffff
    1d4c:	ffffffff 	.word	0xffffffff
    1d50:	ffffffff 	.word	0xffffffff
    1d54:	ffffffff 	.word	0xffffffff
    1d58:	ffffffff 	.word	0xffffffff
    1d5c:	ffffffff 	.word	0xffffffff
    1d60:	ffffffff 	.word	0xffffffff
    1d64:	ffffffff 	.word	0xffffffff
    1d68:	ffffffff 	.word	0xffffffff
    1d6c:	ffffffff 	.word	0xffffffff
    1d70:	ffffffff 	.word	0xffffffff
    1d74:	ffffffff 	.word	0xffffffff
    1d78:	ffffffff 	.word	0xffffffff
    1d7c:	ffffffff 	.word	0xffffffff
    1d80:	ffffffff 	.word	0xffffffff
    1d84:	ffffffff 	.word	0xffffffff
    1d88:	ffffffff 	.word	0xffffffff
    1d8c:	ffffffff 	.word	0xffffffff
    1d90:	ffffffff 	.word	0xffffffff
    1d94:	ffffffff 	.word	0xffffffff
    1d98:	ffffffff 	.word	0xffffffff
    1d9c:	ffffffff 	.word	0xffffffff
    1da0:	ffffffff 	.word	0xffffffff
    1da4:	ffffffff 	.word	0xffffffff
    1da8:	ffffffff 	.word	0xffffffff
    1dac:	ffffffff 	.word	0xffffffff
    1db0:	ffffffff 	.word	0xffffffff
    1db4:	ffffffff 	.word	0xffffffff
    1db8:	ffffffff 	.word	0xffffffff
    1dbc:	ffffffff 	.word	0xffffffff
    1dc0:	ffffffff 	.word	0xffffffff
    1dc4:	ffffffff 	.word	0xffffffff
    1dc8:	ffffffff 	.word	0xffffffff
    1dcc:	ffffffff 	.word	0xffffffff
    1dd0:	ffffffff 	.word	0xffffffff
    1dd4:	ffffffff 	.word	0xffffffff
    1dd8:	ffffffff 	.word	0xffffffff
    1ddc:	ffffffff 	.word	0xffffffff
    1de0:	ffffffff 	.word	0xffffffff
    1de4:	ffffffff 	.word	0xffffffff
    1de8:	ffffffff 	.word	0xffffffff
    1dec:	ffffffff 	.word	0xffffffff
    1df0:	ffffffff 	.word	0xffffffff
    1df4:	ffffffff 	.word	0xffffffff
    1df8:	ffffffff 	.word	0xffffffff
    1dfc:	ffffffff 	.word	0xffffffff
    1e00:	ffffffff 	.word	0xffffffff
    1e04:	ffffffff 	.word	0xffffffff
    1e08:	ffffffff 	.word	0xffffffff
    1e0c:	ffffffff 	.word	0xffffffff
    1e10:	ffffffff 	.word	0xffffffff
    1e14:	ffffffff 	.word	0xffffffff
    1e18:	ffffffff 	.word	0xffffffff
    1e1c:	ffffffff 	.word	0xffffffff
    1e20:	ffffffff 	.word	0xffffffff
    1e24:	ffffffff 	.word	0xffffffff
    1e28:	ffffffff 	.word	0xffffffff
    1e2c:	ffffffff 	.word	0xffffffff
    1e30:	ffffffff 	.word	0xffffffff
    1e34:	ffffffff 	.word	0xffffffff
    1e38:	ffffffff 	.word	0xffffffff
    1e3c:	ffffffff 	.word	0xffffffff
    1e40:	ffffffff 	.word	0xffffffff
    1e44:	ffffffff 	.word	0xffffffff
    1e48:	ffffffff 	.word	0xffffffff
    1e4c:	ffffffff 	.word	0xffffffff
    1e50:	ffffffff 	.word	0xffffffff
    1e54:	ffffffff 	.word	0xffffffff
    1e58:	ffffffff 	.word	0xffffffff
    1e5c:	ffffffff 	.word	0xffffffff
    1e60:	ffffffff 	.word	0xffffffff
    1e64:	ffffffff 	.word	0xffffffff
    1e68:	ffffffff 	.word	0xffffffff
    1e6c:	ffffffff 	.word	0xffffffff
    1e70:	ffffffff 	.word	0xffffffff
    1e74:	ffffffff 	.word	0xffffffff
    1e78:	ffffffff 	.word	0xffffffff
    1e7c:	ffffffff 	.word	0xffffffff
    1e80:	ffffffff 	.word	0xffffffff
    1e84:	ffffffff 	.word	0xffffffff
    1e88:	ffffffff 	.word	0xffffffff
    1e8c:	ffffffff 	.word	0xffffffff
    1e90:	ffffffff 	.word	0xffffffff
    1e94:	ffffffff 	.word	0xffffffff
    1e98:	ffffffff 	.word	0xffffffff
    1e9c:	ffffffff 	.word	0xffffffff
    1ea0:	ffffffff 	.word	0xffffffff
    1ea4:	ffffffff 	.word	0xffffffff
    1ea8:	ffffffff 	.word	0xffffffff
    1eac:	ffffffff 	.word	0xffffffff
    1eb0:	ffffffff 	.word	0xffffffff
    1eb4:	ffffffff 	.word	0xffffffff
    1eb8:	ffffffff 	.word	0xffffffff
    1ebc:	ffffffff 	.word	0xffffffff
    1ec0:	ffffffff 	.word	0xffffffff
    1ec4:	ffffffff 	.word	0xffffffff
    1ec8:	ffffffff 	.word	0xffffffff
    1ecc:	ffffffff 	.word	0xffffffff
    1ed0:	ffffffff 	.word	0xffffffff
    1ed4:	ffffffff 	.word	0xffffffff
    1ed8:	ffffffff 	.word	0xffffffff
    1edc:	ffffffff 	.word	0xffffffff
    1ee0:	ffffffff 	.word	0xffffffff
    1ee4:	ffffffff 	.word	0xffffffff
    1ee8:	ffffffff 	.word	0xffffffff
    1eec:	ffffffff 	.word	0xffffffff
    1ef0:	ffffffff 	.word	0xffffffff
    1ef4:	ffffffff 	.word	0xffffffff
    1ef8:	ffffffff 	.word	0xffffffff
    1efc:	ffffffff 	.word	0xffffffff
    1f00:	ffffffff 	.word	0xffffffff
    1f04:	ffffffff 	.word	0xffffffff
    1f08:	ffffffff 	.word	0xffffffff
    1f0c:	ffffffff 	.word	0xffffffff
    1f10:	ffffffff 	.word	0xffffffff
    1f14:	ffffffff 	.word	0xffffffff
    1f18:	ffffffff 	.word	0xffffffff
    1f1c:	ffffffff 	.word	0xffffffff
    1f20:	ffffffff 	.word	0xffffffff
    1f24:	ffffffff 	.word	0xffffffff
    1f28:	ffffffff 	.word	0xffffffff
    1f2c:	ffffffff 	.word	0xffffffff
    1f30:	ffffffff 	.word	0xffffffff
    1f34:	ffffffff 	.word	0xffffffff
    1f38:	ffffffff 	.word	0xffffffff
    1f3c:	ffffffff 	.word	0xffffffff
    1f40:	ffffffff 	.word	0xffffffff
    1f44:	ffffffff 	.word	0xffffffff
    1f48:	ffffffff 	.word	0xffffffff
    1f4c:	ffffffff 	.word	0xffffffff
    1f50:	ffffffff 	.word	0xffffffff
    1f54:	ffffffff 	.word	0xffffffff
    1f58:	ffffffff 	.word	0xffffffff
    1f5c:	ffffffff 	.word	0xffffffff
    1f60:	ffffffff 	.word	0xffffffff
    1f64:	ffffffff 	.word	0xffffffff
    1f68:	ffffffff 	.word	0xffffffff
    1f6c:	ffffffff 	.word	0xffffffff
    1f70:	ffffffff 	.word	0xffffffff
    1f74:	ffffffff 	.word	0xffffffff
    1f78:	ffffffff 	.word	0xffffffff
    1f7c:	ffffffff 	.word	0xffffffff
    1f80:	ffffffff 	.word	0xffffffff
    1f84:	ffffffff 	.word	0xffffffff
    1f88:	ffffffff 	.word	0xffffffff
    1f8c:	ffffffff 	.word	0xffffffff
    1f90:	ffffffff 	.word	0xffffffff
    1f94:	ffffffff 	.word	0xffffffff
    1f98:	ffffffff 	.word	0xffffffff
    1f9c:	ffffffff 	.word	0xffffffff
    1fa0:	ffffffff 	.word	0xffffffff
    1fa4:	ffffffff 	.word	0xffffffff
    1fa8:	ffffffff 	.word	0xffffffff
    1fac:	ffffffff 	.word	0xffffffff
    1fb0:	ffffffff 	.word	0xffffffff
    1fb4:	ffffffff 	.word	0xffffffff
    1fb8:	ffffffff 	.word	0xffffffff
    1fbc:	ffffffff 	.word	0xffffffff
    1fc0:	ffffffff 	.word	0xffffffff
    1fc4:	ffffffff 	.word	0xffffffff
    1fc8:	ffffffff 	.word	0xffffffff
    1fcc:	ffffffff 	.word	0xffffffff
    1fd0:	ffffffff 	.word	0xffffffff
    1fd4:	ffffffff 	.word	0xffffffff
    1fd8:	ffffffff 	.word	0xffffffff
    1fdc:	ffffffff 	.word	0xffffffff
    1fe0:	ffffffff 	.word	0xffffffff
    1fe4:	ffffffff 	.word	0xffffffff
    1fe8:	ffffffff 	.word	0xffffffff
    1fec:	ffffffff 	.word	0xffffffff
    1ff0:	ffffffff 	.word	0xffffffff
    1ff4:	ffffffff 	.word	0xffffffff
    1ff8:	ffffffff 	.word	0xffffffff
    1ffc:	ffffffff 	.word	0xffffffff
    2000:	ffffffff 	.word	0xffffffff
    2004:	ffffffff 	.word	0xffffffff
    2008:	ffffffff 	.word	0xffffffff
    200c:	ffffffff 	.word	0xffffffff
    2010:	ffffffff 	.word	0xffffffff
    2014:	ffffffff 	.word	0xffffffff
    2018:	ffffffff 	.word	0xffffffff
    201c:	ffffffff 	.word	0xffffffff
    2020:	ffffffff 	.word	0xffffffff
    2024:	ffffffff 	.word	0xffffffff
    2028:	ffffffff 	.word	0xffffffff
    202c:	ffffffff 	.word	0xffffffff
    2030:	ffffffff 	.word	0xffffffff
    2034:	ffffffff 	.word	0xffffffff
    2038:	ffffffff 	.word	0xffffffff
    203c:	ffffffff 	.word	0xffffffff
    2040:	ffffffff 	.word	0xffffffff
    2044:	ffffffff 	.word	0xffffffff
    2048:	ffffffff 	.word	0xffffffff
    204c:	ffffffff 	.word	0xffffffff
    2050:	ffffffff 	.word	0xffffffff
    2054:	ffffffff 	.word	0xffffffff
    2058:	ffffffff 	.word	0xffffffff
    205c:	ffffffff 	.word	0xffffffff
    2060:	ffffffff 	.word	0xffffffff
    2064:	ffffffff 	.word	0xffffffff
    2068:	ffffffff 	.word	0xffffffff
    206c:	ffffffff 	.word	0xffffffff
    2070:	ffffffff 	.word	0xffffffff
    2074:	ffffffff 	.word	0xffffffff
    2078:	ffffffff 	.word	0xffffffff
    207c:	ffffffff 	.word	0xffffffff
    2080:	ffffffff 	.word	0xffffffff
    2084:	ffffffff 	.word	0xffffffff
    2088:	ffffffff 	.word	0xffffffff
    208c:	ffffffff 	.word	0xffffffff
    2090:	ffffffff 	.word	0xffffffff
    2094:	ffffffff 	.word	0xffffffff
    2098:	ffffffff 	.word	0xffffffff
    209c:	ffffffff 	.word	0xffffffff
    20a0:	ffffffff 	.word	0xffffffff
    20a4:	ffffffff 	.word	0xffffffff
    20a8:	ffffffff 	.word	0xffffffff
    20ac:	ffffffff 	.word	0xffffffff
    20b0:	ffffffff 	.word	0xffffffff
    20b4:	ffffffff 	.word	0xffffffff
    20b8:	ffffffff 	.word	0xffffffff
    20bc:	ffffffff 	.word	0xffffffff
    20c0:	ffffffff 	.word	0xffffffff
    20c4:	ffffffff 	.word	0xffffffff
    20c8:	ffffffff 	.word	0xffffffff
    20cc:	ffffffff 	.word	0xffffffff
    20d0:	ffffffff 	.word	0xffffffff
    20d4:	ffffffff 	.word	0xffffffff
    20d8:	ffffffff 	.word	0xffffffff
    20dc:	ffffffff 	.word	0xffffffff
    20e0:	ffffffff 	.word	0xffffffff
    20e4:	ffffffff 	.word	0xffffffff
    20e8:	ffffffff 	.word	0xffffffff
    20ec:	ffffffff 	.word	0xffffffff
    20f0:	ffffffff 	.word	0xffffffff
    20f4:	ffffffff 	.word	0xffffffff
    20f8:	ffffffff 	.word	0xffffffff
    20fc:	ffffffff 	.word	0xffffffff
    2100:	ffffffff 	.word	0xffffffff
    2104:	ffffffff 	.word	0xffffffff
    2108:	ffffffff 	.word	0xffffffff
    210c:	ffffffff 	.word	0xffffffff
    2110:	ffffffff 	.word	0xffffffff
    2114:	ffffffff 	.word	0xffffffff
    2118:	ffffffff 	.word	0xffffffff
    211c:	ffffffff 	.word	0xffffffff
    2120:	ffffffff 	.word	0xffffffff
    2124:	ffffffff 	.word	0xffffffff
    2128:	ffffffff 	.word	0xffffffff
    212c:	ffffffff 	.word	0xffffffff
    2130:	ffffffff 	.word	0xffffffff
    2134:	ffffffff 	.word	0xffffffff
    2138:	ffffffff 	.word	0xffffffff
    213c:	ffffffff 	.word	0xffffffff
    2140:	ffffffff 	.word	0xffffffff
    2144:	ffffffff 	.word	0xffffffff
    2148:	ffffffff 	.word	0xffffffff
    214c:	ffffffff 	.word	0xffffffff
    2150:	ffffffff 	.word	0xffffffff
    2154:	ffffffff 	.word	0xffffffff
    2158:	ffffffff 	.word	0xffffffff
    215c:	ffffffff 	.word	0xffffffff
    2160:	ffffffff 	.word	0xffffffff
    2164:	ffffffff 	.word	0xffffffff
    2168:	ffffffff 	.word	0xffffffff
    216c:	ffffffff 	.word	0xffffffff
    2170:	ffffffff 	.word	0xffffffff
    2174:	ffffffff 	.word	0xffffffff
    2178:	ffffffff 	.word	0xffffffff
    217c:	ffffffff 	.word	0xffffffff
    2180:	ffffffff 	.word	0xffffffff
    2184:	ffffffff 	.word	0xffffffff
    2188:	ffffffff 	.word	0xffffffff
    218c:	ffffffff 	.word	0xffffffff
    2190:	ffffffff 	.word	0xffffffff
    2194:	ffffffff 	.word	0xffffffff
    2198:	ffffffff 	.word	0xffffffff
    219c:	ffffffff 	.word	0xffffffff
    21a0:	ffffffff 	.word	0xffffffff
    21a4:	ffffffff 	.word	0xffffffff
    21a8:	ffffffff 	.word	0xffffffff
    21ac:	ffffffff 	.word	0xffffffff
    21b0:	ffffffff 	.word	0xffffffff
    21b4:	ffffffff 	.word	0xffffffff
    21b8:	ffffffff 	.word	0xffffffff
    21bc:	ffffffff 	.word	0xffffffff
    21c0:	ffffffff 	.word	0xffffffff
    21c4:	ffffffff 	.word	0xffffffff
    21c8:	ffffffff 	.word	0xffffffff
    21cc:	ffffffff 	.word	0xffffffff
    21d0:	ffffffff 	.word	0xffffffff
    21d4:	ffffffff 	.word	0xffffffff
    21d8:	ffffffff 	.word	0xffffffff
    21dc:	ffffffff 	.word	0xffffffff
    21e0:	ffffffff 	.word	0xffffffff
    21e4:	ffffffff 	.word	0xffffffff
    21e8:	ffffffff 	.word	0xffffffff
    21ec:	ffffffff 	.word	0xffffffff
    21f0:	ffffffff 	.word	0xffffffff
    21f4:	ffffffff 	.word	0xffffffff
    21f8:	ffffffff 	.word	0xffffffff
    21fc:	ffffffff 	.word	0xffffffff
    2200:	ffffffff 	.word	0xffffffff
    2204:	ffffffff 	.word	0xffffffff
    2208:	ffffffff 	.word	0xffffffff
    220c:	ffffffff 	.word	0xffffffff
    2210:	ffffffff 	.word	0xffffffff
    2214:	ffffffff 	.word	0xffffffff
    2218:	ffffffff 	.word	0xffffffff
    221c:	ffffffff 	.word	0xffffffff
    2220:	ffffffff 	.word	0xffffffff
    2224:	ffffffff 	.word	0xffffffff
    2228:	ffffffff 	.word	0xffffffff
    222c:	ffffffff 	.word	0xffffffff
    2230:	ffffffff 	.word	0xffffffff
    2234:	ffffffff 	.word	0xffffffff
    2238:	ffffffff 	.word	0xffffffff
    223c:	ffffffff 	.word	0xffffffff
    2240:	ffffffff 	.word	0xffffffff
    2244:	ffffffff 	.word	0xffffffff
    2248:	ffffffff 	.word	0xffffffff
    224c:	ffffffff 	.word	0xffffffff
    2250:	ffffffff 	.word	0xffffffff
    2254:	ffffffff 	.word	0xffffffff
    2258:	ffffffff 	.word	0xffffffff
    225c:	ffffffff 	.word	0xffffffff
    2260:	ffffffff 	.word	0xffffffff
    2264:	ffffffff 	.word	0xffffffff
    2268:	ffffffff 	.word	0xffffffff
    226c:	ffffffff 	.word	0xffffffff
    2270:	ffffffff 	.word	0xffffffff
    2274:	ffffffff 	.word	0xffffffff
    2278:	ffffffff 	.word	0xffffffff
    227c:	ffffffff 	.word	0xffffffff
    2280:	ffffffff 	.word	0xffffffff
    2284:	ffffffff 	.word	0xffffffff
    2288:	ffffffff 	.word	0xffffffff
    228c:	ffffffff 	.word	0xffffffff
    2290:	ffffffff 	.word	0xffffffff
    2294:	ffffffff 	.word	0xffffffff
    2298:	ffffffff 	.word	0xffffffff
    229c:	ffffffff 	.word	0xffffffff
    22a0:	ffffffff 	.word	0xffffffff
    22a4:	ffffffff 	.word	0xffffffff
    22a8:	ffffffff 	.word	0xffffffff
    22ac:	ffffffff 	.word	0xffffffff
    22b0:	ffffffff 	.word	0xffffffff
    22b4:	ffffffff 	.word	0xffffffff
    22b8:	ffffffff 	.word	0xffffffff
    22bc:	ffffffff 	.word	0xffffffff
    22c0:	ffffffff 	.word	0xffffffff
    22c4:	ffffffff 	.word	0xffffffff
    22c8:	ffffffff 	.word	0xffffffff
    22cc:	ffffffff 	.word	0xffffffff
    22d0:	ffffffff 	.word	0xffffffff
    22d4:	ffffffff 	.word	0xffffffff
    22d8:	ffffffff 	.word	0xffffffff
    22dc:	ffffffff 	.word	0xffffffff
    22e0:	ffffffff 	.word	0xffffffff
    22e4:	ffffffff 	.word	0xffffffff
    22e8:	ffffffff 	.word	0xffffffff
    22ec:	ffffffff 	.word	0xffffffff
    22f0:	ffffffff 	.word	0xffffffff
    22f4:	ffffffff 	.word	0xffffffff
    22f8:	ffffffff 	.word	0xffffffff
    22fc:	ffffffff 	.word	0xffffffff
    2300:	ffffffff 	.word	0xffffffff
    2304:	ffffffff 	.word	0xffffffff
    2308:	ffffffff 	.word	0xffffffff
    230c:	ffffffff 	.word	0xffffffff
    2310:	ffffffff 	.word	0xffffffff
    2314:	ffffffff 	.word	0xffffffff
    2318:	ffffffff 	.word	0xffffffff
    231c:	ffffffff 	.word	0xffffffff
    2320:	ffffffff 	.word	0xffffffff
    2324:	ffffffff 	.word	0xffffffff
    2328:	ffffffff 	.word	0xffffffff
    232c:	ffffffff 	.word	0xffffffff
    2330:	ffffffff 	.word	0xffffffff
    2334:	ffffffff 	.word	0xffffffff
    2338:	ffffffff 	.word	0xffffffff
    233c:	ffffffff 	.word	0xffffffff
    2340:	ffffffff 	.word	0xffffffff
    2344:	ffffffff 	.word	0xffffffff
    2348:	ffffffff 	.word	0xffffffff
    234c:	ffffffff 	.word	0xffffffff
    2350:	ffffffff 	.word	0xffffffff
    2354:	ffffffff 	.word	0xffffffff
    2358:	ffffffff 	.word	0xffffffff
    235c:	ffffffff 	.word	0xffffffff
    2360:	ffffffff 	.word	0xffffffff
    2364:	ffffffff 	.word	0xffffffff
    2368:	ffffffff 	.word	0xffffffff
    236c:	ffffffff 	.word	0xffffffff
    2370:	ffffffff 	.word	0xffffffff
    2374:	ffffffff 	.word	0xffffffff
    2378:	ffffffff 	.word	0xffffffff
    237c:	ffffffff 	.word	0xffffffff
    2380:	ffffffff 	.word	0xffffffff
    2384:	ffffffff 	.word	0xffffffff
    2388:	ffffffff 	.word	0xffffffff
    238c:	ffffffff 	.word	0xffffffff
    2390:	ffffffff 	.word	0xffffffff
    2394:	ffffffff 	.word	0xffffffff
    2398:	ffffffff 	.word	0xffffffff
    239c:	ffffffff 	.word	0xffffffff
    23a0:	ffffffff 	.word	0xffffffff
    23a4:	ffffffff 	.word	0xffffffff
    23a8:	ffffffff 	.word	0xffffffff
    23ac:	ffffffff 	.word	0xffffffff
    23b0:	ffffffff 	.word	0xffffffff
    23b4:	ffffffff 	.word	0xffffffff
    23b8:	ffffffff 	.word	0xffffffff
    23bc:	ffffffff 	.word	0xffffffff
    23c0:	ffffffff 	.word	0xffffffff
    23c4:	ffffffff 	.word	0xffffffff
    23c8:	ffffffff 	.word	0xffffffff
    23cc:	ffffffff 	.word	0xffffffff
    23d0:	ffffffff 	.word	0xffffffff
    23d4:	ffffffff 	.word	0xffffffff
    23d8:	ffffffff 	.word	0xffffffff
    23dc:	ffffffff 	.word	0xffffffff
    23e0:	ffffffff 	.word	0xffffffff
    23e4:	ffffffff 	.word	0xffffffff
    23e8:	ffffffff 	.word	0xffffffff
    23ec:	ffffffff 	.word	0xffffffff
    23f0:	ffffffff 	.word	0xffffffff
    23f4:	ffffffff 	.word	0xffffffff
    23f8:	ffffffff 	.word	0xffffffff
    23fc:	ffffffff 	.word	0xffffffff
    2400:	ffffffff 	.word	0xffffffff
    2404:	ffffffff 	.word	0xffffffff
    2408:	ffffffff 	.word	0xffffffff
    240c:	ffffffff 	.word	0xffffffff
    2410:	ffffffff 	.word	0xffffffff
    2414:	ffffffff 	.word	0xffffffff
    2418:	ffffffff 	.word	0xffffffff
    241c:	ffffffff 	.word	0xffffffff
    2420:	ffffffff 	.word	0xffffffff
    2424:	ffffffff 	.word	0xffffffff
    2428:	ffffffff 	.word	0xffffffff
    242c:	ffffffff 	.word	0xffffffff
    2430:	ffffffff 	.word	0xffffffff
    2434:	ffffffff 	.word	0xffffffff
    2438:	ffffffff 	.word	0xffffffff
    243c:	ffffffff 	.word	0xffffffff
    2440:	ffffffff 	.word	0xffffffff
    2444:	ffffffff 	.word	0xffffffff
    2448:	ffffffff 	.word	0xffffffff
    244c:	ffffffff 	.word	0xffffffff
    2450:	ffffffff 	.word	0xffffffff
    2454:	ffffffff 	.word	0xffffffff
    2458:	ffffffff 	.word	0xffffffff
    245c:	ffffffff 	.word	0xffffffff
    2460:	ffffffff 	.word	0xffffffff
    2464:	ffffffff 	.word	0xffffffff
    2468:	ffffffff 	.word	0xffffffff
    246c:	ffffffff 	.word	0xffffffff
    2470:	ffffffff 	.word	0xffffffff
    2474:	ffffffff 	.word	0xffffffff
    2478:	ffffffff 	.word	0xffffffff
    247c:	ffffffff 	.word	0xffffffff
    2480:	ffffffff 	.word	0xffffffff
    2484:	ffffffff 	.word	0xffffffff
    2488:	ffffffff 	.word	0xffffffff
    248c:	ffffffff 	.word	0xffffffff
    2490:	ffffffff 	.word	0xffffffff
    2494:	ffffffff 	.word	0xffffffff
    2498:	ffffffff 	.word	0xffffffff
    249c:	ffffffff 	.word	0xffffffff
    24a0:	ffffffff 	.word	0xffffffff
    24a4:	ffffffff 	.word	0xffffffff
    24a8:	ffffffff 	.word	0xffffffff
    24ac:	ffffffff 	.word	0xffffffff
    24b0:	ffffffff 	.word	0xffffffff
    24b4:	ffffffff 	.word	0xffffffff
    24b8:	ffffffff 	.word	0xffffffff
    24bc:	ffffffff 	.word	0xffffffff
    24c0:	ffffffff 	.word	0xffffffff
    24c4:	ffffffff 	.word	0xffffffff
    24c8:	ffffffff 	.word	0xffffffff
    24cc:	ffffffff 	.word	0xffffffff
    24d0:	ffffffff 	.word	0xffffffff
    24d4:	ffffffff 	.word	0xffffffff
    24d8:	ffffffff 	.word	0xffffffff
    24dc:	ffffffff 	.word	0xffffffff
    24e0:	ffffffff 	.word	0xffffffff
    24e4:	ffffffff 	.word	0xffffffff
    24e8:	ffffffff 	.word	0xffffffff
    24ec:	ffffffff 	.word	0xffffffff
    24f0:	ffffffff 	.word	0xffffffff
    24f4:	ffffffff 	.word	0xffffffff
    24f8:	ffffffff 	.word	0xffffffff
    24fc:	ffffffff 	.word	0xffffffff
    2500:	ffffffff 	.word	0xffffffff
    2504:	ffffffff 	.word	0xffffffff
    2508:	ffffffff 	.word	0xffffffff
    250c:	ffffffff 	.word	0xffffffff
    2510:	ffffffff 	.word	0xffffffff
    2514:	ffffffff 	.word	0xffffffff
    2518:	ffffffff 	.word	0xffffffff
    251c:	ffffffff 	.word	0xffffffff
    2520:	ffffffff 	.word	0xffffffff
    2524:	ffffffff 	.word	0xffffffff
    2528:	ffffffff 	.word	0xffffffff
    252c:	ffffffff 	.word	0xffffffff
    2530:	ffffffff 	.word	0xffffffff
    2534:	ffffffff 	.word	0xffffffff
    2538:	ffffffff 	.word	0xffffffff
    253c:	ffffffff 	.word	0xffffffff
    2540:	ffffffff 	.word	0xffffffff
    2544:	ffffffff 	.word	0xffffffff
    2548:	ffffffff 	.word	0xffffffff
    254c:	ffffffff 	.word	0xffffffff
    2550:	ffffffff 	.word	0xffffffff
    2554:	ffffffff 	.word	0xffffffff
    2558:	ffffffff 	.word	0xffffffff
    255c:	ffffffff 	.word	0xffffffff
    2560:	ffffffff 	.word	0xffffffff
    2564:	ffffffff 	.word	0xffffffff
    2568:	ffffffff 	.word	0xffffffff
    256c:	ffffffff 	.word	0xffffffff
    2570:	ffffffff 	.word	0xffffffff
    2574:	ffffffff 	.word	0xffffffff
    2578:	ffffffff 	.word	0xffffffff
    257c:	ffffffff 	.word	0xffffffff
    2580:	ffffffff 	.word	0xffffffff
    2584:	ffffffff 	.word	0xffffffff
    2588:	ffffffff 	.word	0xffffffff
    258c:	ffffffff 	.word	0xffffffff
    2590:	ffffffff 	.word	0xffffffff
    2594:	ffffffff 	.word	0xffffffff
    2598:	ffffffff 	.word	0xffffffff
    259c:	ffffffff 	.word	0xffffffff
    25a0:	ffffffff 	.word	0xffffffff
    25a4:	ffffffff 	.word	0xffffffff
    25a8:	ffffffff 	.word	0xffffffff
    25ac:	ffffffff 	.word	0xffffffff
    25b0:	ffffffff 	.word	0xffffffff
    25b4:	ffffffff 	.word	0xffffffff
    25b8:	ffffffff 	.word	0xffffffff
    25bc:	ffffffff 	.word	0xffffffff
    25c0:	ffffffff 	.word	0xffffffff
    25c4:	ffffffff 	.word	0xffffffff
    25c8:	ffffffff 	.word	0xffffffff
    25cc:	ffffffff 	.word	0xffffffff
    25d0:	ffffffff 	.word	0xffffffff
    25d4:	ffffffff 	.word	0xffffffff
    25d8:	ffffffff 	.word	0xffffffff
    25dc:	ffffffff 	.word	0xffffffff
    25e0:	ffffffff 	.word	0xffffffff
    25e4:	ffffffff 	.word	0xffffffff
    25e8:	ffffffff 	.word	0xffffffff
    25ec:	ffffffff 	.word	0xffffffff
    25f0:	ffffffff 	.word	0xffffffff
    25f4:	ffffffff 	.word	0xffffffff
    25f8:	ffffffff 	.word	0xffffffff
    25fc:	ffffffff 	.word	0xffffffff
    2600:	ffffffff 	.word	0xffffffff
    2604:	ffffffff 	.word	0xffffffff
    2608:	ffffffff 	.word	0xffffffff
    260c:	ffffffff 	.word	0xffffffff
    2610:	ffffffff 	.word	0xffffffff
    2614:	ffffffff 	.word	0xffffffff
    2618:	ffffffff 	.word	0xffffffff
    261c:	ffffffff 	.word	0xffffffff
    2620:	ffffffff 	.word	0xffffffff
    2624:	ffffffff 	.word	0xffffffff
    2628:	ffffffff 	.word	0xffffffff
    262c:	ffffffff 	.word	0xffffffff
    2630:	ffffffff 	.word	0xffffffff
    2634:	ffffffff 	.word	0xffffffff
    2638:	ffffffff 	.word	0xffffffff
    263c:	ffffffff 	.word	0xffffffff
    2640:	ffffffff 	.word	0xffffffff
    2644:	ffffffff 	.word	0xffffffff
    2648:	ffffffff 	.word	0xffffffff
    264c:	ffffffff 	.word	0xffffffff
    2650:	ffffffff 	.word	0xffffffff
    2654:	ffffffff 	.word	0xffffffff
    2658:	ffffffff 	.word	0xffffffff
    265c:	ffffffff 	.word	0xffffffff
    2660:	ffffffff 	.word	0xffffffff
    2664:	ffffffff 	.word	0xffffffff
    2668:	ffffffff 	.word	0xffffffff
    266c:	ffffffff 	.word	0xffffffff
    2670:	ffffffff 	.word	0xffffffff
    2674:	ffffffff 	.word	0xffffffff
    2678:	ffffffff 	.word	0xffffffff
    267c:	ffffffff 	.word	0xffffffff
    2680:	ffffffff 	.word	0xffffffff
    2684:	ffffffff 	.word	0xffffffff
    2688:	ffffffff 	.word	0xffffffff
    268c:	ffffffff 	.word	0xffffffff
    2690:	ffffffff 	.word	0xffffffff
    2694:	ffffffff 	.word	0xffffffff
    2698:	ffffffff 	.word	0xffffffff
    269c:	ffffffff 	.word	0xffffffff
    26a0:	ffffffff 	.word	0xffffffff
    26a4:	ffffffff 	.word	0xffffffff
    26a8:	ffffffff 	.word	0xffffffff
    26ac:	ffffffff 	.word	0xffffffff
    26b0:	ffffffff 	.word	0xffffffff
    26b4:	ffffffff 	.word	0xffffffff
    26b8:	ffffffff 	.word	0xffffffff
    26bc:	ffffffff 	.word	0xffffffff
    26c0:	ffffffff 	.word	0xffffffff
    26c4:	ffffffff 	.word	0xffffffff
    26c8:	ffffffff 	.word	0xffffffff
    26cc:	ffffffff 	.word	0xffffffff
    26d0:	ffffffff 	.word	0xffffffff
    26d4:	ffffffff 	.word	0xffffffff
    26d8:	ffffffff 	.word	0xffffffff
    26dc:	ffffffff 	.word	0xffffffff
    26e0:	ffffffff 	.word	0xffffffff
    26e4:	ffffffff 	.word	0xffffffff
    26e8:	ffffffff 	.word	0xffffffff
    26ec:	ffffffff 	.word	0xffffffff
    26f0:	ffffffff 	.word	0xffffffff
    26f4:	ffffffff 	.word	0xffffffff
    26f8:	ffffffff 	.word	0xffffffff
    26fc:	ffffffff 	.word	0xffffffff
    2700:	ffffffff 	.word	0xffffffff
    2704:	ffffffff 	.word	0xffffffff
    2708:	ffffffff 	.word	0xffffffff
    270c:	ffffffff 	.word	0xffffffff
    2710:	ffffffff 	.word	0xffffffff
    2714:	ffffffff 	.word	0xffffffff
    2718:	ffffffff 	.word	0xffffffff
    271c:	ffffffff 	.word	0xffffffff
    2720:	ffffffff 	.word	0xffffffff
    2724:	ffffffff 	.word	0xffffffff
    2728:	ffffffff 	.word	0xffffffff
    272c:	ffffffff 	.word	0xffffffff
    2730:	ffffffff 	.word	0xffffffff
    2734:	ffffffff 	.word	0xffffffff
    2738:	ffffffff 	.word	0xffffffff
    273c:	ffffffff 	.word	0xffffffff
    2740:	ffffffff 	.word	0xffffffff
    2744:	ffffffff 	.word	0xffffffff
    2748:	ffffffff 	.word	0xffffffff
    274c:	ffffffff 	.word	0xffffffff
    2750:	ffffffff 	.word	0xffffffff
    2754:	ffffffff 	.word	0xffffffff
    2758:	ffffffff 	.word	0xffffffff
    275c:	ffffffff 	.word	0xffffffff
    2760:	ffffffff 	.word	0xffffffff
    2764:	ffffffff 	.word	0xffffffff
    2768:	ffffffff 	.word	0xffffffff
    276c:	ffffffff 	.word	0xffffffff
    2770:	ffffffff 	.word	0xffffffff
    2774:	ffffffff 	.word	0xffffffff
    2778:	ffffffff 	.word	0xffffffff
    277c:	ffffffff 	.word	0xffffffff
    2780:	ffffffff 	.word	0xffffffff
    2784:	ffffffff 	.word	0xffffffff
    2788:	ffffffff 	.word	0xffffffff
    278c:	ffffffff 	.word	0xffffffff
    2790:	ffffffff 	.word	0xffffffff
    2794:	ffffffff 	.word	0xffffffff
    2798:	ffffffff 	.word	0xffffffff
    279c:	ffffffff 	.word	0xffffffff
    27a0:	ffffffff 	.word	0xffffffff
    27a4:	ffffffff 	.word	0xffffffff
    27a8:	ffffffff 	.word	0xffffffff
    27ac:	ffffffff 	.word	0xffffffff
    27b0:	ffffffff 	.word	0xffffffff
    27b4:	ffffffff 	.word	0xffffffff
    27b8:	ffffffff 	.word	0xffffffff
    27bc:	ffffffff 	.word	0xffffffff
    27c0:	ffffffff 	.word	0xffffffff
    27c4:	ffffffff 	.word	0xffffffff
    27c8:	ffffffff 	.word	0xffffffff
    27cc:	ffffffff 	.word	0xffffffff
    27d0:	ffffffff 	.word	0xffffffff
    27d4:	ffffffff 	.word	0xffffffff
    27d8:	ffffffff 	.word	0xffffffff
    27dc:	ffffffff 	.word	0xffffffff
    27e0:	ffffffff 	.word	0xffffffff
    27e4:	ffffffff 	.word	0xffffffff
    27e8:	ffffffff 	.word	0xffffffff
    27ec:	ffffffff 	.word	0xffffffff
    27f0:	ffffffff 	.word	0xffffffff
    27f4:	ffffffff 	.word	0xffffffff
    27f8:	ffffffff 	.word	0xffffffff
    27fc:	ffffffff 	.word	0xffffffff
    2800:	ffffffff 	.word	0xffffffff
    2804:	ffffffff 	.word	0xffffffff
    2808:	ffffffff 	.word	0xffffffff
    280c:	ffffffff 	.word	0xffffffff
    2810:	ffffffff 	.word	0xffffffff
    2814:	ffffffff 	.word	0xffffffff
    2818:	ffffffff 	.word	0xffffffff
    281c:	ffffffff 	.word	0xffffffff
    2820:	ffffffff 	.word	0xffffffff
    2824:	ffffffff 	.word	0xffffffff
    2828:	ffffffff 	.word	0xffffffff
    282c:	ffffffff 	.word	0xffffffff
    2830:	ffffffff 	.word	0xffffffff
    2834:	ffffffff 	.word	0xffffffff
    2838:	ffffffff 	.word	0xffffffff
    283c:	ffffffff 	.word	0xffffffff
    2840:	ffffffff 	.word	0xffffffff
    2844:	ffffffff 	.word	0xffffffff
    2848:	ffffffff 	.word	0xffffffff
    284c:	ffffffff 	.word	0xffffffff
    2850:	ffffffff 	.word	0xffffffff
    2854:	ffffffff 	.word	0xffffffff
    2858:	ffffffff 	.word	0xffffffff
    285c:	ffffffff 	.word	0xffffffff
    2860:	ffffffff 	.word	0xffffffff
    2864:	ffffffff 	.word	0xffffffff
    2868:	ffffffff 	.word	0xffffffff
    286c:	ffffffff 	.word	0xffffffff
    2870:	ffffffff 	.word	0xffffffff
    2874:	ffffffff 	.word	0xffffffff
    2878:	ffffffff 	.word	0xffffffff
    287c:	ffffffff 	.word	0xffffffff
    2880:	ffffffff 	.word	0xffffffff
    2884:	ffffffff 	.word	0xffffffff
    2888:	ffffffff 	.word	0xffffffff
    288c:	ffffffff 	.word	0xffffffff
    2890:	ffffffff 	.word	0xffffffff
    2894:	ffffffff 	.word	0xffffffff
    2898:	ffffffff 	.word	0xffffffff
    289c:	ffffffff 	.word	0xffffffff
    28a0:	ffffffff 	.word	0xffffffff
    28a4:	ffffffff 	.word	0xffffffff
    28a8:	ffffffff 	.word	0xffffffff
    28ac:	ffffffff 	.word	0xffffffff
    28b0:	ffffffff 	.word	0xffffffff
    28b4:	ffffffff 	.word	0xffffffff
    28b8:	ffffffff 	.word	0xffffffff
    28bc:	ffffffff 	.word	0xffffffff
    28c0:	ffffffff 	.word	0xffffffff
    28c4:	ffffffff 	.word	0xffffffff
    28c8:	ffffffff 	.word	0xffffffff
    28cc:	ffffffff 	.word	0xffffffff
    28d0:	ffffffff 	.word	0xffffffff
    28d4:	ffffffff 	.word	0xffffffff
    28d8:	ffffffff 	.word	0xffffffff
    28dc:	ffffffff 	.word	0xffffffff
    28e0:	ffffffff 	.word	0xffffffff
    28e4:	ffffffff 	.word	0xffffffff
    28e8:	ffffffff 	.word	0xffffffff
    28ec:	ffffffff 	.word	0xffffffff
    28f0:	ffffffff 	.word	0xffffffff
    28f4:	ffffffff 	.word	0xffffffff
    28f8:	ffffffff 	.word	0xffffffff
    28fc:	ffffffff 	.word	0xffffffff
    2900:	ffffffff 	.word	0xffffffff
    2904:	ffffffff 	.word	0xffffffff
    2908:	ffffffff 	.word	0xffffffff
    290c:	ffffffff 	.word	0xffffffff
    2910:	ffffffff 	.word	0xffffffff
    2914:	ffffffff 	.word	0xffffffff
    2918:	ffffffff 	.word	0xffffffff
    291c:	ffffffff 	.word	0xffffffff
    2920:	ffffffff 	.word	0xffffffff
    2924:	ffffffff 	.word	0xffffffff
    2928:	ffffffff 	.word	0xffffffff
    292c:	ffffffff 	.word	0xffffffff
    2930:	ffffffff 	.word	0xffffffff
    2934:	ffffffff 	.word	0xffffffff
    2938:	ffffffff 	.word	0xffffffff
    293c:	ffffffff 	.word	0xffffffff
    2940:	ffffffff 	.word	0xffffffff
    2944:	ffffffff 	.word	0xffffffff
    2948:	ffffffff 	.word	0xffffffff
    294c:	ffffffff 	.word	0xffffffff
    2950:	ffffffff 	.word	0xffffffff
    2954:	ffffffff 	.word	0xffffffff
    2958:	ffffffff 	.word	0xffffffff
    295c:	ffffffff 	.word	0xffffffff
    2960:	ffffffff 	.word	0xffffffff
    2964:	ffffffff 	.word	0xffffffff
    2968:	ffffffff 	.word	0xffffffff
    296c:	ffffffff 	.word	0xffffffff
    2970:	ffffffff 	.word	0xffffffff
    2974:	ffffffff 	.word	0xffffffff
    2978:	ffffffff 	.word	0xffffffff
    297c:	ffffffff 	.word	0xffffffff
    2980:	ffffffff 	.word	0xffffffff
    2984:	ffffffff 	.word	0xffffffff
    2988:	ffffffff 	.word	0xffffffff
    298c:	ffffffff 	.word	0xffffffff
    2990:	ffffffff 	.word	0xffffffff
    2994:	ffffffff 	.word	0xffffffff
    2998:	ffffffff 	.word	0xffffffff
    299c:	ffffffff 	.word	0xffffffff
    29a0:	ffffffff 	.word	0xffffffff
    29a4:	ffffffff 	.word	0xffffffff
    29a8:	ffffffff 	.word	0xffffffff
    29ac:	ffffffff 	.word	0xffffffff
    29b0:	ffffffff 	.word	0xffffffff
    29b4:	ffffffff 	.word	0xffffffff
    29b8:	ffffffff 	.word	0xffffffff
    29bc:	ffffffff 	.word	0xffffffff
    29c0:	ffffffff 	.word	0xffffffff
    29c4:	ffffffff 	.word	0xffffffff
    29c8:	ffffffff 	.word	0xffffffff
    29cc:	ffffffff 	.word	0xffffffff
    29d0:	ffffffff 	.word	0xffffffff
    29d4:	ffffffff 	.word	0xffffffff
    29d8:	ffffffff 	.word	0xffffffff
    29dc:	ffffffff 	.word	0xffffffff
    29e0:	ffffffff 	.word	0xffffffff
    29e4:	ffffffff 	.word	0xffffffff
    29e8:	ffffffff 	.word	0xffffffff
    29ec:	ffffffff 	.word	0xffffffff
    29f0:	ffffffff 	.word	0xffffffff
    29f4:	ffffffff 	.word	0xffffffff
    29f8:	ffffffff 	.word	0xffffffff
    29fc:	ffffffff 	.word	0xffffffff
    2a00:	ffffffff 	.word	0xffffffff
    2a04:	ffffffff 	.word	0xffffffff
    2a08:	ffffffff 	.word	0xffffffff
    2a0c:	ffffffff 	.word	0xffffffff
    2a10:	ffffffff 	.word	0xffffffff
    2a14:	ffffffff 	.word	0xffffffff
    2a18:	ffffffff 	.word	0xffffffff
    2a1c:	ffffffff 	.word	0xffffffff
    2a20:	ffffffff 	.word	0xffffffff
    2a24:	ffffffff 	.word	0xffffffff
    2a28:	ffffffff 	.word	0xffffffff
    2a2c:	ffffffff 	.word	0xffffffff
    2a30:	ffffffff 	.word	0xffffffff
    2a34:	ffffffff 	.word	0xffffffff
    2a38:	ffffffff 	.word	0xffffffff
    2a3c:	ffffffff 	.word	0xffffffff
    2a40:	ffffffff 	.word	0xffffffff
    2a44:	ffffffff 	.word	0xffffffff
    2a48:	ffffffff 	.word	0xffffffff
    2a4c:	ffffffff 	.word	0xffffffff
    2a50:	ffffffff 	.word	0xffffffff
    2a54:	ffffffff 	.word	0xffffffff
    2a58:	ffffffff 	.word	0xffffffff
    2a5c:	ffffffff 	.word	0xffffffff
    2a60:	ffffffff 	.word	0xffffffff
    2a64:	ffffffff 	.word	0xffffffff
    2a68:	ffffffff 	.word	0xffffffff
    2a6c:	ffffffff 	.word	0xffffffff
    2a70:	ffffffff 	.word	0xffffffff
    2a74:	ffffffff 	.word	0xffffffff
    2a78:	ffffffff 	.word	0xffffffff
    2a7c:	ffffffff 	.word	0xffffffff
    2a80:	ffffffff 	.word	0xffffffff
    2a84:	ffffffff 	.word	0xffffffff
    2a88:	ffffffff 	.word	0xffffffff
    2a8c:	ffffffff 	.word	0xffffffff
    2a90:	ffffffff 	.word	0xffffffff
    2a94:	ffffffff 	.word	0xffffffff
    2a98:	ffffffff 	.word	0xffffffff
    2a9c:	ffffffff 	.word	0xffffffff
    2aa0:	ffffffff 	.word	0xffffffff
    2aa4:	ffffffff 	.word	0xffffffff
    2aa8:	ffffffff 	.word	0xffffffff
    2aac:	ffffffff 	.word	0xffffffff
    2ab0:	ffffffff 	.word	0xffffffff
    2ab4:	ffffffff 	.word	0xffffffff
    2ab8:	ffffffff 	.word	0xffffffff
    2abc:	ffffffff 	.word	0xffffffff
    2ac0:	ffffffff 	.word	0xffffffff
    2ac4:	ffffffff 	.word	0xffffffff
    2ac8:	ffffffff 	.word	0xffffffff
    2acc:	ffffffff 	.word	0xffffffff
    2ad0:	ffffffff 	.word	0xffffffff
    2ad4:	ffffffff 	.word	0xffffffff
    2ad8:	ffffffff 	.word	0xffffffff
    2adc:	ffffffff 	.word	0xffffffff
    2ae0:	ffffffff 	.word	0xffffffff
    2ae4:	ffffffff 	.word	0xffffffff
    2ae8:	ffffffff 	.word	0xffffffff
    2aec:	ffffffff 	.word	0xffffffff
    2af0:	ffffffff 	.word	0xffffffff
    2af4:	ffffffff 	.word	0xffffffff
    2af8:	ffffffff 	.word	0xffffffff
    2afc:	ffffffff 	.word	0xffffffff
    2b00:	ffffffff 	.word	0xffffffff
    2b04:	ffffffff 	.word	0xffffffff
    2b08:	ffffffff 	.word	0xffffffff
    2b0c:	ffffffff 	.word	0xffffffff
    2b10:	ffffffff 	.word	0xffffffff
    2b14:	ffffffff 	.word	0xffffffff
    2b18:	ffffffff 	.word	0xffffffff
    2b1c:	ffffffff 	.word	0xffffffff
    2b20:	ffffffff 	.word	0xffffffff
    2b24:	ffffffff 	.word	0xffffffff
    2b28:	ffffffff 	.word	0xffffffff
    2b2c:	ffffffff 	.word	0xffffffff
    2b30:	ffffffff 	.word	0xffffffff
    2b34:	ffffffff 	.word	0xffffffff
    2b38:	ffffffff 	.word	0xffffffff
    2b3c:	ffffffff 	.word	0xffffffff
    2b40:	ffffffff 	.word	0xffffffff
    2b44:	ffffffff 	.word	0xffffffff
    2b48:	ffffffff 	.word	0xffffffff
    2b4c:	ffffffff 	.word	0xffffffff
    2b50:	ffffffff 	.word	0xffffffff
    2b54:	ffffffff 	.word	0xffffffff
    2b58:	ffffffff 	.word	0xffffffff
    2b5c:	ffffffff 	.word	0xffffffff
    2b60:	ffffffff 	.word	0xffffffff
    2b64:	ffffffff 	.word	0xffffffff
    2b68:	ffffffff 	.word	0xffffffff
    2b6c:	ffffffff 	.word	0xffffffff
    2b70:	ffffffff 	.word	0xffffffff
    2b74:	ffffffff 	.word	0xffffffff
    2b78:	ffffffff 	.word	0xffffffff
    2b7c:	ffffffff 	.word	0xffffffff
    2b80:	ffffffff 	.word	0xffffffff
    2b84:	ffffffff 	.word	0xffffffff
    2b88:	ffffffff 	.word	0xffffffff
    2b8c:	ffffffff 	.word	0xffffffff
    2b90:	ffffffff 	.word	0xffffffff
    2b94:	ffffffff 	.word	0xffffffff
    2b98:	ffffffff 	.word	0xffffffff
    2b9c:	ffffffff 	.word	0xffffffff
    2ba0:	ffffffff 	.word	0xffffffff
    2ba4:	ffffffff 	.word	0xffffffff
    2ba8:	ffffffff 	.word	0xffffffff
    2bac:	ffffffff 	.word	0xffffffff
    2bb0:	ffffffff 	.word	0xffffffff
    2bb4:	ffffffff 	.word	0xffffffff
    2bb8:	ffffffff 	.word	0xffffffff
    2bbc:	ffffffff 	.word	0xffffffff
    2bc0:	ffffffff 	.word	0xffffffff
    2bc4:	ffffffff 	.word	0xffffffff
    2bc8:	ffffffff 	.word	0xffffffff
    2bcc:	ffffffff 	.word	0xffffffff
    2bd0:	ffffffff 	.word	0xffffffff
    2bd4:	ffffffff 	.word	0xffffffff
    2bd8:	ffffffff 	.word	0xffffffff
    2bdc:	ffffffff 	.word	0xffffffff
    2be0:	ffffffff 	.word	0xffffffff
    2be4:	ffffffff 	.word	0xffffffff
    2be8:	ffffffff 	.word	0xffffffff
    2bec:	ffffffff 	.word	0xffffffff
    2bf0:	ffffffff 	.word	0xffffffff
    2bf4:	ffffffff 	.word	0xffffffff
    2bf8:	ffffffff 	.word	0xffffffff
    2bfc:	ffffffff 	.word	0xffffffff
    2c00:	ffffffff 	.word	0xffffffff
    2c04:	ffffffff 	.word	0xffffffff
    2c08:	ffffffff 	.word	0xffffffff
    2c0c:	ffffffff 	.word	0xffffffff
    2c10:	ffffffff 	.word	0xffffffff
    2c14:	ffffffff 	.word	0xffffffff
    2c18:	ffffffff 	.word	0xffffffff
    2c1c:	ffffffff 	.word	0xffffffff
    2c20:	ffffffff 	.word	0xffffffff
    2c24:	ffffffff 	.word	0xffffffff
    2c28:	ffffffff 	.word	0xffffffff
    2c2c:	ffffffff 	.word	0xffffffff
    2c30:	ffffffff 	.word	0xffffffff
    2c34:	ffffffff 	.word	0xffffffff
    2c38:	ffffffff 	.word	0xffffffff
    2c3c:	ffffffff 	.word	0xffffffff
    2c40:	ffffffff 	.word	0xffffffff
    2c44:	ffffffff 	.word	0xffffffff
    2c48:	ffffffff 	.word	0xffffffff
    2c4c:	ffffffff 	.word	0xffffffff
    2c50:	ffffffff 	.word	0xffffffff
    2c54:	ffffffff 	.word	0xffffffff
    2c58:	ffffffff 	.word	0xffffffff
    2c5c:	ffffffff 	.word	0xffffffff
    2c60:	ffffffff 	.word	0xffffffff
    2c64:	ffffffff 	.word	0xffffffff
    2c68:	ffffffff 	.word	0xffffffff
    2c6c:	ffffffff 	.word	0xffffffff
    2c70:	ffffffff 	.word	0xffffffff
    2c74:	ffffffff 	.word	0xffffffff
    2c78:	ffffffff 	.word	0xffffffff
    2c7c:	ffffffff 	.word	0xffffffff
    2c80:	ffffffff 	.word	0xffffffff
    2c84:	ffffffff 	.word	0xffffffff
    2c88:	ffffffff 	.word	0xffffffff
    2c8c:	ffffffff 	.word	0xffffffff
    2c90:	ffffffff 	.word	0xffffffff
    2c94:	ffffffff 	.word	0xffffffff
    2c98:	ffffffff 	.word	0xffffffff
    2c9c:	ffffffff 	.word	0xffffffff
    2ca0:	ffffffff 	.word	0xffffffff
    2ca4:	ffffffff 	.word	0xffffffff
    2ca8:	ffffffff 	.word	0xffffffff
    2cac:	ffffffff 	.word	0xffffffff
    2cb0:	ffffffff 	.word	0xffffffff
    2cb4:	ffffffff 	.word	0xffffffff
    2cb8:	ffffffff 	.word	0xffffffff
    2cbc:	ffffffff 	.word	0xffffffff
    2cc0:	ffffffff 	.word	0xffffffff
    2cc4:	ffffffff 	.word	0xffffffff
    2cc8:	ffffffff 	.word	0xffffffff
    2ccc:	ffffffff 	.word	0xffffffff
    2cd0:	ffffffff 	.word	0xffffffff
    2cd4:	ffffffff 	.word	0xffffffff
    2cd8:	ffffffff 	.word	0xffffffff
    2cdc:	ffffffff 	.word	0xffffffff
    2ce0:	ffffffff 	.word	0xffffffff
    2ce4:	ffffffff 	.word	0xffffffff
    2ce8:	ffffffff 	.word	0xffffffff
    2cec:	ffffffff 	.word	0xffffffff
    2cf0:	ffffffff 	.word	0xffffffff
    2cf4:	ffffffff 	.word	0xffffffff
    2cf8:	ffffffff 	.word	0xffffffff
    2cfc:	ffffffff 	.word	0xffffffff
    2d00:	ffffffff 	.word	0xffffffff
    2d04:	ffffffff 	.word	0xffffffff
    2d08:	ffffffff 	.word	0xffffffff
    2d0c:	ffffffff 	.word	0xffffffff
    2d10:	ffffffff 	.word	0xffffffff
    2d14:	ffffffff 	.word	0xffffffff
    2d18:	ffffffff 	.word	0xffffffff
    2d1c:	ffffffff 	.word	0xffffffff
    2d20:	ffffffff 	.word	0xffffffff
    2d24:	ffffffff 	.word	0xffffffff
    2d28:	ffffffff 	.word	0xffffffff
    2d2c:	ffffffff 	.word	0xffffffff
    2d30:	ffffffff 	.word	0xffffffff
    2d34:	ffffffff 	.word	0xffffffff
    2d38:	ffffffff 	.word	0xffffffff
    2d3c:	ffffffff 	.word	0xffffffff
    2d40:	ffffffff 	.word	0xffffffff
    2d44:	ffffffff 	.word	0xffffffff
    2d48:	ffffffff 	.word	0xffffffff
    2d4c:	ffffffff 	.word	0xffffffff
    2d50:	ffffffff 	.word	0xffffffff
    2d54:	ffffffff 	.word	0xffffffff
    2d58:	ffffffff 	.word	0xffffffff
    2d5c:	ffffffff 	.word	0xffffffff
    2d60:	ffffffff 	.word	0xffffffff
    2d64:	ffffffff 	.word	0xffffffff
    2d68:	ffffffff 	.word	0xffffffff
    2d6c:	ffffffff 	.word	0xffffffff
    2d70:	ffffffff 	.word	0xffffffff
    2d74:	ffffffff 	.word	0xffffffff
    2d78:	ffffffff 	.word	0xffffffff
    2d7c:	ffffffff 	.word	0xffffffff
    2d80:	ffffffff 	.word	0xffffffff
    2d84:	ffffffff 	.word	0xffffffff
    2d88:	ffffffff 	.word	0xffffffff
    2d8c:	ffffffff 	.word	0xffffffff
    2d90:	ffffffff 	.word	0xffffffff
    2d94:	ffffffff 	.word	0xffffffff
    2d98:	ffffffff 	.word	0xffffffff
    2d9c:	ffffffff 	.word	0xffffffff
    2da0:	ffffffff 	.word	0xffffffff
    2da4:	ffffffff 	.word	0xffffffff
    2da8:	ffffffff 	.word	0xffffffff
    2dac:	ffffffff 	.word	0xffffffff
    2db0:	ffffffff 	.word	0xffffffff
    2db4:	ffffffff 	.word	0xffffffff
    2db8:	ffffffff 	.word	0xffffffff
    2dbc:	ffffffff 	.word	0xffffffff
    2dc0:	ffffffff 	.word	0xffffffff
    2dc4:	ffffffff 	.word	0xffffffff
    2dc8:	ffffffff 	.word	0xffffffff
    2dcc:	ffffffff 	.word	0xffffffff
    2dd0:	ffffffff 	.word	0xffffffff
    2dd4:	ffffffff 	.word	0xffffffff
    2dd8:	ffffffff 	.word	0xffffffff
    2ddc:	ffffffff 	.word	0xffffffff
    2de0:	ffffffff 	.word	0xffffffff
    2de4:	ffffffff 	.word	0xffffffff
    2de8:	ffffffff 	.word	0xffffffff
    2dec:	ffffffff 	.word	0xffffffff
    2df0:	ffffffff 	.word	0xffffffff
    2df4:	ffffffff 	.word	0xffffffff
    2df8:	ffffffff 	.word	0xffffffff
    2dfc:	ffffffff 	.word	0xffffffff
    2e00:	ffffffff 	.word	0xffffffff
    2e04:	ffffffff 	.word	0xffffffff
    2e08:	ffffffff 	.word	0xffffffff
    2e0c:	ffffffff 	.word	0xffffffff
    2e10:	ffffffff 	.word	0xffffffff
    2e14:	ffffffff 	.word	0xffffffff
    2e18:	ffffffff 	.word	0xffffffff
    2e1c:	ffffffff 	.word	0xffffffff
    2e20:	ffffffff 	.word	0xffffffff
    2e24:	ffffffff 	.word	0xffffffff
    2e28:	ffffffff 	.word	0xffffffff
    2e2c:	ffffffff 	.word	0xffffffff
    2e30:	ffffffff 	.word	0xffffffff
    2e34:	ffffffff 	.word	0xffffffff
    2e38:	ffffffff 	.word	0xffffffff
    2e3c:	ffffffff 	.word	0xffffffff
    2e40:	ffffffff 	.word	0xffffffff
    2e44:	ffffffff 	.word	0xffffffff
    2e48:	ffffffff 	.word	0xffffffff
    2e4c:	ffffffff 	.word	0xffffffff
    2e50:	ffffffff 	.word	0xffffffff
    2e54:	ffffffff 	.word	0xffffffff
    2e58:	ffffffff 	.word	0xffffffff
    2e5c:	ffffffff 	.word	0xffffffff
    2e60:	ffffffff 	.word	0xffffffff
    2e64:	ffffffff 	.word	0xffffffff
    2e68:	ffffffff 	.word	0xffffffff
    2e6c:	ffffffff 	.word	0xffffffff
    2e70:	ffffffff 	.word	0xffffffff
    2e74:	ffffffff 	.word	0xffffffff
    2e78:	ffffffff 	.word	0xffffffff
    2e7c:	ffffffff 	.word	0xffffffff
    2e80:	ffffffff 	.word	0xffffffff
    2e84:	ffffffff 	.word	0xffffffff
    2e88:	ffffffff 	.word	0xffffffff
    2e8c:	ffffffff 	.word	0xffffffff
    2e90:	ffffffff 	.word	0xffffffff
    2e94:	ffffffff 	.word	0xffffffff
    2e98:	ffffffff 	.word	0xffffffff
    2e9c:	ffffffff 	.word	0xffffffff
    2ea0:	ffffffff 	.word	0xffffffff
    2ea4:	ffffffff 	.word	0xffffffff
    2ea8:	ffffffff 	.word	0xffffffff
    2eac:	ffffffff 	.word	0xffffffff
    2eb0:	ffffffff 	.word	0xffffffff
    2eb4:	ffffffff 	.word	0xffffffff
    2eb8:	ffffffff 	.word	0xffffffff
    2ebc:	ffffffff 	.word	0xffffffff
    2ec0:	ffffffff 	.word	0xffffffff
    2ec4:	ffffffff 	.word	0xffffffff
    2ec8:	ffffffff 	.word	0xffffffff
    2ecc:	ffffffff 	.word	0xffffffff
    2ed0:	ffffffff 	.word	0xffffffff
    2ed4:	ffffffff 	.word	0xffffffff
    2ed8:	ffffffff 	.word	0xffffffff
    2edc:	ffffffff 	.word	0xffffffff
    2ee0:	ffffffff 	.word	0xffffffff
    2ee4:	ffffffff 	.word	0xffffffff
    2ee8:	ffffffff 	.word	0xffffffff
    2eec:	ffffffff 	.word	0xffffffff
    2ef0:	ffffffff 	.word	0xffffffff
    2ef4:	ffffffff 	.word	0xffffffff
    2ef8:	ffffffff 	.word	0xffffffff
    2efc:	ffffffff 	.word	0xffffffff
    2f00:	ffffffff 	.word	0xffffffff
    2f04:	ffffffff 	.word	0xffffffff
    2f08:	ffffffff 	.word	0xffffffff
    2f0c:	ffffffff 	.word	0xffffffff
    2f10:	ffffffff 	.word	0xffffffff
    2f14:	ffffffff 	.word	0xffffffff
    2f18:	ffffffff 	.word	0xffffffff
    2f1c:	ffffffff 	.word	0xffffffff
    2f20:	ffffffff 	.word	0xffffffff
    2f24:	ffffffff 	.word	0xffffffff
    2f28:	ffffffff 	.word	0xffffffff
    2f2c:	ffffffff 	.word	0xffffffff
    2f30:	ffffffff 	.word	0xffffffff
    2f34:	ffffffff 	.word	0xffffffff
    2f38:	ffffffff 	.word	0xffffffff
    2f3c:	ffffffff 	.word	0xffffffff
    2f40:	ffffffff 	.word	0xffffffff
    2f44:	ffffffff 	.word	0xffffffff
    2f48:	ffffffff 	.word	0xffffffff
    2f4c:	ffffffff 	.word	0xffffffff
    2f50:	ffffffff 	.word	0xffffffff
    2f54:	ffffffff 	.word	0xffffffff
    2f58:	ffffffff 	.word	0xffffffff
    2f5c:	ffffffff 	.word	0xffffffff
    2f60:	ffffffff 	.word	0xffffffff
    2f64:	ffffffff 	.word	0xffffffff
    2f68:	ffffffff 	.word	0xffffffff
    2f6c:	ffffffff 	.word	0xffffffff
    2f70:	ffffffff 	.word	0xffffffff
    2f74:	ffffffff 	.word	0xffffffff
    2f78:	ffffffff 	.word	0xffffffff
    2f7c:	ffffffff 	.word	0xffffffff
    2f80:	ffffffff 	.word	0xffffffff
    2f84:	ffffffff 	.word	0xffffffff
    2f88:	ffffffff 	.word	0xffffffff
    2f8c:	ffffffff 	.word	0xffffffff
    2f90:	ffffffff 	.word	0xffffffff
    2f94:	ffffffff 	.word	0xffffffff
    2f98:	ffffffff 	.word	0xffffffff
    2f9c:	ffffffff 	.word	0xffffffff
    2fa0:	ffffffff 	.word	0xffffffff
    2fa4:	ffffffff 	.word	0xffffffff
    2fa8:	ffffffff 	.word	0xffffffff
    2fac:	ffffffff 	.word	0xffffffff
    2fb0:	ffffffff 	.word	0xffffffff
    2fb4:	ffffffff 	.word	0xffffffff
    2fb8:	ffffffff 	.word	0xffffffff
    2fbc:	ffffffff 	.word	0xffffffff
    2fc0:	ffffffff 	.word	0xffffffff
    2fc4:	ffffffff 	.word	0xffffffff
    2fc8:	ffffffff 	.word	0xffffffff
    2fcc:	ffffffff 	.word	0xffffffff
    2fd0:	ffffffff 	.word	0xffffffff
    2fd4:	ffffffff 	.word	0xffffffff
    2fd8:	ffffffff 	.word	0xffffffff
    2fdc:	ffffffff 	.word	0xffffffff
    2fe0:	ffffffff 	.word	0xffffffff
    2fe4:	ffffffff 	.word	0xffffffff
    2fe8:	ffffffff 	.word	0xffffffff
    2fec:	ffffffff 	.word	0xffffffff
    2ff0:	ffffffff 	.word	0xffffffff
    2ff4:	ffffffff 	.word	0xffffffff
    2ff8:	ffffffff 	.word	0xffffffff
    2ffc:	ffffffff 	.word	0xffffffff
    3000:	ffffffff 	.word	0xffffffff
    3004:	ffffffff 	.word	0xffffffff
    3008:	ffffffff 	.word	0xffffffff
    300c:	ffffffff 	.word	0xffffffff
    3010:	ffffffff 	.word	0xffffffff
    3014:	ffffffff 	.word	0xffffffff
    3018:	ffffffff 	.word	0xffffffff
    301c:	ffffffff 	.word	0xffffffff
    3020:	ffffffff 	.word	0xffffffff
    3024:	ffffffff 	.word	0xffffffff
    3028:	ffffffff 	.word	0xffffffff
    302c:	ffffffff 	.word	0xffffffff
    3030:	ffffffff 	.word	0xffffffff
    3034:	ffffffff 	.word	0xffffffff
    3038:	ffffffff 	.word	0xffffffff
    303c:	ffffffff 	.word	0xffffffff
    3040:	ffffffff 	.word	0xffffffff
    3044:	ffffffff 	.word	0xffffffff
    3048:	ffffffff 	.word	0xffffffff
    304c:	ffffffff 	.word	0xffffffff
    3050:	ffffffff 	.word	0xffffffff
    3054:	ffffffff 	.word	0xffffffff
    3058:	ffffffff 	.word	0xffffffff
    305c:	ffffffff 	.word	0xffffffff
    3060:	ffffffff 	.word	0xffffffff
    3064:	ffffffff 	.word	0xffffffff
    3068:	ffffffff 	.word	0xffffffff
    306c:	ffffffff 	.word	0xffffffff
    3070:	ffffffff 	.word	0xffffffff
    3074:	ffffffff 	.word	0xffffffff
    3078:	ffffffff 	.word	0xffffffff
    307c:	ffffffff 	.word	0xffffffff
    3080:	ffffffff 	.word	0xffffffff
    3084:	ffffffff 	.word	0xffffffff
    3088:	ffffffff 	.word	0xffffffff
    308c:	ffffffff 	.word	0xffffffff
    3090:	ffffffff 	.word	0xffffffff
    3094:	ffffffff 	.word	0xffffffff
    3098:	ffffffff 	.word	0xffffffff
    309c:	ffffffff 	.word	0xffffffff
    30a0:	ffffffff 	.word	0xffffffff
    30a4:	ffffffff 	.word	0xffffffff
    30a8:	ffffffff 	.word	0xffffffff
    30ac:	ffffffff 	.word	0xffffffff
    30b0:	ffffffff 	.word	0xffffffff
    30b4:	ffffffff 	.word	0xffffffff
    30b8:	ffffffff 	.word	0xffffffff
    30bc:	ffffffff 	.word	0xffffffff
    30c0:	ffffffff 	.word	0xffffffff
    30c4:	ffffffff 	.word	0xffffffff
    30c8:	ffffffff 	.word	0xffffffff
    30cc:	ffffffff 	.word	0xffffffff
    30d0:	ffffffff 	.word	0xffffffff
    30d4:	ffffffff 	.word	0xffffffff
    30d8:	ffffffff 	.word	0xffffffff
    30dc:	ffffffff 	.word	0xffffffff
    30e0:	ffffffff 	.word	0xffffffff
    30e4:	ffffffff 	.word	0xffffffff
    30e8:	ffffffff 	.word	0xffffffff
    30ec:	ffffffff 	.word	0xffffffff
    30f0:	ffffffff 	.word	0xffffffff
    30f4:	ffffffff 	.word	0xffffffff
    30f8:	ffffffff 	.word	0xffffffff
    30fc:	ffffffff 	.word	0xffffffff
    3100:	ffffffff 	.word	0xffffffff
    3104:	ffffffff 	.word	0xffffffff
    3108:	ffffffff 	.word	0xffffffff
    310c:	ffffffff 	.word	0xffffffff
    3110:	ffffffff 	.word	0xffffffff
    3114:	ffffffff 	.word	0xffffffff
    3118:	ffffffff 	.word	0xffffffff
    311c:	ffffffff 	.word	0xffffffff
    3120:	ffffffff 	.word	0xffffffff
    3124:	ffffffff 	.word	0xffffffff
    3128:	ffffffff 	.word	0xffffffff
    312c:	ffffffff 	.word	0xffffffff
    3130:	ffffffff 	.word	0xffffffff
    3134:	ffffffff 	.word	0xffffffff
    3138:	ffffffff 	.word	0xffffffff
    313c:	ffffffff 	.word	0xffffffff
    3140:	ffffffff 	.word	0xffffffff
    3144:	ffffffff 	.word	0xffffffff
    3148:	ffffffff 	.word	0xffffffff
    314c:	ffffffff 	.word	0xffffffff
    3150:	ffffffff 	.word	0xffffffff
    3154:	ffffffff 	.word	0xffffffff
    3158:	ffffffff 	.word	0xffffffff
    315c:	ffffffff 	.word	0xffffffff
    3160:	ffffffff 	.word	0xffffffff
    3164:	ffffffff 	.word	0xffffffff
    3168:	ffffffff 	.word	0xffffffff
    316c:	ffffffff 	.word	0xffffffff
    3170:	ffffffff 	.word	0xffffffff
    3174:	ffffffff 	.word	0xffffffff
    3178:	ffffffff 	.word	0xffffffff
    317c:	ffffffff 	.word	0xffffffff
    3180:	ffffffff 	.word	0xffffffff
    3184:	ffffffff 	.word	0xffffffff
    3188:	ffffffff 	.word	0xffffffff
    318c:	ffffffff 	.word	0xffffffff
    3190:	ffffffff 	.word	0xffffffff
    3194:	ffffffff 	.word	0xffffffff
    3198:	ffffffff 	.word	0xffffffff
    319c:	ffffffff 	.word	0xffffffff
    31a0:	ffffffff 	.word	0xffffffff
    31a4:	ffffffff 	.word	0xffffffff
    31a8:	ffffffff 	.word	0xffffffff
    31ac:	ffffffff 	.word	0xffffffff
    31b0:	ffffffff 	.word	0xffffffff
    31b4:	ffffffff 	.word	0xffffffff
    31b8:	ffffffff 	.word	0xffffffff
    31bc:	ffffffff 	.word	0xffffffff
    31c0:	ffffffff 	.word	0xffffffff
    31c4:	ffffffff 	.word	0xffffffff
    31c8:	ffffffff 	.word	0xffffffff
    31cc:	ffffffff 	.word	0xffffffff
    31d0:	ffffffff 	.word	0xffffffff
    31d4:	ffffffff 	.word	0xffffffff
    31d8:	ffffffff 	.word	0xffffffff
    31dc:	ffffffff 	.word	0xffffffff
    31e0:	ffffffff 	.word	0xffffffff
    31e4:	ffffffff 	.word	0xffffffff
    31e8:	ffffffff 	.word	0xffffffff
    31ec:	ffffffff 	.word	0xffffffff
    31f0:	ffffffff 	.word	0xffffffff
    31f4:	ffffffff 	.word	0xffffffff
    31f8:	ffffffff 	.word	0xffffffff
    31fc:	ffffffff 	.word	0xffffffff
    3200:	ffffffff 	.word	0xffffffff
    3204:	ffffffff 	.word	0xffffffff
    3208:	ffffffff 	.word	0xffffffff
    320c:	ffffffff 	.word	0xffffffff
    3210:	ffffffff 	.word	0xffffffff
    3214:	ffffffff 	.word	0xffffffff
    3218:	ffffffff 	.word	0xffffffff
    321c:	ffffffff 	.word	0xffffffff
    3220:	ffffffff 	.word	0xffffffff
    3224:	ffffffff 	.word	0xffffffff
    3228:	ffffffff 	.word	0xffffffff
    322c:	ffffffff 	.word	0xffffffff
    3230:	ffffffff 	.word	0xffffffff
    3234:	ffffffff 	.word	0xffffffff
    3238:	ffffffff 	.word	0xffffffff
    323c:	ffffffff 	.word	0xffffffff
    3240:	ffffffff 	.word	0xffffffff
    3244:	ffffffff 	.word	0xffffffff
    3248:	ffffffff 	.word	0xffffffff
    324c:	ffffffff 	.word	0xffffffff
    3250:	ffffffff 	.word	0xffffffff
    3254:	ffffffff 	.word	0xffffffff
    3258:	ffffffff 	.word	0xffffffff
    325c:	ffffffff 	.word	0xffffffff
    3260:	ffffffff 	.word	0xffffffff
    3264:	ffffffff 	.word	0xffffffff
    3268:	ffffffff 	.word	0xffffffff
    326c:	ffffffff 	.word	0xffffffff
    3270:	ffffffff 	.word	0xffffffff
    3274:	ffffffff 	.word	0xffffffff
    3278:	ffffffff 	.word	0xffffffff
    327c:	ffffffff 	.word	0xffffffff
    3280:	ffffffff 	.word	0xffffffff
    3284:	ffffffff 	.word	0xffffffff
    3288:	ffffffff 	.word	0xffffffff
    328c:	ffffffff 	.word	0xffffffff
    3290:	ffffffff 	.word	0xffffffff
    3294:	ffffffff 	.word	0xffffffff
    3298:	ffffffff 	.word	0xffffffff
    329c:	ffffffff 	.word	0xffffffff
    32a0:	ffffffff 	.word	0xffffffff
    32a4:	ffffffff 	.word	0xffffffff
    32a8:	ffffffff 	.word	0xffffffff
    32ac:	ffffffff 	.word	0xffffffff
    32b0:	ffffffff 	.word	0xffffffff
    32b4:	ffffffff 	.word	0xffffffff
    32b8:	ffffffff 	.word	0xffffffff
    32bc:	ffffffff 	.word	0xffffffff
    32c0:	ffffffff 	.word	0xffffffff
    32c4:	ffffffff 	.word	0xffffffff
    32c8:	ffffffff 	.word	0xffffffff
    32cc:	ffffffff 	.word	0xffffffff
    32d0:	ffffffff 	.word	0xffffffff
    32d4:	ffffffff 	.word	0xffffffff
    32d8:	ffffffff 	.word	0xffffffff
    32dc:	ffffffff 	.word	0xffffffff
    32e0:	ffffffff 	.word	0xffffffff
    32e4:	ffffffff 	.word	0xffffffff
    32e8:	ffffffff 	.word	0xffffffff
    32ec:	ffffffff 	.word	0xffffffff
    32f0:	ffffffff 	.word	0xffffffff
    32f4:	ffffffff 	.word	0xffffffff
    32f8:	ffffffff 	.word	0xffffffff
    32fc:	ffffffff 	.word	0xffffffff
    3300:	ffffffff 	.word	0xffffffff
    3304:	ffffffff 	.word	0xffffffff
    3308:	ffffffff 	.word	0xffffffff
    330c:	ffffffff 	.word	0xffffffff
    3310:	ffffffff 	.word	0xffffffff
    3314:	ffffffff 	.word	0xffffffff
    3318:	ffffffff 	.word	0xffffffff
    331c:	ffffffff 	.word	0xffffffff
    3320:	ffffffff 	.word	0xffffffff
    3324:	ffffffff 	.word	0xffffffff
    3328:	ffffffff 	.word	0xffffffff
    332c:	ffffffff 	.word	0xffffffff
    3330:	ffffffff 	.word	0xffffffff
    3334:	ffffffff 	.word	0xffffffff
    3338:	ffffffff 	.word	0xffffffff
    333c:	ffffffff 	.word	0xffffffff
    3340:	ffffffff 	.word	0xffffffff
    3344:	ffffffff 	.word	0xffffffff
    3348:	ffffffff 	.word	0xffffffff
    334c:	ffffffff 	.word	0xffffffff
    3350:	ffffffff 	.word	0xffffffff
    3354:	ffffffff 	.word	0xffffffff
    3358:	ffffffff 	.word	0xffffffff
    335c:	ffffffff 	.word	0xffffffff
    3360:	ffffffff 	.word	0xffffffff
    3364:	ffffffff 	.word	0xffffffff
    3368:	ffffffff 	.word	0xffffffff
    336c:	ffffffff 	.word	0xffffffff
    3370:	ffffffff 	.word	0xffffffff
    3374:	ffffffff 	.word	0xffffffff
    3378:	ffffffff 	.word	0xffffffff
    337c:	ffffffff 	.word	0xffffffff
    3380:	ffffffff 	.word	0xffffffff
    3384:	ffffffff 	.word	0xffffffff
    3388:	ffffffff 	.word	0xffffffff
    338c:	ffffffff 	.word	0xffffffff
    3390:	ffffffff 	.word	0xffffffff
    3394:	ffffffff 	.word	0xffffffff
    3398:	ffffffff 	.word	0xffffffff
    339c:	ffffffff 	.word	0xffffffff
    33a0:	ffffffff 	.word	0xffffffff
    33a4:	ffffffff 	.word	0xffffffff
    33a8:	ffffffff 	.word	0xffffffff
    33ac:	ffffffff 	.word	0xffffffff
    33b0:	ffffffff 	.word	0xffffffff
    33b4:	ffffffff 	.word	0xffffffff
    33b8:	ffffffff 	.word	0xffffffff
    33bc:	ffffffff 	.word	0xffffffff
    33c0:	ffffffff 	.word	0xffffffff
    33c4:	ffffffff 	.word	0xffffffff
    33c8:	ffffffff 	.word	0xffffffff
    33cc:	ffffffff 	.word	0xffffffff
    33d0:	ffffffff 	.word	0xffffffff
    33d4:	ffffffff 	.word	0xffffffff
    33d8:	ffffffff 	.word	0xffffffff
    33dc:	ffffffff 	.word	0xffffffff
    33e0:	ffffffff 	.word	0xffffffff
    33e4:	ffffffff 	.word	0xffffffff
    33e8:	ffffffff 	.word	0xffffffff
    33ec:	ffffffff 	.word	0xffffffff
    33f0:	ffffffff 	.word	0xffffffff
    33f4:	ffffffff 	.word	0xffffffff
    33f8:	ffffffff 	.word	0xffffffff
    33fc:	ffffffff 	.word	0xffffffff
    3400:	ffffffff 	.word	0xffffffff
    3404:	ffffffff 	.word	0xffffffff
    3408:	ffffffff 	.word	0xffffffff
    340c:	ffffffff 	.word	0xffffffff
    3410:	ffffffff 	.word	0xffffffff
    3414:	ffffffff 	.word	0xffffffff
    3418:	ffffffff 	.word	0xffffffff
    341c:	ffffffff 	.word	0xffffffff
    3420:	ffffffff 	.word	0xffffffff
    3424:	ffffffff 	.word	0xffffffff
    3428:	ffffffff 	.word	0xffffffff
    342c:	ffffffff 	.word	0xffffffff
    3430:	ffffffff 	.word	0xffffffff
    3434:	ffffffff 	.word	0xffffffff
    3438:	ffffffff 	.word	0xffffffff
    343c:	ffffffff 	.word	0xffffffff
    3440:	ffffffff 	.word	0xffffffff
    3444:	ffffffff 	.word	0xffffffff
    3448:	ffffffff 	.word	0xffffffff
    344c:	ffffffff 	.word	0xffffffff
    3450:	ffffffff 	.word	0xffffffff
    3454:	ffffffff 	.word	0xffffffff
    3458:	ffffffff 	.word	0xffffffff
    345c:	ffffffff 	.word	0xffffffff
    3460:	ffffffff 	.word	0xffffffff
    3464:	ffffffff 	.word	0xffffffff
    3468:	ffffffff 	.word	0xffffffff
    346c:	ffffffff 	.word	0xffffffff
    3470:	ffffffff 	.word	0xffffffff
    3474:	ffffffff 	.word	0xffffffff
    3478:	ffffffff 	.word	0xffffffff
    347c:	ffffffff 	.word	0xffffffff
    3480:	ffffffff 	.word	0xffffffff
    3484:	ffffffff 	.word	0xffffffff
    3488:	ffffffff 	.word	0xffffffff
    348c:	ffffffff 	.word	0xffffffff
    3490:	ffffffff 	.word	0xffffffff
    3494:	ffffffff 	.word	0xffffffff
    3498:	ffffffff 	.word	0xffffffff
    349c:	ffffffff 	.word	0xffffffff
    34a0:	ffffffff 	.word	0xffffffff
    34a4:	ffffffff 	.word	0xffffffff
    34a8:	ffffffff 	.word	0xffffffff
    34ac:	ffffffff 	.word	0xffffffff
    34b0:	ffffffff 	.word	0xffffffff
    34b4:	ffffffff 	.word	0xffffffff
    34b8:	ffffffff 	.word	0xffffffff
    34bc:	ffffffff 	.word	0xffffffff
    34c0:	ffffffff 	.word	0xffffffff
    34c4:	ffffffff 	.word	0xffffffff
    34c8:	ffffffff 	.word	0xffffffff
    34cc:	ffffffff 	.word	0xffffffff
    34d0:	ffffffff 	.word	0xffffffff
    34d4:	ffffffff 	.word	0xffffffff
    34d8:	ffffffff 	.word	0xffffffff
    34dc:	ffffffff 	.word	0xffffffff
    34e0:	ffffffff 	.word	0xffffffff
    34e4:	ffffffff 	.word	0xffffffff
    34e8:	ffffffff 	.word	0xffffffff
    34ec:	ffffffff 	.word	0xffffffff
    34f0:	ffffffff 	.word	0xffffffff
    34f4:	ffffffff 	.word	0xffffffff
    34f8:	ffffffff 	.word	0xffffffff
    34fc:	ffffffff 	.word	0xffffffff
    3500:	ffffffff 	.word	0xffffffff
    3504:	ffffffff 	.word	0xffffffff
    3508:	ffffffff 	.word	0xffffffff
    350c:	ffffffff 	.word	0xffffffff
    3510:	ffffffff 	.word	0xffffffff
    3514:	ffffffff 	.word	0xffffffff
    3518:	ffffffff 	.word	0xffffffff
    351c:	ffffffff 	.word	0xffffffff
    3520:	ffffffff 	.word	0xffffffff
    3524:	ffffffff 	.word	0xffffffff
    3528:	ffffffff 	.word	0xffffffff
    352c:	ffffffff 	.word	0xffffffff
    3530:	ffffffff 	.word	0xffffffff
    3534:	ffffffff 	.word	0xffffffff
    3538:	ffffffff 	.word	0xffffffff
    353c:	ffffffff 	.word	0xffffffff
    3540:	ffffffff 	.word	0xffffffff
    3544:	ffffffff 	.word	0xffffffff
    3548:	ffffffff 	.word	0xffffffff
    354c:	ffffffff 	.word	0xffffffff
    3550:	ffffffff 	.word	0xffffffff
    3554:	ffffffff 	.word	0xffffffff
    3558:	ffffffff 	.word	0xffffffff
    355c:	ffffffff 	.word	0xffffffff
    3560:	ffffffff 	.word	0xffffffff
    3564:	ffffffff 	.word	0xffffffff
    3568:	ffffffff 	.word	0xffffffff
    356c:	ffffffff 	.word	0xffffffff
    3570:	ffffffff 	.word	0xffffffff
    3574:	ffffffff 	.word	0xffffffff
    3578:	ffffffff 	.word	0xffffffff
    357c:	ffffffff 	.word	0xffffffff
    3580:	ffffffff 	.word	0xffffffff
    3584:	ffffffff 	.word	0xffffffff
    3588:	ffffffff 	.word	0xffffffff
    358c:	ffffffff 	.word	0xffffffff
    3590:	ffffffff 	.word	0xffffffff
    3594:	ffffffff 	.word	0xffffffff
    3598:	ffffffff 	.word	0xffffffff
    359c:	ffffffff 	.word	0xffffffff
    35a0:	ffffffff 	.word	0xffffffff
    35a4:	ffffffff 	.word	0xffffffff
    35a8:	ffffffff 	.word	0xffffffff
    35ac:	ffffffff 	.word	0xffffffff
    35b0:	ffffffff 	.word	0xffffffff
    35b4:	ffffffff 	.word	0xffffffff
    35b8:	ffffffff 	.word	0xffffffff
    35bc:	ffffffff 	.word	0xffffffff
    35c0:	ffffffff 	.word	0xffffffff
    35c4:	ffffffff 	.word	0xffffffff
    35c8:	ffffffff 	.word	0xffffffff
    35cc:	ffffffff 	.word	0xffffffff
    35d0:	ffffffff 	.word	0xffffffff
    35d4:	ffffffff 	.word	0xffffffff
    35d8:	ffffffff 	.word	0xffffffff
    35dc:	ffffffff 	.word	0xffffffff
    35e0:	ffffffff 	.word	0xffffffff
    35e4:	ffffffff 	.word	0xffffffff
    35e8:	ffffffff 	.word	0xffffffff
    35ec:	ffffffff 	.word	0xffffffff
    35f0:	ffffffff 	.word	0xffffffff
    35f4:	ffffffff 	.word	0xffffffff
    35f8:	ffffffff 	.word	0xffffffff
    35fc:	ffffffff 	.word	0xffffffff
    3600:	ffffffff 	.word	0xffffffff
    3604:	ffffffff 	.word	0xffffffff
    3608:	ffffffff 	.word	0xffffffff
    360c:	ffffffff 	.word	0xffffffff
    3610:	ffffffff 	.word	0xffffffff
    3614:	ffffffff 	.word	0xffffffff
    3618:	ffffffff 	.word	0xffffffff
    361c:	ffffffff 	.word	0xffffffff
    3620:	ffffffff 	.word	0xffffffff
    3624:	ffffffff 	.word	0xffffffff
    3628:	ffffffff 	.word	0xffffffff
    362c:	ffffffff 	.word	0xffffffff
    3630:	ffffffff 	.word	0xffffffff
    3634:	ffffffff 	.word	0xffffffff
    3638:	ffffffff 	.word	0xffffffff
    363c:	ffffffff 	.word	0xffffffff
    3640:	ffffffff 	.word	0xffffffff
    3644:	ffffffff 	.word	0xffffffff
    3648:	ffffffff 	.word	0xffffffff
    364c:	ffffffff 	.word	0xffffffff
    3650:	ffffffff 	.word	0xffffffff
    3654:	ffffffff 	.word	0xffffffff
    3658:	ffffffff 	.word	0xffffffff
    365c:	ffffffff 	.word	0xffffffff
    3660:	ffffffff 	.word	0xffffffff
    3664:	ffffffff 	.word	0xffffffff
    3668:	ffffffff 	.word	0xffffffff
    366c:	ffffffff 	.word	0xffffffff
    3670:	ffffffff 	.word	0xffffffff
    3674:	ffffffff 	.word	0xffffffff
    3678:	ffffffff 	.word	0xffffffff
    367c:	ffffffff 	.word	0xffffffff
    3680:	ffffffff 	.word	0xffffffff
    3684:	ffffffff 	.word	0xffffffff
    3688:	ffffffff 	.word	0xffffffff
    368c:	ffffffff 	.word	0xffffffff
    3690:	ffffffff 	.word	0xffffffff
    3694:	ffffffff 	.word	0xffffffff
    3698:	ffffffff 	.word	0xffffffff
    369c:	ffffffff 	.word	0xffffffff
    36a0:	ffffffff 	.word	0xffffffff
    36a4:	ffffffff 	.word	0xffffffff
    36a8:	ffffffff 	.word	0xffffffff
    36ac:	ffffffff 	.word	0xffffffff
    36b0:	ffffffff 	.word	0xffffffff
    36b4:	ffffffff 	.word	0xffffffff
    36b8:	ffffffff 	.word	0xffffffff
    36bc:	ffffffff 	.word	0xffffffff
    36c0:	ffffffff 	.word	0xffffffff
    36c4:	ffffffff 	.word	0xffffffff
    36c8:	ffffffff 	.word	0xffffffff
    36cc:	ffffffff 	.word	0xffffffff
    36d0:	ffffffff 	.word	0xffffffff
    36d4:	ffffffff 	.word	0xffffffff
    36d8:	ffffffff 	.word	0xffffffff
    36dc:	ffffffff 	.word	0xffffffff
    36e0:	ffffffff 	.word	0xffffffff
    36e4:	ffffffff 	.word	0xffffffff
    36e8:	ffffffff 	.word	0xffffffff
    36ec:	ffffffff 	.word	0xffffffff
    36f0:	ffffffff 	.word	0xffffffff
    36f4:	ffffffff 	.word	0xffffffff
    36f8:	ffffffff 	.word	0xffffffff
    36fc:	ffffffff 	.word	0xffffffff
    3700:	ffffffff 	.word	0xffffffff
    3704:	ffffffff 	.word	0xffffffff
    3708:	ffffffff 	.word	0xffffffff
    370c:	ffffffff 	.word	0xffffffff
    3710:	ffffffff 	.word	0xffffffff
    3714:	ffffffff 	.word	0xffffffff
    3718:	ffffffff 	.word	0xffffffff
    371c:	ffffffff 	.word	0xffffffff
    3720:	ffffffff 	.word	0xffffffff
    3724:	ffffffff 	.word	0xffffffff
    3728:	ffffffff 	.word	0xffffffff
    372c:	ffffffff 	.word	0xffffffff
    3730:	ffffffff 	.word	0xffffffff
    3734:	ffffffff 	.word	0xffffffff
    3738:	ffffffff 	.word	0xffffffff
    373c:	ffffffff 	.word	0xffffffff
    3740:	ffffffff 	.word	0xffffffff
    3744:	ffffffff 	.word	0xffffffff
    3748:	ffffffff 	.word	0xffffffff
    374c:	ffffffff 	.word	0xffffffff
    3750:	ffffffff 	.word	0xffffffff
    3754:	ffffffff 	.word	0xffffffff
    3758:	ffffffff 	.word	0xffffffff
    375c:	ffffffff 	.word	0xffffffff
    3760:	ffffffff 	.word	0xffffffff
    3764:	ffffffff 	.word	0xffffffff
    3768:	ffffffff 	.word	0xffffffff
    376c:	ffffffff 	.word	0xffffffff
    3770:	ffffffff 	.word	0xffffffff
    3774:	ffffffff 	.word	0xffffffff
    3778:	ffffffff 	.word	0xffffffff
    377c:	ffffffff 	.word	0xffffffff
    3780:	ffffffff 	.word	0xffffffff
    3784:	ffffffff 	.word	0xffffffff
    3788:	ffffffff 	.word	0xffffffff
    378c:	ffffffff 	.word	0xffffffff
    3790:	ffffffff 	.word	0xffffffff
    3794:	ffffffff 	.word	0xffffffff
    3798:	ffffffff 	.word	0xffffffff
    379c:	ffffffff 	.word	0xffffffff
    37a0:	ffffffff 	.word	0xffffffff
    37a4:	ffffffff 	.word	0xffffffff
    37a8:	ffffffff 	.word	0xffffffff
    37ac:	ffffffff 	.word	0xffffffff
    37b0:	ffffffff 	.word	0xffffffff
    37b4:	ffffffff 	.word	0xffffffff
    37b8:	ffffffff 	.word	0xffffffff
    37bc:	ffffffff 	.word	0xffffffff
    37c0:	ffffffff 	.word	0xffffffff
    37c4:	ffffffff 	.word	0xffffffff
    37c8:	ffffffff 	.word	0xffffffff
    37cc:	ffffffff 	.word	0xffffffff
    37d0:	ffffffff 	.word	0xffffffff
    37d4:	ffffffff 	.word	0xffffffff
    37d8:	ffffffff 	.word	0xffffffff
    37dc:	ffffffff 	.word	0xffffffff
    37e0:	ffffffff 	.word	0xffffffff
    37e4:	ffffffff 	.word	0xffffffff
    37e8:	ffffffff 	.word	0xffffffff
    37ec:	ffffffff 	.word	0xffffffff
    37f0:	ffffffff 	.word	0xffffffff
    37f4:	ffffffff 	.word	0xffffffff
    37f8:	ffffffff 	.word	0xffffffff
    37fc:	ffffffff 	.word	0xffffffff
    3800:	ffffffff 	.word	0xffffffff
    3804:	ffffffff 	.word	0xffffffff
    3808:	ffffffff 	.word	0xffffffff
    380c:	ffffffff 	.word	0xffffffff
    3810:	ffffffff 	.word	0xffffffff
    3814:	ffffffff 	.word	0xffffffff
    3818:	ffffffff 	.word	0xffffffff
    381c:	ffffffff 	.word	0xffffffff
    3820:	ffffffff 	.word	0xffffffff
    3824:	ffffffff 	.word	0xffffffff
    3828:	ffffffff 	.word	0xffffffff
    382c:	ffffffff 	.word	0xffffffff
    3830:	ffffffff 	.word	0xffffffff
    3834:	ffffffff 	.word	0xffffffff
    3838:	ffffffff 	.word	0xffffffff
    383c:	ffffffff 	.word	0xffffffff
    3840:	ffffffff 	.word	0xffffffff
    3844:	ffffffff 	.word	0xffffffff
    3848:	ffffffff 	.word	0xffffffff
    384c:	ffffffff 	.word	0xffffffff
    3850:	ffffffff 	.word	0xffffffff
    3854:	ffffffff 	.word	0xffffffff
    3858:	ffffffff 	.word	0xffffffff
    385c:	ffffffff 	.word	0xffffffff
    3860:	ffffffff 	.word	0xffffffff
    3864:	ffffffff 	.word	0xffffffff
    3868:	ffffffff 	.word	0xffffffff
    386c:	ffffffff 	.word	0xffffffff
    3870:	ffffffff 	.word	0xffffffff
    3874:	ffffffff 	.word	0xffffffff
    3878:	ffffffff 	.word	0xffffffff
    387c:	ffffffff 	.word	0xffffffff
    3880:	ffffffff 	.word	0xffffffff
    3884:	ffffffff 	.word	0xffffffff
    3888:	ffffffff 	.word	0xffffffff
    388c:	ffffffff 	.word	0xffffffff
    3890:	ffffffff 	.word	0xffffffff
    3894:	ffffffff 	.word	0xffffffff
    3898:	ffffffff 	.word	0xffffffff
    389c:	ffffffff 	.word	0xffffffff
    38a0:	ffffffff 	.word	0xffffffff
    38a4:	ffffffff 	.word	0xffffffff
    38a8:	ffffffff 	.word	0xffffffff
    38ac:	ffffffff 	.word	0xffffffff
    38b0:	ffffffff 	.word	0xffffffff
    38b4:	ffffffff 	.word	0xffffffff
    38b8:	ffffffff 	.word	0xffffffff
    38bc:	ffffffff 	.word	0xffffffff
    38c0:	ffffffff 	.word	0xffffffff
    38c4:	ffffffff 	.word	0xffffffff
    38c8:	ffffffff 	.word	0xffffffff
    38cc:	ffffffff 	.word	0xffffffff
    38d0:	ffffffff 	.word	0xffffffff
    38d4:	ffffffff 	.word	0xffffffff
    38d8:	ffffffff 	.word	0xffffffff
    38dc:	ffffffff 	.word	0xffffffff
    38e0:	ffffffff 	.word	0xffffffff
    38e4:	ffffffff 	.word	0xffffffff
    38e8:	ffffffff 	.word	0xffffffff
    38ec:	ffffffff 	.word	0xffffffff
    38f0:	ffffffff 	.word	0xffffffff
    38f4:	ffffffff 	.word	0xffffffff
    38f8:	ffffffff 	.word	0xffffffff
    38fc:	ffffffff 	.word	0xffffffff
    3900:	ffffffff 	.word	0xffffffff
    3904:	ffffffff 	.word	0xffffffff
    3908:	ffffffff 	.word	0xffffffff
    390c:	ffffffff 	.word	0xffffffff
    3910:	ffffffff 	.word	0xffffffff
    3914:	ffffffff 	.word	0xffffffff
    3918:	ffffffff 	.word	0xffffffff
    391c:	ffffffff 	.word	0xffffffff
    3920:	ffffffff 	.word	0xffffffff
    3924:	ffffffff 	.word	0xffffffff
    3928:	ffffffff 	.word	0xffffffff
    392c:	ffffffff 	.word	0xffffffff
    3930:	ffffffff 	.word	0xffffffff
    3934:	ffffffff 	.word	0xffffffff
    3938:	ffffffff 	.word	0xffffffff
    393c:	ffffffff 	.word	0xffffffff
    3940:	ffffffff 	.word	0xffffffff
    3944:	ffffffff 	.word	0xffffffff
    3948:	ffffffff 	.word	0xffffffff
    394c:	ffffffff 	.word	0xffffffff
    3950:	ffffffff 	.word	0xffffffff
    3954:	ffffffff 	.word	0xffffffff
    3958:	ffffffff 	.word	0xffffffff
    395c:	ffffffff 	.word	0xffffffff
    3960:	ffffffff 	.word	0xffffffff
    3964:	ffffffff 	.word	0xffffffff
    3968:	ffffffff 	.word	0xffffffff
    396c:	ffffffff 	.word	0xffffffff
    3970:	ffffffff 	.word	0xffffffff
    3974:	ffffffff 	.word	0xffffffff
    3978:	ffffffff 	.word	0xffffffff
    397c:	ffffffff 	.word	0xffffffff
    3980:	ffffffff 	.word	0xffffffff
    3984:	ffffffff 	.word	0xffffffff
    3988:	ffffffff 	.word	0xffffffff
    398c:	ffffffff 	.word	0xffffffff
    3990:	ffffffff 	.word	0xffffffff
    3994:	ffffffff 	.word	0xffffffff
    3998:	ffffffff 	.word	0xffffffff
    399c:	ffffffff 	.word	0xffffffff
    39a0:	ffffffff 	.word	0xffffffff
    39a4:	ffffffff 	.word	0xffffffff
    39a8:	ffffffff 	.word	0xffffffff
    39ac:	ffffffff 	.word	0xffffffff
    39b0:	ffffffff 	.word	0xffffffff
    39b4:	ffffffff 	.word	0xffffffff
    39b8:	ffffffff 	.word	0xffffffff
    39bc:	ffffffff 	.word	0xffffffff
    39c0:	ffffffff 	.word	0xffffffff
    39c4:	ffffffff 	.word	0xffffffff
    39c8:	ffffffff 	.word	0xffffffff
    39cc:	ffffffff 	.word	0xffffffff
    39d0:	ffffffff 	.word	0xffffffff
    39d4:	ffffffff 	.word	0xffffffff
    39d8:	ffffffff 	.word	0xffffffff
    39dc:	ffffffff 	.word	0xffffffff
    39e0:	ffffffff 	.word	0xffffffff
    39e4:	ffffffff 	.word	0xffffffff
    39e8:	ffffffff 	.word	0xffffffff
    39ec:	ffffffff 	.word	0xffffffff
    39f0:	ffffffff 	.word	0xffffffff
    39f4:	ffffffff 	.word	0xffffffff
    39f8:	ffffffff 	.word	0xffffffff
    39fc:	ffffffff 	.word	0xffffffff
    3a00:	ffffffff 	.word	0xffffffff
    3a04:	ffffffff 	.word	0xffffffff
    3a08:	ffffffff 	.word	0xffffffff
    3a0c:	ffffffff 	.word	0xffffffff
    3a10:	ffffffff 	.word	0xffffffff
    3a14:	ffffffff 	.word	0xffffffff
    3a18:	ffffffff 	.word	0xffffffff
    3a1c:	ffffffff 	.word	0xffffffff
    3a20:	ffffffff 	.word	0xffffffff
    3a24:	ffffffff 	.word	0xffffffff
    3a28:	ffffffff 	.word	0xffffffff
    3a2c:	ffffffff 	.word	0xffffffff
    3a30:	ffffffff 	.word	0xffffffff
    3a34:	ffffffff 	.word	0xffffffff
    3a38:	ffffffff 	.word	0xffffffff
    3a3c:	ffffffff 	.word	0xffffffff
    3a40:	ffffffff 	.word	0xffffffff
    3a44:	ffffffff 	.word	0xffffffff
    3a48:	ffffffff 	.word	0xffffffff
    3a4c:	ffffffff 	.word	0xffffffff
    3a50:	ffffffff 	.word	0xffffffff
    3a54:	ffffffff 	.word	0xffffffff
    3a58:	ffffffff 	.word	0xffffffff
    3a5c:	ffffffff 	.word	0xffffffff
    3a60:	ffffffff 	.word	0xffffffff
    3a64:	ffffffff 	.word	0xffffffff
    3a68:	ffffffff 	.word	0xffffffff
    3a6c:	ffffffff 	.word	0xffffffff
    3a70:	ffffffff 	.word	0xffffffff
    3a74:	ffffffff 	.word	0xffffffff
    3a78:	ffffffff 	.word	0xffffffff
    3a7c:	ffffffff 	.word	0xffffffff
    3a80:	ffffffff 	.word	0xffffffff
    3a84:	ffffffff 	.word	0xffffffff
    3a88:	ffffffff 	.word	0xffffffff
    3a8c:	ffffffff 	.word	0xffffffff
    3a90:	ffffffff 	.word	0xffffffff
    3a94:	ffffffff 	.word	0xffffffff
    3a98:	ffffffff 	.word	0xffffffff
    3a9c:	ffffffff 	.word	0xffffffff
    3aa0:	ffffffff 	.word	0xffffffff
    3aa4:	ffffffff 	.word	0xffffffff
    3aa8:	ffffffff 	.word	0xffffffff
    3aac:	ffffffff 	.word	0xffffffff
    3ab0:	ffffffff 	.word	0xffffffff
    3ab4:	ffffffff 	.word	0xffffffff
    3ab8:	ffffffff 	.word	0xffffffff
    3abc:	ffffffff 	.word	0xffffffff
    3ac0:	ffffffff 	.word	0xffffffff
    3ac4:	ffffffff 	.word	0xffffffff
    3ac8:	ffffffff 	.word	0xffffffff
    3acc:	ffffffff 	.word	0xffffffff
    3ad0:	ffffffff 	.word	0xffffffff
    3ad4:	ffffffff 	.word	0xffffffff
    3ad8:	ffffffff 	.word	0xffffffff
    3adc:	ffffffff 	.word	0xffffffff
    3ae0:	ffffffff 	.word	0xffffffff
    3ae4:	ffffffff 	.word	0xffffffff
    3ae8:	ffffffff 	.word	0xffffffff
    3aec:	ffffffff 	.word	0xffffffff
    3af0:	ffffffff 	.word	0xffffffff
    3af4:	ffffffff 	.word	0xffffffff
    3af8:	ffffffff 	.word	0xffffffff
    3afc:	ffffffff 	.word	0xffffffff
    3b00:	ffffffff 	.word	0xffffffff
    3b04:	ffffffff 	.word	0xffffffff
    3b08:	ffffffff 	.word	0xffffffff
    3b0c:	ffffffff 	.word	0xffffffff
    3b10:	ffffffff 	.word	0xffffffff
    3b14:	ffffffff 	.word	0xffffffff
    3b18:	ffffffff 	.word	0xffffffff
    3b1c:	ffffffff 	.word	0xffffffff
    3b20:	ffffffff 	.word	0xffffffff
    3b24:	ffffffff 	.word	0xffffffff
    3b28:	ffffffff 	.word	0xffffffff
    3b2c:	ffffffff 	.word	0xffffffff
    3b30:	ffffffff 	.word	0xffffffff
    3b34:	ffffffff 	.word	0xffffffff
    3b38:	ffffffff 	.word	0xffffffff
    3b3c:	ffffffff 	.word	0xffffffff
    3b40:	ffffffff 	.word	0xffffffff
    3b44:	ffffffff 	.word	0xffffffff
    3b48:	ffffffff 	.word	0xffffffff
    3b4c:	ffffffff 	.word	0xffffffff
    3b50:	ffffffff 	.word	0xffffffff
    3b54:	ffffffff 	.word	0xffffffff
    3b58:	ffffffff 	.word	0xffffffff
    3b5c:	ffffffff 	.word	0xffffffff
    3b60:	ffffffff 	.word	0xffffffff
    3b64:	ffffffff 	.word	0xffffffff
    3b68:	ffffffff 	.word	0xffffffff
    3b6c:	ffffffff 	.word	0xffffffff
    3b70:	ffffffff 	.word	0xffffffff
    3b74:	ffffffff 	.word	0xffffffff
    3b78:	ffffffff 	.word	0xffffffff
    3b7c:	ffffffff 	.word	0xffffffff
    3b80:	ffffffff 	.word	0xffffffff
    3b84:	ffffffff 	.word	0xffffffff
    3b88:	ffffffff 	.word	0xffffffff
    3b8c:	ffffffff 	.word	0xffffffff
    3b90:	ffffffff 	.word	0xffffffff
    3b94:	ffffffff 	.word	0xffffffff
    3b98:	ffffffff 	.word	0xffffffff
    3b9c:	ffffffff 	.word	0xffffffff
    3ba0:	ffffffff 	.word	0xffffffff
    3ba4:	ffffffff 	.word	0xffffffff
    3ba8:	ffffffff 	.word	0xffffffff
    3bac:	ffffffff 	.word	0xffffffff
    3bb0:	ffffffff 	.word	0xffffffff
    3bb4:	ffffffff 	.word	0xffffffff
    3bb8:	ffffffff 	.word	0xffffffff
    3bbc:	ffffffff 	.word	0xffffffff
    3bc0:	ffffffff 	.word	0xffffffff
    3bc4:	ffffffff 	.word	0xffffffff
    3bc8:	ffffffff 	.word	0xffffffff
    3bcc:	ffffffff 	.word	0xffffffff
    3bd0:	ffffffff 	.word	0xffffffff
    3bd4:	ffffffff 	.word	0xffffffff
    3bd8:	ffffffff 	.word	0xffffffff
    3bdc:	ffffffff 	.word	0xffffffff
    3be0:	ffffffff 	.word	0xffffffff
    3be4:	ffffffff 	.word	0xffffffff
    3be8:	ffffffff 	.word	0xffffffff
    3bec:	ffffffff 	.word	0xffffffff
    3bf0:	ffffffff 	.word	0xffffffff
    3bf4:	ffffffff 	.word	0xffffffff
    3bf8:	ffffffff 	.word	0xffffffff
    3bfc:	ffffffff 	.word	0xffffffff
    3c00:	ffffffff 	.word	0xffffffff
    3c04:	ffffffff 	.word	0xffffffff
    3c08:	ffffffff 	.word	0xffffffff
    3c0c:	ffffffff 	.word	0xffffffff
    3c10:	ffffffff 	.word	0xffffffff
    3c14:	ffffffff 	.word	0xffffffff
    3c18:	ffffffff 	.word	0xffffffff
    3c1c:	ffffffff 	.word	0xffffffff
    3c20:	ffffffff 	.word	0xffffffff
    3c24:	ffffffff 	.word	0xffffffff
    3c28:	ffffffff 	.word	0xffffffff
    3c2c:	ffffffff 	.word	0xffffffff
    3c30:	ffffffff 	.word	0xffffffff
    3c34:	ffffffff 	.word	0xffffffff
    3c38:	ffffffff 	.word	0xffffffff
    3c3c:	ffffffff 	.word	0xffffffff
    3c40:	ffffffff 	.word	0xffffffff
    3c44:	ffffffff 	.word	0xffffffff
    3c48:	ffffffff 	.word	0xffffffff
    3c4c:	ffffffff 	.word	0xffffffff
    3c50:	ffffffff 	.word	0xffffffff
    3c54:	ffffffff 	.word	0xffffffff
    3c58:	ffffffff 	.word	0xffffffff
    3c5c:	ffffffff 	.word	0xffffffff
    3c60:	ffffffff 	.word	0xffffffff
    3c64:	ffffffff 	.word	0xffffffff
    3c68:	ffffffff 	.word	0xffffffff
    3c6c:	ffffffff 	.word	0xffffffff
    3c70:	ffffffff 	.word	0xffffffff
    3c74:	ffffffff 	.word	0xffffffff
    3c78:	ffffffff 	.word	0xffffffff
    3c7c:	ffffffff 	.word	0xffffffff
    3c80:	ffffffff 	.word	0xffffffff
    3c84:	ffffffff 	.word	0xffffffff
    3c88:	ffffffff 	.word	0xffffffff
    3c8c:	ffffffff 	.word	0xffffffff
    3c90:	ffffffff 	.word	0xffffffff
    3c94:	ffffffff 	.word	0xffffffff
    3c98:	ffffffff 	.word	0xffffffff
    3c9c:	ffffffff 	.word	0xffffffff
    3ca0:	ffffffff 	.word	0xffffffff
    3ca4:	ffffffff 	.word	0xffffffff
    3ca8:	ffffffff 	.word	0xffffffff
    3cac:	ffffffff 	.word	0xffffffff
    3cb0:	ffffffff 	.word	0xffffffff
    3cb4:	ffffffff 	.word	0xffffffff
    3cb8:	ffffffff 	.word	0xffffffff
    3cbc:	ffffffff 	.word	0xffffffff
    3cc0:	ffffffff 	.word	0xffffffff
    3cc4:	ffffffff 	.word	0xffffffff
    3cc8:	ffffffff 	.word	0xffffffff
    3ccc:	ffffffff 	.word	0xffffffff
    3cd0:	ffffffff 	.word	0xffffffff
    3cd4:	ffffffff 	.word	0xffffffff
    3cd8:	ffffffff 	.word	0xffffffff
    3cdc:	ffffffff 	.word	0xffffffff
    3ce0:	ffffffff 	.word	0xffffffff
    3ce4:	ffffffff 	.word	0xffffffff
    3ce8:	ffffffff 	.word	0xffffffff
    3cec:	ffffffff 	.word	0xffffffff
    3cf0:	ffffffff 	.word	0xffffffff
    3cf4:	ffffffff 	.word	0xffffffff
    3cf8:	ffffffff 	.word	0xffffffff
    3cfc:	ffffffff 	.word	0xffffffff
    3d00:	ffffffff 	.word	0xffffffff
    3d04:	ffffffff 	.word	0xffffffff
    3d08:	ffffffff 	.word	0xffffffff
    3d0c:	ffffffff 	.word	0xffffffff
    3d10:	ffffffff 	.word	0xffffffff
    3d14:	ffffffff 	.word	0xffffffff
    3d18:	ffffffff 	.word	0xffffffff
    3d1c:	ffffffff 	.word	0xffffffff
    3d20:	ffffffff 	.word	0xffffffff
    3d24:	ffffffff 	.word	0xffffffff
    3d28:	ffffffff 	.word	0xffffffff
    3d2c:	ffffffff 	.word	0xffffffff
    3d30:	ffffffff 	.word	0xffffffff
    3d34:	ffffffff 	.word	0xffffffff
    3d38:	ffffffff 	.word	0xffffffff
    3d3c:	ffffffff 	.word	0xffffffff
    3d40:	ffffffff 	.word	0xffffffff
    3d44:	ffffffff 	.word	0xffffffff
    3d48:	ffffffff 	.word	0xffffffff
    3d4c:	ffffffff 	.word	0xffffffff
    3d50:	ffffffff 	.word	0xffffffff
    3d54:	ffffffff 	.word	0xffffffff
    3d58:	ffffffff 	.word	0xffffffff
    3d5c:	ffffffff 	.word	0xffffffff
    3d60:	ffffffff 	.word	0xffffffff
    3d64:	ffffffff 	.word	0xffffffff
    3d68:	ffffffff 	.word	0xffffffff
    3d6c:	ffffffff 	.word	0xffffffff
    3d70:	ffffffff 	.word	0xffffffff
    3d74:	ffffffff 	.word	0xffffffff
    3d78:	ffffffff 	.word	0xffffffff
    3d7c:	ffffffff 	.word	0xffffffff
    3d80:	ffffffff 	.word	0xffffffff
    3d84:	ffffffff 	.word	0xffffffff
    3d88:	ffffffff 	.word	0xffffffff
    3d8c:	ffffffff 	.word	0xffffffff
    3d90:	ffffffff 	.word	0xffffffff
    3d94:	ffffffff 	.word	0xffffffff
    3d98:	ffffffff 	.word	0xffffffff
    3d9c:	ffffffff 	.word	0xffffffff
    3da0:	ffffffff 	.word	0xffffffff
    3da4:	ffffffff 	.word	0xffffffff
    3da8:	ffffffff 	.word	0xffffffff
    3dac:	ffffffff 	.word	0xffffffff
    3db0:	ffffffff 	.word	0xffffffff
    3db4:	ffffffff 	.word	0xffffffff
    3db8:	ffffffff 	.word	0xffffffff
    3dbc:	ffffffff 	.word	0xffffffff
    3dc0:	ffffffff 	.word	0xffffffff
    3dc4:	ffffffff 	.word	0xffffffff
    3dc8:	ffffffff 	.word	0xffffffff
    3dcc:	ffffffff 	.word	0xffffffff
    3dd0:	ffffffff 	.word	0xffffffff
    3dd4:	ffffffff 	.word	0xffffffff
    3dd8:	ffffffff 	.word	0xffffffff
    3ddc:	ffffffff 	.word	0xffffffff
    3de0:	ffffffff 	.word	0xffffffff
    3de4:	ffffffff 	.word	0xffffffff
    3de8:	ffffffff 	.word	0xffffffff
    3dec:	ffffffff 	.word	0xffffffff
    3df0:	ffffffff 	.word	0xffffffff
    3df4:	ffffffff 	.word	0xffffffff
    3df8:	ffffffff 	.word	0xffffffff
    3dfc:	ffffffff 	.word	0xffffffff
    3e00:	ffffffff 	.word	0xffffffff
    3e04:	ffffffff 	.word	0xffffffff
    3e08:	ffffffff 	.word	0xffffffff
    3e0c:	ffffffff 	.word	0xffffffff
    3e10:	ffffffff 	.word	0xffffffff
    3e14:	ffffffff 	.word	0xffffffff
    3e18:	ffffffff 	.word	0xffffffff
    3e1c:	ffffffff 	.word	0xffffffff
    3e20:	ffffffff 	.word	0xffffffff
    3e24:	ffffffff 	.word	0xffffffff
    3e28:	ffffffff 	.word	0xffffffff
    3e2c:	ffffffff 	.word	0xffffffff
    3e30:	ffffffff 	.word	0xffffffff
    3e34:	ffffffff 	.word	0xffffffff
    3e38:	ffffffff 	.word	0xffffffff
    3e3c:	ffffffff 	.word	0xffffffff
    3e40:	ffffffff 	.word	0xffffffff
    3e44:	ffffffff 	.word	0xffffffff
    3e48:	ffffffff 	.word	0xffffffff
    3e4c:	ffffffff 	.word	0xffffffff
    3e50:	ffffffff 	.word	0xffffffff
    3e54:	ffffffff 	.word	0xffffffff
    3e58:	ffffffff 	.word	0xffffffff
    3e5c:	ffffffff 	.word	0xffffffff
    3e60:	ffffffff 	.word	0xffffffff
    3e64:	ffffffff 	.word	0xffffffff
    3e68:	ffffffff 	.word	0xffffffff
    3e6c:	ffffffff 	.word	0xffffffff
    3e70:	ffffffff 	.word	0xffffffff
    3e74:	ffffffff 	.word	0xffffffff
    3e78:	ffffffff 	.word	0xffffffff
    3e7c:	ffffffff 	.word	0xffffffff
    3e80:	ffffffff 	.word	0xffffffff
    3e84:	ffffffff 	.word	0xffffffff
    3e88:	ffffffff 	.word	0xffffffff
    3e8c:	ffffffff 	.word	0xffffffff
    3e90:	ffffffff 	.word	0xffffffff
    3e94:	ffffffff 	.word	0xffffffff
    3e98:	ffffffff 	.word	0xffffffff
    3e9c:	ffffffff 	.word	0xffffffff
    3ea0:	ffffffff 	.word	0xffffffff
    3ea4:	ffffffff 	.word	0xffffffff
    3ea8:	ffffffff 	.word	0xffffffff
    3eac:	ffffffff 	.word	0xffffffff
    3eb0:	ffffffff 	.word	0xffffffff
    3eb4:	ffffffff 	.word	0xffffffff
    3eb8:	ffffffff 	.word	0xffffffff
    3ebc:	ffffffff 	.word	0xffffffff
    3ec0:	ffffffff 	.word	0xffffffff
    3ec4:	ffffffff 	.word	0xffffffff
    3ec8:	ffffffff 	.word	0xffffffff
    3ecc:	ffffffff 	.word	0xffffffff
    3ed0:	ffffffff 	.word	0xffffffff
    3ed4:	ffffffff 	.word	0xffffffff
    3ed8:	ffffffff 	.word	0xffffffff
    3edc:	ffffffff 	.word	0xffffffff
    3ee0:	ffffffff 	.word	0xffffffff
    3ee4:	ffffffff 	.word	0xffffffff
    3ee8:	ffffffff 	.word	0xffffffff
    3eec:	ffffffff 	.word	0xffffffff
    3ef0:	ffffffff 	.word	0xffffffff
    3ef4:	ffffffff 	.word	0xffffffff
    3ef8:	ffffffff 	.word	0xffffffff
    3efc:	ffffffff 	.word	0xffffffff
    3f00:	ffffffff 	.word	0xffffffff
    3f04:	ffffffff 	.word	0xffffffff
    3f08:	ffffffff 	.word	0xffffffff
    3f0c:	ffffffff 	.word	0xffffffff
    3f10:	ffffffff 	.word	0xffffffff
    3f14:	ffffffff 	.word	0xffffffff
    3f18:	ffffffff 	.word	0xffffffff
    3f1c:	ffffffff 	.word	0xffffffff
    3f20:	ffffffff 	.word	0xffffffff
    3f24:	ffffffff 	.word	0xffffffff
    3f28:	ffffffff 	.word	0xffffffff
    3f2c:	ffffffff 	.word	0xffffffff
    3f30:	ffffffff 	.word	0xffffffff
    3f34:	ffffffff 	.word	0xffffffff
    3f38:	ffffffff 	.word	0xffffffff
    3f3c:	ffffffff 	.word	0xffffffff
    3f40:	ffffffff 	.word	0xffffffff
    3f44:	ffffffff 	.word	0xffffffff
    3f48:	ffffffff 	.word	0xffffffff
    3f4c:	ffffffff 	.word	0xffffffff
    3f50:	ffffffff 	.word	0xffffffff
    3f54:	ffffffff 	.word	0xffffffff
    3f58:	ffffffff 	.word	0xffffffff
    3f5c:	ffffffff 	.word	0xffffffff
    3f60:	ffffffff 	.word	0xffffffff
    3f64:	ffffffff 	.word	0xffffffff
    3f68:	ffffffff 	.word	0xffffffff
    3f6c:	ffffffff 	.word	0xffffffff
    3f70:	ffffffff 	.word	0xffffffff
    3f74:	ffffffff 	.word	0xffffffff
    3f78:	ffffffff 	.word	0xffffffff
    3f7c:	ffffffff 	.word	0xffffffff
    3f80:	ffffffff 	.word	0xffffffff
    3f84:	ffffffff 	.word	0xffffffff
    3f88:	ffffffff 	.word	0xffffffff
    3f8c:	ffffffff 	.word	0xffffffff
    3f90:	ffffffff 	.word	0xffffffff
    3f94:	ffffffff 	.word	0xffffffff
    3f98:	ffffffff 	.word	0xffffffff
    3f9c:	ffffffff 	.word	0xffffffff
    3fa0:	ffffffff 	.word	0xffffffff
    3fa4:	ffffffff 	.word	0xffffffff
    3fa8:	ffffffff 	.word	0xffffffff
    3fac:	ffffffff 	.word	0xffffffff
    3fb0:	ffffffff 	.word	0xffffffff
    3fb4:	ffffffff 	.word	0xffffffff
    3fb8:	ffffffff 	.word	0xffffffff
    3fbc:	ffffffff 	.word	0xffffffff
    3fc0:	ffffffff 	.word	0xffffffff
    3fc4:	ffffffff 	.word	0xffffffff
    3fc8:	ffffffff 	.word	0xffffffff
    3fcc:	ffffffff 	.word	0xffffffff
    3fd0:	ffffffff 	.word	0xffffffff
    3fd4:	ffffffff 	.word	0xffffffff
    3fd8:	ffffffff 	.word	0xffffffff
    3fdc:	ffffffff 	.word	0xffffffff
    3fe0:	ffffffff 	.word	0xffffffff
    3fe4:	ffffffff 	.word	0xffffffff
    3fe8:	ffffffff 	.word	0xffffffff
    3fec:	ffffffff 	.word	0xffffffff
    3ff0:	ffffffff 	.word	0xffffffff
    3ff4:	ffffffff 	.word	0xffffffff
    3ff8:	ffffffff 	.word	0xffffffff
    3ffc:	ffffffff 	.word	0xffffffff
    4000:	ffffffff 	.word	0xffffffff
    4004:	ffffffff 	.word	0xffffffff
    4008:	ffffffff 	.word	0xffffffff
    400c:	ffffffff 	.word	0xffffffff
    4010:	ffffffff 	.word	0xffffffff
    4014:	ffffffff 	.word	0xffffffff
    4018:	ffffffff 	.word	0xffffffff
    401c:	ffffffff 	.word	0xffffffff
    4020:	ffffffff 	.word	0xffffffff
    4024:	ffffffff 	.word	0xffffffff
    4028:	ffffffff 	.word	0xffffffff
    402c:	ffffffff 	.word	0xffffffff
    4030:	ffffffff 	.word	0xffffffff
    4034:	ffffffff 	.word	0xffffffff
    4038:	ffffffff 	.word	0xffffffff
    403c:	ffffffff 	.word	0xffffffff
    4040:	ffffffff 	.word	0xffffffff
    4044:	ffffffff 	.word	0xffffffff
    4048:	ffffffff 	.word	0xffffffff
    404c:	ffffffff 	.word	0xffffffff
    4050:	ffffffff 	.word	0xffffffff
    4054:	ffffffff 	.word	0xffffffff
    4058:	ffffffff 	.word	0xffffffff
    405c:	ffffffff 	.word	0xffffffff
    4060:	ffffffff 	.word	0xffffffff
    4064:	ffffffff 	.word	0xffffffff
    4068:	ffffffff 	.word	0xffffffff
    406c:	ffffffff 	.word	0xffffffff
    4070:	ffffffff 	.word	0xffffffff
    4074:	ffffffff 	.word	0xffffffff
    4078:	ffffffff 	.word	0xffffffff
    407c:	ffffffff 	.word	0xffffffff
    4080:	ffffffff 	.word	0xffffffff
    4084:	ffffffff 	.word	0xffffffff
    4088:	ffffffff 	.word	0xffffffff
    408c:	ffffffff 	.word	0xffffffff
    4090:	ffffffff 	.word	0xffffffff
    4094:	ffffffff 	.word	0xffffffff
    4098:	ffffffff 	.word	0xffffffff
    409c:	ffffffff 	.word	0xffffffff
    40a0:	ffffffff 	.word	0xffffffff
    40a4:	ffffffff 	.word	0xffffffff
    40a8:	ffffffff 	.word	0xffffffff
    40ac:	ffffffff 	.word	0xffffffff
    40b0:	ffffffff 	.word	0xffffffff
    40b4:	ffffffff 	.word	0xffffffff
    40b8:	ffffffff 	.word	0xffffffff
    40bc:	ffffffff 	.word	0xffffffff
    40c0:	ffffffff 	.word	0xffffffff
    40c4:	ffffffff 	.word	0xffffffff
    40c8:	ffffffff 	.word	0xffffffff
    40cc:	ffffffff 	.word	0xffffffff
    40d0:	ffffffff 	.word	0xffffffff
    40d4:	ffffffff 	.word	0xffffffff
    40d8:	ffffffff 	.word	0xffffffff
    40dc:	ffffffff 	.word	0xffffffff
    40e0:	ffffffff 	.word	0xffffffff
    40e4:	ffffffff 	.word	0xffffffff
    40e8:	ffffffff 	.word	0xffffffff
    40ec:	ffffffff 	.word	0xffffffff
    40f0:	ffffffff 	.word	0xffffffff
    40f4:	ffffffff 	.word	0xffffffff
    40f8:	ffffffff 	.word	0xffffffff
    40fc:	ffffffff 	.word	0xffffffff
    4100:	ffffffff 	.word	0xffffffff
    4104:	ffffffff 	.word	0xffffffff
    4108:	ffffffff 	.word	0xffffffff
    410c:	ffffffff 	.word	0xffffffff
    4110:	ffffffff 	.word	0xffffffff
    4114:	ffffffff 	.word	0xffffffff
    4118:	ffffffff 	.word	0xffffffff
    411c:	ffffffff 	.word	0xffffffff
    4120:	ffffffff 	.word	0xffffffff
    4124:	ffffffff 	.word	0xffffffff
    4128:	ffffffff 	.word	0xffffffff
    412c:	ffffffff 	.word	0xffffffff
    4130:	ffffffff 	.word	0xffffffff
    4134:	ffffffff 	.word	0xffffffff
    4138:	ffffffff 	.word	0xffffffff
    413c:	ffffffff 	.word	0xffffffff
    4140:	ffffffff 	.word	0xffffffff
    4144:	ffffffff 	.word	0xffffffff
    4148:	ffffffff 	.word	0xffffffff
    414c:	ffffffff 	.word	0xffffffff
    4150:	ffffffff 	.word	0xffffffff
    4154:	ffffffff 	.word	0xffffffff
    4158:	ffffffff 	.word	0xffffffff
    415c:	ffffffff 	.word	0xffffffff
    4160:	ffffffff 	.word	0xffffffff
    4164:	ffffffff 	.word	0xffffffff
    4168:	ffffffff 	.word	0xffffffff
    416c:	ffffffff 	.word	0xffffffff
    4170:	ffffffff 	.word	0xffffffff
    4174:	ffffffff 	.word	0xffffffff
    4178:	ffffffff 	.word	0xffffffff
    417c:	ffffffff 	.word	0xffffffff
    4180:	ffffffff 	.word	0xffffffff
    4184:	ffffffff 	.word	0xffffffff
    4188:	ffffffff 	.word	0xffffffff
    418c:	ffffffff 	.word	0xffffffff
    4190:	ffffffff 	.word	0xffffffff
    4194:	ffffffff 	.word	0xffffffff
    4198:	ffffffff 	.word	0xffffffff
    419c:	ffffffff 	.word	0xffffffff
    41a0:	ffffffff 	.word	0xffffffff
    41a4:	ffffffff 	.word	0xffffffff
    41a8:	ffffffff 	.word	0xffffffff
    41ac:	ffffffff 	.word	0xffffffff
    41b0:	ffffffff 	.word	0xffffffff
    41b4:	ffffffff 	.word	0xffffffff
    41b8:	ffffffff 	.word	0xffffffff
    41bc:	ffffffff 	.word	0xffffffff
    41c0:	ffffffff 	.word	0xffffffff
    41c4:	ffffffff 	.word	0xffffffff
    41c8:	ffffffff 	.word	0xffffffff
    41cc:	ffffffff 	.word	0xffffffff
    41d0:	ffffffff 	.word	0xffffffff
    41d4:	ffffffff 	.word	0xffffffff
    41d8:	ffffffff 	.word	0xffffffff
    41dc:	ffffffff 	.word	0xffffffff
    41e0:	ffffffff 	.word	0xffffffff
    41e4:	ffffffff 	.word	0xffffffff
    41e8:	ffffffff 	.word	0xffffffff
    41ec:	ffffffff 	.word	0xffffffff
    41f0:	ffffffff 	.word	0xffffffff
    41f4:	ffffffff 	.word	0xffffffff
    41f8:	ffffffff 	.word	0xffffffff
    41fc:	ffffffff 	.word	0xffffffff
    4200:	ffffffff 	.word	0xffffffff
    4204:	ffffffff 	.word	0xffffffff
    4208:	ffffffff 	.word	0xffffffff
    420c:	ffffffff 	.word	0xffffffff
    4210:	ffffffff 	.word	0xffffffff
    4214:	ffffffff 	.word	0xffffffff
    4218:	ffffffff 	.word	0xffffffff
    421c:	ffffffff 	.word	0xffffffff
    4220:	ffffffff 	.word	0xffffffff
    4224:	ffffffff 	.word	0xffffffff
    4228:	ffffffff 	.word	0xffffffff
    422c:	ffffffff 	.word	0xffffffff
    4230:	ffffffff 	.word	0xffffffff
    4234:	ffffffff 	.word	0xffffffff
    4238:	ffffffff 	.word	0xffffffff
    423c:	ffffffff 	.word	0xffffffff
    4240:	ffffffff 	.word	0xffffffff
    4244:	ffffffff 	.word	0xffffffff
    4248:	ffffffff 	.word	0xffffffff
    424c:	ffffffff 	.word	0xffffffff
    4250:	ffffffff 	.word	0xffffffff
    4254:	ffffffff 	.word	0xffffffff
    4258:	ffffffff 	.word	0xffffffff
    425c:	ffffffff 	.word	0xffffffff
    4260:	ffffffff 	.word	0xffffffff
    4264:	ffffffff 	.word	0xffffffff
    4268:	ffffffff 	.word	0xffffffff
    426c:	ffffffff 	.word	0xffffffff
    4270:	ffffffff 	.word	0xffffffff
    4274:	ffffffff 	.word	0xffffffff
    4278:	ffffffff 	.word	0xffffffff
    427c:	ffffffff 	.word	0xffffffff
    4280:	ffffffff 	.word	0xffffffff
    4284:	ffffffff 	.word	0xffffffff
    4288:	ffffffff 	.word	0xffffffff
    428c:	ffffffff 	.word	0xffffffff
    4290:	ffffffff 	.word	0xffffffff
    4294:	ffffffff 	.word	0xffffffff
    4298:	ffffffff 	.word	0xffffffff
    429c:	ffffffff 	.word	0xffffffff
    42a0:	ffffffff 	.word	0xffffffff
    42a4:	ffffffff 	.word	0xffffffff
    42a8:	ffffffff 	.word	0xffffffff
    42ac:	ffffffff 	.word	0xffffffff
    42b0:	ffffffff 	.word	0xffffffff
    42b4:	ffffffff 	.word	0xffffffff
    42b8:	ffffffff 	.word	0xffffffff
    42bc:	ffffffff 	.word	0xffffffff
    42c0:	ffffffff 	.word	0xffffffff
    42c4:	ffffffff 	.word	0xffffffff
    42c8:	ffffffff 	.word	0xffffffff
    42cc:	ffffffff 	.word	0xffffffff
    42d0:	ffffffff 	.word	0xffffffff
    42d4:	ffffffff 	.word	0xffffffff
    42d8:	ffffffff 	.word	0xffffffff
    42dc:	ffffffff 	.word	0xffffffff
    42e0:	ffffffff 	.word	0xffffffff
    42e4:	ffffffff 	.word	0xffffffff
    42e8:	ffffffff 	.word	0xffffffff
    42ec:	ffffffff 	.word	0xffffffff
    42f0:	ffffffff 	.word	0xffffffff
    42f4:	ffffffff 	.word	0xffffffff
    42f8:	ffffffff 	.word	0xffffffff
    42fc:	ffffffff 	.word	0xffffffff
    4300:	ffffffff 	.word	0xffffffff
    4304:	ffffffff 	.word	0xffffffff
    4308:	ffffffff 	.word	0xffffffff
    430c:	ffffffff 	.word	0xffffffff
    4310:	ffffffff 	.word	0xffffffff
    4314:	ffffffff 	.word	0xffffffff
    4318:	ffffffff 	.word	0xffffffff
    431c:	ffffffff 	.word	0xffffffff
    4320:	ffffffff 	.word	0xffffffff
    4324:	ffffffff 	.word	0xffffffff
    4328:	ffffffff 	.word	0xffffffff
    432c:	ffffffff 	.word	0xffffffff
    4330:	ffffffff 	.word	0xffffffff
    4334:	ffffffff 	.word	0xffffffff
    4338:	ffffffff 	.word	0xffffffff
    433c:	ffffffff 	.word	0xffffffff
    4340:	ffffffff 	.word	0xffffffff
    4344:	ffffffff 	.word	0xffffffff
    4348:	ffffffff 	.word	0xffffffff
    434c:	ffffffff 	.word	0xffffffff
    4350:	ffffffff 	.word	0xffffffff
    4354:	ffffffff 	.word	0xffffffff
    4358:	ffffffff 	.word	0xffffffff
    435c:	ffffffff 	.word	0xffffffff
    4360:	ffffffff 	.word	0xffffffff
    4364:	ffffffff 	.word	0xffffffff
    4368:	ffffffff 	.word	0xffffffff
    436c:	ffffffff 	.word	0xffffffff
    4370:	ffffffff 	.word	0xffffffff
    4374:	ffffffff 	.word	0xffffffff
    4378:	ffffffff 	.word	0xffffffff
    437c:	ffffffff 	.word	0xffffffff
    4380:	ffffffff 	.word	0xffffffff
    4384:	ffffffff 	.word	0xffffffff
    4388:	ffffffff 	.word	0xffffffff
    438c:	ffffffff 	.word	0xffffffff
    4390:	ffffffff 	.word	0xffffffff
    4394:	ffffffff 	.word	0xffffffff
    4398:	ffffffff 	.word	0xffffffff
    439c:	ffffffff 	.word	0xffffffff
    43a0:	ffffffff 	.word	0xffffffff
    43a4:	ffffffff 	.word	0xffffffff
    43a8:	ffffffff 	.word	0xffffffff
    43ac:	ffffffff 	.word	0xffffffff
    43b0:	ffffffff 	.word	0xffffffff
    43b4:	ffffffff 	.word	0xffffffff
    43b8:	ffffffff 	.word	0xffffffff
    43bc:	ffffffff 	.word	0xffffffff
    43c0:	ffffffff 	.word	0xffffffff
    43c4:	ffffffff 	.word	0xffffffff
    43c8:	ffffffff 	.word	0xffffffff
    43cc:	ffffffff 	.word	0xffffffff
    43d0:	ffffffff 	.word	0xffffffff
    43d4:	ffffffff 	.word	0xffffffff
    43d8:	ffffffff 	.word	0xffffffff
    43dc:	ffffffff 	.word	0xffffffff
    43e0:	ffffffff 	.word	0xffffffff
    43e4:	ffffffff 	.word	0xffffffff
    43e8:	ffffffff 	.word	0xffffffff
    43ec:	ffffffff 	.word	0xffffffff
    43f0:	ffffffff 	.word	0xffffffff
    43f4:	ffffffff 	.word	0xffffffff
    43f8:	ffffffff 	.word	0xffffffff
    43fc:	ffffffff 	.word	0xffffffff

00004400 <pds_ff_PDS_MYINDEX_ID>:
    4400:	00010008 20003044 00000000 00000000     ....D0. ........

00004410 <pds_ff_PDS_ROLE_ID>:
    4410:	00010007 20003344 00000000 00000000     ....D3. ........

00004420 <pds_ff_PDS_EDC_ID>:
    4420:	00010006 20003059 00000000 00000000     ....Y0. ........

00004430 <pds_ff_PDS_CONNECTION_TABLE_ID>:
    4430:	01400005 20002eec 00000000 00000000     ..@.... ........

00004440 <pds_ff_PDS_CONNECTION_MODE_ID>:
    4440:	00010004 2000001c 00000000 00000000     ....... ........

00004450 <pds_ff_PDS_CURRENT_CHANNEL_ID>:
    4450:	00010003 2000001d 00000000 00000000     ....... ........

00004460 <pds_ff_PDS_PANID_ID>:
    4460:	00020002 20003050 00000000 00000000     ....P0. ........

00004470 <pds_ff_PDS_OUTGOING_FRAME_COUNTER_ID>:
    4470:	00040001 20002334 00000000 00000000     ....4#. ........

00004480 <__do_global_dtors_aux>:
    4480:	b510      	push	{r4, lr}
    4482:	4c06      	ldr	r4, [pc, #24]	; (449c <__do_global_dtors_aux+0x1c>)
    4484:	7823      	ldrb	r3, [r4, #0]
    4486:	2b00      	cmp	r3, #0
    4488:	d107      	bne.n	449a <__do_global_dtors_aux+0x1a>
    448a:	4b05      	ldr	r3, [pc, #20]	; (44a0 <__do_global_dtors_aux+0x20>)
    448c:	2b00      	cmp	r3, #0
    448e:	d002      	beq.n	4496 <__do_global_dtors_aux+0x16>
    4490:	4804      	ldr	r0, [pc, #16]	; (44a4 <__do_global_dtors_aux+0x24>)
    4492:	e000      	b.n	4496 <__do_global_dtors_aux+0x16>
    4494:	bf00      	nop
    4496:	2301      	movs	r3, #1
    4498:	7023      	strb	r3, [r4, #0]
    449a:	bd10      	pop	{r4, pc}
    449c:	20000090 	.word	0x20000090
    44a0:	00000000 	.word	0x00000000
    44a4:	0001a61c 	.word	0x0001a61c

000044a8 <frame_dummy>:
    44a8:	4b08      	ldr	r3, [pc, #32]	; (44cc <frame_dummy+0x24>)
    44aa:	b510      	push	{r4, lr}
    44ac:	2b00      	cmp	r3, #0
    44ae:	d003      	beq.n	44b8 <frame_dummy+0x10>
    44b0:	4907      	ldr	r1, [pc, #28]	; (44d0 <frame_dummy+0x28>)
    44b2:	4808      	ldr	r0, [pc, #32]	; (44d4 <frame_dummy+0x2c>)
    44b4:	e000      	b.n	44b8 <frame_dummy+0x10>
    44b6:	bf00      	nop
    44b8:	4807      	ldr	r0, [pc, #28]	; (44d8 <frame_dummy+0x30>)
    44ba:	6803      	ldr	r3, [r0, #0]
    44bc:	2b00      	cmp	r3, #0
    44be:	d100      	bne.n	44c2 <frame_dummy+0x1a>
    44c0:	bd10      	pop	{r4, pc}
    44c2:	4b06      	ldr	r3, [pc, #24]	; (44dc <frame_dummy+0x34>)
    44c4:	2b00      	cmp	r3, #0
    44c6:	d0fb      	beq.n	44c0 <frame_dummy+0x18>
    44c8:	4798      	blx	r3
    44ca:	e7f9      	b.n	44c0 <frame_dummy+0x18>
    44cc:	00000000 	.word	0x00000000
    44d0:	20000094 	.word	0x20000094
    44d4:	0001a61c 	.word	0x0001a61c
    44d8:	0001a61c 	.word	0x0001a61c
    44dc:	00000000 	.word	0x00000000

000044e0 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
    44e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    44e2:	b083      	sub	sp, #12
    44e4:	466b      	mov	r3, sp
    44e6:	1ddf      	adds	r7, r3, #7
    44e8:	71d8      	strb	r0, [r3, #7]
	spi_select_slave(&ssd1306_master, &ssd1306_slave, true);
    44ea:	4e0b      	ldr	r6, [pc, #44]	; (4518 <ssd1306_write_command+0x38>)
    44ec:	4c0b      	ldr	r4, [pc, #44]	; (451c <ssd1306_write_command+0x3c>)
    44ee:	2201      	movs	r2, #1
    44f0:	0031      	movs	r1, r6
    44f2:	0020      	movs	r0, r4
    44f4:	4d0a      	ldr	r5, [pc, #40]	; (4520 <ssd1306_write_command+0x40>)
    44f6:	47a8      	blx	r5

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    44f8:	2280      	movs	r2, #128	; 0x80
    44fa:	0052      	lsls	r2, r2, #1
    44fc:	4b09      	ldr	r3, [pc, #36]	; (4524 <ssd1306_write_command+0x44>)
    44fe:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(SSD1306_DC_PIN, false);
	spi_write_buffer_wait(&ssd1306_master, &command, 1);
    4500:	3aff      	subs	r2, #255	; 0xff
    4502:	0039      	movs	r1, r7
    4504:	0020      	movs	r0, r4
    4506:	4b08      	ldr	r3, [pc, #32]	; (4528 <ssd1306_write_command+0x48>)
    4508:	4798      	blx	r3
	spi_select_slave(&ssd1306_master, &ssd1306_slave, false);
    450a:	2200      	movs	r2, #0
    450c:	0031      	movs	r1, r6
    450e:	0020      	movs	r0, r4
    4510:	47a8      	blx	r5
}
    4512:	b003      	add	sp, #12
    4514:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4516:	46c0      	nop			; (mov r8, r8)
    4518:	20002100 	.word	0x20002100
    451c:	200020f4 	.word	0x200020f4
    4520:	00005b2d 	.word	0x00005b2d
    4524:	40002800 	.word	0x40002800
    4528:	00005c21 	.word	0x00005c21

0000452c <ssd1306_init>:
{
    452c:	b530      	push	{r4, r5, lr}
    452e:	b091      	sub	sp, #68	; 0x44
	delay_init();
    4530:	4b59      	ldr	r3, [pc, #356]	; (4698 <ssd1306_init+0x16c>)
    4532:	4798      	blx	r3
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    4534:	4c59      	ldr	r4, [pc, #356]	; (469c <ssd1306_init+0x170>)
    4536:	2317      	movs	r3, #23
    4538:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    453a:	2300      	movs	r3, #0
    453c:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    453e:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    4540:	a902      	add	r1, sp, #8
    4542:	2201      	movs	r2, #1
    4544:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    4546:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    4548:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    454a:	2017      	movs	r0, #23
    454c:	4b54      	ldr	r3, [pc, #336]	; (46a0 <ssd1306_init+0x174>)
    454e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    4550:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    4552:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    4554:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    4556:	2900      	cmp	r1, #0
    4558:	d104      	bne.n	4564 <ssd1306_init+0x38>
		return &(ports[port_index]->Group[group_index]);
    455a:	0953      	lsrs	r3, r2, #5
    455c:	01db      	lsls	r3, r3, #7
    455e:	4951      	ldr	r1, [pc, #324]	; (46a4 <ssd1306_init+0x178>)
    4560:	468c      	mov	ip, r1
    4562:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4564:	211f      	movs	r1, #31
    4566:	4011      	ands	r1, r2
    4568:	2201      	movs	r2, #1
    456a:	0010      	movs	r0, r2
    456c:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    456e:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    4570:	ac02      	add	r4, sp, #8
    4572:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    4574:	2300      	movs	r3, #0
    4576:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    4578:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    457a:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    457c:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    457e:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    4580:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    4582:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    4584:	3223      	adds	r2, #35	; 0x23
    4586:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    4588:	3a18      	subs	r2, #24
    458a:	2100      	movs	r1, #0
    458c:	a808      	add	r0, sp, #32
    458e:	4b46      	ldr	r3, [pc, #280]	; (46a8 <ssd1306_init+0x17c>)
    4590:	4798      	blx	r3
	config.mux_setting = SSD1306_SPI_PINMUX_SETTING;
    4592:	2380      	movs	r3, #128	; 0x80
    4594:	025b      	lsls	r3, r3, #9
    4596:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SSD1306_SPI_PINMUX_PAD0;
    4598:	4b44      	ldr	r3, [pc, #272]	; (46ac <ssd1306_init+0x180>)
    459a:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SSD1306_SPI_PINMUX_PAD1;
    459c:	4b44      	ldr	r3, [pc, #272]	; (46b0 <ssd1306_init+0x184>)
    459e:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SSD1306_SPI_PINMUX_PAD2;
    45a0:	4b44      	ldr	r3, [pc, #272]	; (46b4 <ssd1306_init+0x188>)
    45a2:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SSD1306_SPI_PINMUX_PAD3;
    45a4:	4b44      	ldr	r3, [pc, #272]	; (46b8 <ssd1306_init+0x18c>)
    45a6:	6363      	str	r3, [r4, #52]	; 0x34
	config.mode_specific.master.baudrate = SSD1306_CLOCK_SPEED;
    45a8:	4b44      	ldr	r3, [pc, #272]	; (46bc <ssd1306_init+0x190>)
    45aa:	61a3      	str	r3, [r4, #24]
	spi_init(&ssd1306_master, SSD1306_SPI, &config);
    45ac:	4d44      	ldr	r5, [pc, #272]	; (46c0 <ssd1306_init+0x194>)
    45ae:	0022      	movs	r2, r4
    45b0:	4944      	ldr	r1, [pc, #272]	; (46c4 <ssd1306_init+0x198>)
    45b2:	0028      	movs	r0, r5
    45b4:	4b44      	ldr	r3, [pc, #272]	; (46c8 <ssd1306_init+0x19c>)
    45b6:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    45b8:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    45ba:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    45bc:	2b00      	cmp	r3, #0
    45be:	d1fc      	bne.n	45ba <ssd1306_init+0x8e>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    45c0:	6813      	ldr	r3, [r2, #0]
    45c2:	2102      	movs	r1, #2
    45c4:	430b      	orrs	r3, r1
    45c6:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    45c8:	ac01      	add	r4, sp, #4
    45ca:	2301      	movs	r3, #1
    45cc:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    45ce:	2200      	movs	r2, #0
    45d0:	70a2      	strb	r2, [r4, #2]
	pin.direction = PORT_PIN_DIR_OUTPUT;
    45d2:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(SSD1306_DC_PIN, &pin);
    45d4:	0021      	movs	r1, r4
    45d6:	2008      	movs	r0, #8
    45d8:	4d31      	ldr	r5, [pc, #196]	; (46a0 <ssd1306_init+0x174>)
    45da:	47a8      	blx	r5
	port_pin_set_config(SSD1306_RES_PIN, &pin);
    45dc:	0021      	movs	r1, r4
    45de:	2022      	movs	r0, #34	; 0x22
    45e0:	47a8      	blx	r5
 *
 * This functions will reset the OLED controller by setting the reset pin low.
 */
static inline void ssd1306_hard_reset(void)
{
	uint32_t delay_10us = 10 * (system_gclk_gen_get_hz(0)/1000000);
    45e2:	2000      	movs	r0, #0
    45e4:	4b39      	ldr	r3, [pc, #228]	; (46cc <ssd1306_init+0x1a0>)
    45e6:	4798      	blx	r3
    45e8:	4934      	ldr	r1, [pc, #208]	; (46bc <ssd1306_init+0x190>)
    45ea:	4b39      	ldr	r3, [pc, #228]	; (46d0 <ssd1306_init+0x1a4>)
    45ec:	4798      	blx	r3
    45ee:	0083      	lsls	r3, r0, #2
    45f0:	1818      	adds	r0, r3, r0
    45f2:	0040      	lsls	r0, r0, #1
		port_base->OUTCLR.reg = pin_mask;
    45f4:	2204      	movs	r2, #4
    45f6:	4b37      	ldr	r3, [pc, #220]	; (46d4 <ssd1306_init+0x1a8>)
    45f8:	615a      	str	r2, [r3, #20]
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
    45fa:	2800      	cmp	r0, #0
    45fc:	d048      	beq.n	4690 <ssd1306_init+0x164>
		SysTick->LOAD = n;
    45fe:	4b36      	ldr	r3, [pc, #216]	; (46d8 <ssd1306_init+0x1ac>)
    4600:	6058      	str	r0, [r3, #4]
		SysTick->VAL = 0;
    4602:	2200      	movs	r2, #0
    4604:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    4606:	0019      	movs	r1, r3
    4608:	2280      	movs	r2, #128	; 0x80
    460a:	0252      	lsls	r2, r2, #9
    460c:	680b      	ldr	r3, [r1, #0]
    460e:	4213      	tst	r3, r2
    4610:	d0fc      	beq.n	460c <ssd1306_init+0xe0>
		port_base->OUTSET.reg = pin_mask;
    4612:	2204      	movs	r2, #4
    4614:	4b2f      	ldr	r3, [pc, #188]	; (46d4 <ssd1306_init+0x1a8>)
    4616:	619a      	str	r2, [r3, #24]
		SysTick->LOAD = n;
    4618:	4b2f      	ldr	r3, [pc, #188]	; (46d8 <ssd1306_init+0x1ac>)
    461a:	6058      	str	r0, [r3, #4]
		SysTick->VAL = 0;
    461c:	2200      	movs	r2, #0
    461e:	609a      	str	r2, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    4620:	0019      	movs	r1, r3
    4622:	2280      	movs	r2, #128	; 0x80
    4624:	0252      	lsls	r2, r2, #9
    4626:	680b      	ldr	r3, [r1, #0]
    4628:	4213      	tst	r3, r2
    462a:	d0fc      	beq.n	4626 <ssd1306_init+0xfa>
    462c:	2204      	movs	r2, #4
    462e:	4b29      	ldr	r3, [pc, #164]	; (46d4 <ssd1306_init+0x1a8>)
    4630:	619a      	str	r2, [r3, #24]
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
    4632:	20a8      	movs	r0, #168	; 0xa8
    4634:	4c29      	ldr	r4, [pc, #164]	; (46dc <ssd1306_init+0x1b0>)
    4636:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
    4638:	201f      	movs	r0, #31
    463a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
    463c:	20d3      	movs	r0, #211	; 0xd3
    463e:	47a0      	blx	r4
	ssd1306_write_command(0x00);
    4640:	2000      	movs	r0, #0
    4642:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
    4644:	2040      	movs	r0, #64	; 0x40
    4646:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
    4648:	20a1      	movs	r0, #161	; 0xa1
    464a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
    464c:	20c8      	movs	r0, #200	; 0xc8
    464e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
    4650:	20da      	movs	r0, #218	; 0xda
    4652:	47a0      	blx	r4
	ssd1306_write_command(0x02);
    4654:	2002      	movs	r0, #2
    4656:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
    4658:	2081      	movs	r0, #129	; 0x81
    465a:	47a0      	blx	r4
	ssd1306_write_command(contrast);
    465c:	208f      	movs	r0, #143	; 0x8f
    465e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
    4660:	20a4      	movs	r0, #164	; 0xa4
    4662:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
    4664:	20a6      	movs	r0, #166	; 0xa6
    4666:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
    4668:	20d5      	movs	r0, #213	; 0xd5
    466a:	47a0      	blx	r4
	ssd1306_write_command(0x80);
    466c:	2080      	movs	r0, #128	; 0x80
    466e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
    4670:	208d      	movs	r0, #141	; 0x8d
    4672:	47a0      	blx	r4
	ssd1306_write_command(0x14);
    4674:	2014      	movs	r0, #20
    4676:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
    4678:	20db      	movs	r0, #219	; 0xdb
    467a:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
    467c:	2040      	movs	r0, #64	; 0x40
    467e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
    4680:	20d9      	movs	r0, #217	; 0xd9
    4682:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
    4684:	20f1      	movs	r0, #241	; 0xf1
    4686:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
    4688:	20af      	movs	r0, #175	; 0xaf
    468a:	47a0      	blx	r4
}
    468c:	b011      	add	sp, #68	; 0x44
    468e:	bd30      	pop	{r4, r5, pc}
    4690:	2204      	movs	r2, #4
    4692:	4b10      	ldr	r3, [pc, #64]	; (46d4 <ssd1306_init+0x1a8>)
    4694:	619a      	str	r2, [r3, #24]
    4696:	e7c9      	b.n	462c <ssd1306_init+0x100>
    4698:	0000472d 	.word	0x0000472d
    469c:	20002100 	.word	0x20002100
    46a0:	00005259 	.word	0x00005259
    46a4:	40002800 	.word	0x40002800
    46a8:	0001787d 	.word	0x0001787d
    46ac:	00220003 	.word	0x00220003
    46b0:	00170003 	.word	0x00170003
    46b4:	00360003 	.word	0x00360003
    46b8:	00370003 	.word	0x00370003
    46bc:	000f4240 	.word	0x000f4240
    46c0:	200020f4 	.word	0x200020f4
    46c4:	43000400 	.word	0x43000400
    46c8:	000057e1 	.word	0x000057e1
    46cc:	00006a71 	.word	0x00006a71
    46d0:	00014609 	.word	0x00014609
    46d4:	40002880 	.word	0x40002880
    46d8:	e000e010 	.word	0xe000e010
    46dc:	000044e1 	.word	0x000044e1

000046e0 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
    46e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    46e2:	b083      	sub	sp, #12
    46e4:	466b      	mov	r3, sp
    46e6:	1ddf      	adds	r7, r3, #7
    46e8:	71d8      	strb	r0, [r3, #7]
	spi_select_slave(&ssd1306_master, &ssd1306_slave, true);
    46ea:	4e0b      	ldr	r6, [pc, #44]	; (4718 <ssd1306_write_data+0x38>)
    46ec:	4c0b      	ldr	r4, [pc, #44]	; (471c <ssd1306_write_data+0x3c>)
    46ee:	2201      	movs	r2, #1
    46f0:	0031      	movs	r1, r6
    46f2:	0020      	movs	r0, r4
    46f4:	4d0a      	ldr	r5, [pc, #40]	; (4720 <ssd1306_write_data+0x40>)
    46f6:	47a8      	blx	r5
    46f8:	2280      	movs	r2, #128	; 0x80
    46fa:	0052      	lsls	r2, r2, #1
    46fc:	4b09      	ldr	r3, [pc, #36]	; (4724 <ssd1306_write_data+0x44>)
    46fe:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(SSD1306_DC_PIN, true);
	spi_write_buffer_wait(&ssd1306_master, &data, 1);
    4700:	3aff      	subs	r2, #255	; 0xff
    4702:	0039      	movs	r1, r7
    4704:	0020      	movs	r0, r4
    4706:	4b08      	ldr	r3, [pc, #32]	; (4728 <ssd1306_write_data+0x48>)
    4708:	4798      	blx	r3
	spi_select_slave(&ssd1306_master, &ssd1306_slave, false);
    470a:	2200      	movs	r2, #0
    470c:	0031      	movs	r1, r6
    470e:	0020      	movs	r0, r4
    4710:	47a8      	blx	r5
}
    4712:	b003      	add	sp, #12
    4714:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4716:	46c0      	nop			; (mov r8, r8)
    4718:	20002100 	.word	0x20002100
    471c:	200020f4 	.word	0x200020f4
    4720:	00005b2d 	.word	0x00005b2d
    4724:	40002800 	.word	0x40002800
    4728:	00005c21 	.word	0x00005c21

0000472c <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    472c:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    472e:	2000      	movs	r0, #0
    4730:	4b08      	ldr	r3, [pc, #32]	; (4754 <delay_init+0x28>)
    4732:	4798      	blx	r3
    4734:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    4736:	4c08      	ldr	r4, [pc, #32]	; (4758 <delay_init+0x2c>)
    4738:	21fa      	movs	r1, #250	; 0xfa
    473a:	0089      	lsls	r1, r1, #2
    473c:	47a0      	blx	r4
    473e:	4b07      	ldr	r3, [pc, #28]	; (475c <delay_init+0x30>)
    4740:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    4742:	4907      	ldr	r1, [pc, #28]	; (4760 <delay_init+0x34>)
    4744:	0028      	movs	r0, r5
    4746:	47a0      	blx	r4
    4748:	4b06      	ldr	r3, [pc, #24]	; (4764 <delay_init+0x38>)
    474a:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    474c:	2205      	movs	r2, #5
    474e:	4b06      	ldr	r3, [pc, #24]	; (4768 <delay_init+0x3c>)
    4750:	601a      	str	r2, [r3, #0]
}
    4752:	bd70      	pop	{r4, r5, r6, pc}
    4754:	00006a71 	.word	0x00006a71
    4758:	00014609 	.word	0x00014609
    475c:	20000000 	.word	0x20000000
    4760:	000f4240 	.word	0x000f4240
    4764:	20000004 	.word	0x20000004
    4768:	e000e010 	.word	0xe000e010

0000476c <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    476c:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    476e:	4b08      	ldr	r3, [pc, #32]	; (4790 <delay_cycles_us+0x24>)
    4770:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
    4772:	4a08      	ldr	r2, [pc, #32]	; (4794 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    4774:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    4776:	2180      	movs	r1, #128	; 0x80
    4778:	0249      	lsls	r1, r1, #9
	while (n--) {
    477a:	3801      	subs	r0, #1
    477c:	d307      	bcc.n	478e <delay_cycles_us+0x22>
	if (n > 0) {
    477e:	2c00      	cmp	r4, #0
    4780:	d0fb      	beq.n	477a <delay_cycles_us+0xe>
		SysTick->LOAD = n;
    4782:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    4784:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    4786:	6813      	ldr	r3, [r2, #0]
    4788:	420b      	tst	r3, r1
    478a:	d0fc      	beq.n	4786 <delay_cycles_us+0x1a>
    478c:	e7f5      	b.n	477a <delay_cycles_us+0xe>
	}
}
    478e:	bd30      	pop	{r4, r5, pc}
    4790:	20000004 	.word	0x20000004
    4794:	e000e010 	.word	0xe000e010

00004798 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    4798:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    479a:	4b08      	ldr	r3, [pc, #32]	; (47bc <delay_cycles_ms+0x24>)
    479c:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
    479e:	4a08      	ldr	r2, [pc, #32]	; (47c0 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    47a0:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    47a2:	2180      	movs	r1, #128	; 0x80
    47a4:	0249      	lsls	r1, r1, #9
	while (n--) {
    47a6:	3801      	subs	r0, #1
    47a8:	d307      	bcc.n	47ba <delay_cycles_ms+0x22>
	if (n > 0) {
    47aa:	2c00      	cmp	r4, #0
    47ac:	d0fb      	beq.n	47a6 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    47ae:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    47b0:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    47b2:	6813      	ldr	r3, [r2, #0]
    47b4:	420b      	tst	r3, r1
    47b6:	d0fc      	beq.n	47b2 <delay_cycles_ms+0x1a>
    47b8:	e7f5      	b.n	47a6 <delay_cycles_ms+0xe>
	}
}
    47ba:	bd30      	pop	{r4, r5, pc}
    47bc:	20000000 	.word	0x20000000
    47c0:	e000e010 	.word	0xe000e010

000047c4 <gfx_mono_set_framebuffer>:
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
    47c4:	4b01      	ldr	r3, [pc, #4]	; (47cc <gfx_mono_set_framebuffer+0x8>)
    47c6:	6018      	str	r0, [r3, #0]
}
    47c8:	4770      	bx	lr
    47ca:	46c0      	nop			; (mov r8, r8)
    47cc:	200000ac 	.word	0x200000ac

000047d0 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
    47d0:	4b02      	ldr	r3, [pc, #8]	; (47dc <gfx_mono_framebuffer_put_byte+0xc>)
    47d2:	681b      	ldr	r3, [r3, #0]
    47d4:	01c0      	lsls	r0, r0, #7
    47d6:	1818      	adds	r0, r3, r0
    47d8:	5442      	strb	r2, [r0, r1]
}
    47da:	4770      	bx	lr
    47dc:	200000ac 	.word	0x200000ac

000047e0 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
    47e0:	4b02      	ldr	r3, [pc, #8]	; (47ec <gfx_mono_framebuffer_get_byte+0xc>)
    47e2:	681b      	ldr	r3, [r3, #0]
    47e4:	01c0      	lsls	r0, r0, #7
    47e6:	1818      	adds	r0, r3, r0
    47e8:	5c40      	ldrb	r0, [r0, r1]
}
    47ea:	4770      	bx	lr
    47ec:	200000ac 	.word	0x200000ac

000047f0 <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
    47f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    47f2:	46ce      	mov	lr, r9
    47f4:	4647      	mov	r7, r8
    47f6:	b580      	push	{r7, lr}
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
    47f8:	1884      	adds	r4, r0, r2
    47fa:	2c80      	cmp	r4, #128	; 0x80
    47fc:	dd03      	ble.n	4806 <gfx_mono_generic_draw_horizontal_line+0x16>
		length = GFX_MONO_LCD_WIDTH - x;
    47fe:	2280      	movs	r2, #128	; 0x80
    4800:	4252      	negs	r2, r2
    4802:	1a12      	subs	r2, r2, r0
    4804:	b2d2      	uxtb	r2, r2
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
    4806:	2a00      	cmp	r2, #0
    4808:	d037      	beq.n	487a <gfx_mono_generic_draw_horizontal_line+0x8a>
	page = y / 8;
    480a:	08cd      	lsrs	r5, r1, #3
	pixelmask = (1 << (y - (page * 8)));
    480c:	00ec      	lsls	r4, r5, #3
    480e:	1b09      	subs	r1, r1, r4
    4810:	2701      	movs	r7, #1
    4812:	408f      	lsls	r7, r1
    4814:	0039      	movs	r1, r7
    4816:	b2ff      	uxtb	r7, r7
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
    4818:	2b01      	cmp	r3, #1
    481a:	d019      	beq.n	4850 <gfx_mono_generic_draw_horizontal_line+0x60>
    481c:	2b00      	cmp	r3, #0
    481e:	d030      	beq.n	4882 <gfx_mono_generic_draw_horizontal_line+0x92>
    4820:	2b02      	cmp	r3, #2
    4822:	d12a      	bne.n	487a <gfx_mono_generic_draw_horizontal_line+0x8a>
    4824:	3801      	subs	r0, #1
    4826:	b2c6      	uxtb	r6, r0
    4828:	1992      	adds	r2, r2, r6
    482a:	b2d4      	uxtb	r4, r2
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
    482c:	4b20      	ldr	r3, [pc, #128]	; (48b0 <gfx_mono_generic_draw_horizontal_line+0xc0>)
    482e:	4699      	mov	r9, r3
			temp ^= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
    4830:	4b20      	ldr	r3, [pc, #128]	; (48b4 <gfx_mono_generic_draw_horizontal_line+0xc4>)
    4832:	4698      	mov	r8, r3
			temp = gfx_mono_get_byte(page, x + length);
    4834:	0021      	movs	r1, r4
    4836:	0028      	movs	r0, r5
    4838:	47c8      	blx	r9
			temp ^= pixelmask;
    483a:	4078      	eors	r0, r7
			gfx_mono_put_byte(page, x + length, temp);
    483c:	b2c2      	uxtb	r2, r0
    483e:	2300      	movs	r3, #0
    4840:	0021      	movs	r1, r4
    4842:	0028      	movs	r0, r5
    4844:	47c0      	blx	r8
    4846:	3c01      	subs	r4, #1
    4848:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
    484a:	42b4      	cmp	r4, r6
    484c:	d1f2      	bne.n	4834 <gfx_mono_generic_draw_horizontal_line+0x44>
    484e:	e014      	b.n	487a <gfx_mono_generic_draw_horizontal_line+0x8a>
    4850:	3801      	subs	r0, #1
    4852:	b2c6      	uxtb	r6, r0
    4854:	1992      	adds	r2, r2, r6
    4856:	b2d4      	uxtb	r4, r2
			temp = gfx_mono_get_byte(page, x + length);
    4858:	4b15      	ldr	r3, [pc, #84]	; (48b0 <gfx_mono_generic_draw_horizontal_line+0xc0>)
    485a:	4699      	mov	r9, r3
			gfx_mono_put_byte(page, x + length, temp);
    485c:	4b15      	ldr	r3, [pc, #84]	; (48b4 <gfx_mono_generic_draw_horizontal_line+0xc4>)
    485e:	4698      	mov	r8, r3
			temp = gfx_mono_get_byte(page, x + length);
    4860:	0021      	movs	r1, r4
    4862:	0028      	movs	r0, r5
    4864:	47c8      	blx	r9
			temp |= pixelmask;
    4866:	4338      	orrs	r0, r7
			gfx_mono_put_byte(page, x + length, temp);
    4868:	b2c2      	uxtb	r2, r0
    486a:	2300      	movs	r3, #0
    486c:	0021      	movs	r1, r4
    486e:	0028      	movs	r0, r5
    4870:	47c0      	blx	r8
    4872:	3c01      	subs	r4, #1
    4874:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
    4876:	42b4      	cmp	r4, r6
    4878:	d1f2      	bne.n	4860 <gfx_mono_generic_draw_horizontal_line+0x70>
		break;

	default:
		break;
	}
}
    487a:	bc0c      	pop	{r2, r3}
    487c:	4690      	mov	r8, r2
    487e:	4699      	mov	r9, r3
    4880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4882:	3801      	subs	r0, #1
    4884:	b2c6      	uxtb	r6, r0
    4886:	1992      	adds	r2, r2, r6
    4888:	b2d4      	uxtb	r4, r2
			temp = gfx_mono_get_byte(page, x + length);
    488a:	4b09      	ldr	r3, [pc, #36]	; (48b0 <gfx_mono_generic_draw_horizontal_line+0xc0>)
    488c:	4699      	mov	r9, r3
			temp &= ~pixelmask;
    488e:	43cf      	mvns	r7, r1
			gfx_mono_put_byte(page, x + length, temp);
    4890:	4b08      	ldr	r3, [pc, #32]	; (48b4 <gfx_mono_generic_draw_horizontal_line+0xc4>)
    4892:	4698      	mov	r8, r3
			temp = gfx_mono_get_byte(page, x + length);
    4894:	0021      	movs	r1, r4
    4896:	0028      	movs	r0, r5
    4898:	47c8      	blx	r9
			temp &= ~pixelmask;
    489a:	4038      	ands	r0, r7
			gfx_mono_put_byte(page, x + length, temp);
    489c:	b2c2      	uxtb	r2, r0
    489e:	2300      	movs	r3, #0
    48a0:	0021      	movs	r1, r4
    48a2:	0028      	movs	r0, r5
    48a4:	47c0      	blx	r8
    48a6:	3c01      	subs	r4, #1
    48a8:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
    48aa:	42b4      	cmp	r4, r6
    48ac:	d1f2      	bne.n	4894 <gfx_mono_generic_draw_horizontal_line+0xa4>
    48ae:	e7e4      	b.n	487a <gfx_mono_generic_draw_horizontal_line+0x8a>
    48b0:	00004b15 	.word	0x00004b15
    48b4:	00004a0d 	.word	0x00004a0d

000048b8 <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
    48b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    48ba:	b083      	sub	sp, #12
    48bc:	9000      	str	r0, [sp, #0]
    48be:	9201      	str	r2, [sp, #4]
    48c0:	aa08      	add	r2, sp, #32
    48c2:	7817      	ldrb	r7, [r2, #0]
	if (height == 0) {
    48c4:	2b00      	cmp	r3, #0
    48c6:	d00d      	beq.n	48e4 <gfx_mono_generic_draw_filled_rect+0x2c>
    48c8:	3901      	subs	r1, #1
    48ca:	b2ce      	uxtb	r6, r1
    48cc:	199b      	adds	r3, r3, r6
    48ce:	b2dc      	uxtb	r4, r3
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
    48d0:	4d05      	ldr	r5, [pc, #20]	; (48e8 <gfx_mono_generic_draw_filled_rect+0x30>)
    48d2:	003b      	movs	r3, r7
    48d4:	9a01      	ldr	r2, [sp, #4]
    48d6:	0021      	movs	r1, r4
    48d8:	9800      	ldr	r0, [sp, #0]
    48da:	47a8      	blx	r5
    48dc:	3c01      	subs	r4, #1
    48de:	b2e4      	uxtb	r4, r4
	while (height-- > 0) {
    48e0:	42b4      	cmp	r4, r6
    48e2:	d1f6      	bne.n	48d2 <gfx_mono_generic_draw_filled_rect+0x1a>
	}
}
    48e4:	b003      	add	sp, #12
    48e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    48e8:	000047f1 	.word	0x000047f1

000048ec <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
    48ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    48ee:	46de      	mov	lr, fp
    48f0:	4657      	mov	r7, sl
    48f2:	464e      	mov	r6, r9
    48f4:	4645      	mov	r5, r8
    48f6:	b5e0      	push	{r5, r6, r7, lr}
    48f8:	b085      	sub	sp, #20
    48fa:	0004      	movs	r4, r0
    48fc:	4688      	mov	r8, r1
    48fe:	0015      	movs	r5, r2
    4900:	469b      	mov	fp, r3
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
    4902:	7a5b      	ldrb	r3, [r3, #9]
    4904:	465a      	mov	r2, fp
    4906:	7a12      	ldrb	r2, [r2, #8]
    4908:	2100      	movs	r1, #0
    490a:	9100      	str	r1, [sp, #0]
    490c:	0029      	movs	r1, r5
    490e:	4640      	mov	r0, r8
    4910:	4e28      	ldr	r6, [pc, #160]	; (49b4 <gfx_mono_draw_char+0xc8>)
    4912:	47b0      	blx	r6
			GFX_PIXEL_CLR);

	switch (font->type) {
    4914:	465b      	mov	r3, fp
    4916:	781b      	ldrb	r3, [r3, #0]
    4918:	2b00      	cmp	r3, #0
    491a:	d006      	beq.n	492a <gfx_mono_draw_char+0x3e>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
    491c:	b005      	add	sp, #20
    491e:	bc3c      	pop	{r2, r3, r4, r5}
    4920:	4690      	mov	r8, r2
    4922:	4699      	mov	r9, r3
    4924:	46a2      	mov	sl, r4
    4926:	46ab      	mov	fp, r5
    4928:	bdf0      	pop	{r4, r5, r6, r7, pc}
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
    492a:	465b      	mov	r3, fp
    492c:	7a1a      	ldrb	r2, [r3, #8]
    492e:	08d3      	lsrs	r3, r2, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
    4930:	0752      	lsls	r2, r2, #29
    4932:	d000      	beq.n	4936 <gfx_mono_draw_char+0x4a>
		char_row_size++;
    4934:	3301      	adds	r3, #1
	glyph_data_offset = char_row_size * font->height *
    4936:	465a      	mov	r2, fp
    4938:	7a52      	ldrb	r2, [r2, #9]
    493a:	4692      	mov	sl, r2
			((uint8_t)ch - font->first_char);
    493c:	465a      	mov	r2, fp
    493e:	7a97      	ldrb	r7, [r2, #10]
    4940:	1be7      	subs	r7, r4, r7
	glyph_data_offset = char_row_size * font->height *
    4942:	4652      	mov	r2, sl
    4944:	4357      	muls	r7, r2
    4946:	435f      	muls	r7, r3
	glyph_data = font->data.progmem + glyph_data_offset;
    4948:	b2bf      	uxth	r7, r7
    494a:	465b      	mov	r3, fp
    494c:	685b      	ldr	r3, [r3, #4]
    494e:	469c      	mov	ip, r3
    4950:	4467      	add	r7, ip
	gfx_coord_t inc_y = y;
    4952:	9502      	str	r5, [sp, #8]
		for (i = 0; i < pixelsToDraw; i++) {
    4954:	4643      	mov	r3, r8
    4956:	9303      	str	r3, [sp, #12]
    4958:	e020      	b.n	499c <gfx_mono_draw_char+0xb0>
			if ((glyph_byte & 0x80)) {
    495a:	b26b      	sxtb	r3, r5
    495c:	2b00      	cmp	r3, #0
    495e:	db0d      	blt.n	497c <gfx_mono_draw_char+0x90>
			inc_x += 1;
    4960:	3401      	adds	r4, #1
    4962:	b2e4      	uxtb	r4, r4
			glyph_byte <<= 1;
    4964:	006d      	lsls	r5, r5, #1
    4966:	b2ed      	uxtb	r5, r5
		for (i = 0; i < pixelsToDraw; i++) {
    4968:	42a6      	cmp	r6, r4
    496a:	d00d      	beq.n	4988 <gfx_mono_draw_char+0x9c>
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
    496c:	4643      	mov	r3, r8
    496e:	1ae3      	subs	r3, r4, r3
    4970:	464a      	mov	r2, r9
    4972:	421a      	tst	r2, r3
    4974:	d1f1      	bne.n	495a <gfx_mono_draw_char+0x6e>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
    4976:	783d      	ldrb	r5, [r7, #0]
				glyph_data++;
    4978:	3701      	adds	r7, #1
    497a:	e7ee      	b.n	495a <gfx_mono_draw_char+0x6e>
				gfx_mono_draw_pixel(inc_x, inc_y,
    497c:	2201      	movs	r2, #1
    497e:	9902      	ldr	r1, [sp, #8]
    4980:	0020      	movs	r0, r4
    4982:	4b0d      	ldr	r3, [pc, #52]	; (49b8 <gfx_mono_draw_char+0xcc>)
    4984:	4798      	blx	r3
    4986:	e7eb      	b.n	4960 <gfx_mono_draw_char+0x74>
		inc_y += 1;
    4988:	9b02      	ldr	r3, [sp, #8]
    498a:	3301      	adds	r3, #1
    498c:	b2db      	uxtb	r3, r3
    498e:	9302      	str	r3, [sp, #8]
		rows_left--;
    4990:	4653      	mov	r3, sl
    4992:	3b01      	subs	r3, #1
    4994:	b2db      	uxtb	r3, r3
    4996:	469a      	mov	sl, r3
	} while (rows_left > 0);
    4998:	2b00      	cmp	r3, #0
    499a:	d0bf      	beq.n	491c <gfx_mono_draw_char+0x30>
		uint8_t pixelsToDraw = font->width;
    499c:	465b      	mov	r3, fp
    499e:	7a1e      	ldrb	r6, [r3, #8]
		for (i = 0; i < pixelsToDraw; i++) {
    49a0:	2e00      	cmp	r6, #0
    49a2:	d0f1      	beq.n	4988 <gfx_mono_draw_char+0x9c>
    49a4:	4446      	add	r6, r8
    49a6:	b2f6      	uxtb	r6, r6
    49a8:	9c03      	ldr	r4, [sp, #12]
    49aa:	2500      	movs	r5, #0
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
    49ac:	2307      	movs	r3, #7
    49ae:	4699      	mov	r9, r3
    49b0:	e7dc      	b.n	496c <gfx_mono_draw_char+0x80>
    49b2:	46c0      	nop			; (mov r8, r8)
    49b4:	000048b9 	.word	0x000048b9
    49b8:	00004aad 	.word	0x00004aad

000049bc <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
    49bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    49be:	46c6      	mov	lr, r8
    49c0:	b500      	push	{lr}
    49c2:	b082      	sub	sp, #8
    49c4:	0004      	movs	r4, r0
    49c6:	4690      	mov	r8, r2
    49c8:	001f      	movs	r7, r3
    49ca:	000d      	movs	r5, r1

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
    49cc:	9101      	str	r1, [sp, #4]
    49ce:	e009      	b.n	49e4 <gfx_mono_draw_string+0x28>
			y += font->height + 1;
    49d0:	7a7a      	ldrb	r2, [r7, #9]
    49d2:	3201      	adds	r2, #1
    49d4:	4442      	add	r2, r8
    49d6:	b2d3      	uxtb	r3, r2
    49d8:	4698      	mov	r8, r3
			x = start_of_string_position_x;
    49da:	9d01      	ldr	r5, [sp, #4]
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
			x += font->width;
		}
	} while (*(++str));
    49dc:	3401      	adds	r4, #1
    49de:	7823      	ldrb	r3, [r4, #0]
    49e0:	2b00      	cmp	r3, #0
    49e2:	d00d      	beq.n	4a00 <gfx_mono_draw_string+0x44>
		if (*str == '\n') {
    49e4:	7820      	ldrb	r0, [r4, #0]
    49e6:	280a      	cmp	r0, #10
    49e8:	d0f2      	beq.n	49d0 <gfx_mono_draw_string+0x14>
		} else if (*str == '\r') {
    49ea:	280d      	cmp	r0, #13
    49ec:	d0f6      	beq.n	49dc <gfx_mono_draw_string+0x20>
			gfx_mono_draw_char(*str, x, y, font);
    49ee:	003b      	movs	r3, r7
    49f0:	4642      	mov	r2, r8
    49f2:	0029      	movs	r1, r5
    49f4:	4e04      	ldr	r6, [pc, #16]	; (4a08 <gfx_mono_draw_string+0x4c>)
    49f6:	47b0      	blx	r6
			x += font->width;
    49f8:	7a3b      	ldrb	r3, [r7, #8]
    49fa:	18ed      	adds	r5, r5, r3
    49fc:	b2ed      	uxtb	r5, r5
    49fe:	e7ed      	b.n	49dc <gfx_mono_draw_string+0x20>
}
    4a00:	b002      	add	sp, #8
    4a02:	bc04      	pop	{r2}
    4a04:	4690      	mov	r8, r2
    4a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a08:	000048ed 	.word	0x000048ed

00004a0c <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
    4a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4a0e:	0004      	movs	r4, r0
    4a10:	000f      	movs	r7, r1
    4a12:	0015      	movs	r5, r2
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
    4a14:	2b00      	cmp	r3, #0
    4a16:	d103      	bne.n	4a20 <gfx_mono_ssd1306_put_byte+0x14>
    4a18:	4b0d      	ldr	r3, [pc, #52]	; (4a50 <gfx_mono_ssd1306_put_byte+0x44>)
    4a1a:	4798      	blx	r3
    4a1c:	42a8      	cmp	r0, r5
    4a1e:	d015      	beq.n	4a4c <gfx_mono_ssd1306_put_byte+0x40>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
    4a20:	002a      	movs	r2, r5
    4a22:	0039      	movs	r1, r7
    4a24:	0020      	movs	r0, r4
    4a26:	4b0b      	ldr	r3, [pc, #44]	; (4a54 <gfx_mono_ssd1306_put_byte+0x48>)
    4a28:	4798      	blx	r3
	address &= 0x0F;
    4a2a:	260f      	movs	r6, #15
    4a2c:	4034      	ands	r4, r6
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
    4a2e:	20b0      	movs	r0, #176	; 0xb0
    4a30:	4320      	orrs	r0, r4
    4a32:	4c09      	ldr	r4, [pc, #36]	; (4a58 <gfx_mono_ssd1306_put_byte+0x4c>)
    4a34:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
    4a36:	0678      	lsls	r0, r7, #25
    4a38:	0f40      	lsrs	r0, r0, #29
    4a3a:	2310      	movs	r3, #16
    4a3c:	4318      	orrs	r0, r3
    4a3e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
    4a40:	0030      	movs	r0, r6
    4a42:	4038      	ands	r0, r7
    4a44:	47a0      	blx	r4
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
    4a46:	0028      	movs	r0, r5
    4a48:	4b04      	ldr	r3, [pc, #16]	; (4a5c <gfx_mono_ssd1306_put_byte+0x50>)
    4a4a:	4798      	blx	r3
}
    4a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4a4e:	46c0      	nop			; (mov r8, r8)
    4a50:	000047e1 	.word	0x000047e1
    4a54:	000047d1 	.word	0x000047d1
    4a58:	000044e1 	.word	0x000044e1
    4a5c:	000046e1 	.word	0x000046e1

00004a60 <gfx_mono_ssd1306_init>:
{
    4a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	gfx_mono_set_framebuffer(framebuffer);
    4a62:	480d      	ldr	r0, [pc, #52]	; (4a98 <gfx_mono_ssd1306_init+0x38>)
    4a64:	4b0d      	ldr	r3, [pc, #52]	; (4a9c <gfx_mono_ssd1306_init+0x3c>)
    4a66:	4798      	blx	r3
	ssd1306_init();
    4a68:	4b0d      	ldr	r3, [pc, #52]	; (4aa0 <gfx_mono_ssd1306_init+0x40>)
    4a6a:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
    4a6c:	2040      	movs	r0, #64	; 0x40
    4a6e:	4b0d      	ldr	r3, [pc, #52]	; (4aa4 <gfx_mono_ssd1306_init+0x44>)
    4a70:	4798      	blx	r3
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
    4a72:	2500      	movs	r5, #0
{
    4a74:	2600      	movs	r6, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
    4a76:	4f0c      	ldr	r7, [pc, #48]	; (4aa8 <gfx_mono_ssd1306_init+0x48>)
{
    4a78:	0034      	movs	r4, r6
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
    4a7a:	2301      	movs	r3, #1
    4a7c:	0032      	movs	r2, r6
    4a7e:	0021      	movs	r1, r4
    4a80:	0028      	movs	r0, r5
    4a82:	47b8      	blx	r7
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
    4a84:	3401      	adds	r4, #1
    4a86:	b2e4      	uxtb	r4, r4
    4a88:	2c80      	cmp	r4, #128	; 0x80
    4a8a:	d1f6      	bne.n	4a7a <gfx_mono_ssd1306_init+0x1a>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
    4a8c:	3501      	adds	r5, #1
    4a8e:	b2ed      	uxtb	r5, r5
    4a90:	2d04      	cmp	r5, #4
    4a92:	d1f1      	bne.n	4a78 <gfx_mono_ssd1306_init+0x18>
}
    4a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4a96:	46c0      	nop			; (mov r8, r8)
    4a98:	200000b0 	.word	0x200000b0
    4a9c:	000047c5 	.word	0x000047c5
    4aa0:	0000452d 	.word	0x0000452d
    4aa4:	000044e1 	.word	0x000044e1
    4aa8:	00004a0d 	.word	0x00004a0d

00004aac <gfx_mono_ssd1306_draw_pixel>:
{
    4aac:	b5f0      	push	{r4, r5, r6, r7, lr}
    4aae:	46c6      	mov	lr, r8
    4ab0:	b500      	push	{lr}
    4ab2:	0004      	movs	r4, r0
    4ab4:	0015      	movs	r5, r2
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
    4ab6:	b243      	sxtb	r3, r0
    4ab8:	2b00      	cmp	r3, #0
    4aba:	db01      	blt.n	4ac0 <gfx_mono_ssd1306_draw_pixel+0x14>
    4abc:	291f      	cmp	r1, #31
    4abe:	d902      	bls.n	4ac6 <gfx_mono_ssd1306_draw_pixel+0x1a>
}
    4ac0:	bc04      	pop	{r2}
    4ac2:	4690      	mov	r8, r2
    4ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
    4ac6:	08cf      	lsrs	r7, r1, #3
	pixel_mask = (1 << (y - (page * 8)));
    4ac8:	00fb      	lsls	r3, r7, #3
    4aca:	1ac9      	subs	r1, r1, r3
    4acc:	2601      	movs	r6, #1
    4ace:	408e      	lsls	r6, r1
    4ad0:	b2f3      	uxtb	r3, r6
    4ad2:	4698      	mov	r8, r3
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
    4ad4:	0001      	movs	r1, r0
    4ad6:	0038      	movs	r0, r7
    4ad8:	4b0c      	ldr	r3, [pc, #48]	; (4b0c <gfx_mono_ssd1306_draw_pixel+0x60>)
    4ada:	4798      	blx	r3
    4adc:	0002      	movs	r2, r0
	switch (color) {
    4ade:	2d01      	cmp	r5, #1
    4ae0:	d009      	beq.n	4af6 <gfx_mono_ssd1306_draw_pixel+0x4a>
    4ae2:	2d00      	cmp	r5, #0
    4ae4:	d00b      	beq.n	4afe <gfx_mono_ssd1306_draw_pixel+0x52>
    4ae6:	2d02      	cmp	r5, #2
    4ae8:	d00c      	beq.n	4b04 <gfx_mono_ssd1306_draw_pixel+0x58>
	gfx_mono_put_byte(page, x, pixel_value);
    4aea:	2300      	movs	r3, #0
    4aec:	0021      	movs	r1, r4
    4aee:	0038      	movs	r0, r7
    4af0:	4c07      	ldr	r4, [pc, #28]	; (4b10 <gfx_mono_ssd1306_draw_pixel+0x64>)
    4af2:	47a0      	blx	r4
    4af4:	e7e4      	b.n	4ac0 <gfx_mono_ssd1306_draw_pixel+0x14>
		pixel_value |= pixel_mask;
    4af6:	4643      	mov	r3, r8
    4af8:	4303      	orrs	r3, r0
    4afa:	b2da      	uxtb	r2, r3
		break;
    4afc:	e7f5      	b.n	4aea <gfx_mono_ssd1306_draw_pixel+0x3e>
		pixel_value &= ~pixel_mask;
    4afe:	43b0      	bics	r0, r6
    4b00:	b2c2      	uxtb	r2, r0
		break;
    4b02:	e7f2      	b.n	4aea <gfx_mono_ssd1306_draw_pixel+0x3e>
		pixel_value ^= pixel_mask;
    4b04:	4643      	mov	r3, r8
    4b06:	4043      	eors	r3, r0
    4b08:	b2da      	uxtb	r2, r3
		break;
    4b0a:	e7ee      	b.n	4aea <gfx_mono_ssd1306_draw_pixel+0x3e>
    4b0c:	000047e1 	.word	0x000047e1
    4b10:	00004a0d 	.word	0x00004a0d

00004b14 <gfx_mono_ssd1306_get_byte>:
{
    4b14:	b510      	push	{r4, lr}
	return gfx_mono_framebuffer_get_byte(page, column);
    4b16:	4b01      	ldr	r3, [pc, #4]	; (4b1c <gfx_mono_ssd1306_get_byte+0x8>)
    4b18:	4798      	blx	r3
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
    4b1a:	bd10      	pop	{r4, pc}
    4b1c:	000047e1 	.word	0x000047e1

00004b20 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    4b20:	4b0c      	ldr	r3, [pc, #48]	; (4b54 <cpu_irq_enter_critical+0x34>)
    4b22:	681b      	ldr	r3, [r3, #0]
    4b24:	2b00      	cmp	r3, #0
    4b26:	d106      	bne.n	4b36 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4b28:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    4b2c:	2b00      	cmp	r3, #0
    4b2e:	d007      	beq.n	4b40 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    4b30:	2200      	movs	r2, #0
    4b32:	4b09      	ldr	r3, [pc, #36]	; (4b58 <cpu_irq_enter_critical+0x38>)
    4b34:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    4b36:	4a07      	ldr	r2, [pc, #28]	; (4b54 <cpu_irq_enter_critical+0x34>)
    4b38:	6813      	ldr	r3, [r2, #0]
    4b3a:	3301      	adds	r3, #1
    4b3c:	6013      	str	r3, [r2, #0]
}
    4b3e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    4b40:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    4b42:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    4b46:	2200      	movs	r2, #0
    4b48:	4b04      	ldr	r3, [pc, #16]	; (4b5c <cpu_irq_enter_critical+0x3c>)
    4b4a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    4b4c:	3201      	adds	r2, #1
    4b4e:	4b02      	ldr	r3, [pc, #8]	; (4b58 <cpu_irq_enter_critical+0x38>)
    4b50:	701a      	strb	r2, [r3, #0]
    4b52:	e7f0      	b.n	4b36 <cpu_irq_enter_critical+0x16>
    4b54:	200002b0 	.word	0x200002b0
    4b58:	200002b4 	.word	0x200002b4
    4b5c:	20000014 	.word	0x20000014

00004b60 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    4b60:	4b08      	ldr	r3, [pc, #32]	; (4b84 <cpu_irq_leave_critical+0x24>)
    4b62:	681a      	ldr	r2, [r3, #0]
    4b64:	3a01      	subs	r2, #1
    4b66:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    4b68:	681b      	ldr	r3, [r3, #0]
    4b6a:	2b00      	cmp	r3, #0
    4b6c:	d109      	bne.n	4b82 <cpu_irq_leave_critical+0x22>
    4b6e:	4b06      	ldr	r3, [pc, #24]	; (4b88 <cpu_irq_leave_critical+0x28>)
    4b70:	781b      	ldrb	r3, [r3, #0]
    4b72:	2b00      	cmp	r3, #0
    4b74:	d005      	beq.n	4b82 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    4b76:	2201      	movs	r2, #1
    4b78:	4b04      	ldr	r3, [pc, #16]	; (4b8c <cpu_irq_leave_critical+0x2c>)
    4b7a:	701a      	strb	r2, [r3, #0]
    4b7c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4b80:	b662      	cpsie	i
	}
}
    4b82:	4770      	bx	lr
    4b84:	200002b0 	.word	0x200002b0
    4b88:	200002b4 	.word	0x200002b4
    4b8c:	20000014 	.word	0x20000014

00004b90 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    4b90:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b92:	46c6      	mov	lr, r8
    4b94:	b500      	push	{lr}
    4b96:	b082      	sub	sp, #8
	config->input_pull = PORT_PIN_PULL_UP;
    4b98:	ac01      	add	r4, sp, #4
    4b9a:	2501      	movs	r5, #1
    4b9c:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    4b9e:	2300      	movs	r3, #0
    4ba0:	4698      	mov	r8, r3
    4ba2:	70a3      	strb	r3, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    4ba4:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    4ba6:	0021      	movs	r1, r4
    4ba8:	2013      	movs	r0, #19
    4baa:	4e12      	ldr	r6, [pc, #72]	; (4bf4 <system_board_init+0x64>)
    4bac:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    4bae:	4f12      	ldr	r7, [pc, #72]	; (4bf8 <system_board_init+0x68>)
    4bb0:	2380      	movs	r3, #128	; 0x80
    4bb2:	031b      	lsls	r3, r3, #12
    4bb4:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	
	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    4bb6:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_1_PIN, &pin_conf);
    4bb8:	0021      	movs	r1, r4
    4bba:	2012      	movs	r0, #18
    4bbc:	47b0      	blx	r6
    4bbe:	2380      	movs	r3, #128	; 0x80
    4bc0:	02db      	lsls	r3, r3, #11
    4bc2:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(LED_1_PIN, LED_1_INACTIVE);
#ifdef RFSWITCH_ENABLE
	/* Configure RFSWITCH as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    4bc4:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(RF_SWITCH_PIN, &pin_conf);
    4bc6:	0021      	movs	r1, r4
    4bc8:	200d      	movs	r0, #13
    4bca:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
    4bcc:	2380      	movs	r3, #128	; 0x80
    4bce:	019b      	lsls	r3, r3, #6
    4bd0:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
#endif

#ifdef TCXO_ENABLE
	/* Configure TXPO PWR as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    4bd2:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(TCXO_PWR_PIN, &pin_conf);
    4bd4:	0021      	movs	r1, r4
    4bd6:	2009      	movs	r0, #9
    4bd8:	47b0      	blx	r6
    4bda:	2380      	movs	r3, #128	; 0x80
    4bdc:	009b      	lsls	r3, r3, #2
    4bde:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
#endif
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    4be0:	4643      	mov	r3, r8
    4be2:	7023      	strb	r3, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    4be4:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    4be6:	0021      	movs	r1, r4
    4be8:	201c      	movs	r0, #28
    4bea:	47b0      	blx	r6
		
}
    4bec:	b002      	add	sp, #8
    4bee:	bc04      	pop	{r2}
    4bf0:	4690      	mov	r8, r2
    4bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4bf4:	00005259 	.word	0x00005259
    4bf8:	40002800 	.word	0x40002800

00004bfc <aes_get_config_defaults>:
		struct aes_config *const config)
{

	/* Sanity check arguments */
	Assert(config);
	config->encrypt_mode = AES_ENCRYPTION;
    4bfc:	2301      	movs	r3, #1
    4bfe:	7003      	strb	r3, [r0, #0]
	config->key_size = AES_KEY_SIZE_128;
    4c00:	2300      	movs	r3, #0
    4c02:	7043      	strb	r3, [r0, #1]
	config->start_mode = AES_MANUAL_START;
    4c04:	7083      	strb	r3, [r0, #2]
	config->opmode= AES_ECB_MODE;
    4c06:	70c3      	strb	r3, [r0, #3]
	config->cfb_size = AES_CFB_SIZE_128;
    4c08:	7103      	strb	r3, [r0, #4]
	config->ctype = AES_COUNTERMEASURE_TYPE_ALL;
    4c0a:	220f      	movs	r2, #15
    4c0c:	7142      	strb	r2, [r0, #5]
	config->enable_xor_key = false;
    4c0e:	7183      	strb	r3, [r0, #6]
	config->enable_key_gen = false;
    4c10:	71c3      	strb	r3, [r0, #7]
	config->lod = false;
    4c12:	7203      	strb	r3, [r0, #8]
}
    4c14:	4770      	bx	lr

00004c16 <aes_enable>:
 */
void aes_enable(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLA.reg |= AES_CTRLA_ENABLE;
    4c16:	6802      	ldr	r2, [r0, #0]
    4c18:	6813      	ldr	r3, [r2, #0]
    4c1a:	2102      	movs	r1, #2
    4c1c:	430b      	orrs	r3, r1
    4c1e:	6013      	str	r3, [r2, #0]

}
    4c20:	4770      	bx	lr

00004c22 <aes_disable>:
{
	Assert(module);
	Assert(module->hw);

	/* Disbale interrupt */
	module->hw->INTENCLR.reg = AES_INTENCLR_MASK;
    4c22:	2303      	movs	r3, #3
    4c24:	6802      	ldr	r2, [r0, #0]
    4c26:	7153      	strb	r3, [r2, #5]
	/* Clear interrupt flag */
	module->hw->INTFLAG.reg = AES_INTFLAG_MASK;
    4c28:	6802      	ldr	r2, [r0, #0]
    4c2a:	71d3      	strb	r3, [r2, #7]

	module->hw->CTRLA.reg &= (~AES_CTRLA_ENABLE);
    4c2c:	6802      	ldr	r2, [r0, #0]
    4c2e:	6813      	ldr	r3, [r2, #0]
    4c30:	2102      	movs	r1, #2
    4c32:	438b      	bics	r3, r1
    4c34:	6013      	str	r3, [r2, #0]
}
    4c36:	4770      	bx	lr

00004c38 <aes_set_config>:
 */
void aes_set_config(
		struct aes_module *const module,
		Aes *const hw,
		struct aes_config *const config)
{
    4c38:	b570      	push	{r4, r5, r6, lr}
    4c3a:	0004      	movs	r4, r0
    4c3c:	000d      	movs	r5, r1
	/* Validate arguments. */
	Assert(hw);
	Assert(config);
	Assert(module);

	module->opmode = config->opmode;
    4c3e:	78d3      	ldrb	r3, [r2, #3]
    4c40:	7103      	strb	r3, [r0, #4]
	module->hw = hw;
    4c42:	6021      	str	r1, [r4, #0]
	module->key_size = config->key_size;
    4c44:	7853      	ldrb	r3, [r2, #1]
    4c46:	7143      	strb	r3, [r0, #5]
	module->cfb_size = config->cfb_size;
    4c48:	7913      	ldrb	r3, [r2, #4]
    4c4a:	7183      	strb	r3, [r0, #6]

	ul_mode |= (config->encrypt_mode << AES_CTRLA_CIPHER_Pos)
    4c4c:	7813      	ldrb	r3, [r2, #0]
    4c4e:	029b      	lsls	r3, r3, #10
			 | (config->start_mode << AES_CTRLA_STARTMODE_Pos)
    4c50:	7891      	ldrb	r1, [r2, #2]
    4c52:	02c9      	lsls	r1, r1, #11
    4c54:	430b      	orrs	r3, r1
			 | (config->key_size << AES_CTRLA_KEYSIZE_Pos)
    4c56:	7851      	ldrb	r1, [r2, #1]
    4c58:	0209      	lsls	r1, r1, #8
    4c5a:	430b      	orrs	r3, r1
			 | (config->opmode << AES_CTRLA_AESMODE_Pos)
    4c5c:	78d1      	ldrb	r1, [r2, #3]
    4c5e:	0089      	lsls	r1, r1, #2
    4c60:	430b      	orrs	r3, r1
			 | (config->cfb_size << AES_CTRLA_CFBS_Pos)
    4c62:	7911      	ldrb	r1, [r2, #4]
    4c64:	0149      	lsls	r1, r1, #5
    4c66:	430b      	orrs	r3, r1
			 | (AES_CTRLA_CTYPE(config->ctype))
			 | (config->enable_xor_key << AES_CTRLA_XORKEY_Pos)
    4c68:	7991      	ldrb	r1, [r2, #6]
    4c6a:	0389      	lsls	r1, r1, #14
			 | (config->enable_key_gen << AES_CTRLA_KEYGEN_Pos)
    4c6c:	79d0      	ldrb	r0, [r2, #7]
    4c6e:	0340      	lsls	r0, r0, #13
			 | (config->lod << AES_CTRLA_LOD_Pos);
    4c70:	4301      	orrs	r1, r0
    4c72:	7a10      	ldrb	r0, [r2, #8]
    4c74:	0300      	lsls	r0, r0, #12
    4c76:	4301      	orrs	r1, r0
			 | (AES_CTRLA_CTYPE(config->ctype))
    4c78:	7952      	ldrb	r2, [r2, #5]
    4c7a:	0412      	lsls	r2, r2, #16
    4c7c:	20f0      	movs	r0, #240	; 0xf0
    4c7e:	0300      	lsls	r0, r0, #12
    4c80:	4002      	ands	r2, r0
			 | (config->lod << AES_CTRLA_LOD_Pos);
    4c82:	430a      	orrs	r2, r1
    4c84:	4313      	orrs	r3, r2
    4c86:	001e      	movs	r6, r3
	if (hw->CTRLA.reg & AES_CTRLA_ENABLE) {
    4c88:	682b      	ldr	r3, [r5, #0]
    4c8a:	079b      	lsls	r3, r3, #30
    4c8c:	d401      	bmi.n	4c92 <aes_set_config+0x5a>
		aes_disable(module);
		hw->CTRLA.reg = ul_mode;
		aes_enable(module);
	} else {
		hw->CTRLA.reg = ul_mode;
    4c8e:	602e      	str	r6, [r5, #0]
	}
}
    4c90:	bd70      	pop	{r4, r5, r6, pc}
		aes_disable(module);
    4c92:	0020      	movs	r0, r4
    4c94:	4b03      	ldr	r3, [pc, #12]	; (4ca4 <aes_set_config+0x6c>)
    4c96:	4798      	blx	r3
		hw->CTRLA.reg = ul_mode;
    4c98:	602e      	str	r6, [r5, #0]
		aes_enable(module);
    4c9a:	0020      	movs	r0, r4
    4c9c:	4b02      	ldr	r3, [pc, #8]	; (4ca8 <aes_set_config+0x70>)
    4c9e:	4798      	blx	r3
    4ca0:	e7f6      	b.n	4c90 <aes_set_config+0x58>
    4ca2:	46c0      	nop			; (mov r8, r8)
    4ca4:	00004c23 	.word	0x00004c23
    4ca8:	00004c17 	.word	0x00004c17

00004cac <aes_init>:
{
    4cac:	b570      	push	{r4, r5, r6, lr}
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    4cae:	4c05      	ldr	r4, [pc, #20]	; (4cc4 <aes_init+0x18>)
    4cb0:	69e5      	ldr	r5, [r4, #28]
    4cb2:	2380      	movs	r3, #128	; 0x80
    4cb4:	019b      	lsls	r3, r3, #6
    4cb6:	432b      	orrs	r3, r5
    4cb8:	61e3      	str	r3, [r4, #28]
	hw->CTRLA.reg = AES_CTRLA_SWRST;
    4cba:	2301      	movs	r3, #1
    4cbc:	600b      	str	r3, [r1, #0]
	aes_set_config(module,hw, config);
    4cbe:	4b02      	ldr	r3, [pc, #8]	; (4cc8 <aes_init+0x1c>)
    4cc0:	4798      	blx	r3
}
    4cc2:	bd70      	pop	{r4, r5, r6, pc}
    4cc4:	40000400 	.word	0x40000400
    4cc8:	00004c39 	.word	0x00004c39

00004ccc <aes_write_key>:
 * \note The key size depends on the current AES configuration.
 */
void aes_write_key(
		struct aes_module *const module,
		const uint32_t *key)
{
    4ccc:	b570      	push	{r4, r5, r6, lr}
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(key);

	switch (module->key_size) {
    4cce:	7943      	ldrb	r3, [r0, #5]
    4cd0:	2b01      	cmp	r3, #1
    4cd2:	d005      	beq.n	4ce0 <aes_write_key+0x14>
    4cd4:	2b00      	cmp	r3, #0
    4cd6:	d010      	beq.n	4cfa <aes_write_key+0x2e>
    4cd8:	2b02      	cmp	r3, #2
    4cda:	d10d      	bne.n	4cf8 <aes_write_key+0x2c>
	case AES_KEY_SIZE_192:
		key_length = 6;
		break;

	case AES_KEY_SIZE_256:
		key_length = 8;
    4cdc:	2508      	movs	r5, #8
    4cde:	e000      	b.n	4ce2 <aes_write_key+0x16>
		key_length = 6;
    4ce0:	2506      	movs	r5, #6
{
    4ce2:	2300      	movs	r3, #0
	default:
		break;
	}

	for (i = 0; i < key_length; i++) {
		module->hw->KEYWORD[i].reg = *key;
    4ce4:	c910      	ldmia	r1!, {r4}
    4ce6:	1c9a      	adds	r2, r3, #2
    4ce8:	0092      	lsls	r2, r2, #2
    4cea:	6806      	ldr	r6, [r0, #0]
    4cec:	46b4      	mov	ip, r6
    4cee:	4462      	add	r2, ip
    4cf0:	6054      	str	r4, [r2, #4]
	for (i = 0; i < key_length; i++) {
    4cf2:	3301      	adds	r3, #1
    4cf4:	42ab      	cmp	r3, r5
    4cf6:	d3f5      	bcc.n	4ce4 <aes_write_key+0x18>
		key++;
	}
}
    4cf8:	bd70      	pop	{r4, r5, r6, pc}
		key_length = 4;
    4cfa:	2504      	movs	r5, #4
    4cfc:	e7f1      	b.n	4ce2 <aes_write_key+0x16>
    4cfe:	Address 0x00004cfe is out of bounds.


00004d00 <aes_write_input_data>:
 * \param[in] input_data_buffer Pointer to an input data buffer
 */
void aes_write_input_data(
		struct aes_module *const module,
		const uint32_t *input_data_buffer)
{
    4d00:	b510      	push	{r4, lr}
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);;
	Assert(input_data_buffer);

	module->hw->DATABUFPTR.reg = 0;
    4d02:	2300      	movs	r3, #0
    4d04:	6802      	ldr	r2, [r0, #0]
    4d06:	7213      	strb	r3, [r2, #8]
	if (module->opmode == AES_CFB_MODE
		&& module->cfb_size == AES_CFB_SIZE_64){
    4d08:	4b0f      	ldr	r3, [pc, #60]	; (4d48 <aes_write_input_data+0x48>)
    4d0a:	6842      	ldr	r2, [r0, #4]
    4d0c:	4013      	ands	r3, r2
	if (module->opmode == AES_CFB_MODE
    4d0e:	4a0f      	ldr	r2, [pc, #60]	; (4d4c <aes_write_input_data+0x4c>)
    4d10:	4293      	cmp	r3, r2
    4d12:	d00a      	beq.n	4d2a <aes_write_input_data+0x2a>
		for (i = 0; i < 2; i++) {
			module->hw->INDATA.reg = *input_data_buffer;
			input_data_buffer++;
		}
	} else if (module->opmode == AES_CFB_MODE
    4d14:	7903      	ldrb	r3, [r0, #4]
    4d16:	2b03      	cmp	r3, #3
    4d18:	d00e      	beq.n	4d38 <aes_write_input_data+0x38>
    4d1a:	000c      	movs	r4, r1
    4d1c:	3410      	adds	r4, #16
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
		module->hw->INDATA.reg = *input_data_buffer;
	} else {
		for (i = 0; i < 4; i++) {
			module->hw->INDATA.reg = *input_data_buffer;
    4d1e:	6803      	ldr	r3, [r0, #0]
    4d20:	c904      	ldmia	r1!, {r2}
    4d22:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < 4; i++) {
    4d24:	428c      	cmp	r4, r1
    4d26:	d1fa      	bne.n	4d1e <aes_write_input_data+0x1e>
			input_data_buffer++;
		}
	}
}
    4d28:	bd10      	pop	{r4, pc}
			module->hw->INDATA.reg = *input_data_buffer;
    4d2a:	6803      	ldr	r3, [r0, #0]
    4d2c:	680a      	ldr	r2, [r1, #0]
    4d2e:	639a      	str	r2, [r3, #56]	; 0x38
    4d30:	6803      	ldr	r3, [r0, #0]
    4d32:	684a      	ldr	r2, [r1, #4]
    4d34:	639a      	str	r2, [r3, #56]	; 0x38
    4d36:	e7f7      	b.n	4d28 <aes_write_input_data+0x28>
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
    4d38:	7983      	ldrb	r3, [r0, #6]
    4d3a:	3b02      	subs	r3, #2
    4d3c:	2b01      	cmp	r3, #1
    4d3e:	d8ec      	bhi.n	4d1a <aes_write_input_data+0x1a>
		module->hw->INDATA.reg = *input_data_buffer;
    4d40:	6803      	ldr	r3, [r0, #0]
    4d42:	680a      	ldr	r2, [r1, #0]
    4d44:	639a      	str	r2, [r3, #56]	; 0x38
    4d46:	e7ef      	b.n	4d28 <aes_write_input_data+0x28>
    4d48:	00ff00ff 	.word	0x00ff00ff
    4d4c:	00010003 	.word	0x00010003

00004d50 <aes_read_output_data>:
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(output_data_buffer);

	module->hw->DATABUFPTR.reg = 0;
    4d50:	2300      	movs	r3, #0
    4d52:	6802      	ldr	r2, [r0, #0]
    4d54:	7213      	strb	r3, [r2, #8]
	if (module->opmode == AES_CFB_MODE
		&& module->cfb_size == AES_CFB_SIZE_64){
    4d56:	4b10      	ldr	r3, [pc, #64]	; (4d98 <aes_read_output_data+0x48>)
    4d58:	6842      	ldr	r2, [r0, #4]
    4d5a:	4013      	ands	r3, r2
	if (module->opmode == AES_CFB_MODE
    4d5c:	4a0f      	ldr	r2, [pc, #60]	; (4d9c <aes_read_output_data+0x4c>)
    4d5e:	4293      	cmp	r3, r2
    4d60:	d00a      	beq.n	4d78 <aes_read_output_data+0x28>
		for (i = 0; i < 2; i++) {
			*output_data_buffer = module->hw->INDATA.reg;
			output_data_buffer++;
		}
	} else if (module->opmode == AES_CFB_MODE
    4d62:	7903      	ldrb	r3, [r0, #4]
    4d64:	2b03      	cmp	r3, #3
    4d66:	d00e      	beq.n	4d86 <aes_read_output_data+0x36>
    4d68:	000a      	movs	r2, r1
    4d6a:	3210      	adds	r2, #16
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
		*output_data_buffer = module->hw->INDATA.reg;
	} else {
		for (i = 0; i < 4; i++) {
			*output_data_buffer = module->hw->INDATA.reg;
    4d6c:	6803      	ldr	r3, [r0, #0]
    4d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4d70:	c108      	stmia	r1!, {r3}
		for (i = 0; i < 4; i++) {
    4d72:	428a      	cmp	r2, r1
    4d74:	d1fa      	bne.n	4d6c <aes_read_output_data+0x1c>
			output_data_buffer++;
		}
	}
}
    4d76:	4770      	bx	lr
			*output_data_buffer = module->hw->INDATA.reg;
    4d78:	6803      	ldr	r3, [r0, #0]
    4d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4d7c:	600b      	str	r3, [r1, #0]
    4d7e:	6803      	ldr	r3, [r0, #0]
    4d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4d82:	604b      	str	r3, [r1, #4]
    4d84:	e7f7      	b.n	4d76 <aes_read_output_data+0x26>
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
    4d86:	7983      	ldrb	r3, [r0, #6]
    4d88:	3b02      	subs	r3, #2
    4d8a:	2b01      	cmp	r3, #1
    4d8c:	d8ec      	bhi.n	4d68 <aes_read_output_data+0x18>
		*output_data_buffer = module->hw->INDATA.reg;
    4d8e:	6803      	ldr	r3, [r0, #0]
    4d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4d92:	600b      	str	r3, [r1, #0]
    4d94:	e7ef      	b.n	4d76 <aes_read_output_data+0x26>
    4d96:	46c0      	nop			; (mov r8, r8)
    4d98:	00ff00ff 	.word	0x00ff00ff
    4d9c:	00010003 	.word	0x00010003

00004da0 <AES_Handler>:

/**
* \internal The AES interrupt handler.
*/
void AES_Handler(void)
{
    4da0:	b510      	push	{r4, lr}
	uint32_t status = AES->INTFLAG.reg;
    4da2:	4b0c      	ldr	r3, [pc, #48]	; (4dd4 <AES_Handler+0x34>)
    4da4:	79dc      	ldrb	r4, [r3, #7]
    4da6:	b2e4      	uxtb	r4, r4

	if (status & AES_INTFLAG_ENCCMP) {
    4da8:	07e3      	lsls	r3, r4, #31
    4daa:	d507      	bpl.n	4dbc <AES_Handler+0x1c>
		if (aes_callback_pointer[AES_CALLBACK_ENCRYPTION_COMPLETE]) {
    4dac:	4b0a      	ldr	r3, [pc, #40]	; (4dd8 <AES_Handler+0x38>)
    4dae:	681b      	ldr	r3, [r3, #0]
    4db0:	2b00      	cmp	r3, #0
    4db2:	d00d      	beq.n	4dd0 <AES_Handler+0x30>
			AES->INTFLAG.reg = AES_INTFLAG_ENCCMP;
    4db4:	2101      	movs	r1, #1
    4db6:	4a07      	ldr	r2, [pc, #28]	; (4dd4 <AES_Handler+0x34>)
    4db8:	71d1      	strb	r1, [r2, #7]
			aes_callback_pointer[AES_CALLBACK_ENCRYPTION_COMPLETE]();
    4dba:	4798      	blx	r3
		}
	}

	if (status & AES_INTFLAG_GFMCMP) {
    4dbc:	07a3      	lsls	r3, r4, #30
    4dbe:	d507      	bpl.n	4dd0 <AES_Handler+0x30>
		if (aes_callback_pointer[AES_CALLBACK_ENCRYPTION_COMPLETE]) {
    4dc0:	4b05      	ldr	r3, [pc, #20]	; (4dd8 <AES_Handler+0x38>)
    4dc2:	681b      	ldr	r3, [r3, #0]
    4dc4:	2b00      	cmp	r3, #0
    4dc6:	d003      	beq.n	4dd0 <AES_Handler+0x30>
			AES->INTFLAG.reg = AES_INTFLAG_GFMCMP;
    4dc8:	2102      	movs	r1, #2
    4dca:	4a02      	ldr	r2, [pc, #8]	; (4dd4 <AES_Handler+0x34>)
    4dcc:	71d1      	strb	r1, [r2, #7]
			aes_callback_pointer[AES_CALLBACK_ENCRYPTION_COMPLETE]();
    4dce:	4798      	blx	r3
		}
	}
}
    4dd0:	bd10      	pop	{r4, pc}
    4dd2:	46c0      	nop			; (mov r8, r8)
    4dd4:	42003400 	.word	0x42003400
    4dd8:	200002b8 	.word	0x200002b8

00004ddc <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4ddc:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    4dde:	2a00      	cmp	r2, #0
    4de0:	d001      	beq.n	4de6 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    4de2:	0018      	movs	r0, r3
    4de4:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    4de6:	008b      	lsls	r3, r1, #2
    4de8:	4a06      	ldr	r2, [pc, #24]	; (4e04 <extint_register_callback+0x28>)
    4dea:	589b      	ldr	r3, [r3, r2]
    4dec:	2b00      	cmp	r3, #0
    4dee:	d003      	beq.n	4df8 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    4df0:	4283      	cmp	r3, r0
    4df2:	d005      	beq.n	4e00 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    4df4:	231d      	movs	r3, #29
    4df6:	e7f4      	b.n	4de2 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    4df8:	0089      	lsls	r1, r1, #2
    4dfa:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    4dfc:	2300      	movs	r3, #0
    4dfe:	e7f0      	b.n	4de2 <extint_register_callback+0x6>
		return STATUS_OK;
    4e00:	2300      	movs	r3, #0
    4e02:	e7ee      	b.n	4de2 <extint_register_callback+0x6>
    4e04:	20002104 	.word	0x20002104

00004e08 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4e08:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    4e0a:	2900      	cmp	r1, #0
    4e0c:	d001      	beq.n	4e12 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    4e0e:	0018      	movs	r0, r3
    4e10:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    4e12:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    4e14:	281f      	cmp	r0, #31
    4e16:	d800      	bhi.n	4e1a <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    4e18:	4a02      	ldr	r2, [pc, #8]	; (4e24 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    4e1a:	2301      	movs	r3, #1
    4e1c:	4083      	lsls	r3, r0
    4e1e:	6113      	str	r3, [r2, #16]
	return STATUS_OK;
    4e20:	2300      	movs	r3, #0
    4e22:	e7f4      	b.n	4e0e <extint_chan_enable_callback+0x6>
    4e24:	40002400 	.word	0x40002400

00004e28 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    4e28:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4e2a:	2200      	movs	r2, #0
    4e2c:	4b10      	ldr	r3, [pc, #64]	; (4e70 <EIC_Handler+0x48>)
    4e2e:	701a      	strb	r2, [r3, #0]
    4e30:	2300      	movs	r3, #0
    4e32:	4910      	ldr	r1, [pc, #64]	; (4e74 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    4e34:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    4e36:	4e10      	ldr	r6, [pc, #64]	; (4e78 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4e38:	4c0d      	ldr	r4, [pc, #52]	; (4e70 <EIC_Handler+0x48>)
    4e3a:	e00a      	b.n	4e52 <EIC_Handler+0x2a>
		return eics[eic_index];
    4e3c:	490d      	ldr	r1, [pc, #52]	; (4e74 <EIC_Handler+0x4c>)
    4e3e:	e008      	b.n	4e52 <EIC_Handler+0x2a>
    4e40:	7823      	ldrb	r3, [r4, #0]
    4e42:	3301      	adds	r3, #1
    4e44:	b2db      	uxtb	r3, r3
    4e46:	7023      	strb	r3, [r4, #0]
    4e48:	2b0f      	cmp	r3, #15
    4e4a:	d810      	bhi.n	4e6e <EIC_Handler+0x46>
		return NULL;
    4e4c:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    4e4e:	2b1f      	cmp	r3, #31
    4e50:	d9f4      	bls.n	4e3c <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    4e52:	0028      	movs	r0, r5
    4e54:	4018      	ands	r0, r3
    4e56:	2201      	movs	r2, #1
    4e58:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    4e5a:	6948      	ldr	r0, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
    4e5c:	4210      	tst	r0, r2
    4e5e:	d0ef      	beq.n	4e40 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    4e60:	614a      	str	r2, [r1, #20]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    4e62:	009b      	lsls	r3, r3, #2
    4e64:	599b      	ldr	r3, [r3, r6]
    4e66:	2b00      	cmp	r3, #0
    4e68:	d0ea      	beq.n	4e40 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    4e6a:	4798      	blx	r3
    4e6c:	e7e8      	b.n	4e40 <EIC_Handler+0x18>
			}
		}
	}
}
    4e6e:	bd70      	pop	{r4, r5, r6, pc}
    4e70:	20002103 	.word	0x20002103
    4e74:	40002400 	.word	0x40002400
    4e78:	20002104 	.word	0x20002104

00004e7c <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
    4e7c:	4a06      	ldr	r2, [pc, #24]	; (4e98 <_extint_enable+0x1c>)
    4e7e:	7813      	ldrb	r3, [r2, #0]
    4e80:	2102      	movs	r1, #2
    4e82:	430b      	orrs	r3, r1
    4e84:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4e86:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    4e88:	6853      	ldr	r3, [r2, #4]
    4e8a:	4219      	tst	r1, r3
    4e8c:	d1fc      	bne.n	4e88 <_extint_enable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4e8e:	6853      	ldr	r3, [r2, #4]
    4e90:	4218      	tst	r0, r3
    4e92:	d1f9      	bne.n	4e88 <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    4e94:	4770      	bx	lr
    4e96:	46c0      	nop			; (mov r8, r8)
    4e98:	40002400 	.word	0x40002400

00004e9c <_extint_disable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Disable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    4e9c:	4a06      	ldr	r2, [pc, #24]	; (4eb8 <_extint_disable+0x1c>)
    4e9e:	7813      	ldrb	r3, [r2, #0]
    4ea0:	2102      	movs	r1, #2
    4ea2:	438b      	bics	r3, r1
    4ea4:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4ea6:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    4ea8:	6853      	ldr	r3, [r2, #4]
    4eaa:	4219      	tst	r1, r3
    4eac:	d1fc      	bne.n	4ea8 <_extint_disable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4eae:	6853      	ldr	r3, [r2, #4]
    4eb0:	4218      	tst	r0, r3
    4eb2:	d1f9      	bne.n	4ea8 <_extint_disable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    4eb4:	4770      	bx	lr
    4eb6:	46c0      	nop			; (mov r8, r8)
    4eb8:	40002400 	.word	0x40002400

00004ebc <_system_extint_init>:
{
    4ebc:	b510      	push	{r4, lr}
			MCLK->APBAMASK.reg |= mask;
    4ebe:	4a12      	ldr	r2, [pc, #72]	; (4f08 <_system_extint_init+0x4c>)
    4ec0:	6951      	ldr	r1, [r2, #20]
    4ec2:	2380      	movs	r3, #128	; 0x80
    4ec4:	009b      	lsls	r3, r3, #2
    4ec6:	430b      	orrs	r3, r1
    4ec8:	6153      	str	r3, [r2, #20]
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
    4eca:	4a10      	ldr	r2, [pc, #64]	; (4f0c <_system_extint_init+0x50>)
    4ecc:	7813      	ldrb	r3, [r2, #0]
    4ece:	2101      	movs	r1, #1
    4ed0:	430b      	orrs	r3, r1
    4ed2:	7013      	strb	r3, [r2, #0]
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    4ed4:	3101      	adds	r1, #1
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4ed6:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    4ed8:	6853      	ldr	r3, [r2, #4]
    4eda:	4219      	tst	r1, r3
    4edc:	d1fc      	bne.n	4ed8 <_system_extint_init+0x1c>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4ede:	6853      	ldr	r3, [r2, #4]
    4ee0:	4218      	tst	r0, r3
    4ee2:	d1f9      	bne.n	4ed8 <_system_extint_init+0x1c>
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_ULP32K;
    4ee4:	4a09      	ldr	r2, [pc, #36]	; (4f0c <_system_extint_init+0x50>)
    4ee6:	7813      	ldrb	r3, [r2, #0]
    4ee8:	2110      	movs	r1, #16
    4eea:	430b      	orrs	r3, r1
    4eec:	7013      	strb	r3, [r2, #0]
    4eee:	4b08      	ldr	r3, [pc, #32]	; (4f10 <_system_extint_init+0x54>)
    4ef0:	0019      	movs	r1, r3
    4ef2:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    4ef4:	2200      	movs	r2, #0
    4ef6:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    4ef8:	428b      	cmp	r3, r1
    4efa:	d1fc      	bne.n	4ef6 <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4efc:	2208      	movs	r2, #8
    4efe:	4b05      	ldr	r3, [pc, #20]	; (4f14 <_system_extint_init+0x58>)
    4f00:	601a      	str	r2, [r3, #0]
	_extint_enable();
    4f02:	4b05      	ldr	r3, [pc, #20]	; (4f18 <_system_extint_init+0x5c>)
    4f04:	4798      	blx	r3
}
    4f06:	bd10      	pop	{r4, pc}
    4f08:	40000400 	.word	0x40000400
    4f0c:	40002400 	.word	0x40002400
    4f10:	20002104 	.word	0x20002104
    4f14:	e000e100 	.word	0xe000e100
    4f18:	00004e7d 	.word	0x00004e7d

00004f1c <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    4f1c:	2300      	movs	r3, #0
    4f1e:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    4f20:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    4f22:	2201      	movs	r2, #1
    4f24:	7202      	strb	r2, [r0, #8]
	config->filter_input_signal = false;
    4f26:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    4f28:	3201      	adds	r2, #1
    4f2a:	72c2      	strb	r2, [r0, #11]
	config->enable_async_edge_detection = false;
    4f2c:	7243      	strb	r3, [r0, #9]
}
    4f2e:	4770      	bx	lr

00004f30 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    4f30:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f32:	b083      	sub	sp, #12
    4f34:	0005      	movs	r5, r0
    4f36:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);
	_extint_disable();
    4f38:	4b1c      	ldr	r3, [pc, #112]	; (4fac <extint_chan_set_config+0x7c>)
    4f3a:	4798      	blx	r3
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4f3c:	a901      	add	r1, sp, #4
    4f3e:	2300      	movs	r3, #0
    4f40:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    4f42:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));
#endif
	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    4f44:	7923      	ldrb	r3, [r4, #4]
    4f46:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    4f48:	7a23      	ldrb	r3, [r4, #8]
    4f4a:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    4f4c:	7820      	ldrb	r0, [r4, #0]
    4f4e:	4b18      	ldr	r3, [pc, #96]	; (4fb0 <extint_chan_set_config+0x80>)
    4f50:	4798      	blx	r3
		return NULL;
    4f52:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    4f54:	2d1f      	cmp	r5, #31
    4f56:	d800      	bhi.n	4f5a <extint_chan_set_config+0x2a>
		return eics[eic_index];
    4f58:	4916      	ldr	r1, [pc, #88]	; (4fb4 <extint_chan_set_config+0x84>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    4f5a:	2207      	movs	r2, #7
    4f5c:	402a      	ands	r2, r5
    4f5e:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    4f60:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    4f62:	7aa3      	ldrb	r3, [r4, #10]
    4f64:	2b00      	cmp	r3, #0
    4f66:	d001      	beq.n	4f6c <extint_chan_set_config+0x3c>
    4f68:	2308      	movs	r3, #8
    4f6a:	431f      	orrs	r7, r3
    4f6c:	08eb      	lsrs	r3, r5, #3
    4f6e:	009b      	lsls	r3, r3, #2
    4f70:	18cb      	adds	r3, r1, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    4f72:	69d8      	ldr	r0, [r3, #28]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    4f74:	260f      	movs	r6, #15
    4f76:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    4f78:	43b0      	bics	r0, r6
			(new_config << config_pos);
    4f7a:	4097      	lsls	r7, r2
    4f7c:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    4f7e:	4302      	orrs	r2, r0
		= (EIC_module->CONFIG[channel / 8].reg &
    4f80:	61da      	str	r2, [r3, #28]
#if (SAML22) || (SAML21XXXB) || (SAMC20) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	/* Config asynchronous edge detection */
	if (config->enable_async_edge_detection) {
    4f82:	7a63      	ldrb	r3, [r4, #9]
    4f84:	2b00      	cmp	r3, #0
    4f86:	d10b      	bne.n	4fa0 <extint_chan_set_config+0x70>
		EIC_module->ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->ASYNCH.reg &= (EIC_ASYNCH_MASK & (~(1UL << channel)));
    4f88:	698a      	ldr	r2, [r1, #24]
    4f8a:	2301      	movs	r3, #1
    4f8c:	40ab      	lsls	r3, r5
    4f8e:	43db      	mvns	r3, r3
    4f90:	041b      	lsls	r3, r3, #16
    4f92:	0c1b      	lsrs	r3, r3, #16
    4f94:	4013      	ands	r3, r2
    4f96:	618b      	str	r3, [r1, #24]
		EIC_module->EIC_ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->EIC_ASYNCH.reg &= (EIC_EIC_ASYNCH_MASK & (~(1UL << channel)));
	}
#endif
	_extint_enable();
    4f98:	4b07      	ldr	r3, [pc, #28]	; (4fb8 <extint_chan_set_config+0x88>)
    4f9a:	4798      	blx	r3
}
    4f9c:	b003      	add	sp, #12
    4f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->ASYNCH.reg |= (1UL << channel);
    4fa0:	698a      	ldr	r2, [r1, #24]
    4fa2:	2301      	movs	r3, #1
    4fa4:	40ab      	lsls	r3, r5
    4fa6:	4313      	orrs	r3, r2
    4fa8:	618b      	str	r3, [r1, #24]
    4faa:	e7f5      	b.n	4f98 <extint_chan_set_config+0x68>
    4fac:	00004e9d 	.word	0x00004e9d
    4fb0:	00006c49 	.word	0x00006c49
    4fb4:	40002400 	.word	0x40002400
    4fb8:	00004e7d 	.word	0x00004e7d

00004fbc <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    4fbc:	b510      	push	{r4, lr}
			MCLK->APBBMASK.reg |= mask;
    4fbe:	4a1e      	ldr	r2, [pc, #120]	; (5038 <nvm_set_config+0x7c>)
    4fc0:	6993      	ldr	r3, [r2, #24]
    4fc2:	2104      	movs	r1, #4
    4fc4:	430b      	orrs	r3, r1
    4fc6:	6193      	str	r3, [r2, #24]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4fc8:	4b1c      	ldr	r3, [pc, #112]	; (503c <nvm_set_config+0x80>)
    4fca:	2220      	movs	r2, #32
    4fcc:	32ff      	adds	r2, #255	; 0xff
    4fce:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    4fd0:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
    4fd2:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
    4fd4:	07d2      	lsls	r2, r2, #31
    4fd6:	d401      	bmi.n	4fdc <nvm_set_config+0x20>
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
}
    4fd8:	0018      	movs	r0, r3
    4fda:	bd10      	pop	{r4, pc}
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    4fdc:	7803      	ldrb	r3, [r0, #0]
    4fde:	021b      	lsls	r3, r3, #8
    4fe0:	22c0      	movs	r2, #192	; 0xc0
    4fe2:	0092      	lsls	r2, r2, #2
    4fe4:	4013      	ands	r3, r2
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    4fe6:	7841      	ldrb	r1, [r0, #1]
    4fe8:	01c9      	lsls	r1, r1, #7
    4fea:	22ff      	movs	r2, #255	; 0xff
    4fec:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    4fee:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    4ff0:	7881      	ldrb	r1, [r0, #2]
    4ff2:	0049      	lsls	r1, r1, #1
    4ff4:	221e      	movs	r2, #30
    4ff6:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    4ff8:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    4ffa:	78c2      	ldrb	r2, [r0, #3]
    4ffc:	0492      	lsls	r2, r2, #18
    4ffe:	2180      	movs	r1, #128	; 0x80
    5000:	02c9      	lsls	r1, r1, #11
    5002:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    5004:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    5006:	7902      	ldrb	r2, [r0, #4]
    5008:	0412      	lsls	r2, r2, #16
    500a:	21c0      	movs	r1, #192	; 0xc0
    500c:	0289      	lsls	r1, r1, #10
    500e:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    5010:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
    5012:	4a0a      	ldr	r2, [pc, #40]	; (503c <nvm_set_config+0x80>)
    5014:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    5016:	6893      	ldr	r3, [r2, #8]
    5018:	035b      	lsls	r3, r3, #13
    501a:	0f5b      	lsrs	r3, r3, #29
    501c:	4908      	ldr	r1, [pc, #32]	; (5040 <nvm_set_config+0x84>)
    501e:	2408      	movs	r4, #8
    5020:	409c      	lsls	r4, r3
    5022:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    5024:	6893      	ldr	r3, [r2, #8]
    5026:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    5028:	7843      	ldrb	r3, [r0, #1]
    502a:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    502c:	8b13      	ldrh	r3, [r2, #24]
    502e:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
    5030:	0fdb      	lsrs	r3, r3, #31
    5032:	011b      	lsls	r3, r3, #4
    5034:	e7d0      	b.n	4fd8 <nvm_set_config+0x1c>
    5036:	46c0      	nop			; (mov r8, r8)
    5038:	40000400 	.word	0x40000400
    503c:	41004000 	.word	0x41004000
    5040:	200002c0 	.word	0x200002c0

00005044 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    5044:	b530      	push	{r4, r5, lr}
    5046:	0004      	movs	r4, r0
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    5048:	4a25      	ldr	r2, [pc, #148]	; (50e0 <nvm_execute_command+0x9c>)
    504a:	8810      	ldrh	r0, [r2, #0]
    504c:	8853      	ldrh	r3, [r2, #2]
    504e:	4343      	muls	r3, r0
    5050:	428b      	cmp	r3, r1
    5052:	d20b      	bcs.n	506c <nvm_execute_command+0x28>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    5054:	2280      	movs	r2, #128	; 0x80
    5056:	0192      	lsls	r2, r2, #6
    5058:	4b22      	ldr	r3, [pc, #136]	; (50e4 <nvm_execute_command+0xa0>)
    505a:	18cb      	adds	r3, r1, r3
    505c:	4293      	cmp	r3, r2
    505e:	d905      	bls.n	506c <nvm_execute_command+0x28>
#ifdef FEATURE_NVM_RWWEE
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    5060:	4a21      	ldr	r2, [pc, #132]	; (50e8 <nvm_execute_command+0xa4>)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    5062:	2018      	movs	r0, #24
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    5064:	4b21      	ldr	r3, [pc, #132]	; (50ec <nvm_execute_command+0xa8>)
    5066:	18cb      	adds	r3, r1, r3
    5068:	4293      	cmp	r3, r2
    506a:	d80e      	bhi.n	508a <nvm_execute_command+0x46>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    506c:	4b20      	ldr	r3, [pc, #128]	; (50f0 <nvm_execute_command+0xac>)
    506e:	685d      	ldr	r5, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    5070:	2280      	movs	r2, #128	; 0x80
    5072:	02d2      	lsls	r2, r2, #11
    5074:	432a      	orrs	r2, r5
    5076:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    5078:	2220      	movs	r2, #32
    507a:	32ff      	adds	r2, #255	; 0xff
    507c:	831a      	strh	r2, [r3, #24]
    507e:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    5080:	07db      	lsls	r3, r3, #31
    5082:	d403      	bmi.n	508c <nvm_execute_command+0x48>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    5084:	4b1a      	ldr	r3, [pc, #104]	; (50f0 <nvm_execute_command+0xac>)
    5086:	605d      	str	r5, [r3, #4]
		return STATUS_BUSY;
    5088:	2005      	movs	r0, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
    508a:	bd30      	pop	{r4, r5, pc}
	switch (command) {
    508c:	2c45      	cmp	r4, #69	; 0x45
    508e:	d822      	bhi.n	50d6 <nvm_execute_command+0x92>
    5090:	00a3      	lsls	r3, r4, #2
    5092:	4a18      	ldr	r2, [pc, #96]	; (50f4 <nvm_execute_command+0xb0>)
    5094:	58d3      	ldr	r3, [r2, r3]
    5096:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    5098:	4b15      	ldr	r3, [pc, #84]	; (50f0 <nvm_execute_command+0xac>)
    509a:	8b1b      	ldrh	r3, [r3, #24]
    509c:	05db      	lsls	r3, r3, #23
    509e:	d503      	bpl.n	50a8 <nvm_execute_command+0x64>
				nvm_module->CTRLB.reg = ctrlb_bak;
    50a0:	4b13      	ldr	r3, [pc, #76]	; (50f0 <nvm_execute_command+0xac>)
    50a2:	605d      	str	r5, [r3, #4]
				return STATUS_ERR_IO;
    50a4:	2010      	movs	r0, #16
    50a6:	e7f0      	b.n	508a <nvm_execute_command+0x46>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    50a8:	0889      	lsrs	r1, r1, #2
    50aa:	0049      	lsls	r1, r1, #1
    50ac:	4b10      	ldr	r3, [pc, #64]	; (50f0 <nvm_execute_command+0xac>)
    50ae:	61d9      	str	r1, [r3, #28]
			break;
    50b0:	e003      	b.n	50ba <nvm_execute_command+0x76>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    50b2:	0889      	lsrs	r1, r1, #2
    50b4:	0049      	lsls	r1, r1, #1
    50b6:	4b0e      	ldr	r3, [pc, #56]	; (50f0 <nvm_execute_command+0xac>)
    50b8:	61d9      	str	r1, [r3, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    50ba:	20a5      	movs	r0, #165	; 0xa5
    50bc:	0200      	lsls	r0, r0, #8
    50be:	4304      	orrs	r4, r0
    50c0:	4b0b      	ldr	r3, [pc, #44]	; (50f0 <nvm_execute_command+0xac>)
    50c2:	801c      	strh	r4, [r3, #0]
    50c4:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    50c6:	2201      	movs	r2, #1
    50c8:	7d0b      	ldrb	r3, [r1, #20]
    50ca:	4213      	tst	r3, r2
    50cc:	d0fc      	beq.n	50c8 <nvm_execute_command+0x84>
	nvm_module->CTRLB.reg = ctrlb_bak;
    50ce:	4b08      	ldr	r3, [pc, #32]	; (50f0 <nvm_execute_command+0xac>)
    50d0:	605d      	str	r5, [r3, #4]
	return STATUS_OK;
    50d2:	2000      	movs	r0, #0
    50d4:	e7d9      	b.n	508a <nvm_execute_command+0x46>
			nvm_module->CTRLB.reg = ctrlb_bak;
    50d6:	4b06      	ldr	r3, [pc, #24]	; (50f0 <nvm_execute_command+0xac>)
    50d8:	605d      	str	r5, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    50da:	2017      	movs	r0, #23
    50dc:	e7d5      	b.n	508a <nvm_execute_command+0x46>
    50de:	46c0      	nop			; (mov r8, r8)
    50e0:	200002c0 	.word	0x200002c0
    50e4:	ff7fc000 	.word	0xff7fc000
    50e8:	00001fff 	.word	0x00001fff
    50ec:	ffc00000 	.word	0xffc00000
    50f0:	41004000 	.word	0x41004000
    50f4:	00019194 	.word	0x00019194

000050f8 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    50f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    50fa:	4b2f      	ldr	r3, [pc, #188]	; (51b8 <nvm_write_buffer+0xc0>)
    50fc:	881c      	ldrh	r4, [r3, #0]
    50fe:	885b      	ldrh	r3, [r3, #2]
    5100:	4363      	muls	r3, r4
	if (destination_address >
    5102:	4283      	cmp	r3, r0
    5104:	d207      	bcs.n	5116 <nvm_write_buffer+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    5106:	4e2d      	ldr	r6, [pc, #180]	; (51bc <nvm_write_buffer+0xc4>)
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    5108:	2518      	movs	r5, #24
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    510a:	4b2d      	ldr	r3, [pc, #180]	; (51c0 <nvm_write_buffer+0xc8>)
    510c:	18c3      	adds	r3, r0, r3
    510e:	42b3      	cmp	r3, r6
    5110:	d806      	bhi.n	5120 <nvm_write_buffer+0x28>
		}
		is_rww_eeprom = true;
    5112:	2601      	movs	r6, #1
    5114:	e000      	b.n	5118 <nvm_write_buffer+0x20>
	bool is_rww_eeprom = false;
    5116:	2600      	movs	r6, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
    5118:	1e63      	subs	r3, r4, #1
		return STATUS_ERR_BAD_ADDRESS;
    511a:	2518      	movs	r5, #24
	if (destination_address & (_nvm_dev.page_size - 1)) {
    511c:	4218      	tst	r0, r3
    511e:	d001      	beq.n	5124 <nvm_write_buffer+0x2c>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
    5120:	0028      	movs	r0, r5
    5122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    5124:	3d01      	subs	r5, #1
	if (length > _nvm_dev.page_size) {
    5126:	4294      	cmp	r4, r2
    5128:	d3fa      	bcc.n	5120 <nvm_write_buffer+0x28>
    512a:	4b26      	ldr	r3, [pc, #152]	; (51c4 <nvm_write_buffer+0xcc>)
    512c:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    512e:	3d12      	subs	r5, #18
	if (!nvm_is_ready()) {
    5130:	07db      	lsls	r3, r3, #31
    5132:	d5f5      	bpl.n	5120 <nvm_write_buffer+0x28>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    5134:	4c24      	ldr	r4, [pc, #144]	; (51c8 <nvm_write_buffer+0xd0>)
    5136:	4b23      	ldr	r3, [pc, #140]	; (51c4 <nvm_write_buffer+0xcc>)
    5138:	801c      	strh	r4, [r3, #0]
    513a:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
    513c:	2401      	movs	r4, #1
    513e:	7d2b      	ldrb	r3, [r5, #20]
    5140:	4223      	tst	r3, r4
    5142:	d0fc      	beq.n	513e <nvm_write_buffer+0x46>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    5144:	2420      	movs	r4, #32
    5146:	34ff      	adds	r4, #255	; 0xff
    5148:	4b1e      	ldr	r3, [pc, #120]	; (51c4 <nvm_write_buffer+0xcc>)
    514a:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    514c:	2a00      	cmp	r2, #0
    514e:	d02c      	beq.n	51aa <nvm_write_buffer+0xb2>
    5150:	2301      	movs	r3, #1
    5152:	0005      	movs	r5, r0
    5154:	439d      	bics	r5, r3
    5156:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    5158:	1e54      	subs	r4, r2, #1
    515a:	46a4      	mov	ip, r4
    515c:	e009      	b.n	5172 <nvm_write_buffer+0x7a>
			data |= (buffer[i + 1] << 8);
    515e:	18cf      	adds	r7, r1, r3
    5160:	787f      	ldrb	r7, [r7, #1]
    5162:	023f      	lsls	r7, r7, #8
    5164:	433c      	orrs	r4, r7
		NVM_MEMORY[nvm_address++] = data;
    5166:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    5168:	3302      	adds	r3, #2
    516a:	b29b      	uxth	r3, r3
    516c:	3502      	adds	r5, #2
    516e:	429a      	cmp	r2, r3
    5170:	d904      	bls.n	517c <nvm_write_buffer+0x84>
		data = buffer[i];
    5172:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
    5174:	4563      	cmp	r3, ip
    5176:	dbf2      	blt.n	515e <nvm_write_buffer+0x66>
		data = buffer[i];
    5178:	b2a4      	uxth	r4, r4
    517a:	e7f4      	b.n	5166 <nvm_write_buffer+0x6e>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    517c:	4b0e      	ldr	r3, [pc, #56]	; (51b8 <nvm_write_buffer+0xc0>)
    517e:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    5180:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    5182:	2b00      	cmp	r3, #0
    5184:	d1cc      	bne.n	5120 <nvm_write_buffer+0x28>
    5186:	2a3f      	cmp	r2, #63	; 0x3f
    5188:	d8ca      	bhi.n	5120 <nvm_write_buffer+0x28>
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
    518a:	2e00      	cmp	r6, #0
    518c:	d106      	bne.n	519c <nvm_write_buffer+0xa4>
    518e:	2200      	movs	r2, #0
    5190:	0001      	movs	r1, r0
    5192:	2004      	movs	r0, #4
    5194:	4b0d      	ldr	r3, [pc, #52]	; (51cc <nvm_write_buffer+0xd4>)
    5196:	4798      	blx	r3
    5198:	0005      	movs	r5, r0
    519a:	e7c1      	b.n	5120 <nvm_write_buffer+0x28>
    519c:	2200      	movs	r2, #0
    519e:	0001      	movs	r1, r0
    51a0:	201c      	movs	r0, #28
    51a2:	4b0a      	ldr	r3, [pc, #40]	; (51cc <nvm_write_buffer+0xd4>)
    51a4:	4798      	blx	r3
    51a6:	0005      	movs	r5, r0
    51a8:	e7ba      	b.n	5120 <nvm_write_buffer+0x28>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    51aa:	4b03      	ldr	r3, [pc, #12]	; (51b8 <nvm_write_buffer+0xc0>)
    51ac:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    51ae:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    51b0:	2b00      	cmp	r3, #0
    51b2:	d0ea      	beq.n	518a <nvm_write_buffer+0x92>
    51b4:	e7b4      	b.n	5120 <nvm_write_buffer+0x28>
    51b6:	46c0      	nop			; (mov r8, r8)
    51b8:	200002c0 	.word	0x200002c0
    51bc:	00001fff 	.word	0x00001fff
    51c0:	ffc00000 	.word	0xffc00000
    51c4:	41004000 	.word	0x41004000
    51c8:	ffffa544 	.word	0xffffa544
    51cc:	00005045 	.word	0x00005045

000051d0 <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
    51d0:	b510      	push	{r4, lr}
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    51d2:	4a1b      	ldr	r2, [pc, #108]	; (5240 <nvm_erase_row+0x70>)
    51d4:	8813      	ldrh	r3, [r2, #0]
    51d6:	8852      	ldrh	r2, [r2, #2]
    51d8:	435a      	muls	r2, r3
	if (row_address >
    51da:	4282      	cmp	r2, r0
    51dc:	d207      	bcs.n	51ee <nvm_erase_row+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    51de:	4c19      	ldr	r4, [pc, #100]	; (5244 <nvm_erase_row+0x74>)
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    51e0:	2218      	movs	r2, #24
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    51e2:	4919      	ldr	r1, [pc, #100]	; (5248 <nvm_erase_row+0x78>)
    51e4:	1841      	adds	r1, r0, r1
    51e6:	42a1      	cmp	r1, r4
    51e8:	d807      	bhi.n	51fa <nvm_erase_row+0x2a>
		}
		is_rww_eeprom = true;
    51ea:	2101      	movs	r1, #1
    51ec:	e000      	b.n	51f0 <nvm_erase_row+0x20>
		bool is_rww_eeprom = false;
    51ee:	2100      	movs	r1, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    51f0:	009b      	lsls	r3, r3, #2
    51f2:	3b01      	subs	r3, #1
		return STATUS_ERR_BAD_ADDRESS;
    51f4:	2218      	movs	r2, #24
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    51f6:	4218      	tst	r0, r3
    51f8:	d001      	beq.n	51fe <nvm_erase_row+0x2e>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
    51fa:	0010      	movs	r0, r2
    51fc:	bd10      	pop	{r4, pc}
    51fe:	4b13      	ldr	r3, [pc, #76]	; (524c <nvm_erase_row+0x7c>)
    5200:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    5202:	3a13      	subs	r2, #19
	if (!nvm_is_ready()) {
    5204:	07db      	lsls	r3, r3, #31
    5206:	d5f8      	bpl.n	51fa <nvm_erase_row+0x2a>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    5208:	4b10      	ldr	r3, [pc, #64]	; (524c <nvm_erase_row+0x7c>)
    520a:	2220      	movs	r2, #32
    520c:	32ff      	adds	r2, #255	; 0xff
    520e:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    5210:	0880      	lsrs	r0, r0, #2
    5212:	0040      	lsls	r0, r0, #1
    5214:	61d8      	str	r0, [r3, #28]
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
    5216:	2900      	cmp	r1, #0
    5218:	d10f      	bne.n	523a <nvm_erase_row+0x6a>
    521a:	4a0d      	ldr	r2, [pc, #52]	; (5250 <nvm_erase_row+0x80>)
    521c:	4b0b      	ldr	r3, [pc, #44]	; (524c <nvm_erase_row+0x7c>)
    521e:	801a      	strh	r2, [r3, #0]
    5220:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    5222:	2201      	movs	r2, #1
    5224:	7d0b      	ldrb	r3, [r1, #20]
    5226:	4213      	tst	r3, r2
    5228:	d0fc      	beq.n	5224 <nvm_erase_row+0x54>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    522a:	4b08      	ldr	r3, [pc, #32]	; (524c <nvm_erase_row+0x7c>)
    522c:	8b1a      	ldrh	r2, [r3, #24]
    522e:	201c      	movs	r0, #28
    5230:	4002      	ands	r2, r0
	return STATUS_OK;
    5232:	1e50      	subs	r0, r2, #1
    5234:	4182      	sbcs	r2, r0
    5236:	0092      	lsls	r2, r2, #2
    5238:	e7df      	b.n	51fa <nvm_erase_row+0x2a>
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
    523a:	4a06      	ldr	r2, [pc, #24]	; (5254 <nvm_erase_row+0x84>)
    523c:	e7ee      	b.n	521c <nvm_erase_row+0x4c>
    523e:	46c0      	nop			; (mov r8, r8)
    5240:	200002c0 	.word	0x200002c0
    5244:	00001fff 	.word	0x00001fff
    5248:	ffc00000 	.word	0xffc00000
    524c:	41004000 	.word	0x41004000
    5250:	0000a502 	.word	0x0000a502
    5254:	0000a51a 	.word	0x0000a51a

00005258 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    5258:	b500      	push	{lr}
    525a:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    525c:	ab01      	add	r3, sp, #4
    525e:	2280      	movs	r2, #128	; 0x80
    5260:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    5262:	780a      	ldrb	r2, [r1, #0]
    5264:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    5266:	784a      	ldrb	r2, [r1, #1]
    5268:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    526a:	788a      	ldrb	r2, [r1, #2]
    526c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    526e:	0019      	movs	r1, r3
    5270:	4b01      	ldr	r3, [pc, #4]	; (5278 <port_pin_set_config+0x20>)
    5272:	4798      	blx	r3
}
    5274:	b003      	add	sp, #12
    5276:	bd00      	pop	{pc}
    5278:	00006c49 	.word	0x00006c49

0000527c <rtc_count_is_syncing>:
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    527c:	6803      	ldr	r3, [r0, #0]

	if (rtc_module->MODE0.SYNCBUSY.reg) {
    527e:	6918      	ldr	r0, [r3, #16]
    5280:	1e43      	subs	r3, r0, #1
    5282:	4198      	sbcs	r0, r3
    5284:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
    5286:	4770      	bx	lr

00005288 <rtc_count_get_count>:
 * Returns the current count value.
 *
 * \return The current counter value as a 32-bit unsigned integer.
 */
uint32_t rtc_count_get_count(struct rtc_module *const module)
{
    5288:	b570      	push	{r4, r5, r6, lr}
    528a:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    528c:	6806      	ldr	r6, [r0, #0]

	/* Initialize return value. */
	uint32_t ret_val;

	while (rtc_count_is_syncing(module)) {
    528e:	4d08      	ldr	r5, [pc, #32]	; (52b0 <rtc_count_get_count+0x28>)
    5290:	0020      	movs	r0, r4
    5292:	47a8      	blx	r5
    5294:	2800      	cmp	r0, #0
    5296:	d1fb      	bne.n	5290 <rtc_count_get_count+0x8>
		/* Wait for synchronization */
	}

	/* Read value based on mode. */
	switch (module->mode) {
    5298:	7923      	ldrb	r3, [r4, #4]
    529a:	2b00      	cmp	r3, #0
    529c:	d004      	beq.n	52a8 <rtc_count_get_count+0x20>
			break;

		default:
			Assert(false);
			/* Counter not initialized. Assume counter value 0.*/
			ret_val = 0;
    529e:	2000      	movs	r0, #0
	switch (module->mode) {
    52a0:	2b01      	cmp	r3, #1
    52a2:	d100      	bne.n	52a6 <rtc_count_get_count+0x1e>
			ret_val = rtc_module->MODE0.COUNT.reg;
    52a4:	69b0      	ldr	r0, [r6, #24]
			break;
	}

	return ret_val;
}
    52a6:	bd70      	pop	{r4, r5, r6, pc}
			ret_val = (uint32_t)rtc_module->MODE1.COUNT.reg;
    52a8:	8b30      	ldrh	r0, [r6, #24]
    52aa:	b280      	uxth	r0, r0
			break;
    52ac:	e7fb      	b.n	52a6 <rtc_count_get_count+0x1e>
    52ae:	46c0      	nop			; (mov r8, r8)
    52b0:	0000527d 	.word	0x0000527d

000052b4 <rtc_count_disable_callback>:
 * \param[in]     callback_type Callback type to disable
 */
void rtc_count_disable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
    52b4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    52b6:	6802      	ldr	r2, [r0, #0]

	/* Disable interrupt */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
    52b8:	290a      	cmp	r1, #10
    52ba:	d010      	beq.n	52de <rtc_count_disable_callback+0x2a>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_COUNT_CALLBACK_TAMPER) {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_TAMPER;
#endif
	} else if(callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    52bc:	2907      	cmp	r1, #7
    52be:	d911      	bls.n	52e4 <rtc_count_disable_callback+0x30>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7){
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
	}else {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_CMP(1 << (callback_type - RTC_PER_NUM));
    52c0:	2380      	movs	r3, #128	; 0x80
    52c2:	005b      	lsls	r3, r3, #1
    52c4:	000c      	movs	r4, r1
    52c6:	3c08      	subs	r4, #8
    52c8:	40a3      	lsls	r3, r4
    52ca:	24c0      	movs	r4, #192	; 0xc0
    52cc:	00a4      	lsls	r4, r4, #2
    52ce:	4023      	ands	r3, r4
    52d0:	8113      	strh	r3, [r2, #8]
	}

	/* Mark callback as disabled. */
	module->enabled_callback &= ~(1 << callback_type);
    52d2:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
    52d4:	2201      	movs	r2, #1
    52d6:	408a      	lsls	r2, r1
    52d8:	4393      	bics	r3, r2
    52da:	86c3      	strh	r3, [r0, #54]	; 0x36
}
    52dc:	bd10      	pop	{r4, pc}
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
    52de:	4b04      	ldr	r3, [pc, #16]	; (52f0 <rtc_count_disable_callback+0x3c>)
    52e0:	8113      	strh	r3, [r2, #8]
    52e2:	e7f6      	b.n	52d2 <rtc_count_disable_callback+0x1e>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
    52e4:	2401      	movs	r4, #1
    52e6:	408c      	lsls	r4, r1
    52e8:	23ff      	movs	r3, #255	; 0xff
    52ea:	4023      	ands	r3, r4
    52ec:	8113      	strh	r3, [r2, #8]
    52ee:	e7f0      	b.n	52d2 <rtc_count_disable_callback+0x1e>
    52f0:	ffff8000 	.word	0xffff8000

000052f4 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    52f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    52f6:	46de      	mov	lr, fp
    52f8:	4657      	mov	r7, sl
    52fa:	464e      	mov	r6, r9
    52fc:	4645      	mov	r5, r8
    52fe:	b5e0      	push	{r5, r6, r7, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    5300:	4b2b      	ldr	r3, [pc, #172]	; (53b0 <RTC_Handler+0xbc>)
    5302:	681b      	ldr	r3, [r3, #0]
    5304:	469a      	mov	sl, r3
	Rtc *const rtc_module = module->hw;
    5306:	681e      	ldr	r6, [r3, #0]
	uint16_t callback_mask = module->enabled_callback;
    5308:	8edb      	ldrh	r3, [r3, #54]	; 0x36
	callback_mask &= module->registered_callback;
    530a:	4652      	mov	r2, sl
    530c:	8e92      	ldrh	r2, [r2, #52]	; 0x34
    530e:	401a      	ands	r2, r3
    5310:	4690      	mov	r8, r2
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
    5312:	89b2      	ldrh	r2, [r6, #12]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
    5314:	8973      	ldrh	r3, [r6, #10]
    5316:	4013      	ands	r3, r2
	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
    5318:	b21a      	sxth	r2, r3
    531a:	2a00      	cmp	r2, #0
    531c:	db08      	blt.n	5330 <RTC_Handler+0x3c>
    531e:	27ff      	movs	r7, #255	; 0xff
    5320:	401f      	ands	r7, r3
	} else if (interrupt_status & RTC_MODE1_INTFLAG_PER(0xff)) {
    5322:	d02a      	beq.n	537a <RTC_Handler+0x86>
    5324:	2400      	movs	r4, #0
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    5326:	2301      	movs	r3, #1
    5328:	4699      	mov	r9, r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    532a:	33fe      	adds	r3, #254	; 0xfe
    532c:	469b      	mov	fp, r3
    532e:	e014      	b.n	535a <RTC_Handler+0x66>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
    5330:	4643      	mov	r3, r8
    5332:	055b      	lsls	r3, r3, #21
    5334:	d407      	bmi.n	5346 <RTC_Handler+0x52>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
    5336:	4b1f      	ldr	r3, [pc, #124]	; (53b4 <RTC_Handler+0xc0>)
    5338:	81b3      	strh	r3, [r6, #12]
	_rtc_interrupt_handler(0);
}
    533a:	bc3c      	pop	{r2, r3, r4, r5}
    533c:	4690      	mov	r8, r2
    533e:	4699      	mov	r9, r3
    5340:	46a2      	mov	sl, r4
    5342:	46ab      	mov	fp, r5
    5344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
    5346:	4653      	mov	r3, sl
    5348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    534a:	4798      	blx	r3
    534c:	e7f3      	b.n	5336 <RTC_Handler+0x42>
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    534e:	465b      	mov	r3, fp
    5350:	401d      	ands	r5, r3
    5352:	81b5      	strh	r5, [r6, #12]
    5354:	3401      	adds	r4, #1
		for ( i = 0;i < RTC_PER_NUM;i++) {
    5356:	2c08      	cmp	r4, #8
    5358:	d0ef      	beq.n	533a <RTC_Handler+0x46>
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    535a:	0023      	movs	r3, r4
    535c:	464d      	mov	r5, r9
    535e:	40a5      	lsls	r5, r4
    5360:	422f      	tst	r7, r5
    5362:	d0f4      	beq.n	534e <RTC_Handler+0x5a>
			  && (callback_mask & (1 << i))) {
    5364:	4642      	mov	r2, r8
    5366:	4122      	asrs	r2, r4
    5368:	4649      	mov	r1, r9
    536a:	4211      	tst	r1, r2
    536c:	d0ef      	beq.n	534e <RTC_Handler+0x5a>
				module->callbacks[i]();
    536e:	3302      	adds	r3, #2
    5370:	009b      	lsls	r3, r3, #2
    5372:	4652      	mov	r2, sl
    5374:	589b      	ldr	r3, [r3, r2]
    5376:	4798      	blx	r3
    5378:	e7e9      	b.n	534e <RTC_Handler+0x5a>
	}else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
    537a:	05da      	lsls	r2, r3, #23
    537c:	d50a      	bpl.n	5394 <RTC_Handler+0xa0>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
    537e:	4643      	mov	r3, r8
    5380:	05db      	lsls	r3, r3, #23
    5382:	d403      	bmi.n	538c <RTC_Handler+0x98>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
    5384:	2380      	movs	r3, #128	; 0x80
    5386:	005b      	lsls	r3, r3, #1
    5388:	81b3      	strh	r3, [r6, #12]
    538a:	e7d6      	b.n	533a <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
    538c:	4653      	mov	r3, sl
    538e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5390:	4798      	blx	r3
    5392:	e7f7      	b.n	5384 <RTC_Handler+0x90>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
    5394:	059b      	lsls	r3, r3, #22
    5396:	d5d0      	bpl.n	533a <RTC_Handler+0x46>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
    5398:	4643      	mov	r3, r8
    539a:	059b      	lsls	r3, r3, #22
    539c:	d403      	bmi.n	53a6 <RTC_Handler+0xb2>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
    539e:	2380      	movs	r3, #128	; 0x80
    53a0:	009b      	lsls	r3, r3, #2
    53a2:	81b3      	strh	r3, [r6, #12]
}
    53a4:	e7c9      	b.n	533a <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
    53a6:	4653      	mov	r3, sl
    53a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    53aa:	4798      	blx	r3
    53ac:	e7f7      	b.n	539e <RTC_Handler+0xaa>
    53ae:	46c0      	nop			; (mov r8, r8)
    53b0:	20002144 	.word	0x20002144
    53b4:	ffff8000 	.word	0xffff8000

000053b8 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    53b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    53ba:	46de      	mov	lr, fp
    53bc:	4657      	mov	r7, sl
    53be:	464e      	mov	r6, r9
    53c0:	4645      	mov	r5, r8
    53c2:	b5e0      	push	{r5, r6, r7, lr}
    53c4:	b087      	sub	sp, #28
    53c6:	4680      	mov	r8, r0
    53c8:	9104      	str	r1, [sp, #16]
    53ca:	0016      	movs	r6, r2
    53cc:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    53ce:	2200      	movs	r2, #0
    53d0:	2300      	movs	r3, #0
    53d2:	2100      	movs	r1, #0
    53d4:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    53d6:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    53d8:	2001      	movs	r0, #1
    53da:	0021      	movs	r1, r4
    53dc:	9600      	str	r6, [sp, #0]
    53de:	9701      	str	r7, [sp, #4]
    53e0:	465c      	mov	r4, fp
    53e2:	9403      	str	r4, [sp, #12]
    53e4:	4644      	mov	r4, r8
    53e6:	9405      	str	r4, [sp, #20]
    53e8:	e013      	b.n	5412 <long_division+0x5a>
    53ea:	2420      	movs	r4, #32
    53ec:	1a64      	subs	r4, r4, r1
    53ee:	0005      	movs	r5, r0
    53f0:	40e5      	lsrs	r5, r4
    53f2:	46a8      	mov	r8, r5
    53f4:	e014      	b.n	5420 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    53f6:	9c00      	ldr	r4, [sp, #0]
    53f8:	9d01      	ldr	r5, [sp, #4]
    53fa:	1b12      	subs	r2, r2, r4
    53fc:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    53fe:	465c      	mov	r4, fp
    5400:	464d      	mov	r5, r9
    5402:	432c      	orrs	r4, r5
    5404:	46a3      	mov	fp, r4
    5406:	9c03      	ldr	r4, [sp, #12]
    5408:	4645      	mov	r5, r8
    540a:	432c      	orrs	r4, r5
    540c:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    540e:	3901      	subs	r1, #1
    5410:	d325      	bcc.n	545e <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    5412:	2420      	movs	r4, #32
    5414:	4264      	negs	r4, r4
    5416:	190c      	adds	r4, r1, r4
    5418:	d4e7      	bmi.n	53ea <long_division+0x32>
    541a:	0005      	movs	r5, r0
    541c:	40a5      	lsls	r5, r4
    541e:	46a8      	mov	r8, r5
    5420:	0004      	movs	r4, r0
    5422:	408c      	lsls	r4, r1
    5424:	46a1      	mov	r9, r4
		r = r << 1;
    5426:	1892      	adds	r2, r2, r2
    5428:	415b      	adcs	r3, r3
    542a:	0014      	movs	r4, r2
    542c:	001d      	movs	r5, r3
		if (n & bit_shift) {
    542e:	9e05      	ldr	r6, [sp, #20]
    5430:	464f      	mov	r7, r9
    5432:	403e      	ands	r6, r7
    5434:	46b4      	mov	ip, r6
    5436:	9e04      	ldr	r6, [sp, #16]
    5438:	4647      	mov	r7, r8
    543a:	403e      	ands	r6, r7
    543c:	46b2      	mov	sl, r6
    543e:	4666      	mov	r6, ip
    5440:	4657      	mov	r7, sl
    5442:	433e      	orrs	r6, r7
    5444:	d003      	beq.n	544e <long_division+0x96>
			r |= 0x01;
    5446:	0006      	movs	r6, r0
    5448:	4326      	orrs	r6, r4
    544a:	0032      	movs	r2, r6
    544c:	002b      	movs	r3, r5
		if (r >= d) {
    544e:	9c00      	ldr	r4, [sp, #0]
    5450:	9d01      	ldr	r5, [sp, #4]
    5452:	429d      	cmp	r5, r3
    5454:	d8db      	bhi.n	540e <long_division+0x56>
    5456:	d1ce      	bne.n	53f6 <long_division+0x3e>
    5458:	4294      	cmp	r4, r2
    545a:	d8d8      	bhi.n	540e <long_division+0x56>
    545c:	e7cb      	b.n	53f6 <long_division+0x3e>
    545e:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    5460:	4658      	mov	r0, fp
    5462:	0019      	movs	r1, r3
    5464:	b007      	add	sp, #28
    5466:	bc3c      	pop	{r2, r3, r4, r5}
    5468:	4690      	mov	r8, r2
    546a:	4699      	mov	r9, r3
    546c:	46a2      	mov	sl, r4
    546e:	46ab      	mov	fp, r5
    5470:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005472 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    5472:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    5474:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5476:	2340      	movs	r3, #64	; 0x40
    5478:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    547a:	4281      	cmp	r1, r0
    547c:	d202      	bcs.n	5484 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    547e:	0018      	movs	r0, r3
    5480:	bd10      	pop	{r4, pc}
		baud_calculated++;
    5482:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    5484:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    5486:	1c63      	adds	r3, r4, #1
    5488:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    548a:	4288      	cmp	r0, r1
    548c:	d9f9      	bls.n	5482 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    548e:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    5490:	2cff      	cmp	r4, #255	; 0xff
    5492:	d8f4      	bhi.n	547e <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    5494:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    5496:	2300      	movs	r3, #0
    5498:	e7f1      	b.n	547e <_sercom_get_sync_baud_val+0xc>
    549a:	Address 0x0000549a is out of bounds.


0000549c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    549c:	b5f0      	push	{r4, r5, r6, r7, lr}
    549e:	b083      	sub	sp, #12
    54a0:	000f      	movs	r7, r1
    54a2:	0016      	movs	r6, r2
    54a4:	aa08      	add	r2, sp, #32
    54a6:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    54a8:	0004      	movs	r4, r0
    54aa:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    54ac:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    54ae:	42bc      	cmp	r4, r7
    54b0:	d902      	bls.n	54b8 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    54b2:	0010      	movs	r0, r2
    54b4:	b003      	add	sp, #12
    54b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    54b8:	2b00      	cmp	r3, #0
    54ba:	d114      	bne.n	54e6 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    54bc:	0002      	movs	r2, r0
    54be:	0008      	movs	r0, r1
    54c0:	2100      	movs	r1, #0
    54c2:	4c19      	ldr	r4, [pc, #100]	; (5528 <_sercom_get_async_baud_val+0x8c>)
    54c4:	47a0      	blx	r4
    54c6:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    54c8:	003a      	movs	r2, r7
    54ca:	2300      	movs	r3, #0
    54cc:	2000      	movs	r0, #0
    54ce:	4c17      	ldr	r4, [pc, #92]	; (552c <_sercom_get_async_baud_val+0x90>)
    54d0:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    54d2:	2200      	movs	r2, #0
    54d4:	2301      	movs	r3, #1
    54d6:	1a12      	subs	r2, r2, r0
    54d8:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    54da:	0c12      	lsrs	r2, r2, #16
    54dc:	041b      	lsls	r3, r3, #16
    54de:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    54e0:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    54e2:	2200      	movs	r2, #0
    54e4:	e7e5      	b.n	54b2 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    54e6:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    54e8:	2b01      	cmp	r3, #1
    54ea:	d1f9      	bne.n	54e0 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    54ec:	000a      	movs	r2, r1
    54ee:	2300      	movs	r3, #0
    54f0:	2100      	movs	r1, #0
    54f2:	4c0d      	ldr	r4, [pc, #52]	; (5528 <_sercom_get_async_baud_val+0x8c>)
    54f4:	47a0      	blx	r4
    54f6:	0002      	movs	r2, r0
    54f8:	000b      	movs	r3, r1
    54fa:	9200      	str	r2, [sp, #0]
    54fc:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    54fe:	0038      	movs	r0, r7
    5500:	2100      	movs	r1, #0
    5502:	4c0a      	ldr	r4, [pc, #40]	; (552c <_sercom_get_async_baud_val+0x90>)
    5504:	47a0      	blx	r4
    5506:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    5508:	2380      	movs	r3, #128	; 0x80
    550a:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    550c:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    550e:	4298      	cmp	r0, r3
    5510:	d8cf      	bhi.n	54b2 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    5512:	0f79      	lsrs	r1, r7, #29
    5514:	00f8      	lsls	r0, r7, #3
    5516:	9a00      	ldr	r2, [sp, #0]
    5518:	9b01      	ldr	r3, [sp, #4]
    551a:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    551c:	00ea      	lsls	r2, r5, #3
    551e:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    5520:	b2d2      	uxtb	r2, r2
    5522:	0352      	lsls	r2, r2, #13
    5524:	432a      	orrs	r2, r5
    5526:	e7db      	b.n	54e0 <_sercom_get_async_baud_val+0x44>
    5528:	00014a25 	.word	0x00014a25
    552c:	000053b9 	.word	0x000053b9

00005530 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    5530:	b510      	push	{r4, lr}
    5532:	b082      	sub	sp, #8
    5534:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    5536:	4b0e      	ldr	r3, [pc, #56]	; (5570 <sercom_set_gclk_generator+0x40>)
    5538:	781b      	ldrb	r3, [r3, #0]
    553a:	2b00      	cmp	r3, #0
    553c:	d007      	beq.n	554e <sercom_set_gclk_generator+0x1e>
    553e:	2900      	cmp	r1, #0
    5540:	d105      	bne.n	554e <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    5542:	4b0b      	ldr	r3, [pc, #44]	; (5570 <sercom_set_gclk_generator+0x40>)
    5544:	785b      	ldrb	r3, [r3, #1]
    5546:	4283      	cmp	r3, r0
    5548:	d010      	beq.n	556c <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    554a:	201d      	movs	r0, #29
    554c:	e00c      	b.n	5568 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    554e:	a901      	add	r1, sp, #4
    5550:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    5552:	2011      	movs	r0, #17
    5554:	4b07      	ldr	r3, [pc, #28]	; (5574 <sercom_set_gclk_generator+0x44>)
    5556:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    5558:	2011      	movs	r0, #17
    555a:	4b07      	ldr	r3, [pc, #28]	; (5578 <sercom_set_gclk_generator+0x48>)
    555c:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    555e:	4b04      	ldr	r3, [pc, #16]	; (5570 <sercom_set_gclk_generator+0x40>)
    5560:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    5562:	2201      	movs	r2, #1
    5564:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    5566:	2000      	movs	r0, #0
}
    5568:	b002      	add	sp, #8
    556a:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    556c:	2000      	movs	r0, #0
    556e:	e7fb      	b.n	5568 <sercom_set_gclk_generator+0x38>
    5570:	200002c8 	.word	0x200002c8
    5574:	00006b4d 	.word	0x00006b4d
    5578:	00006add 	.word	0x00006add

0000557c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    557c:	4b3c      	ldr	r3, [pc, #240]	; (5670 <_sercom_get_default_pad+0xf4>)
    557e:	4298      	cmp	r0, r3
    5580:	d032      	beq.n	55e8 <_sercom_get_default_pad+0x6c>
    5582:	d90a      	bls.n	559a <_sercom_get_default_pad+0x1e>
    5584:	4b3b      	ldr	r3, [pc, #236]	; (5674 <_sercom_get_default_pad+0xf8>)
    5586:	4298      	cmp	r0, r3
    5588:	d04e      	beq.n	5628 <_sercom_get_default_pad+0xac>
    558a:	4b3b      	ldr	r3, [pc, #236]	; (5678 <_sercom_get_default_pad+0xfc>)
    558c:	4298      	cmp	r0, r3
    558e:	d055      	beq.n	563c <_sercom_get_default_pad+0xc0>
    5590:	4b3a      	ldr	r3, [pc, #232]	; (567c <_sercom_get_default_pad+0x100>)
    5592:	4298      	cmp	r0, r3
    5594:	d038      	beq.n	5608 <_sercom_get_default_pad+0x8c>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    5596:	2000      	movs	r0, #0
}
    5598:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    559a:	2384      	movs	r3, #132	; 0x84
    559c:	05db      	lsls	r3, r3, #23
    559e:	4298      	cmp	r0, r3
    55a0:	d00c      	beq.n	55bc <_sercom_get_default_pad+0x40>
    55a2:	4b37      	ldr	r3, [pc, #220]	; (5680 <_sercom_get_default_pad+0x104>)
    55a4:	4298      	cmp	r0, r3
    55a6:	d1f6      	bne.n	5596 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    55a8:	2901      	cmp	r1, #1
    55aa:	d017      	beq.n	55dc <_sercom_get_default_pad+0x60>
    55ac:	2900      	cmp	r1, #0
    55ae:	d057      	beq.n	5660 <_sercom_get_default_pad+0xe4>
    55b0:	2902      	cmp	r1, #2
    55b2:	d015      	beq.n	55e0 <_sercom_get_default_pad+0x64>
    55b4:	2903      	cmp	r1, #3
    55b6:	d015      	beq.n	55e4 <_sercom_get_default_pad+0x68>
	return 0;
    55b8:	2000      	movs	r0, #0
    55ba:	e7ed      	b.n	5598 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    55bc:	2901      	cmp	r1, #1
    55be:	d007      	beq.n	55d0 <_sercom_get_default_pad+0x54>
    55c0:	2900      	cmp	r1, #0
    55c2:	d04b      	beq.n	565c <_sercom_get_default_pad+0xe0>
    55c4:	2902      	cmp	r1, #2
    55c6:	d005      	beq.n	55d4 <_sercom_get_default_pad+0x58>
    55c8:	2903      	cmp	r1, #3
    55ca:	d005      	beq.n	55d8 <_sercom_get_default_pad+0x5c>
	return 0;
    55cc:	2000      	movs	r0, #0
    55ce:	e7e3      	b.n	5598 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    55d0:	482c      	ldr	r0, [pc, #176]	; (5684 <_sercom_get_default_pad+0x108>)
    55d2:	e7e1      	b.n	5598 <_sercom_get_default_pad+0x1c>
    55d4:	482c      	ldr	r0, [pc, #176]	; (5688 <_sercom_get_default_pad+0x10c>)
    55d6:	e7df      	b.n	5598 <_sercom_get_default_pad+0x1c>
    55d8:	482c      	ldr	r0, [pc, #176]	; (568c <_sercom_get_default_pad+0x110>)
    55da:	e7dd      	b.n	5598 <_sercom_get_default_pad+0x1c>
    55dc:	482c      	ldr	r0, [pc, #176]	; (5690 <_sercom_get_default_pad+0x114>)
    55de:	e7db      	b.n	5598 <_sercom_get_default_pad+0x1c>
    55e0:	482c      	ldr	r0, [pc, #176]	; (5694 <_sercom_get_default_pad+0x118>)
    55e2:	e7d9      	b.n	5598 <_sercom_get_default_pad+0x1c>
    55e4:	482c      	ldr	r0, [pc, #176]	; (5698 <_sercom_get_default_pad+0x11c>)
    55e6:	e7d7      	b.n	5598 <_sercom_get_default_pad+0x1c>
    55e8:	2901      	cmp	r1, #1
    55ea:	d007      	beq.n	55fc <_sercom_get_default_pad+0x80>
    55ec:	2900      	cmp	r1, #0
    55ee:	d039      	beq.n	5664 <_sercom_get_default_pad+0xe8>
    55f0:	2902      	cmp	r1, #2
    55f2:	d005      	beq.n	5600 <_sercom_get_default_pad+0x84>
    55f4:	2903      	cmp	r1, #3
    55f6:	d005      	beq.n	5604 <_sercom_get_default_pad+0x88>
	return 0;
    55f8:	2000      	movs	r0, #0
    55fa:	e7cd      	b.n	5598 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    55fc:	4827      	ldr	r0, [pc, #156]	; (569c <_sercom_get_default_pad+0x120>)
    55fe:	e7cb      	b.n	5598 <_sercom_get_default_pad+0x1c>
    5600:	4827      	ldr	r0, [pc, #156]	; (56a0 <_sercom_get_default_pad+0x124>)
    5602:	e7c9      	b.n	5598 <_sercom_get_default_pad+0x1c>
    5604:	4827      	ldr	r0, [pc, #156]	; (56a4 <_sercom_get_default_pad+0x128>)
    5606:	e7c7      	b.n	5598 <_sercom_get_default_pad+0x1c>
    5608:	2901      	cmp	r1, #1
    560a:	d007      	beq.n	561c <_sercom_get_default_pad+0xa0>
    560c:	2900      	cmp	r1, #0
    560e:	d02b      	beq.n	5668 <_sercom_get_default_pad+0xec>
    5610:	2902      	cmp	r1, #2
    5612:	d005      	beq.n	5620 <_sercom_get_default_pad+0xa4>
    5614:	2903      	cmp	r1, #3
    5616:	d005      	beq.n	5624 <_sercom_get_default_pad+0xa8>
	return 0;
    5618:	2000      	movs	r0, #0
    561a:	e7bd      	b.n	5598 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    561c:	4822      	ldr	r0, [pc, #136]	; (56a8 <_sercom_get_default_pad+0x12c>)
    561e:	e7bb      	b.n	5598 <_sercom_get_default_pad+0x1c>
    5620:	4822      	ldr	r0, [pc, #136]	; (56ac <_sercom_get_default_pad+0x130>)
    5622:	e7b9      	b.n	5598 <_sercom_get_default_pad+0x1c>
    5624:	4822      	ldr	r0, [pc, #136]	; (56b0 <_sercom_get_default_pad+0x134>)
    5626:	e7b7      	b.n	5598 <_sercom_get_default_pad+0x1c>
    5628:	2902      	cmp	r1, #2
    562a:	d003      	beq.n	5634 <_sercom_get_default_pad+0xb8>
    562c:	2903      	cmp	r1, #3
    562e:	d003      	beq.n	5638 <_sercom_get_default_pad+0xbc>
    5630:	2000      	movs	r0, #0
    5632:	e7b1      	b.n	5598 <_sercom_get_default_pad+0x1c>
    5634:	481f      	ldr	r0, [pc, #124]	; (56b4 <_sercom_get_default_pad+0x138>)
    5636:	e7af      	b.n	5598 <_sercom_get_default_pad+0x1c>
    5638:	481f      	ldr	r0, [pc, #124]	; (56b8 <_sercom_get_default_pad+0x13c>)
    563a:	e7ad      	b.n	5598 <_sercom_get_default_pad+0x1c>
    563c:	2901      	cmp	r1, #1
    563e:	d007      	beq.n	5650 <_sercom_get_default_pad+0xd4>
    5640:	2900      	cmp	r1, #0
    5642:	d013      	beq.n	566c <_sercom_get_default_pad+0xf0>
    5644:	2902      	cmp	r1, #2
    5646:	d005      	beq.n	5654 <_sercom_get_default_pad+0xd8>
    5648:	2903      	cmp	r1, #3
    564a:	d005      	beq.n	5658 <_sercom_get_default_pad+0xdc>
	return 0;
    564c:	2000      	movs	r0, #0
    564e:	e7a3      	b.n	5598 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5650:	481a      	ldr	r0, [pc, #104]	; (56bc <_sercom_get_default_pad+0x140>)
    5652:	e7a1      	b.n	5598 <_sercom_get_default_pad+0x1c>
    5654:	481a      	ldr	r0, [pc, #104]	; (56c0 <_sercom_get_default_pad+0x144>)
    5656:	e79f      	b.n	5598 <_sercom_get_default_pad+0x1c>
    5658:	481a      	ldr	r0, [pc, #104]	; (56c4 <_sercom_get_default_pad+0x148>)
    565a:	e79d      	b.n	5598 <_sercom_get_default_pad+0x1c>
    565c:	481a      	ldr	r0, [pc, #104]	; (56c8 <_sercom_get_default_pad+0x14c>)
    565e:	e79b      	b.n	5598 <_sercom_get_default_pad+0x1c>
    5660:	2003      	movs	r0, #3
    5662:	e799      	b.n	5598 <_sercom_get_default_pad+0x1c>
    5664:	4819      	ldr	r0, [pc, #100]	; (56cc <_sercom_get_default_pad+0x150>)
    5666:	e797      	b.n	5598 <_sercom_get_default_pad+0x1c>
    5668:	4819      	ldr	r0, [pc, #100]	; (56d0 <_sercom_get_default_pad+0x154>)
    566a:	e795      	b.n	5598 <_sercom_get_default_pad+0x1c>
    566c:	4819      	ldr	r0, [pc, #100]	; (56d4 <_sercom_get_default_pad+0x158>)
    566e:	e793      	b.n	5598 <_sercom_get_default_pad+0x1c>
    5670:	42000800 	.word	0x42000800
    5674:	42001000 	.word	0x42001000
    5678:	43000400 	.word	0x43000400
    567c:	42000c00 	.word	0x42000c00
    5680:	42000400 	.word	0x42000400
    5684:	00050003 	.word	0x00050003
    5688:	00060003 	.word	0x00060003
    568c:	00070003 	.word	0x00070003
    5690:	00010003 	.word	0x00010003
    5694:	001e0003 	.word	0x001e0003
    5698:	001f0003 	.word	0x001f0003
    569c:	00090003 	.word	0x00090003
    56a0:	000a0003 	.word	0x000a0003
    56a4:	000b0003 	.word	0x000b0003
    56a8:	00110003 	.word	0x00110003
    56ac:	00120003 	.word	0x00120003
    56b0:	00130003 	.word	0x00130003
    56b4:	000e0003 	.word	0x000e0003
    56b8:	000f0003 	.word	0x000f0003
    56bc:	00170003 	.word	0x00170003
    56c0:	00180003 	.word	0x00180003
    56c4:	00190003 	.word	0x00190003
    56c8:	00040003 	.word	0x00040003
    56cc:	00080003 	.word	0x00080003
    56d0:	00100003 	.word	0x00100003
    56d4:	00160003 	.word	0x00160003

000056d8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    56d8:	b530      	push	{r4, r5, lr}
    56da:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    56dc:	4b0b      	ldr	r3, [pc, #44]	; (570c <_sercom_get_sercom_inst_index+0x34>)
    56de:	466a      	mov	r2, sp
    56e0:	cb32      	ldmia	r3!, {r1, r4, r5}
    56e2:	c232      	stmia	r2!, {r1, r4, r5}
    56e4:	cb32      	ldmia	r3!, {r1, r4, r5}
    56e6:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    56e8:	9b00      	ldr	r3, [sp, #0]
    56ea:	4283      	cmp	r3, r0
    56ec:	d00b      	beq.n	5706 <_sercom_get_sercom_inst_index+0x2e>
    56ee:	2301      	movs	r3, #1
    56f0:	009a      	lsls	r2, r3, #2
    56f2:	4669      	mov	r1, sp
    56f4:	5852      	ldr	r2, [r2, r1]
    56f6:	4282      	cmp	r2, r0
    56f8:	d006      	beq.n	5708 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    56fa:	3301      	adds	r3, #1
    56fc:	2b06      	cmp	r3, #6
    56fe:	d1f7      	bne.n	56f0 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    5700:	2000      	movs	r0, #0
}
    5702:	b007      	add	sp, #28
    5704:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5706:	2300      	movs	r3, #0
			return i;
    5708:	b2d8      	uxtb	r0, r3
    570a:	e7fa      	b.n	5702 <_sercom_get_sercom_inst_index+0x2a>
    570c:	000192ac 	.word	0x000192ac

00005710 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    5710:	4770      	bx	lr
    5712:	Address 0x00005712 is out of bounds.


00005714 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    5714:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    5716:	4b0a      	ldr	r3, [pc, #40]	; (5740 <_sercom_set_handler+0x2c>)
    5718:	781b      	ldrb	r3, [r3, #0]
    571a:	2b00      	cmp	r3, #0
    571c:	d10c      	bne.n	5738 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    571e:	4f09      	ldr	r7, [pc, #36]	; (5744 <_sercom_set_handler+0x30>)
    5720:	4e09      	ldr	r6, [pc, #36]	; (5748 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    5722:	4d0a      	ldr	r5, [pc, #40]	; (574c <_sercom_set_handler+0x38>)
    5724:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    5726:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    5728:	195a      	adds	r2, r3, r5
    572a:	6014      	str	r4, [r2, #0]
    572c:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    572e:	2b18      	cmp	r3, #24
    5730:	d1f9      	bne.n	5726 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    5732:	2201      	movs	r2, #1
    5734:	4b02      	ldr	r3, [pc, #8]	; (5740 <_sercom_set_handler+0x2c>)
    5736:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    5738:	0080      	lsls	r0, r0, #2
    573a:	4b02      	ldr	r3, [pc, #8]	; (5744 <_sercom_set_handler+0x30>)
    573c:	50c1      	str	r1, [r0, r3]
}
    573e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5740:	200002ca 	.word	0x200002ca
    5744:	200002cc 	.word	0x200002cc
    5748:	00005711 	.word	0x00005711
    574c:	20002148 	.word	0x20002148

00005750 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    5750:	b500      	push	{lr}
    5752:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    5754:	2308      	movs	r3, #8
    5756:	466a      	mov	r2, sp
    5758:	7013      	strb	r3, [r2, #0]
    575a:	3301      	adds	r3, #1
    575c:	7053      	strb	r3, [r2, #1]
    575e:	3301      	adds	r3, #1
    5760:	7093      	strb	r3, [r2, #2]
    5762:	3301      	adds	r3, #1
    5764:	70d3      	strb	r3, [r2, #3]
    5766:	3301      	adds	r3, #1
    5768:	7113      	strb	r3, [r2, #4]
    576a:	3301      	adds	r3, #1
    576c:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    576e:	4b03      	ldr	r3, [pc, #12]	; (577c <_sercom_get_interrupt_vector+0x2c>)
    5770:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    5772:	466b      	mov	r3, sp
    5774:	5618      	ldrsb	r0, [r3, r0]
}
    5776:	b003      	add	sp, #12
    5778:	bd00      	pop	{pc}
    577a:	46c0      	nop			; (mov r8, r8)
    577c:	000056d9 	.word	0x000056d9

00005780 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    5780:	b510      	push	{r4, lr}
    5782:	4b02      	ldr	r3, [pc, #8]	; (578c <SERCOM0_Handler+0xc>)
    5784:	681b      	ldr	r3, [r3, #0]
    5786:	2000      	movs	r0, #0
    5788:	4798      	blx	r3
    578a:	bd10      	pop	{r4, pc}
    578c:	200002cc 	.word	0x200002cc

00005790 <SERCOM1_Handler>:
    5790:	b510      	push	{r4, lr}
    5792:	4b02      	ldr	r3, [pc, #8]	; (579c <SERCOM1_Handler+0xc>)
    5794:	685b      	ldr	r3, [r3, #4]
    5796:	2001      	movs	r0, #1
    5798:	4798      	blx	r3
    579a:	bd10      	pop	{r4, pc}
    579c:	200002cc 	.word	0x200002cc

000057a0 <SERCOM2_Handler>:
    57a0:	b510      	push	{r4, lr}
    57a2:	4b02      	ldr	r3, [pc, #8]	; (57ac <SERCOM2_Handler+0xc>)
    57a4:	689b      	ldr	r3, [r3, #8]
    57a6:	2002      	movs	r0, #2
    57a8:	4798      	blx	r3
    57aa:	bd10      	pop	{r4, pc}
    57ac:	200002cc 	.word	0x200002cc

000057b0 <SERCOM3_Handler>:
    57b0:	b510      	push	{r4, lr}
    57b2:	4b02      	ldr	r3, [pc, #8]	; (57bc <SERCOM3_Handler+0xc>)
    57b4:	68db      	ldr	r3, [r3, #12]
    57b6:	2003      	movs	r0, #3
    57b8:	4798      	blx	r3
    57ba:	bd10      	pop	{r4, pc}
    57bc:	200002cc 	.word	0x200002cc

000057c0 <SERCOM4_Handler>:
    57c0:	b510      	push	{r4, lr}
    57c2:	4b02      	ldr	r3, [pc, #8]	; (57cc <SERCOM4_Handler+0xc>)
    57c4:	691b      	ldr	r3, [r3, #16]
    57c6:	2004      	movs	r0, #4
    57c8:	4798      	blx	r3
    57ca:	bd10      	pop	{r4, pc}
    57cc:	200002cc 	.word	0x200002cc

000057d0 <SERCOM5_Handler>:
    57d0:	b510      	push	{r4, lr}
    57d2:	4b02      	ldr	r3, [pc, #8]	; (57dc <SERCOM5_Handler+0xc>)
    57d4:	695b      	ldr	r3, [r3, #20]
    57d6:	2005      	movs	r0, #5
    57d8:	4798      	blx	r3
    57da:	bd10      	pop	{r4, pc}
    57dc:	200002cc 	.word	0x200002cc

000057e0 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    57e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    57e2:	46d6      	mov	lr, sl
    57e4:	464f      	mov	r7, r9
    57e6:	4646      	mov	r6, r8
    57e8:	b5c0      	push	{r6, r7, lr}
    57ea:	b08a      	sub	sp, #40	; 0x28
    57ec:	0006      	movs	r6, r0
    57ee:	000f      	movs	r7, r1
    57f0:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    57f2:	6031      	str	r1, [r6, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    57f4:	680b      	ldr	r3, [r1, #0]
    57f6:	079b      	lsls	r3, r3, #30
    57f8:	d40a      	bmi.n	5810 <spi_init+0x30>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    57fa:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    57fc:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    57fe:	07db      	lsls	r3, r3, #31
    5800:	d400      	bmi.n	5804 <spi_init+0x24>
    5802:	e0af      	b.n	5964 <spi_init+0x184>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    5804:	b00a      	add	sp, #40	; 0x28
    5806:	bc1c      	pop	{r2, r3, r4}
    5808:	4690      	mov	r8, r2
    580a:	4699      	mov	r9, r3
    580c:	46a2      	mov	sl, r4
    580e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    5810:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5812:	9305      	str	r3, [sp, #20]
    5814:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    5816:	9306      	str	r3, [sp, #24]
    5818:	6b13      	ldr	r3, [r2, #48]	; 0x30
    581a:	9307      	str	r3, [sp, #28]
    581c:	6b53      	ldr	r3, [r2, #52]	; 0x34
    581e:	9308      	str	r3, [sp, #32]
    5820:	2500      	movs	r5, #0
    5822:	e00a      	b.n	583a <spi_init+0x5a>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    5824:	0038      	movs	r0, r7
    5826:	4bb6      	ldr	r3, [pc, #728]	; (5b00 <spi_init+0x320>)
    5828:	4798      	blx	r3
    582a:	e00e      	b.n	584a <spi_init+0x6a>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    582c:	230f      	movs	r3, #15
    582e:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    5830:	4581      	cmp	r9, r0
    5832:	d130      	bne.n	5896 <spi_init+0xb6>
    5834:	3501      	adds	r5, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    5836:	2d04      	cmp	r5, #4
    5838:	d031      	beq.n	589e <spi_init+0xbe>
    583a:	b2e9      	uxtb	r1, r5
		uint32_t current_pinmux = pad_pinmuxes[pad];
    583c:	00ab      	lsls	r3, r5, #2
    583e:	aa02      	add	r2, sp, #8
    5840:	200c      	movs	r0, #12
    5842:	1812      	adds	r2, r2, r0
    5844:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    5846:	2800      	cmp	r0, #0
    5848:	d0ec      	beq.n	5824 <spi_init+0x44>
		if (current_pinmux == PINMUX_UNUSED) {
    584a:	1c43      	adds	r3, r0, #1
    584c:	d0f2      	beq.n	5834 <spi_init+0x54>
		if ((current_pinmux & 0xFFFF) !=
    584e:	0401      	lsls	r1, r0, #16
    5850:	0c0b      	lsrs	r3, r1, #16
    5852:	4699      	mov	r9, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    5854:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    5856:	b2c3      	uxtb	r3, r0
    5858:	469c      	mov	ip, r3
		return NULL;
    585a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    585c:	0602      	lsls	r2, r0, #24
    585e:	d405      	bmi.n	586c <spi_init+0x8c>
		return &(ports[port_index]->Group[group_index]);
    5860:	4663      	mov	r3, ip
    5862:	095b      	lsrs	r3, r3, #5
    5864:	01db      	lsls	r3, r3, #7
    5866:	4aa7      	ldr	r2, [pc, #668]	; (5b04 <spi_init+0x324>)
    5868:	4690      	mov	r8, r2
    586a:	4443      	add	r3, r8
	uint32_t pin_index = (gpio_pin % 32);
    586c:	221f      	movs	r2, #31
    586e:	4660      	mov	r0, ip
    5870:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    5872:	1898      	adds	r0, r3, r2
    5874:	3040      	adds	r0, #64	; 0x40
    5876:	7800      	ldrb	r0, [r0, #0]
    5878:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    587a:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    587c:	4651      	mov	r1, sl
    587e:	07c9      	lsls	r1, r1, #31
    5880:	d5d6      	bpl.n	5830 <spi_init+0x50>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    5882:	0852      	lsrs	r2, r2, #1
    5884:	189b      	adds	r3, r3, r2
    5886:	3330      	adds	r3, #48	; 0x30
    5888:	7818      	ldrb	r0, [r3, #0]
    588a:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    588c:	4663      	mov	r3, ip
    588e:	07db      	lsls	r3, r3, #31
    5890:	d5cc      	bpl.n	582c <spi_init+0x4c>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    5892:	0900      	lsrs	r0, r0, #4
    5894:	e7cc      	b.n	5830 <spi_init+0x50>
			module->hw = NULL;
    5896:	2300      	movs	r3, #0
    5898:	6033      	str	r3, [r6, #0]
			return STATUS_ERR_DENIED;
    589a:	201c      	movs	r0, #28
    589c:	e7b2      	b.n	5804 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    589e:	2011      	movs	r0, #17
    58a0:	4b99      	ldr	r3, [pc, #612]	; (5b08 <spi_init+0x328>)
    58a2:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    58a4:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    58a6:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    58a8:	2a01      	cmp	r2, #1
    58aa:	d016      	beq.n	58da <spi_init+0xfa>
	if (config->mode == SPI_MODE_SLAVE) {
    58ac:	7821      	ldrb	r1, [r4, #0]
    58ae:	2900      	cmp	r1, #0
    58b0:	d127      	bne.n	5902 <spi_init+0x122>
		if (spi_module->CTRLA.reg != addr) {
    58b2:	683b      	ldr	r3, [r7, #0]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    58b4:	7fe2      	ldrb	r2, [r4, #31]
    58b6:	0412      	lsls	r2, r2, #16
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    58b8:	7fa0      	ldrb	r0, [r4, #30]
    58ba:	4302      	orrs	r2, r0
			return STATUS_ERR_DENIED;
    58bc:	201c      	movs	r0, #28
		if (spi_module->CTRLA.reg != addr) {
    58be:	429a      	cmp	r2, r3
    58c0:	d1a0      	bne.n	5804 <spi_init+0x24>
		ctrla |= config->mode_specific.slave.frame_format;
    58c2:	69a3      	ldr	r3, [r4, #24]
		ctrlb |= config->mode_specific.slave.address_mode;
    58c4:	8ba2      	ldrh	r2, [r4, #28]
		if (config->mode_specific.slave.preload_enable) {
    58c6:	3004      	adds	r0, #4
    58c8:	5c20      	ldrb	r0, [r4, r0]
    58ca:	2800      	cmp	r0, #0
    58cc:	d001      	beq.n	58d2 <spi_init+0xf2>
    58ce:	2040      	movs	r0, #64	; 0x40
    58d0:	4302      	orrs	r2, r0
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
    58d2:	2008      	movs	r0, #8
    58d4:	4303      	orrs	r3, r0
    58d6:	431d      	orrs	r5, r3
    58d8:	e014      	b.n	5904 <spi_init+0x124>
		enum status_code error_code = _sercom_get_sync_baud_val(
    58da:	aa04      	add	r2, sp, #16
    58dc:	0001      	movs	r1, r0
    58de:	69a0      	ldr	r0, [r4, #24]
    58e0:	4b8a      	ldr	r3, [pc, #552]	; (5b0c <spi_init+0x32c>)
    58e2:	4798      	blx	r3
    58e4:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    58e6:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    58e8:	2b00      	cmp	r3, #0
    58ea:	d000      	beq.n	58ee <spi_init+0x10e>
    58ec:	e78a      	b.n	5804 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    58ee:	7b3b      	ldrb	r3, [r7, #12]
    58f0:	b2db      	uxtb	r3, r3
    58f2:	aa04      	add	r2, sp, #16
    58f4:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    58f6:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    58f8:	429a      	cmp	r2, r3
    58fa:	d000      	beq.n	58fe <spi_init+0x11e>
    58fc:	e782      	b.n	5804 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    58fe:	350c      	adds	r5, #12
    5900:	e7d4      	b.n	58ac <spi_init+0xcc>
	uint32_t ctrlb = 0;
    5902:	2200      	movs	r2, #0
	ctrla |= config->mux_setting;
    5904:	6863      	ldr	r3, [r4, #4]
    5906:	68a0      	ldr	r0, [r4, #8]
    5908:	4303      	orrs	r3, r0
    590a:	68e0      	ldr	r0, [r4, #12]
    590c:	4303      	orrs	r3, r0
    590e:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    5910:	7c20      	ldrb	r0, [r4, #16]
    5912:	4302      	orrs	r2, r0
	if (config->run_in_standby) {
    5914:	7c60      	ldrb	r0, [r4, #17]
    5916:	2800      	cmp	r0, #0
    5918:	d001      	beq.n	591e <spi_init+0x13e>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    591a:	2080      	movs	r0, #128	; 0x80
    591c:	4303      	orrs	r3, r0
	if (config->receiver_enable) {
    591e:	7ca0      	ldrb	r0, [r4, #18]
    5920:	2800      	cmp	r0, #0
    5922:	d002      	beq.n	592a <spi_init+0x14a>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    5924:	2080      	movs	r0, #128	; 0x80
    5926:	0280      	lsls	r0, r0, #10
    5928:	4302      	orrs	r2, r0
	if (config->select_slave_low_detect_enable) {
    592a:	7ce0      	ldrb	r0, [r4, #19]
    592c:	2800      	cmp	r0, #0
    592e:	d002      	beq.n	5936 <spi_init+0x156>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    5930:	2080      	movs	r0, #128	; 0x80
    5932:	0080      	lsls	r0, r0, #2
    5934:	4302      	orrs	r2, r0
	if (config->master_slave_select_enable) {
    5936:	7d20      	ldrb	r0, [r4, #20]
    5938:	2800      	cmp	r0, #0
    593a:	d002      	beq.n	5942 <spi_init+0x162>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    593c:	2080      	movs	r0, #128	; 0x80
    593e:	0180      	lsls	r0, r0, #6
    5940:	4302      	orrs	r2, r0
	if (spi_module->CTRLA.reg == ctrla &&
    5942:	6838      	ldr	r0, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    5944:	2502      	movs	r5, #2
    5946:	432b      	orrs	r3, r5
	if (spi_module->CTRLA.reg == ctrla &&
    5948:	4283      	cmp	r3, r0
    594a:	d003      	beq.n	5954 <spi_init+0x174>
	module->hw = NULL;
    594c:	2300      	movs	r3, #0
    594e:	6033      	str	r3, [r6, #0]
	return STATUS_ERR_DENIED;
    5950:	201c      	movs	r0, #28
    5952:	e757      	b.n	5804 <spi_init+0x24>
			spi_module->CTRLB.reg == ctrlb) {
    5954:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    5956:	4293      	cmp	r3, r2
    5958:	d1f8      	bne.n	594c <spi_init+0x16c>
		module->mode           = config->mode;
    595a:	7171      	strb	r1, [r6, #5]
		module->character_size = config->character_size;
    595c:	7c23      	ldrb	r3, [r4, #16]
    595e:	71b3      	strb	r3, [r6, #6]
		return STATUS_OK;
    5960:	2000      	movs	r0, #0
    5962:	e74f      	b.n	5804 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5964:	0008      	movs	r0, r1
    5966:	4b6a      	ldr	r3, [pc, #424]	; (5b10 <spi_init+0x330>)
    5968:	4798      	blx	r3
	if (sercom_index == 5) {
    596a:	2805      	cmp	r0, #5
    596c:	d100      	bne.n	5970 <spi_init+0x190>
    596e:	e0bf      	b.n	5af0 <spi_init+0x310>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5970:	0003      	movs	r3, r0
    5972:	3312      	adds	r3, #18
			MCLK->APBCMASK.reg |= mask;
    5974:	4967      	ldr	r1, [pc, #412]	; (5b14 <spi_init+0x334>)
    5976:	69cd      	ldr	r5, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    5978:	2201      	movs	r2, #1
    597a:	4082      	lsls	r2, r0
    597c:	432a      	orrs	r2, r5
    597e:	61ca      	str	r2, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    5980:	a909      	add	r1, sp, #36	; 0x24
    5982:	2524      	movs	r5, #36	; 0x24
    5984:	5d62      	ldrb	r2, [r4, r5]
    5986:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    5988:	b2db      	uxtb	r3, r3
    598a:	9301      	str	r3, [sp, #4]
    598c:	0018      	movs	r0, r3
    598e:	4b62      	ldr	r3, [pc, #392]	; (5b18 <spi_init+0x338>)
    5990:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    5992:	9801      	ldr	r0, [sp, #4]
    5994:	4b61      	ldr	r3, [pc, #388]	; (5b1c <spi_init+0x33c>)
    5996:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    5998:	5d60      	ldrb	r0, [r4, r5]
    599a:	2100      	movs	r1, #0
    599c:	4b60      	ldr	r3, [pc, #384]	; (5b20 <spi_init+0x340>)
    599e:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    59a0:	7823      	ldrb	r3, [r4, #0]
    59a2:	2b01      	cmp	r3, #1
    59a4:	d020      	beq.n	59e8 <spi_init+0x208>
	if (config->mode == SPI_MODE_SLAVE) {
    59a6:	7823      	ldrb	r3, [r4, #0]
    59a8:	2b00      	cmp	r3, #0
    59aa:	d103      	bne.n	59b4 <spi_init+0x1d4>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    59ac:	683b      	ldr	r3, [r7, #0]
    59ae:	2208      	movs	r2, #8
    59b0:	4313      	orrs	r3, r2
    59b2:	603b      	str	r3, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    59b4:	6833      	ldr	r3, [r6, #0]
    59b6:	4698      	mov	r8, r3
	config->mux_position = SYSTEM_PINMUX_GPIO;
    59b8:	ab04      	add	r3, sp, #16
    59ba:	2280      	movs	r2, #128	; 0x80
    59bc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    59be:	2200      	movs	r2, #0
    59c0:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    59c2:	2101      	movs	r1, #1
    59c4:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    59c6:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    59c8:	7823      	ldrb	r3, [r4, #0]
    59ca:	2b00      	cmp	r3, #0
    59cc:	d101      	bne.n	59d2 <spi_init+0x1f2>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    59ce:	ab04      	add	r3, sp, #16
    59d0:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    59d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    59d4:	9305      	str	r3, [sp, #20]
    59d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    59d8:	9306      	str	r3, [sp, #24]
    59da:	6b23      	ldr	r3, [r4, #48]	; 0x30
    59dc:	9307      	str	r3, [sp, #28]
    59de:	6b63      	ldr	r3, [r4, #52]	; 0x34
    59e0:	9308      	str	r3, [sp, #32]
    59e2:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    59e4:	ad05      	add	r5, sp, #20
    59e6:	e011      	b.n	5a0c <spi_init+0x22c>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    59e8:	683b      	ldr	r3, [r7, #0]
    59ea:	220c      	movs	r2, #12
    59ec:	4313      	orrs	r3, r2
    59ee:	603b      	str	r3, [r7, #0]
    59f0:	e7d9      	b.n	59a6 <spi_init+0x1c6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    59f2:	4640      	mov	r0, r8
    59f4:	4b42      	ldr	r3, [pc, #264]	; (5b00 <spi_init+0x320>)
    59f6:	4798      	blx	r3
    59f8:	e00d      	b.n	5a16 <spi_init+0x236>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    59fa:	a904      	add	r1, sp, #16
    59fc:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    59fe:	0c00      	lsrs	r0, r0, #16
    5a00:	b2c0      	uxtb	r0, r0
    5a02:	4b48      	ldr	r3, [pc, #288]	; (5b24 <spi_init+0x344>)
    5a04:	4798      	blx	r3
    5a06:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    5a08:	2f04      	cmp	r7, #4
    5a0a:	d007      	beq.n	5a1c <spi_init+0x23c>
    5a0c:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5a0e:	00bb      	lsls	r3, r7, #2
    5a10:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    5a12:	2800      	cmp	r0, #0
    5a14:	d0ed      	beq.n	59f2 <spi_init+0x212>
		if (current_pinmux != PINMUX_UNUSED) {
    5a16:	1c43      	adds	r3, r0, #1
    5a18:	d1ef      	bne.n	59fa <spi_init+0x21a>
    5a1a:	e7f4      	b.n	5a06 <spi_init+0x226>
	module->mode             = config->mode;
    5a1c:	7823      	ldrb	r3, [r4, #0]
    5a1e:	7173      	strb	r3, [r6, #5]
	module->character_size   = config->character_size;
    5a20:	7c23      	ldrb	r3, [r4, #16]
    5a22:	71b3      	strb	r3, [r6, #6]
	module->receiver_enabled = config->receiver_enable;
    5a24:	7ca3      	ldrb	r3, [r4, #18]
    5a26:	71f3      	strb	r3, [r6, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    5a28:	7d23      	ldrb	r3, [r4, #20]
    5a2a:	7233      	strb	r3, [r6, #8]
	uint16_t baud = 0;
    5a2c:	2200      	movs	r2, #0
    5a2e:	ab02      	add	r3, sp, #8
    5a30:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    5a32:	7823      	ldrb	r3, [r4, #0]
    5a34:	2b01      	cmp	r3, #1
    5a36:	d014      	beq.n	5a62 <spi_init+0x282>
	if (config->mode == SPI_MODE_SLAVE) {
    5a38:	7823      	ldrb	r3, [r4, #0]
    5a3a:	2b00      	cmp	r3, #0
    5a3c:	d129      	bne.n	5a92 <spi_init+0x2b2>
		ctrla = config->mode_specific.slave.frame_format;
    5a3e:	69a0      	ldr	r0, [r4, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    5a40:	8ba2      	ldrh	r2, [r4, #28]
		spi_module->ADDR.reg |=
    5a42:	4643      	mov	r3, r8
    5a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    5a46:	7fe1      	ldrb	r1, [r4, #31]
    5a48:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    5a4a:	7fa5      	ldrb	r5, [r4, #30]
    5a4c:	4329      	orrs	r1, r5
		spi_module->ADDR.reg |=
    5a4e:	4319      	orrs	r1, r3
    5a50:	4643      	mov	r3, r8
    5a52:	6259      	str	r1, [r3, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    5a54:	2320      	movs	r3, #32
    5a56:	5ce3      	ldrb	r3, [r4, r3]
    5a58:	2b00      	cmp	r3, #0
    5a5a:	d01c      	beq.n	5a96 <spi_init+0x2b6>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    5a5c:	2340      	movs	r3, #64	; 0x40
    5a5e:	431a      	orrs	r2, r3
    5a60:	e019      	b.n	5a96 <spi_init+0x2b6>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5a62:	6830      	ldr	r0, [r6, #0]
    5a64:	4b2a      	ldr	r3, [pc, #168]	; (5b10 <spi_init+0x330>)
    5a66:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5a68:	3012      	adds	r0, #18
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    5a6a:	b2c0      	uxtb	r0, r0
    5a6c:	4b26      	ldr	r3, [pc, #152]	; (5b08 <spi_init+0x328>)
    5a6e:	4798      	blx	r3
    5a70:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    5a72:	ab02      	add	r3, sp, #8
    5a74:	1d9a      	adds	r2, r3, #6
    5a76:	69a0      	ldr	r0, [r4, #24]
    5a78:	4b24      	ldr	r3, [pc, #144]	; (5b0c <spi_init+0x32c>)
    5a7a:	4798      	blx	r3
    5a7c:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    5a7e:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    5a80:	2b00      	cmp	r3, #0
    5a82:	d000      	beq.n	5a86 <spi_init+0x2a6>
    5a84:	e6be      	b.n	5804 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    5a86:	ab02      	add	r3, sp, #8
    5a88:	3306      	adds	r3, #6
    5a8a:	781b      	ldrb	r3, [r3, #0]
    5a8c:	4642      	mov	r2, r8
    5a8e:	7313      	strb	r3, [r2, #12]
    5a90:	e7d2      	b.n	5a38 <spi_init+0x258>
	uint32_t ctrlb = 0;
    5a92:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    5a94:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    5a96:	6863      	ldr	r3, [r4, #4]
    5a98:	68a1      	ldr	r1, [r4, #8]
    5a9a:	430b      	orrs	r3, r1
    5a9c:	68e1      	ldr	r1, [r4, #12]
    5a9e:	430b      	orrs	r3, r1
    5aa0:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    5aa2:	7c21      	ldrb	r1, [r4, #16]
    5aa4:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    5aa6:	7c61      	ldrb	r1, [r4, #17]
    5aa8:	2900      	cmp	r1, #0
    5aaa:	d103      	bne.n	5ab4 <spi_init+0x2d4>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    5aac:	491e      	ldr	r1, [pc, #120]	; (5b28 <spi_init+0x348>)
    5aae:	7889      	ldrb	r1, [r1, #2]
    5ab0:	0789      	lsls	r1, r1, #30
    5ab2:	d501      	bpl.n	5ab8 <spi_init+0x2d8>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    5ab4:	2180      	movs	r1, #128	; 0x80
    5ab6:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    5ab8:	7ca1      	ldrb	r1, [r4, #18]
    5aba:	2900      	cmp	r1, #0
    5abc:	d002      	beq.n	5ac4 <spi_init+0x2e4>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    5abe:	2180      	movs	r1, #128	; 0x80
    5ac0:	0289      	lsls	r1, r1, #10
    5ac2:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    5ac4:	7ce1      	ldrb	r1, [r4, #19]
    5ac6:	2900      	cmp	r1, #0
    5ac8:	d002      	beq.n	5ad0 <spi_init+0x2f0>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    5aca:	2180      	movs	r1, #128	; 0x80
    5acc:	0089      	lsls	r1, r1, #2
    5ace:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    5ad0:	7d21      	ldrb	r1, [r4, #20]
    5ad2:	2900      	cmp	r1, #0
    5ad4:	d002      	beq.n	5adc <spi_init+0x2fc>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    5ad6:	2180      	movs	r1, #128	; 0x80
    5ad8:	0189      	lsls	r1, r1, #6
    5ada:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    5adc:	4641      	mov	r1, r8
    5ade:	6809      	ldr	r1, [r1, #0]
    5ae0:	430b      	orrs	r3, r1
    5ae2:	4641      	mov	r1, r8
    5ae4:	600b      	str	r3, [r1, #0]
	spi_module->CTRLB.reg |= ctrlb;
    5ae6:	684b      	ldr	r3, [r1, #4]
    5ae8:	431a      	orrs	r2, r3
    5aea:	604a      	str	r2, [r1, #4]
	return STATUS_OK;
    5aec:	2000      	movs	r0, #0
    5aee:	e689      	b.n	5804 <spi_init+0x24>
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    5af0:	4a08      	ldr	r2, [pc, #32]	; (5b14 <spi_init+0x334>)
    5af2:	6a13      	ldr	r3, [r2, #32]
    5af4:	2102      	movs	r1, #2
    5af6:	430b      	orrs	r3, r1
    5af8:	6213      	str	r3, [r2, #32]
		gclk_index   =  SERCOM5_GCLK_ID_CORE;
    5afa:	2318      	movs	r3, #24
    5afc:	e740      	b.n	5980 <spi_init+0x1a0>
    5afe:	46c0      	nop			; (mov r8, r8)
    5b00:	0000557d 	.word	0x0000557d
    5b04:	40002800 	.word	0x40002800
    5b08:	00006b71 	.word	0x00006b71
    5b0c:	00005473 	.word	0x00005473
    5b10:	000056d9 	.word	0x000056d9
    5b14:	40000400 	.word	0x40000400
    5b18:	00006b4d 	.word	0x00006b4d
    5b1c:	00006add 	.word	0x00006add
    5b20:	00005531 	.word	0x00005531
    5b24:	00006c49 	.word	0x00006c49
    5b28:	41002000 	.word	0x41002000

00005b2c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    5b2c:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    5b2e:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    5b30:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    5b32:	2c01      	cmp	r4, #1
    5b34:	d001      	beq.n	5b3a <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    5b36:	0018      	movs	r0, r3
    5b38:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    5b3a:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    5b3c:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    5b3e:	2c00      	cmp	r4, #0
    5b40:	d1f9      	bne.n	5b36 <spi_select_slave+0xa>
		if (select) {
    5b42:	2a00      	cmp	r2, #0
    5b44:	d058      	beq.n	5bf8 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    5b46:	784b      	ldrb	r3, [r1, #1]
    5b48:	2b00      	cmp	r3, #0
    5b4a:	d044      	beq.n	5bd6 <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5b4c:	6803      	ldr	r3, [r0, #0]
    5b4e:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    5b50:	07db      	lsls	r3, r3, #31
    5b52:	d410      	bmi.n	5b76 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    5b54:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5b56:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5b58:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5b5a:	2900      	cmp	r1, #0
    5b5c:	d104      	bne.n	5b68 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    5b5e:	0953      	lsrs	r3, r2, #5
    5b60:	01db      	lsls	r3, r3, #7
    5b62:	492e      	ldr	r1, [pc, #184]	; (5c1c <spi_select_slave+0xf0>)
    5b64:	468c      	mov	ip, r1
    5b66:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5b68:	211f      	movs	r1, #31
    5b6a:	4011      	ands	r1, r2
    5b6c:	2201      	movs	r2, #1
    5b6e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5b70:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    5b72:	2305      	movs	r3, #5
    5b74:	e7df      	b.n	5b36 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    5b76:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5b78:	09d4      	lsrs	r4, r2, #7
		return NULL;
    5b7a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5b7c:	2c00      	cmp	r4, #0
    5b7e:	d104      	bne.n	5b8a <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    5b80:	0953      	lsrs	r3, r2, #5
    5b82:	01db      	lsls	r3, r3, #7
    5b84:	4c25      	ldr	r4, [pc, #148]	; (5c1c <spi_select_slave+0xf0>)
    5b86:	46a4      	mov	ip, r4
    5b88:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5b8a:	241f      	movs	r4, #31
    5b8c:	4014      	ands	r4, r2
    5b8e:	2201      	movs	r2, #1
    5b90:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    5b92:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5b94:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5b96:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    5b98:	07d2      	lsls	r2, r2, #31
    5b9a:	d501      	bpl.n	5ba0 <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5b9c:	788a      	ldrb	r2, [r1, #2]
    5b9e:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    5ba0:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    5ba2:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    5ba4:	2a00      	cmp	r2, #0
    5ba6:	d1c6      	bne.n	5b36 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5ba8:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    5baa:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5bac:	7e13      	ldrb	r3, [r2, #24]
    5bae:	420b      	tst	r3, r1
    5bb0:	d0fc      	beq.n	5bac <spi_select_slave+0x80>
    5bb2:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    5bb4:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    5bb6:	0749      	lsls	r1, r1, #29
    5bb8:	d5bd      	bpl.n	5b36 <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5bba:	8b53      	ldrh	r3, [r2, #26]
    5bbc:	075b      	lsls	r3, r3, #29
    5bbe:	d501      	bpl.n	5bc4 <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5bc0:	2304      	movs	r3, #4
    5bc2:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5bc4:	7983      	ldrb	r3, [r0, #6]
    5bc6:	2b01      	cmp	r3, #1
    5bc8:	d002      	beq.n	5bd0 <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5bca:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5bcc:	2300      	movs	r3, #0
    5bce:	e7b2      	b.n	5b36 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5bd0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5bd2:	2300      	movs	r3, #0
    5bd4:	e7af      	b.n	5b36 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    5bd6:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5bd8:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5bda:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5bdc:	2900      	cmp	r1, #0
    5bde:	d104      	bne.n	5bea <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    5be0:	0953      	lsrs	r3, r2, #5
    5be2:	01db      	lsls	r3, r3, #7
    5be4:	490d      	ldr	r1, [pc, #52]	; (5c1c <spi_select_slave+0xf0>)
    5be6:	468c      	mov	ip, r1
    5be8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5bea:	211f      	movs	r1, #31
    5bec:	4011      	ands	r1, r2
    5bee:	2201      	movs	r2, #1
    5bf0:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    5bf2:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    5bf4:	2300      	movs	r3, #0
    5bf6:	e79e      	b.n	5b36 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    5bf8:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5bfa:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5bfc:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5bfe:	2900      	cmp	r1, #0
    5c00:	d104      	bne.n	5c0c <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    5c02:	0953      	lsrs	r3, r2, #5
    5c04:	01db      	lsls	r3, r3, #7
    5c06:	4905      	ldr	r1, [pc, #20]	; (5c1c <spi_select_slave+0xf0>)
    5c08:	468c      	mov	ip, r1
    5c0a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5c0c:	211f      	movs	r1, #31
    5c0e:	4011      	ands	r1, r2
    5c10:	2201      	movs	r2, #1
    5c12:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5c14:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    5c16:	2300      	movs	r3, #0
    5c18:	e78d      	b.n	5b36 <spi_select_slave+0xa>
    5c1a:	46c0      	nop			; (mov r8, r8)
    5c1c:	40002800 	.word	0x40002800

00005c20 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    5c20:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c22:	46de      	mov	lr, fp
    5c24:	4657      	mov	r7, sl
    5c26:	464e      	mov	r6, r9
    5c28:	4645      	mov	r5, r8
    5c2a:	b5e0      	push	{r5, r6, r7, lr}
    5c2c:	b083      	sub	sp, #12
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    5c2e:	2317      	movs	r3, #23
	if (length == 0) {
    5c30:	2a00      	cmp	r2, #0
    5c32:	d107      	bne.n	5c44 <spi_write_buffer_wait+0x24>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    5c34:	0018      	movs	r0, r3
    5c36:	b003      	add	sp, #12
    5c38:	bc3c      	pop	{r2, r3, r4, r5}
    5c3a:	4690      	mov	r8, r2
    5c3c:	4699      	mov	r9, r3
    5c3e:	46a2      	mov	sl, r4
    5c40:	46ab      	mov	fp, r5
    5c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    5c44:	7943      	ldrb	r3, [r0, #5]
    5c46:	2b00      	cmp	r3, #0
    5c48:	d103      	bne.n	5c52 <spi_write_buffer_wait+0x32>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5c4a:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5c4c:	7e1c      	ldrb	r4, [r3, #24]
    5c4e:	07a4      	lsls	r4, r4, #30
    5c50:	d40a      	bmi.n	5c68 <spi_write_buffer_wait+0x48>
						data_to_send = tx_data[tx_pos++];
    5c52:	4693      	mov	fp, r2
    5c54:	2400      	movs	r4, #0
				if (spi_is_ready_to_write(module)) {
    5c56:	2301      	movs	r3, #1
			if (spi_is_write_complete(module)) {
    5c58:	2502      	movs	r5, #2
    5c5a:	46ac      	mov	ip, r5
					if (spi_is_ready_to_read(module)) {
    5c5c:	3502      	adds	r5, #2
    5c5e:	46a8      	mov	r8, r5
    5c60:	3a01      	subs	r2, #1
    5c62:	b292      	uxth	r2, r2
    5c64:	468a      	mov	sl, r1
    5c66:	e023      	b.n	5cb0 <spi_write_buffer_wait+0x90>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    5c68:	2402      	movs	r4, #2
    5c6a:	761c      	strb	r4, [r3, #24]
    5c6c:	e7f1      	b.n	5c52 <spi_write_buffer_wait+0x32>
    5c6e:	7e35      	ldrb	r5, [r6, #24]
			if (spi_is_write_complete(module)) {
    5c70:	4661      	mov	r1, ip
    5c72:	420d      	tst	r5, r1
    5c74:	d12e      	bne.n	5cd4 <spi_write_buffer_wait+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5c76:	7e35      	ldrb	r5, [r6, #24]
			if (!spi_is_ready_to_write(module)) {
    5c78:	421d      	tst	r5, r3
    5c7a:	d100      	bne.n	5c7e <spi_write_buffer_wait+0x5e>
    5c7c:	e0c2      	b.n	5e04 <spi_write_buffer_wait+0x1e4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5c7e:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5c80:	7e35      	ldrb	r5, [r6, #24]
		while (!spi_is_ready_to_write(module)) {
    5c82:	421d      	tst	r5, r3
    5c84:	d0fc      	beq.n	5c80 <spi_write_buffer_wait+0x60>
		uint16_t data_to_send = tx_data[tx_pos++];
    5c86:	1c67      	adds	r7, r4, #1
    5c88:	b2bf      	uxth	r7, r7
    5c8a:	4651      	mov	r1, sl
    5c8c:	5d0d      	ldrb	r5, [r1, r4]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5c8e:	7981      	ldrb	r1, [r0, #6]
    5c90:	2901      	cmp	r1, #1
    5c92:	d023      	beq.n	5cdc <spi_write_buffer_wait+0xbc>
		uint16_t data_to_send = tx_data[tx_pos++];
    5c94:	b2ad      	uxth	r5, r5
    5c96:	003c      	movs	r4, r7
    5c98:	7e37      	ldrb	r7, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    5c9a:	421f      	tst	r7, r3
    5c9c:	d002      	beq.n	5ca4 <spi_write_buffer_wait+0x84>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5c9e:	05ed      	lsls	r5, r5, #23
    5ca0:	0ded      	lsrs	r5, r5, #23
    5ca2:	62b5      	str	r5, [r6, #40]	; 0x28
    5ca4:	1e55      	subs	r5, r2, #1
    5ca6:	b2ad      	uxth	r5, r5
		if (module->receiver_enabled) {
    5ca8:	79c6      	ldrb	r6, [r0, #7]
    5caa:	2e00      	cmp	r6, #0
    5cac:	d11d      	bne.n	5cea <spi_write_buffer_wait+0xca>
    5cae:	002a      	movs	r2, r5
	while (length--) {
    5cb0:	4d59      	ldr	r5, [pc, #356]	; (5e18 <spi_write_buffer_wait+0x1f8>)
    5cb2:	42aa      	cmp	r2, r5
    5cb4:	d070      	beq.n	5d98 <spi_write_buffer_wait+0x178>
		if (module->mode == SPI_MODE_SLAVE) {
    5cb6:	7945      	ldrb	r5, [r0, #5]
    5cb8:	2d00      	cmp	r5, #0
    5cba:	d1e0      	bne.n	5c7e <spi_write_buffer_wait+0x5e>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5cbc:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5cbe:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_ready_to_write(module)) {
    5cc0:	421d      	tst	r5, r3
    5cc2:	d1d4      	bne.n	5c6e <spi_write_buffer_wait+0x4e>
    5cc4:	4d55      	ldr	r5, [pc, #340]	; (5e1c <spi_write_buffer_wait+0x1fc>)
    5cc6:	7e37      	ldrb	r7, [r6, #24]
    5cc8:	421f      	tst	r7, r3
    5cca:	d1d0      	bne.n	5c6e <spi_write_buffer_wait+0x4e>
    5ccc:	3d01      	subs	r5, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    5cce:	2d00      	cmp	r5, #0
    5cd0:	d1f9      	bne.n	5cc6 <spi_write_buffer_wait+0xa6>
    5cd2:	e7cc      	b.n	5c6e <spi_write_buffer_wait+0x4e>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    5cd4:	2302      	movs	r3, #2
    5cd6:	7633      	strb	r3, [r6, #24]
				return STATUS_ABORTED;
    5cd8:	3302      	adds	r3, #2
    5cda:	e7ab      	b.n	5c34 <spi_write_buffer_wait+0x14>
			data_to_send |= (tx_data[tx_pos++] << 8);
    5cdc:	3402      	adds	r4, #2
    5cde:	b2a4      	uxth	r4, r4
    5ce0:	4651      	mov	r1, sl
    5ce2:	5dcf      	ldrb	r7, [r1, r7]
    5ce4:	023f      	lsls	r7, r7, #8
    5ce6:	433d      	orrs	r5, r7
    5ce8:	e7d6      	b.n	5c98 <spi_write_buffer_wait+0x78>
    5cea:	4651      	mov	r1, sl
			if (module->mode == SPI_MODE_SLAVE) {
    5cec:	7945      	ldrb	r5, [r0, #5]
    5cee:	2d00      	cmp	r5, #0
    5cf0:	d137      	bne.n	5d62 <spi_write_buffer_wait+0x142>
    5cf2:	4d4b      	ldr	r5, [pc, #300]	; (5e20 <spi_write_buffer_wait+0x200>)
    5cf4:	9101      	str	r1, [sp, #4]
    5cf6:	e012      	b.n	5d1e <spi_write_buffer_wait+0xfe>
							data_to_send |= (tx_data[tx_pos++] << 8);
    5cf8:	3402      	adds	r4, #2
    5cfa:	b2a4      	uxth	r4, r4
    5cfc:	4649      	mov	r1, r9
    5cfe:	9f01      	ldr	r7, [sp, #4]
    5d00:	5c79      	ldrb	r1, [r7, r1]
    5d02:	0209      	lsls	r1, r1, #8
    5d04:	9f00      	ldr	r7, [sp, #0]
    5d06:	430f      	orrs	r7, r1
    5d08:	e01b      	b.n	5d42 <spi_write_buffer_wait+0x122>
						length--;
    5d0a:	3a01      	subs	r2, #1
    5d0c:	b292      	uxth	r2, r2
	SercomSpi *const spi_module = &(module->hw->SPI);
    5d0e:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5d10:	7e37      	ldrb	r7, [r6, #24]
					if (spi_is_ready_to_read(module)) {
    5d12:	4641      	mov	r1, r8
    5d14:	420f      	tst	r7, r1
    5d16:	d11b      	bne.n	5d50 <spi_write_buffer_wait+0x130>
    5d18:	3d01      	subs	r5, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    5d1a:	2d00      	cmp	r5, #0
    5d1c:	d018      	beq.n	5d50 <spi_write_buffer_wait+0x130>
					if (length && spi_is_ready_to_write(module)) {
    5d1e:	2a00      	cmp	r2, #0
    5d20:	d0f5      	beq.n	5d0e <spi_write_buffer_wait+0xee>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5d22:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5d24:	7e37      	ldrb	r7, [r6, #24]
    5d26:	421f      	tst	r7, r3
    5d28:	d0f1      	beq.n	5d0e <spi_write_buffer_wait+0xee>
						data_to_send = tx_data[tx_pos++];
    5d2a:	1c67      	adds	r7, r4, #1
    5d2c:	b2b9      	uxth	r1, r7
    5d2e:	4689      	mov	r9, r1
    5d30:	9901      	ldr	r1, [sp, #4]
    5d32:	5d09      	ldrb	r1, [r1, r4]
    5d34:	9100      	str	r1, [sp, #0]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5d36:	7981      	ldrb	r1, [r0, #6]
    5d38:	2901      	cmp	r1, #1
    5d3a:	d0dd      	beq.n	5cf8 <spi_write_buffer_wait+0xd8>
						data_to_send = tx_data[tx_pos++];
    5d3c:	4669      	mov	r1, sp
    5d3e:	880f      	ldrh	r7, [r1, #0]
    5d40:	464c      	mov	r4, r9
    5d42:	7e31      	ldrb	r1, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    5d44:	4219      	tst	r1, r3
    5d46:	d0e0      	beq.n	5d0a <spi_write_buffer_wait+0xea>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5d48:	05ff      	lsls	r7, r7, #23
    5d4a:	0dff      	lsrs	r7, r7, #23
    5d4c:	62b7      	str	r7, [r6, #40]	; 0x28
    5d4e:	e7dc      	b.n	5d0a <spi_write_buffer_wait+0xea>
    5d50:	9901      	ldr	r1, [sp, #4]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5d52:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_write_complete(module)) {
    5d54:	4667      	mov	r7, ip
    5d56:	423d      	tst	r5, r7
    5d58:	d118      	bne.n	5d8c <spi_write_buffer_wait+0x16c>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5d5a:	7e35      	ldrb	r5, [r6, #24]
				if (!spi_is_ready_to_read(module)) {
    5d5c:	4646      	mov	r6, r8
    5d5e:	4235      	tst	r5, r6
    5d60:	d052      	beq.n	5e08 <spi_write_buffer_wait+0x1e8>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5d62:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5d64:	7e35      	ldrb	r5, [r6, #24]
			while (!spi_is_ready_to_read(module)) {
    5d66:	4647      	mov	r7, r8
    5d68:	423d      	tst	r5, r7
    5d6a:	d0fb      	beq.n	5d64 <spi_write_buffer_wait+0x144>
    5d6c:	7e35      	ldrb	r5, [r6, #24]
	if (!spi_is_ready_to_read(module)) {
    5d6e:	423d      	tst	r5, r7
    5d70:	d007      	beq.n	5d82 <spi_write_buffer_wait+0x162>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5d72:	8b75      	ldrh	r5, [r6, #26]
    5d74:	423d      	tst	r5, r7
    5d76:	d000      	beq.n	5d7a <spi_write_buffer_wait+0x15a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5d78:	8377      	strh	r7, [r6, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5d7a:	7985      	ldrb	r5, [r0, #6]
    5d7c:	2d01      	cmp	r5, #1
    5d7e:	d009      	beq.n	5d94 <spi_write_buffer_wait+0x174>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5d80:	6ab5      	ldr	r5, [r6, #40]	; 0x28
			flush_length--;
    5d82:	465d      	mov	r5, fp
    5d84:	3d01      	subs	r5, #1
    5d86:	b2ad      	uxth	r5, r5
    5d88:	46ab      	mov	fp, r5
    5d8a:	e769      	b.n	5c60 <spi_write_buffer_wait+0x40>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    5d8c:	2302      	movs	r3, #2
    5d8e:	7633      	strb	r3, [r6, #24]
					return STATUS_ABORTED;
    5d90:	3302      	adds	r3, #2
    5d92:	e74f      	b.n	5c34 <spi_write_buffer_wait+0x14>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5d94:	6ab5      	ldr	r5, [r6, #40]	; 0x28
    5d96:	e7f4      	b.n	5d82 <spi_write_buffer_wait+0x162>
	if (module->mode == SPI_MODE_MASTER) {
    5d98:	7943      	ldrb	r3, [r0, #5]
    5d9a:	2b01      	cmp	r3, #1
    5d9c:	d00b      	beq.n	5db6 <spi_write_buffer_wait+0x196>
	if (module->mode == SPI_MODE_SLAVE) {
    5d9e:	2b00      	cmp	r3, #0
    5da0:	d134      	bne.n	5e0c <spi_write_buffer_wait+0x1ec>
		if (module->receiver_enabled) {
    5da2:	79c2      	ldrb	r2, [r0, #7]
    5da4:	2a00      	cmp	r2, #0
    5da6:	d100      	bne.n	5daa <spi_write_buffer_wait+0x18a>
    5da8:	e744      	b.n	5c34 <spi_write_buffer_wait+0x14>
					if (spi_is_ready_to_read(module)) {
    5daa:	2404      	movs	r4, #4
			while (flush_length) {
    5dac:	465b      	mov	r3, fp
    5dae:	465d      	mov	r5, fp
    5db0:	2b00      	cmp	r3, #0
    5db2:	d119      	bne.n	5de8 <spi_write_buffer_wait+0x1c8>
    5db4:	e73e      	b.n	5c34 <spi_write_buffer_wait+0x14>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5db6:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    5db8:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5dba:	7e0b      	ldrb	r3, [r1, #24]
    5dbc:	4213      	tst	r3, r2
    5dbe:	d0fc      	beq.n	5dba <spi_write_buffer_wait+0x19a>
	return STATUS_OK;
    5dc0:	2300      	movs	r3, #0
    5dc2:	e737      	b.n	5c34 <spi_write_buffer_wait+0x14>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5dc4:	7e0b      	ldrb	r3, [r1, #24]
				if (!spi_is_ready_to_read(module)) {
    5dc6:	4223      	tst	r3, r4
    5dc8:	d022      	beq.n	5e10 <spi_write_buffer_wait+0x1f0>
    5dca:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    5dcc:	4223      	tst	r3, r4
    5dce:	d007      	beq.n	5de0 <spi_write_buffer_wait+0x1c0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5dd0:	8b4b      	ldrh	r3, [r1, #26]
    5dd2:	4223      	tst	r3, r4
    5dd4:	d000      	beq.n	5dd8 <spi_write_buffer_wait+0x1b8>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5dd6:	834c      	strh	r4, [r1, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5dd8:	7983      	ldrb	r3, [r0, #6]
    5dda:	2b01      	cmp	r3, #1
    5ddc:	d010      	beq.n	5e00 <spi_write_buffer_wait+0x1e0>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5dde:	6a8b      	ldr	r3, [r1, #40]	; 0x28
				flush_length--;
    5de0:	3d01      	subs	r5, #1
    5de2:	b2ad      	uxth	r5, r5
			while (flush_length) {
    5de4:	2d00      	cmp	r5, #0
    5de6:	d015      	beq.n	5e14 <spi_write_buffer_wait+0x1f4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5de8:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5dea:	7e0b      	ldrb	r3, [r1, #24]
					if (spi_is_ready_to_read(module)) {
    5dec:	4223      	tst	r3, r4
    5dee:	d1e9      	bne.n	5dc4 <spi_write_buffer_wait+0x1a4>
    5df0:	4b0a      	ldr	r3, [pc, #40]	; (5e1c <spi_write_buffer_wait+0x1fc>)
    5df2:	7e0a      	ldrb	r2, [r1, #24]
    5df4:	4222      	tst	r2, r4
    5df6:	d1e5      	bne.n	5dc4 <spi_write_buffer_wait+0x1a4>
    5df8:	3b01      	subs	r3, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    5dfa:	2b00      	cmp	r3, #0
    5dfc:	d1f9      	bne.n	5df2 <spi_write_buffer_wait+0x1d2>
    5dfe:	e7e1      	b.n	5dc4 <spi_write_buffer_wait+0x1a4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5e00:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    5e02:	e7ed      	b.n	5de0 <spi_write_buffer_wait+0x1c0>
				return STATUS_ERR_TIMEOUT;
    5e04:	2312      	movs	r3, #18
    5e06:	e715      	b.n	5c34 <spi_write_buffer_wait+0x14>
					return STATUS_ERR_TIMEOUT;
    5e08:	2312      	movs	r3, #18
    5e0a:	e713      	b.n	5c34 <spi_write_buffer_wait+0x14>
	return STATUS_OK;
    5e0c:	2300      	movs	r3, #0
    5e0e:	e711      	b.n	5c34 <spi_write_buffer_wait+0x14>
					return STATUS_ERR_TIMEOUT;
    5e10:	2312      	movs	r3, #18
    5e12:	e70f      	b.n	5c34 <spi_write_buffer_wait+0x14>
	return STATUS_OK;
    5e14:	2300      	movs	r3, #0
    5e16:	e70d      	b.n	5c34 <spi_write_buffer_wait+0x14>
    5e18:	0000ffff 	.word	0x0000ffff
    5e1c:	00002710 	.word	0x00002710
    5e20:	00002711 	.word	0x00002711

00005e24 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    5e24:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e26:	46de      	mov	lr, fp
    5e28:	4657      	mov	r7, sl
    5e2a:	464e      	mov	r6, r9
    5e2c:	4645      	mov	r5, r8
    5e2e:	b5e0      	push	{r5, r6, r7, lr}
    5e30:	b091      	sub	sp, #68	; 0x44
    5e32:	0005      	movs	r5, r0
    5e34:	000c      	movs	r4, r1
    5e36:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    5e38:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5e3a:	0008      	movs	r0, r1
    5e3c:	4bc6      	ldr	r3, [pc, #792]	; (6158 <usart_init+0x334>)
    5e3e:	4798      	blx	r3
    5e40:	0002      	movs	r2, r0
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
    5e42:	2805      	cmp	r0, #5
    5e44:	d00d      	beq.n	5e62 <usart_init+0x3e>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5e46:	0007      	movs	r7, r0
    5e48:	3712      	adds	r7, #18
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    5e4a:	0003      	movs	r3, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    5e4c:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    5e4e:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    5e50:	07c9      	lsls	r1, r1, #31
    5e52:	d509      	bpl.n	5e68 <usart_init+0x44>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    5e54:	b011      	add	sp, #68	; 0x44
    5e56:	bc3c      	pop	{r2, r3, r4, r5}
    5e58:	4690      	mov	r8, r2
    5e5a:	4699      	mov	r9, r3
    5e5c:	46a2      	mov	sl, r4
    5e5e:	46ab      	mov	fp, r5
    5e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    5e62:	2718      	movs	r7, #24
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    5e64:	2301      	movs	r3, #1
    5e66:	e7f1      	b.n	5e4c <usart_init+0x28>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    5e68:	6821      	ldr	r1, [r4, #0]
		return STATUS_ERR_DENIED;
    5e6a:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    5e6c:	0789      	lsls	r1, r1, #30
    5e6e:	d4f1      	bmi.n	5e54 <usart_init+0x30>
	if (sercom_index == 5) {
    5e70:	2a05      	cmp	r2, #5
    5e72:	d049      	beq.n	5f08 <usart_init+0xe4>
			MCLK->APBCMASK.reg |= mask;
    5e74:	49b9      	ldr	r1, [pc, #740]	; (615c <usart_init+0x338>)
    5e76:	69c8      	ldr	r0, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
    5e78:	2201      	movs	r2, #1
    5e7a:	409a      	lsls	r2, r3
    5e7c:	0013      	movs	r3, r2
    5e7e:	4303      	orrs	r3, r0
    5e80:	61cb      	str	r3, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    5e82:	a90f      	add	r1, sp, #60	; 0x3c
    5e84:	232d      	movs	r3, #45	; 0x2d
    5e86:	4698      	mov	r8, r3
    5e88:	5cf3      	ldrb	r3, [r6, r3]
    5e8a:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    5e8c:	b2ff      	uxtb	r7, r7
    5e8e:	0038      	movs	r0, r7
    5e90:	4bb3      	ldr	r3, [pc, #716]	; (6160 <usart_init+0x33c>)
    5e92:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    5e94:	0038      	movs	r0, r7
    5e96:	4bb3      	ldr	r3, [pc, #716]	; (6164 <usart_init+0x340>)
    5e98:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    5e9a:	4643      	mov	r3, r8
    5e9c:	5cf0      	ldrb	r0, [r6, r3]
    5e9e:	2100      	movs	r1, #0
    5ea0:	4bb1      	ldr	r3, [pc, #708]	; (6168 <usart_init+0x344>)
    5ea2:	4798      	blx	r3
	module->character_size = config->character_size;
    5ea4:	7af3      	ldrb	r3, [r6, #11]
    5ea6:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    5ea8:	2324      	movs	r3, #36	; 0x24
    5eaa:	5cf3      	ldrb	r3, [r6, r3]
    5eac:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    5eae:	2325      	movs	r3, #37	; 0x25
    5eb0:	5cf3      	ldrb	r3, [r6, r3]
    5eb2:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    5eb4:	7ef3      	ldrb	r3, [r6, #27]
    5eb6:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    5eb8:	7f33      	ldrb	r3, [r6, #28]
    5eba:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    5ebc:	682b      	ldr	r3, [r5, #0]
    5ebe:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5ec0:	0018      	movs	r0, r3
    5ec2:	4ba5      	ldr	r3, [pc, #660]	; (6158 <usart_init+0x334>)
    5ec4:	4798      	blx	r3
	if (sercom_index == 5) {
    5ec6:	2805      	cmp	r0, #5
    5ec8:	d026      	beq.n	5f18 <usart_init+0xf4>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5eca:	3012      	adds	r0, #18
	uint16_t baud  = 0;
    5ecc:	2200      	movs	r2, #0
    5ece:	230e      	movs	r3, #14
    5ed0:	a906      	add	r1, sp, #24
    5ed2:	468c      	mov	ip, r1
    5ed4:	4463      	add	r3, ip
    5ed6:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    5ed8:	8a32      	ldrh	r2, [r6, #16]
    5eda:	9202      	str	r2, [sp, #8]
    5edc:	2380      	movs	r3, #128	; 0x80
    5ede:	01db      	lsls	r3, r3, #7
    5ee0:	429a      	cmp	r2, r3
    5ee2:	d100      	bne.n	5ee6 <usart_init+0xc2>
    5ee4:	e0ab      	b.n	603e <usart_init+0x21a>
    5ee6:	d919      	bls.n	5f1c <usart_init+0xf8>
    5ee8:	23c0      	movs	r3, #192	; 0xc0
    5eea:	01db      	lsls	r3, r3, #7
    5eec:	9a02      	ldr	r2, [sp, #8]
    5eee:	429a      	cmp	r2, r3
    5ef0:	d100      	bne.n	5ef4 <usart_init+0xd0>
    5ef2:	e09f      	b.n	6034 <usart_init+0x210>
    5ef4:	2380      	movs	r3, #128	; 0x80
    5ef6:	021b      	lsls	r3, r3, #8
    5ef8:	429a      	cmp	r2, r3
    5efa:	d000      	beq.n	5efe <usart_init+0xda>
    5efc:	e127      	b.n	614e <usart_init+0x32a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    5efe:	2303      	movs	r3, #3
    5f00:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5f02:	2300      	movs	r3, #0
    5f04:	9307      	str	r3, [sp, #28]
    5f06:	e012      	b.n	5f2e <usart_init+0x10a>
			MCLK->APBDMASK.reg |= mask;
    5f08:	4994      	ldr	r1, [pc, #592]	; (615c <usart_init+0x338>)
    5f0a:	6a08      	ldr	r0, [r1, #32]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
    5f0c:	3a04      	subs	r2, #4
    5f0e:	409a      	lsls	r2, r3
    5f10:	0013      	movs	r3, r2
    5f12:	4303      	orrs	r3, r0
    5f14:	620b      	str	r3, [r1, #32]
    5f16:	e7b4      	b.n	5e82 <usart_init+0x5e>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    5f18:	2018      	movs	r0, #24
    5f1a:	e7d7      	b.n	5ecc <usart_init+0xa8>
	switch (config->sample_rate) {
    5f1c:	2380      	movs	r3, #128	; 0x80
    5f1e:	019b      	lsls	r3, r3, #6
    5f20:	429a      	cmp	r2, r3
    5f22:	d000      	beq.n	5f26 <usart_init+0x102>
    5f24:	e113      	b.n	614e <usart_init+0x32a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5f26:	2310      	movs	r3, #16
    5f28:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    5f2a:	3b0f      	subs	r3, #15
    5f2c:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    5f2e:	6833      	ldr	r3, [r6, #0]
    5f30:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    5f32:	68f3      	ldr	r3, [r6, #12]
    5f34:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    5f36:	6973      	ldr	r3, [r6, #20]
    5f38:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    5f3a:	7e33      	ldrb	r3, [r6, #24]
    5f3c:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    5f3e:	2326      	movs	r3, #38	; 0x26
    5f40:	5cf3      	ldrb	r3, [r6, r3]
    5f42:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    5f44:	6873      	ldr	r3, [r6, #4]
    5f46:	4699      	mov	r9, r3
	switch (transfer_mode)
    5f48:	2b00      	cmp	r3, #0
    5f4a:	d100      	bne.n	5f4e <usart_init+0x12a>
    5f4c:	e09f      	b.n	608e <usart_init+0x26a>
    5f4e:	2380      	movs	r3, #128	; 0x80
    5f50:	055b      	lsls	r3, r3, #21
    5f52:	4599      	cmp	r9, r3
    5f54:	d104      	bne.n	5f60 <usart_init+0x13c>
			if (!config->use_external_clock) {
    5f56:	2327      	movs	r3, #39	; 0x27
    5f58:	5cf3      	ldrb	r3, [r6, r3]
    5f5a:	2b00      	cmp	r3, #0
    5f5c:	d100      	bne.n	5f60 <usart_init+0x13c>
    5f5e:	e084      	b.n	606a <usart_init+0x246>
	if(config->encoding_format_enable) {
    5f60:	7e73      	ldrb	r3, [r6, #25]
    5f62:	2b00      	cmp	r3, #0
    5f64:	d002      	beq.n	5f6c <usart_init+0x148>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    5f66:	7eb3      	ldrb	r3, [r6, #26]
    5f68:	4642      	mov	r2, r8
    5f6a:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    5f6c:	682a      	ldr	r2, [r5, #0]
    5f6e:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    5f70:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    5f72:	2b00      	cmp	r3, #0
    5f74:	d1fc      	bne.n	5f70 <usart_init+0x14c>
	usart_hw->BAUD.reg = baud;
    5f76:	330e      	adds	r3, #14
    5f78:	aa06      	add	r2, sp, #24
    5f7a:	4694      	mov	ip, r2
    5f7c:	4463      	add	r3, ip
    5f7e:	881b      	ldrh	r3, [r3, #0]
    5f80:	4642      	mov	r2, r8
    5f82:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    5f84:	9b05      	ldr	r3, [sp, #20]
    5f86:	9a03      	ldr	r2, [sp, #12]
    5f88:	4313      	orrs	r3, r2
    5f8a:	9a04      	ldr	r2, [sp, #16]
    5f8c:	4313      	orrs	r3, r2
    5f8e:	464a      	mov	r2, r9
    5f90:	4313      	orrs	r3, r2
    5f92:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    5f94:	465b      	mov	r3, fp
    5f96:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    5f98:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    5f9a:	4653      	mov	r3, sl
    5f9c:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    5f9e:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    5fa0:	2327      	movs	r3, #39	; 0x27
    5fa2:	5cf3      	ldrb	r3, [r6, r3]
    5fa4:	2b00      	cmp	r3, #0
    5fa6:	d101      	bne.n	5fac <usart_init+0x188>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    5fa8:	3304      	adds	r3, #4
    5faa:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    5fac:	7e73      	ldrb	r3, [r6, #25]
    5fae:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    5fb0:	7f32      	ldrb	r2, [r6, #28]
    5fb2:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    5fb4:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    5fb6:	7f72      	ldrb	r2, [r6, #29]
    5fb8:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    5fba:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    5fbc:	2224      	movs	r2, #36	; 0x24
    5fbe:	5cb2      	ldrb	r2, [r6, r2]
    5fc0:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    5fc2:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    5fc4:	2225      	movs	r2, #37	; 0x25
    5fc6:	5cb2      	ldrb	r2, [r6, r2]
    5fc8:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    5fca:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    5fcc:	7ab1      	ldrb	r1, [r6, #10]
    5fce:	7af2      	ldrb	r2, [r6, #11]
    5fd0:	4311      	orrs	r1, r2
    5fd2:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    5fd4:	8933      	ldrh	r3, [r6, #8]
    5fd6:	2bff      	cmp	r3, #255	; 0xff
    5fd8:	d07d      	beq.n	60d6 <usart_init+0x2b2>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    5fda:	2280      	movs	r2, #128	; 0x80
    5fdc:	0452      	lsls	r2, r2, #17
    5fde:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    5fe0:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    5fe2:	232c      	movs	r3, #44	; 0x2c
    5fe4:	5cf3      	ldrb	r3, [r6, r3]
    5fe6:	2b00      	cmp	r3, #0
    5fe8:	d103      	bne.n	5ff2 <usart_init+0x1ce>
    5fea:	4b60      	ldr	r3, [pc, #384]	; (616c <usart_init+0x348>)
    5fec:	789b      	ldrb	r3, [r3, #2]
    5fee:	079b      	lsls	r3, r3, #30
    5ff0:	d501      	bpl.n	5ff6 <usart_init+0x1d2>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    5ff2:	2380      	movs	r3, #128	; 0x80
    5ff4:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    5ff6:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    5ff8:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    5ffa:	2b00      	cmp	r3, #0
    5ffc:	d1fc      	bne.n	5ff8 <usart_init+0x1d4>
	usart_hw->CTRLB.reg = ctrlb;
    5ffe:	4643      	mov	r3, r8
    6000:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    6002:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    6004:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    6006:	2b00      	cmp	r3, #0
    6008:	d1fc      	bne.n	6004 <usart_init+0x1e0>
	usart_hw->CTRLA.reg = ctrla;
    600a:	4643      	mov	r3, r8
    600c:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    600e:	ab0e      	add	r3, sp, #56	; 0x38
    6010:	2280      	movs	r2, #128	; 0x80
    6012:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6014:	2200      	movs	r2, #0
    6016:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    6018:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    601a:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    601c:	6b33      	ldr	r3, [r6, #48]	; 0x30
    601e:	930a      	str	r3, [sp, #40]	; 0x28
    6020:	6b73      	ldr	r3, [r6, #52]	; 0x34
    6022:	930b      	str	r3, [sp, #44]	; 0x2c
    6024:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    6026:	930c      	str	r3, [sp, #48]	; 0x30
    6028:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    602a:	9302      	str	r3, [sp, #8]
    602c:	930d      	str	r3, [sp, #52]	; 0x34
    602e:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    6030:	ae0a      	add	r6, sp, #40	; 0x28
    6032:	e05e      	b.n	60f2 <usart_init+0x2ce>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    6034:	2308      	movs	r3, #8
    6036:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    6038:	3b07      	subs	r3, #7
    603a:	9307      	str	r3, [sp, #28]
    603c:	e777      	b.n	5f2e <usart_init+0x10a>
	ctrla = (uint32_t)config->data_order |
    603e:	6833      	ldr	r3, [r6, #0]
    6040:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    6042:	68f3      	ldr	r3, [r6, #12]
    6044:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    6046:	6973      	ldr	r3, [r6, #20]
    6048:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    604a:	7e33      	ldrb	r3, [r6, #24]
    604c:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    604e:	2326      	movs	r3, #38	; 0x26
    6050:	5cf3      	ldrb	r3, [r6, r3]
    6052:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    6054:	6873      	ldr	r3, [r6, #4]
    6056:	4699      	mov	r9, r3
	switch (transfer_mode)
    6058:	2b00      	cmp	r3, #0
    605a:	d014      	beq.n	6086 <usart_init+0x262>
    605c:	2380      	movs	r3, #128	; 0x80
    605e:	055b      	lsls	r3, r3, #21
    6060:	4599      	cmp	r9, r3
    6062:	d100      	bne.n	6066 <usart_init+0x242>
    6064:	e777      	b.n	5f56 <usart_init+0x132>
	enum status_code status_code = STATUS_OK;
    6066:	2000      	movs	r0, #0
    6068:	e020      	b.n	60ac <usart_init+0x288>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    606a:	6a33      	ldr	r3, [r6, #32]
    606c:	001f      	movs	r7, r3
    606e:	b2c0      	uxtb	r0, r0
    6070:	4b3f      	ldr	r3, [pc, #252]	; (6170 <usart_init+0x34c>)
    6072:	4798      	blx	r3
    6074:	0001      	movs	r1, r0
    6076:	220e      	movs	r2, #14
    6078:	ab06      	add	r3, sp, #24
    607a:	469c      	mov	ip, r3
    607c:	4462      	add	r2, ip
    607e:	0038      	movs	r0, r7
    6080:	4b3c      	ldr	r3, [pc, #240]	; (6174 <usart_init+0x350>)
    6082:	4798      	blx	r3
    6084:	e012      	b.n	60ac <usart_init+0x288>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    6086:	2308      	movs	r3, #8
    6088:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    608a:	2300      	movs	r3, #0
    608c:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    608e:	2327      	movs	r3, #39	; 0x27
    6090:	5cf3      	ldrb	r3, [r6, r3]
    6092:	2b00      	cmp	r3, #0
    6094:	d00e      	beq.n	60b4 <usart_init+0x290>
				status_code =
    6096:	9b06      	ldr	r3, [sp, #24]
    6098:	9300      	str	r3, [sp, #0]
    609a:	9b07      	ldr	r3, [sp, #28]
    609c:	220e      	movs	r2, #14
    609e:	a906      	add	r1, sp, #24
    60a0:	468c      	mov	ip, r1
    60a2:	4462      	add	r2, ip
    60a4:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    60a6:	6a30      	ldr	r0, [r6, #32]
    60a8:	4f33      	ldr	r7, [pc, #204]	; (6178 <usart_init+0x354>)
    60aa:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    60ac:	2800      	cmp	r0, #0
    60ae:	d000      	beq.n	60b2 <usart_init+0x28e>
    60b0:	e6d0      	b.n	5e54 <usart_init+0x30>
    60b2:	e755      	b.n	5f60 <usart_init+0x13c>
						_sercom_get_async_baud_val(config->baudrate,
    60b4:	6a33      	ldr	r3, [r6, #32]
    60b6:	001f      	movs	r7, r3
    60b8:	b2c0      	uxtb	r0, r0
    60ba:	4b2d      	ldr	r3, [pc, #180]	; (6170 <usart_init+0x34c>)
    60bc:	4798      	blx	r3
    60be:	0001      	movs	r1, r0
				status_code =
    60c0:	9b06      	ldr	r3, [sp, #24]
    60c2:	9300      	str	r3, [sp, #0]
    60c4:	9b07      	ldr	r3, [sp, #28]
    60c6:	220e      	movs	r2, #14
    60c8:	a806      	add	r0, sp, #24
    60ca:	4684      	mov	ip, r0
    60cc:	4462      	add	r2, ip
    60ce:	0038      	movs	r0, r7
    60d0:	4f29      	ldr	r7, [pc, #164]	; (6178 <usart_init+0x354>)
    60d2:	47b8      	blx	r7
    60d4:	e7ea      	b.n	60ac <usart_init+0x288>
		if(config->lin_slave_enable) {
    60d6:	7ef3      	ldrb	r3, [r6, #27]
    60d8:	2b00      	cmp	r3, #0
    60da:	d082      	beq.n	5fe2 <usart_init+0x1be>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    60dc:	2380      	movs	r3, #128	; 0x80
    60de:	04db      	lsls	r3, r3, #19
    60e0:	431f      	orrs	r7, r3
    60e2:	e77e      	b.n	5fe2 <usart_init+0x1be>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    60e4:	0020      	movs	r0, r4
    60e6:	4b25      	ldr	r3, [pc, #148]	; (617c <usart_init+0x358>)
    60e8:	4798      	blx	r3
    60ea:	e007      	b.n	60fc <usart_init+0x2d8>
    60ec:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    60ee:	2f04      	cmp	r7, #4
    60f0:	d00d      	beq.n	610e <usart_init+0x2ea>
    60f2:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    60f4:	00bb      	lsls	r3, r7, #2
    60f6:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    60f8:	2800      	cmp	r0, #0
    60fa:	d0f3      	beq.n	60e4 <usart_init+0x2c0>
		if (current_pinmux != PINMUX_UNUSED) {
    60fc:	1c43      	adds	r3, r0, #1
    60fe:	d0f5      	beq.n	60ec <usart_init+0x2c8>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    6100:	a90e      	add	r1, sp, #56	; 0x38
    6102:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    6104:	0c00      	lsrs	r0, r0, #16
    6106:	b2c0      	uxtb	r0, r0
    6108:	4b1d      	ldr	r3, [pc, #116]	; (6180 <usart_init+0x35c>)
    610a:	4798      	blx	r3
    610c:	e7ee      	b.n	60ec <usart_init+0x2c8>
		module->callback[i]            = NULL;
    610e:	2300      	movs	r3, #0
    6110:	60eb      	str	r3, [r5, #12]
    6112:	612b      	str	r3, [r5, #16]
    6114:	616b      	str	r3, [r5, #20]
    6116:	61ab      	str	r3, [r5, #24]
    6118:	61eb      	str	r3, [r5, #28]
    611a:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    611c:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    611e:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    6120:	2200      	movs	r2, #0
    6122:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    6124:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    6126:	3330      	adds	r3, #48	; 0x30
    6128:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    612a:	3301      	adds	r3, #1
    612c:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    612e:	3301      	adds	r3, #1
    6130:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    6132:	3301      	adds	r3, #1
    6134:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    6136:	6828      	ldr	r0, [r5, #0]
    6138:	4b07      	ldr	r3, [pc, #28]	; (6158 <usart_init+0x334>)
    613a:	4798      	blx	r3
    613c:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    613e:	4911      	ldr	r1, [pc, #68]	; (6184 <usart_init+0x360>)
    6140:	4b11      	ldr	r3, [pc, #68]	; (6188 <usart_init+0x364>)
    6142:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    6144:	00a4      	lsls	r4, r4, #2
    6146:	4b11      	ldr	r3, [pc, #68]	; (618c <usart_init+0x368>)
    6148:	50e5      	str	r5, [r4, r3]
	return status_code;
    614a:	2000      	movs	r0, #0
    614c:	e682      	b.n	5e54 <usart_init+0x30>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    614e:	2310      	movs	r3, #16
    6150:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    6152:	2300      	movs	r3, #0
    6154:	9307      	str	r3, [sp, #28]
    6156:	e6ea      	b.n	5f2e <usart_init+0x10a>
    6158:	000056d9 	.word	0x000056d9
    615c:	40000400 	.word	0x40000400
    6160:	00006b4d 	.word	0x00006b4d
    6164:	00006add 	.word	0x00006add
    6168:	00005531 	.word	0x00005531
    616c:	41002000 	.word	0x41002000
    6170:	00006b71 	.word	0x00006b71
    6174:	00005473 	.word	0x00005473
    6178:	0000549d 	.word	0x0000549d
    617c:	0000557d 	.word	0x0000557d
    6180:	00006c49 	.word	0x00006c49
    6184:	00006385 	.word	0x00006385
    6188:	00005715 	.word	0x00005715
    618c:	20002148 	.word	0x20002148

00006190 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    6190:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    6192:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    6194:	2a00      	cmp	r2, #0
    6196:	d101      	bne.n	619c <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    6198:	0018      	movs	r0, r3
    619a:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    619c:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    619e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    61a0:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    61a2:	2a00      	cmp	r2, #0
    61a4:	d1f8      	bne.n	6198 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    61a6:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    61a8:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    61aa:	2a00      	cmp	r2, #0
    61ac:	d1fc      	bne.n	61a8 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    61ae:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    61b0:	2102      	movs	r1, #2
    61b2:	7e1a      	ldrb	r2, [r3, #24]
    61b4:	420a      	tst	r2, r1
    61b6:	d0fc      	beq.n	61b2 <usart_write_wait+0x22>
	return STATUS_OK;
    61b8:	2300      	movs	r3, #0
    61ba:	e7ed      	b.n	6198 <usart_write_wait+0x8>

000061bc <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    61bc:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    61be:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    61c0:	2a00      	cmp	r2, #0
    61c2:	d101      	bne.n	61c8 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    61c4:	0018      	movs	r0, r3
    61c6:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    61c8:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    61ca:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    61cc:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    61ce:	2a00      	cmp	r2, #0
    61d0:	d1f8      	bne.n	61c4 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    61d2:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    61d4:	7e10      	ldrb	r0, [r2, #24]
    61d6:	0740      	lsls	r0, r0, #29
    61d8:	d5f4      	bpl.n	61c4 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    61da:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    61dc:	2b00      	cmp	r3, #0
    61de:	d1fc      	bne.n	61da <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    61e0:	8b53      	ldrh	r3, [r2, #26]
    61e2:	b2db      	uxtb	r3, r3
	if (error_code) {
    61e4:	0698      	lsls	r0, r3, #26
    61e6:	d01d      	beq.n	6224 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    61e8:	0798      	lsls	r0, r3, #30
    61ea:	d503      	bpl.n	61f4 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    61ec:	2302      	movs	r3, #2
    61ee:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    61f0:	3318      	adds	r3, #24
    61f2:	e7e7      	b.n	61c4 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    61f4:	0758      	lsls	r0, r3, #29
    61f6:	d503      	bpl.n	6200 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    61f8:	2304      	movs	r3, #4
    61fa:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    61fc:	331a      	adds	r3, #26
    61fe:	e7e1      	b.n	61c4 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    6200:	07d8      	lsls	r0, r3, #31
    6202:	d503      	bpl.n	620c <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    6204:	2301      	movs	r3, #1
    6206:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    6208:	3312      	adds	r3, #18
    620a:	e7db      	b.n	61c4 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    620c:	06d8      	lsls	r0, r3, #27
    620e:	d503      	bpl.n	6218 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    6210:	2310      	movs	r3, #16
    6212:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    6214:	3332      	adds	r3, #50	; 0x32
    6216:	e7d5      	b.n	61c4 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    6218:	069b      	lsls	r3, r3, #26
    621a:	d503      	bpl.n	6224 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    621c:	2320      	movs	r3, #32
    621e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    6220:	3321      	adds	r3, #33	; 0x21
    6222:	e7cf      	b.n	61c4 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    6224:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    6226:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    6228:	2300      	movs	r3, #0
    622a:	e7cb      	b.n	61c4 <usart_read_wait+0x8>

0000622c <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    622c:	b5f0      	push	{r4, r5, r6, r7, lr}
    622e:	46ce      	mov	lr, r9
    6230:	4647      	mov	r7, r8
    6232:	b580      	push	{r7, lr}
    6234:	b083      	sub	sp, #12
    6236:	0005      	movs	r5, r0
    6238:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    623a:	2017      	movs	r0, #23
	if (length == 0) {
    623c:	2a00      	cmp	r2, #0
    623e:	d104      	bne.n	624a <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    6240:	b003      	add	sp, #12
    6242:	bc0c      	pop	{r2, r3}
    6244:	4690      	mov	r8, r2
    6246:	4699      	mov	r9, r3
    6248:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
    624a:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
    624c:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
    624e:	2b00      	cmp	r3, #0
    6250:	d0f6      	beq.n	6240 <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
    6252:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    6254:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    6256:	2b00      	cmp	r3, #0
    6258:	d1fc      	bne.n	6254 <usart_write_buffer_wait+0x28>
	while (length--) {
    625a:	3a01      	subs	r2, #1
    625c:	b293      	uxth	r3, r2
    625e:	4699      	mov	r9, r3
    6260:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    6262:	2701      	movs	r7, #1
	while (length--) {
    6264:	4b1f      	ldr	r3, [pc, #124]	; (62e4 <usart_write_buffer_wait+0xb8>)
    6266:	4698      	mov	r8, r3
    6268:	e011      	b.n	628e <usart_write_buffer_wait+0x62>
		uint16_t data_to_send = tx_data[tx_pos++];
    626a:	1c73      	adds	r3, r6, #1
    626c:	b29b      	uxth	r3, r3
    626e:	9a01      	ldr	r2, [sp, #4]
    6270:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    6272:	796a      	ldrb	r2, [r5, #5]
    6274:	2a01      	cmp	r2, #1
    6276:	d017      	beq.n	62a8 <usart_write_buffer_wait+0x7c>
		uint16_t data_to_send = tx_data[tx_pos++];
    6278:	b289      	uxth	r1, r1
    627a:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
    627c:	0028      	movs	r0, r5
    627e:	4b1a      	ldr	r3, [pc, #104]	; (62e8 <usart_write_buffer_wait+0xbc>)
    6280:	4798      	blx	r3
	while (length--) {
    6282:	464b      	mov	r3, r9
    6284:	3b01      	subs	r3, #1
    6286:	b29b      	uxth	r3, r3
    6288:	4699      	mov	r9, r3
    628a:	4543      	cmp	r3, r8
    628c:	d013      	beq.n	62b6 <usart_write_buffer_wait+0x8a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    628e:	7e23      	ldrb	r3, [r4, #24]
    6290:	423b      	tst	r3, r7
    6292:	d1ea      	bne.n	626a <usart_write_buffer_wait+0x3e>
    6294:	4b13      	ldr	r3, [pc, #76]	; (62e4 <usart_write_buffer_wait+0xb8>)
    6296:	7e22      	ldrb	r2, [r4, #24]
    6298:	423a      	tst	r2, r7
    629a:	d1e6      	bne.n	626a <usart_write_buffer_wait+0x3e>
			} else if (i == USART_TIMEOUT) {
    629c:	2b01      	cmp	r3, #1
    629e:	d019      	beq.n	62d4 <usart_write_buffer_wait+0xa8>
    62a0:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    62a2:	2b00      	cmp	r3, #0
    62a4:	d1f7      	bne.n	6296 <usart_write_buffer_wait+0x6a>
    62a6:	e7e0      	b.n	626a <usart_write_buffer_wait+0x3e>
			data_to_send |= (tx_data[tx_pos++] << 8);
    62a8:	3602      	adds	r6, #2
    62aa:	b2b6      	uxth	r6, r6
    62ac:	9a01      	ldr	r2, [sp, #4]
    62ae:	5cd3      	ldrb	r3, [r2, r3]
    62b0:	021b      	lsls	r3, r3, #8
    62b2:	4319      	orrs	r1, r3
    62b4:	e7e2      	b.n	627c <usart_write_buffer_wait+0x50>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    62b6:	7e23      	ldrb	r3, [r4, #24]
    62b8:	079b      	lsls	r3, r3, #30
    62ba:	d40d      	bmi.n	62d8 <usart_write_buffer_wait+0xac>
    62bc:	4b09      	ldr	r3, [pc, #36]	; (62e4 <usart_write_buffer_wait+0xb8>)
    62be:	2102      	movs	r1, #2
    62c0:	7e22      	ldrb	r2, [r4, #24]
    62c2:	420a      	tst	r2, r1
    62c4:	d10a      	bne.n	62dc <usart_write_buffer_wait+0xb0>
		} else if (i == USART_TIMEOUT) {
    62c6:	2b01      	cmp	r3, #1
    62c8:	d00a      	beq.n	62e0 <usart_write_buffer_wait+0xb4>
    62ca:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    62cc:	2b00      	cmp	r3, #0
    62ce:	d1f7      	bne.n	62c0 <usart_write_buffer_wait+0x94>
	return STATUS_OK;
    62d0:	2000      	movs	r0, #0
    62d2:	e7b5      	b.n	6240 <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
    62d4:	2012      	movs	r0, #18
    62d6:	e7b3      	b.n	6240 <usart_write_buffer_wait+0x14>
	return STATUS_OK;
    62d8:	2000      	movs	r0, #0
    62da:	e7b1      	b.n	6240 <usart_write_buffer_wait+0x14>
    62dc:	2000      	movs	r0, #0
    62de:	e7af      	b.n	6240 <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
    62e0:	2012      	movs	r0, #18
    62e2:	e7ad      	b.n	6240 <usart_write_buffer_wait+0x14>
    62e4:	0000ffff 	.word	0x0000ffff
    62e8:	00006191 	.word	0x00006191

000062ec <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    62ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    62ee:	46d6      	mov	lr, sl
    62f0:	b500      	push	{lr}
    62f2:	b084      	sub	sp, #16
    62f4:	0004      	movs	r4, r0
    62f6:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    62f8:	2017      	movs	r0, #23
	if (length == 0) {
    62fa:	2a00      	cmp	r2, #0
    62fc:	d103      	bne.n	6306 <usart_read_buffer_wait+0x1a>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    62fe:	b004      	add	sp, #16
    6300:	bc04      	pop	{r2}
    6302:	4692      	mov	sl, r2
    6304:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    6306:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    6308:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    630a:	2b00      	cmp	r3, #0
    630c:	d0f7      	beq.n	62fe <usart_read_buffer_wait+0x12>
	SercomUsart *const usart_hw = &(module->hw->USART);
    630e:	6826      	ldr	r6, [r4, #0]
	while (length--) {
    6310:	3a01      	subs	r2, #1
    6312:	b293      	uxth	r3, r2
    6314:	469a      	mov	sl, r3
    6316:	2500      	movs	r5, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    6318:	2704      	movs	r7, #4
    631a:	e019      	b.n	6350 <usart_read_buffer_wait+0x64>
		uint16_t received_data = 0;
    631c:	2300      	movs	r3, #0
    631e:	aa02      	add	r2, sp, #8
    6320:	80d3      	strh	r3, [r2, #6]
		retval = usart_read_wait(module, &received_data);
    6322:	1d91      	adds	r1, r2, #6
    6324:	0020      	movs	r0, r4
    6326:	4b15      	ldr	r3, [pc, #84]	; (637c <usart_read_buffer_wait+0x90>)
    6328:	4798      	blx	r3
		if (retval != STATUS_OK) {
    632a:	2800      	cmp	r0, #0
    632c:	d1e7      	bne.n	62fe <usart_read_buffer_wait+0x12>
		rx_data[rx_pos++] = received_data;
    632e:	1c69      	adds	r1, r5, #1
    6330:	b289      	uxth	r1, r1
    6332:	ab02      	add	r3, sp, #8
    6334:	88db      	ldrh	r3, [r3, #6]
    6336:	9a01      	ldr	r2, [sp, #4]
    6338:	5553      	strb	r3, [r2, r5]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    633a:	7962      	ldrb	r2, [r4, #5]
    633c:	2a01      	cmp	r2, #1
    633e:	d014      	beq.n	636a <usart_read_buffer_wait+0x7e>
		rx_data[rx_pos++] = received_data;
    6340:	000d      	movs	r5, r1
	while (length--) {
    6342:	4653      	mov	r3, sl
    6344:	3b01      	subs	r3, #1
    6346:	b29b      	uxth	r3, r3
    6348:	469a      	mov	sl, r3
    634a:	4b0d      	ldr	r3, [pc, #52]	; (6380 <usart_read_buffer_wait+0x94>)
    634c:	459a      	cmp	sl, r3
    634e:	d0d6      	beq.n	62fe <usart_read_buffer_wait+0x12>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    6350:	7e33      	ldrb	r3, [r6, #24]
    6352:	423b      	tst	r3, r7
    6354:	d1e2      	bne.n	631c <usart_read_buffer_wait+0x30>
    6356:	4b0a      	ldr	r3, [pc, #40]	; (6380 <usart_read_buffer_wait+0x94>)
    6358:	7e32      	ldrb	r2, [r6, #24]
    635a:	423a      	tst	r2, r7
    635c:	d1de      	bne.n	631c <usart_read_buffer_wait+0x30>
			} else if (i == USART_TIMEOUT) {
    635e:	2b01      	cmp	r3, #1
    6360:	d009      	beq.n	6376 <usart_read_buffer_wait+0x8a>
    6362:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    6364:	2b00      	cmp	r3, #0
    6366:	d1f7      	bne.n	6358 <usart_read_buffer_wait+0x6c>
    6368:	e7d8      	b.n	631c <usart_read_buffer_wait+0x30>
			rx_data[rx_pos++] = (received_data >> 8);
    636a:	3502      	adds	r5, #2
    636c:	b2ad      	uxth	r5, r5
    636e:	0a1b      	lsrs	r3, r3, #8
    6370:	9a01      	ldr	r2, [sp, #4]
    6372:	5453      	strb	r3, [r2, r1]
    6374:	e7e5      	b.n	6342 <usart_read_buffer_wait+0x56>
				return STATUS_ERR_TIMEOUT;
    6376:	2012      	movs	r0, #18
    6378:	e7c1      	b.n	62fe <usart_read_buffer_wait+0x12>
    637a:	46c0      	nop			; (mov r8, r8)
    637c:	000061bd 	.word	0x000061bd
    6380:	0000ffff 	.word	0x0000ffff

00006384 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    6384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    6386:	0080      	lsls	r0, r0, #2
    6388:	4b62      	ldr	r3, [pc, #392]	; (6514 <_usart_interrupt_handler+0x190>)
    638a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    638c:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    638e:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    6390:	2b00      	cmp	r3, #0
    6392:	d1fc      	bne.n	638e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    6394:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    6396:	7da6      	ldrb	r6, [r4, #22]
    6398:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    639a:	2330      	movs	r3, #48	; 0x30
    639c:	5ceb      	ldrb	r3, [r5, r3]
    639e:	2231      	movs	r2, #49	; 0x31
    63a0:	5caf      	ldrb	r7, [r5, r2]
    63a2:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    63a4:	07f3      	lsls	r3, r6, #31
    63a6:	d522      	bpl.n	63ee <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    63a8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    63aa:	b29b      	uxth	r3, r3
    63ac:	2b00      	cmp	r3, #0
    63ae:	d01c      	beq.n	63ea <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    63b0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    63b2:	7813      	ldrb	r3, [r2, #0]
    63b4:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    63b6:	1c51      	adds	r1, r2, #1
    63b8:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    63ba:	7969      	ldrb	r1, [r5, #5]
    63bc:	2901      	cmp	r1, #1
    63be:	d00e      	beq.n	63de <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    63c0:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    63c2:	05db      	lsls	r3, r3, #23
    63c4:	0ddb      	lsrs	r3, r3, #23
    63c6:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    63c8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    63ca:	3b01      	subs	r3, #1
    63cc:	b29b      	uxth	r3, r3
    63ce:	85eb      	strh	r3, [r5, #46]	; 0x2e
    63d0:	2b00      	cmp	r3, #0
    63d2:	d10c      	bne.n	63ee <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    63d4:	3301      	adds	r3, #1
    63d6:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    63d8:	3301      	adds	r3, #1
    63da:	75a3      	strb	r3, [r4, #22]
    63dc:	e007      	b.n	63ee <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    63de:	7851      	ldrb	r1, [r2, #1]
    63e0:	0209      	lsls	r1, r1, #8
    63e2:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    63e4:	3202      	adds	r2, #2
    63e6:	62aa      	str	r2, [r5, #40]	; 0x28
    63e8:	e7eb      	b.n	63c2 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    63ea:	2301      	movs	r3, #1
    63ec:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    63ee:	07b3      	lsls	r3, r6, #30
    63f0:	d506      	bpl.n	6400 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    63f2:	2302      	movs	r3, #2
    63f4:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    63f6:	2200      	movs	r2, #0
    63f8:	3331      	adds	r3, #49	; 0x31
    63fa:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    63fc:	07fb      	lsls	r3, r7, #31
    63fe:	d41a      	bmi.n	6436 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    6400:	0773      	lsls	r3, r6, #29
    6402:	d565      	bpl.n	64d0 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    6404:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    6406:	b29b      	uxth	r3, r3
    6408:	2b00      	cmp	r3, #0
    640a:	d05f      	beq.n	64cc <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    640c:	8b63      	ldrh	r3, [r4, #26]
    640e:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    6410:	071a      	lsls	r2, r3, #28
    6412:	d414      	bmi.n	643e <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    6414:	223f      	movs	r2, #63	; 0x3f
    6416:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    6418:	2b00      	cmp	r3, #0
    641a:	d034      	beq.n	6486 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    641c:	079a      	lsls	r2, r3, #30
    641e:	d511      	bpl.n	6444 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    6420:	221a      	movs	r2, #26
    6422:	2332      	movs	r3, #50	; 0x32
    6424:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    6426:	3b30      	subs	r3, #48	; 0x30
    6428:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    642a:	077b      	lsls	r3, r7, #29
    642c:	d550      	bpl.n	64d0 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    642e:	0028      	movs	r0, r5
    6430:	696b      	ldr	r3, [r5, #20]
    6432:	4798      	blx	r3
    6434:	e04c      	b.n	64d0 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    6436:	0028      	movs	r0, r5
    6438:	68eb      	ldr	r3, [r5, #12]
    643a:	4798      	blx	r3
    643c:	e7e0      	b.n	6400 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    643e:	2237      	movs	r2, #55	; 0x37
    6440:	4013      	ands	r3, r2
    6442:	e7e9      	b.n	6418 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    6444:	075a      	lsls	r2, r3, #29
    6446:	d505      	bpl.n	6454 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    6448:	221e      	movs	r2, #30
    644a:	2332      	movs	r3, #50	; 0x32
    644c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    644e:	3b2e      	subs	r3, #46	; 0x2e
    6450:	8363      	strh	r3, [r4, #26]
    6452:	e7ea      	b.n	642a <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    6454:	07da      	lsls	r2, r3, #31
    6456:	d505      	bpl.n	6464 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    6458:	2213      	movs	r2, #19
    645a:	2332      	movs	r3, #50	; 0x32
    645c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    645e:	3b31      	subs	r3, #49	; 0x31
    6460:	8363      	strh	r3, [r4, #26]
    6462:	e7e2      	b.n	642a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    6464:	06da      	lsls	r2, r3, #27
    6466:	d505      	bpl.n	6474 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    6468:	2242      	movs	r2, #66	; 0x42
    646a:	2332      	movs	r3, #50	; 0x32
    646c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    646e:	3b22      	subs	r3, #34	; 0x22
    6470:	8363      	strh	r3, [r4, #26]
    6472:	e7da      	b.n	642a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    6474:	2220      	movs	r2, #32
    6476:	421a      	tst	r2, r3
    6478:	d0d7      	beq.n	642a <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    647a:	3221      	adds	r2, #33	; 0x21
    647c:	2332      	movs	r3, #50	; 0x32
    647e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    6480:	3b12      	subs	r3, #18
    6482:	8363      	strh	r3, [r4, #26]
    6484:	e7d1      	b.n	642a <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    6486:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    6488:	05db      	lsls	r3, r3, #23
    648a:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    648c:	b2da      	uxtb	r2, r3
    648e:	6a69      	ldr	r1, [r5, #36]	; 0x24
    6490:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    6492:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    6494:	1c51      	adds	r1, r2, #1
    6496:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    6498:	7969      	ldrb	r1, [r5, #5]
    649a:	2901      	cmp	r1, #1
    649c:	d010      	beq.n	64c0 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    649e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    64a0:	3b01      	subs	r3, #1
    64a2:	b29b      	uxth	r3, r3
    64a4:	85ab      	strh	r3, [r5, #44]	; 0x2c
    64a6:	2b00      	cmp	r3, #0
    64a8:	d112      	bne.n	64d0 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    64aa:	3304      	adds	r3, #4
    64ac:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    64ae:	2200      	movs	r2, #0
    64b0:	332e      	adds	r3, #46	; 0x2e
    64b2:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    64b4:	07bb      	lsls	r3, r7, #30
    64b6:	d50b      	bpl.n	64d0 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    64b8:	0028      	movs	r0, r5
    64ba:	692b      	ldr	r3, [r5, #16]
    64bc:	4798      	blx	r3
    64be:	e007      	b.n	64d0 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    64c0:	0a1b      	lsrs	r3, r3, #8
    64c2:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    64c4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    64c6:	3301      	adds	r3, #1
    64c8:	626b      	str	r3, [r5, #36]	; 0x24
    64ca:	e7e8      	b.n	649e <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    64cc:	2304      	movs	r3, #4
    64ce:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    64d0:	06f3      	lsls	r3, r6, #27
    64d2:	d504      	bpl.n	64de <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    64d4:	2310      	movs	r3, #16
    64d6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    64d8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    64da:	06fb      	lsls	r3, r7, #27
    64dc:	d40e      	bmi.n	64fc <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    64de:	06b3      	lsls	r3, r6, #26
    64e0:	d504      	bpl.n	64ec <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    64e2:	2320      	movs	r3, #32
    64e4:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    64e6:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    64e8:	073b      	lsls	r3, r7, #28
    64ea:	d40b      	bmi.n	6504 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    64ec:	0733      	lsls	r3, r6, #28
    64ee:	d504      	bpl.n	64fa <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    64f0:	2308      	movs	r3, #8
    64f2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    64f4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    64f6:	06bb      	lsls	r3, r7, #26
    64f8:	d408      	bmi.n	650c <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    64fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    64fc:	0028      	movs	r0, r5
    64fe:	69eb      	ldr	r3, [r5, #28]
    6500:	4798      	blx	r3
    6502:	e7ec      	b.n	64de <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    6504:	0028      	movs	r0, r5
    6506:	69ab      	ldr	r3, [r5, #24]
    6508:	4798      	blx	r3
    650a:	e7ef      	b.n	64ec <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    650c:	6a2b      	ldr	r3, [r5, #32]
    650e:	0028      	movs	r0, r5
    6510:	4798      	blx	r3
}
    6512:	e7f2      	b.n	64fa <_usart_interrupt_handler+0x176>
    6514:	20002148 	.word	0x20002148

00006518 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    6518:	b510      	push	{r4, lr}
	switch (clock_source) {
    651a:	2808      	cmp	r0, #8
    651c:	d803      	bhi.n	6526 <system_clock_source_get_hz+0xe>
    651e:	0080      	lsls	r0, r0, #2
    6520:	4b1c      	ldr	r3, [pc, #112]	; (6594 <system_clock_source_get_hz+0x7c>)
    6522:	581b      	ldr	r3, [r3, r0]
    6524:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    6526:	2000      	movs	r0, #0
    6528:	e032      	b.n	6590 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    652a:	4b1b      	ldr	r3, [pc, #108]	; (6598 <system_clock_source_get_hz+0x80>)
    652c:	6918      	ldr	r0, [r3, #16]
    652e:	e02f      	b.n	6590 <system_clock_source_get_hz+0x78>
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    6530:	4b1a      	ldr	r3, [pc, #104]	; (659c <system_clock_source_get_hz+0x84>)
    6532:	7d18      	ldrb	r0, [r3, #20]
    6534:	0700      	lsls	r0, r0, #28
    6536:	0f80      	lsrs	r0, r0, #30
    6538:	1c43      	adds	r3, r0, #1
    653a:	4819      	ldr	r0, [pc, #100]	; (65a0 <system_clock_source_get_hz+0x88>)
    653c:	4358      	muls	r0, r3
    653e:	e027      	b.n	6590 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    6540:	4b15      	ldr	r3, [pc, #84]	; (6598 <system_clock_source_get_hz+0x80>)
    6542:	6958      	ldr	r0, [r3, #20]
    6544:	e024      	b.n	6590 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    6546:	4b14      	ldr	r3, [pc, #80]	; (6598 <system_clock_source_get_hz+0x80>)
    6548:	681b      	ldr	r3, [r3, #0]
			return 0;
    654a:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    654c:	079b      	lsls	r3, r3, #30
    654e:	d51f      	bpl.n	6590 <system_clock_source_get_hz+0x78>
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    6550:	4912      	ldr	r1, [pc, #72]	; (659c <system_clock_source_get_hz+0x84>)
    6552:	2280      	movs	r2, #128	; 0x80
    6554:	0052      	lsls	r2, r2, #1
    6556:	68cb      	ldr	r3, [r1, #12]
    6558:	4213      	tst	r3, r2
    655a:	d0fc      	beq.n	6556 <system_clock_source_get_hz+0x3e>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
    655c:	4b0e      	ldr	r3, [pc, #56]	; (6598 <system_clock_source_get_hz+0x80>)
    655e:	681b      	ldr	r3, [r3, #0]
    6560:	075b      	lsls	r3, r3, #29
    6562:	d401      	bmi.n	6568 <system_clock_source_get_hz+0x50>
		return 48000000UL;
    6564:	480f      	ldr	r0, [pc, #60]	; (65a4 <system_clock_source_get_hz+0x8c>)
    6566:	e013      	b.n	6590 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    6568:	2000      	movs	r0, #0
    656a:	4b0f      	ldr	r3, [pc, #60]	; (65a8 <system_clock_source_get_hz+0x90>)
    656c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    656e:	4b0a      	ldr	r3, [pc, #40]	; (6598 <system_clock_source_get_hz+0x80>)
    6570:	689b      	ldr	r3, [r3, #8]
    6572:	041b      	lsls	r3, r3, #16
    6574:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    6576:	4358      	muls	r0, r3
    6578:	e00a      	b.n	6590 <system_clock_source_get_hz+0x78>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    657a:	2328      	movs	r3, #40	; 0x28
    657c:	4a07      	ldr	r2, [pc, #28]	; (659c <system_clock_source_get_hz+0x84>)
    657e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    6580:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    6582:	079b      	lsls	r3, r3, #30
    6584:	d504      	bpl.n	6590 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    6586:	4b04      	ldr	r3, [pc, #16]	; (6598 <system_clock_source_get_hz+0x80>)
    6588:	68d8      	ldr	r0, [r3, #12]
    658a:	e001      	b.n	6590 <system_clock_source_get_hz+0x78>
		return 32768UL;
    658c:	2080      	movs	r0, #128	; 0x80
    658e:	0200      	lsls	r0, r0, #8
	}
}
    6590:	bd10      	pop	{r4, pc}
    6592:	46c0      	nop			; (mov r8, r8)
    6594:	000192c4 	.word	0x000192c4
    6598:	200002e4 	.word	0x200002e4
    659c:	40000c00 	.word	0x40000c00
    65a0:	003d0900 	.word	0x003d0900
    65a4:	02dc6c00 	.word	0x02dc6c00
    65a8:	00006b71 	.word	0x00006b71

000065ac <system_clock_source_osc16m_set_config>:
 *
 * \param[in] config  OSC16M configuration structure containing the new config
 */
void system_clock_source_osc16m_set_config(
		struct system_clock_source_osc16m_config *const config)
{
    65ac:	b570      	push	{r4, r5, r6, lr}
	OSCCTRL_OSC16MCTRL_Type temp = OSCCTRL->OSC16MCTRL;
    65ae:	4c0b      	ldr	r4, [pc, #44]	; (65dc <system_clock_source_osc16m_set_config+0x30>)
    65b0:	7d23      	ldrb	r3, [r4, #20]

	/* Use temporary struct to reduce register access */
	temp.bit.FSEL    = config->fsel;
	temp.bit.ONDEMAND = config->on_demand;
    65b2:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;
    65b4:	7846      	ldrb	r6, [r0, #1]

	OSCCTRL->OSC16MCTRL = temp;
    65b6:	7802      	ldrb	r2, [r0, #0]
    65b8:	2103      	movs	r1, #3
    65ba:	4011      	ands	r1, r2
    65bc:	0089      	lsls	r1, r1, #2
    65be:	220c      	movs	r2, #12
    65c0:	4393      	bics	r3, r2
    65c2:	430b      	orrs	r3, r1
    65c4:	3a0b      	subs	r2, #11
    65c6:	4032      	ands	r2, r6
    65c8:	0192      	lsls	r2, r2, #6
    65ca:	2140      	movs	r1, #64	; 0x40
    65cc:	438b      	bics	r3, r1
    65ce:	4313      	orrs	r3, r2
    65d0:	01ed      	lsls	r5, r5, #7
    65d2:	227f      	movs	r2, #127	; 0x7f
    65d4:	4013      	ands	r3, r2
    65d6:	432b      	orrs	r3, r5
    65d8:	7523      	strb	r3, [r4, #20]
}
    65da:	bd70      	pop	{r4, r5, r6, pc}
    65dc:	40000c00 	.word	0x40000c00

000065e0 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    65e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    65e2:	46d6      	mov	lr, sl
    65e4:	464f      	mov	r7, r9
    65e6:	4646      	mov	r6, r8
    65e8:	b5c0      	push	{r6, r7, lr}
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
    65ea:	4b20      	ldr	r3, [pc, #128]	; (666c <system_clock_source_xosc32k_set_config+0x8c>)
    65ec:	469a      	mov	sl, r3
    65ee:	695b      	ldr	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    65f0:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    65f2:	7801      	ldrb	r1, [r0, #0]
    65f4:	424c      	negs	r4, r1
    65f6:	414c      	adcs	r4, r1
    65f8:	46a1      	mov	r9, r4
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
    65fa:	7881      	ldrb	r1, [r0, #2]
    65fc:	468c      	mov	ip, r1
	temp.bit.EN32K = config->enable_32khz_output;
    65fe:	78c1      	ldrb	r1, [r0, #3]
    6600:	4688      	mov	r8, r1

	temp.bit.ONDEMAND = config->on_demand;
    6602:	7a46      	ldrb	r6, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    6604:	7a07      	ldrb	r7, [r0, #8]
	temp.bit.WRTLOCK  = config->write_once;
    6606:	7a84      	ldrb	r4, [r0, #10]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    6608:	6840      	ldr	r0, [r0, #4]
    660a:	4919      	ldr	r1, [pc, #100]	; (6670 <system_clock_source_xosc32k_set_config+0x90>)
    660c:	6148      	str	r0, [r1, #20]

	OSC32KCTRL->XOSC32K = temp;
    660e:	2101      	movs	r1, #1
    6610:	4648      	mov	r0, r9
    6612:	0080      	lsls	r0, r0, #2
    6614:	2204      	movs	r2, #4
    6616:	4393      	bics	r3, r2
    6618:	4303      	orrs	r3, r0
    661a:	4640      	mov	r0, r8
    661c:	4008      	ands	r0, r1
    661e:	00c0      	lsls	r0, r0, #3
    6620:	3204      	adds	r2, #4
    6622:	4393      	bics	r3, r2
    6624:	4303      	orrs	r3, r0
    6626:	4660      	mov	r0, ip
    6628:	4008      	ands	r0, r1
    662a:	0100      	lsls	r0, r0, #4
    662c:	3208      	adds	r2, #8
    662e:	4393      	bics	r3, r2
    6630:	4303      	orrs	r3, r0
    6632:	400f      	ands	r7, r1
    6634:	01bf      	lsls	r7, r7, #6
    6636:	2040      	movs	r0, #64	; 0x40
    6638:	4383      	bics	r3, r0
    663a:	433b      	orrs	r3, r7
    663c:	400e      	ands	r6, r1
    663e:	01f6      	lsls	r6, r6, #7
    6640:	3040      	adds	r0, #64	; 0x40
    6642:	4383      	bics	r3, r0
    6644:	4333      	orrs	r3, r6
    6646:	3879      	subs	r0, #121	; 0x79
    6648:	4005      	ands	r5, r0
    664a:	022d      	lsls	r5, r5, #8
    664c:	4809      	ldr	r0, [pc, #36]	; (6674 <system_clock_source_xosc32k_set_config+0x94>)
    664e:	4003      	ands	r3, r0
    6650:	432b      	orrs	r3, r5
    6652:	4021      	ands	r1, r4
    6654:	0309      	lsls	r1, r1, #12
    6656:	4808      	ldr	r0, [pc, #32]	; (6678 <system_clock_source_xosc32k_set_config+0x98>)
    6658:	4003      	ands	r3, r0
    665a:	430b      	orrs	r3, r1
    665c:	4652      	mov	r2, sl
    665e:	6153      	str	r3, [r2, #20]
}
    6660:	bc1c      	pop	{r2, r3, r4}
    6662:	4690      	mov	r8, r2
    6664:	4699      	mov	r9, r3
    6666:	46a2      	mov	sl, r4
    6668:	bdf0      	pop	{r4, r5, r6, r7, pc}
    666a:	46c0      	nop			; (mov r8, r8)
    666c:	40001000 	.word	0x40001000
    6670:	200002e4 	.word	0x200002e4
    6674:	fffff8ff 	.word	0xfffff8ff
    6678:	ffffefff 	.word	0xffffefff

0000667c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    667c:	2808      	cmp	r0, #8
    667e:	d803      	bhi.n	6688 <system_clock_source_enable+0xc>
    6680:	0080      	lsls	r0, r0, #2
    6682:	4b29      	ldr	r3, [pc, #164]	; (6728 <system_clock_source_enable+0xac>)
    6684:	581b      	ldr	r3, [r3, r0]
    6686:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    6688:	2017      	movs	r0, #23
    668a:	e04b      	b.n	6724 <system_clock_source_enable+0xa8>
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
    668c:	4a27      	ldr	r2, [pc, #156]	; (672c <system_clock_source_enable+0xb0>)
    668e:	7d13      	ldrb	r3, [r2, #20]
    6690:	2102      	movs	r1, #2
    6692:	430b      	orrs	r3, r1
    6694:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    6696:	2000      	movs	r0, #0
    6698:	e044      	b.n	6724 <system_clock_source_enable+0xa8>
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    669a:	4a25      	ldr	r2, [pc, #148]	; (6730 <system_clock_source_enable+0xb4>)
    669c:	6993      	ldr	r3, [r2, #24]
    669e:	2102      	movs	r1, #2
    66a0:	430b      	orrs	r3, r1
    66a2:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    66a4:	2000      	movs	r0, #0
		break;
    66a6:	e03d      	b.n	6724 <system_clock_source_enable+0xa8>
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    66a8:	4a20      	ldr	r2, [pc, #128]	; (672c <system_clock_source_enable+0xb0>)
    66aa:	8a13      	ldrh	r3, [r2, #16]
    66ac:	2102      	movs	r1, #2
    66ae:	430b      	orrs	r3, r1
    66b0:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    66b2:	2000      	movs	r0, #0
		break;
    66b4:	e036      	b.n	6724 <system_clock_source_enable+0xa8>
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    66b6:	4a1e      	ldr	r2, [pc, #120]	; (6730 <system_clock_source_enable+0xb4>)
    66b8:	6953      	ldr	r3, [r2, #20]
    66ba:	2102      	movs	r1, #2
    66bc:	430b      	orrs	r3, r1
    66be:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    66c0:	2000      	movs	r0, #0
		break;
    66c2:	e02f      	b.n	6724 <system_clock_source_enable+0xa8>
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
    66c4:	491b      	ldr	r1, [pc, #108]	; (6734 <system_clock_source_enable+0xb8>)
    66c6:	680b      	ldr	r3, [r1, #0]
    66c8:	2202      	movs	r2, #2
    66ca:	4313      	orrs	r3, r2
    66cc:	600b      	str	r3, [r1, #0]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    66ce:	4b17      	ldr	r3, [pc, #92]	; (672c <system_clock_source_enable+0xb0>)
    66d0:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    66d2:	0019      	movs	r1, r3
    66d4:	32fe      	adds	r2, #254	; 0xfe
    66d6:	68cb      	ldr	r3, [r1, #12]
    66d8:	4213      	tst	r3, r2
    66da:	d0fc      	beq.n	66d6 <system_clock_source_enable+0x5a>
	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    66dc:	4a15      	ldr	r2, [pc, #84]	; (6734 <system_clock_source_enable+0xb8>)
    66de:	6891      	ldr	r1, [r2, #8]
    66e0:	4b12      	ldr	r3, [pc, #72]	; (672c <system_clock_source_enable+0xb0>)
    66e2:	6219      	str	r1, [r3, #32]
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    66e4:	6852      	ldr	r2, [r2, #4]
    66e6:	61da      	str	r2, [r3, #28]
	OSCCTRL->DFLLCTRL.reg = 0;
    66e8:	2200      	movs	r2, #0
    66ea:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    66ec:	0019      	movs	r1, r3
    66ee:	3201      	adds	r2, #1
    66f0:	32ff      	adds	r2, #255	; 0xff
    66f2:	68cb      	ldr	r3, [r1, #12]
    66f4:	4213      	tst	r3, r2
    66f6:	d0fc      	beq.n	66f2 <system_clock_source_enable+0x76>
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    66f8:	4b0e      	ldr	r3, [pc, #56]	; (6734 <system_clock_source_enable+0xb8>)
    66fa:	681b      	ldr	r3, [r3, #0]
    66fc:	b29b      	uxth	r3, r3
    66fe:	4a0b      	ldr	r2, [pc, #44]	; (672c <system_clock_source_enable+0xb0>)
    6700:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    6702:	2000      	movs	r0, #0
    6704:	e00e      	b.n	6724 <system_clock_source_enable+0xa8>
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    6706:	4909      	ldr	r1, [pc, #36]	; (672c <system_clock_source_enable+0xb0>)
    6708:	2228      	movs	r2, #40	; 0x28
    670a:	5c8b      	ldrb	r3, [r1, r2]
    670c:	2002      	movs	r0, #2
    670e:	4303      	orrs	r3, r0
    6710:	548b      	strb	r3, [r1, r2]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    6712:	0008      	movs	r0, r1
    6714:	2138      	movs	r1, #56	; 0x38
    6716:	3a26      	subs	r2, #38	; 0x26
    6718:	5c43      	ldrb	r3, [r0, r1]
    671a:	4213      	tst	r3, r2
    671c:	d1fc      	bne.n	6718 <system_clock_source_enable+0x9c>
	return STATUS_OK;
    671e:	2000      	movs	r0, #0
    6720:	e000      	b.n	6724 <system_clock_source_enable+0xa8>
		return STATUS_OK;
    6722:	2000      	movs	r0, #0
}
    6724:	4770      	bx	lr
    6726:	46c0      	nop			; (mov r8, r8)
    6728:	000192e8 	.word	0x000192e8
    672c:	40000c00 	.word	0x40000c00
    6730:	40001000 	.word	0x40001000
    6734:	200002e4 	.word	0x200002e4

00006738 <system_clock_source_disable>:
 *                                 given
 */
enum status_code system_clock_source_disable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    6738:	2808      	cmp	r0, #8
    673a:	d832      	bhi.n	67a2 <system_clock_source_disable+0x6a>
    673c:	0080      	lsls	r0, r0, #2
    673e:	4b1a      	ldr	r3, [pc, #104]	; (67a8 <system_clock_source_disable+0x70>)
    6740:	581b      	ldr	r3, [r3, r0]
    6742:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
    6744:	4a19      	ldr	r2, [pc, #100]	; (67ac <system_clock_source_disable+0x74>)
    6746:	7d13      	ldrb	r3, [r2, #20]
    6748:	2102      	movs	r1, #2
    674a:	438b      	bics	r3, r1
    674c:	7513      	strb	r3, [r2, #20]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    674e:	2000      	movs	r0, #0
}
    6750:	4770      	bx	lr
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
    6752:	4a17      	ldr	r2, [pc, #92]	; (67b0 <system_clock_source_disable+0x78>)
    6754:	6993      	ldr	r3, [r2, #24]
    6756:	2102      	movs	r1, #2
    6758:	438b      	bics	r3, r1
    675a:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
    675c:	2000      	movs	r0, #0
		break;
    675e:	e7f7      	b.n	6750 <system_clock_source_disable+0x18>
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
    6760:	4a12      	ldr	r2, [pc, #72]	; (67ac <system_clock_source_disable+0x74>)
    6762:	8a13      	ldrh	r3, [r2, #16]
    6764:	2102      	movs	r1, #2
    6766:	438b      	bics	r3, r1
    6768:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    676a:	2000      	movs	r0, #0
		break;
    676c:	e7f0      	b.n	6750 <system_clock_source_disable+0x18>
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
    676e:	4a10      	ldr	r2, [pc, #64]	; (67b0 <system_clock_source_disable+0x78>)
    6770:	6953      	ldr	r3, [r2, #20]
    6772:	2102      	movs	r1, #2
    6774:	438b      	bics	r3, r1
    6776:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    6778:	2000      	movs	r0, #0
		break;
    677a:	e7e9      	b.n	6750 <system_clock_source_disable+0x18>
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
    677c:	4b0d      	ldr	r3, [pc, #52]	; (67b4 <system_clock_source_disable+0x7c>)
    677e:	681a      	ldr	r2, [r3, #0]
    6780:	2102      	movs	r1, #2
    6782:	438a      	bics	r2, r1
    6784:	601a      	str	r2, [r3, #0]
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    6786:	681b      	ldr	r3, [r3, #0]
    6788:	b29b      	uxth	r3, r3
    678a:	4a08      	ldr	r2, [pc, #32]	; (67ac <system_clock_source_disable+0x74>)
    678c:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    678e:	2000      	movs	r0, #0
		break;
    6790:	e7de      	b.n	6750 <system_clock_source_disable+0x18>
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
    6792:	4906      	ldr	r1, [pc, #24]	; (67ac <system_clock_source_disable+0x74>)
    6794:	2228      	movs	r2, #40	; 0x28
    6796:	5c8b      	ldrb	r3, [r1, r2]
    6798:	2002      	movs	r0, #2
    679a:	4383      	bics	r3, r0
    679c:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    679e:	2000      	movs	r0, #0
		break;
    67a0:	e7d6      	b.n	6750 <system_clock_source_disable+0x18>
		return STATUS_ERR_INVALID_ARG;
    67a2:	2017      	movs	r0, #23
    67a4:	e7d4      	b.n	6750 <system_clock_source_disable+0x18>
    67a6:	46c0      	nop			; (mov r8, r8)
    67a8:	0001930c 	.word	0x0001930c
    67ac:	40000c00 	.word	0x40000c00
    67b0:	40001000 	.word	0x40001000
    67b4:	200002e4 	.word	0x200002e4

000067b8 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    67b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    67ba:	46d6      	mov	lr, sl
    67bc:	464f      	mov	r7, r9
    67be:	4646      	mov	r6, r8
    67c0:	b5c0      	push	{r6, r7, lr}
    67c2:	b088      	sub	sp, #32
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    67c4:	2280      	movs	r2, #128	; 0x80
    67c6:	0052      	lsls	r2, r2, #1
    67c8:	4b56      	ldr	r3, [pc, #344]	; (6924 <system_clock_init+0x16c>)
    67ca:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    67cc:	3afd      	subs	r2, #253	; 0xfd
    67ce:	4b56      	ldr	r3, [pc, #344]	; (6928 <system_clock_init+0x170>)
    67d0:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    67d2:	4a56      	ldr	r2, [pc, #344]	; (692c <system_clock_init+0x174>)
    67d4:	6853      	ldr	r3, [r2, #4]
    67d6:	211e      	movs	r1, #30
    67d8:	438b      	bics	r3, r1
    67da:	391a      	subs	r1, #26
    67dc:	430b      	orrs	r3, r1
    67de:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    67e0:	2380      	movs	r3, #128	; 0x80
    67e2:	05db      	lsls	r3, r3, #23
    67e4:	789b      	ldrb	r3, [r3, #2]
    67e6:	2b02      	cmp	r3, #2
    67e8:	d00f      	beq.n	680a <system_clock_init+0x52>
		return STATUS_OK;
	}

#if SAML22 || SAML21XXXB || SAMR34J || SAMR35J || (WLR089U0)
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    67ea:	2380      	movs	r3, #128	; 0x80
    67ec:	05db      	lsls	r3, r3, #23
    67ee:	789b      	ldrb	r3, [r3, #2]
    67f0:	b25b      	sxtb	r3, r3
    67f2:	2b00      	cmp	r3, #0
    67f4:	db09      	blt.n	680a <system_clock_init+0x52>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    67f6:	2380      	movs	r3, #128	; 0x80
    67f8:	05db      	lsls	r3, r3, #23
    67fa:	2201      	movs	r2, #1
    67fc:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    67fe:	3201      	adds	r2, #1
    6800:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    6802:	001a      	movs	r2, r3
    6804:	7993      	ldrb	r3, [r2, #6]
    6806:	2b00      	cmp	r3, #0
    6808:	d0fc      	beq.n	6804 <system_clock_init+0x4c>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    680a:	a805      	add	r0, sp, #20
    680c:	2300      	movs	r3, #0
    680e:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    6810:	2280      	movs	r2, #128	; 0x80
    6812:	0212      	lsls	r2, r2, #8
    6814:	6042      	str	r2, [r0, #4]
	config->enable_1khz_output  = false;
    6816:	7083      	strb	r3, [r0, #2]
	config->enable_32khz_output = true;
    6818:	2201      	movs	r2, #1
    681a:	70c2      	strb	r2, [r0, #3]
	config->run_in_standby      = false;
    681c:	7203      	strb	r3, [r0, #8]
	config->write_once          = false;
    681e:	7283      	strb	r3, [r0, #10]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    6820:	3203      	adds	r2, #3
    6822:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    6824:	7243      	strb	r3, [r0, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    6826:	4b42      	ldr	r3, [pc, #264]	; (6930 <system_clock_init+0x178>)
    6828:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    682a:	2005      	movs	r0, #5
    682c:	4b41      	ldr	r3, [pc, #260]	; (6934 <system_clock_init+0x17c>)
    682e:	4798      	blx	r3
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    6830:	4941      	ldr	r1, [pc, #260]	; (6938 <system_clock_init+0x180>)
    6832:	2201      	movs	r2, #1
    6834:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    6836:	421a      	tst	r2, r3
    6838:	d0fc      	beq.n	6834 <system_clock_init+0x7c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		OSC32KCTRL->XOSC32K.bit.ONDEMAND = 1;
    683a:	4a3f      	ldr	r2, [pc, #252]	; (6938 <system_clock_init+0x180>)
    683c:	6953      	ldr	r3, [r2, #20]
    683e:	2180      	movs	r1, #128	; 0x80
    6840:	430b      	orrs	r3, r1
    6842:	6153      	str	r3, [r2, #20]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    6844:	a902      	add	r1, sp, #8
    6846:	2501      	movs	r5, #1
    6848:	604d      	str	r5, [r1, #4]
	config->high_when_disabled = false;
    684a:	2400      	movs	r4, #0
    684c:	704c      	strb	r4, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    684e:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    6850:	724c      	strb	r4, [r1, #9]
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_ULP32K;
    6852:	2303      	movs	r3, #3
    6854:	700b      	strb	r3, [r1, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    6856:	2000      	movs	r0, #0
    6858:	4b38      	ldr	r3, [pc, #224]	; (693c <system_clock_init+0x184>)
    685a:	4798      	blx	r3
	system_clock_source_disable(SYSTEM_CLOCK_SOURCE_OSC16M);
    685c:	2006      	movs	r0, #6
    685e:	4b38      	ldr	r3, [pc, #224]	; (6940 <system_clock_init+0x188>)
    6860:	4798      	blx	r3
	config->run_in_standby  = false;
    6862:	a801      	add	r0, sp, #4
    6864:	7044      	strb	r4, [r0, #1]
	osc16m_conf.fsel      		= CONF_CLOCK_OSC16M_FREQ_SEL;
    6866:	7005      	strb	r5, [r0, #0]
	osc16m_conf.on_demand       = 0;
    6868:	7084      	strb	r4, [r0, #2]
	system_clock_source_osc16m_set_config(&osc16m_conf);
    686a:	4b36      	ldr	r3, [pc, #216]	; (6944 <system_clock_init+0x18c>)
    686c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
    686e:	2006      	movs	r0, #6
    6870:	4b30      	ldr	r3, [pc, #192]	; (6934 <system_clock_init+0x17c>)
    6872:	4798      	blx	r3
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    6874:	492b      	ldr	r1, [pc, #172]	; (6924 <system_clock_init+0x16c>)
    6876:	2210      	movs	r2, #16
    6878:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_OSC16M));
    687a:	421a      	tst	r2, r3
    687c:	d0fc      	beq.n	6878 <system_clock_init+0xc0>
	config->division_factor    = 1;
    687e:	ac02      	add	r4, sp, #8
    6880:	2601      	movs	r6, #1
    6882:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    6884:	2500      	movs	r5, #0
    6886:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    6888:	2306      	movs	r3, #6
    688a:	469a      	mov	sl, r3
    688c:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    688e:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    6890:	7265      	strb	r5, [r4, #9]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    6892:	0021      	movs	r1, r4
    6894:	2000      	movs	r0, #0
    6896:	4b29      	ldr	r3, [pc, #164]	; (693c <system_clock_init+0x184>)
    6898:	4698      	mov	r8, r3
    689a:	4798      	blx	r3
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    689c:	4b2a      	ldr	r3, [pc, #168]	; (6948 <system_clock_init+0x190>)
    689e:	4798      	blx	r3
	config->division_factor    = 1;
    68a0:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    68a2:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    68a4:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    68a6:	2305      	movs	r3, #5
    68a8:	7023      	strb	r3, [r4, #0]
    68aa:	7226      	strb	r6, [r4, #8]
    68ac:	0021      	movs	r1, r4
    68ae:	2001      	movs	r0, #1
    68b0:	47c0      	blx	r8
    68b2:	2001      	movs	r0, #1
    68b4:	4b25      	ldr	r3, [pc, #148]	; (694c <system_clock_init+0x194>)
    68b6:	4699      	mov	r9, r3
    68b8:	4798      	blx	r3
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    68ba:	4f25      	ldr	r7, [pc, #148]	; (6950 <system_clock_init+0x198>)
    68bc:	71be      	strb	r6, [r7, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    68be:	717e      	strb	r6, [r7, #5]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    68c0:	713e      	strb	r6, [r7, #4]
	config->division_factor    = 1;
    68c2:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    68c4:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    68c6:	4653      	mov	r3, sl
    68c8:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    68ca:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    68cc:	7265      	strb	r5, [r4, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    68ce:	0021      	movs	r1, r4
    68d0:	2000      	movs	r0, #0
    68d2:	47c0      	blx	r8
    68d4:	2000      	movs	r0, #0
    68d6:	47c8      	blx	r9
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    68d8:	2000      	movs	r0, #0
    68da:	4b1e      	ldr	r3, [pc, #120]	; (6954 <system_clock_init+0x19c>)
    68dc:	4798      	blx	r3
    68de:	7939      	ldrb	r1, [r7, #4]
    68e0:	b2c9      	uxtb	r1, r1
    68e2:	4b1d      	ldr	r3, [pc, #116]	; (6958 <system_clock_init+0x1a0>)
    68e4:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
    68e6:	4b1d      	ldr	r3, [pc, #116]	; (695c <system_clock_init+0x1a4>)
    68e8:	4298      	cmp	r0, r3
    68ea:	d814      	bhi.n	6916 <system_clock_init+0x15e>
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    68ec:	2380      	movs	r3, #128	; 0x80
    68ee:	05db      	lsls	r3, r3, #23
    68f0:	789b      	ldrb	r3, [r3, #2]
    68f2:	2b00      	cmp	r3, #0
    68f4:	d00f      	beq.n	6916 <system_clock_init+0x15e>
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    68f6:	2380      	movs	r3, #128	; 0x80
    68f8:	05db      	lsls	r3, r3, #23
    68fa:	789b      	ldrb	r3, [r3, #2]
    68fc:	b25b      	sxtb	r3, r3
    68fe:	2b00      	cmp	r3, #0
    6900:	db09      	blt.n	6916 <system_clock_init+0x15e>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    6902:	2380      	movs	r3, #128	; 0x80
    6904:	05db      	lsls	r3, r3, #23
    6906:	2201      	movs	r2, #1
    6908:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
    690a:	2200      	movs	r2, #0
    690c:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg) {
    690e:	001a      	movs	r2, r3
    6910:	7993      	ldrb	r3, [r2, #6]
    6912:	2b00      	cmp	r3, #0
    6914:	d0fc      	beq.n	6910 <system_clock_init+0x158>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    6916:	b008      	add	sp, #32
    6918:	bc1c      	pop	{r2, r3, r4}
    691a:	4690      	mov	r8, r2
    691c:	4699      	mov	r9, r3
    691e:	46a2      	mov	sl, r4
    6920:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6922:	46c0      	nop			; (mov r8, r8)
    6924:	40000c00 	.word	0x40000c00
    6928:	40001400 	.word	0x40001400
    692c:	41004000 	.word	0x41004000
    6930:	000065e1 	.word	0x000065e1
    6934:	0000667d 	.word	0x0000667d
    6938:	40001000 	.word	0x40001000
    693c:	00006985 	.word	0x00006985
    6940:	00006739 	.word	0x00006739
    6944:	000065ad 	.word	0x000065ad
    6948:	00006961 	.word	0x00006961
    694c:	00006a31 	.word	0x00006a31
    6950:	40000400 	.word	0x40000400
    6954:	00006a71 	.word	0x00006a71
    6958:	00014609 	.word	0x00014609
    695c:	00b71b00 	.word	0x00b71b00

00006960 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    6960:	4a06      	ldr	r2, [pc, #24]	; (697c <system_gclk_init+0x1c>)
    6962:	6953      	ldr	r3, [r2, #20]
    6964:	2140      	movs	r1, #64	; 0x40
    6966:	430b      	orrs	r3, r1
    6968:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    696a:	2201      	movs	r2, #1
    696c:	4b04      	ldr	r3, [pc, #16]	; (6980 <system_gclk_init+0x20>)
    696e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    6970:	0019      	movs	r1, r3
    6972:	780b      	ldrb	r3, [r1, #0]
    6974:	4213      	tst	r3, r2
    6976:	d1fc      	bne.n	6972 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    6978:	4770      	bx	lr
    697a:	46c0      	nop			; (mov r8, r8)
    697c:	40000400 	.word	0x40000400
    6980:	40001800 	.word	0x40001800

00006984 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    6984:	b570      	push	{r4, r5, r6, lr}
    6986:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    6988:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    698a:	784b      	ldrb	r3, [r1, #1]
    698c:	2b00      	cmp	r3, #0
    698e:	d002      	beq.n	6996 <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    6990:	2380      	movs	r3, #128	; 0x80
    6992:	00db      	lsls	r3, r3, #3
    6994:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    6996:	7a4b      	ldrb	r3, [r1, #9]
    6998:	2b00      	cmp	r3, #0
    699a:	d002      	beq.n	69a2 <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    699c:	2380      	movs	r3, #128	; 0x80
    699e:	011b      	lsls	r3, r3, #4
    69a0:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    69a2:	6848      	ldr	r0, [r1, #4]
    69a4:	2801      	cmp	r0, #1
    69a6:	d90f      	bls.n	69c8 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    69a8:	1e43      	subs	r3, r0, #1
    69aa:	4218      	tst	r0, r3
    69ac:	d131      	bne.n	6a12 <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    69ae:	2802      	cmp	r0, #2
    69b0:	d92d      	bls.n	6a0e <system_gclk_gen_set_config+0x8a>
    69b2:	2302      	movs	r3, #2
    69b4:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    69b6:	3201      	adds	r2, #1
						mask <<= 1) {
    69b8:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    69ba:	4298      	cmp	r0, r3
    69bc:	d8fb      	bhi.n	69b6 <system_gclk_gen_set_config+0x32>
    69be:	2380      	movs	r3, #128	; 0x80
    69c0:	015b      	lsls	r3, r3, #5
    69c2:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    69c4:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    69c6:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    69c8:	7a0b      	ldrb	r3, [r1, #8]
    69ca:	2b00      	cmp	r3, #0
    69cc:	d002      	beq.n	69d4 <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    69ce:	2380      	movs	r3, #128	; 0x80
    69d0:	019b      	lsls	r3, r3, #6
    69d2:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    69d4:	2604      	movs	r6, #4
    69d6:	40a6      	lsls	r6, r4
    69d8:	4911      	ldr	r1, [pc, #68]	; (6a20 <system_gclk_gen_set_config+0x9c>)
    69da:	4a12      	ldr	r2, [pc, #72]	; (6a24 <system_gclk_gen_set_config+0xa0>)
    69dc:	684b      	ldr	r3, [r1, #4]
    69de:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    69e0:	421e      	tst	r6, r3
    69e2:	d1fb      	bne.n	69dc <system_gclk_gen_set_config+0x58>
	cpu_irq_enter_critical();
    69e4:	4b10      	ldr	r3, [pc, #64]	; (6a28 <system_gclk_gen_set_config+0xa4>)
    69e6:	4798      	blx	r3
    69e8:	00a4      	lsls	r4, r4, #2
    69ea:	4b0d      	ldr	r3, [pc, #52]	; (6a20 <system_gclk_gen_set_config+0x9c>)
    69ec:	469c      	mov	ip, r3
    69ee:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    69f0:	6a22      	ldr	r2, [r4, #32]
    69f2:	2380      	movs	r3, #128	; 0x80
    69f4:	005b      	lsls	r3, r3, #1
    69f6:	401a      	ands	r2, r3
    69f8:	432a      	orrs	r2, r5
    69fa:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    69fc:	4661      	mov	r1, ip
    69fe:	4a09      	ldr	r2, [pc, #36]	; (6a24 <system_gclk_gen_set_config+0xa0>)
    6a00:	684b      	ldr	r3, [r1, #4]
    6a02:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    6a04:	421e      	tst	r6, r3
    6a06:	d1fb      	bne.n	6a00 <system_gclk_gen_set_config+0x7c>
	cpu_irq_leave_critical();
    6a08:	4b08      	ldr	r3, [pc, #32]	; (6a2c <system_gclk_gen_set_config+0xa8>)
    6a0a:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    6a0c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    6a0e:	2200      	movs	r2, #0
    6a10:	e7d5      	b.n	69be <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    6a12:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    6a14:	2380      	movs	r3, #128	; 0x80
    6a16:	009b      	lsls	r3, r3, #2
    6a18:	4318      	orrs	r0, r3
    6a1a:	4305      	orrs	r5, r0
    6a1c:	e7d4      	b.n	69c8 <system_gclk_gen_set_config+0x44>
    6a1e:	46c0      	nop			; (mov r8, r8)
    6a20:	40001800 	.word	0x40001800
    6a24:	000007fc 	.word	0x000007fc
    6a28:	00004b21 	.word	0x00004b21
    6a2c:	00004b61 	.word	0x00004b61

00006a30 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    6a30:	b510      	push	{r4, lr}
    6a32:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    6a34:	2204      	movs	r2, #4
    6a36:	4082      	lsls	r2, r0
    6a38:	4809      	ldr	r0, [pc, #36]	; (6a60 <system_gclk_gen_enable+0x30>)
    6a3a:	490a      	ldr	r1, [pc, #40]	; (6a64 <system_gclk_gen_enable+0x34>)
    6a3c:	6843      	ldr	r3, [r0, #4]
    6a3e:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    6a40:	421a      	tst	r2, r3
    6a42:	d1fb      	bne.n	6a3c <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    6a44:	4b08      	ldr	r3, [pc, #32]	; (6a68 <system_gclk_gen_enable+0x38>)
    6a46:	4798      	blx	r3
    6a48:	00a4      	lsls	r4, r4, #2
    6a4a:	4b05      	ldr	r3, [pc, #20]	; (6a60 <system_gclk_gen_enable+0x30>)
    6a4c:	469c      	mov	ip, r3
    6a4e:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    6a50:	6a22      	ldr	r2, [r4, #32]
    6a52:	2380      	movs	r3, #128	; 0x80
    6a54:	005b      	lsls	r3, r3, #1
    6a56:	4313      	orrs	r3, r2
    6a58:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    6a5a:	4b04      	ldr	r3, [pc, #16]	; (6a6c <system_gclk_gen_enable+0x3c>)
    6a5c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    6a5e:	bd10      	pop	{r4, pc}
    6a60:	40001800 	.word	0x40001800
    6a64:	000007fc 	.word	0x000007fc
    6a68:	00004b21 	.word	0x00004b21
    6a6c:	00004b61 	.word	0x00004b61

00006a70 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    6a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6a72:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    6a74:	2204      	movs	r2, #4
    6a76:	4082      	lsls	r2, r0
    6a78:	4812      	ldr	r0, [pc, #72]	; (6ac4 <system_gclk_gen_get_hz+0x54>)
    6a7a:	4913      	ldr	r1, [pc, #76]	; (6ac8 <system_gclk_gen_get_hz+0x58>)
    6a7c:	6843      	ldr	r3, [r0, #4]
    6a7e:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    6a80:	421a      	tst	r2, r3
    6a82:	d1fb      	bne.n	6a7c <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    6a84:	4b11      	ldr	r3, [pc, #68]	; (6acc <system_gclk_gen_get_hz+0x5c>)
    6a86:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    6a88:	4f0e      	ldr	r7, [pc, #56]	; (6ac4 <system_gclk_gen_get_hz+0x54>)
    6a8a:	3408      	adds	r4, #8
    6a8c:	00a4      	lsls	r4, r4, #2
    6a8e:	59e0      	ldr	r0, [r4, r7]
    6a90:	0700      	lsls	r0, r0, #28
    6a92:	0f00      	lsrs	r0, r0, #28
	uint32_t gen_input_hz = system_clock_source_get_hz(
    6a94:	4b0e      	ldr	r3, [pc, #56]	; (6ad0 <system_gclk_gen_get_hz+0x60>)
    6a96:	4798      	blx	r3
    6a98:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    6a9a:	59e5      	ldr	r5, [r4, r7]
    6a9c:	04ed      	lsls	r5, r5, #19
    6a9e:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    6aa0:	59e4      	ldr	r4, [r4, r7]
    6aa2:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    6aa4:	4b0b      	ldr	r3, [pc, #44]	; (6ad4 <system_gclk_gen_get_hz+0x64>)
    6aa6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    6aa8:	2d00      	cmp	r5, #0
    6aaa:	d107      	bne.n	6abc <system_gclk_gen_get_hz+0x4c>
    6aac:	2c01      	cmp	r4, #1
    6aae:	d907      	bls.n	6ac0 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    6ab0:	0021      	movs	r1, r4
    6ab2:	0030      	movs	r0, r6
    6ab4:	4b08      	ldr	r3, [pc, #32]	; (6ad8 <system_gclk_gen_get_hz+0x68>)
    6ab6:	4798      	blx	r3
    6ab8:	0006      	movs	r6, r0
    6aba:	e001      	b.n	6ac0 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    6abc:	3401      	adds	r4, #1
    6abe:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    6ac0:	0030      	movs	r0, r6
    6ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6ac4:	40001800 	.word	0x40001800
    6ac8:	000007fc 	.word	0x000007fc
    6acc:	00004b21 	.word	0x00004b21
    6ad0:	00006519 	.word	0x00006519
    6ad4:	00004b61 	.word	0x00004b61
    6ad8:	00014609 	.word	0x00014609

00006adc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    6adc:	b510      	push	{r4, lr}
    6ade:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    6ae0:	4b09      	ldr	r3, [pc, #36]	; (6b08 <system_gclk_chan_enable+0x2c>)
    6ae2:	4798      	blx	r3
    6ae4:	00a0      	lsls	r0, r4, #2
    6ae6:	4b09      	ldr	r3, [pc, #36]	; (6b0c <system_gclk_chan_enable+0x30>)
    6ae8:	469c      	mov	ip, r3
    6aea:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    6aec:	2280      	movs	r2, #128	; 0x80
    6aee:	5883      	ldr	r3, [r0, r2]
    6af0:	2140      	movs	r1, #64	; 0x40
    6af2:	430b      	orrs	r3, r1
    6af4:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    6af6:	3140      	adds	r1, #64	; 0x40
    6af8:	3a40      	subs	r2, #64	; 0x40
    6afa:	5843      	ldr	r3, [r0, r1]
    6afc:	421a      	tst	r2, r3
    6afe:	d0fc      	beq.n	6afa <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    6b00:	4b03      	ldr	r3, [pc, #12]	; (6b10 <system_gclk_chan_enable+0x34>)
    6b02:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    6b04:	bd10      	pop	{r4, pc}
    6b06:	46c0      	nop			; (mov r8, r8)
    6b08:	00004b21 	.word	0x00004b21
    6b0c:	40001800 	.word	0x40001800
    6b10:	00004b61 	.word	0x00004b61

00006b14 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    6b14:	b510      	push	{r4, lr}
    6b16:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    6b18:	4b09      	ldr	r3, [pc, #36]	; (6b40 <system_gclk_chan_disable+0x2c>)
    6b1a:	4798      	blx	r3
    6b1c:	00a0      	lsls	r0, r4, #2
    6b1e:	4b09      	ldr	r3, [pc, #36]	; (6b44 <system_gclk_chan_disable+0x30>)
    6b20:	469c      	mov	ip, r3
    6b22:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    6b24:	2280      	movs	r2, #128	; 0x80
    6b26:	5883      	ldr	r3, [r0, r2]
    6b28:	2140      	movs	r1, #64	; 0x40
    6b2a:	438b      	bics	r3, r1
    6b2c:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    6b2e:	3140      	adds	r1, #64	; 0x40
    6b30:	3a40      	subs	r2, #64	; 0x40
    6b32:	5843      	ldr	r3, [r0, r1]
    6b34:	421a      	tst	r2, r3
    6b36:	d1fc      	bne.n	6b32 <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    6b38:	4b03      	ldr	r3, [pc, #12]	; (6b48 <system_gclk_chan_disable+0x34>)
    6b3a:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    6b3c:	bd10      	pop	{r4, pc}
    6b3e:	46c0      	nop			; (mov r8, r8)
    6b40:	00004b21 	.word	0x00004b21
    6b44:	40001800 	.word	0x40001800
    6b48:	00004b61 	.word	0x00004b61

00006b4c <system_gclk_chan_set_config>:
{
    6b4c:	b570      	push	{r4, r5, r6, lr}
    6b4e:	0004      	movs	r4, r0
    6b50:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    6b52:	4b05      	ldr	r3, [pc, #20]	; (6b68 <system_gclk_chan_set_config+0x1c>)
    6b54:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    6b56:	782a      	ldrb	r2, [r5, #0]
    6b58:	230f      	movs	r3, #15
    6b5a:	4013      	ands	r3, r2
    6b5c:	3420      	adds	r4, #32
    6b5e:	00a4      	lsls	r4, r4, #2
    6b60:	4a02      	ldr	r2, [pc, #8]	; (6b6c <system_gclk_chan_set_config+0x20>)
    6b62:	50a3      	str	r3, [r4, r2]
}
    6b64:	bd70      	pop	{r4, r5, r6, pc}
    6b66:	46c0      	nop			; (mov r8, r8)
    6b68:	00006b15 	.word	0x00006b15
    6b6c:	40001800 	.word	0x40001800

00006b70 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    6b70:	b510      	push	{r4, lr}
    6b72:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    6b74:	4b06      	ldr	r3, [pc, #24]	; (6b90 <system_gclk_chan_get_hz+0x20>)
    6b76:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    6b78:	3420      	adds	r4, #32
    6b7a:	00a4      	lsls	r4, r4, #2
    6b7c:	4b05      	ldr	r3, [pc, #20]	; (6b94 <system_gclk_chan_get_hz+0x24>)
    6b7e:	58e4      	ldr	r4, [r4, r3]
    6b80:	0724      	lsls	r4, r4, #28
    6b82:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    6b84:	4b04      	ldr	r3, [pc, #16]	; (6b98 <system_gclk_chan_get_hz+0x28>)
    6b86:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    6b88:	0020      	movs	r0, r4
    6b8a:	4b04      	ldr	r3, [pc, #16]	; (6b9c <system_gclk_chan_get_hz+0x2c>)
    6b8c:	4798      	blx	r3
}
    6b8e:	bd10      	pop	{r4, pc}
    6b90:	00004b21 	.word	0x00004b21
    6b94:	40001800 	.word	0x40001800
    6b98:	00004b61 	.word	0x00004b61
    6b9c:	00006a71 	.word	0x00006a71

00006ba0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    6ba0:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    6ba2:	78d3      	ldrb	r3, [r2, #3]
    6ba4:	2b00      	cmp	r3, #0
    6ba6:	d135      	bne.n	6c14 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    6ba8:	7813      	ldrb	r3, [r2, #0]
    6baa:	2b80      	cmp	r3, #128	; 0x80
    6bac:	d029      	beq.n	6c02 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    6bae:	061b      	lsls	r3, r3, #24
    6bb0:	2480      	movs	r4, #128	; 0x80
    6bb2:	0264      	lsls	r4, r4, #9
    6bb4:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    6bb6:	7854      	ldrb	r4, [r2, #1]
    6bb8:	2502      	movs	r5, #2
    6bba:	43ac      	bics	r4, r5
    6bbc:	d106      	bne.n	6bcc <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    6bbe:	7894      	ldrb	r4, [r2, #2]
    6bc0:	2c00      	cmp	r4, #0
    6bc2:	d120      	bne.n	6c06 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    6bc4:	2480      	movs	r4, #128	; 0x80
    6bc6:	02a4      	lsls	r4, r4, #10
    6bc8:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    6bca:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6bcc:	7854      	ldrb	r4, [r2, #1]
    6bce:	3c01      	subs	r4, #1
    6bd0:	2c01      	cmp	r4, #1
    6bd2:	d91c      	bls.n	6c0e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    6bd4:	040d      	lsls	r5, r1, #16
    6bd6:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    6bd8:	24a0      	movs	r4, #160	; 0xa0
    6bda:	05e4      	lsls	r4, r4, #23
    6bdc:	432c      	orrs	r4, r5
    6bde:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6be0:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    6be2:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    6be4:	24d0      	movs	r4, #208	; 0xd0
    6be6:	0624      	lsls	r4, r4, #24
    6be8:	432c      	orrs	r4, r5
    6bea:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6bec:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    6bee:	78d4      	ldrb	r4, [r2, #3]
    6bf0:	2c00      	cmp	r4, #0
    6bf2:	d122      	bne.n	6c3a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    6bf4:	035b      	lsls	r3, r3, #13
    6bf6:	d51c      	bpl.n	6c32 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    6bf8:	7893      	ldrb	r3, [r2, #2]
    6bfa:	2b01      	cmp	r3, #1
    6bfc:	d01e      	beq.n	6c3c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    6bfe:	6141      	str	r1, [r0, #20]
    6c00:	e017      	b.n	6c32 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    6c02:	2300      	movs	r3, #0
    6c04:	e7d7      	b.n	6bb6 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    6c06:	24c0      	movs	r4, #192	; 0xc0
    6c08:	02e4      	lsls	r4, r4, #11
    6c0a:	4323      	orrs	r3, r4
    6c0c:	e7dd      	b.n	6bca <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    6c0e:	4c0d      	ldr	r4, [pc, #52]	; (6c44 <_system_pinmux_config+0xa4>)
    6c10:	4023      	ands	r3, r4
    6c12:	e7df      	b.n	6bd4 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    6c14:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    6c16:	040c      	lsls	r4, r1, #16
    6c18:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    6c1a:	23a0      	movs	r3, #160	; 0xa0
    6c1c:	05db      	lsls	r3, r3, #23
    6c1e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6c20:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    6c22:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    6c24:	23d0      	movs	r3, #208	; 0xd0
    6c26:	061b      	lsls	r3, r3, #24
    6c28:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6c2a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    6c2c:	78d3      	ldrb	r3, [r2, #3]
    6c2e:	2b00      	cmp	r3, #0
    6c30:	d103      	bne.n	6c3a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6c32:	7853      	ldrb	r3, [r2, #1]
    6c34:	3b01      	subs	r3, #1
    6c36:	2b01      	cmp	r3, #1
    6c38:	d902      	bls.n	6c40 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    6c3a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    6c3c:	6181      	str	r1, [r0, #24]
    6c3e:	e7f8      	b.n	6c32 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    6c40:	6081      	str	r1, [r0, #8]
}
    6c42:	e7fa      	b.n	6c3a <_system_pinmux_config+0x9a>
    6c44:	fffbffff 	.word	0xfffbffff

00006c48 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    6c48:	b510      	push	{r4, lr}
    6c4a:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    6c4c:	09c1      	lsrs	r1, r0, #7
		return NULL;
    6c4e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    6c50:	2900      	cmp	r1, #0
    6c52:	d104      	bne.n	6c5e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    6c54:	0943      	lsrs	r3, r0, #5
    6c56:	01db      	lsls	r3, r3, #7
    6c58:	4905      	ldr	r1, [pc, #20]	; (6c70 <system_pinmux_pin_set_config+0x28>)
    6c5a:	468c      	mov	ip, r1
    6c5c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    6c5e:	241f      	movs	r4, #31
    6c60:	4020      	ands	r0, r4
    6c62:	2101      	movs	r1, #1
    6c64:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    6c66:	0018      	movs	r0, r3
    6c68:	4b02      	ldr	r3, [pc, #8]	; (6c74 <system_pinmux_pin_set_config+0x2c>)
    6c6a:	4798      	blx	r3
}
    6c6c:	bd10      	pop	{r4, pc}
    6c6e:	46c0      	nop			; (mov r8, r8)
    6c70:	40002800 	.word	0x40002800
    6c74:	00006ba1 	.word	0x00006ba1

00006c78 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    6c78:	4770      	bx	lr
    6c7a:	Address 0x00006c7a is out of bounds.


00006c7c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    6c7c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    6c7e:	4b05      	ldr	r3, [pc, #20]	; (6c94 <system_init+0x18>)
    6c80:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    6c82:	4b05      	ldr	r3, [pc, #20]	; (6c98 <system_init+0x1c>)
    6c84:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    6c86:	4b05      	ldr	r3, [pc, #20]	; (6c9c <system_init+0x20>)
    6c88:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    6c8a:	4b05      	ldr	r3, [pc, #20]	; (6ca0 <system_init+0x24>)
    6c8c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    6c8e:	4b05      	ldr	r3, [pc, #20]	; (6ca4 <system_init+0x28>)
    6c90:	4798      	blx	r3
}
    6c92:	bd10      	pop	{r4, pc}
    6c94:	000067b9 	.word	0x000067b9
    6c98:	00004b91 	.word	0x00004b91
    6c9c:	00006c79 	.word	0x00006c79
    6ca0:	00004ebd 	.word	0x00004ebd
    6ca4:	00006c79 	.word	0x00006c79

00006ca8 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    6ca8:	1c93      	adds	r3, r2, #2
    6caa:	009b      	lsls	r3, r3, #2
    6cac:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    6cae:	2a02      	cmp	r2, #2
    6cb0:	d009      	beq.n	6cc6 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    6cb2:	2a03      	cmp	r2, #3
    6cb4:	d00c      	beq.n	6cd0 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    6cb6:	2301      	movs	r3, #1
    6cb8:	4093      	lsls	r3, r2
    6cba:	001a      	movs	r2, r3
    6cbc:	7e03      	ldrb	r3, [r0, #24]
    6cbe:	4313      	orrs	r3, r2
    6cc0:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    6cc2:	2000      	movs	r0, #0
    6cc4:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    6cc6:	7e03      	ldrb	r3, [r0, #24]
    6cc8:	2210      	movs	r2, #16
    6cca:	4313      	orrs	r3, r2
    6ccc:	7603      	strb	r3, [r0, #24]
    6cce:	e7f8      	b.n	6cc2 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    6cd0:	7e03      	ldrb	r3, [r0, #24]
    6cd2:	2220      	movs	r2, #32
    6cd4:	4313      	orrs	r3, r2
    6cd6:	7603      	strb	r3, [r0, #24]
    6cd8:	e7f3      	b.n	6cc2 <tc_register_callback+0x1a>
    6cda:	Address 0x00006cda is out of bounds.


00006cdc <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    6cdc:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    6cde:	0080      	lsls	r0, r0, #2
    6ce0:	4b16      	ldr	r3, [pc, #88]	; (6d3c <_tc_interrupt_handler+0x60>)
    6ce2:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    6ce4:	6823      	ldr	r3, [r4, #0]
    6ce6:	7a9d      	ldrb	r5, [r3, #10]
    6ce8:	7e22      	ldrb	r2, [r4, #24]
    6cea:	7e63      	ldrb	r3, [r4, #25]
    6cec:	4013      	ands	r3, r2
    6cee:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    6cf0:	07eb      	lsls	r3, r5, #31
    6cf2:	d406      	bmi.n	6d02 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    6cf4:	07ab      	lsls	r3, r5, #30
    6cf6:	d40b      	bmi.n	6d10 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    6cf8:	06eb      	lsls	r3, r5, #27
    6cfa:	d410      	bmi.n	6d1e <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    6cfc:	06ab      	lsls	r3, r5, #26
    6cfe:	d415      	bmi.n	6d2c <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    6d00:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    6d02:	0020      	movs	r0, r4
    6d04:	68a3      	ldr	r3, [r4, #8]
    6d06:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    6d08:	2301      	movs	r3, #1
    6d0a:	6822      	ldr	r2, [r4, #0]
    6d0c:	7293      	strb	r3, [r2, #10]
    6d0e:	e7f1      	b.n	6cf4 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    6d10:	0020      	movs	r0, r4
    6d12:	68e3      	ldr	r3, [r4, #12]
    6d14:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    6d16:	2302      	movs	r3, #2
    6d18:	6822      	ldr	r2, [r4, #0]
    6d1a:	7293      	strb	r3, [r2, #10]
    6d1c:	e7ec      	b.n	6cf8 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    6d1e:	0020      	movs	r0, r4
    6d20:	6923      	ldr	r3, [r4, #16]
    6d22:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    6d24:	2310      	movs	r3, #16
    6d26:	6822      	ldr	r2, [r4, #0]
    6d28:	7293      	strb	r3, [r2, #10]
    6d2a:	e7e7      	b.n	6cfc <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    6d2c:	0020      	movs	r0, r4
    6d2e:	6963      	ldr	r3, [r4, #20]
    6d30:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    6d32:	6823      	ldr	r3, [r4, #0]
    6d34:	2220      	movs	r2, #32
    6d36:	729a      	strb	r2, [r3, #10]
}
    6d38:	e7e2      	b.n	6d00 <_tc_interrupt_handler+0x24>
    6d3a:	46c0      	nop			; (mov r8, r8)
    6d3c:	20002160 	.word	0x20002160

00006d40 <TC0_Handler>:
	_TC_INTERRUPT_HANDLER(0,0)
    6d40:	b510      	push	{r4, lr}
    6d42:	2000      	movs	r0, #0
    6d44:	4b01      	ldr	r3, [pc, #4]	; (6d4c <TC0_Handler+0xc>)
    6d46:	4798      	blx	r3
    6d48:	bd10      	pop	{r4, pc}
    6d4a:	46c0      	nop			; (mov r8, r8)
    6d4c:	00006cdd 	.word	0x00006cdd

00006d50 <TC1_Handler>:
	_TC_INTERRUPT_HANDLER(1,1)
    6d50:	b510      	push	{r4, lr}
    6d52:	2001      	movs	r0, #1
    6d54:	4b01      	ldr	r3, [pc, #4]	; (6d5c <TC1_Handler+0xc>)
    6d56:	4798      	blx	r3
    6d58:	bd10      	pop	{r4, pc}
    6d5a:	46c0      	nop			; (mov r8, r8)
    6d5c:	00006cdd 	.word	0x00006cdd

00006d60 <TC4_Handler>:
	_TC_INTERRUPT_HANDLER(4,2)
    6d60:	b510      	push	{r4, lr}
    6d62:	2002      	movs	r0, #2
    6d64:	4b01      	ldr	r3, [pc, #4]	; (6d6c <TC4_Handler+0xc>)
    6d66:	4798      	blx	r3
    6d68:	bd10      	pop	{r4, pc}
    6d6a:	46c0      	nop			; (mov r8, r8)
    6d6c:	00006cdd 	.word	0x00006cdd

00006d70 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    6d70:	b530      	push	{r4, r5, lr}
    6d72:	b087      	sub	sp, #28
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    6d74:	a901      	add	r1, sp, #4
    6d76:	4b0c      	ldr	r3, [pc, #48]	; (6da8 <_tc_get_inst_index+0x38>)
    6d78:	000a      	movs	r2, r1
    6d7a:	cb32      	ldmia	r3!, {r1, r4, r5}
    6d7c:	c232      	stmia	r2!, {r1, r4, r5}
    6d7e:	cb12      	ldmia	r3!, {r1, r4}
    6d80:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    6d82:	9b01      	ldr	r3, [sp, #4]
    6d84:	4298      	cmp	r0, r3
    6d86:	d00b      	beq.n	6da0 <_tc_get_inst_index+0x30>
    6d88:	2301      	movs	r3, #1
    6d8a:	a901      	add	r1, sp, #4
    6d8c:	009a      	lsls	r2, r3, #2
    6d8e:	5852      	ldr	r2, [r2, r1]
    6d90:	4282      	cmp	r2, r0
    6d92:	d006      	beq.n	6da2 <_tc_get_inst_index+0x32>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    6d94:	3301      	adds	r3, #1
    6d96:	2b05      	cmp	r3, #5
    6d98:	d1f8      	bne.n	6d8c <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    6d9a:	2000      	movs	r0, #0
}
    6d9c:	b007      	add	sp, #28
    6d9e:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    6da0:	2300      	movs	r3, #0
			return i;
    6da2:	b2d8      	uxtb	r0, r3
    6da4:	e7fa      	b.n	6d9c <_tc_get_inst_index+0x2c>
    6da6:	46c0      	nop			; (mov r8, r8)
    6da8:	00019358 	.word	0x00019358

00006dac <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    6dac:	b5f0      	push	{r4, r5, r6, r7, lr}
    6dae:	46c6      	mov	lr, r8
    6db0:	b500      	push	{lr}
    6db2:	b08e      	sub	sp, #56	; 0x38
    6db4:	0004      	movs	r4, r0
    6db6:	000d      	movs	r5, r1
    6db8:	0016      	movs	r6, r2
	uint32_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    6dba:	0008      	movs	r0, r1
    6dbc:	4bae      	ldr	r3, [pc, #696]	; (7078 <tc_init+0x2cc>)
    6dbe:	4798      	blx	r3
    6dc0:	4680      	mov	r8, r0
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC2,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC3,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC4};
#elif (SAML21J) || (SAMR34J) || (SAMR35J) || (WLR089U0)
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC2_GCLK_ID, TC3_GCLK_ID, TC4_GCLK_ID};
    6dc2:	ab0c      	add	r3, sp, #48	; 0x30
    6dc4:	221b      	movs	r2, #27
    6dc6:	701a      	strb	r2, [r3, #0]
    6dc8:	705a      	strb	r2, [r3, #1]
    6dca:	3201      	adds	r2, #1
    6dcc:	709a      	strb	r2, [r3, #2]
    6dce:	70da      	strb	r2, [r3, #3]
    6dd0:	3201      	adds	r2, #1
    6dd2:	711a      	strb	r2, [r3, #4]
	/* Array of MCLK APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
    6dd4:	a902      	add	r1, sp, #8
    6dd6:	4ba9      	ldr	r3, [pc, #676]	; (707c <tc_init+0x2d0>)
    6dd8:	3314      	adds	r3, #20
    6dda:	000a      	movs	r2, r1
    6ddc:	cb83      	ldmia	r3!, {r0, r1, r7}
    6dde:	c283      	stmia	r2!, {r0, r1, r7}
    6de0:	cb83      	ldmia	r3!, {r0, r1, r7}
    6de2:	c283      	stmia	r2!, {r0, r1, r7}
    6de4:	cb83      	ldmia	r3!, {r0, r1, r7}
    6de6:	c283      	stmia	r2!, {r0, r1, r7}
    6de8:	681b      	ldr	r3, [r3, #0]
    6dea:	6013      	str	r3, [r2, #0]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    6dec:	2300      	movs	r3, #0
    6dee:	60a3      	str	r3, [r4, #8]
    6df0:	60e3      	str	r3, [r4, #12]
    6df2:	6123      	str	r3, [r4, #16]
    6df4:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    6df6:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    6df8:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    6dfa:	4643      	mov	r3, r8
    6dfc:	009a      	lsls	r2, r3, #2
    6dfe:	4ba0      	ldr	r3, [pc, #640]	; (7080 <tc_init+0x2d4>)
    6e00:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    6e02:	6025      	str	r5, [r4, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    6e04:	2334      	movs	r3, #52	; 0x34
    6e06:	5cf3      	ldrb	r3, [r6, r3]
    6e08:	76a3      	strb	r3, [r4, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    6e0a:	78f3      	ldrb	r3, [r6, #3]
    6e0c:	2b08      	cmp	r3, #8
    6e0e:	d008      	beq.n	6e22 <tc_init+0x76>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    6e10:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    6e12:	682b      	ldr	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    6e14:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    6e16:	07db      	lsls	r3, r3, #31
    6e18:	d508      	bpl.n	6e2c <tc_init+0x80>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    6e1a:	b00e      	add	sp, #56	; 0x38
    6e1c:	bc04      	pop	{r2}
    6e1e:	4690      	mov	r8, r2
    6e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    6e22:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    6e24:	4642      	mov	r2, r8
    6e26:	07d2      	lsls	r2, r2, #31
    6e28:	d4f7      	bmi.n	6e1a <tc_init+0x6e>
    6e2a:	e7f1      	b.n	6e10 <tc_init+0x64>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    6e2c:	7aeb      	ldrb	r3, [r5, #11]
		return STATUS_ERR_DENIED;
    6e2e:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    6e30:	079b      	lsls	r3, r3, #30
    6e32:	d4f2      	bmi.n	6e1a <tc_init+0x6e>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    6e34:	682b      	ldr	r3, [r5, #0]
    6e36:	079b      	lsls	r3, r3, #30
    6e38:	d4ef      	bmi.n	6e1a <tc_init+0x6e>
	if (config->pwm_channel[0].enabled) {
    6e3a:	7c33      	ldrb	r3, [r6, #16]
    6e3c:	2b00      	cmp	r3, #0
    6e3e:	d112      	bne.n	6e66 <tc_init+0xba>
	if (config->pwm_channel[1].enabled) {
    6e40:	7f33      	ldrb	r3, [r6, #28]
    6e42:	2b00      	cmp	r3, #0
    6e44:	d11b      	bne.n	6e7e <tc_init+0xd2>
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
    6e46:	4643      	mov	r3, r8
    6e48:	005a      	lsls	r2, r3, #1
    6e4a:	a902      	add	r1, sp, #8
    6e4c:	1c53      	adds	r3, r2, #1
    6e4e:	009b      	lsls	r3, r3, #2
    6e50:	5858      	ldr	r0, [r3, r1]
    6e52:	4643      	mov	r3, r8
    6e54:	00db      	lsls	r3, r3, #3
    6e56:	585b      	ldr	r3, [r3, r1]
	switch (bus) {
    6e58:	b2d9      	uxtb	r1, r3
    6e5a:	2904      	cmp	r1, #4
    6e5c:	d823      	bhi.n	6ea6 <tc_init+0xfa>
    6e5e:	008b      	lsls	r3, r1, #2
    6e60:	4988      	ldr	r1, [pc, #544]	; (7084 <tc_init+0x2d8>)
    6e62:	58cb      	ldr	r3, [r1, r3]
    6e64:	469f      	mov	pc, r3
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6e66:	a901      	add	r1, sp, #4
    6e68:	2301      	movs	r3, #1
    6e6a:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    6e6c:	2200      	movs	r2, #0
    6e6e:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    6e70:	7e32      	ldrb	r2, [r6, #24]
    6e72:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    6e74:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    6e76:	7d30      	ldrb	r0, [r6, #20]
    6e78:	4b83      	ldr	r3, [pc, #524]	; (7088 <tc_init+0x2dc>)
    6e7a:	4798      	blx	r3
    6e7c:	e7e0      	b.n	6e40 <tc_init+0x94>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6e7e:	a901      	add	r1, sp, #4
    6e80:	2301      	movs	r3, #1
    6e82:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    6e84:	2200      	movs	r2, #0
    6e86:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    6e88:	3224      	adds	r2, #36	; 0x24
    6e8a:	18b2      	adds	r2, r6, r2
    6e8c:	7812      	ldrb	r2, [r2, #0]
    6e8e:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    6e90:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    6e92:	331f      	adds	r3, #31
    6e94:	18f3      	adds	r3, r6, r3
    6e96:	7818      	ldrb	r0, [r3, #0]
    6e98:	4b7b      	ldr	r3, [pc, #492]	; (7088 <tc_init+0x2dc>)
    6e9a:	4798      	blx	r3
    6e9c:	e7d3      	b.n	6e46 <tc_init+0x9a>
			MCLK->APBAMASK.reg |= mask;
    6e9e:	497b      	ldr	r1, [pc, #492]	; (708c <tc_init+0x2e0>)
    6ea0:	694b      	ldr	r3, [r1, #20]
    6ea2:	4318      	orrs	r0, r3
    6ea4:	6148      	str	r0, [r1, #20]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    6ea6:	78f3      	ldrb	r3, [r6, #3]
    6ea8:	2b08      	cmp	r3, #8
    6eaa:	d100      	bne.n	6eae <tc_init+0x102>
    6eac:	e086      	b.n	6fbc <tc_init+0x210>
	gclk_chan_config.source_generator = config->clock_source;
    6eae:	7833      	ldrb	r3, [r6, #0]
    6eb0:	466a      	mov	r2, sp
    6eb2:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    6eb4:	ab0c      	add	r3, sp, #48	; 0x30
    6eb6:	4642      	mov	r2, r8
    6eb8:	5c9f      	ldrb	r7, [r3, r2]
    6eba:	4669      	mov	r1, sp
    6ebc:	0038      	movs	r0, r7
    6ebe:	4b74      	ldr	r3, [pc, #464]	; (7090 <tc_init+0x2e4>)
    6ec0:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    6ec2:	0038      	movs	r0, r7
    6ec4:	4b73      	ldr	r3, [pc, #460]	; (7094 <tc_init+0x2e8>)
    6ec6:	4798      	blx	r3
			(uint32_t)config->counter_size |
    6ec8:	78f3      	ldrb	r3, [r6, #3]
    6eca:	79f2      	ldrb	r2, [r6, #7]
    6ecc:	4313      	orrs	r3, r2
			(uint32_t)config->clock_prescaler;
    6ece:	88b2      	ldrh	r2, [r6, #4]
	ctrla_tmp =
    6ed0:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    6ed2:	7a72      	ldrb	r2, [r6, #9]
    6ed4:	2a00      	cmp	r2, #0
    6ed6:	d002      	beq.n	6ede <tc_init+0x132>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    6ed8:	2280      	movs	r2, #128	; 0x80
    6eda:	0252      	lsls	r2, r2, #9
    6edc:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    6ede:	7ab2      	ldrb	r2, [r6, #10]
    6ee0:	2a00      	cmp	r2, #0
    6ee2:	d002      	beq.n	6eea <tc_init+0x13e>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    6ee4:	2280      	movs	r2, #128	; 0x80
    6ee6:	0292      	lsls	r2, r2, #10
    6ee8:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    6eea:	7af2      	ldrb	r2, [r6, #11]
    6eec:	2a00      	cmp	r2, #0
    6eee:	d002      	beq.n	6ef6 <tc_init+0x14a>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    6ef0:	2280      	movs	r2, #128	; 0x80
    6ef2:	0352      	lsls	r2, r2, #13
    6ef4:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    6ef6:	7b32      	ldrb	r2, [r6, #12]
    6ef8:	2a00      	cmp	r2, #0
    6efa:	d002      	beq.n	6f02 <tc_init+0x156>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    6efc:	2280      	movs	r2, #128	; 0x80
    6efe:	0392      	lsls	r2, r2, #14
    6f00:	4313      	orrs	r3, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    6f02:	7871      	ldrb	r1, [r6, #1]
    6f04:	0189      	lsls	r1, r1, #6
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
    6f06:	78b2      	ldrb	r2, [r6, #2]
    6f08:	01d2      	lsls	r2, r2, #7
    6f0a:	4311      	orrs	r1, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    6f0c:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6f0e:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	return (tc_module->SYNCBUSY.reg);
    6f10:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    6f12:	2b00      	cmp	r3, #0
    6f14:	d1fc      	bne.n	6f10 <tc_init+0x164>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    6f16:	6029      	str	r1, [r5, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6f18:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6f1a:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    6f1c:	2b00      	cmp	r3, #0
    6f1e:	d1fc      	bne.n	6f1a <tc_init+0x16e>
	hw->COUNT8.WAVE.reg = config->wave_generation;
    6f20:	79b3      	ldrb	r3, [r6, #6]
    6f22:	732b      	strb	r3, [r5, #12]
	if (config->oneshot) {
    6f24:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    6f26:	1e4b      	subs	r3, r1, #1
    6f28:	4199      	sbcs	r1, r3
    6f2a:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    6f2c:	7bb3      	ldrb	r3, [r6, #14]
    6f2e:	2b00      	cmp	r3, #0
    6f30:	d001      	beq.n	6f36 <tc_init+0x18a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    6f32:	2301      	movs	r3, #1
    6f34:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6f36:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6f38:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    6f3a:	2b00      	cmp	r3, #0
    6f3c:	d1fc      	bne.n	6f38 <tc_init+0x18c>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    6f3e:	33ff      	adds	r3, #255	; 0xff
    6f40:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    6f42:	2900      	cmp	r1, #0
    6f44:	d004      	beq.n	6f50 <tc_init+0x1a4>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6f46:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6f48:	6913      	ldr	r3, [r2, #16]
		while (tc_is_syncing(module_inst)) {
    6f4a:	2b00      	cmp	r3, #0
    6f4c:	d1fc      	bne.n	6f48 <tc_init+0x19c>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    6f4e:	7169      	strb	r1, [r5, #5]
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
    6f50:	7a33      	ldrb	r3, [r6, #8]
    6f52:	736b      	strb	r3, [r5, #13]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6f54:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6f56:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    6f58:	2b00      	cmp	r3, #0
    6f5a:	d1fc      	bne.n	6f56 <tc_init+0x1aa>
	switch (module_inst->counter_size) {
    6f5c:	7923      	ldrb	r3, [r4, #4]
    6f5e:	2b04      	cmp	r3, #4
    6f60:	d059      	beq.n	7016 <tc_init+0x26a>
    6f62:	2b08      	cmp	r3, #8
    6f64:	d074      	beq.n	7050 <tc_init+0x2a4>
	return STATUS_ERR_INVALID_ARG;
    6f66:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    6f68:	2b00      	cmp	r3, #0
    6f6a:	d000      	beq.n	6f6e <tc_init+0x1c2>
    6f6c:	e755      	b.n	6e1a <tc_init+0x6e>
    6f6e:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6f70:	2b00      	cmp	r3, #0
    6f72:	d1fc      	bne.n	6f6e <tc_init+0x1c2>
				= config->counter_16_bit.value;
    6f74:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    6f76:	82ab      	strh	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6f78:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6f7a:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6f7c:	2b00      	cmp	r3, #0
    6f7e:	d1fc      	bne.n	6f7a <tc_init+0x1ce>
					config->counter_16_bit.compare_capture_channel[0];
    6f80:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    6f82:	83ab      	strh	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6f84:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    6f86:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    6f88:	2b00      	cmp	r3, #0
    6f8a:	d1fc      	bne.n	6f86 <tc_init+0x1da>
					config->counter_16_bit.compare_capture_channel[1];
    6f8c:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    6f8e:	83eb      	strh	r3, [r5, #30]
			return STATUS_OK;
    6f90:	2000      	movs	r0, #0
    6f92:	e742      	b.n	6e1a <tc_init+0x6e>
			MCLK->APBBMASK.reg |= mask;
    6f94:	493d      	ldr	r1, [pc, #244]	; (708c <tc_init+0x2e0>)
    6f96:	698b      	ldr	r3, [r1, #24]
    6f98:	4318      	orrs	r0, r3
    6f9a:	6188      	str	r0, [r1, #24]
    6f9c:	e783      	b.n	6ea6 <tc_init+0xfa>
			MCLK->APBCMASK.reg |= mask;
    6f9e:	493b      	ldr	r1, [pc, #236]	; (708c <tc_init+0x2e0>)
    6fa0:	69cb      	ldr	r3, [r1, #28]
    6fa2:	4318      	orrs	r0, r3
    6fa4:	61c8      	str	r0, [r1, #28]
    6fa6:	e77e      	b.n	6ea6 <tc_init+0xfa>
			MCLK->APBDMASK.reg |= mask;
    6fa8:	4938      	ldr	r1, [pc, #224]	; (708c <tc_init+0x2e0>)
    6faa:	6a0b      	ldr	r3, [r1, #32]
    6fac:	4318      	orrs	r0, r3
    6fae:	6208      	str	r0, [r1, #32]
    6fb0:	e779      	b.n	6ea6 <tc_init+0xfa>
			MCLK->APBEMASK.reg |= mask;
    6fb2:	4b36      	ldr	r3, [pc, #216]	; (708c <tc_init+0x2e0>)
    6fb4:	6a59      	ldr	r1, [r3, #36]	; 0x24
    6fb6:	4308      	orrs	r0, r1
    6fb8:	6258      	str	r0, [r3, #36]	; 0x24
    6fba:	e774      	b.n	6ea6 <tc_init+0xfa>
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    6fbc:	4643      	mov	r3, r8
    6fbe:	3301      	adds	r3, #1
    6fc0:	2b04      	cmp	r3, #4
    6fc2:	dd00      	ble.n	6fc6 <tc_init+0x21a>
    6fc4:	e773      	b.n	6eae <tc_init+0x102>
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
    6fc6:	ab02      	add	r3, sp, #8
    6fc8:	1cd1      	adds	r1, r2, #3
    6fca:	0089      	lsls	r1, r1, #2
    6fcc:	58c9      	ldr	r1, [r1, r3]
    6fce:	3202      	adds	r2, #2
    6fd0:	0092      	lsls	r2, r2, #2
    6fd2:	58d3      	ldr	r3, [r2, r3]
	switch (bus) {
    6fd4:	b2da      	uxtb	r2, r3
    6fd6:	2a04      	cmp	r2, #4
    6fd8:	d900      	bls.n	6fdc <tc_init+0x230>
    6fda:	e768      	b.n	6eae <tc_init+0x102>
    6fdc:	0093      	lsls	r3, r2, #2
    6fde:	4a2e      	ldr	r2, [pc, #184]	; (7098 <tc_init+0x2ec>)
    6fe0:	58d3      	ldr	r3, [r2, r3]
    6fe2:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    6fe4:	4a29      	ldr	r2, [pc, #164]	; (708c <tc_init+0x2e0>)
    6fe6:	6953      	ldr	r3, [r2, #20]
    6fe8:	4319      	orrs	r1, r3
    6fea:	6151      	str	r1, [r2, #20]
    6fec:	e75f      	b.n	6eae <tc_init+0x102>
			MCLK->APBBMASK.reg |= mask;
    6fee:	4a27      	ldr	r2, [pc, #156]	; (708c <tc_init+0x2e0>)
    6ff0:	6993      	ldr	r3, [r2, #24]
    6ff2:	4319      	orrs	r1, r3
    6ff4:	6191      	str	r1, [r2, #24]
    6ff6:	e75a      	b.n	6eae <tc_init+0x102>
			MCLK->APBCMASK.reg |= mask;
    6ff8:	4a24      	ldr	r2, [pc, #144]	; (708c <tc_init+0x2e0>)
    6ffa:	69d3      	ldr	r3, [r2, #28]
    6ffc:	4319      	orrs	r1, r3
    6ffe:	61d1      	str	r1, [r2, #28]
    7000:	e755      	b.n	6eae <tc_init+0x102>
			MCLK->APBDMASK.reg |= mask;
    7002:	4a22      	ldr	r2, [pc, #136]	; (708c <tc_init+0x2e0>)
    7004:	6a13      	ldr	r3, [r2, #32]
    7006:	4319      	orrs	r1, r3
    7008:	6211      	str	r1, [r2, #32]
    700a:	e750      	b.n	6eae <tc_init+0x102>
			MCLK->APBEMASK.reg |= mask;
    700c:	4b1f      	ldr	r3, [pc, #124]	; (708c <tc_init+0x2e0>)
    700e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    7010:	4311      	orrs	r1, r2
    7012:	6259      	str	r1, [r3, #36]	; 0x24
    7014:	e74b      	b.n	6eae <tc_init+0x102>
    7016:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    7018:	2b00      	cmp	r3, #0
    701a:	d1fc      	bne.n	7016 <tc_init+0x26a>
					config->counter_8_bit.value;
    701c:	3328      	adds	r3, #40	; 0x28
    701e:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    7020:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    7022:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    7024:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    7026:	2b00      	cmp	r3, #0
    7028:	d1fc      	bne.n	7024 <tc_init+0x278>
					config->counter_8_bit.period;
    702a:	3329      	adds	r3, #41	; 0x29
    702c:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    702e:	76eb      	strb	r3, [r5, #27]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    7030:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    7032:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    7034:	2b00      	cmp	r3, #0
    7036:	d1fc      	bne.n	7032 <tc_init+0x286>
					config->counter_8_bit.compare_capture_channel[0];
    7038:	332a      	adds	r3, #42	; 0x2a
    703a:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    703c:	772b      	strb	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    703e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    7040:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    7042:	2b00      	cmp	r3, #0
    7044:	d1fc      	bne.n	7040 <tc_init+0x294>
					config->counter_8_bit.compare_capture_channel[1];
    7046:	332b      	adds	r3, #43	; 0x2b
    7048:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    704a:	776b      	strb	r3, [r5, #29]
			return STATUS_OK;
    704c:	2000      	movs	r0, #0
    704e:	e6e4      	b.n	6e1a <tc_init+0x6e>
    7050:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    7052:	2b00      	cmp	r3, #0
    7054:	d1fc      	bne.n	7050 <tc_init+0x2a4>
				= config->counter_32_bit.value;
    7056:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    7058:	616b      	str	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    705a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    705c:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    705e:	2b00      	cmp	r3, #0
    7060:	d1fc      	bne.n	705c <tc_init+0x2b0>
			hw->COUNT32.CC[0].reg =
    7062:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    7064:	61eb      	str	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    7066:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    7068:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    706a:	2b00      	cmp	r3, #0
    706c:	d1fc      	bne.n	7068 <tc_init+0x2bc>
					config->counter_32_bit.compare_capture_channel[1];
    706e:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    7070:	622b      	str	r3, [r5, #32]
			return STATUS_OK;
    7072:	2000      	movs	r0, #0
    7074:	e6d1      	b.n	6e1a <tc_init+0x6e>
    7076:	46c0      	nop			; (mov r8, r8)
    7078:	00006d71 	.word	0x00006d71
    707c:	00019358 	.word	0x00019358
    7080:	20002160 	.word	0x20002160
    7084:	00019330 	.word	0x00019330
    7088:	00006c49 	.word	0x00006c49
    708c:	40000400 	.word	0x40000400
    7090:	00006b4d 	.word	0x00006b4d
    7094:	00006add 	.word	0x00006add
    7098:	00019344 	.word	0x00019344

0000709c <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    709c:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    709e:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    70a0:	2b00      	cmp	r3, #0
    70a2:	d1fc      	bne.n	709e <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    70a4:	7113      	strb	r3, [r2, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    70a6:	6801      	ldr	r1, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    70a8:	690b      	ldr	r3, [r1, #16]

	while (tc_is_syncing(module_inst)) {
    70aa:	2b00      	cmp	r3, #0
    70ac:	d1fc      	bne.n	70a8 <tc_get_count_value+0xc>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_READSYNC_Val);
    70ae:	3380      	adds	r3, #128	; 0x80
    70b0:	7153      	strb	r3, [r2, #5]
#if (SAMC20) || (SAMC21) || (SAML21) || (SAML22) || (SAMR30) || (SAMR34) || (WLR089)
	/* wait for the CMD bits in CTRLBSET to be cleared, meaning the CMD has been executed */
	while(tc_module->CTRLBSET.reg & TC_CTRLBSET_CMD_READSYNC);	
    70b2:	7953      	ldrb	r3, [r2, #5]
    70b4:	b25b      	sxtb	r3, r3
    70b6:	2b00      	cmp	r3, #0
    70b8:	dbfb      	blt.n	70b2 <tc_get_count_value+0x16>

	/* Read synchronization */
	tc_sync_read_count(module_inst);
	
	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    70ba:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    70bc:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    70be:	2b00      	cmp	r3, #0
    70c0:	d1fc      	bne.n	70bc <tc_get_count_value+0x20>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    70c2:	7903      	ldrb	r3, [r0, #4]
    70c4:	2b04      	cmp	r3, #4
    70c6:	d005      	beq.n	70d4 <tc_get_count_value+0x38>
    70c8:	2b08      	cmp	r3, #8
    70ca:	d009      	beq.n	70e0 <tc_get_count_value+0x44>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    70cc:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    70ce:	2b00      	cmp	r3, #0
    70d0:	d003      	beq.n	70da <tc_get_count_value+0x3e>
}
    70d2:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    70d4:	7d10      	ldrb	r0, [r2, #20]
    70d6:	b2c0      	uxtb	r0, r0
    70d8:	e7fb      	b.n	70d2 <tc_get_count_value+0x36>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    70da:	8a90      	ldrh	r0, [r2, #20]
    70dc:	b280      	uxth	r0, r0
    70de:	e7f8      	b.n	70d2 <tc_get_count_value+0x36>
			return tc_module->COUNT32.COUNT.reg;
    70e0:	6950      	ldr	r0, [r2, #20]
    70e2:	e7f6      	b.n	70d2 <tc_get_count_value+0x36>

000070e4 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    70e4:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(compare);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    70e6:	6804      	ldr	r4, [r0, #0]
    70e8:	6923      	ldr	r3, [r4, #16]

	while (tc_is_syncing(module_inst)) {
    70ea:	2b00      	cmp	r3, #0
    70ec:	d1fc      	bne.n	70e8 <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    70ee:	7903      	ldrb	r3, [r0, #4]
    70f0:	2b04      	cmp	r3, #4
    70f2:	d006      	beq.n	7102 <tc_set_compare_value+0x1e>
    70f4:	2b08      	cmp	r3, #8
    70f6:	d028      	beq.n	714a <tc_set_compare_value+0x66>
    70f8:	2b00      	cmp	r3, #0
    70fa:	d013      	beq.n	7124 <tc_set_compare_value+0x40>
				}
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    70fc:	2317      	movs	r3, #23
}
    70fe:	0018      	movs	r0, r3
    7100:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    7102:	2317      	movs	r3, #23
			if (channel_index <
    7104:	2901      	cmp	r1, #1
    7106:	d8fa      	bhi.n	70fe <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    7108:	7e83      	ldrb	r3, [r0, #26]
    710a:	2b00      	cmp	r3, #0
    710c:	d005      	beq.n	711a <tc_set_compare_value+0x36>
							(uint8_t)compare;
    710e:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CCBUF[channel_index].reg =
    7110:	1861      	adds	r1, r4, r1
    7112:	3130      	adds	r1, #48	; 0x30
    7114:	700a      	strb	r2, [r1, #0]
				return STATUS_OK;
    7116:	2300      	movs	r3, #0
    7118:	e7f1      	b.n	70fe <tc_set_compare_value+0x1a>
							(uint8_t)compare;
    711a:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CC[channel_index].reg  =
    711c:	1864      	adds	r4, r4, r1
    711e:	7722      	strb	r2, [r4, #28]
				return STATUS_OK;
    7120:	2300      	movs	r3, #0
    7122:	e7ec      	b.n	70fe <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    7124:	2317      	movs	r3, #23
			if (channel_index <
    7126:	2901      	cmp	r1, #1
    7128:	d8e9      	bhi.n	70fe <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    712a:	7e83      	ldrb	r3, [r0, #26]
    712c:	2b00      	cmp	r3, #0
    712e:	d005      	beq.n	713c <tc_set_compare_value+0x58>
							(uint16_t)compare;
    7130:	b292      	uxth	r2, r2
					tc_module->COUNT16.CCBUF[channel_index].reg =
    7132:	3118      	adds	r1, #24
    7134:	0049      	lsls	r1, r1, #1
    7136:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    7138:	2300      	movs	r3, #0
    713a:	e7e0      	b.n	70fe <tc_set_compare_value+0x1a>
							(uint16_t)compare;
    713c:	b292      	uxth	r2, r2
					tc_module->COUNT16.CC[channel_index].reg =
    713e:	310c      	adds	r1, #12
    7140:	0049      	lsls	r1, r1, #1
    7142:	1864      	adds	r4, r4, r1
    7144:	80a2      	strh	r2, [r4, #4]
				return STATUS_OK;
    7146:	2300      	movs	r3, #0
    7148:	e7d9      	b.n	70fe <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    714a:	2317      	movs	r3, #23
			if (channel_index <
    714c:	2901      	cmp	r1, #1
    714e:	d8d6      	bhi.n	70fe <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    7150:	7e83      	ldrb	r3, [r0, #26]
    7152:	2b00      	cmp	r3, #0
    7154:	d105      	bne.n	7162 <tc_set_compare_value+0x7e>
					tc_module->COUNT32.CC[channel_index].reg =
    7156:	3106      	adds	r1, #6
    7158:	0089      	lsls	r1, r1, #2
    715a:	1864      	adds	r4, r4, r1
    715c:	6062      	str	r2, [r4, #4]
				return STATUS_OK;
    715e:	2300      	movs	r3, #0
    7160:	e7cd      	b.n	70fe <tc_set_compare_value+0x1a>
					tc_module->COUNT32.CCBUF[channel_index].reg =
    7162:	310c      	adds	r1, #12
    7164:	0089      	lsls	r1, r1, #2
    7166:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    7168:	2300      	movs	r3, #0
    716a:	e7c8      	b.n	70fe <tc_set_compare_value+0x1a>

0000716c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    716c:	e7fe      	b.n	716c <Dummy_Handler>
    716e:	Address 0x0000716e is out of bounds.


00007170 <Reset_Handler>:
{
    7170:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    7172:	4a1a      	ldr	r2, [pc, #104]	; (71dc <Reset_Handler+0x6c>)
    7174:	4b1a      	ldr	r3, [pc, #104]	; (71e0 <Reset_Handler+0x70>)
    7176:	429a      	cmp	r2, r3
    7178:	d011      	beq.n	719e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    717a:	001a      	movs	r2, r3
    717c:	4b19      	ldr	r3, [pc, #100]	; (71e4 <Reset_Handler+0x74>)
    717e:	429a      	cmp	r2, r3
    7180:	d20d      	bcs.n	719e <Reset_Handler+0x2e>
    7182:	4a19      	ldr	r2, [pc, #100]	; (71e8 <Reset_Handler+0x78>)
    7184:	3303      	adds	r3, #3
    7186:	1a9b      	subs	r3, r3, r2
    7188:	089b      	lsrs	r3, r3, #2
    718a:	3301      	adds	r3, #1
    718c:	009b      	lsls	r3, r3, #2
    718e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    7190:	4813      	ldr	r0, [pc, #76]	; (71e0 <Reset_Handler+0x70>)
    7192:	4912      	ldr	r1, [pc, #72]	; (71dc <Reset_Handler+0x6c>)
    7194:	588c      	ldr	r4, [r1, r2]
    7196:	5084      	str	r4, [r0, r2]
    7198:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    719a:	429a      	cmp	r2, r3
    719c:	d1fa      	bne.n	7194 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    719e:	4a13      	ldr	r2, [pc, #76]	; (71ec <Reset_Handler+0x7c>)
    71a0:	4b13      	ldr	r3, [pc, #76]	; (71f0 <Reset_Handler+0x80>)
    71a2:	429a      	cmp	r2, r3
    71a4:	d20a      	bcs.n	71bc <Reset_Handler+0x4c>
    71a6:	43d3      	mvns	r3, r2
    71a8:	4911      	ldr	r1, [pc, #68]	; (71f0 <Reset_Handler+0x80>)
    71aa:	185b      	adds	r3, r3, r1
    71ac:	2103      	movs	r1, #3
    71ae:	438b      	bics	r3, r1
    71b0:	3304      	adds	r3, #4
    71b2:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    71b4:	2100      	movs	r1, #0
    71b6:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    71b8:	4293      	cmp	r3, r2
    71ba:	d1fc      	bne.n	71b6 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    71bc:	4a0d      	ldr	r2, [pc, #52]	; (71f4 <Reset_Handler+0x84>)
    71be:	21ff      	movs	r1, #255	; 0xff
    71c0:	4b0d      	ldr	r3, [pc, #52]	; (71f8 <Reset_Handler+0x88>)
    71c2:	438b      	bics	r3, r1
    71c4:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    71c6:	4a0d      	ldr	r2, [pc, #52]	; (71fc <Reset_Handler+0x8c>)
    71c8:	6853      	ldr	r3, [r2, #4]
    71ca:	397f      	subs	r1, #127	; 0x7f
    71cc:	430b      	orrs	r3, r1
    71ce:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    71d0:	4b0b      	ldr	r3, [pc, #44]	; (7200 <Reset_Handler+0x90>)
    71d2:	4798      	blx	r3
        main();
    71d4:	4b0b      	ldr	r3, [pc, #44]	; (7204 <Reset_Handler+0x94>)
    71d6:	4798      	blx	r3
    71d8:	e7fe      	b.n	71d8 <Reset_Handler+0x68>
    71da:	46c0      	nop			; (mov r8, r8)
    71dc:	0001a61c 	.word	0x0001a61c
    71e0:	20000000 	.word	0x20000000
    71e4:	2000008c 	.word	0x2000008c
    71e8:	20000004 	.word	0x20000004
    71ec:	20000090 	.word	0x20000090
    71f0:	20003dd8 	.word	0x20003dd8
    71f4:	e000ed00 	.word	0xe000ed00
    71f8:	00000000 	.word	0x00000000
    71fc:	41004000 	.word	0x41004000
    7200:	00017805 	.word	0x00017805
    7204:	00007895 	.word	0x00007895

00007208 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    7208:	b5f0      	push	{r4, r5, r6, r7, lr}
    720a:	46c6      	mov	lr, r8
    720c:	b500      	push	{lr}
    720e:	000c      	movs	r4, r1
    7210:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    7212:	2800      	cmp	r0, #0
    7214:	d10f      	bne.n	7236 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    7216:	2a00      	cmp	r2, #0
    7218:	dd11      	ble.n	723e <_read+0x36>
    721a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    721c:	4e09      	ldr	r6, [pc, #36]	; (7244 <_read+0x3c>)
    721e:	4d0a      	ldr	r5, [pc, #40]	; (7248 <_read+0x40>)
    7220:	6830      	ldr	r0, [r6, #0]
    7222:	0021      	movs	r1, r4
    7224:	682b      	ldr	r3, [r5, #0]
    7226:	4798      	blx	r3
		ptr++;
    7228:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    722a:	42bc      	cmp	r4, r7
    722c:	d1f8      	bne.n	7220 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    722e:	4640      	mov	r0, r8
    7230:	bc04      	pop	{r2}
    7232:	4690      	mov	r8, r2
    7234:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    7236:	2301      	movs	r3, #1
    7238:	425b      	negs	r3, r3
    723a:	4698      	mov	r8, r3
    723c:	e7f7      	b.n	722e <_read+0x26>
	for (; len > 0; --len) {
    723e:	4680      	mov	r8, r0
    7240:	e7f5      	b.n	722e <_read+0x26>
    7242:	46c0      	nop			; (mov r8, r8)
    7244:	2000217c 	.word	0x2000217c
    7248:	20002174 	.word	0x20002174

0000724c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    724c:	b5f0      	push	{r4, r5, r6, r7, lr}
    724e:	46c6      	mov	lr, r8
    7250:	b500      	push	{lr}
    7252:	000e      	movs	r6, r1
    7254:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    7256:	3801      	subs	r0, #1
    7258:	2802      	cmp	r0, #2
    725a:	d810      	bhi.n	727e <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    725c:	2a00      	cmp	r2, #0
    725e:	d011      	beq.n	7284 <_write+0x38>
    7260:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    7262:	4b0c      	ldr	r3, [pc, #48]	; (7294 <_write+0x48>)
    7264:	4698      	mov	r8, r3
    7266:	4f0c      	ldr	r7, [pc, #48]	; (7298 <_write+0x4c>)
    7268:	4643      	mov	r3, r8
    726a:	6818      	ldr	r0, [r3, #0]
    726c:	5d31      	ldrb	r1, [r6, r4]
    726e:	683b      	ldr	r3, [r7, #0]
    7270:	4798      	blx	r3
    7272:	2800      	cmp	r0, #0
    7274:	db08      	blt.n	7288 <_write+0x3c>
			return -1;
		}
		++nChars;
    7276:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    7278:	42a5      	cmp	r5, r4
    727a:	d1f5      	bne.n	7268 <_write+0x1c>
    727c:	e006      	b.n	728c <_write+0x40>
		return -1;
    727e:	2401      	movs	r4, #1
    7280:	4264      	negs	r4, r4
    7282:	e003      	b.n	728c <_write+0x40>
	for (; len != 0; --len) {
    7284:	0014      	movs	r4, r2
    7286:	e001      	b.n	728c <_write+0x40>
			return -1;
    7288:	2401      	movs	r4, #1
    728a:	4264      	negs	r4, r4
	}
	return nChars;
}
    728c:	0020      	movs	r0, r4
    728e:	bc04      	pop	{r2}
    7290:	4690      	mov	r8, r2
    7292:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7294:	2000217c 	.word	0x2000217c
    7298:	20002178 	.word	0x20002178

0000729c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    729c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    729e:	4a06      	ldr	r2, [pc, #24]	; (72b8 <_sbrk+0x1c>)
    72a0:	6812      	ldr	r2, [r2, #0]
    72a2:	2a00      	cmp	r2, #0
    72a4:	d004      	beq.n	72b0 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    72a6:	4a04      	ldr	r2, [pc, #16]	; (72b8 <_sbrk+0x1c>)
    72a8:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    72aa:	18c3      	adds	r3, r0, r3
    72ac:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    72ae:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    72b0:	4902      	ldr	r1, [pc, #8]	; (72bc <_sbrk+0x20>)
    72b2:	4a01      	ldr	r2, [pc, #4]	; (72b8 <_sbrk+0x1c>)
    72b4:	6011      	str	r1, [r2, #0]
    72b6:	e7f6      	b.n	72a6 <_sbrk+0xa>
    72b8:	200002fc 	.word	0x200002fc
    72bc:	20005dd8 	.word	0x20005dd8

000072c0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    72c0:	2001      	movs	r0, #1
    72c2:	4240      	negs	r0, r0
    72c4:	4770      	bx	lr

000072c6 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    72c6:	2380      	movs	r3, #128	; 0x80
    72c8:	019b      	lsls	r3, r3, #6
    72ca:	604b      	str	r3, [r1, #4]

	return 0;
}
    72cc:	2000      	movs	r0, #0
    72ce:	4770      	bx	lr

000072d0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    72d0:	2001      	movs	r0, #1
    72d2:	4770      	bx	lr

000072d4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    72d4:	2000      	movs	r0, #0
    72d6:	4770      	bx	lr

000072d8 <_exit>:

extern void _exit(int status)
{
	asm("BKPT #0");
    72d8:	be00      	bkpt	0x0000
    72da:	e7fe      	b.n	72da <_exit+0x2>

000072dc <_kill>:
}

extern void _kill(int pid, int sig)
{
	return;
}
    72dc:	4770      	bx	lr

000072de <_getpid>:

extern int _getpid(void)
{
	return -1;
}
    72de:	2001      	movs	r0, #1
    72e0:	4240      	negs	r0, r0
    72e2:	4770      	bx	lr

000072e4 <sal_FillSubKey>:
		}
	}
}

static void sal_FillSubKey( uint8_t *source, uint8_t *key, uint8_t size)
{
    72e4:	b530      	push	{r4, r5, lr}
	uint8_t i = 0;
	uint8_t carry = 0;

	i=size;

	while(i--)
    72e6:	1e53      	subs	r3, r2, #1
    72e8:	b2db      	uxtb	r3, r3
    72ea:	2a00      	cmp	r2, #0
    72ec:	d00b      	beq.n	7306 <sal_FillSubKey+0x22>
    72ee:	2400      	movs	r4, #0
	{
		key[i] = (source[i] << 1) | carry;
    72f0:	18c5      	adds	r5, r0, r3
    72f2:	782a      	ldrb	r2, [r5, #0]
    72f4:	0052      	lsls	r2, r2, #1
    72f6:	4322      	orrs	r2, r4
    72f8:	54ca      	strb	r2, [r1, r3]
		carry = !!(source[i] & 0x80);
    72fa:	782c      	ldrb	r4, [r5, #0]
    72fc:	09e4      	lsrs	r4, r4, #7
	while(i--)
    72fe:	3b01      	subs	r3, #1
    7300:	b2db      	uxtb	r3, r3
    7302:	2bff      	cmp	r3, #255	; 0xff
    7304:	d1f4      	bne.n	72f0 <sal_FillSubKey+0xc>
	}
}
    7306:	bd30      	pop	{r4, r5, pc}

00007308 <SAL_AESEncode>:
{
    7308:	b510      	push	{r4, lr}
    730a:	b084      	sub	sp, #16
    730c:	0004      	movs	r4, r0
    730e:	0011      	movs	r1, r2
	memcpy(useKey, key, sizeof(useKey));
    7310:	2210      	movs	r2, #16
    7312:	4668      	mov	r0, sp
    7314:	4b04      	ldr	r3, [pc, #16]	; (7328 <SAL_AESEncode+0x20>)
    7316:	4798      	blx	r3
	AESEncode(buffer, useKey);
    7318:	4669      	mov	r1, sp
    731a:	0020      	movs	r0, r4
    731c:	4b03      	ldr	r3, [pc, #12]	; (732c <SAL_AESEncode+0x24>)
    731e:	4798      	blx	r3
}
    7320:	2000      	movs	r0, #0
    7322:	b004      	add	sp, #16
    7324:	bd10      	pop	{r4, pc}
    7326:	46c0      	nop			; (mov r8, r8)
    7328:	0001786b 	.word	0x0001786b
    732c:	0000e175 	.word	0x0000e175

00007330 <SAL_DeriveSessionKey>:
{
    7330:	b510      	push	{r4, lr}
	sal_status = SAL_AESEncode(block, src_key, key);
    7332:	4b01      	ldr	r3, [pc, #4]	; (7338 <SAL_DeriveSessionKey+0x8>)
    7334:	4798      	blx	r3
}
    7336:	bd10      	pop	{r4, pc}
    7338:	00007309 	.word	0x00007309

0000733c <SAL_Read>:
}
    733c:	2000      	movs	r0, #0
    733e:	4770      	bx	lr

00007340 <SAL_AESCmac>:
{
    7340:	b5f0      	push	{r4, r5, r6, r7, lr}
    7342:	46d6      	mov	lr, sl
    7344:	464f      	mov	r7, r9
    7346:	4646      	mov	r6, r8
    7348:	b5c0      	push	{r6, r7, lr}
    734a:	b0a4      	sub	sp, #144	; 0x90
    734c:	9001      	str	r0, [sp, #4]
    734e:	000f      	movs	r7, r1
    7350:	9102      	str	r1, [sp, #8]
    7352:	9203      	str	r2, [sp, #12]
    7354:	469a      	mov	sl, r3
    7356:	ab2c      	add	r3, sp, #176	; 0xb0
    7358:	881c      	ldrh	r4, [r3, #0]
	uint8_t const_Rb[16] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    735a:	ae08      	add	r6, sp, #32
    735c:	2210      	movs	r2, #16
    735e:	2100      	movs	r1, #0
    7360:	0030      	movs	r0, r6
    7362:	4d64      	ldr	r5, [pc, #400]	; (74f4 <SAL_AESCmac+0x1b4>)
    7364:	47a8      	blx	r5
    7366:	2387      	movs	r3, #135	; 0x87
    7368:	73f3      	strb	r3, [r6, #15]
	memset(l, 0, sizeof(l));
    736a:	2210      	movs	r2, #16
    736c:	2100      	movs	r1, #0
    736e:	a804      	add	r0, sp, #16
    7370:	47a8      	blx	r5
	SAL_AESEncode(l, key_type, key);
    7372:	9a01      	ldr	r2, [sp, #4]
    7374:	0039      	movs	r1, r7
    7376:	a804      	add	r0, sp, #16
    7378:	4b5f      	ldr	r3, [pc, #380]	; (74f8 <SAL_AESCmac+0x1b8>)
    737a:	4798      	blx	r3
	if ( (l[0] & 0x80) == 0x00 )  // MSB( bufferLocal[0] ) is '0'
    737c:	ab04      	add	r3, sp, #16
    737e:	781b      	ldrb	r3, [r3, #0]
    7380:	2b7f      	cmp	r3, #127	; 0x7f
    7382:	d82d      	bhi.n	73e0 <SAL_AESCmac+0xa0>
		sal_FillSubKey( l, k1, (sizeof(l) ) );
    7384:	2210      	movs	r2, #16
    7386:	a920      	add	r1, sp, #128	; 0x80
    7388:	a804      	add	r0, sp, #16
    738a:	4b5c      	ldr	r3, [pc, #368]	; (74fc <SAL_AESCmac+0x1bc>)
    738c:	4798      	blx	r3
	if ( (k1[0] & 0x80) == 0x00 )   // MSB( k1[0] ) is '0'
    738e:	ab20      	add	r3, sp, #128	; 0x80
    7390:	781b      	ldrb	r3, [r3, #0]
    7392:	2b7f      	cmp	r3, #127	; 0x7f
    7394:	d834      	bhi.n	7400 <SAL_AESCmac+0xc0>
		sal_FillSubKey( k1, k2, (sizeof(l)) );
    7396:	2210      	movs	r2, #16
    7398:	a91c      	add	r1, sp, #112	; 0x70
    739a:	a820      	add	r0, sp, #128	; 0x80
    739c:	4b57      	ldr	r3, [pc, #348]	; (74fc <SAL_AESCmac+0x1bc>)
    739e:	4798      	blx	r3
	n = (size + 15) >> 4;
    73a0:	0023      	movs	r3, r4
    73a2:	330f      	adds	r3, #15
    73a4:	111d      	asrs	r5, r3, #4
    73a6:	b2aa      	uxth	r2, r5
    73a8:	4690      	mov	r8, r2
	if (n == 0)
    73aa:	2a00      	cmp	r2, #0
    73ac:	d038      	beq.n	7420 <SAL_AESCmac+0xe0>
	if ( flag == 1 )
    73ae:	0722      	lsls	r2, r4, #28
    73b0:	d138      	bne.n	7424 <SAL_AESCmac+0xe4>
		for (i=((n-1) << 4); i<(n << 4); i++)
    73b2:	4642      	mov	r2, r8
    73b4:	3a01      	subs	r2, #1
    73b6:	0112      	lsls	r2, r2, #4
    73b8:	b296      	uxth	r6, r2
    73ba:	4f51      	ldr	r7, [pc, #324]	; (7500 <SAL_AESCmac+0x1c0>)
    73bc:	401f      	ands	r7, r3
    73be:	42be      	cmp	r6, r7
    73c0:	da54      	bge.n	746c <SAL_AESCmac+0x12c>
    73c2:	0033      	movs	r3, r6
			mLast[j] = input[i] ^ k1[j];
    73c4:	a910      	add	r1, sp, #64	; 0x40
    73c6:	aa20      	add	r2, sp, #128	; 0x80
    73c8:	1b98      	subs	r0, r3, r6
    73ca:	b280      	uxth	r0, r0
    73cc:	4654      	mov	r4, sl
    73ce:	5ce4      	ldrb	r4, [r4, r3]
    73d0:	5c15      	ldrb	r5, [r2, r0]
    73d2:	406c      	eors	r4, r5
    73d4:	540c      	strb	r4, [r1, r0]
		for (i=((n-1) << 4); i<(n << 4); i++)
    73d6:	3301      	adds	r3, #1
    73d8:	b29b      	uxth	r3, r3
    73da:	42bb      	cmp	r3, r7
    73dc:	dbf4      	blt.n	73c8 <SAL_AESCmac+0x88>
    73de:	e045      	b.n	746c <SAL_AESCmac+0x12c>
		sal_FillSubKey( l, k1, (sizeof(l) ) );
    73e0:	2210      	movs	r2, #16
    73e2:	a920      	add	r1, sp, #128	; 0x80
    73e4:	a804      	add	r0, sp, #16
    73e6:	4b45      	ldr	r3, [pc, #276]	; (74fc <SAL_AESCmac+0x1bc>)
    73e8:	4798      	blx	r3
    73ea:	2300      	movs	r3, #0
			k1[i] ^= const_Rb[i];
    73ec:	aa20      	add	r2, sp, #128	; 0x80
    73ee:	a908      	add	r1, sp, #32
    73f0:	5c98      	ldrb	r0, [r3, r2]
    73f2:	5c5d      	ldrb	r5, [r3, r1]
    73f4:	4068      	eors	r0, r5
    73f6:	5498      	strb	r0, [r3, r2]
    73f8:	3301      	adds	r3, #1
		for (i=0; i<sizeof(l); i++)
    73fa:	2b10      	cmp	r3, #16
    73fc:	d1f8      	bne.n	73f0 <SAL_AESCmac+0xb0>
    73fe:	e7c6      	b.n	738e <SAL_AESCmac+0x4e>
		sal_FillSubKey( k1, k2, (sizeof(l) ) );
    7400:	2210      	movs	r2, #16
    7402:	a91c      	add	r1, sp, #112	; 0x70
    7404:	a820      	add	r0, sp, #128	; 0x80
    7406:	4b3d      	ldr	r3, [pc, #244]	; (74fc <SAL_AESCmac+0x1bc>)
    7408:	4798      	blx	r3
    740a:	2300      	movs	r3, #0
			k2[i] = k2[i] ^ const_Rb[i];
    740c:	aa1c      	add	r2, sp, #112	; 0x70
    740e:	a908      	add	r1, sp, #32
    7410:	5c98      	ldrb	r0, [r3, r2]
    7412:	5c5d      	ldrb	r5, [r3, r1]
    7414:	4068      	eors	r0, r5
    7416:	5498      	strb	r0, [r3, r2]
    7418:	3301      	adds	r3, #1
		for (i=0; i<sizeof(l); i++)
    741a:	2b10      	cmp	r3, #16
    741c:	d1f8      	bne.n	7410 <SAL_AESCmac+0xd0>
    741e:	e7bf      	b.n	73a0 <SAL_AESCmac+0x60>
		n = 1;
    7420:	2301      	movs	r3, #1
    7422:	4698      	mov	r8, r3
		ptr = &input[size - (size%16)];
    7424:	230f      	movs	r3, #15
    7426:	0020      	movs	r0, r4
    7428:	4398      	bics	r0, r3
    742a:	2300      	movs	r3, #0
			if ( i < (size%16) )
    742c:	220f      	movs	r2, #15
    742e:	4014      	ands	r4, r2
					padded[i] = 0x00;
    7430:	a90c      	add	r1, sp, #48	; 0x30
    7432:	2700      	movs	r7, #0
					padded[i] = 0x80;
    7434:	2680      	movs	r6, #128	; 0x80
				padded[i] = ptr[i];
    7436:	4450      	add	r0, sl
    7438:	e005      	b.n	7446 <SAL_AESCmac+0x106>
				if ( i == (size%16) )
    743a:	4294      	cmp	r4, r2
    743c:	d009      	beq.n	7452 <SAL_AESCmac+0x112>
					padded[i] = 0x00;
    743e:	545f      	strb	r7, [r3, r1]
    7440:	3301      	adds	r3, #1
		for (i=0; i<16; i++)
    7442:	2b10      	cmp	r3, #16
    7444:	d007      	beq.n	7456 <SAL_AESCmac+0x116>
    7446:	b29a      	uxth	r2, r3
			if ( i < (size%16) )
    7448:	4294      	cmp	r4, r2
    744a:	d9f6      	bls.n	743a <SAL_AESCmac+0xfa>
				padded[i] = ptr[i];
    744c:	5cc2      	ldrb	r2, [r0, r3]
    744e:	545a      	strb	r2, [r3, r1]
    7450:	e7f6      	b.n	7440 <SAL_AESCmac+0x100>
					padded[i] = 0x80;
    7452:	545e      	strb	r6, [r3, r1]
    7454:	e7f4      	b.n	7440 <SAL_AESCmac+0x100>
    7456:	2300      	movs	r3, #0
			mLast[i] = padded[i] ^ k2[i];
    7458:	a810      	add	r0, sp, #64	; 0x40
    745a:	a90c      	add	r1, sp, #48	; 0x30
    745c:	aa1c      	add	r2, sp, #112	; 0x70
    745e:	5c5c      	ldrb	r4, [r3, r1]
    7460:	5c9d      	ldrb	r5, [r3, r2]
    7462:	406c      	eors	r4, r5
    7464:	541c      	strb	r4, [r3, r0]
    7466:	3301      	adds	r3, #1
		for (i=0; i<sizeof(mLast); i++)
    7468:	2b10      	cmp	r3, #16
    746a:	d1f8      	bne.n	745e <SAL_AESCmac+0x11e>
	memset(x, 0, sizeof(x));
    746c:	2210      	movs	r2, #16
    746e:	2100      	movs	r1, #0
    7470:	a818      	add	r0, sp, #96	; 0x60
    7472:	4b20      	ldr	r3, [pc, #128]	; (74f4 <SAL_AESCmac+0x1b4>)
    7474:	4798      	blx	r3
	for (i=0; i<(n-1); i++)
    7476:	2301      	movs	r3, #1
    7478:	425b      	negs	r3, r3
    747a:	4443      	add	r3, r8
    747c:	4699      	mov	r9, r3
    747e:	2000      	movs	r0, #0
    7480:	2700      	movs	r7, #0
    7482:	2b00      	cmp	r3, #0
    7484:	dd1a      	ble.n	74bc <SAL_AESCmac+0x17c>
			y[j] = x[j] ^ input[(i << 4)+j];
    7486:	ad14      	add	r5, sp, #80	; 0x50
    7488:	ac18      	add	r4, sp, #96	; 0x60
		memcpy(x, y, sizeof(y));
    748a:	4e1e      	ldr	r6, [pc, #120]	; (7504 <SAL_AESCmac+0x1c4>)
			y[j] = x[j] ^ input[(i << 4)+j];
    748c:	0100      	lsls	r0, r0, #4
    748e:	2300      	movs	r3, #0
    7490:	4450      	add	r0, sl
    7492:	5cc2      	ldrb	r2, [r0, r3]
    7494:	5d19      	ldrb	r1, [r3, r4]
    7496:	404a      	eors	r2, r1
    7498:	555a      	strb	r2, [r3, r5]
    749a:	3301      	adds	r3, #1
		for (j=0; j<16; j++)
    749c:	2b10      	cmp	r3, #16
    749e:	d1f8      	bne.n	7492 <SAL_AESCmac+0x152>
		memcpy(x, y, sizeof(y));
    74a0:	2210      	movs	r2, #16
    74a2:	0029      	movs	r1, r5
    74a4:	0020      	movs	r0, r4
    74a6:	47b0      	blx	r6
		SAL_AESEncode(x, key_type, key);
    74a8:	9a01      	ldr	r2, [sp, #4]
    74aa:	9902      	ldr	r1, [sp, #8]
    74ac:	0020      	movs	r0, r4
    74ae:	4b12      	ldr	r3, [pc, #72]	; (74f8 <SAL_AESCmac+0x1b8>)
    74b0:	4798      	blx	r3
	for (i=0; i<(n-1); i++)
    74b2:	3701      	adds	r7, #1
    74b4:	b2bf      	uxth	r7, r7
    74b6:	0038      	movs	r0, r7
    74b8:	454f      	cmp	r7, r9
    74ba:	dbe7      	blt.n	748c <SAL_AESCmac+0x14c>
    74bc:	2300      	movs	r3, #0
		y[i] = x[i] ^ mLast[i];
    74be:	ac14      	add	r4, sp, #80	; 0x50
    74c0:	a818      	add	r0, sp, #96	; 0x60
    74c2:	a910      	add	r1, sp, #64	; 0x40
    74c4:	5c1a      	ldrb	r2, [r3, r0]
    74c6:	5c5d      	ldrb	r5, [r3, r1]
    74c8:	406a      	eors	r2, r5
    74ca:	551a      	strb	r2, [r3, r4]
    74cc:	3301      	adds	r3, #1
	for (i=0; i<sizeof(x); i++)
    74ce:	2b10      	cmp	r3, #16
    74d0:	d1f8      	bne.n	74c4 <SAL_AESCmac+0x184>
	SAL_AESEncode(y, key_type, key);
    74d2:	9a01      	ldr	r2, [sp, #4]
    74d4:	9902      	ldr	r1, [sp, #8]
    74d6:	a814      	add	r0, sp, #80	; 0x50
    74d8:	4b07      	ldr	r3, [pc, #28]	; (74f8 <SAL_AESCmac+0x1b8>)
    74da:	4798      	blx	r3
	memcpy(output, y, sizeof(y));
    74dc:	2210      	movs	r2, #16
    74de:	a914      	add	r1, sp, #80	; 0x50
    74e0:	9803      	ldr	r0, [sp, #12]
    74e2:	4b08      	ldr	r3, [pc, #32]	; (7504 <SAL_AESCmac+0x1c4>)
    74e4:	4798      	blx	r3
}
    74e6:	2000      	movs	r0, #0
    74e8:	b024      	add	sp, #144	; 0x90
    74ea:	bc1c      	pop	{r2, r3, r4}
    74ec:	4690      	mov	r8, r2
    74ee:	4699      	mov	r9, r3
    74f0:	46a2      	mov	sl, r4
    74f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    74f4:	0001787d 	.word	0x0001787d
    74f8:	00007309 	.word	0x00007309
    74fc:	000072e5 	.word	0x000072e5
    7500:	000ffff0 	.word	0x000ffff0
    7504:	0001786b 	.word	0x0001786b

00007508 <DemoOutput_Greeting>:

bool PUSH_BUTTON_pressed;
MIWI_TICK PUSH_BUTTON_press_time;

void DemoOutput_Greeting(void)
{    
    7508:	b510      	push	{r4, lr}
#if defined (ENABLE_LCD)
	#if defined(PROTOCOL_STAR)
		LCDDisplay((char *)"Simple STAR on \n SAMR34 Node", 0, true);
    750a:	2201      	movs	r2, #1
    750c:	2100      	movs	r1, #0
    750e:	4810      	ldr	r0, [pc, #64]	; (7550 <DemoOutput_Greeting+0x48>)
    7510:	4b10      	ldr	r3, [pc, #64]	; (7554 <DemoOutput_Greeting+0x4c>)
    7512:	4798      	blx	r3
	#endif
#endif
    #if defined (ENABLE_CONSOLE)
        #if defined(PROTOCOL_STAR)
			printf("\n\r-----------------------------------------------------\n\r-----------------------------------------------------");
    7514:	4810      	ldr	r0, [pc, #64]	; (7558 <DemoOutput_Greeting+0x50>)
    7516:	4c11      	ldr	r4, [pc, #68]	; (755c <DemoOutput_Greeting+0x54>)
    7518:	47a0      	blx	r4
            printf("\r\nStarting Node 1 of Simple Demo for LoRa Star Stack ...");  
    751a:	4811      	ldr	r0, [pc, #68]	; (7560 <DemoOutput_Greeting+0x58>)
    751c:	47a0      	blx	r4
        #endif
		#if defined(ENABLE_SLEEP_FEATURE)
			printf("\r\nReduced Function Device (RFD) operations") ;
		#else
			printf("\r\nFull Function Device (FFD) operations") ;
    751e:	4811      	ldr	r0, [pc, #68]	; (7564 <DemoOutput_Greeting+0x5c>)
    7520:	47a0      	blx	r4
		#endif
        printf("\r\n     RF Transceiver: SX_1276");
    7522:	4811      	ldr	r0, [pc, #68]	; (7568 <DemoOutput_Greeting+0x60>)
    7524:	47a0      	blx	r4
        printf("\r\n     Demo Instruction:");
    7526:	4811      	ldr	r0, [pc, #68]	; (756c <DemoOutput_Greeting+0x64>)
    7528:	47a0      	blx	r4
        printf("\r\n                     Power on the board until LED 1 lights up");
    752a:	4811      	ldr	r0, [pc, #68]	; (7570 <DemoOutput_Greeting+0x68>)
    752c:	47a0      	blx	r4
        printf("\r\n                     to indicate connecting with peer.");
    752e:	4811      	ldr	r0, [pc, #68]	; (7574 <DemoOutput_Greeting+0x6c>)
    7530:	47a0      	blx	r4
        printf("\r\n                     Push Button 1 to broadcast message.");
    7532:	4811      	ldr	r0, [pc, #68]	; (7578 <DemoOutput_Greeting+0x70>)
    7534:	47a0      	blx	r4
        printf("\r\n                     LED 1 will be toggled upon receiving messages. ");
    7536:	4811      	ldr	r0, [pc, #68]	; (757c <DemoOutput_Greeting+0x74>)
    7538:	47a0      	blx	r4
        printf("\r\n\r\n");		
    753a:	4811      	ldr	r0, [pc, #68]	; (7580 <DemoOutput_Greeting+0x78>)
    753c:	4c11      	ldr	r4, [pc, #68]	; (7584 <DemoOutput_Greeting+0x7c>)
    753e:	47a0      	blx	r4
		#ifdef PERIODIC_TX
			printf("Periodic Transmission = Enable\r\n") ;
		#else
			printf("Periodic Transmission = Disable\r\n") ;
    7540:	4811      	ldr	r0, [pc, #68]	; (7588 <DemoOutput_Greeting+0x80>)
    7542:	47a0      	blx	r4
		#endif
		#ifdef DUTY_CYCLING
			printf("Duty Cycling support = Enable\r\n") ;
		#else
			printf("Duty Cycling support = Disable\r\n") ;
    7544:	4811      	ldr	r0, [pc, #68]	; (758c <DemoOutput_Greeting+0x84>)
    7546:	47a0      	blx	r4
		#endif
		#ifdef LBT_SUPPORT_ENABLED
			printf("LBT support = Enable\r\n") ;
		#else
			printf("LBT support = Disable\r\n") ;
    7548:	4811      	ldr	r0, [pc, #68]	; (7590 <DemoOutput_Greeting+0x88>)
    754a:	47a0      	blx	r4
		#endif
    #endif 
}        
    754c:	bd10      	pop	{r4, pc}
    754e:	46c0      	nop			; (mov r8, r8)
    7550:	00019488 	.word	0x00019488
    7554:	00008109 	.word	0x00008109
    7558:	000194a8 	.word	0x000194a8
    755c:	00017e25 	.word	0x00017e25
    7560:	00019518 	.word	0x00019518
    7564:	00019554 	.word	0x00019554
    7568:	0001957c 	.word	0x0001957c
    756c:	0001959c 	.word	0x0001959c
    7570:	000195b8 	.word	0x000195b8
    7574:	000195f8 	.word	0x000195f8
    7578:	00019634 	.word	0x00019634
    757c:	00019670 	.word	0x00019670
    7580:	000196b8 	.word	0x000196b8
    7584:	00017f41 	.word	0x00017f41
    7588:	000196bc 	.word	0x000196bc
    758c:	000196e0 	.word	0x000196e0
    7590:	00019700 	.word	0x00019700

00007594 <demo_output_freezer_options>:

void demo_output_freezer_options(void)
{ 
    7594:	b510      	push	{r4, lr}
#if defined (ENABLE_LCD)
	LCDDisplay((char *)"SW: Use Nwk Freezer \nPress in 5 sec", 0, false);	
    7596:	2200      	movs	r2, #0
    7598:	2100      	movs	r1, #0
    759a:	4804      	ldr	r0, [pc, #16]	; (75ac <demo_output_freezer_options+0x18>)
    759c:	4b04      	ldr	r3, [pc, #16]	; (75b0 <demo_output_freezer_options+0x1c>)
    759e:	4798      	blx	r3
	delay_ms(1000);
    75a0:	20fa      	movs	r0, #250	; 0xfa
    75a2:	0080      	lsls	r0, r0, #2
    75a4:	4b03      	ldr	r3, [pc, #12]	; (75b4 <demo_output_freezer_options+0x20>)
    75a6:	4798      	blx	r3
#endif
}
    75a8:	bd10      	pop	{r4, pc}
    75aa:	46c0      	nop			; (mov r8, r8)
    75ac:	000197b0 	.word	0x000197b0
    75b0:	00008109 	.word	0x00008109
    75b4:	00004799 	.word	0x00004799

000075b8 <DemoOutput_Channel>:
void DemoOutput_Channel(uint8_t channel, uint8_t Step)
{
    75b8:	b570      	push	{r4, r5, r6, lr}
    75ba:	0004      	movs	r4, r0
    if( Step == 0 )
    75bc:	2900      	cmp	r1, #0
    75be:	d00e      	beq.n	75de <DemoOutput_Channel+0x26>
#endif
    }
    else
    { 
#if defined (ENABLE_LCD)
        LCDDisplay((char *)"Connected Peer on \n Channel ", channel, true);
    75c0:	2201      	movs	r2, #1
    75c2:	0001      	movs	r1, r0
    75c4:	480d      	ldr	r0, [pc, #52]	; (75fc <DemoOutput_Channel+0x44>)
    75c6:	4b0e      	ldr	r3, [pc, #56]	; (7600 <DemoOutput_Channel+0x48>)
    75c8:	4798      	blx	r3
#endif
#if defined (ENABLE_CONSOLE)
        #if !defined(MIWIKIT)
        printf("\r\nConnected Peer on Channel ");
    75ca:	480e      	ldr	r0, [pc, #56]	; (7604 <DemoOutput_Channel+0x4c>)
    75cc:	4d0e      	ldr	r5, [pc, #56]	; (7608 <DemoOutput_Channel+0x50>)
    75ce:	47a8      	blx	r5
        printf("%d",channel);
    75d0:	0021      	movs	r1, r4
    75d2:	480e      	ldr	r0, [pc, #56]	; (760c <DemoOutput_Channel+0x54>)
    75d4:	47a8      	blx	r5
        printf("\r\n");
    75d6:	480e      	ldr	r0, [pc, #56]	; (7610 <DemoOutput_Channel+0x58>)
    75d8:	4b0e      	ldr	r3, [pc, #56]	; (7614 <DemoOutput_Channel+0x5c>)
    75da:	4798      	blx	r3
        #endif
#endif
    }
}    
    75dc:	bd70      	pop	{r4, r5, r6, pc}
        LCDDisplay((char *)"Connecting Peer on \n Channel ", channel, true);
    75de:	2201      	movs	r2, #1
    75e0:	0001      	movs	r1, r0
    75e2:	480d      	ldr	r0, [pc, #52]	; (7618 <DemoOutput_Channel+0x60>)
    75e4:	4b06      	ldr	r3, [pc, #24]	; (7600 <DemoOutput_Channel+0x48>)
    75e6:	4798      	blx	r3
        printf("\r\nConnecting Peer on Channel ");
    75e8:	480c      	ldr	r0, [pc, #48]	; (761c <DemoOutput_Channel+0x64>)
    75ea:	4d07      	ldr	r5, [pc, #28]	; (7608 <DemoOutput_Channel+0x50>)
    75ec:	47a8      	blx	r5
        printf("%d",channel);
    75ee:	0021      	movs	r1, r4
    75f0:	4806      	ldr	r0, [pc, #24]	; (760c <DemoOutput_Channel+0x54>)
    75f2:	47a8      	blx	r5
        printf("\r\n");
    75f4:	4806      	ldr	r0, [pc, #24]	; (7610 <DemoOutput_Channel+0x58>)
    75f6:	4b07      	ldr	r3, [pc, #28]	; (7614 <DemoOutput_Channel+0x5c>)
    75f8:	4798      	blx	r3
    75fa:	e7ef      	b.n	75dc <DemoOutput_Channel+0x24>
    75fc:	00019400 	.word	0x00019400
    7600:	00008109 	.word	0x00008109
    7604:	00019420 	.word	0x00019420
    7608:	00017e25 	.word	0x00017e25
    760c:	000193fc 	.word	0x000193fc
    7610:	00019930 	.word	0x00019930
    7614:	00017f41 	.word	0x00017f41
    7618:	000193bc 	.word	0x000193bc
    761c:	000193dc 	.word	0x000193dc

00007620 <DemoOutput_HandleMessage>:
#endif
}


void DemoOutput_HandleMessage(void)
{
    7620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	uint8_t startPayloadIndex = 0;
	
    if( rxMessage.flags.bits.secEn )
    7622:	4b2a      	ldr	r3, [pc, #168]	; (76cc <DemoOutput_HandleMessage+0xac>)
    7624:	781b      	ldrb	r3, [r3, #0]
    7626:	071b      	lsls	r3, r3, #28
    7628:	d426      	bmi.n	7678 <DemoOutput_HandleMessage+0x58>
    {
        sio2host_tx((uint8_t *)"Secured ", sizeof("Secured "));
    }

    if( rxMessage.flags.bits.broadcast )
    762a:	4b28      	ldr	r3, [pc, #160]	; (76cc <DemoOutput_HandleMessage+0xac>)
    762c:	781b      	ldrb	r3, [r3, #0]
    762e:	079b      	lsls	r3, r3, #30
    7630:	d027      	beq.n	7682 <DemoOutput_HandleMessage+0x62>
    {
        sio2host_tx((uint8_t *)"Broadcast Packet with RSSI ", sizeof("Broadcast Packet with RSSI "));
    7632:	211c      	movs	r1, #28
    7634:	4826      	ldr	r0, [pc, #152]	; (76d0 <DemoOutput_HandleMessage+0xb0>)
    7636:	4b27      	ldr	r3, [pc, #156]	; (76d4 <DemoOutput_HandleMessage+0xb4>)
    7638:	4798      	blx	r3
    }
    else
    {
        sio2host_tx((uint8_t *)"Unicast Packet with RSSI ",sizeof("Unicast Packet with RSSI "));
    }
    printf("%02x", rxMessage.PacketRSSI);
    763a:	4c24      	ldr	r4, [pc, #144]	; (76cc <DemoOutput_HandleMessage+0xac>)
    763c:	7b61      	ldrb	r1, [r4, #13]
    763e:	4826      	ldr	r0, [pc, #152]	; (76d8 <DemoOutput_HandleMessage+0xb8>)
    7640:	4b26      	ldr	r3, [pc, #152]	; (76dc <DemoOutput_HandleMessage+0xbc>)
    7642:	4798      	blx	r3
    if( rxMessage.flags.bits.srcPrsnt )
    7644:	7823      	ldrb	r3, [r4, #0]
    7646:	065b      	lsls	r3, r3, #25
    7648:	d420      	bmi.n	768c <DemoOutput_HandleMessage+0x6c>
            {
                printf("%x", rxMessage.SourceAddress[MY_ADDRESS_LENGTH-1-i]);
            }    
        }
    }
    sio2host_tx((uint8_t *)": ",sizeof(": "));
    764a:	2103      	movs	r1, #3
    764c:	4824      	ldr	r0, [pc, #144]	; (76e0 <DemoOutput_HandleMessage+0xc0>)
    764e:	4b21      	ldr	r3, [pc, #132]	; (76d4 <DemoOutput_HandleMessage+0xb4>)
    7650:	4798      	blx	r3
	//{
	    //startPayloadIndex = 3;
	//}
#endif

    for(i = startPayloadIndex; i < rxMessage.PayloadSize; i++)
    7652:	4b1e      	ldr	r3, [pc, #120]	; (76cc <DemoOutput_HandleMessage+0xac>)
    7654:	7b1b      	ldrb	r3, [r3, #12]
    7656:	2b00      	cmp	r3, #0
    7658:	d00a      	beq.n	7670 <DemoOutput_HandleMessage+0x50>
    765a:	2400      	movs	r4, #0
    {
        sio2host_putchar(rxMessage.Payload[i]);
    765c:	4d1b      	ldr	r5, [pc, #108]	; (76cc <DemoOutput_HandleMessage+0xac>)
    765e:	4e21      	ldr	r6, [pc, #132]	; (76e4 <DemoOutput_HandleMessage+0xc4>)
    7660:	68ab      	ldr	r3, [r5, #8]
    7662:	5d18      	ldrb	r0, [r3, r4]
    7664:	47b0      	blx	r6
    for(i = startPayloadIndex; i < rxMessage.PayloadSize; i++)
    7666:	3401      	adds	r4, #1
    7668:	b2e4      	uxtb	r4, r4
    766a:	7b2b      	ldrb	r3, [r5, #12]
    766c:	42a3      	cmp	r3, r4
    766e:	d8f7      	bhi.n	7660 <DemoOutput_HandleMessage+0x40>
    }   
	printf("\r\n");    
    7670:	481d      	ldr	r0, [pc, #116]	; (76e8 <DemoOutput_HandleMessage+0xc8>)
    7672:	4b1e      	ldr	r3, [pc, #120]	; (76ec <DemoOutput_HandleMessage+0xcc>)
    7674:	4798      	blx	r3
} 
    7676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        sio2host_tx((uint8_t *)"Secured ", sizeof("Secured "));
    7678:	2109      	movs	r1, #9
    767a:	481d      	ldr	r0, [pc, #116]	; (76f0 <DemoOutput_HandleMessage+0xd0>)
    767c:	4b15      	ldr	r3, [pc, #84]	; (76d4 <DemoOutput_HandleMessage+0xb4>)
    767e:	4798      	blx	r3
    7680:	e7d3      	b.n	762a <DemoOutput_HandleMessage+0xa>
        sio2host_tx((uint8_t *)"Unicast Packet with RSSI ",sizeof("Unicast Packet with RSSI "));
    7682:	211a      	movs	r1, #26
    7684:	481b      	ldr	r0, [pc, #108]	; (76f4 <DemoOutput_HandleMessage+0xd4>)
    7686:	4b13      	ldr	r3, [pc, #76]	; (76d4 <DemoOutput_HandleMessage+0xb4>)
    7688:	4798      	blx	r3
    768a:	e7d6      	b.n	763a <DemoOutput_HandleMessage+0x1a>
        sio2host_tx((uint8_t *)" from ", sizeof(" from "));
    768c:	2107      	movs	r1, #7
    768e:	481a      	ldr	r0, [pc, #104]	; (76f8 <DemoOutput_HandleMessage+0xd8>)
    7690:	4b10      	ldr	r3, [pc, #64]	; (76d4 <DemoOutput_HandleMessage+0xb4>)
    7692:	4798      	blx	r3
        if( rxMessage.flags.bits.altSrcAddr )
    7694:	4b0d      	ldr	r3, [pc, #52]	; (76cc <DemoOutput_HandleMessage+0xac>)
    7696:	781b      	ldrb	r3, [r3, #0]
    7698:	2407      	movs	r4, #7
    769a:	2b7f      	cmp	r3, #127	; 0x7f
    769c:	d809      	bhi.n	76b2 <DemoOutput_HandleMessage+0x92>
                printf("%x", rxMessage.SourceAddress[MY_ADDRESS_LENGTH-1-i]);
    769e:	4f0b      	ldr	r7, [pc, #44]	; (76cc <DemoOutput_HandleMessage+0xac>)
    76a0:	4e16      	ldr	r6, [pc, #88]	; (76fc <DemoOutput_HandleMessage+0xdc>)
    76a2:	4d0e      	ldr	r5, [pc, #56]	; (76dc <DemoOutput_HandleMessage+0xbc>)
    76a4:	687b      	ldr	r3, [r7, #4]
    76a6:	5d19      	ldrb	r1, [r3, r4]
    76a8:	0030      	movs	r0, r6
    76aa:	47a8      	blx	r5
            for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    76ac:	3c01      	subs	r4, #1
    76ae:	d2f9      	bcs.n	76a4 <DemoOutput_HandleMessage+0x84>
    76b0:	e7cb      	b.n	764a <DemoOutput_HandleMessage+0x2a>
            printf( "%x", rxMessage.SourceAddress[1]);
    76b2:	4e06      	ldr	r6, [pc, #24]	; (76cc <DemoOutput_HandleMessage+0xac>)
    76b4:	6873      	ldr	r3, [r6, #4]
    76b6:	7859      	ldrb	r1, [r3, #1]
    76b8:	4d10      	ldr	r5, [pc, #64]	; (76fc <DemoOutput_HandleMessage+0xdc>)
    76ba:	0028      	movs	r0, r5
    76bc:	4c07      	ldr	r4, [pc, #28]	; (76dc <DemoOutput_HandleMessage+0xbc>)
    76be:	47a0      	blx	r4
            printf( "%x", rxMessage.SourceAddress[0]);
    76c0:	6873      	ldr	r3, [r6, #4]
    76c2:	7819      	ldrb	r1, [r3, #0]
    76c4:	0028      	movs	r0, r5
    76c6:	47a0      	blx	r4
    76c8:	e7bf      	b.n	764a <DemoOutput_HandleMessage+0x2a>
    76ca:	46c0      	nop			; (mov r8, r8)
    76cc:	20003354 	.word	0x20003354
    76d0:	00019724 	.word	0x00019724
    76d4:	0000d655 	.word	0x0000d655
    76d8:	0001975c 	.word	0x0001975c
    76dc:	00017e25 	.word	0x00017e25
    76e0:	00019770 	.word	0x00019770
    76e4:	0000d681 	.word	0x0000d681
    76e8:	00019930 	.word	0x00019930
    76ec:	00017f41 	.word	0x00017f41
    76f0:	00019718 	.word	0x00019718
    76f4:	00019740 	.word	0x00019740
    76f8:	00019764 	.word	0x00019764
    76fc:	0001976c 	.word	0x0001976c

00007700 <DemoOutput_UpdateTxRx>:

void DemoOutput_UpdateTxRx(uint8_t TxNum, uint8_t RxNum)
{
    7700:	b510      	push	{r4, lr}
#if defined (ENABLE_LCD)
    LCDTRXCount(TxNum, RxNum);  
    7702:	4b01      	ldr	r3, [pc, #4]	; (7708 <DemoOutput_UpdateTxRx+0x8>)
    7704:	4798      	blx	r3
#endif
}
    7706:	bd10      	pop	{r4, pc}
    7708:	000080ad 	.word	0x000080ad

0000770c <DemoOutput_ChannelError>:

void DemoOutput_ChannelError(uint8_t channel)
{
    770c:	b570      	push	{r4, r5, r6, lr}
    770e:	0005      	movs	r5, r0
    #if defined (ENABLE_CONSOLE)
        printf("\r\nSelection of channel ");
    7710:	4804      	ldr	r0, [pc, #16]	; (7724 <DemoOutput_ChannelError+0x18>)
    7712:	4c05      	ldr	r4, [pc, #20]	; (7728 <DemoOutput_ChannelError+0x1c>)
    7714:	47a0      	blx	r4
        printf("%d", channel);
    7716:	0029      	movs	r1, r5
    7718:	4804      	ldr	r0, [pc, #16]	; (772c <DemoOutput_ChannelError+0x20>)
    771a:	47a0      	blx	r4
        printf(" is not supported in current configuration.\r\n");
    771c:	4804      	ldr	r0, [pc, #16]	; (7730 <DemoOutput_ChannelError+0x24>)
    771e:	4b05      	ldr	r3, [pc, #20]	; (7734 <DemoOutput_ChannelError+0x28>)
    7720:	4798      	blx	r3
    #endif
}
    7722:	bd70      	pop	{r4, r5, r6, pc}
    7724:	00019440 	.word	0x00019440
    7728:	00017e25 	.word	0x00017e25
    772c:	000193fc 	.word	0x000193fc
    7730:	00019458 	.word	0x00019458
    7734:	00017f41 	.word	0x00017f41

00007738 <DemoOutput_BroadcastFail>:
    LCDDisplay((char *)" Unicast Failed", 0, true);
#endif
}    

void DemoOutput_BroadcastFail(void)
{
    7738:	b510      	push	{r4, lr}
	#if defined (ENABLE_CONSOLE)
	printf("\r\nBroadcast Failed\r\n");
    773a:	4804      	ldr	r0, [pc, #16]	; (774c <DemoOutput_BroadcastFail+0x14>)
    773c:	4b04      	ldr	r3, [pc, #16]	; (7750 <DemoOutput_BroadcastFail+0x18>)
    773e:	4798      	blx	r3
	#endif
	#if defined (ENABLE_LCD)
	LCDDisplay((char *)" Broadcast Failed", 0, true);
    7740:	2201      	movs	r2, #1
    7742:	2100      	movs	r1, #0
    7744:	4803      	ldr	r0, [pc, #12]	; (7754 <DemoOutput_BroadcastFail+0x1c>)
    7746:	4b04      	ldr	r3, [pc, #16]	; (7758 <DemoOutput_BroadcastFail+0x20>)
    7748:	4798      	blx	r3
	#endif
}    
    774a:	bd10      	pop	{r4, pc}
    774c:	00019394 	.word	0x00019394
    7750:	00017f41 	.word	0x00017f41
    7754:	000193a8 	.word	0x000193a8
    7758:	00008109 	.word	0x00008109

0000775c <STAR_DEMO_OPTIONS_MESSAGE>:
	#endif
	delay_ms(1200);
}

void STAR_DEMO_OPTIONS_MESSAGE(DeviceRole_t deviceRole)
{
    775c:	b510      	push	{r4, lr}
	#if defined (ENABLE_LCD)
	if (deviceRole == PAN_COORD)
    775e:	2801      	cmp	r0, #1
    7760:	d005      	beq.n	776e <STAR_DEMO_OPTIONS_MESSAGE+0x12>
		#endif
	}
	else
	{
		#if (defined EXT_BOARD_OLED1_XPLAINED_PRO)
		LCDDisplay((char *)"SW0:  Unicast \nBUTTON1: Next Node", 0, false);
    7762:	2200      	movs	r2, #0
    7764:	2100      	movs	r1, #0
    7766:	4805      	ldr	r0, [pc, #20]	; (777c <STAR_DEMO_OPTIONS_MESSAGE+0x20>)
    7768:	4b05      	ldr	r3, [pc, #20]	; (7780 <STAR_DEMO_OPTIONS_MESSAGE+0x24>)
    776a:	4798      	blx	r3
		#endif
	}
	#endif
}
    776c:	bd10      	pop	{r4, pc}
		LCDDisplay((char *)"PC :SW0 to Broadcast", 0, false);
    776e:	2200      	movs	r2, #0
    7770:	2100      	movs	r1, #0
    7772:	4804      	ldr	r0, [pc, #16]	; (7784 <STAR_DEMO_OPTIONS_MESSAGE+0x28>)
    7774:	4b02      	ldr	r3, [pc, #8]	; (7780 <STAR_DEMO_OPTIONS_MESSAGE+0x24>)
    7776:	4798      	blx	r3
    7778:	e7f8      	b.n	776c <STAR_DEMO_OPTIONS_MESSAGE+0x10>
    777a:	46c0      	nop			; (mov r8, r8)
    777c:	0001978c 	.word	0x0001978c
    7780:	00008109 	.word	0x00008109
    7784:	00019774 	.word	0x00019774

00007788 <ButtonPressed>:
 *
 * Note:
 ********************************************************************/

uint8_t ButtonPressed(void)
{
    7788:	b510      	push	{r4, lr}
	return (port_base->IN.reg & pin_mask);
    778a:	4b19      	ldr	r3, [pc, #100]	; (77f0 <ButtonPressed+0x68>)
    778c:	6a1b      	ldr	r3, [r3, #32]
    MIWI_TICK tickDifference;
    if(!port_pin_get_input_level(BUTTON_0_PIN))
    778e:	00db      	lsls	r3, r3, #3
    7790:	d40e      	bmi.n	77b0 <ButtonPressed+0x28>
    {
        //if the button was previously not pressed
        if(PUSH_BUTTON_pressed == false)
    7792:	4b18      	ldr	r3, [pc, #96]	; (77f4 <ButtonPressed+0x6c>)
    7794:	781b      	ldrb	r3, [r3, #0]
        if(tickDifference.Val > DEBOUNCE_TIME)
        {
            PUSH_BUTTON_pressed = false;
        }
    }
    return 0;
    7796:	2000      	movs	r0, #0
        if(PUSH_BUTTON_pressed == false)
    7798:	2b00      	cmp	r3, #0
    779a:	d000      	beq.n	779e <ButtonPressed+0x16>
}
    779c:	bd10      	pop	{r4, pc}
            PUSH_BUTTON_pressed = true;
    779e:	2201      	movs	r2, #1
    77a0:	4b14      	ldr	r3, [pc, #80]	; (77f4 <ButtonPressed+0x6c>)
    77a2:	701a      	strb	r2, [r3, #0]
            PUSH_BUTTON_press_time.Val = MiWi_TickGet();
    77a4:	4b14      	ldr	r3, [pc, #80]	; (77f8 <ButtonPressed+0x70>)
    77a6:	4798      	blx	r3
    77a8:	4b14      	ldr	r3, [pc, #80]	; (77fc <ButtonPressed+0x74>)
    77aa:	6018      	str	r0, [r3, #0]
            return 1;
    77ac:	2001      	movs	r0, #1
    77ae:	e7f5      	b.n	779c <ButtonPressed+0x14>
    77b0:	4b0f      	ldr	r3, [pc, #60]	; (77f0 <ButtonPressed+0x68>)
    77b2:	6a1b      	ldr	r3, [r3, #32]
    else if(!port_pin_get_input_level(WING_BUTTON_1))
    77b4:	025b      	lsls	r3, r3, #9
    77b6:	d40d      	bmi.n	77d4 <ButtonPressed+0x4c>
	    if(PUSH_BUTTON_pressed == false)
    77b8:	4b0e      	ldr	r3, [pc, #56]	; (77f4 <ButtonPressed+0x6c>)
    77ba:	781b      	ldrb	r3, [r3, #0]
    return 0;
    77bc:	2000      	movs	r0, #0
	    if(PUSH_BUTTON_pressed == false)
    77be:	2b00      	cmp	r3, #0
    77c0:	d1ec      	bne.n	779c <ButtonPressed+0x14>
		    PUSH_BUTTON_pressed = true;
    77c2:	2201      	movs	r2, #1
    77c4:	4b0b      	ldr	r3, [pc, #44]	; (77f4 <ButtonPressed+0x6c>)
    77c6:	701a      	strb	r2, [r3, #0]
		    PUSH_BUTTON_press_time.Val = MiWi_TickGet();
    77c8:	4b0b      	ldr	r3, [pc, #44]	; (77f8 <ButtonPressed+0x70>)
    77ca:	4798      	blx	r3
    77cc:	4b0b      	ldr	r3, [pc, #44]	; (77fc <ButtonPressed+0x74>)
    77ce:	6018      	str	r0, [r3, #0]
		    return 2;
    77d0:	2002      	movs	r0, #2
    77d2:	e7e3      	b.n	779c <ButtonPressed+0x14>
		t.Val = MiWi_TickGet();
    77d4:	4b08      	ldr	r3, [pc, #32]	; (77f8 <ButtonPressed+0x70>)
    77d6:	4798      	blx	r3
        tickDifference.Val = MiWi_TickGetDiff(t,PUSH_BUTTON_press_time);
    77d8:	4b08      	ldr	r3, [pc, #32]	; (77fc <ButtonPressed+0x74>)
    77da:	6819      	ldr	r1, [r3, #0]
    77dc:	4b08      	ldr	r3, [pc, #32]	; (7800 <ButtonPressed+0x78>)
    77de:	4798      	blx	r3
        if(tickDifference.Val > DEBOUNCE_TIME)
    77e0:	4b08      	ldr	r3, [pc, #32]	; (7804 <ButtonPressed+0x7c>)
    77e2:	4298      	cmp	r0, r3
    77e4:	d902      	bls.n	77ec <ButtonPressed+0x64>
            PUSH_BUTTON_pressed = false;
    77e6:	2200      	movs	r2, #0
    77e8:	4b02      	ldr	r3, [pc, #8]	; (77f4 <ButtonPressed+0x6c>)
    77ea:	701a      	strb	r2, [r3, #0]
    return 0;
    77ec:	2000      	movs	r0, #0
    77ee:	e7d5      	b.n	779c <ButtonPressed+0x14>
    77f0:	40002800 	.word	0x40002800
    77f4:	20002180 	.word	0x20002180
    77f8:	0000d3f5 	.word	0x0000d3f5
    77fc:	20002184 	.word	0x20002184
    7800:	0000d455 	.word	0x0000d455
    7804:	00003fff 	.word	0x00003fff

00007808 <Buttons_init>:
#if (defined EXT_BOARD_OLED1_XPLAINED_PRO)
/**
 * \brief Configures buttons
 */
void Buttons_init(void)
{
    7808:	b530      	push	{r4, r5, lr}
    780a:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    780c:	ac01      	add	r4, sp, #4
    780e:	2300      	movs	r3, #0
    7810:	7023      	strb	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    7812:	2201      	movs	r2, #1
    7814:	7062      	strb	r2, [r4, #1]
	config->powersave  = false;
    7816:	70a3      	strb	r3, [r4, #2]

	conf.direction = PORT_PIN_DIR_INPUT;
	conf.input_pull = PORT_PIN_PULL_UP;

	/* Configure all three buttons as inputs */
	port_pin_set_config(WING_BUTTON_1, &conf);
    7818:	0021      	movs	r1, r4
    781a:	2016      	movs	r0, #22
    781c:	4d04      	ldr	r5, [pc, #16]	; (7830 <Buttons_init+0x28>)
    781e:	47a8      	blx	r5
	port_pin_set_config(WING_BUTTON_2, &conf);
    7820:	0021      	movs	r1, r4
    7822:	2006      	movs	r0, #6
    7824:	47a8      	blx	r5
	port_pin_set_config(WING_BUTTON_3, &conf);
    7826:	0021      	movs	r1, r4
    7828:	2007      	movs	r0, #7
    782a:	47a8      	blx	r5
}
    782c:	b003      	add	sp, #12
    782e:	bd30      	pop	{r4, r5, pc}
    7830:	00005259 	.word	0x00005259

00007834 <APP_TaskHandler>:

/*********************************************************************//*
 \brief      Application Task Handler
 ************************************************************************/
SYSTEM_TaskStatus_t APP_TaskHandler(void)
{
    7834:	b510      	push	{r4, lr}
    Run_Demo();
    7836:	4b02      	ldr	r3, [pc, #8]	; (7840 <APP_TaskHandler+0xc>)
    7838:	4798      	blx	r3
    return SYSTEM_TASK_SUCCESS;
}
    783a:	2000      	movs	r0, #0
    783c:	bd10      	pop	{r4, pc}
    783e:	46c0      	nop			; (mov r8, r8)
    7840:	00008055 	.word	0x00008055

00007844 <ReadMacAddress>:
* Overview:		    Uses the MAC Address for addressing
*
* Note:			    
**********************************************************************/
void ReadMacAddress(void)
{
    7844:	b510      	push	{r4, lr}
    7846:	b082      	sub	sp, #8
    7848:	466b      	mov	r3, sp
    784a:	4669      	mov	r1, sp
    784c:	4a0c      	ldr	r2, [pc, #48]	; (7880 <ReadMacAddress+0x3c>)
#elif (defined(__WLR089U0__))
	// applicable for module with WLR089 Xpro board or custom board
	#define NVM_UID_ADDRESS   ((volatile uint16_t *)(0x0080400AU))
	uint8_t i = 0, j = 0 ;
	uint8_t peui64[8] ;
	for (i = 0; i < MY_ADDRESS_LENGTH; i += 2, j++)
    784e:	4c0d      	ldr	r4, [pc, #52]	; (7884 <ReadMacAddress+0x40>)
	{
		peui64[i] = (NVM_UID_ADDRESS[j] & 0xFF) ;
    7850:	8810      	ldrh	r0, [r2, #0]
    7852:	7008      	strb	r0, [r1, #0]
		peui64[i + 1] = (NVM_UID_ADDRESS[j] >> 8) ;
    7854:	8810      	ldrh	r0, [r2, #0]
    7856:	0a00      	lsrs	r0, r0, #8
    7858:	7048      	strb	r0, [r1, #1]
    785a:	3202      	adds	r2, #2
    785c:	3102      	adds	r1, #2
	for (i = 0; i < MY_ADDRESS_LENGTH; i += 2, j++)
    785e:	42a2      	cmp	r2, r4
    7860:	d1f6      	bne.n	7850 <ReadMacAddress+0xc>
    7862:	4a09      	ldr	r2, [pc, #36]	; (7888 <ReadMacAddress+0x44>)
    7864:	2008      	movs	r0, #8
    7866:	4240      	negs	r0, r0
    7868:	4468      	add	r0, sp
	}

	for (i= 0; i < MY_ADDRESS_LENGTH; i++)
	{
		myLongAddress[i] = peui64[MY_ADDRESS_LENGTH-i-1] ;
    786a:	79d9      	ldrb	r1, [r3, #7]
    786c:	7011      	strb	r1, [r2, #0]
    786e:	3b01      	subs	r3, #1
    7870:	3201      	adds	r2, #1
	for (i= 0; i < MY_ADDRESS_LENGTH; i++)
    7872:	4283      	cmp	r3, r0
    7874:	d1f9      	bne.n	786a <ReadMacAddress+0x26>
	}
	printf("\n\r");
    7876:	4805      	ldr	r0, [pc, #20]	; (788c <ReadMacAddress+0x48>)
    7878:	4b05      	ldr	r3, [pc, #20]	; (7890 <ReadMacAddress+0x4c>)
    787a:	4798      	blx	r3
#endif
}
    787c:	b002      	add	sp, #8
    787e:	bd10      	pop	{r4, pc}
    7880:	0080400a 	.word	0x0080400a
    7884:	00804012 	.word	0x00804012
    7888:	20000020 	.word	0x20000020
    788c:	0001a224 	.word	0x0001a224
    7890:	00017e25 	.word	0x00017e25

00007894 <main>:
{   
    7894:	b570      	push	{r4, r5, r6, lr}
	system_init();
    7896:	4b14      	ldr	r3, [pc, #80]	; (78e8 <main+0x54>)
    7898:	4798      	blx	r3
	delay_init();
    789a:	4b14      	ldr	r3, [pc, #80]	; (78ec <main+0x58>)
    789c:	4798      	blx	r3
	cpu_irq_enable();
    789e:	2201      	movs	r2, #1
    78a0:	4b13      	ldr	r3, [pc, #76]	; (78f0 <main+0x5c>)
    78a2:	701a      	strb	r2, [r3, #0]
    78a4:	f3bf 8f5f 	dmb	sy
    78a8:	b662      	cpsie	i
	LCD_Initialize();
    78aa:	4b12      	ldr	r3, [pc, #72]	; (78f4 <main+0x60>)
    78ac:	4798      	blx	r3
	sio2host_init();
    78ae:	4b12      	ldr	r3, [pc, #72]	; (78f8 <main+0x64>)
    78b0:	4798      	blx	r3
	ReadMacAddress(); 
    78b2:	4b12      	ldr	r3, [pc, #72]	; (78fc <main+0x68>)
    78b4:	4798      	blx	r3
	SystemTimerInit();
    78b6:	4b12      	ldr	r3, [pc, #72]	; (7900 <main+0x6c>)
    78b8:	4798      	blx	r3
    DemoOutput_Greeting();	
    78ba:	4b12      	ldr	r3, [pc, #72]	; (7904 <main+0x70>)
    78bc:	4798      	blx	r3
    Buttons_init();
    78be:	4b12      	ldr	r3, [pc, #72]	; (7908 <main+0x74>)
    78c0:	4798      	blx	r3
    nvm_init(INT_FLASH);
    78c2:	2000      	movs	r0, #0
    78c4:	4b11      	ldr	r3, [pc, #68]	; (790c <main+0x78>)
    78c6:	4798      	blx	r3
    PDS_Init();
    78c8:	4b11      	ldr	r3, [pc, #68]	; (7910 <main+0x7c>)
    78ca:	4798      	blx	r3
    demo_output_freezer_options();
    78cc:	4b11      	ldr	r3, [pc, #68]	; (7914 <main+0x80>)
    78ce:	4798      	blx	r3
    freezer_enable = freezer_feature();
    78d0:	4b11      	ldr	r3, [pc, #68]	; (7918 <main+0x84>)
    78d2:	4798      	blx	r3
    Initialize_Demo(freezer_enable);
    78d4:	4b11      	ldr	r3, [pc, #68]	; (791c <main+0x88>)
    78d6:	4798      	blx	r3
    Stack_Init();
    78d8:	4b11      	ldr	r3, [pc, #68]	; (7920 <main+0x8c>)
    78da:	4798      	blx	r3
		SYSTEM_RunTasks();
    78dc:	4d11      	ldr	r5, [pc, #68]	; (7924 <main+0x90>)
		Run_Demo();
    78de:	4c12      	ldr	r4, [pc, #72]	; (7928 <main+0x94>)
		SYSTEM_RunTasks();
    78e0:	47a8      	blx	r5
		Run_Demo();
    78e2:	47a0      	blx	r4
    78e4:	e7fc      	b.n	78e0 <main+0x4c>
    78e6:	46c0      	nop			; (mov r8, r8)
    78e8:	00006c7d 	.word	0x00006c7d
    78ec:	0000472d 	.word	0x0000472d
    78f0:	20000014 	.word	0x20000014
    78f4:	00008069 	.word	0x00008069
    78f8:	0000d509 	.word	0x0000d509
    78fc:	00007845 	.word	0x00007845
    7900:	0000e4f1 	.word	0x0000e4f1
    7904:	00007509 	.word	0x00007509
    7908:	00007809 	.word	0x00007809
    790c:	0000f039 	.word	0x0000f039
    7910:	00009a59 	.word	0x00009a59
    7914:	00007595 	.word	0x00007595
    7918:	00007db5 	.word	0x00007db5
    791c:	00007e0d 	.word	0x00007e0d
    7920:	0000eb29 	.word	0x0000eb29
    7924:	0000eb39 	.word	0x0000eb39
    7928:	00008055 	.word	0x00008055

0000792c <dataConfcb>:
	SwTimerStop(TxTimerId);
}

// Transmission callback
void dataConfcb(uint8_t handle, miwi_status_t status, uint8_t* msgPointer)
{
    792c:	b510      	push	{r4, lr}
    792e:	0014      	movs	r4, r2
#if defined (ENABLE_CONSOLE)
	printf("\nData Confirm: Handle: %d status:%d \r\n", handle, status);
    7930:	000a      	movs	r2, r1
    7932:	0001      	movs	r1, r0
    7934:	4806      	ldr	r0, [pc, #24]	; (7950 <dataConfcb+0x24>)
    7936:	4b07      	ldr	r3, [pc, #28]	; (7954 <dataConfcb+0x28>)
    7938:	4798      	blx	r3
#endif // #if defined (ENABLE_CONSOLE)
#if defined(ENABLE_SLEEP_FEATURE)
	send_data = 0;
#endif // #if defined(ENABLE_SLEEP_FEATURE)
#if defined(PROTOCOL_STAR)
    SendData = false;
    793a:	2200      	movs	r2, #0
    793c:	4b06      	ldr	r3, [pc, #24]	; (7958 <dataConfcb+0x2c>)
    793e:	701a      	strb	r2, [r3, #0]
#endif
	/* Stop transmission timeout timer */
	SwTimerStop(TxTimerId);
    7940:	4b06      	ldr	r3, [pc, #24]	; (795c <dataConfcb+0x30>)
    7942:	7818      	ldrb	r0, [r3, #0]
    7944:	4b06      	ldr	r3, [pc, #24]	; (7960 <dataConfcb+0x34>)
    7946:	4798      	blx	r3
	/* Free payload buffer allocated */
	MiMem_Free(msgPointer);
    7948:	0020      	movs	r0, r4
    794a:	4b06      	ldr	r3, [pc, #24]	; (7964 <dataConfcb+0x38>)
    794c:	4798      	blx	r3
	SwTimerStart (DutyCyclingTimerId, MS_TO_US(dutyCyclingDurationMilliSec) , 0/*SW_TIMEOUT_RELATIVE*/, (void *)dutyCyclingCallback, NULL) ;
	#if defined (ENABLE_CONSOLE)
	printf("Send next data after: %ld ms\r\n", dutyCyclingDurationMilliSec) ;
	#endif
#endif // #ifdef DUTY_CYCLING
}
    794e:	bd10      	pop	{r4, pc}
    7950:	00019808 	.word	0x00019808
    7954:	00017e25 	.word	0x00017e25
    7958:	200004a0 	.word	0x200004a0
    795c:	20000303 	.word	0x20000303
    7960:	0000e8a5 	.word	0x0000e8a5
    7964:	0000d271 	.word	0x0000d271

00007968 <run_star_demo>:

void run_star_demo(void)
{
    7968:	b5f0      	push	{r4, r5, r6, r7, lr}
    796a:	46d6      	mov	lr, sl
    796c:	464f      	mov	r7, r9
    796e:	4646      	mov	r6, r8
    7970:	b5c0      	push	{r6, r7, lr}
    7972:	b086      	sub	sp, #24
#if defined(PROTOCOL_STAR)
  t1.Val = MiWi_TickGet ();
    7974:	4b9d      	ldr	r3, [pc, #628]	; (7bec <run_star_demo+0x284>)
    7976:	4798      	blx	r3
    7978:	4b9d      	ldr	r3, [pc, #628]	; (7bf0 <run_star_demo+0x288>)
    797a:	6018      	str	r0, [r3, #0]
  display_connections = true;
    797c:	2201      	movs	r2, #1
    797e:	4b9d      	ldr	r3, [pc, #628]	; (7bf4 <run_star_demo+0x28c>)
    7980:	701a      	strb	r2, [r3, #0]
								break;
							} // if(switch_val == 1)
							else if(switch_val == 2)
							{
#if defined(PROTOCOL_STAR)
								if (select_ed > end_nodes-1)  /* Reset Peer Device Info */
    7982:	4d9d      	ldr	r5, [pc, #628]	; (7bf8 <run_star_demo+0x290>)
    7984:	4c9d      	ldr	r4, [pc, #628]	; (7bfc <run_star_demo+0x294>)
    7986:	e0f3      	b.n	7b70 <run_star_demo+0x208>
			if (role == PAN_COORD)
    7988:	4b9d      	ldr	r3, [pc, #628]	; (7c00 <run_star_demo+0x298>)
    798a:	781b      	ldrb	r3, [r3, #0]
    798c:	2b01      	cmp	r3, #1
    798e:	d00b      	beq.n	79a8 <run_star_demo+0x40>
					chk_sel_status = true;
    7990:	2301      	movs	r3, #1
    7992:	4a9c      	ldr	r2, [pc, #624]	; (7c04 <run_star_demo+0x29c>)
    7994:	7013      	strb	r3, [r2, #0]
					select_ed = 0;
    7996:	2100      	movs	r1, #0
    7998:	4a97      	ldr	r2, [pc, #604]	; (7bf8 <run_star_demo+0x290>)
    799a:	7011      	strb	r1, [r2, #0]
					update_ed = true;
    799c:	4a9a      	ldr	r2, [pc, #616]	; (7c08 <run_star_demo+0x2a0>)
    799e:	7013      	strb	r3, [r2, #0]
					while(update_ed == true)
    79a0:	4692      	mov	sl, r2
						LCD_Erase();
    79a2:	4b9a      	ldr	r3, [pc, #616]	; (7c0c <run_star_demo+0x2a4>)
    79a4:	4699      	mov	r9, r3
					while(update_ed == true)
    79a6:	e079      	b.n	7a9c <run_star_demo+0x134>
				uint16_t broadcastAddress = 0xFFFF;
    79a8:	2201      	movs	r2, #1
    79aa:	4252      	negs	r2, r2
    79ac:	3315      	adds	r3, #21
    79ae:	446b      	add	r3, sp
    79b0:	801a      	strh	r2, [r3, #0]
				dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(MAX_SEC_BCAST_PAYLOAD)); 
    79b2:	20e0      	movs	r0, #224	; 0xe0
    79b4:	4b96      	ldr	r3, [pc, #600]	; (7c10 <run_star_demo+0x2a8>)
    79b6:	4798      	blx	r3
    79b8:	1e03      	subs	r3, r0, #0
				if (NULL == dataPtr)
    79ba:	d100      	bne.n	79be <run_star_demo+0x56>
    79bc:	e110      	b.n	7be0 <run_star_demo+0x278>
				for(i = 0; i < MAX_SEC_BCAST_PAYLOAD; i++) 
    79be:	2100      	movs	r1, #0
    79c0:	4a94      	ldr	r2, [pc, #592]	; (7c14 <run_star_demo+0x2ac>)
    79c2:	7011      	strb	r1, [r2, #0]
    79c4:	2600      	movs	r6, #0
					dataPtr[dataLen++] = 0x42;	// 'B'
    79c6:	2042      	movs	r0, #66	; 0x42
				for(i = 0; i < MAX_SEC_BCAST_PAYLOAD; i++) 
    79c8:	0017      	movs	r7, r2
					dataPtr[dataLen++] = 0x42;	// 'B'
    79ca:	1c72      	adds	r2, r6, #1
    79cc:	b2d2      	uxtb	r2, r2
    79ce:	5598      	strb	r0, [r3, r6]
				for(i = 0; i < MAX_SEC_BCAST_PAYLOAD; i++) 
    79d0:	7839      	ldrb	r1, [r7, #0]
    79d2:	3101      	adds	r1, #1
    79d4:	b2c9      	uxtb	r1, r1
    79d6:	7039      	strb	r1, [r7, #0]
					dataPtr[dataLen++] = 0x42;	// 'B'
    79d8:	0016      	movs	r6, r2
				for(i = 0; i < MAX_SEC_BCAST_PAYLOAD; i++) 
    79da:	29d9      	cmp	r1, #217	; 0xd9
    79dc:	d9f5      	bls.n	79ca <run_star_demo+0x62>
					if(MiApp_SendData(SHORT_ADDR_LEN, (uint8_t *)&broadcastAddress, dataLen, dataPtr, ++msghandledemo, true, dataConfcb)== false)
    79de:	488e      	ldr	r0, [pc, #568]	; (7c18 <run_star_demo+0x2b0>)
    79e0:	7801      	ldrb	r1, [r0, #0]
    79e2:	3101      	adds	r1, #1
    79e4:	b2c9      	uxtb	r1, r1
    79e6:	7001      	strb	r1, [r0, #0]
    79e8:	488c      	ldr	r0, [pc, #560]	; (7c1c <run_star_demo+0x2b4>)
    79ea:	9002      	str	r0, [sp, #8]
    79ec:	2001      	movs	r0, #1
    79ee:	9001      	str	r0, [sp, #4]
    79f0:	9100      	str	r1, [sp, #0]
    79f2:	2116      	movs	r1, #22
    79f4:	4469      	add	r1, sp
    79f6:	3001      	adds	r0, #1
    79f8:	4e89      	ldr	r6, [pc, #548]	; (7c20 <run_star_demo+0x2b8>)
    79fa:	47b0      	blx	r6
    79fc:	2800      	cmp	r0, #0
    79fe:	d000      	beq.n	7a02 <run_star_demo+0x9a>
    7a00:	e0c1      	b.n	7b86 <run_star_demo+0x21e>
						DemoOutput_BroadcastFail();
    7a02:	4b88      	ldr	r3, [pc, #544]	; (7c24 <run_star_demo+0x2bc>)
    7a04:	4798      	blx	r3
    7a06:	e0be      	b.n	7b86 <run_star_demo+0x21e>
							snprintf(LCDText, sizeof(LCDText), "SW0:%02d-%02x%02x%02x-me \nBUTTON1: Change node", END_DEVICES_Short_Address[select_ed].connection_slot,END_DEVICES_Short_Address[select_ed].Address[0],
    7a08:	4887      	ldr	r0, [pc, #540]	; (7c28 <run_star_demo+0x2c0>)
    7a0a:	009a      	lsls	r2, r3, #2
    7a0c:	1881      	adds	r1, r0, r2
    7a0e:	78cb      	ldrb	r3, [r1, #3]
    7a10:	788e      	ldrb	r6, [r1, #2]
    7a12:	9602      	str	r6, [sp, #8]
    7a14:	7849      	ldrb	r1, [r1, #1]
    7a16:	9101      	str	r1, [sp, #4]
    7a18:	5c12      	ldrb	r2, [r2, r0]
    7a1a:	9200      	str	r2, [sp, #0]
    7a1c:	4a83      	ldr	r2, [pc, #524]	; (7c2c <run_star_demo+0x2c4>)
    7a1e:	2141      	movs	r1, #65	; 0x41
    7a20:	4883      	ldr	r0, [pc, #524]	; (7c30 <run_star_demo+0x2c8>)
    7a22:	4e84      	ldr	r6, [pc, #528]	; (7c34 <run_star_demo+0x2cc>)
    7a24:	47b0      	blx	r6
							LCD_Update();
    7a26:	4b84      	ldr	r3, [pc, #528]	; (7c38 <run_star_demo+0x2d0>)
    7a28:	4798      	blx	r3
    7a2a:	e053      	b.n	7ad4 <run_star_demo+0x16c>
								update_ed = false;
    7a2c:	2300      	movs	r3, #0
    7a2e:	4a76      	ldr	r2, [pc, #472]	; (7c08 <run_star_demo+0x2a0>)
    7a30:	7013      	strb	r3, [r2, #0]
								chk_sel_status = false;
    7a32:	4a74      	ldr	r2, [pc, #464]	; (7c04 <run_star_demo+0x29c>)
    7a34:	7013      	strb	r3, [r2, #0]
								dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(MAX_SEC_UCAST_PAYLOAD));
    7a36:	30df      	adds	r0, #223	; 0xdf
    7a38:	4b75      	ldr	r3, [pc, #468]	; (7c10 <run_star_demo+0x2a8>)
    7a3a:	4798      	blx	r3
    7a3c:	1e07      	subs	r7, r0, #0
								if (NULL == dataPtr)
    7a3e:	d100      	bne.n	7a42 <run_star_demo+0xda>
    7a40:	e0ce      	b.n	7be0 <run_star_demo+0x278>
								for(i = 0; i < MAX_SEC_UCAST_PAYLOAD; i++)        
    7a42:	2200      	movs	r2, #0
    7a44:	4b73      	ldr	r3, [pc, #460]	; (7c14 <run_star_demo+0x2ac>)
    7a46:	701a      	strb	r2, [r3, #0]
    7a48:	2300      	movs	r3, #0
									dataPtr[dataLen++] = 0x55;	// 'U'
    7a4a:	2655      	movs	r6, #85	; 0x55
								for(i = 0; i < MAX_SEC_UCAST_PAYLOAD; i++)        
    7a4c:	4871      	ldr	r0, [pc, #452]	; (7c14 <run_star_demo+0x2ac>)
									dataPtr[dataLen++] = 0x55;	// 'U'
    7a4e:	1c5a      	adds	r2, r3, #1
    7a50:	b2d2      	uxtb	r2, r2
    7a52:	54fe      	strb	r6, [r7, r3]
								for(i = 0; i < MAX_SEC_UCAST_PAYLOAD; i++)        
    7a54:	7801      	ldrb	r1, [r0, #0]
    7a56:	3101      	adds	r1, #1
    7a58:	b2c9      	uxtb	r1, r1
    7a5a:	7001      	strb	r1, [r0, #0]
									dataPtr[dataLen++] = 0x55;	// 'U'
    7a5c:	0013      	movs	r3, r2
								for(i = 0; i < MAX_SEC_UCAST_PAYLOAD; i++)        
    7a5e:	29d9      	cmp	r1, #217	; 0xd9
    7a60:	d9f5      	bls.n	7a4e <run_star_demo+0xe6>
					                 if (myConnectionIndex_in_PanCo == select_ed)
    7a62:	4b65      	ldr	r3, [pc, #404]	; (7bf8 <run_star_demo+0x290>)
    7a64:	7819      	ldrb	r1, [r3, #0]
    7a66:	4b75      	ldr	r3, [pc, #468]	; (7c3c <run_star_demo+0x2d4>)
    7a68:	781b      	ldrb	r3, [r3, #0]
    7a6a:	428b      	cmp	r3, r1
    7a6c:	d039      	beq.n	7ae2 <run_star_demo+0x17a>
						                 if(MiApp_SendData(3, END_DEVICES_Short_Address[select_ed].Address,dataLen, dataPtr, ++msghandledemo, true, dataConfcb)==false)
    7a6e:	486a      	ldr	r0, [pc, #424]	; (7c18 <run_star_demo+0x2b0>)
    7a70:	7803      	ldrb	r3, [r0, #0]
    7a72:	3301      	adds	r3, #1
    7a74:	b2db      	uxtb	r3, r3
    7a76:	7003      	strb	r3, [r0, #0]
    7a78:	0089      	lsls	r1, r1, #2
    7a7a:	486b      	ldr	r0, [pc, #428]	; (7c28 <run_star_demo+0x2c0>)
    7a7c:	1809      	adds	r1, r1, r0
    7a7e:	4867      	ldr	r0, [pc, #412]	; (7c1c <run_star_demo+0x2b4>)
    7a80:	9002      	str	r0, [sp, #8]
    7a82:	2001      	movs	r0, #1
    7a84:	9001      	str	r0, [sp, #4]
    7a86:	9300      	str	r3, [sp, #0]
    7a88:	003b      	movs	r3, r7
    7a8a:	3002      	adds	r0, #2
    7a8c:	4e64      	ldr	r6, [pc, #400]	; (7c20 <run_star_demo+0x2b8>)
    7a8e:	47b0      	blx	r6
    7a90:	2800      	cmp	r0, #0
    7a92:	d044      	beq.n	7b1e <run_star_demo+0x1b6>
												 TxNum++;
    7a94:	4a6a      	ldr	r2, [pc, #424]	; (7c40 <run_star_demo+0x2d8>)
    7a96:	7813      	ldrb	r3, [r2, #0]
    7a98:	3301      	adds	r3, #1
    7a9a:	7013      	strb	r3, [r2, #0]
					while(update_ed == true)
    7a9c:	4653      	mov	r3, sl
    7a9e:	781b      	ldrb	r3, [r3, #0]
    7aa0:	2b00      	cmp	r3, #0
    7aa2:	d070      	beq.n	7b86 <run_star_demo+0x21e>
						LCD_Erase();
    7aa4:	47c8      	blx	r9
						if (myConnectionIndex_in_PanCo  == select_ed)
    7aa6:	4b54      	ldr	r3, [pc, #336]	; (7bf8 <run_star_demo+0x290>)
    7aa8:	781b      	ldrb	r3, [r3, #0]
    7aaa:	4a64      	ldr	r2, [pc, #400]	; (7c3c <run_star_demo+0x2d4>)
    7aac:	7812      	ldrb	r2, [r2, #0]
    7aae:	429a      	cmp	r2, r3
    7ab0:	d0aa      	beq.n	7a08 <run_star_demo+0xa0>
							snprintf(LCDText, sizeof(LCDText), "SW0:%02d-%02x%02x%02x \nBUTTON1: Change node", END_DEVICES_Short_Address[select_ed].connection_slot,END_DEVICES_Short_Address[select_ed].Address[0],
    7ab2:	485d      	ldr	r0, [pc, #372]	; (7c28 <run_star_demo+0x2c0>)
    7ab4:	009a      	lsls	r2, r3, #2
    7ab6:	1881      	adds	r1, r0, r2
    7ab8:	78cb      	ldrb	r3, [r1, #3]
    7aba:	788e      	ldrb	r6, [r1, #2]
    7abc:	9602      	str	r6, [sp, #8]
    7abe:	7849      	ldrb	r1, [r1, #1]
    7ac0:	9101      	str	r1, [sp, #4]
    7ac2:	5c12      	ldrb	r2, [r2, r0]
    7ac4:	9200      	str	r2, [sp, #0]
    7ac6:	4a5f      	ldr	r2, [pc, #380]	; (7c44 <run_star_demo+0x2dc>)
    7ac8:	2141      	movs	r1, #65	; 0x41
    7aca:	4859      	ldr	r0, [pc, #356]	; (7c30 <run_star_demo+0x2c8>)
    7acc:	4e59      	ldr	r6, [pc, #356]	; (7c34 <run_star_demo+0x2cc>)
    7ace:	47b0      	blx	r6
							LCD_Update();
    7ad0:	4b59      	ldr	r3, [pc, #356]	; (7c38 <run_star_demo+0x2d0>)
    7ad2:	4798      	blx	r3
						LCD_Update();
    7ad4:	4b58      	ldr	r3, [pc, #352]	; (7c38 <run_star_demo+0x2d0>)
    7ad6:	4798      	blx	r3
						chk_sel_status = true;
    7ad8:	2201      	movs	r2, #1
    7ada:	4b4a      	ldr	r3, [pc, #296]	; (7c04 <run_star_demo+0x29c>)
    7adc:	701a      	strb	r2, [r3, #0]
							uint8_t switch_val = ButtonPressed();
    7ade:	4e5a      	ldr	r6, [pc, #360]	; (7c48 <run_star_demo+0x2e0>)
    7ae0:	e033      	b.n	7b4a <run_star_demo+0x1e2>
					                         if (MiApp_SendData(LONG_ADDR_LEN, ConnectionTable[0].Address, dataLen, dataPtr, ++msghandledemo, true, dataConfcb)== false)
    7ae2:	494d      	ldr	r1, [pc, #308]	; (7c18 <run_star_demo+0x2b0>)
    7ae4:	780b      	ldrb	r3, [r1, #0]
    7ae6:	3301      	adds	r3, #1
    7ae8:	b2db      	uxtb	r3, r3
    7aea:	700b      	strb	r3, [r1, #0]
    7aec:	494b      	ldr	r1, [pc, #300]	; (7c1c <run_star_demo+0x2b4>)
    7aee:	9102      	str	r1, [sp, #8]
    7af0:	2101      	movs	r1, #1
    7af2:	9101      	str	r1, [sp, #4]
    7af4:	9300      	str	r3, [sp, #0]
    7af6:	003b      	movs	r3, r7
    7af8:	4954      	ldr	r1, [pc, #336]	; (7c4c <run_star_demo+0x2e4>)
    7afa:	2008      	movs	r0, #8
    7afc:	4f48      	ldr	r7, [pc, #288]	; (7c20 <run_star_demo+0x2b8>)
    7afe:	47b8      	blx	r7
    7b00:	2800      	cmp	r0, #0
    7b02:	d004      	beq.n	7b0e <run_star_demo+0x1a6>
											 	TxNum++;
    7b04:	4a4e      	ldr	r2, [pc, #312]	; (7c40 <run_star_demo+0x2d8>)
    7b06:	7813      	ldrb	r3, [r2, #0]
    7b08:	3301      	adds	r3, #1
    7b0a:	7013      	strb	r3, [r2, #0]
    7b0c:	e7c6      	b.n	7a9c <run_star_demo+0x134>
												 --msghandledemo;
    7b0e:	4a42      	ldr	r2, [pc, #264]	; (7c18 <run_star_demo+0x2b0>)
    7b10:	7813      	ldrb	r3, [r2, #0]
    7b12:	3b01      	subs	r3, #1
    7b14:	7013      	strb	r3, [r2, #0]
							                     printf("\nPrevious Transaction is ongoing\n\r");
    7b16:	484e      	ldr	r0, [pc, #312]	; (7c50 <run_star_demo+0x2e8>)
    7b18:	4b4e      	ldr	r3, [pc, #312]	; (7c54 <run_star_demo+0x2ec>)
    7b1a:	4798      	blx	r3
    7b1c:	e7be      	b.n	7a9c <run_star_demo+0x134>
										         --msghandledemo;
    7b1e:	4a3e      	ldr	r2, [pc, #248]	; (7c18 <run_star_demo+0x2b0>)
    7b20:	7813      	ldrb	r3, [r2, #0]
    7b22:	3b01      	subs	r3, #1
    7b24:	7013      	strb	r3, [r2, #0]
										         printf("\nPrevious Transaction is ongoing\n\r");
    7b26:	484a      	ldr	r0, [pc, #296]	; (7c50 <run_star_demo+0x2e8>)
    7b28:	4b4a      	ldr	r3, [pc, #296]	; (7c54 <run_star_demo+0x2ec>)
    7b2a:	4798      	blx	r3
    7b2c:	e7b6      	b.n	7a9c <run_star_demo+0x134>
								}
#endif
								else
								{
									// Update the Display
									select_ed = select_ed+1;
    7b2e:	3201      	adds	r2, #1
    7b30:	4b31      	ldr	r3, [pc, #196]	; (7bf8 <run_star_demo+0x290>)
    7b32:	701a      	strb	r2, [r3, #0]
								}
								chk_sel_status = false;
    7b34:	2200      	movs	r2, #0
    7b36:	4b33      	ldr	r3, [pc, #204]	; (7c04 <run_star_demo+0x29c>)
    7b38:	701a      	strb	r2, [r3, #0]
							} // else if(switch_val == 2)
							/* While waiting in TX , RX will process if any message was available */
							P2PTasks ();
    7b3a:	4b47      	ldr	r3, [pc, #284]	; (7c58 <run_star_demo+0x2f0>)
    7b3c:	4798      	blx	r3
							SYSTEM_RunTasks();
    7b3e:	4b47      	ldr	r3, [pc, #284]	; (7c5c <run_star_demo+0x2f4>)
    7b40:	4798      	blx	r3
						while(chk_sel_status)
    7b42:	4b30      	ldr	r3, [pc, #192]	; (7c04 <run_star_demo+0x29c>)
    7b44:	781b      	ldrb	r3, [r3, #0]
    7b46:	2b00      	cmp	r3, #0
    7b48:	d0a8      	beq.n	7a9c <run_star_demo+0x134>
							uint8_t switch_val = ButtonPressed();
    7b4a:	47b0      	blx	r6
							if(switch_val == 1)
    7b4c:	2801      	cmp	r0, #1
    7b4e:	d100      	bne.n	7b52 <run_star_demo+0x1ea>
    7b50:	e76c      	b.n	7a2c <run_star_demo+0xc4>
							else if(switch_val == 2)
    7b52:	2802      	cmp	r0, #2
    7b54:	d1f1      	bne.n	7b3a <run_star_demo+0x1d2>
								if (select_ed > end_nodes-1)  /* Reset Peer Device Info */
    7b56:	782a      	ldrb	r2, [r5, #0]
    7b58:	7823      	ldrb	r3, [r4, #0]
    7b5a:	3b01      	subs	r3, #1
    7b5c:	429a      	cmp	r2, r3
    7b5e:	dde6      	ble.n	7b2e <run_star_demo+0x1c6>
								 select_ed = 0;
    7b60:	2200      	movs	r2, #0
    7b62:	4b25      	ldr	r3, [pc, #148]	; (7bf8 <run_star_demo+0x290>)
    7b64:	701a      	strb	r2, [r3, #0]
    7b66:	e7e5      	b.n	7b34 <run_star_demo+0x1cc>
  while(display_connections)
    7b68:	4b22      	ldr	r3, [pc, #136]	; (7bf4 <run_star_demo+0x28c>)
    7b6a:	781b      	ldrb	r3, [r3, #0]
    7b6c:	2b00      	cmp	r3, #0
    7b6e:	d037      	beq.n	7be0 <run_star_demo+0x278>
	  P2PTasks();
    7b70:	4b39      	ldr	r3, [pc, #228]	; (7c58 <run_star_demo+0x2f0>)
    7b72:	4798      	blx	r3
	  SYSTEM_RunTasks();
    7b74:	4b39      	ldr	r3, [pc, #228]	; (7c5c <run_star_demo+0x2f4>)
    7b76:	4798      	blx	r3
		uint8_t PressedButton = ButtonPressed();
    7b78:	4b33      	ldr	r3, [pc, #204]	; (7c48 <run_star_demo+0x2e0>)
    7b7a:	4798      	blx	r3
		if ( PressedButton == 1 || PressedButton == 2)
    7b7c:	3801      	subs	r0, #1
    7b7e:	b2c0      	uxtb	r0, r0
    7b80:	2801      	cmp	r0, #1
    7b82:	d800      	bhi.n	7b86 <run_star_demo+0x21e>
    7b84:	e700      	b.n	7988 <run_star_demo+0x20>
				default:
				break;
#endif
			}
#if defined(PROTOCOL_STAR)
        t2.Val = MiWi_TickGet ();
    7b86:	4b19      	ldr	r3, [pc, #100]	; (7bec <run_star_demo+0x284>)
    7b88:	4798      	blx	r3
    7b8a:	4b35      	ldr	r3, [pc, #212]	; (7c60 <run_star_demo+0x2f8>)
    7b8c:	6018      	str	r0, [r3, #0]
        /* Display the no of End devices in Network */
        if( MiWi_TickGetDiff(t2, t1) > (60 * ONE_SECOND))
    7b8e:	4b18      	ldr	r3, [pc, #96]	; (7bf0 <run_star_demo+0x288>)
    7b90:	6819      	ldr	r1, [r3, #0]
    7b92:	4b34      	ldr	r3, [pc, #208]	; (7c64 <run_star_demo+0x2fc>)
    7b94:	4798      	blx	r3
    7b96:	4b34      	ldr	r3, [pc, #208]	; (7c68 <run_star_demo+0x300>)
    7b98:	4298      	cmp	r0, r3
    7b9a:	d9e5      	bls.n	7b68 <run_star_demo+0x200>
        {
			if((role == PAN_COORD))
    7b9c:	4b18      	ldr	r3, [pc, #96]	; (7c00 <run_star_demo+0x298>)
    7b9e:	781b      	ldrb	r3, [r3, #0]
    7ba0:	2b01      	cmp	r3, #1
    7ba2:	d1e1      	bne.n	7b68 <run_star_demo+0x200>
			{
	        #if defined (ENABLE_LCD)
	        LCD_Erase();
    7ba4:	4b19      	ldr	r3, [pc, #100]	; (7c0c <run_star_demo+0x2a4>)
    7ba6:	4798      	blx	r3
			snprintf(LCDText,sizeof(LCDText), "Role:%02d",role);
    7ba8:	4e15      	ldr	r6, [pc, #84]	; (7c00 <run_star_demo+0x298>)
    7baa:	7833      	ldrb	r3, [r6, #0]
    7bac:	4a2f      	ldr	r2, [pc, #188]	; (7c6c <run_star_demo+0x304>)
    7bae:	2141      	movs	r1, #65	; 0x41
    7bb0:	481f      	ldr	r0, [pc, #124]	; (7c30 <run_star_demo+0x2c8>)
    7bb2:	4f20      	ldr	r7, [pc, #128]	; (7c34 <run_star_demo+0x2cc>)
    7bb4:	46b9      	mov	r9, r7
    7bb6:	47b8      	blx	r7
			LCD_Update();
    7bb8:	4f1f      	ldr	r7, [pc, #124]	; (7c38 <run_star_demo+0x2d0>)
    7bba:	47b8      	blx	r7
	        snprintf(LCDText, sizeof(LCDText), "\nEND_DEVICES :%02d",conn_size);
    7bbc:	4b2c      	ldr	r3, [pc, #176]	; (7c70 <run_star_demo+0x308>)
    7bbe:	781b      	ldrb	r3, [r3, #0]
    7bc0:	4a2c      	ldr	r2, [pc, #176]	; (7c74 <run_star_demo+0x30c>)
    7bc2:	2141      	movs	r1, #65	; 0x41
    7bc4:	481a      	ldr	r0, [pc, #104]	; (7c30 <run_star_demo+0x2c8>)
    7bc6:	47c8      	blx	r9
	        LCD_Update();
    7bc8:	47b8      	blx	r7
	        #endif
	        delay_ms(500);
    7bca:	20fa      	movs	r0, #250	; 0xfa
    7bcc:	0040      	lsls	r0, r0, #1
    7bce:	4b2a      	ldr	r3, [pc, #168]	; (7c78 <run_star_demo+0x310>)
    7bd0:	4798      	blx	r3
	        display_connections = false;
    7bd2:	2200      	movs	r2, #0
    7bd4:	4b07      	ldr	r3, [pc, #28]	; (7bf4 <run_star_demo+0x28c>)
    7bd6:	701a      	strb	r2, [r3, #0]
	        STAR_DEMO_OPTIONS_MESSAGE (role);
    7bd8:	7830      	ldrb	r0, [r6, #0]
    7bda:	4b28      	ldr	r3, [pc, #160]	; (7c7c <run_star_demo+0x314>)
    7bdc:	4798      	blx	r3
    7bde:	e7c3      	b.n	7b68 <run_star_demo+0x200>
  }
 #if defined(PROTOCOL_STAR)
	//P2PTasks ();
	//SYSTEM_RunTasks();
 #endif
}
    7be0:	b006      	add	sp, #24
    7be2:	bc1c      	pop	{r2, r3, r4}
    7be4:	4690      	mov	r8, r2
    7be6:	4699      	mov	r9, r3
    7be8:	46a2      	mov	sl, r4
    7bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7bec:	0000d3f5 	.word	0x0000d3f5
    7bf0:	20002194 	.word	0x20002194
    7bf4:	20002198 	.word	0x20002198
    7bf8:	20002190 	.word	0x20002190
    7bfc:	200004a9 	.word	0x200004a9
    7c00:	20003344 	.word	0x20003344
    7c04:	20000015 	.word	0x20000015
    7c08:	20002188 	.word	0x20002188
    7c0c:	00008075 	.word	0x00008075
    7c10:	0000d1b5 	.word	0x0000d1b5
    7c14:	20002191 	.word	0x20002191
    7c18:	20000302 	.word	0x20000302
    7c1c:	0000792d 	.word	0x0000792d
    7c20:	0000b7d1 	.word	0x0000b7d1
    7c24:	00007739 	.word	0x00007739
    7c28:	200032f4 	.word	0x200032f4
    7c2c:	00019830 	.word	0x00019830
    7c30:	2000219c 	.word	0x2000219c
    7c34:	00018195 	.word	0x00018195
    7c38:	00008091 	.word	0x00008091
    7c3c:	20003044 	.word	0x20003044
    7c40:	20000301 	.word	0x20000301
    7c44:	00019860 	.word	0x00019860
    7c48:	00007789 	.word	0x00007789
    7c4c:	20002ef0 	.word	0x20002ef0
    7c50:	0001988c 	.word	0x0001988c
    7c54:	00017e25 	.word	0x00017e25
    7c58:	0000c2b9 	.word	0x0000c2b9
    7c5c:	0000eb39 	.word	0x0000eb39
    7c60:	2000218c 	.word	0x2000218c
    7c64:	0000d455 	.word	0x0000d455
    7c68:	03938700 	.word	0x03938700
    7c6c:	000198b0 	.word	0x000198b0
    7c70:	20003059 	.word	0x20003059
    7c74:	000198bc 	.word	0x000198bc
    7c78:	00004799 	.word	0x00004799
    7c7c:	0000775d 	.word	0x0000775d

00007c80 <ReceivedDataIndication>:

void ReceivedDataIndication (RECEIVED_MESSAGE *ind)
{
    7c80:	b510      	push	{r4, lr}
    /*******************************************************************/
    // If a packet has been received, handle the information available
    // in rxMessage.
    /*******************************************************************/
	if ((myPANID.v[1] == ind->SourcePANID.v[1]) && (myPANID.v[0] == ind->SourcePANID.v[0]))
    7c82:	4b11      	ldr	r3, [pc, #68]	; (7cc8 <ReceivedDataIndication+0x48>)
    7c84:	881a      	ldrh	r2, [r3, #0]
    7c86:	8843      	ldrh	r3, [r0, #2]
    7c88:	429a      	cmp	r2, r3
    7c8a:	d009      	beq.n	7ca0 <ReceivedDataIndication+0x20>
		DemoOutput_Instruction();
#endif
	}
	else
	{
		printf("Packet received from other Source PAN ID : 0x%x%x\r\n",ind->SourcePANID.v[1],ind->SourcePANID.v[0]);
    7c8c:	7882      	ldrb	r2, [r0, #2]
    7c8e:	78c1      	ldrb	r1, [r0, #3]
    7c90:	480e      	ldr	r0, [pc, #56]	; (7ccc <ReceivedDataIndication+0x4c>)
    7c92:	4b0f      	ldr	r3, [pc, #60]	; (7cd0 <ReceivedDataIndication+0x50>)
    7c94:	4798      	blx	r3
    //if ((role == END_DEVICE) && !rxMessage.flags.bits.broadcast)
    //{
        //Source_END_DEVICE_INFO(rxMessage.Payload);
    //}
    /* Display the Instructions message */
    STAR_DEMO_OPTIONS_MESSAGE (role);
    7c96:	4b0f      	ldr	r3, [pc, #60]	; (7cd4 <ReceivedDataIndication+0x54>)
    7c98:	7818      	ldrb	r0, [r3, #0]
    7c9a:	4b0f      	ldr	r3, [pc, #60]	; (7cd8 <ReceivedDataIndication+0x58>)
    7c9c:	4798      	blx	r3
#endif
/*****************************************************************************************/
}
    7c9e:	bd10      	pop	{r4, pc}
		DemoOutput_HandleMessage();
    7ca0:	4b0e      	ldr	r3, [pc, #56]	; (7cdc <ReceivedDataIndication+0x5c>)
    7ca2:	4798      	blx	r3
		delay_ms(500);
    7ca4:	20fa      	movs	r0, #250	; 0xfa
    7ca6:	0040      	lsls	r0, r0, #1
    7ca8:	4b0d      	ldr	r3, [pc, #52]	; (7ce0 <ReceivedDataIndication+0x60>)
    7caa:	4798      	blx	r3
		DemoOutput_UpdateTxRx(TxNum, ++RxNum);
    7cac:	4b0d      	ldr	r3, [pc, #52]	; (7ce4 <ReceivedDataIndication+0x64>)
    7cae:	7818      	ldrb	r0, [r3, #0]
    7cb0:	4b0d      	ldr	r3, [pc, #52]	; (7ce8 <ReceivedDataIndication+0x68>)
    7cb2:	7819      	ldrb	r1, [r3, #0]
    7cb4:	3101      	adds	r1, #1
    7cb6:	b2c9      	uxtb	r1, r1
    7cb8:	7019      	strb	r1, [r3, #0]
    7cba:	4b0c      	ldr	r3, [pc, #48]	; (7cec <ReceivedDataIndication+0x6c>)
    7cbc:	4798      	blx	r3
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    7cbe:	2280      	movs	r2, #128	; 0x80
    7cc0:	0312      	lsls	r2, r2, #12
    7cc2:	4b0b      	ldr	r3, [pc, #44]	; (7cf0 <ReceivedDataIndication+0x70>)
    7cc4:	61da      	str	r2, [r3, #28]
    7cc6:	e7e6      	b.n	7c96 <ReceivedDataIndication+0x16>
    7cc8:	20003050 	.word	0x20003050
    7ccc:	000197d4 	.word	0x000197d4
    7cd0:	00017e25 	.word	0x00017e25
    7cd4:	20003344 	.word	0x20003344
    7cd8:	0000775d 	.word	0x0000775d
    7cdc:	00007621 	.word	0x00007621
    7ce0:	00004799 	.word	0x00004799
    7ce4:	20000301 	.word	0x20000301
    7ce8:	20000300 	.word	0x20000300
    7cec:	00007701 	.word	0x00007701
    7cf0:	40002800 	.word	0x40002800

00007cf4 <EstablishConfirm>:
* Overview: callback function called upon MiAPP_EstConnection
            when connection is lost
* Parameter: status of the completed operation
********************************************************************/
static void EstablishConfirm(miwi_status_t status)
{
    7cf4:	b510      	push	{r4, lr}
    if ((SUCCESS == status) || (ALREADY_EXISTS == status))
    7cf6:	2800      	cmp	r0, #0
    7cf8:	d001      	beq.n	7cfe <EstablishConfirm+0xa>
    7cfa:	2806      	cmp	r0, #6
    7cfc:	d102      	bne.n	7d04 <EstablishConfirm+0x10>
    {
        printf("Reconnected\n\r");
    7cfe:	4802      	ldr	r0, [pc, #8]	; (7d08 <EstablishConfirm+0x14>)
    7d00:	4b02      	ldr	r3, [pc, #8]	; (7d0c <EstablishConfirm+0x18>)
    7d02:	4798      	blx	r3
    }
}
    7d04:	bd10      	pop	{r4, pc}
    7d06:	46c0      	nop			; (mov r8, r8)
    7d08:	00019924 	.word	0x00019924
    7d0c:	00017e25 	.word	0x00017e25

00007d10 <appLinkFailureCallback>:
* Function: static void appLinkFailureCallback(void)
*
* Overview: callback function called upon when connection is lost
********************************************************************/
static void appLinkFailureCallback(void)
{
    7d10:	b510      	push	{r4, lr}
    7d12:	b084      	sub	sp, #16
	//printf("\nLink Failure- send connection request\n\r");
    uint16_t broadcastAddr = 0xFFFF;
    7d14:	220e      	movs	r2, #14
    7d16:	446a      	add	r2, sp
    7d18:	2301      	movs	r3, #1
    7d1a:	425b      	negs	r3, r3
    7d1c:	8013      	strh	r3, [r2, #0]
    MiApp_EstablishConnection(myChannel, 0, (uint8_t*)&broadcastAddr, 0, EstablishConfirm);
    7d1e:	4b05      	ldr	r3, [pc, #20]	; (7d34 <appLinkFailureCallback+0x24>)
    7d20:	7818      	ldrb	r0, [r3, #0]
    7d22:	4b05      	ldr	r3, [pc, #20]	; (7d38 <appLinkFailureCallback+0x28>)
    7d24:	9300      	str	r3, [sp, #0]
    7d26:	2300      	movs	r3, #0
    7d28:	2100      	movs	r1, #0
    7d2a:	4c04      	ldr	r4, [pc, #16]	; (7d3c <appLinkFailureCallback+0x2c>)
    7d2c:	47a0      	blx	r4
}
    7d2e:	b004      	add	sp, #16
    7d30:	bd10      	pop	{r4, pc}
    7d32:	46c0      	nop			; (mov r8, r8)
    7d34:	20000019 	.word	0x20000019
    7d38:	00007cf5 	.word	0x00007cf5
    7d3c:	0000d011 	.word	0x0000d011

00007d40 <Connection_Confirm>:
{
    7d40:	b510      	push	{r4, lr}
    7d42:	0004      	movs	r4, r0
	printf("\r\nConnect Operation Status: %d\n", status) ;
    7d44:	0001      	movs	r1, r0
    7d46:	4811      	ldr	r0, [pc, #68]	; (7d8c <Connection_Confirm+0x4c>)
    7d48:	4b11      	ldr	r3, [pc, #68]	; (7d90 <Connection_Confirm+0x50>)
    7d4a:	4798      	blx	r3
    if ((SUCCESS == status) || (ALREADY_EXISTS == status))
    7d4c:	2c00      	cmp	r4, #0
    7d4e:	d001      	beq.n	7d54 <Connection_Confirm+0x14>
    7d50:	2c06      	cmp	r4, #6
    7d52:	d113      	bne.n	7d7c <Connection_Confirm+0x3c>
		port_base->OUTCLR.reg = pin_mask;
    7d54:	2280      	movs	r2, #128	; 0x80
    7d56:	0312      	lsls	r2, r2, #12
    7d58:	4b0e      	ldr	r3, [pc, #56]	; (7d94 <Connection_Confirm+0x54>)
    7d5a:	615a      	str	r2, [r3, #20]
		if(role == PAN_COORD)
    7d5c:	4b0e      	ldr	r3, [pc, #56]	; (7d98 <Connection_Confirm+0x58>)
    7d5e:	781b      	ldrb	r3, [r3, #0]
    7d60:	2b01      	cmp	r3, #1
    7d62:	d00c      	beq.n	7d7e <Connection_Confirm+0x3e>
			DemoOutput_Channel(myChannel, 1);
    7d64:	4b0d      	ldr	r3, [pc, #52]	; (7d9c <Connection_Confirm+0x5c>)
    7d66:	7818      	ldrb	r0, [r3, #0]
    7d68:	2101      	movs	r1, #1
    7d6a:	4b0d      	ldr	r3, [pc, #52]	; (7da0 <Connection_Confirm+0x60>)
    7d6c:	4798      	blx	r3
		DumpConnection(0xFF);
    7d6e:	20ff      	movs	r0, #255	; 0xff
    7d70:	4b0c      	ldr	r3, [pc, #48]	; (7da4 <Connection_Confirm+0x64>)
    7d72:	4798      	blx	r3
		STAR_DEMO_OPTIONS_MESSAGE (role);
    7d74:	4b08      	ldr	r3, [pc, #32]	; (7d98 <Connection_Confirm+0x58>)
    7d76:	7818      	ldrb	r0, [r3, #0]
    7d78:	4b0b      	ldr	r3, [pc, #44]	; (7da8 <Connection_Confirm+0x68>)
    7d7a:	4798      	blx	r3
}
    7d7c:	bd10      	pop	{r4, pc}
		printf("\r\nStarted Wireless Communication on Channel %u\r\n", currentChannel) ;
    7d7e:	4b0b      	ldr	r3, [pc, #44]	; (7dac <Connection_Confirm+0x6c>)
    7d80:	7819      	ldrb	r1, [r3, #0]
    7d82:	480b      	ldr	r0, [pc, #44]	; (7db0 <Connection_Confirm+0x70>)
    7d84:	4b02      	ldr	r3, [pc, #8]	; (7d90 <Connection_Confirm+0x50>)
    7d86:	4798      	blx	r3
    7d88:	e7f1      	b.n	7d6e <Connection_Confirm+0x2e>
    7d8a:	46c0      	nop			; (mov r8, r8)
    7d8c:	000198d0 	.word	0x000198d0
    7d90:	00017e25 	.word	0x00017e25
    7d94:	40002800 	.word	0x40002800
    7d98:	20003344 	.word	0x20003344
    7d9c:	20000019 	.word	0x20000019
    7da0:	000075b9 	.word	0x000075b9
    7da4:	0000bafd 	.word	0x0000bafd
    7da8:	0000775d 	.word	0x0000775d
    7dac:	2000001d 	.word	0x2000001d
    7db0:	000198f0 	.word	0x000198f0

00007db4 <freezer_feature>:
{
    7db4:	b570      	push	{r4, r5, r6, lr}
    tick1.Val = MiWi_TickGet();
    7db6:	4c0e      	ldr	r4, [pc, #56]	; (7df0 <freezer_feature+0x3c>)
    7db8:	47a0      	blx	r4
    7dba:	0005      	movs	r5, r0
        tick2.Val = MiWi_TickGet();
    7dbc:	47a0      	blx	r4
        if(MiWi_TickGetDiff(tick2, tick1) > (ONE_SECOND * 4))
    7dbe:	0029      	movs	r1, r5
    7dc0:	4b0c      	ldr	r3, [pc, #48]	; (7df4 <freezer_feature+0x40>)
    7dc2:	4798      	blx	r3
    7dc4:	4a0c      	ldr	r2, [pc, #48]	; (7df8 <freezer_feature+0x44>)
	return false;
    7dc6:	2300      	movs	r3, #0
        if(MiWi_TickGetDiff(tick2, tick1) > (ONE_SECOND * 4))
    7dc8:	4290      	cmp	r0, r2
    7dca:	d901      	bls.n	7dd0 <freezer_feature+0x1c>
}
    7dcc:	0018      	movs	r0, r3
    7dce:	bd70      	pop	{r4, r5, r6, pc}
        switch_val = ButtonPressed ();
    7dd0:	4b0a      	ldr	r3, [pc, #40]	; (7dfc <freezer_feature+0x48>)
    7dd2:	4798      	blx	r3
            return false;
    7dd4:	2300      	movs	r3, #0
        if(switch_val == 1)
    7dd6:	2801      	cmp	r0, #1
    7dd8:	d1f8      	bne.n	7dcc <freezer_feature+0x18>
            LCDDisplay((char *)"Restoring Network !!", 0, false);
    7dda:	2200      	movs	r2, #0
    7ddc:	2100      	movs	r1, #0
    7dde:	4808      	ldr	r0, [pc, #32]	; (7e00 <freezer_feature+0x4c>)
    7de0:	4b08      	ldr	r3, [pc, #32]	; (7e04 <freezer_feature+0x50>)
    7de2:	4798      	blx	r3
			delay_ms(1000);
    7de4:	20fa      	movs	r0, #250	; 0xfa
    7de6:	0080      	lsls	r0, r0, #2
    7de8:	4b07      	ldr	r3, [pc, #28]	; (7e08 <freezer_feature+0x54>)
    7dea:	4798      	blx	r3
            return true;
    7dec:	2301      	movs	r3, #1
    7dee:	e7ed      	b.n	7dcc <freezer_feature+0x18>
    7df0:	0000d3f5 	.word	0x0000d3f5
    7df4:	0000d455 	.word	0x0000d455
    7df8:	003d0900 	.word	0x003d0900
    7dfc:	00007789 	.word	0x00007789
    7e00:	000199fc 	.word	0x000199fc
    7e04:	00008109 	.word	0x00008109
    7e08:	00004799 	.word	0x00004799

00007e0c <Initialize_Demo>:
*
* Overview: Initializes the demo by initializing protocol, required
            components and initiates connection
********************************************************************/
bool Initialize_Demo(bool freezer_enable)
{
    7e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7e0e:	46ce      	mov	lr, r9
    7e10:	b500      	push	{lr}
    7e12:	b086      	sub	sp, #24
    7e14:	0004      	movs	r4, r0
    uint8_t i;

	bool invalidIEEEAddrFlag = false;
	uint64_t invalidIEEEAddr;

    MiApp_SubscribeDataIndicationCallback(ReceivedDataIndication);
    7e16:	486c      	ldr	r0, [pc, #432]	; (7fc8 <Initialize_Demo+0x1bc>)
    7e18:	4b6c      	ldr	r3, [pc, #432]	; (7fcc <Initialize_Demo+0x1c0>)
    7e1a:	4798      	blx	r3
#if defined(PROTOCOL_STAR)
#ifdef ENABLE_LINK_STATUS
	MiApp_SubscribeLinkFailureCallback(appLinkFailureCallback);
    7e1c:	486c      	ldr	r0, [pc, #432]	; (7fd0 <Initialize_Demo+0x1c4>)
    7e1e:	4b6d      	ldr	r3, [pc, #436]	; (7fd4 <Initialize_Demo+0x1c8>)
    7e20:	4798      	blx	r3

#ifdef ENABLE_SLEEP_FEATURE
	sm_init();
#endif

    if (freezer_enable)
    7e22:	2c00      	cmp	r4, #0
    7e24:	d03d      	beq.n	7ea2 <Initialize_Demo+0x96>
    {
        MiApp_ProtocolInit(NULL, NULL);
    7e26:	2100      	movs	r1, #0
    7e28:	2000      	movs	r0, #0
    7e2a:	4b6b      	ldr	r3, [pc, #428]	; (7fd8 <Initialize_Demo+0x1cc>)
    7e2c:	4798      	blx	r3
		srand(PHY_RandomReq());
    7e2e:	4b6b      	ldr	r3, [pc, #428]	; (7fdc <Initialize_Demo+0x1d0>)
    7e30:	4798      	blx	r3
    7e32:	4b6b      	ldr	r3, [pc, #428]	; (7fe0 <Initialize_Demo+0x1d4>)
    7e34:	4798      	blx	r3
		/* Check if a valid IEEE address is available.
		0x0000000000000000 and 0xFFFFFFFFFFFFFFFF is presumed to be invalid */
		/* Check if IEEE address is 0x0000000000000000 */
		memset((uint8_t *)&invalidIEEEAddr, 0x00, LONG_ADDR_LEN);
    7e36:	2200      	movs	r2, #0
    7e38:	2300      	movs	r3, #0
    7e3a:	9204      	str	r2, [sp, #16]
    7e3c:	9305      	str	r3, [sp, #20]
		if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    7e3e:	4e69      	ldr	r6, [pc, #420]	; (7fe4 <Initialize_Demo+0x1d8>)
    7e40:	3208      	adds	r2, #8
    7e42:	0031      	movs	r1, r6
    7e44:	a804      	add	r0, sp, #16
    7e46:	4d68      	ldr	r5, [pc, #416]	; (7fe8 <Initialize_Demo+0x1dc>)
    7e48:	47a8      	blx	r5
    7e4a:	0004      	movs	r4, r0
		{
			invalidIEEEAddrFlag = true;
		}

		/* Check if IEEE address is 0xFFFFFFFFFFFFFFFF */
		memset((uint8_t *)&invalidIEEEAddr, 0xFF, LONG_ADDR_LEN);
    7e4c:	2201      	movs	r2, #1
    7e4e:	4252      	negs	r2, r2
    7e50:	17d3      	asrs	r3, r2, #31
    7e52:	9204      	str	r2, [sp, #16]
    7e54:	9305      	str	r3, [sp, #20]
		if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    7e56:	3209      	adds	r2, #9
    7e58:	0031      	movs	r1, r6
    7e5a:	a804      	add	r0, sp, #16
    7e5c:	47a8      	blx	r5
    7e5e:	2800      	cmp	r0, #0
    7e60:	d015      	beq.n	7e8e <Initialize_Demo+0x82>
		{
			invalidIEEEAddrFlag = true;
		}
		
		if (invalidIEEEAddrFlag)
    7e62:	2c00      	cmp	r4, #0
    7e64:	d013      	beq.n	7e8e <Initialize_Demo+0x82>
			for(i = 0; i<MY_ADDRESS_LENGTH; i++)
			{
				*peui64++ = (uint8_t)rand();
			}
		}
		PHY_SetIEEEAddr((uint8_t *)&myLongAddress);
    7e66:	485f      	ldr	r0, [pc, #380]	; (7fe4 <Initialize_Demo+0x1d8>)
    7e68:	4b60      	ldr	r3, [pc, #384]	; (7fec <Initialize_Demo+0x1e0>)
    7e6a:	4798      	blx	r3
#else
		
		//if(END_DEVICE == role)
			//startLinkStatusTimer();

		STAR_DEMO_OPTIONS_MESSAGE (role);
    7e6c:	4b60      	ldr	r3, [pc, #384]	; (7ff0 <Initialize_Demo+0x1e4>)
    7e6e:	7818      	ldrb	r0, [r3, #0]
    7e70:	4b60      	ldr	r3, [pc, #384]	; (7ff4 <Initialize_Demo+0x1e8>)
    7e72:	4798      	blx	r3
    }

/*********************************/
//STAR SUPPORT CODE
#if defined(PROTOCOL_STAR)
	if(role == PAN_COORD)
    7e74:	4b5e      	ldr	r3, [pc, #376]	; (7ff0 <Initialize_Demo+0x1e4>)
    7e76:	781b      	ldrb	r3, [r3, #0]
    7e78:	2b01      	cmp	r3, #1
    7e7a:	d100      	bne.n	7e7e <Initialize_Demo+0x72>
    7e7c:	e0a0      	b.n	7fc0 <Initialize_Demo+0x1b4>
#endif
/********************************/


	/* Create SW timer for transmission timeout */
	SwTimerCreate(&TxTimerId) ;
    7e7e:	485e      	ldr	r0, [pc, #376]	; (7ff8 <Initialize_Demo+0x1ec>)
    7e80:	4b5e      	ldr	r3, [pc, #376]	; (7ffc <Initialize_Demo+0x1f0>)
    7e82:	4798      	blx	r3
	
	return true;
}
    7e84:	2001      	movs	r0, #1
    7e86:	b006      	add	sp, #24
    7e88:	bc04      	pop	{r2}
    7e8a:	4691      	mov	r9, r2
    7e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7e8e:	4c55      	ldr	r4, [pc, #340]	; (7fe4 <Initialize_Demo+0x1d8>)
    7e90:	0026      	movs	r6, r4
    7e92:	3608      	adds	r6, #8
				*peui64++ = (uint8_t)rand();
    7e94:	4d5a      	ldr	r5, [pc, #360]	; (8000 <Initialize_Demo+0x1f4>)
    7e96:	47a8      	blx	r5
    7e98:	7020      	strb	r0, [r4, #0]
    7e9a:	3401      	adds	r4, #1
			for(i = 0; i<MY_ADDRESS_LENGTH; i++)
    7e9c:	42b4      	cmp	r4, r6
    7e9e:	d1fa      	bne.n	7e96 <Initialize_Demo+0x8a>
    7ea0:	e7e1      	b.n	7e66 <Initialize_Demo+0x5a>
		port_base->OUTSET.reg = pin_mask;
    7ea2:	2280      	movs	r2, #128	; 0x80
    7ea4:	0312      	lsls	r2, r2, #12
    7ea6:	4b57      	ldr	r3, [pc, #348]	; (8004 <Initialize_Demo+0x1f8>)
    7ea8:	619a      	str	r2, [r3, #24]
        MiApp_ProtocolInit(NULL, NULL);
    7eaa:	2100      	movs	r1, #0
    7eac:	2000      	movs	r0, #0
    7eae:	4b4a      	ldr	r3, [pc, #296]	; (7fd8 <Initialize_Demo+0x1cc>)
    7eb0:	4798      	blx	r3
		uint8_t txPower = 0x1F ;
    7eb2:	240a      	movs	r4, #10
    7eb4:	446c      	add	r4, sp
    7eb6:	231f      	movs	r3, #31
    7eb8:	7023      	strb	r3, [r4, #0]
		RADIO_GetAttr(OUTPUT_POWER, (void *)&txPower) ;
    7eba:	0021      	movs	r1, r4
    7ebc:	2004      	movs	r0, #4
    7ebe:	4d52      	ldr	r5, [pc, #328]	; (8008 <Initialize_Demo+0x1fc>)
    7ec0:	47a8      	blx	r5
		uint8_t paBoost = 255 ;
    7ec2:	260b      	movs	r6, #11
    7ec4:	446e      	add	r6, sp
    7ec6:	23ff      	movs	r3, #255	; 0xff
    7ec8:	7033      	strb	r3, [r6, #0]
		RADIO_GetAttr(PABOOST, (void *)&paBoost) ;
    7eca:	0031      	movs	r1, r6
    7ecc:	2008      	movs	r0, #8
    7ece:	47a8      	blx	r5
		RadioDataRate_t sf = 33 ;
    7ed0:	ad03      	add	r5, sp, #12
    7ed2:	2321      	movs	r3, #33	; 0x21
    7ed4:	702b      	strb	r3, [r5, #0]
		PHY_GetAttribute(SPREADING_FACTOR, (void *)&sf) ;
    7ed6:	0029      	movs	r1, r5
    7ed8:	2016      	movs	r0, #22
    7eda:	4f4c      	ldr	r7, [pc, #304]	; (800c <Initialize_Demo+0x200>)
    7edc:	47b8      	blx	r7
		PHY_GetAttribute(BANDWIDTH, (void *)&bw) ;
    7ede:	230d      	movs	r3, #13
    7ee0:	446b      	add	r3, sp
    7ee2:	4699      	mov	r9, r3
    7ee4:	0019      	movs	r1, r3
    7ee6:	2007      	movs	r0, #7
    7ee8:	47b8      	blx	r7
		printf("\r\n-----------------------------------------------------\r\n") ;
    7eea:	4849      	ldr	r0, [pc, #292]	; (8010 <Initialize_Demo+0x204>)
    7eec:	4f49      	ldr	r7, [pc, #292]	; (8014 <Initialize_Demo+0x208>)
    7eee:	47b8      	blx	r7
		printf("RF Parameters\r\n") ;
    7ef0:	4849      	ldr	r0, [pc, #292]	; (8018 <Initialize_Demo+0x20c>)
    7ef2:	47b8      	blx	r7
		printf(" - Tx output power: %d\r\n", txPower) ;
    7ef4:	7821      	ldrb	r1, [r4, #0]
    7ef6:	4849      	ldr	r0, [pc, #292]	; (801c <Initialize_Demo+0x210>)
    7ef8:	4c49      	ldr	r4, [pc, #292]	; (8020 <Initialize_Demo+0x214>)
    7efa:	47a0      	blx	r4
		printf(" - PA boost: %d\r\n", paBoost) ;
    7efc:	7831      	ldrb	r1, [r6, #0]
    7efe:	4849      	ldr	r0, [pc, #292]	; (8024 <Initialize_Demo+0x218>)
    7f00:	47a0      	blx	r4
		printf(" - Spreading factor: SF%d\r\n", sf) ;
    7f02:	7829      	ldrb	r1, [r5, #0]
    7f04:	4848      	ldr	r0, [pc, #288]	; (8028 <Initialize_Demo+0x21c>)
    7f06:	47a0      	blx	r4
		printf(" - Bandwidth (125kHz=7, 250kHz=8, 500kHz=9): %d", bw) ;
    7f08:	464b      	mov	r3, r9
    7f0a:	7819      	ldrb	r1, [r3, #0]
    7f0c:	4847      	ldr	r0, [pc, #284]	; (802c <Initialize_Demo+0x220>)
    7f0e:	47a0      	blx	r4
		printf("\r\n-----------------------------------------------------\r\n") ;
    7f10:	483f      	ldr	r0, [pc, #252]	; (8010 <Initialize_Demo+0x204>)
    7f12:	47b8      	blx	r7
		srand(PHY_RandomReq());
    7f14:	4b31      	ldr	r3, [pc, #196]	; (7fdc <Initialize_Demo+0x1d0>)
    7f16:	4798      	blx	r3
    7f18:	4b31      	ldr	r3, [pc, #196]	; (7fe0 <Initialize_Demo+0x1d4>)
    7f1a:	4798      	blx	r3
		memset((uint8_t *)&invalidIEEEAddr, 0x00, LONG_ADDR_LEN);
    7f1c:	2200      	movs	r2, #0
    7f1e:	2300      	movs	r3, #0
    7f20:	9204      	str	r2, [sp, #16]
    7f22:	9305      	str	r3, [sp, #20]
		if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    7f24:	4e2f      	ldr	r6, [pc, #188]	; (7fe4 <Initialize_Demo+0x1d8>)
    7f26:	3208      	adds	r2, #8
    7f28:	0031      	movs	r1, r6
    7f2a:	a804      	add	r0, sp, #16
    7f2c:	4d2e      	ldr	r5, [pc, #184]	; (7fe8 <Initialize_Demo+0x1dc>)
    7f2e:	47a8      	blx	r5
    7f30:	0004      	movs	r4, r0
		memset((uint8_t *)&invalidIEEEAddr, 0xFF, LONG_ADDR_LEN);
    7f32:	2201      	movs	r2, #1
    7f34:	4252      	negs	r2, r2
    7f36:	17d3      	asrs	r3, r2, #31
    7f38:	9204      	str	r2, [sp, #16]
    7f3a:	9305      	str	r3, [sp, #20]
		if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    7f3c:	3209      	adds	r2, #9
    7f3e:	0031      	movs	r1, r6
    7f40:	a804      	add	r0, sp, #16
    7f42:	47a8      	blx	r5
    7f44:	2800      	cmp	r0, #0
    7f46:	d02c      	beq.n	7fa2 <Initialize_Demo+0x196>
		if (invalidIEEEAddrFlag)
    7f48:	2c00      	cmp	r4, #0
    7f4a:	d02a      	beq.n	7fa2 <Initialize_Demo+0x196>
		PHY_SetIEEEAddr((uint8_t *)&myLongAddress);
    7f4c:	4825      	ldr	r0, [pc, #148]	; (7fe4 <Initialize_Demo+0x1d8>)
    7f4e:	4b27      	ldr	r3, [pc, #156]	; (7fec <Initialize_Demo+0x1e0>)
    7f50:	4798      	blx	r3
        MiApp_ConnectionMode(ENABLE_ALL_CONN);
    7f52:	2000      	movs	r0, #0
    7f54:	4b36      	ldr	r3, [pc, #216]	; (8030 <Initialize_Demo+0x224>)
    7f56:	4798      	blx	r3
        DemoOutput_Channel(myChannel, 0);
    7f58:	4c36      	ldr	r4, [pc, #216]	; (8034 <Initialize_Demo+0x228>)
    7f5a:	7820      	ldrb	r0, [r4, #0]
    7f5c:	2100      	movs	r1, #0
    7f5e:	4b36      	ldr	r3, [pc, #216]	; (8038 <Initialize_Demo+0x22c>)
    7f60:	4798      	blx	r3
        if( MiApp_Set(CHANNEL, &myChannel) == false )
    7f62:	0021      	movs	r1, r4
    7f64:	2000      	movs	r0, #0
    7f66:	4b35      	ldr	r3, [pc, #212]	; (803c <Initialize_Demo+0x230>)
    7f68:	4798      	blx	r3
    7f6a:	2800      	cmp	r0, #0
    7f6c:	d023      	beq.n	7fb6 <Initialize_Demo+0x1aa>
		uint16_t broadcastAddress = 0xFFFF;
    7f6e:	220e      	movs	r2, #14
    7f70:	446a      	add	r2, sp
    7f72:	2301      	movs	r3, #1
    7f74:	425b      	negs	r3, r3
    7f76:	8013      	strh	r3, [r2, #0]
		i = MiApp_EstablishConnection(myChannel, 0, (uint8_t*)&broadcastAddress, 0, Connection_Confirm);
    7f78:	4b2e      	ldr	r3, [pc, #184]	; (8034 <Initialize_Demo+0x228>)
    7f7a:	7818      	ldrb	r0, [r3, #0]
    7f7c:	4b30      	ldr	r3, [pc, #192]	; (8040 <Initialize_Demo+0x234>)
    7f7e:	9300      	str	r3, [sp, #0]
    7f80:	2300      	movs	r3, #0
    7f82:	2100      	movs	r1, #0
    7f84:	4c2f      	ldr	r4, [pc, #188]	; (8044 <Initialize_Demo+0x238>)
    7f86:	47a0      	blx	r4
		if( i == 0xFF )
    7f88:	28ff      	cmp	r0, #255	; 0xff
    7f8a:	d000      	beq.n	7f8e <Initialize_Demo+0x182>
    7f8c:	e772      	b.n	7e74 <Initialize_Demo+0x68>
            MiApp_StartConnection(START_CONN_DIRECT, 10, (1L << myChannel), Connection_Confirm);
    7f8e:	4b29      	ldr	r3, [pc, #164]	; (8034 <Initialize_Demo+0x228>)
    7f90:	781b      	ldrb	r3, [r3, #0]
    7f92:	2201      	movs	r2, #1
    7f94:	409a      	lsls	r2, r3
    7f96:	4b2a      	ldr	r3, [pc, #168]	; (8040 <Initialize_Demo+0x234>)
    7f98:	210a      	movs	r1, #10
    7f9a:	2000      	movs	r0, #0
    7f9c:	4c2a      	ldr	r4, [pc, #168]	; (8048 <Initialize_Demo+0x23c>)
    7f9e:	47a0      	blx	r4
    7fa0:	e768      	b.n	7e74 <Initialize_Demo+0x68>
    7fa2:	4c10      	ldr	r4, [pc, #64]	; (7fe4 <Initialize_Demo+0x1d8>)
    7fa4:	0026      	movs	r6, r4
    7fa6:	3608      	adds	r6, #8
				*peui64++ = (uint8_t)rand();
    7fa8:	4d15      	ldr	r5, [pc, #84]	; (8000 <Initialize_Demo+0x1f4>)
    7faa:	47a8      	blx	r5
    7fac:	7020      	strb	r0, [r4, #0]
    7fae:	3401      	adds	r4, #1
			for(i = 0; i<MY_ADDRESS_LENGTH; i++)
    7fb0:	42b4      	cmp	r4, r6
    7fb2:	d1fa      	bne.n	7faa <Initialize_Demo+0x19e>
    7fb4:	e7ca      	b.n	7f4c <Initialize_Demo+0x140>
            DemoOutput_ChannelError(myChannel);
    7fb6:	4b1f      	ldr	r3, [pc, #124]	; (8034 <Initialize_Demo+0x228>)
    7fb8:	7818      	ldrb	r0, [r3, #0]
    7fba:	4b24      	ldr	r3, [pc, #144]	; (804c <Initialize_Demo+0x240>)
    7fbc:	4798      	blx	r3
    7fbe:	e7d6      	b.n	7f6e <Initialize_Demo+0x162>
	startCompleteProcedure(true);
    7fc0:	2001      	movs	r0, #1
    7fc2:	4b23      	ldr	r3, [pc, #140]	; (8050 <Initialize_Demo+0x244>)
    7fc4:	4798      	blx	r3
    7fc6:	e75a      	b.n	7e7e <Initialize_Demo+0x72>
    7fc8:	00007c81 	.word	0x00007c81
    7fcc:	0000bff5 	.word	0x0000bff5
    7fd0:	00007d11 	.word	0x00007d11
    7fd4:	0000c169 	.word	0x0000c169
    7fd8:	0000b9a1 	.word	0x0000b9a1
    7fdc:	0000b069 	.word	0x0000b069
    7fe0:	00017f55 	.word	0x00017f55
    7fe4:	20000020 	.word	0x20000020
    7fe8:	0001784d 	.word	0x0001784d
    7fec:	0000b08d 	.word	0x0000b08d
    7ff0:	20003344 	.word	0x20003344
    7ff4:	0000775d 	.word	0x0000775d
    7ff8:	20000303 	.word	0x20000303
    7ffc:	0000e559 	.word	0x0000e559
    8000:	00017fb1 	.word	0x00017fb1
    8004:	40002800 	.word	0x40002800
    8008:	0000f2e9 	.word	0x0000f2e9
    800c:	0000af65 	.word	0x0000af65
    8010:	00019934 	.word	0x00019934
    8014:	00017f41 	.word	0x00017f41
    8018:	00019970 	.word	0x00019970
    801c:	00019980 	.word	0x00019980
    8020:	00017e25 	.word	0x00017e25
    8024:	0001999c 	.word	0x0001999c
    8028:	000199b0 	.word	0x000199b0
    802c:	000199cc 	.word	0x000199cc
    8030:	0000bfc5 	.word	0x0000bfc5
    8034:	20000019 	.word	0x20000019
    8038:	000075b9 	.word	0x000075b9
    803c:	0000b971 	.word	0x0000b971
    8040:	00007d41 	.word	0x00007d41
    8044:	0000d011 	.word	0x0000d011
    8048:	0000c1f1 	.word	0x0000c1f1
    804c:	0000770d 	.word	0x0000770d
    8050:	0000c17d 	.word	0x0000c17d

00008054 <Run_Demo>:

void Run_Demo(void)
{
    8054:	b510      	push	{r4, lr}
    P2PTasks();
    8056:	4b02      	ldr	r3, [pc, #8]	; (8060 <Run_Demo+0xc>)
    8058:	4798      	blx	r3
    run_star_demo(); 
    805a:	4b02      	ldr	r3, [pc, #8]	; (8064 <Run_Demo+0x10>)
    805c:	4798      	blx	r3
	
    805e:	bd10      	pop	{r4, pc}
    8060:	0000c2b9 	.word	0x0000c2b9
    8064:	00007969 	.word	0x00007969

00008068 <LCD_Initialize>:
* Overview:         Configure the LCD
*
* Note:             None
********************************************************************/
void LCD_Initialize(void)
{
    8068:	b510      	push	{r4, lr}
	gfx_mono_init();
    806a:	4b01      	ldr	r3, [pc, #4]	; (8070 <LCD_Initialize+0x8>)
    806c:	4798      	blx	r3
}    
    806e:	bd10      	pop	{r4, pc}
    8070:	00004a61 	.word	0x00004a61

00008074 <LCD_Erase>:
* Overview:         Clears LCD display
*
* Note:             None
********************************************************************/
void LCD_Erase(void)
{
    8074:	b510      	push	{r4, lr}
    8076:	b082      	sub	sp, #8
    /* Clear screen */
	gfx_mono_draw_filled_rect(0, 0, GFX_MONO_LCD_WIDTH, GFX_MONO_LCD_HEIGHT,
    8078:	2300      	movs	r3, #0
    807a:	9300      	str	r3, [sp, #0]
    807c:	3320      	adds	r3, #32
    807e:	2280      	movs	r2, #128	; 0x80
    8080:	2100      	movs	r1, #0
    8082:	2000      	movs	r0, #0
    8084:	4c01      	ldr	r4, [pc, #4]	; (808c <LCD_Erase+0x18>)
    8086:	47a0      	blx	r4
	GFX_PIXEL_CLR);
}
    8088:	b002      	add	sp, #8
    808a:	bd10      	pop	{r4, pc}
    808c:	000048b9 	.word	0x000048b9

00008090 <LCD_Update>:
* Overview:         LCD displays message
*
* Note:             None
********************************************************************/
void LCD_Update(void)
{
    8090:	b510      	push	{r4, lr}
	gfx_mono_draw_string(LCDText, 0, 0, &sysfont);
    8092:	4b03      	ldr	r3, [pc, #12]	; (80a0 <LCD_Update+0x10>)
    8094:	2200      	movs	r2, #0
    8096:	2100      	movs	r1, #0
    8098:	4802      	ldr	r0, [pc, #8]	; (80a4 <LCD_Update+0x14>)
    809a:	4c03      	ldr	r4, [pc, #12]	; (80a8 <LCD_Update+0x18>)
    809c:	47a0      	blx	r4
}
    809e:	bd10      	pop	{r4, pc}
    80a0:	20000008 	.word	0x20000008
    80a4:	2000219c 	.word	0x2000219c
    80a8:	000049bd 	.word	0x000049bd

000080ac <LCDTRXCount>:
 *
 * Note:            This routine is only effective if Explorer16 or
 *                  PIC18 Explorer demo boards are used
 ********************************************************************/
void LCDTRXCount(uint8_t txCount, uint8_t rxCount)
{
    80ac:	b570      	push	{r4, r5, r6, lr}
    80ae:	b082      	sub	sp, #8
    80b0:	0005      	movs	r5, r0
    80b2:	000e      	movs	r6, r1
	/* Clear screen */
	gfx_mono_draw_filled_rect(0, 0, GFX_MONO_LCD_WIDTH, GFX_MONO_LCD_HEIGHT/2, 
    80b4:	2300      	movs	r3, #0
    80b6:	9300      	str	r3, [sp, #0]
    80b8:	3310      	adds	r3, #16
    80ba:	2280      	movs	r2, #128	; 0x80
    80bc:	2100      	movs	r1, #0
    80be:	2000      	movs	r0, #0
    80c0:	4c0a      	ldr	r4, [pc, #40]	; (80ec <LCDTRXCount+0x40>)
    80c2:	47a0      	blx	r4
	GFX_PIXEL_CLR);
    snprintf(LCDText, sizeof(LCDText), "TX Messages: %d \nRX Messages: %d", txCount, rxCount);
    80c4:	4c0a      	ldr	r4, [pc, #40]	; (80f0 <LCDTRXCount+0x44>)
    80c6:	9600      	str	r6, [sp, #0]
    80c8:	002b      	movs	r3, r5
    80ca:	4a0a      	ldr	r2, [pc, #40]	; (80f4 <LCDTRXCount+0x48>)
    80cc:	2141      	movs	r1, #65	; 0x41
    80ce:	0020      	movs	r0, r4
    80d0:	4d09      	ldr	r5, [pc, #36]	; (80f8 <LCDTRXCount+0x4c>)
    80d2:	47a8      	blx	r5
    gfx_mono_draw_string(LCDText, 0, 0, &sysfont); 
    80d4:	4b09      	ldr	r3, [pc, #36]	; (80fc <LCDTRXCount+0x50>)
    80d6:	2200      	movs	r2, #0
    80d8:	2100      	movs	r1, #0
    80da:	0020      	movs	r0, r4
    80dc:	4c08      	ldr	r4, [pc, #32]	; (8100 <LCDTRXCount+0x54>)
    80de:	47a0      	blx	r4
	delay_ms(200);
    80e0:	20c8      	movs	r0, #200	; 0xc8
    80e2:	4b08      	ldr	r3, [pc, #32]	; (8104 <LCDTRXCount+0x58>)
    80e4:	4798      	blx	r3
}
    80e6:	b002      	add	sp, #8
    80e8:	bd70      	pop	{r4, r5, r6, pc}
    80ea:	46c0      	nop			; (mov r8, r8)
    80ec:	000048b9 	.word	0x000048b9
    80f0:	2000219c 	.word	0x2000219c
    80f4:	00019a14 	.word	0x00019a14
    80f8:	00018195 	.word	0x00018195
    80fc:	20000008 	.word	0x20000008
    8100:	000049bd 	.word	0x000049bd
    8104:	00004799 	.word	0x00004799

00008108 <LCDDisplay>:
 *
 * Note:            This routine is only effective if Explorer16 or
 *                  PIC18 Explorer demo boards are used
 ********************************************************************/
void LCDDisplay(char *text, uint8_t value, bool delay)
{
    8108:	b5f0      	push	{r4, r5, r6, r7, lr}
    810a:	b083      	sub	sp, #12
    810c:	0005      	movs	r5, r0
    810e:	000c      	movs	r4, r1
    8110:	0016      	movs	r6, r2
	/* Clear screen */	
	gfx_mono_draw_filled_rect(0, 0, GFX_MONO_LCD_WIDTH, GFX_MONO_LCD_HEIGHT,
    8112:	2300      	movs	r3, #0
    8114:	9300      	str	r3, [sp, #0]
    8116:	3320      	adds	r3, #32
    8118:	2280      	movs	r2, #128	; 0x80
    811a:	2100      	movs	r1, #0
    811c:	2000      	movs	r0, #0
    811e:	4f13      	ldr	r7, [pc, #76]	; (816c <LCDDisplay+0x64>)
    8120:	47b8      	blx	r7
			GFX_PIXEL_CLR);    

    snprintf(LCDText, sizeof(LCDText), text);
    8122:	002a      	movs	r2, r5
    8124:	2141      	movs	r1, #65	; 0x41
    8126:	4812      	ldr	r0, [pc, #72]	; (8170 <LCDDisplay+0x68>)
    8128:	4b12      	ldr	r3, [pc, #72]	; (8174 <LCDDisplay+0x6c>)
    812a:	4798      	blx	r3

    if (value)
    812c:	2c00      	cmp	r4, #0
    812e:	d00d      	beq.n	814c <LCDDisplay+0x44>
    8130:	2000      	movs	r0, #0
    {
		uint8_t char_count = 0;
		do {
           ++char_count;
    8132:	3001      	adds	r0, #1
    8134:	b2c0      	uxtb	r0, r0
		} while (*(++text));
    8136:	3501      	adds	r5, #1
    8138:	782b      	ldrb	r3, [r5, #0]
    813a:	2b00      	cmp	r3, #0
    813c:	d1f9      	bne.n	8132 <LCDDisplay+0x2a>
		
	    snprintf(LCDText+char_count, sizeof(LCDText), "%d", value);
    813e:	4b0c      	ldr	r3, [pc, #48]	; (8170 <LCDDisplay+0x68>)
    8140:	18c0      	adds	r0, r0, r3
    8142:	0023      	movs	r3, r4
    8144:	4a0c      	ldr	r2, [pc, #48]	; (8178 <LCDDisplay+0x70>)
    8146:	2141      	movs	r1, #65	; 0x41
    8148:	4c0a      	ldr	r4, [pc, #40]	; (8174 <LCDDisplay+0x6c>)
    814a:	47a0      	blx	r4
	}
	    
	gfx_mono_draw_string(LCDText, 0, 0, &sysfont);
    814c:	4b0b      	ldr	r3, [pc, #44]	; (817c <LCDDisplay+0x74>)
    814e:	2200      	movs	r2, #0
    8150:	2100      	movs	r1, #0
    8152:	4807      	ldr	r0, [pc, #28]	; (8170 <LCDDisplay+0x68>)
    8154:	4c0a      	ldr	r4, [pc, #40]	; (8180 <LCDDisplay+0x78>)
    8156:	47a0      	blx	r4
	
	if(delay)
    8158:	2e00      	cmp	r6, #0
    815a:	d101      	bne.n	8160 <LCDDisplay+0x58>
	{
	  delay_s(2);
	}
}
    815c:	b003      	add	sp, #12
    815e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  delay_s(2);
    8160:	20fa      	movs	r0, #250	; 0xfa
    8162:	00c0      	lsls	r0, r0, #3
    8164:	4b07      	ldr	r3, [pc, #28]	; (8184 <LCDDisplay+0x7c>)
    8166:	4798      	blx	r3
}
    8168:	e7f8      	b.n	815c <LCDDisplay+0x54>
    816a:	46c0      	nop			; (mov r8, r8)
    816c:	000048b9 	.word	0x000048b9
    8170:	2000219c 	.word	0x2000219c
    8174:	00018195 	.word	0x00018195
    8178:	000193fc 	.word	0x000193fc
    817c:	20000008 	.word	0x20000008
    8180:	000049bd 	.word	0x000049bd
    8184:	00004799 	.word	0x00004799

00008188 <CompareData>:
     Otherwise it is the start address of the buffer that contains the data to compare with
    \param numberOfBytes The number of bytes to compare
    \note offset+numberOfBytes must be <= D_NV_SECTOR_SIZE (meaning sector crossing is not permitted)
*/
static bool CompareData(uint8_t sector, uint16_t offset, uint8_t *pBuffer, D_Nv_Size_t numberOfBytes)
{
    8188:	b5f0      	push	{r4, r5, r6, r7, lr}
    818a:	46c6      	mov	lr, r8
    818c:	b500      	push	{lr}
    818e:	b084      	sub	sp, #16
    8190:	0014      	movs	r4, r2
    8192:	001f      	movs	r7, r3
  uint32_t address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE + offset;
    8194:	4b29      	ldr	r3, [pc, #164]	; (823c <CompareData+0xb4>)
    8196:	18cb      	adds	r3, r1, r3
    8198:	0340      	lsls	r0, r0, #13
    819a:	181d      	adds	r5, r3, r0
  uint8_t  buffer[16U];

  assert(numberOfBytes);
    819c:	2f00      	cmp	r7, #0
    819e:	d01a      	beq.n	81d6 <CompareData+0x4e>
  assert(address <= D_NV_MEMORY_END);
    81a0:	4b27      	ldr	r3, [pc, #156]	; (8240 <CompareData+0xb8>)
    81a2:	1e5a      	subs	r2, r3, #1
    81a4:	4295      	cmp	r5, r2
    81a6:	d81c      	bhi.n	81e2 <CompareData+0x5a>
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    81a8:	197a      	adds	r2, r7, r5
    81aa:	4293      	cmp	r3, r2
    81ac:	d31f      	bcc.n	81ee <CompareData+0x66>
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    81ae:	19c9      	adds	r1, r1, r7
    81b0:	2380      	movs	r3, #128	; 0x80
    81b2:	019b      	lsls	r3, r3, #6
    81b4:	4299      	cmp	r1, r3
    81b6:	d820      	bhi.n	81fa <CompareData+0x72>

  while(numberOfBytes)
  {
    uint16_t bytesToRead = MIN(sizeof(buffer), numberOfBytes);

    memcpy(buffer, (uint8_t FLASH_PTR *)address, bytesToRead);
    81b8:	4b22      	ldr	r3, [pc, #136]	; (8244 <CompareData+0xbc>)
    81ba:	4698      	mov	r8, r3
    uint16_t bytesToRead = MIN(sizeof(buffer), numberOfBytes);
    81bc:	1c3e      	adds	r6, r7, #0
    81be:	2f10      	cmp	r7, #16
    81c0:	d900      	bls.n	81c4 <CompareData+0x3c>
    81c2:	2610      	movs	r6, #16
    81c4:	b2b6      	uxth	r6, r6
    memcpy(buffer, (uint8_t FLASH_PTR *)address, bytesToRead);
    81c6:	0032      	movs	r2, r6
    81c8:	0029      	movs	r1, r5
    81ca:	4668      	mov	r0, sp
    81cc:	47c0      	blx	r8
    for (uint8_t i = 0U; i < bytesToRead; i++)
    81ce:	2e00      	cmp	r6, #0
    81d0:	d028      	beq.n	8224 <CompareData+0x9c>
    81d2:	2300      	movs	r3, #0
    81d4:	e01f      	b.n	8216 <CompareData+0x8e>
  assert(numberOfBytes);
    81d6:	4b1c      	ldr	r3, [pc, #112]	; (8248 <CompareData+0xc0>)
    81d8:	4a1c      	ldr	r2, [pc, #112]	; (824c <CompareData+0xc4>)
    81da:	21d9      	movs	r1, #217	; 0xd9
    81dc:	481c      	ldr	r0, [pc, #112]	; (8250 <CompareData+0xc8>)
    81de:	4c1d      	ldr	r4, [pc, #116]	; (8254 <CompareData+0xcc>)
    81e0:	47a0      	blx	r4
  assert(address <= D_NV_MEMORY_END);
    81e2:	4b1d      	ldr	r3, [pc, #116]	; (8258 <CompareData+0xd0>)
    81e4:	4a19      	ldr	r2, [pc, #100]	; (824c <CompareData+0xc4>)
    81e6:	21da      	movs	r1, #218	; 0xda
    81e8:	4819      	ldr	r0, [pc, #100]	; (8250 <CompareData+0xc8>)
    81ea:	4c1a      	ldr	r4, [pc, #104]	; (8254 <CompareData+0xcc>)
    81ec:	47a0      	blx	r4
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    81ee:	4b1b      	ldr	r3, [pc, #108]	; (825c <CompareData+0xd4>)
    81f0:	4a16      	ldr	r2, [pc, #88]	; (824c <CompareData+0xc4>)
    81f2:	21db      	movs	r1, #219	; 0xdb
    81f4:	4816      	ldr	r0, [pc, #88]	; (8250 <CompareData+0xc8>)
    81f6:	4c17      	ldr	r4, [pc, #92]	; (8254 <CompareData+0xcc>)
    81f8:	47a0      	blx	r4
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    81fa:	4b19      	ldr	r3, [pc, #100]	; (8260 <CompareData+0xd8>)
    81fc:	4a13      	ldr	r2, [pc, #76]	; (824c <CompareData+0xc4>)
    81fe:	21dc      	movs	r1, #220	; 0xdc
    8200:	4813      	ldr	r0, [pc, #76]	; (8250 <CompareData+0xc8>)
    8202:	4c14      	ldr	r4, [pc, #80]	; (8254 <CompareData+0xcc>)
    8204:	47a0      	blx	r4
      if (buffer[i] != ((pBuffer != NULL) ? *(pBuffer++) : 0xFF))
    8206:	21ff      	movs	r1, #255	; 0xff
    8208:	4291      	cmp	r1, r2
    820a:	d112      	bne.n	8232 <CompareData+0xaa>
    for (uint8_t i = 0U; i < bytesToRead; i++)
    820c:	3301      	adds	r3, #1
    820e:	b2db      	uxtb	r3, r3
    8210:	b29a      	uxth	r2, r3
    8212:	4296      	cmp	r6, r2
    8214:	d906      	bls.n	8224 <CompareData+0x9c>
      if (buffer[i] != ((pBuffer != NULL) ? *(pBuffer++) : 0xFF))
    8216:	466a      	mov	r2, sp
    8218:	5cd2      	ldrb	r2, [r2, r3]
    821a:	2c00      	cmp	r4, #0
    821c:	d0f3      	beq.n	8206 <CompareData+0x7e>
    821e:	7821      	ldrb	r1, [r4, #0]
    8220:	3401      	adds	r4, #1
    8222:	e7f1      	b.n	8208 <CompareData+0x80>
        return false;

    numberOfBytes -= bytesToRead;
    8224:	1bbf      	subs	r7, r7, r6
    8226:	b2bf      	uxth	r7, r7
    address += bytesToRead;
    8228:	19ad      	adds	r5, r5, r6
  while(numberOfBytes)
    822a:	2f00      	cmp	r7, #0
    822c:	d1c6      	bne.n	81bc <CompareData+0x34>
  }

  return true;
    822e:	2001      	movs	r0, #1
    8230:	e000      	b.n	8234 <CompareData+0xac>
        return false;
    8232:	2000      	movs	r0, #0
}
    8234:	b004      	add	sp, #16
    8236:	bc04      	pop	{r2}
    8238:	4690      	mov	r8, r2
    823a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    823c:	00000400 	.word	0x00000400
    8240:	00004400 	.word	0x00004400
    8244:	0001786b 	.word	0x0001786b
    8248:	00019a38 	.word	0x00019a38
    824c:	00019bc0 	.word	0x00019bc0
    8250:	00019a48 	.word	0x00019a48
    8254:	000177a9 	.word	0x000177a9
    8258:	00019a8c 	.word	0x00019a8c
    825c:	00019aa8 	.word	0x00019aa8
    8260:	00019adc 	.word	0x00019adc

00008264 <D_Nv_Init>:
{
    8264:	b510      	push	{r4, lr}
  assert ((D_NV_MEMORY_START % NVMCTRL_ROW_SIZE) == 0U);
    8266:	4a0b      	ldr	r2, [pc, #44]	; (8294 <D_Nv_Init+0x30>)
    8268:	23ff      	movs	r3, #255	; 0xff
    826a:	421a      	tst	r2, r3
    826c:	d106      	bne.n	827c <D_Nv_Init+0x18>
  assert((D_NV_MEMORY_END - D_NV_MEMORY_START + 1U) == D_NV_MEMORY_SIZE);
    826e:	4b0a      	ldr	r3, [pc, #40]	; (8298 <D_Nv_Init+0x34>)
    8270:	490a      	ldr	r1, [pc, #40]	; (829c <D_Nv_Init+0x38>)
    8272:	468c      	mov	ip, r1
    8274:	4463      	add	r3, ip
    8276:	4293      	cmp	r3, r2
    8278:	d106      	bne.n	8288 <D_Nv_Init+0x24>
}
    827a:	bd10      	pop	{r4, pc}
  assert ((D_NV_MEMORY_START % NVMCTRL_ROW_SIZE) == 0U);
    827c:	4b08      	ldr	r3, [pc, #32]	; (82a0 <D_Nv_Init+0x3c>)
    827e:	4a09      	ldr	r2, [pc, #36]	; (82a4 <D_Nv_Init+0x40>)
    8280:	2159      	movs	r1, #89	; 0x59
    8282:	4809      	ldr	r0, [pc, #36]	; (82a8 <D_Nv_Init+0x44>)
    8284:	4c09      	ldr	r4, [pc, #36]	; (82ac <D_Nv_Init+0x48>)
    8286:	47a0      	blx	r4
  assert((D_NV_MEMORY_END - D_NV_MEMORY_START + 1U) == D_NV_MEMORY_SIZE);
    8288:	4b09      	ldr	r3, [pc, #36]	; (82b0 <D_Nv_Init+0x4c>)
    828a:	4a06      	ldr	r2, [pc, #24]	; (82a4 <D_Nv_Init+0x40>)
    828c:	215d      	movs	r1, #93	; 0x5d
    828e:	4806      	ldr	r0, [pc, #24]	; (82a8 <D_Nv_Init+0x44>)
    8290:	4c06      	ldr	r4, [pc, #24]	; (82ac <D_Nv_Init+0x48>)
    8292:	47a0      	blx	r4
    8294:	00000400 	.word	0x00000400
    8298:	00004400 	.word	0x00004400
    829c:	ffffc000 	.word	0xffffc000
    82a0:	00019b0c 	.word	0x00019b0c
    82a4:	00019b7c 	.word	0x00019b7c
    82a8:	00019a48 	.word	0x00019a48
    82ac:	000177a9 	.word	0x000177a9
    82b0:	00019b3c 	.word	0x00019b3c

000082b4 <D_Nv_Read_Impl>:
{
    82b4:	b570      	push	{r4, r5, r6, lr}
    82b6:	0015      	movs	r5, r2
  uint32_t address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE + offset;
    82b8:	0344      	lsls	r4, r0, #13
    82ba:	4813      	ldr	r0, [pc, #76]	; (8308 <D_Nv_Read_Impl+0x54>)
    82bc:	1808      	adds	r0, r1, r0
    82be:	1824      	adds	r4, r4, r0
  assert(address <= D_NV_MEMORY_END);
    82c0:	4a12      	ldr	r2, [pc, #72]	; (830c <D_Nv_Read_Impl+0x58>)
    82c2:	1e50      	subs	r0, r2, #1
    82c4:	4284      	cmp	r4, r0
    82c6:	d80d      	bhi.n	82e4 <D_Nv_Read_Impl+0x30>
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    82c8:	18e0      	adds	r0, r4, r3
    82ca:	4282      	cmp	r2, r0
    82cc:	d310      	bcc.n	82f0 <D_Nv_Read_Impl+0x3c>
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    82ce:	18c9      	adds	r1, r1, r3
    82d0:	2280      	movs	r2, #128	; 0x80
    82d2:	0192      	lsls	r2, r2, #6
    82d4:	4291      	cmp	r1, r2
    82d6:	d811      	bhi.n	82fc <D_Nv_Read_Impl+0x48>
  memcpy(pBuffer, (uint8_t FLASH_PTR *)address, numberOfBytes);
    82d8:	001a      	movs	r2, r3
    82da:	0021      	movs	r1, r4
    82dc:	0028      	movs	r0, r5
    82de:	4b0c      	ldr	r3, [pc, #48]	; (8310 <D_Nv_Read_Impl+0x5c>)
    82e0:	4798      	blx	r3
}
    82e2:	bd70      	pop	{r4, r5, r6, pc}
  assert(address <= D_NV_MEMORY_END);
    82e4:	4b0b      	ldr	r3, [pc, #44]	; (8314 <D_Nv_Read_Impl+0x60>)
    82e6:	4a0c      	ldr	r2, [pc, #48]	; (8318 <D_Nv_Read_Impl+0x64>)
    82e8:	2172      	movs	r1, #114	; 0x72
    82ea:	480c      	ldr	r0, [pc, #48]	; (831c <D_Nv_Read_Impl+0x68>)
    82ec:	4c0c      	ldr	r4, [pc, #48]	; (8320 <D_Nv_Read_Impl+0x6c>)
    82ee:	47a0      	blx	r4
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    82f0:	4b0c      	ldr	r3, [pc, #48]	; (8324 <D_Nv_Read_Impl+0x70>)
    82f2:	4a09      	ldr	r2, [pc, #36]	; (8318 <D_Nv_Read_Impl+0x64>)
    82f4:	2173      	movs	r1, #115	; 0x73
    82f6:	4809      	ldr	r0, [pc, #36]	; (831c <D_Nv_Read_Impl+0x68>)
    82f8:	4c09      	ldr	r4, [pc, #36]	; (8320 <D_Nv_Read_Impl+0x6c>)
    82fa:	47a0      	blx	r4
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    82fc:	4b0a      	ldr	r3, [pc, #40]	; (8328 <D_Nv_Read_Impl+0x74>)
    82fe:	4a06      	ldr	r2, [pc, #24]	; (8318 <D_Nv_Read_Impl+0x64>)
    8300:	2174      	movs	r1, #116	; 0x74
    8302:	4806      	ldr	r0, [pc, #24]	; (831c <D_Nv_Read_Impl+0x68>)
    8304:	4c06      	ldr	r4, [pc, #24]	; (8320 <D_Nv_Read_Impl+0x6c>)
    8306:	47a0      	blx	r4
    8308:	00000400 	.word	0x00000400
    830c:	00004400 	.word	0x00004400
    8310:	0001786b 	.word	0x0001786b
    8314:	00019a8c 	.word	0x00019a8c
    8318:	00019b88 	.word	0x00019b88
    831c:	00019a48 	.word	0x00019a48
    8320:	000177a9 	.word	0x000177a9
    8324:	00019aa8 	.word	0x00019aa8
    8328:	00019adc 	.word	0x00019adc

0000832c <D_Nv_Write_Impl>:
{
    832c:	b5f0      	push	{r4, r5, r6, r7, lr}
    832e:	46de      	mov	lr, fp
    8330:	4657      	mov	r7, sl
    8332:	464e      	mov	r6, r9
    8334:	4645      	mov	r5, r8
    8336:	b5e0      	push	{r5, r6, r7, lr}
    8338:	b093      	sub	sp, #76	; 0x4c
    833a:	9201      	str	r2, [sp, #4]
    833c:	469a      	mov	sl, r3
  uint32_t  address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE + offset;
    833e:	4c46      	ldr	r4, [pc, #280]	; (8458 <D_Nv_Write_Impl+0x12c>)
    8340:	190c      	adds	r4, r1, r4
    8342:	0340      	lsls	r0, r0, #13
    8344:	1825      	adds	r5, r4, r0
  assert(numberOfBytes);
    8346:	2b00      	cmp	r3, #0
    8348:	d047      	beq.n	83da <D_Nv_Write_Impl+0xae>
  assert(address <= D_NV_MEMORY_END);
    834a:	4b44      	ldr	r3, [pc, #272]	; (845c <D_Nv_Write_Impl+0x130>)
    834c:	1e5a      	subs	r2, r3, #1
    834e:	4295      	cmp	r5, r2
    8350:	d849      	bhi.n	83e6 <D_Nv_Write_Impl+0xba>
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    8352:	4652      	mov	r2, sl
    8354:	1952      	adds	r2, r2, r5
    8356:	4293      	cmp	r3, r2
    8358:	d34b      	bcc.n	83f2 <D_Nv_Write_Impl+0xc6>
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    835a:	46d3      	mov	fp, sl
    835c:	4451      	add	r1, sl
    835e:	2380      	movs	r3, #128	; 0x80
    8360:	019b      	lsls	r3, r3, #6
    8362:	4299      	cmp	r1, r3
    8364:	d84b      	bhi.n	83fe <D_Nv_Write_Impl+0xd2>
  if (s_pfSystemCheckCallback != NULL)
    8366:	4b3e      	ldr	r3, [pc, #248]	; (8460 <D_Nv_Write_Impl+0x134>)
    8368:	681b      	ldr	r3, [r3, #0]
    836a:	2b00      	cmp	r3, #0
    836c:	d000      	beq.n	8370 <D_Nv_Write_Impl+0x44>
    s_pfSystemCheckCallback();
    836e:	4798      	blx	r3
  pageOffset = address % NVMCTRL_PAGE_SIZE;
    8370:	273f      	movs	r7, #63	; 0x3f
    8372:	402f      	ands	r7, r5
  pageStart = address - pageOffset;
    8374:	1bec      	subs	r4, r5, r7
  numberOfPageBytes = MIN((NVMCTRL_PAGE_SIZE - pageOffset), numberOfBytes);
    8376:	2640      	movs	r6, #64	; 0x40
    8378:	1bf6      	subs	r6, r6, r7
    837a:	455e      	cmp	r6, fp
    837c:	dd00      	ble.n	8380 <D_Nv_Write_Impl+0x54>
    837e:	4656      	mov	r6, sl
    8380:	b2b3      	uxth	r3, r6
    8382:	469b      	mov	fp, r3
  memset (page_buf, 0xFF, NVMCTRL_PAGE_SIZE);
    8384:	2240      	movs	r2, #64	; 0x40
    8386:	21ff      	movs	r1, #255	; 0xff
    8388:	a802      	add	r0, sp, #8
    838a:	4b36      	ldr	r3, [pc, #216]	; (8464 <D_Nv_Write_Impl+0x138>)
    838c:	4798      	blx	r3
  memcpy (&page_buf[pageOffset], pBuffer, numberOfPageBytes);
    838e:	003b      	movs	r3, r7
    8390:	aa02      	add	r2, sp, #8
    8392:	4694      	mov	ip, r2
    8394:	4463      	add	r3, ip
    8396:	9300      	str	r3, [sp, #0]
    8398:	0436      	lsls	r6, r6, #16
    839a:	0c37      	lsrs	r7, r6, #16
    839c:	003a      	movs	r2, r7
    839e:	9901      	ldr	r1, [sp, #4]
    83a0:	0018      	movs	r0, r3
    83a2:	4b31      	ldr	r3, [pc, #196]	; (8468 <D_Nv_Write_Impl+0x13c>)
    83a4:	4798      	blx	r3
	cpu_irq_enter_critical();
    83a6:	4b31      	ldr	r3, [pc, #196]	; (846c <D_Nv_Write_Impl+0x140>)
    83a8:	4798      	blx	r3
    error_code = nvm_write_buffer(pageStart, page_buf, NVMCTRL_PAGE_SIZE);
    83aa:	4e31      	ldr	r6, [pc, #196]	; (8470 <D_Nv_Write_Impl+0x144>)
    83ac:	2240      	movs	r2, #64	; 0x40
    83ae:	a902      	add	r1, sp, #8
    83b0:	0020      	movs	r0, r4
    83b2:	47b0      	blx	r6
  } while (error_code == STATUS_BUSY);
    83b4:	2805      	cmp	r0, #5
    83b6:	d0f9      	beq.n	83ac <D_Nv_Write_Impl+0x80>
	cpu_irq_leave_critical();
    83b8:	4b2e      	ldr	r3, [pc, #184]	; (8474 <D_Nv_Write_Impl+0x148>)
    83ba:	4798      	blx	r3
  numberOfBytes -= numberOfPageBytes;
    83bc:	4653      	mov	r3, sl
    83be:	465a      	mov	r2, fp
    83c0:	1a9e      	subs	r6, r3, r2
    83c2:	b2b6      	uxth	r6, r6
  address += numberOfPageBytes;
    83c4:	19ec      	adds	r4, r5, r7
  pBuffer += numberOfPageBytes;
    83c6:	9b01      	ldr	r3, [sp, #4]
    83c8:	4699      	mov	r9, r3
    83ca:	44b9      	add	r9, r7
  while (0U < numberOfBytes)
    83cc:	2e00      	cmp	r6, #0
    83ce:	d03b      	beq.n	8448 <D_Nv_Write_Impl+0x11c>
    memset (page_buf, 0xFF, NVMCTRL_PAGE_SIZE);
    83d0:	4b24      	ldr	r3, [pc, #144]	; (8464 <D_Nv_Write_Impl+0x138>)
    83d2:	469b      	mov	fp, r3
    memcpy (&page_buf[pageOffset], pBuffer, numberOfPageBytes);
    83d4:	4b24      	ldr	r3, [pc, #144]	; (8468 <D_Nv_Write_Impl+0x13c>)
    83d6:	4698      	mov	r8, r3
    83d8:	e031      	b.n	843e <D_Nv_Write_Impl+0x112>
  assert(numberOfBytes);
    83da:	4b27      	ldr	r3, [pc, #156]	; (8478 <D_Nv_Write_Impl+0x14c>)
    83dc:	4a27      	ldr	r2, [pc, #156]	; (847c <D_Nv_Write_Impl+0x150>)
    83de:	218a      	movs	r1, #138	; 0x8a
    83e0:	4827      	ldr	r0, [pc, #156]	; (8480 <D_Nv_Write_Impl+0x154>)
    83e2:	4c28      	ldr	r4, [pc, #160]	; (8484 <D_Nv_Write_Impl+0x158>)
    83e4:	47a0      	blx	r4
  assert(address <= D_NV_MEMORY_END);
    83e6:	4b28      	ldr	r3, [pc, #160]	; (8488 <D_Nv_Write_Impl+0x15c>)
    83e8:	4a24      	ldr	r2, [pc, #144]	; (847c <D_Nv_Write_Impl+0x150>)
    83ea:	218b      	movs	r1, #139	; 0x8b
    83ec:	4824      	ldr	r0, [pc, #144]	; (8480 <D_Nv_Write_Impl+0x154>)
    83ee:	4c25      	ldr	r4, [pc, #148]	; (8484 <D_Nv_Write_Impl+0x158>)
    83f0:	47a0      	blx	r4
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    83f2:	4b26      	ldr	r3, [pc, #152]	; (848c <D_Nv_Write_Impl+0x160>)
    83f4:	4a21      	ldr	r2, [pc, #132]	; (847c <D_Nv_Write_Impl+0x150>)
    83f6:	218c      	movs	r1, #140	; 0x8c
    83f8:	4821      	ldr	r0, [pc, #132]	; (8480 <D_Nv_Write_Impl+0x154>)
    83fa:	4c22      	ldr	r4, [pc, #136]	; (8484 <D_Nv_Write_Impl+0x158>)
    83fc:	47a0      	blx	r4
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    83fe:	4b24      	ldr	r3, [pc, #144]	; (8490 <D_Nv_Write_Impl+0x164>)
    8400:	4a1e      	ldr	r2, [pc, #120]	; (847c <D_Nv_Write_Impl+0x150>)
    8402:	218d      	movs	r1, #141	; 0x8d
    8404:	481e      	ldr	r0, [pc, #120]	; (8480 <D_Nv_Write_Impl+0x154>)
    8406:	4c1f      	ldr	r4, [pc, #124]	; (8484 <D_Nv_Write_Impl+0x158>)
    8408:	47a0      	blx	r4
    numberOfPageBytes = MIN(NVMCTRL_PAGE_SIZE, numberOfBytes);
    840a:	b29f      	uxth	r7, r3
    memset (page_buf, 0xFF, NVMCTRL_PAGE_SIZE);
    840c:	2240      	movs	r2, #64	; 0x40
    840e:	21ff      	movs	r1, #255	; 0xff
    8410:	a802      	add	r0, sp, #8
    8412:	47d8      	blx	fp
    memcpy (&page_buf[pageOffset], pBuffer, numberOfPageBytes);
    8414:	003a      	movs	r2, r7
    8416:	4649      	mov	r1, r9
    8418:	9800      	ldr	r0, [sp, #0]
    841a:	47c0      	blx	r8
	cpu_irq_enter_critical();
    841c:	4b13      	ldr	r3, [pc, #76]	; (846c <D_Nv_Write_Impl+0x140>)
    841e:	4798      	blx	r3
      error_code = nvm_write_buffer(address, page_buf, NVMCTRL_PAGE_SIZE);
    8420:	4d13      	ldr	r5, [pc, #76]	; (8470 <D_Nv_Write_Impl+0x144>)
    8422:	2240      	movs	r2, #64	; 0x40
    8424:	a902      	add	r1, sp, #8
    8426:	0020      	movs	r0, r4
    8428:	47a8      	blx	r5
    } while (error_code == STATUS_BUSY);
    842a:	2805      	cmp	r0, #5
    842c:	d0f9      	beq.n	8422 <D_Nv_Write_Impl+0xf6>
	cpu_irq_leave_critical();
    842e:	4b11      	ldr	r3, [pc, #68]	; (8474 <D_Nv_Write_Impl+0x148>)
    8430:	4798      	blx	r3
    numberOfBytes -= numberOfPageBytes;
    8432:	1bf6      	subs	r6, r6, r7
    8434:	b2b6      	uxth	r6, r6
    address += numberOfPageBytes;
    8436:	19e4      	adds	r4, r4, r7
    pBuffer += numberOfPageBytes;
    8438:	44b9      	add	r9, r7
  while (0U < numberOfBytes)
    843a:	2e00      	cmp	r6, #0
    843c:	d004      	beq.n	8448 <D_Nv_Write_Impl+0x11c>
    numberOfPageBytes = MIN(NVMCTRL_PAGE_SIZE, numberOfBytes);
    843e:	1c33      	adds	r3, r6, #0
    8440:	2e40      	cmp	r6, #64	; 0x40
    8442:	d9e2      	bls.n	840a <D_Nv_Write_Impl+0xde>
    8444:	2340      	movs	r3, #64	; 0x40
    8446:	e7e0      	b.n	840a <D_Nv_Write_Impl+0xde>
}
    8448:	b013      	add	sp, #76	; 0x4c
    844a:	bc3c      	pop	{r2, r3, r4, r5}
    844c:	4690      	mov	r8, r2
    844e:	4699      	mov	r9, r3
    8450:	46a2      	mov	sl, r4
    8452:	46ab      	mov	fp, r5
    8454:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8456:	46c0      	nop			; (mov r8, r8)
    8458:	00000400 	.word	0x00000400
    845c:	00004400 	.word	0x00004400
    8460:	20000304 	.word	0x20000304
    8464:	0001787d 	.word	0x0001787d
    8468:	0001786b 	.word	0x0001786b
    846c:	00004b21 	.word	0x00004b21
    8470:	000050f9 	.word	0x000050f9
    8474:	00004b61 	.word	0x00004b61
    8478:	00019a38 	.word	0x00019a38
    847c:	00019b98 	.word	0x00019b98
    8480:	00019a48 	.word	0x00019a48
    8484:	000177a9 	.word	0x000177a9
    8488:	00019a8c 	.word	0x00019a8c
    848c:	00019aa8 	.word	0x00019aa8
    8490:	00019adc 	.word	0x00019adc

00008494 <D_Nv_EraseSector_Impl>:
{
    8494:	b570      	push	{r4, r5, r6, lr}
  uint32_t address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE;
    8496:	0344      	lsls	r4, r0, #13
    8498:	480c      	ldr	r0, [pc, #48]	; (84cc <D_Nv_EraseSector_Impl+0x38>)
    849a:	1824      	adds	r4, r4, r0
  address &= ~(NVMCTRL_ROW_SIZE - 1);
    849c:	23ff      	movs	r3, #255	; 0xff
    849e:	439c      	bics	r4, r3
  assert(address <= D_NV_MEMORY_END);
    84a0:	4b0b      	ldr	r3, [pc, #44]	; (84d0 <D_Nv_EraseSector_Impl+0x3c>)
    84a2:	3b01      	subs	r3, #1
    84a4:	2280      	movs	r2, #128	; 0x80
    84a6:	0192      	lsls	r2, r2, #6
    84a8:	18a6      	adds	r6, r4, r2
    84aa:	429c      	cmp	r4, r3
    84ac:	d807      	bhi.n	84be <D_Nv_EraseSector_Impl+0x2a>
    nvm_erase_row (address);
    84ae:	4d09      	ldr	r5, [pc, #36]	; (84d4 <D_Nv_EraseSector_Impl+0x40>)
    84b0:	0020      	movs	r0, r4
    84b2:	47a8      	blx	r5
    address += NVMCTRL_ROW_SIZE;
    84b4:	3401      	adds	r4, #1
    84b6:	34ff      	adds	r4, #255	; 0xff
  for (uint8_t i = 0U; i < (D_NV_SECTOR_SIZE / NVMCTRL_ROW_SIZE); i++)
    84b8:	42b4      	cmp	r4, r6
    84ba:	d1f9      	bne.n	84b0 <D_Nv_EraseSector_Impl+0x1c>
}
    84bc:	bd70      	pop	{r4, r5, r6, pc}
  assert(address <= D_NV_MEMORY_END);
    84be:	4b06      	ldr	r3, [pc, #24]	; (84d8 <D_Nv_EraseSector_Impl+0x44>)
    84c0:	4a06      	ldr	r2, [pc, #24]	; (84dc <D_Nv_EraseSector_Impl+0x48>)
    84c2:	21c2      	movs	r1, #194	; 0xc2
    84c4:	4806      	ldr	r0, [pc, #24]	; (84e0 <D_Nv_EraseSector_Impl+0x4c>)
    84c6:	4c07      	ldr	r4, [pc, #28]	; (84e4 <D_Nv_EraseSector_Impl+0x50>)
    84c8:	47a0      	blx	r4
    84ca:	46c0      	nop			; (mov r8, r8)
    84cc:	00000400 	.word	0x00000400
    84d0:	00004400 	.word	0x00004400
    84d4:	000051d1 	.word	0x000051d1
    84d8:	00019a8c 	.word	0x00019a8c
    84dc:	00019ba8 	.word	0x00019ba8
    84e0:	00019a48 	.word	0x00019a48
    84e4:	000177a9 	.word	0x000177a9

000084e8 <D_Nv_IsEmpty_Impl>:
    \param numberOfBytes The number of bytes to check
    \returns true if the range is empty, FALSE otherwise.
    \note Sector crossing is not permitted
*/
bool D_Nv_IsEmpty(uint8_t sector, uint16_t offset, D_Nv_Size_t numberOfBytes)
{
    84e8:	b510      	push	{r4, lr}
    84ea:	0013      	movs	r3, r2
  return CompareData(sector, offset, NULL, numberOfBytes);
    84ec:	2200      	movs	r2, #0
    84ee:	4c01      	ldr	r4, [pc, #4]	; (84f4 <D_Nv_IsEmpty_Impl+0xc>)
    84f0:	47a0      	blx	r4
}
    84f2:	bd10      	pop	{r4, pc}
    84f4:	00008189 	.word	0x00008189

000084f8 <D_Nv_IsEqual_Impl>:
    \param[in] pBuffer The start address of the buffer that contains the data to compare with
    \param numberOfBytes The number of bytes to compare
    \note offset+numberOfBytes must be <= D_NV_SECTOR_SIZE (meaning sector crossing is not permitted)
*/
bool D_Nv_IsEqual(uint8_t sector, uint16_t offset, uint8_t *pBuffer, D_Nv_Size_t numberOfBytes)
{
    84f8:	b510      	push	{r4, lr}
  return CompareData(sector, offset, pBuffer, numberOfBytes);
    84fa:	4c01      	ldr	r4, [pc, #4]	; (8500 <D_Nv_IsEqual_Impl+0x8>)
    84fc:	47a0      	blx	r4
}
    84fe:	bd10      	pop	{r4, pc}
    8500:	00008189 	.word	0x00008189

00008504 <PowerSupplyTooLow>:
/** Check the power supply.
    \returns TRUE if the power supply is too low, FALSE when the the power
             supply is OK or when there is no callback installed.
*/
static bool PowerSupplyTooLow()
{
    8504:	b510      	push	{r4, lr}
    bool result = false;
    if ( s_powerSupplyCheckingFunction != NULL )
    8506:	4b05      	ldr	r3, [pc, #20]	; (851c <PowerSupplyTooLow+0x18>)
    8508:	681b      	ldr	r3, [r3, #0]
    850a:	2b00      	cmp	r3, #0
    850c:	d004      	beq.n	8518 <PowerSupplyTooLow+0x14>
    {
        if ( !s_powerSupplyCheckingFunction() )
    850e:	4798      	blx	r3
    8510:	2301      	movs	r3, #1
    8512:	4058      	eors	r0, r3
    8514:	b2c0      	uxtb	r0, r0
        {
            result = true;
        }
    }
    return result;
}
    8516:	bd10      	pop	{r4, pc}
    bool result = false;
    8518:	2000      	movs	r0, #0
    851a:	e7fc      	b.n	8516 <PowerSupplyTooLow+0x12>
    851c:	2000047c 	.word	0x2000047c

00008520 <UpdateSectorHead>:
*/

static void UpdateSectorHead(uint16_t increment, ItemAlignment_t itemAlignment )
{
    // Adjust the sector head according to the increment and alignment given
    switch(itemAlignment)
    8520:	2901      	cmp	r1, #1
    8522:	d009      	beq.n	8538 <UpdateSectorHead+0x18>
    8524:	2900      	cmp	r1, #0
    8526:	d002      	beq.n	852e <UpdateSectorHead+0xe>
    8528:	2902      	cmp	r1, #2
    852a:	d00d      	beq.n	8548 <UpdateSectorHead+0x28>
           s_sectorHead = (s_sectorHead + increment + 0x003Fu) & 0xFFC0u;
           break;
        default:
           break;
    }
}
    852c:	4770      	bx	lr
           s_sectorHead = (s_sectorHead + increment);
    852e:	4b0a      	ldr	r3, [pc, #40]	; (8558 <UpdateSectorHead+0x38>)
    8530:	881a      	ldrh	r2, [r3, #0]
    8532:	1880      	adds	r0, r0, r2
    8534:	8018      	strh	r0, [r3, #0]
           break;
    8536:	e7f9      	b.n	852c <UpdateSectorHead+0xc>
           s_sectorHead = (s_sectorHead + increment + 0x000Fu) & 0xFFF0u;
    8538:	4a07      	ldr	r2, [pc, #28]	; (8558 <UpdateSectorHead+0x38>)
    853a:	8813      	ldrh	r3, [r2, #0]
    853c:	330f      	adds	r3, #15
    853e:	18c0      	adds	r0, r0, r3
    8540:	230f      	movs	r3, #15
    8542:	4398      	bics	r0, r3
    8544:	8010      	strh	r0, [r2, #0]
           break;
    8546:	e7f1      	b.n	852c <UpdateSectorHead+0xc>
           s_sectorHead = (s_sectorHead + increment + 0x003Fu) & 0xFFC0u;
    8548:	4a03      	ldr	r2, [pc, #12]	; (8558 <UpdateSectorHead+0x38>)
    854a:	8813      	ldrh	r3, [r2, #0]
    854c:	333f      	adds	r3, #63	; 0x3f
    854e:	18c0      	adds	r0, r0, r3
    8550:	233f      	movs	r3, #63	; 0x3f
    8552:	4398      	bics	r0, r3
    8554:	8010      	strh	r0, [r2, #0]
}
    8556:	e7e9      	b.n	852c <UpdateSectorHead+0xc>
    8558:	20000482 	.word	0x20000482

0000855c <ComputeCrc>:
    // item not found
    return 0x0000u;
}

static uint16_t ComputeCrc(uint8_t* pData, uint16_t length, uint16_t crc)
{
    855c:	b530      	push	{r4, r5, lr}
    for ( /* empty */ ; length != 0u; length-- )
    855e:	2900      	cmp	r1, #0
    8560:	d019      	beq.n	8596 <ComputeCrc+0x3a>
    {
        uint8_t x;
        uint8_t data;

        if (pData == NULL)
            data = 0xFF;
    8562:	24ff      	movs	r4, #255	; 0xff
    8564:	e013      	b.n	858e <ComputeCrc+0x32>
    8566:	0023      	movs	r3, r4
        else
            data = *pData;

        x = (uint8_t) ((crc >> 8) ^ data);
    8568:	0a15      	lsrs	r5, r2, #8
    856a:	406b      	eors	r3, r5
        x = x ^ (x >> 4);
    856c:	091d      	lsrs	r5, r3, #4
    856e:	406b      	eors	r3, r5
        crc = (crc << 8) ^ ((uint16_t) x << 12) ^ ((uint16_t) x << 5) ^ (uint16_t) x;
    8570:	0212      	lsls	r2, r2, #8
    8572:	405a      	eors	r2, r3
    8574:	031d      	lsls	r5, r3, #12
    8576:	406a      	eors	r2, r5
    8578:	015b      	lsls	r3, r3, #5
    857a:	405a      	eors	r2, r3
    857c:	b292      	uxth	r2, r2

        if ( pData != NULL )
          pData++;
    857e:	0003      	movs	r3, r0
    8580:	1e5d      	subs	r5, r3, #1
    8582:	41ab      	sbcs	r3, r5
    8584:	18c0      	adds	r0, r0, r3
    for ( /* empty */ ; length != 0u; length-- )
    8586:	3901      	subs	r1, #1
    8588:	b289      	uxth	r1, r1
    858a:	2900      	cmp	r1, #0
    858c:	d003      	beq.n	8596 <ComputeCrc+0x3a>
        if (pData == NULL)
    858e:	2800      	cmp	r0, #0
    8590:	d0e9      	beq.n	8566 <ComputeCrc+0xa>
            data = *pData;
    8592:	7803      	ldrb	r3, [r0, #0]
    8594:	e7e8      	b.n	8568 <ComputeCrc+0xc>
    }

    return crc;
}
    8596:	0010      	movs	r0, r2
    8598:	bd30      	pop	{r4, r5, pc}
    859a:	Address 0x0000859a is out of bounds.


0000859c <GatherData>:
       be copied to the flash memory \ref s_sectorHead in sector \ref s_sector.

*/

static bool GatherData(uint8_t sourceSector, uint16_t lastBlockPointer, uint16_t offset, uint16_t length, void* pData)
{
    859c:	b5f0      	push	{r4, r5, r6, r7, lr}
    859e:	46de      	mov	lr, fp
    85a0:	4657      	mov	r7, sl
    85a2:	b580      	push	{r7, lr}
    85a4:	b089      	sub	sp, #36	; 0x24
    85a6:	9001      	str	r0, [sp, #4]
    85a8:	9102      	str	r1, [sp, #8]
    85aa:	4693      	mov	fp, r2
    uint16_t blockStart;
    uint16_t blockEnd;
    uint16_t count;

    // prepare the correct pointer
    if ( pData != NULL )
    85ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
    85ae:	2a00      	cmp	r2, #0
    85b0:	d00d      	beq.n	85ce <GatherData+0x32>
    {
        pDestination = (uint8_t*) pData + length;
    85b2:	4692      	mov	sl, r2
    85b4:	449a      	add	sl, r3

    // [readStart, readEnd> is the range of data that can be read during the current
    // pass over the blocks (the range includes readStart, but not readEnd).
    // it is initialized with the requested range
    uint16_t readStart = offset;
    uint16_t readEnd = offset + length;
    85b6:	445b      	add	r3, fp
    85b8:	b29d      	uxth	r5, r3

    // continue until we have all the data that was requested
    while ( readStart != readEnd )
    85ba:	465e      	mov	r6, fp
    85bc:	9c02      	ldr	r4, [sp, #8]
            sourcePointer -= count;
            pDestination -= count;
            D_Nv_Read(sourceSector, sourcePointer, (uint8_t*)pDestination, count);
        }
    }
    return true;
    85be:	2001      	movs	r0, #1
    while ( readStart != readEnd )
    85c0:	45ab      	cmp	fp, r5
    85c2:	d03e      	beq.n	8642 <GatherData+0xa6>
            D_Nv_Read(sourceSector, currentBlockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    85c4:	4f22      	ldr	r7, [pc, #136]	; (8650 <GatherData+0xb4>)
            if ( currentBlockPointer == 0x0000u )
    85c6:	2c00      	cmp	r4, #0
    85c8:	d108      	bne.n	85dc <GatherData+0x40>
                return false;
    85ca:	2000      	movs	r0, #0
    85cc:	e039      	b.n	8642 <GatherData+0xa6>
    uint8_t* pDestination = NULL;
    85ce:	2200      	movs	r2, #0
    85d0:	4692      	mov	sl, r2
    85d2:	e7f0      	b.n	85b6 <GatherData+0x1a>
            currentBlockPointer = blockHeader.previousBlock;
    85d4:	ab04      	add	r3, sp, #16
    85d6:	895c      	ldrh	r4, [r3, #10]
            if ( currentBlockPointer == 0x0000u )
    85d8:	2c00      	cmp	r4, #0
    85da:	d031      	beq.n	8640 <GatherData+0xa4>
            D_Nv_Read(sourceSector, currentBlockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    85dc:	2310      	movs	r3, #16
    85de:	aa04      	add	r2, sp, #16
    85e0:	0021      	movs	r1, r4
    85e2:	9801      	ldr	r0, [sp, #4]
    85e4:	47b8      	blx	r7
            blockStart = blockHeader.blockOffset;
    85e6:	ab04      	add	r3, sp, #16
    85e8:	889a      	ldrh	r2, [r3, #4]
            if ( (readEnd <= blockStart) || (readStart >= blockEnd) )
    85ea:	42aa      	cmp	r2, r5
    85ec:	d2f2      	bcs.n	85d4 <GatherData+0x38>
            blockEnd = blockHeader.blockOffset + blockHeader.blockLength;
    85ee:	88db      	ldrh	r3, [r3, #6]
    85f0:	18d3      	adds	r3, r2, r3
    85f2:	b29b      	uxth	r3, r3
            if ( (readEnd <= blockStart) || (readStart >= blockEnd) )
    85f4:	42b3      	cmp	r3, r6
    85f6:	d9ed      	bls.n	85d4 <GatherData+0x38>
            else if ( readEnd > blockEnd )
    85f8:	42ab      	cmp	r3, r5
    85fa:	d201      	bcs.n	8600 <GatherData+0x64>
                readStart = blockEnd;
    85fc:	001e      	movs	r6, r3
    85fe:	e7e9      	b.n	85d4 <GatherData+0x38>
        uint16_t sourcePointer = (currentBlockPointer + BLOCK_HEADER_SIZE) + (readEnd - blockStart);
    8600:	1aa9      	subs	r1, r5, r2
    8602:	b289      	uxth	r1, r1
        if ( readStart < blockStart )
    8604:	42b2      	cmp	r2, r6
    8606:	d915      	bls.n	8634 <GatherData+0x98>
            currentBlockPointer = blockHeader.previousBlock;
    8608:	ab04      	add	r3, sp, #16
    860a:	895b      	ldrh	r3, [r3, #10]
    860c:	9303      	str	r3, [sp, #12]
            count = readEnd - blockStart;
    860e:	000b      	movs	r3, r1
        readEnd -= count;
    8610:	1aed      	subs	r5, r5, r3
    8612:	b2ad      	uxth	r5, r5
        if ( pDestination != NULL)
    8614:	4652      	mov	r2, sl
    8616:	2a00      	cmp	r2, #0
    8618:	d008      	beq.n	862c <GatherData+0x90>
        uint16_t sourcePointer = (currentBlockPointer + BLOCK_HEADER_SIZE) + (readEnd - blockStart);
    861a:	3410      	adds	r4, #16
    861c:	1909      	adds	r1, r1, r4
            pDestination -= count;
    861e:	1ad2      	subs	r2, r2, r3
    8620:	4692      	mov	sl, r2
            sourcePointer -= count;
    8622:	1ac9      	subs	r1, r1, r3
            D_Nv_Read(sourceSector, sourcePointer, (uint8_t*)pDestination, count);
    8624:	b289      	uxth	r1, r1
    8626:	9801      	ldr	r0, [sp, #4]
    8628:	4c09      	ldr	r4, [pc, #36]	; (8650 <GatherData+0xb4>)
    862a:	47a0      	blx	r4
    while ( readStart != readEnd )
    862c:	42ae      	cmp	r6, r5
    862e:	d00d      	beq.n	864c <GatherData+0xb0>
    8630:	9c03      	ldr	r4, [sp, #12]
    8632:	e7c8      	b.n	85c6 <GatherData+0x2a>
            count = readEnd - readStart;
    8634:	1bab      	subs	r3, r5, r6
    8636:	b29b      	uxth	r3, r3
            readStart = offset;
    8638:	465e      	mov	r6, fp
            currentBlockPointer = lastBlockPointer;
    863a:	9a02      	ldr	r2, [sp, #8]
    863c:	9203      	str	r2, [sp, #12]
    863e:	e7e7      	b.n	8610 <GatherData+0x74>
                return false;
    8640:	2000      	movs	r0, #0
}
    8642:	b009      	add	sp, #36	; 0x24
    8644:	bc0c      	pop	{r2, r3}
    8646:	4692      	mov	sl, r2
    8648:	469b      	mov	fp, r3
    864a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return true;
    864c:	2001      	movs	r0, #1
    864e:	e7f8      	b.n	8642 <GatherData+0xa6>
    8650:	000082b5 	.word	0x000082b5

00008654 <ComputeDataCrc>:
{
    8654:	b5f0      	push	{r4, r5, r6, r7, lr}
    8656:	46de      	mov	lr, fp
    8658:	4647      	mov	r7, r8
    865a:	b580      	push	{r7, lr}
    865c:	b087      	sub	sp, #28
    865e:	9004      	str	r0, [sp, #16]
    8660:	9105      	str	r1, [sp, #20]
    length = pBlockHeader->blockLength;
    8662:	7995      	ldrb	r5, [r2, #6]
    8664:	79d3      	ldrb	r3, [r2, #7]
    8666:	021b      	lsls	r3, r3, #8
    8668:	431d      	orrs	r5, r3
    offset = pBlockHeader->blockOffset;
    866a:	7917      	ldrb	r7, [r2, #4]
    866c:	7953      	ldrb	r3, [r2, #5]
    866e:	021b      	lsls	r3, r3, #8
    8670:	431f      	orrs	r7, r3
    for(int8_t i= (length/sizeof(dataBlock)); i>=0; i--)
    8672:	0a2c      	lsrs	r4, r5, #8
    8674:	b264      	sxtb	r4, r4
    8676:	2c00      	cmp	r4, #0
    8678:	db2f      	blt.n	86da <ComputeDataCrc+0x86>
    867a:	4b1c      	ldr	r3, [pc, #112]	; (86ec <ComputeDataCrc+0x98>)
    867c:	9303      	str	r3, [sp, #12]
            crc = ComputeCrc(((uint8_t*) &dataBlock), dataLength, crc);
    867e:	4b1c      	ldr	r3, [pc, #112]	; (86f0 <ComputeDataCrc+0x9c>)
    8680:	4698      	mov	r8, r3
    8682:	e011      	b.n	86a8 <ComputeDataCrc+0x54>
        if (dataLength == 0)
    8684:	2d00      	cmp	r5, #0
    8686:	d02a      	beq.n	86de <ComputeDataCrc+0x8a>
        if (GatherData(sourceSector, blockPointer, offset, dataLength, dataBlock))
    8688:	4b1a      	ldr	r3, [pc, #104]	; (86f4 <ComputeDataCrc+0xa0>)
    868a:	9300      	str	r3, [sp, #0]
    868c:	002b      	movs	r3, r5
    868e:	003a      	movs	r2, r7
    8690:	9905      	ldr	r1, [sp, #20]
    8692:	9804      	ldr	r0, [sp, #16]
    8694:	4e18      	ldr	r6, [pc, #96]	; (86f8 <ComputeDataCrc+0xa4>)
    8696:	47b0      	blx	r6
    8698:	2800      	cmp	r0, #0
    869a:	d020      	beq.n	86de <ComputeDataCrc+0x8a>
    869c:	0029      	movs	r1, r5
    869e:	e015      	b.n	86cc <ComputeDataCrc+0x78>
    86a0:	3c01      	subs	r4, #1
    86a2:	b264      	sxtb	r4, r4
    for(int8_t i= (length/sizeof(dataBlock)); i>=0; i--)
    86a4:	1c63      	adds	r3, r4, #1
    86a6:	d01a      	beq.n	86de <ComputeDataCrc+0x8a>
        if (i)
    86a8:	2c00      	cmp	r4, #0
    86aa:	d0eb      	beq.n	8684 <ComputeDataCrc+0x30>
            length = length - sizeof(dataBlock);
    86ac:	3d01      	subs	r5, #1
    86ae:	3dff      	subs	r5, #255	; 0xff
    86b0:	b2ad      	uxth	r5, r5
        if (GatherData(sourceSector, blockPointer, offset, dataLength, dataBlock))
    86b2:	4b10      	ldr	r3, [pc, #64]	; (86f4 <ComputeDataCrc+0xa0>)
    86b4:	9300      	str	r3, [sp, #0]
    86b6:	2380      	movs	r3, #128	; 0x80
    86b8:	005b      	lsls	r3, r3, #1
    86ba:	003a      	movs	r2, r7
    86bc:	9905      	ldr	r1, [sp, #20]
    86be:	9804      	ldr	r0, [sp, #16]
    86c0:	4e0d      	ldr	r6, [pc, #52]	; (86f8 <ComputeDataCrc+0xa4>)
    86c2:	47b0      	blx	r6
    86c4:	2800      	cmp	r0, #0
    86c6:	d0eb      	beq.n	86a0 <ComputeDataCrc+0x4c>
            dataLength = sizeof(dataBlock);
    86c8:	2180      	movs	r1, #128	; 0x80
    86ca:	0049      	lsls	r1, r1, #1
            offset = offset+dataLength;
    86cc:	187f      	adds	r7, r7, r1
    86ce:	b2bf      	uxth	r7, r7
            crc = ComputeCrc(((uint8_t*) &dataBlock), dataLength, crc);
    86d0:	9a03      	ldr	r2, [sp, #12]
    86d2:	4808      	ldr	r0, [pc, #32]	; (86f4 <ComputeDataCrc+0xa0>)
    86d4:	47c0      	blx	r8
    86d6:	9003      	str	r0, [sp, #12]
    86d8:	e7e2      	b.n	86a0 <ComputeDataCrc+0x4c>
    uint16_t crc = 0xFFFFu;
    86da:	4b04      	ldr	r3, [pc, #16]	; (86ec <ComputeDataCrc+0x98>)
    86dc:	9303      	str	r3, [sp, #12]
}
    86de:	9803      	ldr	r0, [sp, #12]
    86e0:	b007      	add	sp, #28
    86e2:	bc0c      	pop	{r2, r3}
    86e4:	4690      	mov	r8, r2
    86e6:	469b      	mov	fp, r3
    86e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    86ea:	46c0      	nop			; (mov r8, r8)
    86ec:	0000ffff 	.word	0x0000ffff
    86f0:	0000855d 	.word	0x0000855d
    86f4:	20000338 	.word	0x20000338
    86f8:	0000859d 	.word	0x0000859d

000086fc <FindItemCache>:
{
    86fc:	b570      	push	{r4, r5, r6, lr}
    for ( uint8_t cacheIndex = 0u; cacheIndex < s_itemCount; cacheIndex++ )
    86fe:	4b16      	ldr	r3, [pc, #88]	; (8758 <FindItemCache+0x5c>)
    8700:	781c      	ldrb	r4, [r3, #0]
    8702:	2c00      	cmp	r4, #0
    8704:	d026      	beq.n	8754 <FindItemCache+0x58>
        if ( cache->id == id )
    8706:	4b15      	ldr	r3, [pc, #84]	; (875c <FindItemCache+0x60>)
    8708:	881b      	ldrh	r3, [r3, #0]
    870a:	4283      	cmp	r3, r0
    870c:	d016      	beq.n	873c <FindItemCache+0x40>
    870e:	2301      	movs	r3, #1
    8710:	4e12      	ldr	r6, [pc, #72]	; (875c <FindItemCache+0x60>)
    for ( uint8_t cacheIndex = 0u; cacheIndex < s_itemCount; cacheIndex++ )
    8712:	b2da      	uxtb	r2, r3
    8714:	4294      	cmp	r4, r2
    8716:	d91b      	bls.n	8750 <FindItemCache+0x54>
        Item_t *cache = &s_itemCache[cacheIndex];
    8718:	001d      	movs	r5, r3
        if ( cache->id == id )
    871a:	1c59      	adds	r1, r3, #1
    871c:	009a      	lsls	r2, r3, #2
    871e:	5ab2      	ldrh	r2, [r6, r2]
    8720:	4282      	cmp	r2, r0
    8722:	d001      	beq.n	8728 <FindItemCache+0x2c>
    8724:	000b      	movs	r3, r1
    8726:	e7f4      	b.n	8712 <FindItemCache+0x16>
        Item_t *cache = &s_itemCache[cacheIndex];
    8728:	009b      	lsls	r3, r3, #2
    872a:	480c      	ldr	r0, [pc, #48]	; (875c <FindItemCache+0x60>)
    872c:	18c0      	adds	r0, r0, r3
            assert(cache->lastBlock != 0x0000);
    872e:	00ad      	lsls	r5, r5, #2
    8730:	4b0a      	ldr	r3, [pc, #40]	; (875c <FindItemCache+0x60>)
    8732:	195d      	adds	r5, r3, r5
    8734:	886b      	ldrh	r3, [r5, #2]
    8736:	2b00      	cmp	r3, #0
    8738:	d003      	beq.n	8742 <FindItemCache+0x46>
}
    873a:	bd70      	pop	{r4, r5, r6, pc}
        Item_t *cache = &s_itemCache[cacheIndex];
    873c:	4807      	ldr	r0, [pc, #28]	; (875c <FindItemCache+0x60>)
    873e:	2500      	movs	r5, #0
    8740:	e7f5      	b.n	872e <FindItemCache+0x32>
            assert(cache->lastBlock != 0x0000);
    8742:	4b07      	ldr	r3, [pc, #28]	; (8760 <FindItemCache+0x64>)
    8744:	4a07      	ldr	r2, [pc, #28]	; (8764 <FindItemCache+0x68>)
    8746:	218c      	movs	r1, #140	; 0x8c
    8748:	31ff      	adds	r1, #255	; 0xff
    874a:	4807      	ldr	r0, [pc, #28]	; (8768 <FindItemCache+0x6c>)
    874c:	4c07      	ldr	r4, [pc, #28]	; (876c <FindItemCache+0x70>)
    874e:	47a0      	blx	r4
    return NULL;
    8750:	2000      	movs	r0, #0
    8752:	e7f2      	b.n	873a <FindItemCache+0x3e>
    8754:	2000      	movs	r0, #0
    8756:	e7f0      	b.n	873a <FindItemCache+0x3e>
    8758:	20000478 	.word	0x20000478
    875c:	20000454 	.word	0x20000454
    8760:	00019c3c 	.word	0x00019c3c
    8764:	00019d28 	.word	0x00019d28
    8768:	00019c58 	.word	0x00019c58
    876c:	000177a9 	.word	0x000177a9

00008770 <FindItem>:
{
    8770:	b510      	push	{r4, lr}
    Item_t *cache = FindItemCache(id);
    8772:	4b05      	ldr	r3, [pc, #20]	; (8788 <FindItem+0x18>)
    8774:	4798      	blx	r3
    if (cache)
    8776:	2800      	cmp	r0, #0
    8778:	d004      	beq.n	8784 <FindItem+0x14>
        return cache->lastBlock;
    877a:	7883      	ldrb	r3, [r0, #2]
    877c:	78c0      	ldrb	r0, [r0, #3]
    877e:	0200      	lsls	r0, r0, #8
    8780:	4318      	orrs	r0, r3
}
    8782:	bd10      	pop	{r4, pc}
    return 0x0000u;
    8784:	2000      	movs	r0, #0
    8786:	e7fc      	b.n	8782 <FindItem+0x12>
    8788:	000086fd 	.word	0x000086fd

0000878c <CreateItemCache>:
{
    878c:	b510      	push	{r4, lr}
    878e:	0004      	movs	r4, r0
    assert(FindItemCache(id) == NULL);
    8790:	4b0e      	ldr	r3, [pc, #56]	; (87cc <CreateItemCache+0x40>)
    8792:	4798      	blx	r3
    8794:	2800      	cmp	r0, #0
    8796:	d10b      	bne.n	87b0 <CreateItemCache+0x24>
    assert(s_itemCount < MAX_ITEM_COUNT);
    8798:	4b0d      	ldr	r3, [pc, #52]	; (87d0 <CreateItemCache+0x44>)
    879a:	781b      	ldrb	r3, [r3, #0]
    879c:	2b08      	cmp	r3, #8
    879e:	d80e      	bhi.n	87be <CreateItemCache+0x32>
    Item_t *cache = &s_itemCache[s_itemCount++];
    87a0:	1c59      	adds	r1, r3, #1
    87a2:	4a0b      	ldr	r2, [pc, #44]	; (87d0 <CreateItemCache+0x44>)
    87a4:	7011      	strb	r1, [r2, #0]
    cache->id = id;
    87a6:	480b      	ldr	r0, [pc, #44]	; (87d4 <CreateItemCache+0x48>)
    87a8:	009b      	lsls	r3, r3, #2
    87aa:	521c      	strh	r4, [r3, r0]
    Item_t *cache = &s_itemCache[s_itemCount++];
    87ac:	18c0      	adds	r0, r0, r3
}
    87ae:	bd10      	pop	{r4, pc}
    assert(FindItemCache(id) == NULL);
    87b0:	4b09      	ldr	r3, [pc, #36]	; (87d8 <CreateItemCache+0x4c>)
    87b2:	4a0a      	ldr	r2, [pc, #40]	; (87dc <CreateItemCache+0x50>)
    87b4:	21cc      	movs	r1, #204	; 0xcc
    87b6:	0049      	lsls	r1, r1, #1
    87b8:	4809      	ldr	r0, [pc, #36]	; (87e0 <CreateItemCache+0x54>)
    87ba:	4c0a      	ldr	r4, [pc, #40]	; (87e4 <CreateItemCache+0x58>)
    87bc:	47a0      	blx	r4
    assert(s_itemCount < MAX_ITEM_COUNT);
    87be:	4b0a      	ldr	r3, [pc, #40]	; (87e8 <CreateItemCache+0x5c>)
    87c0:	4a06      	ldr	r2, [pc, #24]	; (87dc <CreateItemCache+0x50>)
    87c2:	219a      	movs	r1, #154	; 0x9a
    87c4:	31ff      	adds	r1, #255	; 0xff
    87c6:	4806      	ldr	r0, [pc, #24]	; (87e0 <CreateItemCache+0x54>)
    87c8:	4c06      	ldr	r4, [pc, #24]	; (87e4 <CreateItemCache+0x58>)
    87ca:	47a0      	blx	r4
    87cc:	000086fd 	.word	0x000086fd
    87d0:	20000478 	.word	0x20000478
    87d4:	20000454 	.word	0x20000454
    87d8:	00019be4 	.word	0x00019be4
    87dc:	00019d38 	.word	0x00019d38
    87e0:	00019c58 	.word	0x00019c58
    87e4:	000177a9 	.word	0x000177a9
    87e8:	00019c00 	.word	0x00019c00

000087ec <DeleteItemCache>:
{
    87ec:	b510      	push	{r4, lr}
    assert(FindItemCache(id) != NULL);
    87ee:	4b0b      	ldr	r3, [pc, #44]	; (881c <DeleteItemCache+0x30>)
    87f0:	4798      	blx	r3
    87f2:	2800      	cmp	r0, #0
    87f4:	d00b      	beq.n	880e <DeleteItemCache+0x22>
    *cache = s_itemCache[--s_itemCount];
    87f6:	4b0a      	ldr	r3, [pc, #40]	; (8820 <DeleteItemCache+0x34>)
    87f8:	7819      	ldrb	r1, [r3, #0]
    87fa:	3901      	subs	r1, #1
    87fc:	b2c9      	uxtb	r1, r1
    87fe:	7019      	strb	r1, [r3, #0]
    8800:	0089      	lsls	r1, r1, #2
    8802:	4b08      	ldr	r3, [pc, #32]	; (8824 <DeleteItemCache+0x38>)
    8804:	1859      	adds	r1, r3, r1
    8806:	2204      	movs	r2, #4
    8808:	4b07      	ldr	r3, [pc, #28]	; (8828 <DeleteItemCache+0x3c>)
    880a:	4798      	blx	r3
}
    880c:	bd10      	pop	{r4, pc}
    assert(FindItemCache(id) != NULL);
    880e:	4b07      	ldr	r3, [pc, #28]	; (882c <DeleteItemCache+0x40>)
    8810:	4a07      	ldr	r2, [pc, #28]	; (8830 <DeleteItemCache+0x44>)
    8812:	21d3      	movs	r1, #211	; 0xd3
    8814:	0049      	lsls	r1, r1, #1
    8816:	4807      	ldr	r0, [pc, #28]	; (8834 <DeleteItemCache+0x48>)
    8818:	4c07      	ldr	r4, [pc, #28]	; (8838 <DeleteItemCache+0x4c>)
    881a:	47a0      	blx	r4
    881c:	000086fd 	.word	0x000086fd
    8820:	20000478 	.word	0x20000478
    8824:	20000454 	.word	0x20000454
    8828:	0001786b 	.word	0x0001786b
    882c:	00019c20 	.word	0x00019c20
    8830:	00019d48 	.word	0x00019d48
    8834:	00019c58 	.word	0x00019c58
    8838:	000177a9 	.word	0x000177a9

0000883c <eraseSectorTimerFired>:
{
    883c:	b510      	push	{r4, lr}
    if (!PowerSupplyTooLow())
    883e:	4b05      	ldr	r3, [pc, #20]	; (8854 <eraseSectorTimerFired+0x18>)
    8840:	4798      	blx	r3
    8842:	2800      	cmp	r0, #0
    8844:	d000      	beq.n	8848 <eraseSectorTimerFired+0xc>
}
    8846:	bd10      	pop	{r4, pc}
        D_Nv_EraseSector(s_sectorToErase);
    8848:	4b03      	ldr	r3, [pc, #12]	; (8858 <eraseSectorTimerFired+0x1c>)
    884a:	7818      	ldrb	r0, [r3, #0]
    884c:	4b03      	ldr	r3, [pc, #12]	; (885c <eraseSectorTimerFired+0x20>)
    884e:	4798      	blx	r3
}
    8850:	e7f9      	b.n	8846 <eraseSectorTimerFired+0xa>
    8852:	46c0      	nop			; (mov r8, r8)
    8854:	00008505 	.word	0x00008505
    8858:	2000001a 	.word	0x2000001a
    885c:	00008495 	.word	0x00008495

00008860 <EraseSector>:

static bool EraseSector(void)
{
    8860:	b510      	push	{r4, lr}
    // Erase the sector
    D_Nv_EraseSector(s_sector);
    8862:	4c08      	ldr	r4, [pc, #32]	; (8884 <EraseSector+0x24>)
    8864:	7820      	ldrb	r0, [r4, #0]
    8866:	4b08      	ldr	r3, [pc, #32]	; (8888 <EraseSector+0x28>)
    8868:	4798      	blx	r3
    // check if the erase succeeded
    if ( !D_Nv_IsEmpty(s_sector, 0u, SECTOR_SIZE) )
    886a:	7820      	ldrb	r0, [r4, #0]
    886c:	2280      	movs	r2, #128	; 0x80
    886e:	0192      	lsls	r2, r2, #6
    8870:	2100      	movs	r1, #0
    8872:	4b06      	ldr	r3, [pc, #24]	; (888c <EraseSector+0x2c>)
    8874:	4798      	blx	r3
    8876:	2800      	cmp	r0, #0
    8878:	d003      	beq.n	8882 <EraseSector+0x22>
    {
        return false;
    }
    s_sectorHead =  ITEMS_AREA_START_ADDRESS;
    887a:	2280      	movs	r2, #128	; 0x80
    887c:	0052      	lsls	r2, r2, #1
    887e:	4b04      	ldr	r3, [pc, #16]	; (8890 <EraseSector+0x30>)
    8880:	801a      	strh	r2, [r3, #0]

    return true;
}
    8882:	bd10      	pop	{r4, pc}
    8884:	20000480 	.word	0x20000480
    8888:	00008495 	.word	0x00008495
    888c:	000084e9 	.word	0x000084e9
    8890:	20000482 	.word	0x20000482

00008894 <WriteAndCheck>:
{
    8894:	b5f0      	push	{r4, r5, r6, r7, lr}
    8896:	b083      	sub	sp, #12
    8898:	9001      	str	r0, [sp, #4]
    889a:	000d      	movs	r5, r1
    889c:	0016      	movs	r6, r2
    D_Nv_Write(s_sector, offset, pData, length);
    889e:	4f07      	ldr	r7, [pc, #28]	; (88bc <WriteAndCheck+0x28>)
    88a0:	7838      	ldrb	r0, [r7, #0]
    88a2:	0013      	movs	r3, r2
    88a4:	000a      	movs	r2, r1
    88a6:	9901      	ldr	r1, [sp, #4]
    88a8:	4c05      	ldr	r4, [pc, #20]	; (88c0 <WriteAndCheck+0x2c>)
    88aa:	47a0      	blx	r4
    return D_Nv_IsEqual(s_sector, offset, pData, length);
    88ac:	7838      	ldrb	r0, [r7, #0]
    88ae:	0033      	movs	r3, r6
    88b0:	002a      	movs	r2, r5
    88b2:	9901      	ldr	r1, [sp, #4]
    88b4:	4c03      	ldr	r4, [pc, #12]	; (88c4 <WriteAndCheck+0x30>)
    88b6:	47a0      	blx	r4
}
    88b8:	b003      	add	sp, #12
    88ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    88bc:	20000480 	.word	0x20000480
    88c0:	0000832d 	.word	0x0000832d
    88c4:	000084f9 	.word	0x000084f9

000088c8 <WriteSectorHeader>:

static bool WriteSectorHeader(uint32_t sequenceNumber)
{
    88c8:	b510      	push	{r4, lr}
    88ca:	b086      	sub	sp, #24
    // write sector header
    SectorHeader_t sectorHeader;
    sectorHeader.signature[0] = (uint8_t) 'A';
    88cc:	ac01      	add	r4, sp, #4
    88ce:	2341      	movs	r3, #65	; 0x41
    88d0:	70a3      	strb	r3, [r4, #2]
    sectorHeader.signature[1] = (uint8_t) 'T';
    88d2:	3313      	adds	r3, #19
    88d4:	70e3      	strb	r3, [r4, #3]
    sectorHeader.signature[2] = (uint8_t) 'S';
    88d6:	3b01      	subs	r3, #1
    88d8:	7123      	strb	r3, [r4, #4]
    sectorHeader.signature[3] = (uint8_t) 'N';
    88da:	3b05      	subs	r3, #5
    88dc:	7163      	strb	r3, [r4, #5]
    sectorHeader.signature[4] = (uint8_t) 'v';
    88de:	3328      	adds	r3, #40	; 0x28
    88e0:	71a3      	strb	r3, [r4, #6]
    sectorHeader.signature[5] = (uint8_t) '2';
    88e2:	3b44      	subs	r3, #68	; 0x44
    88e4:	71e3      	strb	r3, [r4, #7]
    sectorHeader.sequenceNumber = sequenceNumber;
    88e6:	9003      	str	r0, [sp, #12]
    sectorHeader.sequenceParity = sequenceNumber ^ 0xFFFFFFFFuL;
    88e8:	43c0      	mvns	r0, r0
    88ea:	9004      	str	r0, [sp, #16]
    sectorHeader.nextPageAddressAfterCompact = s_nextPageAddressAfterCompact;
    88ec:	4b08      	ldr	r3, [pc, #32]	; (8910 <WriteSectorHeader+0x48>)
    88ee:	881b      	ldrh	r3, [r3, #0]
    88f0:	8223      	strh	r3, [r4, #16]
    return ComputeCrc(((uint8_t*) pSectorHeader) + sizeof(pSectorHeader->headerCrc), (sizeof(SectorHeader_t)- sizeof(pSectorHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    88f2:	4a08      	ldr	r2, [pc, #32]	; (8914 <WriteSectorHeader+0x4c>)
    88f4:	2110      	movs	r1, #16
    88f6:	466b      	mov	r3, sp
    88f8:	1d98      	adds	r0, r3, #6
    88fa:	4b07      	ldr	r3, [pc, #28]	; (8918 <WriteSectorHeader+0x50>)
    88fc:	4798      	blx	r3
    sectorHeader.headerCrc = ComputeSectorHeaderCrc(&sectorHeader);
    88fe:	8020      	strh	r0, [r4, #0]
    if ( !WriteAndCheck(0u, (uint8_t*) &sectorHeader, SECTOR_HEADER_SIZE) )
    8900:	2212      	movs	r2, #18
    8902:	0021      	movs	r1, r4
    8904:	2000      	movs	r0, #0
    8906:	4b05      	ldr	r3, [pc, #20]	; (891c <WriteSectorHeader+0x54>)
    8908:	4798      	blx	r3
    {
        return false;
    }
    return true;
}
    890a:	b006      	add	sp, #24
    890c:	bd10      	pop	{r4, pc}
    890e:	46c0      	nop			; (mov r8, r8)
    8910:	2000047a 	.word	0x2000047a
    8914:	0000ffff 	.word	0x0000ffff
    8918:	0000855d 	.word	0x0000855d
    891c:	00008895 	.word	0x00008895

00008920 <SmartCompacting>:
 * without following any alignements as normal item updates.Items are filled into
  256 byte buffer(= row size), committed in shot which takes 4 page writs maximum
 */

static bool SmartCompacting(uint8_t* compactBlock, uint16_t curItemLength)
{
    8920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8922:	0004      	movs	r4, r0
    8924:	000d      	movs	r5, r1
    //manupulate the current compact length
    currentCompactLength += curItemLength;
    8926:	4a21      	ldr	r2, [pc, #132]	; (89ac <SmartCompacting+0x8c>)
    8928:	8813      	ldrh	r3, [r2, #0]
    892a:	18cb      	adds	r3, r1, r3
    892c:	b29b      	uxth	r3, r3
    892e:	8013      	strh	r3, [r2, #0]

    // if the complete buffer cannot be filled with the current item
    if ( currentCompactLength < ROW_SIZE)
    8930:	2bff      	cmp	r3, #255	; 0xff
    8932:	d92e      	bls.n	8992 <SmartCompacting+0x72>
    else  //(currentCompactLength >= ROW_SIZE) cases
    {
        uint16_t dataBlockOffset = 0;


        memcpy(compactBlock + compactBlockOffset, dataBlock, (ROW_SIZE - compactBlockOffset));
    8934:	4b1e      	ldr	r3, [pc, #120]	; (89b0 <SmartCompacting+0x90>)
    8936:	881a      	ldrh	r2, [r3, #0]
    8938:	1880      	adds	r0, r0, r2
    893a:	2580      	movs	r5, #128	; 0x80
    893c:	006d      	lsls	r5, r5, #1
    893e:	1aaa      	subs	r2, r5, r2
    8940:	491c      	ldr	r1, [pc, #112]	; (89b4 <SmartCompacting+0x94>)
    8942:	4b1d      	ldr	r3, [pc, #116]	; (89b8 <SmartCompacting+0x98>)
    8944:	4798      	blx	r3
        if ( !WriteAndCheck(s_sectorHead, compactBlock, ROW_SIZE ))
    8946:	4b1d      	ldr	r3, [pc, #116]	; (89bc <SmartCompacting+0x9c>)
    8948:	8818      	ldrh	r0, [r3, #0]
    894a:	002a      	movs	r2, r5
    894c:	0021      	movs	r1, r4
    894e:	4b1c      	ldr	r3, [pc, #112]	; (89c0 <SmartCompacting+0xa0>)
    8950:	4798      	blx	r3
    8952:	1e05      	subs	r5, r0, #0
    8954:	d027      	beq.n	89a6 <SmartCompacting+0x86>
        {
            return false;
        }
        UpdateSectorHead(ROW_SIZE, ITEM_NO_ALIGNMENT);
    8956:	2100      	movs	r1, #0
    8958:	2080      	movs	r0, #128	; 0x80
    895a:	0040      	lsls	r0, r0, #1
    895c:	4b19      	ldr	r3, [pc, #100]	; (89c4 <SmartCompacting+0xa4>)
    895e:	4798      	blx	r3
        dataBlockOffset += (ROW_SIZE - compactBlockOffset);
    8960:	4b13      	ldr	r3, [pc, #76]	; (89b0 <SmartCompacting+0x90>)
    8962:	8818      	ldrh	r0, [r3, #0]
        compactBlockOffset = 0;
    8964:	2200      	movs	r2, #0
    8966:	801a      	strh	r2, [r3, #0]
        currentCompactLength -= ROW_SIZE;
    8968:	4b10      	ldr	r3, [pc, #64]	; (89ac <SmartCompacting+0x8c>)
    896a:	881e      	ldrh	r6, [r3, #0]
    896c:	3e01      	subs	r6, #1
    896e:	3eff      	subs	r6, #255	; 0xff
    8970:	b2b6      	uxth	r6, r6
    8972:	801e      	strh	r6, [r3, #0]
        if (currentCompactLength)
    8974:	2e00      	cmp	r6, #0
    8976:	d016      	beq.n	89a6 <SmartCompacting+0x86>
        dataBlockOffset += (ROW_SIZE - compactBlockOffset);
    8978:	2180      	movs	r1, #128	; 0x80
    897a:	0049      	lsls	r1, r1, #1
    897c:	1a09      	subs	r1, r1, r0
        {
            memcpy(compactBlock, dataBlock + dataBlockOffset, currentCompactLength);
    897e:	b289      	uxth	r1, r1
    8980:	4b0c      	ldr	r3, [pc, #48]	; (89b4 <SmartCompacting+0x94>)
    8982:	1859      	adds	r1, r3, r1
    8984:	0032      	movs	r2, r6
    8986:	0020      	movs	r0, r4
    8988:	4b0b      	ldr	r3, [pc, #44]	; (89b8 <SmartCompacting+0x98>)
    898a:	4798      	blx	r3
            compactBlockOffset = currentCompactLength;
    898c:	4b08      	ldr	r3, [pc, #32]	; (89b0 <SmartCompacting+0x90>)
    898e:	801e      	strh	r6, [r3, #0]
    8990:	e009      	b.n	89a6 <SmartCompacting+0x86>
        memcpy(compactBlock + compactBlockOffset, dataBlock, curItemLength);
    8992:	4e07      	ldr	r6, [pc, #28]	; (89b0 <SmartCompacting+0x90>)
    8994:	8837      	ldrh	r7, [r6, #0]
    8996:	19c0      	adds	r0, r0, r7
    8998:	000a      	movs	r2, r1
    899a:	4906      	ldr	r1, [pc, #24]	; (89b4 <SmartCompacting+0x94>)
    899c:	4b06      	ldr	r3, [pc, #24]	; (89b8 <SmartCompacting+0x98>)
    899e:	4798      	blx	r3
        compactBlockOffset += curItemLength;
    89a0:	19ed      	adds	r5, r5, r7
    89a2:	8035      	strh	r5, [r6, #0]
        return true;
    89a4:	2501      	movs	r5, #1
        }
    }

    return true;

}
    89a6:	0028      	movs	r0, r5
    89a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    89aa:	46c0      	nop			; (mov r8, r8)
    89ac:	20000334 	.word	0x20000334
    89b0:	20000308 	.word	0x20000308
    89b4:	20000338 	.word	0x20000338
    89b8:	0001786b 	.word	0x0001786b
    89bc:	20000482 	.word	0x20000482
    89c0:	00008895 	.word	0x00008895
    89c4:	00008521 	.word	0x00008521

000089c8 <CompactSector>:
 * This is because the itemCache, sector head and sector selector will
 * be messed up.
 */

static bool CompactSector(void)
{
    89c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    89ca:	46de      	mov	lr, fp
    89cc:	4657      	mov	r7, sl
    89ce:	464e      	mov	r6, r9
    89d0:	4645      	mov	r5, r8
    89d2:	b5e0      	push	{r5, r6, r7, lr}
    89d4:	b0d5      	sub	sp, #340	; 0x154
    PRINTA(("CompactSector(s=%X)", s_sector));
#endif
    uint8_t compactBlock[ROW_SIZE];

    // stop timer for preemptive compact sector as this will not be needed any more
    SYS_TimerStop(&compactSectorTimer);
    89d6:	487b      	ldr	r0, [pc, #492]	; (8bc4 <CompactSector+0x1fc>)
    89d8:	4b7b      	ldr	r3, [pc, #492]	; (8bc8 <CompactSector+0x200>)
    89da:	4798      	blx	r3

    // stop the compact item as a compact sector will compact all items
    s_compactItemId = 0u;
    89dc:	2300      	movs	r3, #0
    89de:	4a7b      	ldr	r2, [pc, #492]	; (8bcc <CompactSector+0x204>)
    89e0:	8013      	strh	r3, [r2, #0]
    s_compactItemLength = 0u;
    89e2:	4a7b      	ldr	r2, [pc, #492]	; (8bd0 <CompactSector+0x208>)
    89e4:	8013      	strh	r3, [r2, #0]

    compactBlockOffset = 0;
    89e6:	4a7b      	ldr	r2, [pc, #492]	; (8bd4 <CompactSector+0x20c>)
    89e8:	8013      	strh	r3, [r2, #0]
    currentCompactLength = 0;
    89ea:	4a7b      	ldr	r2, [pc, #492]	; (8bd8 <CompactSector+0x210>)
    89ec:	8013      	strh	r3, [r2, #0]

    uint8_t sourceSector = s_sector;
    89ee:	4b7b      	ldr	r3, [pc, #492]	; (8bdc <CompactSector+0x214>)
    89f0:	781b      	ldrb	r3, [r3, #0]
    89f2:	001f      	movs	r7, r3
    89f4:	9303      	str	r3, [sp, #12]

    // get the sector header for the source sector
    SectorHeader_t sectorHeader;
    D_Nv_Read(sourceSector, 0u, (uint8_t*) &sectorHeader, SECTOR_HEADER_SIZE);
    89f6:	2312      	movs	r3, #18
    89f8:	aa0f      	add	r2, sp, #60	; 0x3c
    89fa:	2100      	movs	r1, #0
    89fc:	0038      	movs	r0, r7
    89fe:	4c78      	ldr	r4, [pc, #480]	; (8be0 <CompactSector+0x218>)
    8a00:	47a0      	blx	r4

    uint32_t nextSequenceNumber = sectorHeader.sequenceNumber - 1uL;
    8a02:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8a04:	9309      	str	r3, [sp, #36]	; 0x24

    // find and prepare a destination sector
    do
    {
        s_sector++;
    8a06:	4c75      	ldr	r4, [pc, #468]	; (8bdc <CompactSector+0x214>)
        if ( s_sector >= (FIRST_SECTOR + SECTOR_COUNT) )
        {
            s_sector = FIRST_SECTOR;
    8a08:	0025      	movs	r5, r4
        s_sector++;
    8a0a:	0026      	movs	r6, r4
    8a0c:	e008      	b.n	8a20 <CompactSector+0x58>
    8a0e:	7033      	strb	r3, [r6, #0]
        }

        if ( s_sector == sourceSector )
    8a10:	4b72      	ldr	r3, [pc, #456]	; (8bdc <CompactSector+0x214>)
    8a12:	781b      	ldrb	r3, [r3, #0]
    8a14:	42bb      	cmp	r3, r7
    8a16:	d00b      	beq.n	8a30 <CompactSector+0x68>
        {
            // all sector failed to initialize
            assert(false);
        }
    }
    while ( !EraseSector());
    8a18:	4b72      	ldr	r3, [pc, #456]	; (8be4 <CompactSector+0x21c>)
    8a1a:	4798      	blx	r3
    8a1c:	2800      	cmp	r0, #0
    8a1e:	d10d      	bne.n	8a3c <CompactSector+0x74>
        s_sector++;
    8a20:	7823      	ldrb	r3, [r4, #0]
    8a22:	3301      	adds	r3, #1
    8a24:	b2db      	uxtb	r3, r3
        if ( s_sector >= (FIRST_SECTOR + SECTOR_COUNT) )
    8a26:	2b01      	cmp	r3, #1
    8a28:	d9f1      	bls.n	8a0e <CompactSector+0x46>
            s_sector = FIRST_SECTOR;
    8a2a:	2300      	movs	r3, #0
    8a2c:	702b      	strb	r3, [r5, #0]
    8a2e:	e7ef      	b.n	8a10 <CompactSector+0x48>
            assert(false);
    8a30:	4b6d      	ldr	r3, [pc, #436]	; (8be8 <CompactSector+0x220>)
    8a32:	4a6e      	ldr	r2, [pc, #440]	; (8bec <CompactSector+0x224>)
    8a34:	496e      	ldr	r1, [pc, #440]	; (8bf0 <CompactSector+0x228>)
    8a36:	486f      	ldr	r0, [pc, #444]	; (8bf4 <CompactSector+0x22c>)
    8a38:	4c6f      	ldr	r4, [pc, #444]	; (8bf8 <CompactSector+0x230>)
    8a3a:	47a0      	blx	r4

    // Traverse the item cache, writing all items to the new sector
    for (uint8_t cacheIndex = 0; cacheIndex < s_itemCount; cacheIndex++) {
    8a3c:	4b6f      	ldr	r3, [pc, #444]	; (8bfc <CompactSector+0x234>)
    8a3e:	781b      	ldrb	r3, [r3, #0]
    8a40:	2b00      	cmp	r3, #0
    8a42:	d06a      	beq.n	8b1a <CompactSector+0x152>
    8a44:	2300      	movs	r3, #0
    8a46:	9306      	str	r3, [sp, #24]

        blockHeader.dataCrc =  ComputeDataCrc(sourceSector, lastBlockPointer, &blockHeader);

        blockHeader.headerCrc = ComputeHeaderCrc(&blockHeader);

        memset(dataBlock, 0xFF, sizeof(dataBlock));
    8a48:	3301      	adds	r3, #1
    8a4a:	33ff      	adds	r3, #255	; 0xff
    8a4c:	4699      	mov	r9, r3
            uint16_t bytesToGather;
            uint16_t inDataOffset = 0;

            do
            {
              bytesToGather =  (currLength > ROW_SIZE) ? ROW_SIZE : currLength; 
    8a4e:	466a      	mov	r2, sp
    8a50:	82d3      	strh	r3, [r2, #22]
            if (!GatherData(sourceSector, lastBlockPointer, 0u, blockHeader.itemLength, (dataBlock + BLOCK_HEADER_SIZE )))
    8a52:	4b6b      	ldr	r3, [pc, #428]	; (8c00 <CompactSector+0x238>)
    8a54:	3310      	adds	r3, #16
    8a56:	9308      	str	r3, [sp, #32]
        Item_t *cache = &s_itemCache[cacheIndex];
    8a58:	9b06      	ldr	r3, [sp, #24]
    8a5a:	9307      	str	r3, [sp, #28]
        uint16_t lastBlockPointer = cache->lastBlock;
    8a5c:	009f      	lsls	r7, r3, #2
    8a5e:	4b69      	ldr	r3, [pc, #420]	; (8c04 <CompactSector+0x23c>)
    8a60:	469c      	mov	ip, r3
    8a62:	4467      	add	r7, ip
    8a64:	887b      	ldrh	r3, [r7, #2]
    8a66:	001d      	movs	r5, r3
    8a68:	9304      	str	r3, [sp, #16]
        D_Nv_Read(sourceSector, lastBlockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    8a6a:	2310      	movs	r3, #16
    8a6c:	aa0b      	add	r2, sp, #44	; 0x2c
    8a6e:	0029      	movs	r1, r5
    8a70:	9803      	ldr	r0, [sp, #12]
    8a72:	4680      	mov	r8, r0
    8a74:	4c5a      	ldr	r4, [pc, #360]	; (8be0 <CompactSector+0x218>)
    8a76:	47a0      	blx	r4
        blockHeader.blockOffset = 0x0000u;
    8a78:	ae0b      	add	r6, sp, #44	; 0x2c
    8a7a:	2300      	movs	r3, #0
    8a7c:	80b3      	strh	r3, [r6, #4]
        blockHeader.blockLength = blockHeader.itemLength;
    8a7e:	8934      	ldrh	r4, [r6, #8]
    8a80:	80f4      	strh	r4, [r6, #6]
        blockHeader.previousBlock = 0x0000u;
    8a82:	8173      	strh	r3, [r6, #10]
        blockHeader.writeCount = 0u;
    8a84:	81b3      	strh	r3, [r6, #12]
        uint16_t currLength = BLOCK_HEADER_SIZE + blockHeader.itemLength;
    8a86:	3410      	adds	r4, #16
    8a88:	b2a4      	uxth	r4, r4
        blockHeader.dataCrc =  ComputeDataCrc(sourceSector, lastBlockPointer, &blockHeader);
    8a8a:	0032      	movs	r2, r6
    8a8c:	0029      	movs	r1, r5
    8a8e:	4640      	mov	r0, r8
    8a90:	4b5d      	ldr	r3, [pc, #372]	; (8c08 <CompactSector+0x240>)
    8a92:	4798      	blx	r3
    8a94:	8030      	strh	r0, [r6, #0]
    return ComputeCrc(((uint8_t*) pBlockHeader), (sizeof(BlockHeader_t) - sizeof(pBlockHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    8a96:	4a5d      	ldr	r2, [pc, #372]	; (8c0c <CompactSector+0x244>)
    8a98:	210e      	movs	r1, #14
    8a9a:	a80b      	add	r0, sp, #44	; 0x2c
    8a9c:	4b5c      	ldr	r3, [pc, #368]	; (8c10 <CompactSector+0x248>)
    8a9e:	4798      	blx	r3
        blockHeader.headerCrc = ComputeHeaderCrc(&blockHeader);
    8aa0:	81f0      	strh	r0, [r6, #14]
        memset(dataBlock, 0xFF, sizeof(dataBlock));
    8aa2:	4d57      	ldr	r5, [pc, #348]	; (8c00 <CompactSector+0x238>)
    8aa4:	464a      	mov	r2, r9
    8aa6:	21ff      	movs	r1, #255	; 0xff
    8aa8:	0028      	movs	r0, r5
    8aaa:	4b5a      	ldr	r3, [pc, #360]	; (8c14 <CompactSector+0x24c>)
    8aac:	4798      	blx	r3
        memcpy(dataBlock, &blockHeader, BLOCK_HEADER_SIZE);
    8aae:	002b      	movs	r3, r5
    8ab0:	ce07      	ldmia	r6!, {r0, r1, r2}
    8ab2:	c307      	stmia	r3!, {r0, r1, r2}
    8ab4:	6832      	ldr	r2, [r6, #0]
    8ab6:	601a      	str	r2, [r3, #0]
        cache->lastBlock = s_sectorHead  + compactBlockOffset;
    8ab8:	4b57      	ldr	r3, [pc, #348]	; (8c18 <CompactSector+0x250>)
    8aba:	881b      	ldrh	r3, [r3, #0]
    8abc:	4a45      	ldr	r2, [pc, #276]	; (8bd4 <CompactSector+0x20c>)
    8abe:	8812      	ldrh	r2, [r2, #0]
    8ac0:	189b      	adds	r3, r3, r2
    8ac2:	807b      	strh	r3, [r7, #2]
        if (currLength <= ROW_SIZE)
    8ac4:	454c      	cmp	r4, r9
    8ac6:	d904      	bls.n	8ad2 <CompactSector+0x10a>
    8ac8:	2600      	movs	r6, #0
    8aca:	2310      	movs	r3, #16
              
              if (!GatherData(sourceSector, lastBlockPointer, inDataOffset, (bytesToGather - dataBlockOffset) , (dataBlock + dataBlockOffset)))
    8acc:	4a4c      	ldr	r2, [pc, #304]	; (8c00 <CompactSector+0x238>)
    8ace:	4690      	mov	r8, r2
    8ad0:	e068      	b.n	8ba4 <CompactSector+0x1dc>
            if (!GatherData(sourceSector, lastBlockPointer, 0u, blockHeader.itemLength, (dataBlock + BLOCK_HEADER_SIZE )))
    8ad2:	ab0b      	add	r3, sp, #44	; 0x2c
    8ad4:	891b      	ldrh	r3, [r3, #8]
    8ad6:	9a08      	ldr	r2, [sp, #32]
    8ad8:	9200      	str	r2, [sp, #0]
    8ada:	2200      	movs	r2, #0
    8adc:	9904      	ldr	r1, [sp, #16]
    8ade:	9803      	ldr	r0, [sp, #12]
    8ae0:	4e4e      	ldr	r6, [pc, #312]	; (8c1c <CompactSector+0x254>)
    8ae2:	47b0      	blx	r6
    8ae4:	2800      	cmp	r0, #0
    8ae6:	d063      	beq.n	8bb0 <CompactSector+0x1e8>
            cache->lastBlock = s_sectorHead  + compactBlockOffset;
    8ae8:	9b07      	ldr	r3, [sp, #28]
    8aea:	009d      	lsls	r5, r3, #2
    8aec:	4b45      	ldr	r3, [pc, #276]	; (8c04 <CompactSector+0x23c>)
    8aee:	195d      	adds	r5, r3, r5
    8af0:	4b49      	ldr	r3, [pc, #292]	; (8c18 <CompactSector+0x250>)
    8af2:	881b      	ldrh	r3, [r3, #0]
    8af4:	4a37      	ldr	r2, [pc, #220]	; (8bd4 <CompactSector+0x20c>)
    8af6:	8812      	ldrh	r2, [r2, #0]
    8af8:	189b      	adds	r3, r3, r2
    8afa:	806b      	strh	r3, [r5, #2]
            if (!SmartCompacting(compactBlock, currLength))
    8afc:	0021      	movs	r1, r4
    8afe:	a814      	add	r0, sp, #80	; 0x50
    8b00:	4b47      	ldr	r3, [pc, #284]	; (8c20 <CompactSector+0x258>)
    8b02:	4798      	blx	r3
    8b04:	2800      	cmp	r0, #0
    8b06:	d053      	beq.n	8bb0 <CompactSector+0x1e8>
    for (uint8_t cacheIndex = 0; cacheIndex < s_itemCount; cacheIndex++) {
    8b08:	9b06      	ldr	r3, [sp, #24]
    8b0a:	3301      	adds	r3, #1
    8b0c:	b2db      	uxtb	r3, r3
    8b0e:	001a      	movs	r2, r3
    8b10:	9306      	str	r3, [sp, #24]
    8b12:	4b3a      	ldr	r3, [pc, #232]	; (8bfc <CompactSector+0x234>)
    8b14:	781b      	ldrb	r3, [r3, #0]
    8b16:	4293      	cmp	r3, r2
    8b18:	d89e      	bhi.n	8a58 <CompactSector+0x90>

            } while(currLength > 0);
        }
    }
    // if some uncommitted data avaialble, committ it
    if ( currentCompactLength)
    8b1a:	4b2f      	ldr	r3, [pc, #188]	; (8bd8 <CompactSector+0x210>)
    8b1c:	881a      	ldrh	r2, [r3, #0]
    8b1e:	2a00      	cmp	r2, #0
    8b20:	d006      	beq.n	8b30 <CompactSector+0x168>
    {
        if ( !WriteAndCheck(s_sectorHead, compactBlock, currentCompactLength) )
    8b22:	4b3d      	ldr	r3, [pc, #244]	; (8c18 <CompactSector+0x250>)
    8b24:	8818      	ldrh	r0, [r3, #0]
    8b26:	a914      	add	r1, sp, #80	; 0x50
    8b28:	4b3e      	ldr	r3, [pc, #248]	; (8c24 <CompactSector+0x25c>)
    8b2a:	4798      	blx	r3
    8b2c:	1e04      	subs	r4, r0, #0
    8b2e:	d040      	beq.n	8bb2 <CompactSector+0x1ea>
        {
            return false;
        }
    }
    // Just update sector header as per the the length of the data committed, no alignments
    UpdateSectorHead(currentCompactLength, ITEM_NO_ALIGNMENT);
    8b30:	4b29      	ldr	r3, [pc, #164]	; (8bd8 <CompactSector+0x210>)
    8b32:	8818      	ldrh	r0, [r3, #0]
    8b34:	2100      	movs	r1, #0
    8b36:	4b3c      	ldr	r3, [pc, #240]	; (8c28 <CompactSector+0x260>)
    8b38:	4798      	blx	r3

    s_nextPageAddressAfterCompact = s_sectorHead;
    8b3a:	4b37      	ldr	r3, [pc, #220]	; (8c18 <CompactSector+0x250>)
    8b3c:	881a      	ldrh	r2, [r3, #0]
    8b3e:	4b3b      	ldr	r3, [pc, #236]	; (8c2c <CompactSector+0x264>)
    8b40:	801a      	strh	r2, [r3, #0]
    uint32_t nextSequenceNumber = sectorHeader.sequenceNumber - 1uL;
    8b42:	9809      	ldr	r0, [sp, #36]	; 0x24
    8b44:	3801      	subs	r0, #1
    //SYS_PostEvent(BC_EVENT_UPGRADE_STRUCT_CHANGED_ITEMS, 0U);

    // update nextPageAddressAfterCompact in the sector header
    // All items moved, so now we just need to Write the Sector Header with 
    // nextPageAddressAfterCompact at the end of compact sector operation
    if ( !WriteSectorHeader(nextSequenceNumber))
    8b46:	4b3a      	ldr	r3, [pc, #232]	; (8c30 <CompactSector+0x268>)
    8b48:	4798      	blx	r3
    8b4a:	1e04      	subs	r4, r0, #0
    8b4c:	d031      	beq.n	8bb2 <CompactSector+0x1ea>
    {
        return false;
    }
    // Done with compact sector opration, Set the Sector Head to next page address for normal item update 
    UpdateSectorHead(0, ITEM_64BYTE_ALIGNMENT);
    8b4e:	2102      	movs	r1, #2
    8b50:	2000      	movs	r0, #0
    8b52:	4b35      	ldr	r3, [pc, #212]	; (8c28 <CompactSector+0x260>)
    8b54:	4798      	blx	r3

    // schedule an erase of the source sector,Restart the timer if it is already running.
    s_sectorToErase = sourceSector;
    8b56:	4b37      	ldr	r3, [pc, #220]	; (8c34 <CompactSector+0x26c>)
    8b58:	466a      	mov	r2, sp
    8b5a:	7b12      	ldrb	r2, [r2, #12]
    8b5c:	701a      	strb	r2, [r3, #0]
    SYS_TimerStop(&eraseSectorTimer);
    8b5e:	4d36      	ldr	r5, [pc, #216]	; (8c38 <CompactSector+0x270>)
    8b60:	0028      	movs	r0, r5
    8b62:	4b19      	ldr	r3, [pc, #100]	; (8bc8 <CompactSector+0x200>)
    8b64:	4798      	blx	r3
    SYS_TimerStart(&eraseSectorTimer);
    8b66:	0028      	movs	r0, r5
    8b68:	4b34      	ldr	r3, [pc, #208]	; (8c3c <CompactSector+0x274>)
    8b6a:	4798      	blx	r3

    return true;
    8b6c:	e021      	b.n	8bb2 <CompactSector+0x1ea>
              bytesToGather =  (currLength > ROW_SIZE) ? ROW_SIZE : currLength; 
    8b6e:	b2ad      	uxth	r5, r5
              if (!GatherData(sourceSector, lastBlockPointer, inDataOffset, (bytesToGather - dataBlockOffset) , (dataBlock + dataBlockOffset)))
    8b70:	1aef      	subs	r7, r5, r3
    8b72:	b2ba      	uxth	r2, r7
    8b74:	4693      	mov	fp, r2
    8b76:	4443      	add	r3, r8
    8b78:	9300      	str	r3, [sp, #0]
    8b7a:	0013      	movs	r3, r2
    8b7c:	0032      	movs	r2, r6
    8b7e:	9904      	ldr	r1, [sp, #16]
    8b80:	9803      	ldr	r0, [sp, #12]
    8b82:	4f26      	ldr	r7, [pc, #152]	; (8c1c <CompactSector+0x254>)
    8b84:	47b8      	blx	r7
    8b86:	2800      	cmp	r0, #0
    8b88:	d012      	beq.n	8bb0 <CompactSector+0x1e8>
              if (!SmartCompacting(compactBlock, bytesToGather))
    8b8a:	0029      	movs	r1, r5
    8b8c:	a814      	add	r0, sp, #80	; 0x50
    8b8e:	4b24      	ldr	r3, [pc, #144]	; (8c20 <CompactSector+0x258>)
    8b90:	4798      	blx	r3
    8b92:	2800      	cmp	r0, #0
    8b94:	d00c      	beq.n	8bb0 <CompactSector+0x1e8>
              currLength -= bytesToGather;
    8b96:	1b64      	subs	r4, r4, r5
    8b98:	b2a4      	uxth	r4, r4
              inDataOffset += (bytesToGather - dataBlockOffset);
    8b9a:	445e      	add	r6, fp
    8b9c:	b2b6      	uxth	r6, r6
              dataBlockOffset = 0;
    8b9e:	2300      	movs	r3, #0
            } while(currLength > 0);
    8ba0:	2c00      	cmp	r4, #0
    8ba2:	d0b1      	beq.n	8b08 <CompactSector+0x140>
              bytesToGather =  (currLength > ROW_SIZE) ? ROW_SIZE : currLength; 
    8ba4:	1c25      	adds	r5, r4, #0
    8ba6:	454c      	cmp	r4, r9
    8ba8:	d9e1      	bls.n	8b6e <CompactSector+0x1a6>
    8baa:	466a      	mov	r2, sp
    8bac:	8ad5      	ldrh	r5, [r2, #22]
    8bae:	e7de      	b.n	8b6e <CompactSector+0x1a6>
                return false;
    8bb0:	2400      	movs	r4, #0
}
    8bb2:	0020      	movs	r0, r4
    8bb4:	b055      	add	sp, #340	; 0x154
    8bb6:	bc3c      	pop	{r2, r3, r4, r5}
    8bb8:	4690      	mov	r8, r2
    8bba:	4699      	mov	r9, r3
    8bbc:	46a2      	mov	sl, r4
    8bbe:	46ab      	mov	fp, r5
    8bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8bc2:	46c0      	nop			; (mov r8, r8)
    8bc4:	20000320 	.word	0x20000320
    8bc8:	0000d369 	.word	0x0000d369
    8bcc:	2000044c 	.word	0x2000044c
    8bd0:	2000044e 	.word	0x2000044e
    8bd4:	20000308 	.word	0x20000308
    8bd8:	20000334 	.word	0x20000334
    8bdc:	20000480 	.word	0x20000480
    8be0:	000082b5 	.word	0x000082b5
    8be4:	00008861 	.word	0x00008861
    8be8:	00019bdc 	.word	0x00019bdc
    8bec:	00019d64 	.word	0x00019d64
    8bf0:	000003d5 	.word	0x000003d5
    8bf4:	00019c58 	.word	0x00019c58
    8bf8:	000177a9 	.word	0x000177a9
    8bfc:	20000478 	.word	0x20000478
    8c00:	20000338 	.word	0x20000338
    8c04:	20000454 	.word	0x20000454
    8c08:	00008655 	.word	0x00008655
    8c0c:	0000ffff 	.word	0x0000ffff
    8c10:	0000855d 	.word	0x0000855d
    8c14:	0001787d 	.word	0x0001787d
    8c18:	20000482 	.word	0x20000482
    8c1c:	0000859d 	.word	0x0000859d
    8c20:	00008921 	.word	0x00008921
    8c24:	00008895 	.word	0x00008895
    8c28:	00008521 	.word	0x00008521
    8c2c:	2000047a 	.word	0x2000047a
    8c30:	000088c9 	.word	0x000088c9
    8c34:	2000001a 	.word	0x2000001a
    8c38:	20000438 	.word	0x20000438
    8c3c:	0000d3d5 	.word	0x0000d3d5

00008c40 <compactSectorTimerFired>:
{
    8c40:	b510      	push	{r4, lr}
    if (!PowerSupplyTooLow()) {
    8c42:	4b07      	ldr	r3, [pc, #28]	; (8c60 <compactSectorTimerFired+0x20>)
    8c44:	4798      	blx	r3
    8c46:	2800      	cmp	r0, #0
    8c48:	d000      	beq.n	8c4c <compactSectorTimerFired+0xc>
}
    8c4a:	bd10      	pop	{r4, pc}
      status = CompactSector();
    8c4c:	4b05      	ldr	r3, [pc, #20]	; (8c64 <compactSectorTimerFired+0x24>)
    8c4e:	4798      	blx	r3
      assert(false);
    8c50:	4b05      	ldr	r3, [pc, #20]	; (8c68 <compactSectorTimerFired+0x28>)
    8c52:	4a06      	ldr	r2, [pc, #24]	; (8c6c <compactSectorTimerFired+0x2c>)
    8c54:	212c      	movs	r1, #44	; 0x2c
    8c56:	31ff      	adds	r1, #255	; 0xff
    8c58:	4805      	ldr	r0, [pc, #20]	; (8c70 <compactSectorTimerFired+0x30>)
    8c5a:	4c06      	ldr	r4, [pc, #24]	; (8c74 <compactSectorTimerFired+0x34>)
    8c5c:	47a0      	blx	r4
    8c5e:	46c0      	nop			; (mov r8, r8)
    8c60:	00008505 	.word	0x00008505
    8c64:	000089c9 	.word	0x000089c9
    8c68:	00019bdc 	.word	0x00019bdc
    8c6c:	00019d10 	.word	0x00019d10
    8c70:	00019c58 	.word	0x00019c58
    8c74:	000177a9 	.word	0x000177a9

00008c78 <CompactSectorIfNeeded>:

static void CompactSectorIfNeeded(uint16_t immediateThreshold)
{
    8c78:	b510      	push	{r4, lr}
    uint16_t freeSpace = SECTOR_SIZE - s_sectorHead;
    8c7a:	4b12      	ldr	r3, [pc, #72]	; (8cc4 <CompactSectorIfNeeded+0x4c>)
    8c7c:	881a      	ldrh	r2, [r3, #0]
    8c7e:	2380      	movs	r3, #128	; 0x80
    8c80:	019b      	lsls	r3, r3, #6
    8c82:	1a9b      	subs	r3, r3, r2
    8c84:	b29b      	uxth	r3, r3

    if ( freeSpace < immediateThreshold )
    8c86:	4283      	cmp	r3, r0
    8c88:	d303      	bcc.n	8c92 <CompactSectorIfNeeded+0x1a>
        {
            assert(false);
        }
        return;
    }
    if ( freeSpace < PREEMPTIVE_COMPACT_SECTOR_THRESHOLD )
    8c8a:	4a0f      	ldr	r2, [pc, #60]	; (8cc8 <CompactSectorIfNeeded+0x50>)
    8c8c:	4293      	cmp	r3, r2
    8c8e:	d90a      	bls.n	8ca6 <CompactSectorIfNeeded+0x2e>
        compactSectorTimer.mode = SYS_TIMER_INTERVAL_MODE;
        //TODO: check timer to be started or not
        //SYS_StartTimer(&compactSectorTimer);
        }
    }
}
    8c90:	bd10      	pop	{r4, pc}
        if ( !CompactSector() )
    8c92:	4b0e      	ldr	r3, [pc, #56]	; (8ccc <CompactSectorIfNeeded+0x54>)
    8c94:	4798      	blx	r3
    8c96:	2800      	cmp	r0, #0
    8c98:	d1fa      	bne.n	8c90 <CompactSectorIfNeeded+0x18>
            assert(false);
    8c9a:	4b0d      	ldr	r3, [pc, #52]	; (8cd0 <CompactSectorIfNeeded+0x58>)
    8c9c:	4a0d      	ldr	r2, [pc, #52]	; (8cd4 <CompactSectorIfNeeded+0x5c>)
    8c9e:	490e      	ldr	r1, [pc, #56]	; (8cd8 <CompactSectorIfNeeded+0x60>)
    8ca0:	480e      	ldr	r0, [pc, #56]	; (8cdc <CompactSectorIfNeeded+0x64>)
    8ca2:	4c0f      	ldr	r4, [pc, #60]	; (8ce0 <CompactSectorIfNeeded+0x68>)
    8ca4:	47a0      	blx	r4
        if (!SYS_TimerStarted(&compactSectorTimer))
    8ca6:	480f      	ldr	r0, [pc, #60]	; (8ce4 <CompactSectorIfNeeded+0x6c>)
    8ca8:	4b0f      	ldr	r3, [pc, #60]	; (8ce8 <CompactSectorIfNeeded+0x70>)
    8caa:	4798      	blx	r3
    8cac:	2800      	cmp	r0, #0
    8cae:	d1ef      	bne.n	8c90 <CompactSectorIfNeeded+0x18>
        compactSectorTimer.handler = compactSectorTimerFired;
    8cb0:	4b0c      	ldr	r3, [pc, #48]	; (8ce4 <CompactSectorIfNeeded+0x6c>)
    8cb2:	4a0e      	ldr	r2, [pc, #56]	; (8cec <CompactSectorIfNeeded+0x74>)
    8cb4:	611a      	str	r2, [r3, #16]
        compactSectorTimer.timeout = COMPACT_SECTOR_DELAY_MS;
    8cb6:	4a0e      	ldr	r2, [pc, #56]	; (8cf0 <CompactSectorIfNeeded+0x78>)
    8cb8:	605a      	str	r2, [r3, #4]
        compactSectorTimer.interval = COMPACT_SECTOR_DELAY_MS;
    8cba:	609a      	str	r2, [r3, #8]
        compactSectorTimer.mode = SYS_TIMER_INTERVAL_MODE;
    8cbc:	2200      	movs	r2, #0
    8cbe:	731a      	strb	r2, [r3, #12]
    8cc0:	e7e6      	b.n	8c90 <CompactSectorIfNeeded+0x18>
    8cc2:	46c0      	nop			; (mov r8, r8)
    8cc4:	20000482 	.word	0x20000482
    8cc8:	0000080f 	.word	0x0000080f
    8ccc:	000089c9 	.word	0x000089c9
    8cd0:	00019bdc 	.word	0x00019bdc
    8cd4:	00019d74 	.word	0x00019d74
    8cd8:	0000044e 	.word	0x0000044e
    8cdc:	00019c58 	.word	0x00019c58
    8ce0:	000177a9 	.word	0x000177a9
    8ce4:	20000320 	.word	0x20000320
    8ce8:	0000d3a9 	.word	0x0000d3a9
    8cec:	00008c41 	.word	0x00008c41
    8cf0:	00002710 	.word	0x00002710

00008cf4 <CompactItem>:

static S_Nv_ReturnValue_t CompactItem(void)
{
    8cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    8cf6:	46de      	mov	lr, fp
    8cf8:	4657      	mov	r7, sl
    8cfa:	464e      	mov	r6, r9
    8cfc:	4645      	mov	r5, r8
    8cfe:	b5e0      	push	{r5, r6, r7, lr}
    8d00:	b08b      	sub	sp, #44	; 0x2c
#if defined(ENABLE_NV_COMPACT_LOGGING)
    PRINTA(("CompactItem(id=%X)", s_compactItemId));
#endif

    if ( PowerSupplyTooLow() )
    8d02:	4b77      	ldr	r3, [pc, #476]	; (8ee0 <CompactItem+0x1ec>)
    8d04:	4798      	blx	r3
    {
        return S_Nv_ReturnValue_PowerSupplyTooLow;
    8d06:	2305      	movs	r3, #5
    if ( PowerSupplyTooLow() )
    8d08:	2800      	cmp	r0, #0
    8d0a:	d007      	beq.n	8d1c <CompactItem+0x28>
    s_compactItemLength = 0u;

    cache->lastBlock = lastBlock;

    return S_Nv_ReturnValue_Ok;
}
    8d0c:	0018      	movs	r0, r3
    8d0e:	b00b      	add	sp, #44	; 0x2c
    8d10:	bc3c      	pop	{r2, r3, r4, r5}
    8d12:	4690      	mov	r8, r2
    8d14:	4699      	mov	r9, r3
    8d16:	46a2      	mov	sl, r4
    8d18:	46ab      	mov	fp, r5
    8d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ( (s_compactItemLength == 0u) && ( s_compactItemId == 0u ) )
    8d1c:	4b71      	ldr	r3, [pc, #452]	; (8ee4 <CompactItem+0x1f0>)
    8d1e:	8818      	ldrh	r0, [r3, #0]
    8d20:	2800      	cmp	r0, #0
    8d22:	d146      	bne.n	8db2 <CompactItem+0xbe>
    8d24:	4b70      	ldr	r3, [pc, #448]	; (8ee8 <CompactItem+0x1f4>)
    8d26:	881b      	ldrh	r3, [r3, #0]
    8d28:	2b00      	cmp	r3, #0
    8d2a:	d100      	bne.n	8d2e <CompactItem+0x3a>
    8d2c:	e0d0      	b.n	8ed0 <CompactItem+0x1dc>
    Item_t *cache = FindItemCache(s_compactItemId);
    8d2e:	4b6e      	ldr	r3, [pc, #440]	; (8ee8 <CompactItem+0x1f4>)
    8d30:	8818      	ldrh	r0, [r3, #0]
    8d32:	4b6e      	ldr	r3, [pc, #440]	; (8eec <CompactItem+0x1f8>)
    8d34:	4798      	blx	r3
    8d36:	4683      	mov	fp, r0
    if ( cache == NULL )
    8d38:	2800      	cmp	r0, #0
    8d3a:	d100      	bne.n	8d3e <CompactItem+0x4a>
    8d3c:	e0ca      	b.n	8ed4 <CompactItem+0x1e0>
    uint16_t blockPointer = cache->lastBlock;
    8d3e:	7882      	ldrb	r2, [r0, #2]
    8d40:	78c3      	ldrb	r3, [r0, #3]
    8d42:	021b      	lsls	r3, r3, #8
    8d44:	4313      	orrs	r3, r2
    8d46:	0019      	movs	r1, r3
    8d48:	9303      	str	r3, [sp, #12]
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    8d4a:	4b69      	ldr	r3, [pc, #420]	; (8ef0 <CompactItem+0x1fc>)
    8d4c:	7818      	ldrb	r0, [r3, #0]
    8d4e:	2310      	movs	r3, #16
    8d50:	aa06      	add	r2, sp, #24
    8d52:	4c68      	ldr	r4, [pc, #416]	; (8ef4 <CompactItem+0x200>)
    8d54:	47a0      	blx	r4
    if (s_compactItemLength == 0)
    8d56:	4b63      	ldr	r3, [pc, #396]	; (8ee4 <CompactItem+0x1f0>)
    8d58:	881a      	ldrh	r2, [r3, #0]
    8d5a:	2a00      	cmp	r2, #0
    8d5c:	d02e      	beq.n	8dbc <CompactItem+0xc8>
    uint16_t lastBlock = s_sectorHead;
    8d5e:	4b66      	ldr	r3, [pc, #408]	; (8ef8 <CompactItem+0x204>)
    8d60:	881b      	ldrh	r3, [r3, #0]
    8d62:	9305      	str	r3, [sp, #20]
    uint16_t bytesToGather = blockHeader.itemLength;
    8d64:	ab06      	add	r3, sp, #24
    8d66:	891b      	ldrh	r3, [r3, #8]
        blockHeader.itemLength = s_compactItemLength;
    8d68:	a906      	add	r1, sp, #24
    8d6a:	810a      	strh	r2, [r1, #8]
    8d6c:	1c19      	adds	r1, r3, #0
    8d6e:	4293      	cmp	r3, r2
    8d70:	d900      	bls.n	8d74 <CompactItem+0x80>
    8d72:	1c11      	adds	r1, r2, #0
    8d74:	b28b      	uxth	r3, r1
    blockHeader.blockOffset = 0u;
    8d76:	aa06      	add	r2, sp, #24
    8d78:	2100      	movs	r1, #0
    8d7a:	8091      	strh	r1, [r2, #4]
    blockHeader.blockLength = blockHeader.itemLength;
    8d7c:	8910      	ldrh	r0, [r2, #8]
    8d7e:	80d0      	strh	r0, [r2, #6]
    blockHeader.previousBlock = 0x0000u;
    8d80:	8151      	strh	r1, [r2, #10]
    blockHeader.writeCount = 0u;
    8d82:	8191      	strh	r1, [r2, #12]
    uint16_t currLength = BLOCK_HEADER_SIZE + bytesToGather;
    8d84:	001c      	movs	r4, r3
    8d86:	3410      	adds	r4, #16
    8d88:	b2a4      	uxth	r4, r4
    memcpy(dataBlock, &blockHeader, BLOCK_HEADER_SIZE);
    8d8a:	495c      	ldr	r1, [pc, #368]	; (8efc <CompactItem+0x208>)
    8d8c:	ca61      	ldmia	r2!, {r0, r5, r6}
    8d8e:	c161      	stmia	r1!, {r0, r5, r6}
    8d90:	6812      	ldr	r2, [r2, #0]
    8d92:	600a      	str	r2, [r1, #0]
    if (currLength <= ROW_SIZE)
    8d94:	2280      	movs	r2, #128	; 0x80
    8d96:	0052      	lsls	r2, r2, #1
    8d98:	4294      	cmp	r4, r2
    8d9a:	d939      	bls.n	8e10 <CompactItem+0x11c>
    8d9c:	2600      	movs	r6, #0
    8d9e:	2310      	movs	r3, #16
            bytesToGatherAndCommit = (currLength > ROW_SIZE) ? ROW_SIZE : currLength;
    8da0:	2280      	movs	r2, #128	; 0x80
    8da2:	0052      	lsls	r2, r2, #1
    8da4:	4691      	mov	r9, r2
    8da6:	4669      	mov	r1, sp
    8da8:	824a      	strh	r2, [r1, #18]
            if (!GatherData(s_sector, blockPointer, inDataOffset, bytesToGatherAndCommit - dataBlockOffset , (dataBlock + dataBlockOffset)))
    8daa:	4a51      	ldr	r2, [pc, #324]	; (8ef0 <CompactItem+0x1fc>)
    8dac:	4692      	mov	sl, r2
    8dae:	001a      	movs	r2, r3
    8db0:	e088      	b.n	8ec4 <CompactItem+0x1d0>
        CompactSectorIfNeeded(s_compactItemLength + BLOCK_HEADER_SIZE);
    8db2:	3010      	adds	r0, #16
    8db4:	b280      	uxth	r0, r0
    8db6:	4b52      	ldr	r3, [pc, #328]	; (8f00 <CompactItem+0x20c>)
    8db8:	4798      	blx	r3
    8dba:	e7b8      	b.n	8d2e <CompactItem+0x3a>
        CompactSectorIfNeeded(blockHeader.itemLength + BLOCK_HEADER_SIZE);
    8dbc:	ab06      	add	r3, sp, #24
    8dbe:	8918      	ldrh	r0, [r3, #8]
    8dc0:	3010      	adds	r0, #16
    8dc2:	b280      	uxth	r0, r0
    8dc4:	4b4e      	ldr	r3, [pc, #312]	; (8f00 <CompactItem+0x20c>)
    8dc6:	4798      	blx	r3
        cache = FindItemCache(s_compactItemId);
    8dc8:	4b47      	ldr	r3, [pc, #284]	; (8ee8 <CompactItem+0x1f4>)
    8dca:	8818      	ldrh	r0, [r3, #0]
    8dcc:	4b47      	ldr	r3, [pc, #284]	; (8eec <CompactItem+0x1f8>)
    8dce:	4798      	blx	r3
    8dd0:	4683      	mov	fp, r0
        assert(cache != NULL);
    8dd2:	2800      	cmp	r0, #0
    8dd4:	d015      	beq.n	8e02 <CompactItem+0x10e>
        blockPointer = cache->lastBlock;
    8dd6:	7882      	ldrb	r2, [r0, #2]
    8dd8:	78c3      	ldrb	r3, [r0, #3]
    8dda:	021b      	lsls	r3, r3, #8
    8ddc:	4313      	orrs	r3, r2
    8dde:	0019      	movs	r1, r3
    8de0:	9303      	str	r3, [sp, #12]
        D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    8de2:	ac06      	add	r4, sp, #24
    8de4:	4b42      	ldr	r3, [pc, #264]	; (8ef0 <CompactItem+0x1fc>)
    8de6:	7818      	ldrb	r0, [r3, #0]
    8de8:	2310      	movs	r3, #16
    8dea:	0022      	movs	r2, r4
    8dec:	4d41      	ldr	r5, [pc, #260]	; (8ef4 <CompactItem+0x200>)
    8dee:	47a8      	blx	r5
    uint16_t lastBlock = s_sectorHead;
    8df0:	4b41      	ldr	r3, [pc, #260]	; (8ef8 <CompactItem+0x204>)
    8df2:	881b      	ldrh	r3, [r3, #0]
    8df4:	9305      	str	r3, [sp, #20]
    uint16_t bytesToGather = blockHeader.itemLength;
    8df6:	8923      	ldrh	r3, [r4, #8]
    if ( s_compactItemLength != 0u )
    8df8:	4a3a      	ldr	r2, [pc, #232]	; (8ee4 <CompactItem+0x1f0>)
    8dfa:	8812      	ldrh	r2, [r2, #0]
    8dfc:	2a00      	cmp	r2, #0
    8dfe:	d0ba      	beq.n	8d76 <CompactItem+0x82>
    8e00:	e7b2      	b.n	8d68 <CompactItem+0x74>
        assert(cache != NULL);
    8e02:	4b40      	ldr	r3, [pc, #256]	; (8f04 <CompactItem+0x210>)
    8e04:	4a40      	ldr	r2, [pc, #256]	; (8f08 <CompactItem+0x214>)
    8e06:	2191      	movs	r1, #145	; 0x91
    8e08:	00c9      	lsls	r1, r1, #3
    8e0a:	4840      	ldr	r0, [pc, #256]	; (8f0c <CompactItem+0x218>)
    8e0c:	4c40      	ldr	r4, [pc, #256]	; (8f10 <CompactItem+0x21c>)
    8e0e:	47a0      	blx	r4
        if (!GatherData(s_sector, blockPointer, 0u, bytesToGather, (dataBlock + BLOCK_HEADER_SIZE )))
    8e10:	4a37      	ldr	r2, [pc, #220]	; (8ef0 <CompactItem+0x1fc>)
    8e12:	7810      	ldrb	r0, [r2, #0]
    8e14:	4a39      	ldr	r2, [pc, #228]	; (8efc <CompactItem+0x208>)
    8e16:	3210      	adds	r2, #16
    8e18:	9200      	str	r2, [sp, #0]
    8e1a:	2200      	movs	r2, #0
    8e1c:	9903      	ldr	r1, [sp, #12]
    8e1e:	4c3d      	ldr	r4, [pc, #244]	; (8f14 <CompactItem+0x220>)
    8e20:	47a0      	blx	r4
            return S_Nv_ReturnValue_Failure;
    8e22:	2301      	movs	r3, #1
        if (!GatherData(s_sector, blockPointer, 0u, bytesToGather, (dataBlock + BLOCK_HEADER_SIZE )))
    8e24:	2800      	cmp	r0, #0
    8e26:	d100      	bne.n	8e2a <CompactItem+0x136>
    8e28:	e770      	b.n	8d0c <CompactItem+0x18>
        memcpy(dataBlock, &blockHeader, BLOCK_HEADER_SIZE);
    8e2a:	4934      	ldr	r1, [pc, #208]	; (8efc <CompactItem+0x208>)
    8e2c:	ab06      	add	r3, sp, #24
    8e2e:	000a      	movs	r2, r1
    8e30:	0018      	movs	r0, r3
    8e32:	c870      	ldmia	r0!, {r4, r5, r6}
    8e34:	c270      	stmia	r2!, {r4, r5, r6}
    8e36:	6800      	ldr	r0, [r0, #0]
    8e38:	6010      	str	r0, [r2, #0]
        if ( !WriteAndCheck(s_sectorHead, dataBlock, blockHeader.blockLength + BLOCK_HEADER_SIZE) )
    8e3a:	88da      	ldrh	r2, [r3, #6]
    8e3c:	3210      	adds	r2, #16
    8e3e:	b292      	uxth	r2, r2
    8e40:	4b2d      	ldr	r3, [pc, #180]	; (8ef8 <CompactItem+0x204>)
    8e42:	8818      	ldrh	r0, [r3, #0]
    8e44:	4b34      	ldr	r3, [pc, #208]	; (8f18 <CompactItem+0x224>)
    8e46:	4798      	blx	r3
            return false;
    8e48:	2300      	movs	r3, #0
        if ( !WriteAndCheck(s_sectorHead, dataBlock, blockHeader.blockLength + BLOCK_HEADER_SIZE) )
    8e4a:	2800      	cmp	r0, #0
    8e4c:	d100      	bne.n	8e50 <CompactItem+0x15c>
    8e4e:	e75d      	b.n	8d0c <CompactItem+0x18>
        UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), ITEM_64BYTE_ALIGNMENT);
    8e50:	ab06      	add	r3, sp, #24
    8e52:	88d8      	ldrh	r0, [r3, #6]
    8e54:	3010      	adds	r0, #16
    8e56:	b280      	uxth	r0, r0
    8e58:	2102      	movs	r1, #2
    8e5a:	4b30      	ldr	r3, [pc, #192]	; (8f1c <CompactItem+0x228>)
    8e5c:	4798      	blx	r3
    s_compactItemId = 0u;
    8e5e:	2300      	movs	r3, #0
    8e60:	4a21      	ldr	r2, [pc, #132]	; (8ee8 <CompactItem+0x1f4>)
    8e62:	8013      	strh	r3, [r2, #0]
    s_compactItemLength = 0u;
    8e64:	4a1f      	ldr	r2, [pc, #124]	; (8ee4 <CompactItem+0x1f0>)
    8e66:	8013      	strh	r3, [r2, #0]
    cache->lastBlock = lastBlock;
    8e68:	465b      	mov	r3, fp
    8e6a:	9905      	ldr	r1, [sp, #20]
    8e6c:	7099      	strb	r1, [r3, #2]
    8e6e:	0a0b      	lsrs	r3, r1, #8
    8e70:	465a      	mov	r2, fp
    8e72:	70d3      	strb	r3, [r2, #3]
    return S_Nv_ReturnValue_Ok;
    8e74:	2300      	movs	r3, #0
    8e76:	e749      	b.n	8d0c <CompactItem+0x18>
            bytesToGatherAndCommit = (currLength > ROW_SIZE) ? ROW_SIZE : currLength;
    8e78:	b2ad      	uxth	r5, r5
            if (!GatherData(s_sector, blockPointer, inDataOffset, bytesToGatherAndCommit - dataBlockOffset , (dataBlock + dataBlockOffset)))
    8e7a:	1aaf      	subs	r7, r5, r2
    8e7c:	b2bb      	uxth	r3, r7
    8e7e:	0019      	movs	r1, r3
    8e80:	4653      	mov	r3, sl
    8e82:	7818      	ldrb	r0, [r3, #0]
    8e84:	4b1d      	ldr	r3, [pc, #116]	; (8efc <CompactItem+0x208>)
    8e86:	189b      	adds	r3, r3, r2
    8e88:	9300      	str	r3, [sp, #0]
    8e8a:	9102      	str	r1, [sp, #8]
    8e8c:	000b      	movs	r3, r1
    8e8e:	0032      	movs	r2, r6
    8e90:	9903      	ldr	r1, [sp, #12]
    8e92:	4f20      	ldr	r7, [pc, #128]	; (8f14 <CompactItem+0x220>)
    8e94:	47b8      	blx	r7
    8e96:	2800      	cmp	r0, #0
    8e98:	d01e      	beq.n	8ed8 <CompactItem+0x1e4>
            if ( !WriteAndCheck(s_sectorHead, dataBlock, bytesToGatherAndCommit) )
    8e9a:	4b17      	ldr	r3, [pc, #92]	; (8ef8 <CompactItem+0x204>)
    8e9c:	8818      	ldrh	r0, [r3, #0]
    8e9e:	002a      	movs	r2, r5
    8ea0:	4916      	ldr	r1, [pc, #88]	; (8efc <CompactItem+0x208>)
    8ea2:	4b1d      	ldr	r3, [pc, #116]	; (8f18 <CompactItem+0x224>)
    8ea4:	4798      	blx	r3
    8ea6:	2800      	cmp	r0, #0
    8ea8:	d018      	beq.n	8edc <CompactItem+0x1e8>
            UpdateSectorHead(bytesToGatherAndCommit, ITEM_64BYTE_ALIGNMENT);
    8eaa:	2102      	movs	r1, #2
    8eac:	0028      	movs	r0, r5
    8eae:	4b1b      	ldr	r3, [pc, #108]	; (8f1c <CompactItem+0x228>)
    8eb0:	4798      	blx	r3
            currLength -= bytesToGatherAndCommit;
    8eb2:	1b64      	subs	r4, r4, r5
    8eb4:	b2a4      	uxth	r4, r4
            inDataOffset += (bytesToGatherAndCommit - dataBlockOffset);
    8eb6:	9902      	ldr	r1, [sp, #8]
    8eb8:	468c      	mov	ip, r1
    8eba:	4466      	add	r6, ip
    8ebc:	b2b6      	uxth	r6, r6
            dataBlockOffset = 0;
    8ebe:	2200      	movs	r2, #0
        } while(currLength > 0);
    8ec0:	2c00      	cmp	r4, #0
    8ec2:	d0cc      	beq.n	8e5e <CompactItem+0x16a>
            bytesToGatherAndCommit = (currLength > ROW_SIZE) ? ROW_SIZE : currLength;
    8ec4:	1c25      	adds	r5, r4, #0
    8ec6:	454c      	cmp	r4, r9
    8ec8:	d9d6      	bls.n	8e78 <CompactItem+0x184>
    8eca:	466b      	mov	r3, sp
    8ecc:	8a5d      	ldrh	r5, [r3, #18]
    8ece:	e7d3      	b.n	8e78 <CompactItem+0x184>
        return S_Nv_ReturnValue_Ok;
    8ed0:	2300      	movs	r3, #0
    8ed2:	e71b      	b.n	8d0c <CompactItem+0x18>
        return S_Nv_ReturnValue_Ok;
    8ed4:	2300      	movs	r3, #0
    8ed6:	e719      	b.n	8d0c <CompactItem+0x18>
                return S_Nv_ReturnValue_Failure;
    8ed8:	2301      	movs	r3, #1
    8eda:	e717      	b.n	8d0c <CompactItem+0x18>
                return false;
    8edc:	2300      	movs	r3, #0
    8ede:	e715      	b.n	8d0c <CompactItem+0x18>
    8ee0:	00008505 	.word	0x00008505
    8ee4:	2000044e 	.word	0x2000044e
    8ee8:	2000044c 	.word	0x2000044c
    8eec:	000086fd 	.word	0x000086fd
    8ef0:	20000480 	.word	0x20000480
    8ef4:	000082b5 	.word	0x000082b5
    8ef8:	20000482 	.word	0x20000482
    8efc:	20000338 	.word	0x20000338
    8f00:	00008c79 	.word	0x00008c79
    8f04:	00019bcc 	.word	0x00019bcc
    8f08:	00019d8c 	.word	0x00019d8c
    8f0c:	00019c58 	.word	0x00019c58
    8f10:	000177a9 	.word	0x000177a9
    8f14:	0000859d 	.word	0x0000859d
    8f18:	00008895 	.word	0x00008895
    8f1c:	00008521 	.word	0x00008521

00008f20 <compactItemTimerFired>:
{
    8f20:	b510      	push	{r4, lr}
    (void)CompactItem();
    8f22:	4b01      	ldr	r3, [pc, #4]	; (8f28 <compactItemTimerFired+0x8>)
    8f24:	4798      	blx	r3
}
    8f26:	bd10      	pop	{r4, pc}
    8f28:	00008cf5 	.word	0x00008cf5

00008f2c <WriteDataBlockAndHeader>:
{
    8f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8f2e:	46de      	mov	lr, fp
    8f30:	4657      	mov	r7, sl
    8f32:	464e      	mov	r6, r9
    8f34:	4645      	mov	r5, r8
    8f36:	b5e0      	push	{r5, r6, r7, lr}
    8f38:	b083      	sub	sp, #12
    8f3a:	0004      	movs	r4, r0
    8f3c:	468a      	mov	sl, r1
    memset(dataBlock, 0xFF, sizeof(dataBlock));
    8f3e:	4d46      	ldr	r5, [pc, #280]	; (9058 <WriteDataBlockAndHeader+0x12c>)
    8f40:	2280      	movs	r2, #128	; 0x80
    8f42:	0052      	lsls	r2, r2, #1
    8f44:	21ff      	movs	r1, #255	; 0xff
    8f46:	0028      	movs	r0, r5
    8f48:	4b44      	ldr	r3, [pc, #272]	; (905c <WriteDataBlockAndHeader+0x130>)
    8f4a:	4798      	blx	r3
    pBlockHeader->dataCrc = ComputeCrc(pData, pBlockHeader->blockLength, 0xFFFF);
    8f4c:	4e44      	ldr	r6, [pc, #272]	; (9060 <WriteDataBlockAndHeader+0x134>)
    8f4e:	79a3      	ldrb	r3, [r4, #6]
    8f50:	79e1      	ldrb	r1, [r4, #7]
    8f52:	0209      	lsls	r1, r1, #8
    8f54:	4319      	orrs	r1, r3
    8f56:	0032      	movs	r2, r6
    8f58:	4650      	mov	r0, sl
    8f5a:	4f42      	ldr	r7, [pc, #264]	; (9064 <WriteDataBlockAndHeader+0x138>)
    8f5c:	47b8      	blx	r7
    8f5e:	7020      	strb	r0, [r4, #0]
    8f60:	0a00      	lsrs	r0, r0, #8
    8f62:	7060      	strb	r0, [r4, #1]
    return ComputeCrc(((uint8_t*) pBlockHeader), (sizeof(BlockHeader_t) - sizeof(pBlockHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    8f64:	0032      	movs	r2, r6
    8f66:	210e      	movs	r1, #14
    8f68:	0020      	movs	r0, r4
    8f6a:	47b8      	blx	r7
    pBlockHeader->headerCrc = ComputeHeaderCrc(pBlockHeader);
    8f6c:	73a0      	strb	r0, [r4, #14]
    8f6e:	0a00      	lsrs	r0, r0, #8
    8f70:	73e0      	strb	r0, [r4, #15]
    memcpy(dataBlock, pBlockHeader, BLOCK_HEADER_SIZE);
    8f72:	2210      	movs	r2, #16
    8f74:	0021      	movs	r1, r4
    8f76:	0028      	movs	r0, r5
    8f78:	4b3b      	ldr	r3, [pc, #236]	; (9068 <WriteDataBlockAndHeader+0x13c>)
    8f7a:	4798      	blx	r3
    currentLength = pBlockHeader->blockLength + BLOCK_HEADER_SIZE;
    8f7c:	79a3      	ldrb	r3, [r4, #6]
    8f7e:	79e2      	ldrb	r2, [r4, #7]
    8f80:	0212      	lsls	r2, r2, #8
    8f82:	431a      	orrs	r2, r3
    8f84:	0015      	movs	r5, r2
    8f86:	3510      	adds	r5, #16
    8f88:	b2ad      	uxth	r5, r5
    if (pData != NULL )
    8f8a:	4653      	mov	r3, sl
    8f8c:	2b00      	cmp	r3, #0
    8f8e:	d012      	beq.n	8fb6 <WriteDataBlockAndHeader+0x8a>
        if(currentLength <= ROW_SIZE)
    8f90:	2380      	movs	r3, #128	; 0x80
    8f92:	005b      	lsls	r3, r3, #1
    8f94:	429d      	cmp	r5, r3
    8f96:	d909      	bls.n	8fac <WriteDataBlockAndHeader+0x80>
    8f98:	2600      	movs	r6, #0
    8f9a:	2710      	movs	r7, #16
                bytesToCommit = (currentLength > ROW_SIZE) ? ROW_SIZE : currentLength;
    8f9c:	2380      	movs	r3, #128	; 0x80
    8f9e:	005b      	lsls	r3, r3, #1
    8fa0:	469b      	mov	fp, r3
    8fa2:	466a      	mov	r2, sp
    8fa4:	80d3      	strh	r3, [r2, #6]
                memcpy(dataBlock + dataBlockOffset, pData + inDataOffset, bytesToCommit - dataBlockOffset);
    8fa6:	4b2c      	ldr	r3, [pc, #176]	; (9058 <WriteDataBlockAndHeader+0x12c>)
    8fa8:	4699      	mov	r9, r3
    8faa:	e045      	b.n	9038 <WriteDataBlockAndHeader+0x10c>
            memcpy(dataBlock + BLOCK_HEADER_SIZE , pData, pBlockHeader->blockLength);
    8fac:	4651      	mov	r1, sl
    8fae:	482a      	ldr	r0, [pc, #168]	; (9058 <WriteDataBlockAndHeader+0x12c>)
    8fb0:	3010      	adds	r0, #16
    8fb2:	4b2d      	ldr	r3, [pc, #180]	; (9068 <WriteDataBlockAndHeader+0x13c>)
    8fb4:	4798      	blx	r3
    if ( !WriteAndCheck(s_sectorHead, dataBlock, MIN((BLOCK_HEADER_SIZE + pBlockHeader->blockLength), ROW_SIZE)) )
    8fb6:	79a3      	ldrb	r3, [r4, #6]
    8fb8:	79e2      	ldrb	r2, [r4, #7]
    8fba:	0212      	lsls	r2, r2, #8
    8fbc:	431a      	orrs	r2, r3
    8fbe:	3210      	adds	r2, #16
    8fc0:	2380      	movs	r3, #128	; 0x80
    8fc2:	005b      	lsls	r3, r3, #1
    8fc4:	429a      	cmp	r2, r3
    8fc6:	dd00      	ble.n	8fca <WriteDataBlockAndHeader+0x9e>
    8fc8:	001a      	movs	r2, r3
    8fca:	b292      	uxth	r2, r2
    8fcc:	4b27      	ldr	r3, [pc, #156]	; (906c <WriteDataBlockAndHeader+0x140>)
    8fce:	8818      	ldrh	r0, [r3, #0]
    8fd0:	4921      	ldr	r1, [pc, #132]	; (9058 <WriteDataBlockAndHeader+0x12c>)
    8fd2:	4b27      	ldr	r3, [pc, #156]	; (9070 <WriteDataBlockAndHeader+0x144>)
    8fd4:	4798      	blx	r3
    8fd6:	4680      	mov	r8, r0
    8fd8:	2800      	cmp	r0, #0
    8fda:	d033      	beq.n	9044 <WriteDataBlockAndHeader+0x118>
    UpdateSectorHead((pBlockHeader->blockLength + BLOCK_HEADER_SIZE), ITEM_64BYTE_ALIGNMENT );
    8fdc:	79a3      	ldrb	r3, [r4, #6]
    8fde:	79e0      	ldrb	r0, [r4, #7]
    8fe0:	0200      	lsls	r0, r0, #8
    8fe2:	4318      	orrs	r0, r3
    8fe4:	3010      	adds	r0, #16
    8fe6:	b280      	uxth	r0, r0
    8fe8:	2102      	movs	r1, #2
    8fea:	4b22      	ldr	r3, [pc, #136]	; (9074 <WriteDataBlockAndHeader+0x148>)
    8fec:	4798      	blx	r3
}
    8fee:	4640      	mov	r0, r8
    8ff0:	b003      	add	sp, #12
    8ff2:	bc3c      	pop	{r2, r3, r4, r5}
    8ff4:	4690      	mov	r8, r2
    8ff6:	4699      	mov	r9, r3
    8ff8:	46a2      	mov	sl, r4
    8ffa:	46ab      	mov	fp, r5
    8ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
                bytesToCommit = (currentLength > ROW_SIZE) ? ROW_SIZE : currentLength;
    8ffe:	b2a4      	uxth	r4, r4
                memcpy(dataBlock + dataBlockOffset, pData + inDataOffset, bytesToCommit - dataBlockOffset);
    9000:	464b      	mov	r3, r9
    9002:	19d8      	adds	r0, r3, r7
    9004:	1be2      	subs	r2, r4, r7
    9006:	4653      	mov	r3, sl
    9008:	1999      	adds	r1, r3, r6
    900a:	4b17      	ldr	r3, [pc, #92]	; (9068 <WriteDataBlockAndHeader+0x13c>)
    900c:	4798      	blx	r3
                if ( !WriteAndCheck(s_sectorHead, dataBlock, bytesToCommit))
    900e:	4b17      	ldr	r3, [pc, #92]	; (906c <WriteDataBlockAndHeader+0x140>)
    9010:	8818      	ldrh	r0, [r3, #0]
    9012:	0022      	movs	r2, r4
    9014:	4649      	mov	r1, r9
    9016:	4b16      	ldr	r3, [pc, #88]	; (9070 <WriteDataBlockAndHeader+0x144>)
    9018:	4798      	blx	r3
    901a:	4680      	mov	r8, r0
    901c:	2800      	cmp	r0, #0
    901e:	d0e6      	beq.n	8fee <WriteDataBlockAndHeader+0xc2>
                UpdateSectorHead(bytesToCommit, ITEM_64BYTE_ALIGNMENT);
    9020:	2102      	movs	r1, #2
    9022:	0020      	movs	r0, r4
    9024:	4b13      	ldr	r3, [pc, #76]	; (9074 <WriteDataBlockAndHeader+0x148>)
    9026:	4798      	blx	r3
                currentLength -= bytesToCommit;
    9028:	1b2d      	subs	r5, r5, r4
    902a:	b2ad      	uxth	r5, r5
                inDataOffset += (bytesToCommit - dataBlockOffset);
    902c:	1be4      	subs	r4, r4, r7
    902e:	1936      	adds	r6, r6, r4
    9030:	b2b6      	uxth	r6, r6
                dataBlockOffset = 0;
    9032:	2700      	movs	r7, #0
            } while(currentLength > 0);
    9034:	2d00      	cmp	r5, #0
    9036:	d0da      	beq.n	8fee <WriteDataBlockAndHeader+0xc2>
                bytesToCommit = (currentLength > ROW_SIZE) ? ROW_SIZE : currentLength;
    9038:	1c2c      	adds	r4, r5, #0
    903a:	455d      	cmp	r5, fp
    903c:	d9df      	bls.n	8ffe <WriteDataBlockAndHeader+0xd2>
    903e:	466b      	mov	r3, sp
    9040:	88dc      	ldrh	r4, [r3, #6]
    9042:	e7dc      	b.n	8ffe <WriteDataBlockAndHeader+0xd2>
        UpdateSectorHead((pBlockHeader->blockLength + BLOCK_HEADER_SIZE), ITEM_64BYTE_ALIGNMENT);
    9044:	79a3      	ldrb	r3, [r4, #6]
    9046:	79e0      	ldrb	r0, [r4, #7]
    9048:	0200      	lsls	r0, r0, #8
    904a:	4318      	orrs	r0, r3
    904c:	3010      	adds	r0, #16
    904e:	b280      	uxth	r0, r0
    9050:	2102      	movs	r1, #2
    9052:	4b08      	ldr	r3, [pc, #32]	; (9074 <WriteDataBlockAndHeader+0x148>)
    9054:	4798      	blx	r3
        return false;
    9056:	e7ca      	b.n	8fee <WriteDataBlockAndHeader+0xc2>
    9058:	20000338 	.word	0x20000338
    905c:	0001787d 	.word	0x0001787d
    9060:	0000ffff 	.word	0x0000ffff
    9064:	0000855d 	.word	0x0000855d
    9068:	0001786b 	.word	0x0001786b
    906c:	20000482 	.word	0x20000482
    9070:	00008895 	.word	0x00008895
    9074:	00008521 	.word	0x00008521

00009078 <S_Nv_EarlyInit>:
/***************************************************************************************************
* EXPORTED FUNCTIONS
***************************************************************************************************/

void S_Nv_EarlyInit(void)
{
    9078:	b5f0      	push	{r4, r5, r6, r7, lr}
    907a:	46ce      	mov	lr, r9
    907c:	4647      	mov	r7, r8
    907e:	b580      	push	{r7, lr}
    9080:	b091      	sub	sp, #68	; 0x44
    SnvRevisioin_t revisionNumber;
    s_itemCount = 0u;
    9082:	2200      	movs	r2, #0
    9084:	4bb3      	ldr	r3, [pc, #716]	; (9354 <S_Nv_EarlyInit+0x2dc>)
    9086:	701a      	strb	r2, [r3, #0]
    SectorHeader_t sectorHeader;

    uint8_t lastSector = 0xFFu;
    uint32_t lastSectorSequence = 0xFFFFFFFFuL;

    for ( uint8_t sector = FIRST_SECTOR; sector < (FIRST_SECTOR + SECTOR_COUNT); sector++ )
    9088:	2400      	movs	r4, #0
    uint32_t lastSectorSequence = 0xFFFFFFFFuL;
    908a:	2301      	movs	r3, #1
    908c:	425b      	negs	r3, r3
    908e:	4699      	mov	r9, r3
    uint8_t lastSector = 0xFFu;
    9090:	27ff      	movs	r7, #255	; 0xff
    {
        D_Nv_Read(sector, 0u, (uint8_t*) &sectorHeader, SECTOR_HEADER_SIZE);
    9092:	4eb1      	ldr	r6, [pc, #708]	; (9358 <S_Nv_EarlyInit+0x2e0>)
    9094:	2312      	movs	r3, #18
    9096:	aa0b      	add	r2, sp, #44	; 0x2c
    9098:	2100      	movs	r1, #0
    909a:	0020      	movs	r0, r4
    909c:	47b0      	blx	r6
        if (((sectorHeader.sequenceNumber ^ sectorHeader.sequenceParity) == 0xFFFFFFFFuL) &&
    909e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    90a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    90a2:	9301      	str	r3, [sp, #4]
    90a4:	406b      	eors	r3, r5
    90a6:	3301      	adds	r3, #1
    90a8:	d01d      	beq.n	90e6 <S_Nv_EarlyInit+0x6e>
    for ( uint8_t sector = FIRST_SECTOR; sector < (FIRST_SECTOR + SECTOR_COUNT); sector++ )
    90aa:	3401      	adds	r4, #1
    90ac:	b2e4      	uxtb	r4, r4
    90ae:	2c02      	cmp	r4, #2
    90b0:	d1f0      	bne.n	9094 <S_Nv_EarlyInit+0x1c>
                lastSectorSequence = sectorHeader.sequenceNumber;
            }
        }
    }

    if ( lastSector == 0xFFu )
    90b2:	2fff      	cmp	r7, #255	; 0xff
    90b4:	d057      	beq.n	9166 <S_Nv_EarlyInit+0xee>
        s_itemCount = 0u;
    }
    else
    {
        // load active sector
        s_sector = lastSector;
    90b6:	4ba9      	ldr	r3, [pc, #676]	; (935c <S_Nv_EarlyInit+0x2e4>)
    90b8:	701f      	strb	r7, [r3, #0]
    if (SNV_REV_1 == revisionNumber)
    90ba:	4643      	mov	r3, r8
    90bc:	2b01      	cmp	r3, #1
    90be:	d100      	bne.n	90c2 <S_Nv_EarlyInit+0x4a>
    90c0:	e07b      	b.n	91ba <S_Nv_EarlyInit+0x142>
    else if (SNV_REV_2 == revisionNumber)
    90c2:	4643      	mov	r3, r8
    90c4:	2b02      	cmp	r3, #2
    90c6:	d16a      	bne.n	919e <S_Nv_EarlyInit+0x126>
        s_sectorHead = ITEMS_AREA_START_ADDRESS;
    90c8:	2280      	movs	r2, #128	; 0x80
    90ca:	0052      	lsls	r2, r2, #1
    90cc:	4ba4      	ldr	r3, [pc, #656]	; (9360 <S_Nv_EarlyInit+0x2e8>)
    90ce:	801a      	strh	r2, [r3, #0]
        D_Nv_Read(s_sector, 0, (uint8_t*) &sectorHeader, sizeof(SectorHeader_t));
    90d0:	2312      	movs	r3, #18
    90d2:	aa06      	add	r2, sp, #24
    90d4:	2100      	movs	r1, #0
    90d6:	0038      	movs	r0, r7
    90d8:	4c9f      	ldr	r4, [pc, #636]	; (9358 <S_Nv_EarlyInit+0x2e0>)
    90da:	47a0      	blx	r4
        while ( s_sectorHead < SECTOR_SIZE )
    90dc:	4da0      	ldr	r5, [pc, #640]	; (9360 <S_Nv_EarlyInit+0x2e8>)
                UpdateSectorHead(0, itemAlignment);
    90de:	4ba1      	ldr	r3, [pc, #644]	; (9364 <S_Nv_EarlyInit+0x2ec>)
    90e0:	4698      	mov	r8, r3
            D_Nv_Read(s_sector, s_sectorHead, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    90e2:	002e      	movs	r6, r5
    90e4:	e10f      	b.n	9306 <S_Nv_EarlyInit+0x28e>
        if (((sectorHeader.sequenceNumber ^ sectorHeader.sequenceParity) == 0xFFFFFFFFuL) &&
    90e6:	ab02      	add	r3, sp, #8
    90e8:	2226      	movs	r2, #38	; 0x26
    90ea:	189b      	adds	r3, r3, r2
    90ec:	781b      	ldrb	r3, [r3, #0]
    90ee:	2b41      	cmp	r3, #65	; 0x41
    90f0:	d1db      	bne.n	90aa <S_Nv_EarlyInit+0x32>
            (sectorHeader.signature[0] == (uint8_t) 'A') &&
    90f2:	ab02      	add	r3, sp, #8
    90f4:	3201      	adds	r2, #1
    90f6:	189b      	adds	r3, r3, r2
    90f8:	781b      	ldrb	r3, [r3, #0]
    90fa:	2b54      	cmp	r3, #84	; 0x54
    90fc:	d1d5      	bne.n	90aa <S_Nv_EarlyInit+0x32>
            (sectorHeader.signature[1] == (uint8_t) 'T') &&
    90fe:	ab02      	add	r3, sp, #8
    9100:	3201      	adds	r2, #1
    9102:	189b      	adds	r3, r3, r2
    9104:	781b      	ldrb	r3, [r3, #0]
    9106:	2b53      	cmp	r3, #83	; 0x53
    9108:	d1cf      	bne.n	90aa <S_Nv_EarlyInit+0x32>
            (sectorHeader.signature[2] == (uint8_t) 'S') &&
    910a:	ab02      	add	r3, sp, #8
    910c:	3201      	adds	r2, #1
    910e:	189b      	adds	r3, r3, r2
    9110:	781b      	ldrb	r3, [r3, #0]
    9112:	2b4e      	cmp	r3, #78	; 0x4e
    9114:	d1c9      	bne.n	90aa <S_Nv_EarlyInit+0x32>
            (sectorHeader.signature[3] == (uint8_t) 'N') &&
    9116:	ab02      	add	r3, sp, #8
    9118:	3201      	adds	r2, #1
    911a:	189b      	adds	r3, r3, r2
    911c:	781b      	ldrb	r3, [r3, #0]
    911e:	2b76      	cmp	r3, #118	; 0x76
    9120:	d1c3      	bne.n	90aa <S_Nv_EarlyInit+0x32>
            if ( sectorHeader.signature[5] == (uint8_t) '1')
    9122:	ab02      	add	r3, sp, #8
    9124:	3201      	adds	r2, #1
    9126:	189b      	adds	r3, r3, r2
    9128:	781b      	ldrb	r3, [r3, #0]
    912a:	2b31      	cmp	r3, #49	; 0x31
    912c:	d106      	bne.n	913c <S_Nv_EarlyInit+0xc4>
                if (pSectorHeaderSnv1->isActive == 0x0000u)
    912e:	ab02      	add	r3, sp, #8
    9130:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    9132:	2b00      	cmp	r3, #0
    9134:	d1b9      	bne.n	90aa <S_Nv_EarlyInit+0x32>
                    revisionNumber = SNV_REV_1;
    9136:	2301      	movs	r3, #1
    9138:	4698      	mov	r8, r3
    913a:	e00f      	b.n	915c <S_Nv_EarlyInit+0xe4>
            else if (sectorHeader.signature[5] == (uint8_t) '2')
    913c:	2b32      	cmp	r3, #50	; 0x32
    913e:	d1b4      	bne.n	90aa <S_Nv_EarlyInit+0x32>
    return ComputeCrc(((uint8_t*) pSectorHeader) + sizeof(pSectorHeader->headerCrc), (sizeof(SectorHeader_t)- sizeof(pSectorHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    9140:	4a89      	ldr	r2, [pc, #548]	; (9368 <S_Nv_EarlyInit+0x2f0>)
    9142:	2110      	movs	r1, #16
    9144:	2026      	movs	r0, #38	; 0x26
    9146:	ab02      	add	r3, sp, #8
    9148:	469c      	mov	ip, r3
    914a:	4460      	add	r0, ip
    914c:	4b87      	ldr	r3, [pc, #540]	; (936c <S_Nv_EarlyInit+0x2f4>)
    914e:	4798      	blx	r3
              if (headerCrc == sectorHeader.headerCrc)
    9150:	ab02      	add	r3, sp, #8
    9152:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    9154:	4283      	cmp	r3, r0
    9156:	d1a8      	bne.n	90aa <S_Nv_EarlyInit+0x32>
                  revisionNumber = SNV_REV_2;
    9158:	2302      	movs	r3, #2
    915a:	4698      	mov	r8, r3
            if ( sectorHeader.sequenceNumber < lastSectorSequence )
    915c:	454d      	cmp	r5, r9
    915e:	d2a4      	bcs.n	90aa <S_Nv_EarlyInit+0x32>
                lastSectorSequence = sectorHeader.sequenceNumber;
    9160:	46a9      	mov	r9, r5
            if ( sectorHeader.sequenceNumber < lastSectorSequence )
    9162:	0027      	movs	r7, r4
    9164:	e7a1      	b.n	90aa <S_Nv_EarlyInit+0x32>
        s_sector = FIRST_SECTOR;
    9166:	2200      	movs	r2, #0
    9168:	4b7c      	ldr	r3, [pc, #496]	; (935c <S_Nv_EarlyInit+0x2e4>)
    916a:	701a      	strb	r2, [r3, #0]
            if ( EraseSector())
    916c:	4c80      	ldr	r4, [pc, #512]	; (9370 <S_Nv_EarlyInit+0x2f8>)
                s_nextPageAddressAfterCompact = 0xFFFFu;
    916e:	4e81      	ldr	r6, [pc, #516]	; (9374 <S_Nv_EarlyInit+0x2fc>)
                if ( WriteSectorHeader(INITIAL_SECTOR_SEQUENCE_NUMBER))
    9170:	4d81      	ldr	r5, [pc, #516]	; (9378 <S_Nv_EarlyInit+0x300>)
    9172:	e006      	b.n	9182 <S_Nv_EarlyInit+0x10a>
            s_sector++;
    9174:	4a79      	ldr	r2, [pc, #484]	; (935c <S_Nv_EarlyInit+0x2e4>)
    9176:	7813      	ldrb	r3, [r2, #0]
    9178:	3301      	adds	r3, #1
    917a:	b2db      	uxtb	r3, r3
    917c:	7013      	strb	r3, [r2, #0]
            if ( s_sector >= (FIRST_SECTOR + SECTOR_COUNT) )
    917e:	2b01      	cmp	r3, #1
    9180:	d815      	bhi.n	91ae <S_Nv_EarlyInit+0x136>
            if ( EraseSector())
    9182:	47a0      	blx	r4
    9184:	2800      	cmp	r0, #0
    9186:	d0f5      	beq.n	9174 <S_Nv_EarlyInit+0xfc>
                s_nextPageAddressAfterCompact = 0xFFFFu;
    9188:	2301      	movs	r3, #1
    918a:	425b      	negs	r3, r3
    918c:	8033      	strh	r3, [r6, #0]
                if ( WriteSectorHeader(INITIAL_SECTOR_SEQUENCE_NUMBER))
    918e:	2002      	movs	r0, #2
    9190:	4240      	negs	r0, r0
    9192:	47a8      	blx	r5
    9194:	2800      	cmp	r0, #0
    9196:	d0ed      	beq.n	9174 <S_Nv_EarlyInit+0xfc>
        s_itemCount = 0u;
    9198:	2200      	movs	r2, #0
    919a:	4b6e      	ldr	r3, [pc, #440]	; (9354 <S_Nv_EarlyInit+0x2dc>)
    919c:	701a      	strb	r2, [r3, #0]

        LoadSector(revisionNumber);
    }
    s_earlyInitDone = true;
    919e:	2201      	movs	r2, #1
    91a0:	4b76      	ldr	r3, [pc, #472]	; (937c <S_Nv_EarlyInit+0x304>)
    91a2:	701a      	strb	r2, [r3, #0]
}
    91a4:	b011      	add	sp, #68	; 0x44
    91a6:	bc0c      	pop	{r2, r3}
    91a8:	4690      	mov	r8, r2
    91aa:	4699      	mov	r9, r3
    91ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
                assert(false);
    91ae:	4b74      	ldr	r3, [pc, #464]	; (9380 <S_Nv_EarlyInit+0x308>)
    91b0:	4a74      	ldr	r2, [pc, #464]	; (9384 <S_Nv_EarlyInit+0x30c>)
    91b2:	4975      	ldr	r1, [pc, #468]	; (9388 <S_Nv_EarlyInit+0x310>)
    91b4:	4875      	ldr	r0, [pc, #468]	; (938c <S_Nv_EarlyInit+0x314>)
    91b6:	4c76      	ldr	r4, [pc, #472]	; (9390 <S_Nv_EarlyInit+0x318>)
    91b8:	47a0      	blx	r4
        s_sectorHead = sizeof(SectorHeaderSnv1_t);
    91ba:	2210      	movs	r2, #16
    91bc:	4b68      	ldr	r3, [pc, #416]	; (9360 <S_Nv_EarlyInit+0x2e8>)
    91be:	801a      	strh	r2, [r3, #0]
    91c0:	2110      	movs	r1, #16
            D_Nv_Read(s_sector, s_sectorHead, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    91c2:	4e66      	ldr	r6, [pc, #408]	; (935c <S_Nv_EarlyInit+0x2e4>)
    91c4:	4d64      	ldr	r5, [pc, #400]	; (9358 <S_Nv_EarlyInit+0x2e0>)
    return ComputeCrc(((uint8_t*) pBlockHeader) + sizeof(pBlockHeader->isActive), sizeof(BlockHeaderSNv1_t) - (sizeof(pBlockHeader->isActive)  + sizeof(pBlockHeader->headerCrc)), 0xFFFF); // skip is Active and headerCrc fields
    91c6:	4f69      	ldr	r7, [pc, #420]	; (936c <S_Nv_EarlyInit+0x2f4>)
    91c8:	e072      	b.n	92b0 <S_Nv_EarlyInit+0x238>
            else if ( blockHeader.isActive != 0x0000u )
    91ca:	ab06      	add	r3, sp, #24
    91cc:	881b      	ldrh	r3, [r3, #0]
    91ce:	2b00      	cmp	r3, #0
    91d0:	d007      	beq.n	91e2 <S_Nv_EarlyInit+0x16a>
                UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), ITEM_16BYTE_ALIGNMENT);
    91d2:	ab06      	add	r3, sp, #24
    91d4:	88d8      	ldrh	r0, [r3, #6]
    91d6:	3010      	adds	r0, #16
    91d8:	b280      	uxth	r0, r0
    91da:	2101      	movs	r1, #1
    91dc:	4b61      	ldr	r3, [pc, #388]	; (9364 <S_Nv_EarlyInit+0x2ec>)
    91de:	4798      	blx	r3
    91e0:	e061      	b.n	92a6 <S_Nv_EarlyInit+0x22e>
                uint16_t id = blockHeader.id;
    91e2:	ab06      	add	r3, sp, #24
    91e4:	885c      	ldrh	r4, [r3, #2]
                Item_t *cache = FindItemCache(id);
    91e6:	0020      	movs	r0, r4
    91e8:	4b6a      	ldr	r3, [pc, #424]	; (9394 <S_Nv_EarlyInit+0x31c>)
    91ea:	4798      	blx	r3
                if (cache == NULL)
    91ec:	2800      	cmp	r0, #0
    91ee:	d010      	beq.n	9212 <S_Nv_EarlyInit+0x19a>
                cache->lastBlock = s_sectorHead;
    91f0:	4b5b      	ldr	r3, [pc, #364]	; (9360 <S_Nv_EarlyInit+0x2e8>)
    91f2:	781a      	ldrb	r2, [r3, #0]
    91f4:	7082      	strb	r2, [r0, #2]
    91f6:	785b      	ldrb	r3, [r3, #1]
    91f8:	70c3      	strb	r3, [r0, #3]
                if ( blockHeader.itemLength == 0u )
    91fa:	ab06      	add	r3, sp, #24
    91fc:	891b      	ldrh	r3, [r3, #8]
    91fe:	2b00      	cmp	r3, #0
    9200:	d00b      	beq.n	921a <S_Nv_EarlyInit+0x1a2>
                UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), ITEM_16BYTE_ALIGNMENT);
    9202:	ab06      	add	r3, sp, #24
    9204:	88d8      	ldrh	r0, [r3, #6]
    9206:	3010      	adds	r0, #16
    9208:	b280      	uxth	r0, r0
    920a:	2101      	movs	r1, #1
    920c:	4b55      	ldr	r3, [pc, #340]	; (9364 <S_Nv_EarlyInit+0x2ec>)
    920e:	4798      	blx	r3
    9210:	e049      	b.n	92a6 <S_Nv_EarlyInit+0x22e>
                    cache = CreateItemCache(id);
    9212:	0020      	movs	r0, r4
    9214:	4b60      	ldr	r3, [pc, #384]	; (9398 <S_Nv_EarlyInit+0x320>)
    9216:	4798      	blx	r3
    9218:	e7ea      	b.n	91f0 <S_Nv_EarlyInit+0x178>
                    DeleteItemCache(id);
    921a:	0020      	movs	r0, r4
    921c:	4b5f      	ldr	r3, [pc, #380]	; (939c <S_Nv_EarlyInit+0x324>)
    921e:	4798      	blx	r3
    9220:	e7ef      	b.n	9202 <S_Nv_EarlyInit+0x18a>
                uint16_t crc = ComputeDataCrc(s_sector, s_sectorHead, &blockHeader);
    9222:	4b4f      	ldr	r3, [pc, #316]	; (9360 <S_Nv_EarlyInit+0x2e8>)
    9224:	8819      	ldrh	r1, [r3, #0]
    9226:	4b4d      	ldr	r3, [pc, #308]	; (935c <S_Nv_EarlyInit+0x2e4>)
    9228:	7818      	ldrb	r0, [r3, #0]
    922a:	aa02      	add	r2, sp, #8
    922c:	4b5c      	ldr	r3, [pc, #368]	; (93a0 <S_Nv_EarlyInit+0x328>)
    922e:	4798      	blx	r3
                if (crc != blockHeader.dataCrc)
    9230:	ab02      	add	r3, sp, #8
    9232:	881b      	ldrh	r3, [r3, #0]
    9234:	4283      	cmp	r3, r0
    9236:	d007      	beq.n	9248 <S_Nv_EarlyInit+0x1d0>
                    UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), itemAlignment);
    9238:	ab02      	add	r3, sp, #8
    923a:	88d8      	ldrh	r0, [r3, #6]
    923c:	3010      	adds	r0, #16
    923e:	b280      	uxth	r0, r0
    9240:	0021      	movs	r1, r4
    9242:	4b48      	ldr	r3, [pc, #288]	; (9364 <S_Nv_EarlyInit+0x2ec>)
    9244:	4798      	blx	r3
    9246:	e05e      	b.n	9306 <S_Nv_EarlyInit+0x28e>
                    uint16_t id = blockHeader.id;
    9248:	ab02      	add	r3, sp, #8
    924a:	885f      	ldrh	r7, [r3, #2]
                    Item_t *cache = FindItemCache(id);
    924c:	0038      	movs	r0, r7
    924e:	4b51      	ldr	r3, [pc, #324]	; (9394 <S_Nv_EarlyInit+0x31c>)
    9250:	4798      	blx	r3
                    if (cache == NULL)
    9252:	2800      	cmp	r0, #0
    9254:	d010      	beq.n	9278 <S_Nv_EarlyInit+0x200>
                    cache->lastBlock = s_sectorHead;
    9256:	4b42      	ldr	r3, [pc, #264]	; (9360 <S_Nv_EarlyInit+0x2e8>)
    9258:	781a      	ldrb	r2, [r3, #0]
    925a:	7082      	strb	r2, [r0, #2]
    925c:	785b      	ldrb	r3, [r3, #1]
    925e:	70c3      	strb	r3, [r0, #3]
                    if ( blockHeader.itemLength == 0u )
    9260:	ab02      	add	r3, sp, #8
    9262:	891b      	ldrh	r3, [r3, #8]
    9264:	2b00      	cmp	r3, #0
    9266:	d00b      	beq.n	9280 <S_Nv_EarlyInit+0x208>
                    UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), itemAlignment);
    9268:	ab02      	add	r3, sp, #8
    926a:	88d8      	ldrh	r0, [r3, #6]
    926c:	3010      	adds	r0, #16
    926e:	b280      	uxth	r0, r0
    9270:	0021      	movs	r1, r4
    9272:	4b3c      	ldr	r3, [pc, #240]	; (9364 <S_Nv_EarlyInit+0x2ec>)
    9274:	4798      	blx	r3
    9276:	e046      	b.n	9306 <S_Nv_EarlyInit+0x28e>
                        cache = CreateItemCache(id);
    9278:	0038      	movs	r0, r7
    927a:	4b47      	ldr	r3, [pc, #284]	; (9398 <S_Nv_EarlyInit+0x320>)
    927c:	4798      	blx	r3
    927e:	e7ea      	b.n	9256 <S_Nv_EarlyInit+0x1de>
                        DeleteItemCache(id);
    9280:	0038      	movs	r0, r7
    9282:	4b46      	ldr	r3, [pc, #280]	; (939c <S_Nv_EarlyInit+0x324>)
    9284:	4798      	blx	r3
    9286:	e7ef      	b.n	9268 <S_Nv_EarlyInit+0x1f0>
            else if ( blockHeader.headerCrc != ComputeHeaderCrcSnv1(&blockHeader) )
    9288:	ab06      	add	r3, sp, #24
    928a:	89dc      	ldrh	r4, [r3, #14]
    return ComputeCrc(((uint8_t*) pBlockHeader) + sizeof(pBlockHeader->isActive), sizeof(BlockHeaderSNv1_t) - (sizeof(pBlockHeader->isActive)  + sizeof(pBlockHeader->headerCrc)), 0xFFFF); // skip is Active and headerCrc fields
    928c:	4a36      	ldr	r2, [pc, #216]	; (9368 <S_Nv_EarlyInit+0x2f0>)
    928e:	210c      	movs	r1, #12
    9290:	2012      	movs	r0, #18
    9292:	ab02      	add	r3, sp, #8
    9294:	469c      	mov	ip, r3
    9296:	4460      	add	r0, ip
    9298:	47b8      	blx	r7
            else if ( blockHeader.headerCrc != ComputeHeaderCrcSnv1(&blockHeader) )
    929a:	4284      	cmp	r4, r0
    929c:	d095      	beq.n	91ca <S_Nv_EarlyInit+0x152>
                UpdateSectorHead(BLOCK_HEADER_SIZE, ITEM_16BYTE_ALIGNMENT);
    929e:	2101      	movs	r1, #1
    92a0:	2010      	movs	r0, #16
    92a2:	4b30      	ldr	r3, [pc, #192]	; (9364 <S_Nv_EarlyInit+0x2ec>)
    92a4:	4798      	blx	r3
        while ( s_sectorHead < SECTOR_SIZE )
    92a6:	4b2e      	ldr	r3, [pc, #184]	; (9360 <S_Nv_EarlyInit+0x2e8>)
    92a8:	8819      	ldrh	r1, [r3, #0]
    92aa:	4b3e      	ldr	r3, [pc, #248]	; (93a4 <S_Nv_EarlyInit+0x32c>)
    92ac:	4299      	cmp	r1, r3
    92ae:	d812      	bhi.n	92d6 <S_Nv_EarlyInit+0x25e>
            D_Nv_Read(s_sector, s_sectorHead, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    92b0:	ac06      	add	r4, sp, #24
    92b2:	7830      	ldrb	r0, [r6, #0]
    92b4:	2310      	movs	r3, #16
    92b6:	0022      	movs	r2, r4
    92b8:	47a8      	blx	r5
        if ( pData[i] != 0xFFu )
    92ba:	7823      	ldrb	r3, [r4, #0]
    92bc:	2bff      	cmp	r3, #255	; 0xff
    92be:	d1e3      	bne.n	9288 <S_Nv_EarlyInit+0x210>
    92c0:	ab06      	add	r3, sp, #24
    92c2:	211f      	movs	r1, #31
    92c4:	aa02      	add	r2, sp, #8
    92c6:	4694      	mov	ip, r2
    92c8:	4461      	add	r1, ip
    92ca:	785a      	ldrb	r2, [r3, #1]
    92cc:	2aff      	cmp	r2, #255	; 0xff
    92ce:	d1db      	bne.n	9288 <S_Nv_EarlyInit+0x210>
    92d0:	3301      	adds	r3, #1
    for ( uint16_t i = 0u; i < length; i++ )
    92d2:	428b      	cmp	r3, r1
    92d4:	d1f9      	bne.n	92ca <S_Nv_EarlyInit+0x252>
        if ( !CompactSector() )
    92d6:	4b34      	ldr	r3, [pc, #208]	; (93a8 <S_Nv_EarlyInit+0x330>)
    92d8:	4798      	blx	r3
    92da:	2800      	cmp	r0, #0
    92dc:	d000      	beq.n	92e0 <S_Nv_EarlyInit+0x268>
    92de:	e75e      	b.n	919e <S_Nv_EarlyInit+0x126>
            assert(false);
    92e0:	4b27      	ldr	r3, [pc, #156]	; (9380 <S_Nv_EarlyInit+0x308>)
    92e2:	4a32      	ldr	r2, [pc, #200]	; (93ac <S_Nv_EarlyInit+0x334>)
    92e4:	4932      	ldr	r1, [pc, #200]	; (93b0 <S_Nv_EarlyInit+0x338>)
    92e6:	4829      	ldr	r0, [pc, #164]	; (938c <S_Nv_EarlyInit+0x314>)
    92e8:	4c29      	ldr	r4, [pc, #164]	; (9390 <S_Nv_EarlyInit+0x318>)
    92ea:	47a0      	blx	r4
            else if ( blockHeader.headerCrc != ComputeHeaderCrc(&blockHeader) )
    92ec:	ab02      	add	r3, sp, #8
    92ee:	89df      	ldrh	r7, [r3, #14]
    return ComputeCrc(((uint8_t*) pBlockHeader), (sizeof(BlockHeader_t) - sizeof(pBlockHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    92f0:	4a1d      	ldr	r2, [pc, #116]	; (9368 <S_Nv_EarlyInit+0x2f0>)
    92f2:	210e      	movs	r1, #14
    92f4:	0018      	movs	r0, r3
    92f6:	4b1d      	ldr	r3, [pc, #116]	; (936c <S_Nv_EarlyInit+0x2f4>)
    92f8:	4798      	blx	r3
            else if ( blockHeader.headerCrc != ComputeHeaderCrc(&blockHeader) )
    92fa:	4287      	cmp	r7, r0
    92fc:	d091      	beq.n	9222 <S_Nv_EarlyInit+0x1aa>
                UpdateSectorHead(BLOCK_HEADER_SIZE, itemAlignment);
    92fe:	0021      	movs	r1, r4
    9300:	2010      	movs	r0, #16
    9302:	4b18      	ldr	r3, [pc, #96]	; (9364 <S_Nv_EarlyInit+0x2ec>)
    9304:	4798      	blx	r3
        while ( s_sectorHead < SECTOR_SIZE )
    9306:	882b      	ldrh	r3, [r5, #0]
    9308:	4a26      	ldr	r2, [pc, #152]	; (93a4 <S_Nv_EarlyInit+0x32c>)
    930a:	4293      	cmp	r3, r2
    930c:	d900      	bls.n	9310 <S_Nv_EarlyInit+0x298>
    930e:	e746      	b.n	919e <S_Nv_EarlyInit+0x126>
            if ((sectorHeader.nextPageAddressAfterCompact != 0xFFFFu)  && (s_sectorHead < sectorHeader.nextPageAddressAfterCompact))
    9310:	aa06      	add	r2, sp, #24
    9312:	8a12      	ldrh	r2, [r2, #16]
    9314:	4914      	ldr	r1, [pc, #80]	; (9368 <S_Nv_EarlyInit+0x2f0>)
    9316:	428a      	cmp	r2, r1
    9318:	d002      	beq.n	9320 <S_Nv_EarlyInit+0x2a8>
                itemAlignment = ITEM_NO_ALIGNMENT;
    931a:	2400      	movs	r4, #0
            if ((sectorHeader.nextPageAddressAfterCompact != 0xFFFFu)  && (s_sectorHead < sectorHeader.nextPageAddressAfterCompact))
    931c:	429a      	cmp	r2, r3
    931e:	d803      	bhi.n	9328 <S_Nv_EarlyInit+0x2b0>
                UpdateSectorHead(0, itemAlignment);
    9320:	2102      	movs	r1, #2
    9322:	2000      	movs	r0, #0
    9324:	47c0      	blx	r8
                itemAlignment = ITEM_64BYTE_ALIGNMENT;
    9326:	2402      	movs	r4, #2
            D_Nv_Read(s_sector, s_sectorHead, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    9328:	8831      	ldrh	r1, [r6, #0]
    932a:	4b0c      	ldr	r3, [pc, #48]	; (935c <S_Nv_EarlyInit+0x2e4>)
    932c:	7818      	ldrb	r0, [r3, #0]
    932e:	2310      	movs	r3, #16
    9330:	aa02      	add	r2, sp, #8
    9332:	4f09      	ldr	r7, [pc, #36]	; (9358 <S_Nv_EarlyInit+0x2e0>)
    9334:	47b8      	blx	r7
        if ( pData[i] != 0xFFu )
    9336:	ab02      	add	r3, sp, #8
    9338:	781b      	ldrb	r3, [r3, #0]
    933a:	2bff      	cmp	r3, #255	; 0xff
    933c:	d1d6      	bne.n	92ec <S_Nv_EarlyInit+0x274>
    933e:	ab02      	add	r3, sp, #8
    9340:	210f      	movs	r1, #15
    9342:	469c      	mov	ip, r3
    9344:	4461      	add	r1, ip
    9346:	785a      	ldrb	r2, [r3, #1]
    9348:	2aff      	cmp	r2, #255	; 0xff
    934a:	d1cf      	bne.n	92ec <S_Nv_EarlyInit+0x274>
    934c:	3301      	adds	r3, #1
    for ( uint16_t i = 0u; i < length; i++ )
    934e:	428b      	cmp	r3, r1
    9350:	d1f9      	bne.n	9346 <S_Nv_EarlyInit+0x2ce>
    9352:	e724      	b.n	919e <S_Nv_EarlyInit+0x126>
    9354:	20000478 	.word	0x20000478
    9358:	000082b5 	.word	0x000082b5
    935c:	20000480 	.word	0x20000480
    9360:	20000482 	.word	0x20000482
    9364:	00008521 	.word	0x00008521
    9368:	0000ffff 	.word	0x0000ffff
    936c:	0000855d 	.word	0x0000855d
    9370:	00008861 	.word	0x00008861
    9374:	2000047a 	.word	0x2000047a
    9378:	000088c9 	.word	0x000088c9
    937c:	20000450 	.word	0x20000450
    9380:	00019bdc 	.word	0x00019bdc
    9384:	00019d98 	.word	0x00019d98
    9388:	0000052b 	.word	0x0000052b
    938c:	00019c58 	.word	0x00019c58
    9390:	000177a9 	.word	0x000177a9
    9394:	000086fd 	.word	0x000086fd
    9398:	0000878d 	.word	0x0000878d
    939c:	000087ed 	.word	0x000087ed
    93a0:	00008655 	.word	0x00008655
    93a4:	00001fff 	.word	0x00001fff
    93a8:	000089c9 	.word	0x000089c9
    93ac:	00019d58 	.word	0x00019d58
    93b0:	00000336 	.word	0x00000336

000093b4 <S_Nv_Init>:


void S_Nv_Init(void)
{
    93b4:	b510      	push	{r4, lr}
    if (!s_earlyInitDone)
    93b6:	4b08      	ldr	r3, [pc, #32]	; (93d8 <S_Nv_Init+0x24>)
    93b8:	781b      	ldrb	r3, [r3, #0]
    93ba:	2b00      	cmp	r3, #0
    93bc:	d008      	beq.n	93d0 <S_Nv_Init+0x1c>
    {
        S_Nv_EarlyInit();
    }

    eraseSectorTimer.handler = eraseSectorTimerFired;
    93be:	4b07      	ldr	r3, [pc, #28]	; (93dc <S_Nv_Init+0x28>)
    93c0:	4a07      	ldr	r2, [pc, #28]	; (93e0 <S_Nv_Init+0x2c>)
    93c2:	611a      	str	r2, [r3, #16]
    eraseSectorTimer.timeout = ERASE_SECTOR_DELAY_MS;
    93c4:	4a07      	ldr	r2, [pc, #28]	; (93e4 <S_Nv_Init+0x30>)
    93c6:	605a      	str	r2, [r3, #4]
    eraseSectorTimer.interval = ERASE_SECTOR_DELAY_MS;
    93c8:	609a      	str	r2, [r3, #8]
    eraseSectorTimer.mode = SYS_TIMER_INTERVAL_MODE;
    93ca:	2200      	movs	r2, #0
    93cc:	731a      	strb	r2, [r3, #12]
}
    93ce:	bd10      	pop	{r4, pc}
        S_Nv_EarlyInit();
    93d0:	4b05      	ldr	r3, [pc, #20]	; (93e8 <S_Nv_Init+0x34>)
    93d2:	4798      	blx	r3
    93d4:	e7f3      	b.n	93be <S_Nv_Init+0xa>
    93d6:	46c0      	nop			; (mov r8, r8)
    93d8:	20000450 	.word	0x20000450
    93dc:	20000438 	.word	0x20000438
    93e0:	0000883d 	.word	0x0000883d
    93e4:	00001b58 	.word	0x00001b58
    93e8:	00009079 	.word	0x00009079

000093ec <S_Nv_Write_Impl>:
#if defined(S_XNV_LOGGING)
static S_Nv_ReturnValue_t S_Nv_Write_Original(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#else
S_Nv_ReturnValue_t S_Nv_Write_Impl(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#endif
{
    93ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    93ee:	46ce      	mov	lr, r9
    93f0:	4647      	mov	r7, r8
    93f2:	b580      	push	{r7, lr}
    93f4:	b087      	sub	sp, #28
    93f6:	0004      	movs	r4, r0
    93f8:	9101      	str	r1, [sp, #4]
    93fa:	0015      	movs	r5, r2
    93fc:	001f      	movs	r7, r3
    assert((id != 0u) && (pData != NULL));
    93fe:	2800      	cmp	r0, #0
    9400:	d00c      	beq.n	941c <S_Nv_Write_Impl+0x30>
    9402:	2b00      	cmp	r3, #0
    9404:	d00a      	beq.n	941c <S_Nv_Write_Impl+0x30>

    if ( PowerSupplyTooLow() )
    9406:	4b35      	ldr	r3, [pc, #212]	; (94dc <S_Nv_Write_Impl+0xf0>)
    9408:	4798      	blx	r3
    {
        return S_Nv_ReturnValue_PowerSupplyTooLow;
    940a:	2305      	movs	r3, #5
    if ( PowerSupplyTooLow() )
    940c:	2800      	cmp	r0, #0
    940e:	d00b      	beq.n	9428 <S_Nv_Write_Impl+0x3c>
        //SYS_StartTimer(&compactItemTimer);
        }
    }

    return S_Nv_ReturnValue_Ok;
}
    9410:	0018      	movs	r0, r3
    9412:	b007      	add	sp, #28
    9414:	bc0c      	pop	{r2, r3}
    9416:	4690      	mov	r8, r2
    9418:	4699      	mov	r9, r3
    941a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert((id != 0u) && (pData != NULL));
    941c:	4b30      	ldr	r3, [pc, #192]	; (94e0 <S_Nv_Write_Impl+0xf4>)
    941e:	4a31      	ldr	r2, [pc, #196]	; (94e4 <S_Nv_Write_Impl+0xf8>)
    9420:	4931      	ldr	r1, [pc, #196]	; (94e8 <S_Nv_Write_Impl+0xfc>)
    9422:	4832      	ldr	r0, [pc, #200]	; (94ec <S_Nv_Write_Impl+0x100>)
    9424:	4c32      	ldr	r4, [pc, #200]	; (94f0 <S_Nv_Write_Impl+0x104>)
    9426:	47a0      	blx	r4
    CompactSectorIfNeeded(BLOCK_HEADER_SIZE + dataLength);
    9428:	0028      	movs	r0, r5
    942a:	3010      	adds	r0, #16
    942c:	b280      	uxth	r0, r0
    942e:	4b31      	ldr	r3, [pc, #196]	; (94f4 <S_Nv_Write_Impl+0x108>)
    9430:	4798      	blx	r3
    Item_t *cache = FindItemCache(id);
    9432:	0020      	movs	r0, r4
    9434:	4b30      	ldr	r3, [pc, #192]	; (94f8 <S_Nv_Write_Impl+0x10c>)
    9436:	4798      	blx	r3
    9438:	0006      	movs	r6, r0
        return S_Nv_ReturnValue_DoesNotExist;
    943a:	2303      	movs	r3, #3
    if ( cache == NULL )
    943c:	2800      	cmp	r0, #0
    943e:	d0e7      	beq.n	9410 <S_Nv_Write_Impl+0x24>
    uint16_t blockPointer = cache->lastBlock;
    9440:	7883      	ldrb	r3, [r0, #2]
    9442:	78c4      	ldrb	r4, [r0, #3]
    9444:	0224      	lsls	r4, r4, #8
    9446:	431c      	orrs	r4, r3
    9448:	46a0      	mov	r8, r4
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    944a:	4b2c      	ldr	r3, [pc, #176]	; (94fc <S_Nv_Write_Impl+0x110>)
    944c:	7818      	ldrb	r0, [r3, #0]
    944e:	2310      	movs	r3, #16
    9450:	aa02      	add	r2, sp, #8
    9452:	0021      	movs	r1, r4
    9454:	4c2a      	ldr	r4, [pc, #168]	; (9500 <S_Nv_Write_Impl+0x114>)
    9456:	47a0      	blx	r4
    if ( ((uint32_t) offset + (uint32_t) dataLength) > (uint32_t) blockHeader.itemLength )
    9458:	ab02      	add	r3, sp, #8
    945a:	8919      	ldrh	r1, [r3, #8]
    945c:	9b01      	ldr	r3, [sp, #4]
    945e:	195a      	adds	r2, r3, r5
        return S_Nv_ReturnValue_BeyondEnd;
    9460:	2304      	movs	r3, #4
    if ( ((uint32_t) offset + (uint32_t) dataLength) > (uint32_t) blockHeader.itemLength )
    9462:	428a      	cmp	r2, r1
    9464:	d8d4      	bhi.n	9410 <S_Nv_Write_Impl+0x24>
    blockHeader.blockOffset = offset;
    9466:	ab02      	add	r3, sp, #8
    9468:	466a      	mov	r2, sp
    946a:	8892      	ldrh	r2, [r2, #4]
    946c:	809a      	strh	r2, [r3, #4]
    blockHeader.blockLength = dataLength;
    946e:	80dd      	strh	r5, [r3, #6]
    blockHeader.previousBlock = blockPointer;
    9470:	4642      	mov	r2, r8
    9472:	815a      	strh	r2, [r3, #10]
    if ( blockHeader.blockLength == blockHeader.itemLength )
    9474:	428d      	cmp	r5, r1
    9476:	d02c      	beq.n	94d2 <S_Nv_Write_Impl+0xe6>
        blockHeader.writeCount++;
    9478:	ab02      	add	r3, sp, #8
    947a:	899b      	ldrh	r3, [r3, #12]
    947c:	3301      	adds	r3, #1
    947e:	aa02      	add	r2, sp, #8
    9480:	8193      	strh	r3, [r2, #12]
    uint16_t newBlockPointer = s_sectorHead;
    9482:	4b20      	ldr	r3, [pc, #128]	; (9504 <S_Nv_Write_Impl+0x118>)
    9484:	881c      	ldrh	r4, [r3, #0]
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pData) )
    9486:	0039      	movs	r1, r7
    9488:	a802      	add	r0, sp, #8
    948a:	4b1f      	ldr	r3, [pc, #124]	; (9508 <S_Nv_Write_Impl+0x11c>)
    948c:	4798      	blx	r3
        return S_Nv_ReturnValue_Failure;
    948e:	2301      	movs	r3, #1
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pData) )
    9490:	2800      	cmp	r0, #0
    9492:	d0bd      	beq.n	9410 <S_Nv_Write_Impl+0x24>
    cache->lastBlock = newBlockPointer;
    9494:	70b4      	strb	r4, [r6, #2]
    9496:	0a24      	lsrs	r4, r4, #8
    9498:	70f4      	strb	r4, [r6, #3]
    if ( blockHeader.writeCount > COMPACT_ITEM_THRESHOLD )
    949a:	ab02      	add	r3, sp, #8
    949c:	899a      	ldrh	r2, [r3, #12]
    return S_Nv_ReturnValue_Ok;
    949e:	2300      	movs	r3, #0
    if ( blockHeader.writeCount > COMPACT_ITEM_THRESHOLD )
    94a0:	2a64      	cmp	r2, #100	; 0x64
    94a2:	d9b5      	bls.n	9410 <S_Nv_Write_Impl+0x24>
        s_compactItemId = blockHeader.id;
    94a4:	ab02      	add	r3, sp, #8
    94a6:	885a      	ldrh	r2, [r3, #2]
    94a8:	4b18      	ldr	r3, [pc, #96]	; (950c <S_Nv_Write_Impl+0x120>)
    94aa:	801a      	strh	r2, [r3, #0]
        s_compactItemLength = 0u;           // no need to resize this item here
    94ac:	2200      	movs	r2, #0
    94ae:	4b18      	ldr	r3, [pc, #96]	; (9510 <S_Nv_Write_Impl+0x124>)
    94b0:	801a      	strh	r2, [r3, #0]
        if (!SYS_TimerStarted(&compactItemTimer))
    94b2:	4818      	ldr	r0, [pc, #96]	; (9514 <S_Nv_Write_Impl+0x128>)
    94b4:	4b18      	ldr	r3, [pc, #96]	; (9518 <S_Nv_Write_Impl+0x12c>)
    94b6:	4798      	blx	r3
    return S_Nv_ReturnValue_Ok;
    94b8:	2300      	movs	r3, #0
        if (!SYS_TimerStarted(&compactItemTimer))
    94ba:	2800      	cmp	r0, #0
    94bc:	d1a8      	bne.n	9410 <S_Nv_Write_Impl+0x24>
        compactItemTimer.handler = compactItemTimerFired;
    94be:	4b15      	ldr	r3, [pc, #84]	; (9514 <S_Nv_Write_Impl+0x128>)
    94c0:	4a16      	ldr	r2, [pc, #88]	; (951c <S_Nv_Write_Impl+0x130>)
    94c2:	611a      	str	r2, [r3, #16]
        compactItemTimer.timeout = COMPACT_ITEM_DELAY_MS;
    94c4:	4a16      	ldr	r2, [pc, #88]	; (9520 <S_Nv_Write_Impl+0x134>)
    94c6:	605a      	str	r2, [r3, #4]
        compactItemTimer.interval = COMPACT_ITEM_DELAY_MS;
    94c8:	609a      	str	r2, [r3, #8]
        compactItemTimer.mode = SYS_TIMER_INTERVAL_MODE;
    94ca:	2200      	movs	r2, #0
    94cc:	731a      	strb	r2, [r3, #12]
    return S_Nv_ReturnValue_Ok;
    94ce:	2300      	movs	r3, #0
    94d0:	e79e      	b.n	9410 <S_Nv_Write_Impl+0x24>
        blockHeader.writeCount = 0u;
    94d2:	2300      	movs	r3, #0
    94d4:	aa02      	add	r2, sp, #8
    94d6:	8193      	strh	r3, [r2, #12]
    94d8:	e7d3      	b.n	9482 <S_Nv_Write_Impl+0x96>
    94da:	46c0      	nop			; (mov r8, r8)
    94dc:	00008505 	.word	0x00008505
    94e0:	00019cf0 	.word	0x00019cf0
    94e4:	00019dbc 	.word	0x00019dbc
    94e8:	00000596 	.word	0x00000596
    94ec:	00019c58 	.word	0x00019c58
    94f0:	000177a9 	.word	0x000177a9
    94f4:	00008c79 	.word	0x00008c79
    94f8:	000086fd 	.word	0x000086fd
    94fc:	20000480 	.word	0x20000480
    9500:	000082b5 	.word	0x000082b5
    9504:	20000482 	.word	0x20000482
    9508:	00008f2d 	.word	0x00008f2d
    950c:	2000044c 	.word	0x2000044c
    9510:	2000044e 	.word	0x2000044e
    9514:	2000030c 	.word	0x2000030c
    9518:	0000d3a9 	.word	0x0000d3a9
    951c:	00008f21 	.word	0x00008f21
    9520:	00000bb8 	.word	0x00000bb8

00009524 <S_Nv_Read_Impl>:
#if defined(S_XNV_LOGGING)
static S_Nv_ReturnValue_t S_Nv_Read_Original(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#else
S_Nv_ReturnValue_t S_Nv_Read_Impl(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#endif
{
    9524:	b5f0      	push	{r4, r5, r6, r7, lr}
    9526:	b083      	sub	sp, #12
    9528:	000c      	movs	r4, r1
    952a:	0015      	movs	r5, r2
    952c:	001e      	movs	r6, r3
    assert((id != 0u) && (pData != NULL));
    952e:	2800      	cmp	r0, #0
    9530:	d009      	beq.n	9546 <S_Nv_Read_Impl+0x22>
    9532:	2b00      	cmp	r3, #0
    9534:	d007      	beq.n	9546 <S_Nv_Read_Impl+0x22>

    // get the pointer to the last written block for the item
    uint16_t lastBlockPointer = FindItem(id);
    9536:	4b10      	ldr	r3, [pc, #64]	; (9578 <S_Nv_Read_Impl+0x54>)
    9538:	4798      	blx	r3
    if ( lastBlockPointer == 0x0000u )
    {
        // item does not exist
        return S_Nv_ReturnValue_DoesNotExist;
    953a:	2303      	movs	r3, #3
    if ( lastBlockPointer == 0x0000u )
    953c:	2800      	cmp	r0, #0
    953e:	d108      	bne.n	9552 <S_Nv_Read_Impl+0x2e>
    {
        return S_Nv_ReturnValue_BeyondEnd;
    }

    return S_Nv_ReturnValue_Ok;
}
    9540:	0018      	movs	r0, r3
    9542:	b003      	add	sp, #12
    9544:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert((id != 0u) && (pData != NULL));
    9546:	4b0d      	ldr	r3, [pc, #52]	; (957c <S_Nv_Read_Impl+0x58>)
    9548:	4a0d      	ldr	r2, [pc, #52]	; (9580 <S_Nv_Read_Impl+0x5c>)
    954a:	490e      	ldr	r1, [pc, #56]	; (9584 <S_Nv_Read_Impl+0x60>)
    954c:	480e      	ldr	r0, [pc, #56]	; (9588 <S_Nv_Read_Impl+0x64>)
    954e:	4c0f      	ldr	r4, [pc, #60]	; (958c <S_Nv_Read_Impl+0x68>)
    9550:	47a0      	blx	r4
    if ( ((uint32_t) offset + (uint32_t) dataLength) >= 0x10000uL )
    9552:	1962      	adds	r2, r4, r5
    9554:	490e      	ldr	r1, [pc, #56]	; (9590 <S_Nv_Read_Impl+0x6c>)
        return S_Nv_ReturnValue_BeyondEnd;
    9556:	3301      	adds	r3, #1
    if ( ((uint32_t) offset + (uint32_t) dataLength) >= 0x10000uL )
    9558:	428a      	cmp	r2, r1
    955a:	d8f1      	bhi.n	9540 <S_Nv_Read_Impl+0x1c>
    if ( !GatherData(s_sector, lastBlockPointer, offset, dataLength, pData ))
    955c:	4b0d      	ldr	r3, [pc, #52]	; (9594 <S_Nv_Read_Impl+0x70>)
    955e:	781f      	ldrb	r7, [r3, #0]
    9560:	9600      	str	r6, [sp, #0]
    9562:	002b      	movs	r3, r5
    9564:	0022      	movs	r2, r4
    9566:	0001      	movs	r1, r0
    9568:	0038      	movs	r0, r7
    956a:	4c0b      	ldr	r4, [pc, #44]	; (9598 <S_Nv_Read_Impl+0x74>)
    956c:	47a0      	blx	r4
    return S_Nv_ReturnValue_Ok;
    956e:	4243      	negs	r3, r0
    9570:	4143      	adcs	r3, r0
    9572:	009b      	lsls	r3, r3, #2
    9574:	e7e4      	b.n	9540 <S_Nv_Read_Impl+0x1c>
    9576:	46c0      	nop			; (mov r8, r8)
    9578:	00008771 	.word	0x00008771
    957c:	00019cf0 	.word	0x00019cf0
    9580:	00019dcc 	.word	0x00019dcc
    9584:	000005ee 	.word	0x000005ee
    9588:	00019c58 	.word	0x00019c58
    958c:	000177a9 	.word	0x000177a9
    9590:	0000ffff 	.word	0x0000ffff
    9594:	20000480 	.word	0x20000480
    9598:	0000859d 	.word	0x0000859d

0000959c <S_Nv_ItemLength_Impl>:

/** Interface function, see \ref S_Nv_ItemLength. */
uint16_t S_Nv_ItemLength_Impl(S_Nv_ItemId_t id)
{
    959c:	b510      	push	{r4, lr}
    959e:	b084      	sub	sp, #16
    assert(id != 0u);
    95a0:	2800      	cmp	r0, #0
    95a2:	d005      	beq.n	95b0 <S_Nv_ItemLength_Impl+0x14>

    uint16_t blockPointer = FindItem(id);
    95a4:	4b0a      	ldr	r3, [pc, #40]	; (95d0 <S_Nv_ItemLength_Impl+0x34>)
    95a6:	4798      	blx	r3
    95a8:	1e01      	subs	r1, r0, #0
    if ( blockPointer == 0x0000u )
    95aa:	d107      	bne.n	95bc <S_Nv_ItemLength_Impl+0x20>

    // read last written item block header
    BlockHeader_t blockHeader;
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    return blockHeader.itemLength;
}
    95ac:	b004      	add	sp, #16
    95ae:	bd10      	pop	{r4, pc}
    assert(id != 0u);
    95b0:	4b08      	ldr	r3, [pc, #32]	; (95d4 <S_Nv_ItemLength_Impl+0x38>)
    95b2:	4a09      	ldr	r2, [pc, #36]	; (95d8 <S_Nv_ItemLength_Impl+0x3c>)
    95b4:	4909      	ldr	r1, [pc, #36]	; (95dc <S_Nv_ItemLength_Impl+0x40>)
    95b6:	480a      	ldr	r0, [pc, #40]	; (95e0 <S_Nv_ItemLength_Impl+0x44>)
    95b8:	4c0a      	ldr	r4, [pc, #40]	; (95e4 <S_Nv_ItemLength_Impl+0x48>)
    95ba:	47a0      	blx	r4
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    95bc:	4b0a      	ldr	r3, [pc, #40]	; (95e8 <S_Nv_ItemLength_Impl+0x4c>)
    95be:	7818      	ldrb	r0, [r3, #0]
    95c0:	2310      	movs	r3, #16
    95c2:	466a      	mov	r2, sp
    95c4:	4c09      	ldr	r4, [pc, #36]	; (95ec <S_Nv_ItemLength_Impl+0x50>)
    95c6:	47a0      	blx	r4
    return blockHeader.itemLength;
    95c8:	466b      	mov	r3, sp
    95ca:	8918      	ldrh	r0, [r3, #8]
    95cc:	e7ee      	b.n	95ac <S_Nv_ItemLength_Impl+0x10>
    95ce:	46c0      	nop			; (mov r8, r8)
    95d0:	00008771 	.word	0x00008771
    95d4:	00019ce4 	.word	0x00019ce4
    95d8:	00019ddc 	.word	0x00019ddc
    95dc:	0000060b 	.word	0x0000060b
    95e0:	00019c58 	.word	0x00019c58
    95e4:	000177a9 	.word	0x000177a9
    95e8:	20000480 	.word	0x20000480
    95ec:	000082b5 	.word	0x000082b5

000095f0 <S_Nv_ItemInit_Impl>:
{
    95f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    95f2:	b085      	sub	sp, #20
    95f4:	0004      	movs	r4, r0
    95f6:	000e      	movs	r6, r1
    95f8:	0015      	movs	r5, r2
    assert((id != 0u) && (id < 0xF000u) && (itemLength <= MAX_ITEM_LENGTH));
    95fa:	1e43      	subs	r3, r0, #1
    95fc:	b29b      	uxth	r3, r3
    95fe:	4a2e      	ldr	r2, [pc, #184]	; (96b8 <S_Nv_ItemInit_Impl+0xc8>)
    9600:	4293      	cmp	r3, r2
    9602:	d81e      	bhi.n	9642 <S_Nv_ItemInit_Impl+0x52>
    9604:	2380      	movs	r3, #128	; 0x80
    9606:	011b      	lsls	r3, r3, #4
    9608:	4299      	cmp	r1, r3
    960a:	d81a      	bhi.n	9642 <S_Nv_ItemInit_Impl+0x52>
    if ( FindItem(id) != 0x0000u )
    960c:	4b2b      	ldr	r3, [pc, #172]	; (96bc <S_Nv_ItemInit_Impl+0xcc>)
    960e:	4798      	blx	r3
    9610:	2800      	cmp	r0, #0
    9612:	d01d      	beq.n	9650 <S_Nv_ItemInit_Impl+0x60>
        uint16_t oldItemLength = S_Nv_ItemLength(id);
    9614:	0020      	movs	r0, r4
    9616:	4b2a      	ldr	r3, [pc, #168]	; (96c0 <S_Nv_ItemInit_Impl+0xd0>)
    9618:	4798      	blx	r3
        if ( oldItemLength != itemLength )
    961a:	4286      	cmp	r6, r0
    961c:	d007      	beq.n	962e <S_Nv_ItemInit_Impl+0x3e>
            s_compactItemId = id;
    961e:	4b29      	ldr	r3, [pc, #164]	; (96c4 <S_Nv_ItemInit_Impl+0xd4>)
    9620:	801c      	strh	r4, [r3, #0]
            s_compactItemLength = itemLength;
    9622:	4b29      	ldr	r3, [pc, #164]	; (96c8 <S_Nv_ItemInit_Impl+0xd8>)
    9624:	801e      	strh	r6, [r3, #0]
            S_Nv_ReturnValue_t resizeResult = CompactItem();
    9626:	4b29      	ldr	r3, [pc, #164]	; (96cc <S_Nv_ItemInit_Impl+0xdc>)
    9628:	4798      	blx	r3
    962a:	1e03      	subs	r3, r0, #0
            if ( resizeResult != S_Nv_ReturnValue_Ok )
    962c:	d115      	bne.n	965a <S_Nv_ItemInit_Impl+0x6a>
        if (pDefaultData != NULL)
    962e:	2d00      	cmp	r5, #0
    9630:	d040      	beq.n	96b4 <S_Nv_ItemInit_Impl+0xc4>
            return S_Nv_Read(id, 0u, itemLength, pDefaultData);
    9632:	002b      	movs	r3, r5
    9634:	0032      	movs	r2, r6
    9636:	2100      	movs	r1, #0
    9638:	0020      	movs	r0, r4
    963a:	4c25      	ldr	r4, [pc, #148]	; (96d0 <S_Nv_ItemInit_Impl+0xe0>)
    963c:	47a0      	blx	r4
    963e:	0003      	movs	r3, r0
    9640:	e00b      	b.n	965a <S_Nv_ItemInit_Impl+0x6a>
    assert((id != 0u) && (id < 0xF000u) && (itemLength <= MAX_ITEM_LENGTH));
    9642:	4b24      	ldr	r3, [pc, #144]	; (96d4 <S_Nv_ItemInit_Impl+0xe4>)
    9644:	4a24      	ldr	r2, [pc, #144]	; (96d8 <S_Nv_ItemInit_Impl+0xe8>)
    9646:	21aa      	movs	r1, #170	; 0xaa
    9648:	00c9      	lsls	r1, r1, #3
    964a:	4824      	ldr	r0, [pc, #144]	; (96dc <S_Nv_ItemInit_Impl+0xec>)
    964c:	4c24      	ldr	r4, [pc, #144]	; (96e0 <S_Nv_ItemInit_Impl+0xf0>)
    964e:	47a0      	blx	r4
    if ( PowerSupplyTooLow() )
    9650:	4b24      	ldr	r3, [pc, #144]	; (96e4 <S_Nv_ItemInit_Impl+0xf4>)
    9652:	4798      	blx	r3
        return S_Nv_ReturnValue_PowerSupplyTooLow;
    9654:	2305      	movs	r3, #5
    if ( PowerSupplyTooLow() )
    9656:	2800      	cmp	r0, #0
    9658:	d002      	beq.n	9660 <S_Nv_ItemInit_Impl+0x70>
}
    965a:	0018      	movs	r0, r3
    965c:	b005      	add	sp, #20
    965e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    CompactSectorIfNeeded(BLOCK_HEADER_SIZE + itemLength);
    9660:	0030      	movs	r0, r6
    9662:	3010      	adds	r0, #16
    9664:	b280      	uxth	r0, r0
    9666:	4b20      	ldr	r3, [pc, #128]	; (96e8 <S_Nv_ItemInit_Impl+0xf8>)
    9668:	4798      	blx	r3
    assert(s_itemCount < MAX_ITEM_COUNT);
    966a:	4b20      	ldr	r3, [pc, #128]	; (96ec <S_Nv_ItemInit_Impl+0xfc>)
    966c:	781b      	ldrb	r3, [r3, #0]
    966e:	2b08      	cmp	r3, #8
    9670:	d819      	bhi.n	96a6 <S_Nv_ItemInit_Impl+0xb6>
    uint16_t newItemPointer = s_sectorHead;
    9672:	4b1f      	ldr	r3, [pc, #124]	; (96f0 <S_Nv_ItemInit_Impl+0x100>)
    9674:	881f      	ldrh	r7, [r3, #0]
    blockHeader.id = newItemId;
    9676:	466b      	mov	r3, sp
    9678:	805c      	strh	r4, [r3, #2]
    blockHeader.blockOffset = 0x0000u;
    967a:	2300      	movs	r3, #0
    967c:	466a      	mov	r2, sp
    967e:	8093      	strh	r3, [r2, #4]
    blockHeader.blockLength = itemLength;
    9680:	80d6      	strh	r6, [r2, #6]
    blockHeader.itemLength = itemLength;
    9682:	8116      	strh	r6, [r2, #8]
    blockHeader.previousBlock = 0x0000u;
    9684:	8153      	strh	r3, [r2, #10]
    blockHeader.writeCount = 0u;
    9686:	8193      	strh	r3, [r2, #12]
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pDefaultData) )
    9688:	0029      	movs	r1, r5
    968a:	4668      	mov	r0, sp
    968c:	4b19      	ldr	r3, [pc, #100]	; (96f4 <S_Nv_ItemInit_Impl+0x104>)
    968e:	4798      	blx	r3
        return S_Nv_ReturnValue_Failure;
    9690:	2301      	movs	r3, #1
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pDefaultData) )
    9692:	2800      	cmp	r0, #0
    9694:	d0e1      	beq.n	965a <S_Nv_ItemInit_Impl+0x6a>
    Item_t *newItemCache = CreateItemCache(newItemId);
    9696:	0020      	movs	r0, r4
    9698:	4b17      	ldr	r3, [pc, #92]	; (96f8 <S_Nv_ItemInit_Impl+0x108>)
    969a:	4798      	blx	r3
    newItemCache->lastBlock = newItemPointer;
    969c:	7087      	strb	r7, [r0, #2]
    969e:	0a3f      	lsrs	r7, r7, #8
    96a0:	70c7      	strb	r7, [r0, #3]
    return S_Nv_ReturnValue_DidNotExist;
    96a2:	2302      	movs	r3, #2
    96a4:	e7d9      	b.n	965a <S_Nv_ItemInit_Impl+0x6a>
    assert(s_itemCount < MAX_ITEM_COUNT);
    96a6:	4b15      	ldr	r3, [pc, #84]	; (96fc <S_Nv_ItemInit_Impl+0x10c>)
    96a8:	4a0b      	ldr	r2, [pc, #44]	; (96d8 <S_Nv_ItemInit_Impl+0xe8>)
    96aa:	21af      	movs	r1, #175	; 0xaf
    96ac:	00c9      	lsls	r1, r1, #3
    96ae:	480b      	ldr	r0, [pc, #44]	; (96dc <S_Nv_ItemInit_Impl+0xec>)
    96b0:	4c0b      	ldr	r4, [pc, #44]	; (96e0 <S_Nv_ItemInit_Impl+0xf0>)
    96b2:	47a0      	blx	r4
            return S_Nv_ReturnValue_Ok;
    96b4:	2300      	movs	r3, #0
    96b6:	e7d0      	b.n	965a <S_Nv_ItemInit_Impl+0x6a>
    96b8:	0000effe 	.word	0x0000effe
    96bc:	00008771 	.word	0x00008771
    96c0:	0000959d 	.word	0x0000959d
    96c4:	2000044c 	.word	0x2000044c
    96c8:	2000044e 	.word	0x2000044e
    96cc:	00008cf5 	.word	0x00008cf5
    96d0:	00009525 	.word	0x00009525
    96d4:	00019ca4 	.word	0x00019ca4
    96d8:	00019da8 	.word	0x00019da8
    96dc:	00019c58 	.word	0x00019c58
    96e0:	000177a9 	.word	0x000177a9
    96e4:	00008505 	.word	0x00008505
    96e8:	00008c79 	.word	0x00008c79
    96ec:	20000478 	.word	0x20000478
    96f0:	20000482 	.word	0x20000482
    96f4:	00008f2d 	.word	0x00008f2d
    96f8:	0000878d 	.word	0x0000878d
    96fc:	00019c00 	.word	0x00019c00

00009700 <S_Nv_IsItemAvailable_Impl>:
/** Interface function, see \ref S_Nv_IsItemAvailable.
 *
 * Important: This will check whether the item is found in the storage area
 */
bool S_Nv_IsItemAvailable_Impl(S_Nv_ItemId_t id)
{
    9700:	b510      	push	{r4, lr}
  return ( FindItem(id) != 0x0000u );
    9702:	4b03      	ldr	r3, [pc, #12]	; (9710 <S_Nv_IsItemAvailable_Impl+0x10>)
    9704:	4798      	blx	r3
    9706:	1e43      	subs	r3, r0, #1
    9708:	4198      	sbcs	r0, r3
    970a:	b2c0      	uxtb	r0, r0
}
    970c:	bd10      	pop	{r4, pc}
    970e:	46c0      	nop			; (mov r8, r8)
    9710:	00008771 	.word	0x00008771

00009714 <pdsInitItemMask>:
\param[in] itemMask - itemMask to be initialized

\return true itemMask is initialized, false otherwise
******************************************************************************/
static bool pdsInitItemMask(S_Nv_ItemId_t memoryId, uint8_t *itemMask)
{
    9714:	b5f0      	push	{r4, r5, r6, r7, lr}
    9716:	46d6      	mov	lr, sl
    9718:	4647      	mov	r7, r8
    971a:	b580      	push	{r7, lr}
    971c:	b087      	sub	sp, #28
    971e:	000f      	movs	r7, r1
  if (PDS_ALL_EXISTENT_MEMORY == memoryId)
    9720:	4b24      	ldr	r3, [pc, #144]	; (97b4 <pdsInitItemMask+0xa0>)
    9722:	4298      	cmp	r0, r3
    9724:	d012      	beq.n	974c <pdsInitItemMask+0x38>
  {
    memset(itemMask, 0xFFU, PDS_ITEM_MASK_SIZE);
    itemMask[0] &= 0xFEU;
  }
  else if (PDS_DIRECTORY_MASK & memoryId)
    9726:	0443      	lsls	r3, r0, #17
    9728:	d41c      	bmi.n	9764 <pdsInitItemMask+0x50>
    else
      return false;
  }
  else
  {
    itemMask[memoryId / 8] |= 1 << (memoryId % 8);
    972a:	08c3      	lsrs	r3, r0, #3
    972c:	18cf      	adds	r7, r1, r3
    972e:	2307      	movs	r3, #7
    9730:	4018      	ands	r0, r3
    9732:	3b06      	subs	r3, #6
    9734:	4083      	lsls	r3, r0
    9736:	783a      	ldrb	r2, [r7, #0]
    9738:	4313      	orrs	r3, r2
    973a:	703b      	strb	r3, [r7, #0]
  }

  return true;
    973c:	2301      	movs	r3, #1
    973e:	9301      	str	r3, [sp, #4]
}
    9740:	9801      	ldr	r0, [sp, #4]
    9742:	b007      	add	sp, #28
    9744:	bc0c      	pop	{r2, r3}
    9746:	4690      	mov	r8, r2
    9748:	469a      	mov	sl, r3
    974a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memset(itemMask, 0xFFU, PDS_ITEM_MASK_SIZE);
    974c:	2202      	movs	r2, #2
    974e:	21ff      	movs	r1, #255	; 0xff
    9750:	0038      	movs	r0, r7
    9752:	4b19      	ldr	r3, [pc, #100]	; (97b8 <pdsInitItemMask+0xa4>)
    9754:	4798      	blx	r3
    itemMask[0] &= 0xFEU;
    9756:	783b      	ldrb	r3, [r7, #0]
    9758:	2201      	movs	r2, #1
    975a:	4393      	bics	r3, r2
    975c:	703b      	strb	r3, [r7, #0]
  return true;
    975e:	2301      	movs	r3, #1
    9760:	9301      	str	r3, [sp, #4]
    9762:	e7ed      	b.n	9740 <pdsInitItemMask+0x2c>
    if (pdsGetDirDescr(memoryId, &dirDescr))
    9764:	a904      	add	r1, sp, #16
    9766:	4b15      	ldr	r3, [pc, #84]	; (97bc <pdsInitItemMask+0xa8>)
    9768:	4798      	blx	r3
    976a:	9001      	str	r0, [sp, #4]
    976c:	2800      	cmp	r0, #0
    976e:	d0e7      	beq.n	9740 <pdsInitItemMask+0x2c>
      for (uint8_t index=0U; index < dirDescr.filesCount; index++)
    9770:	ab04      	add	r3, sp, #16
    9772:	889b      	ldrh	r3, [r3, #4]
    9774:	4698      	mov	r8, r3
    9776:	2b00      	cmp	r3, #0
    9778:	d0e2      	beq.n	9740 <pdsInitItemMask+0x2c>
    977a:	2400      	movs	r4, #0
        memcpy(&memId, (void const FLASH_PTR*)(dirDescr.list + index), sizeof(uint16_t));
    977c:	ab02      	add	r3, sp, #8
    977e:	1d9d      	adds	r5, r3, #6
    9780:	4b0f      	ldr	r3, [pc, #60]	; (97c0 <pdsInitItemMask+0xac>)
    9782:	469a      	mov	sl, r3
        itemMask[memId / 8U] |= 1U << (memId % 8U);
    9784:	2607      	movs	r6, #7
        memcpy(&memId, (void const FLASH_PTR*)(dirDescr.list + index), sizeof(uint16_t));
    9786:	0061      	lsls	r1, r4, #1
    9788:	9b04      	ldr	r3, [sp, #16]
    978a:	469c      	mov	ip, r3
    978c:	4461      	add	r1, ip
    978e:	2202      	movs	r2, #2
    9790:	0028      	movs	r0, r5
    9792:	47d0      	blx	sl
        itemMask[memId / 8U] |= 1U << (memId % 8U);
    9794:	8829      	ldrh	r1, [r5, #0]
    9796:	08ca      	lsrs	r2, r1, #3
    9798:	18ba      	adds	r2, r7, r2
    979a:	4031      	ands	r1, r6
    979c:	2301      	movs	r3, #1
    979e:	408b      	lsls	r3, r1
    97a0:	7811      	ldrb	r1, [r2, #0]
    97a2:	430b      	orrs	r3, r1
    97a4:	7013      	strb	r3, [r2, #0]
      for (uint8_t index=0U; index < dirDescr.filesCount; index++)
    97a6:	3401      	adds	r4, #1
    97a8:	b2e4      	uxtb	r4, r4
    97aa:	b2a3      	uxth	r3, r4
    97ac:	4543      	cmp	r3, r8
    97ae:	d3ea      	bcc.n	9786 <pdsInitItemMask+0x72>
    97b0:	e7c6      	b.n	9740 <pdsInitItemMask+0x2c>
    97b2:	46c0      	nop			; (mov r8, r8)
    97b4:	00004002 	.word	0x00004002
    97b8:	0001787d 	.word	0x0001787d
    97bc:	00009b61 	.word	0x00009b61
    97c0:	0001786b 	.word	0x0001786b

000097c4 <PDS_Restore>:
{
    97c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    97c6:	b089      	sub	sp, #36	; 0x24
  uint8_t itemsToRestore[PDS_ITEM_MASK_SIZE] = {0U};
    97c8:	a907      	add	r1, sp, #28
    97ca:	2300      	movs	r3, #0
    97cc:	800b      	strh	r3, [r1, #0]
  if (!pdsInitItemMask(memoryId, itemsToRestore))
    97ce:	4b2b      	ldr	r3, [pc, #172]	; (987c <PDS_Restore+0xb8>)
    97d0:	4798      	blx	r3
    97d2:	9001      	str	r0, [sp, #4]
    97d4:	2600      	movs	r6, #0
    97d6:	2800      	cmp	r0, #0
    97d8:	d148      	bne.n	986c <PDS_Restore+0xa8>
    97da:	e041      	b.n	9860 <PDS_Restore+0x9c>
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    97dc:	4b28      	ldr	r3, [pc, #160]	; (9880 <PDS_Restore+0xbc>)
    97de:	4a29      	ldr	r2, [pc, #164]	; (9884 <PDS_Restore+0xc0>)
    97e0:	2156      	movs	r1, #86	; 0x56
    97e2:	31ff      	adds	r1, #255	; 0xff
    97e4:	4828      	ldr	r0, [pc, #160]	; (9888 <PDS_Restore+0xc4>)
    97e6:	4c29      	ldr	r4, [pc, #164]	; (988c <PDS_Restore+0xc8>)
    97e8:	47a0      	blx	r4
      assert((S_Nv_ReturnValue_DidNotExist == ret) || (S_Nv_ReturnValue_Ok == ret));
    97ea:	4b29      	ldr	r3, [pc, #164]	; (9890 <PDS_Restore+0xcc>)
    97ec:	4a25      	ldr	r2, [pc, #148]	; (9884 <PDS_Restore+0xc0>)
    97ee:	21b3      	movs	r1, #179	; 0xb3
    97f0:	0049      	lsls	r1, r1, #1
    97f2:	4825      	ldr	r0, [pc, #148]	; (9888 <PDS_Restore+0xc4>)
    97f4:	4c25      	ldr	r4, [pc, #148]	; (988c <PDS_Restore+0xc8>)
    97f6:	47a0      	blx	r4
    97f8:	3701      	adds	r7, #1
    97fa:	3501      	adds	r5, #1
    97fc:	b2ad      	uxth	r5, r5
    for (j = 0U; j < 8U; j++)
    97fe:	2f08      	cmp	r7, #8
    9800:	d031      	beq.n	9866 <PDS_Restore+0xa2>
      if (itemsToRestore[i] & (1U << j))
    9802:	ab07      	add	r3, sp, #28
    9804:	5cf3      	ldrb	r3, [r6, r3]
    9806:	40fb      	lsrs	r3, r7
    9808:	07db      	lsls	r3, r3, #31
    980a:	d5f5      	bpl.n	97f8 <PDS_Restore+0x34>
  if (pdsGetItemDescr(id, &itemDescr))
    980c:	a903      	add	r1, sp, #12
    980e:	0028      	movs	r0, r5
    9810:	4b20      	ldr	r3, [pc, #128]	; (9894 <PDS_Restore+0xd0>)
    9812:	4798      	blx	r3
    9814:	2800      	cmp	r0, #0
    9816:	d021      	beq.n	985c <PDS_Restore+0x98>
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    9818:	ab03      	add	r3, sp, #12
    981a:	885b      	ldrh	r3, [r3, #2]
    981c:	2b00      	cmp	r3, #0
    981e:	d0dd      	beq.n	97dc <PDS_Restore+0x18>
    9820:	9b04      	ldr	r3, [sp, #16]
    9822:	2b00      	cmp	r3, #0
    9824:	d0da      	beq.n	97dc <PDS_Restore+0x18>
    if (itemDescr.filler)
    9826:	9b05      	ldr	r3, [sp, #20]
    9828:	2b00      	cmp	r3, #0
    982a:	d000      	beq.n	982e <PDS_Restore+0x6a>
      itemDescr.filler();
    982c:	4798      	blx	r3
      oldSize = S_Nv_ItemLength(id);
    982e:	0028      	movs	r0, r5
    9830:	4b19      	ldr	r3, [pc, #100]	; (9898 <PDS_Restore+0xd4>)
    9832:	4798      	blx	r3
    9834:	0004      	movs	r4, r0
      S_Nv_ReturnValue_t ret = S_Nv_ItemInit(id, itemDescr.itemSize, itemDescr.itemData);
    9836:	ab03      	add	r3, sp, #12
    9838:	9a04      	ldr	r2, [sp, #16]
    983a:	8859      	ldrh	r1, [r3, #2]
    983c:	0028      	movs	r0, r5
    983e:	4b17      	ldr	r3, [pc, #92]	; (989c <PDS_Restore+0xd8>)
    9840:	4798      	blx	r3
      assert((S_Nv_ReturnValue_DidNotExist == ret) || (S_Nv_ReturnValue_Ok == ret));
    9842:	2802      	cmp	r0, #2
    9844:	d016      	beq.n	9874 <PDS_Restore+0xb0>
    9846:	2800      	cmp	r0, #0
    9848:	d1cf      	bne.n	97ea <PDS_Restore+0x26>
        if (!pdsUpdateMemory(id, itemDescr.itemData, itemDescr.itemSize, oldSize))
    984a:	ab03      	add	r3, sp, #12
    984c:	885a      	ldrh	r2, [r3, #2]
    984e:	9904      	ldr	r1, [sp, #16]
    9850:	0023      	movs	r3, r4
    9852:	0028      	movs	r0, r5
    9854:	4c12      	ldr	r4, [pc, #72]	; (98a0 <PDS_Restore+0xdc>)
    9856:	47a0      	blx	r4
    9858:	2800      	cmp	r0, #0
    985a:	d1cd      	bne.n	97f8 <PDS_Restore+0x34>
          return false;
    985c:	2300      	movs	r3, #0
    985e:	9301      	str	r3, [sp, #4]
}
    9860:	9801      	ldr	r0, [sp, #4]
    9862:	b009      	add	sp, #36	; 0x24
    9864:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9866:	3601      	adds	r6, #1
  for (i = 0U; i < PDS_ITEM_MASK_SIZE; i++)
    9868:	2e02      	cmp	r6, #2
    986a:	d0f9      	beq.n	9860 <PDS_Restore+0x9c>
    986c:	00f5      	lsls	r5, r6, #3
    986e:	b2ad      	uxth	r5, r5
{
    9870:	2700      	movs	r7, #0
    9872:	e7c6      	b.n	9802 <PDS_Restore+0x3e>
          return false;
    9874:	2300      	movs	r3, #0
    9876:	9301      	str	r3, [sp, #4]
    9878:	e7f2      	b.n	9860 <PDS_Restore+0x9c>
    987a:	46c0      	nop			; (mov r8, r8)
    987c:	00009715 	.word	0x00009715
    9880:	00019df4 	.word	0x00019df4
    9884:	00019ef0 	.word	0x00019ef0
    9888:	00019e30 	.word	0x00019e30
    988c:	000177a9 	.word	0x000177a9
    9890:	00019e80 	.word	0x00019e80
    9894:	00009ac1 	.word	0x00009ac1
    9898:	0000959d 	.word	0x0000959d
    989c:	000095f1 	.word	0x000095f1
    98a0:	00009b21 	.word	0x00009b21

000098a4 <PDS_Store>:
{
    98a4:	b510      	push	{r4, lr}
  if (!pdsInitItemMask(memoryId, itemsToStore))
    98a6:	4905      	ldr	r1, [pc, #20]	; (98bc <PDS_Store+0x18>)
    98a8:	4b05      	ldr	r3, [pc, #20]	; (98c0 <PDS_Store+0x1c>)
    98aa:	4798      	blx	r3
    98ac:	1e04      	subs	r4, r0, #0
    98ae:	d101      	bne.n	98b4 <PDS_Store+0x10>
}
    98b0:	0020      	movs	r0, r4
    98b2:	bd10      	pop	{r4, pc}
  pdsPostTask(PDS_STORE_ITEM_TASK_ID);
    98b4:	2000      	movs	r0, #0
    98b6:	4b03      	ldr	r3, [pc, #12]	; (98c4 <PDS_Store+0x20>)
    98b8:	4798      	blx	r3
  return true;
    98ba:	e7f9      	b.n	98b0 <PDS_Store+0xc>
    98bc:	20000488 	.word	0x20000488
    98c0:	00009715 	.word	0x00009715
    98c4:	00009a6d 	.word	0x00009a6d

000098c8 <pdsStoreItemTaskHandler>:
{
    98c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    98ca:	46de      	mov	lr, fp
    98cc:	4657      	mov	r7, sl
    98ce:	464e      	mov	r6, r9
    98d0:	4645      	mov	r5, r8
    98d2:	b5e0      	push	{r5, r6, r7, lr}
    98d4:	b089      	sub	sp, #36	; 0x24
  for (i = 0U, byte_index = i_found + 1; i < PDS_ITEM_MASK_SIZE; i++, byte_index++)
    98d6:	4b51      	ldr	r3, [pc, #324]	; (9a1c <pdsStoreItemTaskHandler+0x154>)
    98d8:	7818      	ldrb	r0, [r3, #0]
    98da:	3001      	adds	r0, #1
    98dc:	b2c0      	uxtb	r0, r0
    for (j = 0U, bit_index = j_found + 1; j < 8U; j++, bit_index++) {
    98de:	4b50      	ldr	r3, [pc, #320]	; (9a20 <pdsStoreItemTaskHandler+0x158>)
    98e0:	781b      	ldrb	r3, [r3, #0]
    98e2:	3301      	adds	r3, #1
      bit_index %= 8;
    98e4:	2207      	movs	r2, #7
    98e6:	4013      	ands	r3, r2
    98e8:	4698      	mov	r8, r3
    98ea:	2301      	movs	r3, #1
    98ec:	4642      	mov	r2, r8
    98ee:	4093      	lsls	r3, r2
    98f0:	469a      	mov	sl, r3
    for (j = 0U, bit_index = j_found + 1; j < 8U; j++, bit_index++) {
    98f2:	2302      	movs	r3, #2
    98f4:	469c      	mov	ip, r3
    byte_index %= PDS_ITEM_MASK_SIZE;
    98f6:	2401      	movs	r4, #1
      if (itemsToStore[byte_index] & (1U << bit_index))
    98f8:	4b4a      	ldr	r3, [pc, #296]	; (9a24 <pdsStoreItemTaskHandler+0x15c>)
    98fa:	469b      	mov	fp, r3
    98fc:	4643      	mov	r3, r8
    98fe:	3301      	adds	r3, #1
    9900:	9302      	str	r3, [sp, #8]
    9902:	2507      	movs	r5, #7
    9904:	4667      	mov	r7, ip
    9906:	e035      	b.n	9974 <pdsStoreItemTaskHandler+0xac>
    9908:	464f      	mov	r7, r9
        itemsToStore[byte_index] &= ~(1U << bit_index);
    990a:	2201      	movs	r2, #1
    990c:	9901      	ldr	r1, [sp, #4]
    990e:	408a      	lsls	r2, r1
    9910:	4397      	bics	r7, r2
    9912:	4944      	ldr	r1, [pc, #272]	; (9a24 <pdsStoreItemTaskHandler+0x15c>)
    9914:	9c03      	ldr	r4, [sp, #12]
    9916:	550f      	strb	r7, [r1, r4]
        i_found = byte_index;
    9918:	4a40      	ldr	r2, [pc, #256]	; (9a1c <pdsStoreItemTaskHandler+0x154>)
    991a:	7010      	strb	r0, [r2, #0]
        j_found = bit_index;
    991c:	4a40      	ldr	r2, [pc, #256]	; (9a20 <pdsStoreItemTaskHandler+0x158>)
    991e:	7013      	strb	r3, [r2, #0]
  if (!S_Nv_IsItemAvailable(((S_Nv_ItemId_t)byte_index << 3U) + bit_index))
    9920:	00c0      	lsls	r0, r0, #3
    9922:	18c4      	adds	r4, r0, r3
    9924:	0020      	movs	r0, r4
    9926:	4b40      	ldr	r3, [pc, #256]	; (9a28 <pdsStoreItemTaskHandler+0x160>)
    9928:	4798      	blx	r3
    992a:	2800      	cmp	r0, #0
    992c:	d13a      	bne.n	99a4 <pdsStoreItemTaskHandler+0xdc>
    if(pdsGetItemDescr(((S_Nv_ItemId_t)byte_index << 3U) + bit_index, &itemDescr))
    992e:	a904      	add	r1, sp, #16
    9930:	0020      	movs	r0, r4
    9932:	4b3e      	ldr	r3, [pc, #248]	; (9a2c <pdsStoreItemTaskHandler+0x164>)
    9934:	4798      	blx	r3
    9936:	2800      	cmp	r0, #0
    9938:	d04e      	beq.n	99d8 <pdsStoreItemTaskHandler+0x110>
      if (itemDescr.filler)
    993a:	9b06      	ldr	r3, [sp, #24]
    993c:	2b00      	cmp	r3, #0
    993e:	d000      	beq.n	9942 <pdsStoreItemTaskHandler+0x7a>
        itemDescr.filler();
    9940:	4798      	blx	r3
      ret = S_Nv_ItemInit(((S_Nv_ItemId_t)byte_index << 3U) + bit_index, itemDescr.itemSize, itemDescr.itemData);
    9942:	9a05      	ldr	r2, [sp, #20]
    9944:	ab04      	add	r3, sp, #16
    9946:	8859      	ldrh	r1, [r3, #2]
    9948:	0020      	movs	r0, r4
    994a:	4b39      	ldr	r3, [pc, #228]	; (9a30 <pdsStoreItemTaskHandler+0x168>)
    994c:	4798      	blx	r3
      assert((S_Nv_ReturnValue_DidNotExist == ret) || (S_Nv_ReturnValue_Ok == ret));
    994e:	23fd      	movs	r3, #253	; 0xfd
    9950:	4218      	tst	r0, r3
    9952:	d041      	beq.n	99d8 <pdsStoreItemTaskHandler+0x110>
    9954:	4b37      	ldr	r3, [pc, #220]	; (9a34 <pdsStoreItemTaskHandler+0x16c>)
    9956:	4a38      	ldr	r2, [pc, #224]	; (9a38 <pdsStoreItemTaskHandler+0x170>)
    9958:	21ea      	movs	r1, #234	; 0xea
    995a:	4838      	ldr	r0, [pc, #224]	; (9a3c <pdsStoreItemTaskHandler+0x174>)
    995c:	4c38      	ldr	r4, [pc, #224]	; (9a40 <pdsStoreItemTaskHandler+0x178>)
    995e:	47a0      	blx	r4
    9960:	464f      	mov	r7, r9
      if (itemsToStore[byte_index] & (1U << bit_index))
    9962:	4643      	mov	r3, r8
    9964:	9301      	str	r3, [sp, #4]
    9966:	e7d0      	b.n	990a <pdsStoreItemTaskHandler+0x42>
  for (i = 0U, byte_index = i_found + 1; i < PDS_ITEM_MASK_SIZE; i++, byte_index++)
    9968:	3001      	adds	r0, #1
    996a:	b2c0      	uxtb	r0, r0
    996c:	3f01      	subs	r7, #1
    996e:	b2ff      	uxtb	r7, r7
    9970:	2f00      	cmp	r7, #0
    9972:	d0d5      	beq.n	9920 <pdsStoreItemTaskHandler+0x58>
    byte_index %= PDS_ITEM_MASK_SIZE;
    9974:	4020      	ands	r0, r4
      if (itemsToStore[byte_index] & (1U << bit_index))
    9976:	9003      	str	r0, [sp, #12]
    9978:	465b      	mov	r3, fp
    997a:	5c1b      	ldrb	r3, [r3, r0]
    997c:	4699      	mov	r9, r3
    997e:	001e      	movs	r6, r3
    9980:	4653      	mov	r3, sl
    9982:	4233      	tst	r3, r6
    9984:	d1ec      	bne.n	9960 <pdsStoreItemTaskHandler+0x98>
    9986:	9b02      	ldr	r3, [sp, #8]
    9988:	002a      	movs	r2, r5
      bit_index %= 8;
    998a:	402b      	ands	r3, r5
      if (itemsToStore[byte_index] & (1U << bit_index))
    998c:	9301      	str	r3, [sp, #4]
    998e:	0031      	movs	r1, r6
    9990:	40d9      	lsrs	r1, r3
    9992:	420c      	tst	r4, r1
    9994:	d1b8      	bne.n	9908 <pdsStoreItemTaskHandler+0x40>
    for (j = 0U, bit_index = j_found + 1; j < 8U; j++, bit_index++) {
    9996:	3301      	adds	r3, #1
    9998:	b2db      	uxtb	r3, r3
    999a:	3a01      	subs	r2, #1
    999c:	b2d2      	uxtb	r2, r2
    999e:	2a00      	cmp	r2, #0
    99a0:	d1f3      	bne.n	998a <pdsStoreItemTaskHandler+0xc2>
    99a2:	e7e1      	b.n	9968 <pdsStoreItemTaskHandler+0xa0>
  if (pdsGetItemDescr(id, &itemDescr))
    99a4:	a904      	add	r1, sp, #16
    99a6:	0020      	movs	r0, r4
    99a8:	4b20      	ldr	r3, [pc, #128]	; (9a2c <pdsStoreItemTaskHandler+0x164>)
    99aa:	4798      	blx	r3
    99ac:	2800      	cmp	r0, #0
    99ae:	d013      	beq.n	99d8 <pdsStoreItemTaskHandler+0x110>
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    99b0:	ab04      	add	r3, sp, #16
    99b2:	885b      	ldrh	r3, [r3, #2]
    99b4:	2b00      	cmp	r3, #0
    99b6:	d01e      	beq.n	99f6 <pdsStoreItemTaskHandler+0x12e>
    99b8:	9b05      	ldr	r3, [sp, #20]
    99ba:	2b00      	cmp	r3, #0
    99bc:	d01b      	beq.n	99f6 <pdsStoreItemTaskHandler+0x12e>
    if (itemDescr.filler)
    99be:	9b06      	ldr	r3, [sp, #24]
    99c0:	2b00      	cmp	r3, #0
    99c2:	d000      	beq.n	99c6 <pdsStoreItemTaskHandler+0xfe>
      itemDescr.filler();
    99c4:	4798      	blx	r3
      ret = S_Nv_Write(id, 0U, itemDescr.itemSize, itemDescr.itemData);
    99c6:	9b05      	ldr	r3, [sp, #20]
    99c8:	aa04      	add	r2, sp, #16
    99ca:	8852      	ldrh	r2, [r2, #2]
    99cc:	2100      	movs	r1, #0
    99ce:	0020      	movs	r0, r4
    99d0:	4c1c      	ldr	r4, [pc, #112]	; (9a44 <pdsStoreItemTaskHandler+0x17c>)
    99d2:	47a0      	blx	r4
      assert(ret == S_Nv_ReturnValue_Ok);
    99d4:	2800      	cmp	r0, #0
    99d6:	d115      	bne.n	9a04 <pdsStoreItemTaskHandler+0x13c>
    if (itemsToStore[i])
    99d8:	4b12      	ldr	r3, [pc, #72]	; (9a24 <pdsStoreItemTaskHandler+0x15c>)
    99da:	781b      	ldrb	r3, [r3, #0]
    99dc:	2b00      	cmp	r3, #0
    99de:	d118      	bne.n	9a12 <pdsStoreItemTaskHandler+0x14a>
    99e0:	4b10      	ldr	r3, [pc, #64]	; (9a24 <pdsStoreItemTaskHandler+0x15c>)
    99e2:	785b      	ldrb	r3, [r3, #1]
    99e4:	2b00      	cmp	r3, #0
    99e6:	d114      	bne.n	9a12 <pdsStoreItemTaskHandler+0x14a>
}
    99e8:	b009      	add	sp, #36	; 0x24
    99ea:	bc3c      	pop	{r2, r3, r4, r5}
    99ec:	4690      	mov	r8, r2
    99ee:	4699      	mov	r9, r3
    99f0:	46a2      	mov	sl, r4
    99f2:	46ab      	mov	fp, r5
    99f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    99f6:	4b14      	ldr	r3, [pc, #80]	; (9a48 <pdsStoreItemTaskHandler+0x180>)
    99f8:	4a14      	ldr	r2, [pc, #80]	; (9a4c <pdsStoreItemTaskHandler+0x184>)
    99fa:	2134      	movs	r1, #52	; 0x34
    99fc:	31ff      	adds	r1, #255	; 0xff
    99fe:	480f      	ldr	r0, [pc, #60]	; (9a3c <pdsStoreItemTaskHandler+0x174>)
    9a00:	4c0f      	ldr	r4, [pc, #60]	; (9a40 <pdsStoreItemTaskHandler+0x178>)
    9a02:	47a0      	blx	r4
      assert(ret == S_Nv_ReturnValue_Ok);
    9a04:	4b12      	ldr	r3, [pc, #72]	; (9a50 <pdsStoreItemTaskHandler+0x188>)
    9a06:	4a11      	ldr	r2, [pc, #68]	; (9a4c <pdsStoreItemTaskHandler+0x184>)
    9a08:	2142      	movs	r1, #66	; 0x42
    9a0a:	31ff      	adds	r1, #255	; 0xff
    9a0c:	480b      	ldr	r0, [pc, #44]	; (9a3c <pdsStoreItemTaskHandler+0x174>)
    9a0e:	4c0c      	ldr	r4, [pc, #48]	; (9a40 <pdsStoreItemTaskHandler+0x178>)
    9a10:	47a0      	blx	r4
      pdsPostTask(PDS_STORE_ITEM_TASK_ID);
    9a12:	2000      	movs	r0, #0
    9a14:	4b0f      	ldr	r3, [pc, #60]	; (9a54 <pdsStoreItemTaskHandler+0x18c>)
    9a16:	4798      	blx	r3
}
    9a18:	e7e6      	b.n	99e8 <pdsStoreItemTaskHandler+0x120>
    9a1a:	46c0      	nop			; (mov r8, r8)
    9a1c:	20000484 	.word	0x20000484
    9a20:	2000048a 	.word	0x2000048a
    9a24:	20000488 	.word	0x20000488
    9a28:	00009701 	.word	0x00009701
    9a2c:	00009ac1 	.word	0x00009ac1
    9a30:	000095f1 	.word	0x000095f1
    9a34:	00019e80 	.word	0x00019e80
    9a38:	00019ec8 	.word	0x00019ec8
    9a3c:	00019e30 	.word	0x00019e30
    9a40:	000177a9 	.word	0x000177a9
    9a44:	000093ed 	.word	0x000093ed
    9a48:	00019df4 	.word	0x00019df4
    9a4c:	00019ee0 	.word	0x00019ee0
    9a50:	00019f00 	.word	0x00019f00
    9a54:	00009a6d 	.word	0x00009a6d

00009a58 <PDS_Init>:
\brief Persistent Data Server initialization routine.
******************************************************************************/


void PDS_Init (void)
{
    9a58:	b510      	push	{r4, lr}
  D_Nv_Init();
    9a5a:	4b02      	ldr	r3, [pc, #8]	; (9a64 <PDS_Init+0xc>)
    9a5c:	4798      	blx	r3
  S_Nv_Init();
    9a5e:	4b02      	ldr	r3, [pc, #8]	; (9a68 <PDS_Init+0x10>)
    9a60:	4798      	blx	r3
}
    9a62:	bd10      	pop	{r4, pc}
    9a64:	00008265 	.word	0x00008265
    9a68:	000093b5 	.word	0x000093b5

00009a6c <pdsPostTask>:
\param[in] taskId - id of a task
******************************************************************************/

void pdsPostTask(PdsTaskId_t taskId)
{
  pendingTasks |= (1U << taskId);
    9a6c:	4a03      	ldr	r2, [pc, #12]	; (9a7c <pdsPostTask+0x10>)
    9a6e:	2301      	movs	r3, #1
    9a70:	4083      	lsls	r3, r0
    9a72:	7811      	ldrb	r1, [r2, #0]
    9a74:	430b      	orrs	r3, r1
    9a76:	7013      	strb	r3, [r2, #0]
//  SYS_PostTask(PDS_TASK_ID);
}
    9a78:	4770      	bx	lr
    9a7a:	46c0      	nop			; (mov r8, r8)
    9a7c:	2000048b 	.word	0x2000048b

00009a80 <PDS_TaskHandler>:

/******************************************************************************
\brief General PDS task handler
******************************************************************************/
void PDS_TaskHandler(void)
{
    9a80:	b570      	push	{r4, r5, r6, lr}
  if (pendingTasks)
    9a82:	4b0d      	ldr	r3, [pc, #52]	; (9ab8 <PDS_TaskHandler+0x38>)
    9a84:	781d      	ldrb	r5, [r3, #0]
    9a86:	2d00      	cmp	r5, #0
    9a88:	d012      	beq.n	9ab0 <PDS_TaskHandler+0x30>
  {
    uint8_t taskId = 0U;

    while (!(pendingTasks & (1U << taskId)))
    9a8a:	0028      	movs	r0, r5
    9a8c:	07eb      	lsls	r3, r5, #31
    9a8e:	d410      	bmi.n	9ab2 <PDS_TaskHandler+0x32>
    9a90:	2300      	movs	r3, #0
    9a92:	2401      	movs	r4, #1
      taskId++;
    9a94:	3301      	adds	r3, #1
    9a96:	b2db      	uxtb	r3, r3
    while (!(pendingTasks & (1U << taskId)))
    9a98:	0019      	movs	r1, r3
    9a9a:	0002      	movs	r2, r0
    9a9c:	40da      	lsrs	r2, r3
    9a9e:	4214      	tst	r4, r2
    9aa0:	d0f8      	beq.n	9a94 <PDS_TaskHandler+0x14>

    pendingTasks ^= (1U << taskId);
    9aa2:	2301      	movs	r3, #1
    9aa4:	408b      	lsls	r3, r1
    9aa6:	405d      	eors	r5, r3
    9aa8:	4b03      	ldr	r3, [pc, #12]	; (9ab8 <PDS_TaskHandler+0x38>)
    9aaa:	701d      	strb	r5, [r3, #0]
    pdsTaskHandlers[taskId]();
    9aac:	4b03      	ldr	r3, [pc, #12]	; (9abc <PDS_TaskHandler+0x3c>)
    9aae:	4798      	blx	r3
   
  }
}
    9ab0:	bd70      	pop	{r4, r5, r6, pc}
    while (!(pendingTasks & (1U << taskId)))
    9ab2:	2100      	movs	r1, #0
    9ab4:	e7f5      	b.n	9aa2 <PDS_TaskHandler+0x22>
    9ab6:	46c0      	nop			; (mov r8, r8)
    9ab8:	2000048b 	.word	0x2000048b
    9abc:	000098c9 	.word	0x000098c9

00009ac0 <pdsGetItemDescr>:
\param[in] itemDescrToGet    - pointer to item descriptor to be loaded;

returns true if descriptor is found out for the given item ID, false - otherwise
******************************************************************************/
bool pdsGetItemDescr(S_Nv_ItemId_t itemId, ItemIdToMemoryMapping_t *itemDescrToGet )
{
    9ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
    9ac2:	b087      	sub	sp, #28
    9ac4:	9101      	str	r1, [sp, #4]
  /* Calculate raw data size */
  for (uint8_t fileIdx = 0; fileIdx < PDS_ITEM_AMOUNT; fileIdx++)
  {
    ItemIdToMemoryMapping_t itemDescr;

    memcpy(&itemDescr, (void const *)itemDescrPtr, sizeof(ItemIdToMemoryMapping_t));
    9ac6:	aa02      	add	r2, sp, #8
    9ac8:	4b11      	ldr	r3, [pc, #68]	; (9b10 <pdsGetItemDescr+0x50>)
    9aca:	0011      	movs	r1, r2
    9acc:	cb70      	ldmia	r3!, {r4, r5, r6}
    9ace:	c170      	stmia	r1!, {r4, r5, r6}
    9ad0:	681b      	ldr	r3, [r3, #0]
    9ad2:	600b      	str	r3, [r1, #0]

    if(itemDescr.itemId == itemId)
    9ad4:	8813      	ldrh	r3, [r2, #0]
    9ad6:	4283      	cmp	r3, r0
    9ad8:	d012      	beq.n	9b00 <pdsGetItemDescr+0x40>
    {
      memcpy(itemDescrToGet, &itemDescr, sizeof(ItemIdToMemoryMapping_t));
      return true;
    }
    itemDescrPtr++;
    9ada:	4b0e      	ldr	r3, [pc, #56]	; (9b14 <pdsGetItemDescr+0x54>)
    memcpy(&itemDescr, (void const *)itemDescrPtr, sizeof(ItemIdToMemoryMapping_t));
    9adc:	aa02      	add	r2, sp, #8
  for (uint8_t fileIdx = 0; fileIdx < PDS_ITEM_AMOUNT; fileIdx++)
    9ade:	490e      	ldr	r1, [pc, #56]	; (9b18 <pdsGetItemDescr+0x58>)
    9ae0:	468c      	mov	ip, r1
    memcpy(&itemDescr, (void const *)itemDescrPtr, sizeof(ItemIdToMemoryMapping_t));
    9ae2:	0011      	movs	r1, r2
    9ae4:	001c      	movs	r4, r3
    9ae6:	cce0      	ldmia	r4!, {r5, r6, r7}
    9ae8:	c1e0      	stmia	r1!, {r5, r6, r7}
    9aea:	6824      	ldr	r4, [r4, #0]
    9aec:	600c      	str	r4, [r1, #0]
    if(itemDescr.itemId == itemId)
    9aee:	8811      	ldrh	r1, [r2, #0]
    9af0:	4281      	cmp	r1, r0
    9af2:	d005      	beq.n	9b00 <pdsGetItemDescr+0x40>
    itemDescrPtr++;
    9af4:	3310      	adds	r3, #16
  for (uint8_t fileIdx = 0; fileIdx < PDS_ITEM_AMOUNT; fileIdx++)
    9af6:	4563      	cmp	r3, ip
    9af8:	d1f3      	bne.n	9ae2 <pdsGetItemDescr+0x22>

  }
  return false;
    9afa:	2000      	movs	r0, #0
}
    9afc:	b007      	add	sp, #28
    9afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
      memcpy(itemDescrToGet, &itemDescr, sizeof(ItemIdToMemoryMapping_t));
    9b00:	2210      	movs	r2, #16
    9b02:	a902      	add	r1, sp, #8
    9b04:	9801      	ldr	r0, [sp, #4]
    9b06:	4b05      	ldr	r3, [pc, #20]	; (9b1c <pdsGetItemDescr+0x5c>)
    9b08:	4798      	blx	r3
      return true;
    9b0a:	2001      	movs	r0, #1
    9b0c:	e7f6      	b.n	9afc <pdsGetItemDescr+0x3c>
    9b0e:	46c0      	nop			; (mov r8, r8)
    9b10:	00004400 	.word	0x00004400
    9b14:	00004410 	.word	0x00004410
    9b18:	00004490 	.word	0x00004490
    9b1c:	0001786b 	.word	0x0001786b

00009b20 <pdsUpdateMemory>:
{
    9b20:	b510      	push	{r4, lr}
    9b22:	b084      	sub	sp, #16
  if (size == oldSize)
    9b24:	429a      	cmp	r2, r3
    9b26:	d008      	beq.n	9b3a <pdsUpdateMemory+0x1a>
  if (pdsGetItemDescr(id, &mapItem))
    9b28:	4669      	mov	r1, sp
    9b2a:	4b08      	ldr	r3, [pc, #32]	; (9b4c <pdsUpdateMemory+0x2c>)
    9b2c:	4798      	blx	r3
    9b2e:	2800      	cmp	r0, #0
    9b30:	d003      	beq.n	9b3a <pdsUpdateMemory+0x1a>
    assert (mapItem.flags & SIZE_MODIFICATION_ALLOWED);
    9b32:	466b      	mov	r3, sp
    9b34:	7b1b      	ldrb	r3, [r3, #12]
    9b36:	07db      	lsls	r3, r3, #31
    9b38:	d502      	bpl.n	9b40 <pdsUpdateMemory+0x20>
}
    9b3a:	2001      	movs	r0, #1
    9b3c:	b004      	add	sp, #16
    9b3e:	bd10      	pop	{r4, pc}
    assert (mapItem.flags & SIZE_MODIFICATION_ALLOWED);
    9b40:	4b03      	ldr	r3, [pc, #12]	; (9b50 <pdsUpdateMemory+0x30>)
    9b42:	4a04      	ldr	r2, [pc, #16]	; (9b54 <pdsUpdateMemory+0x34>)
    9b44:	2177      	movs	r1, #119	; 0x77
    9b46:	4804      	ldr	r0, [pc, #16]	; (9b58 <pdsUpdateMemory+0x38>)
    9b48:	4c04      	ldr	r4, [pc, #16]	; (9b5c <pdsUpdateMemory+0x3c>)
    9b4a:	47a0      	blx	r4
    9b4c:	00009ac1 	.word	0x00009ac1
    9b50:	00019f2c 	.word	0x00019f2c
    9b54:	00019f1c 	.word	0x00019f1c
    9b58:	00019f58 	.word	0x00019f58
    9b5c:	000177a9 	.word	0x000177a9

00009b60 <pdsGetDirDescr>:
\param[in] dirDescrToGet    - pointer to dir descriptor to be loaded;

returns true if descriptor is found out for the given dir ID, false - otherwise
******************************************************************************/
bool pdsGetDirDescr(S_Nv_ItemId_t itemId, PDS_DirDescr_t *dirDescrToGet )
{
    9b60:	b570      	push	{r4, r5, r6, lr}
    9b62:	b082      	sub	sp, #8
    9b64:	000c      	movs	r4, r1
  /* Calculate raw data size */
  for (uint8_t fileIdx = 0; fileIdx < PDS_DIRECTORIES_AMOUNT; fileIdx++)
  {
    PDS_DirDescr_t dirDescr;

    memcpy(&dirDescr, (void const *)dirDescrPtr, sizeof(PDS_DirDescr_t));
    9b66:	466b      	mov	r3, sp
    9b68:	4a08      	ldr	r2, [pc, #32]	; (9b8c <pdsGetDirDescr+0x2c>)
    9b6a:	4669      	mov	r1, sp
    9b6c:	ca60      	ldmia	r2!, {r5, r6}
    9b6e:	c160      	stmia	r1!, {r5, r6}
    if(dirDescr.memoryId == itemId)
    9b70:	88da      	ldrh	r2, [r3, #6]
      memcpy(dirDescrToGet, &dirDescr, sizeof(PDS_DirDescr_t));
      return true;
    }
    dirDescrPtr++;
  }
  return false;
    9b72:	2300      	movs	r3, #0
    if(dirDescr.memoryId == itemId)
    9b74:	4282      	cmp	r2, r0
    9b76:	d002      	beq.n	9b7e <pdsGetDirDescr+0x1e>
}
    9b78:	0018      	movs	r0, r3
    9b7a:	b002      	add	sp, #8
    9b7c:	bd70      	pop	{r4, r5, r6, pc}
      memcpy(dirDescrToGet, &dirDescr, sizeof(PDS_DirDescr_t));
    9b7e:	2208      	movs	r2, #8
    9b80:	4669      	mov	r1, sp
    9b82:	0020      	movs	r0, r4
    9b84:	4b02      	ldr	r3, [pc, #8]	; (9b90 <pdsGetDirDescr+0x30>)
    9b86:	4798      	blx	r3
      return true;
    9b88:	2301      	movs	r3, #1
    9b8a:	e7f5      	b.n	9b78 <pdsGetDirDescr+0x18>
    9b8c:	00004480 	.word	0x00004480
    9b90:	0001786b 	.word	0x0001786b

00009b94 <MiMAC_SetAltAddress>:
 *      None
 *
 *****************************************************************************************/

bool MiMAC_SetAltAddress( uint8_t *Address,  uint8_t *PanId)
{
    9b94:	b510      	push	{r4, lr}
	myNetworkAddress.v[0] = Address[0];
    9b96:	7802      	ldrb	r2, [r0, #0]
    9b98:	4b08      	ldr	r3, [pc, #32]	; (9bbc <MiMAC_SetAltAddress+0x28>)
    9b9a:	701a      	strb	r2, [r3, #0]
	myNetworkAddress.v[1] = Address[1];
    9b9c:	7842      	ldrb	r2, [r0, #1]
    9b9e:	705a      	strb	r2, [r3, #1]
	MAC_PANID.v[0] = PanId[0];
    9ba0:	780a      	ldrb	r2, [r1, #0]
    9ba2:	4c07      	ldr	r4, [pc, #28]	; (9bc0 <MiMAC_SetAltAddress+0x2c>)
    9ba4:	7022      	strb	r2, [r4, #0]
	MAC_PANID.v[1] = PanId[1];
    9ba6:	784a      	ldrb	r2, [r1, #1]
    9ba8:	7062      	strb	r2, [r4, #1]
	PHY_SetShortAddr(myNetworkAddress.Val);
    9baa:	8818      	ldrh	r0, [r3, #0]
    9bac:	4b05      	ldr	r3, [pc, #20]	; (9bc4 <MiMAC_SetAltAddress+0x30>)
    9bae:	4798      	blx	r3
	PHY_SetPanId(MAC_PANID.Val);
    9bb0:	8820      	ldrh	r0, [r4, #0]
    9bb2:	4b05      	ldr	r3, [pc, #20]	; (9bc8 <MiMAC_SetAltAddress+0x34>)
    9bb4:	4798      	blx	r3
	return true;
}
    9bb6:	2001      	movs	r0, #1
    9bb8:	bd10      	pop	{r4, pc}
    9bba:	46c0      	nop			; (mov r8, r8)
    9bbc:	200022e4 	.word	0x200022e4
    9bc0:	20002358 	.word	0x20002358
    9bc4:	0000af51 	.word	0x0000af51
    9bc8:	0000af3d 	.word	0x0000af3d

00009bcc <mic_generator>:

#if defined (ENABLE_SECURITY)
uint8_t addr[8] = {0xda , 0x98 , 0x22 , 0xfe , 0xff , 0xa3 , 0x04 , 0x00};
void mic_generator (uint8_t *Payloadinfo, uint8_t len , uint8_t frame_control ,  API_UINT32_UNION FrameCounter ,  uint8_t *SourceIEEEAddress)
{
    9bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    9bce:	46c6      	mov	lr, r8
    9bd0:	b500      	push	{lr}
    9bd2:	b0c6      	sub	sp, #280	; 0x118
    9bd4:	0006      	movs	r6, r0
    9bd6:	000c      	movs	r4, r1
    9bd8:	469c      	mov	ip, r3
    9bda:	994c      	ldr	r1, [sp, #304]	; 0x130
	uint16_t i ;										
	uint8_t j , iterations  , copy_packet1[255] , cbc_header_with_padding[16];
	// Calculating No of blocks in the packet (1 block = 16 bytes of data)
	iterations = len/16;
    9bdc:	0925      	lsrs	r5, r4, #4
	if (len % 16 != 0) iterations++;
    9bde:	0723      	lsls	r3, r4, #28
    9be0:	d000      	beq.n	9be4 <mic_generator+0x18>
    9be2:	3501      	adds	r5, #1
	InitVect_in[0] = 0x49;//frame_control;
    9be4:	2049      	movs	r0, #73	; 0x49
    9be6:	4b40      	ldr	r3, [pc, #256]	; (9ce8 <mic_generator+0x11c>)
    9be8:	7018      	strb	r0, [r3, #0]
	cbc_header_with_padding[0] = 0x00;  // l(a)
    9bea:	2300      	movs	r3, #0
    9bec:	a802      	add	r0, sp, #8
    9bee:	7003      	strb	r3, [r0, #0]
	cbc_header_with_padding[1] = 0x0d;  // l(a)Header Length
    9bf0:	330d      	adds	r3, #13
    9bf2:	7043      	strb	r3, [r0, #1]
	cbc_header_with_padding[2] = frame_control;  //frame_control;  //byte 1
    9bf4:	7082      	strb	r2, [r0, #2]
    9bf6:	2200      	movs	r2, #0
	for (i=0;i<8;i++)
	{
		InitVect_in[i+1] =  SourceIEEEAddress[i];
    9bf8:	4b3b      	ldr	r3, [pc, #236]	; (9ce8 <mic_generator+0x11c>)
    9bfa:	5c8f      	ldrb	r7, [r1, r2]
    9bfc:	18d0      	adds	r0, r2, r3
    9bfe:	7047      	strb	r7, [r0, #1]
		cbc_header_with_padding[i+7] = SourceIEEEAddress[i];
    9c00:	0010      	movs	r0, r2
    9c02:	af02      	add	r7, sp, #8
    9c04:	46b8      	mov	r8, r7
    9c06:	4440      	add	r0, r8
    9c08:	5c8f      	ldrb	r7, [r1, r2]
    9c0a:	71c7      	strb	r7, [r0, #7]
    9c0c:	3201      	adds	r2, #1
	for (i=0;i<8;i++)
    9c0e:	2a08      	cmp	r2, #8
    9c10:	d1f3      	bne.n	9bfa <mic_generator+0x2e>
	}
	for (i=0;i<4;i++)
	{
		InitVect_in[i+9] = FrameCounter.v[i];
    9c12:	4663      	mov	r3, ip
    9c14:	466a      	mov	r2, sp
    9c16:	71d3      	strb	r3, [r2, #7]
    9c18:	79d3      	ldrb	r3, [r2, #7]
    9c1a:	4833      	ldr	r0, [pc, #204]	; (9ce8 <mic_generator+0x11c>)
    9c1c:	7243      	strb	r3, [r0, #9]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    9c1e:	4642      	mov	r2, r8
    9c20:	70d3      	strb	r3, [r2, #3]
		InitVect_in[i+9] = FrameCounter.v[i];
    9c22:	4663      	mov	r3, ip
    9c24:	041b      	lsls	r3, r3, #16
    9c26:	0e1b      	lsrs	r3, r3, #24
    9c28:	7283      	strb	r3, [r0, #10]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    9c2a:	7113      	strb	r3, [r2, #4]
		InitVect_in[i+9] = FrameCounter.v[i];
    9c2c:	4663      	mov	r3, ip
    9c2e:	021b      	lsls	r3, r3, #8
    9c30:	0e1b      	lsrs	r3, r3, #24
    9c32:	72c3      	strb	r3, [r0, #11]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    9c34:	7153      	strb	r3, [r2, #5]
		InitVect_in[i+9] = FrameCounter.v[i];
    9c36:	4663      	mov	r3, ip
    9c38:	0e1b      	lsrs	r3, r3, #24
    9c3a:	7303      	strb	r3, [r0, #12]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    9c3c:	7193      	strb	r3, [r2, #6]
	}
	//cbc_header_with_padding[14] = 0x00;  // Padding
	cbc_header_with_padding[15] = 0x00;   // Padding
    9c3e:	2300      	movs	r3, #0
    9c40:	73d3      	strb	r3, [r2, #15]
	InitVect_in[13] = SECURITY_LEVEL; //Security Mode // 0x04 --> CCM-32
    9c42:	2204      	movs	r2, #4
    9c44:	7342      	strb	r2, [r0, #13]
	InitVect_in[14] = 0x00; // 15 th byte padded to zero
    9c46:	7383      	strb	r3, [r0, #14]
	InitVect_in[15] = len; // For MIC calculation All preceding blocks will be incremented by 1
    9c48:	73c4      	strb	r4, [r0, #15]
	PHY_EncryptReq(&InitVect_in[0], (uint8_t *)mySecurityKey);
    9c4a:	4928      	ldr	r1, [pc, #160]	; (9cec <mic_generator+0x120>)
    9c4c:	4b28      	ldr	r3, [pc, #160]	; (9cf0 <mic_generator+0x124>)
    9c4e:	4798      	blx	r3
    9c50:	2300      	movs	r3, #0
	for (i=0;i<16;i++)
	{
		copy_packet1[i] = cbc_header_with_padding[i];
    9c52:	a906      	add	r1, sp, #24
    9c54:	aa02      	add	r2, sp, #8
    9c56:	5c9a      	ldrb	r2, [r3, r2]
    9c58:	545a      	strb	r2, [r3, r1]
    9c5a:	3301      	adds	r3, #1
	for (i=0;i<16;i++)
    9c5c:	2b10      	cmp	r3, #16
    9c5e:	d1f9      	bne.n	9c54 <mic_generator+0x88>
	}
	// Copy the Payload and Do the padding
	for (i=16;i<len+16;i++)
    9c60:	0027      	movs	r7, r4
    9c62:	3710      	adds	r7, #16
    9c64:	2f10      	cmp	r7, #16
    9c66:	dd0a      	ble.n	9c7e <mic_generator+0xb2>
    9c68:	2010      	movs	r0, #16
	{
		copy_packet1[i]	= Payloadinfo[i-16];  // Copying the Payload
    9c6a:	a906      	add	r1, sp, #24
    9c6c:	18f2      	adds	r2, r6, r3
    9c6e:	3a10      	subs	r2, #16
    9c70:	7812      	ldrb	r2, [r2, #0]
    9c72:	540a      	strb	r2, [r1, r0]
	for (i=16;i<len+16;i++)
    9c74:	3301      	adds	r3, #1
    9c76:	b29b      	uxth	r3, r3
    9c78:	0018      	movs	r0, r3
    9c7a:	42bb      	cmp	r3, r7
    9c7c:	dbf6      	blt.n	9c6c <mic_generator+0xa0>
	}
	for (i=len+16;i<(iterations *16) + 16 ; i++ )
    9c7e:	0023      	movs	r3, r4
    9c80:	3310      	adds	r3, #16
    9c82:	001a      	movs	r2, r3
    9c84:	3501      	adds	r5, #1
    9c86:	0129      	lsls	r1, r5, #4
    9c88:	428b      	cmp	r3, r1
    9c8a:	da07      	bge.n	9c9c <mic_generator+0xd0>
	{
		copy_packet1[i] = 0; // Padding
    9c8c:	ac06      	add	r4, sp, #24
    9c8e:	2000      	movs	r0, #0
    9c90:	54a0      	strb	r0, [r4, r2]
	for (i=len+16;i<(iterations *16) + 16 ; i++ )
    9c92:	3301      	adds	r3, #1
    9c94:	b29b      	uxth	r3, r3
    9c96:	001a      	movs	r2, r3
    9c98:	428b      	cmp	r3, r1
    9c9a:	dbf9      	blt.n	9c90 <mic_generator+0xc4>
	}
	for (i=0;i<iterations+1;i++)
    9c9c:	2200      	movs	r2, #0
    9c9e:	2700      	movs	r7, #0
    9ca0:	2d00      	cmp	r5, #0
    9ca2:	dd15      	ble.n	9cd0 <mic_generator+0x104>
	{
		for (j=0;j<16;j++)
		{
			InitVect_in[j]	= InitVect_in[j] ^ copy_packet1[j+(i*16)];
    9ca4:	4e10      	ldr	r6, [pc, #64]	; (9ce8 <mic_generator+0x11c>)
    9ca6:	0112      	lsls	r2, r2, #4
    9ca8:	2300      	movs	r3, #0
    9caa:	a906      	add	r1, sp, #24
    9cac:	188c      	adds	r4, r1, r2
    9cae:	1999      	adds	r1, r3, r6
    9cb0:	5ce2      	ldrb	r2, [r4, r3]
    9cb2:	7808      	ldrb	r0, [r1, #0]
    9cb4:	4042      	eors	r2, r0
    9cb6:	700a      	strb	r2, [r1, #0]
    9cb8:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    9cba:	2b10      	cmp	r3, #16
    9cbc:	d1f7      	bne.n	9cae <mic_generator+0xe2>
		}
		PHY_EncryptReq(&InitVect_in[0], (uint8_t *)mySecurityKey);
    9cbe:	490b      	ldr	r1, [pc, #44]	; (9cec <mic_generator+0x120>)
    9cc0:	4809      	ldr	r0, [pc, #36]	; (9ce8 <mic_generator+0x11c>)
    9cc2:	4b0b      	ldr	r3, [pc, #44]	; (9cf0 <mic_generator+0x124>)
    9cc4:	4798      	blx	r3
	for (i=0;i<iterations+1;i++)
    9cc6:	3701      	adds	r7, #1
    9cc8:	b2bf      	uxth	r7, r7
    9cca:	003a      	movs	r2, r7
    9ccc:	42af      	cmp	r7, r5
    9cce:	dbea      	blt.n	9ca6 <mic_generator+0xda>
    9cd0:	2300      	movs	r3, #0
	}
	for (i=0;i<16;i++)
	{
		CBC_mic[i] = InitVect_in[i];
    9cd2:	4808      	ldr	r0, [pc, #32]	; (9cf4 <mic_generator+0x128>)
    9cd4:	4904      	ldr	r1, [pc, #16]	; (9ce8 <mic_generator+0x11c>)
    9cd6:	5cca      	ldrb	r2, [r1, r3]
    9cd8:	54c2      	strb	r2, [r0, r3]
    9cda:	3301      	adds	r3, #1
	for (i=0;i<16;i++)
    9cdc:	2b10      	cmp	r3, #16
    9cde:	d1fa      	bne.n	9cd6 <mic_generator+0x10a>
	}

}
    9ce0:	b046      	add	sp, #280	; 0x118
    9ce2:	bc04      	pop	{r2}
    9ce4:	4690      	mov	r8, r2
    9ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9ce8:	200022f4 	.word	0x200022f4
    9cec:	00019fac 	.word	0x00019fac
    9cf0:	0000b081 	.word	0x0000b081
    9cf4:	20002338 	.word	0x20002338

00009cf8 <DataEncrypt>:
 *
 *****************************************************************************************/

bool DataEncrypt(uint8_t *Payloadinfo, uint8_t *Payload_len, API_UINT32_UNION FrameCounter,
uint8_t FrameControl)
{
    9cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    9cfa:	46de      	mov	lr, fp
    9cfc:	4657      	mov	r7, sl
    9cfe:	464e      	mov	r6, r9
    9d00:	4645      	mov	r5, r8
    9d02:	b5e0      	push	{r5, r6, r7, lr}
    9d04:	b08d      	sub	sp, #52	; 0x34
    9d06:	4680      	mov	r8, r0
    9d08:	000e      	movs	r6, r1
    9d0a:	0014      	movs	r4, r2
    9d0c:	001a      	movs	r2, r3
	uint16_t i ;
	uint8_t iterations , block[16] , j , CTR_Nonce_and_Counter[16];
	// Calculating No of blocks in the packet (1 block = 16 bytes of data)
	iterations = *Payload_len/16;
    9d0e:	7809      	ldrb	r1, [r1, #0]
    9d10:	090d      	lsrs	r5, r1, #4
	if (*Payload_len % 16 != 0) iterations++;
    9d12:	070b      	lsls	r3, r1, #28
    9d14:	d000      	beq.n	9d18 <DataEncrypt+0x20>
    9d16:	3501      	adds	r5, #1

	mic_generator(&Payloadinfo[0] , *Payload_len, FrameControl  , FrameCounter ,  MACInitParams.PAddress);
    9d18:	4b37      	ldr	r3, [pc, #220]	; (9df8 <DataEncrypt+0x100>)
    9d1a:	685b      	ldr	r3, [r3, #4]
    9d1c:	9300      	str	r3, [sp, #0]
    9d1e:	0023      	movs	r3, r4
    9d20:	4640      	mov	r0, r8
    9d22:	4f36      	ldr	r7, [pc, #216]	; (9dfc <DataEncrypt+0x104>)
    9d24:	47b8      	blx	r7

	for (i=*Payload_len;i<iterations *16 ; i++ )
    9d26:	7831      	ldrb	r1, [r6, #0]
    9d28:	b28b      	uxth	r3, r1
    9d2a:	002e      	movs	r6, r5
    9d2c:	012d      	lsls	r5, r5, #4
    9d2e:	42a9      	cmp	r1, r5
    9d30:	da07      	bge.n	9d42 <DataEncrypt+0x4a>
	{
		Payloadinfo[i] = 0; // Padding
    9d32:	2100      	movs	r1, #0
    9d34:	4642      	mov	r2, r8
    9d36:	54d1      	strb	r1, [r2, r3]
	for (i=*Payload_len;i<iterations *16 ; i++ )
    9d38:	3301      	adds	r3, #1
    9d3a:	b29b      	uxth	r3, r3
    9d3c:	42ab      	cmp	r3, r5
    9d3e:	dbfa      	blt.n	9d36 <DataEncrypt+0x3e>
    9d40:	4690      	mov	r8, r2
	}
	CTR_Nonce_and_Counter[0] = 0x01;  // L
    9d42:	2201      	movs	r2, #1
    9d44:	ab04      	add	r3, sp, #16
    9d46:	701a      	strb	r2, [r3, #0]
	for (i=0;i<8;i++)
	{
		CTR_Nonce_and_Counter[i+1] = MACInitParams.PAddress[i];
    9d48:	4b2b      	ldr	r3, [pc, #172]	; (9df8 <DataEncrypt+0x100>)
    9d4a:	6858      	ldr	r0, [r3, #4]
    9d4c:	2300      	movs	r3, #0
    9d4e:	aa04      	add	r2, sp, #16
    9d50:	18d2      	adds	r2, r2, r3
    9d52:	5cc1      	ldrb	r1, [r0, r3]
    9d54:	7051      	strb	r1, [r2, #1]
    9d56:	3301      	adds	r3, #1
	for (i=0;i<8;i++)
    9d58:	2b08      	cmp	r3, #8
    9d5a:	d1f8      	bne.n	9d4e <DataEncrypt+0x56>
	}
	for (i=0;i<4;i++)
	{
		CTR_Nonce_and_Counter[i+9] = FrameCounter.v[i];
    9d5c:	ab04      	add	r3, sp, #16
    9d5e:	725c      	strb	r4, [r3, #9]
    9d60:	0a22      	lsrs	r2, r4, #8
    9d62:	729a      	strb	r2, [r3, #10]
    9d64:	0c22      	lsrs	r2, r4, #16
    9d66:	72da      	strb	r2, [r3, #11]
    9d68:	0e24      	lsrs	r4, r4, #24
    9d6a:	731c      	strb	r4, [r3, #12]
	}
	CTR_Nonce_and_Counter[13] = SECURITY_LEVEL; //Security Mode // 0x04 --> CCM-32
    9d6c:	2204      	movs	r2, #4
    9d6e:	735a      	strb	r2, [r3, #13]
	CTR_Nonce_and_Counter[14] = 0x00; // 15 th byte padded to zero
    9d70:	2200      	movs	r2, #0
    9d72:	739a      	strb	r2, [r3, #14]
	CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1
    9d74:	73da      	strb	r2, [r3, #15]

	for (i=0;i<iterations+1;i++)
    9d76:	1c73      	adds	r3, r6, #1
    9d78:	4699      	mov	r9, r3
    9d7a:	2300      	movs	r3, #0
    9d7c:	469b      	mov	fp, r3
    9d7e:	9303      	str	r3, [sp, #12]
    9d80:	464b      	mov	r3, r9
    9d82:	2b00      	cmp	r3, #0
    9d84:	dd2f      	ble.n	9de6 <DataEncrypt+0xee>
	{
		for (j=0;j<16;j++)
		{
			block[j] = CTR_Nonce_and_Counter[j];
    9d86:	ac08      	add	r4, sp, #32
    9d88:	ad04      	add	r5, sp, #16
		}
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    9d8a:	4b1d      	ldr	r3, [pc, #116]	; (9e00 <DataEncrypt+0x108>)
    9d8c:	469a      	mov	sl, r3
		for (j=0;j<16;j++)
		{
			if (CTR_Nonce_and_Counter[15] == 0)
			{
				final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    9d8e:	4e1d      	ldr	r6, [pc, #116]	; (9e04 <DataEncrypt+0x10c>)
    9d90:	e017      	b.n	9dc2 <DataEncrypt+0xca>
			}
			else
			{
				Payloadinfo[j+(i-1)*16] = block[j] ^ Payloadinfo[j+(i-1)*16];
    9d92:	5d1a      	ldrb	r2, [r3, r4]
    9d94:	5ccf      	ldrb	r7, [r1, r3]
    9d96:	407a      	eors	r2, r7
    9d98:	54ca      	strb	r2, [r1, r3]
    9d9a:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    9d9c:	2b10      	cmp	r3, #16
    9d9e:	d007      	beq.n	9db0 <DataEncrypt+0xb8>
			if (CTR_Nonce_and_Counter[15] == 0)
    9da0:	2800      	cmp	r0, #0
    9da2:	d1f6      	bne.n	9d92 <DataEncrypt+0x9a>
				final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    9da4:	5d1a      	ldrb	r2, [r3, r4]
    9da6:	4667      	mov	r7, ip
    9da8:	5cff      	ldrb	r7, [r7, r3]
    9daa:	407a      	eors	r2, r7
    9dac:	54f2      	strb	r2, [r6, r3]
    9dae:	e7f4      	b.n	9d9a <DataEncrypt+0xa2>
			}
		}
		CTR_Nonce_and_Counter[15]++; // Increment Counter for next operation
    9db0:	3001      	adds	r0, #1
    9db2:	73e8      	strb	r0, [r5, #15]
	for (i=0;i<iterations+1;i++)
    9db4:	9f03      	ldr	r7, [sp, #12]
    9db6:	3701      	adds	r7, #1
    9db8:	b2bb      	uxth	r3, r7
    9dba:	9303      	str	r3, [sp, #12]
    9dbc:	469b      	mov	fp, r3
    9dbe:	454b      	cmp	r3, r9
    9dc0:	da11      	bge.n	9de6 <DataEncrypt+0xee>
		CTR_Nonce_and_Counter[i+1] = MACInitParams.PAddress[i];
    9dc2:	2300      	movs	r3, #0
			block[j] = CTR_Nonce_and_Counter[j];
    9dc4:	5d5a      	ldrb	r2, [r3, r5]
    9dc6:	551a      	strb	r2, [r3, r4]
    9dc8:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    9dca:	2b10      	cmp	r3, #16
    9dcc:	d1fa      	bne.n	9dc4 <DataEncrypt+0xcc>
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    9dce:	490e      	ldr	r1, [pc, #56]	; (9e08 <DataEncrypt+0x110>)
    9dd0:	0020      	movs	r0, r4
    9dd2:	47d0      	blx	sl
			if (CTR_Nonce_and_Counter[15] == 0)
    9dd4:	7be8      	ldrb	r0, [r5, #15]
				Payloadinfo[j+(i-1)*16] = block[j] ^ Payloadinfo[j+(i-1)*16];
    9dd6:	4659      	mov	r1, fp
    9dd8:	3901      	subs	r1, #1
    9dda:	0109      	lsls	r1, r1, #4
    9ddc:	2300      	movs	r3, #0
    9dde:	4441      	add	r1, r8
				final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    9de0:	4a0a      	ldr	r2, [pc, #40]	; (9e0c <DataEncrypt+0x114>)
    9de2:	4694      	mov	ip, r2
    9de4:	e7dc      	b.n	9da0 <DataEncrypt+0xa8>
	}
	return true;

}
    9de6:	2001      	movs	r0, #1
    9de8:	b00d      	add	sp, #52	; 0x34
    9dea:	bc3c      	pop	{r2, r3, r4, r5}
    9dec:	4690      	mov	r8, r2
    9dee:	4699      	mov	r9, r3
    9df0:	46a2      	mov	sl, r4
    9df2:	46ab      	mov	fp, r5
    9df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9df6:	46c0      	nop			; (mov r8, r8)
    9df8:	200022ec 	.word	0x200022ec
    9dfc:	00009bcd 	.word	0x00009bcd
    9e00:	0000b081 	.word	0x0000b081
    9e04:	20002320 	.word	0x20002320
    9e08:	00019fac 	.word	0x00019fac
    9e0c:	20002338 	.word	0x20002338

00009e10 <validate_mic>:
// Validates the Received mic with the mic computed from data packet decryption.
bool validate_mic(void)
{
	/*************************************************************/
	//SECURITY PATCH UPDATE
	if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1] || final_mic_value[2] != received_mic_values[2] || final_mic_value[3] != received_mic_values[3])
    9e10:	4b0e      	ldr	r3, [pc, #56]	; (9e4c <validate_mic+0x3c>)
    9e12:	781a      	ldrb	r2, [r3, #0]
    9e14:	4b0e      	ldr	r3, [pc, #56]	; (9e50 <validate_mic+0x40>)
    9e16:	781b      	ldrb	r3, [r3, #0]
	/*************************************************************/
	{
		return false;
    9e18:	2000      	movs	r0, #0
	if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1] || final_mic_value[2] != received_mic_values[2] || final_mic_value[3] != received_mic_values[3])
    9e1a:	429a      	cmp	r2, r3
    9e1c:	d000      	beq.n	9e20 <validate_mic+0x10>
	}
	else
	{
		return true;
	}
}
    9e1e:	4770      	bx	lr
	if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1] || final_mic_value[2] != received_mic_values[2] || final_mic_value[3] != received_mic_values[3])
    9e20:	4b0a      	ldr	r3, [pc, #40]	; (9e4c <validate_mic+0x3c>)
    9e22:	785a      	ldrb	r2, [r3, #1]
    9e24:	4b0a      	ldr	r3, [pc, #40]	; (9e50 <validate_mic+0x40>)
    9e26:	785b      	ldrb	r3, [r3, #1]
    9e28:	429a      	cmp	r2, r3
    9e2a:	d1f8      	bne.n	9e1e <validate_mic+0xe>
    9e2c:	4b07      	ldr	r3, [pc, #28]	; (9e4c <validate_mic+0x3c>)
    9e2e:	789a      	ldrb	r2, [r3, #2]
    9e30:	4b07      	ldr	r3, [pc, #28]	; (9e50 <validate_mic+0x40>)
    9e32:	789b      	ldrb	r3, [r3, #2]
    9e34:	429a      	cmp	r2, r3
    9e36:	d1f2      	bne.n	9e1e <validate_mic+0xe>
    9e38:	4b04      	ldr	r3, [pc, #16]	; (9e4c <validate_mic+0x3c>)
    9e3a:	78d8      	ldrb	r0, [r3, #3]
    9e3c:	4b04      	ldr	r3, [pc, #16]	; (9e50 <validate_mic+0x40>)
    9e3e:	78db      	ldrb	r3, [r3, #3]
    9e40:	1ac0      	subs	r0, r0, r3
    9e42:	4243      	negs	r3, r0
    9e44:	4158      	adcs	r0, r3
    9e46:	b2c0      	uxtb	r0, r0
    9e48:	e7e9      	b.n	9e1e <validate_mic+0xe>
    9e4a:	46c0      	nop			; (mov r8, r8)
    9e4c:	20002320 	.word	0x20002320
    9e50:	20002348 	.word	0x20002348

00009e54 <DataDecrypt>:
 *      None
 *
 *****************************************************************************************/
bool DataDecrypt(uint8_t *Payload, uint8_t *PayloadLen, uint8_t *SourceIEEEAddress,
API_UINT32_UNION FrameCounter, uint8_t FrameControl)
{
    9e54:	b5f0      	push	{r4, r5, r6, r7, lr}
    9e56:	46de      	mov	lr, fp
    9e58:	4657      	mov	r7, sl
    9e5a:	464e      	mov	r6, r9
    9e5c:	4645      	mov	r5, r8
    9e5e:	b5e0      	push	{r5, r6, r7, lr}
    9e60:	b091      	sub	sp, #68	; 0x44
    9e62:	4681      	mov	r9, r0
    9e64:	9106      	str	r1, [sp, #24]
    9e66:	9204      	str	r2, [sp, #16]
    9e68:	9305      	str	r3, [sp, #20]
    9e6a:	ab1a      	add	r3, sp, #104	; 0x68
    9e6c:	781b      	ldrb	r3, [r3, #0]
    9e6e:	9307      	str	r3, [sp, #28]
	uint16_t i ;
	uint8_t iterations , block[16] , j , CTR_Nonce_and_Counter[16];
	// Calculating No of blocks in the packet (1 block = 16 bytes of data)
	iterations = *PayloadLen/16;
    9e70:	7809      	ldrb	r1, [r1, #0]
    9e72:	090a      	lsrs	r2, r1, #4
	if (*PayloadLen % 16 != 0) iterations++;
    9e74:	070b      	lsls	r3, r1, #28
    9e76:	d000      	beq.n	9e7a <DataDecrypt+0x26>
    9e78:	3201      	adds	r2, #1

	//mic_generator(&Payloadinfo[0] , *Payload_len);

	for (i=*PayloadLen;i<iterations *16 ; i++ )
    9e7a:	b28b      	uxth	r3, r1
    9e7c:	0010      	movs	r0, r2
    9e7e:	0112      	lsls	r2, r2, #4
    9e80:	4291      	cmp	r1, r2
    9e82:	da07      	bge.n	9e94 <DataDecrypt+0x40>
	{
		Payload[i] = 0; // Padding
    9e84:	2100      	movs	r1, #0
    9e86:	464c      	mov	r4, r9
    9e88:	54e1      	strb	r1, [r4, r3]
	for (i=*PayloadLen;i<iterations *16 ; i++ )
    9e8a:	3301      	adds	r3, #1
    9e8c:	b29b      	uxth	r3, r3
    9e8e:	4293      	cmp	r3, r2
    9e90:	dbfa      	blt.n	9e88 <DataDecrypt+0x34>
    9e92:	46a1      	mov	r9, r4
	}
	CTR_Nonce_and_Counter[0] = 0x01;  // L
    9e94:	2201      	movs	r2, #1
    9e96:	ab08      	add	r3, sp, #32
    9e98:	701a      	strb	r2, [r3, #0]
    9e9a:	2300      	movs	r3, #0
	for (i=0;i<8;i++)
	{
		CTR_Nonce_and_Counter[i+1] = SourceIEEEAddress[i];
    9e9c:	9c04      	ldr	r4, [sp, #16]
    9e9e:	aa08      	add	r2, sp, #32
    9ea0:	18d2      	adds	r2, r2, r3
    9ea2:	5ce1      	ldrb	r1, [r4, r3]
    9ea4:	7051      	strb	r1, [r2, #1]
    9ea6:	3301      	adds	r3, #1
	for (i=0;i<8;i++)
    9ea8:	2b08      	cmp	r3, #8
    9eaa:	d1f8      	bne.n	9e9e <DataDecrypt+0x4a>
	}
	for (i=0;i<4;i++)
	{
		CTR_Nonce_and_Counter[i+9] = FrameCounter.v[i];
    9eac:	ab08      	add	r3, sp, #32
    9eae:	9905      	ldr	r1, [sp, #20]
    9eb0:	7259      	strb	r1, [r3, #9]
    9eb2:	0a0a      	lsrs	r2, r1, #8
    9eb4:	729a      	strb	r2, [r3, #10]
    9eb6:	0c0a      	lsrs	r2, r1, #16
    9eb8:	72da      	strb	r2, [r3, #11]
    9eba:	0e0a      	lsrs	r2, r1, #24
    9ebc:	731a      	strb	r2, [r3, #12]
	}
	CTR_Nonce_and_Counter[13] = SECURITY_LEVEL; //Security Mode
    9ebe:	2204      	movs	r2, #4
    9ec0:	735a      	strb	r2, [r3, #13]
	CTR_Nonce_and_Counter[14] = 0x00; // 15 th byte padded to zero
    9ec2:	2200      	movs	r2, #0
    9ec4:	739a      	strb	r2, [r3, #14]
	CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1
    9ec6:	73da      	strb	r2, [r3, #15]


	for (i=0;i<iterations+1;i++)
    9ec8:	1c43      	adds	r3, r0, #1
    9eca:	469a      	mov	sl, r3
    9ecc:	2500      	movs	r5, #0
    9ece:	2300      	movs	r3, #0
    9ed0:	4698      	mov	r8, r3
    9ed2:	4653      	mov	r3, sl
    9ed4:	2b00      	cmp	r3, #0
    9ed6:	dd2e      	ble.n	9f36 <DataDecrypt+0xe2>
	{
		for (j=0;j<16;j++)
		{
			block[j] = CTR_Nonce_and_Counter[j];
    9ed8:	ac0c      	add	r4, sp, #48	; 0x30
    9eda:	ae08      	add	r6, sp, #32
		}
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    9edc:	4b26      	ldr	r3, [pc, #152]	; (9f78 <DataDecrypt+0x124>)
    9ede:	469b      	mov	fp, r3
		for (j=0;j<16;j++)
		{
			if (CTR_Nonce_and_Counter[15] == 0)
			{
				CTR_mic[j] = block[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    9ee0:	4f26      	ldr	r7, [pc, #152]	; (9f7c <DataDecrypt+0x128>)
    9ee2:	4643      	mov	r3, r8
    9ee4:	9303      	str	r3, [sp, #12]
    9ee6:	46a8      	mov	r8, r5
    9ee8:	e014      	b.n	9f14 <DataDecrypt+0xc0>
			}
			else
			{
				Payload[j+(i-1)*16] = block[j] ^ Payload[j+(i-1)*16];
    9eea:	5d1a      	ldrb	r2, [r3, r4]
    9eec:	5ce9      	ldrb	r1, [r5, r3]
    9eee:	404a      	eors	r2, r1
    9ef0:	54ea      	strb	r2, [r5, r3]
    9ef2:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    9ef4:	2b10      	cmp	r3, #16
    9ef6:	d004      	beq.n	9f02 <DataDecrypt+0xae>
			if (CTR_Nonce_and_Counter[15] == 0)
    9ef8:	2800      	cmp	r0, #0
    9efa:	d1f6      	bne.n	9eea <DataDecrypt+0x96>
				CTR_mic[j] = block[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    9efc:	5d1a      	ldrb	r2, [r3, r4]
    9efe:	54fa      	strb	r2, [r7, r3]
    9f00:	e7f7      	b.n	9ef2 <DataDecrypt+0x9e>
			}
		}
		CTR_Nonce_and_Counter[15]++; // Increment Counter for next opration
    9f02:	3001      	adds	r0, #1
    9f04:	73f0      	strb	r0, [r6, #15]
	for (i=0;i<iterations+1;i++)
    9f06:	9d03      	ldr	r5, [sp, #12]
    9f08:	3501      	adds	r5, #1
    9f0a:	b2ab      	uxth	r3, r5
    9f0c:	9303      	str	r3, [sp, #12]
    9f0e:	4698      	mov	r8, r3
    9f10:	4553      	cmp	r3, sl
    9f12:	da10      	bge.n	9f36 <DataDecrypt+0xe2>
	CTR_Nonce_and_Counter[0] = 0x01;  // L
    9f14:	2300      	movs	r3, #0
			block[j] = CTR_Nonce_and_Counter[j];
    9f16:	5d9a      	ldrb	r2, [r3, r6]
    9f18:	551a      	strb	r2, [r3, r4]
    9f1a:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    9f1c:	2b10      	cmp	r3, #16
    9f1e:	d1fa      	bne.n	9f16 <DataDecrypt+0xc2>
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    9f20:	4917      	ldr	r1, [pc, #92]	; (9f80 <DataDecrypt+0x12c>)
    9f22:	0020      	movs	r0, r4
    9f24:	47d8      	blx	fp
			if (CTR_Nonce_and_Counter[15] == 0)
    9f26:	7bf0      	ldrb	r0, [r6, #15]
				Payload[j+(i-1)*16] = block[j] ^ Payload[j+(i-1)*16];
    9f28:	4642      	mov	r2, r8
    9f2a:	3a01      	subs	r2, #1
    9f2c:	0112      	lsls	r2, r2, #4
    9f2e:	2300      	movs	r3, #0
    9f30:	444a      	add	r2, r9
    9f32:	0015      	movs	r5, r2
    9f34:	e7e0      	b.n	9ef8 <DataDecrypt+0xa4>
	}
	*PayloadLen = *PayloadLen-4;
    9f36:	9b06      	ldr	r3, [sp, #24]
    9f38:	7819      	ldrb	r1, [r3, #0]
    9f3a:	3904      	subs	r1, #4
    9f3c:	b2c9      	uxtb	r1, r1
    9f3e:	7019      	strb	r1, [r3, #0]
	mic_generator(&Payload[0] , *PayloadLen , FrameControl  , FrameCounter , SourceIEEEAddress);
    9f40:	9b04      	ldr	r3, [sp, #16]
    9f42:	9300      	str	r3, [sp, #0]
    9f44:	9b05      	ldr	r3, [sp, #20]
    9f46:	9a07      	ldr	r2, [sp, #28]
    9f48:	4648      	mov	r0, r9
    9f4a:	4c0e      	ldr	r4, [pc, #56]	; (9f84 <DataDecrypt+0x130>)
    9f4c:	47a0      	blx	r4
    9f4e:	2300      	movs	r3, #0
	for (i=0;i<16;i++)
	{
		final_mic_value[i] = CTR_mic[i] ^ CBC_mic[i];
    9f50:	4d0d      	ldr	r5, [pc, #52]	; (9f88 <DataDecrypt+0x134>)
    9f52:	4c0a      	ldr	r4, [pc, #40]	; (9f7c <DataDecrypt+0x128>)
    9f54:	480d      	ldr	r0, [pc, #52]	; (9f8c <DataDecrypt+0x138>)
    9f56:	5ce2      	ldrb	r2, [r4, r3]
    9f58:	5cc1      	ldrb	r1, [r0, r3]
    9f5a:	404a      	eors	r2, r1
    9f5c:	54ea      	strb	r2, [r5, r3]
    9f5e:	3301      	adds	r3, #1
	for (i=0;i<16;i++)
    9f60:	2b10      	cmp	r3, #16
    9f62:	d1f8      	bne.n	9f56 <DataDecrypt+0x102>
	}
	return validate_mic();
    9f64:	4b0a      	ldr	r3, [pc, #40]	; (9f90 <DataDecrypt+0x13c>)
    9f66:	4798      	blx	r3

}
    9f68:	b011      	add	sp, #68	; 0x44
    9f6a:	bc3c      	pop	{r2, r3, r4, r5}
    9f6c:	4690      	mov	r8, r2
    9f6e:	4699      	mov	r9, r3
    9f70:	46a2      	mov	sl, r4
    9f72:	46ab      	mov	fp, r5
    9f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9f76:	46c0      	nop			; (mov r8, r8)
    9f78:	0000b081 	.word	0x0000b081
    9f7c:	20002310 	.word	0x20002310
    9f80:	00019fac 	.word	0x00019fac
    9f84:	00009bcd 	.word	0x00009bcd
    9f88:	20002320 	.word	0x20002320
    9f8c:	20002338 	.word	0x20002338
    9f90:	00009e11 	.word	0x00009e11

00009f94 <MiMAC_Set>:
     * Remarks:
     *      None
     *
     *****************************************************************************************/
bool MiMAC_Set(mac_set_params_t id, uint8_t *value)
{
    9f94:	b510      	push	{r4, lr}
    switch(id)
    9f96:	2800      	cmp	r0, #0
    9f98:	d109      	bne.n	9fae <MiMAC_Set+0x1a>
    {
      case MAC_CHANNEL:
      {
         if(*value > LAST_CHANNEL_NUM) //26 // TODO: this check is necessary here? as we may connect a sub-gig or a 2.4gig?
    9f9a:	780b      	ldrb	r3, [r1, #0]
    9f9c:	2b19      	cmp	r3, #25
    9f9e:	d807      	bhi.n	9fb0 <MiMAC_Set+0x1c>
         {
           return false;
         }
          MACCurrentChannel = *value;
    9fa0:	4a04      	ldr	r2, [pc, #16]	; (9fb4 <MiMAC_Set+0x20>)
    9fa2:	7013      	strb	r3, [r2, #0]
          PHY_SetChannel(MACCurrentChannel);
    9fa4:	0018      	movs	r0, r3
    9fa6:	4b04      	ldr	r3, [pc, #16]	; (9fb8 <MiMAC_Set+0x24>)
    9fa8:	4798      	blx	r3
          return true;
    9faa:	2001      	movs	r0, #1
    9fac:	e000      	b.n	9fb0 <MiMAC_Set+0x1c>
      break;

     default:
     break;
    }
    return false;
    9fae:	2000      	movs	r0, #0
}
    9fb0:	bd10      	pop	{r4, pc}
    9fb2:	46c0      	nop			; (mov r8, r8)
    9fb4:	2000235a 	.word	0x2000235a
    9fb8:	0000afcd 	.word	0x0000afcd

00009fbc <MiMAC_Init>:
 * Remarks:
 *      None
 *
 *****************************************************************************************/
bool MiMAC_Init(MACINIT_PARAM initValue)
{
    9fbc:	b570      	push	{r4, r5, r6, lr}
    9fbe:	b082      	sub	sp, #8
    9fc0:	466c      	mov	r4, sp
    9fc2:	9000      	str	r0, [sp, #0]
    9fc4:	9101      	str	r1, [sp, #4]
	uint8_t i;

	PHY_Init();
    9fc6:	4b1c      	ldr	r3, [pc, #112]	; (a038 <MiMAC_Init+0x7c>)
    9fc8:	4798      	blx	r3
	MACInitParams = initValue;
    9fca:	4d1c      	ldr	r5, [pc, #112]	; (a03c <MiMAC_Init+0x80>)
    9fcc:	002b      	movs	r3, r5
    9fce:	466a      	mov	r2, sp
    9fd0:	ca03      	ldmia	r2!, {r0, r1}
    9fd2:	c303      	stmia	r3!, {r0, r1}
	uint16_t x =  PHY_RandomReq();
    9fd4:	4b1a      	ldr	r3, [pc, #104]	; (a040 <MiMAC_Init+0x84>)
    9fd6:	4798      	blx	r3
    9fd8:	0006      	movs	r6, r0
	// Set RF mode
	PHY_SetRxState(true);
    9fda:	2001      	movs	r0, #1
    9fdc:	4b19      	ldr	r3, [pc, #100]	; (a044 <MiMAC_Init+0x88>)
    9fde:	4798      	blx	r3
	IEEESeqNum =   x & 0xff;
    9fe0:	4b19      	ldr	r3, [pc, #100]	; (a048 <MiMAC_Init+0x8c>)
    9fe2:	701e      	strb	r6, [r3, #0]

	// Set Node Address
	PHY_SetIEEEAddr(MACInitParams.PAddress);
    9fe4:	6868      	ldr	r0, [r5, #4]
    9fe6:	4b19      	ldr	r3, [pc, #100]	; (a04c <MiMAC_Init+0x90>)
    9fe8:	4798      	blx	r3

	for (i = 0; i < BANK_SIZE; i++)
	{
		RxBuffer[i].PayloadLen = 0;
    9fea:	4b19      	ldr	r3, [pc, #100]	; (a050 <MiMAC_Init+0x94>)
    9fec:	2200      	movs	r2, #0
    9fee:	701a      	strb	r2, [r3, #0]
    9ff0:	2102      	movs	r1, #2
    9ff2:	31ff      	adds	r1, #255	; 0xff
    9ff4:	545a      	strb	r2, [r3, r1]
    9ff6:	4917      	ldr	r1, [pc, #92]	; (a054 <MiMAC_Init+0x98>)
    9ff8:	545a      	strb	r2, [r3, r1]
    9ffa:	4917      	ldr	r1, [pc, #92]	; (a058 <MiMAC_Init+0x9c>)
    9ffc:	545a      	strb	r2, [r3, r1]
	}
	#ifdef ENABLE_SECURITY
		#if defined(ENABLE_NETWORK_FREEZER)
			if (initValue.actionFlags.bits.NetworkFreezer)
    9ffe:	7823      	ldrb	r3, [r4, #0]
    a000:	075b      	lsls	r3, r3, #29
    a002:	d40a      	bmi.n	a01a <MiMAC_Init+0x5e>
				PDS_Restore(PDS_OUTGOING_FRAME_COUNTER_ID);
				OutgoingFrameCounter.Val += FRAME_COUNTER_UPDATE_INTERVAL;
				PDS_Store(PDS_OUTGOING_FRAME_COUNTER_ID);
			} else
			{
				OutgoingFrameCounter.Val = 0;
    a004:	4c15      	ldr	r4, [pc, #84]	; (a05c <MiMAC_Init+0xa0>)
    a006:	2300      	movs	r3, #0
    a008:	6023      	str	r3, [r4, #0]
				PDS_Store(PDS_OUTGOING_FRAME_COUNTER_ID);
    a00a:	2001      	movs	r0, #1
    a00c:	4b14      	ldr	r3, [pc, #80]	; (a060 <MiMAC_Init+0xa4>)
    a00e:	4798      	blx	r3
				OutgoingFrameCounter.Val = 1;
    a010:	2301      	movs	r3, #1
    a012:	6023      	str	r3, [r4, #0]
			OutgoingFrameCounter.Val = 1;
		#endif
	#endif

	return true;
}
    a014:	2001      	movs	r0, #1
    a016:	b002      	add	sp, #8
    a018:	bd70      	pop	{r4, r5, r6, pc}
				PDS_Restore(PDS_OUTGOING_FRAME_COUNTER_ID);
    a01a:	2001      	movs	r0, #1
    a01c:	4b11      	ldr	r3, [pc, #68]	; (a064 <MiMAC_Init+0xa8>)
    a01e:	4798      	blx	r3
				OutgoingFrameCounter.Val += FRAME_COUNTER_UPDATE_INTERVAL;
    a020:	4a0e      	ldr	r2, [pc, #56]	; (a05c <MiMAC_Init+0xa0>)
    a022:	6813      	ldr	r3, [r2, #0]
    a024:	2180      	movs	r1, #128	; 0x80
    a026:	00c9      	lsls	r1, r1, #3
    a028:	468c      	mov	ip, r1
    a02a:	4463      	add	r3, ip
    a02c:	6013      	str	r3, [r2, #0]
				PDS_Store(PDS_OUTGOING_FRAME_COUNTER_ID);
    a02e:	2001      	movs	r0, #1
    a030:	4b0b      	ldr	r3, [pc, #44]	; (a060 <MiMAC_Init+0xa4>)
    a032:	4798      	blx	r3
    a034:	e7ee      	b.n	a014 <MiMAC_Init+0x58>
    a036:	46c0      	nop			; (mov r8, r8)
    a038:	0000aefd 	.word	0x0000aefd
    a03c:	200022ec 	.word	0x200022ec
    a040:	0000b069 	.word	0x0000b069
    a044:	0000af31 	.word	0x0000af31
    a048:	200021e1 	.word	0x200021e1
    a04c:	0000b08d 	.word	0x0000b08d
    a050:	20002464 	.word	0x20002464
    a054:	00000202 	.word	0x00000202
    a058:	00000303 	.word	0x00000303
    a05c:	20002334 	.word	0x20002334
    a060:	000098a5 	.word	0x000098a5
    a064:	000097c5 	.word	0x000097c5

0000a068 <MiMAC_SendPacket>:

bool MiMAC_SendPacket( MAC_TRANS_PARAM transParam,
         uint8_t *MACPayload,
         uint8_t MACPayloadLen, uint8_t msghandle,
         DataConf_callback_t ConfCallback)
{
    a068:	b5f0      	push	{r4, r5, r6, r7, lr}
    a06a:	46de      	mov	lr, fp
    a06c:	4657      	mov	r7, sl
    a06e:	464e      	mov	r6, r9
    a070:	4645      	mov	r5, r8
    a072:	b5e0      	push	{r5, r6, r7, lr}
    a074:	b087      	sub	sp, #28
    a076:	af03      	add	r7, sp, #12
    a078:	1c04      	adds	r4, r0, #0
    a07a:	9003      	str	r0, [sp, #12]
    a07c:	0008      	movs	r0, r1
    a07e:	9104      	str	r1, [sp, #16]
    a080:	0015      	movs	r5, r2
    a082:	0a2d      	lsrs	r5, r5, #8
    a084:	9205      	str	r2, [sp, #20]
    a086:	9300      	str	r3, [sp, #0]
    a088:	ab11      	add	r3, sp, #68	; 0x44
    a08a:	781b      	ldrb	r3, [r3, #0]
    a08c:	469a      	mov	sl, r3
    a08e:	b2e4      	uxtb	r4, r4
    a090:	06a6      	lsls	r6, r4, #26
    a092:	0ff6      	lsrs	r6, r6, #31
    a094:	9002      	str	r0, [sp, #8]
    a096:	b2d3      	uxtb	r3, r2
    a098:	469c      	mov	ip, r3
    a09a:	b2ed      	uxtb	r5, r5
    uint8_t headerLength;
    uint8_t loc = 0;
    uint8_t i = 0;

	uint8_t frameControl = 0;
	dataConfAvailable = false;
    a09c:	2200      	movs	r2, #0
    a09e:	4bc9      	ldr	r3, [pc, #804]	; (a3c4 <MiMAC_SendPacket+0x35c>)
    a0a0:	701a      	strb	r2, [r3, #0]
	#ifndef TARGET_SMALL
		bool IntraPAN;
	#endif
	
	MACdatatransParam = transParam;
    a0a2:	4bc9      	ldr	r3, [pc, #804]	; (a3c8 <MiMAC_SendPacket+0x360>)
    a0a4:	cf07      	ldmia	r7!, {r0, r1, r2}
    a0a6:	c307      	stmia	r3!, {r0, r1, r2}

    if (transParam.flags.bits.broadcast)
    a0a8:	0763      	lsls	r3, r4, #29
    a0aa:	d501      	bpl.n	a0b0 <MiMAC_SendPacket+0x48>
    {
        transParam.altDestAddr = true;
    a0ac:	2301      	movs	r3, #1
    a0ae:	469c      	mov	ip, r3
    }

    if (transParam.flags.bits.secEn)
    a0b0:	2308      	movs	r3, #8
    a0b2:	4023      	ands	r3, r4
    a0b4:	001a      	movs	r2, r3
    {
        transParam.altSrcAddr = false;
    a0b6:	4253      	negs	r3, r2
    a0b8:	4153      	adcs	r3, r2
    a0ba:	425b      	negs	r3, r3
    a0bc:	401d      	ands	r5, r3
    }

    // set the frame control in variable i
    if (transParam.flags.bits.packetType == PACKET_TYPE_COMMAND)
    a0be:	2303      	movs	r3, #3
    a0c0:	4023      	ands	r3, r4
    a0c2:	2b01      	cmp	r3, #1
    a0c4:	d04d      	beq.n	a162 <MiMAC_SendPacket+0xfa>
    {
        frameControl = 0x03;
    } else if (transParam.flags.bits.packetType == PACKET_TYPE_DATA)
    {
        frameControl = 0x01;
    a0c6:	2201      	movs	r2, #1
    a0c8:	4691      	mov	r9, r2
    } else if (transParam.flags.bits.packetType == PACKET_TYPE_DATA)
    a0ca:	2b00      	cmp	r3, #0
    a0cc:	d004      	beq.n	a0d8 <MiMAC_SendPacket+0x70>
    }
	else if (transParam.flags.bits.packetType == PACKET_TYPE_ACK)
    {
        frameControl = 0x02;
    a0ce:	1e9a      	subs	r2, r3, #2
    a0d0:	4251      	negs	r1, r2
    a0d2:	4151      	adcs	r1, r2
    a0d4:	004a      	lsls	r2, r1, #1
    a0d6:	4691      	mov	r9, r2
    }
    // decide the header length for different addressing mode
#ifndef TARGET_SMALL
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    a0d8:	aa03      	add	r2, sp, #12
    a0da:	8952      	ldrh	r2, [r2, #10]
    a0dc:	48bb      	ldr	r0, [pc, #748]	; (a3cc <MiMAC_SendPacket+0x364>)
    a0de:	8800      	ldrh	r0, [r0, #0]
    a0e0:	4290      	cmp	r0, r2
    a0e2:	d041      	beq.n	a168 <MiMAC_SendPacket+0x100>
    }
#ifndef TARGET_SMALL
    else
    {
        headerLength = 7;
        IntraPAN = false;
    a0e4:	2200      	movs	r2, #0
    a0e6:	4693      	mov	fp, r2
        headerLength = 7;
    a0e8:	3207      	adds	r2, #7
    }
#endif

    if (transParam.altDestAddr)
    a0ea:	46e0      	mov	r8, ip
    {
        headerLength += 2;
    } else
    {
        headerLength += 8;
    a0ec:	0017      	movs	r7, r2
    a0ee:	3708      	adds	r7, #8
    if (transParam.altDestAddr)
    a0f0:	4661      	mov	r1, ip
    a0f2:	2900      	cmp	r1, #0
    a0f4:	d000      	beq.n	a0f8 <MiMAC_SendPacket+0x90>
        headerLength += 2;
    a0f6:	1c97      	adds	r7, r2, #2
    }

    if (transParam.altSrcAddr)
    a0f8:	2d00      	cmp	r5, #0
    a0fa:	d044      	beq.n	a186 <MiMAC_SendPacket+0x11e>
    {
        headerLength += 2;
    a0fc:	3702      	adds	r7, #2
    a0fe:	b2fa      	uxtb	r2, r7
    a100:	9201      	str	r2, [sp, #4]
    } else
    {
        headerLength += 8;
    }

    if (transParam.flags.bits.ackReq && transParam.flags.bits.broadcast == false)
    a102:	2224      	movs	r2, #36	; 0x24
    a104:	4014      	ands	r4, r2
    a106:	2c20      	cmp	r4, #32
    a108:	d041      	beq.n	a18e <MiMAC_SendPacket+0x126>
    {
        frameControl |= 0x20;
    }

    // use PACKET_TYPE_RESERVE to represent beacon. Fixed format for beacon packet
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
    a10a:	2b03      	cmp	r3, #3
    a10c:	d044      	beq.n	a198 <MiMAC_SendPacket+0x130>
#endif
        transParam.altSrcAddr = true;
        transParam.flags.bits.ackReq = false;
    }
//#if ! defined(PROTOCOL_STAR)
	if (transParam.flags.bits.packetType == PACKET_TYPE_COMMAND) 
    a10e:	aa03      	add	r2, sp, #12
    a110:	0171      	lsls	r1, r6, #5
    a112:	7813      	ldrb	r3, [r2, #0]
    a114:	2020      	movs	r0, #32
    a116:	4383      	bics	r3, r0
    a118:	430b      	orrs	r3, r1
    a11a:	7013      	strb	r3, [r2, #0]
    a11c:	2203      	movs	r2, #3
    a11e:	4013      	ands	r3, r2
    a120:	2b01      	cmp	r3, #1
    a122:	d041      	beq.n	a1a8 <MiMAC_SendPacket+0x140>
        transParam.flags.bits.ackReq = false;
    }
//#endif

#ifdef ENABLE_SECURITY
    if (transParam.flags.bits.secEn)
    a124:	ab03      	add	r3, sp, #12
    a126:	0172      	lsls	r2, r6, #5
    a128:	781c      	ldrb	r4, [r3, #0]
    a12a:	2120      	movs	r1, #32
    a12c:	438c      	bics	r4, r1
    a12e:	4314      	orrs	r4, r2
    a130:	701c      	strb	r4, [r3, #0]
    a132:	b2e4      	uxtb	r4, r4
    a134:	0723      	lsls	r3, r4, #28
    a136:	d439      	bmi.n	a1ac <MiMAC_SendPacket+0x144>
		// 4 byte mic and 5 byte outgoing frame counter
		packet[loc++] = MACPayloadLen+headerLength+9;
    } else
#endif
    {
		packet[loc++] = MACPayloadLen+headerLength;
    a138:	ab10      	add	r3, sp, #64	; 0x40
    a13a:	781b      	ldrb	r3, [r3, #0]
    a13c:	9a01      	ldr	r2, [sp, #4]
    a13e:	18d7      	adds	r7, r2, r3
    a140:	4ba3      	ldr	r3, [pc, #652]	; (a3d0 <MiMAC_SendPacket+0x368>)
    a142:	701f      	strb	r7, [r3, #0]
    }

    // set frame control LSB
	packet[loc++] = frameControl;
    a144:	4ba2      	ldr	r3, [pc, #648]	; (a3d0 <MiMAC_SendPacket+0x368>)
    a146:	464a      	mov	r2, r9
    a148:	705a      	strb	r2, [r3, #1]

    // set frame control MSB
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
    a14a:	43e3      	mvns	r3, r4
    a14c:	079b      	lsls	r3, r3, #30
    a14e:	d040      	beq.n	a1d2 <MiMAC_SendPacket+0x16a>
		packet[loc++] = 0x80;
        // sequence number
		packet[loc++] = IEEESeqNum++;
    } else
    {
        if (transParam.altDestAddr && transParam.altSrcAddr)
    a150:	4643      	mov	r3, r8
    a152:	2b00      	cmp	r3, #0
    a154:	d05f      	beq.n	a216 <MiMAC_SendPacket+0x1ae>
    a156:	2d00      	cmp	r5, #0
    a158:	d045      	beq.n	a1e6 <MiMAC_SendPacket+0x17e>
        {
			packet[loc++] = 0x88;
    a15a:	2288      	movs	r2, #136	; 0x88
    a15c:	4b9c      	ldr	r3, [pc, #624]	; (a3d0 <MiMAC_SendPacket+0x368>)
    a15e:	709a      	strb	r2, [r3, #2]
    a160:	e044      	b.n	a1ec <MiMAC_SendPacket+0x184>
        frameControl = 0x03;
    a162:	2203      	movs	r2, #3
    a164:	4691      	mov	r9, r2
    a166:	e7b7      	b.n	a0d8 <MiMAC_SendPacket+0x70>
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    a168:	489a      	ldr	r0, [pc, #616]	; (a3d4 <MiMAC_SendPacket+0x36c>)
    a16a:	4282      	cmp	r2, r0
    a16c:	d007      	beq.n	a17e <MiMAC_SendPacket+0x116>
        frameControl |= 0x40;
    a16e:	2240      	movs	r2, #64	; 0x40
    a170:	4649      	mov	r1, r9
    a172:	4311      	orrs	r1, r2
    a174:	4689      	mov	r9, r1
        IntraPAN = true;
    a176:	3a3f      	subs	r2, #63	; 0x3f
    a178:	4693      	mov	fp, r2
        headerLength = 5;
    a17a:	3204      	adds	r2, #4
        IntraPAN = true;
    a17c:	e7b5      	b.n	a0ea <MiMAC_SendPacket+0x82>
        IntraPAN = false;
    a17e:	2200      	movs	r2, #0
    a180:	4693      	mov	fp, r2
        headerLength = 7;
    a182:	3207      	adds	r2, #7
    a184:	e7b1      	b.n	a0ea <MiMAC_SendPacket+0x82>
        headerLength += 8;
    a186:	3708      	adds	r7, #8
    a188:	b2fa      	uxtb	r2, r7
    a18a:	9201      	str	r2, [sp, #4]
    a18c:	e7b9      	b.n	a102 <MiMAC_SendPacket+0x9a>
        frameControl |= 0x20;
    a18e:	3a04      	subs	r2, #4
    a190:	4649      	mov	r1, r9
    a192:	4311      	orrs	r1, r2
    a194:	4689      	mov	r9, r1
    a196:	e7b8      	b.n	a10a <MiMAC_SendPacket+0xa2>
        transParam.altSrcAddr = true;
    a198:	2501      	movs	r5, #1
        transParam.flags.bits.ackReq = false;
    a19a:	2600      	movs	r6, #0
        IntraPAN = false;
    a19c:	2300      	movs	r3, #0
    a19e:	469b      	mov	fp, r3
        frameControl = 0x00;
    a1a0:	4699      	mov	r9, r3
        headerLength = 7;
    a1a2:	3307      	adds	r3, #7
    a1a4:	9301      	str	r3, [sp, #4]
    a1a6:	e7b2      	b.n	a10e <MiMAC_SendPacket+0xa6>
        transParam.flags.bits.ackReq = false;
    a1a8:	2600      	movs	r6, #0
    a1aa:	e7bb      	b.n	a124 <MiMAC_SendPacket+0xbc>
        frameControl |= 0x08;
    a1ac:	2308      	movs	r3, #8
    a1ae:	464a      	mov	r2, r9
    a1b0:	431a      	orrs	r2, r3
    a1b2:	4691      	mov	r9, r2
		DataEncrypt(MACPayload, &MACPayloadLen, OutgoingFrameCounter, frameControl);
    a1b4:	4b88      	ldr	r3, [pc, #544]	; (a3d8 <MiMAC_SendPacket+0x370>)
    a1b6:	681a      	ldr	r2, [r3, #0]
    a1b8:	464b      	mov	r3, r9
    a1ba:	a910      	add	r1, sp, #64	; 0x40
    a1bc:	9800      	ldr	r0, [sp, #0]
    a1be:	4f87      	ldr	r7, [pc, #540]	; (a3dc <MiMAC_SendPacket+0x374>)
    a1c0:	47b8      	blx	r7
		packet[loc++] = MACPayloadLen+headerLength+9;
    a1c2:	ab10      	add	r3, sp, #64	; 0x40
    a1c4:	781b      	ldrb	r3, [r3, #0]
    a1c6:	3309      	adds	r3, #9
    a1c8:	9a01      	ldr	r2, [sp, #4]
    a1ca:	18d7      	adds	r7, r2, r3
    a1cc:	4b80      	ldr	r3, [pc, #512]	; (a3d0 <MiMAC_SendPacket+0x368>)
    a1ce:	701f      	strb	r7, [r3, #0]
    a1d0:	e7b8      	b.n	a144 <MiMAC_SendPacket+0xdc>
		packet[loc++] = 0x80;
    a1d2:	4b7f      	ldr	r3, [pc, #508]	; (a3d0 <MiMAC_SendPacket+0x368>)
    a1d4:	2280      	movs	r2, #128	; 0x80
    a1d6:	709a      	strb	r2, [r3, #2]
		packet[loc++] = IEEESeqNum++;
    a1d8:	4981      	ldr	r1, [pc, #516]	; (a3e0 <MiMAC_SendPacket+0x378>)
    a1da:	780a      	ldrb	r2, [r1, #0]
    a1dc:	1c50      	adds	r0, r2, #1
    a1de:	7008      	strb	r0, [r1, #0]
    a1e0:	70da      	strb	r2, [r3, #3]
    a1e2:	2304      	movs	r3, #4
    a1e4:	e03e      	b.n	a264 <MiMAC_SendPacket+0x1fc>

        } else if (transParam.altDestAddr && transParam.altSrcAddr == 0)
        {
			packet[loc++] = 0xC8;
    a1e6:	22c8      	movs	r2, #200	; 0xc8
    a1e8:	4b79      	ldr	r3, [pc, #484]	; (a3d0 <MiMAC_SendPacket+0x368>)
    a1ea:	709a      	strb	r2, [r3, #2]
        {
			packet[loc++] = 0xCC;
        }

        // sequence number
		packet[loc++] = IEEESeqNum++;
    a1ec:	4b7c      	ldr	r3, [pc, #496]	; (a3e0 <MiMAC_SendPacket+0x378>)
    a1ee:	781a      	ldrb	r2, [r3, #0]
    a1f0:	1c51      	adds	r1, r2, #1
    a1f2:	7019      	strb	r1, [r3, #0]
    a1f4:	4b76      	ldr	r3, [pc, #472]	; (a3d0 <MiMAC_SendPacket+0x368>)
    a1f6:	70da      	strb	r2, [r3, #3]
        // destination PANID
		packet[loc++] = transParam.DestPANID.v[0];
    a1f8:	aa03      	add	r2, sp, #12
    a1fa:	7a91      	ldrb	r1, [r2, #10]
    a1fc:	7119      	strb	r1, [r3, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    a1fe:	7ad2      	ldrb	r2, [r2, #11]
    a200:	715a      	strb	r2, [r3, #5]

        // destination address
        if (transParam.flags.bits.broadcast)
    a202:	0763      	lsls	r3, r4, #29
    a204:	d429      	bmi.n	a25a <MiMAC_SendPacket+0x1f2>
			packet[loc++] = 0xFF;
        } else
        {
            if (transParam.altDestAddr)
            {
				packet[loc++] = transParam.DestAddress[0];
    a206:	9902      	ldr	r1, [sp, #8]
    a208:	780a      	ldrb	r2, [r1, #0]
    a20a:	4b71      	ldr	r3, [pc, #452]	; (a3d0 <MiMAC_SendPacket+0x368>)
    a20c:	719a      	strb	r2, [r3, #6]
				packet[loc++] = transParam.DestAddress[1];
    a20e:	784a      	ldrb	r2, [r1, #1]
    a210:	71da      	strb	r2, [r3, #7]
    a212:	2308      	movs	r3, #8
    a214:	e026      	b.n	a264 <MiMAC_SendPacket+0x1fc>
        } else if (transParam.altDestAddr == 0 && transParam.altSrcAddr == 1)
    a216:	2d00      	cmp	r5, #0
    a218:	d00f      	beq.n	a23a <MiMAC_SendPacket+0x1d2>
			packet[loc++] = 0x8C;
    a21a:	4b6d      	ldr	r3, [pc, #436]	; (a3d0 <MiMAC_SendPacket+0x368>)
    a21c:	228c      	movs	r2, #140	; 0x8c
    a21e:	709a      	strb	r2, [r3, #2]
		packet[loc++] = IEEESeqNum++;
    a220:	496f      	ldr	r1, [pc, #444]	; (a3e0 <MiMAC_SendPacket+0x378>)
    a222:	780a      	ldrb	r2, [r1, #0]
    a224:	1c50      	adds	r0, r2, #1
    a226:	7008      	strb	r0, [r1, #0]
    a228:	70da      	strb	r2, [r3, #3]
		packet[loc++] = transParam.DestPANID.v[0];
    a22a:	aa03      	add	r2, sp, #12
    a22c:	7a91      	ldrb	r1, [r2, #10]
    a22e:	7119      	strb	r1, [r3, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    a230:	7ad2      	ldrb	r2, [r2, #11]
    a232:	715a      	strb	r2, [r3, #5]
        if (transParam.flags.bits.broadcast)
    a234:	0763      	lsls	r3, r4, #29
    a236:	d410      	bmi.n	a25a <MiMAC_SendPacket+0x1f2>
    a238:	e09f      	b.n	a37a <MiMAC_SendPacket+0x312>
			packet[loc++] = 0xCC;
    a23a:	4b65      	ldr	r3, [pc, #404]	; (a3d0 <MiMAC_SendPacket+0x368>)
    a23c:	22cc      	movs	r2, #204	; 0xcc
    a23e:	709a      	strb	r2, [r3, #2]
		packet[loc++] = IEEESeqNum++;
    a240:	4967      	ldr	r1, [pc, #412]	; (a3e0 <MiMAC_SendPacket+0x378>)
    a242:	780a      	ldrb	r2, [r1, #0]
    a244:	1c50      	adds	r0, r2, #1
    a246:	7008      	strb	r0, [r1, #0]
    a248:	70da      	strb	r2, [r3, #3]
		packet[loc++] = transParam.DestPANID.v[0];
    a24a:	aa03      	add	r2, sp, #12
    a24c:	7a91      	ldrb	r1, [r2, #10]
    a24e:	7119      	strb	r1, [r3, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    a250:	7ad2      	ldrb	r2, [r2, #11]
    a252:	715a      	strb	r2, [r3, #5]
        if (transParam.flags.bits.broadcast)
    a254:	0763      	lsls	r3, r4, #29
    a256:	d400      	bmi.n	a25a <MiMAC_SendPacket+0x1f2>
    a258:	e08b      	b.n	a372 <MiMAC_SendPacket+0x30a>
			packet[loc++] = 0xFF;
    a25a:	4b5d      	ldr	r3, [pc, #372]	; (a3d0 <MiMAC_SendPacket+0x368>)
    a25c:	22ff      	movs	r2, #255	; 0xff
    a25e:	719a      	strb	r2, [r3, #6]
			packet[loc++] = 0xFF;
    a260:	71da      	strb	r2, [r3, #7]
    a262:	2308      	movs	r3, #8
                }
            }
        }
    }
	
	if(transParam.flags.bits.ackReq)
    a264:	a903      	add	r1, sp, #12
    a266:	0170      	lsls	r0, r6, #5
    a268:	780a      	ldrb	r2, [r1, #0]
    a26a:	2420      	movs	r4, #32
    a26c:	43a2      	bics	r2, r4
    a26e:	4302      	orrs	r2, r0
    a270:	700a      	strb	r2, [r1, #0]
    a272:	0692      	lsls	r2, r2, #26
    a274:	d400      	bmi.n	a278 <MiMAC_SendPacket+0x210>
    a276:	e08b      	b.n	a390 <MiMAC_SendPacket+0x328>
	{
	 	AckSeqNum = IEEESeqNum-1;
    a278:	4a59      	ldr	r2, [pc, #356]	; (a3e0 <MiMAC_SendPacket+0x378>)
    a27a:	7812      	ldrb	r2, [r2, #0]
    a27c:	3a01      	subs	r2, #1
    a27e:	4959      	ldr	r1, [pc, #356]	; (a3e4 <MiMAC_SendPacket+0x37c>)
    a280:	700a      	strb	r2, [r1, #0]
		 AckReqData = 1;
    a282:	2101      	movs	r1, #1
    a284:	4a58      	ldr	r2, [pc, #352]	; (a3e8 <MiMAC_SendPacket+0x380>)
    a286:	7011      	strb	r1, [r2, #0]
	{
		AckReqData = 0;
	}
#ifndef TARGET_SMALL
    // source PANID if necessary
    if (IntraPAN == false)
    a288:	465a      	mov	r2, fp
    a28a:	2a00      	cmp	r2, #0
    a28c:	d109      	bne.n	a2a2 <MiMAC_SendPacket+0x23a>
    {
		packet[loc++] = MAC_PANID.v[0];
    a28e:	1c5a      	adds	r2, r3, #1
    a290:	b2d2      	uxtb	r2, r2
    a292:	494f      	ldr	r1, [pc, #316]	; (a3d0 <MiMAC_SendPacket+0x368>)
    a294:	484d      	ldr	r0, [pc, #308]	; (a3cc <MiMAC_SendPacket+0x364>)
    a296:	7804      	ldrb	r4, [r0, #0]
    a298:	54cc      	strb	r4, [r1, r3]
		packet[loc++] = MAC_PANID.v[1];
    a29a:	3302      	adds	r3, #2
    a29c:	b2db      	uxtb	r3, r3
    a29e:	7840      	ldrb	r0, [r0, #1]
    a2a0:	5488      	strb	r0, [r1, r2]
    }
#endif

    // source address
    if (transParam.altSrcAddr)
    a2a2:	2d00      	cmp	r5, #0
    a2a4:	d100      	bne.n	a2a8 <MiMAC_SendPacket+0x240>
    a2a6:	e077      	b.n	a398 <MiMAC_SendPacket+0x330>
    {
		packet[loc++] = myNetworkAddress.v[0];
    a2a8:	4a49      	ldr	r2, [pc, #292]	; (a3d0 <MiMAC_SendPacket+0x368>)
    a2aa:	4950      	ldr	r1, [pc, #320]	; (a3ec <MiMAC_SendPacket+0x384>)
    a2ac:	7808      	ldrb	r0, [r1, #0]
    a2ae:	54d0      	strb	r0, [r2, r3]
		packet[loc++] = myNetworkAddress.v[1];
    a2b0:	1c9c      	adds	r4, r3, #2
    a2b2:	b2e4      	uxtb	r4, r4
		packet[loc++] = myNetworkAddress.v[0];
    a2b4:	3301      	adds	r3, #1
		packet[loc++] = myNetworkAddress.v[1];
    a2b6:	b2db      	uxtb	r3, r3
    a2b8:	7849      	ldrb	r1, [r1, #1]
    a2ba:	54d1      	strb	r1, [r2, r3]
        {
			packet[loc++] = MACInitParams.PAddress[i];
        }
    }
#ifdef ENABLE_SECURITY
if (transParam.flags.bits.secEn)
    a2bc:	ab03      	add	r3, sp, #12
    a2be:	0172      	lsls	r2, r6, #5
    a2c0:	781e      	ldrb	r6, [r3, #0]
    a2c2:	2120      	movs	r1, #32
    a2c4:	438e      	bics	r6, r1
    a2c6:	4316      	orrs	r6, r2
    a2c8:	701e      	strb	r6, [r3, #0]
    a2ca:	0733      	lsls	r3, r6, #28
    a2cc:	d51b      	bpl.n	a306 <MiMAC_SendPacket+0x29e>
    a2ce:	0022      	movs	r2, r4
    a2d0:	2300      	movs	r3, #0
{
	// fill the additional security aux header
	for (i = 0; i < 4; i++)
	{
		packet[loc++] = OutgoingFrameCounter.v[i];
    a2d2:	4e3f      	ldr	r6, [pc, #252]	; (a3d0 <MiMAC_SendPacket+0x368>)
    a2d4:	4d40      	ldr	r5, [pc, #256]	; (a3d8 <MiMAC_SendPacket+0x370>)
    a2d6:	1c51      	adds	r1, r2, #1
    a2d8:	5ce8      	ldrb	r0, [r5, r3]
    a2da:	54b0      	strb	r0, [r6, r2]
    a2dc:	3301      	adds	r3, #1
    a2de:	b2ca      	uxtb	r2, r1
	for (i = 0; i < 4; i++)
    a2e0:	2b04      	cmp	r3, #4
    a2e2:	d1f8      	bne.n	a2d6 <MiMAC_SendPacket+0x26e>
    a2e4:	1d25      	adds	r5, r4, #4
    a2e6:	b2ed      	uxtb	r5, r5
	}
	OutgoingFrameCounter.Val++;
    a2e8:	4a3b      	ldr	r2, [pc, #236]	; (a3d8 <MiMAC_SendPacket+0x370>)
    a2ea:	6813      	ldr	r3, [r2, #0]
    a2ec:	3301      	adds	r3, #1
    a2ee:	6013      	str	r3, [r2, #0]

	#if defined(ENABLE_NETWORK_FREEZER)
	if ((OutgoingFrameCounter.v[0] == 0) && ((OutgoingFrameCounter.v[1] & 0x03) == 0))
    a2f0:	b2db      	uxtb	r3, r3
    a2f2:	2b00      	cmp	r3, #0
    a2f4:	d102      	bne.n	a2fc <MiMAC_SendPacket+0x294>
    a2f6:	7853      	ldrb	r3, [r2, #1]
    a2f8:	079b      	lsls	r3, r3, #30
    a2fa:	d05c      	beq.n	a3b6 <MiMAC_SendPacket+0x34e>
	{
		PDS_Store(PDS_OUTGOING_FRAME_COUNTER_ID);
	}
	#endif
	//copy myKeySequenceNumber
	packet[loc++] = myKeySequenceNumber;
    a2fc:	3405      	adds	r4, #5
    a2fe:	b2e4      	uxtb	r4, r4
    a300:	2200      	movs	r2, #0
    a302:	4b33      	ldr	r3, [pc, #204]	; (a3d0 <MiMAC_SendPacket+0x368>)
    a304:	555a      	strb	r2, [r3, r5]
    {
		packet[loc++] = MACPayload[i];
    }
#else
    // write the payload
    for (i = 0; i < MACPayloadLen; i++) // MIC added
    a306:	ab10      	add	r3, sp, #64	; 0x40
    a308:	781e      	ldrb	r6, [r3, #0]
    a30a:	2e00      	cmp	r6, #0
    a30c:	d057      	beq.n	a3be <MiMAC_SendPacket+0x356>
    a30e:	9b00      	ldr	r3, [sp, #0]
    a310:	1932      	adds	r2, r6, r4
    a312:	b2d2      	uxtb	r2, r2
    {
	    packet[loc++] = MACPayload[i];
    a314:	4d2e      	ldr	r5, [pc, #184]	; (a3d0 <MiMAC_SendPacket+0x368>)
    a316:	1c61      	adds	r1, r4, #1
    a318:	7818      	ldrb	r0, [r3, #0]
    a31a:	5528      	strb	r0, [r5, r4]
    a31c:	3301      	adds	r3, #1
    a31e:	b2cc      	uxtb	r4, r1
    for (i = 0; i < MACPayloadLen; i++) // MIC added
    a320:	4294      	cmp	r4, r2
    a322:	d1f8      	bne.n	a316 <MiMAC_SendPacket+0x2ae>
    }
	packet[loc++] = final_mic_value[0];
    a324:	482a      	ldr	r0, [pc, #168]	; (a3d0 <MiMAC_SendPacket+0x368>)
    a326:	4b32      	ldr	r3, [pc, #200]	; (a3f0 <MiMAC_SendPacket+0x388>)
    a328:	7819      	ldrb	r1, [r3, #0]
    a32a:	5481      	strb	r1, [r0, r2]
    a32c:	1c51      	adds	r1, r2, #1
	packet[loc++] = final_mic_value[1];
    a32e:	b2c9      	uxtb	r1, r1
    a330:	785c      	ldrb	r4, [r3, #1]
    a332:	5444      	strb	r4, [r0, r1]
    a334:	1c91      	adds	r1, r2, #2
	packet[loc++] = final_mic_value[2];
    a336:	b2c9      	uxtb	r1, r1
    a338:	789c      	ldrb	r4, [r3, #2]
    a33a:	5444      	strb	r4, [r0, r1]
    a33c:	3203      	adds	r2, #3
	packet[loc++] = final_mic_value[3];
    a33e:	b2d2      	uxtb	r2, r2
    a340:	78db      	ldrb	r3, [r3, #3]
    a342:	5483      	strb	r3, [r0, r2]
    } else
    {
        i = 0x01;
    }

    dataPointer = MACPayload;
    a344:	4b2b      	ldr	r3, [pc, #172]	; (a3f4 <MiMAC_SendPacket+0x38c>)
    a346:	9a00      	ldr	r2, [sp, #0]
    a348:	601a      	str	r2, [r3, #0]
	dataConfCallback = ConfCallback;
    a34a:	4b2b      	ldr	r3, [pc, #172]	; (a3f8 <MiMAC_SendPacket+0x390>)
    a34c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    a34e:	601a      	str	r2, [r3, #0]
    dataHandle = msghandle;
    a350:	4b2a      	ldr	r3, [pc, #168]	; (a3fc <MiMAC_SendPacket+0x394>)
    a352:	4652      	mov	r2, sl
    a354:	701a      	strb	r2, [r3, #0]
	MACdataPayloadLen = MACPayloadLen;
    a356:	4b2a      	ldr	r3, [pc, #168]	; (a400 <MiMAC_SendPacket+0x398>)
    a358:	701e      	strb	r6, [r3, #0]
	//DataRetryCount = 0;

    // Now Trigger the Transmission of packet
    return PHY_DataReq(packet);					
    a35a:	4b2a      	ldr	r3, [pc, #168]	; (a404 <MiMAC_SendPacket+0x39c>)
    a35c:	4798      	blx	r3
    a35e:	1e43      	subs	r3, r0, #1
    a360:	4198      	sbcs	r0, r3
    a362:	b2c0      	uxtb	r0, r0
}
    a364:	b007      	add	sp, #28
    a366:	bc3c      	pop	{r2, r3, r4, r5}
    a368:	4690      	mov	r8, r2
    a36a:	4699      	mov	r9, r3
    a36c:	46a2      	mov	sl, r4
    a36e:	46ab      	mov	fp, r5
    a370:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (transParam.altDestAddr)
    a372:	4643      	mov	r3, r8
    a374:	2b00      	cmp	r3, #0
    a376:	d000      	beq.n	a37a <MiMAC_SendPacket+0x312>
    a378:	e745      	b.n	a206 <MiMAC_SendPacket+0x19e>
        transParam.flags.bits.ackReq = false;
    a37a:	2300      	movs	r3, #0
					packet[loc++] = transParam.DestAddress[i];
    a37c:	4814      	ldr	r0, [pc, #80]	; (a3d0 <MiMAC_SendPacket+0x368>)
    a37e:	9c02      	ldr	r4, [sp, #8]
    a380:	5ce1      	ldrb	r1, [r4, r3]
    a382:	181a      	adds	r2, r3, r0
    a384:	7191      	strb	r1, [r2, #6]
    a386:	3301      	adds	r3, #1
                for (i = 0; i < 8; i++)
    a388:	2b08      	cmp	r3, #8
    a38a:	d1f9      	bne.n	a380 <MiMAC_SendPacket+0x318>
					packet[loc++] = transParam.DestAddress[i];
    a38c:	3306      	adds	r3, #6
    a38e:	e769      	b.n	a264 <MiMAC_SendPacket+0x1fc>
		AckReqData = 0;
    a390:	2100      	movs	r1, #0
    a392:	4a15      	ldr	r2, [pc, #84]	; (a3e8 <MiMAC_SendPacket+0x380>)
    a394:	7011      	strb	r1, [r2, #0]
    a396:	e777      	b.n	a288 <MiMAC_SendPacket+0x220>
			packet[loc++] = MACInitParams.PAddress[i];
    a398:	4a1b      	ldr	r2, [pc, #108]	; (a408 <MiMAC_SendPacket+0x3a0>)
    a39a:	6852      	ldr	r2, [r2, #4]
    a39c:	0018      	movs	r0, r3
    a39e:	3008      	adds	r0, #8
    a3a0:	b2c0      	uxtb	r0, r0
    a3a2:	4d0b      	ldr	r5, [pc, #44]	; (a3d0 <MiMAC_SendPacket+0x368>)
    a3a4:	1c5c      	adds	r4, r3, #1
    a3a6:	b2e4      	uxtb	r4, r4
    a3a8:	7811      	ldrb	r1, [r2, #0]
    a3aa:	54e9      	strb	r1, [r5, r3]
    a3ac:	3201      	adds	r2, #1
    a3ae:	0023      	movs	r3, r4
        for (i = 0; i < 8; i++)
    a3b0:	42a0      	cmp	r0, r4
    a3b2:	d1f7      	bne.n	a3a4 <MiMAC_SendPacket+0x33c>
    a3b4:	e782      	b.n	a2bc <MiMAC_SendPacket+0x254>
		PDS_Store(PDS_OUTGOING_FRAME_COUNTER_ID);
    a3b6:	2001      	movs	r0, #1
    a3b8:	4b14      	ldr	r3, [pc, #80]	; (a40c <MiMAC_SendPacket+0x3a4>)
    a3ba:	4798      	blx	r3
    a3bc:	e79e      	b.n	a2fc <MiMAC_SendPacket+0x294>
    for (i = 0; i < MACPayloadLen; i++) // MIC added
    a3be:	0022      	movs	r2, r4
    a3c0:	e7b0      	b.n	a324 <MiMAC_SendPacket+0x2bc>
    a3c2:	46c0      	nop			; (mov r8, r8)
    a3c4:	2000048f 	.word	0x2000048f
    a3c8:	20002304 	.word	0x20002304
    a3cc:	20002358 	.word	0x20002358
    a3d0:	200021e4 	.word	0x200021e4
    a3d4:	0000ffff 	.word	0x0000ffff
    a3d8:	20002334 	.word	0x20002334
    a3dc:	00009cf9 	.word	0x00009cf9
    a3e0:	200021e1 	.word	0x200021e1
    a3e4:	200021e0 	.word	0x200021e0
    a3e8:	2000048c 	.word	0x2000048c
    a3ec:	200022e4 	.word	0x200022e4
    a3f0:	20002320 	.word	0x20002320
    a3f4:	20000498 	.word	0x20000498
    a3f8:	20000490 	.word	0x20000490
    a3fc:	20000494 	.word	0x20000494
    a400:	2000048e 	.word	0x2000048e
    a404:	0000aff9 	.word	0x0000aff9
    a408:	200022ec 	.word	0x200022ec
    a40c:	000098a5 	.word	0x000098a5

0000a410 <MiMAC_DiscardPacket>:
 *
 *****************************************************************************************/
void MiMAC_DiscardPacket(void)
{
	//re-enable buffer for next packets
	if (BankIndex < BANK_SIZE)
    a410:	4b04      	ldr	r3, [pc, #16]	; (a424 <MiMAC_DiscardPacket+0x14>)
    a412:	781b      	ldrb	r3, [r3, #0]
    a414:	2b03      	cmp	r3, #3
    a416:	d804      	bhi.n	a422 <MiMAC_DiscardPacket+0x12>
	{
		RxBuffer[BankIndex].PayloadLen = 0;
    a418:	021a      	lsls	r2, r3, #8
    a41a:	18d3      	adds	r3, r2, r3
    a41c:	2100      	movs	r1, #0
    a41e:	4a02      	ldr	r2, [pc, #8]	; (a428 <MiMAC_DiscardPacket+0x18>)
    a420:	5499      	strb	r1, [r3, r2]
	}
}
    a422:	4770      	bx	lr
    a424:	2000001b 	.word	0x2000001b
    a428:	20002464 	.word	0x20002464

0000a42c <PHY_DataConf>:
 *      None
 *
 *****************************************************************************************/
void PHY_DataConf(uint8_t status)
{
	DataRetryCount = 0;
    a42c:	2200      	movs	r2, #0
    a42e:	4b04      	ldr	r3, [pc, #16]	; (a440 <PHY_DataConf+0x14>)
    a430:	701a      	strb	r2, [r3, #0]
	dataStatus = (miwi_status_t)status;
    a432:	4b04      	ldr	r3, [pc, #16]	; (a444 <PHY_DataConf+0x18>)
    a434:	7018      	strb	r0, [r3, #0]
	dataConfAvailable = true;
    a436:	3201      	adds	r2, #1
    a438:	4b03      	ldr	r3, [pc, #12]	; (a448 <PHY_DataConf+0x1c>)
    a43a:	701a      	strb	r2, [r3, #0]
}
    a43c:	4770      	bx	lr
    a43e:	46c0      	nop			; (mov r8, r8)
    a440:	2000048d 	.word	0x2000048d
    a444:	20002330 	.word	0x20002330
    a448:	2000048f 	.word	0x2000048f

0000a44c <MiMAC_RetryPacket>:
{
    a44c:	b510      	push	{r4, lr}
	DataRetryCount++;
    a44e:	4a0b      	ldr	r2, [pc, #44]	; (a47c <MiMAC_RetryPacket+0x30>)
    a450:	7813      	ldrb	r3, [r2, #0]
    a452:	3301      	adds	r3, #1
    a454:	b2db      	uxtb	r3, r3
    a456:	7013      	strb	r3, [r2, #0]
	if (DataRetryCount < DATA_RETRY_ATTEMPT)
    a458:	2b02      	cmp	r3, #2
    a45a:	d904      	bls.n	a466 <MiMAC_RetryPacket+0x1a>
		PHY_DataConf(NO_ACK); // No Ack response
    a45c:	2003      	movs	r0, #3
    a45e:	4b08      	ldr	r3, [pc, #32]	; (a480 <MiMAC_RetryPacket+0x34>)
    a460:	4798      	blx	r3
	bool status = false;
    a462:	2000      	movs	r0, #0
}
    a464:	bd10      	pop	{r4, pc}
		AckReqData = 1;
    a466:	2201      	movs	r2, #1
    a468:	4b06      	ldr	r3, [pc, #24]	; (a484 <MiMAC_RetryPacket+0x38>)
    a46a:	701a      	strb	r2, [r3, #0]
		status = PHY_DataReq(packet);
    a46c:	4806      	ldr	r0, [pc, #24]	; (a488 <MiMAC_RetryPacket+0x3c>)
    a46e:	4b07      	ldr	r3, [pc, #28]	; (a48c <MiMAC_RetryPacket+0x40>)
    a470:	4798      	blx	r3
    a472:	1e43      	subs	r3, r0, #1
    a474:	4198      	sbcs	r0, r3
    a476:	b2c0      	uxtb	r0, r0
    a478:	e7f4      	b.n	a464 <MiMAC_RetryPacket+0x18>
    a47a:	46c0      	nop			; (mov r8, r8)
    a47c:	2000048d 	.word	0x2000048d
    a480:	0000a42d 	.word	0x0000a42d
    a484:	2000048c 	.word	0x2000048c
    a488:	200021e4 	.word	0x200021e4
    a48c:	0000aff9 	.word	0x0000aff9

0000a490 <MiMAC_Task>:

void MiMAC_Task(void)
{
    a490:	b510      	push	{r4, lr}
  PHY_TaskHandler();
    a492:	4b0b      	ldr	r3, [pc, #44]	; (a4c0 <MiMAC_Task+0x30>)
    a494:	4798      	blx	r3
  if(dataConfCallback && dataConfAvailable)
    a496:	4b0b      	ldr	r3, [pc, #44]	; (a4c4 <MiMAC_Task+0x34>)
    a498:	681b      	ldr	r3, [r3, #0]
    a49a:	2b00      	cmp	r3, #0
    a49c:	d003      	beq.n	a4a6 <MiMAC_Task+0x16>
    a49e:	4a0a      	ldr	r2, [pc, #40]	; (a4c8 <MiMAC_Task+0x38>)
    a4a0:	7812      	ldrb	r2, [r2, #0]
    a4a2:	2a00      	cmp	r2, #0
    a4a4:	d100      	bne.n	a4a8 <MiMAC_Task+0x18>
  {
	  dataConfAvailable = false;
	  dataConfCallback(dataHandle, dataStatus, dataPointer);
  }
}
    a4a6:	bd10      	pop	{r4, pc}
	  dataConfAvailable = false;
    a4a8:	2100      	movs	r1, #0
    a4aa:	4a07      	ldr	r2, [pc, #28]	; (a4c8 <MiMAC_Task+0x38>)
    a4ac:	7011      	strb	r1, [r2, #0]
	  dataConfCallback(dataHandle, dataStatus, dataPointer);
    a4ae:	4a07      	ldr	r2, [pc, #28]	; (a4cc <MiMAC_Task+0x3c>)
    a4b0:	6812      	ldr	r2, [r2, #0]
    a4b2:	4907      	ldr	r1, [pc, #28]	; (a4d0 <MiMAC_Task+0x40>)
    a4b4:	7809      	ldrb	r1, [r1, #0]
    a4b6:	4807      	ldr	r0, [pc, #28]	; (a4d4 <MiMAC_Task+0x44>)
    a4b8:	7800      	ldrb	r0, [r0, #0]
    a4ba:	4798      	blx	r3
}
    a4bc:	e7f3      	b.n	a4a6 <MiMAC_Task+0x16>
    a4be:	46c0      	nop			; (mov r8, r8)
    a4c0:	0000b0a1 	.word	0x0000b0a1
    a4c4:	20000490 	.word	0x20000490
    a4c8:	2000048f 	.word	0x2000048f
    a4cc:	20000498 	.word	0x20000498
    a4d0:	20002330 	.word	0x20002330
    a4d4:	20000494 	.word	0x20000494

0000a4d8 <MiMAC_ReceivedPacket>:
{
    a4d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    a4da:	46ce      	mov	lr, r9
    a4dc:	4647      	mov	r7, r8
    a4de:	b580      	push	{r7, lr}
    a4e0:	b089      	sub	sp, #36	; 0x24
	BankIndex = 0xFF;
    a4e2:	22ff      	movs	r2, #255	; 0xff
    a4e4:	4bc0      	ldr	r3, [pc, #768]	; (a7e8 <MiMAC_ReceivedPacket+0x310>)
    a4e6:	701a      	strb	r2, [r3, #0]
    a4e8:	4ac0      	ldr	r2, [pc, #768]	; (a7ec <MiMAC_ReceivedPacket+0x314>)
	for (i = 0; i < BANK_SIZE; i++)
    a4ea:	2300      	movs	r3, #0
		if(((AckReqData) || (FW_Stat))  && (RxBuffer[i].PayloadLen > 0))
    a4ec:	48c0      	ldr	r0, [pc, #768]	; (a7f0 <MiMAC_ReceivedPacket+0x318>)
			if(((RxBuffer[i].Payload[0] & 0x07) == PACKET_TYPE_ACK))
    a4ee:	2407      	movs	r4, #7
    a4f0:	e00c      	b.n	a50c <MiMAC_ReceivedPacket+0x34>
		if(((AckReqData) || (FW_Stat))  && (RxBuffer[i].PayloadLen > 0))
    a4f2:	7811      	ldrb	r1, [r2, #0]
    a4f4:	2900      	cmp	r1, #0
    a4f6:	d003      	beq.n	a500 <MiMAC_ReceivedPacket+0x28>
			if(((RxBuffer[i].Payload[0] & 0x07) == PACKET_TYPE_ACK))
    a4f8:	7891      	ldrb	r1, [r2, #2]
    a4fa:	4021      	ands	r1, r4
    a4fc:	2902      	cmp	r1, #2
    a4fe:	d00d      	beq.n	a51c <MiMAC_ReceivedPacket+0x44>
	for (i = 0; i < BANK_SIZE; i++)
    a500:	3301      	adds	r3, #1
    a502:	b2db      	uxtb	r3, r3
    a504:	3202      	adds	r2, #2
    a506:	32ff      	adds	r2, #255	; 0xff
    a508:	2b04      	cmp	r3, #4
    a50a:	d040      	beq.n	a58e <MiMAC_ReceivedPacket+0xb6>
		if(((AckReqData) || (FW_Stat))  && (RxBuffer[i].PayloadLen > 0))
    a50c:	7801      	ldrb	r1, [r0, #0]
    a50e:	2900      	cmp	r1, #0
    a510:	d1ef      	bne.n	a4f2 <MiMAC_ReceivedPacket+0x1a>
    a512:	49b8      	ldr	r1, [pc, #736]	; (a7f4 <MiMAC_ReceivedPacket+0x31c>)
    a514:	7809      	ldrb	r1, [r1, #0]
    a516:	2900      	cmp	r1, #0
    a518:	d0f2      	beq.n	a500 <MiMAC_ReceivedPacket+0x28>
    a51a:	e7ea      	b.n	a4f2 <MiMAC_ReceivedPacket+0x1a>
				BankIndex = i;
    a51c:	4ab2      	ldr	r2, [pc, #712]	; (a7e8 <MiMAC_ReceivedPacket+0x310>)
    a51e:	7013      	strb	r3, [r2, #0]
	if(BankIndex == 0xFF)
    a520:	2bff      	cmp	r3, #255	; 0xff
    a522:	d034      	beq.n	a58e <MiMAC_ReceivedPacket+0xb6>
	if (BankIndex < BANK_SIZE)
    a524:	4bb0      	ldr	r3, [pc, #704]	; (a7e8 <MiMAC_ReceivedPacket+0x310>)
    a526:	781b      	ldrb	r3, [r3, #0]
    a528:	2b03      	cmp	r3, #3
    a52a:	d900      	bls.n	a52e <MiMAC_ReceivedPacket+0x56>
    a52c:	e351      	b.n	abd2 <MiMAC_ReceivedPacket+0x6fa>
		if ((RxBuffer[BankIndex].Payload[0] & 0x40) == 0)
    a52e:	0219      	lsls	r1, r3, #8
    a530:	18c9      	adds	r1, r1, r3
    a532:	4aae      	ldr	r2, [pc, #696]	; (a7ec <MiMAC_ReceivedPacket+0x314>)
    a534:	1852      	adds	r2, r2, r1
    a536:	7894      	ldrb	r4, [r2, #2]
    a538:	2040      	movs	r0, #64	; 0x40
    a53a:	4004      	ands	r4, r0
		MACRxPacket.flags.Val = 0;
    a53c:	49ae      	ldr	r1, [pc, #696]	; (a7f8 <MiMAC_ReceivedPacket+0x320>)
    a53e:	2000      	movs	r0, #0
    a540:	7008      	strb	r0, [r1, #0]
		MACRxPacket.altSourceAddress = false;
    a542:	73c8      	strb	r0, [r1, #15]
		addrMode = RxBuffer[BankIndex].Payload[1] & 0xCC;
    a544:	78d2      	ldrb	r2, [r2, #3]
    a546:	2133      	movs	r1, #51	; 0x33
    a548:	438a      	bics	r2, r1
		switch (addrMode)
    a54a:	b2d1      	uxtb	r1, r2
    a54c:	2988      	cmp	r1, #136	; 0x88
    a54e:	d100      	bne.n	a552 <MiMAC_ReceivedPacket+0x7a>
    a550:	e164      	b.n	a81c <MiMAC_ReceivedPacket+0x344>
    a552:	d936      	bls.n	a5c2 <MiMAC_ReceivedPacket+0xea>
    a554:	b2d1      	uxtb	r1, r2
    a556:	29c8      	cmp	r1, #200	; 0xc8
    a558:	d100      	bne.n	a55c <MiMAC_ReceivedPacket+0x84>
    a55a:	e085      	b.n	a668 <MiMAC_ReceivedPacket+0x190>
    a55c:	29cc      	cmp	r1, #204	; 0xcc
    a55e:	d100      	bne.n	a562 <MiMAC_ReceivedPacket+0x8a>
    a560:	e0ce      	b.n	a700 <MiMAC_ReceivedPacket+0x228>
    a562:	298c      	cmp	r1, #140	; 0x8c
    a564:	d100      	bne.n	a568 <MiMAC_ReceivedPacket+0x90>
    a566:	e1c6      	b.n	a8f6 <MiMAC_ReceivedPacket+0x41e>
			MiMAC_DiscardPacket();
    a568:	4ba4      	ldr	r3, [pc, #656]	; (a7fc <MiMAC_ReceivedPacket+0x324>)
    a56a:	4798      	blx	r3
			if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a56c:	4b9e      	ldr	r3, [pc, #632]	; (a7e8 <MiMAC_ReceivedPacket+0x310>)
    a56e:	781a      	ldrb	r2, [r3, #0]
    a570:	0213      	lsls	r3, r2, #8
    a572:	189a      	adds	r2, r3, r2
    a574:	4b9d      	ldr	r3, [pc, #628]	; (a7ec <MiMAC_ReceivedPacket+0x314>)
    a576:	189b      	adds	r3, r3, r2
    a578:	789b      	ldrb	r3, [r3, #2]
			return false;
    a57a:	2400      	movs	r4, #0
			if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a57c:	069b      	lsls	r3, r3, #26
    a57e:	d51a      	bpl.n	a5b6 <MiMAC_ReceivedPacket+0xde>
				MiRadioReceiveParam.action = RECEIVE_START;					
    a580:	a807      	add	r0, sp, #28
    a582:	2300      	movs	r3, #0
    a584:	7003      	strb	r3, [r0, #0]
				MiRadioReceiveParam.rxWindowSize = 0;
    a586:	8043      	strh	r3, [r0, #2]
				RADIO_Receive(&MiRadioReceiveParam);
    a588:	4b9d      	ldr	r3, [pc, #628]	; (a800 <MiMAC_ReceivedPacket+0x328>)
    a58a:	4798      	blx	r3
    a58c:	e013      	b.n	a5b6 <MiMAC_ReceivedPacket+0xde>
	for (i = 0; i < BANK_SIZE; i++)
    a58e:	2300      	movs	r3, #0
			if ((RxBuffer[i].PayloadLen > 0) && (!FW_Stat))
    a590:	4996      	ldr	r1, [pc, #600]	; (a7ec <MiMAC_ReceivedPacket+0x314>)
		for (i = 0; i < BANK_SIZE; i++)
    a592:	489c      	ldr	r0, [pc, #624]	; (a804 <MiMAC_ReceivedPacket+0x32c>)
    a594:	e003      	b.n	a59e <MiMAC_ReceivedPacket+0xc6>
    a596:	3302      	adds	r3, #2
    a598:	33ff      	adds	r3, #255	; 0xff
    a59a:	4283      	cmp	r3, r0
    a59c:	d00a      	beq.n	a5b4 <MiMAC_ReceivedPacket+0xdc>
    a59e:	b2dc      	uxtb	r4, r3
			if ((RxBuffer[i].PayloadLen > 0) && (!FW_Stat))
    a5a0:	5cca      	ldrb	r2, [r1, r3]
    a5a2:	2a00      	cmp	r2, #0
    a5a4:	d0f7      	beq.n	a596 <MiMAC_ReceivedPacket+0xbe>
    a5a6:	4a93      	ldr	r2, [pc, #588]	; (a7f4 <MiMAC_ReceivedPacket+0x31c>)
    a5a8:	7812      	ldrb	r2, [r2, #0]
    a5aa:	2a00      	cmp	r2, #0
    a5ac:	d1f3      	bne.n	a596 <MiMAC_ReceivedPacket+0xbe>
				BankIndex = i;
    a5ae:	4b8e      	ldr	r3, [pc, #568]	; (a7e8 <MiMAC_ReceivedPacket+0x310>)
    a5b0:	701c      	strb	r4, [r3, #0]
				break;
    a5b2:	e7b7      	b.n	a524 <MiMAC_ReceivedPacket+0x4c>
	return false;
    a5b4:	2400      	movs	r4, #0
}
    a5b6:	0020      	movs	r0, r4
    a5b8:	b009      	add	sp, #36	; 0x24
    a5ba:	bc0c      	pop	{r2, r3}
    a5bc:	4690      	mov	r8, r2
    a5be:	4699      	mov	r9, r3
    a5c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (addrMode)
    a5c2:	2a08      	cmp	r2, #8
    a5c4:	d100      	bne.n	a5c8 <MiMAC_ReceivedPacket+0xf0>
    a5c6:	e1e4      	b.n	a992 <MiMAC_ReceivedPacket+0x4ba>
    a5c8:	2980      	cmp	r1, #128	; 0x80
    a5ca:	d1cd      	bne.n	a568 <MiMAC_ReceivedPacket+0x90>
				MACRxPacket.flags.bits.broadcast = 1;
    a5cc:	4a8a      	ldr	r2, [pc, #552]	; (a7f8 <MiMAC_ReceivedPacket+0x320>)
    a5ce:	7811      	ldrb	r1, [r2, #0]
    a5d0:	2004      	movs	r0, #4
    a5d2:	4301      	orrs	r1, r0
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    a5d4:	2080      	movs	r0, #128	; 0x80
    a5d6:	4240      	negs	r0, r0
    a5d8:	4301      	orrs	r1, r0
    a5da:	7011      	strb	r1, [r2, #0]
				MACRxPacket.altSourceAddress = true;
    a5dc:	2101      	movs	r1, #1
    a5de:	73d1      	strb	r1, [r2, #15]
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    a5e0:	4882      	ldr	r0, [pc, #520]	; (a7ec <MiMAC_ReceivedPacket+0x314>)
    a5e2:	021c      	lsls	r4, r3, #8
    a5e4:	18e4      	adds	r4, r4, r3
    a5e6:	1901      	adds	r1, r0, r4
    a5e8:	794d      	ldrb	r5, [r1, #5]
    a5ea:	7415      	strb	r5, [r2, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    a5ec:	7989      	ldrb	r1, [r1, #6]
    a5ee:	7451      	strb	r1, [r2, #17]
    a5f0:	0023      	movs	r3, r4
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[5]);
    a5f2:	1de1      	adds	r1, r4, #7
    a5f4:	1809      	adds	r1, r1, r0
    a5f6:	6051      	str	r1, [r2, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 11;
    a5f8:	5c21      	ldrb	r1, [r4, r0]
    a5fa:	390b      	subs	r1, #11
    a5fc:	7311      	strb	r1, [r2, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    a5fe:	3309      	adds	r3, #9
    a600:	181b      	adds	r3, r3, r0
    a602:	6093      	str	r3, [r2, #8]
		if (RxBuffer[BankIndex].Payload[0] & 0x08)
    a604:	4b78      	ldr	r3, [pc, #480]	; (a7e8 <MiMAC_ReceivedPacket+0x310>)
    a606:	781a      	ldrb	r2, [r3, #0]
    a608:	0213      	lsls	r3, r2, #8
    a60a:	189a      	adds	r2, r3, r2
    a60c:	4b77      	ldr	r3, [pc, #476]	; (a7ec <MiMAC_ReceivedPacket+0x314>)
    a60e:	189b      	adds	r3, r3, r2
    a610:	789b      	ldrb	r3, [r3, #2]
    a612:	071b      	lsls	r3, r3, #28
    a614:	d500      	bpl.n	a618 <MiMAC_ReceivedPacket+0x140>
    a616:	e1dd      	b.n	a9d4 <MiMAC_ReceivedPacket+0x4fc>
		switch (RxBuffer[BankIndex].Payload[0] & 0x07) // check frame type
    a618:	4b73      	ldr	r3, [pc, #460]	; (a7e8 <MiMAC_ReceivedPacket+0x310>)
    a61a:	7818      	ldrb	r0, [r3, #0]
    a61c:	0202      	lsls	r2, r0, #8
    a61e:	1812      	adds	r2, r2, r0
    a620:	4b72      	ldr	r3, [pc, #456]	; (a7ec <MiMAC_ReceivedPacket+0x314>)
    a622:	189b      	adds	r3, r3, r2
    a624:	7899      	ldrb	r1, [r3, #2]
    a626:	2307      	movs	r3, #7
    a628:	400b      	ands	r3, r1
    a62a:	2b01      	cmp	r3, #1
    a62c:	d100      	bne.n	a630 <MiMAC_ReceivedPacket+0x158>
    a62e:	e251      	b.n	aad4 <MiMAC_ReceivedPacket+0x5fc>
    a630:	2b00      	cmp	r3, #0
    a632:	d100      	bne.n	a636 <MiMAC_ReceivedPacket+0x15e>
    a634:	e286      	b.n	ab44 <MiMAC_ReceivedPacket+0x66c>
    a636:	2b02      	cmp	r3, #2
    a638:	d100      	bne.n	a63c <MiMAC_ReceivedPacket+0x164>
    a63a:	e289      	b.n	ab50 <MiMAC_ReceivedPacket+0x678>
    a63c:	2b03      	cmp	r3, #3
    a63e:	d100      	bne.n	a642 <MiMAC_ReceivedPacket+0x16a>
    a640:	e278      	b.n	ab34 <MiMAC_ReceivedPacket+0x65c>
			MiMAC_DiscardPacket();
    a642:	4b6e      	ldr	r3, [pc, #440]	; (a7fc <MiMAC_ReceivedPacket+0x324>)
    a644:	4798      	blx	r3
			if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a646:	4b68      	ldr	r3, [pc, #416]	; (a7e8 <MiMAC_ReceivedPacket+0x310>)
    a648:	781a      	ldrb	r2, [r3, #0]
    a64a:	0213      	lsls	r3, r2, #8
    a64c:	189a      	adds	r2, r3, r2
    a64e:	4b67      	ldr	r3, [pc, #412]	; (a7ec <MiMAC_ReceivedPacket+0x314>)
    a650:	189b      	adds	r3, r3, r2
    a652:	789b      	ldrb	r3, [r3, #2]
			return false;
    a654:	2400      	movs	r4, #0
			if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a656:	069b      	lsls	r3, r3, #26
    a658:	d5ad      	bpl.n	a5b6 <MiMAC_ReceivedPacket+0xde>
				MiRadioReceiveParam.action = RECEIVE_START;	
    a65a:	a807      	add	r0, sp, #28
    a65c:	2300      	movs	r3, #0
    a65e:	7003      	strb	r3, [r0, #0]
				MiRadioReceiveParam.rxWindowSize = 0;
    a660:	8043      	strh	r3, [r0, #2]
				RADIO_Receive(&MiRadioReceiveParam);
    a662:	4b67      	ldr	r3, [pc, #412]	; (a800 <MiMAC_ReceivedPacket+0x328>)
    a664:	4798      	blx	r3
    a666:	e7a6      	b.n	a5b6 <MiMAC_ReceivedPacket+0xde>
			if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    a668:	0219      	lsls	r1, r3, #8
    a66a:	18c9      	adds	r1, r1, r3
    a66c:	4a5f      	ldr	r2, [pc, #380]	; (a7ec <MiMAC_ReceivedPacket+0x314>)
    a66e:	1852      	adds	r2, r2, r1
    a670:	79d0      	ldrb	r0, [r2, #7]
    a672:	28ff      	cmp	r0, #255	; 0xff
    a674:	d01d      	beq.n	a6b2 <MiMAC_ReceivedPacket+0x1da>
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    a676:	4960      	ldr	r1, [pc, #384]	; (a7f8 <MiMAC_ReceivedPacket+0x320>)
    a678:	780d      	ldrb	r5, [r1, #0]
    a67a:	2280      	movs	r2, #128	; 0x80
    a67c:	4252      	negs	r2, r2
    a67e:	432a      	orrs	r2, r5
    a680:	700a      	strb	r2, [r1, #0]
			if (bIntraPAN) // check if it is intraPAN
    a682:	2c00      	cmp	r4, #0
    a684:	d000      	beq.n	a688 <MiMAC_ReceivedPacket+0x1b0>
    a686:	e2a6      	b.n	abd6 <MiMAC_ReceivedPacket+0x6fe>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    a688:	495b      	ldr	r1, [pc, #364]	; (a7f8 <MiMAC_ReceivedPacket+0x320>)
    a68a:	4858      	ldr	r0, [pc, #352]	; (a7ec <MiMAC_ReceivedPacket+0x314>)
    a68c:	021c      	lsls	r4, r3, #8
    a68e:	18e4      	adds	r4, r4, r3
    a690:	1902      	adds	r2, r0, r4
    a692:	7a55      	ldrb	r5, [r2, #9]
    a694:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    a696:	7a92      	ldrb	r2, [r2, #10]
    a698:	744a      	strb	r2, [r1, #17]
    a69a:	0023      	movs	r3, r4
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    a69c:	0022      	movs	r2, r4
    a69e:	320b      	adds	r2, #11
    a6a0:	1812      	adds	r2, r2, r0
    a6a2:	604a      	str	r2, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    a6a4:	5c22      	ldrb	r2, [r4, r0]
    a6a6:	3a15      	subs	r2, #21
    a6a8:	730a      	strb	r2, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    a6aa:	3313      	adds	r3, #19
    a6ac:	181b      	adds	r3, r3, r0
    a6ae:	608b      	str	r3, [r1, #8]
    a6b0:	e042      	b.n	a738 <MiMAC_ReceivedPacket+0x260>
			if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    a6b2:	0219      	lsls	r1, r3, #8
    a6b4:	18c9      	adds	r1, r1, r3
    a6b6:	4a4d      	ldr	r2, [pc, #308]	; (a7ec <MiMAC_ReceivedPacket+0x314>)
    a6b8:	1852      	adds	r2, r2, r1
    a6ba:	7a12      	ldrb	r2, [r2, #8]
    a6bc:	2aff      	cmp	r2, #255	; 0xff
    a6be:	d1da      	bne.n	a676 <MiMAC_ReceivedPacket+0x19e>
				MACRxPacket.flags.bits.broadcast = 1;
    a6c0:	494d      	ldr	r1, [pc, #308]	; (a7f8 <MiMAC_ReceivedPacket+0x320>)
    a6c2:	780a      	ldrb	r2, [r1, #0]
    a6c4:	2004      	movs	r0, #4
    a6c6:	4302      	orrs	r2, r0
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    a6c8:	2080      	movs	r0, #128	; 0x80
    a6ca:	4240      	negs	r0, r0
    a6cc:	4302      	orrs	r2, r0
    a6ce:	700a      	strb	r2, [r1, #0]
			if (bIntraPAN) // check if it is intraPAN
    a6d0:	2c00      	cmp	r4, #0
    a6d2:	d000      	beq.n	a6d6 <MiMAC_ReceivedPacket+0x1fe>
    a6d4:	e28e      	b.n	abf4 <MiMAC_ReceivedPacket+0x71c>
    a6d6:	e7d7      	b.n	a688 <MiMAC_ReceivedPacket+0x1b0>
					MiMAC_DiscardPacket();
    a6d8:	4b48      	ldr	r3, [pc, #288]	; (a7fc <MiMAC_ReceivedPacket+0x324>)
    a6da:	4798      	blx	r3
					if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a6dc:	4b42      	ldr	r3, [pc, #264]	; (a7e8 <MiMAC_ReceivedPacket+0x310>)
    a6de:	781a      	ldrb	r2, [r3, #0]
    a6e0:	0213      	lsls	r3, r2, #8
    a6e2:	189a      	adds	r2, r3, r2
    a6e4:	4b41      	ldr	r3, [pc, #260]	; (a7ec <MiMAC_ReceivedPacket+0x314>)
    a6e6:	189b      	adds	r3, r3, r2
    a6e8:	789b      	ldrb	r3, [r3, #2]
					return false;
    a6ea:	2400      	movs	r4, #0
					if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a6ec:	069b      	lsls	r3, r3, #26
    a6ee:	d400      	bmi.n	a6f2 <MiMAC_ReceivedPacket+0x21a>
    a6f0:	e761      	b.n	a5b6 <MiMAC_ReceivedPacket+0xde>
						MiRadioReceiveParam.action = RECEIVE_START;					
    a6f2:	a807      	add	r0, sp, #28
    a6f4:	2300      	movs	r3, #0
    a6f6:	7003      	strb	r3, [r0, #0]
						MiRadioReceiveParam.rxWindowSize = 0;
    a6f8:	8043      	strh	r3, [r0, #2]
						RADIO_Receive(&MiRadioReceiveParam);
    a6fa:	4b41      	ldr	r3, [pc, #260]	; (a800 <MiMAC_ReceivedPacket+0x328>)
    a6fc:	4798      	blx	r3
    a6fe:	e75a      	b.n	a5b6 <MiMAC_ReceivedPacket+0xde>
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    a700:	493d      	ldr	r1, [pc, #244]	; (a7f8 <MiMAC_ReceivedPacket+0x320>)
    a702:	7808      	ldrb	r0, [r1, #0]
    a704:	2280      	movs	r2, #128	; 0x80
    a706:	4252      	negs	r2, r2
    a708:	4302      	orrs	r2, r0
    a70a:	700a      	strb	r2, [r1, #0]
			if (bIntraPAN) // check if it is intraPAN
    a70c:	2c00      	cmp	r4, #0
    a70e:	d137      	bne.n	a780 <MiMAC_ReceivedPacket+0x2a8>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[13];
    a710:	4939      	ldr	r1, [pc, #228]	; (a7f8 <MiMAC_ReceivedPacket+0x320>)
    a712:	4836      	ldr	r0, [pc, #216]	; (a7ec <MiMAC_ReceivedPacket+0x314>)
    a714:	021c      	lsls	r4, r3, #8
    a716:	18e4      	adds	r4, r4, r3
    a718:	1902      	adds	r2, r0, r4
    a71a:	7bd5      	ldrb	r5, [r2, #15]
    a71c:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[14];
    a71e:	7c12      	ldrb	r2, [r2, #16]
    a720:	744a      	strb	r2, [r1, #17]
    a722:	0023      	movs	r3, r4
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[15]);
    a724:	0022      	movs	r2, r4
    a726:	3211      	adds	r2, #17
    a728:	1812      	adds	r2, r2, r0
    a72a:	604a      	str	r2, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 27;
    a72c:	5c22      	ldrb	r2, [r4, r0]
    a72e:	3a1b      	subs	r2, #27
    a730:	730a      	strb	r2, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[23]);
    a732:	3319      	adds	r3, #25
    a734:	181b      	adds	r3, r3, r0
    a736:	608b      	str	r3, [r1, #8]
		if (RxBuffer[BankIndex].Payload[0] & 0x08)
    a738:	4b2b      	ldr	r3, [pc, #172]	; (a7e8 <MiMAC_ReceivedPacket+0x310>)
    a73a:	781a      	ldrb	r2, [r3, #0]
    a73c:	0213      	lsls	r3, r2, #8
    a73e:	189a      	adds	r2, r3, r2
    a740:	4b2a      	ldr	r3, [pc, #168]	; (a7ec <MiMAC_ReceivedPacket+0x314>)
    a742:	189b      	adds	r3, r3, r2
    a744:	789b      	ldrb	r3, [r3, #2]
    a746:	071b      	lsls	r3, r3, #28
    a748:	d400      	bmi.n	a74c <MiMAC_ReceivedPacket+0x274>
    a74a:	e765      	b.n	a618 <MiMAC_ReceivedPacket+0x140>
			FrameCounter.v[0] = MACRxPacket.Payload[0];
    a74c:	4b2a      	ldr	r3, [pc, #168]	; (a7f8 <MiMAC_ReceivedPacket+0x320>)
    a74e:	689b      	ldr	r3, [r3, #8]
			FrameCounter.v[1] = MACRxPacket.Payload[1];
    a750:	785a      	ldrb	r2, [r3, #1]
    a752:	0212      	lsls	r2, r2, #8
    a754:	7819      	ldrb	r1, [r3, #0]
    a756:	4311      	orrs	r1, r2
    a758:	4689      	mov	r9, r1
			FrameCounter.v[2] = MACRxPacket.Payload[2];
    a75a:	789a      	ldrb	r2, [r3, #2]
    a75c:	0412      	lsls	r2, r2, #16
    a75e:	492a      	ldr	r1, [pc, #168]	; (a808 <MiMAC_ReceivedPacket+0x330>)
    a760:	4648      	mov	r0, r9
    a762:	4001      	ands	r1, r0
    a764:	4311      	orrs	r1, r2
			FrameCounter.v[3] = MACRxPacket.Payload[3];
    a766:	78db      	ldrb	r3, [r3, #3]
    a768:	061b      	lsls	r3, r3, #24
    a76a:	020a      	lsls	r2, r1, #8
    a76c:	0a12      	lsrs	r2, r2, #8
    a76e:	431a      	orrs	r2, r3
    a770:	4691      	mov	r9, r2
    a772:	4f26      	ldr	r7, [pc, #152]	; (a80c <MiMAC_ReceivedPacket+0x334>)
    a774:	2500      	movs	r5, #0
			for (i = 0; i < CONNECTION_SIZE; i++)
    a776:	2400      	movs	r4, #0
				if ((ConnectionTable[i].status.bits.isValid) &&
    a778:	4e25      	ldr	r6, [pc, #148]	; (a810 <MiMAC_ReceivedPacket+0x338>)
				isSameAddress(ConnectionTable[i].Address, MACRxPacket.SourceAddress))
    a77a:	4b1f      	ldr	r3, [pc, #124]	; (a7f8 <MiMAC_ReceivedPacket+0x320>)
    a77c:	4698      	mov	r8, r3
    a77e:	e143      	b.n	aa08 <MiMAC_ReceivedPacket+0x530>
				if(!(isSameAddress((uint8_t *)&DevIEEEaddr, &RxBuffer[BankIndex].Payload[5])))
    a780:	0219      	lsls	r1, r3, #8
    a782:	18c9      	adds	r1, r1, r3
    a784:	3107      	adds	r1, #7
    a786:	4b19      	ldr	r3, [pc, #100]	; (a7ec <MiMAC_ReceivedPacket+0x314>)
    a788:	18c9      	adds	r1, r1, r3
    a78a:	4822      	ldr	r0, [pc, #136]	; (a814 <MiMAC_ReceivedPacket+0x33c>)
    a78c:	4b22      	ldr	r3, [pc, #136]	; (a818 <MiMAC_ReceivedPacket+0x340>)
    a78e:	4798      	blx	r3
    a790:	1e04      	subs	r4, r0, #0
    a792:	d015      	beq.n	a7c0 <MiMAC_ReceivedPacket+0x2e8>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    a794:	4b14      	ldr	r3, [pc, #80]	; (a7e8 <MiMAC_ReceivedPacket+0x310>)
    a796:	7818      	ldrb	r0, [r3, #0]
    a798:	4a17      	ldr	r2, [pc, #92]	; (a7f8 <MiMAC_ReceivedPacket+0x320>)
    a79a:	4914      	ldr	r1, [pc, #80]	; (a7ec <MiMAC_ReceivedPacket+0x314>)
    a79c:	0203      	lsls	r3, r0, #8
    a79e:	181b      	adds	r3, r3, r0
    a7a0:	18c8      	adds	r0, r1, r3
    a7a2:	7944      	ldrb	r4, [r0, #5]
    a7a4:	7414      	strb	r4, [r2, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    a7a6:	7980      	ldrb	r0, [r0, #6]
    a7a8:	7450      	strb	r0, [r2, #17]
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[13]);
    a7aa:	0018      	movs	r0, r3
    a7ac:	300f      	adds	r0, #15
    a7ae:	1840      	adds	r0, r0, r1
    a7b0:	6050      	str	r0, [r2, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 25;
    a7b2:	5c58      	ldrb	r0, [r3, r1]
    a7b4:	3819      	subs	r0, #25
    a7b6:	7310      	strb	r0, [r2, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[21]);
    a7b8:	3317      	adds	r3, #23
    a7ba:	185b      	adds	r3, r3, r1
    a7bc:	6093      	str	r3, [r2, #8]
    a7be:	e7bb      	b.n	a738 <MiMAC_ReceivedPacket+0x260>
					MiMAC_DiscardPacket();
    a7c0:	4b0e      	ldr	r3, [pc, #56]	; (a7fc <MiMAC_ReceivedPacket+0x324>)
    a7c2:	4798      	blx	r3
					if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a7c4:	4b08      	ldr	r3, [pc, #32]	; (a7e8 <MiMAC_ReceivedPacket+0x310>)
    a7c6:	781a      	ldrb	r2, [r3, #0]
    a7c8:	0213      	lsls	r3, r2, #8
    a7ca:	189a      	adds	r2, r3, r2
    a7cc:	4b07      	ldr	r3, [pc, #28]	; (a7ec <MiMAC_ReceivedPacket+0x314>)
    a7ce:	189b      	adds	r3, r3, r2
    a7d0:	789b      	ldrb	r3, [r3, #2]
    a7d2:	069b      	lsls	r3, r3, #26
    a7d4:	d400      	bmi.n	a7d8 <MiMAC_ReceivedPacket+0x300>
    a7d6:	e6ee      	b.n	a5b6 <MiMAC_ReceivedPacket+0xde>
						MiRadioReceiveParam.action = RECEIVE_START;					
    a7d8:	a807      	add	r0, sp, #28
    a7da:	2300      	movs	r3, #0
    a7dc:	7003      	strb	r3, [r0, #0]
						MiRadioReceiveParam.rxWindowSize = 0;
    a7de:	8043      	strh	r3, [r0, #2]
						RADIO_Receive(&MiRadioReceiveParam);
    a7e0:	4b07      	ldr	r3, [pc, #28]	; (a800 <MiMAC_ReceivedPacket+0x328>)
    a7e2:	4798      	blx	r3
    a7e4:	e6e7      	b.n	a5b6 <MiMAC_ReceivedPacket+0xde>
    a7e6:	46c0      	nop			; (mov r8, r8)
    a7e8:	2000001b 	.word	0x2000001b
    a7ec:	20002464 	.word	0x20002464
    a7f0:	2000048c 	.word	0x2000048c
    a7f4:	2000049e 	.word	0x2000049e
    a7f8:	20003030 	.word	0x20003030
    a7fc:	0000a411 	.word	0x0000a411
    a800:	000105e5 	.word	0x000105e5
    a804:	00000404 	.word	0x00000404
    a808:	ff00ffff 	.word	0xff00ffff
    a80c:	20002ef0 	.word	0x20002ef0
    a810:	20002eec 	.word	0x20002eec
    a814:	2000245c 	.word	0x2000245c
    a818:	0000b7a9 	.word	0x0000b7a9
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    a81c:	0219      	lsls	r1, r3, #8
    a81e:	18c9      	adds	r1, r1, r3
    a820:	4ad4      	ldr	r2, [pc, #848]	; (ab74 <MiMAC_ReceivedPacket+0x69c>)
    a822:	1852      	adds	r2, r2, r1
    a824:	79d0      	ldrb	r0, [r2, #7]
    a826:	28ff      	cmp	r0, #255	; 0xff
    a828:	d01e      	beq.n	a868 <MiMAC_ReceivedPacket+0x390>
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    a82a:	4ad3      	ldr	r2, [pc, #844]	; (ab78 <MiMAC_ReceivedPacket+0x6a0>)
    a82c:	7815      	ldrb	r5, [r2, #0]
    a82e:	2180      	movs	r1, #128	; 0x80
    a830:	4249      	negs	r1, r1
    a832:	4329      	orrs	r1, r5
    a834:	7011      	strb	r1, [r2, #0]
				MACRxPacket.altSourceAddress = true;
    a836:	2101      	movs	r1, #1
    a838:	73d1      	strb	r1, [r2, #15]
				if (bIntraPAN == false)
    a83a:	2c00      	cmp	r4, #0
    a83c:	d121      	bne.n	a882 <MiMAC_ReceivedPacket+0x3aa>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    a83e:	0011      	movs	r1, r2
    a840:	48cc      	ldr	r0, [pc, #816]	; (ab74 <MiMAC_ReceivedPacket+0x69c>)
    a842:	021c      	lsls	r4, r3, #8
    a844:	18e4      	adds	r4, r4, r3
    a846:	1902      	adds	r2, r0, r4
    a848:	7a55      	ldrb	r5, [r2, #9]
    a84a:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    a84c:	7a92      	ldrb	r2, [r2, #10]
    a84e:	744a      	strb	r2, [r1, #17]
    a850:	0023      	movs	r3, r4
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    a852:	0022      	movs	r2, r4
    a854:	320b      	adds	r2, #11
    a856:	1812      	adds	r2, r2, r0
    a858:	604a      	str	r2, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 15;
    a85a:	5c22      	ldrb	r2, [r4, r0]
    a85c:	3a0f      	subs	r2, #15
    a85e:	730a      	strb	r2, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[11]);
    a860:	330d      	adds	r3, #13
    a862:	181b      	adds	r3, r3, r0
    a864:	608b      	str	r3, [r1, #8]
    a866:	e6cd      	b.n	a604 <MiMAC_ReceivedPacket+0x12c>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    a868:	0219      	lsls	r1, r3, #8
    a86a:	18c9      	adds	r1, r1, r3
    a86c:	4ac1      	ldr	r2, [pc, #772]	; (ab74 <MiMAC_ReceivedPacket+0x69c>)
    a86e:	1852      	adds	r2, r2, r1
    a870:	7a12      	ldrb	r2, [r2, #8]
    a872:	2aff      	cmp	r2, #255	; 0xff
    a874:	d1d9      	bne.n	a82a <MiMAC_ReceivedPacket+0x352>
					MACRxPacket.flags.bits.broadcast = 1;
    a876:	49c0      	ldr	r1, [pc, #768]	; (ab78 <MiMAC_ReceivedPacket+0x6a0>)
    a878:	780a      	ldrb	r2, [r1, #0]
    a87a:	2504      	movs	r5, #4
    a87c:	432a      	orrs	r2, r5
    a87e:	700a      	strb	r2, [r1, #0]
    a880:	e7d3      	b.n	a82a <MiMAC_ReceivedPacket+0x352>
					if (!(((RxBuffer[BankIndex].Payload[5] == 0xFF) & (RxBuffer[BankIndex].Payload[6] == 0xFF)) ||((RxBuffer[BankIndex].Payload[5] == DevShortAddress[0]) & (RxBuffer[BankIndex].Payload[6] == DevShortAddress[1]))) )
    a882:	0219      	lsls	r1, r3, #8
    a884:	18c9      	adds	r1, r1, r3
    a886:	4abb      	ldr	r2, [pc, #748]	; (ab74 <MiMAC_ReceivedPacket+0x69c>)
    a888:	1852      	adds	r2, r2, r1
    a88a:	7a12      	ldrb	r2, [r2, #8]
    a88c:	28ff      	cmp	r0, #255	; 0xff
    a88e:	d116      	bne.n	a8be <MiMAC_ReceivedPacket+0x3e6>
    a890:	2aff      	cmp	r2, #255	; 0xff
    a892:	d114      	bne.n	a8be <MiMAC_ReceivedPacket+0x3e6>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    a894:	49b8      	ldr	r1, [pc, #736]	; (ab78 <MiMAC_ReceivedPacket+0x6a0>)
    a896:	48b7      	ldr	r0, [pc, #732]	; (ab74 <MiMAC_ReceivedPacket+0x69c>)
    a898:	021c      	lsls	r4, r3, #8
    a89a:	18e4      	adds	r4, r4, r3
    a89c:	1902      	adds	r2, r0, r4
    a89e:	7955      	ldrb	r5, [r2, #5]
    a8a0:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    a8a2:	7992      	ldrb	r2, [r2, #6]
    a8a4:	744a      	strb	r2, [r1, #17]
    a8a6:	0023      	movs	r3, r4
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    a8a8:	0022      	movs	r2, r4
    a8aa:	3209      	adds	r2, #9
    a8ac:	1812      	adds	r2, r2, r0
    a8ae:	604a      	str	r2, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 13;
    a8b0:	5c22      	ldrb	r2, [r4, r0]
    a8b2:	3a0d      	subs	r2, #13
    a8b4:	730a      	strb	r2, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[9]);
    a8b6:	330b      	adds	r3, #11
    a8b8:	181b      	adds	r3, r3, r0
    a8ba:	608b      	str	r3, [r1, #8]
    a8bc:	e6a2      	b.n	a604 <MiMAC_ReceivedPacket+0x12c>
					if (!(((RxBuffer[BankIndex].Payload[5] == 0xFF) & (RxBuffer[BankIndex].Payload[6] == 0xFF)) ||((RxBuffer[BankIndex].Payload[5] == DevShortAddress[0]) & (RxBuffer[BankIndex].Payload[6] == DevShortAddress[1]))) )
    a8be:	49af      	ldr	r1, [pc, #700]	; (ab7c <MiMAC_ReceivedPacket+0x6a4>)
    a8c0:	7809      	ldrb	r1, [r1, #0]
    a8c2:	4281      	cmp	r1, r0
    a8c4:	d103      	bne.n	a8ce <MiMAC_ReceivedPacket+0x3f6>
    a8c6:	49ad      	ldr	r1, [pc, #692]	; (ab7c <MiMAC_ReceivedPacket+0x6a4>)
    a8c8:	7849      	ldrb	r1, [r1, #1]
    a8ca:	4291      	cmp	r1, r2
    a8cc:	d0e2      	beq.n	a894 <MiMAC_ReceivedPacket+0x3bc>
						MiMAC_DiscardPacket();
    a8ce:	4bac      	ldr	r3, [pc, #688]	; (ab80 <MiMAC_ReceivedPacket+0x6a8>)
    a8d0:	4798      	blx	r3
						if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a8d2:	4bac      	ldr	r3, [pc, #688]	; (ab84 <MiMAC_ReceivedPacket+0x6ac>)
    a8d4:	781a      	ldrb	r2, [r3, #0]
    a8d6:	0213      	lsls	r3, r2, #8
    a8d8:	189a      	adds	r2, r3, r2
    a8da:	4ba6      	ldr	r3, [pc, #664]	; (ab74 <MiMAC_ReceivedPacket+0x69c>)
    a8dc:	189b      	adds	r3, r3, r2
    a8de:	789b      	ldrb	r3, [r3, #2]
						return false;
    a8e0:	2400      	movs	r4, #0
						if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a8e2:	069b      	lsls	r3, r3, #26
    a8e4:	d400      	bmi.n	a8e8 <MiMAC_ReceivedPacket+0x410>
    a8e6:	e666      	b.n	a5b6 <MiMAC_ReceivedPacket+0xde>
							MiRadioReceiveParam.action = RECEIVE_START;	
    a8e8:	a807      	add	r0, sp, #28
    a8ea:	2300      	movs	r3, #0
    a8ec:	7003      	strb	r3, [r0, #0]
							MiRadioReceiveParam.rxWindowSize = 0;
    a8ee:	8043      	strh	r3, [r0, #2]
							RADIO_Receive(&MiRadioReceiveParam);
    a8f0:	4ba5      	ldr	r3, [pc, #660]	; (ab88 <MiMAC_ReceivedPacket+0x6b0>)
    a8f2:	4798      	blx	r3
    a8f4:	e65f      	b.n	a5b6 <MiMAC_ReceivedPacket+0xde>
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    a8f6:	4aa0      	ldr	r2, [pc, #640]	; (ab78 <MiMAC_ReceivedPacket+0x6a0>)
    a8f8:	7810      	ldrb	r0, [r2, #0]
    a8fa:	2180      	movs	r1, #128	; 0x80
    a8fc:	4249      	negs	r1, r1
    a8fe:	4301      	orrs	r1, r0
    a900:	7011      	strb	r1, [r2, #0]
				MACRxPacket.altSourceAddress = true;
    a902:	2101      	movs	r1, #1
    a904:	73d1      	strb	r1, [r2, #15]
				if (bIntraPAN) // check if it is intraPAN
    a906:	2c00      	cmp	r4, #0
    a908:	d114      	bne.n	a934 <MiMAC_ReceivedPacket+0x45c>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[12];
    a90a:	499b      	ldr	r1, [pc, #620]	; (ab78 <MiMAC_ReceivedPacket+0x6a0>)
    a90c:	4899      	ldr	r0, [pc, #612]	; (ab74 <MiMAC_ReceivedPacket+0x69c>)
    a90e:	021c      	lsls	r4, r3, #8
    a910:	18e4      	adds	r4, r4, r3
    a912:	1902      	adds	r2, r0, r4
    a914:	7b95      	ldrb	r5, [r2, #14]
    a916:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[13];
    a918:	7bd2      	ldrb	r2, [r2, #15]
    a91a:	744a      	strb	r2, [r1, #17]
    a91c:	0023      	movs	r3, r4
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[14]);
    a91e:	0022      	movs	r2, r4
    a920:	3210      	adds	r2, #16
    a922:	1812      	adds	r2, r2, r0
    a924:	604a      	str	r2, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    a926:	5c22      	ldrb	r2, [r4, r0]
    a928:	3a15      	subs	r2, #21
    a92a:	730a      	strb	r2, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    a92c:	3313      	adds	r3, #19
    a92e:	181b      	adds	r3, r3, r0
    a930:	608b      	str	r3, [r1, #8]
    a932:	e667      	b.n	a604 <MiMAC_ReceivedPacket+0x12c>
					if(!(isSameAddress((uint8_t *)&DevIEEEaddr, &RxBuffer[BankIndex].Payload[5])))
    a934:	0219      	lsls	r1, r3, #8
    a936:	18c9      	adds	r1, r1, r3
    a938:	3107      	adds	r1, #7
    a93a:	4b8e      	ldr	r3, [pc, #568]	; (ab74 <MiMAC_ReceivedPacket+0x69c>)
    a93c:	18c9      	adds	r1, r1, r3
    a93e:	4893      	ldr	r0, [pc, #588]	; (ab8c <MiMAC_ReceivedPacket+0x6b4>)
    a940:	4b93      	ldr	r3, [pc, #588]	; (ab90 <MiMAC_ReceivedPacket+0x6b8>)
    a942:	4798      	blx	r3
    a944:	1e04      	subs	r4, r0, #0
    a946:	d011      	beq.n	a96c <MiMAC_ReceivedPacket+0x494>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    a948:	4b8e      	ldr	r3, [pc, #568]	; (ab84 <MiMAC_ReceivedPacket+0x6ac>)
    a94a:	7818      	ldrb	r0, [r3, #0]
    a94c:	4a8a      	ldr	r2, [pc, #552]	; (ab78 <MiMAC_ReceivedPacket+0x6a0>)
    a94e:	4989      	ldr	r1, [pc, #548]	; (ab74 <MiMAC_ReceivedPacket+0x69c>)
    a950:	0203      	lsls	r3, r0, #8
    a952:	181b      	adds	r3, r3, r0
    a954:	18c8      	adds	r0, r1, r3
    a956:	7944      	ldrb	r4, [r0, #5]
    a958:	7414      	strb	r4, [r2, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    a95a:	7980      	ldrb	r0, [r0, #6]
    a95c:	7450      	strb	r0, [r2, #17]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    a95e:	5c58      	ldrb	r0, [r3, r1]
    a960:	3813      	subs	r0, #19
    a962:	7310      	strb	r0, [r2, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    a964:	3311      	adds	r3, #17
    a966:	185b      	adds	r3, r3, r1
    a968:	6093      	str	r3, [r2, #8]
    a96a:	e64b      	b.n	a604 <MiMAC_ReceivedPacket+0x12c>
						MiMAC_DiscardPacket();
    a96c:	4b84      	ldr	r3, [pc, #528]	; (ab80 <MiMAC_ReceivedPacket+0x6a8>)
    a96e:	4798      	blx	r3
						if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a970:	4b84      	ldr	r3, [pc, #528]	; (ab84 <MiMAC_ReceivedPacket+0x6ac>)
    a972:	781a      	ldrb	r2, [r3, #0]
    a974:	0213      	lsls	r3, r2, #8
    a976:	189a      	adds	r2, r3, r2
    a978:	4b7e      	ldr	r3, [pc, #504]	; (ab74 <MiMAC_ReceivedPacket+0x69c>)
    a97a:	189b      	adds	r3, r3, r2
    a97c:	789b      	ldrb	r3, [r3, #2]
    a97e:	069b      	lsls	r3, r3, #26
    a980:	d400      	bmi.n	a984 <MiMAC_ReceivedPacket+0x4ac>
    a982:	e618      	b.n	a5b6 <MiMAC_ReceivedPacket+0xde>
							MiRadioReceiveParam.action = RECEIVE_START;	
    a984:	a807      	add	r0, sp, #28
    a986:	2300      	movs	r3, #0
    a988:	7003      	strb	r3, [r0, #0]
							MiRadioReceiveParam.rxWindowSize = 0;
    a98a:	8043      	strh	r3, [r0, #2]
							RADIO_Receive(&MiRadioReceiveParam);
    a98c:	4b7e      	ldr	r3, [pc, #504]	; (ab88 <MiMAC_ReceivedPacket+0x6b0>)
    a98e:	4798      	blx	r3
    a990:	e611      	b.n	a5b6 <MiMAC_ReceivedPacket+0xde>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    a992:	0219      	lsls	r1, r3, #8
    a994:	18c9      	adds	r1, r1, r3
    a996:	4a77      	ldr	r2, [pc, #476]	; (ab74 <MiMAC_ReceivedPacket+0x69c>)
    a998:	1852      	adds	r2, r2, r1
    a99a:	79d2      	ldrb	r2, [r2, #7]
    a99c:	2aff      	cmp	r2, #255	; 0xff
    a99e:	d00c      	beq.n	a9ba <MiMAC_ReceivedPacket+0x4e2>
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 10;
    a9a0:	4975      	ldr	r1, [pc, #468]	; (ab78 <MiMAC_ReceivedPacket+0x6a0>)
    a9a2:	4874      	ldr	r0, [pc, #464]	; (ab74 <MiMAC_ReceivedPacket+0x69c>)
    a9a4:	021a      	lsls	r2, r3, #8
    a9a6:	18d2      	adds	r2, r2, r3
    a9a8:	5c12      	ldrb	r2, [r2, r0]
    a9aa:	3a0a      	subs	r2, #10
    a9ac:	730a      	strb	r2, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    a9ae:	021a      	lsls	r2, r3, #8
    a9b0:	18d3      	adds	r3, r2, r3
    a9b2:	3309      	adds	r3, #9
    a9b4:	181b      	adds	r3, r3, r0
    a9b6:	608b      	str	r3, [r1, #8]
			break;
    a9b8:	e624      	b.n	a604 <MiMAC_ReceivedPacket+0x12c>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    a9ba:	0219      	lsls	r1, r3, #8
    a9bc:	18c9      	adds	r1, r1, r3
    a9be:	4a6d      	ldr	r2, [pc, #436]	; (ab74 <MiMAC_ReceivedPacket+0x69c>)
    a9c0:	1852      	adds	r2, r2, r1
    a9c2:	7a12      	ldrb	r2, [r2, #8]
    a9c4:	2aff      	cmp	r2, #255	; 0xff
    a9c6:	d1eb      	bne.n	a9a0 <MiMAC_ReceivedPacket+0x4c8>
					MACRxPacket.flags.bits.broadcast = 1;
    a9c8:	496b      	ldr	r1, [pc, #428]	; (ab78 <MiMAC_ReceivedPacket+0x6a0>)
    a9ca:	780a      	ldrb	r2, [r1, #0]
    a9cc:	2004      	movs	r0, #4
    a9ce:	4302      	orrs	r2, r0
    a9d0:	700a      	strb	r2, [r1, #0]
    a9d2:	e7e5      	b.n	a9a0 <MiMAC_ReceivedPacket+0x4c8>
				MiMAC_DiscardPacket();
    a9d4:	4b6a      	ldr	r3, [pc, #424]	; (ab80 <MiMAC_ReceivedPacket+0x6a8>)
    a9d6:	4798      	blx	r3
				if(RxBuffer[BankIndex].Payload[0] & 0x20)
    a9d8:	4b6a      	ldr	r3, [pc, #424]	; (ab84 <MiMAC_ReceivedPacket+0x6ac>)
    a9da:	781a      	ldrb	r2, [r3, #0]
    a9dc:	0213      	lsls	r3, r2, #8
    a9de:	189a      	adds	r2, r3, r2
    a9e0:	4b64      	ldr	r3, [pc, #400]	; (ab74 <MiMAC_ReceivedPacket+0x69c>)
    a9e2:	189b      	adds	r3, r3, r2
    a9e4:	789b      	ldrb	r3, [r3, #2]
    a9e6:	069b      	lsls	r3, r3, #26
    a9e8:	d401      	bmi.n	a9ee <MiMAC_ReceivedPacket+0x516>
				return false;
    a9ea:	2400      	movs	r4, #0
    a9ec:	e5e3      	b.n	a5b6 <MiMAC_ReceivedPacket+0xde>
					MiRadioReceiveParam.action = RECEIVE_START;					
    a9ee:	a807      	add	r0, sp, #28
    a9f0:	2300      	movs	r3, #0
    a9f2:	7003      	strb	r3, [r0, #0]
					MiRadioReceiveParam.rxWindowSize = 0;
    a9f4:	8043      	strh	r3, [r0, #2]
					RADIO_Receive(&MiRadioReceiveParam);
    a9f6:	4b64      	ldr	r3, [pc, #400]	; (ab88 <MiMAC_ReceivedPacket+0x6b0>)
    a9f8:	4798      	blx	r3
    a9fa:	e7f6      	b.n	a9ea <MiMAC_ReceivedPacket+0x512>
			for (i = 0; i < CONNECTION_SIZE; i++)
    a9fc:	3401      	adds	r4, #1
    a9fe:	b2e4      	uxtb	r4, r4
    aa00:	3501      	adds	r5, #1
    aa02:	3710      	adds	r7, #16
    aa04:	2c14      	cmp	r4, #20
    aa06:	d012      	beq.n	aa2e <MiMAC_ReceivedPacket+0x556>
				if ((ConnectionTable[i].status.bits.isValid) &&
    aa08:	012b      	lsls	r3, r5, #4
    aa0a:	18f3      	adds	r3, r6, r3
    aa0c:	7b1b      	ldrb	r3, [r3, #12]
    aa0e:	09db      	lsrs	r3, r3, #7
    aa10:	d0f4      	beq.n	a9fc <MiMAC_ReceivedPacket+0x524>
				isSameAddress(ConnectionTable[i].Address, MACRxPacket.SourceAddress))
    aa12:	4643      	mov	r3, r8
    aa14:	6859      	ldr	r1, [r3, #4]
    aa16:	0038      	movs	r0, r7
    aa18:	4b5d      	ldr	r3, [pc, #372]	; (ab90 <MiMAC_ReceivedPacket+0x6b8>)
    aa1a:	4798      	blx	r3
				if ((ConnectionTable[i].status.bits.isValid) &&
    aa1c:	2800      	cmp	r0, #0
    aa1e:	d0ed      	beq.n	a9fc <MiMAC_ReceivedPacket+0x524>
			if (i < CONNECTION_SIZE)
    aa20:	2c13      	cmp	r4, #19
    aa22:	d804      	bhi.n	aa2e <MiMAC_ReceivedPacket+0x556>
				if (IncomingFrameCounter[i].Val >= FrameCounter.Val)	// drop the packet if saved frame counter (IncomingFrameCounter) is equal or greater than the lastest received packet (FrameCounter.Val)
    aa24:	00a3      	lsls	r3, r4, #2
    aa26:	4a5b      	ldr	r2, [pc, #364]	; (ab94 <MiMAC_ReceivedPacket+0x6bc>)
    aa28:	589b      	ldr	r3, [r3, r2]
    aa2a:	454b      	cmp	r3, r9
    aa2c:	d22e      	bcs.n	aa8c <MiMAC_ReceivedPacket+0x5b4>
			MACRxPacket.PayloadLen -= 5;  // used to 5 for frame counter now -4 also added for MIC integrity
    aa2e:	4952      	ldr	r1, [pc, #328]	; (ab78 <MiMAC_ReceivedPacket+0x6a0>)
    aa30:	7b0b      	ldrb	r3, [r1, #12]
    aa32:	3b05      	subs	r3, #5
    aa34:	b2db      	uxtb	r3, r3
    aa36:	730b      	strb	r3, [r1, #12]
			received_mic_values[0] = MACRxPacket.Payload[MACRxPacket.PayloadLen+1];
    aa38:	6888      	ldr	r0, [r1, #8]
    aa3a:	18c3      	adds	r3, r0, r3
    aa3c:	785d      	ldrb	r5, [r3, #1]
    aa3e:	4a56      	ldr	r2, [pc, #344]	; (ab98 <MiMAC_ReceivedPacket+0x6c0>)
    aa40:	7015      	strb	r5, [r2, #0]
			received_mic_values[1] = MACRxPacket.Payload[MACRxPacket.PayloadLen+2];
    aa42:	789d      	ldrb	r5, [r3, #2]
    aa44:	7055      	strb	r5, [r2, #1]
			received_mic_values[2] = MACRxPacket.Payload[MACRxPacket.PayloadLen+3];
    aa46:	78dd      	ldrb	r5, [r3, #3]
    aa48:	7095      	strb	r5, [r2, #2]
			received_mic_values[3] = MACRxPacket.Payload[MACRxPacket.PayloadLen+4];
    aa4a:	791b      	ldrb	r3, [r3, #4]
    aa4c:	70d3      	strb	r3, [r2, #3]
			if (false == DataDecrypt(&(MACRxPacket.Payload[5]), &(MACRxPacket.PayloadLen), MACRxPacket.SourceAddress, FrameCounter, RxBuffer[BankIndex].Payload[0]))
    aa4e:	684a      	ldr	r2, [r1, #4]
    aa50:	310c      	adds	r1, #12
    aa52:	3005      	adds	r0, #5
    aa54:	4b4b      	ldr	r3, [pc, #300]	; (ab84 <MiMAC_ReceivedPacket+0x6ac>)
    aa56:	781d      	ldrb	r5, [r3, #0]
    aa58:	022b      	lsls	r3, r5, #8
    aa5a:	195d      	adds	r5, r3, r5
    aa5c:	4b45      	ldr	r3, [pc, #276]	; (ab74 <MiMAC_ReceivedPacket+0x69c>)
    aa5e:	195b      	adds	r3, r3, r5
    aa60:	789b      	ldrb	r3, [r3, #2]
    aa62:	9300      	str	r3, [sp, #0]
    aa64:	464b      	mov	r3, r9
    aa66:	4d4d      	ldr	r5, [pc, #308]	; (ab9c <MiMAC_ReceivedPacket+0x6c4>)
    aa68:	47a8      	blx	r5
    aa6a:	2800      	cmp	r0, #0
    aa6c:	d020      	beq.n	aab0 <MiMAC_ReceivedPacket+0x5d8>
			 if (i < CONNECTION_SIZE) 
    aa6e:	2c13      	cmp	r4, #19
    aa70:	d803      	bhi.n	aa7a <MiMAC_ReceivedPacket+0x5a2>
			    IncomingFrameCounter[i].Val = FrameCounter.Val;
    aa72:	00a4      	lsls	r4, r4, #2
    aa74:	4b47      	ldr	r3, [pc, #284]	; (ab94 <MiMAC_ReceivedPacket+0x6bc>)
    aa76:	464a      	mov	r2, r9
    aa78:	50e2      	str	r2, [r4, r3]
			MACRxPacket.Payload = &(MACRxPacket.Payload[5]);
    aa7a:	4b3f      	ldr	r3, [pc, #252]	; (ab78 <MiMAC_ReceivedPacket+0x6a0>)
    aa7c:	689a      	ldr	r2, [r3, #8]
    aa7e:	3205      	adds	r2, #5
    aa80:	609a      	str	r2, [r3, #8]
			MACRxPacket.flags.bits.secEn = 1;
    aa82:	781a      	ldrb	r2, [r3, #0]
    aa84:	2108      	movs	r1, #8
    aa86:	430a      	orrs	r2, r1
    aa88:	701a      	strb	r2, [r3, #0]
    aa8a:	e5c5      	b.n	a618 <MiMAC_ReceivedPacket+0x140>
					MiMAC_DiscardPacket();
    aa8c:	4b3c      	ldr	r3, [pc, #240]	; (ab80 <MiMAC_ReceivedPacket+0x6a8>)
    aa8e:	4798      	blx	r3
					if(RxBuffer[BankIndex].Payload[0] & 0x20)
    aa90:	4b3c      	ldr	r3, [pc, #240]	; (ab84 <MiMAC_ReceivedPacket+0x6ac>)
    aa92:	781a      	ldrb	r2, [r3, #0]
    aa94:	0213      	lsls	r3, r2, #8
    aa96:	189a      	adds	r2, r3, r2
    aa98:	4b36      	ldr	r3, [pc, #216]	; (ab74 <MiMAC_ReceivedPacket+0x69c>)
    aa9a:	189b      	adds	r3, r3, r2
    aa9c:	789b      	ldrb	r3, [r3, #2]
    aa9e:	069b      	lsls	r3, r3, #26
    aaa0:	d5a3      	bpl.n	a9ea <MiMAC_ReceivedPacket+0x512>
						MiRadioReceiveParam.action = RECEIVE_START;					
    aaa2:	a807      	add	r0, sp, #28
    aaa4:	2300      	movs	r3, #0
    aaa6:	7003      	strb	r3, [r0, #0]
						MiRadioReceiveParam.rxWindowSize = 0;
    aaa8:	8043      	strh	r3, [r0, #2]
						RADIO_Receive(&MiRadioReceiveParam);
    aaaa:	4b37      	ldr	r3, [pc, #220]	; (ab88 <MiMAC_ReceivedPacket+0x6b0>)
    aaac:	4798      	blx	r3
    aaae:	e79c      	b.n	a9ea <MiMAC_ReceivedPacket+0x512>
				MiMAC_DiscardPacket();
    aab0:	4b33      	ldr	r3, [pc, #204]	; (ab80 <MiMAC_ReceivedPacket+0x6a8>)
    aab2:	4798      	blx	r3
				if(RxBuffer[BankIndex].Payload[0] & 0x20)
    aab4:	4b33      	ldr	r3, [pc, #204]	; (ab84 <MiMAC_ReceivedPacket+0x6ac>)
    aab6:	781a      	ldrb	r2, [r3, #0]
    aab8:	0213      	lsls	r3, r2, #8
    aaba:	189a      	adds	r2, r3, r2
    aabc:	4b2d      	ldr	r3, [pc, #180]	; (ab74 <MiMAC_ReceivedPacket+0x69c>)
    aabe:	189b      	adds	r3, r3, r2
    aac0:	789b      	ldrb	r3, [r3, #2]
    aac2:	069b      	lsls	r3, r3, #26
    aac4:	d591      	bpl.n	a9ea <MiMAC_ReceivedPacket+0x512>
					MiRadioReceiveParam.action = RECEIVE_START;					
    aac6:	a807      	add	r0, sp, #28
    aac8:	2300      	movs	r3, #0
    aaca:	7003      	strb	r3, [r0, #0]
					MiRadioReceiveParam.rxWindowSize = 0;
    aacc:	8043      	strh	r3, [r0, #2]
					RADIO_Receive(&MiRadioReceiveParam);
    aace:	4b2e      	ldr	r3, [pc, #184]	; (ab88 <MiMAC_ReceivedPacket+0x6b0>)
    aad0:	4798      	blx	r3
    aad2:	e78a      	b.n	a9ea <MiMAC_ReceivedPacket+0x512>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_DATA;
    aad4:	4a28      	ldr	r2, [pc, #160]	; (ab78 <MiMAC_ReceivedPacket+0x6a0>)
    aad6:	7813      	ldrb	r3, [r2, #0]
    aad8:	2403      	movs	r4, #3
    aada:	43a3      	bics	r3, r4
    aadc:	7013      	strb	r3, [r2, #0]
		MACRxPacket.LQIValue = RxBuffer[BankIndex].Payload[RxBuffer[BankIndex].PayloadLen - 2];
    aade:	4c26      	ldr	r4, [pc, #152]	; (ab78 <MiMAC_ReceivedPacket+0x6a0>)
    aae0:	4b24      	ldr	r3, [pc, #144]	; (ab74 <MiMAC_ReceivedPacket+0x69c>)
    aae2:	0202      	lsls	r2, r0, #8
    aae4:	1812      	adds	r2, r2, r0
    aae6:	5cd5      	ldrb	r5, [r2, r3]
    aae8:	189b      	adds	r3, r3, r2
    aaea:	5d5a      	ldrb	r2, [r3, r5]
    aaec:	73a2      	strb	r2, [r4, #14]
		MACRxPacket.RSSIValue = RxBuffer[BankIndex].radioRSSI;				
    aaee:	785b      	ldrb	r3, [r3, #1]
    aaf0:	7363      	strb	r3, [r4, #13]
		return true;
    aaf2:	2401      	movs	r4, #1
		if((RxBuffer[BankIndex].Payload[0] & 0x20))
    aaf4:	068b      	lsls	r3, r1, #26
    aaf6:	d400      	bmi.n	aafa <MiMAC_ReceivedPacket+0x622>
    aaf8:	e55d      	b.n	a5b6 <MiMAC_ReceivedPacket+0xde>
			    tParamAck.flags.Val = 0;
    aafa:	aa04      	add	r2, sp, #16
    aafc:	2400      	movs	r4, #0
			    tParamAck.altSrcAddr = 0;
    aafe:	7254      	strb	r4, [r2, #9]
			    tParamAck.altDestAddr = false;
    ab00:	7214      	strb	r4, [r2, #8]
 			    tParamAck.flags.bits.sourcePrsnt = 1;
    ab02:	233e      	movs	r3, #62	; 0x3e
    ab04:	425b      	negs	r3, r3
    ab06:	7013      	strb	r3, [r2, #0]
			    tParamAck.DestAddress = MACRxPacket.SourceAddress;
    ab08:	4b1b      	ldr	r3, [pc, #108]	; (ab78 <MiMAC_ReceivedPacket+0x6a0>)
    ab0a:	6859      	ldr	r1, [r3, #4]
    ab0c:	9105      	str	r1, [sp, #20]
			    tParamAck.DestPANID.Val = MACRxPacket.SourcePANID.Val;
    ab0e:	8a1b      	ldrh	r3, [r3, #16]
    ab10:	8153      	strh	r3, [r2, #10]
			AckBuffer[0] = RxBuffer[BankIndex].Payload[2];	
    ab12:	4b23      	ldr	r3, [pc, #140]	; (aba0 <MiMAC_ReceivedPacket+0x6c8>)
    ab14:	0205      	lsls	r5, r0, #8
    ab16:	182d      	adds	r5, r5, r0
    ab18:	4816      	ldr	r0, [pc, #88]	; (ab74 <MiMAC_ReceivedPacket+0x69c>)
    ab1a:	1940      	adds	r0, r0, r5
    ab1c:	7900      	ldrb	r0, [r0, #4]
    ab1e:	7018      	strb	r0, [r3, #0]
			MiMAC_SendPacket(tParamAck, AckBuffer, 1, 0, NULL);
    ab20:	9402      	str	r4, [sp, #8]
    ab22:	9401      	str	r4, [sp, #4]
    ab24:	2001      	movs	r0, #1
    ab26:	9000      	str	r0, [sp, #0]
    ab28:	9804      	ldr	r0, [sp, #16]
    ab2a:	9a06      	ldr	r2, [sp, #24]
    ab2c:	4c1d      	ldr	r4, [pc, #116]	; (aba4 <MiMAC_ReceivedPacket+0x6cc>)
    ab2e:	47a0      	blx	r4
		return true;
    ab30:	2401      	movs	r4, #1
    ab32:	e540      	b.n	a5b6 <MiMAC_ReceivedPacket+0xde>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_COMMAND;
    ab34:	4a10      	ldr	r2, [pc, #64]	; (ab78 <MiMAC_ReceivedPacket+0x6a0>)
    ab36:	7813      	ldrb	r3, [r2, #0]
    ab38:	2403      	movs	r4, #3
    ab3a:	43a3      	bics	r3, r4
    ab3c:	2401      	movs	r4, #1
    ab3e:	4323      	orrs	r3, r4
    ab40:	7013      	strb	r3, [r2, #0]
			break;
    ab42:	e7cc      	b.n	aade <MiMAC_ReceivedPacket+0x606>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_RESERVE;
    ab44:	4a0c      	ldr	r2, [pc, #48]	; (ab78 <MiMAC_ReceivedPacket+0x6a0>)
    ab46:	7813      	ldrb	r3, [r2, #0]
    ab48:	2403      	movs	r4, #3
    ab4a:	4323      	orrs	r3, r4
    ab4c:	7013      	strb	r3, [r2, #0]
			break;
    ab4e:	e7c6      	b.n	aade <MiMAC_ReceivedPacket+0x606>
				MACRxPacket.flags.bits.packetType = PACKET_TYPE_ACK;
    ab50:	4a09      	ldr	r2, [pc, #36]	; (ab78 <MiMAC_ReceivedPacket+0x6a0>)
    ab52:	7813      	ldrb	r3, [r2, #0]
    ab54:	2103      	movs	r1, #3
    ab56:	438b      	bics	r3, r1
    ab58:	2102      	movs	r1, #2
    ab5a:	430b      	orrs	r3, r1
    ab5c:	7013      	strb	r3, [r2, #0]
				if((AckSeqNum == *(MACRxPacket.Payload))&& (AckReqData))
    ab5e:	6893      	ldr	r3, [r2, #8]
    ab60:	781a      	ldrb	r2, [r3, #0]
    ab62:	4b11      	ldr	r3, [pc, #68]	; (aba8 <MiMAC_ReceivedPacket+0x6d0>)
    ab64:	781b      	ldrb	r3, [r3, #0]
    ab66:	429a      	cmp	r2, r3
    ab68:	d020      	beq.n	abac <MiMAC_ReceivedPacket+0x6d4>
				MiMAC_DiscardPacket();
    ab6a:	4b05      	ldr	r3, [pc, #20]	; (ab80 <MiMAC_ReceivedPacket+0x6a8>)
    ab6c:	4798      	blx	r3
				return false;
    ab6e:	2400      	movs	r4, #0
    ab70:	e521      	b.n	a5b6 <MiMAC_ReceivedPacket+0xde>
    ab72:	46c0      	nop			; (mov r8, r8)
    ab74:	20002464 	.word	0x20002464
    ab78:	20003030 	.word	0x20003030
    ab7c:	2000286c 	.word	0x2000286c
    ab80:	0000a411 	.word	0x0000a411
    ab84:	2000001b 	.word	0x2000001b
    ab88:	000105e5 	.word	0x000105e5
    ab8c:	2000245c 	.word	0x2000245c
    ab90:	0000b7a9 	.word	0x0000b7a9
    ab94:	2000305c 	.word	0x2000305c
    ab98:	20002348 	.word	0x20002348
    ab9c:	00009e55 	.word	0x00009e55
    aba0:	2000234c 	.word	0x2000234c
    aba4:	0000a069 	.word	0x0000a069
    aba8:	200021e0 	.word	0x200021e0
				if((AckSeqNum == *(MACRxPacket.Payload))&& (AckReqData))
    abac:	4b1c      	ldr	r3, [pc, #112]	; (ac20 <MiMAC_ReceivedPacket+0x748>)
    abae:	781b      	ldrb	r3, [r3, #0]
    abb0:	2b00      	cmp	r3, #0
    abb2:	d0da      	beq.n	ab6a <MiMAC_ReceivedPacket+0x692>
					DataTxAckTimer.Val = 0;
    abb4:	2400      	movs	r4, #0
    abb6:	4b1b      	ldr	r3, [pc, #108]	; (ac24 <MiMAC_ReceivedPacket+0x74c>)
    abb8:	601c      	str	r4, [r3, #0]
					PHY_DataConf(SUCCESS); 
    abba:	2000      	movs	r0, #0
    abbc:	4b1a      	ldr	r3, [pc, #104]	; (ac28 <MiMAC_ReceivedPacket+0x750>)
    abbe:	4798      	blx	r3
					AckReqData = 0;
    abc0:	4b17      	ldr	r3, [pc, #92]	; (ac20 <MiMAC_ReceivedPacket+0x748>)
    abc2:	701c      	strb	r4, [r3, #0]
					if((FW_Stat)){
    abc4:	4b19      	ldr	r3, [pc, #100]	; (ac2c <MiMAC_ReceivedPacket+0x754>)
    abc6:	781b      	ldrb	r3, [r3, #0]
    abc8:	2b00      	cmp	r3, #0
    abca:	d0ce      	beq.n	ab6a <MiMAC_ReceivedPacket+0x692>
					 MiMAC_Task();
    abcc:	4b18      	ldr	r3, [pc, #96]	; (ac30 <MiMAC_ReceivedPacket+0x758>)
    abce:	4798      	blx	r3
    abd0:	e7cb      	b.n	ab6a <MiMAC_ReceivedPacket+0x692>
	return false;
    abd2:	2400      	movs	r4, #0
    abd4:	e4ef      	b.n	a5b6 <MiMAC_ReceivedPacket+0xde>
				if (!(((RxBuffer[BankIndex].Payload[5] == 0xFF) & (RxBuffer[BankIndex].Payload[6] == 0xFF)) ||((RxBuffer[BankIndex].Payload[5] == DevShortAddress[0]) & (RxBuffer[BankIndex].Payload[6] == DevShortAddress[1]))) )
    abd6:	0219      	lsls	r1, r3, #8
    abd8:	18c9      	adds	r1, r1, r3
    abda:	4a16      	ldr	r2, [pc, #88]	; (ac34 <MiMAC_ReceivedPacket+0x75c>)
    abdc:	1852      	adds	r2, r2, r1
    abde:	7a11      	ldrb	r1, [r2, #8]
    abe0:	4a15      	ldr	r2, [pc, #84]	; (ac38 <MiMAC_ReceivedPacket+0x760>)
    abe2:	7852      	ldrb	r2, [r2, #1]
    abe4:	4291      	cmp	r1, r2
    abe6:	d000      	beq.n	abea <MiMAC_ReceivedPacket+0x712>
    abe8:	e576      	b.n	a6d8 <MiMAC_ReceivedPacket+0x200>
    abea:	4a13      	ldr	r2, [pc, #76]	; (ac38 <MiMAC_ReceivedPacket+0x760>)
    abec:	7812      	ldrb	r2, [r2, #0]
    abee:	4282      	cmp	r2, r0
    abf0:	d000      	beq.n	abf4 <MiMAC_ReceivedPacket+0x71c>
    abf2:	e571      	b.n	a6d8 <MiMAC_ReceivedPacket+0x200>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    abf4:	4911      	ldr	r1, [pc, #68]	; (ac3c <MiMAC_ReceivedPacket+0x764>)
    abf6:	480f      	ldr	r0, [pc, #60]	; (ac34 <MiMAC_ReceivedPacket+0x75c>)
    abf8:	021c      	lsls	r4, r3, #8
    abfa:	18e4      	adds	r4, r4, r3
    abfc:	1902      	adds	r2, r0, r4
    abfe:	7955      	ldrb	r5, [r2, #5]
    ac00:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    ac02:	7992      	ldrb	r2, [r2, #6]
    ac04:	744a      	strb	r2, [r1, #17]
    ac06:	0023      	movs	r3, r4
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    ac08:	0022      	movs	r2, r4
    ac0a:	3209      	adds	r2, #9
    ac0c:	1812      	adds	r2, r2, r0
    ac0e:	604a      	str	r2, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    ac10:	5c22      	ldrb	r2, [r4, r0]
    ac12:	3a13      	subs	r2, #19
    ac14:	730a      	strb	r2, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    ac16:	3311      	adds	r3, #17
    ac18:	181b      	adds	r3, r3, r0
    ac1a:	608b      	str	r3, [r1, #8]
    ac1c:	e58c      	b.n	a738 <MiMAC_ReceivedPacket+0x260>
    ac1e:	46c0      	nop			; (mov r8, r8)
    ac20:	2000048c 	.word	0x2000048c
    ac24:	20003364 	.word	0x20003364
    ac28:	0000a42d 	.word	0x0000a42d
    ac2c:	2000049e 	.word	0x2000049e
    ac30:	0000a491 	.word	0x0000a491
    ac34:	20002464 	.word	0x20002464
    ac38:	2000286c 	.word	0x2000286c
    ac3c:	20003030 	.word	0x20003030

0000ac40 <checkRxDataBuffer>:
bool checkRxDataBuffer(void)
{
	uint8_t rxBank = 0xFF;
	for (uint8_t i = 0; i < BANK_SIZE; i++)
	{
		if (RxBuffer[i].PayloadLen > 0)
    ac40:	4b10      	ldr	r3, [pc, #64]	; (ac84 <checkRxDataBuffer+0x44>)
    ac42:	781b      	ldrb	r3, [r3, #0]
    ac44:	2b00      	cmp	r3, #0
    ac46:	d11a      	bne.n	ac7e <checkRxDataBuffer+0x3e>
    ac48:	2302      	movs	r3, #2
    ac4a:	33ff      	adds	r3, #255	; 0xff
    ac4c:	4a0d      	ldr	r2, [pc, #52]	; (ac84 <checkRxDataBuffer+0x44>)
    ac4e:	5cd3      	ldrb	r3, [r2, r3]
    ac50:	2b00      	cmp	r3, #0
    ac52:	d110      	bne.n	ac76 <checkRxDataBuffer+0x36>
    ac54:	4b0c      	ldr	r3, [pc, #48]	; (ac88 <checkRxDataBuffer+0x48>)
    ac56:	5cd3      	ldrb	r3, [r2, r3]
    ac58:	2b00      	cmp	r3, #0
    ac5a:	d10e      	bne.n	ac7a <checkRxDataBuffer+0x3a>
    ac5c:	4b0b      	ldr	r3, [pc, #44]	; (ac8c <checkRxDataBuffer+0x4c>)
    ac5e:	5cd3      	ldrb	r3, [r2, r3]
	uint8_t rxBank = 0xFF;
    ac60:	22ff      	movs	r2, #255	; 0xff
		if (RxBuffer[i].PayloadLen > 0)
    ac62:	2b00      	cmp	r3, #0
    ac64:	d105      	bne.n	ac72 <checkRxDataBuffer+0x32>
			rxBank = i;
			break;
		}
	}
	
	if(rxBank < BANK_SIZE)
    ac66:	2000      	movs	r0, #0
    ac68:	2303      	movs	r3, #3
    ac6a:	4293      	cmp	r3, r2
    ac6c:	4140      	adcs	r0, r0
    ac6e:	b2c0      	uxtb	r0, r0
	{
		return true;
	}
	
	return false;
}
    ac70:	4770      	bx	lr
	for (uint8_t i = 0; i < BANK_SIZE; i++)
    ac72:	3afc      	subs	r2, #252	; 0xfc
    ac74:	e7f7      	b.n	ac66 <checkRxDataBuffer+0x26>
    ac76:	2201      	movs	r2, #1
    ac78:	e7f5      	b.n	ac66 <checkRxDataBuffer+0x26>
    ac7a:	2202      	movs	r2, #2
    ac7c:	e7f3      	b.n	ac66 <checkRxDataBuffer+0x26>
    ac7e:	2200      	movs	r2, #0
    ac80:	e7f1      	b.n	ac66 <checkRxDataBuffer+0x26>
    ac82:	46c0      	nop			; (mov r8, r8)
    ac84:	20002464 	.word	0x20002464
    ac88:	00000202 	.word	0x00000202
    ac8c:	00000303 	.word	0x00000303

0000ac90 <phySetChannel>:
}

/*************************************************************************//**
*****************************************************************************/
static void phySetChannel(void)
{
    ac90:	b500      	push	{lr}
    ac92:	b083      	sub	sp, #12
	uint32_t frequncy_set;
	if(phyChannel) // Based on channel we need to set frequency 
    ac94:	4b2f      	ldr	r3, [pc, #188]	; (ad54 <phySetChannel+0xc4>)
    ac96:	781b      	ldrb	r3, [r3, #0]
    ac98:	2b00      	cmp	r3, #0
    ac9a:	d007      	beq.n	acac <phySetChannel+0x1c>
	{
		switch(phyChannel)
    ac9c:	2b19      	cmp	r3, #25
    ac9e:	d856      	bhi.n	ad4e <phySetChannel+0xbe>
    aca0:	009b      	lsls	r3, r3, #2
    aca2:	4a2d      	ldr	r2, [pc, #180]	; (ad58 <phySetChannel+0xc8>)
    aca4:	58d3      	ldr	r3, [r2, r3]
    aca6:	469f      	mov	pc, r3
				//break;
			//case 8:
				//frequncy_set = FREQ_786000KHZ;
				//break;
			case 0:
				frequncy_set = FREQ_862000KHZ;
    aca8:	4b2c      	ldr	r3, [pc, #176]	; (ad5c <phySetChannel+0xcc>)
    acaa:	9301      	str	r3, [sp, #4]
				break;				
																									
		}
	}
		
	if(RADIO_SetAttr(CHANNEL_FREQUENCY,(void *)&frequncy_set) == 0)  
    acac:	a901      	add	r1, sp, #4
    acae:	2001      	movs	r0, #1
    acb0:	4b2b      	ldr	r3, [pc, #172]	; (ad60 <phySetChannel+0xd0>)
    acb2:	4798      	blx	r3
	{
	}
}
    acb4:	b003      	add	sp, #12
    acb6:	bd00      	pop	{pc}
				frequncy_set = FREQ_863000KHZ;
    acb8:	4b2a      	ldr	r3, [pc, #168]	; (ad64 <phySetChannel+0xd4>)
    acba:	9301      	str	r3, [sp, #4]
				break;
    acbc:	e7f6      	b.n	acac <phySetChannel+0x1c>
				frequncy_set = FREQ_865000KHZ;
    acbe:	4b2a      	ldr	r3, [pc, #168]	; (ad68 <phySetChannel+0xd8>)
    acc0:	9301      	str	r3, [sp, #4]
				break;
    acc2:	e7f3      	b.n	acac <phySetChannel+0x1c>
				frequncy_set = FREQ_866550KHZ;
    acc4:	4b29      	ldr	r3, [pc, #164]	; (ad6c <phySetChannel+0xdc>)
    acc6:	9301      	str	r3, [sp, #4]
				break;
    acc8:	e7f0      	b.n	acac <phySetChannel+0x1c>
				frequncy_set = FREQ_867000KHZ;
    acca:	4b29      	ldr	r3, [pc, #164]	; (ad70 <phySetChannel+0xe0>)
    accc:	9301      	str	r3, [sp, #4]
				break;			
    acce:	e7ed      	b.n	acac <phySetChannel+0x1c>
				frequncy_set = FREQ_868100KHZ;
    acd0:	4b28      	ldr	r3, [pc, #160]	; (ad74 <phySetChannel+0xe4>)
    acd2:	9301      	str	r3, [sp, #4]
				break;
    acd4:	e7ea      	b.n	acac <phySetChannel+0x1c>
				frequncy_set = FREQ_869525KHZ;
    acd6:	4b28      	ldr	r3, [pc, #160]	; (ad78 <phySetChannel+0xe8>)
    acd8:	9301      	str	r3, [sp, #4]
				break;			
    acda:	e7e7      	b.n	acac <phySetChannel+0x1c>
				frequncy_set = FREQ_870000KHZ;
    acdc:	4b27      	ldr	r3, [pc, #156]	; (ad7c <phySetChannel+0xec>)
    acde:	9301      	str	r3, [sp, #4]
				break;
    ace0:	e7e4      	b.n	acac <phySetChannel+0x1c>
				frequncy_set = FREQ_902300KHZ;
    ace2:	4b27      	ldr	r3, [pc, #156]	; (ad80 <phySetChannel+0xf0>)
    ace4:	9301      	str	r3, [sp, #4]
				break;
    ace6:	e7e1      	b.n	acac <phySetChannel+0x1c>
				frequncy_set = FREQ_903000KHZ;
    ace8:	4b26      	ldr	r3, [pc, #152]	; (ad84 <phySetChannel+0xf4>)
    acea:	9301      	str	r3, [sp, #4]
				break;
    acec:	e7de      	b.n	acac <phySetChannel+0x1c>
				frequncy_set = FREQ_915000KHZ;
    acee:	4b26      	ldr	r3, [pc, #152]	; (ad88 <phySetChannel+0xf8>)
    acf0:	9301      	str	r3, [sp, #4]
				break;
    acf2:	e7db      	b.n	acac <phySetChannel+0x1c>
				frequncy_set = FREQ_915200KHZ;
    acf4:	4b25      	ldr	r3, [pc, #148]	; (ad8c <phySetChannel+0xfc>)
    acf6:	9301      	str	r3, [sp, #4]
				break;
    acf8:	e7d8      	b.n	acac <phySetChannel+0x1c>
				frequncy_set = FREQ_915900KHZ;
    acfa:	4b25      	ldr	r3, [pc, #148]	; (ad90 <phySetChannel+0x100>)
    acfc:	9301      	str	r3, [sp, #4]
				break;
    acfe:	e7d5      	b.n	acac <phySetChannel+0x1c>
				frequncy_set = FREQ_920000KHZ;
    ad00:	4b24      	ldr	r3, [pc, #144]	; (ad94 <phySetChannel+0x104>)
    ad02:	9301      	str	r3, [sp, #4]
				break;
    ad04:	e7d2      	b.n	acac <phySetChannel+0x1c>
				frequncy_set = FREQ_920900KHZ;
    ad06:	4b24      	ldr	r3, [pc, #144]	; (ad98 <phySetChannel+0x108>)
    ad08:	9301      	str	r3, [sp, #4]
				break;
    ad0a:	e7cf      	b.n	acac <phySetChannel+0x1c>
				frequncy_set = FREQ_921900KHZ;
    ad0c:	4b23      	ldr	r3, [pc, #140]	; (ad9c <phySetChannel+0x10c>)
    ad0e:	9301      	str	r3, [sp, #4]
				break;
    ad10:	e7cc      	b.n	acac <phySetChannel+0x1c>
				frequncy_set = FREQ_922000KHZ;
    ad12:	4b23      	ldr	r3, [pc, #140]	; (ada0 <phySetChannel+0x110>)
    ad14:	9301      	str	r3, [sp, #4]
				break;
    ad16:	e7c9      	b.n	acac <phySetChannel+0x1c>
				frequncy_set = FREQ_922100KHZ;
    ad18:	4b22      	ldr	r3, [pc, #136]	; (ada4 <phySetChannel+0x114>)
    ad1a:	9301      	str	r3, [sp, #4]
				break;
    ad1c:	e7c6      	b.n	acac <phySetChannel+0x1c>
				frequncy_set = FREQ_923000KHZ;
    ad1e:	4b22      	ldr	r3, [pc, #136]	; (ada8 <phySetChannel+0x118>)
    ad20:	9301      	str	r3, [sp, #4]
				break;
    ad22:	e7c3      	b.n	acac <phySetChannel+0x1c>
				frequncy_set = FREQ_923200KHZ;
    ad24:	4b21      	ldr	r3, [pc, #132]	; (adac <phySetChannel+0x11c>)
    ad26:	9301      	str	r3, [sp, #4]
				break;
    ad28:	e7c0      	b.n	acac <phySetChannel+0x1c>
				frequncy_set = FREQ_923300KHZ;
    ad2a:	4b21      	ldr	r3, [pc, #132]	; (adb0 <phySetChannel+0x120>)
    ad2c:	9301      	str	r3, [sp, #4]
				break;
    ad2e:	e7bd      	b.n	acac <phySetChannel+0x1c>
				frequncy_set = FREQ_925000KHZ;
    ad30:	4b20      	ldr	r3, [pc, #128]	; (adb4 <phySetChannel+0x124>)
    ad32:	9301      	str	r3, [sp, #4]
				break;		
    ad34:	e7ba      	b.n	acac <phySetChannel+0x1c>
				frequncy_set = FREQ_927500KHZ;
    ad36:	4b20      	ldr	r3, [pc, #128]	; (adb8 <phySetChannel+0x128>)
    ad38:	9301      	str	r3, [sp, #4]
				break;
    ad3a:	e7b7      	b.n	acac <phySetChannel+0x1c>
				frequncy_set = FREQ_928000KHZ;
    ad3c:	4b1f      	ldr	r3, [pc, #124]	; (adbc <phySetChannel+0x12c>)
    ad3e:	9301      	str	r3, [sp, #4]
				break;
    ad40:	e7b4      	b.n	acac <phySetChannel+0x1c>
				frequncy_set = FREQ_928500KHZ;
    ad42:	4b1f      	ldr	r3, [pc, #124]	; (adc0 <phySetChannel+0x130>)
    ad44:	9301      	str	r3, [sp, #4]
				break;
    ad46:	e7b1      	b.n	acac <phySetChannel+0x1c>
				frequncy_set = FREQ_1020000KHZ;
    ad48:	4b1e      	ldr	r3, [pc, #120]	; (adc4 <phySetChannel+0x134>)
    ad4a:	9301      	str	r3, [sp, #4]
				break;
    ad4c:	e7ae      	b.n	acac <phySetChannel+0x1c>
				frequncy_set = FREQ_868100KHZ;
    ad4e:	4b09      	ldr	r3, [pc, #36]	; (ad74 <phySetChannel+0xe4>)
    ad50:	9301      	str	r3, [sp, #4]
				break;				
    ad52:	e7ab      	b.n	acac <phySetChannel+0x1c>
    ad54:	2000049c 	.word	0x2000049c
    ad58:	00019fbc 	.word	0x00019fbc
    ad5c:	33611380 	.word	0x33611380
    ad60:	0000f3d9 	.word	0x0000f3d9
    ad64:	337055c0 	.word	0x337055c0
    ad68:	338eda40 	.word	0x338eda40
    ad6c:	33a680f0 	.word	0x33a680f0
    ad70:	33ad5ec0 	.word	0x33ad5ec0
    ad74:	33be27a0 	.word	0x33be27a0
    ad78:	33d3e608 	.word	0x33d3e608
    ad7c:	33db2580 	.word	0x33db2580
    ad80:	35c80160 	.word	0x35c80160
    ad84:	35d2afc0 	.word	0x35d2afc0
    ad88:	3689cac0 	.word	0x3689cac0
    ad8c:	368cd800 	.word	0x368cd800
    ad90:	36978660 	.word	0x36978660
    ad94:	36d61600 	.word	0x36d61600
    ad98:	36e3d1a0 	.word	0x36e3d1a0
    ad9c:	36f313e0 	.word	0x36f313e0
    ada0:	36f49a80 	.word	0x36f49a80
    ada4:	36f62120 	.word	0x36f62120
    ada8:	3703dcc0 	.word	0x3703dcc0
    adac:	3706ea00 	.word	0x3706ea00
    adb0:	370870a0 	.word	0x370870a0
    adb4:	37226140 	.word	0x37226140
    adb8:	374886e0 	.word	0x374886e0
    adbc:	37502800 	.word	0x37502800
    adc0:	3757c920 	.word	0x3757c920
    adc4:	3ccbf700 	.word	0x3ccbf700

0000adc8 <radioCallback>:
{
    adc8:	b570      	push	{r4, r5, r6, lr}
    adca:	b082      	sub	sp, #8
    adcc:	0004      	movs	r4, r0
    adce:	000d      	movs	r5, r1
	callbackBackup = callback;
    add0:	4b3e      	ldr	r3, [pc, #248]	; (aecc <radioCallback+0x104>)
    add2:	7018      	strb	r0, [r3, #0]
	int16_t rssi_readVal=0;
    add4:	466b      	mov	r3, sp
    add6:	1c98      	adds	r0, r3, #2
    add8:	2300      	movs	r3, #0
    adda:	8003      	strh	r3, [r0, #0]
	Radio_ReadRssi(&rssi_readVal);
    addc:	4b3c      	ldr	r3, [pc, #240]	; (aed0 <radioCallback+0x108>)
    adde:	4798      	blx	r3
	switch (callback)
    ade0:	2c10      	cmp	r4, #16
    ade2:	d853      	bhi.n	ae8c <radioCallback+0xc4>
    ade4:	00a4      	lsls	r4, r4, #2
    ade6:	4b3b      	ldr	r3, [pc, #236]	; (aed4 <radioCallback+0x10c>)
    ade8:	591b      	ldr	r3, [r3, r4]
    adea:	469f      	mov	pc, r3
					if (RxBuffer[i].PayloadLen == 0)
    adec:	4b3a      	ldr	r3, [pc, #232]	; (aed8 <radioCallback+0x110>)
    adee:	781a      	ldrb	r2, [r3, #0]
    adf0:	2a00      	cmp	r2, #0
    adf2:	d00e      	beq.n	ae12 <radioCallback+0x4a>
    adf4:	2302      	movs	r3, #2
    adf6:	33ff      	adds	r3, #255	; 0xff
    adf8:	4a37      	ldr	r2, [pc, #220]	; (aed8 <radioCallback+0x110>)
    adfa:	5cd3      	ldrb	r3, [r2, r3]
    adfc:	2b00      	cmp	r3, #0
    adfe:	d04e      	beq.n	ae9e <radioCallback+0xd6>
    ae00:	4b36      	ldr	r3, [pc, #216]	; (aedc <radioCallback+0x114>)
    ae02:	5cd3      	ldrb	r3, [r2, r3]
    ae04:	2b00      	cmp	r3, #0
    ae06:	d04c      	beq.n	aea2 <radioCallback+0xda>
    ae08:	4b35      	ldr	r3, [pc, #212]	; (aee0 <radioCallback+0x118>)
    ae0a:	5cd3      	ldrb	r3, [r2, r3]
	uint8_t i,RxBank=0xFF;
    ae0c:	22ff      	movs	r2, #255	; 0xff
					if (RxBuffer[i].PayloadLen == 0)
    ae0e:	2b00      	cmp	r3, #0
    ae10:	d043      	beq.n	ae9a <radioCallback+0xd2>
				RxBuffer[RxBank].PayloadLen = callbackRx->RX.bufferLength;
    ae12:	0016      	movs	r6, r2
    ae14:	7a2c      	ldrb	r4, [r5, #8]
    ae16:	0213      	lsls	r3, r2, #8
    ae18:	189a      	adds	r2, r3, r2
    ae1a:	4b2f      	ldr	r3, [pc, #188]	; (aed8 <radioCallback+0x110>)
    ae1c:	54d4      	strb	r4, [r2, r3]
				if (RxBuffer[RxBank].PayloadLen < (RX_PACKET_SIZE - 4))			
    ae1e:	2cfa      	cmp	r4, #250	; 0xfa
    ae20:	d80d      	bhi.n	ae3e <radioCallback+0x76>
    ae22:	2300      	movs	r3, #0
						RxBuffer[RxBank].Payload[i] = callbackRx->RX.buffer[i];
    ae24:	0232      	lsls	r2, r6, #8
    ae26:	1992      	adds	r2, r2, r6
    ae28:	482b      	ldr	r0, [pc, #172]	; (aed8 <radioCallback+0x110>)
    ae2a:	1880      	adds	r0, r0, r2
    ae2c:	686a      	ldr	r2, [r5, #4]
    ae2e:	5cd1      	ldrb	r1, [r2, r3]
    ae30:	18c2      	adds	r2, r0, r3
    ae32:	7091      	strb	r1, [r2, #2]
					for (i = 0; i <= callbackRx->RX.bufferLength; i++)
    ae34:	3301      	adds	r3, #1
    ae36:	b2db      	uxtb	r3, r3
    ae38:	7a2a      	ldrb	r2, [r5, #8]
    ae3a:	429a      	cmp	r2, r3
    ae3c:	d2f6      	bcs.n	ae2c <radioCallback+0x64>
				RxBuffer[RxBank].PayloadLen +=4;
    ae3e:	4b26      	ldr	r3, [pc, #152]	; (aed8 <radioCallback+0x110>)
    ae40:	0232      	lsls	r2, r6, #8
    ae42:	1992      	adds	r2, r2, r6
    ae44:	3404      	adds	r4, #4
    ae46:	54d4      	strb	r4, [r2, r3]
				rssi_readVal = radioConfiguration.packetRSSI;
    ae48:	2156      	movs	r1, #86	; 0x56
    ae4a:	4826      	ldr	r0, [pc, #152]	; (aee4 <radioCallback+0x11c>)
    ae4c:	5e41      	ldrsh	r1, [r0, r1]
    ae4e:	4668      	mov	r0, sp
    ae50:	8041      	strh	r1, [r0, #2]
				RxBuffer[RxBank].radioRSSI = rssi_readVal;						
    ae52:	189b      	adds	r3, r3, r2
    ae54:	7059      	strb	r1, [r3, #1]
				if(RxBuffer[RxBank].Payload[0] & 0x20)
    ae56:	789b      	ldrb	r3, [r3, #2]
    ae58:	069b      	lsls	r3, r3, #26
    ae5a:	d524      	bpl.n	aea6 <radioCallback+0xde>
					RadioReceiveParam.action = RECEIVE_STOP;					
    ae5c:	a801      	add	r0, sp, #4
    ae5e:	2301      	movs	r3, #1
    ae60:	7003      	strb	r3, [r0, #0]
					RadioReceiveParam.rxWindowSize = 0;
    ae62:	2300      	movs	r3, #0
    ae64:	8043      	strh	r3, [r0, #2]
					RADIO_Receive(&RadioReceiveParam);
    ae66:	4b20      	ldr	r3, [pc, #128]	; (aee8 <radioCallback+0x120>)
    ae68:	4798      	blx	r3
    ae6a:	e00f      	b.n	ae8c <radioCallback+0xc4>
			if((!AckReqData)||(callbackRx->status != ERR_NONE))
    ae6c:	4b1f      	ldr	r3, [pc, #124]	; (aeec <radioCallback+0x124>)
    ae6e:	781b      	ldrb	r3, [r3, #0]
    ae70:	2b00      	cmp	r3, #0
    ae72:	d002      	beq.n	ae7a <radioCallback+0xb2>
    ae74:	782b      	ldrb	r3, [r5, #0]
    ae76:	2b00      	cmp	r3, #0
    ae78:	d00a      	beq.n	ae90 <radioCallback+0xc8>
				PHY_DataConf(callbackRx->status); // Need to convert LoRa status to MiWi status
    ae7a:	7828      	ldrb	r0, [r5, #0]
    ae7c:	4b1c      	ldr	r3, [pc, #112]	; (aef0 <radioCallback+0x128>)
    ae7e:	4798      	blx	r3
			RadioReceiveParam.action = RECEIVE_START;
    ae80:	a801      	add	r0, sp, #4
    ae82:	2300      	movs	r3, #0
    ae84:	7003      	strb	r3, [r0, #0]
			RadioReceiveParam.rxWindowSize = 0;
    ae86:	8043      	strh	r3, [r0, #2]
			RADIO_Receive(&RadioReceiveParam);
    ae88:	4b17      	ldr	r3, [pc, #92]	; (aee8 <radioCallback+0x120>)
    ae8a:	4798      	blx	r3
}
    ae8c:	b002      	add	sp, #8
    ae8e:	bd70      	pop	{r4, r5, r6, pc}
				DataTxAckTimer.Val = MiWi_TickGet();
    ae90:	4b18      	ldr	r3, [pc, #96]	; (aef4 <radioCallback+0x12c>)
    ae92:	4798      	blx	r3
    ae94:	4b18      	ldr	r3, [pc, #96]	; (aef8 <radioCallback+0x130>)
    ae96:	6018      	str	r0, [r3, #0]
    ae98:	e7f2      	b.n	ae80 <radioCallback+0xb8>
				for (i = 0; i < BANK_SIZE; i++)
    ae9a:	3afc      	subs	r2, #252	; 0xfc
    ae9c:	e7b9      	b.n	ae12 <radioCallback+0x4a>
    ae9e:	2201      	movs	r2, #1
    aea0:	e7b7      	b.n	ae12 <radioCallback+0x4a>
    aea2:	2202      	movs	r2, #2
    aea4:	e7b5      	b.n	ae12 <radioCallback+0x4a>
					RadioReceiveParam.action = RECEIVE_START;
    aea6:	a801      	add	r0, sp, #4
    aea8:	2300      	movs	r3, #0
    aeaa:	7003      	strb	r3, [r0, #0]
					RadioReceiveParam.rxWindowSize = 0;
    aeac:	8043      	strh	r3, [r0, #2]
					RADIO_Receive(&RadioReceiveParam);	
    aeae:	4b0e      	ldr	r3, [pc, #56]	; (aee8 <radioCallback+0x120>)
    aeb0:	4798      	blx	r3
    aeb2:	e7eb      	b.n	ae8c <radioCallback+0xc4>
				RadioReceiveParam.action = RECEIVE_START;
    aeb4:	ac01      	add	r4, sp, #4
    aeb6:	2300      	movs	r3, #0
    aeb8:	7023      	strb	r3, [r4, #0]
				RadioReceiveParam.rxWindowSize = 0;
    aeba:	8063      	strh	r3, [r4, #2]
				PHY_DataConf(FAILURE);											
    aebc:	2001      	movs	r0, #1
    aebe:	4b0c      	ldr	r3, [pc, #48]	; (aef0 <radioCallback+0x128>)
    aec0:	4798      	blx	r3
				RADIO_Receive(&RadioReceiveParam);
    aec2:	0020      	movs	r0, r4
    aec4:	4b08      	ldr	r3, [pc, #32]	; (aee8 <radioCallback+0x120>)
    aec6:	4798      	blx	r3
}
    aec8:	e7e0      	b.n	ae8c <radioCallback+0xc4>
    aeca:	46c0      	nop			; (mov r8, r8)
    aecc:	2000245b 	.word	0x2000245b
    aed0:	0000ed8d 	.word	0x0000ed8d
    aed4:	0001a024 	.word	0x0001a024
    aed8:	20002464 	.word	0x20002464
    aedc:	00000202 	.word	0x00000202
    aee0:	00000303 	.word	0x00000303
    aee4:	20003780 	.word	0x20003780
    aee8:	000105e5 	.word	0x000105e5
    aeec:	2000048c 	.word	0x2000048c
    aef0:	0000a42d 	.word	0x0000a42d
    aef4:	0000d3f5 	.word	0x0000d3f5
    aef8:	20003364 	.word	0x20003364

0000aefc <PHY_Init>:
{
    aefc:	b510      	push	{r4, lr}
    HAL_RadioInit();
    aefe:	4b06      	ldr	r3, [pc, #24]	; (af18 <PHY_Init+0x1c>)
    af00:	4798      	blx	r3
    AESInit();	
    af02:	4b06      	ldr	r3, [pc, #24]	; (af1c <PHY_Init+0x20>)
    af04:	4798      	blx	r3
	RADIO_Init();
    af06:	4b06      	ldr	r3, [pc, #24]	; (af20 <PHY_Init+0x24>)
    af08:	4798      	blx	r3
	RADIO_SetAttr(RADIO_CALLBACK, (void *)&radioCallback);
    af0a:	4906      	ldr	r1, [pc, #24]	; (af24 <PHY_Init+0x28>)
    af0c:	201a      	movs	r0, #26
    af0e:	4b06      	ldr	r3, [pc, #24]	; (af28 <PHY_Init+0x2c>)
    af10:	4798      	blx	r3
   RADIO_InitDefaultAttributes();				
    af12:	4b06      	ldr	r3, [pc, #24]	; (af2c <PHY_Init+0x30>)
    af14:	4798      	blx	r3
}
    af16:	bd10      	pop	{r4, pc}
    af18:	0000d7a9 	.word	0x0000d7a9
    af1c:	0000e251 	.word	0x0000e251
    af20:	0000f5d5 	.word	0x0000f5d5
    af24:	0000adc9 	.word	0x0000adc9
    af28:	0000f3d9 	.word	0x0000f3d9
    af2c:	000103f1 	.word	0x000103f1

0000af30 <PHY_SetRxState>:
{
    af30:	b510      	push	{r4, lr}

/*************************************************************************//**
*****************************************************************************/
static void phySetRxState(void)
{
	RADIO_RxHandler();
    af32:	4b01      	ldr	r3, [pc, #4]	; (af38 <PHY_SetRxState+0x8>)
    af34:	4798      	blx	r3
}
    af36:	bd10      	pop	{r4, pc}
    af38:	000102d9 	.word	0x000102d9

0000af3c <PHY_SetPanId>:
{
    af3c:	b082      	sub	sp, #8
	DevPanId[0]=d[0];
    af3e:	b2c2      	uxtb	r2, r0
    af40:	4b02      	ldr	r3, [pc, #8]	; (af4c <PHY_SetPanId+0x10>)
    af42:	701a      	strb	r2, [r3, #0]
	DevPanId[1]=d[1];
    af44:	0a00      	lsrs	r0, r0, #8
    af46:	7058      	strb	r0, [r3, #1]
}
    af48:	b002      	add	sp, #8
    af4a:	4770      	bx	lr
    af4c:	20002868 	.word	0x20002868

0000af50 <PHY_SetShortAddr>:
{
    af50:	b082      	sub	sp, #8
	DevShortAddress[0]=d[0];
    af52:	b2c2      	uxtb	r2, r0
    af54:	4b02      	ldr	r3, [pc, #8]	; (af60 <PHY_SetShortAddr+0x10>)
    af56:	701a      	strb	r2, [r3, #0]
	DevShortAddress[1]=d[1];
    af58:	0a00      	lsrs	r0, r0, #8
    af5a:	7058      	strb	r0, [r3, #1]
}
    af5c:	b002      	add	sp, #8
    af5e:	4770      	bx	lr
    af60:	2000286c 	.word	0x2000286c

0000af64 <PHY_GetAttribute>:
{
    af64:	b510      	push	{r4, lr}
	switch(RadioAttr)
    af66:	2807      	cmp	r0, #7
    af68:	d003      	beq.n	af72 <PHY_GetAttribute+0xe>
    af6a:	2816      	cmp	r0, #22
    af6c:	d001      	beq.n	af72 <PHY_GetAttribute+0xe>
			Status = ERR_INVALID_REQ;
    af6e:	2003      	movs	r0, #3
}
    af70:	bd10      	pop	{r4, pc}
			Status = RADIO_GetAttr(RadioAttr,AttrVal);
    af72:	4b01      	ldr	r3, [pc, #4]	; (af78 <PHY_GetAttribute+0x14>)
    af74:	4798      	blx	r3
			break;
    af76:	e7fb      	b.n	af70 <PHY_GetAttribute+0xc>
    af78:	0000f2e9 	.word	0x0000f2e9

0000af7c <PHY_Wakeup>:
{
    af7c:	b510      	push	{r4, lr}
	if (PHY_STATE_SLEEP == phyState)
    af7e:	4b0c      	ldr	r3, [pc, #48]	; (afb0 <PHY_Wakeup+0x34>)
    af80:	781b      	ldrb	r3, [r3, #0]
    af82:	2b02      	cmp	r3, #2
    af84:	d000      	beq.n	af88 <PHY_Wakeup+0xc>
}
    af86:	bd10      	pop	{r4, pc}
		HAL_TCXOPowerOn();
    af88:	4b0a      	ldr	r3, [pc, #40]	; (afb4 <PHY_Wakeup+0x38>)
    af8a:	4798      	blx	r3
		HAL_RadioInit();
    af8c:	4b0a      	ldr	r3, [pc, #40]	; (afb8 <PHY_Wakeup+0x3c>)
    af8e:	4798      	blx	r3
		RADIO_Reset();
    af90:	4b0a      	ldr	r3, [pc, #40]	; (afbc <PHY_Wakeup+0x40>)
    af92:	4798      	blx	r3
		Radio_WriteMode(MODE_STANDBY, radioConfiguration.modulation, 0);
    af94:	2334      	movs	r3, #52	; 0x34
    af96:	4a0a      	ldr	r2, [pc, #40]	; (afc0 <PHY_Wakeup+0x44>)
    af98:	5cd1      	ldrb	r1, [r2, r3]
    af9a:	2200      	movs	r2, #0
    af9c:	2001      	movs	r0, #1
    af9e:	4b09      	ldr	r3, [pc, #36]	; (afc4 <PHY_Wakeup+0x48>)
    afa0:	4798      	blx	r3
	RADIO_RxHandler();
    afa2:	4b09      	ldr	r3, [pc, #36]	; (afc8 <PHY_Wakeup+0x4c>)
    afa4:	4798      	blx	r3
	 	phyState = PHY_STATE_IDLE;
    afa6:	2201      	movs	r2, #1
    afa8:	4b01      	ldr	r3, [pc, #4]	; (afb0 <PHY_Wakeup+0x34>)
    afaa:	701a      	strb	r2, [r3, #0]
}
    afac:	e7eb      	b.n	af86 <PHY_Wakeup+0xa>
    afae:	46c0      	nop			; (mov r8, r8)
    afb0:	2000049d 	.word	0x2000049d
    afb4:	0000dae9 	.word	0x0000dae9
    afb8:	0000d7a9 	.word	0x0000d7a9
    afbc:	0000d961 	.word	0x0000d961
    afc0:	20003780 	.word	0x20003780
    afc4:	0000ebc9 	.word	0x0000ebc9
    afc8:	000102d9 	.word	0x000102d9

0000afcc <PHY_SetChannel>:
{
    afcc:	b510      	push	{r4, lr}
	phyChannel = channel;
    afce:	4b06      	ldr	r3, [pc, #24]	; (afe8 <PHY_SetChannel+0x1c>)
    afd0:	7018      	strb	r0, [r3, #0]
	if (PHY_STATE_SLEEP == phyState)
    afd2:	4b06      	ldr	r3, [pc, #24]	; (afec <PHY_SetChannel+0x20>)
    afd4:	781b      	ldrb	r3, [r3, #0]
    afd6:	2b02      	cmp	r3, #2
    afd8:	d002      	beq.n	afe0 <PHY_SetChannel+0x14>
	phySetChannel();
    afda:	4b05      	ldr	r3, [pc, #20]	; (aff0 <PHY_SetChannel+0x24>)
    afdc:	4798      	blx	r3
}
    afde:	bd10      	pop	{r4, pc}
		PHY_Wakeup();
    afe0:	4b04      	ldr	r3, [pc, #16]	; (aff4 <PHY_SetChannel+0x28>)
    afe2:	4798      	blx	r3
    afe4:	e7f9      	b.n	afda <PHY_SetChannel+0xe>
    afe6:	46c0      	nop			; (mov r8, r8)
    afe8:	2000049c 	.word	0x2000049c
    afec:	2000049d 	.word	0x2000049d
    aff0:	0000ac91 	.word	0x0000ac91
    aff4:	0000af7d 	.word	0x0000af7d

0000aff8 <PHY_DataReq>:
{
    aff8:	b500      	push	{lr}
    affa:	b085      	sub	sp, #20
		RadioTransmitParam.bufferLen = data[0];
    affc:	7803      	ldrb	r3, [r0, #0]
    affe:	aa02      	add	r2, sp, #8
    b000:	7013      	strb	r3, [r2, #0]
		for (count = 0; count < data[0]; count++)
    b002:	2b00      	cmp	r3, #0
    b004:	d009      	beq.n	b01a <PHY_DataReq+0x22>
    b006:	2300      	movs	r3, #0
			DataRequestBuffer[count] = data[1+count];
    b008:	4912      	ldr	r1, [pc, #72]	; (b054 <PHY_DataReq+0x5c>)
    b00a:	18c2      	adds	r2, r0, r3
    b00c:	7852      	ldrb	r2, [r2, #1]
    b00e:	54ca      	strb	r2, [r1, r3]
		for (count = 0; count < data[0]; count++)
    b010:	3301      	adds	r3, #1
    b012:	b2db      	uxtb	r3, r3
    b014:	7802      	ldrb	r2, [r0, #0]
    b016:	429a      	cmp	r2, r3
    b018:	d8f7      	bhi.n	b00a <PHY_DataReq+0x12>
		RadioTransmitParam.bufferPtr = (uint8_t *)&DataRequestBuffer;
    b01a:	4b0e      	ldr	r3, [pc, #56]	; (b054 <PHY_DataReq+0x5c>)
    b01c:	9303      	str	r3, [sp, #12]
		RadioSetState(RADIO_STATE_IDLE);
    b01e:	2001      	movs	r0, #1
    b020:	4b0d      	ldr	r3, [pc, #52]	; (b058 <PHY_DataReq+0x60>)
    b022:	4798      	blx	r3
		phySetChannel();
    b024:	4b0d      	ldr	r3, [pc, #52]	; (b05c <PHY_DataReq+0x64>)
    b026:	4798      	blx	r3
		localRadioLBTParams.lbtScanPeriod   = 10;
    b028:	230a      	movs	r3, #10
    b02a:	466a      	mov	r2, sp
    b02c:	8013      	strh	r3, [r2, #0]
		localRadioLBTParams.lbtThreshold	= -90;
    b02e:	3b64      	subs	r3, #100	; 0x64
    b030:	8053      	strh	r3, [r2, #2]
		localRadioLBTParams.lbtNumOfSamples = 9;
    b032:	3363      	adds	r3, #99	; 0x63
    b034:	7113      	strb	r3, [r2, #4]
		localRadioLBTParams.lbtTransmitOn = 0;
    b036:	2300      	movs	r3, #0
    b038:	7153      	strb	r3, [r2, #5]
		status = RADIO_SetAttr(RADIO_LBT_PARAMS, &localRadioLBTParams);
    b03a:	4669      	mov	r1, sp
    b03c:	201d      	movs	r0, #29
    b03e:	4b08      	ldr	r3, [pc, #32]	; (b060 <PHY_DataReq+0x68>)
    b040:	4798      	blx	r3
		status = RADIO_Transmit (&RadioTransmitParam);
    b042:	a802      	add	r0, sp, #8
    b044:	4b07      	ldr	r3, [pc, #28]	; (b064 <PHY_DataReq+0x6c>)
    b046:	4798      	blx	r3
		return (!status);							
    b048:	4243      	negs	r3, r0
    b04a:	4158      	adcs	r0, r3
    b04c:	b2c0      	uxtb	r0, r0
}
    b04e:	b005      	add	sp, #20
    b050:	bd00      	pop	{pc}
    b052:	46c0      	nop			; (mov r8, r8)
    b054:	2000235c 	.word	0x2000235c
    b058:	0000fce1 	.word	0x0000fce1
    b05c:	0000ac91 	.word	0x0000ac91
    b060:	0000f3d9 	.word	0x0000f3d9
    b064:	0000fd09 	.word	0x0000fd09

0000b068 <PHY_RandomReq>:
{
    b068:	b510      	push	{r4, lr}
	rnd = RADIO_ReadRandom();
    b06a:	4b03      	ldr	r3, [pc, #12]	; (b078 <PHY_RandomReq+0x10>)
    b06c:	4798      	blx	r3
    b06e:	0004      	movs	r4, r0
	RADIO_RxHandler();
    b070:	4b02      	ldr	r3, [pc, #8]	; (b07c <PHY_RandomReq+0x14>)
    b072:	4798      	blx	r3
}
    b074:	0020      	movs	r0, r4
    b076:	bd10      	pop	{r4, pc}
    b078:	0000ecfd 	.word	0x0000ecfd
    b07c:	000102d9 	.word	0x000102d9

0000b080 <PHY_EncryptReq>:
{	
    b080:	b510      	push	{r4, lr}
	AESEncode(text,key);
    b082:	4b01      	ldr	r3, [pc, #4]	; (b088 <PHY_EncryptReq+0x8>)
    b084:	4798      	blx	r3
}
    b086:	bd10      	pop	{r4, pc}
    b088:	0000e175 	.word	0x0000e175

0000b08c <PHY_SetIEEEAddr>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_SetIEEEAddr(uint8_t *ieee_addr)
{
    b08c:	2300      	movs	r3, #0
	uint8_t *ptr_to_reg = ieee_addr;

	for (uint8_t i = 0; i < 8; i++)
	{
		DevIEEEaddr[i] = ptr_to_reg[i];
    b08e:	4903      	ldr	r1, [pc, #12]	; (b09c <PHY_SetIEEEAddr+0x10>)
    b090:	5cc2      	ldrb	r2, [r0, r3]
    b092:	54ca      	strb	r2, [r1, r3]
    b094:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < 8; i++)
    b096:	2b08      	cmp	r3, #8
    b098:	d1fa      	bne.n	b090 <PHY_SetIEEEAddr+0x4>
	}
}
    b09a:	4770      	bx	lr
    b09c:	2000245c 	.word	0x2000245c

0000b0a0 <PHY_TaskHandler>:
    if (PHY_STATE_SLEEP == phyState)
    {
        return;
    }
	// Handled in DIO interrupts 
}
    b0a0:	4770      	bx	lr
    b0a2:	Address 0x0000b0a2 is out of bounds.


0000b0a4 <Find_Index>:

/* All connections (FFD || RFD)are stored in Connection Table of PAN Coordinator
    Each Connection is identified by its index no. In case of Data TX , EDx --> PAN CO --> EDy
    PAN Coordinator will forward the data to EDy , In order to know */
static uint8_t Find_Index (uint8_t *DestAddr)
{
    b0a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    b0a6:	b083      	sub	sp, #12
    b0a8:	0006      	movs	r6, r0
    uint8_t i;
    uint8_t return_val;
    for (i = 0;i < conn_size; i++)
    b0aa:	4b15      	ldr	r3, [pc, #84]	; (b100 <Find_Index+0x5c>)
    b0ac:	781c      	ldrb	r4, [r3, #0]
    b0ae:	2c00      	cmp	r4, #0
    b0b0:	d024      	beq.n	b0fc <Find_Index+0x58>
    b0b2:	4a14      	ldr	r2, [pc, #80]	; (b104 <Find_Index+0x60>)
    b0b4:	2100      	movs	r1, #0
    b0b6:	2000      	movs	r0, #0
    {
        if (ConnectionTable[i].status.bits.isValid)
    b0b8:	4d13      	ldr	r5, [pc, #76]	; (b108 <Find_Index+0x64>)
    b0ba:	e005      	b.n	b0c8 <Find_Index+0x24>
    for (i = 0;i < conn_size; i++)
    b0bc:	3001      	adds	r0, #1
    b0be:	b2c0      	uxtb	r0, r0
    b0c0:	3101      	adds	r1, #1
    b0c2:	3210      	adds	r2, #16
    b0c4:	42a0      	cmp	r0, r4
    b0c6:	d016      	beq.n	b0f6 <Find_Index+0x52>
        if (ConnectionTable[i].status.bits.isValid)
    b0c8:	010b      	lsls	r3, r1, #4
    b0ca:	18eb      	adds	r3, r5, r3
    b0cc:	7b1b      	ldrb	r3, [r3, #12]
    b0ce:	09db      	lsrs	r3, r3, #7
    b0d0:	d0f4      	beq.n	b0bc <Find_Index+0x18>
    b0d2:	9201      	str	r2, [sp, #4]
        {
            if (DestAddr[0] == ConnectionTable[i].Address[0] && DestAddr[1] == ConnectionTable[i].Address[1] && DestAddr[2] == ConnectionTable[i].Address[2] )
    b0d4:	7837      	ldrb	r7, [r6, #0]
    b0d6:	7813      	ldrb	r3, [r2, #0]
    b0d8:	429f      	cmp	r7, r3
    b0da:	d1ef      	bne.n	b0bc <Find_Index+0x18>
    b0dc:	7877      	ldrb	r7, [r6, #1]
    b0de:	7853      	ldrb	r3, [r2, #1]
    b0e0:	429f      	cmp	r7, r3
    b0e2:	d1eb      	bne.n	b0bc <Find_Index+0x18>
    b0e4:	78b3      	ldrb	r3, [r6, #2]
    b0e6:	469c      	mov	ip, r3
    b0e8:	7893      	ldrb	r3, [r2, #2]
    b0ea:	459c      	cmp	ip, r3
    b0ec:	d1e6      	bne.n	b0bc <Find_Index+0x18>
                break;
            }

        }
    }
    if (i == conn_size)
    b0ee:	4284      	cmp	r4, r0
    b0f0:	d102      	bne.n	b0f8 <Find_Index+0x54>
    {
        return_val = 0xff;
    b0f2:	20ff      	movs	r0, #255	; 0xff
    b0f4:	e000      	b.n	b0f8 <Find_Index+0x54>
    b0f6:	20ff      	movs	r0, #255	; 0xff
    }
    return return_val;
}
    b0f8:	b003      	add	sp, #12
    b0fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return_val = 0xff;
    b0fc:	20ff      	movs	r0, #255	; 0xff
    b0fe:	e7fb      	b.n	b0f8 <Find_Index+0x54>
    b100:	20003059 	.word	0x20003059
    b104:	20002ef0 	.word	0x20002ef0
    b108:	20002eec 	.word	0x20002eec

0000b10c <CommandConfCallback>:
{
    b10c:	b510      	push	{r4, lr}
    MiMem_Free(msgPointer);
    b10e:	0010      	movs	r0, r2
    b110:	4b02      	ldr	r3, [pc, #8]	; (b11c <CommandConfCallback+0x10>)
    b112:	4798      	blx	r3
	if((P2PStatus.bits.SearchConnection) && (status!=SUCCESS) )
    b114:	4b02      	ldr	r3, [pc, #8]	; (b120 <CommandConfCallback+0x14>)
    b116:	781b      	ldrb	r3, [r3, #0]
}
    b118:	bd10      	pop	{r4, pc}
    b11a:	46c0      	nop			; (mov r8, r8)
    b11c:	0000d271 	.word	0x0000d271
    b120:	200030b0 	.word	0x200030b0

0000b124 <ForwardmessageConfCallback>:
{
    b124:	b510      	push	{r4, lr}
	-- FW_Stat;
    b126:	4904      	ldr	r1, [pc, #16]	; (b138 <ForwardmessageConfCallback+0x14>)
    b128:	780b      	ldrb	r3, [r1, #0]
    b12a:	3b01      	subs	r3, #1
    b12c:	b2db      	uxtb	r3, r3
    b12e:	700b      	strb	r3, [r1, #0]
	MiMem_Free(msgPointer);
    b130:	0010      	movs	r0, r2
    b132:	4b02      	ldr	r3, [pc, #8]	; (b13c <ForwardmessageConfCallback+0x18>)
    b134:	4798      	blx	r3
}
    b136:	bd10      	pop	{r4, pc}
    b138:	2000049e 	.word	0x2000049e
    b13c:	0000d271 	.word	0x0000d271

0000b140 <linkStatusConfCallback>:
{
    b140:	b510      	push	{r4, lr}
    b142:	000c      	movs	r4, r1
	MiMem_Free(msgPointer);
    b144:	0010      	movs	r0, r2
    b146:	4b12      	ldr	r3, [pc, #72]	; (b190 <linkStatusConfCallback+0x50>)
    b148:	4798      	blx	r3
	if ((SUCCESS != status) && (LinkStatus == true))
    b14a:	2c00      	cmp	r4, #0
    b14c:	d018      	beq.n	b180 <linkStatusConfCallback+0x40>
    b14e:	4b11      	ldr	r3, [pc, #68]	; (b194 <linkStatusConfCallback+0x54>)
    b150:	781b      	ldrb	r3, [r3, #0]
    b152:	2b00      	cmp	r3, #0
    b154:	d014      	beq.n	b180 <linkStatusConfCallback+0x40>
		if (linkStatusFailureCount >= MAX_LINK_STATUS_FAILURES)
    b156:	4b10      	ldr	r3, [pc, #64]	; (b198 <linkStatusConfCallback+0x58>)
    b158:	781b      	ldrb	r3, [r3, #0]
    b15a:	2b04      	cmp	r3, #4
    b15c:	d90b      	bls.n	b176 <linkStatusConfCallback+0x36>
			linkStatusTimerSet = false;
    b15e:	2300      	movs	r3, #0
    b160:	4a0e      	ldr	r2, [pc, #56]	; (b19c <linkStatusConfCallback+0x5c>)
    b162:	7013      	strb	r3, [r2, #0]
			linkStatusFailureCount = 0;
    b164:	4a0c      	ldr	r2, [pc, #48]	; (b198 <linkStatusConfCallback+0x58>)
    b166:	7013      	strb	r3, [r2, #0]
			LinkStatus = false;
    b168:	4a0a      	ldr	r2, [pc, #40]	; (b194 <linkStatusConfCallback+0x54>)
    b16a:	7013      	strb	r3, [r2, #0]
			if ((NULL != linkFailureCallback))
    b16c:	4b0c      	ldr	r3, [pc, #48]	; (b1a0 <linkStatusConfCallback+0x60>)
    b16e:	681b      	ldr	r3, [r3, #0]
    b170:	2b00      	cmp	r3, #0
    b172:	d000      	beq.n	b176 <linkStatusConfCallback+0x36>
				linkFailureCallback();
    b174:	4798      	blx	r3
		++linkStatusFailureCount;
    b176:	4a08      	ldr	r2, [pc, #32]	; (b198 <linkStatusConfCallback+0x58>)
    b178:	7813      	ldrb	r3, [r2, #0]
    b17a:	3301      	adds	r3, #1
    b17c:	7013      	strb	r3, [r2, #0]
    b17e:	e002      	b.n	b186 <linkStatusConfCallback+0x46>
		linkStatusFailureCount = 0;
    b180:	2200      	movs	r2, #0
    b182:	4b05      	ldr	r3, [pc, #20]	; (b198 <linkStatusConfCallback+0x58>)
    b184:	701a      	strb	r2, [r3, #0]
	LinkStatus = false;
    b186:	2200      	movs	r2, #0
    b188:	4b02      	ldr	r3, [pc, #8]	; (b194 <linkStatusConfCallback+0x54>)
    b18a:	701a      	strb	r2, [r3, #0]
}
    b18c:	bd10      	pop	{r4, pc}
    b18e:	46c0      	nop			; (mov r8, r8)
    b190:	0000d271 	.word	0x0000d271
    b194:	2000049f 	.word	0x2000049f
    b198:	200004ab 	.word	0x200004ab
    b19c:	200004ac 	.word	0x200004ac
    b1a0:	20003350 	.word	0x20003350

0000b1a4 <Total_Connections>:
{
    b1a4:	b510      	push	{r4, lr}
    b1a6:	4b0b      	ldr	r3, [pc, #44]	; (b1d4 <Total_Connections+0x30>)
    b1a8:	001c      	movs	r4, r3
    b1aa:	3441      	adds	r4, #65	; 0x41
    b1ac:	34ff      	adds	r4, #255	; 0xff
    uint8_t count=0 , i;
    b1ae:	2000      	movs	r0, #0
    b1b0:	e004      	b.n	b1bc <Total_Connections+0x18>
			count++;
    b1b2:	3001      	adds	r0, #1
    b1b4:	b2c0      	uxtb	r0, r0
    b1b6:	3310      	adds	r3, #16
    for (i=0;i<CONNECTION_SIZE;i++)
    b1b8:	42a3      	cmp	r3, r4
    b1ba:	d009      	beq.n	b1d0 <Total_Connections+0x2c>
		if (ConnectionTable[i].Address[0] != 0x00 || ConnectionTable[i].Address[1] != 0x00 || ConnectionTable[i].Address[2] != 0x00)
    b1bc:	781a      	ldrb	r2, [r3, #0]
    b1be:	2a00      	cmp	r2, #0
    b1c0:	d1f7      	bne.n	b1b2 <Total_Connections+0xe>
    b1c2:	785a      	ldrb	r2, [r3, #1]
    b1c4:	2a00      	cmp	r2, #0
    b1c6:	d1f4      	bne.n	b1b2 <Total_Connections+0xe>
    b1c8:	789a      	ldrb	r2, [r3, #2]
    b1ca:	2a00      	cmp	r2, #0
    b1cc:	d0f3      	beq.n	b1b6 <Total_Connections+0x12>
    b1ce:	e7f0      	b.n	b1b2 <Total_Connections+0xe>
}
    b1d0:	bd10      	pop	{r4, pc}
    b1d2:	46c0      	nop			; (mov r8, r8)
    b1d4:	20002ef0 	.word	0x20002ef0

0000b1d8 <IndirectPacket>:
    { 
    b1d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    b1da:	46de      	mov	lr, fp
    b1dc:	4657      	mov	r7, sl
    b1de:	464e      	mov	r6, r9
    b1e0:	4645      	mov	r5, r8
    b1e2:	b5e0      	push	{r5, r6, r7, lr}
    b1e4:	b083      	sub	sp, #12
    b1e6:	466c      	mov	r4, sp
    b1e8:	8061      	strh	r1, [r4, #2]
    b1ea:	ac0c      	add	r4, sp, #48	; 0x30
    b1ec:	7827      	ldrb	r7, [r4, #0]
    b1ee:	ac0d      	add	r4, sp, #52	; 0x34
    b1f0:	7826      	ldrb	r6, [r4, #0]
    b1f2:	ac0f      	add	r4, sp, #60	; 0x3c
    b1f4:	7825      	ldrb	r5, [r4, #0]
    b1f6:	ac10      	add	r4, sp, #64	; 0x40
    b1f8:	7821      	ldrb	r1, [r4, #0]
    b1fa:	4688      	mov	r8, r1
            if( Broadcast )
    b1fc:	2800      	cmp	r0, #0
    b1fe:	d000      	beq.n	b202 <IndirectPacket+0x2a>
    b200:	e080      	b.n	b304 <IndirectPacket+0x12c>
            if( indirectMessages[i].flags.bits.isValid == 0 )
    b202:	4c41      	ldr	r4, [pc, #260]	; (b308 <IndirectPacket+0x130>)
    b204:	7ea4      	ldrb	r4, [r4, #26]
    b206:	07e1      	lsls	r1, r4, #31
    b208:	d400      	bmi.n	b20c <IndirectPacket+0x34>
    b20a:	e079      	b.n	b300 <IndirectPacket+0x128>
    b20c:	249d      	movs	r4, #157	; 0x9d
    b20e:	0064      	lsls	r4, r4, #1
    b210:	493d      	ldr	r1, [pc, #244]	; (b308 <IndirectPacket+0x130>)
    b212:	5d0c      	ldrb	r4, [r1, r4]
    b214:	07e1      	lsls	r1, r4, #31
    b216:	d506      	bpl.n	b226 <IndirectPacket+0x4e>
    }
    b218:	b003      	add	sp, #12
    b21a:	bc3c      	pop	{r2, r3, r4, r5}
    b21c:	4690      	mov	r8, r2
    b21e:	4699      	mov	r9, r3
    b220:	46a2      	mov	sl, r4
    b222:	46ab      	mov	fp, r5
    b224:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( indirectMessages[i].flags.bits.isValid == 0 )
    b226:	2401      	movs	r4, #1
                indirectMessages[i].flags.bits.isValid          = true;
    b228:	00e0      	lsls	r0, r4, #3
    b22a:	1900      	adds	r0, r0, r4
    b22c:	0140      	lsls	r0, r0, #5
    b22e:	4936      	ldr	r1, [pc, #216]	; (b308 <IndirectPacket+0x130>)
    b230:	468c      	mov	ip, r1
    b232:	4484      	add	ip, r0
    b234:	2118      	movs	r1, #24
    b236:	4461      	add	r1, ip
    b238:	4689      	mov	r9, r1
    b23a:	7889      	ldrb	r1, [r1, #2]
    b23c:	2001      	movs	r0, #1
    b23e:	4301      	orrs	r1, r0
    b240:	468a      	mov	sl, r1
                indirectMessages[i].flags.bits.isCommand        = isCommand;
    b242:	2001      	movs	r0, #1
    b244:	4003      	ands	r3, r0
    b246:	0099      	lsls	r1, r3, #2
    b248:	9101      	str	r1, [sp, #4]
    b24a:	21fd      	movs	r1, #253	; 0xfd
    b24c:	468b      	mov	fp, r1
    b24e:	4651      	mov	r1, sl
    b250:	465b      	mov	r3, fp
    b252:	4019      	ands	r1, r3
    b254:	3bf9      	subs	r3, #249	; 0xf9
    b256:	4399      	bics	r1, r3
                indirectMessages[i].flags.bits.isSecured        = SecurityEnabled;
    b258:	4007      	ands	r7, r0
    b25a:	00ff      	lsls	r7, r7, #3
    b25c:	000b      	movs	r3, r1
    b25e:	9901      	ldr	r1, [sp, #4]
    b260:	4319      	orrs	r1, r3
    b262:	000b      	movs	r3, r1
    b264:	2108      	movs	r1, #8
    b266:	438b      	bics	r3, r1
				indirectMessages[i].flags.bits.ackReq           = ackReq;
    b268:	4641      	mov	r1, r8
    b26a:	4008      	ands	r0, r1
    b26c:	0101      	lsls	r1, r0, #4
    b26e:	433b      	orrs	r3, r7
    b270:	0018      	movs	r0, r3
    b272:	2310      	movs	r3, #16
    b274:	4398      	bics	r0, r3
    b276:	4308      	orrs	r0, r1
    b278:	464b      	mov	r3, r9
    b27a:	7098      	strb	r0, [r3, #2]
                    indirectMessages[i].DestPANID.Val           = DestinationPANID.Val;
    b27c:	4663      	mov	r3, ip
    b27e:	4669      	mov	r1, sp
    b280:	8849      	ldrh	r1, [r1, #2]
    b282:	8099      	strh	r1, [r3, #4]
                if( DestinationAddress != NULL )
    b284:	2a00      	cmp	r2, #0
    b286:	d00d      	beq.n	b2a4 <IndirectPacket+0xcc>
    b288:	0013      	movs	r3, r2
    b28a:	00e1      	lsls	r1, r4, #3
    b28c:	1909      	adds	r1, r1, r4
    b28e:	0149      	lsls	r1, r1, #5
    b290:	3106      	adds	r1, #6
    b292:	481d      	ldr	r0, [pc, #116]	; (b308 <IndirectPacket+0x130>)
    b294:	1809      	adds	r1, r1, r0
    b296:	3208      	adds	r2, #8
                        indirectMessages[i].DestAddress.DestLongAddress[j] = DestinationAddress[j];
    b298:	7818      	ldrb	r0, [r3, #0]
    b29a:	7008      	strb	r0, [r1, #0]
    b29c:	3301      	adds	r3, #1
    b29e:	3101      	adds	r1, #1
                    for(j = 0; j < MY_ADDRESS_LENGTH; j++)
    b2a0:	4293      	cmp	r3, r2
    b2a2:	d1f9      	bne.n	b298 <IndirectPacket+0xc0>
                indirectMessages[i].PayLoadSize = msgLen;
    b2a4:	00e3      	lsls	r3, r4, #3
    b2a6:	191b      	adds	r3, r3, r4
    b2a8:	015b      	lsls	r3, r3, #5
    b2aa:	4a17      	ldr	r2, [pc, #92]	; (b308 <IndirectPacket+0x130>)
    b2ac:	18d3      	adds	r3, r2, r3
    b2ae:	76de      	strb	r6, [r3, #27]
                for(j = 0; j < msgLen; j++)
    b2b0:	2e00      	cmp	r6, #0
    b2b2:	d011      	beq.n	b2d8 <IndirectPacket+0x100>
    b2b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b2b6:	00e2      	lsls	r2, r4, #3
    b2b8:	1912      	adds	r2, r2, r4
    b2ba:	0152      	lsls	r2, r2, #5
    b2bc:	321c      	adds	r2, #28
    b2be:	4912      	ldr	r1, [pc, #72]	; (b308 <IndirectPacket+0x130>)
    b2c0:	1852      	adds	r2, r2, r1
    b2c2:	3e01      	subs	r6, #1
    b2c4:	b2f0      	uxtb	r0, r6
    b2c6:	3001      	adds	r0, #1
    b2c8:	469c      	mov	ip, r3
    b2ca:	4460      	add	r0, ip
                    indirectMessages[i].PayLoad[j] = msgPtr[j];
    b2cc:	7819      	ldrb	r1, [r3, #0]
    b2ce:	7011      	strb	r1, [r2, #0]
    b2d0:	3301      	adds	r3, #1
    b2d2:	3201      	adds	r2, #1
                for(j = 0; j < msgLen; j++)
    b2d4:	4283      	cmp	r3, r0
    b2d6:	d1f9      	bne.n	b2cc <IndirectPacket+0xf4>
                indirectMessages[i].indirectDataHandle = msghandle;
    b2d8:	4f0b      	ldr	r7, [pc, #44]	; (b308 <IndirectPacket+0x130>)
    b2da:	00e6      	lsls	r6, r4, #3
    b2dc:	1933      	adds	r3, r6, r4
    b2de:	015b      	lsls	r3, r3, #5
    b2e0:	18fb      	adds	r3, r7, r3
    b2e2:	001a      	movs	r2, r3
    b2e4:	321c      	adds	r2, #28
    b2e6:	32ff      	adds	r2, #255	; 0xff
    b2e8:	7015      	strb	r5, [r2, #0]
				indirectMessages[i].indirectConfCallback = ConfCallback;
    b2ea:	331d      	adds	r3, #29
    b2ec:	33ff      	adds	r3, #255	; 0xff
    b2ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
    b2f0:	601a      	str	r2, [r3, #0]
				indirectMessages[i].TickStart.Val = MiWi_TickGet();
    b2f2:	4b06      	ldr	r3, [pc, #24]	; (b30c <IndirectPacket+0x134>)
    b2f4:	4798      	blx	r3
    b2f6:	1936      	adds	r6, r6, r4
    b2f8:	0176      	lsls	r6, r6, #5
    b2fa:	51f0      	str	r0, [r6, r7]
                return true;
    b2fc:	2001      	movs	r0, #1
    b2fe:	e78b      	b.n	b218 <IndirectPacket+0x40>
            if( indirectMessages[i].flags.bits.isValid == 0 )
    b300:	2400      	movs	r4, #0
    b302:	e791      	b.n	b228 <IndirectPacket+0x50>
                return false;
    b304:	2000      	movs	r0, #0
    b306:	e787      	b.n	b218 <IndirectPacket+0x40>
    b308:	200030b4 	.word	0x200030b4
    b30c:	0000d3f5 	.word	0x0000d3f5

0000b310 <SendPacket>:
{ 
    b310:	b5f0      	push	{r4, r5, r6, r7, lr}
    b312:	46ce      	mov	lr, r9
    b314:	4647      	mov	r7, r8
    b316:	b580      	push	{r7, lr}
    b318:	b08b      	sub	sp, #44	; 0x2c
    b31a:	0005      	movs	r5, r0
    b31c:	468c      	mov	ip, r1
    b31e:	9205      	str	r2, [sp, #20]
    b320:	a812      	add	r0, sp, #72	; 0x48
    b322:	7800      	ldrb	r0, [r0, #0]
    b324:	ac13      	add	r4, sp, #76	; 0x4c
    b326:	7826      	ldrb	r6, [r4, #0]
    b328:	ac15      	add	r4, sp, #84	; 0x54
    b32a:	7827      	ldrb	r7, [r4, #0]
    b32c:	ac16      	add	r4, sp, #88	; 0x58
    b32e:	7822      	ldrb	r2, [r4, #0]
    tParam.flags.Val = 0;
    b330:	2400      	movs	r4, #0
    b332:	46a0      	mov	r8, r4
    b334:	ac07      	add	r4, sp, #28
    b336:	4641      	mov	r1, r8
    b338:	7021      	strb	r1, [r4, #0]
	if(isCommand)
    b33a:	2b00      	cmp	r3, #0
    b33c:	d043      	beq.n	b3c6 <SendPacket+0xb6>
		tParam.flags.bits.packetType = PACKET_TYPE_COMMAND;
    b33e:	0023      	movs	r3, r4
    b340:	b2cc      	uxtb	r4, r1
    b342:	2103      	movs	r1, #3
    b344:	438c      	bics	r4, r1
    b346:	2101      	movs	r1, #1
    b348:	4688      	mov	r8, r1
    b34a:	4641      	mov	r1, r8
    b34c:	430c      	orrs	r4, r1
    b34e:	701c      	strb	r4, [r3, #0]
   if(Broadcast)
    b350:	2d00      	cmp	r5, #0
    b352:	d13e      	bne.n	b3d2 <SendPacket+0xc2>
	   tParam.flags.bits.ackReq = ackReq;
    b354:	ac07      	add	r4, sp, #28
    b356:	2301      	movs	r3, #1
    b358:	4013      	ands	r3, r2
    b35a:	015a      	lsls	r2, r3, #5
    b35c:	7823      	ldrb	r3, [r4, #0]
    b35e:	2120      	movs	r1, #32
    b360:	438b      	bics	r3, r1
    b362:	4313      	orrs	r3, r2
    b364:	7023      	strb	r3, [r4, #0]
    tParam.flags.bits.broadcast = Broadcast;
    b366:	ac07      	add	r4, sp, #28
    b368:	2201      	movs	r2, #1
    b36a:	0013      	movs	r3, r2
    b36c:	402b      	ands	r3, r5
    b36e:	009b      	lsls	r3, r3, #2
    b370:	4698      	mov	r8, r3
    b372:	7823      	ldrb	r3, [r4, #0]
    b374:	2104      	movs	r1, #4
    b376:	438b      	bics	r3, r1
    tParam.flags.bits.secEn = SecurityEnabled;
    b378:	4010      	ands	r0, r2
    b37a:	00c0      	lsls	r0, r0, #3
    b37c:	4641      	mov	r1, r8
    b37e:	430b      	orrs	r3, r1
    b380:	2108      	movs	r1, #8
    b382:	438b      	bics	r3, r1
        tParam.altSrcAddr = 0;
    b384:	2100      	movs	r1, #0
    b386:	7261      	strb	r1, [r4, #9]
        tParam.altDestAddr = (Broadcast) ? true : false;
    b388:	7225      	strb	r5, [r4, #8]
        tParam.flags.bits.destPrsnt = (Broadcast) ? 0:1;
    b38a:	2101      	movs	r1, #1
    b38c:	4688      	mov	r8, r1
    b38e:	4641      	mov	r1, r8
    b390:	404d      	eors	r5, r1
    b392:	4015      	ands	r5, r2
    b394:	01ad      	lsls	r5, r5, #6
    b396:	4318      	orrs	r0, r3
    b398:	2340      	movs	r3, #64	; 0x40
    b39a:	4398      	bics	r0, r3
        tParam.flags.bits.sourcePrsnt = 1;
    b39c:	4328      	orrs	r0, r5
    b39e:	3bc0      	subs	r3, #192	; 0xc0
    b3a0:	4318      	orrs	r0, r3
    b3a2:	7020      	strb	r0, [r4, #0]
        tParam.DestPANID.Val = DestinationPANID.Val;
    b3a4:	4663      	mov	r3, ip
    b3a6:	8163      	strh	r3, [r4, #10]
    status = MiMAC_SendPacket(tParam, msgPtr, msgLen, msghandle, ConfCallback);
    b3a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    b3aa:	9302      	str	r3, [sp, #8]
    b3ac:	9701      	str	r7, [sp, #4]
    b3ae:	9600      	str	r6, [sp, #0]
    b3b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
    b3b2:	9807      	ldr	r0, [sp, #28]
    b3b4:	9905      	ldr	r1, [sp, #20]
    b3b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b3b8:	4c09      	ldr	r4, [pc, #36]	; (b3e0 <SendPacket+0xd0>)
    b3ba:	47a0      	blx	r4
}
    b3bc:	b00b      	add	sp, #44	; 0x2c
    b3be:	bc0c      	pop	{r2, r3}
    b3c0:	4690      	mov	r8, r2
    b3c2:	4699      	mov	r9, r3
    b3c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tParam.flags.bits.packetType = PACKET_TYPE_DATA;
    b3c6:	ab07      	add	r3, sp, #28
    b3c8:	781c      	ldrb	r4, [r3, #0]
    b3ca:	2103      	movs	r1, #3
    b3cc:	438c      	bics	r4, r1
    b3ce:	701c      	strb	r4, [r3, #0]
    b3d0:	e7be      	b.n	b350 <SendPacket+0x40>
	tParam.flags.bits.ackReq = 0;
    b3d2:	ac07      	add	r4, sp, #28
    b3d4:	7823      	ldrb	r3, [r4, #0]
    b3d6:	2220      	movs	r2, #32
    b3d8:	4393      	bics	r3, r2
    b3da:	7023      	strb	r3, [r4, #0]
    b3dc:	e7c3      	b.n	b366 <SendPacket+0x56>
    b3de:	46c0      	nop			; (mov r8, r8)
    b3e0:	0000a069 	.word	0x0000a069

0000b3e4 <MiApp_BroadcastConnectionTable>:
{
    b3e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    b3e6:	46de      	mov	lr, fp
    b3e8:	4657      	mov	r7, sl
    b3ea:	464e      	mov	r6, r9
    b3ec:	4645      	mov	r5, r8
    b3ee:	b5e0      	push	{r5, r6, r7, lr}
    b3f0:	b08b      	sub	sp, #44	; 0x2c
	uint16_t broadcastAddress = 0xFFFF;
    b3f2:	2201      	movs	r2, #1
    b3f4:	4252      	negs	r2, r2
    b3f6:	231e      	movs	r3, #30
    b3f8:	a902      	add	r1, sp, #8
    b3fa:	468c      	mov	ip, r1
    b3fc:	4463      	add	r3, ip
    b3fe:	801a      	strh	r2, [r3, #0]
    if ((conn_size  * 4 ) + 4 < TX_BUFFER_SIZE)
    b400:	4b5b      	ldr	r3, [pc, #364]	; (b570 <MiApp_BroadcastConnectionTable+0x18c>)
    b402:	781c      	ldrb	r4, [r3, #0]
    b404:	3401      	adds	r4, #1
    b406:	00a4      	lsls	r4, r4, #2
    b408:	2cd9      	cmp	r4, #217	; 0xd9
    b40a:	dd1a      	ble.n	b442 <MiApp_BroadcastConnectionTable+0x5e>
        broadcast_count = ((conn_size * 4) + 4 )/ TX_BUFFER_SIZE;
    b40c:	21da      	movs	r1, #218	; 0xda
    b40e:	0020      	movs	r0, r4
    b410:	4b58      	ldr	r3, [pc, #352]	; (b574 <MiApp_BroadcastConnectionTable+0x190>)
    b412:	4798      	blx	r3
    b414:	b2c3      	uxtb	r3, r0
    b416:	001d      	movs	r5, r3
    b418:	9307      	str	r3, [sp, #28]
        if ((conn_size *4) + 4 % TX_BUFFER_SIZE != 0)
    b41a:	2c00      	cmp	r4, #0
    b41c:	d007      	beq.n	b42e <MiApp_BroadcastConnectionTable+0x4a>
            broadcast_count = broadcast_count + ((conn_size *4) + 4 )% TX_BUFFER_SIZE;
    b41e:	21da      	movs	r1, #218	; 0xda
    b420:	0020      	movs	r0, r4
    b422:	4b55      	ldr	r3, [pc, #340]	; (b578 <MiApp_BroadcastConnectionTable+0x194>)
    b424:	4798      	blx	r3
    b426:	46ac      	mov	ip, r5
    b428:	4461      	add	r1, ip
    b42a:	b2cb      	uxtb	r3, r1
    b42c:	9307      	str	r3, [sp, #28]
    for (i = 0 ; i < broadcast_count ; i++)
    b42e:	9b07      	ldr	r3, [sp, #28]
    b430:	2b00      	cmp	r3, #0
    b432:	d108      	bne.n	b446 <MiApp_BroadcastConnectionTable+0x62>
}
    b434:	b00b      	add	sp, #44	; 0x2c
    b436:	bc3c      	pop	{r2, r3, r4, r5}
    b438:	4690      	mov	r8, r2
    b43a:	4699      	mov	r9, r3
    b43c:	46a2      	mov	sl, r4
    b43e:	46ab      	mov	fp, r5
    b440:	bdf0      	pop	{r4, r5, r6, r7, pc}
        broadcast_count = 1;
    b442:	2301      	movs	r3, #1
    b444:	9307      	str	r3, [sp, #28]
    b446:	2300      	movs	r3, #0
    b448:	469a      	mov	sl, r3
    b44a:	3335      	adds	r3, #53	; 0x35
    b44c:	469b      	mov	fp, r3
    b44e:	2400      	movs	r4, #0
                    dataPtr[dataLen++] = (ConnectionTable[j].Address[0]);
    b450:	4652      	mov	r2, sl
    b452:	9206      	str	r2, [sp, #24]
    b454:	e065      	b.n	b522 <MiApp_BroadcastConnectionTable+0x13e>
                    dataPtr[dataLen++] = 0xff;
    b456:	4661      	mov	r1, ip
    b458:	5481      	strb	r1, [r0, r2]
    b45a:	1c51      	adds	r1, r2, #1
                    dataPtr[dataLen++] = 0xff;
    b45c:	b2c9      	uxtb	r1, r1
    b45e:	4666      	mov	r6, ip
    b460:	5446      	strb	r6, [r0, r1]
                    dataPtr[dataLen++] = 0xff;
    b462:	1cd1      	adds	r1, r2, #3
    b464:	b2c9      	uxtb	r1, r1
                    dataPtr[dataLen++] = 0xff;
    b466:	1c96      	adds	r6, r2, #2
                    dataPtr[dataLen++] = 0xff;
    b468:	b2f6      	uxtb	r6, r6
    b46a:	4667      	mov	r7, ip
    b46c:	5587      	strb	r7, [r0, r6]
                    dataPtr[dataLen++] = j;
    b46e:	3204      	adds	r2, #4
    b470:	b2d2      	uxtb	r2, r2
    b472:	5443      	strb	r3, [r0, r1]
                count = count + 4;
    b474:	3404      	adds	r4, #4
    b476:	b2e4      	uxtb	r4, r4
        for (j= ((TX_BUFFER_SIZE-4)/4)*i ;j<((TX_BUFFER_SIZE-4)/4)*(i+1);j++)
    b478:	3301      	adds	r3, #1
    b47a:	b2db      	uxtb	r3, r3
    b47c:	0019      	movs	r1, r3
    b47e:	42ab      	cmp	r3, r5
    b480:	da20      	bge.n	b4c4 <MiApp_BroadcastConnectionTable+0xe0>
            if (j < conn_size)
    b482:	464e      	mov	r6, r9
    b484:	7836      	ldrb	r6, [r6, #0]
    b486:	429e      	cmp	r6, r3
    b488:	d9f6      	bls.n	b478 <MiApp_BroadcastConnectionTable+0x94>
                if (ConnectionTable[j].status.bits.isValid)
    b48a:	010e      	lsls	r6, r1, #4
    b48c:	4f3b      	ldr	r7, [pc, #236]	; (b57c <MiApp_BroadcastConnectionTable+0x198>)
    b48e:	46b8      	mov	r8, r7
    b490:	4446      	add	r6, r8
    b492:	7b36      	ldrb	r6, [r6, #12]
    b494:	09f6      	lsrs	r6, r6, #7
    b496:	d0de      	beq.n	b456 <MiApp_BroadcastConnectionTable+0x72>
                    dataPtr[dataLen++] = (ConnectionTable[j].Address[0]);
    b498:	0109      	lsls	r1, r1, #4
    b49a:	4441      	add	r1, r8
    b49c:	790e      	ldrb	r6, [r1, #4]
    b49e:	5486      	strb	r6, [r0, r2]
                    dataPtr[dataLen++] = (ConnectionTable[j].Address[1]);
    b4a0:	794e      	ldrb	r6, [r1, #5]
    b4a2:	46b0      	mov	r8, r6
                    dataPtr[dataLen++] = (ConnectionTable[j].Address[0]);
    b4a4:	1c56      	adds	r6, r2, #1
                    dataPtr[dataLen++] = (ConnectionTable[j].Address[1]);
    b4a6:	b2f6      	uxtb	r6, r6
    b4a8:	4647      	mov	r7, r8
    b4aa:	5587      	strb	r7, [r0, r6]
                    dataPtr[dataLen++] = (ConnectionTable[j].Address[2]);
    b4ac:	1cd6      	adds	r6, r2, #3
    b4ae:	b2f6      	uxtb	r6, r6
    b4b0:	7989      	ldrb	r1, [r1, #6]
    b4b2:	4688      	mov	r8, r1
                    dataPtr[dataLen++] = (ConnectionTable[j].Address[1]);
    b4b4:	1c91      	adds	r1, r2, #2
                    dataPtr[dataLen++] = (ConnectionTable[j].Address[2]);
    b4b6:	b2c9      	uxtb	r1, r1
    b4b8:	4647      	mov	r7, r8
    b4ba:	5447      	strb	r7, [r0, r1]
                    dataPtr[dataLen++] = j;
    b4bc:	3204      	adds	r2, #4
    b4be:	b2d2      	uxtb	r2, r2
    b4c0:	5583      	strb	r3, [r0, r6]
    b4c2:	e7d7      	b.n	b474 <MiApp_BroadcastConnectionTable+0x90>
        for (k=count;k<TX_BUFFER_SIZE;k++)
    b4c4:	2cd9      	cmp	r4, #217	; 0xd9
    b4c6:	d850      	bhi.n	b56a <MiApp_BroadcastConnectionTable+0x186>
        count = 4;
    b4c8:	0011      	movs	r1, r2
            dataPtr[dataLen++] = 0xFF;   // Garbage Value
    b4ca:	26ff      	movs	r6, #255	; 0xff
    b4cc:	1aa2      	subs	r2, r4, r2
    b4ce:	b2d2      	uxtb	r2, r2
    b4d0:	1c4c      	adds	r4, r1, #1
    b4d2:	b2e4      	uxtb	r4, r4
    b4d4:	5446      	strb	r6, [r0, r1]
    b4d6:	0021      	movs	r1, r4
        for (k=count;k<TX_BUFFER_SIZE;k++)
    b4d8:	1913      	adds	r3, r2, r4
    b4da:	b2db      	uxtb	r3, r3
    b4dc:	2bd9      	cmp	r3, #217	; 0xd9
    b4de:	d9f7      	bls.n	b4d0 <MiApp_BroadcastConnectionTable+0xec>
        SendPacket(true, myPANID,(uint8_t*)&broadcastAddress, true, false, dataLen, dataPtr,0, true, CommandConfCallback);
    b4e0:	4b27      	ldr	r3, [pc, #156]	; (b580 <MiApp_BroadcastConnectionTable+0x19c>)
    b4e2:	8819      	ldrh	r1, [r3, #0]
    b4e4:	4b27      	ldr	r3, [pc, #156]	; (b584 <MiApp_BroadcastConnectionTable+0x1a0>)
    b4e6:	9305      	str	r3, [sp, #20]
    b4e8:	2301      	movs	r3, #1
    b4ea:	9304      	str	r3, [sp, #16]
    b4ec:	2300      	movs	r3, #0
    b4ee:	9303      	str	r3, [sp, #12]
    b4f0:	9002      	str	r0, [sp, #8]
    b4f2:	9401      	str	r4, [sp, #4]
    b4f4:	9300      	str	r3, [sp, #0]
    b4f6:	3301      	adds	r3, #1
    b4f8:	221e      	movs	r2, #30
    b4fa:	a802      	add	r0, sp, #8
    b4fc:	4684      	mov	ip, r0
    b4fe:	4462      	add	r2, ip
    b500:	2001      	movs	r0, #1
    b502:	4d21      	ldr	r5, [pc, #132]	; (b588 <MiApp_BroadcastConnectionTable+0x1a4>)
    b504:	47a8      	blx	r5
    for (i = 0 ; i < broadcast_count ; i++)
    b506:	4656      	mov	r6, sl
    b508:	3601      	adds	r6, #1
    b50a:	b2f3      	uxtb	r3, r6
    b50c:	469a      	mov	sl, r3
    b50e:	465b      	mov	r3, fp
    b510:	3335      	adds	r3, #53	; 0x35
    b512:	469b      	mov	fp, r3
    b514:	9b06      	ldr	r3, [sp, #24]
    b516:	3335      	adds	r3, #53	; 0x35
    b518:	9306      	str	r3, [sp, #24]
    b51a:	9b07      	ldr	r3, [sp, #28]
    b51c:	459a      	cmp	sl, r3
    b51e:	d300      	bcc.n	b522 <MiApp_BroadcastConnectionTable+0x13e>
    b520:	e788      	b.n	b434 <MiApp_BroadcastConnectionTable+0x50>
        dataPtr = MiMem_Alloc(TX_BUFFER_SIZE);
    b522:	20da      	movs	r0, #218	; 0xda
    b524:	4b19      	ldr	r3, [pc, #100]	; (b58c <MiApp_BroadcastConnectionTable+0x1a8>)
    b526:	4798      	blx	r3
        if (NULL == dataPtr)
    b528:	2800      	cmp	r0, #0
    b52a:	d100      	bne.n	b52e <MiApp_BroadcastConnectionTable+0x14a>
    b52c:	e782      	b.n	b434 <MiApp_BroadcastConnectionTable+0x50>
        dataPtr[dataLen++] = CMD_SHARE_CONNECTION_TABLE;
    b52e:	2377      	movs	r3, #119	; 0x77
    b530:	5503      	strb	r3, [r0, r4]
        dataPtr[dataLen++] = conn_size; // No of end devices in network
    b532:	4b0f      	ldr	r3, [pc, #60]	; (b570 <MiApp_BroadcastConnectionTable+0x18c>)
    b534:	781a      	ldrb	r2, [r3, #0]
        dataPtr[dataLen++] = CMD_SHARE_CONNECTION_TABLE;
    b536:	1c63      	adds	r3, r4, #1
        dataPtr[dataLen++] = conn_size; // No of end devices in network
    b538:	b2db      	uxtb	r3, r3
    b53a:	54c2      	strb	r2, [r0, r3]
        dataPtr[dataLen++] = (((TX_BUFFER_SIZE-4)/4)*i);
    b53c:	9e06      	ldr	r6, [sp, #24]
    b53e:	b2f3      	uxtb	r3, r6
        dataPtr[dataLen++] = conn_size; // No of end devices in network
    b540:	1ca2      	adds	r2, r4, #2
        dataPtr[dataLen++] = (((TX_BUFFER_SIZE-4)/4)*i);
    b542:	b2d2      	uxtb	r2, r2
    b544:	5483      	strb	r3, [r0, r2]
        dataPtr[dataLen++] = (((TX_BUFFER_SIZE-4)/4)*(i+1));
    b546:	1d22      	adds	r2, r4, #4
    b548:	b2d2      	uxtb	r2, r2
        dataPtr[dataLen++] = (((TX_BUFFER_SIZE-4)/4)*i);
    b54a:	3403      	adds	r4, #3
        dataPtr[dataLen++] = (((TX_BUFFER_SIZE-4)/4)*(i+1));
    b54c:	b2e4      	uxtb	r4, r4
    b54e:	465d      	mov	r5, fp
    b550:	5505      	strb	r5, [r0, r4]
        for (j= ((TX_BUFFER_SIZE-4)/4)*i ;j<((TX_BUFFER_SIZE-4)/4)*(i+1);j++)
    b552:	21ff      	movs	r1, #255	; 0xff
    b554:	4031      	ands	r1, r6
    b556:	4559      	cmp	r1, fp
    b558:	da05      	bge.n	b566 <MiApp_BroadcastConnectionTable+0x182>
    b55a:	2404      	movs	r4, #4
            if (j < conn_size)
    b55c:	4e04      	ldr	r6, [pc, #16]	; (b570 <MiApp_BroadcastConnectionTable+0x18c>)
    b55e:	46b1      	mov	r9, r6
                    dataPtr[dataLen++] = 0xff;
    b560:	26ff      	movs	r6, #255	; 0xff
    b562:	46b4      	mov	ip, r6
    b564:	e78d      	b.n	b482 <MiApp_BroadcastConnectionTable+0x9e>
        count = 4;
    b566:	2404      	movs	r4, #4
    b568:	e7ae      	b.n	b4c8 <MiApp_BroadcastConnectionTable+0xe4>
        for (k=count;k<TX_BUFFER_SIZE;k++)
    b56a:	0014      	movs	r4, r2
    b56c:	e7b8      	b.n	b4e0 <MiApp_BroadcastConnectionTable+0xfc>
    b56e:	46c0      	nop			; (mov r8, r8)
    b570:	20003059 	.word	0x20003059
    b574:	0001471d 	.word	0x0001471d
    b578:	000148e9 	.word	0x000148e9
    b57c:	20002eec 	.word	0x20002eec
    b580:	20003050 	.word	0x20003050
    b584:	0000b10d 	.word	0x0000b10d
    b588:	0000b311 	.word	0x0000b311
    b58c:	0000d1b5 	.word	0x0000d1b5

0000b590 <connectionRespConfCallback>:

static void connectionRespConfCallback(uint8_t msgConfHandle, miwi_status_t status, uint8_t* msgPointer)
{
    b590:	b510      	push	{r4, lr}
	/* Free the Frame Memory */
	MiMem_Free(msgPointer);
    b592:	0010      	movs	r0, r2
    b594:	4b08      	ldr	r3, [pc, #32]	; (b5b8 <connectionRespConfCallback+0x28>)
    b596:	4798      	blx	r3
	#ifdef ENABLE_PERIODIC_CONNECTIONTABLE_SHARE
		#if defined(ENABLE_DEBUG_LOG)
		//printf("\n\rBroadcasting connection table...\n\r");
		#endif
		/* Broadcast connection table upon a device join */
		MiApp_BroadcastConnectionTable();
    b598:	4b08      	ldr	r3, [pc, #32]	; (b5bc <connectionRespConfCallback+0x2c>)
    b59a:	4798      	blx	r3
		if(!sheerPeerDevInfoTimerSet)
    b59c:	4b08      	ldr	r3, [pc, #32]	; (b5c0 <connectionRespConfCallback+0x30>)
    b59e:	781b      	ldrb	r3, [r3, #0]
    b5a0:	2b00      	cmp	r3, #0
    b5a2:	d000      	beq.n	b5a6 <connectionRespConfCallback+0x16>
		   sheerPeerDevInfoTimerSet = true;
		}

	#endif
	#endif
}
    b5a4:	bd10      	pop	{r4, pc}
		   sharePeerDevInfoTimerTick.Val = MiWi_TickGet();
    b5a6:	4b07      	ldr	r3, [pc, #28]	; (b5c4 <connectionRespConfCallback+0x34>)
    b5a8:	4798      	blx	r3
    b5aa:	4b07      	ldr	r3, [pc, #28]	; (b5c8 <connectionRespConfCallback+0x38>)
    b5ac:	6018      	str	r0, [r3, #0]
		   sheerPeerDevInfoTimerSet = true;
    b5ae:	2201      	movs	r2, #1
    b5b0:	4b03      	ldr	r3, [pc, #12]	; (b5c0 <connectionRespConfCallback+0x30>)
    b5b2:	701a      	strb	r2, [r3, #0]
}
    b5b4:	e7f6      	b.n	b5a4 <connectionRespConfCallback+0x14>
    b5b6:	46c0      	nop			; (mov r8, r8)
    b5b8:	0000d271 	.word	0x0000d271
    b5bc:	0000b3e5 	.word	0x0000b3e5
    b5c0:	200004b4 	.word	0x200004b4
    b5c4:	0000d3f5 	.word	0x0000d3f5
    b5c8:	20003368 	.word	0x20003368

0000b5cc <appAckWaitDataCallback>:
{
    b5cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    b5ce:	b087      	sub	sp, #28
    b5d0:	0006      	movs	r6, r0
    b5d2:	000c      	movs	r4, r1
	if (PAN_COORD == role)
    b5d4:	4b63      	ldr	r3, [pc, #396]	; (b764 <appAckWaitDataCallback+0x198>)
    b5d6:	781b      	ldrb	r3, [r3, #0]
    b5d8:	2b01      	cmp	r3, #1
    b5da:	d004      	beq.n	b5e6 <appAckWaitDataCallback+0x1a>
	else if (role == END_DEVICE)
    b5dc:	2b02      	cmp	r3, #2
    b5de:	d100      	bne.n	b5e2 <appAckWaitDataCallback+0x16>
    b5e0:	e081      	b.n	b6e6 <appAckWaitDataCallback+0x11a>
}
    b5e2:	b007      	add	sp, #28
    b5e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b5e6:	4b60      	ldr	r3, [pc, #384]	; (b768 <appAckWaitDataCallback+0x19c>)
	if (PAN_COORD == role)
    b5e8:	2100      	movs	r1, #0
    b5ea:	e037      	b.n	b65c <appAckWaitDataCallback+0x90>
								uint8_t ed_index = Find_Index(forwardMessages[loopIndex].msg);
    b5ec:	4b5f      	ldr	r3, [pc, #380]	; (b76c <appAckWaitDataCallback+0x1a0>)
    b5ee:	4798      	blx	r3
    b5f0:	0005      	movs	r5, r0
								if (0xFF != ed_index)
    b5f2:	28ff      	cmp	r0, #255	; 0xff
    b5f4:	d018      	beq.n	b628 <appAckWaitDataCallback+0x5c>
									dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_CMD_DATA_TO_ENDDEV_SUCCESS));
    b5f6:	2010      	movs	r0, #16
    b5f8:	4b5d      	ldr	r3, [pc, #372]	; (b770 <appAckWaitDataCallback+0x1a4>)
    b5fa:	4798      	blx	r3
									if (NULL == dataPtr)
    b5fc:	2800      	cmp	r0, #0
    b5fe:	d0f0      	beq.n	b5e2 <appAckWaitDataCallback+0x16>
									dataPtr[0] = CMD_DATA_TO_ENDDEV_SUCCESS;
    b600:	23da      	movs	r3, #218	; 0xda
    b602:	7003      	strb	r3, [r0, #0]
									SendPacket(false, myPANID, ConnectionTable[ed_index].Address, true, true, 1, dataPtr, 0, true, ForwardmessageConfCallback);
    b604:	012d      	lsls	r5, r5, #4
    b606:	1d2a      	adds	r2, r5, #4
    b608:	4b5a      	ldr	r3, [pc, #360]	; (b774 <appAckWaitDataCallback+0x1a8>)
    b60a:	18d2      	adds	r2, r2, r3
    b60c:	4b5a      	ldr	r3, [pc, #360]	; (b778 <appAckWaitDataCallback+0x1ac>)
    b60e:	8819      	ldrh	r1, [r3, #0]
    b610:	4b5a      	ldr	r3, [pc, #360]	; (b77c <appAckWaitDataCallback+0x1b0>)
    b612:	9305      	str	r3, [sp, #20]
    b614:	2301      	movs	r3, #1
    b616:	9304      	str	r3, [sp, #16]
    b618:	2500      	movs	r5, #0
    b61a:	9503      	str	r5, [sp, #12]
    b61c:	9002      	str	r0, [sp, #8]
    b61e:	9301      	str	r3, [sp, #4]
    b620:	9300      	str	r3, [sp, #0]
    b622:	2000      	movs	r0, #0
    b624:	4d56      	ldr	r5, [pc, #344]	; (b780 <appAckWaitDataCallback+0x1b4>)
    b626:	47a8      	blx	r5
				 if(indirectMessages[loopIndex].indirectDataHandle == handle)
    b628:	231c      	movs	r3, #28
    b62a:	33ff      	adds	r3, #255	; 0xff
    b62c:	4a55      	ldr	r2, [pc, #340]	; (b784 <appAckWaitDataCallback+0x1b8>)
    b62e:	5cd3      	ldrb	r3, [r2, r3]
    b630:	42b3      	cmp	r3, r6
    b632:	d130      	bne.n	b696 <appAckWaitDataCallback+0xca>
    b634:	e001      	b.n	b63a <appAckWaitDataCallback+0x6e>
					 if(status == SUCCESS)
    b636:	2c00      	cmp	r4, #0
    b638:	d1d3      	bne.n	b5e2 <appAckWaitDataCallback+0x16>
						 uint8_t ed_index = Find_Index(indirectMessages[loopIndex].PayLoad);
    b63a:	4853      	ldr	r0, [pc, #332]	; (b788 <appAckWaitDataCallback+0x1bc>)
    b63c:	4b4b      	ldr	r3, [pc, #300]	; (b76c <appAckWaitDataCallback+0x1a0>)
    b63e:	4798      	blx	r3
    b640:	0004      	movs	r4, r0
						 if (0xFF != ed_index)
    b642:	28ff      	cmp	r0, #255	; 0xff
    b644:	d134      	bne.n	b6b0 <appAckWaitDataCallback+0xe4>
				 if(indirectMessages[loopIndex].indirectDataHandle == handle)
    b646:	4b51      	ldr	r3, [pc, #324]	; (b78c <appAckWaitDataCallback+0x1c0>)
    b648:	4a4e      	ldr	r2, [pc, #312]	; (b784 <appAckWaitDataCallback+0x1b8>)
    b64a:	5cd3      	ldrb	r3, [r2, r3]
    b64c:	42b3      	cmp	r3, r6
    b64e:	d1c8      	bne.n	b5e2 <appAckWaitDataCallback+0x16>
    b650:	e028      	b.n	b6a4 <appAckWaitDataCallback+0xd8>
    b652:	3101      	adds	r1, #1
    b654:	3315      	adds	r3, #21
    b656:	33ff      	adds	r3, #255	; 0xff
			for (loopIndex = 0; loopIndex < FORWARD_PACKET_BANK_SIZE; loopIndex++)
    b658:	2906      	cmp	r1, #6
    b65a:	d016      	beq.n	b68a <appAckWaitDataCallback+0xbe>
					if(forwardMessages[loopIndex].fromEDToED)
    b65c:	000f      	movs	r7, r1
    b65e:	0018      	movs	r0, r3
    b660:	1edd      	subs	r5, r3, #3
    b662:	782d      	ldrb	r5, [r5, #0]
    b664:	2d00      	cmp	r5, #0
    b666:	d0f4      	beq.n	b652 <appAckWaitDataCallback+0x86>
						if(msgPointer == (uint8_t*)&(forwardMessages[loopIndex].msg))
    b668:	429a      	cmp	r2, r3
    b66a:	d1f2      	bne.n	b652 <appAckWaitDataCallback+0x86>
							forwardMessages[loopIndex].fromEDToED = 0;
    b66c:	4a48      	ldr	r2, [pc, #288]	; (b790 <appAckWaitDataCallback+0x1c4>)
    b66e:	238a      	movs	r3, #138	; 0x8a
    b670:	005b      	lsls	r3, r3, #1
    b672:	435f      	muls	r7, r3
    b674:	19d1      	adds	r1, r2, r7
    b676:	2300      	movs	r3, #0
    b678:	748b      	strb	r3, [r1, #18]
							forwardMessages[loopIndex].confCallback = NULL;
    b67a:	50bb      	str	r3, [r7, r2]
							if (SUCCESS == status)
    b67c:	2c00      	cmp	r4, #0
    b67e:	d0b5      	beq.n	b5ec <appAckWaitDataCallback+0x20>
								--FW_Stat;
    b680:	4a44      	ldr	r2, [pc, #272]	; (b794 <appAckWaitDataCallback+0x1c8>)
    b682:	7813      	ldrb	r3, [r2, #0]
    b684:	3b01      	subs	r3, #1
    b686:	b2db      	uxtb	r3, r3
    b688:	7013      	strb	r3, [r2, #0]
				 if(indirectMessages[loopIndex].indirectDataHandle == handle)
    b68a:	231c      	movs	r3, #28
    b68c:	33ff      	adds	r3, #255	; 0xff
    b68e:	4a3d      	ldr	r2, [pc, #244]	; (b784 <appAckWaitDataCallback+0x1b8>)
    b690:	5cd3      	ldrb	r3, [r2, r3]
    b692:	42b3      	cmp	r3, r6
    b694:	d0cf      	beq.n	b636 <appAckWaitDataCallback+0x6a>
    b696:	4b3d      	ldr	r3, [pc, #244]	; (b78c <appAckWaitDataCallback+0x1c0>)
    b698:	4a3a      	ldr	r2, [pc, #232]	; (b784 <appAckWaitDataCallback+0x1b8>)
    b69a:	5cd3      	ldrb	r3, [r2, r3]
    b69c:	42b3      	cmp	r3, r6
    b69e:	d1a0      	bne.n	b5e2 <appAckWaitDataCallback+0x16>
					 if(status == SUCCESS)
    b6a0:	2c00      	cmp	r4, #0
    b6a2:	d19e      	bne.n	b5e2 <appAckWaitDataCallback+0x16>
						 uint8_t ed_index = Find_Index(indirectMessages[loopIndex].PayLoad);
    b6a4:	483c      	ldr	r0, [pc, #240]	; (b798 <appAckWaitDataCallback+0x1cc>)
    b6a6:	4b31      	ldr	r3, [pc, #196]	; (b76c <appAckWaitDataCallback+0x1a0>)
    b6a8:	4798      	blx	r3
    b6aa:	0004      	movs	r4, r0
						 if (0xFF != ed_index)
    b6ac:	28ff      	cmp	r0, #255	; 0xff
    b6ae:	d098      	beq.n	b5e2 <appAckWaitDataCallback+0x16>
							 dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_CMD_DATA_TO_ENDDEV_SUCCESS));
    b6b0:	2010      	movs	r0, #16
    b6b2:	4b2f      	ldr	r3, [pc, #188]	; (b770 <appAckWaitDataCallback+0x1a4>)
    b6b4:	4798      	blx	r3
							 if (NULL == dataPtr)
    b6b6:	2800      	cmp	r0, #0
    b6b8:	d100      	bne.n	b6bc <appAckWaitDataCallback+0xf0>
    b6ba:	e792      	b.n	b5e2 <appAckWaitDataCallback+0x16>
							 dataPtr[0] = CMD_DATA_TO_ENDDEV_SUCCESS;
    b6bc:	23da      	movs	r3, #218	; 0xda
    b6be:	7003      	strb	r3, [r0, #0]
							 SendPacket(false, myPANID, ConnectionTable[ed_index].Address, true, true, 1, dataPtr, 0, true, ForwardmessageConfCallback);
    b6c0:	0122      	lsls	r2, r4, #4
    b6c2:	3204      	adds	r2, #4
    b6c4:	4b2b      	ldr	r3, [pc, #172]	; (b774 <appAckWaitDataCallback+0x1a8>)
    b6c6:	18d2      	adds	r2, r2, r3
    b6c8:	4b2b      	ldr	r3, [pc, #172]	; (b778 <appAckWaitDataCallback+0x1ac>)
    b6ca:	8819      	ldrh	r1, [r3, #0]
    b6cc:	4b2b      	ldr	r3, [pc, #172]	; (b77c <appAckWaitDataCallback+0x1b0>)
    b6ce:	9305      	str	r3, [sp, #20]
    b6d0:	2301      	movs	r3, #1
    b6d2:	9304      	str	r3, [sp, #16]
    b6d4:	2400      	movs	r4, #0
    b6d6:	9403      	str	r4, [sp, #12]
    b6d8:	9002      	str	r0, [sp, #8]
    b6da:	9301      	str	r3, [sp, #4]
    b6dc:	9300      	str	r3, [sp, #0]
    b6de:	2000      	movs	r0, #0
    b6e0:	4c27      	ldr	r4, [pc, #156]	; (b780 <appAckWaitDataCallback+0x1b4>)
    b6e2:	47a0      	blx	r4
							 break;
    b6e4:	e77d      	b.n	b5e2 <appAckWaitDataCallback+0x16>
    b6e6:	4b20      	ldr	r3, [pc, #128]	; (b768 <appAckWaitDataCallback+0x19c>)
	else if (role == END_DEVICE)
    b6e8:	2100      	movs	r1, #0
    b6ea:	e011      	b.n	b710 <appAckWaitDataCallback+0x144>
							forwardMessages[loopIndex].confCallback = NULL;
    b6ec:	228a      	movs	r2, #138	; 0x8a
    b6ee:	0052      	lsls	r2, r2, #1
    b6f0:	4355      	muls	r5, r2
    b6f2:	2200      	movs	r2, #0
    b6f4:	4926      	ldr	r1, [pc, #152]	; (b790 <appAckWaitDataCallback+0x1c4>)
    b6f6:	506a      	str	r2, [r5, r1]
							SwAckReq = false;
    b6f8:	4928      	ldr	r1, [pc, #160]	; (b79c <appAckWaitDataCallback+0x1d0>)
    b6fa:	700a      	strb	r2, [r1, #0]
							callback(forwardMessages[loopIndex].msghandle, status, NULL);
    b6fc:	0021      	movs	r1, r4
    b6fe:	0030      	movs	r0, r6
    b700:	4798      	blx	r3
    b702:	e76e      	b.n	b5e2 <appAckWaitDataCallback+0x16>
    b704:	3101      	adds	r1, #1
    b706:	3315      	adds	r3, #21
    b708:	33ff      	adds	r3, #255	; 0xff
		for (loopIndex = 0; loopIndex < FORWARD_PACKET_BANK_SIZE; loopIndex++)
    b70a:	2906      	cmp	r1, #6
    b70c:	d100      	bne.n	b710 <appAckWaitDataCallback+0x144>
    b70e:	e768      	b.n	b5e2 <appAckWaitDataCallback+0x16>
			if((handle == forwardMessages[loopIndex].msghandle) && (msgPointer == (uint8_t*)&(forwardMessages[loopIndex].msg)))
    b710:	000d      	movs	r5, r1
    b712:	1e98      	subs	r0, r3, #2
    b714:	7800      	ldrb	r0, [r0, #0]
    b716:	42b0      	cmp	r0, r6
    b718:	d1f4      	bne.n	b704 <appAckWaitDataCallback+0x138>
    b71a:	429a      	cmp	r2, r3
    b71c:	d1f2      	bne.n	b704 <appAckWaitDataCallback+0x138>
				DataConf_callback_t callback = forwardMessages[loopIndex].confCallback;
    b71e:	238a      	movs	r3, #138	; 0x8a
    b720:	005b      	lsls	r3, r3, #1
    b722:	434b      	muls	r3, r1
    b724:	4a1a      	ldr	r2, [pc, #104]	; (b790 <appAckWaitDataCallback+0x1c4>)
    b726:	589b      	ldr	r3, [r3, r2]
				if (NULL != callback)
    b728:	2b00      	cmp	r3, #0
    b72a:	d100      	bne.n	b72e <appAckWaitDataCallback+0x162>
    b72c:	e759      	b.n	b5e2 <appAckWaitDataCallback+0x16>
					if(!SwAckReq && SendData)
    b72e:	4a1b      	ldr	r2, [pc, #108]	; (b79c <appAckWaitDataCallback+0x1d0>)
    b730:	7812      	ldrb	r2, [r2, #0]
    b732:	2a00      	cmp	r2, #0
    b734:	d000      	beq.n	b738 <appAckWaitDataCallback+0x16c>
    b736:	e754      	b.n	b5e2 <appAckWaitDataCallback+0x16>
    b738:	4a19      	ldr	r2, [pc, #100]	; (b7a0 <appAckWaitDataCallback+0x1d4>)
    b73a:	7812      	ldrb	r2, [r2, #0]
    b73c:	2a00      	cmp	r2, #0
    b73e:	d100      	bne.n	b742 <appAckWaitDataCallback+0x176>
    b740:	e74f      	b.n	b5e2 <appAckWaitDataCallback+0x16>
						SendData = false;
    b742:	2100      	movs	r1, #0
    b744:	4a16      	ldr	r2, [pc, #88]	; (b7a0 <appAckWaitDataCallback+0x1d4>)
    b746:	7011      	strb	r1, [r2, #0]
						if(status == SUCCESS)
    b748:	2c00      	cmp	r4, #0
    b74a:	d1cf      	bne.n	b6ec <appAckWaitDataCallback+0x120>
						SwAckReq = true;	
    b74c:	2201      	movs	r2, #1
    b74e:	4b13      	ldr	r3, [pc, #76]	; (b79c <appAckWaitDataCallback+0x1d0>)
    b750:	701a      	strb	r2, [r3, #0]
						forwardMessages[loopIndex].TickStart.Val = MiWi_TickGet();
    b752:	4b14      	ldr	r3, [pc, #80]	; (b7a4 <appAckWaitDataCallback+0x1d8>)
    b754:	4798      	blx	r3
    b756:	238a      	movs	r3, #138	; 0x8a
    b758:	005b      	lsls	r3, r3, #1
    b75a:	436b      	muls	r3, r5
    b75c:	4d0c      	ldr	r5, [pc, #48]	; (b790 <appAckWaitDataCallback+0x1c4>)
    b75e:	18ed      	adds	r5, r5, r3
    b760:	60e8      	str	r0, [r5, #12]
    b762:	e73e      	b.n	b5e2 <appAckWaitDataCallback+0x16>
    b764:	20003344 	.word	0x20003344
    b768:	20002885 	.word	0x20002885
    b76c:	0000b0a5 	.word	0x0000b0a5
    b770:	0000d1b5 	.word	0x0000d1b5
    b774:	20002eec 	.word	0x20002eec
    b778:	20003050 	.word	0x20003050
    b77c:	0000b125 	.word	0x0000b125
    b780:	0000b311 	.word	0x0000b311
    b784:	200030b4 	.word	0x200030b4
    b788:	200030d0 	.word	0x200030d0
    b78c:	0000023b 	.word	0x0000023b
    b790:	20002870 	.word	0x20002870
    b794:	2000049e 	.word	0x2000049e
    b798:	200031f0 	.word	0x200031f0
    b79c:	200004a1 	.word	0x200004a1
    b7a0:	200004a0 	.word	0x200004a0
    b7a4:	0000d3f5 	.word	0x0000d3f5

0000b7a8 <isSameAddress>:
{
    b7a8:	b510      	push	{r4, lr}
        if( Address1[i] != Address2[i] )
    b7aa:	7802      	ldrb	r2, [r0, #0]
    b7ac:	780b      	ldrb	r3, [r1, #0]
    b7ae:	429a      	cmp	r2, r3
    b7b0:	d109      	bne.n	b7c6 <isSameAddress+0x1e>
    b7b2:	2301      	movs	r3, #1
    b7b4:	5cc4      	ldrb	r4, [r0, r3]
    b7b6:	5cca      	ldrb	r2, [r1, r3]
    b7b8:	4294      	cmp	r4, r2
    b7ba:	d106      	bne.n	b7ca <isSameAddress+0x22>
    b7bc:	3301      	adds	r3, #1
    for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    b7be:	2b08      	cmp	r3, #8
    b7c0:	d1f8      	bne.n	b7b4 <isSameAddress+0xc>
    return true;
    b7c2:	2001      	movs	r0, #1
}
    b7c4:	bd10      	pop	{r4, pc}
            return false;
    b7c6:	2000      	movs	r0, #0
    b7c8:	e7fc      	b.n	b7c4 <isSameAddress+0x1c>
    b7ca:	2000      	movs	r0, #0
    b7cc:	e7fa      	b.n	b7c4 <isSameAddress+0x1c>
    b7ce:	Address 0x0000b7ce is out of bounds.


0000b7d0 <MiApp_SendData>:
    {
    b7d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    b7d2:	46ce      	mov	lr, r9
    b7d4:	4647      	mov	r7, r8
    b7d6:	b580      	push	{r7, lr}
    b7d8:	b089      	sub	sp, #36	; 0x24
    b7da:	000f      	movs	r7, r1
    b7dc:	0015      	movs	r5, r2
    b7de:	9307      	str	r3, [sp, #28]
    b7e0:	ab10      	add	r3, sp, #64	; 0x40
    b7e2:	781b      	ldrb	r3, [r3, #0]
    b7e4:	4698      	mov	r8, r3
    b7e6:	ab11      	add	r3, sp, #68	; 0x44
    b7e8:	781b      	ldrb	r3, [r3, #0]
    b7ea:	4699      	mov	r9, r3
	    uint16_t DestinationAddress16 = ((addr[1] << 8) + addr[0]);
    b7ec:	784b      	ldrb	r3, [r1, #1]
    b7ee:	780a      	ldrb	r2, [r1, #0]
	    bool broadcast = false;
    b7f0:	2600      	movs	r6, #0
	    if(addr_len == 2 && (DestinationAddress16 == 0xFFFF))
    b7f2:	2802      	cmp	r0, #2
    b7f4:	d01b      	beq.n	b82e <MiApp_SendData+0x5e>
	    if (END_DEVICE == role)
    b7f6:	4b50      	ldr	r3, [pc, #320]	; (b938 <MiApp_SendData+0x168>)
    b7f8:	781b      	ldrb	r3, [r3, #0]
    b7fa:	2b02      	cmp	r3, #2
    b7fc:	d021      	beq.n	b842 <MiApp_SendData+0x72>
		    SendPacket(broadcast, myPANID, addr, false, false, msglen, msgpointer, msghandle, ackReq, ConfCallback);
    b7fe:	4b4f      	ldr	r3, [pc, #316]	; (b93c <MiApp_SendData+0x16c>)
    b800:	8819      	ldrh	r1, [r3, #0]
    b802:	9b12      	ldr	r3, [sp, #72]	; 0x48
    b804:	9305      	str	r3, [sp, #20]
    b806:	464b      	mov	r3, r9
    b808:	9304      	str	r3, [sp, #16]
    b80a:	4643      	mov	r3, r8
    b80c:	9303      	str	r3, [sp, #12]
    b80e:	9b07      	ldr	r3, [sp, #28]
    b810:	9302      	str	r3, [sp, #8]
    b812:	9501      	str	r5, [sp, #4]
    b814:	2300      	movs	r3, #0
    b816:	9300      	str	r3, [sp, #0]
    b818:	003a      	movs	r2, r7
    b81a:	0030      	movs	r0, r6
    b81c:	4c48      	ldr	r4, [pc, #288]	; (b940 <MiApp_SendData+0x170>)
    b81e:	47a0      	blx	r4
		    return true;
    b820:	2401      	movs	r4, #1
    }
    b822:	0020      	movs	r0, r4
    b824:	b009      	add	sp, #36	; 0x24
    b826:	bc0c      	pop	{r2, r3}
    b828:	4690      	mov	r8, r2
    b82a:	4699      	mov	r9, r3
    b82c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    uint16_t DestinationAddress16 = ((addr[1] << 8) + addr[0]);
    b82e:	021b      	lsls	r3, r3, #8
    b830:	189b      	adds	r3, r3, r2
	    if(addr_len == 2 && (DestinationAddress16 == 0xFFFF))
    b832:	b29b      	uxth	r3, r3
    b834:	4a43      	ldr	r2, [pc, #268]	; (b944 <MiApp_SendData+0x174>)
    b836:	4694      	mov	ip, r2
    b838:	4463      	add	r3, ip
    b83a:	425a      	negs	r2, r3
    b83c:	4153      	adcs	r3, r2
    b83e:	b2de      	uxtb	r6, r3
    b840:	e7d9      	b.n	b7f6 <MiApp_SendData+0x26>
			if(SwAckReq || SendData)
    b842:	4b41      	ldr	r3, [pc, #260]	; (b948 <MiApp_SendData+0x178>)
    b844:	781c      	ldrb	r4, [r3, #0]
    b846:	b2e4      	uxtb	r4, r4
    b848:	2c00      	cmp	r4, #0
    b84a:	d173      	bne.n	b934 <MiApp_SendData+0x164>
    b84c:	4b3f      	ldr	r3, [pc, #252]	; (b94c <MiApp_SendData+0x17c>)
    b84e:	781b      	ldrb	r3, [r3, #0]
    b850:	2b00      	cmp	r3, #0
    b852:	d1e6      	bne.n	b822 <MiApp_SendData+0x52>
		    if (MY_ADDRESS_LENGTH == addr_len && isSameAddress(addr, ConnectionTable[0].Address))
    b854:	2808      	cmp	r0, #8
    b856:	d03d      	beq.n	b8d4 <MiApp_SendData+0x104>
				    if(forwardMessages[i].fromEDToED == 0)
    b858:	4b3d      	ldr	r3, [pc, #244]	; (b950 <MiApp_SendData+0x180>)
    b85a:	7c9b      	ldrb	r3, [r3, #18]
	    return true;
    b85c:	2401      	movs	r4, #1
				    if(forwardMessages[i].fromEDToED == 0)
    b85e:	2b00      	cmp	r3, #0
    b860:	d1df      	bne.n	b822 <MiApp_SendData+0x52>
					    forwardMessages[i].msg[0] = CMD_FORWRD_PACKET;
    b862:	4c3b      	ldr	r4, [pc, #236]	; (b950 <MiApp_SendData+0x180>)
    b864:	33cc      	adds	r3, #204	; 0xcc
    b866:	7563      	strb	r3, [r4, #21]
					    forwardMessages[i].msg[1] = addr[0];
    b868:	783b      	ldrb	r3, [r7, #0]
    b86a:	75a3      	strb	r3, [r4, #22]
					    forwardMessages[i].msg[2] = addr[1];
    b86c:	787b      	ldrb	r3, [r7, #1]
    b86e:	75e3      	strb	r3, [r4, #23]
					    forwardMessages[i].msg[3] = addr[2];
    b870:	78bb      	ldrb	r3, [r7, #2]
    b872:	7623      	strb	r3, [r4, #24]
					    memcpy(&(forwardMessages[i].msg[4]), msgpointer, msglen);
    b874:	0020      	movs	r0, r4
    b876:	3019      	adds	r0, #25
    b878:	002a      	movs	r2, r5
    b87a:	9907      	ldr	r1, [sp, #28]
    b87c:	4b35      	ldr	r3, [pc, #212]	; (b954 <MiApp_SendData+0x184>)
    b87e:	4798      	blx	r3
					    forwardMessages[i].msgLength = msglen + 4;
    b880:	3504      	adds	r5, #4
    b882:	7525      	strb	r5, [r4, #20]
					    forwardMessages[i].msghandle = msghandle;
    b884:	4643      	mov	r3, r8
    b886:	74e3      	strb	r3, [r4, #19]
					    forwardMessages[i].fromEDToED = 1;
    b888:	2301      	movs	r3, #1
    b88a:	74a3      	strb	r3, [r4, #18]
					    forwardMessages[i].confCallback = ConfCallback;
    b88c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    b88e:	6022      	str	r2, [r4, #0]
						SendData = true;
    b890:	4a2e      	ldr	r2, [pc, #184]	; (b94c <MiApp_SendData+0x17c>)
    b892:	7013      	strb	r3, [r2, #0]
					    MiMem_Free(addr);
    b894:	0038      	movs	r0, r7
    b896:	4b30      	ldr	r3, [pc, #192]	; (b958 <MiApp_SendData+0x188>)
    b898:	4798      	blx	r3
					    if (ackReq)
    b89a:	464b      	mov	r3, r9
    b89c:	2b00      	cmp	r3, #0
    b89e:	d034      	beq.n	b90a <MiApp_SendData+0x13a>
						    forwardMessages[i].TickStart.Val = MiWi_TickGet();
    b8a0:	4b2e      	ldr	r3, [pc, #184]	; (b95c <MiApp_SendData+0x18c>)
    b8a2:	4798      	blx	r3
    b8a4:	4b2a      	ldr	r3, [pc, #168]	; (b950 <MiApp_SendData+0x180>)
    b8a6:	60d8      	str	r0, [r3, #12]
						    SendPacket(broadcast, myPANID, ConnectionTable[0].Address, true, false, forwardMessages[i].msgLength, forwardMessages[i].msg, msghandle, ackReq, appAckWaitDataCallback);
    b8a8:	4a24      	ldr	r2, [pc, #144]	; (b93c <MiApp_SendData+0x16c>)
    b8aa:	8811      	ldrh	r1, [r2, #0]
    b8ac:	4a2c      	ldr	r2, [pc, #176]	; (b960 <MiApp_SendData+0x190>)
    b8ae:	9205      	str	r2, [sp, #20]
    b8b0:	2201      	movs	r2, #1
    b8b2:	9204      	str	r2, [sp, #16]
    b8b4:	4642      	mov	r2, r8
    b8b6:	9203      	str	r2, [sp, #12]
    b8b8:	001a      	movs	r2, r3
    b8ba:	3215      	adds	r2, #21
    b8bc:	9202      	str	r2, [sp, #8]
    b8be:	7d1b      	ldrb	r3, [r3, #20]
    b8c0:	9301      	str	r3, [sp, #4]
    b8c2:	2300      	movs	r3, #0
    b8c4:	9300      	str	r3, [sp, #0]
    b8c6:	3301      	adds	r3, #1
    b8c8:	4a26      	ldr	r2, [pc, #152]	; (b964 <MiApp_SendData+0x194>)
    b8ca:	0030      	movs	r0, r6
    b8cc:	4c1c      	ldr	r4, [pc, #112]	; (b940 <MiApp_SendData+0x170>)
    b8ce:	47a0      	blx	r4
					    return true;
    b8d0:	464c      	mov	r4, r9
    b8d2:	e7a6      	b.n	b822 <MiApp_SendData+0x52>
		    if (MY_ADDRESS_LENGTH == addr_len && isSameAddress(addr, ConnectionTable[0].Address))
    b8d4:	4923      	ldr	r1, [pc, #140]	; (b964 <MiApp_SendData+0x194>)
    b8d6:	0038      	movs	r0, r7
    b8d8:	4b23      	ldr	r3, [pc, #140]	; (b968 <MiApp_SendData+0x198>)
    b8da:	4798      	blx	r3
    b8dc:	1e04      	subs	r4, r0, #0
    b8de:	d0bb      	beq.n	b858 <MiApp_SendData+0x88>
			    SendPacket(broadcast, myPANID, addr, false, false, msglen, msgpointer, msghandle, ackReq, ConfCallback);
    b8e0:	4b16      	ldr	r3, [pc, #88]	; (b93c <MiApp_SendData+0x16c>)
    b8e2:	8819      	ldrh	r1, [r3, #0]
    b8e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    b8e6:	9305      	str	r3, [sp, #20]
    b8e8:	464b      	mov	r3, r9
    b8ea:	9304      	str	r3, [sp, #16]
    b8ec:	4643      	mov	r3, r8
    b8ee:	9303      	str	r3, [sp, #12]
    b8f0:	9b07      	ldr	r3, [sp, #28]
    b8f2:	9302      	str	r3, [sp, #8]
    b8f4:	9501      	str	r5, [sp, #4]
    b8f6:	2300      	movs	r3, #0
    b8f8:	9300      	str	r3, [sp, #0]
    b8fa:	003a      	movs	r2, r7
    b8fc:	0030      	movs	r0, r6
    b8fe:	4d10      	ldr	r5, [pc, #64]	; (b940 <MiApp_SendData+0x170>)
    b900:	47a8      	blx	r5
				SendData = true;
    b902:	2201      	movs	r2, #1
    b904:	4b11      	ldr	r3, [pc, #68]	; (b94c <MiApp_SendData+0x17c>)
    b906:	701a      	strb	r2, [r3, #0]
			    return true;
    b908:	e78b      	b.n	b822 <MiApp_SendData+0x52>
						    SendPacket(broadcast, myPANID, ConnectionTable[0].Address, true, false, forwardMessages[i].msgLength, forwardMessages[i].msg, msghandle, ackReq, appAckWaitDataCallback);
    b90a:	4b0c      	ldr	r3, [pc, #48]	; (b93c <MiApp_SendData+0x16c>)
    b90c:	8819      	ldrh	r1, [r3, #0]
    b90e:	4b14      	ldr	r3, [pc, #80]	; (b960 <MiApp_SendData+0x190>)
    b910:	9305      	str	r3, [sp, #20]
    b912:	2200      	movs	r2, #0
    b914:	9204      	str	r2, [sp, #16]
    b916:	4643      	mov	r3, r8
    b918:	9303      	str	r3, [sp, #12]
    b91a:	4b14      	ldr	r3, [pc, #80]	; (b96c <MiApp_SendData+0x19c>)
    b91c:	9302      	str	r3, [sp, #8]
    b91e:	3b15      	subs	r3, #21
    b920:	7d1b      	ldrb	r3, [r3, #20]
    b922:	9301      	str	r3, [sp, #4]
    b924:	9200      	str	r2, [sp, #0]
    b926:	2301      	movs	r3, #1
    b928:	4a0e      	ldr	r2, [pc, #56]	; (b964 <MiApp_SendData+0x194>)
    b92a:	0030      	movs	r0, r6
    b92c:	4c04      	ldr	r4, [pc, #16]	; (b940 <MiApp_SendData+0x170>)
    b92e:	47a0      	blx	r4
					    return true;
    b930:	2401      	movs	r4, #1
    b932:	e776      	b.n	b822 <MiApp_SendData+0x52>
				return false;
    b934:	2400      	movs	r4, #0
    b936:	e774      	b.n	b822 <MiApp_SendData+0x52>
    b938:	20003344 	.word	0x20003344
    b93c:	20003050 	.word	0x20003050
    b940:	0000b311 	.word	0x0000b311
    b944:	ffff0001 	.word	0xffff0001
    b948:	200004a1 	.word	0x200004a1
    b94c:	200004a0 	.word	0x200004a0
    b950:	20002870 	.word	0x20002870
    b954:	0001786b 	.word	0x0001786b
    b958:	0000d271 	.word	0x0000d271
    b95c:	0000d3f5 	.word	0x0000d3f5
    b960:	0000b5cd 	.word	0x0000b5cd
    b964:	20002ef0 	.word	0x20002ef0
    b968:	0000b7a9 	.word	0x0000b7a9
    b96c:	20002885 	.word	0x20002885

0000b970 <MiApp_Set>:
{
    b970:	b570      	push	{r4, r5, r6, lr}
    b972:	000d      	movs	r5, r1
    return false;
    b974:	2400      	movs	r4, #0
    switch(id)
    b976:	2800      	cmp	r0, #0
    b978:	d001      	beq.n	b97e <MiApp_Set+0xe>
}
    b97a:	0020      	movs	r0, r4
    b97c:	bd70      	pop	{r4, r5, r6, pc}
        if( MiMAC_Set(MAC_CHANNEL, value))
    b97e:	4b05      	ldr	r3, [pc, #20]	; (b994 <MiApp_Set+0x24>)
    b980:	4798      	blx	r3
    b982:	1e04      	subs	r4, r0, #0
    b984:	d0f9      	beq.n	b97a <MiApp_Set+0xa>
          currentChannel = *value;
    b986:	782a      	ldrb	r2, [r5, #0]
    b988:	4b03      	ldr	r3, [pc, #12]	; (b998 <MiApp_Set+0x28>)
    b98a:	701a      	strb	r2, [r3, #0]
			  PDS_Store(PDS_CURRENT_CHANNEL_ID);
    b98c:	2003      	movs	r0, #3
    b98e:	4b03      	ldr	r3, [pc, #12]	; (b99c <MiApp_Set+0x2c>)
    b990:	4798      	blx	r3
          return true;
    b992:	e7f2      	b.n	b97a <MiApp_Set+0xa>
    b994:	00009f95 	.word	0x00009f95
    b998:	2000001d 	.word	0x2000001d
    b99c:	000098a5 	.word	0x000098a5

0000b9a0 <MiApp_ProtocolInit>:
{
    b9a0:	b570      	push	{r4, r5, r6, lr}
    b9a2:	b084      	sub	sp, #16
    P2PStatus.Val = 0;
    b9a4:	2200      	movs	r2, #0
    b9a6:	4b40      	ldr	r3, [pc, #256]	; (baa8 <MiApp_ProtocolInit+0x108>)
    b9a8:	701a      	strb	r2, [r3, #0]
    b9aa:	4b40      	ldr	r3, [pc, #256]	; (baac <MiApp_ProtocolInit+0x10c>)
    b9ac:	0019      	movs	r1, r3
    b9ae:	3141      	adds	r1, #65	; 0x41
    b9b0:	31ff      	adds	r1, #255	; 0xff
            ConnectionTable[i].status.Val = 0;
    b9b2:	721a      	strb	r2, [r3, #8]
            ConnectionTable[i].Address[0] = 0x00;
    b9b4:	701a      	strb	r2, [r3, #0]
            ConnectionTable[i].Address[1] = 0x00;
    b9b6:	705a      	strb	r2, [r3, #1]
            ConnectionTable[i].Address[2] = 0x00;
    b9b8:	709a      	strb	r2, [r3, #2]
                ConnectionTable[i].link_status = 0x00;
    b9ba:	729a      	strb	r2, [r3, #10]
                ConnectionTable[i].permanent_connections = 0x00;
    b9bc:	72da      	strb	r2, [r3, #11]
    b9be:	3310      	adds	r3, #16
        for(i = 0; i < CONNECTION_SIZE; i++)
    b9c0:	428b      	cmp	r3, r1
    b9c2:	d1f6      	bne.n	b9b2 <MiApp_ProtocolInit+0x12>
            indirectMessages[i].flags.Val = 0;
    b9c4:	4b3a      	ldr	r3, [pc, #232]	; (bab0 <MiApp_ProtocolInit+0x110>)
    b9c6:	2200      	movs	r2, #0
    b9c8:	769a      	strb	r2, [r3, #26]
    b9ca:	219d      	movs	r1, #157	; 0x9d
    b9cc:	0049      	lsls	r1, r1, #1
    b9ce:	545a      	strb	r2, [r3, r1]
    b9d0:	4b38      	ldr	r3, [pc, #224]	; (bab4 <MiApp_ProtocolInit+0x114>)
    b9d2:	0019      	movs	r1, r3
    b9d4:	3150      	adds	r1, #80	; 0x50
            IncomingFrameCounter[i].Val = 0;
    b9d6:	c304      	stmia	r3!, {r2}
        for(i = 0; i < CONNECTION_SIZE; i++)
    b9d8:	4299      	cmp	r1, r3
    b9da:	d1fc      	bne.n	b9d6 <MiApp_ProtocolInit+0x36>
			PDS_Restore(PDS_PANID_ID);
    b9dc:	2002      	movs	r0, #2
    b9de:	4b36      	ldr	r3, [pc, #216]	; (bab8 <MiApp_ProtocolInit+0x118>)
    b9e0:	4798      	blx	r3
        if (myPANID.Val)
    b9e2:	4b36      	ldr	r3, [pc, #216]	; (babc <MiApp_ProtocolInit+0x11c>)
    b9e4:	881b      	ldrh	r3, [r3, #0]
    b9e6:	2b00      	cmp	r3, #0
    b9e8:	d025      	beq.n	ba36 <MiApp_ProtocolInit+0x96>
			PDS_Restore(PDS_CURRENT_CHANNEL_ID);
    b9ea:	2003      	movs	r0, #3
    b9ec:	4b32      	ldr	r3, [pc, #200]	; (bab8 <MiApp_ProtocolInit+0x118>)
    b9ee:	4798      	blx	r3
            if( currentChannel >= 32 )
    b9f0:	4b33      	ldr	r3, [pc, #204]	; (bac0 <MiApp_ProtocolInit+0x120>)
    b9f2:	781b      	ldrb	r3, [r3, #0]
    b9f4:	2b1f      	cmp	r3, #31
    b9f6:	d853      	bhi.n	baa0 <MiApp_ProtocolInit+0x100>
			PDS_Restore(PDS_PANID_ID);
    b9f8:	2002      	movs	r0, #2
    b9fa:	4c2f      	ldr	r4, [pc, #188]	; (bab8 <MiApp_ProtocolInit+0x118>)
    b9fc:	47a0      	blx	r4
			PDS_Restore(PDS_CONNECTION_MODE_ID);
    b9fe:	2004      	movs	r0, #4
    ba00:	47a0      	blx	r4
			PDS_Restore(PDS_CONNECTION_TABLE_ID);
    ba02:	2005      	movs	r0, #5
    ba04:	47a0      	blx	r4
			PDS_Restore(PDS_EDC_ID);
    ba06:	2006      	movs	r0, #6
    ba08:	47a0      	blx	r4
			PDS_Restore(PDS_ROLE_ID);
    ba0a:	2007      	movs	r0, #7
    ba0c:	47a0      	blx	r4
			PDS_Restore(MIWI_ALL_MEMORY_MEM_ID);
    ba0e:	482d      	ldr	r0, [pc, #180]	; (bac4 <MiApp_ProtocolInit+0x124>)
    ba10:	47a0      	blx	r4
                printf("\r\nPANID:");
    ba12:	482d      	ldr	r0, [pc, #180]	; (bac8 <MiApp_ProtocolInit+0x128>)
    ba14:	4c2d      	ldr	r4, [pc, #180]	; (bacc <MiApp_ProtocolInit+0x12c>)
    ba16:	47a0      	blx	r4
                printf("%x",myPANID.v[1]);
    ba18:	4e28      	ldr	r6, [pc, #160]	; (babc <MiApp_ProtocolInit+0x11c>)
    ba1a:	7871      	ldrb	r1, [r6, #1]
    ba1c:	4d2c      	ldr	r5, [pc, #176]	; (bad0 <MiApp_ProtocolInit+0x130>)
    ba1e:	0028      	movs	r0, r5
    ba20:	47a0      	blx	r4
                printf("%x",myPANID.v[0]);
    ba22:	7831      	ldrb	r1, [r6, #0]
    ba24:	0028      	movs	r0, r5
    ba26:	47a0      	blx	r4
                printf(" Channel:");
    ba28:	482a      	ldr	r0, [pc, #168]	; (bad4 <MiApp_ProtocolInit+0x134>)
    ba2a:	47a0      	blx	r4
                printf("%d",currentChannel);
    ba2c:	4b24      	ldr	r3, [pc, #144]	; (bac0 <MiApp_ProtocolInit+0x120>)
    ba2e:	7819      	ldrb	r1, [r3, #0]
    ba30:	4829      	ldr	r0, [pc, #164]	; (bad8 <MiApp_ProtocolInit+0x138>)
    ba32:	47a0      	blx	r4
    ba34:	e00b      	b.n	ba4e <MiApp_ProtocolInit+0xae>
                myPANID.Val = MY_PAN_ID;
    ba36:	4a29      	ldr	r2, [pc, #164]	; (badc <MiApp_ProtocolInit+0x13c>)
    ba38:	4b20      	ldr	r3, [pc, #128]	; (babc <MiApp_ProtocolInit+0x11c>)
    ba3a:	801a      	strh	r2, [r3, #0]
				PDS_Store(PDS_PANID_ID);
    ba3c:	2002      	movs	r0, #2
    ba3e:	4c28      	ldr	r4, [pc, #160]	; (bae0 <MiApp_ProtocolInit+0x140>)
    ba40:	47a0      	blx	r4
			PDS_Store(PDS_CURRENT_CHANNEL_ID);
    ba42:	2003      	movs	r0, #3
    ba44:	47a0      	blx	r4
			PDS_Store(PDS_CONNECTION_MODE_ID);
    ba46:	2004      	movs	r0, #4
    ba48:	47a0      	blx	r4
			PDS_Store(PDS_CONNECTION_TABLE_ID);
    ba4a:	2005      	movs	r0, #5
    ba4c:	47a0      	blx	r4
    initValue.PAddress = myLongAddress;
    ba4e:	aa02      	add	r2, sp, #8
    initValue.actionFlags.bits.CCAEnable = 1;
    ba50:	7813      	ldrb	r3, [r2, #0]
    ba52:	2102      	movs	r1, #2
    ba54:	430b      	orrs	r3, r1
    initValue.actionFlags.bits.PAddrLength = MY_ADDRESS_LENGTH;
    ba56:	2187      	movs	r1, #135	; 0x87
    ba58:	400b      	ands	r3, r1
    ba5a:	2140      	movs	r1, #64	; 0x40
    ba5c:	430b      	orrs	r3, r1
    initValue.actionFlags.bits.NetworkFreezer = 1;
    ba5e:	b2db      	uxtb	r3, r3
    ba60:	2104      	movs	r1, #4
    ba62:	430b      	orrs	r3, r1
    initValue.actionFlags.bits.RepeaterMode = 0;
    ba64:	21c6      	movs	r1, #198	; 0xc6
    ba66:	400b      	ands	r3, r1
    ba68:	7013      	strb	r3, [r2, #0]
    MiMAC_Init(initValue);
    ba6a:	9802      	ldr	r0, [sp, #8]
    ba6c:	491d      	ldr	r1, [pc, #116]	; (bae4 <MiApp_ProtocolInit+0x144>)
    ba6e:	4b1e      	ldr	r3, [pc, #120]	; (bae8 <MiApp_ProtocolInit+0x148>)
    ba70:	4798      	blx	r3
    if (currentChannel != 0xFF)
    ba72:	4b13      	ldr	r3, [pc, #76]	; (bac0 <MiApp_ProtocolInit+0x120>)
    ba74:	781b      	ldrb	r3, [r3, #0]
    ba76:	2bff      	cmp	r3, #255	; 0xff
    ba78:	d003      	beq.n	ba82 <MiApp_ProtocolInit+0xe2>
	    MiApp_Set(CHANNEL, &currentChannel);
    ba7a:	4911      	ldr	r1, [pc, #68]	; (bac0 <MiApp_ProtocolInit+0x120>)
    ba7c:	2000      	movs	r0, #0
    ba7e:	4b1b      	ldr	r3, [pc, #108]	; (baec <MiApp_ProtocolInit+0x14c>)
    ba80:	4798      	blx	r3
            uint16_t tmp = 0xFFFF;
    ba82:	466b      	mov	r3, sp
    ba84:	1d98      	adds	r0, r3, #6
    ba86:	2301      	movs	r3, #1
    ba88:	425b      	negs	r3, r3
    ba8a:	8003      	strh	r3, [r0, #0]
            MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
    ba8c:	490b      	ldr	r1, [pc, #44]	; (babc <MiApp_ProtocolInit+0x11c>)
    ba8e:	4b18      	ldr	r3, [pc, #96]	; (baf0 <MiApp_ProtocolInit+0x150>)
    ba90:	4798      	blx	r3
    P2PCapacityInfo |= (ConnMode << 4);
    ba92:	4b18      	ldr	r3, [pc, #96]	; (baf4 <MiApp_ProtocolInit+0x154>)
    ba94:	781b      	ldrb	r3, [r3, #0]
    ba96:	011b      	lsls	r3, r3, #4
    ba98:	2209      	movs	r2, #9
    ba9a:	4313      	orrs	r3, r2
    ba9c:	4a16      	ldr	r2, [pc, #88]	; (baf8 <MiApp_ProtocolInit+0x158>)
    ba9e:	7013      	strb	r3, [r2, #0]
}
    baa0:	2000      	movs	r0, #0
    baa2:	b004      	add	sp, #16
    baa4:	bd70      	pop	{r4, r5, r6, pc}
    baa6:	46c0      	nop			; (mov r8, r8)
    baa8:	200030b0 	.word	0x200030b0
    baac:	20002ef0 	.word	0x20002ef0
    bab0:	200030b4 	.word	0x200030b4
    bab4:	2000305c 	.word	0x2000305c
    bab8:	000097c5 	.word	0x000097c5
    babc:	20003050 	.word	0x20003050
    bac0:	2000001d 	.word	0x2000001d
    bac4:	00004001 	.word	0x00004001
    bac8:	0001a128 	.word	0x0001a128
    bacc:	00017e25 	.word	0x00017e25
    bad0:	0001976c 	.word	0x0001976c
    bad4:	0001a134 	.word	0x0001a134
    bad8:	000193fc 	.word	0x000193fc
    badc:	00001234 	.word	0x00001234
    bae0:	000098a5 	.word	0x000098a5
    bae4:	20000020 	.word	0x20000020
    bae8:	00009fbd 	.word	0x00009fbd
    baec:	0000b971 	.word	0x0000b971
    baf0:	00009b95 	.word	0x00009b95
    baf4:	2000001c 	.word	0x2000001c
    baf8:	20003045 	.word	0x20003045

0000bafc <DumpConnection>:
    {
    bafc:	b5f0      	push	{r4, r5, r6, r7, lr}
    bafe:	46de      	mov	lr, fp
    bb00:	4657      	mov	r7, sl
    bb02:	464e      	mov	r6, r9
    bb04:	b5c0      	push	{r6, r7, lr}
    bb06:	b082      	sub	sp, #8
    bb08:	0005      	movs	r5, r0
        if( index > CONNECTION_SIZE )
    bb0a:	2814      	cmp	r0, #20
    bb0c:	d810      	bhi.n	bb30 <DumpConnection+0x34>
        if( index < CONNECTION_SIZE )
    bb0e:	2d13      	cmp	r5, #19
    bb10:	d856      	bhi.n	bbc0 <DumpConnection+0xc4>
            printf("\r\nConnection \tPeerLongAddress \tPeerInfo \tRxOnStatus1\r\n");  
    bb12:	484a      	ldr	r0, [pc, #296]	; (bc3c <DumpConnection+0x140>)
    bb14:	4b4a      	ldr	r3, [pc, #296]	; (bc40 <DumpConnection+0x144>)
    bb16:	4798      	blx	r3
            if( ConnectionTable[index].status.bits.isValid )
    bb18:	012a      	lsls	r2, r5, #4
    bb1a:	4b4a      	ldr	r3, [pc, #296]	; (bc44 <DumpConnection+0x148>)
    bb1c:	189b      	adds	r3, r3, r2
    bb1e:	7b1b      	ldrb	r3, [r3, #12]
    bb20:	09db      	lsrs	r3, r3, #7
    bb22:	d124      	bne.n	bb6e <DumpConnection+0x72>
    }
    bb24:	b002      	add	sp, #8
    bb26:	bc1c      	pop	{r2, r3, r4}
    bb28:	4691      	mov	r9, r2
    bb2a:	469a      	mov	sl, r3
    bb2c:	46a3      	mov	fp, r4
    bb2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            printf("\r\n\r\nMy Address: 0x");
    bb30:	4845      	ldr	r0, [pc, #276]	; (bc48 <DumpConnection+0x14c>)
    bb32:	4b46      	ldr	r3, [pc, #280]	; (bc4c <DumpConnection+0x150>)
    bb34:	4798      	blx	r3
    bb36:	4c46      	ldr	r4, [pc, #280]	; (bc50 <DumpConnection+0x154>)
    bb38:	0026      	movs	r6, r4
    bb3a:	3e08      	subs	r6, #8
				printf("%02x",myLongAddress[MY_ADDRESS_LENGTH-1-i]);
    bb3c:	4f43      	ldr	r7, [pc, #268]	; (bc4c <DumpConnection+0x150>)
    bb3e:	79e1      	ldrb	r1, [r4, #7]
    bb40:	4844      	ldr	r0, [pc, #272]	; (bc54 <DumpConnection+0x158>)
    bb42:	47b8      	blx	r7
    bb44:	3c01      	subs	r4, #1
            for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    bb46:	42b4      	cmp	r4, r6
    bb48:	d1f9      	bne.n	bb3e <DumpConnection+0x42>
                printf("  PANID: 0x");
    bb4a:	4843      	ldr	r0, [pc, #268]	; (bc58 <DumpConnection+0x15c>)
    bb4c:	4c3f      	ldr	r4, [pc, #252]	; (bc4c <DumpConnection+0x150>)
    bb4e:	47a0      	blx	r4
                printf("%x",myPANID.v[1]);
    bb50:	4f42      	ldr	r7, [pc, #264]	; (bc5c <DumpConnection+0x160>)
    bb52:	7879      	ldrb	r1, [r7, #1]
    bb54:	4e42      	ldr	r6, [pc, #264]	; (bc60 <DumpConnection+0x164>)
    bb56:	0030      	movs	r0, r6
    bb58:	47a0      	blx	r4
                printf("%x",myPANID.v[0]);
    bb5a:	7839      	ldrb	r1, [r7, #0]
    bb5c:	0030      	movs	r0, r6
    bb5e:	47a0      	blx	r4
            printf("  Channel: ");
    bb60:	4840      	ldr	r0, [pc, #256]	; (bc64 <DumpConnection+0x168>)
    bb62:	47a0      	blx	r4
            printf("%d",currentChannel);
    bb64:	4b40      	ldr	r3, [pc, #256]	; (bc68 <DumpConnection+0x16c>)
    bb66:	7819      	ldrb	r1, [r3, #0]
    bb68:	4840      	ldr	r0, [pc, #256]	; (bc6c <DumpConnection+0x170>)
    bb6a:	47a0      	blx	r4
    bb6c:	e7cf      	b.n	bb0e <DumpConnection+0x12>
                printf("%02x",index);
    bb6e:	0029      	movs	r1, r5
    bb70:	4838      	ldr	r0, [pc, #224]	; (bc54 <DumpConnection+0x158>)
    bb72:	4c36      	ldr	r4, [pc, #216]	; (bc4c <DumpConnection+0x150>)
    bb74:	47a0      	blx	r4
                printf("\t\t\t");
    bb76:	483e      	ldr	r0, [pc, #248]	; (bc70 <DumpConnection+0x174>)
    bb78:	47a0      	blx	r4
    bb7a:	012f      	lsls	r7, r5, #4
    bb7c:	003c      	movs	r4, r7
    bb7e:	340b      	adds	r4, #11
    bb80:	4b30      	ldr	r3, [pc, #192]	; (bc44 <DumpConnection+0x148>)
    bb82:	18e4      	adds	r4, r4, r3
    bb84:	3703      	adds	r7, #3
    bb86:	18ff      	adds	r7, r7, r3
                        printf("%02x", ConnectionTable[index].Address[MY_ADDRESS_LENGTH-1-i] );
    bb88:	4e30      	ldr	r6, [pc, #192]	; (bc4c <DumpConnection+0x150>)
    bb8a:	7821      	ldrb	r1, [r4, #0]
    bb8c:	4831      	ldr	r0, [pc, #196]	; (bc54 <DumpConnection+0x158>)
    bb8e:	47b0      	blx	r6
    bb90:	3c01      	subs	r4, #1
                for(i = 0; i < 8; i++)
    bb92:	42bc      	cmp	r4, r7
    bb94:	d1f9      	bne.n	bb8a <DumpConnection+0x8e>
                printf("/t");
    bb96:	4837      	ldr	r0, [pc, #220]	; (bc74 <DumpConnection+0x178>)
    bb98:	4c2c      	ldr	r4, [pc, #176]	; (bc4c <DumpConnection+0x150>)
    bb9a:	47a0      	blx	r4
                        printf("%02x", ConnectionTable[index].PeerInfo[i] );
    bb9c:	012d      	lsls	r5, r5, #4
    bb9e:	4b29      	ldr	r3, [pc, #164]	; (bc44 <DumpConnection+0x148>)
    bba0:	195d      	adds	r5, r3, r5
    bba2:	7b69      	ldrb	r1, [r5, #13]
    bba4:	482b      	ldr	r0, [pc, #172]	; (bc54 <DumpConnection+0x158>)
    bba6:	47a0      	blx	r4
				printf("\t");
    bba8:	2009      	movs	r0, #9
    bbaa:	4e33      	ldr	r6, [pc, #204]	; (bc78 <DumpConnection+0x17c>)
    bbac:	47b0      	blx	r6
				printf("\t");
    bbae:	2009      	movs	r0, #9
    bbb0:	47b0      	blx	r6
				printf("%d", ConnectionTable[index].status.Val );
    bbb2:	7b29      	ldrb	r1, [r5, #12]
    bbb4:	482d      	ldr	r0, [pc, #180]	; (bc6c <DumpConnection+0x170>)
    bbb6:	47a0      	blx	r4
                printf("\r\n");
    bbb8:	4830      	ldr	r0, [pc, #192]	; (bc7c <DumpConnection+0x180>)
    bbba:	4b21      	ldr	r3, [pc, #132]	; (bc40 <DumpConnection+0x144>)
    bbbc:	4798      	blx	r3
    bbbe:	e7b1      	b.n	bb24 <DumpConnection+0x28>
            printf("\r\n\r\nConnection     PeerLongAddress     PeerInfo\tRxOnStatus\r\n");  
    bbc0:	482f      	ldr	r0, [pc, #188]	; (bc80 <DumpConnection+0x184>)
    bbc2:	4b1f      	ldr	r3, [pc, #124]	; (bc40 <DumpConnection+0x144>)
    bbc4:	4798      	blx	r3
    bbc6:	4e2f      	ldr	r6, [pc, #188]	; (bc84 <DumpConnection+0x188>)
    bbc8:	2500      	movs	r5, #0
                if( ConnectionTable[i].status.bits.isValid )
    bbca:	4b1e      	ldr	r3, [pc, #120]	; (bc44 <DumpConnection+0x148>)
    bbcc:	4699      	mov	r9, r3
                    printf("%02x",i);
    bbce:	4b1f      	ldr	r3, [pc, #124]	; (bc4c <DumpConnection+0x150>)
    bbd0:	469a      	mov	sl, r3
    bbd2:	e01b      	b.n	bc0c <DumpConnection+0x110>
                    printf("    ");
    bbd4:	482c      	ldr	r0, [pc, #176]	; (bc88 <DumpConnection+0x18c>)
    bbd6:	4f1d      	ldr	r7, [pc, #116]	; (bc4c <DumpConnection+0x150>)
    bbd8:	47b8      	blx	r7
                            printf("%02x", ConnectionTable[i].PeerInfo[j] );
    bbda:	78b1      	ldrb	r1, [r6, #2]
    bbdc:	481d      	ldr	r0, [pc, #116]	; (bc54 <DumpConnection+0x158>)
    bbde:	47b8      	blx	r7
					printf("\t");
    bbe0:	2009      	movs	r0, #9
    bbe2:	4c25      	ldr	r4, [pc, #148]	; (bc78 <DumpConnection+0x17c>)
    bbe4:	47a0      	blx	r4
					printf("\t");
    bbe6:	2009      	movs	r0, #9
    bbe8:	47a0      	blx	r4
					printf("%02x", ConnectionTable[i].status.bits.RXOnWhenIdle );					
    bbea:	9b01      	ldr	r3, [sp, #4]
    bbec:	011b      	lsls	r3, r3, #4
    bbee:	4a15      	ldr	r2, [pc, #84]	; (bc44 <DumpConnection+0x148>)
    bbf0:	18d3      	adds	r3, r2, r3
    bbf2:	7b19      	ldrb	r1, [r3, #12]
    bbf4:	07c9      	lsls	r1, r1, #31
    bbf6:	0fc9      	lsrs	r1, r1, #31
    bbf8:	4816      	ldr	r0, [pc, #88]	; (bc54 <DumpConnection+0x158>)
    bbfa:	47b8      	blx	r7
                    printf("\r\n");
    bbfc:	481f      	ldr	r0, [pc, #124]	; (bc7c <DumpConnection+0x180>)
    bbfe:	4b10      	ldr	r3, [pc, #64]	; (bc40 <DumpConnection+0x144>)
    bc00:	4798      	blx	r3
    bc02:	3501      	adds	r5, #1
    bc04:	3610      	adds	r6, #16
            for(i = 0; i < CONNECTION_SIZE; i++)
    bc06:	2d14      	cmp	r5, #20
    bc08:	d100      	bne.n	bc0c <DumpConnection+0x110>
    bc0a:	e78b      	b.n	bb24 <DumpConnection+0x28>
                if( ConnectionTable[i].status.bits.isValid )
    bc0c:	9501      	str	r5, [sp, #4]
    bc0e:	012b      	lsls	r3, r5, #4
    bc10:	444b      	add	r3, r9
    bc12:	7b1b      	ldrb	r3, [r3, #12]
    bc14:	09db      	lsrs	r3, r3, #7
    bc16:	d0f4      	beq.n	bc02 <DumpConnection+0x106>
                    printf("%02x",i);
    bc18:	0029      	movs	r1, r5
    bc1a:	480e      	ldr	r0, [pc, #56]	; (bc54 <DumpConnection+0x158>)
    bc1c:	47d0      	blx	sl
                    printf("             ");
    bc1e:	481b      	ldr	r0, [pc, #108]	; (bc8c <DumpConnection+0x190>)
    bc20:	47d0      	blx	sl
    bc22:	2308      	movs	r3, #8
    bc24:	425b      	negs	r3, r3
    bc26:	469b      	mov	fp, r3
    bc28:	44b3      	add	fp, r6
    bc2a:	0034      	movs	r4, r6
                            printf("%02x", ConnectionTable[i].Address[MY_ADDRESS_LENGTH-1-j] );
    bc2c:	4f07      	ldr	r7, [pc, #28]	; (bc4c <DumpConnection+0x150>)
    bc2e:	7821      	ldrb	r1, [r4, #0]
    bc30:	4808      	ldr	r0, [pc, #32]	; (bc54 <DumpConnection+0x158>)
    bc32:	47b8      	blx	r7
    bc34:	3c01      	subs	r4, #1
                    for(j = 0; j < 8; j++)
    bc36:	455c      	cmp	r4, fp
    bc38:	d1f9      	bne.n	bc2e <DumpConnection+0x132>
    bc3a:	e7cb      	b.n	bbd4 <DumpConnection+0xd8>
    bc3c:	0001a094 	.word	0x0001a094
    bc40:	00017f41 	.word	0x00017f41
    bc44:	20002eec 	.word	0x20002eec
    bc48:	0001a068 	.word	0x0001a068
    bc4c:	00017e25 	.word	0x00017e25
    bc50:	20000020 	.word	0x20000020
    bc54:	0001975c 	.word	0x0001975c
    bc58:	0001a07c 	.word	0x0001a07c
    bc5c:	20003050 	.word	0x20003050
    bc60:	0001976c 	.word	0x0001976c
    bc64:	0001a088 	.word	0x0001a088
    bc68:	2000001d 	.word	0x2000001d
    bc6c:	000193fc 	.word	0x000193fc
    bc70:	0001a0cc 	.word	0x0001a0cc
    bc74:	0001a0d0 	.word	0x0001a0d0
    bc78:	00017e59 	.word	0x00017e59
    bc7c:	00019930 	.word	0x00019930
    bc80:	0001a0d4 	.word	0x0001a0d4
    bc84:	20002ef7 	.word	0x20002ef7
    bc88:	0001a120 	.word	0x0001a120
    bc8c:	0001a110 	.word	0x0001a110

0000bc90 <display_connection_table>:
{
    bc90:	b5f0      	push	{r4, r5, r6, r7, lr}
    bc92:	46de      	mov	lr, fp
    bc94:	4657      	mov	r7, sl
    bc96:	464e      	mov	r6, r9
    bc98:	b5c0      	push	{r6, r7, lr}
	if(conn_size > 0)
    bc9a:	4b30      	ldr	r3, [pc, #192]	; (bd5c <display_connection_table+0xcc>)
    bc9c:	781b      	ldrb	r3, [r3, #0]
    bc9e:	2b00      	cmp	r3, #0
    bca0:	d104      	bne.n	bcac <display_connection_table+0x1c>
}
    bca2:	bc1c      	pop	{r2, r3, r4}
    bca4:	4691      	mov	r9, r2
    bca6:	469a      	mov	sl, r3
    bca8:	46a3      	mov	fp, r4
    bcaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printf("\r\n\r\nMy Address: 0x");
    bcac:	482c      	ldr	r0, [pc, #176]	; (bd60 <display_connection_table+0xd0>)
    bcae:	4b2d      	ldr	r3, [pc, #180]	; (bd64 <display_connection_table+0xd4>)
    bcb0:	4798      	blx	r3
    bcb2:	4c2d      	ldr	r4, [pc, #180]	; (bd68 <display_connection_table+0xd8>)
    bcb4:	0027      	movs	r7, r4
    bcb6:	3f08      	subs	r7, #8
			printf("%02x",myLongAddress[MY_ADDRESS_LENGTH-1-k]);
    bcb8:	4e2c      	ldr	r6, [pc, #176]	; (bd6c <display_connection_table+0xdc>)
    bcba:	4d2a      	ldr	r5, [pc, #168]	; (bd64 <display_connection_table+0xd4>)
    bcbc:	79e1      	ldrb	r1, [r4, #7]
    bcbe:	0030      	movs	r0, r6
    bcc0:	47a8      	blx	r5
    bcc2:	3c01      	subs	r4, #1
		for(uint8_t k = 0; k < MY_ADDRESS_LENGTH; k++)
    bcc4:	42bc      	cmp	r4, r7
    bcc6:	d1f9      	bne.n	bcbc <display_connection_table+0x2c>
		printf("\n------------------------------------------------\n\r            Connection table\n------------------------------------------------\n\r");
    bcc8:	4829      	ldr	r0, [pc, #164]	; (bd70 <display_connection_table+0xe0>)
    bcca:	4b26      	ldr	r3, [pc, #152]	; (bd64 <display_connection_table+0xd4>)
    bccc:	4798      	blx	r3
		printf("\nID\tDevice Address \t\tstatus \tPAN ID \n");
    bcce:	4829      	ldr	r0, [pc, #164]	; (bd74 <display_connection_table+0xe4>)
    bcd0:	4b29      	ldr	r3, [pc, #164]	; (bd78 <display_connection_table+0xe8>)
    bcd2:	4798      	blx	r3
		for(uint8_t i =0; i <= conn_size-1; i++ )
    bcd4:	4b21      	ldr	r3, [pc, #132]	; (bd5c <display_connection_table+0xcc>)
    bcd6:	781b      	ldrb	r3, [r3, #0]
    bcd8:	2b01      	cmp	r3, #1
    bcda:	d43a      	bmi.n	bd52 <display_connection_table+0xc2>
    bcdc:	2700      	movs	r7, #0
    bcde:	2300      	movs	r3, #0
    bce0:	4699      	mov	r9, r3
			printf("%02x",i+1);
    bce2:	4b20      	ldr	r3, [pc, #128]	; (bd64 <display_connection_table+0xd4>)
    bce4:	469b      	mov	fp, r3
			printf("\t");
    bce6:	4b25      	ldr	r3, [pc, #148]	; (bd7c <display_connection_table+0xec>)
    bce8:	469a      	mov	sl, r3
    bcea:	e01e      	b.n	bd2a <display_connection_table+0x9a>
			printf("\t");
    bcec:	2009      	movs	r0, #9
    bcee:	4c23      	ldr	r4, [pc, #140]	; (bd7c <display_connection_table+0xec>)
    bcf0:	47a0      	blx	r4
			printf("%d",(ConnectionTable[i].status.bits.isValid));
    bcf2:	4d23      	ldr	r5, [pc, #140]	; (bd80 <display_connection_table+0xf0>)
    bcf4:	013e      	lsls	r6, r7, #4
    bcf6:	19ab      	adds	r3, r5, r6
    bcf8:	7b19      	ldrb	r1, [r3, #12]
    bcfa:	09c9      	lsrs	r1, r1, #7
    bcfc:	4821      	ldr	r0, [pc, #132]	; (bd84 <display_connection_table+0xf4>)
    bcfe:	4f19      	ldr	r7, [pc, #100]	; (bd64 <display_connection_table+0xd4>)
    bd00:	47b8      	blx	r7
			printf("\t");
    bd02:	2009      	movs	r0, #9
    bd04:	47a0      	blx	r4
			printf("%02x",(ConnectionTable[i].PANID.Val));
    bd06:	5b71      	ldrh	r1, [r6, r5]
    bd08:	4818      	ldr	r0, [pc, #96]	; (bd6c <display_connection_table+0xdc>)
    bd0a:	47b8      	blx	r7
			printf("\t");
    bd0c:	2009      	movs	r0, #9
    bd0e:	47a0      	blx	r4
			printf("\r\n\n");
    bd10:	481d      	ldr	r0, [pc, #116]	; (bd88 <display_connection_table+0xf8>)
    bd12:	4b19      	ldr	r3, [pc, #100]	; (bd78 <display_connection_table+0xe8>)
    bd14:	4798      	blx	r3
		for(uint8_t i =0; i <= conn_size-1; i++ )
    bd16:	464b      	mov	r3, r9
    bd18:	3301      	adds	r3, #1
    bd1a:	b2db      	uxtb	r3, r3
    bd1c:	4699      	mov	r9, r3
    bd1e:	001f      	movs	r7, r3
    bd20:	4b0e      	ldr	r3, [pc, #56]	; (bd5c <display_connection_table+0xcc>)
    bd22:	781b      	ldrb	r3, [r3, #0]
    bd24:	3b01      	subs	r3, #1
    bd26:	4599      	cmp	r9, r3
    bd28:	dc13      	bgt.n	bd52 <display_connection_table+0xc2>
			printf("%02x",i+1);
    bd2a:	1c79      	adds	r1, r7, #1
    bd2c:	480f      	ldr	r0, [pc, #60]	; (bd6c <display_connection_table+0xdc>)
    bd2e:	47d8      	blx	fp
			printf("\t");
    bd30:	2009      	movs	r0, #9
    bd32:	47d0      	blx	sl
    bd34:	013d      	lsls	r5, r7, #4
    bd36:	002c      	movs	r4, r5
    bd38:	340b      	adds	r4, #11
    bd3a:	4b11      	ldr	r3, [pc, #68]	; (bd80 <display_connection_table+0xf0>)
    bd3c:	18e4      	adds	r4, r4, r3
    bd3e:	3503      	adds	r5, #3
    bd40:	18ed      	adds	r5, r5, r3
					printf("%02x",ConnectionTable[i].Address[MY_ADDRESS_LENGTH-1-j] );
    bd42:	4e08      	ldr	r6, [pc, #32]	; (bd64 <display_connection_table+0xd4>)
    bd44:	7821      	ldrb	r1, [r4, #0]
    bd46:	4809      	ldr	r0, [pc, #36]	; (bd6c <display_connection_table+0xdc>)
    bd48:	47b0      	blx	r6
    bd4a:	3c01      	subs	r4, #1
			for(uint8_t j = 0; j < 8; j++)
    bd4c:	42ac      	cmp	r4, r5
    bd4e:	d1f9      	bne.n	bd44 <display_connection_table+0xb4>
    bd50:	e7cc      	b.n	bcec <display_connection_table+0x5c>
		printf("------------------------------------------------\n\r");
    bd52:	480e      	ldr	r0, [pc, #56]	; (bd8c <display_connection_table+0xfc>)
    bd54:	4b03      	ldr	r3, [pc, #12]	; (bd64 <display_connection_table+0xd4>)
    bd56:	4798      	blx	r3
}
    bd58:	e7a3      	b.n	bca2 <display_connection_table+0x12>
    bd5a:	46c0      	nop			; (mov r8, r8)
    bd5c:	20003059 	.word	0x20003059
    bd60:	0001a068 	.word	0x0001a068
    bd64:	00017e25 	.word	0x00017e25
    bd68:	20000020 	.word	0x20000020
    bd6c:	0001975c 	.word	0x0001975c
    bd70:	0001a1a4 	.word	0x0001a1a4
    bd74:	0001a228 	.word	0x0001a228
    bd78:	00017f41 	.word	0x00017f41
    bd7c:	00017e59 	.word	0x00017e59
    bd80:	20002eec 	.word	0x20002eec
    bd84:	000193fc 	.word	0x000193fc
    bd88:	0001982c 	.word	0x0001982c
    bd8c:	0001a1f4 	.word	0x0001a1f4

0000bd90 <AddConnection>:
    {
    bd90:	b5f0      	push	{r4, r5, r6, r7, lr}
    bd92:	46d6      	mov	lr, sl
    bd94:	4647      	mov	r7, r8
    bd96:	b580      	push	{r7, lr}
    bd98:	b083      	sub	sp, #12
                if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    bd9a:	4b3a      	ldr	r3, [pc, #232]	; (be84 <AddConnection+0xf4>)
    bd9c:	685b      	ldr	r3, [r3, #4]
    bd9e:	9301      	str	r3, [sp, #4]
    bda0:	4d39      	ldr	r5, [pc, #228]	; (be88 <AddConnection+0xf8>)
    bda2:	2400      	movs	r4, #0
        uint8_t connectionSlot = 0xFF;
    bda4:	26ff      	movs	r6, #255	; 0xff
            if( ConnectionTable[i].status.bits.isValid )
    bda6:	4b39      	ldr	r3, [pc, #228]	; (be8c <AddConnection+0xfc>)
    bda8:	4698      	mov	r8, r3
                if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    bdaa:	4b39      	ldr	r3, [pc, #228]	; (be90 <AddConnection+0x100>)
    bdac:	469a      	mov	sl, r3
    bdae:	e005      	b.n	bdbc <AddConnection+0x2c>
            else if( connectionSlot == 0xFF )
    bdb0:	2eff      	cmp	r6, #255	; 0xff
    bdb2:	d011      	beq.n	bdd8 <AddConnection+0x48>
    bdb4:	3401      	adds	r4, #1
    bdb6:	3510      	adds	r5, #16
        for(i = 0; i < CONNECTION_SIZE; i++)
    bdb8:	2c14      	cmp	r4, #20
    bdba:	d00f      	beq.n	bddc <AddConnection+0x4c>
    bdbc:	b2e7      	uxtb	r7, r4
            if( ConnectionTable[i].status.bits.isValid )
    bdbe:	0123      	lsls	r3, r4, #4
    bdc0:	4443      	add	r3, r8
    bdc2:	7b1b      	ldrb	r3, [r3, #12]
    bdc4:	09db      	lsrs	r3, r3, #7
    bdc6:	d0f3      	beq.n	bdb0 <AddConnection+0x20>
                if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    bdc8:	0029      	movs	r1, r5
    bdca:	9801      	ldr	r0, [sp, #4]
    bdcc:	47d0      	blx	sl
    bdce:	2800      	cmp	r0, #0
    bdd0:	d0f0      	beq.n	bdb4 <AddConnection+0x24>
    bdd2:	003e      	movs	r6, r7
                    status = STATUS_EXISTS;
    bdd4:	2401      	movs	r4, #1
    bdd6:	e002      	b.n	bdde <AddConnection+0x4e>
            else if( connectionSlot == 0xFF )
    bdd8:	003e      	movs	r6, r7
    bdda:	e7eb      	b.n	bdb4 <AddConnection+0x24>
        uint8_t status = STATUS_SUCCESS;
    bddc:	2400      	movs	r4, #0
        if( connectionSlot == 0xFF )
    bdde:	2eff      	cmp	r6, #255	; 0xff
    bde0:	d049      	beq.n	be76 <AddConnection+0xe6>
            if( ConnMode >= ENABLE_PREV_CONN )
    bde2:	4b2c      	ldr	r3, [pc, #176]	; (be94 <AddConnection+0x104>)
    bde4:	781b      	ldrb	r3, [r3, #0]
    bde6:	2b00      	cmp	r3, #0
    bde8:	d146      	bne.n	be78 <AddConnection+0xe8>
            MyindexinPC = connectionSlot; 
    bdea:	4b2b      	ldr	r3, [pc, #172]	; (be98 <AddConnection+0x108>)
    bdec:	701e      	strb	r6, [r3, #0]
    bdee:	9d01      	ldr	r5, [sp, #4]
    bdf0:	002b      	movs	r3, r5
    bdf2:	0132      	lsls	r2, r6, #4
    bdf4:	3204      	adds	r2, #4
    bdf6:	4925      	ldr	r1, [pc, #148]	; (be8c <AddConnection+0xfc>)
    bdf8:	1852      	adds	r2, r2, r1
    bdfa:	3508      	adds	r5, #8
				ConnectionTable[connectionSlot].Address[i] = rxMessage.SourceAddress[i];
    bdfc:	0030      	movs	r0, r6
    bdfe:	7819      	ldrb	r1, [r3, #0]
    be00:	7011      	strb	r1, [r2, #0]
    be02:	3301      	adds	r3, #1
    be04:	3201      	adds	r2, #1
			for(i = 0; i < 8; i++)
    be06:	429d      	cmp	r5, r3
    be08:	d1f9      	bne.n	bdfe <AddConnection+0x6e>
			ConnectionTable[connectionSlot].status.bits.isValid = 1;
    be0a:	0102      	lsls	r2, r0, #4
    be0c:	4b1f      	ldr	r3, [pc, #124]	; (be8c <AddConnection+0xfc>)
    be0e:	189b      	adds	r3, r3, r2
    be10:	7b19      	ldrb	r1, [r3, #12]
    be12:	2280      	movs	r2, #128	; 0x80
    be14:	4252      	negs	r2, r2
    be16:	430a      	orrs	r2, r1
    be18:	731a      	strb	r2, [r3, #12]
			if(rxMessage.Payload[2] & 0x01)
    be1a:	4b1a      	ldr	r3, [pc, #104]	; (be84 <AddConnection+0xf4>)
    be1c:	689a      	ldr	r2, [r3, #8]
    be1e:	7893      	ldrb	r3, [r2, #2]
    be20:	07db      	lsls	r3, r3, #31
    be22:	d520      	bpl.n	be66 <AddConnection+0xd6>
					ConnectionTable[connectionSlot].status.bits.RXOnWhenIdle = 1;
    be24:	0101      	lsls	r1, r0, #4
    be26:	4b19      	ldr	r3, [pc, #100]	; (be8c <AddConnection+0xfc>)
    be28:	185b      	adds	r3, r3, r1
    be2a:	7b19      	ldrb	r1, [r3, #12]
    be2c:	2501      	movs	r5, #1
    be2e:	4329      	orrs	r1, r5
    be30:	7319      	strb	r1, [r3, #12]
                    ConnectionTable[connectionSlot].PeerInfo[i] = rxMessage.Payload[3+i];
    be32:	78d2      	ldrb	r2, [r2, #3]
    be34:	0101      	lsls	r1, r0, #4
    be36:	4b15      	ldr	r3, [pc, #84]	; (be8c <AddConnection+0xfc>)
    be38:	185b      	adds	r3, r3, r1
    be3a:	735a      	strb	r2, [r3, #13]
                IncomingFrameCounter[connectionSlot].Val = 0;
    be3c:	0080      	lsls	r0, r0, #2
    be3e:	2200      	movs	r2, #0
    be40:	4b16      	ldr	r3, [pc, #88]	; (be9c <AddConnection+0x10c>)
    be42:	50c2      	str	r2, [r0, r3]
            LatestConnection = connectionSlot;
    be44:	4b16      	ldr	r3, [pc, #88]	; (bea0 <AddConnection+0x110>)
    be46:	701e      	strb	r6, [r3, #0]
            P2PStatus.bits.SearchConnection = 0;   
    be48:	4a16      	ldr	r2, [pc, #88]	; (bea4 <AddConnection+0x114>)
    be4a:	7813      	ldrb	r3, [r2, #0]
    be4c:	2110      	movs	r1, #16
    be4e:	438b      	bics	r3, r1
    be50:	7013      	strb	r3, [r2, #0]
        conn_size = Total_Connections();
    be52:	4b15      	ldr	r3, [pc, #84]	; (bea8 <AddConnection+0x118>)
    be54:	4798      	blx	r3
    be56:	4b15      	ldr	r3, [pc, #84]	; (beac <AddConnection+0x11c>)
    be58:	7018      	strb	r0, [r3, #0]
		    display_connection_table();
    be5a:	4b15      	ldr	r3, [pc, #84]	; (beb0 <AddConnection+0x120>)
    be5c:	4798      	blx	r3
		PDS_Store(PDS_EDC_ID);
    be5e:	2006      	movs	r0, #6
    be60:	4b14      	ldr	r3, [pc, #80]	; (beb4 <AddConnection+0x124>)
    be62:	4798      	blx	r3
        return status;
    be64:	e008      	b.n	be78 <AddConnection+0xe8>
					ConnectionTable[connectionSlot].status.bits.RXOnWhenIdle = 0;
    be66:	0101      	lsls	r1, r0, #4
    be68:	4b08      	ldr	r3, [pc, #32]	; (be8c <AddConnection+0xfc>)
    be6a:	185b      	adds	r3, r3, r1
    be6c:	7b19      	ldrb	r1, [r3, #12]
    be6e:	2501      	movs	r5, #1
    be70:	43a9      	bics	r1, r5
    be72:	7319      	strb	r1, [r3, #12]
    be74:	e7dd      	b.n	be32 <AddConnection+0xa2>
            return STATUS_NOT_ENOUGH_SPACE;
    be76:	24f1      	movs	r4, #241	; 0xf1
    }
    be78:	0020      	movs	r0, r4
    be7a:	b003      	add	sp, #12
    be7c:	bc0c      	pop	{r2, r3}
    be7e:	4690      	mov	r8, r2
    be80:	469a      	mov	sl, r3
    be82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    be84:	20003354 	.word	0x20003354
    be88:	20002ef0 	.word	0x20002ef0
    be8c:	20002eec 	.word	0x20002eec
    be90:	0000b7a9 	.word	0x0000b7a9
    be94:	2000001c 	.word	0x2000001c
    be98:	200030ac 	.word	0x200030ac
    be9c:	2000305c 	.word	0x2000305c
    bea0:	20002ee8 	.word	0x20002ee8
    bea4:	200030b0 	.word	0x200030b0
    bea8:	0000b1a5 	.word	0x0000b1a5
    beac:	20003059 	.word	0x20003059
    beb0:	0000bc91 	.word	0x0000bc91
    beb4:	000098a5 	.word	0x000098a5

0000beb8 <MiApp_RemoveConnection>:
    {   
    beb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    beba:	46ce      	mov	lr, r9
    bebc:	4647      	mov	r7, r8
    bebe:	b580      	push	{r7, lr}
    bec0:	b087      	sub	sp, #28
    bec2:	0004      	movs	r4, r0
        if( ConnectionIndex == 0xFF )
    bec4:	28ff      	cmp	r0, #255	; 0xff
    bec6:	d00e      	beq.n	bee6 <MiApp_RemoveConnection+0x2e>
        else if( ConnectionTable[ConnectionIndex].status.bits.isValid )
    bec8:	0102      	lsls	r2, r0, #4
    beca:	4b34      	ldr	r3, [pc, #208]	; (bf9c <MiApp_RemoveConnection+0xe4>)
    becc:	189b      	adds	r3, r3, r2
    bece:	7b1b      	ldrb	r3, [r3, #12]
    bed0:	09db      	lsrs	r3, r3, #7
    bed2:	d13a      	bne.n	bf4a <MiApp_RemoveConnection+0x92>
		conn_size = Total_Connections();
    bed4:	4b32      	ldr	r3, [pc, #200]	; (bfa0 <MiApp_RemoveConnection+0xe8>)
    bed6:	4798      	blx	r3
    bed8:	4b32      	ldr	r3, [pc, #200]	; (bfa4 <MiApp_RemoveConnection+0xec>)
    beda:	7018      	strb	r0, [r3, #0]
    }
    bedc:	b007      	add	sp, #28
    bede:	bc0c      	pop	{r2, r3}
    bee0:	4690      	mov	r8, r2
    bee2:	4699      	mov	r9, r3
    bee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bee6:	4d30      	ldr	r5, [pc, #192]	; (bfa8 <MiApp_RemoveConnection+0xf0>)
        if( ConnectionIndex == 0xFF )
    bee8:	2400      	movs	r4, #0
                if( ConnectionTable[i].status.bits.isValid )
    beea:	4e2c      	ldr	r6, [pc, #176]	; (bf9c <MiApp_RemoveConnection+0xe4>)
                    dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_P2P_CONNECTION_REMOVAL_REQUEST));
    beec:	4b2f      	ldr	r3, [pc, #188]	; (bfac <MiApp_RemoveConnection+0xf4>)
    beee:	4698      	mov	r8, r3
                        SendPacket(false, myPANID, ConnectionTable[i].Address, true, false, dataLen, dataPtr,0, true, CommandConfCallback);
    bef0:	4b2f      	ldr	r3, [pc, #188]	; (bfb0 <MiApp_RemoveConnection+0xf8>)
    bef2:	4699      	mov	r9, r3
    bef4:	e008      	b.n	bf08 <MiApp_RemoveConnection+0x50>
                ConnectionTable[i].status.Val = 0;
    bef6:	2300      	movs	r3, #0
    bef8:	722b      	strb	r3, [r5, #8]
					PDS_Store(PDS_CONNECTION_TABLE_ID);
    befa:	2005      	movs	r0, #5
    befc:	4b2d      	ldr	r3, [pc, #180]	; (bfb4 <MiApp_RemoveConnection+0xfc>)
    befe:	4798      	blx	r3
    bf00:	3401      	adds	r4, #1
    bf02:	3510      	adds	r5, #16
            for(i = 0; i < CONNECTION_SIZE; i++)
    bf04:	2c14      	cmp	r4, #20
    bf06:	d0e5      	beq.n	bed4 <MiApp_RemoveConnection+0x1c>
                if( ConnectionTable[i].status.bits.isValid )
    bf08:	0123      	lsls	r3, r4, #4
    bf0a:	18f3      	adds	r3, r6, r3
    bf0c:	7b1b      	ldrb	r3, [r3, #12]
    bf0e:	09db      	lsrs	r3, r3, #7
    bf10:	d0f1      	beq.n	bef6 <MiApp_RemoveConnection+0x3e>
                    dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_P2P_CONNECTION_REMOVAL_REQUEST));
    bf12:	2010      	movs	r0, #16
    bf14:	47c0      	blx	r8
                    if (NULL == dataPtr)
    bf16:	2800      	cmp	r0, #0
    bf18:	d0e0      	beq.n	bedc <MiApp_RemoveConnection+0x24>
                    dataPtr[dataLen++] = CMD_P2P_CONNECTION_REMOVAL_REQUEST;
    bf1a:	2382      	movs	r3, #130	; 0x82
    bf1c:	7003      	strb	r3, [r0, #0]
                        SendPacket(false, myPANID, ConnectionTable[i].Address, true, false, dataLen, dataPtr,0, true, CommandConfCallback);
    bf1e:	464b      	mov	r3, r9
    bf20:	8819      	ldrh	r1, [r3, #0]
    bf22:	4b25      	ldr	r3, [pc, #148]	; (bfb8 <MiApp_RemoveConnection+0x100>)
    bf24:	9305      	str	r3, [sp, #20]
    bf26:	2201      	movs	r2, #1
    bf28:	9204      	str	r2, [sp, #16]
    bf2a:	2300      	movs	r3, #0
    bf2c:	9303      	str	r3, [sp, #12]
    bf2e:	9002      	str	r0, [sp, #8]
    bf30:	9201      	str	r2, [sp, #4]
    bf32:	9300      	str	r3, [sp, #0]
    bf34:	3301      	adds	r3, #1
    bf36:	002a      	movs	r2, r5
    bf38:	2000      	movs	r0, #0
    bf3a:	4f20      	ldr	r7, [pc, #128]	; (bfbc <MiApp_RemoveConnection+0x104>)
    bf3c:	47b8      	blx	r7
    bf3e:	4b20      	ldr	r3, [pc, #128]	; (bfc0 <MiApp_RemoveConnection+0x108>)
    bf40:	3b01      	subs	r3, #1
    bf42:	b29b      	uxth	r3, r3
                    for(j = 0; j < 0xFFF; j++) {}   // delay
    bf44:	2b00      	cmp	r3, #0
    bf46:	d1fb      	bne.n	bf40 <MiApp_RemoveConnection+0x88>
    bf48:	e7d5      	b.n	bef6 <MiApp_RemoveConnection+0x3e>
            dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_P2P_CONNECTION_REMOVAL_REQUEST));
    bf4a:	2010      	movs	r0, #16
    bf4c:	4b17      	ldr	r3, [pc, #92]	; (bfac <MiApp_RemoveConnection+0xf4>)
    bf4e:	4798      	blx	r3
            if (NULL == dataPtr)
    bf50:	2800      	cmp	r0, #0
    bf52:	d0c3      	beq.n	bedc <MiApp_RemoveConnection+0x24>
            dataPtr[dataLen++] = CMD_P2P_CONNECTION_REMOVAL_REQUEST;
    bf54:	2382      	movs	r3, #130	; 0x82
    bf56:	7003      	strb	r3, [r0, #0]
                SendPacket(false, myPANID, ConnectionTable[ConnectionIndex].Address, true, false, 
    bf58:	0122      	lsls	r2, r4, #4
    bf5a:	3204      	adds	r2, #4
    bf5c:	4b0f      	ldr	r3, [pc, #60]	; (bf9c <MiApp_RemoveConnection+0xe4>)
    bf5e:	18d2      	adds	r2, r2, r3
    bf60:	4b13      	ldr	r3, [pc, #76]	; (bfb0 <MiApp_RemoveConnection+0xf8>)
    bf62:	8819      	ldrh	r1, [r3, #0]
    bf64:	4b14      	ldr	r3, [pc, #80]	; (bfb8 <MiApp_RemoveConnection+0x100>)
    bf66:	9305      	str	r3, [sp, #20]
    bf68:	2501      	movs	r5, #1
    bf6a:	9504      	str	r5, [sp, #16]
    bf6c:	2300      	movs	r3, #0
    bf6e:	9303      	str	r3, [sp, #12]
    bf70:	9002      	str	r0, [sp, #8]
    bf72:	9501      	str	r5, [sp, #4]
    bf74:	9300      	str	r3, [sp, #0]
    bf76:	3301      	adds	r3, #1
    bf78:	2000      	movs	r0, #0
    bf7a:	4d10      	ldr	r5, [pc, #64]	; (bfbc <MiApp_RemoveConnection+0x104>)
    bf7c:	47a8      	blx	r5
    bf7e:	4b10      	ldr	r3, [pc, #64]	; (bfc0 <MiApp_RemoveConnection+0x108>)
    bf80:	3b01      	subs	r3, #1
    bf82:	b29b      	uxth	r3, r3
            for(j = 0; j < 0xFFF; j++) {}   // delay
    bf84:	2b00      	cmp	r3, #0
    bf86:	d1fb      	bne.n	bf80 <MiApp_RemoveConnection+0xc8>
            ConnectionTable[ConnectionIndex].status.Val = 0; 
    bf88:	0124      	lsls	r4, r4, #4
    bf8a:	4b04      	ldr	r3, [pc, #16]	; (bf9c <MiApp_RemoveConnection+0xe4>)
    bf8c:	191c      	adds	r4, r3, r4
    bf8e:	2300      	movs	r3, #0
    bf90:	7323      	strb	r3, [r4, #12]
				PDS_Store(PDS_CONNECTION_TABLE_ID);
    bf92:	2005      	movs	r0, #5
    bf94:	4b07      	ldr	r3, [pc, #28]	; (bfb4 <MiApp_RemoveConnection+0xfc>)
    bf96:	4798      	blx	r3
    bf98:	e79c      	b.n	bed4 <MiApp_RemoveConnection+0x1c>
    bf9a:	46c0      	nop			; (mov r8, r8)
    bf9c:	20002eec 	.word	0x20002eec
    bfa0:	0000b1a5 	.word	0x0000b1a5
    bfa4:	20003059 	.word	0x20003059
    bfa8:	20002ef0 	.word	0x20002ef0
    bfac:	0000d1b5 	.word	0x0000d1b5
    bfb0:	20003050 	.word	0x20003050
    bfb4:	000098a5 	.word	0x000098a5
    bfb8:	0000b10d 	.word	0x0000b10d
    bfbc:	0000b311 	.word	0x0000b311
    bfc0:	00000fff 	.word	0x00000fff

0000bfc4 <MiApp_ConnectionMode>:
{
    bfc4:	b510      	push	{r4, lr}
    if( Mode > 3 )
    bfc6:	2803      	cmp	r0, #3
    bfc8:	d900      	bls.n	bfcc <MiApp_ConnectionMode+0x8>
}
    bfca:	bd10      	pop	{r4, pc}
    ConnMode = Mode;
    bfcc:	4b06      	ldr	r3, [pc, #24]	; (bfe8 <MiApp_ConnectionMode+0x24>)
    bfce:	7018      	strb	r0, [r3, #0]
    P2PCapacityInfo = (P2PCapacityInfo & 0x0F) | (ConnMode << 4);
    bfd0:	4a06      	ldr	r2, [pc, #24]	; (bfec <MiApp_ConnectionMode+0x28>)
    bfd2:	7811      	ldrb	r1, [r2, #0]
    bfd4:	230f      	movs	r3, #15
    bfd6:	400b      	ands	r3, r1
    bfd8:	0100      	lsls	r0, r0, #4
    bfda:	4318      	orrs	r0, r3
    bfdc:	7010      	strb	r0, [r2, #0]
		PDS_Store(PDS_CONNECTION_MODE_ID);
    bfde:	2004      	movs	r0, #4
    bfe0:	4b03      	ldr	r3, [pc, #12]	; (bff0 <MiApp_ConnectionMode+0x2c>)
    bfe2:	4798      	blx	r3
    bfe4:	e7f1      	b.n	bfca <MiApp_ConnectionMode+0x6>
    bfe6:	46c0      	nop			; (mov r8, r8)
    bfe8:	2000001c 	.word	0x2000001c
    bfec:	20003045 	.word	0x20003045
    bff0:	000098a5 	.word	0x000098a5

0000bff4 <MiApp_SubscribeDataIndicationCallback>:
    if (NULL != callback)
    bff4:	2800      	cmp	r0, #0
    bff6:	d003      	beq.n	c000 <MiApp_SubscribeDataIndicationCallback+0xc>
        pktRxcallback = callback;
    bff8:	4b02      	ldr	r3, [pc, #8]	; (c004 <MiApp_SubscribeDataIndicationCallback+0x10>)
    bffa:	6018      	str	r0, [r3, #0]
        return true;
    bffc:	2001      	movs	r0, #1
}
    bffe:	4770      	bx	lr
    return false;
    c000:	2000      	movs	r0, #0
    c002:	e7fc      	b.n	bffe <MiApp_SubscribeDataIndicationCallback+0xa>
    c004:	200004b0 	.word	0x200004b0

0000c008 <calculate_ToA>:
{
    c008:	b5f0      	push	{r4, r5, r6, r7, lr}
    c00a:	46ce      	mov	lr, r9
    c00c:	4647      	mov	r7, r8
    c00e:	b580      	push	{r7, lr}
    c010:	b087      	sub	sp, #28
    c012:	4680      	mov	r8, r0
	    uint8_t spreadFactor = 0;
    c014:	ab04      	add	r3, sp, #16
    c016:	1dde      	adds	r6, r3, #7
    c018:	2300      	movs	r3, #0
    c01a:	7033      	strb	r3, [r6, #0]
	    uint8_t codingRate = 0;
    c01c:	aa04      	add	r2, sp, #16
    c01e:	1d97      	adds	r7, r2, #6
    c020:	7193      	strb	r3, [r2, #6]
	    uint16_t programmedPreambleLength = 0;
    c022:	ad05      	add	r5, sp, #20
    c024:	802b      	strh	r3, [r5, #0]
	    bool crcEnable = 0; //CRC
    c026:	3303      	adds	r3, #3
    c028:	4694      	mov	ip, r2
    c02a:	4463      	add	r3, ip
    c02c:	4699      	mov	r9, r3
    c02e:	2300      	movs	r3, #0
    c030:	464a      	mov	r2, r9
    c032:	7013      	strb	r3, [r2, #0]
	    RADIO_GetAttr(SPREADING_FACTOR,(void *)&spreadFactor);
    c034:	0031      	movs	r1, r6
    c036:	2016      	movs	r0, #22
    c038:	4c39      	ldr	r4, [pc, #228]	; (c120 <calculate_ToA+0x118>)
    c03a:	47a0      	blx	r4
	    RADIO_GetAttr(PREAMBLE_LEN,(void *)&programmedPreambleLength);
    c03c:	0029      	movs	r1, r5
    c03e:	2003      	movs	r0, #3
    c040:	47a0      	blx	r4
	    RADIO_GetAttr(CRC_ON,(void *)&crcEnable);
    c042:	4649      	mov	r1, r9
    c044:	2014      	movs	r0, #20
    c046:	47a0      	blx	r4
	    RADIO_GetAttr(ERROR_CODING_RATE,(void *)&codingRate);
    c048:	0039      	movs	r1, r7
    c04a:	200b      	movs	r0, #11
    c04c:	47a0      	blx	r4
	    symbolRate = (bandWidth * 1000) /  ((float)(1 << spreadFactor));
    c04e:	7836      	ldrb	r6, [r6, #0]
    c050:	2001      	movs	r0, #1
    c052:	40b0      	lsls	r0, r6
    c054:	4b33      	ldr	r3, [pc, #204]	; (c124 <calculate_ToA+0x11c>)
    c056:	4798      	blx	r3
    c058:	1c01      	adds	r1, r0, #0
    c05a:	4c33      	ldr	r4, [pc, #204]	; (c128 <calculate_ToA+0x120>)
    c05c:	4833      	ldr	r0, [pc, #204]	; (c12c <calculate_ToA+0x124>)
    c05e:	47a0      	blx	r4
    c060:	1c01      	adds	r1, r0, #0
	    symbolTime = 1000 / (symbolRate);
    c062:	4833      	ldr	r0, [pc, #204]	; (c130 <calculate_ToA+0x128>)
    c064:	47a0      	blx	r4
    c066:	1c04      	adds	r4, r0, #0
	    preambleDuration = (programmedPreambleLength + 4.25) * symbolTime;
    c068:	8828      	ldrh	r0, [r5, #0]
    c06a:	4b32      	ldr	r3, [pc, #200]	; (c134 <calculate_ToA+0x12c>)
    c06c:	4798      	blx	r3
    c06e:	2200      	movs	r2, #0
    c070:	4b31      	ldr	r3, [pc, #196]	; (c138 <calculate_ToA+0x130>)
    c072:	4d32      	ldr	r5, [pc, #200]	; (c13c <calculate_ToA+0x134>)
    c074:	47a8      	blx	r5
    c076:	9000      	str	r0, [sp, #0]
    c078:	9101      	str	r1, [sp, #4]
    c07a:	1c20      	adds	r0, r4, #0
    c07c:	4b30      	ldr	r3, [pc, #192]	; (c140 <calculate_ToA+0x138>)
    c07e:	4798      	blx	r3
    c080:	0002      	movs	r2, r0
    c082:	000b      	movs	r3, r1
    c084:	9800      	ldr	r0, [sp, #0]
    c086:	9901      	ldr	r1, [sp, #4]
    c088:	4d2e      	ldr	r5, [pc, #184]	; (c144 <calculate_ToA+0x13c>)
    c08a:	47a8      	blx	r5
    c08c:	4b2e      	ldr	r3, [pc, #184]	; (c148 <calculate_ToA+0x140>)
    c08e:	4798      	blx	r3
    c090:	9000      	str	r0, [sp, #0]
	    if ( ((spreadFactor == 12) && ((bandWidth == 125) || (bandWidth == 250))) || ((spreadFactor == 11) && (bandWidth == 125)))
    c092:	2e0c      	cmp	r6, #12
    c094:	d040      	beq.n	c118 <calculate_ToA+0x110>
    c096:	0033      	movs	r3, r6
    c098:	3b0b      	subs	r3, #11
    c09a:	425a      	negs	r2, r3
    c09c:	4153      	adcs	r3, r2
    c09e:	b2db      	uxtb	r3, r3
	    ceilValueDenominator= (4 * (spreadFactor - 2 * ldro));
    c0a0:	005b      	lsls	r3, r3, #1
    c0a2:	1af3      	subs	r3, r6, r3
    c0a4:	009b      	lsls	r3, r3, #2
	    ceilValue = (ceilValueNumerator + ceilValueDenominator - 1.0) / ceilValueDenominator;
    c0a6:	b2df      	uxtb	r7, r3
	    ceilValueNumerator = (8 * payload_length - 4 * spreadFactor + 28 + 16 * crcEnable - 20 * implicitHeaderMode);
    c0a8:	4643      	mov	r3, r8
    c0aa:	0058      	lsls	r0, r3, #1
    c0ac:	1b80      	subs	r0, r0, r6
    c0ae:	3007      	adds	r0, #7
    c0b0:	ab04      	add	r3, sp, #16
    c0b2:	3303      	adds	r3, #3
    c0b4:	781b      	ldrb	r3, [r3, #0]
    c0b6:	009b      	lsls	r3, r3, #2
    c0b8:	18c0      	adds	r0, r0, r3
    c0ba:	0080      	lsls	r0, r0, #2
	    ceilValue = (ceilValueNumerator + ceilValueDenominator - 1.0) / ceilValueDenominator;
    c0bc:	b280      	uxth	r0, r0
    c0be:	19c0      	adds	r0, r0, r7
    c0c0:	4d1c      	ldr	r5, [pc, #112]	; (c134 <calculate_ToA+0x12c>)
    c0c2:	47a8      	blx	r5
    c0c4:	2200      	movs	r2, #0
    c0c6:	4b21      	ldr	r3, [pc, #132]	; (c14c <calculate_ToA+0x144>)
    c0c8:	4e21      	ldr	r6, [pc, #132]	; (c150 <calculate_ToA+0x148>)
    c0ca:	47b0      	blx	r6
    c0cc:	9002      	str	r0, [sp, #8]
    c0ce:	9103      	str	r1, [sp, #12]
    c0d0:	0038      	movs	r0, r7
    c0d2:	47a8      	blx	r5
    c0d4:	0002      	movs	r2, r0
    c0d6:	000b      	movs	r3, r1
    c0d8:	9802      	ldr	r0, [sp, #8]
    c0da:	9903      	ldr	r1, [sp, #12]
    c0dc:	4e1d      	ldr	r6, [pc, #116]	; (c154 <calculate_ToA+0x14c>)
    c0de:	47b0      	blx	r6
    c0e0:	4b1d      	ldr	r3, [pc, #116]	; (c158 <calculate_ToA+0x150>)
    c0e2:	4798      	blx	r3
	    if ((ceilValue * (codingRate + 4)) > 0)
    c0e4:	b282      	uxth	r2, r0
    c0e6:	ab04      	add	r3, sp, #16
    c0e8:	7998      	ldrb	r0, [r3, #6]
    c0ea:	3004      	adds	r0, #4
    c0ec:	4350      	muls	r0, r2
    c0ee:	2800      	cmp	r0, #0
    c0f0:	dd14      	ble.n	c11c <calculate_ToA+0x114>
		    maxCeilValue = ceilValue * (codingRate + 4);
    c0f2:	4b0c      	ldr	r3, [pc, #48]	; (c124 <calculate_ToA+0x11c>)
    c0f4:	4798      	blx	r3
	    numberOfPayloadSymbols = 8 + maxCeilValue;
    c0f6:	4e19      	ldr	r6, [pc, #100]	; (c15c <calculate_ToA+0x154>)
    c0f8:	2182      	movs	r1, #130	; 0x82
    c0fa:	05c9      	lsls	r1, r1, #23
    c0fc:	47b0      	blx	r6
	    payloadDuration = numberOfPayloadSymbols * symbolTime;
    c0fe:	1c21      	adds	r1, r4, #0
    c100:	4b17      	ldr	r3, [pc, #92]	; (c160 <calculate_ToA+0x158>)
    c102:	4798      	blx	r3
	    totalTimeOnAir = preambleDuration + payloadDuration;
    c104:	9900      	ldr	r1, [sp, #0]
    c106:	47b0      	blx	r6
		return ((uint16_t)totalTimeOnAir) ;
    c108:	4b16      	ldr	r3, [pc, #88]	; (c164 <calculate_ToA+0x15c>)
    c10a:	4798      	blx	r3
    c10c:	b280      	uxth	r0, r0
}
    c10e:	b007      	add	sp, #28
    c110:	bc0c      	pop	{r2, r3}
    c112:	4690      	mov	r8, r2
    c114:	4699      	mov	r9, r3
    c116:	bdf0      	pop	{r4, r5, r6, r7, pc}
		    ldro =  true;
    c118:	2301      	movs	r3, #1
    c11a:	e7c1      	b.n	c0a0 <calculate_ToA+0x98>
		    maxCeilValue = 0;
    c11c:	2000      	movs	r0, #0
    c11e:	e7ea      	b.n	c0f6 <calculate_ToA+0xee>
    c120:	0000f2e9 	.word	0x0000f2e9
    c124:	00015961 	.word	0x00015961
    c128:	00014fc9 	.word	0x00014fc9
    c12c:	47f42400 	.word	0x47f42400
    c130:	447a0000 	.word	0x447a0000
    c134:	000174a9 	.word	0x000174a9
    c138:	40110000 	.word	0x40110000
    c13c:	00015a8d 	.word	0x00015a8d
    c140:	0001759d 	.word	0x0001759d
    c144:	00016915 	.word	0x00016915
    c148:	00017641 	.word	0x00017641
    c14c:	3ff00000 	.word	0x3ff00000
    c150:	00016e15 	.word	0x00016e15
    c154:	000160ad 	.word	0x000160ad
    c158:	00014aa9 	.word	0x00014aa9
    c15c:	00014ca5 	.word	0x00014ca5
    c160:	000153a9 	.word	0x000153a9
    c164:	00014a79 	.word	0x00014a79

0000c168 <MiApp_SubscribeLinkFailureCallback>:
	if (NULL != callback)
    c168:	2800      	cmp	r0, #0
    c16a:	d003      	beq.n	c174 <MiApp_SubscribeLinkFailureCallback+0xc>
		linkFailureCallback = callback;
    c16c:	4b02      	ldr	r3, [pc, #8]	; (c178 <MiApp_SubscribeLinkFailureCallback+0x10>)
    c16e:	6018      	str	r0, [r3, #0]
		return true;
    c170:	2001      	movs	r0, #1
}
    c172:	4770      	bx	lr
	return false;
    c174:	2000      	movs	r0, #0
    c176:	e7fc      	b.n	c172 <MiApp_SubscribeLinkFailureCallback+0xa>
    c178:	20003350 	.word	0x20003350

0000c17c <startCompleteProcedure>:
{
    c17c:	b510      	push	{r4, lr}
    if (false == timeronly)
    c17e:	2800      	cmp	r0, #0
    c180:	d00b      	beq.n	c19a <startCompleteProcedure+0x1e>
		inActiveDeviceCheckTimerSet = true;
    c182:	2201      	movs	r2, #1
    c184:	4b11      	ldr	r3, [pc, #68]	; (c1cc <startCompleteProcedure+0x50>)
    c186:	701a      	strb	r2, [r3, #0]
		inActiveDeviceCheckTimerTick.Val = MiWi_TickGet();
    c188:	4b11      	ldr	r3, [pc, #68]	; (c1d0 <startCompleteProcedure+0x54>)
    c18a:	4798      	blx	r3
    c18c:	4b11      	ldr	r3, [pc, #68]	; (c1d4 <startCompleteProcedure+0x58>)
    c18e:	6018      	str	r0, [r3, #0]
		if(!sheerPeerDevInfoTimerSet)
    c190:	4b11      	ldr	r3, [pc, #68]	; (c1d8 <startCompleteProcedure+0x5c>)
    c192:	781b      	ldrb	r3, [r3, #0]
    c194:	2b00      	cmp	r3, #0
    c196:	d010      	beq.n	c1ba <startCompleteProcedure+0x3e>
}
    c198:	bd10      	pop	{r4, pc}
        role = PAN_COORD;
    c19a:	2201      	movs	r2, #1
    c19c:	4b0f      	ldr	r3, [pc, #60]	; (c1dc <startCompleteProcedure+0x60>)
    c19e:	701a      	strb	r2, [r3, #0]
		 PDS_Store(PDS_ROLE_ID);
    c1a0:	3007      	adds	r0, #7
    c1a2:	4b0f      	ldr	r3, [pc, #60]	; (c1e0 <startCompleteProcedure+0x64>)
    c1a4:	4798      	blx	r3
		P2PStatus.bits.SaveConnection = 1;
    c1a6:	4a0f      	ldr	r2, [pc, #60]	; (c1e4 <startCompleteProcedure+0x68>)
    c1a8:	7813      	ldrb	r3, [r2, #0]
    c1aa:	2102      	movs	r1, #2
    c1ac:	430b      	orrs	r3, r1
    c1ae:	7013      	strb	r3, [r2, #0]
        nvmDelayTick.Val = MiWi_TickGet();
    c1b0:	4b07      	ldr	r3, [pc, #28]	; (c1d0 <startCompleteProcedure+0x54>)
    c1b2:	4798      	blx	r3
    c1b4:	4b0c      	ldr	r3, [pc, #48]	; (c1e8 <startCompleteProcedure+0x6c>)
    c1b6:	6018      	str	r0, [r3, #0]
    c1b8:	e7e3      	b.n	c182 <startCompleteProcedure+0x6>
			sheerPeerDevInfoTimerSet = true;
    c1ba:	2201      	movs	r2, #1
    c1bc:	4b06      	ldr	r3, [pc, #24]	; (c1d8 <startCompleteProcedure+0x5c>)
    c1be:	701a      	strb	r2, [r3, #0]
			sharePeerDevInfoTimerTick.Val = MiWi_TickGet();
    c1c0:	4b03      	ldr	r3, [pc, #12]	; (c1d0 <startCompleteProcedure+0x54>)
    c1c2:	4798      	blx	r3
    c1c4:	4b09      	ldr	r3, [pc, #36]	; (c1ec <startCompleteProcedure+0x70>)
    c1c6:	6018      	str	r0, [r3, #0]
}
    c1c8:	e7e6      	b.n	c198 <startCompleteProcedure+0x1c>
    c1ca:	46c0      	nop			; (mov r8, r8)
    c1cc:	200004aa 	.word	0x200004aa
    c1d0:	0000d3f5 	.word	0x0000d3f5
    c1d4:	2000304c 	.word	0x2000304c
    c1d8:	200004b4 	.word	0x200004b4
    c1dc:	20003344 	.word	0x20003344
    c1e0:	000098a5 	.word	0x000098a5
    c1e4:	200030b0 	.word	0x200030b0
    c1e8:	20003048 	.word	0x20003048
    c1ec:	20003368 	.word	0x20003368

0000c1f0 <MiApp_StartConnection>:
    {
    c1f0:	b530      	push	{r4, r5, lr}
    c1f2:	b083      	sub	sp, #12
    c1f4:	0014      	movs	r4, r2
    c1f6:	001d      	movs	r5, r3
        switch(Mode)
    c1f8:	2801      	cmp	r0, #1
    c1fa:	d035      	beq.n	c268 <MiApp_StartConnection+0x78>
    c1fc:	2800      	cmp	r0, #0
    c1fe:	d005      	beq.n	c20c <MiApp_StartConnection+0x1c>
    c200:	2802      	cmp	r0, #2
    c202:	d035      	beq.n	c270 <MiApp_StartConnection+0x80>
        ConfCallback(FAILURE);
    c204:	2001      	movs	r0, #1
    c206:	4798      	blx	r3
        return false;
    c208:	2000      	movs	r0, #0
    c20a:	e02b      	b.n	c264 <MiApp_StartConnection+0x74>
                uint8_t channel = 0;
    c20c:	2200      	movs	r2, #0
    c20e:	466b      	mov	r3, sp
    c210:	715a      	strb	r2, [r3, #5]
                        myPANID.Val = MY_PAN_ID;
    c212:	4919      	ldr	r1, [pc, #100]	; (c278 <MiApp_StartConnection+0x88>)
    c214:	4b19      	ldr	r3, [pc, #100]	; (c27c <MiApp_StartConnection+0x8c>)
    c216:	800b      	strh	r3, [r1, #0]
                        uint16_t tmp = 0xFFFF;
    c218:	466b      	mov	r3, sp
    c21a:	1d98      	adds	r0, r3, #6
    c21c:	2301      	movs	r3, #1
    c21e:	425b      	negs	r3, r3
    c220:	8003      	strh	r3, [r0, #0]
                        MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
    c222:	4b17      	ldr	r3, [pc, #92]	; (c280 <MiApp_StartConnection+0x90>)
    c224:	4798      	blx	r3
				while (!(index & ChannelMap))
    c226:	07e3      	lsls	r3, r4, #31
    c228:	d40a      	bmi.n	c240 <MiApp_StartConnection+0x50>
    c22a:	466b      	mov	r3, sp
    c22c:	3305      	adds	r3, #5
    c22e:	781b      	ldrb	r3, [r3, #0]
    c230:	2201      	movs	r2, #1
				index = index << 1;
    c232:	0052      	lsls	r2, r2, #1
				++channel;
    c234:	3301      	adds	r3, #1
    c236:	b2db      	uxtb	r3, r3
				while (!(index & ChannelMap))
    c238:	4222      	tst	r2, r4
    c23a:	d0fa      	beq.n	c232 <MiApp_StartConnection+0x42>
    c23c:	466a      	mov	r2, sp
    c23e:	7153      	strb	r3, [r2, #5]
				MiApp_Set(CHANNEL, &channel);
    c240:	466b      	mov	r3, sp
    c242:	1d59      	adds	r1, r3, #5
    c244:	2000      	movs	r0, #0
    c246:	4b0f      	ldr	r3, [pc, #60]	; (c284 <MiApp_StartConnection+0x94>)
    c248:	4798      	blx	r3
					startCompleteProcedure(false);
    c24a:	2000      	movs	r0, #0
    c24c:	4b0e      	ldr	r3, [pc, #56]	; (c288 <MiApp_StartConnection+0x98>)
    c24e:	4798      	blx	r3
                tick1.Val = MiWi_TickGet();
    c250:	4c0e      	ldr	r4, [pc, #56]	; (c28c <MiApp_StartConnection+0x9c>)
    c252:	47a0      	blx	r4
    c254:	4b0e      	ldr	r3, [pc, #56]	; (c290 <MiApp_StartConnection+0xa0>)
    c256:	6018      	str	r0, [r3, #0]
                tick4.Val = MiWi_TickGet();
    c258:	47a0      	blx	r4
    c25a:	4b0e      	ldr	r3, [pc, #56]	; (c294 <MiApp_StartConnection+0xa4>)
    c25c:	6018      	str	r0, [r3, #0]
				ConfCallback(SUCCESS);
    c25e:	2000      	movs	r0, #0
    c260:	47a8      	blx	r5
                return true;
    c262:	2001      	movs	r0, #1
    }
    c264:	b003      	add	sp, #12
    c266:	bd30      	pop	{r4, r5, pc}
                    ConfCallback(FAILURE);
    c268:	2001      	movs	r0, #1
    c26a:	4798      	blx	r3
                    return false;
    c26c:	2000      	movs	r0, #0
    c26e:	e7f9      	b.n	c264 <MiApp_StartConnection+0x74>
                ConfCallback(FAILURE);
    c270:	2001      	movs	r0, #1
    c272:	4798      	blx	r3
                return false;
    c274:	2000      	movs	r0, #0
    c276:	e7f5      	b.n	c264 <MiApp_StartConnection+0x74>
    c278:	20003050 	.word	0x20003050
    c27c:	00001234 	.word	0x00001234
    c280:	00009b95 	.word	0x00009b95
    c284:	0000b971 	.word	0x0000b971
    c288:	0000c17d 	.word	0x0000c17d
    c28c:	0000d3f5 	.word	0x0000d3f5
    c290:	20003348 	.word	0x20003348
    c294:	2000302c 	.word	0x2000302c

0000c298 <startLinkStatusTimer>:
{
    c298:	b510      	push	{r4, lr}
	linkStatusTimerTick.Val = MiWi_TickGet();
    c29a:	4b04      	ldr	r3, [pc, #16]	; (c2ac <startLinkStatusTimer+0x14>)
    c29c:	4798      	blx	r3
    c29e:	4b04      	ldr	r3, [pc, #16]	; (c2b0 <startLinkStatusTimer+0x18>)
    c2a0:	6018      	str	r0, [r3, #0]
	linkStatusTimerSet = true;
    c2a2:	2201      	movs	r2, #1
    c2a4:	4b03      	ldr	r3, [pc, #12]	; (c2b4 <startLinkStatusTimer+0x1c>)
    c2a6:	701a      	strb	r2, [r3, #0]
}
    c2a8:	bd10      	pop	{r4, pc}
    c2aa:	46c0      	nop			; (mov r8, r8)
    c2ac:	0000d3f5 	.word	0x0000d3f5
    c2b0:	2000334c 	.word	0x2000334c
    c2b4:	200004ac 	.word	0x200004ac

0000c2b8 <P2PTasks>:
{
    c2b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    c2ba:	46d6      	mov	lr, sl
    c2bc:	464f      	mov	r7, r9
    c2be:	4646      	mov	r6, r8
    c2c0:	b5c0      	push	{r6, r7, lr}
    c2c2:	b08a      	sub	sp, #40	; 0x28
    MiMAC_Task();
    c2c4:	4bd0      	ldr	r3, [pc, #832]	; (c608 <P2PTasks+0x350>)
    c2c6:	4798      	blx	r3
            if( indirectMessages[i].flags.bits.isValid )
    c2c8:	4bd0      	ldr	r3, [pc, #832]	; (c60c <P2PTasks+0x354>)
    c2ca:	7e9b      	ldrb	r3, [r3, #26]
    c2cc:	07db      	lsls	r3, r3, #31
    c2ce:	d455      	bmi.n	c37c <P2PTasks+0xc4>
    c2d0:	239d      	movs	r3, #157	; 0x9d
    c2d2:	005b      	lsls	r3, r3, #1
    c2d4:	4acd      	ldr	r2, [pc, #820]	; (c60c <P2PTasks+0x354>)
    c2d6:	5cd3      	ldrb	r3, [r2, r3]
    c2d8:	07db      	lsls	r3, r3, #31
    c2da:	d466      	bmi.n	c3aa <P2PTasks+0xf2>
	 if(LinkStatus)
    c2dc:	4bcc      	ldr	r3, [pc, #816]	; (c610 <P2PTasks+0x358>)
    c2de:	781b      	ldrb	r3, [r3, #0]
    c2e0:	2b00      	cmp	r3, #0
    c2e2:	d000      	beq.n	c2e6 <P2PTasks+0x2e>
    c2e4:	e07c      	b.n	c3e0 <P2PTasks+0x128>
        if( P2PStatus.bits.SaveConnection )
    c2e6:	4bcb      	ldr	r3, [pc, #812]	; (c614 <P2PTasks+0x35c>)
    c2e8:	781b      	ldrb	r3, [r3, #0]
    c2ea:	079b      	lsls	r3, r3, #30
    c2ec:	d500      	bpl.n	c2f0 <P2PTasks+0x38>
    c2ee:	e091      	b.n	c414 <P2PTasks+0x15c>
	ack_timeout_variable = calculate_ToA(PACKETLEN_ACK);
    c2f0:	2016      	movs	r0, #22
    c2f2:	4bc9      	ldr	r3, [pc, #804]	; (c618 <P2PTasks+0x360>)
    c2f4:	4798      	blx	r3
	ack_timeout_variable = (ack_timeout_variable + TOTAL_ACK_PROCESSING_DELAY) * 1000;
    c2f6:	23fa      	movs	r3, #250	; 0xfa
    c2f8:	009b      	lsls	r3, r3, #2
    c2fa:	4358      	muls	r0, r3
    c2fc:	4bc7      	ldr	r3, [pc, #796]	; (c61c <P2PTasks+0x364>)
    c2fe:	469c      	mov	ip, r3
    c300:	4460      	add	r0, ip
    c302:	4bc7      	ldr	r3, [pc, #796]	; (c620 <P2PTasks+0x368>)
    c304:	6018      	str	r0, [r3, #0]
	if((AckReqData) && (DataTxAckTimer.Val)) // AckReqData
    c306:	4bc7      	ldr	r3, [pc, #796]	; (c624 <P2PTasks+0x36c>)
    c308:	781b      	ldrb	r3, [r3, #0]
    c30a:	2b00      	cmp	r3, #0
    c30c:	d004      	beq.n	c318 <P2PTasks+0x60>
    c30e:	4bc6      	ldr	r3, [pc, #792]	; (c628 <P2PTasks+0x370>)
    c310:	681b      	ldr	r3, [r3, #0]
    c312:	2b00      	cmp	r3, #0
    c314:	d000      	beq.n	c318 <P2PTasks+0x60>
    c316:	e095      	b.n	c444 <P2PTasks+0x18c>
	sw_timeout_variable = calculate_ToA(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_CMD_DATA_TO_ENDDEV_SUCCESS));
    c318:	2010      	movs	r0, #16
    c31a:	4bbf      	ldr	r3, [pc, #764]	; (c618 <P2PTasks+0x360>)
    c31c:	4798      	blx	r3
	sw_timeout_variable = (sw_timeout_variable + FORWARD_PACKET_PROCESSING_DELAY)*1000;
    c31e:	23fa      	movs	r3, #250	; 0xfa
    c320:	009b      	lsls	r3, r3, #2
    c322:	4358      	muls	r0, r3
    c324:	4bc1      	ldr	r3, [pc, #772]	; (c62c <P2PTasks+0x374>)
    c326:	469c      	mov	ip, r3
    c328:	4460      	add	r0, ip
    c32a:	4bc1      	ldr	r3, [pc, #772]	; (c630 <P2PTasks+0x378>)
    c32c:	6018      	str	r0, [r3, #0]
    if( P2PStatus.bits.RxHasUserData == 0 && MiMAC_ReceivedPacket())
    c32e:	4bb9      	ldr	r3, [pc, #740]	; (c614 <P2PTasks+0x35c>)
    c330:	781b      	ldrb	r3, [r3, #0]
    c332:	071b      	lsls	r3, r3, #28
    c334:	d400      	bmi.n	c338 <P2PTasks+0x80>
    c336:	e09d      	b.n	c474 <P2PTasks+0x1bc>
		if((sheerPeerDevInfoTimerSet) && (role == PAN_COORD) && !checkRxDataBuffer())
    c338:	4bbe      	ldr	r3, [pc, #760]	; (c634 <P2PTasks+0x37c>)
    c33a:	781b      	ldrb	r3, [r3, #0]
    c33c:	2b00      	cmp	r3, #0
    c33e:	d101      	bne.n	c344 <P2PTasks+0x8c>
    c340:	f000 fd88 	bl	ce54 <P2PTasks+0xb9c>
    c344:	4bbc      	ldr	r3, [pc, #752]	; (c638 <P2PTasks+0x380>)
    c346:	781b      	ldrb	r3, [r3, #0]
    c348:	2b01      	cmp	r3, #1
    c34a:	d101      	bne.n	c350 <P2PTasks+0x98>
    c34c:	f000 fd76 	bl	ce3c <P2PTasks+0xb84>
		if((linkStatusTimerSet))
    c350:	4bba      	ldr	r3, [pc, #744]	; (c63c <P2PTasks+0x384>)
    c352:	781b      	ldrb	r3, [r3, #0]
    c354:	2b00      	cmp	r3, #0
    c356:	d009      	beq.n	c36c <P2PTasks+0xb4>
			if((!AckReqData && !SwAckReq && !checkRxDataBuffer() && !SendData))
    c358:	4bb2      	ldr	r3, [pc, #712]	; (c624 <P2PTasks+0x36c>)
    c35a:	781b      	ldrb	r3, [r3, #0]
    c35c:	2b00      	cmp	r3, #0
    c35e:	d105      	bne.n	c36c <P2PTasks+0xb4>
    c360:	4bb7      	ldr	r3, [pc, #732]	; (c640 <P2PTasks+0x388>)
    c362:	781b      	ldrb	r3, [r3, #0]
    c364:	2b00      	cmp	r3, #0
    c366:	d101      	bne.n	c36c <P2PTasks+0xb4>
    c368:	f000 fdcd 	bl	cf06 <P2PTasks+0xc4e>
    PDS_TaskHandler();
    c36c:	4bb5      	ldr	r3, [pc, #724]	; (c644 <P2PTasks+0x38c>)
    c36e:	4798      	blx	r3
}
    c370:	b00a      	add	sp, #40	; 0x28
    c372:	bc1c      	pop	{r2, r3, r4}
    c374:	4690      	mov	r8, r2
    c376:	4699      	mov	r9, r3
    c378:	46a2      	mov	sl, r4
    c37a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                tmpTick.Val = MiWi_TickGet();
    c37c:	4bb2      	ldr	r3, [pc, #712]	; (c648 <P2PTasks+0x390>)
    c37e:	4798      	blx	r3
                if( MiWi_TickGetDiff(tmpTick, indirectMessages[i].TickStart) > INDIRECT_MESSAGE_TIMEOUT )
    c380:	4ba2      	ldr	r3, [pc, #648]	; (c60c <P2PTasks+0x354>)
    c382:	6819      	ldr	r1, [r3, #0]
    c384:	4bb1      	ldr	r3, [pc, #708]	; (c64c <P2PTasks+0x394>)
    c386:	4798      	blx	r3
    c388:	4bb1      	ldr	r3, [pc, #708]	; (c650 <P2PTasks+0x398>)
    c38a:	4298      	cmp	r0, r3
    c38c:	d9a0      	bls.n	c2d0 <P2PTasks+0x18>
                    indirectMessages[i].flags.Val = 0x00;   
    c38e:	4b9f      	ldr	r3, [pc, #636]	; (c60c <P2PTasks+0x354>)
    c390:	2200      	movs	r2, #0
    c392:	769a      	strb	r2, [r3, #26]
                    indirectMessages[i].indirectConfCallback(indirectMessages[i].indirectDataHandle, TRANSACTION_EXPIRED, indirectMessages[i].PayLoad);
    c394:	001a      	movs	r2, r3
    c396:	321c      	adds	r2, #28
    c398:	211c      	movs	r1, #28
    c39a:	31ff      	adds	r1, #255	; 0xff
    c39c:	5c58      	ldrb	r0, [r3, r1]
    c39e:	3101      	adds	r1, #1
    c3a0:	585b      	ldr	r3, [r3, r1]
    c3a2:	3918      	subs	r1, #24
    c3a4:	39ff      	subs	r1, #255	; 0xff
    c3a6:	4798      	blx	r3
    c3a8:	e792      	b.n	c2d0 <P2PTasks+0x18>
                tmpTick.Val = MiWi_TickGet();
    c3aa:	4ba7      	ldr	r3, [pc, #668]	; (c648 <P2PTasks+0x390>)
    c3ac:	4798      	blx	r3
                if( MiWi_TickGetDiff(tmpTick, indirectMessages[i].TickStart) > INDIRECT_MESSAGE_TIMEOUT )
    c3ae:	2390      	movs	r3, #144	; 0x90
    c3b0:	005b      	lsls	r3, r3, #1
    c3b2:	4a96      	ldr	r2, [pc, #600]	; (c60c <P2PTasks+0x354>)
    c3b4:	58d1      	ldr	r1, [r2, r3]
    c3b6:	4ba5      	ldr	r3, [pc, #660]	; (c64c <P2PTasks+0x394>)
    c3b8:	4798      	blx	r3
    c3ba:	4ba5      	ldr	r3, [pc, #660]	; (c650 <P2PTasks+0x398>)
    c3bc:	4298      	cmp	r0, r3
    c3be:	d800      	bhi.n	c3c2 <P2PTasks+0x10a>
    c3c0:	e78c      	b.n	c2dc <P2PTasks+0x24>
                    indirectMessages[i].flags.Val = 0x00;   
    c3c2:	4b92      	ldr	r3, [pc, #584]	; (c60c <P2PTasks+0x354>)
    c3c4:	2100      	movs	r1, #0
    c3c6:	229d      	movs	r2, #157	; 0x9d
    c3c8:	0052      	lsls	r2, r2, #1
    c3ca:	5499      	strb	r1, [r3, r2]
                    indirectMessages[i].indirectConfCallback(indirectMessages[i].indirectDataHandle, TRANSACTION_EXPIRED, indirectMessages[i].PayLoad);
    c3cc:	001a      	movs	r2, r3
    c3ce:	323d      	adds	r2, #61	; 0x3d
    c3d0:	32ff      	adds	r2, #255	; 0xff
    c3d2:	49a0      	ldr	r1, [pc, #640]	; (c654 <P2PTasks+0x39c>)
    c3d4:	5c58      	ldrb	r0, [r3, r1]
    c3d6:	3101      	adds	r1, #1
    c3d8:	585b      	ldr	r3, [r3, r1]
    c3da:	2105      	movs	r1, #5
    c3dc:	4798      	blx	r3
    c3de:	e77d      	b.n	c2dc <P2PTasks+0x24>
		 tmpTick.Val = MiWi_TickGet();
    c3e0:	4b99      	ldr	r3, [pc, #612]	; (c648 <P2PTasks+0x390>)
    c3e2:	4798      	blx	r3
		 if( MiWi_TickGetDiff(tmpTick, linkStatusTimerTick) > 2.5*(ONE_SECOND) )
    c3e4:	4b9c      	ldr	r3, [pc, #624]	; (c658 <P2PTasks+0x3a0>)
    c3e6:	6819      	ldr	r1, [r3, #0]
    c3e8:	4b98      	ldr	r3, [pc, #608]	; (c64c <P2PTasks+0x394>)
    c3ea:	4798      	blx	r3
    c3ec:	4b9b      	ldr	r3, [pc, #620]	; (c65c <P2PTasks+0x3a4>)
    c3ee:	4798      	blx	r3
    c3f0:	2200      	movs	r2, #0
    c3f2:	4b9b      	ldr	r3, [pc, #620]	; (c660 <P2PTasks+0x3a8>)
    c3f4:	4c9b      	ldr	r4, [pc, #620]	; (c664 <P2PTasks+0x3ac>)
    c3f6:	47a0      	blx	r4
    c3f8:	2800      	cmp	r0, #0
    c3fa:	d100      	bne.n	c3fe <P2PTasks+0x146>
    c3fc:	e773      	b.n	c2e6 <P2PTasks+0x2e>
			 PHY_DataConf(FAILURE);
    c3fe:	2001      	movs	r0, #1
    c400:	4b99      	ldr	r3, [pc, #612]	; (c668 <P2PTasks+0x3b0>)
    c402:	4798      	blx	r3
			 linkStatusTimerTick.Val = MiWi_TickGet();
    c404:	4b90      	ldr	r3, [pc, #576]	; (c648 <P2PTasks+0x390>)
    c406:	4798      	blx	r3
    c408:	4b93      	ldr	r3, [pc, #588]	; (c658 <P2PTasks+0x3a0>)
    c40a:	6018      	str	r0, [r3, #0]
			 LinkStatus = false;
    c40c:	2200      	movs	r2, #0
    c40e:	4b80      	ldr	r3, [pc, #512]	; (c610 <P2PTasks+0x358>)
    c410:	701a      	strb	r2, [r3, #0]
    c412:	e768      	b.n	c2e6 <P2PTasks+0x2e>
            tmpTick.Val = MiWi_TickGet();
    c414:	4b8c      	ldr	r3, [pc, #560]	; (c648 <P2PTasks+0x390>)
    c416:	4798      	blx	r3
            if( MiWi_TickGetDiff(tmpTick, nvmDelayTick) > (ONE_SECOND) )
    c418:	4b94      	ldr	r3, [pc, #592]	; (c66c <P2PTasks+0x3b4>)
    c41a:	6819      	ldr	r1, [r3, #0]
    c41c:	4b8b      	ldr	r3, [pc, #556]	; (c64c <P2PTasks+0x394>)
    c41e:	4798      	blx	r3
    c420:	4b93      	ldr	r3, [pc, #588]	; (c670 <P2PTasks+0x3b8>)
    c422:	4298      	cmp	r0, r3
    c424:	d800      	bhi.n	c428 <P2PTasks+0x170>
    c426:	e763      	b.n	c2f0 <P2PTasks+0x38>
                P2PStatus.bits.SaveConnection = 0;
    c428:	4a7a      	ldr	r2, [pc, #488]	; (c614 <P2PTasks+0x35c>)
    c42a:	7813      	ldrb	r3, [r2, #0]
    c42c:	2102      	movs	r1, #2
    c42e:	438b      	bics	r3, r1
    c430:	7013      	strb	r3, [r2, #0]
				PDS_Store(PDS_CONNECTION_TABLE_ID);
    c432:	2005      	movs	r0, #5
    c434:	4c8f      	ldr	r4, [pc, #572]	; (c674 <P2PTasks+0x3bc>)
    c436:	47a0      	blx	r4
			    PDS_Store(MIWI_ALL_MEMORY_MEM_ID);
    c438:	488f      	ldr	r0, [pc, #572]	; (c678 <P2PTasks+0x3c0>)
    c43a:	47a0      	blx	r4
                printf("\r\nSave Connection\r\n");
    c43c:	488f      	ldr	r0, [pc, #572]	; (c67c <P2PTasks+0x3c4>)
    c43e:	4b90      	ldr	r3, [pc, #576]	; (c680 <P2PTasks+0x3c8>)
    c440:	4798      	blx	r3
    c442:	e755      	b.n	c2f0 <P2PTasks+0x38>
		tmpTick.Val = MiWi_TickGet();
    c444:	4b80      	ldr	r3, [pc, #512]	; (c648 <P2PTasks+0x390>)
    c446:	4798      	blx	r3
		if( MiWi_TickGetDiff(tmpTick, DataTxAckTimer) > ((ack_timeout_variable) * ACK_TIMEOUT_INTERVAL))
    c448:	4b77      	ldr	r3, [pc, #476]	; (c628 <P2PTasks+0x370>)
    c44a:	6819      	ldr	r1, [r3, #0]
    c44c:	4b7f      	ldr	r3, [pc, #508]	; (c64c <P2PTasks+0x394>)
    c44e:	4798      	blx	r3
    c450:	4b73      	ldr	r3, [pc, #460]	; (c620 <P2PTasks+0x368>)
    c452:	681a      	ldr	r2, [r3, #0]
    c454:	0053      	lsls	r3, r2, #1
    c456:	189b      	adds	r3, r3, r2
    c458:	4298      	cmp	r0, r3
    c45a:	d800      	bhi.n	c45e <P2PTasks+0x1a6>
    c45c:	e75c      	b.n	c318 <P2PTasks+0x60>
			DataTxAckTimer.Val =0;
    c45e:	2300      	movs	r3, #0
    c460:	4a71      	ldr	r2, [pc, #452]	; (c628 <P2PTasks+0x370>)
    c462:	6013      	str	r3, [r2, #0]
			AckReqData = 0;
    c464:	4a6f      	ldr	r2, [pc, #444]	; (c624 <P2PTasks+0x36c>)
    c466:	7013      	strb	r3, [r2, #0]
			MiMAC_RetryPacket();
    c468:	4b86      	ldr	r3, [pc, #536]	; (c684 <P2PTasks+0x3cc>)
    c46a:	4798      	blx	r3
			printf("\r\n Ack Timeout\r\n");
    c46c:	4886      	ldr	r0, [pc, #536]	; (c688 <P2PTasks+0x3d0>)
    c46e:	4b84      	ldr	r3, [pc, #528]	; (c680 <P2PTasks+0x3c8>)
    c470:	4798      	blx	r3
    c472:	e751      	b.n	c318 <P2PTasks+0x60>
    if( P2PStatus.bits.RxHasUserData == 0 && MiMAC_ReceivedPacket())
    c474:	4b85      	ldr	r3, [pc, #532]	; (c68c <P2PTasks+0x3d4>)
    c476:	4798      	blx	r3
    c478:	2800      	cmp	r0, #0
    c47a:	d100      	bne.n	c47e <P2PTasks+0x1c6>
    c47c:	e75c      	b.n	c338 <P2PTasks+0x80>
            temp_bit = MACRxPacket.flags.bits.broadcast;
    c47e:	4b84      	ldr	r3, [pc, #528]	; (c690 <P2PTasks+0x3d8>)
    c480:	7819      	ldrb	r1, [r3, #0]
    c482:	074b      	lsls	r3, r1, #29
    c484:	0fdb      	lsrs	r3, r3, #31
    c486:	4a83      	ldr	r2, [pc, #524]	; (c694 <P2PTasks+0x3dc>)
    c488:	7013      	strb	r3, [r2, #0]
            rxMessage.flags.bits.broadcast = temp_bit;
    c48a:	2203      	movs	r2, #3
        rxMessage.flags.bits.secEn = MACRxPacket.flags.bits.secEn;
    c48c:	08cd      	lsrs	r5, r1, #3
    c48e:	2401      	movs	r4, #1
    c490:	4025      	ands	r5, r4
    c492:	00ed      	lsls	r5, r5, #3
    c494:	4013      	ands	r3, r2
        rxMessage.flags.bits.command = (MACRxPacket.flags.bits.packetType == PACKET_TYPE_COMMAND) ? 1:0;
    c496:	400a      	ands	r2, r1
    c498:	3a01      	subs	r2, #1
    c49a:	4256      	negs	r6, r2
    c49c:	4172      	adcs	r2, r6
    c49e:	4022      	ands	r2, r4
    c4a0:	0152      	lsls	r2, r2, #5
    c4a2:	432b      	orrs	r3, r5
        rxMessage.flags.bits.srcPrsnt = MACRxPacket.flags.bits.sourcePrsnt;
    c4a4:	09cd      	lsrs	r5, r1, #7
    c4a6:	402c      	ands	r4, r5
    c4a8:	01a4      	lsls	r4, r4, #6
    c4aa:	4313      	orrs	r3, r2
    c4ac:	4323      	orrs	r3, r4
    c4ae:	4a7a      	ldr	r2, [pc, #488]	; (c698 <P2PTasks+0x3e0>)
    c4b0:	7013      	strb	r3, [r2, #0]
        if( MACRxPacket.flags.bits.sourcePrsnt )
    c4b2:	b249      	sxtb	r1, r1
    c4b4:	2900      	cmp	r1, #0
    c4b6:	db36      	blt.n	c526 <P2PTasks+0x26e>
            rxMessage.SourcePANID.Val = MACRxPacket.SourcePANID.Val;
    c4b8:	4a75      	ldr	r2, [pc, #468]	; (c690 <P2PTasks+0x3d8>)
    c4ba:	8a14      	ldrh	r4, [r2, #16]
    c4bc:	4b76      	ldr	r3, [pc, #472]	; (c698 <P2PTasks+0x3e0>)
    c4be:	805c      	strh	r4, [r3, #2]
        rxMessage.PayloadSize = MACRxPacket.PayloadLen;
    c4c0:	7b15      	ldrb	r5, [r2, #12]
    c4c2:	731d      	strb	r5, [r3, #12]
        rxMessage.Payload = MACRxPacket.Payload;
    c4c4:	6891      	ldr	r1, [r2, #8]
    c4c6:	6099      	str	r1, [r3, #8]
            rxMessage.PacketLQI = MACRxPacket.LQIValue;
    c4c8:	7b96      	ldrb	r6, [r2, #14]
    c4ca:	739e      	strb	r6, [r3, #14]
            rxMessage.PacketRSSI = MACRxPacket.RSSIValue;
    c4cc:	7b52      	ldrb	r2, [r2, #13]
    c4ce:	735a      	strb	r2, [r3, #13]
        if( rxMessage.flags.bits.command )
    c4d0:	781b      	ldrb	r3, [r3, #0]
    c4d2:	069b      	lsls	r3, r3, #26
    c4d4:	d401      	bmi.n	c4da <P2PTasks+0x222>
    c4d6:	f000 fc55 	bl	cd84 <P2PTasks+0xacc>
            switch( rxMessage.Payload[0] )
    c4da:	780b      	ldrb	r3, [r1, #0]
    c4dc:	b2da      	uxtb	r2, r3
    c4de:	2a83      	cmp	r2, #131	; 0x83
    c4e0:	d100      	bne.n	c4e4 <P2PTasks+0x22c>
    c4e2:	e3d1      	b.n	cc88 <P2PTasks+0x9d0>
    c4e4:	d924      	bls.n	c530 <P2PTasks+0x278>
    c4e6:	b2da      	uxtb	r2, r3
    c4e8:	2a92      	cmp	r2, #146	; 0x92
    c4ea:	d100      	bne.n	c4ee <P2PTasks+0x236>
    c4ec:	e3a6      	b.n	cc3c <P2PTasks+0x984>
    c4ee:	d94a      	bls.n	c586 <P2PTasks+0x2ce>
    c4f0:	b2da      	uxtb	r2, r3
    c4f2:	2acc      	cmp	r2, #204	; 0xcc
    c4f4:	d100      	bne.n	c4f8 <P2PTasks+0x240>
    c4f6:	e2d3      	b.n	caa0 <P2PTasks+0x7e8>
    c4f8:	2ada      	cmp	r2, #218	; 0xda
    c4fa:	d100      	bne.n	c4fe <P2PTasks+0x246>
    c4fc:	e270      	b.n	c9e0 <P2PTasks+0x728>
    c4fe:	2a97      	cmp	r2, #151	; 0x97
    c500:	d100      	bne.n	c504 <P2PTasks+0x24c>
    c502:	e20f      	b.n	c924 <P2PTasks+0x66c>
                    P2PStatus.bits.RxHasUserData = 1;
    c504:	4c43      	ldr	r4, [pc, #268]	; (c614 <P2PTasks+0x35c>)
    c506:	7823      	ldrb	r3, [r4, #0]
    c508:	2208      	movs	r2, #8
    c50a:	4313      	orrs	r3, r2
    c50c:	7023      	strb	r3, [r4, #0]
					pktRxcallback(&rxMessage);
    c50e:	4b63      	ldr	r3, [pc, #396]	; (c69c <P2PTasks+0x3e4>)
    c510:	681b      	ldr	r3, [r3, #0]
    c512:	4861      	ldr	r0, [pc, #388]	; (c698 <P2PTasks+0x3e0>)
    c514:	4798      	blx	r3
					P2PStatus.bits.RxHasUserData = 0;
    c516:	7823      	ldrb	r3, [r4, #0]
    c518:	2208      	movs	r2, #8
    c51a:	4393      	bics	r3, r2
    c51c:	7023      	strb	r3, [r4, #0]
					MiMAC_DiscardPacket();
    c51e:	4b60      	ldr	r3, [pc, #384]	; (c6a0 <P2PTasks+0x3e8>)
    c520:	4798      	blx	r3
                    break;
    c522:	f000 fc3e 	bl	cda2 <P2PTasks+0xaea>
            rxMessage.SourceAddress = MACRxPacket.SourceAddress;
    c526:	4b5a      	ldr	r3, [pc, #360]	; (c690 <P2PTasks+0x3d8>)
    c528:	685a      	ldr	r2, [r3, #4]
    c52a:	4b5b      	ldr	r3, [pc, #364]	; (c698 <P2PTasks+0x3e0>)
    c52c:	605a      	str	r2, [r3, #4]
    c52e:	e7c3      	b.n	c4b8 <P2PTasks+0x200>
            switch( rxMessage.Payload[0] )
    c530:	2b7a      	cmp	r3, #122	; 0x7a
    c532:	d100      	bne.n	c536 <P2PTasks+0x27e>
    c534:	e35f      	b.n	cbf6 <P2PTasks+0x93e>
    c536:	2a7a      	cmp	r2, #122	; 0x7a
    c538:	d917      	bls.n	c56a <P2PTasks+0x2b2>
    c53a:	b2da      	uxtb	r2, r3
    c53c:	2a81      	cmp	r2, #129	; 0x81
    c53e:	d05c      	beq.n	c5fa <P2PTasks+0x342>
    c540:	2a82      	cmp	r2, #130	; 0x82
    c542:	d1df      	bne.n	c504 <P2PTasks+0x24c>
                            dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_P2P_CONNECTION_REMOVAL_RESPONSE));
    c544:	2010      	movs	r0, #16
    c546:	4b57      	ldr	r3, [pc, #348]	; (c6a4 <P2PTasks+0x3ec>)
    c548:	4798      	blx	r3
    c54a:	4680      	mov	r8, r0
                            if (NULL == dataPtr)
    c54c:	2800      	cmp	r0, #0
    c54e:	d100      	bne.n	c552 <P2PTasks+0x29a>
    c550:	e70e      	b.n	c370 <P2PTasks+0xb8>
                            dataPtr[dataLen++] = CMD_P2P_CONNECTION_REMOVAL_RESPONSE;
    c552:	2392      	movs	r3, #146	; 0x92
    c554:	7003      	strb	r3, [r0, #0]
                                    if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    c556:	4b50      	ldr	r3, [pc, #320]	; (c698 <P2PTasks+0x3e0>)
    c558:	685b      	ldr	r3, [r3, #4]
    c55a:	9307      	str	r3, [sp, #28]
    c55c:	4e52      	ldr	r6, [pc, #328]	; (c6a8 <P2PTasks+0x3f0>)
    c55e:	2500      	movs	r5, #0
                            for(i = 0; i < CONNECTION_SIZE; i++)
    c560:	2400      	movs	r4, #0
                                if( ConnectionTable[i].status.bits.isValid )
    c562:	4f52      	ldr	r7, [pc, #328]	; (c6ac <P2PTasks+0x3f4>)
                                    if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    c564:	4b52      	ldr	r3, [pc, #328]	; (c6b0 <P2PTasks+0x3f8>)
    c566:	4699      	mov	r9, r3
    c568:	e18e      	b.n	c888 <P2PTasks+0x5d0>
            switch( rxMessage.Payload[0] )
    c56a:	2b04      	cmp	r3, #4
    c56c:	d100      	bne.n	c570 <P2PTasks+0x2b8>
    c56e:	e38b      	b.n	cc88 <P2PTasks+0x9d0>
    c570:	2b77      	cmp	r3, #119	; 0x77
    c572:	d1c7      	bne.n	c504 <P2PTasks+0x24c>
					if (END_DEVICE == role)
    c574:	4b30      	ldr	r3, [pc, #192]	; (c638 <P2PTasks+0x380>)
    c576:	781b      	ldrb	r3, [r3, #0]
    c578:	2b02      	cmp	r3, #2
    c57a:	d100      	bne.n	c57e <P2PTasks+0x2c6>
    c57c:	e1de      	b.n	c93c <P2PTasks+0x684>
					MiMAC_DiscardPacket();
    c57e:	4b48      	ldr	r3, [pc, #288]	; (c6a0 <P2PTasks+0x3e8>)
    c580:	4798      	blx	r3
				break;
    c582:	f000 fc0e 	bl	cda2 <P2PTasks+0xaea>
            switch( rxMessage.Payload[0] )
    c586:	2a87      	cmp	r2, #135	; 0x87
    c588:	d100      	bne.n	c58c <P2PTasks+0x2d4>
    c58a:	e135      	b.n	c7f8 <P2PTasks+0x540>
    c58c:	2a91      	cmp	r2, #145	; 0x91
    c58e:	d1b9      	bne.n	c504 <P2PTasks+0x24c>
                            switch( rxMessage.Payload[1] )
    c590:	784b      	ldrb	r3, [r1, #1]
    c592:	2b00      	cmp	r3, #0
    c594:	d100      	bne.n	c598 <P2PTasks+0x2e0>
    c596:	e1a9      	b.n	c8ec <P2PTasks+0x634>
    c598:	2b01      	cmp	r3, #1
    c59a:	d12b      	bne.n	c5f4 <P2PTasks+0x33c>
                                    if (EstConfCallback)
    c59c:	4b45      	ldr	r3, [pc, #276]	; (c6b4 <P2PTasks+0x3fc>)
    c59e:	681b      	ldr	r3, [r3, #0]
    c5a0:	2b00      	cmp	r3, #0
    c5a2:	d004      	beq.n	c5ae <P2PTasks+0x2f6>
                                        EstConfCallback(ALREADY_EXISTS);
    c5a4:	2006      	movs	r0, #6
    c5a6:	4798      	blx	r3
                                        EstConfCallback = NULL;
    c5a8:	2200      	movs	r2, #0
    c5aa:	4b42      	ldr	r3, [pc, #264]	; (c6b4 <P2PTasks+0x3fc>)
    c5ac:	601a      	str	r2, [r3, #0]
                                        if( myPANID.Val == 0xFFFF )
    c5ae:	4b42      	ldr	r3, [pc, #264]	; (c6b8 <P2PTasks+0x400>)
    c5b0:	881a      	ldrh	r2, [r3, #0]
    c5b2:	4b42      	ldr	r3, [pc, #264]	; (c6bc <P2PTasks+0x404>)
    c5b4:	429a      	cmp	r2, r3
    c5b6:	d100      	bne.n	c5ba <P2PTasks+0x302>
    c5b8:	e1a3      	b.n	c902 <P2PTasks+0x64a>
									P2PStatus.bits.SearchConnection = false;
    c5ba:	4a16      	ldr	r2, [pc, #88]	; (c614 <P2PTasks+0x35c>)
    c5bc:	7813      	ldrb	r3, [r2, #0]
    c5be:	2110      	movs	r1, #16
    c5c0:	438b      	bics	r3, r1
    c5c2:	7013      	strb	r3, [r2, #0]
                                    uint8_t status = AddConnection();
    c5c4:	4b3e      	ldr	r3, [pc, #248]	; (c6c0 <P2PTasks+0x408>)
    c5c6:	4798      	blx	r3
									  if ((status == STATUS_SUCCESS) || (status == STATUS_EXISTS))
    c5c8:	2801      	cmp	r0, #1
    c5ca:	d800      	bhi.n	c5ce <P2PTasks+0x316>
    c5cc:	e1a7      	b.n	c91e <P2PTasks+0x666>
									  myConnectionIndex_in_PanCo = rxMessage.Payload[2];
    c5ce:	4b32      	ldr	r3, [pc, #200]	; (c698 <P2PTasks+0x3e0>)
    c5d0:	689b      	ldr	r3, [r3, #8]
    c5d2:	789a      	ldrb	r2, [r3, #2]
    c5d4:	4b3b      	ldr	r3, [pc, #236]	; (c6c4 <P2PTasks+0x40c>)
    c5d6:	701a      	strb	r2, [r3, #0]
									    PDS_Store(PDS_ROLE_ID);
    c5d8:	2007      	movs	r0, #7
    c5da:	4c26      	ldr	r4, [pc, #152]	; (c674 <P2PTasks+0x3bc>)
    c5dc:	47a0      	blx	r4
									    PDS_Store(PDS_MYINDEX_ID);
    c5de:	2008      	movs	r0, #8
    c5e0:	47a0      	blx	r4
                                        P2PStatus.bits.SaveConnection = 1;
    c5e2:	4a0c      	ldr	r2, [pc, #48]	; (c614 <P2PTasks+0x35c>)
    c5e4:	7813      	ldrb	r3, [r2, #0]
    c5e6:	2102      	movs	r1, #2
    c5e8:	430b      	orrs	r3, r1
    c5ea:	7013      	strb	r3, [r2, #0]
                                        nvmDelayTick.Val = MiWi_TickGet();
    c5ec:	4b16      	ldr	r3, [pc, #88]	; (c648 <P2PTasks+0x390>)
    c5ee:	4798      	blx	r3
    c5f0:	4b1e      	ldr	r3, [pc, #120]	; (c66c <P2PTasks+0x3b4>)
    c5f2:	6018      	str	r0, [r3, #0]
                        MiMAC_DiscardPacket();
    c5f4:	4b2a      	ldr	r3, [pc, #168]	; (c6a0 <P2PTasks+0x3e8>)
    c5f6:	4798      	blx	r3
                        break; 
    c5f8:	e3d3      	b.n	cda2 <P2PTasks+0xaea>
							if(PAN_COORD != role)
    c5fa:	4b0f      	ldr	r3, [pc, #60]	; (c638 <P2PTasks+0x380>)
    c5fc:	781b      	ldrb	r3, [r3, #0]
    c5fe:	2b01      	cmp	r3, #1
    c600:	d062      	beq.n	c6c8 <P2PTasks+0x410>
								MiMAC_DiscardPacket();
    c602:	4b27      	ldr	r3, [pc, #156]	; (c6a0 <P2PTasks+0x3e8>)
    c604:	4798      	blx	r3
								break;
    c606:	e3cc      	b.n	cda2 <P2PTasks+0xaea>
    c608:	0000a491 	.word	0x0000a491
    c60c:	200030b4 	.word	0x200030b4
    c610:	2000049f 	.word	0x2000049f
    c614:	200030b0 	.word	0x200030b0
    c618:	0000c009 	.word	0x0000c009
    c61c:	000f2eb8 	.word	0x000f2eb8
    c620:	200004a4 	.word	0x200004a4
    c624:	2000048c 	.word	0x2000048c
    c628:	20003364 	.word	0x20003364
    c62c:	005b8d80 	.word	0x005b8d80
    c630:	200004b8 	.word	0x200004b8
    c634:	200004b4 	.word	0x200004b4
    c638:	20003344 	.word	0x20003344
    c63c:	200004ac 	.word	0x200004ac
    c640:	200004a1 	.word	0x200004a1
    c644:	00009a81 	.word	0x00009a81
    c648:	0000d3f5 	.word	0x0000d3f5
    c64c:	0000d455 	.word	0x0000d455
    c650:	016e3600 	.word	0x016e3600
    c654:	0000023b 	.word	0x0000023b
    c658:	2000334c 	.word	0x2000334c
    c65c:	0001752d 	.word	0x0001752d
    c660:	414312d0 	.word	0x414312d0
    c664:	00014949 	.word	0x00014949
    c668:	0000a42d 	.word	0x0000a42d
    c66c:	20003048 	.word	0x20003048
    c670:	000f4240 	.word	0x000f4240
    c674:	000098a5 	.word	0x000098a5
    c678:	00004001 	.word	0x00004001
    c67c:	0001a140 	.word	0x0001a140
    c680:	00017f41 	.word	0x00017f41
    c684:	0000a44d 	.word	0x0000a44d
    c688:	0001a154 	.word	0x0001a154
    c68c:	0000a4d9 	.word	0x0000a4d9
    c690:	20003030 	.word	0x20003030
    c694:	20003058 	.word	0x20003058
    c698:	20003354 	.word	0x20003354
    c69c:	200004b0 	.word	0x200004b0
    c6a0:	0000a411 	.word	0x0000a411
    c6a4:	0000d1b5 	.word	0x0000d1b5
    c6a8:	20002ef0 	.word	0x20002ef0
    c6ac:	20002eec 	.word	0x20002eec
    c6b0:	0000b7a9 	.word	0x0000b7a9
    c6b4:	20003054 	.word	0x20003054
    c6b8:	20003050 	.word	0x20003050
    c6bc:	0000ffff 	.word	0x0000ffff
    c6c0:	0000bd91 	.word	0x0000bd91
    c6c4:	20003044 	.word	0x20003044
                                if( currentChannel != rxMessage.Payload[1] )
    c6c8:	784a      	ldrb	r2, [r1, #1]
    c6ca:	4bc9      	ldr	r3, [pc, #804]	; (c9f0 <P2PTasks+0x738>)
    c6cc:	781b      	ldrb	r3, [r3, #0]
    c6ce:	429a      	cmp	r2, r3
    c6d0:	d002      	beq.n	c6d8 <P2PTasks+0x420>
                                    MiMAC_DiscardPacket();
    c6d2:	4bc8      	ldr	r3, [pc, #800]	; (c9f4 <P2PTasks+0x73c>)
    c6d4:	4798      	blx	r3
                                    break;
    c6d6:	e364      	b.n	cda2 <P2PTasks+0xaea>
                                if( ConnMode == DISABLE_ALL_CONN )
    c6d8:	4bc7      	ldr	r3, [pc, #796]	; (c9f8 <P2PTasks+0x740>)
    c6da:	781b      	ldrb	r3, [r3, #0]
    c6dc:	2b03      	cmp	r3, #3
    c6de:	d055      	beq.n	c78c <P2PTasks+0x4d4>
                                    if( rxMessage.SourcePANID.Val != 0xFFFF &&
    c6e0:	4bc6      	ldr	r3, [pc, #792]	; (c9fc <P2PTasks+0x744>)
    c6e2:	429c      	cmp	r4, r3
    c6e4:	d006      	beq.n	c6f4 <P2PTasks+0x43c>
                                        rxMessage.SourcePANID.Val != myPANID.Val &&
    c6e6:	4bc6      	ldr	r3, [pc, #792]	; (ca00 <P2PTasks+0x748>)
                                    if( rxMessage.SourcePANID.Val != 0xFFFF &&
    c6e8:	881b      	ldrh	r3, [r3, #0]
    c6ea:	42a3      	cmp	r3, r4
    c6ec:	d002      	beq.n	c6f4 <P2PTasks+0x43c>
                                        status = STATUS_NOT_SAME_PAN;
    c6ee:	26f2      	movs	r6, #242	; 0xf2
                                        rxMessage.SourcePANID.Val != myPANID.Val &&
    c6f0:	2d02      	cmp	r5, #2
    c6f2:	d802      	bhi.n	c6fa <P2PTasks+0x442>
                                    status = AddConnection();
    c6f4:	4bc3      	ldr	r3, [pc, #780]	; (ca04 <P2PTasks+0x74c>)
    c6f6:	4798      	blx	r3
    c6f8:	0006      	movs	r6, r0
									if (rxMessage.Payload[3] == 0xAA)
    c6fa:	4bc3      	ldr	r3, [pc, #780]	; (ca08 <P2PTasks+0x750>)
    c6fc:	689b      	ldr	r3, [r3, #8]
    c6fe:	78db      	ldrb	r3, [r3, #3]
    c700:	2baa      	cmp	r3, #170	; 0xaa
    c702:	d046      	beq.n	c792 <P2PTasks+0x4da>
                                if( (ConnMode == ENABLE_PREV_CONN) && (status != STATUS_EXISTS && status != STATUS_ACTIVE_SCAN) )
    c704:	4bbc      	ldr	r3, [pc, #752]	; (c9f8 <P2PTasks+0x740>)
    c706:	781b      	ldrb	r3, [r3, #0]
    c708:	2b01      	cmp	r3, #1
    c70a:	d056      	beq.n	c7ba <P2PTasks+0x502>
                                dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(TX_BUFFER_SIZE));
    c70c:	20e0      	movs	r0, #224	; 0xe0
    c70e:	4bbf      	ldr	r3, [pc, #764]	; (ca0c <P2PTasks+0x754>)
    c710:	4798      	blx	r3
    c712:	1e04      	subs	r4, r0, #0
                                if (NULL == dataPtr)
    c714:	d100      	bne.n	c718 <P2PTasks+0x460>
    c716:	e62b      	b.n	c370 <P2PTasks+0xb8>
                                dataPtr[dataLen++] = CMD_P2P_CONNECTION_RESPONSE;
    c718:	2391      	movs	r3, #145	; 0x91
    c71a:	7003      	strb	r3, [r0, #0]
                                dataPtr[dataLen++] = status;
    c71c:	7046      	strb	r6, [r0, #1]
                                dataPtr[dataLen++] = MyindexinPC;
    c71e:	4bbc      	ldr	r3, [pc, #752]	; (ca10 <P2PTasks+0x758>)
    c720:	781b      	ldrb	r3, [r3, #0]
    c722:	7083      	strb	r3, [r0, #2]
    c724:	2703      	movs	r7, #3
                                if( status == STATUS_SUCCESS ||
    c726:	2e01      	cmp	r6, #1
    c728:	d95a      	bls.n	c7e0 <P2PTasks+0x528>
                                MiMAC_DiscardPacket();
    c72a:	4bb2      	ldr	r3, [pc, #712]	; (c9f4 <P2PTasks+0x73c>)
    c72c:	4798      	blx	r3
                                i = PHY_RandomReq();
    c72e:	4bb9      	ldr	r3, [pc, #740]	; (ca14 <P2PTasks+0x75c>)
    c730:	4798      	blx	r3
    c732:	b2c5      	uxtb	r5, r0
                                delay_s(i % (CONNECTION_INTERVAL-1));
    c734:	2103      	movs	r1, #3
    c736:	0028      	movs	r0, r5
    c738:	4bb7      	ldr	r3, [pc, #732]	; (ca18 <P2PTasks+0x760>)
    c73a:	4798      	blx	r3
    c73c:	b2c9      	uxtb	r1, r1
    c73e:	2900      	cmp	r1, #0
    c740:	d056      	beq.n	c7f0 <P2PTasks+0x538>
    c742:	20fa      	movs	r0, #250	; 0xfa
    c744:	0080      	lsls	r0, r0, #2
    c746:	4368      	muls	r0, r5
    c748:	2103      	movs	r1, #3
    c74a:	4bb4      	ldr	r3, [pc, #720]	; (ca1c <P2PTasks+0x764>)
    c74c:	4798      	blx	r3
    c74e:	0008      	movs	r0, r1
    c750:	4bb3      	ldr	r3, [pc, #716]	; (ca20 <P2PTasks+0x768>)
    c752:	4798      	blx	r3
                                        SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn, 
    c754:	4bac      	ldr	r3, [pc, #688]	; (ca08 <P2PTasks+0x750>)
    c756:	685a      	ldr	r2, [r3, #4]
    c758:	8859      	ldrh	r1, [r3, #2]
    c75a:	48b2      	ldr	r0, [pc, #712]	; (ca24 <P2PTasks+0x76c>)
    c75c:	9005      	str	r0, [sp, #20]
    c75e:	2001      	movs	r0, #1
    c760:	9004      	str	r0, [sp, #16]
    c762:	2000      	movs	r0, #0
    c764:	9003      	str	r0, [sp, #12]
    c766:	9402      	str	r4, [sp, #8]
    c768:	9701      	str	r7, [sp, #4]
    c76a:	781b      	ldrb	r3, [r3, #0]
    c76c:	071b      	lsls	r3, r3, #28
    c76e:	0fdb      	lsrs	r3, r3, #31
    c770:	9300      	str	r3, [sp, #0]
    c772:	2301      	movs	r3, #1
    c774:	4cac      	ldr	r4, [pc, #688]	; (ca28 <P2PTasks+0x770>)
    c776:	47a0      	blx	r4
								delay_ms (100);
    c778:	2064      	movs	r0, #100	; 0x64
    c77a:	4ba9      	ldr	r3, [pc, #676]	; (ca20 <P2PTasks+0x768>)
    c77c:	4798      	blx	r3
                                    if( status == STATUS_SUCCESS )
    c77e:	2e00      	cmp	r6, #0
    c780:	d000      	beq.n	c784 <P2PTasks+0x4cc>
    c782:	e30e      	b.n	cda2 <P2PTasks+0xaea>
										PDS_Store(PDS_CONNECTION_TABLE_ID);
    c784:	2005      	movs	r0, #5
    c786:	4ba9      	ldr	r3, [pc, #676]	; (ca2c <P2PTasks+0x774>)
    c788:	4798      	blx	r3
    c78a:	e30a      	b.n	cda2 <P2PTasks+0xaea>
                                    MiMAC_DiscardPacket();
    c78c:	4b99      	ldr	r3, [pc, #612]	; (c9f4 <P2PTasks+0x73c>)
    c78e:	4798      	blx	r3
                                    break;
    c790:	e307      	b.n	cda2 <P2PTasks+0xaea>
											if (isSameAddress(rxMessage.SourceAddress, ConnectionTable[p].Address) )
    c792:	4b9d      	ldr	r3, [pc, #628]	; (ca08 <P2PTasks+0x750>)
    c794:	685b      	ldr	r3, [r3, #4]
    c796:	9306      	str	r3, [sp, #24]
    c798:	4ca5      	ldr	r4, [pc, #660]	; (ca30 <P2PTasks+0x778>)
    c79a:	4da6      	ldr	r5, [pc, #664]	; (ca34 <P2PTasks+0x77c>)
    c79c:	4fa6      	ldr	r7, [pc, #664]	; (ca38 <P2PTasks+0x780>)
												ConnectionTable[p].permanent_connections = 0xFF;
    c79e:	23ff      	movs	r3, #255	; 0xff
    c7a0:	4699      	mov	r9, r3
    c7a2:	e002      	b.n	c7aa <P2PTasks+0x4f2>
    c7a4:	3410      	adds	r4, #16
										for (uint8_t p = 0 ;p <CONNECTION_SIZE;p++)
    c7a6:	42ac      	cmp	r4, r5
    c7a8:	d0ac      	beq.n	c704 <P2PTasks+0x44c>
											if (isSameAddress(rxMessage.SourceAddress, ConnectionTable[p].Address) )
    c7aa:	0021      	movs	r1, r4
    c7ac:	9806      	ldr	r0, [sp, #24]
    c7ae:	47b8      	blx	r7
    c7b0:	2800      	cmp	r0, #0
    c7b2:	d0f7      	beq.n	c7a4 <P2PTasks+0x4ec>
												ConnectionTable[p].permanent_connections = 0xFF;
    c7b4:	464b      	mov	r3, r9
    c7b6:	72e3      	strb	r3, [r4, #11]
    c7b8:	e7f4      	b.n	c7a4 <P2PTasks+0x4ec>
                                if( (ConnMode == ENABLE_PREV_CONN) && (status != STATUS_EXISTS && status != STATUS_ACTIVE_SCAN) )
    c7ba:	1e73      	subs	r3, r6, #1
    c7bc:	b2db      	uxtb	r3, r3
    c7be:	2b01      	cmp	r3, #1
    c7c0:	d9a4      	bls.n	c70c <P2PTasks+0x454>
                                dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(TX_BUFFER_SIZE));
    c7c2:	20e0      	movs	r0, #224	; 0xe0
    c7c4:	4b91      	ldr	r3, [pc, #580]	; (ca0c <P2PTasks+0x754>)
    c7c6:	4798      	blx	r3
    c7c8:	1e04      	subs	r4, r0, #0
                                if (NULL == dataPtr)
    c7ca:	d100      	bne.n	c7ce <P2PTasks+0x516>
    c7cc:	e5d0      	b.n	c370 <P2PTasks+0xb8>
                                dataPtr[dataLen++] = CMD_P2P_CONNECTION_RESPONSE;
    c7ce:	2391      	movs	r3, #145	; 0x91
    c7d0:	7023      	strb	r3, [r4, #0]
                                dataPtr[dataLen++] = status;
    c7d2:	26f3      	movs	r6, #243	; 0xf3
    c7d4:	7066      	strb	r6, [r4, #1]
                                dataPtr[dataLen++] = MyindexinPC;
    c7d6:	4b8e      	ldr	r3, [pc, #568]	; (ca10 <P2PTasks+0x758>)
    c7d8:	781b      	ldrb	r3, [r3, #0]
    c7da:	70a3      	strb	r3, [r4, #2]
    c7dc:	2703      	movs	r7, #3
    c7de:	e7a4      	b.n	c72a <P2PTasks+0x472>
                                    dataPtr[dataLen++] = P2PCapacityInfo;
    c7e0:	4b96      	ldr	r3, [pc, #600]	; (ca3c <P2PTasks+0x784>)
    c7e2:	781b      	ldrb	r3, [r3, #0]
    c7e4:	70c3      	strb	r3, [r0, #3]
                                            dataPtr[dataLen++] = AdditionalNodeID[i];
    c7e6:	4b96      	ldr	r3, [pc, #600]	; (ca40 <P2PTasks+0x788>)
    c7e8:	781b      	ldrb	r3, [r3, #0]
    c7ea:	7103      	strb	r3, [r0, #4]
    c7ec:	3702      	adds	r7, #2
    c7ee:	e79c      	b.n	c72a <P2PTasks+0x472>
                                delay_s(i % (CONNECTION_INTERVAL-1));
    c7f0:	2001      	movs	r0, #1
    c7f2:	4b94      	ldr	r3, [pc, #592]	; (ca44 <P2PTasks+0x78c>)
    c7f4:	4798      	blx	r3
    c7f6:	e7ad      	b.n	c754 <P2PTasks+0x49c>
                        if(ConnMode > ENABLE_ACTIVE_SCAN_RSP)
    c7f8:	4b7f      	ldr	r3, [pc, #508]	; (c9f8 <P2PTasks+0x740>)
    c7fa:	781b      	ldrb	r3, [r3, #0]
    c7fc:	2b02      	cmp	r3, #2
    c7fe:	d807      	bhi.n	c810 <P2PTasks+0x558>
                            if( currentChannel != rxMessage.Payload[1] )
    c800:	784a      	ldrb	r2, [r1, #1]
    c802:	4b7b      	ldr	r3, [pc, #492]	; (c9f0 <P2PTasks+0x738>)
    c804:	781b      	ldrb	r3, [r3, #0]
    c806:	429a      	cmp	r2, r3
    c808:	d005      	beq.n	c816 <P2PTasks+0x55e>
                                MiMAC_DiscardPacket();
    c80a:	4b7a      	ldr	r3, [pc, #488]	; (c9f4 <P2PTasks+0x73c>)
    c80c:	4798      	blx	r3
                                break;
    c80e:	e2c8      	b.n	cda2 <P2PTasks+0xaea>
                                MiMAC_DiscardPacket();
    c810:	4b78      	ldr	r3, [pc, #480]	; (c9f4 <P2PTasks+0x73c>)
    c812:	4798      	blx	r3
                                break;
    c814:	e2c5      	b.n	cda2 <P2PTasks+0xaea>
                            dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_P2P_ACTIVE_SCAN_RESPONSE));
    c816:	2010      	movs	r0, #16
    c818:	4b7c      	ldr	r3, [pc, #496]	; (ca0c <P2PTasks+0x754>)
    c81a:	4798      	blx	r3
    c81c:	1e04      	subs	r4, r0, #0
                            if (NULL == dataPtr)
    c81e:	d100      	bne.n	c822 <P2PTasks+0x56a>
    c820:	e5a6      	b.n	c370 <P2PTasks+0xb8>
                            dataPtr[dataLen++] = CMD_P2P_ACTIVE_SCAN_RESPONSE;
    c822:	2397      	movs	r3, #151	; 0x97
    c824:	7003      	strb	r3, [r0, #0]
                            dataPtr[dataLen++] = P2PCapacityInfo;
    c826:	4b85      	ldr	r3, [pc, #532]	; (ca3c <P2PTasks+0x784>)
    c828:	781b      	ldrb	r3, [r3, #0]
    c82a:	7043      	strb	r3, [r0, #1]
                                    dataPtr[dataLen++] = (AdditionalNodeID[i]);
    c82c:	4b84      	ldr	r3, [pc, #528]	; (ca40 <P2PTasks+0x788>)
    c82e:	781b      	ldrb	r3, [r3, #0]
    c830:	7083      	strb	r3, [r0, #2]
                            MiMAC_DiscardPacket();
    c832:	4b70      	ldr	r3, [pc, #448]	; (c9f4 <P2PTasks+0x73c>)
    c834:	4798      	blx	r3
							i = PHY_RandomReq();
    c836:	4b77      	ldr	r3, [pc, #476]	; (ca14 <P2PTasks+0x75c>)
    c838:	4798      	blx	r3
							delay_ms(i*100);
    c83a:	b2c3      	uxtb	r3, r0
    c83c:	2064      	movs	r0, #100	; 0x64
    c83e:	4358      	muls	r0, r3
    c840:	2800      	cmp	r0, #0
    c842:	d016      	beq.n	c872 <P2PTasks+0x5ba>
    c844:	4b76      	ldr	r3, [pc, #472]	; (ca20 <P2PTasks+0x768>)
    c846:	4798      	blx	r3
                                    SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn, 
    c848:	4b6f      	ldr	r3, [pc, #444]	; (ca08 <P2PTasks+0x750>)
    c84a:	685a      	ldr	r2, [r3, #4]
    c84c:	8859      	ldrh	r1, [r3, #2]
    c84e:	487e      	ldr	r0, [pc, #504]	; (ca48 <P2PTasks+0x790>)
    c850:	9005      	str	r0, [sp, #20]
    c852:	2001      	movs	r0, #1
    c854:	9004      	str	r0, [sp, #16]
    c856:	2000      	movs	r0, #0
    c858:	9003      	str	r0, [sp, #12]
    c85a:	9402      	str	r4, [sp, #8]
    c85c:	3003      	adds	r0, #3
    c85e:	9001      	str	r0, [sp, #4]
    c860:	781b      	ldrb	r3, [r3, #0]
    c862:	071b      	lsls	r3, r3, #28
    c864:	0fdb      	lsrs	r3, r3, #31
    c866:	9300      	str	r3, [sp, #0]
    c868:	2301      	movs	r3, #1
    c86a:	2000      	movs	r0, #0
    c86c:	4c6e      	ldr	r4, [pc, #440]	; (ca28 <P2PTasks+0x770>)
    c86e:	47a0      	blx	r4
                        break;
    c870:	e297      	b.n	cda2 <P2PTasks+0xaea>
							delay_ms(i*100);
    c872:	2001      	movs	r0, #1
    c874:	4b73      	ldr	r3, [pc, #460]	; (ca44 <P2PTasks+0x78c>)
    c876:	4798      	blx	r3
    c878:	e7e6      	b.n	c848 <P2PTasks+0x590>
                            for(i = 0; i < CONNECTION_SIZE; i++)
    c87a:	3401      	adds	r4, #1
    c87c:	b2e4      	uxtb	r4, r4
    c87e:	3501      	adds	r5, #1
    c880:	3610      	adds	r6, #16
    c882:	2c14      	cmp	r4, #20
    c884:	d100      	bne.n	c888 <P2PTasks+0x5d0>
    c886:	e384      	b.n	cf92 <P2PTasks+0xcda>
                                if( ConnectionTable[i].status.bits.isValid )
    c888:	9506      	str	r5, [sp, #24]
    c88a:	012b      	lsls	r3, r5, #4
    c88c:	18fb      	adds	r3, r7, r3
    c88e:	7b1b      	ldrb	r3, [r3, #12]
    c890:	09db      	lsrs	r3, r3, #7
    c892:	d0f2      	beq.n	c87a <P2PTasks+0x5c2>
                                    if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    c894:	0031      	movs	r1, r6
    c896:	9807      	ldr	r0, [sp, #28]
    c898:	47c8      	blx	r9
    c89a:	2800      	cmp	r0, #0
    c89c:	d0ed      	beq.n	c87a <P2PTasks+0x5c2>
                                        ConnectionTable[i].status.Val = 0;
    c89e:	9b06      	ldr	r3, [sp, #24]
    c8a0:	011e      	lsls	r6, r3, #4
    c8a2:	4b6a      	ldr	r3, [pc, #424]	; (ca4c <P2PTasks+0x794>)
    c8a4:	199e      	adds	r6, r3, r6
    c8a6:	2500      	movs	r5, #0
    c8a8:	7335      	strb	r5, [r6, #12]
											PDS_Store(PDS_CONNECTION_TABLE_ID);
    c8aa:	2005      	movs	r0, #5
    c8ac:	4b5f      	ldr	r3, [pc, #380]	; (ca2c <P2PTasks+0x774>)
    c8ae:	4798      	blx	r3
                                        dataPtr[dataLen++] = STATUS_SUCCESS;
    c8b0:	4643      	mov	r3, r8
    c8b2:	705d      	strb	r5, [r3, #1]
                            MiMAC_DiscardPacket();
    c8b4:	4b4f      	ldr	r3, [pc, #316]	; (c9f4 <P2PTasks+0x73c>)
    c8b6:	4798      	blx	r3
                            if( i == CONNECTION_SIZE ) 
    c8b8:	2c14      	cmp	r4, #20
    c8ba:	d015      	beq.n	c8e8 <P2PTasks+0x630>
                                        dataPtr[dataLen++] = STATUS_SUCCESS;
    c8bc:	2002      	movs	r0, #2
                                    SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn, 
    c8be:	4b52      	ldr	r3, [pc, #328]	; (ca08 <P2PTasks+0x750>)
    c8c0:	685a      	ldr	r2, [r3, #4]
    c8c2:	8859      	ldrh	r1, [r3, #2]
    c8c4:	4c60      	ldr	r4, [pc, #384]	; (ca48 <P2PTasks+0x790>)
    c8c6:	9405      	str	r4, [sp, #20]
    c8c8:	2401      	movs	r4, #1
    c8ca:	9404      	str	r4, [sp, #16]
    c8cc:	2400      	movs	r4, #0
    c8ce:	9403      	str	r4, [sp, #12]
    c8d0:	4644      	mov	r4, r8
    c8d2:	9402      	str	r4, [sp, #8]
    c8d4:	9001      	str	r0, [sp, #4]
    c8d6:	781b      	ldrb	r3, [r3, #0]
    c8d8:	071b      	lsls	r3, r3, #28
    c8da:	0fdb      	lsrs	r3, r3, #31
    c8dc:	9300      	str	r3, [sp, #0]
    c8de:	2301      	movs	r3, #1
    c8e0:	2000      	movs	r0, #0
    c8e2:	4c51      	ldr	r4, [pc, #324]	; (ca28 <P2PTasks+0x770>)
    c8e4:	47a0      	blx	r4
                            break;
    c8e6:	e25c      	b.n	cda2 <P2PTasks+0xaea>
                                        dataPtr[dataLen++] = STATUS_SUCCESS;
    c8e8:	2302      	movs	r3, #2
    c8ea:	e355      	b.n	cf98 <P2PTasks+0xce0>
                                    if (EstConfCallback)
    c8ec:	4b58      	ldr	r3, [pc, #352]	; (ca50 <P2PTasks+0x798>)
    c8ee:	681b      	ldr	r3, [r3, #0]
    c8f0:	2b00      	cmp	r3, #0
    c8f2:	d100      	bne.n	c8f6 <P2PTasks+0x63e>
    c8f4:	e65b      	b.n	c5ae <P2PTasks+0x2f6>
                                        EstConfCallback(SUCCESS);
    c8f6:	2000      	movs	r0, #0
    c8f8:	4798      	blx	r3
                                        EstConfCallback = NULL;
    c8fa:	2200      	movs	r2, #0
    c8fc:	4b54      	ldr	r3, [pc, #336]	; (ca50 <P2PTasks+0x798>)
    c8fe:	601a      	str	r2, [r3, #0]
    c900:	e655      	b.n	c5ae <P2PTasks+0x2f6>
                                            myPANID.Val = rxMessage.SourcePANID.Val;
    c902:	493f      	ldr	r1, [pc, #252]	; (ca00 <P2PTasks+0x748>)
    c904:	4b40      	ldr	r3, [pc, #256]	; (ca08 <P2PTasks+0x750>)
    c906:	885b      	ldrh	r3, [r3, #2]
    c908:	800b      	strh	r3, [r1, #0]
                                                uint16_t tmp = 0xFFFF;
    c90a:	201e      	movs	r0, #30
    c90c:	ab02      	add	r3, sp, #8
    c90e:	469c      	mov	ip, r3
    c910:	4460      	add	r0, ip
    c912:	2301      	movs	r3, #1
    c914:	425b      	negs	r3, r3
    c916:	8003      	strh	r3, [r0, #0]
                                                MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
    c918:	4b4e      	ldr	r3, [pc, #312]	; (ca54 <P2PTasks+0x79c>)
    c91a:	4798      	blx	r3
    c91c:	e64d      	b.n	c5ba <P2PTasks+0x302>
											   startLinkStatusTimer();
    c91e:	4b4e      	ldr	r3, [pc, #312]	; (ca58 <P2PTasks+0x7a0>)
    c920:	4798      	blx	r3
    c922:	e654      	b.n	c5ce <P2PTasks+0x316>
                            if( P2PStatus.bits.Resync )
    c924:	4b4d      	ldr	r3, [pc, #308]	; (ca5c <P2PTasks+0x7a4>)
    c926:	781b      	ldrb	r3, [r3, #0]
    c928:	069b      	lsls	r3, r3, #26
    c92a:	d504      	bpl.n	c936 <P2PTasks+0x67e>
                                P2PStatus.bits.Resync = 0;   
    c92c:	4a4b      	ldr	r2, [pc, #300]	; (ca5c <P2PTasks+0x7a4>)
    c92e:	7813      	ldrb	r3, [r2, #0]
    c930:	2120      	movs	r1, #32
    c932:	438b      	bics	r3, r1
    c934:	7013      	strb	r3, [r2, #0]
                            MiMAC_DiscardPacket(); 
    c936:	4b2f      	ldr	r3, [pc, #188]	; (c9f4 <P2PTasks+0x73c>)
    c938:	4798      	blx	r3
                        break;                
    c93a:	e232      	b.n	cda2 <P2PTasks+0xaea>
						end_nodes = rxMessage.Payload[1];
    c93c:	784b      	ldrb	r3, [r1, #1]
    c93e:	469a      	mov	sl, r3
    c940:	4b47      	ldr	r3, [pc, #284]	; (ca60 <P2PTasks+0x7a8>)
    c942:	4652      	mov	r2, sl
    c944:	701a      	strb	r2, [r3, #0]
    c946:	1d0b      	adds	r3, r1, #4
    c948:	22dc      	movs	r2, #220	; 0xdc
    c94a:	4691      	mov	r9, r2
    c94c:	4489      	add	r9, r1
    uint8_t i , j , nodeCounter = 0;
    c94e:	2400      	movs	r4, #0
            END_DEVICES_Short_Address[j].connection_slot = j;
    c950:	4a44      	ldr	r2, [pc, #272]	; (ca64 <P2PTasks+0x7ac>)
    c952:	4690      	mov	r8, r2
    c954:	e002      	b.n	c95c <P2PTasks+0x6a4>
    c956:	3304      	adds	r3, #4
    for (i = 4; i < RX_BUFFER_SIZE; i+=4)
    c958:	454b      	cmp	r3, r9
    c95a:	d014      	beq.n	c986 <P2PTasks+0x6ce>
        j = payload[i+3];
    c95c:	78da      	ldrb	r2, [r3, #3]
        if ((0xFF != j) && (nodeCounter < end_nodes))
    c95e:	2aff      	cmp	r2, #255	; 0xff
    c960:	d0f9      	beq.n	c956 <P2PTasks+0x69e>
    c962:	45a2      	cmp	sl, r4
    c964:	d9f7      	bls.n	c956 <P2PTasks+0x69e>
            END_DEVICES_Short_Address[j].connection_slot = j;
    c966:	0097      	lsls	r7, r2, #2
    c968:	46bc      	mov	ip, r7
    c96a:	4647      	mov	r7, r8
    c96c:	4467      	add	r7, ip
    c96e:	70fa      	strb	r2, [r7, #3]
            END_DEVICES_Short_Address[j].Address[0] = payload[i];
    c970:	781a      	ldrb	r2, [r3, #0]
    c972:	4646      	mov	r6, r8
    c974:	4661      	mov	r1, ip
    c976:	558a      	strb	r2, [r1, r6]
            END_DEVICES_Short_Address[j].Address[1] = payload[i+1];
    c978:	785a      	ldrb	r2, [r3, #1]
    c97a:	707a      	strb	r2, [r7, #1]
            END_DEVICES_Short_Address[j].Address[2] = payload[i+2];
    c97c:	789a      	ldrb	r2, [r3, #2]
    c97e:	70ba      	strb	r2, [r7, #2]
			nodeCounter ++;       
    c980:	3401      	adds	r4, #1
    c982:	b2e4      	uxtb	r4, r4
    c984:	e7e7      	b.n	c956 <P2PTasks+0x69e>
		for (i = 0; i < end_nodes; i++)
    c986:	4653      	mov	r3, sl
    c988:	2b00      	cmp	r3, #0
    c98a:	d019      	beq.n	c9c0 <P2PTasks+0x708>
			if (myLongAddress[0] == END_DEVICES_Short_Address[i].Address[0] && myLongAddress[1] == END_DEVICES_Short_Address[i].Address[1])
    c98c:	4b36      	ldr	r3, [pc, #216]	; (ca68 <P2PTasks+0x7b0>)
    c98e:	781d      	ldrb	r5, [r3, #0]
    c990:	785c      	ldrb	r4, [r3, #1]
    c992:	4a34      	ldr	r2, [pc, #208]	; (ca64 <P2PTasks+0x7ac>)
    c994:	4653      	mov	r3, sl
    c996:	3b01      	subs	r3, #1
    c998:	b2db      	uxtb	r3, r3
    c99a:	3301      	adds	r3, #1
    c99c:	009b      	lsls	r3, r3, #2
    c99e:	189b      	adds	r3, r3, r2
    c9a0:	2100      	movs	r1, #0
    c9a2:	e002      	b.n	c9aa <P2PTasks+0x6f2>
    c9a4:	3204      	adds	r2, #4
		for (i = 0; i < end_nodes; i++)
    c9a6:	429a      	cmp	r2, r3
    c9a8:	d007      	beq.n	c9ba <P2PTasks+0x702>
			if (myLongAddress[0] == END_DEVICES_Short_Address[i].Address[0] && myLongAddress[1] == END_DEVICES_Short_Address[i].Address[1])
    c9aa:	7816      	ldrb	r6, [r2, #0]
    c9ac:	42ae      	cmp	r6, r5
    c9ae:	d1f9      	bne.n	c9a4 <P2PTasks+0x6ec>
    c9b0:	7856      	ldrb	r6, [r2, #1]
    c9b2:	42a6      	cmp	r6, r4
    c9b4:	d1f6      	bne.n	c9a4 <P2PTasks+0x6ec>
				stat = true;
    c9b6:	0001      	movs	r1, r0
    c9b8:	e7f4      	b.n	c9a4 <P2PTasks+0x6ec>
		if (!stat)
    c9ba:	2900      	cmp	r1, #0
    c9bc:	d000      	beq.n	c9c0 <P2PTasks+0x708>
    c9be:	e5de      	b.n	c57e <P2PTasks+0x2c6>
			linkStatusTimerTick.Val = 0;
    c9c0:	2300      	movs	r3, #0
    c9c2:	4a2a      	ldr	r2, [pc, #168]	; (ca6c <P2PTasks+0x7b4>)
    c9c4:	6013      	str	r3, [r2, #0]
			linkStatusTimerSet = false;
    c9c6:	4a2a      	ldr	r2, [pc, #168]	; (ca70 <P2PTasks+0x7b8>)
    c9c8:	7013      	strb	r3, [r2, #0]
			if ((NULL != linkFailureCallback))
    c9ca:	4b2a      	ldr	r3, [pc, #168]	; (ca74 <P2PTasks+0x7bc>)
    c9cc:	681b      	ldr	r3, [r3, #0]
    c9ce:	2b00      	cmp	r3, #0
    c9d0:	d100      	bne.n	c9d4 <P2PTasks+0x71c>
    c9d2:	e5d4      	b.n	c57e <P2PTasks+0x2c6>
				MiMAC_DiscardPacket();
    c9d4:	4b07      	ldr	r3, [pc, #28]	; (c9f4 <P2PTasks+0x73c>)
    c9d6:	4798      	blx	r3
				linkFailureCallback();
    c9d8:	4b26      	ldr	r3, [pc, #152]	; (ca74 <P2PTasks+0x7bc>)
    c9da:	681b      	ldr	r3, [r3, #0]
    c9dc:	4798      	blx	r3
    c9de:	e5ce      	b.n	c57e <P2PTasks+0x2c6>
						if((forwardMessages[i].fromEDToED == 1) && (SwAckReq))
    c9e0:	4b25      	ldr	r3, [pc, #148]	; (ca78 <P2PTasks+0x7c0>)
    c9e2:	7c9b      	ldrb	r3, [r3, #18]
    c9e4:	2b01      	cmp	r3, #1
    c9e6:	d049      	beq.n	ca7c <P2PTasks+0x7c4>
					MiMAC_DiscardPacket();
    c9e8:	4b02      	ldr	r3, [pc, #8]	; (c9f4 <P2PTasks+0x73c>)
    c9ea:	4798      	blx	r3
				break;
    c9ec:	e1d9      	b.n	cda2 <P2PTasks+0xaea>
    c9ee:	46c0      	nop			; (mov r8, r8)
    c9f0:	2000001d 	.word	0x2000001d
    c9f4:	0000a411 	.word	0x0000a411
    c9f8:	2000001c 	.word	0x2000001c
    c9fc:	0000ffff 	.word	0x0000ffff
    ca00:	20003050 	.word	0x20003050
    ca04:	0000bd91 	.word	0x0000bd91
    ca08:	20003354 	.word	0x20003354
    ca0c:	0000d1b5 	.word	0x0000d1b5
    ca10:	200030ac 	.word	0x200030ac
    ca14:	0000b069 	.word	0x0000b069
    ca18:	00014715 	.word	0x00014715
    ca1c:	000148e9 	.word	0x000148e9
    ca20:	00004799 	.word	0x00004799
    ca24:	0000b591 	.word	0x0000b591
    ca28:	0000b311 	.word	0x0000b311
    ca2c:	000098a5 	.word	0x000098a5
    ca30:	20002ef0 	.word	0x20002ef0
    ca34:	20003030 	.word	0x20003030
    ca38:	0000b7a9 	.word	0x0000b7a9
    ca3c:	20003045 	.word	0x20003045
    ca40:	20000018 	.word	0x20000018
    ca44:	0000476d 	.word	0x0000476d
    ca48:	0000b10d 	.word	0x0000b10d
    ca4c:	20002eec 	.word	0x20002eec
    ca50:	20003054 	.word	0x20003054
    ca54:	00009b95 	.word	0x00009b95
    ca58:	0000c299 	.word	0x0000c299
    ca5c:	200030b0 	.word	0x200030b0
    ca60:	200004a9 	.word	0x200004a9
    ca64:	200032f4 	.word	0x200032f4
    ca68:	20000020 	.word	0x20000020
    ca6c:	2000334c 	.word	0x2000334c
    ca70:	200004ac 	.word	0x200004ac
    ca74:	20003350 	.word	0x20003350
    ca78:	20002870 	.word	0x20002870
						if((forwardMessages[i].fromEDToED == 1) && (SwAckReq))
    ca7c:	4bd4      	ldr	r3, [pc, #848]	; (cdd0 <P2PTasks+0xb18>)
    ca7e:	781b      	ldrb	r3, [r3, #0]
    ca80:	2b00      	cmp	r3, #0
    ca82:	d0b1      	beq.n	c9e8 <P2PTasks+0x730>
							DataConf_callback_t callback = forwardMessages[i].confCallback;
    ca84:	49d3      	ldr	r1, [pc, #844]	; (cdd4 <P2PTasks+0xb1c>)
    ca86:	680b      	ldr	r3, [r1, #0]
							forwardMessages[i].fromEDToED = 0;
    ca88:	2200      	movs	r2, #0
    ca8a:	748a      	strb	r2, [r1, #18]
							SwAckReq = false;
    ca8c:	49d0      	ldr	r1, [pc, #832]	; (cdd0 <P2PTasks+0xb18>)
    ca8e:	700a      	strb	r2, [r1, #0]
							if (NULL != callback)
    ca90:	2b00      	cmp	r3, #0
    ca92:	d0a9      	beq.n	c9e8 <P2PTasks+0x730>
								callback(forwardMessages[i].msghandle, SUCCESS , NULL);
    ca94:	4acf      	ldr	r2, [pc, #828]	; (cdd4 <P2PTasks+0xb1c>)
    ca96:	7cd0      	ldrb	r0, [r2, #19]
    ca98:	2200      	movs	r2, #0
    ca9a:	2100      	movs	r1, #0
    ca9c:	4798      	blx	r3
    ca9e:	e7a3      	b.n	c9e8 <P2PTasks+0x730>
					if (PAN_COORD == role)
    caa0:	4bcd      	ldr	r3, [pc, #820]	; (cdd8 <P2PTasks+0xb20>)
    caa2:	781b      	ldrb	r3, [r3, #0]
    caa4:	2b01      	cmp	r3, #1
    caa6:	d002      	beq.n	caae <P2PTasks+0x7f6>
				MiMAC_DiscardPacket();
    caa8:	4bcc      	ldr	r3, [pc, #816]	; (cddc <P2PTasks+0xb24>)
    caaa:	4798      	blx	r3
				break;
    caac:	e179      	b.n	cda2 <P2PTasks+0xaea>
						printf("\nReceived forward Packet request\n\r");
    caae:	48cc      	ldr	r0, [pc, #816]	; (cde0 <P2PTasks+0xb28>)
    cab0:	4bcc      	ldr	r3, [pc, #816]	; (cde4 <P2PTasks+0xb2c>)
    cab2:	4798      	blx	r3
						uint8_t ed_index = Find_Index(&(rxMessage.Payload[1]));
    cab4:	4bcc      	ldr	r3, [pc, #816]	; (cde8 <P2PTasks+0xb30>)
    cab6:	689b      	ldr	r3, [r3, #8]
    cab8:	4699      	mov	r9, r3
    caba:	1c58      	adds	r0, r3, #1
    cabc:	4bcb      	ldr	r3, [pc, #812]	; (cdec <P2PTasks+0xb34>)
    cabe:	4798      	blx	r3
    cac0:	0007      	movs	r7, r0
						if (0xFF != ed_index)
    cac2:	28ff      	cmp	r0, #255	; 0xff
    cac4:	d0f0      	beq.n	caa8 <P2PTasks+0x7f0>
								if(forwardMessages[i].fromEDToED == 0)
    cac6:	4bc3      	ldr	r3, [pc, #780]	; (cdd4 <P2PTasks+0xb1c>)
    cac8:	7c9b      	ldrb	r3, [r3, #18]
    caca:	2b00      	cmp	r3, #0
    cacc:	d00b      	beq.n	cae6 <P2PTasks+0x82e>
    cace:	4ac8      	ldr	r2, [pc, #800]	; (cdf0 <P2PTasks+0xb38>)
    cad0:	2301      	movs	r3, #1
    cad2:	4698      	mov	r8, r3
    cad4:	7811      	ldrb	r1, [r2, #0]
    cad6:	2900      	cmp	r1, #0
    cad8:	d007      	beq.n	caea <P2PTasks+0x832>
    cada:	3301      	adds	r3, #1
    cadc:	3215      	adds	r2, #21
    cade:	32ff      	adds	r2, #255	; 0xff
							for(i=0; i<FORWARD_PACKET_BANK_SIZE; i++)
    cae0:	2b06      	cmp	r3, #6
    cae2:	d1f6      	bne.n	cad2 <P2PTasks+0x81a>
    cae4:	e7e0      	b.n	caa8 <P2PTasks+0x7f0>
								if(forwardMessages[i].fromEDToED == 0)
    cae6:	2300      	movs	r3, #0
    cae8:	4698      	mov	r8, r3
    caea:	248a      	movs	r4, #138	; 0x8a
    caec:	0064      	lsls	r4, r4, #1
    caee:	4643      	mov	r3, r8
    caf0:	435c      	muls	r4, r3
									memcpy(forwardMessages[i].destAddress, ConnectionTable[ed_index].Address, LONG_ADDR_LEN);
    caf2:	1d26      	adds	r6, r4, #4
    caf4:	4bb7      	ldr	r3, [pc, #732]	; (cdd4 <P2PTasks+0xb1c>)
    caf6:	469a      	mov	sl, r3
    caf8:	0033      	movs	r3, r6
    cafa:	4453      	add	r3, sl
    cafc:	0018      	movs	r0, r3
    cafe:	9306      	str	r3, [sp, #24]
    cb00:	013d      	lsls	r5, r7, #4
    cb02:	3504      	adds	r5, #4
    cb04:	4bbb      	ldr	r3, [pc, #748]	; (cdf4 <P2PTasks+0xb3c>)
    cb06:	18ed      	adds	r5, r5, r3
    cb08:	2208      	movs	r2, #8
    cb0a:	0029      	movs	r1, r5
    cb0c:	4bba      	ldr	r3, [pc, #744]	; (cdf8 <P2PTasks+0xb40>)
    cb0e:	4798      	blx	r3
									forwardMessages[i].msg[dataLen++] = rxMessage.SourceAddress[0];    // Unique address of EDy (DEST ED)
    cb10:	49b5      	ldr	r1, [pc, #724]	; (cde8 <P2PTasks+0xb30>)
    cb12:	684a      	ldr	r2, [r1, #4]
    cb14:	7810      	ldrb	r0, [r2, #0]
    cb16:	4653      	mov	r3, sl
    cb18:	191b      	adds	r3, r3, r4
    cb1a:	7558      	strb	r0, [r3, #21]
									forwardMessages[i].msg[dataLen++] = rxMessage.SourceAddress[1];    // Unique address of EDy (DEST ED)
    cb1c:	7850      	ldrb	r0, [r2, #1]
    cb1e:	7598      	strb	r0, [r3, #22]
									forwardMessages[i].msg[dataLen++] = rxMessage.SourceAddress[2];    // Unique address of EDy (DEST ED)
    cb20:	7892      	ldrb	r2, [r2, #2]
    cb22:	75da      	strb	r2, [r3, #23]
									for(uint8_t j = 4; j < rxMessage.PayloadSize; j++)
    cb24:	7b0b      	ldrb	r3, [r1, #12]
    cb26:	2b04      	cmp	r3, #4
    cb28:	d945      	bls.n	cbb6 <P2PTasks+0x8fe>
    cb2a:	464a      	mov	r2, r9
    cb2c:	1d10      	adds	r0, r2, #4
    cb2e:	0021      	movs	r1, r4
    cb30:	3118      	adds	r1, #24
    cb32:	4aa8      	ldr	r2, [pc, #672]	; (cdd4 <P2PTasks+0xb1c>)
    cb34:	188a      	adds	r2, r1, r2
    cb36:	1f59      	subs	r1, r3, #5
    cb38:	b2c9      	uxtb	r1, r1
    cb3a:	3105      	adds	r1, #5
    cb3c:	4449      	add	r1, r9
										forwardMessages[i].msg[dataLen++] = rxMessage.Payload[j];
    cb3e:	7806      	ldrb	r6, [r0, #0]
    cb40:	7016      	strb	r6, [r2, #0]
    cb42:	3001      	adds	r0, #1
    cb44:	3201      	adds	r2, #1
									for(uint8_t j = 4; j < rxMessage.PayloadSize; j++)
    cb46:	4288      	cmp	r0, r1
    cb48:	d1f9      	bne.n	cb3e <P2PTasks+0x886>
    cb4a:	3b01      	subs	r3, #1
    cb4c:	b2db      	uxtb	r3, r3
									forwardMessages[i].msgLength = dataLen;
    cb4e:	218a      	movs	r1, #138	; 0x8a
    cb50:	0049      	lsls	r1, r1, #1
    cb52:	4642      	mov	r2, r8
    cb54:	4351      	muls	r1, r2
    cb56:	4a9f      	ldr	r2, [pc, #636]	; (cdd4 <P2PTasks+0xb1c>)
    cb58:	1852      	adds	r2, r2, r1
    cb5a:	7513      	strb	r3, [r2, #20]
									if((ConnectionTable[ed_index].status.bits.isValid) && (ConnectionTable[ed_index].status.bits.RXOnWhenIdle == 0))
    cb5c:	0139      	lsls	r1, r7, #4
    cb5e:	4aa5      	ldr	r2, [pc, #660]	; (cdf4 <P2PTasks+0xb3c>)
    cb60:	1852      	adds	r2, r2, r1
    cb62:	7b12      	ldrb	r2, [r2, #12]
    cb64:	09d2      	lsrs	r2, r2, #7
    cb66:	d028      	beq.n	cbba <P2PTasks+0x902>
    cb68:	4aa2      	ldr	r2, [pc, #648]	; (cdf4 <P2PTasks+0xb3c>)
    cb6a:	1857      	adds	r7, r2, r1
    cb6c:	7b3a      	ldrb	r2, [r7, #12]
    cb6e:	07d2      	lsls	r2, r2, #31
    cb70:	d423      	bmi.n	cbba <P2PTasks+0x902>
										forwardMessages[i].confCallback = NULL;
    cb72:	4f98      	ldr	r7, [pc, #608]	; (cdd4 <P2PTasks+0xb1c>)
    cb74:	258a      	movs	r5, #138	; 0x8a
    cb76:	006d      	lsls	r5, r5, #1
    cb78:	4643      	mov	r3, r8
    cb7a:	435d      	muls	r5, r3
    cb7c:	2600      	movs	r6, #0
    cb7e:	51ee      	str	r6, [r5, r7]
										forwardMessages[i].ackReq = true;
    cb80:	197d      	adds	r5, r7, r5
    cb82:	2301      	movs	r3, #1
    cb84:	4699      	mov	r9, r3
    cb86:	742b      	strb	r3, [r5, #16]
										printf("Indirect message Queued\n\r");
    cb88:	489c      	ldr	r0, [pc, #624]	; (cdfc <P2PTasks+0xb44>)
    cb8a:	4b96      	ldr	r3, [pc, #600]	; (cde4 <P2PTasks+0xb2c>)
    cb8c:	4798      	blx	r3
										IndirectPacket(false, myPANID, forwardMessages[i].destAddress, false, false, forwardMessages[i].msgLength, forwardMessages[i].msg, 10, true, appAckWaitDataCallback);
    cb8e:	4b9c      	ldr	r3, [pc, #624]	; (ce00 <P2PTasks+0xb48>)
    cb90:	9305      	str	r3, [sp, #20]
    cb92:	464b      	mov	r3, r9
    cb94:	9304      	str	r3, [sp, #16]
    cb96:	3309      	adds	r3, #9
    cb98:	9303      	str	r3, [sp, #12]
    cb9a:	3415      	adds	r4, #21
    cb9c:	19e4      	adds	r4, r4, r7
    cb9e:	9402      	str	r4, [sp, #8]
    cba0:	7d2b      	ldrb	r3, [r5, #20]
    cba2:	9301      	str	r3, [sp, #4]
    cba4:	9600      	str	r6, [sp, #0]
    cba6:	0033      	movs	r3, r6
    cba8:	9a06      	ldr	r2, [sp, #24]
    cbaa:	4996      	ldr	r1, [pc, #600]	; (ce04 <P2PTasks+0xb4c>)
    cbac:	8809      	ldrh	r1, [r1, #0]
    cbae:	0030      	movs	r0, r6
    cbb0:	4c95      	ldr	r4, [pc, #596]	; (ce08 <P2PTasks+0xb50>)
    cbb2:	47a0      	blx	r4
    cbb4:	e778      	b.n	caa8 <P2PTasks+0x7f0>
									forwardMessages[i].msg[dataLen++] = rxMessage.SourceAddress[2];    // Unique address of EDy (DEST ED)
    cbb6:	2303      	movs	r3, #3
    cbb8:	e7c9      	b.n	cb4e <P2PTasks+0x896>
										forwardMessages[i].fromEDToED = 1;
    cbba:	4886      	ldr	r0, [pc, #536]	; (cdd4 <P2PTasks+0xb1c>)
    cbbc:	228a      	movs	r2, #138	; 0x8a
    cbbe:	0052      	lsls	r2, r2, #1
    cbc0:	4641      	mov	r1, r8
    cbc2:	434a      	muls	r2, r1
    cbc4:	1882      	adds	r2, r0, r2
    cbc6:	2101      	movs	r1, #1
    cbc8:	7491      	strb	r1, [r2, #18]
										SendPacket(false, myPANID, ConnectionTable[ed_index].Address, false, false, forwardMessages[i].msgLength, forwardMessages[i].msg, 1, true, appAckWaitDataCallback);
    cbca:	4a8d      	ldr	r2, [pc, #564]	; (ce00 <P2PTasks+0xb48>)
    cbcc:	9205      	str	r2, [sp, #20]
    cbce:	9104      	str	r1, [sp, #16]
    cbd0:	9103      	str	r1, [sp, #12]
    cbd2:	3415      	adds	r4, #21
    cbd4:	1824      	adds	r4, r4, r0
    cbd6:	9402      	str	r4, [sp, #8]
    cbd8:	9301      	str	r3, [sp, #4]
    cbda:	2000      	movs	r0, #0
    cbdc:	9000      	str	r0, [sp, #0]
    cbde:	0003      	movs	r3, r0
    cbe0:	002a      	movs	r2, r5
    cbe2:	4988      	ldr	r1, [pc, #544]	; (ce04 <P2PTasks+0xb4c>)
    cbe4:	8809      	ldrh	r1, [r1, #0]
    cbe6:	4c89      	ldr	r4, [pc, #548]	; (ce0c <P2PTasks+0xb54>)
    cbe8:	47a0      	blx	r4
										++FW_Stat;
    cbea:	4a89      	ldr	r2, [pc, #548]	; (ce10 <P2PTasks+0xb58>)
    cbec:	7813      	ldrb	r3, [r2, #0]
    cbee:	3301      	adds	r3, #1
    cbf0:	b2db      	uxtb	r3, r3
    cbf2:	7013      	strb	r3, [r2, #0]
    cbf4:	e758      	b.n	caa8 <P2PTasks+0x7f0>
					if (PAN_COORD == role)
    cbf6:	4b78      	ldr	r3, [pc, #480]	; (cdd8 <P2PTasks+0xb20>)
    cbf8:	781b      	ldrb	r3, [r3, #0]
    cbfa:	2b01      	cmp	r3, #1
    cbfc:	d002      	beq.n	cc04 <P2PTasks+0x94c>
				MiMAC_DiscardPacket();
    cbfe:	4b77      	ldr	r3, [pc, #476]	; (cddc <P2PTasks+0xb24>)
    cc00:	4798      	blx	r3
				break;
    cc02:	e0ce      	b.n	cda2 <P2PTasks+0xaea>
							if (ConnectionTable[p].Address[0] == rxMessage.SourceAddress[0] && ConnectionTable[p].Address[1] == rxMessage.SourceAddress[1]
    cc04:	4b78      	ldr	r3, [pc, #480]	; (cde8 <P2PTasks+0xb30>)
    cc06:	685f      	ldr	r7, [r3, #4]
    cc08:	783c      	ldrb	r4, [r7, #0]
    cc0a:	4b82      	ldr	r3, [pc, #520]	; (ce14 <P2PTasks+0xb5c>)
    cc0c:	2200      	movs	r2, #0
    cc0e:	e003      	b.n	cc18 <P2PTasks+0x960>
    cc10:	3201      	adds	r2, #1
    cc12:	3310      	adds	r3, #16
						for (p=0  ; p < CONNECTION_SIZE ; p++)
    cc14:	2a14      	cmp	r2, #20
    cc16:	d0f2      	beq.n	cbfe <P2PTasks+0x946>
							if (ConnectionTable[p].Address[0] == rxMessage.SourceAddress[0] && ConnectionTable[p].Address[1] == rxMessage.SourceAddress[1]
    cc18:	7819      	ldrb	r1, [r3, #0]
    cc1a:	42a1      	cmp	r1, r4
    cc1c:	d1f8      	bne.n	cc10 <P2PTasks+0x958>
    cc1e:	785e      	ldrb	r6, [r3, #1]
    cc20:	7879      	ldrb	r1, [r7, #1]
    cc22:	428e      	cmp	r6, r1
    cc24:	d1f4      	bne.n	cc10 <P2PTasks+0x958>
							&& ConnectionTable[p].Address[2] == rxMessage.SourceAddress[2])
    cc26:	789d      	ldrb	r5, [r3, #2]
    cc28:	78b9      	ldrb	r1, [r7, #2]
    cc2a:	428d      	cmp	r5, r1
    cc2c:	d1f0      	bne.n	cc10 <P2PTasks+0x958>
								ConnectionTable[p].link_status++;
    cc2e:	0110      	lsls	r0, r2, #4
    cc30:	4b70      	ldr	r3, [pc, #448]	; (cdf4 <P2PTasks+0xb3c>)
    cc32:	1818      	adds	r0, r3, r0
    cc34:	7b83      	ldrb	r3, [r0, #14]
    cc36:	3301      	adds	r3, #1
    cc38:	7383      	strb	r3, [r0, #14]
								break;
    cc3a:	e7e0      	b.n	cbfe <P2PTasks+0x946>
                            if( rxMessage.Payload[1] == STATUS_SUCCESS )
    cc3c:	784b      	ldrb	r3, [r1, #1]
    cc3e:	2b00      	cmp	r3, #0
    cc40:	d11f      	bne.n	cc82 <P2PTasks+0x9ca>
                                        if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    cc42:	4b69      	ldr	r3, [pc, #420]	; (cde8 <P2PTasks+0xb30>)
    cc44:	685b      	ldr	r3, [r3, #4]
    cc46:	9307      	str	r3, [sp, #28]
    cc48:	4f72      	ldr	r7, [pc, #456]	; (ce14 <P2PTasks+0xb5c>)
    cc4a:	2400      	movs	r4, #0
                                    if( ConnectionTable[i].status.bits.isValid )
    cc4c:	4d69      	ldr	r5, [pc, #420]	; (cdf4 <P2PTasks+0xb3c>)
                                        if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    cc4e:	4e72      	ldr	r6, [pc, #456]	; (ce18 <P2PTasks+0xb60>)
    cc50:	e003      	b.n	cc5a <P2PTasks+0x9a2>
    cc52:	3401      	adds	r4, #1
    cc54:	3710      	adds	r7, #16
                                for(i = 0; i < CONNECTION_SIZE; i++)
    cc56:	2c14      	cmp	r4, #20
    cc58:	d013      	beq.n	cc82 <P2PTasks+0x9ca>
                                    if( ConnectionTable[i].status.bits.isValid )
    cc5a:	9406      	str	r4, [sp, #24]
    cc5c:	0123      	lsls	r3, r4, #4
    cc5e:	18eb      	adds	r3, r5, r3
    cc60:	7b1b      	ldrb	r3, [r3, #12]
    cc62:	09db      	lsrs	r3, r3, #7
    cc64:	d0f5      	beq.n	cc52 <P2PTasks+0x99a>
                                        if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    cc66:	0039      	movs	r1, r7
    cc68:	9807      	ldr	r0, [sp, #28]
    cc6a:	47b0      	blx	r6
    cc6c:	2800      	cmp	r0, #0
    cc6e:	d0f0      	beq.n	cc52 <P2PTasks+0x99a>
                                            ConnectionTable[i].status.Val = 0;
    cc70:	9b06      	ldr	r3, [sp, #24]
    cc72:	011d      	lsls	r5, r3, #4
    cc74:	4b5f      	ldr	r3, [pc, #380]	; (cdf4 <P2PTasks+0xb3c>)
    cc76:	195d      	adds	r5, r3, r5
    cc78:	2300      	movs	r3, #0
    cc7a:	732b      	strb	r3, [r5, #12]
												PDS_Store(PDS_CONNECTION_TABLE_ID);
    cc7c:	2005      	movs	r0, #5
    cc7e:	4b67      	ldr	r3, [pc, #412]	; (ce1c <P2PTasks+0xb64>)
    cc80:	4798      	blx	r3
                        MiMAC_DiscardPacket();
    cc82:	4b56      	ldr	r3, [pc, #344]	; (cddc <P2PTasks+0xb24>)
    cc84:	4798      	blx	r3
                        break;
    cc86:	e08c      	b.n	cda2 <P2PTasks+0xaea>
                            if(role != PAN_COORD)
    cc88:	4b53      	ldr	r3, [pc, #332]	; (cdd8 <P2PTasks+0xb20>)
    cc8a:	781b      	ldrb	r3, [r3, #0]
    cc8c:	2b01      	cmp	r3, #1
    cc8e:	d002      	beq.n	cc96 <P2PTasks+0x9de>
								MiMAC_DiscardPacket();
    cc90:	4b52      	ldr	r3, [pc, #328]	; (cddc <P2PTasks+0xb24>)
    cc92:	4798      	blx	r3
								break;
    cc94:	e085      	b.n	cda2 <P2PTasks+0xaea>
							if(FW_Stat)
    cc96:	4b5e      	ldr	r3, [pc, #376]	; (ce10 <P2PTasks+0xb58>)
    cc98:	781b      	ldrb	r3, [r3, #0]
    cc9a:	2b00      	cmp	r3, #0
    cc9c:	d002      	beq.n	cca4 <P2PTasks+0x9ec>
								MiMAC_DiscardPacket();
    cc9e:	4b4f      	ldr	r3, [pc, #316]	; (cddc <P2PTasks+0xb24>)
    cca0:	4798      	blx	r3
								break;
    cca2:	e07e      	b.n	cda2 <P2PTasks+0xaea>
                            dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_TIME_SYNC_DATA_PACKET));
    cca4:	20e0      	movs	r0, #224	; 0xe0
    cca6:	4b5e      	ldr	r3, [pc, #376]	; (ce20 <P2PTasks+0xb68>)
    cca8:	4798      	blx	r3
    ccaa:	1e06      	subs	r6, r0, #0
                            if (NULL == dataPtr)
    ccac:	d101      	bne.n	ccb2 <P2PTasks+0x9fa>
    ccae:	f7ff fb5f 	bl	c370 <P2PTasks+0xb8>
                                    if( isSameAddress(indirectMessages[i].DestAddress.DestLongAddress, rxMessage.SourceAddress) )
    ccb2:	4b4d      	ldr	r3, [pc, #308]	; (cde8 <P2PTasks+0xb30>)
    ccb4:	685c      	ldr	r4, [r3, #4]
                                if( indirectMessages[i].flags.bits.isValid )
    ccb6:	4b5b      	ldr	r3, [pc, #364]	; (ce24 <P2PTasks+0xb6c>)
    ccb8:	7e9b      	ldrb	r3, [r3, #26]
    ccba:	07db      	lsls	r3, r3, #31
    ccbc:	d505      	bpl.n	ccca <P2PTasks+0xa12>
                                    if( isSameAddress(indirectMessages[i].DestAddress.DestLongAddress, rxMessage.SourceAddress) )
    ccbe:	0021      	movs	r1, r4
    ccc0:	4859      	ldr	r0, [pc, #356]	; (ce28 <P2PTasks+0xb70>)
    ccc2:	4b55      	ldr	r3, [pc, #340]	; (ce18 <P2PTasks+0xb60>)
    ccc4:	4798      	blx	r3
    ccc6:	2800      	cmp	r0, #0
    ccc8:	d11e      	bne.n	cd08 <P2PTasks+0xa50>
                                if( indirectMessages[i].flags.bits.isValid )
    ccca:	239d      	movs	r3, #157	; 0x9d
    cccc:	005b      	lsls	r3, r3, #1
    ccce:	4a55      	ldr	r2, [pc, #340]	; (ce24 <P2PTasks+0xb6c>)
    ccd0:	5cd3      	ldrb	r3, [r2, r3]
    ccd2:	07db      	lsls	r3, r3, #31
    ccd4:	d507      	bpl.n	cce6 <P2PTasks+0xa2e>
                                    if( isSameAddress(indirectMessages[i].DestAddress.DestLongAddress, rxMessage.SourceAddress) )
    ccd6:	0021      	movs	r1, r4
    ccd8:	4854      	ldr	r0, [pc, #336]	; (ce2c <P2PTasks+0xb74>)
    ccda:	4b4f      	ldr	r3, [pc, #316]	; (ce18 <P2PTasks+0xb60>)
    ccdc:	4798      	blx	r3
    ccde:	4a53      	ldr	r2, [pc, #332]	; (ce2c <P2PTasks+0xb74>)
                                if( indirectMessages[i].flags.bits.isValid )
    cce0:	2501      	movs	r5, #1
                                    if( isSameAddress(indirectMessages[i].DestAddress.DestLongAddress, rxMessage.SourceAddress) )
    cce2:	2800      	cmp	r0, #0
    cce4:	d112      	bne.n	cd0c <P2PTasks+0xa54>
                                        SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, isCommand, false, 
    cce6:	4b40      	ldr	r3, [pc, #256]	; (cde8 <P2PTasks+0xb30>)
    cce8:	8859      	ldrh	r1, [r3, #2]
    ccea:	4b51      	ldr	r3, [pc, #324]	; (ce30 <P2PTasks+0xb78>)
    ccec:	9305      	str	r3, [sp, #20]
    ccee:	2300      	movs	r3, #0
    ccf0:	9304      	str	r3, [sp, #16]
    ccf2:	9303      	str	r3, [sp, #12]
    ccf4:	9602      	str	r6, [sp, #8]
    ccf6:	9301      	str	r3, [sp, #4]
    ccf8:	9300      	str	r3, [sp, #0]
    ccfa:	0022      	movs	r2, r4
    ccfc:	2000      	movs	r0, #0
    ccfe:	4c43      	ldr	r4, [pc, #268]	; (ce0c <P2PTasks+0xb54>)
    cd00:	47a0      	blx	r4
                            MiMAC_DiscardPacket();
    cd02:	4b36      	ldr	r3, [pc, #216]	; (cddc <P2PTasks+0xb24>)
    cd04:	4798      	blx	r3
                        break;
    cd06:	e04c      	b.n	cda2 <P2PTasks+0xaea>
                                    if( isSameAddress(indirectMessages[i].DestAddress.DestLongAddress, rxMessage.SourceAddress) )
    cd08:	4a47      	ldr	r2, [pc, #284]	; (ce28 <P2PTasks+0xb70>)
                                if( indirectMessages[i].flags.bits.isValid )
    cd0a:	2500      	movs	r5, #0
                                        for(j = 0; j < indirectMessages[i].PayLoadSize; j++)
    cd0c:	2090      	movs	r0, #144	; 0x90
    cd0e:	0040      	lsls	r0, r0, #1
    cd10:	4368      	muls	r0, r5
    cd12:	4944      	ldr	r1, [pc, #272]	; (ce24 <P2PTasks+0xb6c>)
    cd14:	1809      	adds	r1, r1, r0
    cd16:	7ec9      	ldrb	r1, [r1, #27]
    cd18:	2900      	cmp	r1, #0
    cd1a:	d010      	beq.n	cd3e <P2PTasks+0xa86>
    cd1c:	2000      	movs	r0, #0
                                            dataPtr[dataLen++] =indirectMessages[i].PayLoad[j];
    cd1e:	00eb      	lsls	r3, r5, #3
    cd20:	195b      	adds	r3, r3, r5
    cd22:	015b      	lsls	r3, r3, #5
    cd24:	493f      	ldr	r1, [pc, #252]	; (ce24 <P2PTasks+0xb6c>)
    cd26:	18cb      	adds	r3, r1, r3
                                        for(j = 0; j < indirectMessages[i].PayLoadSize; j++)
    cd28:	001c      	movs	r4, r3
    cd2a:	341b      	adds	r4, #27
                                            dataPtr[dataLen++] =indirectMessages[i].PayLoad[j];
    cd2c:	1c41      	adds	r1, r0, #1
    cd2e:	b2c9      	uxtb	r1, r1
    cd30:	181f      	adds	r7, r3, r0
    cd32:	7f3f      	ldrb	r7, [r7, #28]
    cd34:	5437      	strb	r7, [r6, r0]
    cd36:	0008      	movs	r0, r1
                                        for(j = 0; j < indirectMessages[i].PayLoadSize; j++)
    cd38:	7827      	ldrb	r7, [r4, #0]
    cd3a:	428f      	cmp	r7, r1
    cd3c:	d8f6      	bhi.n	cd2c <P2PTasks+0xa74>
                                            SendPacket(false, indirectMessages[i].DestPANID, indirectMessages[i].DestAddress.DestLongAddress, isCommand, (bool)indirectMessages[i].flags.bits.isSecured,
    cd3e:	2490      	movs	r4, #144	; 0x90
    cd40:	0064      	lsls	r4, r4, #1
    cd42:	4365      	muls	r5, r4
    cd44:	4c37      	ldr	r4, [pc, #220]	; (ce24 <P2PTasks+0xb6c>)
    cd46:	1964      	adds	r4, r4, r5
    cd48:	0023      	movs	r3, r4
    cd4a:	331d      	adds	r3, #29
    cd4c:	33ff      	adds	r3, #255	; 0xff
    cd4e:	681b      	ldr	r3, [r3, #0]
    cd50:	9305      	str	r3, [sp, #20]
    cd52:	2500      	movs	r5, #0
    cd54:	9504      	str	r5, [sp, #16]
    cd56:	0023      	movs	r3, r4
    cd58:	331c      	adds	r3, #28
    cd5a:	33ff      	adds	r3, #255	; 0xff
    cd5c:	781b      	ldrb	r3, [r3, #0]
    cd5e:	9303      	str	r3, [sp, #12]
    cd60:	9602      	str	r6, [sp, #8]
    cd62:	9101      	str	r1, [sp, #4]
    cd64:	7ea3      	ldrb	r3, [r4, #26]
    cd66:	071b      	lsls	r3, r3, #28
    cd68:	0fdb      	lsrs	r3, r3, #31
    cd6a:	9300      	str	r3, [sp, #0]
    cd6c:	002b      	movs	r3, r5
    cd6e:	88a1      	ldrh	r1, [r4, #4]
    cd70:	0028      	movs	r0, r5
    cd72:	4e26      	ldr	r6, [pc, #152]	; (ce0c <P2PTasks+0xb54>)
    cd74:	47b0      	blx	r6
										  ++FW_Stat;
    cd76:	4a26      	ldr	r2, [pc, #152]	; (ce10 <P2PTasks+0xb58>)
    cd78:	7813      	ldrb	r3, [r2, #0]
    cd7a:	3301      	adds	r3, #1
    cd7c:	b2db      	uxtb	r3, r3
    cd7e:	7013      	strb	r3, [r2, #0]
                                        indirectMessages[i].flags.Val = 0;   
    cd80:	76a5      	strb	r5, [r4, #26]
                                        goto END_OF_SENDING_INDIRECT_MESSAGE;    
    cd82:	e7be      	b.n	cd02 <P2PTasks+0xa4a>
            P2PStatus.bits.RxHasUserData = 1;
    cd84:	4c2b      	ldr	r4, [pc, #172]	; (ce34 <P2PTasks+0xb7c>)
    cd86:	7823      	ldrb	r3, [r4, #0]
    cd88:	2208      	movs	r2, #8
    cd8a:	4313      	orrs	r3, r2
    cd8c:	7023      	strb	r3, [r4, #0]
			pktRxcallback(&rxMessage);
    cd8e:	4b2a      	ldr	r3, [pc, #168]	; (ce38 <P2PTasks+0xb80>)
    cd90:	681b      	ldr	r3, [r3, #0]
    cd92:	4815      	ldr	r0, [pc, #84]	; (cde8 <P2PTasks+0xb30>)
    cd94:	4798      	blx	r3
			P2PStatus.bits.RxHasUserData = 0;
    cd96:	7823      	ldrb	r3, [r4, #0]
    cd98:	2208      	movs	r2, #8
    cd9a:	4393      	bics	r3, r2
    cd9c:	7023      	strb	r3, [r4, #0]
			MiMAC_DiscardPacket();
    cd9e:	4b0f      	ldr	r3, [pc, #60]	; (cddc <P2PTasks+0xb24>)
    cda0:	4798      	blx	r3
        if( rxMessage.PayloadSize == 0  || P2PStatus.bits.SearchConnection || P2PStatus.bits.Resync )
    cda2:	4b11      	ldr	r3, [pc, #68]	; (cde8 <P2PTasks+0xb30>)
    cda4:	7b1b      	ldrb	r3, [r3, #12]
    cda6:	2b00      	cmp	r3, #0
    cda8:	d009      	beq.n	cdbe <P2PTasks+0xb06>
    cdaa:	4b22      	ldr	r3, [pc, #136]	; (ce34 <P2PTasks+0xb7c>)
    cdac:	781b      	ldrb	r3, [r3, #0]
    cdae:	06db      	lsls	r3, r3, #27
    cdb0:	d405      	bmi.n	cdbe <P2PTasks+0xb06>
    cdb2:	4b20      	ldr	r3, [pc, #128]	; (ce34 <P2PTasks+0xb7c>)
    cdb4:	781b      	ldrb	r3, [r3, #0]
    cdb6:	069b      	lsls	r3, r3, #26
    cdb8:	d401      	bmi.n	cdbe <P2PTasks+0xb06>
    cdba:	f7ff fabd 	bl	c338 <P2PTasks+0x80>
            P2PStatus.bits.RxHasUserData = 0;
    cdbe:	4a1d      	ldr	r2, [pc, #116]	; (ce34 <P2PTasks+0xb7c>)
    cdc0:	7813      	ldrb	r3, [r2, #0]
    cdc2:	2108      	movs	r1, #8
    cdc4:	438b      	bics	r3, r1
    cdc6:	7013      	strb	r3, [r2, #0]
            MiMAC_DiscardPacket();
    cdc8:	4b04      	ldr	r3, [pc, #16]	; (cddc <P2PTasks+0xb24>)
    cdca:	4798      	blx	r3
    cdcc:	f7ff fab4 	bl	c338 <P2PTasks+0x80>
    cdd0:	200004a1 	.word	0x200004a1
    cdd4:	20002870 	.word	0x20002870
    cdd8:	20003344 	.word	0x20003344
    cddc:	0000a411 	.word	0x0000a411
    cde0:	0001a164 	.word	0x0001a164
    cde4:	00017e25 	.word	0x00017e25
    cde8:	20003354 	.word	0x20003354
    cdec:	0000b0a5 	.word	0x0000b0a5
    cdf0:	20002996 	.word	0x20002996
    cdf4:	20002eec 	.word	0x20002eec
    cdf8:	0001786b 	.word	0x0001786b
    cdfc:	0001a188 	.word	0x0001a188
    ce00:	0000b5cd 	.word	0x0000b5cd
    ce04:	20003050 	.word	0x20003050
    ce08:	0000b1d9 	.word	0x0000b1d9
    ce0c:	0000b311 	.word	0x0000b311
    ce10:	2000049e 	.word	0x2000049e
    ce14:	20002ef0 	.word	0x20002ef0
    ce18:	0000b7a9 	.word	0x0000b7a9
    ce1c:	000098a5 	.word	0x000098a5
    ce20:	0000d1b5 	.word	0x0000d1b5
    ce24:	200030b4 	.word	0x200030b4
    ce28:	200030ba 	.word	0x200030ba
    ce2c:	200031da 	.word	0x200031da
    ce30:	0000792d 	.word	0x0000792d
    ce34:	200030b0 	.word	0x200030b0
    ce38:	200004b0 	.word	0x200004b0
		if((sheerPeerDevInfoTimerSet) && (role == PAN_COORD) && !checkRxDataBuffer())
    ce3c:	4b59      	ldr	r3, [pc, #356]	; (cfa4 <P2PTasks+0xcec>)
    ce3e:	4798      	blx	r3
    ce40:	2800      	cmp	r0, #0
    ce42:	d107      	bne.n	ce54 <P2PTasks+0xb9c>
			if((!FW_Stat) && (!AckReqData))
    ce44:	4b58      	ldr	r3, [pc, #352]	; (cfa8 <P2PTasks+0xcf0>)
    ce46:	781b      	ldrb	r3, [r3, #0]
    ce48:	2b00      	cmp	r3, #0
    ce4a:	d103      	bne.n	ce54 <P2PTasks+0xb9c>
    ce4c:	4b57      	ldr	r3, [pc, #348]	; (cfac <P2PTasks+0xcf4>)
    ce4e:	781b      	ldrb	r3, [r3, #0]
    ce50:	2b00      	cmp	r3, #0
    ce52:	d031      	beq.n	ceb8 <P2PTasks+0xc00>
		if((inActiveDeviceCheckTimerSet) && (role == PAN_COORD) && !checkRxDataBuffer())
    ce54:	4b56      	ldr	r3, [pc, #344]	; (cfb0 <P2PTasks+0xcf8>)
    ce56:	781b      	ldrb	r3, [r3, #0]
    ce58:	2b00      	cmp	r3, #0
    ce5a:	d101      	bne.n	ce60 <P2PTasks+0xba8>
    ce5c:	f7ff fa78 	bl	c350 <P2PTasks+0x98>
    ce60:	4b54      	ldr	r3, [pc, #336]	; (cfb4 <P2PTasks+0xcfc>)
    ce62:	781b      	ldrb	r3, [r3, #0]
    ce64:	2b01      	cmp	r3, #1
    ce66:	d001      	beq.n	ce6c <P2PTasks+0xbb4>
    ce68:	f7ff fa72 	bl	c350 <P2PTasks+0x98>
    ce6c:	4b4d      	ldr	r3, [pc, #308]	; (cfa4 <P2PTasks+0xcec>)
    ce6e:	4798      	blx	r3
    ce70:	2800      	cmp	r0, #0
    ce72:	d001      	beq.n	ce78 <P2PTasks+0xbc0>
    ce74:	f7ff fa6c 	bl	c350 <P2PTasks+0x98>
			if((!AckReqData) && (!FW_Stat))
    ce78:	4b4c      	ldr	r3, [pc, #304]	; (cfac <P2PTasks+0xcf4>)
    ce7a:	781b      	ldrb	r3, [r3, #0]
    ce7c:	2b00      	cmp	r3, #0
    ce7e:	d001      	beq.n	ce84 <P2PTasks+0xbcc>
    ce80:	f7ff fa66 	bl	c350 <P2PTasks+0x98>
    ce84:	4b48      	ldr	r3, [pc, #288]	; (cfa8 <P2PTasks+0xcf0>)
    ce86:	781b      	ldrb	r3, [r3, #0]
    ce88:	2b00      	cmp	r3, #0
    ce8a:	d001      	beq.n	ce90 <P2PTasks+0xbd8>
    ce8c:	f7ff fa60 	bl	c350 <P2PTasks+0x98>
				tmpTick.Val = MiWi_TickGet();
    ce90:	4b49      	ldr	r3, [pc, #292]	; (cfb8 <P2PTasks+0xd00>)
    ce92:	4798      	blx	r3
				if( MiWi_TickGetDiff(tmpTick, inActiveDeviceCheckTimerTick) > FIND_INACTIVE_DEVICE_TIMEOUT )
    ce94:	4b49      	ldr	r3, [pc, #292]	; (cfbc <P2PTasks+0xd04>)
    ce96:	6819      	ldr	r1, [r3, #0]
    ce98:	4b49      	ldr	r3, [pc, #292]	; (cfc0 <P2PTasks+0xd08>)
    ce9a:	4798      	blx	r3
    ce9c:	4b49      	ldr	r3, [pc, #292]	; (cfc4 <P2PTasks+0xd0c>)
    ce9e:	4298      	cmp	r0, r3
    cea0:	d801      	bhi.n	cea6 <P2PTasks+0xbee>
    cea2:	f7ff fa55 	bl	c350 <P2PTasks+0x98>
					inActiveDeviceCheckTimerTick.Val = MiWi_TickGet();
    cea6:	4b44      	ldr	r3, [pc, #272]	; (cfb8 <P2PTasks+0xd00>)
    cea8:	4798      	blx	r3
    ceaa:	4b44      	ldr	r3, [pc, #272]	; (cfbc <P2PTasks+0xd04>)
    ceac:	6018      	str	r0, [r3, #0]
    ceae:	4d46      	ldr	r5, [pc, #280]	; (cfc8 <P2PTasks+0xd10>)
    ceb0:	2400      	movs	r4, #0
		if (ConnectionTable[i].status.bits.isValid)
    ceb2:	4e46      	ldr	r6, [pc, #280]	; (cfcc <P2PTasks+0xd14>)
				ConnectionTable[i].link_status = 0;
    ceb4:	2700      	movs	r7, #0
    ceb6:	e016      	b.n	cee6 <P2PTasks+0xc2e>
				tmpTick.Val = MiWi_TickGet();
    ceb8:	4b3f      	ldr	r3, [pc, #252]	; (cfb8 <P2PTasks+0xd00>)
    ceba:	4798      	blx	r3
				if( MiWi_TickGetDiff(tmpTick, sharePeerDevInfoTimerTick) > SHARE_PEER_DEVICE_INFO_TIMEOUT )
    cebc:	4b44      	ldr	r3, [pc, #272]	; (cfd0 <P2PTasks+0xd18>)
    cebe:	6819      	ldr	r1, [r3, #0]
    cec0:	4b3f      	ldr	r3, [pc, #252]	; (cfc0 <P2PTasks+0xd08>)
    cec2:	4798      	blx	r3
    cec4:	4b43      	ldr	r3, [pc, #268]	; (cfd4 <P2PTasks+0xd1c>)
    cec6:	4298      	cmp	r0, r3
    cec8:	d9c4      	bls.n	ce54 <P2PTasks+0xb9c>
					sharePeerDevInfoTimerTick.Val = MiWi_TickGet();
    ceca:	4b3b      	ldr	r3, [pc, #236]	; (cfb8 <P2PTasks+0xd00>)
    cecc:	4798      	blx	r3
    cece:	4b40      	ldr	r3, [pc, #256]	; (cfd0 <P2PTasks+0xd18>)
    ced0:	6018      	str	r0, [r3, #0]
					MiApp_BroadcastConnectionTable();
    ced2:	4b41      	ldr	r3, [pc, #260]	; (cfd8 <P2PTasks+0xd20>)
    ced4:	4798      	blx	r3
    ced6:	e7bd      	b.n	ce54 <P2PTasks+0xb9c>
				ConnectionTable[i].link_status = 0;
    ced8:	7017      	strb	r7, [r2, #0]
    ceda:	3401      	adds	r4, #1
    cedc:	3510      	adds	r5, #16
	for (i = 0;i < CONNECTION_SIZE; i++)
    cede:	2c14      	cmp	r4, #20
    cee0:	d101      	bne.n	cee6 <P2PTasks+0xc2e>
    cee2:	f7ff fa35 	bl	c350 <P2PTasks+0x98>
    cee6:	b2e0      	uxtb	r0, r4
		if (ConnectionTable[i].status.bits.isValid)
    cee8:	0123      	lsls	r3, r4, #4
    ceea:	18f3      	adds	r3, r6, r3
    ceec:	7b1b      	ldrb	r3, [r3, #12]
    ceee:	09db      	lsrs	r3, r3, #7
    cef0:	d0f3      	beq.n	ceda <P2PTasks+0xc22>
    cef2:	002a      	movs	r2, r5
			if (ConnectionTable[i].link_status == 0 && ConnectionTable[i].permanent_connections != 0xFF)
    cef4:	782b      	ldrb	r3, [r5, #0]
    cef6:	2b00      	cmp	r3, #0
    cef8:	d1ee      	bne.n	ced8 <P2PTasks+0xc20>
    cefa:	786b      	ldrb	r3, [r5, #1]
    cefc:	2bff      	cmp	r3, #255	; 0xff
    cefe:	d0eb      	beq.n	ced8 <P2PTasks+0xc20>
				MiApp_RemoveConnection(i);
    cf00:	4b36      	ldr	r3, [pc, #216]	; (cfdc <P2PTasks+0xd24>)
    cf02:	4798      	blx	r3
    cf04:	e7e9      	b.n	ceda <P2PTasks+0xc22>
			if((!AckReqData && !SwAckReq && !checkRxDataBuffer() && !SendData))
    cf06:	4b27      	ldr	r3, [pc, #156]	; (cfa4 <P2PTasks+0xcec>)
    cf08:	4798      	blx	r3
    cf0a:	2800      	cmp	r0, #0
    cf0c:	d001      	beq.n	cf12 <P2PTasks+0xc5a>
    cf0e:	f7ff fa2d 	bl	c36c <P2PTasks+0xb4>
    cf12:	4b33      	ldr	r3, [pc, #204]	; (cfe0 <P2PTasks+0xd28>)
    cf14:	781b      	ldrb	r3, [r3, #0]
    cf16:	2b00      	cmp	r3, #0
    cf18:	d001      	beq.n	cf1e <P2PTasks+0xc66>
    cf1a:	f7ff fa27 	bl	c36c <P2PTasks+0xb4>
				tmpTick.Val = MiWi_TickGet();
    cf1e:	4b26      	ldr	r3, [pc, #152]	; (cfb8 <P2PTasks+0xd00>)
    cf20:	4798      	blx	r3
				if( MiWi_TickGetDiff(tmpTick, linkStatusTimerTick) > LINK_STATUS_TIMEOUT )
    cf22:	4b30      	ldr	r3, [pc, #192]	; (cfe4 <P2PTasks+0xd2c>)
    cf24:	6819      	ldr	r1, [r3, #0]
    cf26:	4b26      	ldr	r3, [pc, #152]	; (cfc0 <P2PTasks+0xd08>)
    cf28:	4798      	blx	r3
    cf2a:	4b2a      	ldr	r3, [pc, #168]	; (cfd4 <P2PTasks+0xd1c>)
    cf2c:	4298      	cmp	r0, r3
    cf2e:	d801      	bhi.n	cf34 <P2PTasks+0xc7c>
    cf30:	f7ff fa1c 	bl	c36c <P2PTasks+0xb4>
					linkStatusTimerTick.Val = MiWi_TickGet();
    cf34:	4b20      	ldr	r3, [pc, #128]	; (cfb8 <P2PTasks+0xd00>)
    cf36:	4798      	blx	r3
    cf38:	4b2a      	ldr	r3, [pc, #168]	; (cfe4 <P2PTasks+0xd2c>)
    cf3a:	6018      	str	r0, [r3, #0]
					LinkStatus = true;
    cf3c:	2201      	movs	r2, #1
    cf3e:	4b2a      	ldr	r3, [pc, #168]	; (cfe8 <P2PTasks+0xd30>)
    cf40:	701a      	strb	r2, [r3, #0]
	dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_CMD_IAM_ALIVE));
    cf42:	2010      	movs	r0, #16
    cf44:	4b29      	ldr	r3, [pc, #164]	; (cfec <P2PTasks+0xd34>)
    cf46:	4798      	blx	r3
    cf48:	1e04      	subs	r4, r0, #0
	if (NULL == dataPtr)
    cf4a:	d101      	bne.n	cf50 <P2PTasks+0xc98>
    cf4c:	f7ff fa0e 	bl	c36c <P2PTasks+0xb4>
	dataPtr[dataLen++] = CMD_IAM_ALIVE;
    cf50:	237a      	movs	r3, #122	; 0x7a
    cf52:	7003      	strb	r3, [r0, #0]
	uint8_t i = PHY_RandomReq();
    cf54:	4b26      	ldr	r3, [pc, #152]	; (cff0 <P2PTasks+0xd38>)
    cf56:	4798      	blx	r3
	delay_ms(i*10);
    cf58:	b2c3      	uxtb	r3, r0
    cf5a:	0098      	lsls	r0, r3, #2
    cf5c:	18c0      	adds	r0, r0, r3
    cf5e:	0040      	lsls	r0, r0, #1
    cf60:	d013      	beq.n	cf8a <P2PTasks+0xcd2>
    cf62:	4b24      	ldr	r3, [pc, #144]	; (cff4 <P2PTasks+0xd3c>)
    cf64:	4798      	blx	r3
	SendPacket(false, myPANID, ConnectionTable[0].Address, true, false,
    cf66:	4b24      	ldr	r3, [pc, #144]	; (cff8 <P2PTasks+0xd40>)
    cf68:	8819      	ldrh	r1, [r3, #0]
    cf6a:	4b24      	ldr	r3, [pc, #144]	; (cffc <P2PTasks+0xd44>)
    cf6c:	9305      	str	r3, [sp, #20]
    cf6e:	2201      	movs	r2, #1
    cf70:	9204      	str	r2, [sp, #16]
    cf72:	2300      	movs	r3, #0
    cf74:	9303      	str	r3, [sp, #12]
    cf76:	9402      	str	r4, [sp, #8]
    cf78:	9201      	str	r2, [sp, #4]
    cf7a:	9300      	str	r3, [sp, #0]
    cf7c:	3301      	adds	r3, #1
    cf7e:	4a20      	ldr	r2, [pc, #128]	; (d000 <P2PTasks+0xd48>)
    cf80:	2000      	movs	r0, #0
    cf82:	4c20      	ldr	r4, [pc, #128]	; (d004 <P2PTasks+0xd4c>)
    cf84:	47a0      	blx	r4
    cf86:	f7ff f9f1 	bl	c36c <P2PTasks+0xb4>
	delay_ms(i*10);
    cf8a:	2001      	movs	r0, #1
    cf8c:	4b1e      	ldr	r3, [pc, #120]	; (d008 <P2PTasks+0xd50>)
    cf8e:	4798      	blx	r3
    cf90:	e7e9      	b.n	cf66 <P2PTasks+0xcae>
                            MiMAC_DiscardPacket();
    cf92:	4b1e      	ldr	r3, [pc, #120]	; (d00c <P2PTasks+0xd54>)
    cf94:	4798      	blx	r3
                            dataPtr[dataLen++] = CMD_P2P_CONNECTION_REMOVAL_RESPONSE;
    cf96:	2301      	movs	r3, #1
                                dataPtr[dataLen++] = STATUS_ENTRY_NOT_EXIST;
    cf98:	1c58      	adds	r0, r3, #1
    cf9a:	22f0      	movs	r2, #240	; 0xf0
    cf9c:	4641      	mov	r1, r8
    cf9e:	54ca      	strb	r2, [r1, r3]
    cfa0:	e48d      	b.n	c8be <P2PTasks+0x606>
    cfa2:	46c0      	nop			; (mov r8, r8)
    cfa4:	0000ac41 	.word	0x0000ac41
    cfa8:	2000049e 	.word	0x2000049e
    cfac:	2000048c 	.word	0x2000048c
    cfb0:	200004aa 	.word	0x200004aa
    cfb4:	20003344 	.word	0x20003344
    cfb8:	0000d3f5 	.word	0x0000d3f5
    cfbc:	2000304c 	.word	0x2000304c
    cfc0:	0000d455 	.word	0x0000d455
    cfc4:	07270e00 	.word	0x07270e00
    cfc8:	20002efa 	.word	0x20002efa
    cfcc:	20002eec 	.word	0x20002eec
    cfd0:	20003368 	.word	0x20003368
    cfd4:	00e4e1c0 	.word	0x00e4e1c0
    cfd8:	0000b3e5 	.word	0x0000b3e5
    cfdc:	0000beb9 	.word	0x0000beb9
    cfe0:	200004a0 	.word	0x200004a0
    cfe4:	2000334c 	.word	0x2000334c
    cfe8:	2000049f 	.word	0x2000049f
    cfec:	0000d1b5 	.word	0x0000d1b5
    cff0:	0000b069 	.word	0x0000b069
    cff4:	00004799 	.word	0x00004799
    cff8:	20003050 	.word	0x20003050
    cffc:	0000b141 	.word	0x0000b141
    d000:	20002ef0 	.word	0x20002ef0
    d004:	0000b311 	.word	0x0000b311
    d008:	0000476d 	.word	0x0000476d
    d00c:	0000a411 	.word	0x0000a411

0000d010 <MiApp_EstablishConnection>:
    {
    d010:	b5f0      	push	{r4, r5, r6, r7, lr}
    d012:	46d6      	mov	lr, sl
    d014:	464f      	mov	r7, r9
    d016:	4646      	mov	r6, r8
    d018:	b5c0      	push	{r6, r7, lr}
    d01a:	b08a      	sub	sp, #40	; 0x28
    d01c:	231f      	movs	r3, #31
    d01e:	aa02      	add	r2, sp, #8
    d020:	4694      	mov	ip, r2
    d022:	4463      	add	r3, ip
    d024:	7018      	strb	r0, [r3, #0]
        uint8_t    tmpConnectionMode = ConnMode;
    d026:	4c40      	ldr	r4, [pc, #256]	; (d128 <MiApp_EstablishConnection+0x118>)
    d028:	7823      	ldrb	r3, [r4, #0]
    d02a:	469a      	mov	sl, r3
        tick1.Val = MiWi_TickGet();
    d02c:	4d3f      	ldr	r5, [pc, #252]	; (d12c <MiApp_EstablishConnection+0x11c>)
    d02e:	47a8      	blx	r5
    d030:	4b3f      	ldr	r3, [pc, #252]	; (d130 <MiApp_EstablishConnection+0x120>)
    d032:	6018      	str	r0, [r3, #0]
        t1.Val = MiWi_TickGet();
    d034:	47a8      	blx	r5
        t1.Val -= ONE_SECOND;
    d036:	0003      	movs	r3, r0
    d038:	4a3e      	ldr	r2, [pc, #248]	; (d134 <MiApp_EstablishConnection+0x124>)
    d03a:	4694      	mov	ip, r2
    d03c:	4463      	add	r3, ip
    d03e:	9307      	str	r3, [sp, #28]
        ConnMode = ENABLE_ALL_CONN;
    d040:	2300      	movs	r3, #0
    d042:	7023      	strb	r3, [r4, #0]
        P2PStatus.bits.SearchConnection = 1;
    d044:	4a3c      	ldr	r2, [pc, #240]	; (d138 <MiApp_EstablishConnection+0x128>)
    d046:	7813      	ldrb	r3, [r2, #0]
    d048:	2110      	movs	r1, #16
    d04a:	430b      	orrs	r3, r1
    d04c:	7013      	strb	r3, [r2, #0]
        EstConfCallback = ConfCallback;
    d04e:	4b3b      	ldr	r3, [pc, #236]	; (d13c <MiApp_EstablishConnection+0x12c>)
    d050:	9a12      	ldr	r2, [sp, #72]	; 0x48
    d052:	601a      	str	r2, [r3, #0]
        uint8_t    connectionInterval = 0;
    d054:	2400      	movs	r4, #0
        uint8_t    retry = CONNECTION_RETRY_TIMES;
    d056:	2304      	movs	r3, #4
    d058:	4698      	mov	r8, r3
        while( P2PStatus.bits.SearchConnection )
    d05a:	4b37      	ldr	r3, [pc, #220]	; (d138 <MiApp_EstablishConnection+0x128>)
    d05c:	4699      	mov	r9, r3
            t2.Val = MiWi_TickGet();
    d05e:	4d33      	ldr	r5, [pc, #204]	; (d12c <MiApp_EstablishConnection+0x11c>)
            if(( MiWi_TickGetDiff(t2, t1) > (ONE_SECOND)) || connectionReqStatus == false)
    d060:	4e37      	ldr	r6, [pc, #220]	; (d140 <MiApp_EstablishConnection+0x130>)
        while( P2PStatus.bits.SearchConnection )
    d062:	e037      	b.n	d0d4 <MiApp_EstablishConnection+0xc4>
                if( retry-- == 0 )
    d064:	4643      	mov	r3, r8
    d066:	1e5f      	subs	r7, r3, #1
    d068:	b2ff      	uxtb	r7, r7
    d06a:	2b00      	cmp	r3, #0
    d06c:	d048      	beq.n	d100 <MiApp_EstablishConnection+0xf0>
                MiApp_Set(CHANNEL, &Channel);
    d06e:	211f      	movs	r1, #31
    d070:	ab02      	add	r3, sp, #8
    d072:	469c      	mov	ip, r3
    d074:	4461      	add	r1, ip
    d076:	2000      	movs	r0, #0
    d078:	4b32      	ldr	r3, [pc, #200]	; (d144 <MiApp_EstablishConnection+0x134>)
    d07a:	4798      	blx	r3
				connectionReqStatus = true;
    d07c:	2201      	movs	r2, #1
    d07e:	4b32      	ldr	r3, [pc, #200]	; (d148 <MiApp_EstablishConnection+0x138>)
    d080:	701a      	strb	r2, [r3, #0]
                dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_P2P_CONNECTION_REQUEST));
    d082:	2010      	movs	r0, #16
    d084:	4b31      	ldr	r3, [pc, #196]	; (d14c <MiApp_EstablishConnection+0x13c>)
    d086:	4798      	blx	r3
                if (NULL == dataPtr)
    d088:	2800      	cmp	r0, #0
    d08a:	d045      	beq.n	d118 <MiApp_EstablishConnection+0x108>
                dataPtr[dataLen++] = CMD_P2P_CONNECTION_REQUEST;
    d08c:	2381      	movs	r3, #129	; 0x81
    d08e:	7003      	strb	r3, [r0, #0]
                dataPtr[dataLen++] = currentChannel;
    d090:	4b2f      	ldr	r3, [pc, #188]	; (d150 <MiApp_EstablishConnection+0x140>)
    d092:	781b      	ldrb	r3, [r3, #0]
    d094:	7043      	strb	r3, [r0, #1]
                dataPtr[dataLen++] = P2PCapacityInfo;
    d096:	4b2f      	ldr	r3, [pc, #188]	; (d154 <MiApp_EstablishConnection+0x144>)
    d098:	781b      	ldrb	r3, [r3, #0]
    d09a:	7083      	strb	r3, [r0, #2]
                            dataPtr[dataLen++] = AdditionalNodeID[i];
    d09c:	4b2e      	ldr	r3, [pc, #184]	; (d158 <MiApp_EstablishConnection+0x148>)
    d09e:	781b      	ldrb	r3, [r3, #0]
    d0a0:	70c3      	strb	r3, [r0, #3]
                        SendPacket(true, myPANID, NULL, true, false, dataLen, dataPtr,0, true, CommandConfCallback);
    d0a2:	4b2e      	ldr	r3, [pc, #184]	; (d15c <MiApp_EstablishConnection+0x14c>)
    d0a4:	8819      	ldrh	r1, [r3, #0]
    d0a6:	4b2e      	ldr	r3, [pc, #184]	; (d160 <MiApp_EstablishConnection+0x150>)
    d0a8:	9305      	str	r3, [sp, #20]
    d0aa:	2301      	movs	r3, #1
    d0ac:	9304      	str	r3, [sp, #16]
    d0ae:	2300      	movs	r3, #0
    d0b0:	9303      	str	r3, [sp, #12]
    d0b2:	9002      	str	r0, [sp, #8]
    d0b4:	2204      	movs	r2, #4
    d0b6:	9201      	str	r2, [sp, #4]
    d0b8:	9300      	str	r3, [sp, #0]
    d0ba:	3301      	adds	r3, #1
    d0bc:	2200      	movs	r2, #0
    d0be:	2001      	movs	r0, #1
    d0c0:	4c28      	ldr	r4, [pc, #160]	; (d164 <MiApp_EstablishConnection+0x154>)
    d0c2:	47a0      	blx	r4
                t1.Val = t2.Val;
    d0c4:	9b08      	ldr	r3, [sp, #32]
    d0c6:	9307      	str	r3, [sp, #28]
                if( retry-- == 0 )
    d0c8:	46b8      	mov	r8, r7
                connectionInterval = CONNECTION_INTERVAL-1;
    d0ca:	2403      	movs	r4, #3
			P2PTasks();
    d0cc:	4b26      	ldr	r3, [pc, #152]	; (d168 <MiApp_EstablishConnection+0x158>)
    d0ce:	4798      	blx	r3
			SYSTEM_RunTasks();
    d0d0:	4b26      	ldr	r3, [pc, #152]	; (d16c <MiApp_EstablishConnection+0x15c>)
    d0d2:	4798      	blx	r3
        while( P2PStatus.bits.SearchConnection )
    d0d4:	464b      	mov	r3, r9
    d0d6:	781b      	ldrb	r3, [r3, #0]
    d0d8:	06db      	lsls	r3, r3, #27
    d0da:	d518      	bpl.n	d10e <MiApp_EstablishConnection+0xfe>
            t2.Val = MiWi_TickGet();
    d0dc:	47a8      	blx	r5
    d0de:	9008      	str	r0, [sp, #32]
            if(( MiWi_TickGetDiff(t2, t1) > (ONE_SECOND)) || connectionReqStatus == false)
    d0e0:	9907      	ldr	r1, [sp, #28]
    d0e2:	47b0      	blx	r6
    d0e4:	4b22      	ldr	r3, [pc, #136]	; (d170 <MiApp_EstablishConnection+0x160>)
    d0e6:	4298      	cmp	r0, r3
    d0e8:	d803      	bhi.n	d0f2 <MiApp_EstablishConnection+0xe2>
    d0ea:	4b17      	ldr	r3, [pc, #92]	; (d148 <MiApp_EstablishConnection+0x138>)
    d0ec:	781b      	ldrb	r3, [r3, #0]
    d0ee:	2b00      	cmp	r3, #0
    d0f0:	d1ec      	bne.n	d0cc <MiApp_EstablishConnection+0xbc>
                if( connectionInterval-- > 0 )
    d0f2:	2c00      	cmp	r4, #0
    d0f4:	d0b6      	beq.n	d064 <MiApp_EstablishConnection+0x54>
    d0f6:	3c01      	subs	r4, #1
    d0f8:	b2e4      	uxtb	r4, r4
                t1.Val = t2.Val;
    d0fa:	9b08      	ldr	r3, [sp, #32]
    d0fc:	9307      	str	r3, [sp, #28]
    d0fe:	e7e9      	b.n	d0d4 <MiApp_EstablishConnection+0xc4>
                    P2PStatus.bits.SearchConnection = 0;
    d100:	4a0d      	ldr	r2, [pc, #52]	; (d138 <MiApp_EstablishConnection+0x128>)
    d102:	7813      	ldrb	r3, [r2, #0]
    d104:	2110      	movs	r1, #16
    d106:	438b      	bics	r3, r1
    d108:	7013      	strb	r3, [r2, #0]
                    return 0xFF;
    d10a:	24ff      	movs	r4, #255	; 0xff
    d10c:	e004      	b.n	d118 <MiApp_EstablishConnection+0x108>
        ConnMode = tmpConnectionMode;
    d10e:	4b06      	ldr	r3, [pc, #24]	; (d128 <MiApp_EstablishConnection+0x118>)
    d110:	4652      	mov	r2, sl
    d112:	701a      	strb	r2, [r3, #0]
        return LatestConnection;
    d114:	4b17      	ldr	r3, [pc, #92]	; (d174 <MiApp_EstablishConnection+0x164>)
    d116:	781c      	ldrb	r4, [r3, #0]
    }
    d118:	0020      	movs	r0, r4
    d11a:	b00a      	add	sp, #40	; 0x28
    d11c:	bc1c      	pop	{r2, r3, r4}
    d11e:	4690      	mov	r8, r2
    d120:	4699      	mov	r9, r3
    d122:	46a2      	mov	sl, r4
    d124:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d126:	46c0      	nop			; (mov r8, r8)
    d128:	2000001c 	.word	0x2000001c
    d12c:	0000d3f5 	.word	0x0000d3f5
    d130:	20003348 	.word	0x20003348
    d134:	fff0bdc0 	.word	0xfff0bdc0
    d138:	200030b0 	.word	0x200030b0
    d13c:	20003054 	.word	0x20003054
    d140:	0000d455 	.word	0x0000d455
    d144:	0000b971 	.word	0x0000b971
    d148:	200004a8 	.word	0x200004a8
    d14c:	0000d1b5 	.word	0x0000d1b5
    d150:	2000001d 	.word	0x2000001d
    d154:	20003045 	.word	0x20003045
    d158:	20000018 	.word	0x20000018
    d15c:	20003050 	.word	0x20003050
    d160:	0000b10d 	.word	0x0000b10d
    d164:	0000b311 	.word	0x0000b311
    d168:	0000c2b9 	.word	0x0000c2b9
    d16c:	0000eb39 	.word	0x0000eb39
    d170:	000f4240 	.word	0x000f4240
    d174:	20002ee8 	.word	0x20002ee8

0000d178 <MiMem_Init>:
* Output:		    none
*
* Overview:		    This function will initialize the Mimem buffers
********************************************************************/
void MiMem_Init(void)
{
    d178:	b510      	push	{r4, lr}
	size_t startAddress =  ALIGN((size_t)heapMem);
    d17a:	4a0b      	ldr	r2, [pc, #44]	; (d1a8 <MiMem_Init+0x30>)
    d17c:	1e50      	subs	r0, r2, #1
    d17e:	2403      	movs	r4, #3
    d180:	43a0      	bics	r0, r4
    d182:	1d01      	adds	r1, r0, #4

	/*Aligned heap is the base */
	base = (Block_t*) startAddress;
    d184:	4b09      	ldr	r3, [pc, #36]	; (d1ac <MiMem_Init+0x34>)
    d186:	6019      	str	r1, [r3, #0]
	base->size = totalFreeBytesRemaining = HEAP_SIZE - (startAddress - (size_t)heapMem);
    d188:	4253      	negs	r3, r2
    d18a:	43a3      	bics	r3, r4
    d18c:	24c0      	movs	r4, #192	; 0xc0
    d18e:	0164      	lsls	r4, r4, #5
    d190:	46a4      	mov	ip, r4
    d192:	4462      	add	r2, ip
    d194:	189b      	adds	r3, r3, r2
    d196:	4a06      	ldr	r2, [pc, #24]	; (d1b0 <MiMem_Init+0x38>)
    d198:	6013      	str	r3, [r2, #0]
    d19a:	60c3      	str	r3, [r0, #12]
	base->free = true;
    d19c:	2301      	movs	r3, #1
    d19e:	7403      	strb	r3, [r0, #16]
	base->next = NULL;
    d1a0:	2300      	movs	r3, #0
    d1a2:	6043      	str	r3, [r0, #4]
	base->prev = NULL;
    d1a4:	6083      	str	r3, [r0, #8]
}
    d1a6:	bd10      	pop	{r4, pc}
    d1a8:	200004c0 	.word	0x200004c0
    d1ac:	200004bc 	.word	0x200004bc
    d1b0:	20001cc0 	.word	0x20001cc0

0000d1b4 <MiMem_Alloc>:
*  or returns NULL if no memory available
*
* Note:			    none
********************************************************************/
void* MiMem_Alloc(uint8_t size)
{
    d1b4:	b570      	push	{r4, r5, r6, lr}
    d1b6:	0005      	movs	r5, r0
	size_t requestedSize = 0U;
	void* requestedMemPtr = NULL;

	/* Initialize the Heap */
	if (!base)
    d1b8:	4b29      	ldr	r3, [pc, #164]	; (d260 <MiMem_Alloc+0xac>)
    d1ba:	681b      	ldr	r3, [r3, #0]
    d1bc:	2b00      	cmp	r3, #0
    d1be:	d012      	beq.n	d1e6 <MiMem_Alloc+0x32>
	{
		MiMem_Init();
	}
	/* if requested size is of non zero */
	if (size)
    d1c0:	2d00      	cmp	r5, #0
    d1c2:	d047      	beq.n	d254 <MiMem_Alloc+0xa0>
	{
		requestedSize =  size + blockMetaDataSize;
		requestedSize = ALIGN(requestedSize);
    d1c4:	0029      	movs	r1, r5
    d1c6:	310f      	adds	r1, #15
    d1c8:	2303      	movs	r3, #3
    d1ca:	4399      	bics	r1, r3
    d1cc:	3104      	adds	r1, #4
		if (requestedSize <= totalFreeBytesRemaining)
    d1ce:	4b25      	ldr	r3, [pc, #148]	; (d264 <MiMem_Alloc+0xb0>)
    d1d0:	6818      	ldr	r0, [r3, #0]
    d1d2:	4281      	cmp	r1, r0
    d1d4:	d840      	bhi.n	d258 <MiMem_Alloc+0xa4>
		{
			size_t receivedSize = (size_t)~0U;
			Block_t *requestedBlock = NULL;
			Block_t *blockPtr = base;
    d1d6:	4b22      	ldr	r3, [pc, #136]	; (d260 <MiMem_Alloc+0xac>)
    d1d8:	681b      	ldr	r3, [r3, #0]

			/* Find best fit free Block */
			while (blockPtr)
    d1da:	2b00      	cmp	r3, #0
    d1dc:	d03e      	beq.n	d25c <MiMem_Alloc+0xa8>
    d1de:	2600      	movs	r6, #0
    d1e0:	2401      	movs	r4, #1
    d1e2:	4264      	negs	r4, r4
    d1e4:	e005      	b.n	d1f2 <MiMem_Alloc+0x3e>
		MiMem_Init();
    d1e6:	4b20      	ldr	r3, [pc, #128]	; (d268 <MiMem_Alloc+0xb4>)
    d1e8:	4798      	blx	r3
    d1ea:	e7e9      	b.n	d1c0 <MiMem_Alloc+0xc>
				if ((blockPtr->free) && (blockPtr->size >= requestedSize) && (blockPtr->size < receivedSize))
				{
					receivedSize = blockPtr->size;
					requestedBlock = blockPtr;
				}
				blockPtr = blockPtr->next;
    d1ec:	681b      	ldr	r3, [r3, #0]
			while (blockPtr)
    d1ee:	2b00      	cmp	r3, #0
    d1f0:	d00a      	beq.n	d208 <MiMem_Alloc+0x54>
				if ((blockPtr->free) && (blockPtr->size >= requestedSize) && (blockPtr->size < receivedSize))
    d1f2:	7b1a      	ldrb	r2, [r3, #12]
    d1f4:	2a00      	cmp	r2, #0
    d1f6:	d0f9      	beq.n	d1ec <MiMem_Alloc+0x38>
    d1f8:	689a      	ldr	r2, [r3, #8]
    d1fa:	4291      	cmp	r1, r2
    d1fc:	d8f6      	bhi.n	d1ec <MiMem_Alloc+0x38>
    d1fe:	42a2      	cmp	r2, r4
    d200:	d2f4      	bcs.n	d1ec <MiMem_Alloc+0x38>
    d202:	001e      	movs	r6, r3
					receivedSize = blockPtr->size;
    d204:	0014      	movs	r4, r2
    d206:	e7f1      	b.n	d1ec <MiMem_Alloc+0x38>
    d208:	2400      	movs	r4, #0
			}

			if (requestedBlock)
    d20a:	2e00      	cmp	r6, #0
    d20c:	d012      	beq.n	d234 <MiMem_Alloc+0x80>
			{
				if ((requestedBlock->size - requestedSize) > HEAP_MINIMUM_BLOCK_SIZE)
    d20e:	68b3      	ldr	r3, [r6, #8]
    d210:	1a5b      	subs	r3, r3, r1
    d212:	2b14      	cmp	r3, #20
    d214:	d810      	bhi.n	d238 <MiMem_Alloc+0x84>
				splitBlock (requestedBlock, requestedSize);
				requestedBlock->free = false;
    d216:	2300      	movs	r3, #0
    d218:	7333      	strb	r3, [r6, #12]
				totalFreeBytesRemaining -= requestedBlock->size;
    d21a:	68b3      	ldr	r3, [r6, #8]
    d21c:	1ac0      	subs	r0, r0, r3
    d21e:	4b11      	ldr	r3, [pc, #68]	; (d264 <MiMem_Alloc+0xb0>)
    d220:	6018      	str	r0, [r3, #0]
				requestedMemPtr = ( void* )(((uint8_t*)requestedBlock) + blockMetaDataSize);
    d222:	0034      	movs	r4, r6
    d224:	3410      	adds	r4, #16
			}
		}
	}
	if (NULL != requestedMemPtr)
    d226:	2c00      	cmp	r4, #0
    d228:	d004      	beq.n	d234 <MiMem_Alloc+0x80>
	{
		memset(requestedMemPtr, 0, size);
    d22a:	002a      	movs	r2, r5
    d22c:	2100      	movs	r1, #0
    d22e:	0020      	movs	r0, r4
    d230:	4b0e      	ldr	r3, [pc, #56]	; (d26c <MiMem_Alloc+0xb8>)
    d232:	4798      	blx	r3
	}
	return requestedMemPtr;
}
    d234:	0020      	movs	r0, r4
    d236:	bd70      	pop	{r4, r5, r6, pc}
  \param[in] size size of the memory chunk requested
  \return None.
 ******************************************************************************/
static void splitBlock(Block_t* blockTobeSplitted, size_t size)
{
	uint8_t* ptr = (uint8_t*)blockTobeSplitted + size;
    d238:	1872      	adds	r2, r6, r1
	Block_t* newBlock = (Block_t*)ptr;

	newBlock->size = blockTobeSplitted->size - size;
    d23a:	6093      	str	r3, [r2, #8]

	if (blockTobeSplitted->next)
    d23c:	6833      	ldr	r3, [r6, #0]
    d23e:	2b00      	cmp	r3, #0
    d240:	d000      	beq.n	d244 <MiMem_Alloc+0x90>
		blockTobeSplitted->next->prev = newBlock;
    d242:	605a      	str	r2, [r3, #4]

	newBlock->next = blockTobeSplitted->next;
    d244:	6833      	ldr	r3, [r6, #0]
    d246:	6013      	str	r3, [r2, #0]
	newBlock->prev = blockTobeSplitted;
    d248:	6056      	str	r6, [r2, #4]
	newBlock->free = true;
    d24a:	2301      	movs	r3, #1
    d24c:	7313      	strb	r3, [r2, #12]

	blockTobeSplitted->next = newBlock;
    d24e:	6032      	str	r2, [r6, #0]
	blockTobeSplitted->size = size;
    d250:	60b1      	str	r1, [r6, #8]
    d252:	e7e0      	b.n	d216 <MiMem_Alloc+0x62>
    d254:	2400      	movs	r4, #0
    d256:	e7ed      	b.n	d234 <MiMem_Alloc+0x80>
    d258:	2400      	movs	r4, #0
    d25a:	e7eb      	b.n	d234 <MiMem_Alloc+0x80>
			while (blockPtr)
    d25c:	2400      	movs	r4, #0
    d25e:	e7e9      	b.n	d234 <MiMem_Alloc+0x80>
    d260:	200004bc 	.word	0x200004bc
    d264:	20001cc0 	.word	0x20001cc0
    d268:	0000d179 	.word	0x0000d179
    d26c:	0001787d 	.word	0x0001787d

0000d270 <MiMem_Free>:
	Block_t* blockPtr = base;
    d270:	4b1c      	ldr	r3, [pc, #112]	; (d2e4 <MiMem_Free+0x74>)
    d272:	681b      	ldr	r3, [r3, #0]
	Block_t* freeBlockPtr = (Block_t*)((uint8_t*)ptr - (uint8_t*)blockMetaDataSize);
    d274:	3810      	subs	r0, #16
	for(; ((blockPtr != NULL) && (blockPtr != freeBlockPtr)); blockPtr = blockPtr->next);
    d276:	2b00      	cmp	r3, #0
    d278:	d030      	beq.n	d2dc <MiMem_Free+0x6c>
    d27a:	4283      	cmp	r3, r0
    d27c:	d02f      	beq.n	d2de <MiMem_Free+0x6e>
    d27e:	681b      	ldr	r3, [r3, #0]
    d280:	2b00      	cmp	r3, #0
    d282:	d02b      	beq.n	d2dc <MiMem_Free+0x6c>
    d284:	4298      	cmp	r0, r3
    d286:	d1fa      	bne.n	d27e <MiMem_Free+0xe>
		blockPtr->free = true;
    d288:	2301      	movs	r3, #1
    d28a:	7303      	strb	r3, [r0, #12]
		totalFreeBytesRemaining += blockPtr->size;
    d28c:	6881      	ldr	r1, [r0, #8]
    d28e:	4a16      	ldr	r2, [pc, #88]	; (d2e8 <MiMem_Free+0x78>)
    d290:	6813      	ldr	r3, [r2, #0]
    d292:	185b      	adds	r3, r3, r1
    d294:	6013      	str	r3, [r2, #0]
		if (blockPtr->prev && blockPtr->prev->free)
    d296:	6843      	ldr	r3, [r0, #4]
    d298:	2b00      	cmp	r3, #0
    d29a:	d00f      	beq.n	d2bc <MiMem_Free+0x4c>
    d29c:	7b1a      	ldrb	r2, [r3, #12]
    d29e:	2a00      	cmp	r2, #0
    d2a0:	d00c      	beq.n	d2bc <MiMem_Free+0x4c>
			blockPtr->prev->size += blockPtr->size;
    d2a2:	689a      	ldr	r2, [r3, #8]
    d2a4:	4694      	mov	ip, r2
    d2a6:	4461      	add	r1, ip
    d2a8:	6099      	str	r1, [r3, #8]
			if (blockPtr->next)
    d2aa:	6803      	ldr	r3, [r0, #0]
    d2ac:	2b00      	cmp	r3, #0
    d2ae:	d001      	beq.n	d2b4 <MiMem_Free+0x44>
			blockPtr->next->prev = blockPtr->prev;
    d2b0:	6842      	ldr	r2, [r0, #4]
    d2b2:	605a      	str	r2, [r3, #4]
			blockPtr->prev->next = blockPtr->next;
    d2b4:	6843      	ldr	r3, [r0, #4]
    d2b6:	6802      	ldr	r2, [r0, #0]
    d2b8:	601a      	str	r2, [r3, #0]
			blockPtr = blockPtr->prev;
    d2ba:	6840      	ldr	r0, [r0, #4]
		if (blockPtr->next && blockPtr->next->free)
    d2bc:	6803      	ldr	r3, [r0, #0]
    d2be:	2b00      	cmp	r3, #0
    d2c0:	d00c      	beq.n	d2dc <MiMem_Free+0x6c>
    d2c2:	7b1a      	ldrb	r2, [r3, #12]
    d2c4:	2a00      	cmp	r2, #0
    d2c6:	d009      	beq.n	d2dc <MiMem_Free+0x6c>
			blockPtr->size += blockPtr->next->size ;
    d2c8:	6882      	ldr	r2, [r0, #8]
    d2ca:	6899      	ldr	r1, [r3, #8]
    d2cc:	468c      	mov	ip, r1
    d2ce:	4462      	add	r2, ip
    d2d0:	6082      	str	r2, [r0, #8]
			blockPtr->next = blockPtr->next->next;
    d2d2:	681b      	ldr	r3, [r3, #0]
    d2d4:	6003      	str	r3, [r0, #0]
			if (blockPtr->next)
    d2d6:	2b00      	cmp	r3, #0
    d2d8:	d000      	beq.n	d2dc <MiMem_Free+0x6c>
			blockPtr->next->prev = blockPtr;
    d2da:	6058      	str	r0, [r3, #4]
}
    d2dc:	4770      	bx	lr
	Block_t* blockPtr = base;
    d2de:	0018      	movs	r0, r3
    d2e0:	e7d2      	b.n	d288 <MiMem_Free+0x18>
    d2e2:	46c0      	nop			; (mov r8, r8)
    d2e4:	200004bc 	.word	0x200004bc
    d2e8:	20001cc0 	.word	0x20001cc0

0000d2ec <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    d2ec:	b530      	push	{r4, r5, lr}
	if (timers) {
    d2ee:	4b14      	ldr	r3, [pc, #80]	; (d340 <placeTimer+0x54>)
    d2f0:	681d      	ldr	r5, [r3, #0]
    d2f2:	2d00      	cmp	r5, #0
    d2f4:	d01c      	beq.n	d330 <placeTimer+0x44>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    d2f6:	6882      	ldr	r2, [r0, #8]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    d2f8:	6869      	ldr	r1, [r5, #4]
    d2fa:	428a      	cmp	r2, r1
    d2fc:	d309      	bcc.n	d312 <placeTimer+0x26>
    d2fe:	002c      	movs	r4, r5
				t->timeout -= timeout;
				break;
			} else {
				timeout -= t->timeout;
    d300:	1a52      	subs	r2, r2, r1
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    d302:	6823      	ldr	r3, [r4, #0]
    d304:	2b00      	cmp	r3, #0
    d306:	d008      	beq.n	d31a <placeTimer+0x2e>
			if (timeout < t->timeout) {
    d308:	6859      	ldr	r1, [r3, #4]
    d30a:	4291      	cmp	r1, r2
    d30c:	d803      	bhi.n	d316 <placeTimer+0x2a>
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    d30e:	001c      	movs	r4, r3
    d310:	e7f6      	b.n	d300 <placeTimer+0x14>
    d312:	002b      	movs	r3, r5
		SYS_Timer_t *prev = NULL;
    d314:	2400      	movs	r4, #0
				t->timeout -= timeout;
    d316:	1a89      	subs	r1, r1, r2
    d318:	6059      	str	r1, [r3, #4]
			}

			prev = t;
		}

		timer->timeout = timeout;
    d31a:	6042      	str	r2, [r0, #4]

		if (prev) {
    d31c:	2c00      	cmp	r4, #0
    d31e:	d003      	beq.n	d328 <placeTimer+0x3c>
			timer->next = prev->next;
    d320:	6823      	ldr	r3, [r4, #0]
    d322:	6003      	str	r3, [r0, #0]
			prev->next = timer;
    d324:	6020      	str	r0, [r4, #0]
	} else {
		timer->next = NULL;
		timer->timeout = timer->interval;
		timers = timer;
	}
}
    d326:	bd30      	pop	{r4, r5, pc}
			timer->next = timers;
    d328:	6005      	str	r5, [r0, #0]
			timers = timer;
    d32a:	4b05      	ldr	r3, [pc, #20]	; (d340 <placeTimer+0x54>)
    d32c:	6018      	str	r0, [r3, #0]
    d32e:	e7fa      	b.n	d326 <placeTimer+0x3a>
		timer->next = NULL;
    d330:	2300      	movs	r3, #0
    d332:	6003      	str	r3, [r0, #0]
		timer->timeout = timer->interval;
    d334:	6883      	ldr	r3, [r0, #8]
    d336:	6043      	str	r3, [r0, #4]
		timers = timer;
    d338:	4b01      	ldr	r3, [pc, #4]	; (d340 <placeTimer+0x54>)
    d33a:	6018      	str	r0, [r3, #0]
}
    d33c:	e7f3      	b.n	d326 <placeTimer+0x3a>
    d33e:	46c0      	nop			; (mov r8, r8)
    d340:	20001cc4 	.word	0x20001cc4

0000d344 <SYS_HwOverflow_Cb>:
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
}

void SYS_HwOverflow_Cb(void)
{
	timerExtension1++;
    d344:	4a06      	ldr	r2, [pc, #24]	; (d360 <SYS_HwOverflow_Cb+0x1c>)
    d346:	7813      	ldrb	r3, [r2, #0]
    d348:	3301      	adds	r3, #1
    d34a:	b2db      	uxtb	r3, r3
    d34c:	7013      	strb	r3, [r2, #0]
	if(timerExtension1 == 0)
    d34e:	7813      	ldrb	r3, [r2, #0]
    d350:	2b00      	cmp	r3, #0
    d352:	d104      	bne.n	d35e <SYS_HwOverflow_Cb+0x1a>
	{
		timerExtension2++;
    d354:	4a03      	ldr	r2, [pc, #12]	; (d364 <SYS_HwOverflow_Cb+0x20>)
    d356:	7813      	ldrb	r3, [r2, #0]
    d358:	3301      	adds	r3, #1
    d35a:	b2db      	uxtb	r3, r3
    d35c:	7013      	strb	r3, [r2, #0]
	}
}
    d35e:	4770      	bx	lr
    d360:	20003370 	.word	0x20003370
    d364:	20003371 	.word	0x20003371

0000d368 <SYS_TimerStop>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    d368:	4b0e      	ldr	r3, [pc, #56]	; (d3a4 <SYS_TimerStop+0x3c>)
    d36a:	681a      	ldr	r2, [r3, #0]
    d36c:	2a00      	cmp	r2, #0
    d36e:	d014      	beq.n	d39a <SYS_TimerStop+0x32>
		if (t == timer) {
    d370:	4282      	cmp	r2, r0
    d372:	d013      	beq.n	d39c <SYS_TimerStop+0x34>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    d374:	6813      	ldr	r3, [r2, #0]
    d376:	2b00      	cmp	r3, #0
    d378:	d00f      	beq.n	d39a <SYS_TimerStop+0x32>
		if (t == timer) {
    d37a:	4298      	cmp	r0, r3
    d37c:	d001      	beq.n	d382 <SYS_TimerStop+0x1a>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    d37e:	001a      	movs	r2, r3
    d380:	e7f8      	b.n	d374 <SYS_TimerStop+0xc>
			if (prev) {
    d382:	2a00      	cmp	r2, #0
    d384:	d00a      	beq.n	d39c <SYS_TimerStop+0x34>
				prev->next = t->next;
    d386:	6803      	ldr	r3, [r0, #0]
    d388:	6013      	str	r3, [r2, #0]
			if (t->next) {
    d38a:	6803      	ldr	r3, [r0, #0]
    d38c:	2b00      	cmp	r3, #0
    d38e:	d004      	beq.n	d39a <SYS_TimerStop+0x32>
				t->next->timeout += timer->timeout;
    d390:	6842      	ldr	r2, [r0, #4]
    d392:	6859      	ldr	r1, [r3, #4]
    d394:	468c      	mov	ip, r1
    d396:	4462      	add	r2, ip
    d398:	605a      	str	r2, [r3, #4]
}
    d39a:	4770      	bx	lr
				timers = t->next;
    d39c:	4b01      	ldr	r3, [pc, #4]	; (d3a4 <SYS_TimerStop+0x3c>)
    d39e:	6802      	ldr	r2, [r0, #0]
    d3a0:	601a      	str	r2, [r3, #0]
    d3a2:	e7f2      	b.n	d38a <SYS_TimerStop+0x22>
    d3a4:	20001cc4 	.word	0x20001cc4

0000d3a8 <SYS_TimerStarted>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    d3a8:	4b09      	ldr	r3, [pc, #36]	; (d3d0 <SYS_TimerStarted+0x28>)
    d3aa:	681b      	ldr	r3, [r3, #0]
    d3ac:	2b00      	cmp	r3, #0
    d3ae:	d00a      	beq.n	d3c6 <SYS_TimerStarted+0x1e>
		if (t == timer) {
    d3b0:	4283      	cmp	r3, r0
    d3b2:	d00a      	beq.n	d3ca <SYS_TimerStarted+0x22>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    d3b4:	681b      	ldr	r3, [r3, #0]
    d3b6:	2b00      	cmp	r3, #0
    d3b8:	d003      	beq.n	d3c2 <SYS_TimerStarted+0x1a>
		if (t == timer) {
    d3ba:	4298      	cmp	r0, r3
    d3bc:	d1fa      	bne.n	d3b4 <SYS_TimerStarted+0xc>
			return true;
    d3be:	2001      	movs	r0, #1
    d3c0:	e000      	b.n	d3c4 <SYS_TimerStarted+0x1c>
	return false;
    d3c2:	2000      	movs	r0, #0
}
    d3c4:	4770      	bx	lr
	return false;
    d3c6:	2000      	movs	r0, #0
    d3c8:	e7fc      	b.n	d3c4 <SYS_TimerStarted+0x1c>
			return true;
    d3ca:	2001      	movs	r0, #1
    d3cc:	e7fa      	b.n	d3c4 <SYS_TimerStarted+0x1c>
    d3ce:	46c0      	nop			; (mov r8, r8)
    d3d0:	20001cc4 	.word	0x20001cc4

0000d3d4 <SYS_TimerStart>:
{
    d3d4:	b510      	push	{r4, lr}
    d3d6:	0004      	movs	r4, r0
	if (!SYS_TimerStarted(timer)) {
    d3d8:	4b04      	ldr	r3, [pc, #16]	; (d3ec <SYS_TimerStart+0x18>)
    d3da:	4798      	blx	r3
    d3dc:	2800      	cmp	r0, #0
    d3de:	d000      	beq.n	d3e2 <SYS_TimerStart+0xe>
}
    d3e0:	bd10      	pop	{r4, pc}
		placeTimer(timer);
    d3e2:	0020      	movs	r0, r4
    d3e4:	4b02      	ldr	r3, [pc, #8]	; (d3f0 <SYS_TimerStart+0x1c>)
    d3e6:	4798      	blx	r3
}
    d3e8:	e7fa      	b.n	d3e0 <SYS_TimerStart+0xc>
    d3ea:	46c0      	nop			; (mov r8, r8)
    d3ec:	0000d3a9 	.word	0x0000d3a9
    d3f0:	0000d2ed 	.word	0x0000d2ed

0000d3f4 <MiWi_TickGet>:
{
    d3f4:	b570      	push	{r4, r5, r6, lr}
	uint8_t current_timerExtension1 = timerExtension1;
    d3f6:	4e11      	ldr	r6, [pc, #68]	; (d43c <MiWi_TickGet+0x48>)
    d3f8:	7835      	ldrb	r5, [r6, #0]
    d3fa:	b2ed      	uxtb	r5, r5
	tmr_disable_ovf_interrupt();
    d3fc:	4b10      	ldr	r3, [pc, #64]	; (d440 <MiWi_TickGet+0x4c>)
    d3fe:	4798      	blx	r3
	currentTime.word.w0 = common_tc_read_count();
    d400:	4b10      	ldr	r3, [pc, #64]	; (d444 <MiWi_TickGet+0x50>)
    d402:	4798      	blx	r3
    d404:	0004      	movs	r4, r0
	tmr_enable_ovf_interrupt();
    d406:	4b10      	ldr	r3, [pc, #64]	; (d448 <MiWi_TickGet+0x54>)
    d408:	4798      	blx	r3
  __ASM volatile ("nop");
    d40a:	46c0      	nop			; (mov r8, r8)
	if (current_timerExtension1 != timerExtension1)
    d40c:	7833      	ldrb	r3, [r6, #0]
    d40e:	b2db      	uxtb	r3, r3
    d410:	429d      	cmp	r5, r3
    d412:	d004      	beq.n	d41e <MiWi_TickGet+0x2a>
		currentTime.word.w0 = common_tc_read_count();
    d414:	4b0b      	ldr	r3, [pc, #44]	; (d444 <MiWi_TickGet+0x50>)
    d416:	4798      	blx	r3
    d418:	0c24      	lsrs	r4, r4, #16
    d41a:	0424      	lsls	r4, r4, #16
    d41c:	4304      	orrs	r4, r0
    currentTime.byte.b2 = timerExtension1;
    d41e:	4b07      	ldr	r3, [pc, #28]	; (d43c <MiWi_TickGet+0x48>)
    d420:	781b      	ldrb	r3, [r3, #0]
    d422:	041b      	lsls	r3, r3, #16
    d424:	4809      	ldr	r0, [pc, #36]	; (d44c <MiWi_TickGet+0x58>)
    d426:	4004      	ands	r4, r0
    d428:	431c      	orrs	r4, r3
    currentTime.byte.b3 = timerExtension2;
    d42a:	4b09      	ldr	r3, [pc, #36]	; (d450 <MiWi_TickGet+0x5c>)
    d42c:	781b      	ldrb	r3, [r3, #0]
    d42e:	061b      	lsls	r3, r3, #24
    d430:	0224      	lsls	r4, r4, #8
    d432:	0a24      	lsrs	r4, r4, #8
    d434:	431c      	orrs	r4, r3
}
    d436:	0020      	movs	r0, r4
    d438:	bd70      	pop	{r4, r5, r6, pc}
    d43a:	46c0      	nop			; (mov r8, r8)
    d43c:	20003370 	.word	0x20003370
    d440:	0000ee7d 	.word	0x0000ee7d
    d444:	00014451 	.word	0x00014451
    d448:	0000ee91 	.word	0x0000ee91
    d44c:	ff00ffff 	.word	0xff00ffff
    d450:	20003371 	.word	0x20003371

0000d454 <MiWi_TickGetDiff>:
	if (current_tick.Val > previous_tick.Val)
    d454:	4288      	cmp	r0, r1
    d456:	d802      	bhi.n	d45e <MiWi_TickGetDiff+0xa>
		ret_val = (0xFFFFFFFF - previous_tick.Val) + current_tick.Val;
    d458:	3801      	subs	r0, #1
    d45a:	1a40      	subs	r0, r0, r1
}
    d45c:	4770      	bx	lr
		ret_val = current_tick.Val - previous_tick.Val;
    d45e:	1a40      	subs	r0, r0, r1
    d460:	e7fc      	b.n	d45c <MiWi_TickGetDiff+0x8>
    d462:	Address 0x0000d462 is out of bounds.


0000d464 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    d464:	b570      	push	{r4, r5, r6, lr}
    d466:	b082      	sub	sp, #8
    d468:	0005      	movs	r5, r0
    d46a:	000e      	movs	r6, r1
	uint16_t temp = 0;
    d46c:	2200      	movs	r2, #0
    d46e:	466b      	mov	r3, sp
    d470:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    d472:	4c06      	ldr	r4, [pc, #24]	; (d48c <usart_serial_getchar+0x28>)
    d474:	466b      	mov	r3, sp
    d476:	1d99      	adds	r1, r3, #6
    d478:	0028      	movs	r0, r5
    d47a:	47a0      	blx	r4
    d47c:	2800      	cmp	r0, #0
    d47e:	d1f9      	bne.n	d474 <usart_serial_getchar+0x10>

	*c = temp;
    d480:	466b      	mov	r3, sp
    d482:	3306      	adds	r3, #6
    d484:	881b      	ldrh	r3, [r3, #0]
    d486:	7033      	strb	r3, [r6, #0]
}
    d488:	b002      	add	sp, #8
    d48a:	bd70      	pop	{r4, r5, r6, pc}
    d48c:	000061bd 	.word	0x000061bd

0000d490 <usart_serial_putchar>:
{
    d490:	b570      	push	{r4, r5, r6, lr}
    d492:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    d494:	b28c      	uxth	r4, r1
    d496:	4e03      	ldr	r6, [pc, #12]	; (d4a4 <usart_serial_putchar+0x14>)
    d498:	0021      	movs	r1, r4
    d49a:	0028      	movs	r0, r5
    d49c:	47b0      	blx	r6
    d49e:	2800      	cmp	r0, #0
    d4a0:	d1fa      	bne.n	d498 <usart_serial_putchar+0x8>
}
    d4a2:	bd70      	pop	{r4, r5, r6, pc}
    d4a4:	00006191 	.word	0x00006191

0000d4a8 <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35 || WLR089
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    d4a8:	b510      	push	{r4, lr}
    d4aa:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
    d4ac:	466b      	mov	r3, sp
    d4ae:	1ddc      	adds	r4, r3, #7
    d4b0:	2201      	movs	r2, #1
    d4b2:	0021      	movs	r1, r4
    d4b4:	480f      	ldr	r0, [pc, #60]	; (d4f4 <USART_HOST_ISR_VECT+0x4c>)
    d4b6:	4b10      	ldr	r3, [pc, #64]	; (d4f8 <USART_HOST_ISR_VECT+0x50>)
    d4b8:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    d4ba:	b672      	cpsid	i
  __ASM volatile ("dmb");
    d4bc:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    d4c0:	2200      	movs	r2, #0
    d4c2:	4b0e      	ldr	r3, [pc, #56]	; (d4fc <USART_HOST_ISR_VECT+0x54>)
    d4c4:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
    d4c6:	4b0e      	ldr	r3, [pc, #56]	; (d500 <USART_HOST_ISR_VECT+0x58>)
    d4c8:	781b      	ldrb	r3, [r3, #0]
    d4ca:	7821      	ldrb	r1, [r4, #0]
    d4cc:	4a0d      	ldr	r2, [pc, #52]	; (d504 <USART_HOST_ISR_VECT+0x5c>)
    d4ce:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    d4d0:	2b7f      	cmp	r3, #127	; 0x7f
    d4d2:	d00a      	beq.n	d4ea <USART_HOST_ISR_VECT+0x42>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
    d4d4:	3301      	adds	r3, #1
    d4d6:	4a0a      	ldr	r2, [pc, #40]	; (d500 <USART_HOST_ISR_VECT+0x58>)
    d4d8:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
    d4da:	2201      	movs	r2, #1
    d4dc:	4b07      	ldr	r3, [pc, #28]	; (d4fc <USART_HOST_ISR_VECT+0x54>)
    d4de:	701a      	strb	r2, [r3, #0]
    d4e0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d4e4:	b662      	cpsie	i
}
    d4e6:	b002      	add	sp, #8
    d4e8:	bd10      	pop	{r4, pc}
		serial_rx_buf_tail = 0x00;
    d4ea:	2200      	movs	r2, #0
    d4ec:	4b04      	ldr	r3, [pc, #16]	; (d500 <USART_HOST_ISR_VECT+0x58>)
    d4ee:	701a      	strb	r2, [r3, #0]
    d4f0:	e7f3      	b.n	d4da <USART_HOST_ISR_VECT+0x32>
    d4f2:	46c0      	nop			; (mov r8, r8)
    d4f4:	20001cc8 	.word	0x20001cc8
    d4f8:	000062ed 	.word	0x000062ed
    d4fc:	20000014 	.word	0x20000014
    d500:	20001d7c 	.word	0x20001d7c
    d504:	20001cfc 	.word	0x20001cfc

0000d508 <sio2host_init>:
{
    d508:	b5f0      	push	{r4, r5, r6, r7, lr}
    d50a:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    d50c:	2380      	movs	r3, #128	; 0x80
    d50e:	05db      	lsls	r3, r3, #23
    d510:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    d512:	2300      	movs	r3, #0
    d514:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    d516:	22ff      	movs	r2, #255	; 0xff
    d518:	4669      	mov	r1, sp
    d51a:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    d51c:	2200      	movs	r2, #0
    d51e:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    d520:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    d522:	2401      	movs	r4, #1
    d524:	2124      	movs	r1, #36	; 0x24
    d526:	4668      	mov	r0, sp
    d528:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    d52a:	3101      	adds	r1, #1
    d52c:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    d52e:	3101      	adds	r1, #1
    d530:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    d532:	3101      	adds	r1, #1
    d534:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    d536:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    d538:	3105      	adds	r1, #5
    d53a:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    d53c:	3101      	adds	r1, #1
    d53e:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    d540:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    d542:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    d544:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    d546:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    d548:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    d54a:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    d54c:	2313      	movs	r3, #19
    d54e:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    d550:	7742      	strb	r2, [r0, #29]
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
    d552:	2380      	movs	r3, #128	; 0x80
    d554:	035b      	lsls	r3, r3, #13
    d556:	9303      	str	r3, [sp, #12]
	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    d558:	4b2f      	ldr	r3, [pc, #188]	; (d618 <sio2host_init+0x110>)
    d55a:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    d55c:	4b2f      	ldr	r3, [pc, #188]	; (d61c <sio2host_init+0x114>)
    d55e:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    d560:	2301      	movs	r3, #1
    d562:	425b      	negs	r3, r3
    d564:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    d566:	930f      	str	r3, [sp, #60]	; 0x3c
	host_uart_config.baudrate    = USART_HOST_BAUDRATE;
    d568:	23e1      	movs	r3, #225	; 0xe1
    d56a:	025b      	lsls	r3, r3, #9
    d56c:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    d56e:	4d2c      	ldr	r5, [pc, #176]	; (d620 <sio2host_init+0x118>)
    d570:	4b2c      	ldr	r3, [pc, #176]	; (d624 <sio2host_init+0x11c>)
    d572:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    d574:	4a2c      	ldr	r2, [pc, #176]	; (d628 <sio2host_init+0x120>)
    d576:	4b2d      	ldr	r3, [pc, #180]	; (d62c <sio2host_init+0x124>)
    d578:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    d57a:	4a2d      	ldr	r2, [pc, #180]	; (d630 <sio2host_init+0x128>)
    d57c:	4b2d      	ldr	r3, [pc, #180]	; (d634 <sio2host_init+0x12c>)
    d57e:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    d580:	466a      	mov	r2, sp
    d582:	2184      	movs	r1, #132	; 0x84
    d584:	05c9      	lsls	r1, r1, #23
    d586:	0028      	movs	r0, r5
    d588:	4b2b      	ldr	r3, [pc, #172]	; (d638 <sio2host_init+0x130>)
    d58a:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    d58c:	4f2b      	ldr	r7, [pc, #172]	; (d63c <sio2host_init+0x134>)
    d58e:	683b      	ldr	r3, [r7, #0]
    d590:	6898      	ldr	r0, [r3, #8]
    d592:	2100      	movs	r1, #0
    d594:	4e2a      	ldr	r6, [pc, #168]	; (d640 <sio2host_init+0x138>)
    d596:	47b0      	blx	r6
	setbuf(stdin, NULL);
    d598:	683b      	ldr	r3, [r7, #0]
    d59a:	6858      	ldr	r0, [r3, #4]
    d59c:	2100      	movs	r1, #0
    d59e:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    d5a0:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    d5a2:	0030      	movs	r0, r6
    d5a4:	4b27      	ldr	r3, [pc, #156]	; (d644 <sio2host_init+0x13c>)
    d5a6:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    d5a8:	231f      	movs	r3, #31
    d5aa:	4018      	ands	r0, r3
    d5ac:	4084      	lsls	r4, r0
    d5ae:	4b26      	ldr	r3, [pc, #152]	; (d648 <sio2host_init+0x140>)
    d5b0:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    d5b2:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    d5b4:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    d5b6:	2b00      	cmp	r3, #0
    d5b8:	d1fc      	bne.n	d5b4 <sio2host_init+0xac>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    d5ba:	6833      	ldr	r3, [r6, #0]
    d5bc:	2202      	movs	r2, #2
    d5be:	4313      	orrs	r3, r2
    d5c0:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    d5c2:	4b17      	ldr	r3, [pc, #92]	; (d620 <sio2host_init+0x118>)
    d5c4:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    d5c6:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    d5c8:	2a00      	cmp	r2, #0
    d5ca:	d1fc      	bne.n	d5c6 <sio2host_init+0xbe>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    d5cc:	6859      	ldr	r1, [r3, #4]
    d5ce:	2280      	movs	r2, #128	; 0x80
    d5d0:	0252      	lsls	r2, r2, #9
    d5d2:	430a      	orrs	r2, r1
    d5d4:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    d5d6:	2101      	movs	r1, #1
    d5d8:	4a11      	ldr	r2, [pc, #68]	; (d620 <sio2host_init+0x118>)
    d5da:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    d5dc:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    d5de:	2a00      	cmp	r2, #0
    d5e0:	d1fc      	bne.n	d5dc <sio2host_init+0xd4>
	return (usart_hw->SYNCBUSY.reg);
    d5e2:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    d5e4:	2a00      	cmp	r2, #0
    d5e6:	d1fc      	bne.n	d5e2 <sio2host_init+0xda>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    d5e8:	6859      	ldr	r1, [r3, #4]
    d5ea:	2280      	movs	r2, #128	; 0x80
    d5ec:	0292      	lsls	r2, r2, #10
    d5ee:	430a      	orrs	r2, r1
    d5f0:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    d5f2:	2101      	movs	r1, #1
    d5f4:	4a0a      	ldr	r2, [pc, #40]	; (d620 <sio2host_init+0x118>)
    d5f6:	7191      	strb	r1, [r2, #6]
	return (usart_hw->SYNCBUSY.reg);
    d5f8:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    d5fa:	2a00      	cmp	r2, #0
    d5fc:	d1fc      	bne.n	d5f8 <sio2host_init+0xf0>
	USART_HOST_RX_ISR_ENABLE();
    d5fe:	4913      	ldr	r1, [pc, #76]	; (d64c <sio2host_init+0x144>)
    d600:	2000      	movs	r0, #0
    d602:	4b13      	ldr	r3, [pc, #76]	; (d650 <sio2host_init+0x148>)
    d604:	4798      	blx	r3
    d606:	2204      	movs	r2, #4
    d608:	2384      	movs	r3, #132	; 0x84
    d60a:	05db      	lsls	r3, r3, #23
    d60c:	759a      	strb	r2, [r3, #22]
    d60e:	32fc      	adds	r2, #252	; 0xfc
    d610:	4b0d      	ldr	r3, [pc, #52]	; (d648 <sio2host_init+0x140>)
    d612:	601a      	str	r2, [r3, #0]
}
    d614:	b011      	add	sp, #68	; 0x44
    d616:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d618:	00040003 	.word	0x00040003
    d61c:	00050003 	.word	0x00050003
    d620:	20001cc8 	.word	0x20001cc8
    d624:	2000217c 	.word	0x2000217c
    d628:	0000d491 	.word	0x0000d491
    d62c:	20002178 	.word	0x20002178
    d630:	0000d465 	.word	0x0000d465
    d634:	20002174 	.word	0x20002174
    d638:	00005e25 	.word	0x00005e25
    d63c:	20000028 	.word	0x20000028
    d640:	00018029 	.word	0x00018029
    d644:	00005751 	.word	0x00005751
    d648:	e000e100 	.word	0xe000e100
    d64c:	0000d4a9 	.word	0x0000d4a9
    d650:	00005715 	.word	0x00005715

0000d654 <sio2host_tx>:
{
    d654:	b5f0      	push	{r4, r5, r6, r7, lr}
    d656:	b083      	sub	sp, #12
    d658:	0006      	movs	r6, r0
    d65a:	9101      	str	r1, [sp, #4]
	return usart_write_buffer_wait(module, tx_data, length);
    d65c:	466b      	mov	r3, sp
    d65e:	889d      	ldrh	r5, [r3, #4]
    d660:	4c05      	ldr	r4, [pc, #20]	; (d678 <sio2host_tx+0x24>)
    d662:	4f06      	ldr	r7, [pc, #24]	; (d67c <sio2host_tx+0x28>)
    d664:	002a      	movs	r2, r5
    d666:	0031      	movs	r1, r6
    d668:	0020      	movs	r0, r4
    d66a:	47b8      	blx	r7
	} while (status != STATUS_OK);
    d66c:	2800      	cmp	r0, #0
    d66e:	d1f9      	bne.n	d664 <sio2host_tx+0x10>
}
    d670:	9801      	ldr	r0, [sp, #4]
    d672:	b003      	add	sp, #12
    d674:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d676:	46c0      	nop			; (mov r8, r8)
    d678:	20001cc8 	.word	0x20001cc8
    d67c:	0000622d 	.word	0x0000622d

0000d680 <sio2host_putchar>:
{
    d680:	b500      	push	{lr}
    d682:	b083      	sub	sp, #12
    d684:	466b      	mov	r3, sp
    d686:	71d8      	strb	r0, [r3, #7]
    d688:	3307      	adds	r3, #7
	sio2host_tx(&ch, 1);
    d68a:	2101      	movs	r1, #1
    d68c:	0018      	movs	r0, r3
    d68e:	4b02      	ldr	r3, [pc, #8]	; (d698 <sio2host_putchar+0x18>)
    d690:	4798      	blx	r3
}
    d692:	b003      	add	sp, #12
    d694:	bd00      	pop	{pc}
    d696:	46c0      	nop			; (mov r8, r8)
    d698:	0000d655 	.word	0x0000d655

0000d69c <HAL_SPISend>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    d69c:	4b13      	ldr	r3, [pc, #76]	; (d6ec <HAL_SPISend+0x50>)
    d69e:	681b      	ldr	r3, [r3, #0]
static uint8_t HAL_SPISend(uint8_t data)
{
	uint16_t read_val = 0;
	
	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master));
    d6a0:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d6a2:	7e1a      	ldrb	r2, [r3, #24]
    d6a4:	420a      	tst	r2, r1
    d6a6:	d0fc      	beq.n	d6a2 <HAL_SPISend+0x6>
    d6a8:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    d6aa:	07d2      	lsls	r2, r2, #31
    d6ac:	d500      	bpl.n	d6b0 <HAL_SPISend+0x14>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d6ae:	6298      	str	r0, [r3, #40]	; 0x28
	spi_write(&master, data);
	while (!spi_is_write_complete(&master));
    d6b0:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    d6b2:	7e1a      	ldrb	r2, [r3, #24]
    d6b4:	420a      	tst	r2, r1
    d6b6:	d0fc      	beq.n	d6b2 <HAL_SPISend+0x16>
	
	while (!spi_is_ready_to_read(&master));
    d6b8:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d6ba:	7e1a      	ldrb	r2, [r3, #24]
    d6bc:	420a      	tst	r2, r1
    d6be:	d0fc      	beq.n	d6ba <HAL_SPISend+0x1e>
    d6c0:	7e1a      	ldrb	r2, [r3, #24]
	uint16_t read_val = 0;
    d6c2:	2000      	movs	r0, #0
	if (!spi_is_ready_to_read(module)) {
    d6c4:	0752      	lsls	r2, r2, #29
    d6c6:	d50a      	bpl.n	d6de <HAL_SPISend+0x42>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d6c8:	8b5a      	ldrh	r2, [r3, #26]
    d6ca:	0752      	lsls	r2, r2, #29
    d6cc:	d501      	bpl.n	d6d2 <HAL_SPISend+0x36>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d6ce:	2204      	movs	r2, #4
    d6d0:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d6d2:	4a06      	ldr	r2, [pc, #24]	; (d6ec <HAL_SPISend+0x50>)
    d6d4:	7992      	ldrb	r2, [r2, #6]
    d6d6:	2a01      	cmp	r2, #1
    d6d8:	d003      	beq.n	d6e2 <HAL_SPISend+0x46>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    d6da:	6a98      	ldr	r0, [r3, #40]	; 0x28
    d6dc:	b2c0      	uxtb	r0, r0
	spi_read(&master, &read_val);
	
	return ((uint8_t)read_val);
    d6de:	b2c0      	uxtb	r0, r0
}
    d6e0:	4770      	bx	lr
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    d6e2:	6a98      	ldr	r0, [r3, #40]	; 0x28
    d6e4:	05c0      	lsls	r0, r0, #23
    d6e6:	0dc0      	lsrs	r0, r0, #23
    d6e8:	e7f9      	b.n	d6de <HAL_SPISend+0x42>
    d6ea:	46c0      	nop			; (mov r8, r8)
    d6ec:	20001d8c 	.word	0x20001d8c

0000d6f0 <HAL_ResetPinMakeOutput>:
{
    d6f0:	b500      	push	{lr}
    d6f2:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    d6f4:	a901      	add	r1, sp, #4
    d6f6:	2301      	movs	r3, #1
    d6f8:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    d6fa:	2200      	movs	r2, #0
    d6fc:	708a      	strb	r2, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    d6fe:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    d700:	202f      	movs	r0, #47	; 0x2f
    d702:	4b02      	ldr	r3, [pc, #8]	; (d70c <HAL_ResetPinMakeOutput+0x1c>)
    d704:	4798      	blx	r3
}
    d706:	b003      	add	sp, #12
    d708:	bd00      	pop	{pc}
    d70a:	46c0      	nop			; (mov r8, r8)
    d70c:	00005259 	.word	0x00005259

0000d710 <HAL_RadioDIO2Callback>:
{
    d710:	b510      	push	{r4, lr}
  if (interruptHandlerDio2)
    d712:	4b05      	ldr	r3, [pc, #20]	; (d728 <HAL_RadioDIO2Callback+0x18>)
    d714:	681b      	ldr	r3, [r3, #0]
    d716:	2b00      	cmp	r3, #0
    d718:	d004      	beq.n	d724 <HAL_RadioDIO2Callback+0x14>
	PMM_Wakeup();
    d71a:	4b04      	ldr	r3, [pc, #16]	; (d72c <HAL_RadioDIO2Callback+0x1c>)
    d71c:	4798      	blx	r3
    interruptHandlerDio2();
    d71e:	4b02      	ldr	r3, [pc, #8]	; (d728 <HAL_RadioDIO2Callback+0x18>)
    d720:	681b      	ldr	r3, [r3, #0]
    d722:	4798      	blx	r3
}
    d724:	bd10      	pop	{r4, pc}
    d726:	46c0      	nop			; (mov r8, r8)
    d728:	20001d88 	.word	0x20001d88
    d72c:	0000db71 	.word	0x0000db71

0000d730 <HAL_RadioDIO1Callback>:
{
    d730:	b510      	push	{r4, lr}
  if (interruptHandlerDio1)
    d732:	4b05      	ldr	r3, [pc, #20]	; (d748 <HAL_RadioDIO1Callback+0x18>)
    d734:	681b      	ldr	r3, [r3, #0]
    d736:	2b00      	cmp	r3, #0
    d738:	d004      	beq.n	d744 <HAL_RadioDIO1Callback+0x14>
	PMM_Wakeup();
    d73a:	4b04      	ldr	r3, [pc, #16]	; (d74c <HAL_RadioDIO1Callback+0x1c>)
    d73c:	4798      	blx	r3
    interruptHandlerDio1();
    d73e:	4b02      	ldr	r3, [pc, #8]	; (d748 <HAL_RadioDIO1Callback+0x18>)
    d740:	681b      	ldr	r3, [r3, #0]
    d742:	4798      	blx	r3
}
    d744:	bd10      	pop	{r4, pc}
    d746:	46c0      	nop			; (mov r8, r8)
    d748:	20001d84 	.word	0x20001d84
    d74c:	0000db71 	.word	0x0000db71

0000d750 <HAL_RadioDIO0Callback>:
{
    d750:	b510      	push	{r4, lr}
  if (interruptHandlerDio0)
    d752:	4b05      	ldr	r3, [pc, #20]	; (d768 <HAL_RadioDIO0Callback+0x18>)
    d754:	681b      	ldr	r3, [r3, #0]
    d756:	2b00      	cmp	r3, #0
    d758:	d004      	beq.n	d764 <HAL_RadioDIO0Callback+0x14>
	PMM_Wakeup();
    d75a:	4b04      	ldr	r3, [pc, #16]	; (d76c <HAL_RadioDIO0Callback+0x1c>)
    d75c:	4798      	blx	r3
    interruptHandlerDio0();
    d75e:	4b02      	ldr	r3, [pc, #8]	; (d768 <HAL_RadioDIO0Callback+0x18>)
    d760:	681b      	ldr	r3, [r3, #0]
    d762:	4798      	blx	r3
}
    d764:	bd10      	pop	{r4, pc}
    d766:	46c0      	nop			; (mov r8, r8)
    d768:	20001d80 	.word	0x20001d80
    d76c:	0000db71 	.word	0x0000db71

0000d770 <HAL_SPICSAssert>:
{
    d770:	b510      	push	{r4, lr}
	spi_select_slave(&master, &slave, true);
    d772:	2201      	movs	r2, #1
    d774:	4902      	ldr	r1, [pc, #8]	; (d780 <HAL_SPICSAssert+0x10>)
    d776:	4803      	ldr	r0, [pc, #12]	; (d784 <HAL_SPICSAssert+0x14>)
    d778:	4b03      	ldr	r3, [pc, #12]	; (d788 <HAL_SPICSAssert+0x18>)
    d77a:	4798      	blx	r3
}
    d77c:	bd10      	pop	{r4, pc}
    d77e:	46c0      	nop			; (mov r8, r8)
    d780:	20003374 	.word	0x20003374
    d784:	20001d8c 	.word	0x20001d8c
    d788:	00005b2d 	.word	0x00005b2d

0000d78c <HAL_SPICSDeassert>:
{
    d78c:	b510      	push	{r4, lr}
	spi_select_slave(&master, &slave, false);
    d78e:	2200      	movs	r2, #0
    d790:	4902      	ldr	r1, [pc, #8]	; (d79c <HAL_SPICSDeassert+0x10>)
    d792:	4803      	ldr	r0, [pc, #12]	; (d7a0 <HAL_SPICSDeassert+0x14>)
    d794:	4b03      	ldr	r3, [pc, #12]	; (d7a4 <HAL_SPICSDeassert+0x18>)
    d796:	4798      	blx	r3
}
    d798:	bd10      	pop	{r4, pc}
    d79a:	46c0      	nop			; (mov r8, r8)
    d79c:	20003374 	.word	0x20003374
    d7a0:	20001d8c 	.word	0x20001d8c
    d7a4:	00005b2d 	.word	0x00005b2d

0000d7a8 <HAL_RadioInit>:
{
    d7a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    d7aa:	46d6      	mov	lr, sl
    d7ac:	464f      	mov	r7, r9
    d7ae:	4646      	mov	r6, r8
    d7b0:	b5c0      	push	{r6, r7, lr}
    d7b2:	b090      	sub	sp, #64	; 0x40
	config->input_pull = PORT_PIN_PULL_UP;
    d7b4:	ac01      	add	r4, sp, #4
    d7b6:	2601      	movs	r6, #1
    d7b8:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    d7ba:	2500      	movs	r5, #0
    d7bc:	70a5      	strb	r5, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    d7be:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(SX_RF_SPI_SCK, &pin_conf);
    d7c0:	0021      	movs	r1, r4
    d7c2:	2052      	movs	r0, #82	; 0x52
    d7c4:	4f52      	ldr	r7, [pc, #328]	; (d910 <HAL_RadioInit+0x168>)
    d7c6:	47b8      	blx	r7
	port_pin_set_config(SX_RF_SPI_MOSI, &pin_conf);
    d7c8:	0021      	movs	r1, r4
    d7ca:	203e      	movs	r0, #62	; 0x3e
    d7cc:	47b8      	blx	r7
	port_pin_set_config(SX_RF_SPI_CS, &pin_conf);
    d7ce:	0021      	movs	r1, r4
    d7d0:	203f      	movs	r0, #63	; 0x3f
    d7d2:	47b8      	blx	r7
	port_pin_set_config(SX_RF_RESET_PIN, &pin_conf);
    d7d4:	0021      	movs	r1, r4
    d7d6:	202f      	movs	r0, #47	; 0x2f
    d7d8:	47b8      	blx	r7
		port_base->OUTSET.reg = pin_mask;
    d7da:	2280      	movs	r2, #128	; 0x80
    d7dc:	02d2      	lsls	r2, r2, #11
    d7de:	4b4d      	ldr	r3, [pc, #308]	; (d914 <HAL_RadioInit+0x16c>)
    d7e0:	619a      	str	r2, [r3, #24]
    d7e2:	4b4d      	ldr	r3, [pc, #308]	; (d918 <HAL_RadioInit+0x170>)
    d7e4:	2280      	movs	r2, #128	; 0x80
    d7e6:	05d2      	lsls	r2, r2, #23
    d7e8:	619a      	str	r2, [r3, #24]
    d7ea:	2280      	movs	r2, #128	; 0x80
    d7ec:	0612      	lsls	r2, r2, #24
    d7ee:	619a      	str	r2, [r3, #24]
    d7f0:	2280      	movs	r2, #128	; 0x80
    d7f2:	0212      	lsls	r2, r2, #8
    d7f4:	619a      	str	r2, [r3, #24]
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    d7f6:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(SX_RF_SPI_MISO, &pin_conf);
    d7f8:	0021      	movs	r1, r4
    d7fa:	2053      	movs	r0, #83	; 0x53
    d7fc:	47b8      	blx	r7
	extint_chan_get_config_defaults(&config_extint_chan);
    d7fe:	ac02      	add	r4, sp, #8
    d800:	0020      	movs	r0, r4
    d802:	4b46      	ldr	r3, [pc, #280]	; (d91c <HAL_RadioInit+0x174>)
    d804:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO0_EIC_PIN;
    d806:	2330      	movs	r3, #48	; 0x30
    d808:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO0_EIC_MUX;
    d80a:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    d80c:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    d80e:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO0_EIC_LINE, &config_extint_chan);
    d810:	0021      	movs	r1, r4
    d812:	2000      	movs	r0, #0
    d814:	4b42      	ldr	r3, [pc, #264]	; (d920 <HAL_RadioInit+0x178>)
    d816:	469a      	mov	sl, r3
    d818:	4798      	blx	r3
	extint_register_callback(HAL_RadioDIO0Callback,DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    d81a:	2200      	movs	r2, #0
    d81c:	2100      	movs	r1, #0
    d81e:	4841      	ldr	r0, [pc, #260]	; (d924 <HAL_RadioInit+0x17c>)
    d820:	4b41      	ldr	r3, [pc, #260]	; (d928 <HAL_RadioInit+0x180>)
    d822:	4699      	mov	r9, r3
    d824:	4798      	blx	r3
	extint_chan_enable_callback(DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    d826:	2100      	movs	r1, #0
    d828:	2000      	movs	r0, #0
    d82a:	4b40      	ldr	r3, [pc, #256]	; (d92c <HAL_RadioInit+0x184>)
    d82c:	4698      	mov	r8, r3
    d82e:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO1_EIC_PIN;
    d830:	230b      	movs	r3, #11
    d832:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO1_EIC_MUX;
    d834:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    d836:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    d838:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO1_EIC_LINE, &config_extint_chan);
    d83a:	0021      	movs	r1, r4
    d83c:	200b      	movs	r0, #11
    d83e:	47d0      	blx	sl
	extint_register_callback(HAL_RadioDIO1Callback,DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    d840:	2200      	movs	r2, #0
    d842:	210b      	movs	r1, #11
    d844:	483a      	ldr	r0, [pc, #232]	; (d930 <HAL_RadioInit+0x188>)
    d846:	47c8      	blx	r9
	extint_chan_enable_callback(DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    d848:	2100      	movs	r1, #0
    d84a:	200b      	movs	r0, #11
    d84c:	47c0      	blx	r8
	config_extint_chan.gpio_pin           = DIO2_EIC_PIN;
    d84e:	230c      	movs	r3, #12
    d850:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO2_EIC_MUX;
    d852:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    d854:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    d856:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO2_EIC_LINE, &config_extint_chan);
    d858:	0021      	movs	r1, r4
    d85a:	200c      	movs	r0, #12
    d85c:	47d0      	blx	sl
	extint_register_callback(HAL_RadioDIO2Callback,DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    d85e:	2200      	movs	r2, #0
    d860:	210c      	movs	r1, #12
    d862:	4834      	ldr	r0, [pc, #208]	; (d934 <HAL_RadioInit+0x18c>)
    d864:	47c8      	blx	r9
	extint_chan_enable_callback(DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    d866:	2100      	movs	r1, #0
    d868:	200c      	movs	r0, #12
    d86a:	47c0      	blx	r8
	slave->ss_pin          = config->ss_pin;
    d86c:	4b32      	ldr	r3, [pc, #200]	; (d938 <HAL_RadioInit+0x190>)
    d86e:	4698      	mov	r8, r3
    d870:	233f      	movs	r3, #63	; 0x3f
    d872:	4642      	mov	r2, r8
    d874:	7013      	strb	r3, [r2, #0]
	slave->address_enabled = config->address_enabled;
    d876:	7055      	strb	r5, [r2, #1]
	slave->address         = config->address;
    d878:	7095      	strb	r5, [r2, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    d87a:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    d87c:	70a5      	strb	r5, [r4, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    d87e:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    d880:	0021      	movs	r1, r4
    d882:	203f      	movs	r0, #63	; 0x3f
    d884:	47b8      	blx	r7
	port_pin_set_output_level(slave->ss_pin, true);
    d886:	4643      	mov	r3, r8
    d888:	781a      	ldrb	r2, [r3, #0]
	if (port_index < PORT_INST_NUM) {
    d88a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    d88c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    d88e:	2900      	cmp	r1, #0
    d890:	d104      	bne.n	d89c <HAL_RadioInit+0xf4>
		return &(ports[port_index]->Group[group_index]);
    d892:	0953      	lsrs	r3, r2, #5
    d894:	01db      	lsls	r3, r3, #7
    d896:	4929      	ldr	r1, [pc, #164]	; (d93c <HAL_RadioInit+0x194>)
    d898:	468c      	mov	ip, r1
    d89a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    d89c:	211f      	movs	r1, #31
    d89e:	4011      	ands	r1, r2
    d8a0:	2201      	movs	r2, #1
    d8a2:	0010      	movs	r0, r2
    d8a4:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    d8a6:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    d8a8:	ac02      	add	r4, sp, #8
    d8aa:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    d8ac:	2300      	movs	r3, #0
    d8ae:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    d8b0:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    d8b2:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    d8b4:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    d8b6:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    d8b8:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    d8ba:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    d8bc:	3223      	adds	r2, #35	; 0x23
    d8be:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    d8c0:	3a18      	subs	r2, #24
    d8c2:	2100      	movs	r1, #0
    d8c4:	a808      	add	r0, sp, #32
    d8c6:	4b1e      	ldr	r3, [pc, #120]	; (d940 <HAL_RadioInit+0x198>)
    d8c8:	4798      	blx	r3
	config_spi_master.mode_specific.master.baudrate = SX_RF_SPI_BAUDRATE;
    d8ca:	4b1e      	ldr	r3, [pc, #120]	; (d944 <HAL_RadioInit+0x19c>)
    d8cc:	61a3      	str	r3, [r4, #24]
	config_spi_master.mux_setting = SX_RF_SPI_SERCOM_MUX_SETTING;
    d8ce:	2380      	movs	r3, #128	; 0x80
    d8d0:	025b      	lsls	r3, r3, #9
    d8d2:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = SX_RF_SPI_SERCOM_PINMUX_PAD0;
    d8d4:	4b1c      	ldr	r3, [pc, #112]	; (d948 <HAL_RadioInit+0x1a0>)
    d8d6:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = PINMUX_UNUSED;
    d8d8:	2301      	movs	r3, #1
    d8da:	425b      	negs	r3, r3
    d8dc:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = SX_RF_SPI_SERCOM_PINMUX_PAD2;
    d8de:	4b1b      	ldr	r3, [pc, #108]	; (d94c <HAL_RadioInit+0x1a4>)
    d8e0:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = SX_RF_SPI_SERCOM_PINMUX_PAD3;
    d8e2:	4b1b      	ldr	r3, [pc, #108]	; (d950 <HAL_RadioInit+0x1a8>)
    d8e4:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, SX_RF_SPI, &config_spi_master);	
    d8e6:	4d1b      	ldr	r5, [pc, #108]	; (d954 <HAL_RadioInit+0x1ac>)
    d8e8:	0022      	movs	r2, r4
    d8ea:	491b      	ldr	r1, [pc, #108]	; (d958 <HAL_RadioInit+0x1b0>)
    d8ec:	0028      	movs	r0, r5
    d8ee:	4b1b      	ldr	r3, [pc, #108]	; (d95c <HAL_RadioInit+0x1b4>)
    d8f0:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    d8f2:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    d8f4:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    d8f6:	2b00      	cmp	r3, #0
    d8f8:	d1fc      	bne.n	d8f4 <HAL_RadioInit+0x14c>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    d8fa:	6813      	ldr	r3, [r2, #0]
    d8fc:	2102      	movs	r1, #2
    d8fe:	430b      	orrs	r3, r1
    d900:	6013      	str	r3, [r2, #0]
}
    d902:	b010      	add	sp, #64	; 0x40
    d904:	bc1c      	pop	{r2, r3, r4}
    d906:	4690      	mov	r8, r2
    d908:	4699      	mov	r9, r3
    d90a:	46a2      	mov	sl, r4
    d90c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d90e:	46c0      	nop			; (mov r8, r8)
    d910:	00005259 	.word	0x00005259
    d914:	40002900 	.word	0x40002900
    d918:	40002880 	.word	0x40002880
    d91c:	00004f1d 	.word	0x00004f1d
    d920:	00004f31 	.word	0x00004f31
    d924:	0000d751 	.word	0x0000d751
    d928:	00004ddd 	.word	0x00004ddd
    d92c:	00004e09 	.word	0x00004e09
    d930:	0000d731 	.word	0x0000d731
    d934:	0000d711 	.word	0x0000d711
    d938:	20003374 	.word	0x20003374
    d93c:	40002800 	.word	0x40002800
    d940:	0001787d 	.word	0x0001787d
    d944:	001e8480 	.word	0x001e8480
    d948:	00530005 	.word	0x00530005
    d94c:	003e0005 	.word	0x003e0005
    d950:	00520005 	.word	0x00520005
    d954:	20001d8c 	.word	0x20001d8c
    d958:	42001000 	.word	0x42001000
    d95c:	000057e1 	.word	0x000057e1

0000d960 <RADIO_Reset>:
{
    d960:	b570      	push	{r4, r5, r6, lr}
    d962:	b082      	sub	sp, #8
	HAL_ResetPinMakeOutput();
    d964:	4c0a      	ldr	r4, [pc, #40]	; (d990 <RADIO_Reset+0x30>)
    d966:	47a0      	blx	r4
		port_base->OUTCLR.reg = pin_mask;
    d968:	4d0a      	ldr	r5, [pc, #40]	; (d994 <RADIO_Reset+0x34>)
    d96a:	2680      	movs	r6, #128	; 0x80
    d96c:	0236      	lsls	r6, r6, #8
    d96e:	616e      	str	r6, [r5, #20]
	SystemBlockingWaitMs(1);
    d970:	2001      	movs	r0, #1
    d972:	4b09      	ldr	r3, [pc, #36]	; (d998 <RADIO_Reset+0x38>)
    d974:	4798      	blx	r3
	config->direction  = PORT_PIN_DIR_INPUT;
    d976:	a901      	add	r1, sp, #4
    d978:	2300      	movs	r3, #0
    d97a:	700b      	strb	r3, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    d97c:	2201      	movs	r2, #1
    d97e:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    d980:	708b      	strb	r3, [r1, #2]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    d982:	202f      	movs	r0, #47	; 0x2f
    d984:	4b05      	ldr	r3, [pc, #20]	; (d99c <RADIO_Reset+0x3c>)
    d986:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    d988:	61ae      	str	r6, [r5, #24]
	HAL_ResetPinMakeOutput();
    d98a:	47a0      	blx	r4
}
    d98c:	b002      	add	sp, #8
    d98e:	bd70      	pop	{r4, r5, r6, pc}
    d990:	0000d6f1 	.word	0x0000d6f1
    d994:	40002880 	.word	0x40002880
    d998:	0000db3d 	.word	0x0000db3d
    d99c:	00005259 	.word	0x00005259

0000d9a0 <RADIO_RegisterWrite>:
{
    d9a0:	b570      	push	{r4, r5, r6, lr}
    d9a2:	0004      	movs	r4, r0
    d9a4:	000d      	movs	r5, r1
	HAL_SPICSAssert();
    d9a6:	4b05      	ldr	r3, [pc, #20]	; (d9bc <RADIO_RegisterWrite+0x1c>)
    d9a8:	4798      	blx	r3
	HAL_SPISend(REG_WRITE_CMD | reg);
    d9aa:	2080      	movs	r0, #128	; 0x80
    d9ac:	4320      	orrs	r0, r4
    d9ae:	4c04      	ldr	r4, [pc, #16]	; (d9c0 <RADIO_RegisterWrite+0x20>)
    d9b0:	47a0      	blx	r4
	HAL_SPISend(value);
    d9b2:	0028      	movs	r0, r5
    d9b4:	47a0      	blx	r4
	HAL_SPICSDeassert();
    d9b6:	4b03      	ldr	r3, [pc, #12]	; (d9c4 <RADIO_RegisterWrite+0x24>)
    d9b8:	4798      	blx	r3
}
    d9ba:	bd70      	pop	{r4, r5, r6, pc}
    d9bc:	0000d771 	.word	0x0000d771
    d9c0:	0000d69d 	.word	0x0000d69d
    d9c4:	0000d78d 	.word	0x0000d78d

0000d9c8 <RADIO_RegisterRead>:
{
    d9c8:	b510      	push	{r4, lr}
    d9ca:	0004      	movs	r4, r0
	HAL_SPICSAssert();
    d9cc:	4b06      	ldr	r3, [pc, #24]	; (d9e8 <RADIO_RegisterRead+0x20>)
    d9ce:	4798      	blx	r3
	HAL_SPISend(reg);
    d9d0:	207f      	movs	r0, #127	; 0x7f
    d9d2:	4020      	ands	r0, r4
    d9d4:	4c05      	ldr	r4, [pc, #20]	; (d9ec <RADIO_RegisterRead+0x24>)
    d9d6:	47a0      	blx	r4
	readValue = HAL_SPISend(0xFF);
    d9d8:	20ff      	movs	r0, #255	; 0xff
    d9da:	47a0      	blx	r4
    d9dc:	0004      	movs	r4, r0
	HAL_SPICSDeassert();
    d9de:	4b04      	ldr	r3, [pc, #16]	; (d9f0 <RADIO_RegisterRead+0x28>)
    d9e0:	4798      	blx	r3
}
    d9e2:	0020      	movs	r0, r4
    d9e4:	bd10      	pop	{r4, pc}
    d9e6:	46c0      	nop			; (mov r8, r8)
    d9e8:	0000d771 	.word	0x0000d771
    d9ec:	0000d69d 	.word	0x0000d69d
    d9f0:	0000d78d 	.word	0x0000d78d

0000d9f4 <RADIO_FrameWrite>:
{
    d9f4:	b570      	push	{r4, r5, r6, lr}
    d9f6:	0004      	movs	r4, r0
    d9f8:	000e      	movs	r6, r1
    d9fa:	0015      	movs	r5, r2
    HAL_SPICSAssert();
    d9fc:	4b0a      	ldr	r3, [pc, #40]	; (da28 <RADIO_FrameWrite+0x34>)
    d9fe:	4798      	blx	r3
    HAL_SPISend(REG_WRITE_CMD | offset);
    da00:	2080      	movs	r0, #128	; 0x80
    da02:	4320      	orrs	r0, r4
    da04:	4b09      	ldr	r3, [pc, #36]	; (da2c <RADIO_FrameWrite+0x38>)
    da06:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    da08:	2d00      	cmp	r5, #0
    da0a:	d00a      	beq.n	da22 <RADIO_FrameWrite+0x2e>
    da0c:	0034      	movs	r4, r6
    da0e:	3d01      	subs	r5, #1
    da10:	b2ed      	uxtb	r5, r5
    da12:	3501      	adds	r5, #1
    da14:	1975      	adds	r5, r6, r5
	    HAL_SPISend(buffer[i]);
    da16:	4e05      	ldr	r6, [pc, #20]	; (da2c <RADIO_FrameWrite+0x38>)
    da18:	7820      	ldrb	r0, [r4, #0]
    da1a:	47b0      	blx	r6
    da1c:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < bufferLen; i++)
    da1e:	42ac      	cmp	r4, r5
    da20:	d1fa      	bne.n	da18 <RADIO_FrameWrite+0x24>
    HAL_SPICSDeassert();
    da22:	4b03      	ldr	r3, [pc, #12]	; (da30 <RADIO_FrameWrite+0x3c>)
    da24:	4798      	blx	r3
}
    da26:	bd70      	pop	{r4, r5, r6, pc}
    da28:	0000d771 	.word	0x0000d771
    da2c:	0000d69d 	.word	0x0000d69d
    da30:	0000d78d 	.word	0x0000d78d

0000da34 <RADIO_FrameRead>:
{
    da34:	b570      	push	{r4, r5, r6, lr}
    da36:	0004      	movs	r4, r0
    da38:	000e      	movs	r6, r1
    da3a:	0015      	movs	r5, r2
    HAL_SPICSAssert();
    da3c:	4b0a      	ldr	r3, [pc, #40]	; (da68 <RADIO_FrameRead+0x34>)
    da3e:	4798      	blx	r3
    HAL_SPISend(offset);
    da40:	0020      	movs	r0, r4
    da42:	4b0a      	ldr	r3, [pc, #40]	; (da6c <RADIO_FrameRead+0x38>)
    da44:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    da46:	2d00      	cmp	r5, #0
    da48:	d00b      	beq.n	da62 <RADIO_FrameRead+0x2e>
    da4a:	0034      	movs	r4, r6
    da4c:	3d01      	subs	r5, #1
    da4e:	b2ed      	uxtb	r5, r5
    da50:	3501      	adds	r5, #1
    da52:	1975      	adds	r5, r6, r5
	    buffer[i] = HAL_SPISend(0xFF);
    da54:	4e05      	ldr	r6, [pc, #20]	; (da6c <RADIO_FrameRead+0x38>)
    da56:	20ff      	movs	r0, #255	; 0xff
    da58:	47b0      	blx	r6
    da5a:	7020      	strb	r0, [r4, #0]
    da5c:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < bufferLen; i++)
    da5e:	42ac      	cmp	r4, r5
    da60:	d1f9      	bne.n	da56 <RADIO_FrameRead+0x22>
    HAL_SPICSDeassert();
    da62:	4b03      	ldr	r3, [pc, #12]	; (da70 <RADIO_FrameRead+0x3c>)
    da64:	4798      	blx	r3
}
    da66:	bd70      	pop	{r4, r5, r6, pc}
    da68:	0000d771 	.word	0x0000d771
    da6c:	0000d69d 	.word	0x0000d69d
    da70:	0000d78d 	.word	0x0000d78d

0000da74 <HAL_RegisterDioInterruptHandler>:
 * \param[in] dioPin  - DIO pin
 * \param[in] handler - function to be called upon given DIO interrupt
 */
void HAL_RegisterDioInterruptHandler(uint8_t dioPin, DioInterruptHandler_t handler)
{
  switch (dioPin)
    da74:	2802      	cmp	r0, #2
    da76:	d007      	beq.n	da88 <HAL_RegisterDioInterruptHandler+0x14>
    da78:	2804      	cmp	r0, #4
    da7a:	d008      	beq.n	da8e <HAL_RegisterDioInterruptHandler+0x1a>
    da7c:	2801      	cmp	r0, #1
    da7e:	d000      	beq.n	da82 <HAL_RegisterDioInterruptHandler+0xe>
#endif

    default:
      break;
  }
}
    da80:	4770      	bx	lr
      interruptHandlerDio0 = handler;
    da82:	4b04      	ldr	r3, [pc, #16]	; (da94 <HAL_RegisterDioInterruptHandler+0x20>)
    da84:	6019      	str	r1, [r3, #0]
      break;
    da86:	e7fb      	b.n	da80 <HAL_RegisterDioInterruptHandler+0xc>
      interruptHandlerDio1 = handler;
    da88:	4b03      	ldr	r3, [pc, #12]	; (da98 <HAL_RegisterDioInterruptHandler+0x24>)
    da8a:	6019      	str	r1, [r3, #0]
      break;
    da8c:	e7f8      	b.n	da80 <HAL_RegisterDioInterruptHandler+0xc>
      interruptHandlerDio2 = handler;
    da8e:	4b03      	ldr	r3, [pc, #12]	; (da9c <HAL_RegisterDioInterruptHandler+0x28>)
    da90:	6019      	str	r1, [r3, #0]
}
    da92:	e7f5      	b.n	da80 <HAL_RegisterDioInterruptHandler+0xc>
    da94:	20001d80 	.word	0x20001d80
    da98:	20001d84 	.word	0x20001d84
    da9c:	20001d88 	.word	0x20001d88

0000daa0 <HAL_EnableRFCtrl>:

void HAL_EnableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
   if ((RFCtrl1 == RFO_HF) || (RFCtrl2 == RX))
    daa0:	2801      	cmp	r0, #1
    daa2:	d00a      	beq.n	daba <HAL_EnableRFCtrl+0x1a>
    daa4:	2900      	cmp	r1, #0
    daa6:	d008      	beq.n	daba <HAL_EnableRFCtrl+0x1a>
   {
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_ACTIVE);		
   }
   else if ((RFCtrl1 == PA_BOOST) && (RFCtrl2 == TX))
    daa8:	2802      	cmp	r0, #2
    daaa:	d10a      	bne.n	dac2 <HAL_EnableRFCtrl+0x22>
    daac:	2901      	cmp	r1, #1
    daae:	d108      	bne.n	dac2 <HAL_EnableRFCtrl+0x22>
		port_base->OUTCLR.reg = pin_mask;
    dab0:	2280      	movs	r2, #128	; 0x80
    dab2:	0192      	lsls	r2, r2, #6
    dab4:	4b03      	ldr	r3, [pc, #12]	; (dac4 <HAL_EnableRFCtrl+0x24>)
    dab6:	615a      	str	r2, [r3, #20]
   {
	   port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);
   }
#endif	
}
    dab8:	e003      	b.n	dac2 <HAL_EnableRFCtrl+0x22>
		port_base->OUTSET.reg = pin_mask;
    daba:	2280      	movs	r2, #128	; 0x80
    dabc:	0192      	lsls	r2, r2, #6
    dabe:	4b01      	ldr	r3, [pc, #4]	; (dac4 <HAL_EnableRFCtrl+0x24>)
    dac0:	619a      	str	r2, [r3, #24]
    dac2:	4770      	bx	lr
    dac4:	40002800 	.word	0x40002800

0000dac8 <HAL_DisableRFCtrl>:

void HAL_DisableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
	if ((RFCtrl1 == RFO_HF) || (RFCtrl2 == RX))
    dac8:	2801      	cmp	r0, #1
    daca:	d001      	beq.n	dad0 <HAL_DisableRFCtrl+0x8>
    dacc:	2900      	cmp	r1, #0
    dace:	d103      	bne.n	dad8 <HAL_DisableRFCtrl+0x10>
		port_base->OUTCLR.reg = pin_mask;
    dad0:	2280      	movs	r2, #128	; 0x80
    dad2:	0192      	lsls	r2, r2, #6
    dad4:	4b01      	ldr	r3, [pc, #4]	; (dadc <HAL_DisableRFCtrl+0x14>)
    dad6:	615a      	str	r2, [r3, #20]
	{
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
	}
#endif	
}
    dad8:	4770      	bx	lr
    dada:	46c0      	nop			; (mov r8, r8)
    dadc:	40002800 	.word	0x40002800

0000dae0 <HAL_GetRadioClkStabilizationDelay>:
 * \param[out] Time value in ms
 */
uint8_t HAL_GetRadioClkStabilizationDelay(void)
{
	return RADIO_CLK_STABILITATION_DELAY;
}
    dae0:	2002      	movs	r0, #2
    dae2:	4770      	bx	lr

0000dae4 <HAL_GetRadioClkSrc>:
 * \param[out] Type of clock source TCXO or XTAL
 */
RadioClockSources_t HAL_GetRadioClkSrc(void)
{
	return RADIO_CLK_SRC;
}
    dae4:	2000      	movs	r0, #0
    dae6:	4770      	bx	lr

0000dae8 <HAL_TCXOPowerOn>:
 *
 * \param[in] None
 * \param[out] None
 */
void HAL_TCXOPowerOn(void)
{
    dae8:	b510      	push	{r4, lr}
		port_base->OUTSET.reg = pin_mask;
    daea:	2280      	movs	r2, #128	; 0x80
    daec:	0092      	lsls	r2, r2, #2
    daee:	4b03      	ldr	r3, [pc, #12]	; (dafc <HAL_TCXOPowerOn+0x14>)
    daf0:	619a      	str	r2, [r3, #24]
#ifdef TCXO_ENABLE
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_ACTIVE);
	delay_ms(RADIO_CLK_STABILITATION_DELAY);
    daf2:	2002      	movs	r0, #2
    daf4:	4b02      	ldr	r3, [pc, #8]	; (db00 <HAL_TCXOPowerOn+0x18>)
    daf6:	4798      	blx	r3
#endif
}
    daf8:	bd10      	pop	{r4, pc}
    dafa:	46c0      	nop			; (mov r8, r8)
    dafc:	40002800 	.word	0x40002800
    db00:	00004799 	.word	0x00004799

0000db04 <HAL_TCXOPowerOff>:
		port_base->OUTCLR.reg = pin_mask;
    db04:	2280      	movs	r2, #128	; 0x80
    db06:	0092      	lsls	r2, r2, #2
    db08:	4b01      	ldr	r3, [pc, #4]	; (db10 <HAL_TCXOPowerOff+0xc>)
    db0a:	615a      	str	r2, [r3, #20]
#ifdef TCXO_ENABLE
#ifndef TCXO_ALWAYS_ON
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
#endif
#endif
}
    db0c:	4770      	bx	lr
    db0e:	46c0      	nop			; (mov r8, r8)
    db10:	40002800 	.word	0x40002800

0000db14 <SleepTimerGetElapsedTime>:
/**
* \brief Calculate the Elapsed Time from the previous call of this function
* \retval Elapsed time in ticks
*/
uint32_t SleepTimerGetElapsedTime(void)
{
    db14:	b510      	push	{r4, lr}
	return rtc_count_get_count(&rtc);
    db16:	4802      	ldr	r0, [pc, #8]	; (db20 <SleepTimerGetElapsedTime+0xc>)
    db18:	4b02      	ldr	r3, [pc, #8]	; (db24 <SleepTimerGetElapsedTime+0x10>)
    db1a:	4798      	blx	r3
}
    db1c:	bd10      	pop	{r4, pc}
    db1e:	46c0      	nop			; (mov r8, r8)
    db20:	20003378 	.word	0x20003378
    db24:	00005289 	.word	0x00005289

0000db28 <SleepTimerStop>:

/**
* \brief Stop the sleep timer
*/
void SleepTimerStop(void)
{
    db28:	b510      	push	{r4, lr}
	rtc_count_disable_callback(&rtc, RTC_COUNT_CALLBACK_COMPARE_0);
    db2a:	2108      	movs	r1, #8
    db2c:	4801      	ldr	r0, [pc, #4]	; (db34 <SleepTimerStop+0xc>)
    db2e:	4b02      	ldr	r3, [pc, #8]	; (db38 <SleepTimerStop+0x10>)
    db30:	4798      	blx	r3
}
    db32:	bd10      	pop	{r4, pc}
    db34:	20003378 	.word	0x20003378
    db38:	000052b5 	.word	0x000052b5

0000db3c <SystemBlockingWaitMs>:
 * waiting with the MCU in sleep.
 * Find out how long it takes the MCU to go to and wake up from sleep to see if
 * it makes sense to go to sleep at all 
 */
void SystemBlockingWaitMs(uint32_t ms)
{
    db3c:	b510      	push	{r4, lr}
#ifndef UT
    delay_ms(ms);
    db3e:	2800      	cmp	r0, #0
    db40:	d103      	bne.n	db4a <SystemBlockingWaitMs+0xe>
    db42:	2001      	movs	r0, #1
    db44:	4b02      	ldr	r3, [pc, #8]	; (db50 <SystemBlockingWaitMs+0x14>)
    db46:	4798      	blx	r3
#endif
}
    db48:	bd10      	pop	{r4, pc}
    delay_ms(ms);
    db4a:	4b02      	ldr	r3, [pc, #8]	; (db54 <SystemBlockingWaitMs+0x18>)
    db4c:	4798      	blx	r3
    db4e:	e7fb      	b.n	db48 <SystemBlockingWaitMs+0xc>
    db50:	0000476d 	.word	0x0000476d
    db54:	00004799 	.word	0x00004799

0000db58 <system_enter_critical_section>:
{

}

void system_enter_critical_section(void)
{
    db58:	b510      	push	{r4, lr}
	cpu_irq_enter_critical();
    db5a:	4b01      	ldr	r3, [pc, #4]	; (db60 <system_enter_critical_section+0x8>)
    db5c:	4798      	blx	r3
#ifndef UT
	system_interrupt_enter_critical_section();
#endif
}
    db5e:	bd10      	pop	{r4, pc}
    db60:	00004b21 	.word	0x00004b21

0000db64 <system_leave_critical_section>:

void system_leave_critical_section(void)
{
    db64:	b510      	push	{r4, lr}
	cpu_irq_leave_critical();
    db66:	4b01      	ldr	r3, [pc, #4]	; (db6c <system_leave_critical_section+0x8>)
    db68:	4798      	blx	r3
#ifndef UT
	system_interrupt_leave_critical_section();
#endif
}
    db6a:	bd10      	pop	{r4, pc}
    db6c:	00004b61 	.word	0x00004b61

0000db70 <PMM_Wakeup>:

/**
* \brief Wakeup from sleep
*/
void PMM_Wakeup(void)
{
    db70:	b570      	push	{r4, r5, r6, lr}
    uint64_t sleptTimeUs = 0;

    if (PMM_STATE_SLEEP == pmmState)
    db72:	4b16      	ldr	r3, [pc, #88]	; (dbcc <PMM_Wakeup+0x5c>)
    db74:	781b      	ldrb	r3, [r3, #0]
    db76:	2b01      	cmp	r3, #1
    db78:	d000      	beq.n	db7c <PMM_Wakeup+0xc>
        {
            sleepReq->pmmWakeupCallback(US_TO_MS(sleptTimeUs));
            sleepReq = NULL;
        }
    }
}
    db7a:	bd70      	pop	{r4, r5, r6, pc}
		pmmState = PMM_STATE_ACTIVE;
    db7c:	2200      	movs	r2, #0
    db7e:	4b13      	ldr	r3, [pc, #76]	; (dbcc <PMM_Wakeup+0x5c>)
    db80:	701a      	strb	r2, [r3, #0]
        sleptTimeUs = SLEEP_TICKS_TO_US(SleepTimerGetElapsedTime());
    db82:	4b13      	ldr	r3, [pc, #76]	; (dbd0 <PMM_Wakeup+0x60>)
    db84:	4798      	blx	r3
    db86:	4b13      	ldr	r3, [pc, #76]	; (dbd4 <PMM_Wakeup+0x64>)
    db88:	4798      	blx	r3
    db8a:	4913      	ldr	r1, [pc, #76]	; (dbd8 <PMM_Wakeup+0x68>)
    db8c:	4b13      	ldr	r3, [pc, #76]	; (dbdc <PMM_Wakeup+0x6c>)
    db8e:	4798      	blx	r3
    db90:	4b13      	ldr	r3, [pc, #76]	; (dbe0 <PMM_Wakeup+0x70>)
    db92:	4798      	blx	r3
    db94:	0004      	movs	r4, r0
    db96:	000d      	movs	r5, r1
        SleepTimerStop();
    db98:	4b12      	ldr	r3, [pc, #72]	; (dbe4 <PMM_Wakeup+0x74>)
    db9a:	4798      	blx	r3
        SystemTimerSync(sleptTimeUs);
    db9c:	0020      	movs	r0, r4
    db9e:	0029      	movs	r1, r5
    dba0:	4b11      	ldr	r3, [pc, #68]	; (dbe8 <PMM_Wakeup+0x78>)
    dba2:	4798      	blx	r3
        if (sleepReq && sleepReq->pmmWakeupCallback)
    dba4:	4b11      	ldr	r3, [pc, #68]	; (dbec <PMM_Wakeup+0x7c>)
    dba6:	681b      	ldr	r3, [r3, #0]
    dba8:	2b00      	cmp	r3, #0
    dbaa:	d0e6      	beq.n	db7a <PMM_Wakeup+0xa>
    dbac:	689e      	ldr	r6, [r3, #8]
    dbae:	2e00      	cmp	r6, #0
    dbb0:	d0e3      	beq.n	db7a <PMM_Wakeup+0xa>
            sleepReq->pmmWakeupCallback(US_TO_MS(sleptTimeUs));
    dbb2:	22fa      	movs	r2, #250	; 0xfa
    dbb4:	0092      	lsls	r2, r2, #2
    dbb6:	2300      	movs	r3, #0
    dbb8:	0020      	movs	r0, r4
    dbba:	0029      	movs	r1, r5
    dbbc:	4c0c      	ldr	r4, [pc, #48]	; (dbf0 <PMM_Wakeup+0x80>)
    dbbe:	47a0      	blx	r4
    dbc0:	47b0      	blx	r6
            sleepReq = NULL;
    dbc2:	2200      	movs	r2, #0
    dbc4:	4b09      	ldr	r3, [pc, #36]	; (dbec <PMM_Wakeup+0x7c>)
    dbc6:	601a      	str	r2, [r3, #0]
}
    dbc8:	e7d7      	b.n	db7a <PMM_Wakeup+0xa>
    dbca:	46c0      	nop			; (mov r8, r8)
    dbcc:	20001d98 	.word	0x20001d98
    dbd0:	0000db15 	.word	0x0000db15
    dbd4:	00015a01 	.word	0x00015a01
    dbd8:	41f423d7 	.word	0x41f423d7
    dbdc:	000153a9 	.word	0x000153a9
    dbe0:	00014ae5 	.word	0x00014ae5
    dbe4:	0000db29 	.word	0x0000db29
    dbe8:	0000ea4d 	.word	0x0000ea4d
    dbec:	20001d9c 	.word	0x20001d9c
    dbf0:	000149e5 	.word	0x000149e5

0000dbf4 <InitDefault868Channels>:
/*
 * \brief This function initializes all the EU868 Channels to default values
 */
#if (EU_BAND == 1)
void InitDefault868Channels (void)
{
    dbf4:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    memset (RegParams.pChParams, 0, sizeof(DefaultChannels868) );
    dbf6:	4c39      	ldr	r4, [pc, #228]	; (dcdc <InitDefault868Channels+0xe8>)
    dbf8:	7920      	ldrb	r0, [r4, #4]
    dbfa:	7963      	ldrb	r3, [r4, #5]
    dbfc:	021b      	lsls	r3, r3, #8
    dbfe:	4303      	orrs	r3, r0
    dc00:	79a0      	ldrb	r0, [r4, #6]
    dc02:	0400      	lsls	r0, r0, #16
    dc04:	4303      	orrs	r3, r0
    dc06:	79e0      	ldrb	r0, [r4, #7]
    dc08:	0600      	lsls	r0, r0, #24
    dc0a:	4318      	orrs	r0, r3
    dc0c:	2206      	movs	r2, #6
    dc0e:	2100      	movs	r1, #0
    dc10:	4e33      	ldr	r6, [pc, #204]	; (dce0 <InitDefault868Channels+0xec>)
    dc12:	47b0      	blx	r6
    memcpy (RegParams.pChParams, DefaultChannels868, sizeof(DefaultChannels868) );
    dc14:	7920      	ldrb	r0, [r4, #4]
    dc16:	7963      	ldrb	r3, [r4, #5]
    dc18:	021b      	lsls	r3, r3, #8
    dc1a:	4303      	orrs	r3, r0
    dc1c:	79a0      	ldrb	r0, [r4, #6]
    dc1e:	0400      	lsls	r0, r0, #16
    dc20:	4303      	orrs	r3, r0
    dc22:	79e0      	ldrb	r0, [r4, #7]
    dc24:	0600      	lsls	r0, r0, #24
    dc26:	4318      	orrs	r0, r3
    dc28:	2206      	movs	r2, #6
    dc2a:	492e      	ldr	r1, [pc, #184]	; (dce4 <InitDefault868Channels+0xf0>)
    dc2c:	4d2e      	ldr	r5, [pc, #184]	; (dce8 <InitDefault868Channels+0xf4>)
    dc2e:	47a8      	blx	r5
    memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels868) );
    dc30:	7a20      	ldrb	r0, [r4, #8]
    dc32:	7a63      	ldrb	r3, [r4, #9]
    dc34:	021b      	lsls	r3, r3, #8
    dc36:	4303      	orrs	r3, r0
    dc38:	7aa0      	ldrb	r0, [r4, #10]
    dc3a:	0400      	lsls	r0, r0, #16
    dc3c:	4303      	orrs	r3, r0
    dc3e:	7ae0      	ldrb	r0, [r4, #11]
    dc40:	0600      	lsls	r0, r0, #24
    dc42:	4318      	orrs	r0, r3
    dc44:	2224      	movs	r2, #36	; 0x24
    dc46:	2100      	movs	r1, #0
    dc48:	47b0      	blx	r6
    memcpy (RegParams.pOtherChParams, AdvChannels868, sizeof(AdvChannels868) );	
    dc4a:	7a20      	ldrb	r0, [r4, #8]
    dc4c:	7a63      	ldrb	r3, [r4, #9]
    dc4e:	021b      	lsls	r3, r3, #8
    dc50:	4303      	orrs	r3, r0
    dc52:	7aa0      	ldrb	r0, [r4, #10]
    dc54:	0400      	lsls	r0, r0, #16
    dc56:	4303      	orrs	r3, r0
    dc58:	7ae0      	ldrb	r0, [r4, #11]
    dc5a:	0600      	lsls	r0, r0, #24
    dc5c:	4318      	orrs	r0, r3
    dc5e:	2224      	movs	r2, #36	; 0x24
    dc60:	4922      	ldr	r1, [pc, #136]	; (dcec <InitDefault868Channels+0xf8>)
    dc62:	47a8      	blx	r5
	memset (RegParams.pSubBandParams, 0, sizeof(SubBandParams868) );
    dc64:	7b20      	ldrb	r0, [r4, #12]
    dc66:	7b63      	ldrb	r3, [r4, #13]
    dc68:	021b      	lsls	r3, r3, #8
    dc6a:	4303      	orrs	r3, r0
    dc6c:	7ba0      	ldrb	r0, [r4, #14]
    dc6e:	0400      	lsls	r0, r0, #16
    dc70:	4303      	orrs	r3, r0
    dc72:	7be0      	ldrb	r0, [r4, #15]
    dc74:	0600      	lsls	r0, r0, #24
    dc76:	4318      	orrs	r0, r3
    dc78:	2248      	movs	r2, #72	; 0x48
    dc7a:	2100      	movs	r1, #0
    dc7c:	47b0      	blx	r6
	memcpy (RegParams.pSubBandParams, SubBandParams868, sizeof(SubBandParams868) );
    dc7e:	7b20      	ldrb	r0, [r4, #12]
    dc80:	7b63      	ldrb	r3, [r4, #13]
    dc82:	021b      	lsls	r3, r3, #8
    dc84:	4303      	orrs	r3, r0
    dc86:	7ba0      	ldrb	r0, [r4, #14]
    dc88:	0400      	lsls	r0, r0, #16
    dc8a:	4303      	orrs	r3, r0
    dc8c:	7be0      	ldrb	r0, [r4, #15]
    dc8e:	0600      	lsls	r0, r0, #24
    dc90:	4318      	orrs	r0, r3
    dc92:	2248      	movs	r2, #72	; 0x48
    dc94:	4916      	ldr	r1, [pc, #88]	; (dcf0 <InitDefault868Channels+0xfc>)
    dc96:	47a8      	blx	r5
	memset(RegParams.cmnParams.paramsType2.subBandDutyCycle,0,sizeof(SubBandDutyCycle868));
	memcpy(RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycle868,sizeof(SubBandDutyCycle868));
    dc98:	0020      	movs	r0, r4
    dc9a:	30af      	adds	r0, #175	; 0xaf
    dc9c:	30ff      	adds	r0, #255	; 0xff
    dc9e:	220c      	movs	r2, #12
    dca0:	4914      	ldr	r1, [pc, #80]	; (dcf4 <InitDefault868Channels+0x100>)
    dca2:	47a8      	blx	r5
    for (i = 3; i < RegParams.maxChannels; i++)
    dca4:	232a      	movs	r3, #42	; 0x2a
    dca6:	56e3      	ldrsb	r3, [r4, r3]
    dca8:	2b03      	cmp	r3, #3
    dcaa:	dd15      	ble.n	dcd8 <InitDefault868Channels+0xe4>
    dcac:	2303      	movs	r3, #3
    {
        // for undefined channels the duty cycle should be a very big value, and the data range a not-valid value
        //duty cycle 0 means no duty cycle limitation, the bigger the duty cycle value, the greater the limitation
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;		
    dcae:	480b      	ldr	r0, [pc, #44]	; (dcdc <InitDefault868Channels+0xe8>)
    dcb0:	25ff      	movs	r5, #255	; 0xff
    for (i = 3; i < RegParams.maxChannels; i++)
    dcb2:	242a      	movs	r4, #42	; 0x2a
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;		
    dcb4:	7902      	ldrb	r2, [r0, #4]
    dcb6:	7941      	ldrb	r1, [r0, #5]
    dcb8:	0209      	lsls	r1, r1, #8
    dcba:	4311      	orrs	r1, r2
    dcbc:	7982      	ldrb	r2, [r0, #6]
    dcbe:	0412      	lsls	r2, r2, #16
    dcc0:	4311      	orrs	r1, r2
    dcc2:	79c2      	ldrb	r2, [r0, #7]
    dcc4:	0612      	lsls	r2, r2, #24
    dcc6:	430a      	orrs	r2, r1
    dcc8:	0059      	lsls	r1, r3, #1
    dcca:	188a      	adds	r2, r1, r2
    dccc:	7055      	strb	r5, [r2, #1]
    for (i = 3; i < RegParams.maxChannels; i++)
    dcce:	3301      	adds	r3, #1
    dcd0:	b2db      	uxtb	r3, r3
    dcd2:	5702      	ldrsb	r2, [r0, r4]
    dcd4:	4293      	cmp	r3, r2
    dcd6:	dbed      	blt.n	dcb4 <InitDefault868Channels+0xc0>
    }
}
    dcd8:	bd70      	pop	{r4, r5, r6, pc}
    dcda:	46c0      	nop			; (mov r8, r8)
    dcdc:	200033b4 	.word	0x200033b4
    dce0:	0001787d 	.word	0x0001787d
    dce4:	0001a2a0 	.word	0x0001a2a0
    dce8:	0001786b 	.word	0x0001786b
    dcec:	0001a274 	.word	0x0001a274
    dcf0:	0001a2c0 	.word	0x0001a2c0
    dcf4:	0001a2a8 	.word	0x0001a2a8

0000dcf8 <InitDefault433Channels>:

/*
 * \brief This function initializes all the EU433 Channels to default values
 */
void InitDefault433Channels (void)
{
    dcf8:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    memset (RegParams.pChParams, 0, sizeof(DefaultChannels433) );
    dcfa:	4c36      	ldr	r4, [pc, #216]	; (ddd4 <InitDefault433Channels+0xdc>)
    dcfc:	7920      	ldrb	r0, [r4, #4]
    dcfe:	7963      	ldrb	r3, [r4, #5]
    dd00:	021b      	lsls	r3, r3, #8
    dd02:	4303      	orrs	r3, r0
    dd04:	79a0      	ldrb	r0, [r4, #6]
    dd06:	0400      	lsls	r0, r0, #16
    dd08:	4303      	orrs	r3, r0
    dd0a:	79e0      	ldrb	r0, [r4, #7]
    dd0c:	0600      	lsls	r0, r0, #24
    dd0e:	4318      	orrs	r0, r3
    dd10:	2206      	movs	r2, #6
    dd12:	2100      	movs	r1, #0
    dd14:	4e30      	ldr	r6, [pc, #192]	; (ddd8 <InitDefault433Channels+0xe0>)
    dd16:	47b0      	blx	r6
    memcpy (RegParams.pChParams, DefaultChannels433, sizeof(DefaultChannels433) );
    dd18:	7920      	ldrb	r0, [r4, #4]
    dd1a:	7963      	ldrb	r3, [r4, #5]
    dd1c:	021b      	lsls	r3, r3, #8
    dd1e:	4303      	orrs	r3, r0
    dd20:	79a0      	ldrb	r0, [r4, #6]
    dd22:	0400      	lsls	r0, r0, #16
    dd24:	4303      	orrs	r3, r0
    dd26:	79e0      	ldrb	r0, [r4, #7]
    dd28:	0600      	lsls	r0, r0, #24
    dd2a:	4318      	orrs	r0, r3
    dd2c:	2206      	movs	r2, #6
    dd2e:	492b      	ldr	r1, [pc, #172]	; (dddc <InitDefault433Channels+0xe4>)
    dd30:	4d2b      	ldr	r5, [pc, #172]	; (dde0 <InitDefault433Channels+0xe8>)
    dd32:	47a8      	blx	r5
    memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels433) );
    dd34:	7a20      	ldrb	r0, [r4, #8]
    dd36:	7a63      	ldrb	r3, [r4, #9]
    dd38:	021b      	lsls	r3, r3, #8
    dd3a:	4303      	orrs	r3, r0
    dd3c:	7aa0      	ldrb	r0, [r4, #10]
    dd3e:	0400      	lsls	r0, r0, #16
    dd40:	4303      	orrs	r3, r0
    dd42:	7ae0      	ldrb	r0, [r4, #11]
    dd44:	0600      	lsls	r0, r0, #24
    dd46:	4318      	orrs	r0, r3
    dd48:	2224      	movs	r2, #36	; 0x24
    dd4a:	2100      	movs	r1, #0
    dd4c:	47b0      	blx	r6
    memcpy (RegParams.pOtherChParams, AdvChannels433, sizeof(AdvChannels433) );
    dd4e:	7a20      	ldrb	r0, [r4, #8]
    dd50:	7a63      	ldrb	r3, [r4, #9]
    dd52:	021b      	lsls	r3, r3, #8
    dd54:	4303      	orrs	r3, r0
    dd56:	7aa0      	ldrb	r0, [r4, #10]
    dd58:	0400      	lsls	r0, r0, #16
    dd5a:	4303      	orrs	r3, r0
    dd5c:	7ae0      	ldrb	r0, [r4, #11]
    dd5e:	0600      	lsls	r0, r0, #24
    dd60:	4318      	orrs	r0, r3
    dd62:	2224      	movs	r2, #36	; 0x24
    dd64:	491f      	ldr	r1, [pc, #124]	; (dde4 <InitDefault433Channels+0xec>)
    dd66:	47a8      	blx	r5
	memset (RegParams.pSubBandParams, 0, sizeof(SubBandParams433) );
    dd68:	7b20      	ldrb	r0, [r4, #12]
    dd6a:	7b63      	ldrb	r3, [r4, #13]
    dd6c:	021b      	lsls	r3, r3, #8
    dd6e:	4303      	orrs	r3, r0
    dd70:	7ba0      	ldrb	r0, [r4, #14]
    dd72:	0400      	lsls	r0, r0, #16
    dd74:	4303      	orrs	r3, r0
    dd76:	7be0      	ldrb	r0, [r4, #15]
    dd78:	0600      	lsls	r0, r0, #24
    dd7a:	4318      	orrs	r0, r3
    dd7c:	220c      	movs	r2, #12
    dd7e:	2100      	movs	r1, #0
    dd80:	47b0      	blx	r6
	memcpy (RegParams.pSubBandParams, SubBandParams433, sizeof(SubBandParams433) );	
    dd82:	7b20      	ldrb	r0, [r4, #12]
    dd84:	7b63      	ldrb	r3, [r4, #13]
    dd86:	021b      	lsls	r3, r3, #8
    dd88:	4303      	orrs	r3, r0
    dd8a:	7ba0      	ldrb	r0, [r4, #14]
    dd8c:	0400      	lsls	r0, r0, #16
    dd8e:	4303      	orrs	r3, r0
    dd90:	7be0      	ldrb	r0, [r4, #15]
    dd92:	0600      	lsls	r0, r0, #24
    dd94:	4318      	orrs	r0, r3
    dd96:	220c      	movs	r2, #12
    dd98:	4913      	ldr	r1, [pc, #76]	; (dde8 <InitDefault433Channels+0xf0>)
    dd9a:	47a8      	blx	r5
	
    for (i = 3; i < RegParams.maxChannels; i++)
    dd9c:	232a      	movs	r3, #42	; 0x2a
    dd9e:	56e3      	ldrsb	r3, [r4, r3]
    dda0:	2b03      	cmp	r3, #3
    dda2:	dd15      	ble.n	ddd0 <InitDefault433Channels+0xd8>
    dda4:	2303      	movs	r3, #3
    {
        // for undefined channels the duty cycle should be a very big value, and the data range a not-valid value
        //duty cycle 0 means no duty cycle limitation, the bigger the duty cycle value, the greater the limitation
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    dda6:	480b      	ldr	r0, [pc, #44]	; (ddd4 <InitDefault433Channels+0xdc>)
    dda8:	25ff      	movs	r5, #255	; 0xff
    for (i = 3; i < RegParams.maxChannels; i++)
    ddaa:	242a      	movs	r4, #42	; 0x2a
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    ddac:	7902      	ldrb	r2, [r0, #4]
    ddae:	7941      	ldrb	r1, [r0, #5]
    ddb0:	0209      	lsls	r1, r1, #8
    ddb2:	4311      	orrs	r1, r2
    ddb4:	7982      	ldrb	r2, [r0, #6]
    ddb6:	0412      	lsls	r2, r2, #16
    ddb8:	4311      	orrs	r1, r2
    ddba:	79c2      	ldrb	r2, [r0, #7]
    ddbc:	0612      	lsls	r2, r2, #24
    ddbe:	430a      	orrs	r2, r1
    ddc0:	0059      	lsls	r1, r3, #1
    ddc2:	188a      	adds	r2, r1, r2
    ddc4:	7055      	strb	r5, [r2, #1]
    for (i = 3; i < RegParams.maxChannels; i++)
    ddc6:	3301      	adds	r3, #1
    ddc8:	b2db      	uxtb	r3, r3
    ddca:	5702      	ldrsb	r2, [r0, r4]
    ddcc:	4293      	cmp	r3, r2
    ddce:	dbed      	blt.n	ddac <InitDefault433Channels+0xb4>
    }
}
    ddd0:	bd70      	pop	{r4, r5, r6, pc}
    ddd2:	46c0      	nop			; (mov r8, r8)
    ddd4:	200033b4 	.word	0x200033b4
    ddd8:	0001787d 	.word	0x0001787d
    dddc:	0001a298 	.word	0x0001a298
    dde0:	0001786b 	.word	0x0001786b
    dde4:	0001a250 	.word	0x0001a250
    dde8:	0001a2b4 	.word	0x0001a2b4

0000ddec <InitDefault920Channels>:
/*
 * \brief This function initializes all the IN865 Channels to default values
 */
#if (JPN_BAND == 1)
void InitDefault920Channels (void)
{
    ddec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
    memset (RegParams.pChParams, 0, sizeof(DefaultChannels923JP) );
    ddee:	4c40      	ldr	r4, [pc, #256]	; (def0 <InitDefault920Channels+0x104>)
    ddf0:	7920      	ldrb	r0, [r4, #4]
    ddf2:	7963      	ldrb	r3, [r4, #5]
    ddf4:	021b      	lsls	r3, r3, #8
    ddf6:	4303      	orrs	r3, r0
    ddf8:	79a0      	ldrb	r0, [r4, #6]
    ddfa:	0400      	lsls	r0, r0, #16
    ddfc:	4303      	orrs	r3, r0
    ddfe:	79e0      	ldrb	r0, [r4, #7]
    de00:	0600      	lsls	r0, r0, #24
    de02:	4318      	orrs	r0, r3
    de04:	2204      	movs	r2, #4
    de06:	2100      	movs	r1, #0
    de08:	4e3a      	ldr	r6, [pc, #232]	; (def4 <InitDefault920Channels+0x108>)
    de0a:	47b0      	blx	r6
	memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels923JP) );
    de0c:	7a20      	ldrb	r0, [r4, #8]
    de0e:	7a63      	ldrb	r3, [r4, #9]
    de10:	021b      	lsls	r3, r3, #8
    de12:	4303      	orrs	r3, r0
    de14:	7aa0      	ldrb	r0, [r4, #10]
    de16:	0400      	lsls	r0, r0, #16
    de18:	4303      	orrs	r3, r0
    de1a:	7ae0      	ldrb	r0, [r4, #11]
    de1c:	0600      	lsls	r0, r0, #24
    de1e:	4318      	orrs	r0, r3
    de20:	2218      	movs	r2, #24
    de22:	2100      	movs	r1, #0
    de24:	47b0      	blx	r6
    memcpy (RegParams.pChParams, DefaultChannels923JP, sizeof(DefaultChannels923JP) );
    de26:	7920      	ldrb	r0, [r4, #4]
    de28:	7963      	ldrb	r3, [r4, #5]
    de2a:	021b      	lsls	r3, r3, #8
    de2c:	4303      	orrs	r3, r0
    de2e:	79a0      	ldrb	r0, [r4, #6]
    de30:	0400      	lsls	r0, r0, #16
    de32:	4303      	orrs	r3, r0
    de34:	79e0      	ldrb	r0, [r4, #7]
    de36:	0600      	lsls	r0, r0, #24
    de38:	4318      	orrs	r0, r3
    de3a:	2204      	movs	r2, #4
    de3c:	492e      	ldr	r1, [pc, #184]	; (def8 <InitDefault920Channels+0x10c>)
    de3e:	4d2f      	ldr	r5, [pc, #188]	; (defc <InitDefault920Channels+0x110>)
    de40:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels923JP, sizeof(AdvChannels923JP) );
    de42:	7a20      	ldrb	r0, [r4, #8]
    de44:	7a63      	ldrb	r3, [r4, #9]
    de46:	021b      	lsls	r3, r3, #8
    de48:	4303      	orrs	r3, r0
    de4a:	7aa0      	ldrb	r0, [r4, #10]
    de4c:	0400      	lsls	r0, r0, #16
    de4e:	4303      	orrs	r3, r0
    de50:	7ae0      	ldrb	r0, [r4, #11]
    de52:	0600      	lsls	r0, r0, #24
    de54:	4318      	orrs	r0, r3
    de56:	2218      	movs	r2, #24
    de58:	4929      	ldr	r1, [pc, #164]	; (df00 <InitDefault920Channels+0x114>)
    de5a:	47a8      	blx	r5
	memset (RegParams.pSubBandParams, 0, sizeof(SubBandParamsJP923) );
    de5c:	7b20      	ldrb	r0, [r4, #12]
    de5e:	7b63      	ldrb	r3, [r4, #13]
    de60:	021b      	lsls	r3, r3, #8
    de62:	4303      	orrs	r3, r0
    de64:	7ba0      	ldrb	r0, [r4, #14]
    de66:	0400      	lsls	r0, r0, #16
    de68:	4303      	orrs	r3, r0
    de6a:	7be0      	ldrb	r0, [r4, #15]
    de6c:	0600      	lsls	r0, r0, #24
    de6e:	4318      	orrs	r0, r3
    de70:	2218      	movs	r2, #24
    de72:	2100      	movs	r1, #0
    de74:	47b0      	blx	r6
	memcpy (RegParams.pSubBandParams, SubBandParamsJP923, sizeof(SubBandParamsJP923) );
    de76:	7b20      	ldrb	r0, [r4, #12]
    de78:	7b63      	ldrb	r3, [r4, #13]
    de7a:	021b      	lsls	r3, r3, #8
    de7c:	4303      	orrs	r3, r0
    de7e:	7ba0      	ldrb	r0, [r4, #14]
    de80:	0400      	lsls	r0, r0, #16
    de82:	4303      	orrs	r3, r0
    de84:	7be0      	ldrb	r0, [r4, #15]
    de86:	0600      	lsls	r0, r0, #24
    de88:	4318      	orrs	r0, r3
    de8a:	2218      	movs	r2, #24
    de8c:	491d      	ldr	r1, [pc, #116]	; (df04 <InitDefault920Channels+0x118>)
    de8e:	47a8      	blx	r5
	memset (RegParams.cmnParams.paramsType2.subBandDutyCycle,0,sizeof(SubBandDutyCycleJP923));
	memcpy (RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycleJP923,sizeof(SubBandDutyCycleJP923));
    de90:	0020      	movs	r0, r4
    de92:	30af      	adds	r0, #175	; 0xaf
    de94:	30ff      	adds	r0, #255	; 0xff
    de96:	2204      	movs	r2, #4
    de98:	491b      	ldr	r1, [pc, #108]	; (df08 <InitDefault920Channels+0x11c>)
    de9a:	47a8      	blx	r5
    for (i = 2; i < RegParams.maxChannels; i++)
    de9c:	232a      	movs	r3, #42	; 0x2a
    de9e:	56e3      	ldrsb	r3, [r4, r3]
    dea0:	2b02      	cmp	r3, #2
    dea2:	dd1f      	ble.n	dee4 <InitDefault920Channels+0xf8>
    dea4:	2302      	movs	r3, #2
    dea6:	2202      	movs	r2, #2
    {
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    dea8:	4911      	ldr	r1, [pc, #68]	; (def0 <InitDefault920Channels+0x104>)
    deaa:	27ff      	movs	r7, #255	; 0xff
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    deac:	2500      	movs	r5, #0
    for (i = 2; i < RegParams.maxChannels; i++)
    deae:	262a      	movs	r6, #42	; 0x2a
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    deb0:	7908      	ldrb	r0, [r1, #4]
    deb2:	794c      	ldrb	r4, [r1, #5]
    deb4:	0224      	lsls	r4, r4, #8
    deb6:	4304      	orrs	r4, r0
    deb8:	7988      	ldrb	r0, [r1, #6]
    deba:	0400      	lsls	r0, r0, #16
    debc:	4304      	orrs	r4, r0
    debe:	79c8      	ldrb	r0, [r1, #7]
    dec0:	0600      	lsls	r0, r0, #24
    dec2:	4320      	orrs	r0, r4
    dec4:	0054      	lsls	r4, r2, #1
    dec6:	1820      	adds	r0, r4, r0
    dec8:	7047      	strb	r7, [r0, #1]
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    deca:	3358      	adds	r3, #88	; 0x58
    decc:	009b      	lsls	r3, r3, #2
    dece:	18cb      	adds	r3, r1, r3
    ded0:	725d      	strb	r5, [r3, #9]
    ded2:	729d      	strb	r5, [r3, #10]
    ded4:	72dd      	strb	r5, [r3, #11]
    ded6:	731d      	strb	r5, [r3, #12]
    for (i = 2; i < RegParams.maxChannels; i++)
    ded8:	3201      	adds	r2, #1
    deda:	b2d2      	uxtb	r2, r2
    dedc:	0013      	movs	r3, r2
    dede:	5788      	ldrsb	r0, [r1, r6]
    dee0:	4282      	cmp	r2, r0
    dee2:	dbe5      	blt.n	deb0 <InitDefault920Channels+0xc4>
    }
	RegParams.lastUsedChannelIndex = UINT8_MAX;
    dee4:	21ff      	movs	r1, #255	; 0xff
    dee6:	2330      	movs	r3, #48	; 0x30
    dee8:	4a01      	ldr	r2, [pc, #4]	; (def0 <InitDefault920Channels+0x104>)
    deea:	54d1      	strb	r1, [r2, r3]
}
    deec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    deee:	46c0      	nop			; (mov r8, r8)
    def0:	200033b4 	.word	0x200033b4
    def4:	0001787d 	.word	0x0001787d
    def8:	0001a320 	.word	0x0001a320
    defc:	0001786b 	.word	0x0001786b
    df00:	0001a308 	.word	0x0001a308
    df04:	0001a328 	.word	0x0001a328
    df08:	0001a324 	.word	0x0001a324

0000df0c <InitDefault920ChannelsKR>:
/*
 * \brief This function initializes all the IN865 Channels to default values
 */
#if (KR_BAND == 1)
void InitDefault920ChannelsKR (void)
{
    df0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    df0e:	46d6      	mov	lr, sl
    df10:	464f      	mov	r7, r9
    df12:	4646      	mov	r6, r8
    df14:	b5c0      	push	{r6, r7, lr}
    uint8_t i;
    memset (RegParams.pChParams, 0, sizeof(DefaultChannels920KR) );
    df16:	4c46      	ldr	r4, [pc, #280]	; (e030 <InitDefault920ChannelsKR+0x124>)
    df18:	7920      	ldrb	r0, [r4, #4]
    df1a:	7963      	ldrb	r3, [r4, #5]
    df1c:	021b      	lsls	r3, r3, #8
    df1e:	4303      	orrs	r3, r0
    df20:	79a0      	ldrb	r0, [r4, #6]
    df22:	0400      	lsls	r0, r0, #16
    df24:	4303      	orrs	r3, r0
    df26:	79e0      	ldrb	r0, [r4, #7]
    df28:	0600      	lsls	r0, r0, #24
    df2a:	4318      	orrs	r0, r3
    df2c:	2206      	movs	r2, #6
    df2e:	2100      	movs	r1, #0
    df30:	4d40      	ldr	r5, [pc, #256]	; (e034 <InitDefault920ChannelsKR+0x128>)
    df32:	47a8      	blx	r5
	memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels920KR) );
    df34:	7a20      	ldrb	r0, [r4, #8]
    df36:	7a63      	ldrb	r3, [r4, #9]
    df38:	021b      	lsls	r3, r3, #8
    df3a:	4303      	orrs	r3, r0
    df3c:	7aa0      	ldrb	r0, [r4, #10]
    df3e:	0400      	lsls	r0, r0, #16
    df40:	4303      	orrs	r3, r0
    df42:	7ae0      	ldrb	r0, [r4, #11]
    df44:	0600      	lsls	r0, r0, #24
    df46:	4318      	orrs	r0, r3
    df48:	2224      	movs	r2, #36	; 0x24
    df4a:	2100      	movs	r1, #0
    df4c:	47a8      	blx	r5
    memcpy (RegParams.pChParams, DefaultChannels920KR, sizeof(DefaultChannels920KR) );
    df4e:	7920      	ldrb	r0, [r4, #4]
    df50:	7963      	ldrb	r3, [r4, #5]
    df52:	021b      	lsls	r3, r3, #8
    df54:	4303      	orrs	r3, r0
    df56:	79a0      	ldrb	r0, [r4, #6]
    df58:	0400      	lsls	r0, r0, #16
    df5a:	4303      	orrs	r3, r0
    df5c:	79e0      	ldrb	r0, [r4, #7]
    df5e:	0600      	lsls	r0, r0, #24
    df60:	4318      	orrs	r0, r3
    df62:	2206      	movs	r2, #6
    df64:	4934      	ldr	r1, [pc, #208]	; (e038 <InitDefault920ChannelsKR+0x12c>)
    df66:	4d35      	ldr	r5, [pc, #212]	; (e03c <InitDefault920ChannelsKR+0x130>)
    df68:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels920KR, sizeof(AdvChannels920KR) );
    df6a:	7a20      	ldrb	r0, [r4, #8]
    df6c:	7a63      	ldrb	r3, [r4, #9]
    df6e:	021b      	lsls	r3, r3, #8
    df70:	4303      	orrs	r3, r0
    df72:	7aa0      	ldrb	r0, [r4, #10]
    df74:	0400      	lsls	r0, r0, #16
    df76:	4303      	orrs	r3, r0
    df78:	7ae0      	ldrb	r0, [r4, #11]
    df7a:	0600      	lsls	r0, r0, #24
    df7c:	4318      	orrs	r0, r3
    df7e:	2224      	movs	r2, #36	; 0x24
    df80:	492f      	ldr	r1, [pc, #188]	; (e040 <InitDefault920ChannelsKR+0x134>)
    df82:	47a8      	blx	r5
    for (i = 3; i < RegParams.maxChannels; i++)
    df84:	232a      	movs	r3, #42	; 0x2a
    df86:	56e3      	ldrsb	r3, [r4, r3]
    df88:	2b03      	cmp	r3, #3
    df8a:	dd48      	ble.n	e01e <InitDefault920ChannelsKR+0x112>
    df8c:	2103      	movs	r1, #3
    df8e:	2003      	movs	r0, #3
    {
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    df90:	4b27      	ldr	r3, [pc, #156]	; (e030 <InitDefault920ChannelsKR+0x124>)
    df92:	26ff      	movs	r6, #255	; 0xff
		RegParams.pChParams[i].status = DISABLED;
    df94:	2500      	movs	r5, #0
		RegParams.pOtherChParams[i].joinRequestChannel = DISABLED;
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = UINT8_MAX;
    df96:	22e1      	movs	r2, #225	; 0xe1
    df98:	0052      	lsls	r2, r2, #1
    df9a:	4690      	mov	r8, r2
    df9c:	46b4      	mov	ip, r6
    for (i = 3; i < RegParams.maxChannels; i++)
    df9e:	3a99      	subs	r2, #153	; 0x99
    dfa0:	3aff      	subs	r2, #255	; 0xff
    dfa2:	4692      	mov	sl, r2
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    dfa4:	0042      	lsls	r2, r0, #1
    dfa6:	791c      	ldrb	r4, [r3, #4]
    dfa8:	46a1      	mov	r9, r4
    dfaa:	795c      	ldrb	r4, [r3, #5]
    dfac:	0224      	lsls	r4, r4, #8
    dfae:	464f      	mov	r7, r9
    dfb0:	4327      	orrs	r7, r4
    dfb2:	799c      	ldrb	r4, [r3, #6]
    dfb4:	0424      	lsls	r4, r4, #16
    dfb6:	4327      	orrs	r7, r4
    dfb8:	79dc      	ldrb	r4, [r3, #7]
    dfba:	0624      	lsls	r4, r4, #24
    dfbc:	433c      	orrs	r4, r7
    dfbe:	18a4      	adds	r4, r4, r2
    dfc0:	7066      	strb	r6, [r4, #1]
		RegParams.pChParams[i].status = DISABLED;
    dfc2:	791c      	ldrb	r4, [r3, #4]
    dfc4:	46a1      	mov	r9, r4
    dfc6:	795c      	ldrb	r4, [r3, #5]
    dfc8:	0224      	lsls	r4, r4, #8
    dfca:	464f      	mov	r7, r9
    dfcc:	4327      	orrs	r7, r4
    dfce:	799c      	ldrb	r4, [r3, #6]
    dfd0:	0424      	lsls	r4, r4, #16
    dfd2:	4327      	orrs	r7, r4
    dfd4:	79dc      	ldrb	r4, [r3, #7]
    dfd6:	0624      	lsls	r4, r4, #24
    dfd8:	433c      	orrs	r4, r7
    dfda:	54a5      	strb	r5, [r4, r2]
		RegParams.pOtherChParams[i].joinRequestChannel = DISABLED;
    dfdc:	7a1c      	ldrb	r4, [r3, #8]
    dfde:	46a1      	mov	r9, r4
    dfe0:	7a5c      	ldrb	r4, [r3, #9]
    dfe2:	0224      	lsls	r4, r4, #8
    dfe4:	464f      	mov	r7, r9
    dfe6:	4327      	orrs	r7, r4
    dfe8:	7a9c      	ldrb	r4, [r3, #10]
    dfea:	0424      	lsls	r4, r4, #16
    dfec:	4327      	orrs	r7, r4
    dfee:	7adc      	ldrb	r4, [r3, #11]
    dff0:	0624      	lsls	r4, r4, #24
    dff2:	433c      	orrs	r4, r7
    dff4:	1812      	adds	r2, r2, r0
    dff6:	0092      	lsls	r2, r2, #2
    dff8:	1912      	adds	r2, r2, r4
    dffa:	7255      	strb	r5, [r2, #9]
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = UINT8_MAX;
    dffc:	4642      	mov	r2, r8
    dffe:	4664      	mov	r4, ip
    e000:	549c      	strb	r4, [r3, r2]
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    e002:	3158      	adds	r1, #88	; 0x58
    e004:	0089      	lsls	r1, r1, #2
    e006:	1859      	adds	r1, r3, r1
    e008:	724d      	strb	r5, [r1, #9]
    e00a:	728d      	strb	r5, [r1, #10]
    e00c:	72cd      	strb	r5, [r1, #11]
    e00e:	730d      	strb	r5, [r1, #12]
    for (i = 3; i < RegParams.maxChannels; i++)
    e010:	3001      	adds	r0, #1
    e012:	b2c0      	uxtb	r0, r0
    e014:	0001      	movs	r1, r0
    e016:	4652      	mov	r2, sl
    e018:	569a      	ldrsb	r2, [r3, r2]
    e01a:	4290      	cmp	r0, r2
    e01c:	dbc2      	blt.n	dfa4 <InitDefault920ChannelsKR+0x98>
    }
	RegParams.lastUsedChannelIndex = UINT8_MAX;
    e01e:	21ff      	movs	r1, #255	; 0xff
    e020:	2330      	movs	r3, #48	; 0x30
    e022:	4a03      	ldr	r2, [pc, #12]	; (e030 <InitDefault920ChannelsKR+0x124>)
    e024:	54d1      	strb	r1, [r2, r3]
}
    e026:	bc1c      	pop	{r2, r3, r4}
    e028:	4690      	mov	r8, r2
    e02a:	4699      	mov	r9, r3
    e02c:	46a2      	mov	sl, r4
    e02e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e030:	200033b4 	.word	0x200033b4
    e034:	0001787d 	.word	0x0001787d
    e038:	0001a364 	.word	0x0001a364
    e03c:	0001786b 	.word	0x0001786b
    e040:	0001a340 	.word	0x0001a340

0000e044 <LORAREG_GetAttr>:
 * \param[out] Result of the GET operation
 * \retval LORAWAN_SUCCESS : If GET is successful
 *	LORAWAN_INVALID_PARAMETER if the input attribute or the attribute type is invalid
 */
StackRetStatus_t LORAREG_GetAttr(LorawanRegionalAttributes_t attrType, void *attrInput, void *attrOutput)
{
    e044:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    e046:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    e048:	283c      	cmp	r0, #60	; 0x3c
    e04a:	d901      	bls.n	e050 <LORAREG_GetAttr+0xc>
	{
	    result = pGetAttr[attrType](attrType, attrInput,attrOutput);	
	}

	return result;
}
    e04c:	0018      	movs	r0, r3
    e04e:	bd10      	pop	{r4, pc}
	    result = pGetAttr[attrType](attrType, attrInput,attrOutput);	
    e050:	0084      	lsls	r4, r0, #2
    e052:	4b02      	ldr	r3, [pc, #8]	; (e05c <LORAREG_GetAttr+0x18>)
    e054:	58e3      	ldr	r3, [r4, r3]
    e056:	4798      	blx	r3
    e058:	0003      	movs	r3, r0
    e05a:	e7f7      	b.n	e04c <LORAREG_GetAttr+0x8>
    e05c:	20001da0 	.word	0x20001da0

0000e060 <LORAREG_ValidateAttr>:
 * \param[in] attrInput Input used to validate the attribute value
 * \retval LORAWAN_SUCCESS : If Validate is successful
 *	LORAWAN_INVALID_PARAMETER if the input attribute or the attribute type is invalid
 */
StackRetStatus_t LORAREG_ValidateAttr(LorawanRegionalAttributes_t attrType, void *attrInput)
{
    e060:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    e062:	230a      	movs	r3, #10
	
	if(attrType < REG_NUM_ATTRIBUTES)
    e064:	283c      	cmp	r0, #60	; 0x3c
    e066:	d901      	bls.n	e06c <LORAREG_ValidateAttr+0xc>
	{
	    result = pValidateAttr[attrType](attrType, attrInput);		
	}

	return result;
}
    e068:	0018      	movs	r0, r3
    e06a:	bd10      	pop	{r4, pc}
	    result = pValidateAttr[attrType](attrType, attrInput);		
    e06c:	0082      	lsls	r2, r0, #2
    e06e:	4b02      	ldr	r3, [pc, #8]	; (e078 <LORAREG_ValidateAttr+0x18>)
    e070:	58d3      	ldr	r3, [r2, r3]
    e072:	4798      	blx	r3
    e074:	0003      	movs	r3, r0
    e076:	e7f7      	b.n	e068 <LORAREG_ValidateAttr+0x8>
    e078:	20001f88 	.word	0x20001f88

0000e07c <LORAREG_SetAttr>:
 * \param[in] attrInput Input used to update the attribute value
 * \retval LORAWAN_SUCCESS : If Update is successful
 *	LORAWAN_INVALID_PARAMETER if the input attribute or the attribute type is invalid
 */
StackRetStatus_t LORAREG_SetAttr(LorawanRegionalAttributes_t attrType, void *attrInput)
{
    e07c:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    e07e:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    e080:	283c      	cmp	r0, #60	; 0x3c
    e082:	d901      	bls.n	e088 <LORAREG_SetAttr+0xc>
	{
	    result = pSetAttr[attrType](attrType, attrInput);		
	}

	return result;
}
    e084:	0018      	movs	r0, r3
    e086:	bd10      	pop	{r4, pc}
	    result = pSetAttr[attrType](attrType, attrInput);		
    e088:	0082      	lsls	r2, r0, #2
    e08a:	4b02      	ldr	r3, [pc, #8]	; (e094 <LORAREG_SetAttr+0x18>)
    e08c:	58d3      	ldr	r3, [r2, r3]
    e08e:	4798      	blx	r3
    e090:	0003      	movs	r3, r0
    e092:	e7f7      	b.n	e084 <LORAREG_SetAttr+0x8>
    e094:	20001e94 	.word	0x20001e94

0000e098 <setDefaultTxPower>:
}
#endif
StackRetStatus_t setDefaultTxPower(IsmBand_t ismBand)
{   
	StackRetStatus_t result = LORAWAN_SUCCESS;
	if(ismBand == ISM_EU868)
    e098:	2800      	cmp	r0, #0
    e09a:	d00e      	beq.n	e0ba <setDefaultTxPower+0x22>
	{
			RegParams.MacTxPower = MAC_DEF_TX_POWER_EU;
	}
	else if(ismBand == ISM_JPN923)
    e09c:	2805      	cmp	r0, #5
    e09e:	d013      	beq.n	e0c8 <setDefaultTxPower+0x30>
	{
		RegParams.MacTxPower = MAC_DEF_TX_POWER_JP;
	}
	else if (ismBand == ISM_KR920)
    e0a0:	2804      	cmp	r0, #4
    e0a2:	d017      	beq.n	e0d4 <setDefaultTxPower+0x3c>
	}
	else if (ismBand == ISM_ASBAND)
	{
		RegParams.MacTxPower = MAC_DEF_TX_POWER_AS;
	}
	else if(ismBand == ISM_AU915)
    e0a4:	2803      	cmp	r0, #3
    e0a6:	d01b      	beq.n	e0e0 <setDefaultTxPower+0x48>
	{
		RegParams.MacTxPower = MAC_DEF_TX_POWER_NA;
	}
	else
	{
		result = LORAWAN_INVALID_PARAMETER;
    e0a8:	230a      	movs	r3, #10
	else if(ismBand == ISM_NA915)
    e0aa:	2802      	cmp	r0, #2
    e0ac:	d10a      	bne.n	e0c4 <setDefaultTxPower+0x2c>
		RegParams.MacTxPower = MAC_DEF_TX_POWER_NA;
    e0ae:	2107      	movs	r1, #7
    e0b0:	331d      	adds	r3, #29
    e0b2:	4a0e      	ldr	r2, [pc, #56]	; (e0ec <setDefaultTxPower+0x54>)
    e0b4:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    e0b6:	3b1f      	subs	r3, #31
    e0b8:	e004      	b.n	e0c4 <setDefaultTxPower+0x2c>
			RegParams.MacTxPower = MAC_DEF_TX_POWER_EU;
    e0ba:	2101      	movs	r1, #1
    e0bc:	2327      	movs	r3, #39	; 0x27
    e0be:	4a0b      	ldr	r2, [pc, #44]	; (e0ec <setDefaultTxPower+0x54>)
    e0c0:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    e0c2:	3b1f      	subs	r3, #31
	}
#if (ENABLE_PDS==1)
	PDS_STORE(RegParams.MacTxPower);
#endif
	return result;
}
    e0c4:	0018      	movs	r0, r3
    e0c6:	4770      	bx	lr
		RegParams.MacTxPower = MAC_DEF_TX_POWER_JP;
    e0c8:	2101      	movs	r1, #1
    e0ca:	2327      	movs	r3, #39	; 0x27
    e0cc:	4a07      	ldr	r2, [pc, #28]	; (e0ec <setDefaultTxPower+0x54>)
    e0ce:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    e0d0:	3b1f      	subs	r3, #31
    e0d2:	e7f7      	b.n	e0c4 <setDefaultTxPower+0x2c>
		RegParams.MacTxPower = MAC_DEF_TX_POWER_KR;
    e0d4:	2101      	movs	r1, #1
    e0d6:	2327      	movs	r3, #39	; 0x27
    e0d8:	4a04      	ldr	r2, [pc, #16]	; (e0ec <setDefaultTxPower+0x54>)
    e0da:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    e0dc:	3b1f      	subs	r3, #31
    e0de:	e7f1      	b.n	e0c4 <setDefaultTxPower+0x2c>
		RegParams.MacTxPower = MAC_DEF_TX_POWER_AU;
    e0e0:	2107      	movs	r1, #7
    e0e2:	2327      	movs	r3, #39	; 0x27
    e0e4:	4a01      	ldr	r2, [pc, #4]	; (e0ec <setDefaultTxPower+0x54>)
    e0e6:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    e0e8:	3b1f      	subs	r3, #31
    e0ea:	e7eb      	b.n	e0c4 <setDefaultTxPower+0x2c>
    e0ec:	200033b4 	.word	0x200033b4

0000e0f0 <Enableallchannels>:
	}
	return status;
}
#endif
void Enableallchannels()
{
    e0f0:	b510      	push	{r4, lr}
    e0f2:	2000      	movs	r0, #0
	for(uint8_t i = 0; i < (NO_OF_CH_IN_SUBBAND * (MAX_SUBBANDS + 1)); i++)
	{
		RegParams.pChParams[i].status = ENABLED;
    e0f4:	490a      	ldr	r1, [pc, #40]	; (e120 <Enableallchannels+0x30>)
    e0f6:	2401      	movs	r4, #1
    e0f8:	790b      	ldrb	r3, [r1, #4]
    e0fa:	794a      	ldrb	r2, [r1, #5]
    e0fc:	0212      	lsls	r2, r2, #8
    e0fe:	431a      	orrs	r2, r3
    e100:	798b      	ldrb	r3, [r1, #6]
    e102:	041b      	lsls	r3, r3, #16
    e104:	431a      	orrs	r2, r3
    e106:	79cb      	ldrb	r3, [r1, #7]
    e108:	061b      	lsls	r3, r3, #24
    e10a:	4313      	orrs	r3, r2
    e10c:	541c      	strb	r4, [r3, r0]
    e10e:	3002      	adds	r0, #2
	for(uint8_t i = 0; i < (NO_OF_CH_IN_SUBBAND * (MAX_SUBBANDS + 1)); i++)
    e110:	2890      	cmp	r0, #144	; 0x90
    e112:	d1f1      	bne.n	e0f8 <Enableallchannels+0x8>
	}
	RegParams.cmnParams.paramsType1.lastUsedSB = 0;
    e114:	2100      	movs	r1, #0
    e116:	23ac      	movs	r3, #172	; 0xac
    e118:	005b      	lsls	r3, r3, #1
    e11a:	4a01      	ldr	r2, [pc, #4]	; (e120 <Enableallchannels+0x30>)
    e11c:	54d1      	strb	r1, [r2, r3]
#if (ENABLE_PDS == 1)
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
	PDS_STORE(RegParams.regParamItems.lastUsedSB);
#endif
}
    e11e:	bd10      	pop	{r4, pc}
    e120:	200033b4 	.word	0x200033b4

0000e124 <LORAREG_EnableallChannels>:
StackRetStatus_t LORAREG_EnableallChannels(IsmBand_t ismBand)
{
    e124:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_SUCCESS;
	if(ismBand == ISM_EU868)
    e126:	2800      	cmp	r0, #0
    e128:	d00a      	beq.n	e140 <LORAREG_EnableallChannels+0x1c>
	{
		 InitDefault868Channels();
	}
	else if (ismBand == ISM_EU433)
    e12a:	2801      	cmp	r0, #1
    e12c:	d00b      	beq.n	e146 <LORAREG_EnableallChannels+0x22>
	{
		 InitDefault433Channels();
	}
	else if(ismBand == ISM_JPN923)
    e12e:	2805      	cmp	r0, #5
    e130:	d00c      	beq.n	e14c <LORAREG_EnableallChannels+0x28>
	{
		 InitDefault920Channels();	
	}
	else if (ismBand == ISM_KR920)
    e132:	2804      	cmp	r0, #4
    e134:	d00d      	beq.n	e152 <LORAREG_EnableallChannels+0x2e>
	}
	else if (ismBand == ISM_ASBAND)
	{
		 InitDefault923Channels ();
	}
	else if(ismBand == ISM_AU915 || ismBand == ISM_NA915)
    e136:	3802      	subs	r0, #2
    e138:	2801      	cmp	r0, #1
    e13a:	d90d      	bls.n	e158 <LORAREG_EnableallChannels+0x34>
	{
		 Enableallchannels();
	}
	return result;
}
    e13c:	2008      	movs	r0, #8
    e13e:	bd10      	pop	{r4, pc}
		 InitDefault868Channels();
    e140:	4b07      	ldr	r3, [pc, #28]	; (e160 <LORAREG_EnableallChannels+0x3c>)
    e142:	4798      	blx	r3
    e144:	e7fa      	b.n	e13c <LORAREG_EnableallChannels+0x18>
		 InitDefault433Channels();
    e146:	4b07      	ldr	r3, [pc, #28]	; (e164 <LORAREG_EnableallChannels+0x40>)
    e148:	4798      	blx	r3
    e14a:	e7f7      	b.n	e13c <LORAREG_EnableallChannels+0x18>
		 InitDefault920Channels();	
    e14c:	4b06      	ldr	r3, [pc, #24]	; (e168 <LORAREG_EnableallChannels+0x44>)
    e14e:	4798      	blx	r3
    e150:	e7f4      	b.n	e13c <LORAREG_EnableallChannels+0x18>
		 InitDefault920ChannelsKR();
    e152:	4b06      	ldr	r3, [pc, #24]	; (e16c <LORAREG_EnableallChannels+0x48>)
    e154:	4798      	blx	r3
    e156:	e7f1      	b.n	e13c <LORAREG_EnableallChannels+0x18>
		 Enableallchannels();
    e158:	4b05      	ldr	r3, [pc, #20]	; (e170 <LORAREG_EnableallChannels+0x4c>)
    e15a:	4798      	blx	r3
    e15c:	e7ee      	b.n	e13c <LORAREG_EnableallChannels+0x18>
    e15e:	46c0      	nop			; (mov r8, r8)
    e160:	0000dbf5 	.word	0x0000dbf5
    e164:	0000dcf9 	.word	0x0000dcf9
    e168:	0000dded 	.word	0x0000dded
    e16c:	0000df0d 	.word	0x0000df0d
    e170:	0000e0f1 	.word	0x0000e0f1

0000e174 <AESEncode>:
 * \brief Encrypts the given block of data
 * \param[in,out] block Block of input data to be encrypted
 * \param[in] key Cryptographic key to be used in AES encryption
 */
void AESEncode(unsigned char* block, unsigned char* masterKey)
{
    e174:	b5f0      	push	{r4, r5, r6, r7, lr}
    e176:	b083      	sub	sp, #12
    e178:	0004      	movs	r4, r0
    e17a:	000e      	movs	r6, r1
#ifndef UT	
	
	/* Configure the AES. */
	g_aes_cfg.encrypt_mode = AES_ENCRYPTION;
    e17c:	4a2b      	ldr	r2, [pc, #172]	; (e22c <AESEncode+0xb8>)
    e17e:	2101      	movs	r1, #1
    e180:	7011      	strb	r1, [r2, #0]
	g_aes_cfg.key_size = AES_KEY_SIZE_128;
    e182:	2300      	movs	r3, #0
    e184:	7053      	strb	r3, [r2, #1]
	g_aes_cfg.start_mode = AES_AUTO_START;
    e186:	7091      	strb	r1, [r2, #2]
	g_aes_cfg.opmode = AES_ECB_MODE;
    e188:	70d3      	strb	r3, [r2, #3]
	g_aes_cfg.cfb_size = AES_CFB_SIZE_128;
    e18a:	7113      	strb	r3, [r2, #4]
	g_aes_cfg.lod = false;
    e18c:	7213      	strb	r3, [r2, #8]
	aes_set_config(&aes_instance,AES, &g_aes_cfg);
    e18e:	4928      	ldr	r1, [pc, #160]	; (e230 <AESEncode+0xbc>)
    e190:	4828      	ldr	r0, [pc, #160]	; (e234 <AESEncode+0xc0>)
    e192:	4b29      	ldr	r3, [pc, #164]	; (e238 <AESEncode+0xc4>)
    e194:	4798      	blx	r3
    e196:	2100      	movs	r1, #0
		uint8_t u8[4];
	}long_addr;
	uint8_t index;
	for (index = 0; index < 4; index++)
	{
		long_addr.u8[index] = *data++;
    e198:	ad01      	add	r5, sp, #4
	
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
	{
		io_data[i] = convert_byte_array_to_32_bit(masterKey+(i*(sizeof(uint32_t))));
    e19a:	4f28      	ldr	r7, [pc, #160]	; (e23c <AESEncode+0xc8>)
    e19c:	1870      	adds	r0, r6, r1
    e19e:	2300      	movs	r3, #0
    e1a0:	5cc2      	ldrb	r2, [r0, r3]
    e1a2:	555a      	strb	r2, [r3, r5]
    e1a4:	3301      	adds	r3, #1
	for (index = 0; index < 4; index++)
    e1a6:	2b04      	cmp	r3, #4
    e1a8:	d1fa      	bne.n	e1a0 <AESEncode+0x2c>
    e1aa:	9b01      	ldr	r3, [sp, #4]
    e1ac:	51cb      	str	r3, [r1, r7]
    e1ae:	3104      	adds	r1, #4
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
    e1b0:	2910      	cmp	r1, #16
    e1b2:	d1f3      	bne.n	e19c <AESEncode+0x28>
	}
	
	/* Set the cryptographic key. */
	aes_write_key(&aes_instance, io_data);
    e1b4:	4d1f      	ldr	r5, [pc, #124]	; (e234 <AESEncode+0xc0>)
    e1b6:	4921      	ldr	r1, [pc, #132]	; (e23c <AESEncode+0xc8>)
    e1b8:	0028      	movs	r0, r5
    e1ba:	4b21      	ldr	r3, [pc, #132]	; (e240 <AESEncode+0xcc>)
    e1bc:	4798      	blx	r3
 */
static inline void aes_set_new_message(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLB.reg |= AES_CTRLB_NEWMSG;
    e1be:	682a      	ldr	r2, [r5, #0]
    e1c0:	7913      	ldrb	r3, [r2, #4]
    e1c2:	2102      	movs	r1, #2
    e1c4:	430b      	orrs	r3, r1
    e1c6:	7113      	strb	r3, [r2, #4]
    e1c8:	2100      	movs	r1, #0
		long_addr.u8[index] = *data++;
    e1ca:	ad01      	add	r5, sp, #4
	
	aes_set_new_message(&aes_instance);
	
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
	{
		io_data[i] = convert_byte_array_to_32_bit(block+(i*(sizeof(uint32_t))));			
    e1cc:	4e1b      	ldr	r6, [pc, #108]	; (e23c <AESEncode+0xc8>)
    e1ce:	1860      	adds	r0, r4, r1
    e1d0:	2300      	movs	r3, #0
    e1d2:	5cc2      	ldrb	r2, [r0, r3]
    e1d4:	555a      	strb	r2, [r3, r5]
    e1d6:	3301      	adds	r3, #1
	for (index = 0; index < 4; index++)
    e1d8:	2b04      	cmp	r3, #4
    e1da:	d1fa      	bne.n	e1d2 <AESEncode+0x5e>
    e1dc:	9b01      	ldr	r3, [sp, #4]
    e1de:	518b      	str	r3, [r1, r6]
    e1e0:	3104      	adds	r1, #4
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
    e1e2:	2910      	cmp	r1, #16
    e1e4:	d1f3      	bne.n	e1ce <AESEncode+0x5a>
	}
		
	/* Write the data to be ciphered to the input data registers. */
	aes_write_input_data(&aes_instance, io_data);
    e1e6:	4d13      	ldr	r5, [pc, #76]	; (e234 <AESEncode+0xc0>)
    e1e8:	4914      	ldr	r1, [pc, #80]	; (e23c <AESEncode+0xc8>)
    e1ea:	0028      	movs	r0, r5
    e1ec:	4b15      	ldr	r3, [pc, #84]	; (e244 <AESEncode+0xd0>)
    e1ee:	4798      	blx	r3
 */
static inline void aes_clear_new_message(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLB.reg &= ~AES_CTRLB_NEWMSG;
    e1f0:	682d      	ldr	r5, [r5, #0]
    e1f2:	792b      	ldrb	r3, [r5, #4]
    e1f4:	2202      	movs	r2, #2
    e1f6:	4393      	bics	r3, r2
    e1f8:	712b      	strb	r3, [r5, #4]
	Assert(module->hw);

	uint32_t int_flags = module->hw->INTFLAG.reg;
	uint32_t status_flags = 0;

	if (int_flags & AES_INTFLAG_ENCCMP) {
    e1fa:	2101      	movs	r1, #1
		status_flags |= AES_ENCRYPTION_COMPLETE;
	}

	if (int_flags & AES_INTFLAG_GFMCMP) {
    e1fc:	2002      	movs	r0, #2
    e1fe:	e001      	b.n	e204 <AESEncode+0x90>
	aes_clear_new_message(&aes_instance);
	/* Wait for the end of the encryption process. */
	while (!(aes_get_status(&aes_instance) & AES_ENCRYPTION_COMPLETE)) {
    e200:	4211      	tst	r1, r2
    e202:	d107      	bne.n	e214 <AESEncode+0xa0>
	uint32_t int_flags = module->hw->INTFLAG.reg;
    e204:	79eb      	ldrb	r3, [r5, #7]
    e206:	b2db      	uxtb	r3, r3
	if (int_flags & AES_INTFLAG_ENCCMP) {
    e208:	000a      	movs	r2, r1
    e20a:	401a      	ands	r2, r3
	if (int_flags & AES_INTFLAG_GFMCMP) {
    e20c:	4218      	tst	r0, r3
    e20e:	d0f7      	beq.n	e200 <AESEncode+0x8c>
		status_flags |= AES_GF_MULTI_COMPLETE;
    e210:	4302      	orrs	r2, r0
    e212:	e7f5      	b.n	e200 <AESEncode+0x8c>
	}
	aes_read_output_data(&aes_instance,io_data);
    e214:	4d09      	ldr	r5, [pc, #36]	; (e23c <AESEncode+0xc8>)
    e216:	0029      	movs	r1, r5
    e218:	4806      	ldr	r0, [pc, #24]	; (e234 <AESEncode+0xc0>)
    e21a:	4b0b      	ldr	r3, [pc, #44]	; (e248 <AESEncode+0xd4>)
    e21c:	4798      	blx	r3
	
	memcpy(block,io_data,BLOCKSIZE);
    e21e:	2210      	movs	r2, #16
    e220:	0029      	movs	r1, r5
    e222:	0020      	movs	r0, r4
    e224:	4b09      	ldr	r3, [pc, #36]	; (e24c <AESEncode+0xd8>)
    e226:	4798      	blx	r3
#endif	
}
    e228:	b003      	add	sp, #12
    e22a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e22c:	200035c0 	.word	0x200035c0
    e230:	42003400 	.word	0x42003400
    e234:	200035cc 	.word	0x200035cc
    e238:	00004c39 	.word	0x00004c39
    e23c:	2000207c 	.word	0x2000207c
    e240:	00004ccd 	.word	0x00004ccd
    e244:	00004d01 	.word	0x00004d01
    e248:	00004d51 	.word	0x00004d51
    e24c:	0001786b 	.word	0x0001786b

0000e250 <AESInit>:

/**
 * \brief Initializes the AES Engine.
 */
void AESInit(void)
{
    e250:	b570      	push	{r4, r5, r6, lr}
#ifndef UT	
	//! [setup_config]
	aes_get_config_defaults(&g_aes_cfg);
    e252:	4d07      	ldr	r5, [pc, #28]	; (e270 <AESInit+0x20>)
    e254:	0028      	movs	r0, r5
    e256:	4b07      	ldr	r3, [pc, #28]	; (e274 <AESInit+0x24>)
    e258:	4798      	blx	r3
	//! [setup_config]

	//! [setup_config_defaults]
	aes_init(&aes_instance,AES, &g_aes_cfg);
    e25a:	4c07      	ldr	r4, [pc, #28]	; (e278 <AESInit+0x28>)
    e25c:	002a      	movs	r2, r5
    e25e:	4907      	ldr	r1, [pc, #28]	; (e27c <AESInit+0x2c>)
    e260:	0020      	movs	r0, r4
    e262:	4b07      	ldr	r3, [pc, #28]	; (e280 <AESInit+0x30>)
    e264:	4798      	blx	r3
	//! [setup_config_defaults]
	//! [module_enable]
	aes_enable(&aes_instance);
    e266:	0020      	movs	r0, r4
    e268:	4b06      	ldr	r3, [pc, #24]	; (e284 <AESInit+0x34>)
    e26a:	4798      	blx	r3
#endif	
}
    e26c:	bd70      	pop	{r4, r5, r6, pc}
    e26e:	46c0      	nop			; (mov r8, r8)
    e270:	200035c0 	.word	0x200035c0
    e274:	00004bfd 	.word	0x00004bfd
    e278:	200035cc 	.word	0x200035cc
    e27c:	42003400 	.word	0x42003400
    e280:	00004cad 	.word	0x00004cad
    e284:	00004c17 	.word	0x00004c17

0000e288 <hwTimerExpiryCallback>:
	SYS_HwOverflow_Cb();
}

/* ISR to handle CC0 interrupt from TC0 */
static void hwTimerExpiryCallback(void)
{
    e288:	b510      	push	{r4, lr}
    if (0 < runningTimers)
    e28a:	4b06      	ldr	r3, [pc, #24]	; (e2a4 <hwTimerExpiryCallback+0x1c>)
    e28c:	781b      	ldrb	r3, [r3, #0]
    e28e:	2b00      	cmp	r3, #0
    e290:	d100      	bne.n	e294 <hwTimerExpiryCallback+0xc>
    {
        isTimerTriggered = true;
        SYSTEM_PostTask(TIMER_TASK_ID);
    }
}
    e292:	bd10      	pop	{r4, pc}
        isTimerTriggered = true;
    e294:	2201      	movs	r2, #1
    e296:	4b04      	ldr	r3, [pc, #16]	; (e2a8 <hwTimerExpiryCallback+0x20>)
    e298:	701a      	strb	r2, [r3, #0]
        SYSTEM_PostTask(TIMER_TASK_ID);
    e29a:	2001      	movs	r0, #1
    e29c:	4b03      	ldr	r3, [pc, #12]	; (e2ac <hwTimerExpiryCallback+0x24>)
    e29e:	4798      	blx	r3
}
    e2a0:	e7f7      	b.n	e292 <hwTimerExpiryCallback+0xa>
    e2a2:	46c0      	nop			; (mov r8, r8)
    e2a4:	2000209c 	.word	0x2000209c
    e2a8:	2000377a 	.word	0x2000377a
    e2ac:	0000eba5 	.word	0x0000eba5

0000e2b0 <hwTimerOverflowCallback>:
{
    e2b0:	b510      	push	{r4, lr}
    e2b2:	b082      	sub	sp, #8
    uint16_t temp = sysTime;
    e2b4:	4925      	ldr	r1, [pc, #148]	; (e34c <hwTimerOverflowCallback+0x9c>)
    e2b6:	880a      	ldrh	r2, [r1, #0]
    e2b8:	b292      	uxth	r2, r2
    if (++sysTime < temp)
    e2ba:	880b      	ldrh	r3, [r1, #0]
    e2bc:	3301      	adds	r3, #1
    e2be:	b29b      	uxth	r3, r3
    e2c0:	800b      	strh	r3, [r1, #0]
    e2c2:	429a      	cmp	r2, r3
    e2c4:	d903      	bls.n	e2ce <hwTimerOverflowCallback+0x1e>
        sysTimeOvf++;
    e2c6:	4a22      	ldr	r2, [pc, #136]	; (e350 <hwTimerOverflowCallback+0xa0>)
    e2c8:	6813      	ldr	r3, [r2, #0]
    e2ca:	3301      	adds	r3, #1
    e2cc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    e2ce:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    e2d2:	425a      	negs	r2, r3
    e2d4:	4153      	adcs	r3, r2
    e2d6:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    e2d8:	b672      	cpsid	i
    e2da:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    e2de:	2200      	movs	r2, #0
    e2e0:	4b1c      	ldr	r3, [pc, #112]	; (e354 <hwTimerOverflowCallback+0xa4>)
    e2e2:	701a      	strb	r2, [r3, #0]
	return flags;
    e2e4:	9c01      	ldr	r4, [sp, #4]
{
    uint32_t tmo32;
    uint16_t tmoHigh16, tmoLow16;
    uint8_t flags = cpu_irq_save();

    if (SWTIMER_INVALID != runningTimerQueueHead && !swTimers[runningTimerQueueHead].loaded)
    e2e6:	4b1c      	ldr	r3, [pc, #112]	; (e358 <hwTimerOverflowCallback+0xa8>)
    e2e8:	681b      	ldr	r3, [r3, #0]
    e2ea:	2bff      	cmp	r3, #255	; 0xff
    e2ec:	d00d      	beq.n	e30a <hwTimerOverflowCallback+0x5a>
    e2ee:	0119      	lsls	r1, r3, #4
    e2f0:	4a1a      	ldr	r2, [pc, #104]	; (e35c <hwTimerOverflowCallback+0xac>)
    e2f2:	1852      	adds	r2, r2, r1
    e2f4:	7b52      	ldrb	r2, [r2, #13]
    e2f6:	2a00      	cmp	r2, #0
    e2f8:	d107      	bne.n	e30a <hwTimerOverflowCallback+0x5a>
    {
        tmo32 = swTimers[runningTimerQueueHead].absoluteExpiryTime;
    e2fa:	4a18      	ldr	r2, [pc, #96]	; (e35c <hwTimerOverflowCallback+0xac>)
    e2fc:	5888      	ldr	r0, [r1, r2]
        tmoHigh16 = (uint16_t)(tmo32 >> SWTIMER_SYSTIME_SHIFTMASK);

        if (tmoHigh16 == sysTime)
    e2fe:	4b13      	ldr	r3, [pc, #76]	; (e34c <hwTimerOverflowCallback+0x9c>)
    e300:	881b      	ldrh	r3, [r3, #0]
    e302:	b29b      	uxth	r3, r3
    e304:	0c02      	lsrs	r2, r0, #16
    e306:	429a      	cmp	r2, r3
    e308:	d00c      	beq.n	e324 <hwTimerOverflowCallback+0x74>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    e30a:	23ff      	movs	r3, #255	; 0xff
    e30c:	4223      	tst	r3, r4
    e30e:	d005      	beq.n	e31c <hwTimerOverflowCallback+0x6c>
		cpu_irq_enable();
    e310:	2201      	movs	r2, #1
    e312:	4b10      	ldr	r3, [pc, #64]	; (e354 <hwTimerOverflowCallback+0xa4>)
    e314:	701a      	strb	r2, [r3, #0]
    e316:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    e31a:	b662      	cpsie	i
	SYS_HwOverflow_Cb();
    e31c:	4b10      	ldr	r3, [pc, #64]	; (e360 <hwTimerOverflowCallback+0xb0>)
    e31e:	4798      	blx	r3
}
    e320:	b002      	add	sp, #8
    e322:	bd10      	pop	{r4, pc}
        {
            tmoLow16 = (uint16_t)(tmo32 & SWTIMER_HWTIME_MASK);
    e324:	b280      	uxth	r0, r0
            if (SWTIMER_MIN_TIMEOUT < tmoLow16)
    e326:	28ff      	cmp	r0, #255	; 0xff
    e328:	d909      	bls.n	e33e <hwTimerOverflowCallback+0x8e>
            {
                common_tc_delay(tmoLow16);
    e32a:	4b0e      	ldr	r3, [pc, #56]	; (e364 <hwTimerOverflowCallback+0xb4>)
    e32c:	4798      	blx	r3
                swTimers[runningTimerQueueHead].loaded = true;
    e32e:	4b0a      	ldr	r3, [pc, #40]	; (e358 <hwTimerOverflowCallback+0xa8>)
    e330:	681a      	ldr	r2, [r3, #0]
    e332:	0112      	lsls	r2, r2, #4
    e334:	4b09      	ldr	r3, [pc, #36]	; (e35c <hwTimerOverflowCallback+0xac>)
    e336:	189b      	adds	r3, r3, r2
    e338:	2201      	movs	r2, #1
    e33a:	735a      	strb	r2, [r3, #13]
    e33c:	e7e5      	b.n	e30a <hwTimerOverflowCallback+0x5a>
            }
            else
            {
                isTimerTriggered = true;
    e33e:	2201      	movs	r2, #1
    e340:	4b09      	ldr	r3, [pc, #36]	; (e368 <hwTimerOverflowCallback+0xb8>)
    e342:	701a      	strb	r2, [r3, #0]
                SYSTEM_PostTask(TIMER_TASK_ID);
    e344:	2001      	movs	r0, #1
    e346:	4b09      	ldr	r3, [pc, #36]	; (e36c <hwTimerOverflowCallback+0xbc>)
    e348:	4798      	blx	r3
    e34a:	e7de      	b.n	e30a <hwTimerOverflowCallback+0x5a>
    e34c:	20003778 	.word	0x20003778
    e350:	2000377c 	.word	0x2000377c
    e354:	20000014 	.word	0x20000014
    e358:	20002098 	.word	0x20002098
    e35c:	200035e8 	.word	0x200035e8
    e360:	0000d345 	.word	0x0000d345
    e364:	000144c5 	.word	0x000144c5
    e368:	2000377a 	.word	0x2000377a
    e36c:	0000eba5 	.word	0x0000eba5

0000e370 <loadHwTimer>:
{
    e370:	b570      	push	{r4, r5, r6, lr}
    e372:	0004      	movs	r4, r0
    if (SWTIMER_INVALID != timerId)
    e374:	28ff      	cmp	r0, #255	; 0xff
    e376:	d030      	beq.n	e3da <loadHwTimer+0x6a>
    time |= ((uint64_t) sysTimeOvf) << 32;
    e378:	4b19      	ldr	r3, [pc, #100]	; (e3e0 <loadHwTimer+0x70>)
    e37a:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    e37c:	4b19      	ldr	r3, [pc, #100]	; (e3e4 <loadHwTimer+0x74>)
    e37e:	881d      	ldrh	r5, [r3, #0]
    e380:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    e382:	4b19      	ldr	r3, [pc, #100]	; (e3e8 <loadHwTimer+0x78>)
    e384:	4798      	blx	r3
        uint32_t expiryTime = swTimers[timerId].absoluteExpiryTime;
    e386:	0123      	lsls	r3, r4, #4
    time |= (uint64_t) common_tc_read_count();
    e388:	4328      	orrs	r0, r5
    return ((t2 - t1) < INT32_MAX);
    e38a:	4a18      	ldr	r2, [pc, #96]	; (e3ec <loadHwTimer+0x7c>)
    e38c:	589b      	ldr	r3, [r3, r2]
    e38e:	1a18      	subs	r0, r3, r0
        if (swtimerCompareTime(now, expiryTime))
    e390:	4b17      	ldr	r3, [pc, #92]	; (e3f0 <loadHwTimer+0x80>)
    e392:	4298      	cmp	r0, r3
    e394:	d81a      	bhi.n	e3cc <loadHwTimer+0x5c>
            if (!swTimers[timerId].loaded)
    e396:	0122      	lsls	r2, r4, #4
    e398:	4b14      	ldr	r3, [pc, #80]	; (e3ec <loadHwTimer+0x7c>)
    e39a:	189b      	adds	r3, r3, r2
    e39c:	7b5b      	ldrb	r3, [r3, #13]
    e39e:	2b00      	cmp	r3, #0
    e3a0:	d11d      	bne.n	e3de <loadHwTimer+0x6e>
                if (SWTIMER_MIN_TIMEOUT >= timeDiff)
    e3a2:	28ff      	cmp	r0, #255	; 0xff
    e3a4:	d90b      	bls.n	e3be <loadHwTimer+0x4e>
                else  if ((uint32_t)TIMER_PERIOD >= timeDiff)
    e3a6:	4b13      	ldr	r3, [pc, #76]	; (e3f4 <loadHwTimer+0x84>)
    e3a8:	4298      	cmp	r0, r3
    e3aa:	d818      	bhi.n	e3de <loadHwTimer+0x6e>
                    common_tc_delay((uint16_t)timeDiff);
    e3ac:	b280      	uxth	r0, r0
    e3ae:	4b12      	ldr	r3, [pc, #72]	; (e3f8 <loadHwTimer+0x88>)
    e3b0:	4798      	blx	r3
                    swTimers[timerId].loaded = true;
    e3b2:	0124      	lsls	r4, r4, #4
    e3b4:	4b0d      	ldr	r3, [pc, #52]	; (e3ec <loadHwTimer+0x7c>)
    e3b6:	191c      	adds	r4, r3, r4
    e3b8:	2301      	movs	r3, #1
    e3ba:	7363      	strb	r3, [r4, #13]
    e3bc:	e00f      	b.n	e3de <loadHwTimer+0x6e>
                    isTimerTriggered = true;
    e3be:	2201      	movs	r2, #1
    e3c0:	4b0e      	ldr	r3, [pc, #56]	; (e3fc <loadHwTimer+0x8c>)
    e3c2:	701a      	strb	r2, [r3, #0]
                    SYSTEM_PostTask(TIMER_TASK_ID);
    e3c4:	2001      	movs	r0, #1
    e3c6:	4b0e      	ldr	r3, [pc, #56]	; (e400 <loadHwTimer+0x90>)
    e3c8:	4798      	blx	r3
    e3ca:	e008      	b.n	e3de <loadHwTimer+0x6e>
            isTimerTriggered = true;
    e3cc:	2201      	movs	r2, #1
    e3ce:	4b0b      	ldr	r3, [pc, #44]	; (e3fc <loadHwTimer+0x8c>)
    e3d0:	701a      	strb	r2, [r3, #0]
            SYSTEM_PostTask(TIMER_TASK_ID);
    e3d2:	2001      	movs	r0, #1
    e3d4:	4b0a      	ldr	r3, [pc, #40]	; (e400 <loadHwTimer+0x90>)
    e3d6:	4798      	blx	r3
    e3d8:	e001      	b.n	e3de <loadHwTimer+0x6e>
        common_tc_compare_stop();
    e3da:	4b0a      	ldr	r3, [pc, #40]	; (e404 <loadHwTimer+0x94>)
    e3dc:	4798      	blx	r3
}
    e3de:	bd70      	pop	{r4, r5, r6, pc}
    e3e0:	2000377c 	.word	0x2000377c
    e3e4:	20003778 	.word	0x20003778
    e3e8:	00014451 	.word	0x00014451
    e3ec:	200035e8 	.word	0x200035e8
    e3f0:	7ffffffe 	.word	0x7ffffffe
    e3f4:	0000ffff 	.word	0x0000ffff
    e3f8:	000144c5 	.word	0x000144c5
    e3fc:	2000377a 	.word	0x2000377a
    e400:	0000eba5 	.word	0x0000eba5
    e404:	0001449d 	.word	0x0001449d

0000e408 <swtimerInternalHandler>:

/**************************************************************************//**
\brief Internal handler for the timer trigger
******************************************************************************/
static void swtimerInternalHandler(void)
{
    e408:	b510      	push	{r4, lr}
    if (isTimerTriggered)
    e40a:	4b1d      	ldr	r3, [pc, #116]	; (e480 <swtimerInternalHandler+0x78>)
    e40c:	781b      	ldrb	r3, [r3, #0]
    e40e:	2b00      	cmp	r3, #0
    e410:	d027      	beq.n	e462 <swtimerInternalHandler+0x5a>
    {
        isTimerTriggered = false;
    e412:	2200      	movs	r2, #0
    e414:	4b1a      	ldr	r3, [pc, #104]	; (e480 <swtimerInternalHandler+0x78>)
    e416:	701a      	strb	r2, [r3, #0]

        if (0 < runningTimers)
    e418:	4b1a      	ldr	r3, [pc, #104]	; (e484 <swtimerInternalHandler+0x7c>)
    e41a:	781b      	ldrb	r3, [r3, #0]
    e41c:	2b00      	cmp	r3, #0
    e41e:	d020      	beq.n	e462 <swtimerInternalHandler+0x5a>
        { /* Holds the number of running timers */
            if ((expiredTimerQueueHead == SWTIMER_INVALID) && \
    e420:	4b19      	ldr	r3, [pc, #100]	; (e488 <swtimerInternalHandler+0x80>)
    e422:	681b      	ldr	r3, [r3, #0]
    e424:	2bff      	cmp	r3, #255	; 0xff
    e426:	d01d      	beq.n	e464 <swtimerInternalHandler+0x5c>
                expiredTimerQueueHead = runningTimerQueueHead;
                expiredTimerQueueTail = runningTimerQueueHead;
            }
            else
            { /* there were already some timers expired before this one */
                swTimers[expiredTimerQueueTail].nextTimer = runningTimerQueueHead;
    e428:	4b18      	ldr	r3, [pc, #96]	; (e48c <swtimerInternalHandler+0x84>)
    e42a:	6818      	ldr	r0, [r3, #0]
    e42c:	4918      	ldr	r1, [pc, #96]	; (e490 <swtimerInternalHandler+0x88>)
    e42e:	680b      	ldr	r3, [r1, #0]
    e430:	011a      	lsls	r2, r3, #4
    e432:	4b18      	ldr	r3, [pc, #96]	; (e494 <swtimerInternalHandler+0x8c>)
    e434:	189b      	adds	r3, r3, r2
    e436:	7318      	strb	r0, [r3, #12]
                expiredTimerQueueTail = runningTimerQueueHead;
    e438:	6008      	str	r0, [r1, #0]
            }

            runningTimerQueueHead = swTimers[runningTimerQueueHead].nextTimer;
    e43a:	4a16      	ldr	r2, [pc, #88]	; (e494 <swtimerInternalHandler+0x8c>)
    e43c:	4913      	ldr	r1, [pc, #76]	; (e48c <swtimerInternalHandler+0x84>)
    e43e:	680b      	ldr	r3, [r1, #0]
    e440:	011b      	lsls	r3, r3, #4
    e442:	18d3      	adds	r3, r2, r3
    e444:	7b18      	ldrb	r0, [r3, #12]
    e446:	6008      	str	r0, [r1, #0]

            swTimers[expiredTimerQueueTail].nextTimer = SWTIMER_INVALID;
    e448:	4b11      	ldr	r3, [pc, #68]	; (e490 <swtimerInternalHandler+0x88>)
    e44a:	681b      	ldr	r3, [r3, #0]
    e44c:	011b      	lsls	r3, r3, #4
    e44e:	18d2      	adds	r2, r2, r3
    e450:	23ff      	movs	r3, #255	; 0xff
    e452:	7313      	strb	r3, [r2, #12]

            if ((--runningTimers) > 0)
    e454:	4a0b      	ldr	r2, [pc, #44]	; (e484 <swtimerInternalHandler+0x7c>)
    e456:	7813      	ldrb	r3, [r2, #0]
    e458:	3b01      	subs	r3, #1
    e45a:	b2db      	uxtb	r3, r3
    e45c:	7013      	strb	r3, [r2, #0]
    e45e:	2b00      	cmp	r3, #0
    e460:	d10b      	bne.n	e47a <swtimerInternalHandler+0x72>
            { /* keep the ball rolling! load the next head timer from the queue */
                loadHwTimer(runningTimerQueueHead);
            }
        }
    }
}
    e462:	bd10      	pop	{r4, pc}
                (expiredTimerQueueTail == SWTIMER_INVALID))
    e464:	4b0a      	ldr	r3, [pc, #40]	; (e490 <swtimerInternalHandler+0x88>)
            if ((expiredTimerQueueHead == SWTIMER_INVALID) && \
    e466:	681b      	ldr	r3, [r3, #0]
    e468:	2bff      	cmp	r3, #255	; 0xff
    e46a:	d1dd      	bne.n	e428 <swtimerInternalHandler+0x20>
                expiredTimerQueueHead = runningTimerQueueHead;
    e46c:	4b07      	ldr	r3, [pc, #28]	; (e48c <swtimerInternalHandler+0x84>)
    e46e:	681b      	ldr	r3, [r3, #0]
    e470:	4a05      	ldr	r2, [pc, #20]	; (e488 <swtimerInternalHandler+0x80>)
    e472:	6013      	str	r3, [r2, #0]
                expiredTimerQueueTail = runningTimerQueueHead;
    e474:	4a06      	ldr	r2, [pc, #24]	; (e490 <swtimerInternalHandler+0x88>)
    e476:	6013      	str	r3, [r2, #0]
    e478:	e7df      	b.n	e43a <swtimerInternalHandler+0x32>
                loadHwTimer(runningTimerQueueHead);
    e47a:	4b07      	ldr	r3, [pc, #28]	; (e498 <swtimerInternalHandler+0x90>)
    e47c:	4798      	blx	r3
}
    e47e:	e7f0      	b.n	e462 <swtimerInternalHandler+0x5a>
    e480:	2000377a 	.word	0x2000377a
    e484:	2000209c 	.word	0x2000209c
    e488:	20002090 	.word	0x20002090
    e48c:	20002098 	.word	0x20002098
    e490:	20002094 	.word	0x20002094
    e494:	200035e8 	.word	0x200035e8
    e498:	0000e371 	.word	0x0000e371

0000e49c <SwTimerReset>:
    /*
    * Initialize the timer resources like timer arrays queues, timer registers
    */
    uint8_t index;

    runningTimers = 0u;
    e49c:	2300      	movs	r3, #0
    e49e:	4a0d      	ldr	r2, [pc, #52]	; (e4d4 <SwTimerReset+0x38>)
    e4a0:	7013      	strb	r3, [r2, #0]
    isTimerTriggered = false;
    e4a2:	4a0d      	ldr	r2, [pc, #52]	; (e4d8 <SwTimerReset+0x3c>)
    e4a4:	7013      	strb	r3, [r2, #0]

    runningTimerQueueHead = SWTIMER_INVALID;
    e4a6:	33ff      	adds	r3, #255	; 0xff
    e4a8:	4a0c      	ldr	r2, [pc, #48]	; (e4dc <SwTimerReset+0x40>)
    e4aa:	6013      	str	r3, [r2, #0]
    expiredTimerQueueHead = SWTIMER_INVALID;
    e4ac:	4a0c      	ldr	r2, [pc, #48]	; (e4e0 <SwTimerReset+0x44>)
    e4ae:	6013      	str	r3, [r2, #0]
    expiredTimerQueueTail = SWTIMER_INVALID;
    e4b0:	4a0c      	ldr	r2, [pc, #48]	; (e4e4 <SwTimerReset+0x48>)
    e4b2:	6013      	str	r3, [r2, #0]
    e4b4:	4b0c      	ldr	r3, [pc, #48]	; (e4e8 <SwTimerReset+0x4c>)
    e4b6:	0018      	movs	r0, r3
    e4b8:	3091      	adds	r0, #145	; 0x91
    e4ba:	30ff      	adds	r0, #255	; 0xff

    for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++)
    {
        swTimers[index].nextTimer = SWTIMER_INVALID;
    e4bc:	21ff      	movs	r1, #255	; 0xff
        swTimers[index].timerCb = NULL;
    e4be:	2200      	movs	r2, #0
        swTimers[index].nextTimer = SWTIMER_INVALID;
    e4c0:	7219      	strb	r1, [r3, #8]
        swTimers[index].timerCb = NULL;
    e4c2:	601a      	str	r2, [r3, #0]
    e4c4:	3310      	adds	r3, #16
    for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++)
    e4c6:	4283      	cmp	r3, r0
    e4c8:	d1fa      	bne.n	e4c0 <SwTimerReset+0x24>
    }

    allocatedTimerId = 0u;
    e4ca:	2200      	movs	r2, #0
    e4cc:	4b07      	ldr	r3, [pc, #28]	; (e4ec <SwTimerReset+0x50>)
    e4ce:	701a      	strb	r2, [r3, #0]
}
    e4d0:	4770      	bx	lr
    e4d2:	46c0      	nop			; (mov r8, r8)
    e4d4:	2000209c 	.word	0x2000209c
    e4d8:	2000377a 	.word	0x2000377a
    e4dc:	20002098 	.word	0x20002098
    e4e0:	20002090 	.word	0x20002090
    e4e4:	20002094 	.word	0x20002094
    e4e8:	200035ec 	.word	0x200035ec
    e4ec:	2000208c 	.word	0x2000208c

0000e4f0 <SystemTimerInit>:

/**************************************************************************//**
\brief Initializes the Software Timer module
******************************************************************************/
void SystemTimerInit(void)
{
    e4f0:	b510      	push	{r4, lr}
    SwTimerReset();
    e4f2:	4b08      	ldr	r3, [pc, #32]	; (e514 <SystemTimerInit+0x24>)
    e4f4:	4798      	blx	r3

    /* initialize system time parameters */
    sysTimeOvf = 0x00000000;
    e4f6:	2300      	movs	r3, #0
    e4f8:	4a07      	ldr	r2, [pc, #28]	; (e518 <SystemTimerInit+0x28>)
    e4fa:	6013      	str	r3, [r2, #0]
    sysTime = 0x0000;
    e4fc:	4a07      	ldr	r2, [pc, #28]	; (e51c <SystemTimerInit+0x2c>)
    e4fe:	8013      	strh	r3, [r2, #0]

    common_tc_init();
    e500:	4b07      	ldr	r3, [pc, #28]	; (e520 <SystemTimerInit+0x30>)
    e502:	4798      	blx	r3
    set_common_tc_overflow_callback(hwTimerOverflowCallback);
    e504:	4807      	ldr	r0, [pc, #28]	; (e524 <SystemTimerInit+0x34>)
    e506:	4b08      	ldr	r3, [pc, #32]	; (e528 <SystemTimerInit+0x38>)
    e508:	4798      	blx	r3
    set_common_tc_expiry_callback(hwTimerExpiryCallback);
    e50a:	4808      	ldr	r0, [pc, #32]	; (e52c <SystemTimerInit+0x3c>)
    e50c:	4b08      	ldr	r3, [pc, #32]	; (e530 <SystemTimerInit+0x40>)
    e50e:	4798      	blx	r3
}
    e510:	bd10      	pop	{r4, pc}
    e512:	46c0      	nop			; (mov r8, r8)
    e514:	0000e49d 	.word	0x0000e49d
    e518:	2000377c 	.word	0x2000377c
    e51c:	20003778 	.word	0x20003778
    e520:	00014531 	.word	0x00014531
    e524:	0000e2b1 	.word	0x0000e2b1
    e528:	000145b5 	.word	0x000145b5
    e52c:	0000e289 	.word	0x0000e289
    e530:	000145c1 	.word	0x000145c1

0000e534 <SwTimerGetTime>:
/**************************************************************************//**
\brief Get current system time.
\return Returns current system time in microseconds
******************************************************************************/
uint64_t SwTimerGetTime(void)
{
    e534:	b570      	push	{r4, r5, r6, lr}
    time |= ((uint64_t) sysTimeOvf) << 32;
    e536:	4b05      	ldr	r3, [pc, #20]	; (e54c <SwTimerGetTime+0x18>)
    e538:	681c      	ldr	r4, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    e53a:	4b05      	ldr	r3, [pc, #20]	; (e550 <SwTimerGetTime+0x1c>)
    e53c:	881d      	ldrh	r5, [r3, #0]
    e53e:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    e540:	4b04      	ldr	r3, [pc, #16]	; (e554 <SwTimerGetTime+0x20>)
    e542:	4798      	blx	r3
    e544:	4328      	orrs	r0, r5
    return gettime();
}
    e546:	0021      	movs	r1, r4
    e548:	bd70      	pop	{r4, r5, r6, pc}
    e54a:	46c0      	nop			; (mov r8, r8)
    e54c:	2000377c 	.word	0x2000377c
    e550:	20003778 	.word	0x20003778
    e554:	00014451 	.word	0x00014451

0000e558 <SwTimerCreate>:

\return LORAWAN_SUCCESS if new timerId is allocated
        LORAWAN_RESOURCE_UNAVAILABLE if there is no more timerId to allocate
******************************************************************************/
StackRetStatus_t SwTimerCreate(uint8_t *timerId)
{
    e558:	b510      	push	{r4, lr}
    e55a:	0004      	movs	r4, r0
    StackRetStatus_t retVal = LORAWAN_SUCCESS;

    if (allocatedTimerId < TOTAL_NUMBER_OF_SW_TIMERS)
    e55c:	4b08      	ldr	r3, [pc, #32]	; (e580 <SwTimerCreate+0x28>)
    e55e:	781b      	ldrb	r3, [r3, #0]
        * If you reach this spot it means the TOTAL_NUMBER_OF_SW_TIMERS
        * is #defined to a lower value than the number of timers that have
        * been SwTimerCreate()
        */
        SYS_ASSERT_FATAL(ASSERT_HAL_TIMERID_EXHAUSTED);
        retVal = LORAWAN_RESOURCE_UNAVAILABLE;
    e560:	2014      	movs	r0, #20
    if (allocatedTimerId < TOTAL_NUMBER_OF_SW_TIMERS)
    e562:	2b18      	cmp	r3, #24
    e564:	d900      	bls.n	e568 <SwTimerCreate+0x10>
    }

    return retVal;
}
    e566:	bd10      	pop	{r4, pc}
        ATOMIC_SECTION_ENTER
    e568:	4b06      	ldr	r3, [pc, #24]	; (e584 <SwTimerCreate+0x2c>)
    e56a:	4798      	blx	r3
        *timerId = allocatedTimerId;
    e56c:	4a04      	ldr	r2, [pc, #16]	; (e580 <SwTimerCreate+0x28>)
    e56e:	7813      	ldrb	r3, [r2, #0]
    e570:	7023      	strb	r3, [r4, #0]
        allocatedTimerId++;
    e572:	3301      	adds	r3, #1
    e574:	7013      	strb	r3, [r2, #0]
        ATOMIC_SECTION_EXIT
    e576:	4b04      	ldr	r3, [pc, #16]	; (e588 <SwTimerCreate+0x30>)
    e578:	4798      	blx	r3
    StackRetStatus_t retVal = LORAWAN_SUCCESS;
    e57a:	2008      	movs	r0, #8
    e57c:	e7f3      	b.n	e566 <SwTimerCreate+0xe>
    e57e:	46c0      	nop			; (mov r8, r8)
    e580:	2000208c 	.word	0x2000208c
    e584:	0000db59 	.word	0x0000db59
    e588:	0000db65 	.word	0x0000db65

0000e58c <SwTimerStart>:
        LORAWAN_INVALID_REQUEST if \timerId is already running
        LORAWAN_SUCCESS if \timerId is successfully queued for running
******************************************************************************/
StackRetStatus_t SwTimerStart(uint8_t timerId, uint32_t timerCount,
    SwTimeoutType_t timeoutType, void *timerCb, void *paramCb)
{
    e58c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e58e:	46d6      	mov	lr, sl
    e590:	464f      	mov	r7, r9
    e592:	4646      	mov	r6, r8
    e594:	b5c0      	push	{r6, r7, lr}
    e596:	b084      	sub	sp, #16
    e598:	0007      	movs	r7, r0
    e59a:	000d      	movs	r5, r1
    e59c:	0016      	movs	r6, r2
    e59e:	001c      	movs	r4, r3
    uint32_t pointInTime;

    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId || NULL == timerCb)
    {
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
        return LORAWAN_INVALID_PARAMETER;
    e5a0:	200a      	movs	r0, #10
    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId || NULL == timerCb)
    e5a2:	2f18      	cmp	r7, #24
    e5a4:	d809      	bhi.n	e5ba <SwTimerStart+0x2e>
    e5a6:	2b00      	cmp	r3, #0
    e5a8:	d100      	bne.n	e5ac <SwTimerStart+0x20>
    e5aa:	e08c      	b.n	e6c6 <SwTimerStart+0x13a>
    }

    if (NULL != swTimers[timerId].timerCb)
    e5ac:	013a      	lsls	r2, r7, #4
    e5ae:	4b52      	ldr	r3, [pc, #328]	; (e6f8 <SwTimerStart+0x16c>)
    e5b0:	189b      	adds	r3, r3, r2
    e5b2:	685b      	ldr	r3, [r3, #4]
        /*
        * Timer is already running if the callback function of the
        * corresponding timer index in the timer array is not NULL.
        */
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
        return LORAWAN_INVALID_REQUEST;
    e5b4:	300b      	adds	r0, #11
    if (NULL != swTimers[timerId].timerCb)
    e5b6:	2b00      	cmp	r3, #0
    e5b8:	d005      	beq.n	e5c6 <SwTimerStart+0x3a>
        }
    }

    swtimerStartAbsoluteTimer(timerId, pointInTime, timerCb, paramCb);
    return LORAWAN_SUCCESS;
}
    e5ba:	b004      	add	sp, #16
    e5bc:	bc1c      	pop	{r2, r3, r4}
    e5be:	4690      	mov	r8, r2
    e5c0:	4699      	mov	r9, r3
    e5c2:	46a2      	mov	sl, r4
    e5c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    time |= ((uint64_t) sysTimeOvf) << 32;
    e5c6:	4b4d      	ldr	r3, [pc, #308]	; (e6fc <SwTimerStart+0x170>)
    e5c8:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    e5ca:	4b4d      	ldr	r3, [pc, #308]	; (e700 <SwTimerStart+0x174>)
    e5cc:	8818      	ldrh	r0, [r3, #0]
    e5ce:	0403      	lsls	r3, r0, #16
    e5d0:	4698      	mov	r8, r3
    time |= (uint64_t) common_tc_read_count();
    e5d2:	4b4c      	ldr	r3, [pc, #304]	; (e704 <SwTimerStart+0x178>)
    e5d4:	4798      	blx	r3
    e5d6:	4643      	mov	r3, r8
    e5d8:	4303      	orrs	r3, r0
    switch (timeoutType)
    e5da:	2e00      	cmp	r6, #0
    e5dc:	d003      	beq.n	e5e6 <SwTimerStart+0x5a>
    e5de:	2e01      	cmp	r6, #1
    e5e0:	d038      	beq.n	e654 <SwTimerStart+0xc8>
            return LORAWAN_INVALID_PARAMETER;
    e5e2:	200a      	movs	r0, #10
    e5e4:	e7e9      	b.n	e5ba <SwTimerStart+0x2e>
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    e5e6:	4948      	ldr	r1, [pc, #288]	; (e708 <SwTimerStart+0x17c>)
                return LORAWAN_INVALID_PARAMETER;
    e5e8:	200a      	movs	r0, #10
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    e5ea:	002a      	movs	r2, r5
    e5ec:	3aff      	subs	r2, #255	; 0xff
            pointInTime = ADD_TIME(timerCount, now);
    e5ee:	18ed      	adds	r5, r5, r3
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    e5f0:	428a      	cmp	r2, r1
    e5f2:	d8e2      	bhi.n	e5ba <SwTimerStart+0x2e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    e5f4:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    e5f8:	425a      	negs	r2, r3
    e5fa:	4153      	adcs	r3, r2
    e5fc:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    e5fe:	b672      	cpsid	i
    e600:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    e604:	2600      	movs	r6, #0
    e606:	4b41      	ldr	r3, [pc, #260]	; (e70c <SwTimerStart+0x180>)
    e608:	701e      	strb	r6, [r3, #0]
	return flags;
    e60a:	9b03      	ldr	r3, [sp, #12]
    e60c:	4699      	mov	r9, r3
    swtimerInternalHandler();
    e60e:	4b40      	ldr	r3, [pc, #256]	; (e710 <SwTimerStart+0x184>)
    e610:	4798      	blx	r3
    swTimers[timerId].absoluteExpiryTime = pointInTime;
    e612:	4b39      	ldr	r3, [pc, #228]	; (e6f8 <SwTimerStart+0x16c>)
    e614:	013a      	lsls	r2, r7, #4
    e616:	50d5      	str	r5, [r2, r3]
    swTimers[timerId].timerCb = (void (*)(void*))handlerCb;
    e618:	189b      	adds	r3, r3, r2
    e61a:	605c      	str	r4, [r3, #4]
    swTimers[timerId].paramCb = parameter;
    e61c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    e61e:	609a      	str	r2, [r3, #8]
    swTimers[timerId].loaded = false;
    e620:	735e      	strb	r6, [r3, #13]
    runningTimers++;
    e622:	4a3c      	ldr	r2, [pc, #240]	; (e714 <SwTimerStart+0x188>)
    e624:	7813      	ldrb	r3, [r2, #0]
    e626:	3301      	adds	r3, #1
    e628:	b2db      	uxtb	r3, r3
    e62a:	7013      	strb	r3, [r2, #0]
    if (SWTIMER_INVALID == runningTimerQueueHead)
    e62c:	4b3a      	ldr	r3, [pc, #232]	; (e718 <SwTimerStart+0x18c>)
    e62e:	681b      	ldr	r3, [r3, #0]
    e630:	469a      	mov	sl, r3
    e632:	2bff      	cmp	r3, #255	; 0xff
    e634:	d016      	beq.n	e664 <SwTimerStart+0xd8>
        uint8_t currIndex = runningTimerQueueHead;
    e636:	466a      	mov	r2, sp
    e638:	7013      	strb	r3, [r2, #0]
    e63a:	7812      	ldrb	r2, [r2, #0]
        for (index = 0; index < runningTimers; index++)
    e63c:	4b35      	ldr	r3, [pc, #212]	; (e714 <SwTimerStart+0x188>)
    e63e:	781b      	ldrb	r3, [r3, #0]
    e640:	2b00      	cmp	r3, #0
    e642:	d042      	beq.n	e6ca <SwTimerStart+0x13e>
    e644:	9200      	str	r2, [sp, #0]
    e646:	2300      	movs	r3, #0
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    e648:	492b      	ldr	r1, [pc, #172]	; (e6f8 <SwTimerStart+0x16c>)
    e64a:	4688      	mov	r8, r1
    e64c:	4833      	ldr	r0, [pc, #204]	; (e71c <SwTimerStart+0x190>)
                    currIndex = swTimers[currIndex].nextTimer;
    e64e:	468c      	mov	ip, r1
        for (index = 0; index < runningTimers; index++)
    e650:	4c30      	ldr	r4, [pc, #192]	; (e714 <SwTimerStart+0x188>)
    e652:	e02a      	b.n	e6aa <SwTimerStart+0x11e>
            if ((timeout > SWTIMER_MAX_TIMEOUT) || \
    e654:	0028      	movs	r0, r5
    e656:	38ff      	subs	r0, #255	; 0xff
    e658:	1ac3      	subs	r3, r0, r3
    e65a:	4a2b      	ldr	r2, [pc, #172]	; (e708 <SwTimerStart+0x17c>)
                return LORAWAN_INVALID_PARAMETER;
    e65c:	200a      	movs	r0, #10
            if ((timeout > SWTIMER_MAX_TIMEOUT) || \
    e65e:	4293      	cmp	r3, r2
    e660:	d9c8      	bls.n	e5f4 <SwTimerStart+0x68>
    e662:	e7aa      	b.n	e5ba <SwTimerStart+0x2e>
        runningTimerQueueHead = timerId;
    e664:	4b2c      	ldr	r3, [pc, #176]	; (e718 <SwTimerStart+0x18c>)
    e666:	601f      	str	r7, [r3, #0]
        loadHwTimer(runningTimerQueueHead);
    e668:	0038      	movs	r0, r7
    e66a:	4b2d      	ldr	r3, [pc, #180]	; (e720 <SwTimerStart+0x194>)
    e66c:	4798      	blx	r3
    e66e:	e036      	b.n	e6de <SwTimerStart+0x152>
                    swTimers[timerId].nextTimer = currIndex;
    e670:	4b21      	ldr	r3, [pc, #132]	; (e6f8 <SwTimerStart+0x16c>)
    e672:	013c      	lsls	r4, r7, #4
    e674:	191c      	adds	r4, r3, r4
    e676:	7322      	strb	r2, [r4, #12]
                    swTimers[currIndex].loaded = false;
    e678:	9901      	ldr	r1, [sp, #4]
    e67a:	0109      	lsls	r1, r1, #4
    e67c:	1859      	adds	r1, r3, r1
    e67e:	2300      	movs	r3, #0
    e680:	734b      	strb	r3, [r1, #13]
                    if (runningTimerQueueHead == currIndex)
    e682:	4592      	cmp	sl, r2
    e684:	d005      	beq.n	e692 <SwTimerStart+0x106>
                        swTimers[prevIndex].nextTimer = timerId;
    e686:	9b00      	ldr	r3, [sp, #0]
    e688:	0118      	lsls	r0, r3, #4
    e68a:	4b1b      	ldr	r3, [pc, #108]	; (e6f8 <SwTimerStart+0x16c>)
    e68c:	1818      	adds	r0, r3, r0
    e68e:	7307      	strb	r7, [r0, #12]
    e690:	e025      	b.n	e6de <SwTimerStart+0x152>
                        runningTimerQueueHead = timerId;
    e692:	4b21      	ldr	r3, [pc, #132]	; (e718 <SwTimerStart+0x18c>)
    e694:	601f      	str	r7, [r3, #0]
                        loadHwTimer(runningTimerQueueHead);
    e696:	0038      	movs	r0, r7
    e698:	4b21      	ldr	r3, [pc, #132]	; (e720 <SwTimerStart+0x194>)
    e69a:	4798      	blx	r3
    e69c:	e01f      	b.n	e6de <SwTimerStart+0x152>
        for (index = 0; index < runningTimers; index++)
    e69e:	3301      	adds	r3, #1
    e6a0:	b2db      	uxtb	r3, r3
    e6a2:	7821      	ldrb	r1, [r4, #0]
    e6a4:	b2c9      	uxtb	r1, r1
    e6a6:	428b      	cmp	r3, r1
    e6a8:	d210      	bcs.n	e6cc <SwTimerStart+0x140>
            if (SWTIMER_INVALID != currIndex)
    e6aa:	2aff      	cmp	r2, #255	; 0xff
    e6ac:	d0f7      	beq.n	e69e <SwTimerStart+0x112>
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    e6ae:	9201      	str	r2, [sp, #4]
    e6b0:	0111      	lsls	r1, r2, #4
    return ((t2 - t1) < INT32_MAX);
    e6b2:	4646      	mov	r6, r8
    e6b4:	5989      	ldr	r1, [r1, r6]
    e6b6:	1a69      	subs	r1, r5, r1
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    e6b8:	4281      	cmp	r1, r0
    e6ba:	d8d9      	bhi.n	e670 <SwTimerStart+0xe4>
                    currIndex = swTimers[currIndex].nextTimer;
    e6bc:	0111      	lsls	r1, r2, #4
    e6be:	4461      	add	r1, ip
    e6c0:	9200      	str	r2, [sp, #0]
    e6c2:	7b0a      	ldrb	r2, [r1, #12]
    e6c4:	e7eb      	b.n	e69e <SwTimerStart+0x112>
        return LORAWAN_INVALID_PARAMETER;
    e6c6:	200a      	movs	r0, #10
    e6c8:	e777      	b.n	e5ba <SwTimerStart+0x2e>
        uint8_t prevIndex = runningTimerQueueHead;
    e6ca:	9200      	str	r2, [sp, #0]
            swTimers[prevIndex].nextTimer = timerId;
    e6cc:	4b0a      	ldr	r3, [pc, #40]	; (e6f8 <SwTimerStart+0x16c>)
    e6ce:	9a00      	ldr	r2, [sp, #0]
    e6d0:	0110      	lsls	r0, r2, #4
    e6d2:	1818      	adds	r0, r3, r0
    e6d4:	7307      	strb	r7, [r0, #12]
            swTimers[timerId].nextTimer = SWTIMER_INVALID;
    e6d6:	013f      	lsls	r7, r7, #4
    e6d8:	19df      	adds	r7, r3, r7
    e6da:	23ff      	movs	r3, #255	; 0xff
    e6dc:	733b      	strb	r3, [r7, #12]
	if (cpu_irq_is_enabled_flags(flags))
    e6de:	23ff      	movs	r3, #255	; 0xff
    return LORAWAN_SUCCESS;
    e6e0:	2008      	movs	r0, #8
    e6e2:	464a      	mov	r2, r9
    e6e4:	4213      	tst	r3, r2
    e6e6:	d100      	bne.n	e6ea <SwTimerStart+0x15e>
    e6e8:	e767      	b.n	e5ba <SwTimerStart+0x2e>
		cpu_irq_enable();
    e6ea:	2201      	movs	r2, #1
    e6ec:	4b07      	ldr	r3, [pc, #28]	; (e70c <SwTimerStart+0x180>)
    e6ee:	701a      	strb	r2, [r3, #0]
    e6f0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    e6f4:	b662      	cpsie	i
    e6f6:	e760      	b.n	e5ba <SwTimerStart+0x2e>
    e6f8:	200035e8 	.word	0x200035e8
    e6fc:	2000377c 	.word	0x2000377c
    e700:	20003778 	.word	0x20003778
    e704:	00014451 	.word	0x00014451
    e708:	7fffff00 	.word	0x7fffff00
    e70c:	20000014 	.word	0x20000014
    e710:	0000e409 	.word	0x0000e409
    e714:	2000209c 	.word	0x2000209c
    e718:	20002098 	.word	0x20002098
    e71c:	7ffffffe 	.word	0x7ffffffe
    e720:	0000e371 	.word	0x0000e371

0000e724 <SwTimerIsRunning>:
\param[in] timerId Timer ID to be checked for running
\return True if the timer is running else False
******************************************************************************/
bool SwTimerIsRunning(uint8_t timerId)
{
    if (NULL == swTimers[timerId].timerCb)
    e724:	0103      	lsls	r3, r0, #4
    e726:	4803      	ldr	r0, [pc, #12]	; (e734 <SwTimerIsRunning+0x10>)
    e728:	18c0      	adds	r0, r0, r3
    e72a:	6840      	ldr	r0, [r0, #4]
    e72c:	1e43      	subs	r3, r0, #1
    e72e:	4198      	sbcs	r0, r3
    e730:	b2c0      	uxtb	r0, r0
    {
        return false;
    }

    return true;
}
    e732:	4770      	bx	lr
    e734:	200035e8 	.word	0x200035e8

0000e738 <SwTimerReadValue>:
\brief Returns the remaining timeout for the given timerId
\param[in] timerId Timer ID to get the remaining time
\return Remaining time until expiry in microseconds
******************************************************************************/
uint32_t SwTimerReadValue(uint8_t timerId)
{
    e738:	b570      	push	{r4, r5, r6, lr}
    uint32_t remainingTime = 0u;
    uint32_t timerExpiryTime = 0u;
    uint32_t currentSysTime = 0u;
    if ( NULL != swTimers[timerId].timerCb )
    e73a:	0102      	lsls	r2, r0, #4
    e73c:	4b0d      	ldr	r3, [pc, #52]	; (e774 <SwTimerReadValue+0x3c>)
    e73e:	189b      	adds	r3, r3, r2
    e740:	685b      	ldr	r3, [r3, #4]
    e742:	2b00      	cmp	r3, #0
    e744:	d014      	beq.n	e770 <SwTimerReadValue+0x38>
    {
	    timerExpiryTime = swTimers[timerId].absoluteExpiryTime;
    e746:	4b0b      	ldr	r3, [pc, #44]	; (e774 <SwTimerReadValue+0x3c>)
    e748:	58d5      	ldr	r5, [r2, r3]
    time |= ((uint64_t) sysTimeOvf) << 32;
    e74a:	4b0b      	ldr	r3, [pc, #44]	; (e778 <SwTimerReadValue+0x40>)
    e74c:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    e74e:	4b0b      	ldr	r3, [pc, #44]	; (e77c <SwTimerReadValue+0x44>)
    e750:	881c      	ldrh	r4, [r3, #0]
    e752:	0424      	lsls	r4, r4, #16
    time |= (uint64_t) common_tc_read_count();
    e754:	4b0a      	ldr	r3, [pc, #40]	; (e780 <SwTimerReadValue+0x48>)
    e756:	4798      	blx	r3
    e758:	4320      	orrs	r0, r4
	    currentSysTime = (uint32_t) gettime();
	    if ( currentSysTime <= timerExpiryTime )
    e75a:	4285      	cmp	r5, r0
    e75c:	d305      	bcc.n	e76a <SwTimerReadValue+0x32>
	    {
		    remainingTime = timerExpiryTime - currentSysTime;
    e75e:	1a28      	subs	r0, r5, r0
	    else if ( currentSysTime > timerExpiryTime )
	    {
		    remainingTime = (UINT32_MAX - currentSysTime) + timerExpiryTime;
	    }

        if (remainingTime >= SWTIMER_MAX_TIMEOUT)
    e760:	4b08      	ldr	r3, [pc, #32]	; (e784 <SwTimerReadValue+0x4c>)
    e762:	4298      	cmp	r0, r3
    e764:	d900      	bls.n	e768 <SwTimerReadValue+0x30>
        {
            /* Diff cannot be more than max timeout */
            remainingTime = 0;
    e766:	2000      	movs	r0, #0
        }
    }
    return remainingTime;
}
    e768:	bd70      	pop	{r4, r5, r6, pc}
		    remainingTime = (UINT32_MAX - currentSysTime) + timerExpiryTime;
    e76a:	3d01      	subs	r5, #1
    e76c:	1a28      	subs	r0, r5, r0
    e76e:	e7f7      	b.n	e760 <SwTimerReadValue+0x28>
    uint32_t remainingTime = 0u;
    e770:	2000      	movs	r0, #0
    return remainingTime;
    e772:	e7f9      	b.n	e768 <SwTimerReadValue+0x30>
    e774:	200035e8 	.word	0x200035e8
    e778:	2000377c 	.word	0x2000377c
    e77c:	20003778 	.word	0x20003778
    e780:	00014451 	.word	0x00014451
    e784:	7ffffffe 	.word	0x7ffffffe

0000e788 <SwTimerNextExpiryDuration>:
/**************************************************************************//**
\brief Returns the duration until the next timer expiry
\return Returns the duration until the next timeout in microseconds
******************************************************************************/
uint32_t SwTimerNextExpiryDuration(void)
{
    e788:	b510      	push	{r4, lr}
    uint32_t duration = SWTIMER_INVALID_TIMEOUT;

    if (SWTIMER_INVALID != runningTimerQueueHead)
    e78a:	4b05      	ldr	r3, [pc, #20]	; (e7a0 <SwTimerNextExpiryDuration+0x18>)
    e78c:	6818      	ldr	r0, [r3, #0]
    e78e:	28ff      	cmp	r0, #255	; 0xff
    e790:	d102      	bne.n	e798 <SwTimerNextExpiryDuration+0x10>
    uint32_t duration = SWTIMER_INVALID_TIMEOUT;
    e792:	2001      	movs	r0, #1
    e794:	4240      	negs	r0, r0
    {
        duration = SwTimerReadValue(runningTimerQueueHead);
    }

    return duration;
}
    e796:	bd10      	pop	{r4, pc}
        duration = SwTimerReadValue(runningTimerQueueHead);
    e798:	b2c0      	uxtb	r0, r0
    e79a:	4b02      	ldr	r3, [pc, #8]	; (e7a4 <SwTimerNextExpiryDuration+0x1c>)
    e79c:	4798      	blx	r3
    e79e:	e7fa      	b.n	e796 <SwTimerNextExpiryDuration+0xe>
    e7a0:	20002098 	.word	0x20002098
    e7a4:	0000e739 	.word	0x0000e739

0000e7a8 <SwTimersExecute>:

/**************************************************************************//**
\brief Handles Queues and Callbacks for Expired Timers
******************************************************************************/
void SwTimersExecute(void)
{
    e7a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    e7aa:	46de      	mov	lr, fp
    e7ac:	4657      	mov	r7, sl
    e7ae:	464e      	mov	r6, r9
    e7b0:	4645      	mov	r5, r8
    e7b2:	b5e0      	push	{r5, r6, r7, lr}
    e7b4:	b083      	sub	sp, #12
    time |= ((uint64_t) sysTimeOvf) << 32;
    e7b6:	4b2f      	ldr	r3, [pc, #188]	; (e874 <SwTimersExecute+0xcc>)
    e7b8:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    e7ba:	4b2f      	ldr	r3, [pc, #188]	; (e878 <SwTimersExecute+0xd0>)
    e7bc:	881b      	ldrh	r3, [r3, #0]
    time |= (uint64_t) common_tc_read_count();
    e7be:	4b2f      	ldr	r3, [pc, #188]	; (e87c <SwTimersExecute+0xd4>)
    e7c0:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    e7c2:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    e7c6:	4253      	negs	r3, r2
    e7c8:	4153      	adcs	r3, r2
    e7ca:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    e7cc:	b672      	cpsid	i
    e7ce:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    e7d2:	2200      	movs	r2, #0
    e7d4:	4b2a      	ldr	r3, [pc, #168]	; (e880 <SwTimersExecute+0xd8>)
    e7d6:	701a      	strb	r2, [r3, #0]
	return flags;
    e7d8:	9c00      	ldr	r4, [sp, #0]
    uint64_t now = gettime();

    uint8_t flags = cpu_irq_save();
    swtimerInternalHandler();
    e7da:	4b2a      	ldr	r3, [pc, #168]	; (e884 <SwTimersExecute+0xdc>)
    e7dc:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    e7de:	23ff      	movs	r3, #255	; 0xff
    e7e0:	4223      	tst	r3, r4
    e7e2:	d005      	beq.n	e7f0 <SwTimersExecute+0x48>
		cpu_irq_enable();
    e7e4:	2201      	movs	r2, #1
    e7e6:	4b26      	ldr	r3, [pc, #152]	; (e880 <SwTimersExecute+0xd8>)
    e7e8:	701a      	strb	r2, [r3, #0]
    e7ea:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    e7ee:	b662      	cpsie	i
	cpu_irq_disable();
    e7f0:	4b23      	ldr	r3, [pc, #140]	; (e880 <SwTimersExecute+0xd8>)
    e7f2:	469a      	mov	sl, r3
        /* Expired timer if any will be processed here */
        while (SWTIMER_INVALID != expiredTimerQueueHead)
        {
            flags = cpu_irq_save();

            nextExpiredTimer = swTimers[expiredTimerQueueHead].nextTimer;
    e7f4:	4c24      	ldr	r4, [pc, #144]	; (e888 <SwTimersExecute+0xe0>)
    e7f6:	4b25      	ldr	r3, [pc, #148]	; (e88c <SwTimersExecute+0xe4>)
    e7f8:	4699      	mov	r9, r3
    e7fa:	2200      	movs	r2, #0

            /*
            * The expired timer's structure elements are updated
            * and the timer is taken out of expired timer queue
            */
            swTimers[expiredTimerQueueHead].nextTimer = SWTIMER_INVALID;
    e7fc:	20ff      	movs	r0, #255	; 0xff
            */
            expiredTimerQueueHead = nextExpiredTimer;

            if (SWTIMER_INVALID == expiredTimerQueueHead)
            {
                expiredTimerQueueTail = SWTIMER_INVALID;
    e7fe:	4b24      	ldr	r3, [pc, #144]	; (e890 <SwTimersExecute+0xe8>)
    e800:	4698      	mov	r8, r3
		cpu_irq_enable();
    e802:	4b1f      	ldr	r3, [pc, #124]	; (e880 <SwTimersExecute+0xd8>)
    e804:	469c      	mov	ip, r3
    e806:	e004      	b.n	e812 <SwTimersExecute+0x6a>
    e808:	4643      	mov	r3, r8
    e80a:	6018      	str	r0, [r3, #0]
    e80c:	e01e      	b.n	e84c <SwTimersExecute+0xa4>
            }

            cpu_irq_restore(flags);

            if (NULL != callback)
    e80e:	2e00      	cmp	r6, #0
    e810:	d125      	bne.n	e85e <SwTimersExecute+0xb6>
        while (SWTIMER_INVALID != expiredTimerQueueHead)
    e812:	4b1d      	ldr	r3, [pc, #116]	; (e888 <SwTimersExecute+0xe0>)
    e814:	681b      	ldr	r3, [r3, #0]
    e816:	2bff      	cmp	r3, #255	; 0xff
    e818:	d024      	beq.n	e864 <SwTimersExecute+0xbc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    e81a:	f3ef 8110 	mrs	r1, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    e81e:	424b      	negs	r3, r1
    e820:	414b      	adcs	r3, r1
    e822:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    e824:	b672      	cpsid	i
    e826:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    e82a:	4653      	mov	r3, sl
    e82c:	701a      	strb	r2, [r3, #0]
	return flags;
    e82e:	9f01      	ldr	r7, [sp, #4]
            nextExpiredTimer = swTimers[expiredTimerQueueHead].nextTimer;
    e830:	6823      	ldr	r3, [r4, #0]
    e832:	011b      	lsls	r3, r3, #4
    e834:	444b      	add	r3, r9
    e836:	7b19      	ldrb	r1, [r3, #12]
            callback = (SwTimerCallbackFunc_t)swTimers[expiredTimerQueueHead].timerCb;
    e838:	685e      	ldr	r6, [r3, #4]
            cbParam = swTimers[expiredTimerQueueHead].paramCb;
    e83a:	689d      	ldr	r5, [r3, #8]
    e83c:	46ab      	mov	fp, r5
            swTimers[expiredTimerQueueHead].nextTimer = SWTIMER_INVALID;
    e83e:	7318      	strb	r0, [r3, #12]
            swTimers[expiredTimerQueueHead].timerCb = NULL;
    e840:	605a      	str	r2, [r3, #4]
            swTimers[expiredTimerQueueHead].paramCb = NULL;
    e842:	609a      	str	r2, [r3, #8]
            swTimers[expiredTimerQueueHead].loaded = false;
    e844:	735a      	strb	r2, [r3, #13]
            expiredTimerQueueHead = nextExpiredTimer;
    e846:	6021      	str	r1, [r4, #0]
            if (SWTIMER_INVALID == expiredTimerQueueHead)
    e848:	29ff      	cmp	r1, #255	; 0xff
    e84a:	d0dd      	beq.n	e808 <SwTimersExecute+0x60>
	if (cpu_irq_is_enabled_flags(flags))
    e84c:	4238      	tst	r0, r7
    e84e:	d0de      	beq.n	e80e <SwTimersExecute+0x66>
		cpu_irq_enable();
    e850:	2301      	movs	r3, #1
    e852:	4661      	mov	r1, ip
    e854:	700b      	strb	r3, [r1, #0]
    e856:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    e85a:	b662      	cpsie	i
    e85c:	e7d7      	b.n	e80e <SwTimersExecute+0x66>
            {
                /* Callback function is called */
                callback(cbParam);
    e85e:	4658      	mov	r0, fp
    e860:	47b0      	blx	r6
    e862:	e7ca      	b.n	e7fa <SwTimersExecute+0x52>
                (void)now;
            }
        }
    }
}
    e864:	b003      	add	sp, #12
    e866:	bc3c      	pop	{r2, r3, r4, r5}
    e868:	4690      	mov	r8, r2
    e86a:	4699      	mov	r9, r3
    e86c:	46a2      	mov	sl, r4
    e86e:	46ab      	mov	fp, r5
    e870:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e872:	46c0      	nop			; (mov r8, r8)
    e874:	2000377c 	.word	0x2000377c
    e878:	20003778 	.word	0x20003778
    e87c:	00014451 	.word	0x00014451
    e880:	20000014 	.word	0x20000014
    e884:	0000e409 	.word	0x0000e409
    e888:	20002090 	.word	0x20002090
    e88c:	200035e8 	.word	0x200035e8
    e890:	20002094 	.word	0x20002094

0000e894 <TIMER_TaskHandler>:
{
    e894:	b510      	push	{r4, lr}
    SwTimersExecute();
    e896:	4b02      	ldr	r3, [pc, #8]	; (e8a0 <TIMER_TaskHandler+0xc>)
    e898:	4798      	blx	r3
}
    e89a:	2000      	movs	r0, #0
    e89c:	bd10      	pop	{r4, pc}
    e89e:	46c0      	nop			; (mov r8, r8)
    e8a0:	0000e7a9 	.word	0x0000e7a9

0000e8a4 <SwTimerStop>:
        LORAWAN_INVALID_PARAMETER if timerId is not valid
        LORAWAN_INVALID_REQUEST if timerId was not started before
        LORAWAN_SUCCESS if it is successfully stopped
******************************************************************************/
StackRetStatus_t SwTimerStop(uint8_t timerId)
{
    e8a4:	b570      	push	{r4, r5, r6, lr}
    e8a6:	b082      	sub	sp, #8
    e8a8:	0004      	movs	r4, r0
    uint8_t prevIndex;

    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId)
    {
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_STOP_FAILURE);
        return LORAWAN_INVALID_PARAMETER;
    e8aa:	200a      	movs	r0, #10
    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId)
    e8ac:	2c18      	cmp	r4, #24
    e8ae:	d901      	bls.n	e8b4 <SwTimerStop+0x10>
        return LORAWAN_SUCCESS;
    }

    SYS_ASSERT_INFO(ASSERT_HAL_TIMER_STOP_FAILURE);
    return LORAWAN_INVALID_REQUEST;
}
    e8b0:	b002      	add	sp, #8
    e8b2:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    e8b4:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    e8b8:	425a      	negs	r2, r3
    e8ba:	4153      	adcs	r3, r2
    e8bc:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    e8be:	b672      	cpsid	i
    e8c0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    e8c4:	2200      	movs	r2, #0
    e8c6:	4b47      	ldr	r3, [pc, #284]	; (e9e4 <SwTimerStop+0x140>)
    e8c8:	701a      	strb	r2, [r3, #0]
	return flags;
    e8ca:	9d01      	ldr	r5, [sp, #4]
    swtimerInternalHandler();
    e8cc:	4b46      	ldr	r3, [pc, #280]	; (e9e8 <SwTimerStop+0x144>)
    e8ce:	4798      	blx	r3
    if (runningTimers > 0)
    e8d0:	4b46      	ldr	r3, [pc, #280]	; (e9ec <SwTimerStop+0x148>)
    e8d2:	781b      	ldrb	r3, [r3, #0]
    e8d4:	2b00      	cmp	r3, #0
    e8d6:	d040      	beq.n	e95a <SwTimerStop+0xb6>
        uint8_t timer_count = runningTimers;
    e8d8:	4b44      	ldr	r3, [pc, #272]	; (e9ec <SwTimerStop+0x148>)
    e8da:	781b      	ldrb	r3, [r3, #0]
    e8dc:	b2db      	uxtb	r3, r3
        prevIndex = currIndex = runningTimerQueueHead;
    e8de:	4a44      	ldr	r2, [pc, #272]	; (e9f0 <SwTimerStop+0x14c>)
    e8e0:	6816      	ldr	r6, [r2, #0]
    e8e2:	b2f1      	uxtb	r1, r6
        while (timer_count > 0)
    e8e4:	2b00      	cmp	r3, #0
    e8e6:	d038      	beq.n	e95a <SwTimerStop+0xb6>
            if (timerId == currIndex)
    e8e8:	428c      	cmp	r4, r1
    e8ea:	d00b      	beq.n	e904 <SwTimerStop+0x60>
                currIndex = swTimers[currIndex].nextTimer;
    e8ec:	4841      	ldr	r0, [pc, #260]	; (e9f4 <SwTimerStop+0x150>)
    e8ee:	010a      	lsls	r2, r1, #4
    e8f0:	1882      	adds	r2, r0, r2
    e8f2:	7b12      	ldrb	r2, [r2, #12]
            timer_count--;
    e8f4:	3b01      	subs	r3, #1
    e8f6:	b2db      	uxtb	r3, r3
        while (timer_count > 0)
    e8f8:	2b00      	cmp	r3, #0
    e8fa:	d02e      	beq.n	e95a <SwTimerStop+0xb6>
            if (timerId == currIndex)
    e8fc:	4294      	cmp	r4, r2
    e8fe:	d001      	beq.n	e904 <SwTimerStop+0x60>
                currIndex = swTimers[currIndex].nextTimer;
    e900:	0011      	movs	r1, r2
    e902:	e7f4      	b.n	e8ee <SwTimerStop+0x4a>
                if (timerId == runningTimerQueueHead)
    e904:	42a6      	cmp	r6, r4
    e906:	d01d      	beq.n	e944 <SwTimerStop+0xa0>
                    swTimers[prevIndex].nextTimer = swTimers[timerId].nextTimer;
    e908:	4b3a      	ldr	r3, [pc, #232]	; (e9f4 <SwTimerStop+0x150>)
    e90a:	0122      	lsls	r2, r4, #4
    e90c:	189a      	adds	r2, r3, r2
    e90e:	7b12      	ldrb	r2, [r2, #12]
    e910:	0109      	lsls	r1, r1, #4
    e912:	1859      	adds	r1, r3, r1
    e914:	730a      	strb	r2, [r1, #12]
                swTimers[timerId].nextTimer  = SWTIMER_INVALID;
    e916:	0122      	lsls	r2, r4, #4
    e918:	4b36      	ldr	r3, [pc, #216]	; (e9f4 <SwTimerStop+0x150>)
    e91a:	189b      	adds	r3, r3, r2
    e91c:	22ff      	movs	r2, #255	; 0xff
    e91e:	731a      	strb	r2, [r3, #12]
            runningTimers--;
    e920:	4a32      	ldr	r2, [pc, #200]	; (e9ec <SwTimerStop+0x148>)
    e922:	7813      	ldrb	r3, [r2, #0]
    e924:	3b01      	subs	r3, #1
    e926:	b2db      	uxtb	r3, r3
    e928:	7013      	strb	r3, [r2, #0]
        swTimers[timerId].timerCb = NULL;
    e92a:	0124      	lsls	r4, r4, #4
    e92c:	4b31      	ldr	r3, [pc, #196]	; (e9f4 <SwTimerStop+0x150>)
    e92e:	191c      	adds	r4, r3, r4
    e930:	2300      	movs	r3, #0
    e932:	6063      	str	r3, [r4, #4]
        swTimers[timerId].paramCb = NULL;
    e934:	60a3      	str	r3, [r4, #8]
        swTimers[timerId].loaded = false;
    e936:	7363      	strb	r3, [r4, #13]
	if (cpu_irq_is_enabled_flags(flags))
    e938:	33ff      	adds	r3, #255	; 0xff
        return LORAWAN_SUCCESS;
    e93a:	2008      	movs	r0, #8
    e93c:	422b      	tst	r3, r5
    e93e:	d0b7      	beq.n	e8b0 <SwTimerStop+0xc>
    e940:	2301      	movs	r3, #1
    e942:	e040      	b.n	e9c6 <SwTimerStop+0x122>
                    common_tc_compare_stop();
    e944:	4b2c      	ldr	r3, [pc, #176]	; (e9f8 <SwTimerStop+0x154>)
    e946:	4798      	blx	r3
                    runningTimerQueueHead = swTimers[timerId].nextTimer;
    e948:	0122      	lsls	r2, r4, #4
    e94a:	4b2a      	ldr	r3, [pc, #168]	; (e9f4 <SwTimerStop+0x150>)
    e94c:	189b      	adds	r3, r3, r2
    e94e:	7b18      	ldrb	r0, [r3, #12]
    e950:	4b27      	ldr	r3, [pc, #156]	; (e9f0 <SwTimerStop+0x14c>)
    e952:	6018      	str	r0, [r3, #0]
                    loadHwTimer(runningTimerQueueHead);
    e954:	4b29      	ldr	r3, [pc, #164]	; (e9fc <SwTimerStop+0x158>)
    e956:	4798      	blx	r3
    e958:	e7dd      	b.n	e916 <SwTimerStop+0x72>
        prevIndex = currIndex = expiredTimerQueueHead;
    e95a:	4b29      	ldr	r3, [pc, #164]	; (ea00 <SwTimerStop+0x15c>)
    e95c:	6818      	ldr	r0, [r3, #0]
    e95e:	b2c2      	uxtb	r2, r0
        while (SWTIMER_INVALID != currIndex)
    e960:	2aff      	cmp	r2, #255	; 0xff
    e962:	d02c      	beq.n	e9be <SwTimerStop+0x11a>
            if (timerId == currIndex)
    e964:	4294      	cmp	r4, r2
    e966:	d009      	beq.n	e97c <SwTimerStop+0xd8>
                currIndex = swTimers[currIndex].nextTimer;
    e968:	4922      	ldr	r1, [pc, #136]	; (e9f4 <SwTimerStop+0x150>)
    e96a:	0113      	lsls	r3, r2, #4
    e96c:	18cb      	adds	r3, r1, r3
    e96e:	7b1b      	ldrb	r3, [r3, #12]
        while (SWTIMER_INVALID != currIndex)
    e970:	2bff      	cmp	r3, #255	; 0xff
    e972:	d024      	beq.n	e9be <SwTimerStop+0x11a>
            if (timerId == currIndex)
    e974:	429c      	cmp	r4, r3
    e976:	d001      	beq.n	e97c <SwTimerStop+0xd8>
                currIndex = swTimers[currIndex].nextTimer;
    e978:	001a      	movs	r2, r3
    e97a:	e7f6      	b.n	e96a <SwTimerStop+0xc6>
                if (timerId == expiredTimerQueueHead)
    e97c:	42a0      	cmp	r0, r4
    e97e:	d00d      	beq.n	e99c <SwTimerStop+0xf8>
                    swTimers[prevIndex].nextTimer = swTimers[timerId].nextTimer;
    e980:	4b1c      	ldr	r3, [pc, #112]	; (e9f4 <SwTimerStop+0x150>)
    e982:	0121      	lsls	r1, r4, #4
    e984:	1859      	adds	r1, r3, r1
    e986:	7b09      	ldrb	r1, [r1, #12]
    e988:	0110      	lsls	r0, r2, #4
    e98a:	181b      	adds	r3, r3, r0
    e98c:	7319      	strb	r1, [r3, #12]
                    if (timerId == expiredTimerQueueTail)
    e98e:	4b1d      	ldr	r3, [pc, #116]	; (ea04 <SwTimerStop+0x160>)
    e990:	681b      	ldr	r3, [r3, #0]
    e992:	429c      	cmp	r4, r3
    e994:	d1c9      	bne.n	e92a <SwTimerStop+0x86>
                        expiredTimerQueueTail = prevIndex;
    e996:	4b1b      	ldr	r3, [pc, #108]	; (ea04 <SwTimerStop+0x160>)
    e998:	601a      	str	r2, [r3, #0]
    e99a:	e7c6      	b.n	e92a <SwTimerStop+0x86>
                    if (expiredTimerQueueHead == expiredTimerQueueTail)
    e99c:	4b19      	ldr	r3, [pc, #100]	; (ea04 <SwTimerStop+0x160>)
    e99e:	681b      	ldr	r3, [r3, #0]
    e9a0:	4298      	cmp	r0, r3
    e9a2:	d006      	beq.n	e9b2 <SwTimerStop+0x10e>
                        expiredTimerQueueHead = swTimers[expiredTimerQueueHead].nextTimer;
    e9a4:	0100      	lsls	r0, r0, #4
    e9a6:	4b13      	ldr	r3, [pc, #76]	; (e9f4 <SwTimerStop+0x150>)
    e9a8:	1818      	adds	r0, r3, r0
    e9aa:	7b02      	ldrb	r2, [r0, #12]
    e9ac:	4b14      	ldr	r3, [pc, #80]	; (ea00 <SwTimerStop+0x15c>)
    e9ae:	601a      	str	r2, [r3, #0]
    e9b0:	e7bb      	b.n	e92a <SwTimerStop+0x86>
                        expiredTimerQueueHead = expiredTimerQueueTail = SWTIMER_INVALID;
    e9b2:	23ff      	movs	r3, #255	; 0xff
    e9b4:	4a13      	ldr	r2, [pc, #76]	; (ea04 <SwTimerStop+0x160>)
    e9b6:	6013      	str	r3, [r2, #0]
    e9b8:	4a11      	ldr	r2, [pc, #68]	; (ea00 <SwTimerStop+0x15c>)
    e9ba:	6013      	str	r3, [r2, #0]
    e9bc:	e7b5      	b.n	e92a <SwTimerStop+0x86>
    e9be:	23ff      	movs	r3, #255	; 0xff
    e9c0:	422b      	tst	r3, r5
    e9c2:	d00a      	beq.n	e9da <SwTimerStop+0x136>
    e9c4:	2300      	movs	r3, #0
		cpu_irq_enable();
    e9c6:	2101      	movs	r1, #1
    e9c8:	4a06      	ldr	r2, [pc, #24]	; (e9e4 <SwTimerStop+0x140>)
    e9ca:	7011      	strb	r1, [r2, #0]
    e9cc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    e9d0:	b662      	cpsie	i
    if (timerStopReqStatus)
    e9d2:	2b00      	cmp	r3, #0
    e9d4:	d103      	bne.n	e9de <SwTimerStop+0x13a>
    return LORAWAN_INVALID_REQUEST;
    e9d6:	2015      	movs	r0, #21
    e9d8:	e76a      	b.n	e8b0 <SwTimerStop+0xc>
    e9da:	2015      	movs	r0, #21
    e9dc:	e768      	b.n	e8b0 <SwTimerStop+0xc>
        return LORAWAN_SUCCESS;
    e9de:	2008      	movs	r0, #8
    e9e0:	e766      	b.n	e8b0 <SwTimerStop+0xc>
    e9e2:	46c0      	nop			; (mov r8, r8)
    e9e4:	20000014 	.word	0x20000014
    e9e8:	0000e409 	.word	0x0000e409
    e9ec:	2000209c 	.word	0x2000209c
    e9f0:	20002098 	.word	0x20002098
    e9f4:	200035e8 	.word	0x200035e8
    e9f8:	0001449d 	.word	0x0001449d
    e9fc:	0000e371 	.word	0x0000e371
    ea00:	20002090 	.word	0x20002090
    ea04:	20002094 	.word	0x20002094

0000ea08 <SwTimerRunRemainingTime>:
{
    ea08:	b5f0      	push	{r4, r5, r6, r7, lr}
    ea0a:	b083      	sub	sp, #12
    ea0c:	0005      	movs	r5, r0
    void * timerCb = (void*)(swTimers[runningTimerQueueHead].timerCb);
    ea0e:	4b0b      	ldr	r3, [pc, #44]	; (ea3c <SwTimerRunRemainingTime+0x34>)
    ea10:	681c      	ldr	r4, [r3, #0]
    ea12:	0122      	lsls	r2, r4, #4
    ea14:	4b0a      	ldr	r3, [pc, #40]	; (ea40 <SwTimerRunRemainingTime+0x38>)
    ea16:	189b      	adds	r3, r3, r2
    ea18:	685e      	ldr	r6, [r3, #4]
    void *paramCb = swTimers[runningTimerQueueHead].paramCb;
    ea1a:	689f      	ldr	r7, [r3, #8]
    uint8_t timerId = runningTimerQueueHead;
    ea1c:	b2e4      	uxtb	r4, r4
    if (LORAWAN_SUCCESS == SwTimerStop(runningTimerQueueHead))
    ea1e:	0020      	movs	r0, r4
    ea20:	4b08      	ldr	r3, [pc, #32]	; (ea44 <SwTimerRunRemainingTime+0x3c>)
    ea22:	4798      	blx	r3
    ea24:	2808      	cmp	r0, #8
    ea26:	d001      	beq.n	ea2c <SwTimerRunRemainingTime+0x24>
}
    ea28:	b003      	add	sp, #12
    ea2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        SwTimerStart(timerId, offset, SW_TIMEOUT_RELATIVE, timerCb, paramCb);
    ea2c:	9700      	str	r7, [sp, #0]
    ea2e:	0033      	movs	r3, r6
    ea30:	2200      	movs	r2, #0
    ea32:	0029      	movs	r1, r5
    ea34:	0020      	movs	r0, r4
    ea36:	4c04      	ldr	r4, [pc, #16]	; (ea48 <SwTimerRunRemainingTime+0x40>)
    ea38:	47a0      	blx	r4
}
    ea3a:	e7f5      	b.n	ea28 <SwTimerRunRemainingTime+0x20>
    ea3c:	20002098 	.word	0x20002098
    ea40:	200035e8 	.word	0x200035e8
    ea44:	0000e8a5 	.word	0x0000e8a5
    ea48:	0000e58d 	.word	0x0000e58d

0000ea4c <SystemTimerSync>:
/**************************************************************************//**
\brief Resumes the software timer by offseting it with given time
\param[in] timeToSync Amount of duration to offset from known system time
******************************************************************************/
void SystemTimerSync(uint64_t timeToSync)
{
    ea4c:	b570      	push	{r4, r5, r6, lr}
    uint8_t timerId;
    uint16_t adjustOffset;

    sysTimeLastKnown += timeToSync;
    ea4e:	4b22      	ldr	r3, [pc, #136]	; (ead8 <SystemTimerSync+0x8c>)
    ea50:	681c      	ldr	r4, [r3, #0]
    ea52:	685d      	ldr	r5, [r3, #4]
    ea54:	1900      	adds	r0, r0, r4
    ea56:	4169      	adcs	r1, r5
    ea58:	6018      	str	r0, [r3, #0]
    ea5a:	6059      	str	r1, [r3, #4]

    /* 1. Update system time */
    sysTimeOvf = (uint32_t) (sysTimeLastKnown >> 32);
    ea5c:	4b1f      	ldr	r3, [pc, #124]	; (eadc <SystemTimerSync+0x90>)
    ea5e:	6019      	str	r1, [r3, #0]
    sysTime = (uint16_t) ((sysTimeLastKnown >> SWTIMER_SYSTIME_SHIFTMASK) & 0xffff);
    ea60:	0c02      	lsrs	r2, r0, #16
    ea62:	4b1f      	ldr	r3, [pc, #124]	; (eae0 <SystemTimerSync+0x94>)
    ea64:	801a      	strh	r2, [r3, #0]

    /* 2. Adjust expiration of running timers */
    adjustOffset = (uint16_t) sysTimeLastKnown;
    ea66:	b280      	uxth	r0, r0
    timerId = runningTimerQueueHead;
    ea68:	4b1e      	ldr	r3, [pc, #120]	; (eae4 <SystemTimerSync+0x98>)
    ea6a:	781b      	ldrb	r3, [r3, #0]
    for (uint8_t index = 0; index < runningTimers; index++)
    ea6c:	4a1e      	ldr	r2, [pc, #120]	; (eae8 <SystemTimerSync+0x9c>)
    ea6e:	7812      	ldrb	r2, [r2, #0]
    ea70:	2a00      	cmp	r2, #0
    ea72:	d012      	beq.n	ea9a <SystemTimerSync+0x4e>
    ea74:	2200      	movs	r2, #0
    {
        if (SWTIMER_INVALID != timerId)
        {
            swTimers[timerId].absoluteExpiryTime -= adjustOffset;
    ea76:	4c1d      	ldr	r4, [pc, #116]	; (eaec <SystemTimerSync+0xa0>)
    for (uint8_t index = 0; index < runningTimers; index++)
    ea78:	4d1b      	ldr	r5, [pc, #108]	; (eae8 <SystemTimerSync+0x9c>)
    ea7a:	e005      	b.n	ea88 <SystemTimerSync+0x3c>
    ea7c:	3201      	adds	r2, #1
    ea7e:	b2d2      	uxtb	r2, r2
    ea80:	7829      	ldrb	r1, [r5, #0]
    ea82:	b2c9      	uxtb	r1, r1
    ea84:	4291      	cmp	r1, r2
    ea86:	d908      	bls.n	ea9a <SystemTimerSync+0x4e>
        if (SWTIMER_INVALID != timerId)
    ea88:	2bff      	cmp	r3, #255	; 0xff
    ea8a:	d0f7      	beq.n	ea7c <SystemTimerSync+0x30>
            swTimers[timerId].absoluteExpiryTime -= adjustOffset;
    ea8c:	011b      	lsls	r3, r3, #4
    ea8e:	5919      	ldr	r1, [r3, r4]
    ea90:	1a09      	subs	r1, r1, r0
    ea92:	5119      	str	r1, [r3, r4]
            timerId = swTimers[timerId].nextTimer;
    ea94:	18e3      	adds	r3, r4, r3
    ea96:	7b1b      	ldrb	r3, [r3, #12]
    ea98:	e7f0      	b.n	ea7c <SystemTimerSync+0x30>
        }
    }

    /* 3. Start hardware timer */
    common_tc_init();
    ea9a:	4b15      	ldr	r3, [pc, #84]	; (eaf0 <SystemTimerSync+0xa4>)
    ea9c:	4798      	blx	r3
    set_common_tc_overflow_callback(hwTimerOverflowCallback);
    ea9e:	4815      	ldr	r0, [pc, #84]	; (eaf4 <SystemTimerSync+0xa8>)
    eaa0:	4b15      	ldr	r3, [pc, #84]	; (eaf8 <SystemTimerSync+0xac>)
    eaa2:	4798      	blx	r3
    set_common_tc_expiry_callback(hwTimerExpiryCallback);
    eaa4:	4815      	ldr	r0, [pc, #84]	; (eafc <SystemTimerSync+0xb0>)
    eaa6:	4b16      	ldr	r3, [pc, #88]	; (eb00 <SystemTimerSync+0xb4>)
    eaa8:	4798      	blx	r3

    /* 4. Resume timer queue operations */
    if (runningTimers && (SWTIMER_INVALID != runningTimerQueueHead))
    eaaa:	4b0f      	ldr	r3, [pc, #60]	; (eae8 <SystemTimerSync+0x9c>)
    eaac:	781b      	ldrb	r3, [r3, #0]
    eaae:	2b00      	cmp	r3, #0
    eab0:	d009      	beq.n	eac6 <SystemTimerSync+0x7a>
    eab2:	4b0c      	ldr	r3, [pc, #48]	; (eae4 <SystemTimerSync+0x98>)
    eab4:	681b      	ldr	r3, [r3, #0]
    eab6:	2bff      	cmp	r3, #255	; 0xff
    eab8:	d005      	beq.n	eac6 <SystemTimerSync+0x7a>
    {
        uint32_t remainingTime = SwTimerNextExpiryDuration();
    eaba:	4b12      	ldr	r3, [pc, #72]	; (eb04 <SystemTimerSync+0xb8>)
    eabc:	4798      	blx	r3

        if (SWTIMER_MIN_TIMEOUT > remainingTime)
    eabe:	28fe      	cmp	r0, #254	; 0xfe
    eac0:	d902      	bls.n	eac8 <SystemTimerSync+0x7c>
        else
        {
            /*
            * There is some time left in head timer, so restart it.
            */
            SwTimerRunRemainingTime(remainingTime);
    eac2:	4b11      	ldr	r3, [pc, #68]	; (eb08 <SystemTimerSync+0xbc>)
    eac4:	4798      	blx	r3
        }
    }
}
    eac6:	bd70      	pop	{r4, r5, r6, pc}
            isTimerTriggered = true;
    eac8:	2201      	movs	r2, #1
    eaca:	4b10      	ldr	r3, [pc, #64]	; (eb0c <SystemTimerSync+0xc0>)
    eacc:	701a      	strb	r2, [r3, #0]
            SYSTEM_PostTask(TIMER_TASK_ID);
    eace:	2001      	movs	r0, #1
    ead0:	4b0f      	ldr	r3, [pc, #60]	; (eb10 <SystemTimerSync+0xc4>)
    ead2:	4798      	blx	r3
    ead4:	e7f7      	b.n	eac6 <SystemTimerSync+0x7a>
    ead6:	46c0      	nop			; (mov r8, r8)
    ead8:	200020a0 	.word	0x200020a0
    eadc:	2000377c 	.word	0x2000377c
    eae0:	20003778 	.word	0x20003778
    eae4:	20002098 	.word	0x20002098
    eae8:	2000209c 	.word	0x2000209c
    eaec:	200035e8 	.word	0x200035e8
    eaf0:	00014531 	.word	0x00014531
    eaf4:	0000e2b1 	.word	0x0000e2b1
    eaf8:	000145b5 	.word	0x000145b5
    eafc:	0000e289 	.word	0x0000e289
    eb00:	000145c1 	.word	0x000145c1
    eb04:	0000e789 	.word	0x0000e789
    eb08:	0000ea09 	.word	0x0000ea09
    eb0c:	2000377a 	.word	0x2000377a
    eb10:	0000eba5 	.word	0x0000eba5

0000eb14 <SwTimerWriteTimestamp>:
\param[in] index Index of the system timestamp
\param[in] *timestamp Pointer-to-timestamp to be stored in the given index
******************************************************************************/
void SwTimerWriteTimestamp(uint8_t index, SwTimestamp_t *timestamp)
{
    swTimestamp[index] = *timestamp;
    eb14:	680a      	ldr	r2, [r1, #0]
    eb16:	684b      	ldr	r3, [r1, #4]
    eb18:	00c1      	lsls	r1, r0, #3
    eb1a:	4802      	ldr	r0, [pc, #8]	; (eb24 <SwTimerWriteTimestamp+0x10>)
    eb1c:	1840      	adds	r0, r0, r1
    eb1e:	6002      	str	r2, [r0, #0]
    eb20:	6043      	str	r3, [r0, #4]
}
    eb22:	4770      	bx	lr
    eb24:	200035d8 	.word	0x200035d8

0000eb28 <Stack_Init>:
/**************************************************************************//**
\brief Initializes the system. This is the first stack function to be called
       by the application in the main() function.
******************************************************************************/
void Stack_Init(void)
{
    eb28:	b510      	push	{r4, lr}
	
	/* LORAWAN_Init() should have been called form here, 
	   but parser application has a round-about way to call it now */
 
	/* Post application task to initiate the execution from there */
	SYSTEM_PostTask(APP_TASK_ID);
    eb2a:	2010      	movs	r0, #16
    eb2c:	4b01      	ldr	r3, [pc, #4]	; (eb34 <Stack_Init+0xc>)
    eb2e:	4798      	blx	r3
}
    eb30:	bd10      	pop	{r4, pc}
    eb32:	46c0      	nop			; (mov r8, r8)
    eb34:	0000eba5 	.word	0x0000eba5

0000eb38 <SYSTEM_RunTasks>:
/************************************************************************/
/*********************************************************************//**
\brief System tasks execution entry point
*************************************************************************/
void SYSTEM_RunTasks(void)
{
    eb38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if ((1 << SYSTEM_TASK_ID_COUNT) > sysTaskFlag)
    eb3a:	4b16      	ldr	r3, [pc, #88]	; (eb94 <SYSTEM_RunTasks+0x5c>)
    eb3c:	881b      	ldrh	r3, [r3, #0]
    eb3e:	b29b      	uxth	r3, r3
    eb40:	2b1f      	cmp	r3, #31
    eb42:	d922      	bls.n	eb8a <SYSTEM_RunTasks+0x52>
    eb44:	e7fe      	b.n	eb44 <SYSTEM_RunTasks+0xc>
    { /* Only valid task bits are set */
        while (sysTaskFlag)
        { /* One or more task are pending to execute */
            for (uint16_t taskId = 0; taskId < SYSTEM_TASK_ID_COUNT; taskId++)
            {
                if ((1 << taskId) & sysTaskFlag)
    eb46:	2500      	movs	r5, #0
                    /*
                    * Reset the task bit since it is to be executed now.
                    * It is done inside atomic section to avoid any interrupt context
                    * corrupting the bits.
                    */
                    ATOMIC_SECTION_ENTER
    eb48:	4b13      	ldr	r3, [pc, #76]	; (eb98 <SYSTEM_RunTasks+0x60>)
    eb4a:	4798      	blx	r3
                    sysTaskFlag &= ~(1 << taskId);
    eb4c:	4911      	ldr	r1, [pc, #68]	; (eb94 <SYSTEM_RunTasks+0x5c>)
    eb4e:	880b      	ldrh	r3, [r1, #0]
    eb50:	2201      	movs	r2, #1
    eb52:	40aa      	lsls	r2, r5
    eb54:	4393      	bics	r3, r2
    eb56:	800b      	strh	r3, [r1, #0]
                    ATOMIC_SECTION_EXIT
    eb58:	4b10      	ldr	r3, [pc, #64]	; (eb9c <SYSTEM_RunTasks+0x64>)
    eb5a:	4798      	blx	r3

                    /* Return value is not used now, can be used later */
                    taskHandlers[taskId]();
    eb5c:	00ad      	lsls	r5, r5, #2
    eb5e:	4b10      	ldr	r3, [pc, #64]	; (eba0 <SYSTEM_RunTasks+0x68>)
    eb60:	58eb      	ldr	r3, [r5, r3]
    eb62:	4798      	blx	r3
                if ((1 << taskId) & sysTaskFlag)
    eb64:	2101      	movs	r1, #1
        while (sysTaskFlag)
    eb66:	883b      	ldrh	r3, [r7, #0]
    eb68:	b29b      	uxth	r3, r3
    eb6a:	2b00      	cmp	r3, #0
    eb6c:	d011      	beq.n	eb92 <SYSTEM_RunTasks+0x5a>
                if ((1 << taskId) & sysTaskFlag)
    eb6e:	8823      	ldrh	r3, [r4, #0]
    eb70:	420b      	tst	r3, r1
    eb72:	d1e8      	bne.n	eb46 <SYSTEM_RunTasks+0xe>
    eb74:	2201      	movs	r2, #1
    eb76:	8833      	ldrh	r3, [r6, #0]
    eb78:	b29b      	uxth	r3, r3
    eb7a:	0015      	movs	r5, r2
    eb7c:	4113      	asrs	r3, r2
    eb7e:	4219      	tst	r1, r3
    eb80:	d1e2      	bne.n	eb48 <SYSTEM_RunTasks+0x10>
    eb82:	3201      	adds	r2, #1
            for (uint16_t taskId = 0; taskId < SYSTEM_TASK_ID_COUNT; taskId++)
    eb84:	2a05      	cmp	r2, #5
    eb86:	d1f6      	bne.n	eb76 <SYSTEM_RunTasks+0x3e>
    eb88:	e7ed      	b.n	eb66 <SYSTEM_RunTasks+0x2e>
        while (sysTaskFlag)
    eb8a:	4f02      	ldr	r7, [pc, #8]	; (eb94 <SYSTEM_RunTasks+0x5c>)
                if ((1 << taskId) & sysTaskFlag)
    eb8c:	003c      	movs	r4, r7
    eb8e:	003e      	movs	r6, r7
    eb90:	e7e8      	b.n	eb64 <SYSTEM_RunTasks+0x2c>
        * Can happen only due to corruption, so halt
        * TODO : replace this with assert implementation
        */
        while(1);
    }
}
    eb92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eb94:	200020a8 	.word	0x200020a8
    eb98:	0000db59 	.word	0x0000db59
    eb9c:	0000db65 	.word	0x0000db65
    eba0:	0001a36c 	.word	0x0001a36c

0000eba4 <SYSTEM_PostTask>:

\param[in] task - ID of the posted task.
*************************************************************************/

void SYSTEM_PostTask(SYSTEM_Task_t task)
{
    eba4:	b510      	push	{r4, lr}
    eba6:	0004      	movs	r4, r0
    ATOMIC_SECTION_ENTER
    eba8:	4b04      	ldr	r3, [pc, #16]	; (ebbc <SYSTEM_PostTask+0x18>)
    ebaa:	4798      	blx	r3
    sysTaskFlag |= task;
    ebac:	4b04      	ldr	r3, [pc, #16]	; (ebc0 <SYSTEM_PostTask+0x1c>)
    ebae:	8818      	ldrh	r0, [r3, #0]
    ebb0:	4320      	orrs	r0, r4
    ebb2:	8018      	strh	r0, [r3, #0]
    ATOMIC_SECTION_EXIT
    ebb4:	4b03      	ldr	r3, [pc, #12]	; (ebc4 <SYSTEM_PostTask+0x20>)
    ebb6:	4798      	blx	r3
}
    ebb8:	bd10      	pop	{r4, pc}
    ebba:	46c0      	nop			; (mov r8, r8)
    ebbc:	0000db59 	.word	0x0000db59
    ebc0:	200020a8 	.word	0x200020a8
    ebc4:	0000db65 	.word	0x0000db65

0000ebc8 <Radio_WriteMode>:
\param newModulation	- Sets the modulation.
\param blocking			- Sets if its blocking call or not.
\return					- none.
*************************************************************************/
void Radio_WriteMode(RadioMode_t newMode, RadioModulation_t newModulation, uint8_t blocking)
{
    ebc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    ebca:	46d6      	mov	lr, sl
    ebcc:	464f      	mov	r7, r9
    ebce:	b580      	push	{r7, lr}
    ebd0:	b083      	sub	sp, #12
    ebd2:	9201      	str	r2, [sp, #4]
    uint8_t opMode;
    uint8_t dioMapping;
    RadioModulation_t currentModulation;
    RadioMode_t currentMode;

    if ((MODULATION_FSK == newModulation) &&
    ebd4:	2900      	cmp	r1, #0
    ebd6:	d102      	bne.n	ebde <Radio_WriteMode+0x16>
    ebd8:	1f83      	subs	r3, r0, #6
    ebda:	2b01      	cmp	r3, #1
    ebdc:	d92a      	bls.n	ec34 <Radio_WriteMode+0x6c>
        // Unavailable modes for FSK. Just return.
        return;
    }

    // Sanity enforcement on parameters
    newMode &= 0x07;
    ebde:	2307      	movs	r3, #7
    ebe0:	4699      	mov	r9, r3
    ebe2:	001c      	movs	r4, r3
    ebe4:	4004      	ands	r4, r0
    newModulation &= 0x01;
    ebe6:	2601      	movs	r6, #1
    ebe8:	400e      	ands	r6, r1

    opMode = RADIO_RegisterRead(REG_OPMODE);
    ebea:	2001      	movs	r0, #1
    ebec:	4b2b      	ldr	r3, [pc, #172]	; (ec9c <Radio_WriteMode+0xd4>)
    ebee:	4798      	blx	r3
    ebf0:	0005      	movs	r5, r0
    ebf2:	0007      	movs	r7, r0

    if ((opMode & 0x80) != 0)
    ebf4:	b243      	sxtb	r3, r0
    ebf6:	469a      	mov	sl, r3
    else
    {
        currentModulation = MODULATION_FSK;
    }

    currentMode = opMode & 0x07;
    ebf8:	464b      	mov	r3, r9
    ebfa:	4003      	ands	r3, r0

    // If we need to change modulation, we need to do this in sleep mode.
    // Otherwise, we can go straight to changing the current mode to newMode.
    if (newModulation != currentModulation)
    ebfc:	4652      	mov	r2, sl
    ebfe:	0fd2      	lsrs	r2, r2, #31
    ec00:	4296      	cmp	r6, r2
    ec02:	d00a      	beq.n	ec1a <Radio_WriteMode+0x52>
    {
        // Go to sleep
        if (MODE_SLEEP != currentMode)
    ec04:	2b00      	cmp	r3, #0
    ec06:	d11a      	bne.n	ec3e <Radio_WriteMode+0x76>
            // Clear mode bits, effectively going to sleep
            RADIO_RegisterWrite(REG_OPMODE, opMode & (~0x07));
            currentMode = MODE_SLEEP;
        }
        // Change modulation
        if (MODULATION_FSK == newModulation)
    ec08:	2e00      	cmp	r6, #0
    ec0a:	d11e      	bne.n	ec4a <Radio_WriteMode+0x82>
        {
            // Clear MSB and sleep bits to make it stay in sleep
            opMode = opMode & (~0x87);
    ec0c:	2778      	movs	r7, #120	; 0x78
    ec0e:	402f      	ands	r7, r5
        else
        {
            // LoRa mode. Set MSB and clear sleep bits to make it stay in sleep
            opMode = 0x80 | (opMode & (~0x87));
        }
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    ec10:	0039      	movs	r1, r7
    ec12:	2001      	movs	r0, #1
    ec14:	4b22      	ldr	r3, [pc, #136]	; (eca0 <Radio_WriteMode+0xd8>)
    ec16:	4798      	blx	r3
    ec18:	2300      	movs	r3, #0

    // From here on currentModulation is no longer current, we will use
    // newModulation instead as it reflects the chip configuration.
    // opMode reflects the actual configuration of the chip.

    if (newMode != currentMode)
    ec1a:	42a3      	cmp	r3, r4
    ec1c:	d00a      	beq.n	ec34 <Radio_WriteMode+0x6c>
    {
        // If we need to block until the mode switch is ready, configure the
        // DIO5 pin to relay this information.
        if ((MODE_SLEEP != newMode) && (1 == blocking))
    ec1e:	2c00      	cmp	r4, #0
    ec20:	d030      	beq.n	ec84 <Radio_WriteMode+0xbc>
    ec22:	9b01      	ldr	r3, [sp, #4]
    ec24:	2b01      	cmp	r3, #1
    ec26:	d016      	beq.n	ec56 <Radio_WriteMode+0x8e>
            }
            RADIO_RegisterWrite(REG_DIOMAPPING2, dioMapping);
        }

        // Do the actual mode switch.
        opMode &= ~0x07;                // Clear old mode bits
    ec28:	21f8      	movs	r1, #248	; 0xf8
    ec2a:	4039      	ands	r1, r7
        opMode |= newMode;              // Set new mode bits
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    ec2c:	4321      	orrs	r1, r4
    ec2e:	2001      	movs	r0, #1
    ec30:	4b1b      	ldr	r3, [pc, #108]	; (eca0 <Radio_WriteMode+0xd8>)
    ec32:	4798      	blx	r3
                SystemBlockingWaitMs(1);
            }
        }
    }
#endif
}
    ec34:	b003      	add	sp, #12
    ec36:	bc0c      	pop	{r2, r3}
    ec38:	4691      	mov	r9, r2
    ec3a:	469a      	mov	sl, r3
    ec3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            RADIO_RegisterWrite(REG_OPMODE, opMode & (~0x07));
    ec3e:	21f8      	movs	r1, #248	; 0xf8
    ec40:	4001      	ands	r1, r0
    ec42:	2001      	movs	r0, #1
    ec44:	4b16      	ldr	r3, [pc, #88]	; (eca0 <Radio_WriteMode+0xd8>)
    ec46:	4798      	blx	r3
    ec48:	e7de      	b.n	ec08 <Radio_WriteMode+0x40>
            opMode = 0x80 | (opMode & (~0x87));
    ec4a:	2778      	movs	r7, #120	; 0x78
    ec4c:	4653      	mov	r3, sl
    ec4e:	401f      	ands	r7, r3
    ec50:	2180      	movs	r1, #128	; 0x80
    ec52:	430f      	orrs	r7, r1
    ec54:	e7dc      	b.n	ec10 <Radio_WriteMode+0x48>
            dioMapping = RADIO_RegisterRead(REG_DIOMAPPING2);
    ec56:	2041      	movs	r0, #65	; 0x41
    ec58:	4b10      	ldr	r3, [pc, #64]	; (ec9c <Radio_WriteMode+0xd4>)
    ec5a:	4798      	blx	r3
            if (MODULATION_FSK == newModulation)
    ec5c:	2e00      	cmp	r6, #0
    ec5e:	d10e      	bne.n	ec7e <Radio_WriteMode+0xb6>
                dioMapping |= 0x30;     // DIO5 = 11 means ModeReady in FSK mode
    ec60:	2130      	movs	r1, #48	; 0x30
    ec62:	4301      	orrs	r1, r0
    ec64:	b2c9      	uxtb	r1, r1
            RADIO_RegisterWrite(REG_DIOMAPPING2, dioMapping);
    ec66:	2041      	movs	r0, #65	; 0x41
    ec68:	4d0d      	ldr	r5, [pc, #52]	; (eca0 <Radio_WriteMode+0xd8>)
    ec6a:	47a8      	blx	r5
        opMode &= ~0x07;                // Clear old mode bits
    ec6c:	21f8      	movs	r1, #248	; 0xf8
    ec6e:	4039      	ands	r1, r7
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    ec70:	4321      	orrs	r1, r4
    ec72:	2001      	movs	r0, #1
    ec74:	47a8      	blx	r5
			   delay_ms(1);
    ec76:	2001      	movs	r0, #1
    ec78:	4b0a      	ldr	r3, [pc, #40]	; (eca4 <Radio_WriteMode+0xdc>)
    ec7a:	4798      	blx	r3
    ec7c:	e7da      	b.n	ec34 <Radio_WriteMode+0x6c>
                dioMapping &= ~0x30;    // DIO5 = 00 means ModeReady in LoRa mode
    ec7e:	21cf      	movs	r1, #207	; 0xcf
    ec80:	4001      	ands	r1, r0
    ec82:	e7f0      	b.n	ec66 <Radio_WriteMode+0x9e>
        opMode &= ~0x07;                // Clear old mode bits
    ec84:	21f8      	movs	r1, #248	; 0xf8
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    ec86:	4039      	ands	r1, r7
    ec88:	2001      	movs	r0, #1
    ec8a:	4b05      	ldr	r3, [pc, #20]	; (eca0 <Radio_WriteMode+0xd8>)
    ec8c:	4798      	blx	r3
        if (1 == blocking)
    ec8e:	9b01      	ldr	r3, [sp, #4]
    ec90:	2b01      	cmp	r3, #1
    ec92:	d1cf      	bne.n	ec34 <Radio_WriteMode+0x6c>
                SystemBlockingWaitMs(1);
    ec94:	2001      	movs	r0, #1
    ec96:	4b04      	ldr	r3, [pc, #16]	; (eca8 <Radio_WriteMode+0xe0>)
    ec98:	4798      	blx	r3
    ec9a:	e7cb      	b.n	ec34 <Radio_WriteMode+0x6c>
    ec9c:	0000d9c9 	.word	0x0000d9c9
    eca0:	0000d9a1 	.word	0x0000d9a1
    eca4:	00004799 	.word	0x00004799
    eca8:	0000db3d 	.word	0x0000db3d

0000ecac <RADIO_FHSSChangeChannel>:

\param		- none	
\return		- none.
*************************************************************************/
void RADIO_FHSSChangeChannel(void)
{
    ecac:	b500      	push	{lr}
    ecae:	b083      	sub	sp, #12
    uint32_t freq;
    RADIO_RegisterRead(REG_LORA_IRQFLAGS);
    ecb0:	2012      	movs	r0, #18
    ecb2:	4b0d      	ldr	r3, [pc, #52]	; (ece8 <RADIO_FHSSChangeChannel+0x3c>)
    ecb4:	4798      	blx	r3

    if (radioConfiguration.frequencyHopPeriod)
    ecb6:	4b0d      	ldr	r3, [pc, #52]	; (ecec <RADIO_FHSSChangeChannel+0x40>)
    ecb8:	8adb      	ldrh	r3, [r3, #22]
    ecba:	2b00      	cmp	r3, #0
    ecbc:	d007      	beq.n	ecce <RADIO_FHSSChangeChannel+0x22>
    {
        if ((radioConfiguration.radioCallback) &&
    ecbe:	4b0b      	ldr	r3, [pc, #44]	; (ecec <RADIO_FHSSChangeChannel+0x40>)
    ecc0:	691b      	ldr	r3, [r3, #16]
    ecc2:	2b00      	cmp	r3, #0
    ecc4:	d003      	beq.n	ecce <RADIO_FHSSChangeChannel+0x22>
            (1 == radioCallbackMask.BitMask.radioFhssfreqCallback))
    ecc6:	4a0a      	ldr	r2, [pc, #40]	; (ecf0 <RADIO_FHSSChangeChannel+0x44>)
    ecc8:	7812      	ldrb	r2, [r2, #0]
        if ((radioConfiguration.radioCallback) &&
    ecca:	0692      	lsls	r2, r2, #26
    eccc:	d405      	bmi.n	ecda <RADIO_FHSSChangeChannel+0x2e>
            Radio_WriteFrequency(freq);
        }
    }

    // Clear FHSSChangeChannel interrupt
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 1 << SHIFT1);
    ecce:	2102      	movs	r1, #2
    ecd0:	2012      	movs	r0, #18
    ecd2:	4b08      	ldr	r3, [pc, #32]	; (ecf4 <RADIO_FHSSChangeChannel+0x48>)
    ecd4:	4798      	blx	r3
}
    ecd6:	b003      	add	sp, #12
    ecd8:	bd00      	pop	{pc}
            radioConfiguration.radioCallback(RADIO_FHSS_NEXT_FREQ_CALLBACK, (void *)&freq);
    ecda:	a901      	add	r1, sp, #4
    ecdc:	2020      	movs	r0, #32
    ecde:	4798      	blx	r3
            Radio_WriteFrequency(freq);
    ece0:	9801      	ldr	r0, [sp, #4]
    ece2:	4b05      	ldr	r3, [pc, #20]	; (ecf8 <RADIO_FHSSChangeChannel+0x4c>)
    ece4:	4798      	blx	r3
    ece6:	e7f2      	b.n	ecce <RADIO_FHSSChangeChannel+0x22>
    ece8:	0000d9c9 	.word	0x0000d9c9
    ecec:	20003780 	.word	0x20003780
    ecf0:	20003942 	.word	0x20003942
    ecf4:	0000d9a1 	.word	0x0000d9a1
    ecf8:	0000f62d 	.word	0x0000f62d

0000ecfc <RADIO_ReadRandom>:

\param		- none	
\return		- returns the random number generated.
*************************************************************************/
uint16_t RADIO_ReadRandom(void)
{
    ecfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
    uint16_t retVal;
    retVal = 0;
	
	// Turn on the RF switch.
	Radio_EnableRfControl(RADIO_RFCTRL_RX); 
    ecfe:	2000      	movs	r0, #0
    ed00:	4b1a      	ldr	r3, [pc, #104]	; (ed6c <RADIO_ReadRandom+0x70>)
    ed02:	4798      	blx	r3
	// Enabling Radio Clock
	Radio_SetClockInput();
    ed04:	4b1a      	ldr	r3, [pc, #104]	; (ed70 <RADIO_ReadRandom+0x74>)
    ed06:	4798      	blx	r3
	
    // Mask all interrupts, do many measurements of RSSI
    Radio_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
    ed08:	2201      	movs	r2, #1
    ed0a:	2101      	movs	r1, #1
    ed0c:	2000      	movs	r0, #0
    ed0e:	4c19      	ldr	r4, [pc, #100]	; (ed74 <RADIO_ReadRandom+0x78>)
    ed10:	47a0      	blx	r4
    RADIO_RegisterWrite(REG_LORA_IRQFLAGSMASK, 0xFF);
    ed12:	21ff      	movs	r1, #255	; 0xff
    ed14:	2011      	movs	r0, #17
    ed16:	4b18      	ldr	r3, [pc, #96]	; (ed78 <RADIO_ReadRandom+0x7c>)
    ed18:	4798      	blx	r3
    Radio_WriteMode(MODE_RXCONT, MODULATION_LORA, 1);
    ed1a:	2201      	movs	r2, #1
    ed1c:	2101      	movs	r1, #1
    ed1e:	2005      	movs	r0, #5
    ed20:	47a0      	blx	r4
    ed22:	2410      	movs	r4, #16
    retVal = 0;
    ed24:	2500      	movs	r5, #0
    for (i = 0; i < 16; i++)
    {
        SystemBlockingWaitMs(1);
    ed26:	4f15      	ldr	r7, [pc, #84]	; (ed7c <RADIO_ReadRandom+0x80>)
        retVal <<= SHIFT1;
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    ed28:	4e15      	ldr	r6, [pc, #84]	; (ed80 <RADIO_ReadRandom+0x84>)
        SystemBlockingWaitMs(1);
    ed2a:	2001      	movs	r0, #1
    ed2c:	47b8      	blx	r7
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    ed2e:	202c      	movs	r0, #44	; 0x2c
    ed30:	47b0      	blx	r6
    ed32:	2301      	movs	r3, #1
    ed34:	4018      	ands	r0, r3
        retVal <<= SHIFT1;
    ed36:	006d      	lsls	r5, r5, #1
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    ed38:	4305      	orrs	r5, r0
    ed3a:	b2ad      	uxth	r5, r5
    ed3c:	3c01      	subs	r4, #1
    ed3e:	b2e4      	uxtb	r4, r4
    for (i = 0; i < 16; i++)
    ed40:	2c00      	cmp	r4, #0
    ed42:	d1f2      	bne.n	ed2a <RADIO_ReadRandom+0x2e>
    }
	
	// Turning off the RF switch now.
	Radio_DisableRfControl(RADIO_RFCTRL_RX);
    ed44:	2000      	movs	r0, #0
    ed46:	4b0f      	ldr	r3, [pc, #60]	; (ed84 <RADIO_ReadRandom+0x88>)
    ed48:	4798      	blx	r3
	
    // Return radio to sleep
    Radio_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
    ed4a:	2201      	movs	r2, #1
    ed4c:	2101      	movs	r1, #1
    ed4e:	2000      	movs	r0, #0
    ed50:	4b08      	ldr	r3, [pc, #32]	; (ed74 <RADIO_ReadRandom+0x78>)
    ed52:	4798      	blx	r3
    // Clear interrupts in case any have been generated
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 0xFF);
    ed54:	21ff      	movs	r1, #255	; 0xff
    ed56:	2012      	movs	r0, #18
    ed58:	4c07      	ldr	r4, [pc, #28]	; (ed78 <RADIO_ReadRandom+0x7c>)
    ed5a:	47a0      	blx	r4
    // Unmask all interrupts
    RADIO_RegisterWrite(REG_LORA_IRQFLAGSMASK, 0x00);
    ed5c:	2100      	movs	r1, #0
    ed5e:	2011      	movs	r0, #17
    ed60:	47a0      	blx	r4
	// Disabling Radio Clock save power
	Radio_ResetClockInput();
    ed62:	4b09      	ldr	r3, [pc, #36]	; (ed88 <RADIO_ReadRandom+0x8c>)
    ed64:	4798      	blx	r3
	
    return retVal;
}
    ed66:	0028      	movs	r0, r5
    ed68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ed6a:	46c0      	nop			; (mov r8, r8)
    ed6c:	0000fee9 	.word	0x0000fee9
    ed70:	000102a5 	.word	0x000102a5
    ed74:	0000ebc9 	.word	0x0000ebc9
    ed78:	0000d9a1 	.word	0x0000d9a1
    ed7c:	0000db3d 	.word	0x0000db3d
    ed80:	0000d9c9 	.word	0x0000d9c9
    ed84:	0000ff1d 	.word	0x0000ff1d
    ed88:	000103d5 	.word	0x000103d5

0000ed8c <Radio_ReadRssi>:

\param rssi	- The RSSI measured in the channel.
\return		- ERR_NONE. Other types are not used now.
*************************************************************************/
RadioError_t Radio_ReadRssi(int16_t *rssi)
{
    ed8c:	b510      	push	{r4, lr}
    ed8e:	0004      	movs	r4, r0
	if (MODULATION_LORA == radioConfiguration.modulation)
    ed90:	2334      	movs	r3, #52	; 0x34
    ed92:	4a11      	ldr	r2, [pc, #68]	; (edd8 <Radio_ReadRssi+0x4c>)
    ed94:	5cd3      	ldrb	r3, [r2, r3]
    ed96:	2b01      	cmp	r3, #1
    ed98:	d003      	beq.n	eda2 <Radio_ReadRssi+0x16>
		*rssi = -(RADIO_RegisterRead(REG_FSK_RSSIVALUE) >> 1);
	#endif // UT
	}
	else
	{
		return ERR_UNSUPPORTED_ATTR;
    ed9a:	2006      	movs	r0, #6
	else if (MODULATION_FSK == radioConfiguration.modulation)
    ed9c:	2b00      	cmp	r3, #0
    ed9e:	d012      	beq.n	edc6 <Radio_ReadRssi+0x3a>
	}
	return ERR_NONE;
}
    eda0:	bd10      	pop	{r4, pc}
		if (radioConfiguration.frequency >= HF_FREQ_HZ)
    eda2:	4b0e      	ldr	r3, [pc, #56]	; (eddc <Radio_ReadRssi+0x50>)
    eda4:	6812      	ldr	r2, [r2, #0]
    eda6:	429a      	cmp	r2, r3
    eda8:	d906      	bls.n	edb8 <Radio_ReadRssi+0x2c>
			*rssi = RSSI_HF_OFFSET + RADIO_RegisterRead(REG_LORA_PKTRSSIVALUE);
    edaa:	201a      	movs	r0, #26
    edac:	4b0c      	ldr	r3, [pc, #48]	; (ede0 <Radio_ReadRssi+0x54>)
    edae:	4798      	blx	r3
    edb0:	389d      	subs	r0, #157	; 0x9d
    edb2:	8020      	strh	r0, [r4, #0]
	return ERR_NONE;
    edb4:	2000      	movs	r0, #0
    edb6:	e7f3      	b.n	eda0 <Radio_ReadRssi+0x14>
			*rssi = RSSI_LF_OFFSET + RADIO_RegisterRead(REG_LORA_PKTRSSIVALUE);
    edb8:	201a      	movs	r0, #26
    edba:	4b09      	ldr	r3, [pc, #36]	; (ede0 <Radio_ReadRssi+0x54>)
    edbc:	4798      	blx	r3
    edbe:	38a4      	subs	r0, #164	; 0xa4
    edc0:	8020      	strh	r0, [r4, #0]
	return ERR_NONE;
    edc2:	2000      	movs	r0, #0
    edc4:	e7ec      	b.n	eda0 <Radio_ReadRssi+0x14>
		*rssi = -(RADIO_RegisterRead(REG_FSK_RSSIVALUE) >> 1);
    edc6:	300b      	adds	r0, #11
    edc8:	4b05      	ldr	r3, [pc, #20]	; (ede0 <Radio_ReadRssi+0x54>)
    edca:	4798      	blx	r3
    edcc:	0840      	lsrs	r0, r0, #1
    edce:	b2c3      	uxtb	r3, r0
    edd0:	425b      	negs	r3, r3
    edd2:	8023      	strh	r3, [r4, #0]
	return ERR_NONE;
    edd4:	2000      	movs	r0, #0
    edd6:	e7e3      	b.n	eda0 <Radio_ReadRssi+0x14>
    edd8:	20003780 	.word	0x20003780
    eddc:	3361137f 	.word	0x3361137f
    ede0:	0000d9c9 	.word	0x0000d9c9

0000ede4 <Radio_ReadFSKRssi>:

\param rssi	- The RSSI measured in the channel.
\return		- ERR_NONE. Other types are not used now.
*************************************************************************/
RadioError_t Radio_ReadFSKRssi(int16_t *rssi)
{	
    ede4:	b510      	push	{r4, lr}
    ede6:	0004      	movs	r4, r0
#ifdef UT
	*rssi = testRssi;
#else // UT
	*rssi = -(RADIO_RegisterRead(REG_FSK_RSSIVALUE) >> 1);
    ede8:	2011      	movs	r0, #17
    edea:	4b04      	ldr	r3, [pc, #16]	; (edfc <Radio_ReadFSKRssi+0x18>)
    edec:	4798      	blx	r3
    edee:	0840      	lsrs	r0, r0, #1
    edf0:	b2c0      	uxtb	r0, r0
    edf2:	4240      	negs	r0, r0
    edf4:	8020      	strh	r0, [r4, #0]
#endif // UT
	
	return ERR_NONE;
}
    edf6:	2000      	movs	r0, #0
    edf8:	bd10      	pop	{r4, pc}
    edfa:	46c0      	nop			; (mov r8, r8)
    edfc:	0000d9c9 	.word	0x0000d9c9

0000ee00 <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    ee00:	b510      	push	{r4, lr}
	tmr_cca_callback();
    ee02:	4b01      	ldr	r3, [pc, #4]	; (ee08 <tc_cca_callback+0x8>)
    ee04:	4798      	blx	r3
}
    ee06:	bd10      	pop	{r4, pc}
    ee08:	00014599 	.word	0x00014599

0000ee0c <tc_ovf_callback>:
{
    ee0c:	b510      	push	{r4, lr}
	tmr_ovf_callback();
    ee0e:	4b01      	ldr	r3, [pc, #4]	; (ee14 <tc_ovf_callback+0x8>)
    ee10:	4798      	blx	r3
}
    ee12:	bd10      	pop	{r4, pc}
    ee14:	00014551 	.word	0x00014551

0000ee18 <tmr_read_count>:
{
    ee18:	b510      	push	{r4, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    ee1a:	4802      	ldr	r0, [pc, #8]	; (ee24 <tmr_read_count+0xc>)
    ee1c:	4b02      	ldr	r3, [pc, #8]	; (ee28 <tmr_read_count+0x10>)
    ee1e:	4798      	blx	r3
    ee20:	b280      	uxth	r0, r0
}
    ee22:	bd10      	pop	{r4, pc}
    ee24:	20003814 	.word	0x20003814
    ee28:	0000709d 	.word	0x0000709d

0000ee2c <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    ee2c:	4b03      	ldr	r3, [pc, #12]	; (ee3c <tmr_disable_cc_interrupt+0x10>)
    ee2e:	2110      	movs	r1, #16
    ee30:	681a      	ldr	r2, [r3, #0]
    ee32:	7211      	strb	r1, [r2, #8]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    ee34:	7e5a      	ldrb	r2, [r3, #25]
    ee36:	438a      	bics	r2, r1
    ee38:	765a      	strb	r2, [r3, #25]
}
    ee3a:	4770      	bx	lr
    ee3c:	20003814 	.word	0x20003814

0000ee40 <tmr_enable_cc_interrupt>:
{
    ee40:	b510      	push	{r4, lr}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    ee42:	4c0a      	ldr	r4, [pc, #40]	; (ee6c <tmr_enable_cc_interrupt+0x2c>)
    ee44:	6820      	ldr	r0, [r4, #0]
    ee46:	4b0a      	ldr	r3, [pc, #40]	; (ee70 <tmr_enable_cc_interrupt+0x30>)
    ee48:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    ee4a:	4b0a      	ldr	r3, [pc, #40]	; (ee74 <tmr_enable_cc_interrupt+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    ee4c:	5c1b      	ldrb	r3, [r3, r0]
    ee4e:	221f      	movs	r2, #31
    ee50:	401a      	ands	r2, r3
    ee52:	2301      	movs	r3, #1
    ee54:	4093      	lsls	r3, r2
    ee56:	4a08      	ldr	r2, [pc, #32]	; (ee78 <tmr_enable_cc_interrupt+0x38>)
    ee58:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    ee5a:	7e63      	ldrb	r3, [r4, #25]
    ee5c:	2210      	movs	r2, #16
    ee5e:	4313      	orrs	r3, r2
    ee60:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    ee62:	6823      	ldr	r3, [r4, #0]
    ee64:	2210      	movs	r2, #16
    ee66:	725a      	strb	r2, [r3, #9]
}
    ee68:	bd10      	pop	{r4, pc}
    ee6a:	46c0      	nop			; (mov r8, r8)
    ee6c:	20003814 	.word	0x20003814
    ee70:	00006d71 	.word	0x00006d71
    ee74:	0001a380 	.word	0x0001a380
    ee78:	e000e100 	.word	0xe000e100

0000ee7c <tmr_disable_ovf_interrupt>:
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(2);
		module->enable_callback_mask &= ~TC_INTFLAG_MC(2);
	}
	else {
		module->hw->COUNT8.INTENCLR.reg = (1 << callback_type);
    ee7c:	4b03      	ldr	r3, [pc, #12]	; (ee8c <tmr_disable_ovf_interrupt+0x10>)
    ee7e:	2101      	movs	r1, #1
    ee80:	681a      	ldr	r2, [r3, #0]
    ee82:	7211      	strb	r1, [r2, #8]
		module->enable_callback_mask &= ~(1 << callback_type);
    ee84:	7e5a      	ldrb	r2, [r3, #25]
    ee86:	438a      	bics	r2, r1
    ee88:	765a      	strb	r2, [r3, #25]
}
    ee8a:	4770      	bx	lr
    ee8c:	20003814 	.word	0x20003814

0000ee90 <tmr_enable_ovf_interrupt>:
{
    ee90:	b510      	push	{r4, lr}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    ee92:	4c0a      	ldr	r4, [pc, #40]	; (eebc <tmr_enable_ovf_interrupt+0x2c>)
    ee94:	6820      	ldr	r0, [r4, #0]
    ee96:	4b0a      	ldr	r3, [pc, #40]	; (eec0 <tmr_enable_ovf_interrupt+0x30>)
    ee98:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    ee9a:	4b0a      	ldr	r3, [pc, #40]	; (eec4 <tmr_enable_ovf_interrupt+0x34>)
    ee9c:	5c1a      	ldrb	r2, [r3, r0]
    ee9e:	231f      	movs	r3, #31
    eea0:	4013      	ands	r3, r2
    eea2:	2201      	movs	r2, #1
    eea4:	0011      	movs	r1, r2
    eea6:	4099      	lsls	r1, r3
    eea8:	4b07      	ldr	r3, [pc, #28]	; (eec8 <tmr_enable_ovf_interrupt+0x38>)
    eeaa:	6019      	str	r1, [r3, #0]
		module->enable_callback_mask |= (1 << callback_type);
    eeac:	7e63      	ldrb	r3, [r4, #25]
    eeae:	2101      	movs	r1, #1
    eeb0:	430b      	orrs	r3, r1
    eeb2:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    eeb4:	6823      	ldr	r3, [r4, #0]
    eeb6:	725a      	strb	r2, [r3, #9]
}
    eeb8:	bd10      	pop	{r4, pc}
    eeba:	46c0      	nop			; (mov r8, r8)
    eebc:	20003814 	.word	0x20003814
    eec0:	00006d71 	.word	0x00006d71
    eec4:	0001a380 	.word	0x0001a380
    eec8:	e000e100 	.word	0xe000e100

0000eecc <tmr_write_cmpreg>:
{
    eecc:	b510      	push	{r4, lr}
    eece:	0002      	movs	r2, r0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    eed0:	2100      	movs	r1, #0
    eed2:	4802      	ldr	r0, [pc, #8]	; (eedc <tmr_write_cmpreg+0x10>)
    eed4:	4b02      	ldr	r3, [pc, #8]	; (eee0 <tmr_write_cmpreg+0x14>)
    eed6:	4798      	blx	r3
}
    eed8:	bd10      	pop	{r4, pc}
    eeda:	46c0      	nop			; (mov r8, r8)
    eedc:	20003814 	.word	0x20003814
    eee0:	000070e5 	.word	0x000070e5

0000eee4 <save_cpu_interrupt>:
{
    eee4:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    eee6:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    eeea:	425a      	negs	r2, r3
    eeec:	4153      	adcs	r3, r2
    eeee:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    eef0:	b672      	cpsid	i
    eef2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    eef6:	2200      	movs	r2, #0
    eef8:	4b02      	ldr	r3, [pc, #8]	; (ef04 <save_cpu_interrupt+0x20>)
    eefa:	701a      	strb	r2, [r3, #0]
	return flags;
    eefc:	9801      	ldr	r0, [sp, #4]
	return cpu_irq_save();
    eefe:	b2c0      	uxtb	r0, r0
}
    ef00:	b002      	add	sp, #8
    ef02:	4770      	bx	lr
    ef04:	20000014 	.word	0x20000014

0000ef08 <restore_cpu_interrupt>:
	if (cpu_irq_is_enabled_flags(flags))
    ef08:	2800      	cmp	r0, #0
    ef0a:	d005      	beq.n	ef18 <restore_cpu_interrupt+0x10>
		cpu_irq_enable();
    ef0c:	2201      	movs	r2, #1
    ef0e:	4b03      	ldr	r3, [pc, #12]	; (ef1c <restore_cpu_interrupt+0x14>)
    ef10:	701a      	strb	r2, [r3, #0]
    ef12:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    ef16:	b662      	cpsie	i
}
    ef18:	4770      	bx	lr
    ef1a:	46c0      	nop			; (mov r8, r8)
    ef1c:	20000014 	.word	0x20000014

0000ef20 <tmr_init>:

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    ef20:	b570      	push	{r4, r5, r6, lr}
	config->clock_source               = GCLK_GENERATOR_0;
    ef22:	4a33      	ldr	r2, [pc, #204]	; (eff0 <tmr_init+0xd0>)
    ef24:	2100      	movs	r1, #0
    ef26:	2300      	movs	r3, #0
    ef28:	7011      	strb	r1, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    ef2a:	70d1      	strb	r1, [r2, #3]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    ef2c:	2000      	movs	r0, #0
    ef2e:	8091      	strh	r1, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    ef30:	7190      	strb	r0, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    ef32:	71d3      	strb	r3, [r2, #7]
	config->run_in_standby             = false;
    ef34:	7053      	strb	r3, [r2, #1]
	config->on_demand                  = false;
    ef36:	7093      	strb	r3, [r2, #2]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    ef38:	7213      	strb	r3, [r2, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    ef3a:	7253      	strb	r3, [r2, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    ef3c:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    ef3e:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    ef40:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    ef42:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
    ef44:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    ef46:	7413      	strb	r3, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    ef48:	6151      	str	r1, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    ef4a:	6191      	str	r1, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    ef4c:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    ef4e:	6211      	str	r1, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    ef50:	6251      	str	r1, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    ef52:	8511      	strh	r1, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    ef54:	8591      	strh	r1, [r2, #44]	; 0x2c
	config->double_buffering_enabled = false;
    ef56:	2334      	movs	r3, #52	; 0x34
    ef58:	54d0      	strb	r0, [r2, r3]
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    ef5a:	3b35      	subs	r3, #53	; 0x35
    ef5c:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    ef5e:	4c25      	ldr	r4, [pc, #148]	; (eff4 <tmr_init+0xd4>)
    ef60:	4925      	ldr	r1, [pc, #148]	; (eff8 <tmr_init+0xd8>)
    ef62:	0020      	movs	r0, r4
    ef64:	4b25      	ldr	r3, [pc, #148]	; (effc <tmr_init+0xdc>)
    ef66:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    ef68:	2200      	movs	r2, #0
    ef6a:	4925      	ldr	r1, [pc, #148]	; (f000 <tmr_init+0xe0>)
    ef6c:	0020      	movs	r0, r4
    ef6e:	4d25      	ldr	r5, [pc, #148]	; (f004 <tmr_init+0xe4>)
    ef70:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    ef72:	2202      	movs	r2, #2
    ef74:	4924      	ldr	r1, [pc, #144]	; (f008 <tmr_init+0xe8>)
    ef76:	0020      	movs	r0, r4
    ef78:	47a8      	blx	r5
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    ef7a:	6820      	ldr	r0, [r4, #0]
    ef7c:	4b23      	ldr	r3, [pc, #140]	; (f00c <tmr_init+0xec>)
    ef7e:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    ef80:	4b23      	ldr	r3, [pc, #140]	; (f010 <tmr_init+0xf0>)
    ef82:	5c1a      	ldrb	r2, [r3, r0]
    ef84:	231f      	movs	r3, #31
    ef86:	4013      	ands	r3, r2
    ef88:	2101      	movs	r1, #1
    ef8a:	000a      	movs	r2, r1
    ef8c:	409a      	lsls	r2, r3
    ef8e:	4b21      	ldr	r3, [pc, #132]	; (f014 <tmr_init+0xf4>)
    ef90:	601a      	str	r2, [r3, #0]
		module->enable_callback_mask |= (1 << callback_type);
    ef92:	7e63      	ldrb	r3, [r4, #25]
    ef94:	2201      	movs	r2, #1
    ef96:	4313      	orrs	r3, r2
    ef98:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    ef9a:	6822      	ldr	r2, [r4, #0]
    ef9c:	7251      	strb	r1, [r2, #9]
	return (tc_module->SYNCBUSY.reg);
    ef9e:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    efa0:	2b00      	cmp	r3, #0
    efa2:	d1fc      	bne.n	ef9e <tmr_init+0x7e>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    efa4:	6813      	ldr	r3, [r2, #0]
    efa6:	2102      	movs	r1, #2
    efa8:	430b      	orrs	r3, r1
    efaa:	6013      	str	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;	
    efac:	2000      	movs	r0, #0
    efae:	4b1a      	ldr	r3, [pc, #104]	; (f018 <tmr_init+0xf8>)
    efb0:	4798      	blx	r3
    efb2:	4d1a      	ldr	r5, [pc, #104]	; (f01c <tmr_init+0xfc>)
    efb4:	47a8      	blx	r5
    efb6:	491a      	ldr	r1, [pc, #104]	; (f020 <tmr_init+0x100>)
    efb8:	4b1a      	ldr	r3, [pc, #104]	; (f024 <tmr_init+0x104>)
    efba:	4798      	blx	r3
    efbc:	1c04      	adds	r4, r0, #0
	#endif
	
	if ((timer_multiplier - (uint32_t)timer_multiplier) >= 0.5f)
    efbe:	4b1a      	ldr	r3, [pc, #104]	; (f028 <tmr_init+0x108>)
    efc0:	4798      	blx	r3
    efc2:	47a8      	blx	r5
    efc4:	1c01      	adds	r1, r0, #0
    efc6:	1c20      	adds	r0, r4, #0
    efc8:	4b18      	ldr	r3, [pc, #96]	; (f02c <tmr_init+0x10c>)
    efca:	4798      	blx	r3
    efcc:	21fc      	movs	r1, #252	; 0xfc
    efce:	0589      	lsls	r1, r1, #22
    efd0:	4b17      	ldr	r3, [pc, #92]	; (f030 <tmr_init+0x110>)
    efd2:	4798      	blx	r3
    efd4:	2800      	cmp	r0, #0
    efd6:	d005      	beq.n	efe4 <tmr_init+0xc4>
	{
		timer_multiplier += 1.0f;
    efd8:	21fe      	movs	r1, #254	; 0xfe
    efda:	0589      	lsls	r1, r1, #22
    efdc:	1c20      	adds	r0, r4, #0
    efde:	4b15      	ldr	r3, [pc, #84]	; (f034 <tmr_init+0x114>)
    efe0:	4798      	blx	r3
    efe2:	1c04      	adds	r4, r0, #0
	}
	
	return (uint8_t) timer_multiplier;
    efe4:	1c20      	adds	r0, r4, #0
    efe6:	4b10      	ldr	r3, [pc, #64]	; (f028 <tmr_init+0x108>)
    efe8:	4798      	blx	r3
    efea:	b2c0      	uxtb	r0, r0
}
    efec:	bd70      	pop	{r4, r5, r6, pc}
    efee:	46c0      	nop			; (mov r8, r8)
    eff0:	200037dc 	.word	0x200037dc
    eff4:	20003814 	.word	0x20003814
    eff8:	42002000 	.word	0x42002000
    effc:	00006dad 	.word	0x00006dad
    f000:	0000ee0d 	.word	0x0000ee0d
    f004:	00006ca9 	.word	0x00006ca9
    f008:	0000ee01 	.word	0x0000ee01
    f00c:	00006d71 	.word	0x00006d71
    f010:	0001a380 	.word	0x0001a380
    f014:	e000e100 	.word	0xe000e100
    f018:	00006a71 	.word	0x00006a71
    f01c:	00015a01 	.word	0x00015a01
    f020:	49742400 	.word	0x49742400
    f024:	00014fc9 	.word	0x00014fc9
    f028:	00014a79 	.word	0x00014a79
    f02c:	000155e9 	.word	0x000155e9
    f030:	000149d1 	.word	0x000149d1
    f034:	00014ca5 	.word	0x00014ca5

0000f038 <nvm_init>:

	return STATUS_OK;
}

status_code_t nvm_init(mem_type_t mem)
{
    f038:	b500      	push	{lr}
    f03a:	b083      	sub	sp, #12
	if (INT_FLASH == mem) {
    f03c:	2800      	cmp	r0, #0
    f03e:	d110      	bne.n	f062 <nvm_init+0x2a>
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    f040:	2300      	movs	r3, #0
    f042:	466a      	mov	r2, sp
    f044:	7013      	strb	r3, [r2, #0]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    f046:	4a08      	ldr	r2, [pc, #32]	; (f068 <nvm_init+0x30>)
    f048:	6852      	ldr	r2, [r2, #4]
	config->disable_cache     = false;
    f04a:	466a      	mov	r2, sp
    f04c:	70d3      	strb	r3, [r2, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    f04e:	7113      	strb	r3, [r2, #4]
		struct nvm_config config;
		/* Get the default configuration */
		nvm_get_config_defaults(&config);

		/* Enable automatic page write mode */
		config.manual_page_write = false;
    f050:	7053      	strb	r3, [r2, #1]

		/* Set wait state to 1 */
		config.wait_states = 2;
    f052:	3302      	adds	r3, #2
    f054:	7093      	strb	r3, [r2, #2]

		/* Set the NVM configuration */
		nvm_set_config(&config);
    f056:	4668      	mov	r0, sp
    f058:	4b04      	ldr	r3, [pc, #16]	; (f06c <nvm_init+0x34>)
    f05a:	4798      	blx	r3

		return STATUS_OK;
    f05c:	2000      	movs	r0, #0
	}

	return ERR_INVALID_ARG;
}
    f05e:	b003      	add	sp, #12
    f060:	bd00      	pop	{pc}
	return ERR_INVALID_ARG;
    f062:	2008      	movs	r0, #8
    f064:	4240      	negs	r0, r0
    f066:	e7fa      	b.n	f05e <nvm_init+0x26>
    f068:	41004000 	.word	0x41004000
    f06c:	00004fbd 	.word	0x00004fbd

0000f070 <LORAWAN_TxHandler>:
    f070:	b5f0      	push	{r4, r5, r6, r7, lr}
    f072:	b087      	sub	sp, #28
    f074:	466b      	mov	r3, sp
    f076:	2501      	movs	r5, #1
    f078:	4c2f      	ldr	r4, [pc, #188]	; (f138 <LORAWAN_TxHandler+0xc8>)
    f07a:	701d      	strb	r5, [r3, #0]
    f07c:	0023      	movs	r3, r4
    f07e:	466a      	mov	r2, sp
    f080:	33e9      	adds	r3, #233	; 0xe9
    f082:	781b      	ldrb	r3, [r3, #0]
    f084:	4669      	mov	r1, sp
    f086:	7053      	strb	r3, [r2, #1]
    f088:	0023      	movs	r3, r4
    f08a:	33e7      	adds	r3, #231	; 0xe7
    f08c:	781b      	ldrb	r3, [r3, #0]
    f08e:	202e      	movs	r0, #46	; 0x2e
    f090:	7093      	strb	r3, [r2, #2]
    f092:	aa03      	add	r2, sp, #12
    f094:	4b29      	ldr	r3, [pc, #164]	; (f13c <LORAWAN_TxHandler+0xcc>)
    f096:	4798      	blx	r3
    f098:	2808      	cmp	r0, #8
    f09a:	d004      	beq.n	f0a6 <LORAWAN_TxHandler+0x36>
    f09c:	4b28      	ldr	r3, [pc, #160]	; (f140 <LORAWAN_TxHandler+0xd0>)
    f09e:	4798      	blx	r3
    f0a0:	2000      	movs	r0, #0
    f0a2:	b007      	add	sp, #28
    f0a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f0a6:	0023      	movs	r3, r4
    f0a8:	33fd      	adds	r3, #253	; 0xfd
    f0aa:	781b      	ldrb	r3, [r3, #0]
    f0ac:	ae01      	add	r6, sp, #4
    f0ae:	2b04      	cmp	r3, #4
    f0b0:	d103      	bne.n	f0ba <LORAWAN_TxHandler+0x4a>
    f0b2:	0030      	movs	r0, r6
    f0b4:	4b23      	ldr	r3, [pc, #140]	; (f144 <LORAWAN_TxHandler+0xd4>)
    f0b6:	7035      	strb	r5, [r6, #0]
    f0b8:	4798      	blx	r3
    f0ba:	4b23      	ldr	r3, [pc, #140]	; (f148 <LORAWAN_TxHandler+0xd8>)
    f0bc:	9803      	ldr	r0, [sp, #12]
    f0be:	9904      	ldr	r1, [sp, #16]
    f0c0:	9a05      	ldr	r2, [sp, #20]
    f0c2:	4798      	blx	r3
    f0c4:	0023      	movs	r3, r4
    f0c6:	33fc      	adds	r3, #252	; 0xfc
    f0c8:	68dd      	ldr	r5, [r3, #12]
    f0ca:	4f20      	ldr	r7, [pc, #128]	; (f14c <LORAWAN_TxHandler+0xdc>)
    f0cc:	4b20      	ldr	r3, [pc, #128]	; (f150 <LORAWAN_TxHandler+0xe0>)
    f0ce:	2d00      	cmp	r5, #0
    f0d0:	d023      	beq.n	f11a <LORAWAN_TxHandler+0xaa>
    f0d2:	2201      	movs	r2, #1
    f0d4:	54e2      	strb	r2, [r4, r3]
    f0d6:	7828      	ldrb	r0, [r5, #0]
    f0d8:	7a2b      	ldrb	r3, [r5, #8]
    f0da:	1e42      	subs	r2, r0, #1
    f0dc:	4190      	sbcs	r0, r2
    f0de:	7869      	ldrb	r1, [r5, #1]
    f0e0:	686a      	ldr	r2, [r5, #4]
    f0e2:	b2c0      	uxtb	r0, r0
    f0e4:	47b8      	blx	r7
    f0e6:	0023      	movs	r3, r4
    f0e8:	33ce      	adds	r3, #206	; 0xce
    f0ea:	881b      	ldrh	r3, [r3, #0]
    f0ec:	0030      	movs	r0, r6
    f0ee:	7033      	strb	r3, [r6, #0]
    f0f0:	4b18      	ldr	r3, [pc, #96]	; (f154 <LORAWAN_TxHandler+0xe4>)
    f0f2:	6073      	str	r3, [r6, #4]
    f0f4:	4b18      	ldr	r3, [pc, #96]	; (f158 <LORAWAN_TxHandler+0xe8>)
    f0f6:	4798      	blx	r3
    f0f8:	2800      	cmp	r0, #0
    f0fa:	d114      	bne.n	f126 <LORAWAN_TxHandler+0xb6>
    f0fc:	0021      	movs	r1, r4
    f0fe:	220e      	movs	r2, #14
    f100:	3184      	adds	r1, #132	; 0x84
    f102:	780b      	ldrb	r3, [r1, #0]
    f104:	4393      	bics	r3, r2
    f106:	001a      	movs	r2, r3
    f108:	2302      	movs	r3, #2
    f10a:	4313      	orrs	r3, r2
    f10c:	700b      	strb	r3, [r1, #0]
    f10e:	2208      	movs	r2, #8
    f110:	3494      	adds	r4, #148	; 0x94
    f112:	7823      	ldrb	r3, [r4, #0]
    f114:	4393      	bics	r3, r2
    f116:	7023      	strb	r3, [r4, #0]
    f118:	e7c2      	b.n	f0a0 <LORAWAN_TxHandler+0x30>
    f11a:	54e5      	strb	r5, [r4, r3]
    f11c:	002a      	movs	r2, r5
    f11e:	002b      	movs	r3, r5
    f120:	0029      	movs	r1, r5
    f122:	0028      	movs	r0, r5
    f124:	e7de      	b.n	f0e4 <LORAWAN_TxHandler+0x74>
    f126:	0022      	movs	r2, r4
    f128:	2120      	movs	r1, #32
    f12a:	3294      	adds	r2, #148	; 0x94
    f12c:	7813      	ldrb	r3, [r2, #0]
    f12e:	438b      	bics	r3, r1
    f130:	7013      	strb	r3, [r2, #0]
    f132:	4b03      	ldr	r3, [pc, #12]	; (f140 <LORAWAN_TxHandler+0xd0>)
    f134:	4798      	blx	r3
    f136:	e7ea      	b.n	f10e <LORAWAN_TxHandler+0x9e>
    f138:	20003a6c 	.word	0x20003a6c
    f13c:	0000e045 	.word	0x0000e045
    f140:	00011eb5 	.word	0x00011eb5
    f144:	000105e5 	.word	0x000105e5
    f148:	00011a4d 	.word	0x00011a4d
    f14c:	000139d9 	.word	0x000139d9
    f150:	0000022a 	.word	0x0000022a
    f154:	20003cc4 	.word	0x20003cc4
    f158:	0000fd09 	.word	0x0000fd09

0000f15c <LORAWAN_JoinReqHandler>:
    f15c:	b530      	push	{r4, r5, lr}
    f15e:	b087      	sub	sp, #28
    f160:	466a      	mov	r2, sp
    f162:	2300      	movs	r3, #0
    f164:	4c25      	ldr	r4, [pc, #148]	; (f1fc <LORAWAN_JoinReqHandler+0xa0>)
    f166:	7013      	strb	r3, [r2, #0]
    f168:	0023      	movs	r3, r4
    f16a:	33e9      	adds	r3, #233	; 0xe9
    f16c:	781b      	ldrb	r3, [r3, #0]
    f16e:	7053      	strb	r3, [r2, #1]
    f170:	0023      	movs	r3, r4
    f172:	33e7      	adds	r3, #231	; 0xe7
    f174:	781b      	ldrb	r3, [r3, #0]
    f176:	7093      	strb	r3, [r2, #2]
    f178:	0023      	movs	r3, r4
    f17a:	33ff      	adds	r3, #255	; 0xff
    f17c:	7f5b      	ldrb	r3, [r3, #29]
    f17e:	069b      	lsls	r3, r3, #26
    f180:	d507      	bpl.n	f192 <LORAWAN_JoinReqHandler+0x36>
    f182:	6f63      	ldr	r3, [r4, #116]	; 0x74
    f184:	6fa2      	ldr	r2, [r4, #120]	; 0x78
    f186:	4313      	orrs	r3, r2
    f188:	d103      	bne.n	f192 <LORAWAN_JoinReqHandler+0x36>
    f18a:	0023      	movs	r3, r4
    f18c:	2201      	movs	r2, #1
    f18e:	3380      	adds	r3, #128	; 0x80
    f190:	701a      	strb	r2, [r3, #0]
    f192:	aa03      	add	r2, sp, #12
    f194:	4669      	mov	r1, sp
    f196:	202e      	movs	r0, #46	; 0x2e
    f198:	4b19      	ldr	r3, [pc, #100]	; (f200 <LORAWAN_JoinReqHandler+0xa4>)
    f19a:	4798      	blx	r3
    f19c:	2808      	cmp	r0, #8
    f19e:	d004      	beq.n	f1aa <LORAWAN_JoinReqHandler+0x4e>
    f1a0:	4b18      	ldr	r3, [pc, #96]	; (f204 <LORAWAN_JoinReqHandler+0xa8>)
    f1a2:	4798      	blx	r3
    f1a4:	2000      	movs	r0, #0
    f1a6:	b007      	add	sp, #28
    f1a8:	bd30      	pop	{r4, r5, pc}
    f1aa:	4b17      	ldr	r3, [pc, #92]	; (f208 <LORAWAN_JoinReqHandler+0xac>)
    f1ac:	9803      	ldr	r0, [sp, #12]
    f1ae:	9904      	ldr	r1, [sp, #16]
    f1b0:	9a05      	ldr	r2, [sp, #20]
    f1b2:	4798      	blx	r3
    f1b4:	0023      	movs	r3, r4
    f1b6:	33fd      	adds	r3, #253	; 0xfd
    f1b8:	781b      	ldrb	r3, [r3, #0]
    f1ba:	ad01      	add	r5, sp, #4
    f1bc:	2b04      	cmp	r3, #4
    f1be:	d104      	bne.n	f1ca <LORAWAN_JoinReqHandler+0x6e>
    f1c0:	3b03      	subs	r3, #3
    f1c2:	702b      	strb	r3, [r5, #0]
    f1c4:	0028      	movs	r0, r5
    f1c6:	4b11      	ldr	r3, [pc, #68]	; (f20c <LORAWAN_JoinReqHandler+0xb0>)
    f1c8:	4798      	blx	r3
    f1ca:	2200      	movs	r2, #0
    f1cc:	4b10      	ldr	r3, [pc, #64]	; (f210 <LORAWAN_JoinReqHandler+0xb4>)
    f1ce:	54e2      	strb	r2, [r4, r3]
    f1d0:	4b10      	ldr	r3, [pc, #64]	; (f214 <LORAWAN_JoinReqHandler+0xb8>)
    f1d2:	4798      	blx	r3
    f1d4:	4b10      	ldr	r3, [pc, #64]	; (f218 <LORAWAN_JoinReqHandler+0xbc>)
    f1d6:	7028      	strb	r0, [r5, #0]
    f1d8:	606b      	str	r3, [r5, #4]
    f1da:	0028      	movs	r0, r5
    f1dc:	4b0f      	ldr	r3, [pc, #60]	; (f21c <LORAWAN_JoinReqHandler+0xc0>)
    f1de:	4798      	blx	r3
    f1e0:	2800      	cmp	r0, #0
    f1e2:	d001      	beq.n	f1e8 <LORAWAN_JoinReqHandler+0x8c>
    f1e4:	201b      	movs	r0, #27
    f1e6:	e7db      	b.n	f1a0 <LORAWAN_JoinReqHandler+0x44>
    f1e8:	220e      	movs	r2, #14
    f1ea:	3484      	adds	r4, #132	; 0x84
    f1ec:	7823      	ldrb	r3, [r4, #0]
    f1ee:	4393      	bics	r3, r2
    f1f0:	001a      	movs	r2, r3
    f1f2:	2302      	movs	r3, #2
    f1f4:	4313      	orrs	r3, r2
    f1f6:	7023      	strb	r3, [r4, #0]
    f1f8:	e7d4      	b.n	f1a4 <LORAWAN_JoinReqHandler+0x48>
    f1fa:	46c0      	nop			; (mov r8, r8)
    f1fc:	20003a6c 	.word	0x20003a6c
    f200:	0000e045 	.word	0x0000e045
    f204:	00011515 	.word	0x00011515
    f208:	00011a4d 	.word	0x00011a4d
    f20c:	000105e5 	.word	0x000105e5
    f210:	0000022a 	.word	0x0000022a
    f214:	00011911 	.word	0x00011911
    f218:	20003cb4 	.word	0x20003cb4
    f21c:	0000fd09 	.word	0x0000fd09

0000f220 <LORAWAN_RxHandler>:
    f220:	b513      	push	{r0, r1, r4, lr}
    f222:	4b0c      	ldr	r3, [pc, #48]	; (f254 <LORAWAN_RxHandler+0x34>)
    f224:	781b      	ldrb	r3, [r3, #0]
    f226:	2b08      	cmp	r3, #8
    f228:	d011      	beq.n	f24e <LORAWAN_RxHandler+0x2e>
    f22a:	2b10      	cmp	r3, #16
    f22c:	d001      	beq.n	f232 <LORAWAN_RxHandler+0x12>
    f22e:	2b01      	cmp	r3, #1
    f230:	d10b      	bne.n	f24a <LORAWAN_RxHandler+0x2a>
    f232:	466b      	mov	r3, sp
    f234:	1c9c      	adds	r4, r3, #2
    f236:	0021      	movs	r1, r4
    f238:	a801      	add	r0, sp, #4
    f23a:	4b07      	ldr	r3, [pc, #28]	; (f258 <LORAWAN_RxHandler+0x38>)
    f23c:	4798      	blx	r3
    f23e:	9801      	ldr	r0, [sp, #4]
    f240:	2800      	cmp	r0, #0
    f242:	d002      	beq.n	f24a <LORAWAN_RxHandler+0x2a>
    f244:	7821      	ldrb	r1, [r4, #0]
    f246:	4b05      	ldr	r3, [pc, #20]	; (f25c <LORAWAN_RxHandler+0x3c>)
    f248:	4798      	blx	r3
    f24a:	2000      	movs	r0, #0
    f24c:	bd16      	pop	{r1, r2, r4, pc}
    f24e:	4b04      	ldr	r3, [pc, #16]	; (f260 <LORAWAN_RxHandler+0x40>)
    f250:	4798      	blx	r3
    f252:	e7fa      	b.n	f24a <LORAWAN_RxHandler+0x2a>
    f254:	2000245b 	.word	0x2000245b
    f258:	0000fed5 	.word	0x0000fed5
    f25c:	00012935 	.word	0x00012935
    f260:	00012249 	.word	0x00012249

0000f264 <LORAWAN_PostTask>:
    f264:	b510      	push	{r4, lr}
    f266:	4b08      	ldr	r3, [pc, #32]	; (f288 <LORAWAN_PostTask+0x24>)
    f268:	0004      	movs	r4, r0
    f26a:	4798      	blx	r3
    f26c:	2201      	movs	r2, #1
    f26e:	40a2      	lsls	r2, r4
    f270:	4906      	ldr	r1, [pc, #24]	; (f28c <LORAWAN_PostTask+0x28>)
    f272:	780b      	ldrb	r3, [r1, #0]
    f274:	4313      	orrs	r3, r2
    f276:	b2db      	uxtb	r3, r3
    f278:	700b      	strb	r3, [r1, #0]
    f27a:	4b05      	ldr	r3, [pc, #20]	; (f290 <LORAWAN_PostTask+0x2c>)
    f27c:	4798      	blx	r3
    f27e:	2004      	movs	r0, #4
    f280:	4b04      	ldr	r3, [pc, #16]	; (f294 <LORAWAN_PostTask+0x30>)
    f282:	4798      	blx	r3
    f284:	bd10      	pop	{r4, pc}
    f286:	46c0      	nop			; (mov r8, r8)
    f288:	0000db59 	.word	0x0000db59
    f28c:	200020aa 	.word	0x200020aa
    f290:	0000db65 	.word	0x0000db65
    f294:	0000eba5 	.word	0x0000eba5

0000f298 <LORAWAN_TaskHandler>:
    f298:	b570      	push	{r4, r5, r6, lr}
    f29a:	2601      	movs	r6, #1
    f29c:	4d0e      	ldr	r5, [pc, #56]	; (f2d8 <LORAWAN_TaskHandler+0x40>)
    f29e:	e015      	b.n	f2cc <LORAWAN_TaskHandler+0x34>
    f2a0:	2400      	movs	r4, #0
    f2a2:	782b      	ldrb	r3, [r5, #0]
    f2a4:	4123      	asrs	r3, r4
    f2a6:	4233      	tst	r3, r6
    f2a8:	d00d      	beq.n	f2c6 <LORAWAN_TaskHandler+0x2e>
    f2aa:	4b0c      	ldr	r3, [pc, #48]	; (f2dc <LORAWAN_TaskHandler+0x44>)
    f2ac:	4798      	blx	r3
    f2ae:	0032      	movs	r2, r6
    f2b0:	40a2      	lsls	r2, r4
    f2b2:	782b      	ldrb	r3, [r5, #0]
    f2b4:	00a4      	lsls	r4, r4, #2
    f2b6:	4393      	bics	r3, r2
    f2b8:	702b      	strb	r3, [r5, #0]
    f2ba:	4b09      	ldr	r3, [pc, #36]	; (f2e0 <LORAWAN_TaskHandler+0x48>)
    f2bc:	4798      	blx	r3
    f2be:	4b09      	ldr	r3, [pc, #36]	; (f2e4 <LORAWAN_TaskHandler+0x4c>)
    f2c0:	58e3      	ldr	r3, [r4, r3]
    f2c2:	4798      	blx	r3
    f2c4:	e7ea      	b.n	f29c <LORAWAN_TaskHandler+0x4>
    f2c6:	3401      	adds	r4, #1
    f2c8:	2c03      	cmp	r4, #3
    f2ca:	d1ea      	bne.n	f2a2 <LORAWAN_TaskHandler+0xa>
    f2cc:	7828      	ldrb	r0, [r5, #0]
    f2ce:	b2c0      	uxtb	r0, r0
    f2d0:	2800      	cmp	r0, #0
    f2d2:	d1e5      	bne.n	f2a0 <LORAWAN_TaskHandler+0x8>
    f2d4:	bd70      	pop	{r4, r5, r6, pc}
    f2d6:	46c0      	nop			; (mov r8, r8)
    f2d8:	200020aa 	.word	0x200020aa
    f2dc:	0000db59 	.word	0x0000db59
    f2e0:	0000db65 	.word	0x0000db65
    f2e4:	0001a388 	.word	0x0001a388

0000f2e8 <RADIO_GetAttr>:
    f2e8:	b510      	push	{r4, lr}
    f2ea:	000b      	movs	r3, r1
    f2ec:	281f      	cmp	r0, #31
    f2ee:	d900      	bls.n	f2f2 <RADIO_GetAttr+0xa>
    f2f0:	e069      	b.n	f3c6 <RADIO_GetAttr+0xde>
    f2f2:	f005 f96b 	bl	145cc <__gnu_thumb1_case_uqi>
    f2f6:	1410      	.short	0x1410
    f2f8:	68201c19 	.word	0x68201c19
    f2fc:	312e2a27 	.word	0x312e2a27
    f300:	3d3a3734 	.word	0x3d3a3734
    f304:	46434054 	.word	0x46434054
    f308:	68245149 	.word	0x68245149
    f30c:	68686859 	.word	0x68686859
    f310:	5c686817 	.word	0x5c686817
    f314:	6360      	.short	0x6360
    f316:	4a2d      	ldr	r2, [pc, #180]	; (f3cc <RADIO_GetAttr+0xe4>)
    f318:	7e12      	ldrb	r2, [r2, #24]
    f31a:	701a      	strb	r2, [r3, #0]
    f31c:	e002      	b.n	f324 <RADIO_GetAttr+0x3c>
    f31e:	4a2b      	ldr	r2, [pc, #172]	; (f3cc <RADIO_GetAttr+0xe4>)
    f320:	6812      	ldr	r2, [r2, #0]
    f322:	601a      	str	r2, [r3, #0]
    f324:	2000      	movs	r0, #0
    f326:	bd10      	pop	{r4, pc}
    f328:	4a28      	ldr	r2, [pc, #160]	; (f3cc <RADIO_GetAttr+0xe4>)
    f32a:	6852      	ldr	r2, [r2, #4]
    f32c:	e7f9      	b.n	f322 <RADIO_GetAttr+0x3a>
    f32e:	4a27      	ldr	r2, [pc, #156]	; (f3cc <RADIO_GetAttr+0xe4>)
    f330:	8a92      	ldrh	r2, [r2, #20]
    f332:	801a      	strh	r2, [r3, #0]
    f334:	e7f6      	b.n	f324 <RADIO_GetAttr+0x3c>
    f336:	4a25      	ldr	r2, [pc, #148]	; (f3cc <RADIO_GetAttr+0xe4>)
    f338:	3203      	adds	r2, #3
    f33a:	7fd2      	ldrb	r2, [r2, #31]
    f33c:	e7ed      	b.n	f31a <RADIO_GetAttr+0x32>
    f33e:	4a23      	ldr	r2, [pc, #140]	; (f3cc <RADIO_GetAttr+0xe4>)
    f340:	3204      	adds	r2, #4
    f342:	e7fa      	b.n	f33a <RADIO_GetAttr+0x52>
    f344:	4a21      	ldr	r2, [pc, #132]	; (f3cc <RADIO_GetAttr+0xe4>)
    f346:	3206      	adds	r2, #6
    f348:	e7f7      	b.n	f33a <RADIO_GetAttr+0x52>
    f34a:	4a20      	ldr	r2, [pc, #128]	; (f3cc <RADIO_GetAttr+0xe4>)
    f34c:	3236      	adds	r2, #54	; 0x36
    f34e:	7812      	ldrb	r2, [r2, #0]
    f350:	e7e3      	b.n	f31a <RADIO_GetAttr+0x32>
    f352:	4a1e      	ldr	r2, [pc, #120]	; (f3cc <RADIO_GetAttr+0xe4>)
    f354:	3205      	adds	r2, #5
    f356:	e7f0      	b.n	f33a <RADIO_GetAttr+0x52>
    f358:	4a1c      	ldr	r2, [pc, #112]	; (f3cc <RADIO_GetAttr+0xe4>)
    f35a:	3234      	adds	r2, #52	; 0x34
    f35c:	e7f7      	b.n	f34e <RADIO_GetAttr+0x66>
    f35e:	4a1b      	ldr	r2, [pc, #108]	; (f3cc <RADIO_GetAttr+0xe4>)
    f360:	8ad2      	ldrh	r2, [r2, #22]
    f362:	e7e6      	b.n	f332 <RADIO_GetAttr+0x4a>
    f364:	4a19      	ldr	r2, [pc, #100]	; (f3cc <RADIO_GetAttr+0xe4>)
    f366:	3233      	adds	r2, #51	; 0x33
    f368:	e7f1      	b.n	f34e <RADIO_GetAttr+0x66>
    f36a:	4a18      	ldr	r2, [pc, #96]	; (f3cc <RADIO_GetAttr+0xe4>)
    f36c:	68d2      	ldr	r2, [r2, #12]
    f36e:	e7d8      	b.n	f322 <RADIO_GetAttr+0x3a>
    f370:	4a16      	ldr	r2, [pc, #88]	; (f3cc <RADIO_GetAttr+0xe4>)
    f372:	6892      	ldr	r2, [r2, #8]
    f374:	e7d5      	b.n	f322 <RADIO_GetAttr+0x3a>
    f376:	4a15      	ldr	r2, [pc, #84]	; (f3cc <RADIO_GetAttr+0xe4>)
    f378:	3237      	adds	r2, #55	; 0x37
    f37a:	e7e8      	b.n	f34e <RADIO_GetAttr+0x66>
    f37c:	4a13      	ldr	r2, [pc, #76]	; (f3cc <RADIO_GetAttr+0xe4>)
    f37e:	3238      	adds	r2, #56	; 0x38
    f380:	e7e5      	b.n	f34e <RADIO_GetAttr+0x66>
    f382:	4a12      	ldr	r2, [pc, #72]	; (f3cc <RADIO_GetAttr+0xe4>)
    f384:	3239      	adds	r2, #57	; 0x39
    f386:	e7e2      	b.n	f34e <RADIO_GetAttr+0x66>
    f388:	4a10      	ldr	r2, [pc, #64]	; (f3cc <RADIO_GetAttr+0xe4>)
    f38a:	4911      	ldr	r1, [pc, #68]	; (f3d0 <RADIO_GetAttr+0xe8>)
    f38c:	3202      	adds	r2, #2
    f38e:	7fd2      	ldrb	r2, [r2, #31]
    f390:	0018      	movs	r0, r3
    f392:	4b10      	ldr	r3, [pc, #64]	; (f3d4 <RADIO_GetAttr+0xec>)
    f394:	4798      	blx	r3
    f396:	e7c5      	b.n	f324 <RADIO_GetAttr+0x3c>
    f398:	4a0c      	ldr	r2, [pc, #48]	; (f3cc <RADIO_GetAttr+0xe4>)
    f39a:	3202      	adds	r2, #2
    f39c:	e7cd      	b.n	f33a <RADIO_GetAttr+0x52>
    f39e:	4a0b      	ldr	r2, [pc, #44]	; (f3cc <RADIO_GetAttr+0xe4>)
    f3a0:	3232      	adds	r2, #50	; 0x32
    f3a2:	7812      	ldrb	r2, [r2, #0]
    f3a4:	b252      	sxtb	r2, r2
    f3a6:	e7b8      	b.n	f31a <RADIO_GetAttr+0x32>
    f3a8:	4a08      	ldr	r2, [pc, #32]	; (f3cc <RADIO_GetAttr+0xe4>)
    f3aa:	3235      	adds	r2, #53	; 0x35
    f3ac:	e7cf      	b.n	f34e <RADIO_GetAttr+0x66>
    f3ae:	4907      	ldr	r1, [pc, #28]	; (f3cc <RADIO_GetAttr+0xe4>)
    f3b0:	2206      	movs	r2, #6
    f3b2:	313c      	adds	r1, #60	; 0x3c
    f3b4:	e7ec      	b.n	f390 <RADIO_GetAttr+0xa8>
    f3b6:	4a05      	ldr	r2, [pc, #20]	; (f3cc <RADIO_GetAttr+0xe4>)
    f3b8:	3254      	adds	r2, #84	; 0x54
    f3ba:	e7c8      	b.n	f34e <RADIO_GetAttr+0x66>
    f3bc:	4a03      	ldr	r2, [pc, #12]	; (f3cc <RADIO_GetAttr+0xe4>)
    f3be:	3256      	adds	r2, #86	; 0x56
    f3c0:	2100      	movs	r1, #0
    f3c2:	5e52      	ldrsh	r2, [r2, r1]
    f3c4:	e7b5      	b.n	f332 <RADIO_GetAttr+0x4a>
    f3c6:	2005      	movs	r0, #5
    f3c8:	e7ad      	b.n	f326 <RADIO_GetAttr+0x3e>
    f3ca:	46c0      	nop			; (mov r8, r8)
    f3cc:	20003780 	.word	0x20003780
    f3d0:	20003799 	.word	0x20003799
    f3d4:	0001786b 	.word	0x0001786b

0000f3d8 <RADIO_SetAttr>:
    f3d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f3da:	4b71      	ldr	r3, [pc, #452]	; (f5a0 <RADIO_SetAttr+0x1c8>)
    f3dc:	0004      	movs	r4, r0
    f3de:	000d      	movs	r5, r1
    f3e0:	4798      	blx	r3
    f3e2:	2304      	movs	r3, #4
    f3e4:	2801      	cmp	r0, #1
    f3e6:	d11a      	bne.n	f41e <RADIO_SetAttr+0x46>
    f3e8:	2c1d      	cmp	r4, #29
    f3ea:	d900      	bls.n	f3ee <RADIO_SetAttr+0x16>
    f3ec:	e0d5      	b.n	f59a <RADIO_SetAttr+0x1c2>
    f3ee:	0020      	movs	r0, r4
    f3f0:	f005 f8ec 	bl	145cc <__gnu_thumb1_case_uqi>
    f3f4:	605c4844 	.word	0x605c4844
    f3f8:	7770d364 	.word	0x7770d364
    f3fc:	908c8480 	.word	0x908c8480
    f400:	a0d39c99 	.word	0xa0d39c99
    f404:	c2bab1a8 	.word	0xc2bab1a8
    f408:	d3cad369 	.word	0xd3cad369
    f40c:	d30fd3d3 	.word	0xd30fd3d3
    f410:	17d3      	.short	0x17d3
    f412:	2303      	movs	r3, #3
    f414:	2d00      	cmp	r5, #0
    f416:	d002      	beq.n	f41e <RADIO_SetAttr+0x46>
    f418:	4b62      	ldr	r3, [pc, #392]	; (f5a4 <RADIO_SetAttr+0x1cc>)
    f41a:	611d      	str	r5, [r3, #16]
    f41c:	2300      	movs	r3, #0
    f41e:	0018      	movs	r0, r3
    f420:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f422:	796c      	ldrb	r4, [r5, #5]
    f424:	2c00      	cmp	r4, #0
    f426:	d109      	bne.n	f43c <RADIO_SetAttr+0x64>
    f428:	4b5e      	ldr	r3, [pc, #376]	; (f5a4 <RADIO_SetAttr+0x1cc>)
    f42a:	001a      	movs	r2, r3
    f42c:	649c      	str	r4, [r3, #72]	; 0x48
    f42e:	879c      	strh	r4, [r3, #60]	; 0x3c
    f430:	87dc      	strh	r4, [r3, #62]	; 0x3e
    f432:	3240      	adds	r2, #64	; 0x40
    f434:	3341      	adds	r3, #65	; 0x41
    f436:	7014      	strb	r4, [r2, #0]
    f438:	701c      	strb	r4, [r3, #0]
    f43a:	e7ef      	b.n	f41c <RADIO_SetAttr+0x44>
    f43c:	882f      	ldrh	r7, [r5, #0]
    f43e:	2303      	movs	r3, #3
    f440:	2f00      	cmp	r7, #0
    f442:	d0ec      	beq.n	f41e <RADIO_SetAttr+0x46>
    f444:	792e      	ldrb	r6, [r5, #4]
    f446:	2e00      	cmp	r6, #0
    f448:	d0e9      	beq.n	f41e <RADIO_SetAttr+0x46>
    f44a:	20fa      	movs	r0, #250	; 0xfa
    f44c:	2202      	movs	r2, #2
    f44e:	5eab      	ldrsh	r3, [r5, r2]
    f450:	0080      	lsls	r0, r0, #2
    f452:	0031      	movs	r1, r6
    f454:	9301      	str	r3, [sp, #4]
    f456:	4378      	muls	r0, r7
    f458:	4b53      	ldr	r3, [pc, #332]	; (f5a8 <RADIO_SetAttr+0x1d0>)
    f45a:	4798      	blx	r3
    f45c:	4b53      	ldr	r3, [pc, #332]	; (f5ac <RADIO_SetAttr+0x1d4>)
    f45e:	4798      	blx	r3
    f460:	4b53      	ldr	r3, [pc, #332]	; (f5b0 <RADIO_SetAttr+0x1d8>)
    f462:	4798      	blx	r3
    f464:	466b      	mov	r3, sp
    f466:	4d4f      	ldr	r5, [pc, #316]	; (f5a4 <RADIO_SetAttr+0x1cc>)
    f468:	889b      	ldrh	r3, [r3, #4]
    f46a:	64a8      	str	r0, [r5, #72]	; 0x48
    f46c:	87eb      	strh	r3, [r5, #62]	; 0x3e
    f46e:	002b      	movs	r3, r5
    f470:	87af      	strh	r7, [r5, #60]	; 0x3c
    f472:	3340      	adds	r3, #64	; 0x40
    f474:	3541      	adds	r5, #65	; 0x41
    f476:	701e      	strb	r6, [r3, #0]
    f478:	702c      	strb	r4, [r5, #0]
    f47a:	e7cf      	b.n	f41c <RADIO_SetAttr+0x44>
    f47c:	782a      	ldrb	r2, [r5, #0]
    f47e:	4b49      	ldr	r3, [pc, #292]	; (f5a4 <RADIO_SetAttr+0x1cc>)
    f480:	761a      	strb	r2, [r3, #24]
    f482:	e7cb      	b.n	f41c <RADIO_SetAttr+0x44>
    f484:	4b4b      	ldr	r3, [pc, #300]	; (f5b4 <RADIO_SetAttr+0x1dc>)
    f486:	682a      	ldr	r2, [r5, #0]
    f488:	18d1      	adds	r1, r2, r3
    f48a:	4b4b      	ldr	r3, [pc, #300]	; (f5b8 <RADIO_SetAttr+0x1e0>)
    f48c:	4299      	cmp	r1, r3
    f48e:	d90a      	bls.n	f4a6 <RADIO_SetAttr+0xce>
    f490:	4b4a      	ldr	r3, [pc, #296]	; (f5bc <RADIO_SetAttr+0x1e4>)
    f492:	494b      	ldr	r1, [pc, #300]	; (f5c0 <RADIO_SetAttr+0x1e8>)
    f494:	18d3      	adds	r3, r2, r3
    f496:	428b      	cmp	r3, r1
    f498:	d905      	bls.n	f4a6 <RADIO_SetAttr+0xce>
    f49a:	494a      	ldr	r1, [pc, #296]	; (f5c4 <RADIO_SetAttr+0x1ec>)
    f49c:	484a      	ldr	r0, [pc, #296]	; (f5c8 <RADIO_SetAttr+0x1f0>)
    f49e:	1851      	adds	r1, r2, r1
    f4a0:	2305      	movs	r3, #5
    f4a2:	4281      	cmp	r1, r0
    f4a4:	d8bb      	bhi.n	f41e <RADIO_SetAttr+0x46>
    f4a6:	4b3f      	ldr	r3, [pc, #252]	; (f5a4 <RADIO_SetAttr+0x1cc>)
    f4a8:	601a      	str	r2, [r3, #0]
    f4aa:	e7b7      	b.n	f41c <RADIO_SetAttr+0x44>
    f4ac:	682a      	ldr	r2, [r5, #0]
    f4ae:	4b3d      	ldr	r3, [pc, #244]	; (f5a4 <RADIO_SetAttr+0x1cc>)
    f4b0:	605a      	str	r2, [r3, #4]
    f4b2:	e7b3      	b.n	f41c <RADIO_SetAttr+0x44>
    f4b4:	882a      	ldrh	r2, [r5, #0]
    f4b6:	4b3b      	ldr	r3, [pc, #236]	; (f5a4 <RADIO_SetAttr+0x1cc>)
    f4b8:	829a      	strh	r2, [r3, #20]
    f4ba:	e7af      	b.n	f41c <RADIO_SetAttr+0x44>
    f4bc:	4b39      	ldr	r3, [pc, #228]	; (f5a4 <RADIO_SetAttr+0x1cc>)
    f4be:	782a      	ldrb	r2, [r5, #0]
    f4c0:	3303      	adds	r3, #3
    f4c2:	77da      	strb	r2, [r3, #31]
    f4c4:	e7aa      	b.n	f41c <RADIO_SetAttr+0x44>
    f4c6:	782a      	ldrb	r2, [r5, #0]
    f4c8:	2305      	movs	r3, #5
    f4ca:	2a01      	cmp	r2, #1
    f4cc:	d8a7      	bhi.n	f41e <RADIO_SetAttr+0x46>
    f4ce:	4b35      	ldr	r3, [pc, #212]	; (f5a4 <RADIO_SetAttr+0x1cc>)
    f4d0:	3304      	adds	r3, #4
    f4d2:	e7f6      	b.n	f4c2 <RADIO_SetAttr+0xea>
    f4d4:	782a      	ldrb	r2, [r5, #0]
    f4d6:	2305      	movs	r3, #5
    f4d8:	2a01      	cmp	r2, #1
    f4da:	d8a0      	bhi.n	f41e <RADIO_SetAttr+0x46>
    f4dc:	4b31      	ldr	r3, [pc, #196]	; (f5a4 <RADIO_SetAttr+0x1cc>)
    f4de:	3306      	adds	r3, #6
    f4e0:	e7ef      	b.n	f4c2 <RADIO_SetAttr+0xea>
    f4e2:	782a      	ldrb	r2, [r5, #0]
    f4e4:	2305      	movs	r3, #5
    f4e6:	1fd1      	subs	r1, r2, #7
    f4e8:	2902      	cmp	r1, #2
    f4ea:	d898      	bhi.n	f41e <RADIO_SetAttr+0x46>
    f4ec:	4b2d      	ldr	r3, [pc, #180]	; (f5a4 <RADIO_SetAttr+0x1cc>)
    f4ee:	3336      	adds	r3, #54	; 0x36
    f4f0:	701a      	strb	r2, [r3, #0]
    f4f2:	e793      	b.n	f41c <RADIO_SetAttr+0x44>
    f4f4:	4b2b      	ldr	r3, [pc, #172]	; (f5a4 <RADIO_SetAttr+0x1cc>)
    f4f6:	782a      	ldrb	r2, [r5, #0]
    f4f8:	3305      	adds	r3, #5
    f4fa:	e7e2      	b.n	f4c2 <RADIO_SetAttr+0xea>
    f4fc:	782a      	ldrb	r2, [r5, #0]
    f4fe:	2305      	movs	r3, #5
    f500:	2a01      	cmp	r2, #1
    f502:	d900      	bls.n	f506 <RADIO_SetAttr+0x12e>
    f504:	e78b      	b.n	f41e <RADIO_SetAttr+0x46>
    f506:	4b27      	ldr	r3, [pc, #156]	; (f5a4 <RADIO_SetAttr+0x1cc>)
    f508:	3334      	adds	r3, #52	; 0x34
    f50a:	e7f1      	b.n	f4f0 <RADIO_SetAttr+0x118>
    f50c:	882a      	ldrh	r2, [r5, #0]
    f50e:	4b25      	ldr	r3, [pc, #148]	; (f5a4 <RADIO_SetAttr+0x1cc>)
    f510:	82da      	strh	r2, [r3, #22]
    f512:	e783      	b.n	f41c <RADIO_SetAttr+0x44>
    f514:	782a      	ldrb	r2, [r5, #0]
    f516:	2305      	movs	r3, #5
    f518:	1e51      	subs	r1, r2, #1
    f51a:	2903      	cmp	r1, #3
    f51c:	d900      	bls.n	f520 <RADIO_SetAttr+0x148>
    f51e:	e77e      	b.n	f41e <RADIO_SetAttr+0x46>
    f520:	4b20      	ldr	r3, [pc, #128]	; (f5a4 <RADIO_SetAttr+0x1cc>)
    f522:	3333      	adds	r3, #51	; 0x33
    f524:	e7e4      	b.n	f4f0 <RADIO_SetAttr+0x118>
    f526:	4b1f      	ldr	r3, [pc, #124]	; (f5a4 <RADIO_SetAttr+0x1cc>)
    f528:	682a      	ldr	r2, [r5, #0]
    f52a:	60da      	str	r2, [r3, #12]
    f52c:	682a      	ldr	r2, [r5, #0]
    f52e:	4b1d      	ldr	r3, [pc, #116]	; (f5a4 <RADIO_SetAttr+0x1cc>)
    f530:	609a      	str	r2, [r3, #8]
    f532:	e773      	b.n	f41c <RADIO_SetAttr+0x44>
    f534:	782a      	ldrb	r2, [r5, #0]
    f536:	2305      	movs	r3, #5
    f538:	2a03      	cmp	r2, #3
    f53a:	d900      	bls.n	f53e <RADIO_SetAttr+0x166>
    f53c:	e76f      	b.n	f41e <RADIO_SetAttr+0x46>
    f53e:	4b19      	ldr	r3, [pc, #100]	; (f5a4 <RADIO_SetAttr+0x1cc>)
    f540:	3337      	adds	r3, #55	; 0x37
    f542:	e7d5      	b.n	f4f0 <RADIO_SetAttr+0x118>
    f544:	782a      	ldrb	r2, [r5, #0]
    f546:	2305      	movs	r3, #5
    f548:	1e51      	subs	r1, r2, #1
    f54a:	2916      	cmp	r1, #22
    f54c:	d900      	bls.n	f550 <RADIO_SetAttr+0x178>
    f54e:	e766      	b.n	f41e <RADIO_SetAttr+0x46>
    f550:	4b14      	ldr	r3, [pc, #80]	; (f5a4 <RADIO_SetAttr+0x1cc>)
    f552:	3338      	adds	r3, #56	; 0x38
    f554:	e7cc      	b.n	f4f0 <RADIO_SetAttr+0x118>
    f556:	782a      	ldrb	r2, [r5, #0]
    f558:	2305      	movs	r3, #5
    f55a:	1e51      	subs	r1, r2, #1
    f55c:	2916      	cmp	r1, #22
    f55e:	d900      	bls.n	f562 <RADIO_SetAttr+0x18a>
    f560:	e75d      	b.n	f41e <RADIO_SetAttr+0x46>
    f562:	4b10      	ldr	r3, [pc, #64]	; (f5a4 <RADIO_SetAttr+0x1cc>)
    f564:	3339      	adds	r3, #57	; 0x39
    f566:	e7c3      	b.n	f4f0 <RADIO_SetAttr+0x118>
    f568:	4b0e      	ldr	r3, [pc, #56]	; (f5a4 <RADIO_SetAttr+0x1cc>)
    f56a:	0029      	movs	r1, r5
    f56c:	3302      	adds	r3, #2
    f56e:	7fda      	ldrb	r2, [r3, #31]
    f570:	4816      	ldr	r0, [pc, #88]	; (f5cc <RADIO_SetAttr+0x1f4>)
    f572:	4b17      	ldr	r3, [pc, #92]	; (f5d0 <RADIO_SetAttr+0x1f8>)
    f574:	4798      	blx	r3
    f576:	e751      	b.n	f41c <RADIO_SetAttr+0x44>
    f578:	782b      	ldrb	r3, [r5, #0]
    f57a:	1c1a      	adds	r2, r3, #0
    f57c:	2b08      	cmp	r3, #8
    f57e:	d900      	bls.n	f582 <RADIO_SetAttr+0x1aa>
    f580:	2208      	movs	r2, #8
    f582:	4b08      	ldr	r3, [pc, #32]	; (f5a4 <RADIO_SetAttr+0x1cc>)
    f584:	3302      	adds	r3, #2
    f586:	e79c      	b.n	f4c2 <RADIO_SetAttr+0xea>
    f588:	2305      	movs	r3, #5
    f58a:	782a      	ldrb	r2, [r5, #0]
    f58c:	1fd1      	subs	r1, r2, #7
    f58e:	4299      	cmp	r1, r3
    f590:	d900      	bls.n	f594 <RADIO_SetAttr+0x1bc>
    f592:	e744      	b.n	f41e <RADIO_SetAttr+0x46>
    f594:	4b03      	ldr	r3, [pc, #12]	; (f5a4 <RADIO_SetAttr+0x1cc>)
    f596:	3335      	adds	r3, #53	; 0x35
    f598:	e7aa      	b.n	f4f0 <RADIO_SetAttr+0x118>
    f59a:	2305      	movs	r3, #5
    f59c:	e73f      	b.n	f41e <RADIO_SetAttr+0x46>
    f59e:	46c0      	nop			; (mov r8, r8)
    f5a0:	0000fced 	.word	0x0000fced
    f5a4:	20003780 	.word	0x20003780
    f5a8:	0001471d 	.word	0x0001471d
    f5ac:	00015961 	.word	0x00015961
    f5b0:	00014a79 	.word	0x00014a79
    f5b4:	f7d58bc0 	.word	0xf7d58bc0
    f5b8:	0243d580 	.word	0x0243d580
    f5bc:	e78fe580 	.word	0xe78fe580
    f5c0:	06dac2c0 	.word	0x06dac2c0
    f5c4:	cc9eec80 	.word	0xcc9eec80
    f5c8:	096ae380 	.word	0x096ae380
    f5cc:	20003799 	.word	0x20003799
    f5d0:	0001786b 	.word	0x0001786b

0000f5d4 <RADIO_Init>:
    f5d4:	b510      	push	{r4, lr}
    f5d6:	4b0c      	ldr	r3, [pc, #48]	; (f608 <RADIO_Init+0x34>)
    f5d8:	4798      	blx	r3
    f5da:	4b0c      	ldr	r3, [pc, #48]	; (f60c <RADIO_Init+0x38>)
    f5dc:	201f      	movs	r0, #31
    f5de:	4798      	blx	r3
    f5e0:	4c0b      	ldr	r4, [pc, #44]	; (f610 <RADIO_Init+0x3c>)
    f5e2:	490c      	ldr	r1, [pc, #48]	; (f614 <RADIO_Init+0x40>)
    f5e4:	2001      	movs	r0, #1
    f5e6:	47a0      	blx	r4
    f5e8:	490b      	ldr	r1, [pc, #44]	; (f618 <RADIO_Init+0x44>)
    f5ea:	2002      	movs	r0, #2
    f5ec:	47a0      	blx	r4
    f5ee:	490b      	ldr	r1, [pc, #44]	; (f61c <RADIO_Init+0x48>)
    f5f0:	2004      	movs	r0, #4
    f5f2:	47a0      	blx	r4
    f5f4:	490a      	ldr	r1, [pc, #40]	; (f620 <RADIO_Init+0x4c>)
    f5f6:	2008      	movs	r0, #8
    f5f8:	47a0      	blx	r4
    f5fa:	490a      	ldr	r1, [pc, #40]	; (f624 <RADIO_Init+0x50>)
    f5fc:	2010      	movs	r0, #16
    f5fe:	47a0      	blx	r4
    f600:	4909      	ldr	r1, [pc, #36]	; (f628 <RADIO_Init+0x54>)
    f602:	2020      	movs	r0, #32
    f604:	47a0      	blx	r4
    f606:	bd10      	pop	{r4, pc}
    f608:	000103f1 	.word	0x000103f1
    f60c:	0000fcf9 	.word	0x0000fcf9
    f610:	0000da75 	.word	0x0000da75
    f614:	0000fa85 	.word	0x0000fa85
    f618:	0000fafd 	.word	0x0000fafd
    f61c:	0000fb6d 	.word	0x0000fb6d
    f620:	0000fbbd 	.word	0x0000fbbd
    f624:	0000fbe5 	.word	0x0000fbe5
    f628:	0000fc0d 	.word	0x0000fc0d

0000f62c <Radio_WriteFrequency>:
    f62c:	b570      	push	{r4, r5, r6, lr}
    f62e:	490d      	ldr	r1, [pc, #52]	; (f664 <Radio_WriteFrequency+0x38>)
    f630:	4d0d      	ldr	r5, [pc, #52]	; (f668 <Radio_WriteFrequency+0x3c>)
    f632:	0006      	movs	r6, r0
    f634:	47a8      	blx	r5
    f636:	4b0d      	ldr	r3, [pc, #52]	; (f66c <Radio_WriteFrequency+0x40>)
    f638:	0004      	movs	r4, r0
    f63a:	490a      	ldr	r1, [pc, #40]	; (f664 <Radio_WriteFrequency+0x38>)
    f63c:	0030      	movs	r0, r6
    f63e:	4798      	blx	r3
    f640:	0208      	lsls	r0, r1, #8
    f642:	4908      	ldr	r1, [pc, #32]	; (f664 <Radio_WriteFrequency+0x38>)
    f644:	47a8      	blx	r5
    f646:	0224      	lsls	r4, r4, #8
    f648:	1904      	adds	r4, r0, r4
    f64a:	0c21      	lsrs	r1, r4, #16
    f64c:	4d08      	ldr	r5, [pc, #32]	; (f670 <Radio_WriteFrequency+0x44>)
    f64e:	b2c9      	uxtb	r1, r1
    f650:	2006      	movs	r0, #6
    f652:	47a8      	blx	r5
    f654:	0a21      	lsrs	r1, r4, #8
    f656:	b2c9      	uxtb	r1, r1
    f658:	2007      	movs	r0, #7
    f65a:	47a8      	blx	r5
    f65c:	b2e1      	uxtb	r1, r4
    f65e:	2008      	movs	r0, #8
    f660:	47a8      	blx	r5
    f662:	bd70      	pop	{r4, r5, r6, pc}
    f664:	00003d09 	.word	0x00003d09
    f668:	00014609 	.word	0x00014609
    f66c:	00014715 	.word	0x00014715
    f670:	0000d9a1 	.word	0x0000d9a1

0000f674 <Radio_WriteConfiguration>:
    f674:	b5f0      	push	{r4, r5, r6, r7, lr}
    f676:	4cb0      	ldr	r4, [pc, #704]	; (f938 <Radio_WriteConfiguration+0x2c4>)
    f678:	2200      	movs	r2, #0
    f67a:	0023      	movs	r3, r4
    f67c:	b085      	sub	sp, #20
    f67e:	9002      	str	r0, [sp, #8]
    f680:	3334      	adds	r3, #52	; 0x34
    f682:	0010      	movs	r0, r2
    f684:	7819      	ldrb	r1, [r3, #0]
    f686:	4bad      	ldr	r3, [pc, #692]	; (f93c <Radio_WriteConfiguration+0x2c8>)
    f688:	4798      	blx	r3
    f68a:	4bad      	ldr	r3, [pc, #692]	; (f940 <Radio_WriteConfiguration+0x2cc>)
    f68c:	6820      	ldr	r0, [r4, #0]
    f68e:	4798      	blx	r3
    f690:	1ce3      	adds	r3, r4, #3
    f692:	1d62      	adds	r2, r4, #5
    f694:	7fdb      	ldrb	r3, [r3, #31]
    f696:	7fd2      	ldrb	r2, [r2, #31]
    f698:	b25b      	sxtb	r3, r3
    f69a:	4eaa      	ldr	r6, [pc, #680]	; (f944 <Radio_WriteConfiguration+0x2d0>)
    f69c:	4daa      	ldr	r5, [pc, #680]	; (f948 <Radio_WriteConfiguration+0x2d4>)
    f69e:	2a00      	cmp	r2, #0
    f6a0:	d000      	beq.n	f6a4 <Radio_WriteConfiguration+0x30>
    f6a2:	e0fc      	b.n	f89e <Radio_WriteConfiguration+0x22a>
    f6a4:	1c1f      	adds	r7, r3, #0
    f6a6:	2b0f      	cmp	r3, #15
    f6a8:	dc00      	bgt.n	f6ac <Radio_WriteConfiguration+0x38>
    f6aa:	e0ec      	b.n	f886 <Radio_WriteConfiguration+0x212>
    f6ac:	270f      	movs	r7, #15
    f6ae:	b27b      	sxtb	r3, r7
    f6b0:	204d      	movs	r0, #77	; 0x4d
    f6b2:	9301      	str	r3, [sp, #4]
    f6b4:	47b0      	blx	r6
    f6b6:	21f8      	movs	r1, #248	; 0xf8
    f6b8:	4008      	ands	r0, r1
    f6ba:	39f4      	subs	r1, #244	; 0xf4
    f6bc:	4301      	orrs	r1, r0
    f6be:	204d      	movs	r0, #77	; 0x4d
    f6c0:	47a8      	blx	r5
    f6c2:	b27b      	sxtb	r3, r7
    f6c4:	2b00      	cmp	r3, #0
    f6c6:	db00      	blt.n	f6ca <Radio_WriteConfiguration+0x56>
    f6c8:	e0e4      	b.n	f894 <Radio_WriteConfiguration+0x220>
    f6ca:	3703      	adds	r7, #3
    f6cc:	b2f9      	uxtb	r1, r7
    f6ce:	2720      	movs	r7, #32
    f6d0:	4339      	orrs	r1, r7
    f6d2:	2009      	movs	r0, #9
    f6d4:	47a8      	blx	r5
    f6d6:	0023      	movs	r3, r4
    f6d8:	3334      	adds	r3, #52	; 0x34
    f6da:	781f      	ldrb	r7, [r3, #0]
    f6dc:	2f01      	cmp	r7, #1
    f6de:	d000      	beq.n	f6e2 <Radio_WriteConfiguration+0x6e>
    f6e0:	e144      	b.n	f96c <Radio_WriteConfiguration+0x2f8>
    f6e2:	7e21      	ldrb	r1, [r4, #24]
    f6e4:	2039      	movs	r0, #57	; 0x39
    f6e6:	47a8      	blx	r5
    f6e8:	4b98      	ldr	r3, [pc, #608]	; (f94c <Radio_WriteConfiguration+0x2d8>)
    f6ea:	201d      	movs	r0, #29
    f6ec:	7819      	ldrb	r1, [r3, #0]
    f6ee:	0023      	movs	r3, r4
    f6f0:	3333      	adds	r3, #51	; 0x33
    f6f2:	781b      	ldrb	r3, [r3, #0]
    f6f4:	0109      	lsls	r1, r1, #4
    f6f6:	005b      	lsls	r3, r3, #1
    f6f8:	4319      	orrs	r1, r3
    f6fa:	1de3      	adds	r3, r4, #7
    f6fc:	7fdb      	ldrb	r3, [r3, #31]
    f6fe:	401f      	ands	r7, r3
    f700:	4339      	orrs	r1, r7
    f702:	b2c9      	uxtb	r1, r1
    f704:	47a8      	blx	r5
    f706:	1d23      	adds	r3, r4, #4
    f708:	7fd9      	ldrb	r1, [r3, #31]
    f70a:	2304      	movs	r3, #4
    f70c:	0089      	lsls	r1, r1, #2
    f70e:	4019      	ands	r1, r3
    f710:	0023      	movs	r3, r4
    f712:	3335      	adds	r3, #53	; 0x35
    f714:	781b      	ldrb	r3, [r3, #0]
    f716:	201e      	movs	r0, #30
    f718:	011b      	lsls	r3, r3, #4
    f71a:	4319      	orrs	r1, r3
    f71c:	9b02      	ldr	r3, [sp, #8]
    f71e:	059b      	lsls	r3, r3, #22
    f720:	0f9b      	lsrs	r3, r3, #30
    f722:	4319      	orrs	r1, r3
    f724:	b2c9      	uxtb	r1, r1
    f726:	47a8      	blx	r5
    f728:	2300      	movs	r3, #0
    f72a:	8ae1      	ldrh	r1, [r4, #22]
    f72c:	4299      	cmp	r1, r3
    f72e:	d011      	beq.n	f754 <Radio_WriteConfiguration+0xe0>
    f730:	4a86      	ldr	r2, [pc, #536]	; (f94c <Radio_WriteConfiguration+0x2d8>)
    f732:	7812      	ldrb	r2, [r2, #0]
    f734:	2a08      	cmp	r2, #8
    f736:	d100      	bne.n	f73a <Radio_WriteConfiguration+0xc6>
    f738:	e0e4      	b.n	f904 <Radio_WriteConfiguration+0x290>
    f73a:	2a09      	cmp	r2, #9
    f73c:	d100      	bne.n	f740 <Radio_WriteConfiguration+0xcc>
    f73e:	e0e3      	b.n	f908 <Radio_WriteConfiguration+0x294>
    f740:	2a07      	cmp	r2, #7
    f742:	d000      	beq.n	f746 <Radio_WriteConfiguration+0xd2>
    f744:	e0e3      	b.n	f90e <Radio_WriteConfiguration+0x29a>
    f746:	337d      	adds	r3, #125	; 0x7d
    f748:	4359      	muls	r1, r3
    f74a:	0023      	movs	r3, r4
    f74c:	3335      	adds	r3, #53	; 0x35
    f74e:	781b      	ldrb	r3, [r3, #0]
    f750:	40d9      	lsrs	r1, r3
    f752:	000b      	movs	r3, r1
    f754:	b2d9      	uxtb	r1, r3
    f756:	2024      	movs	r0, #36	; 0x24
    f758:	4d7b      	ldr	r5, [pc, #492]	; (f948 <Radio_WriteConfiguration+0x2d4>)
    f75a:	47a8      	blx	r5
    f75c:	466b      	mov	r3, sp
    f75e:	201f      	movs	r0, #31
    f760:	7a19      	ldrb	r1, [r3, #8]
    f762:	47a8      	blx	r5
    f764:	2026      	movs	r0, #38	; 0x26
    f766:	47b0      	blx	r6
    f768:	0023      	movs	r3, r4
    f76a:	3335      	adds	r3, #53	; 0x35
    f76c:	781b      	ldrb	r3, [r3, #0]
    f76e:	2b0c      	cmp	r3, #12
    f770:	d105      	bne.n	f77e <Radio_WriteConfiguration+0x10a>
    f772:	0023      	movs	r3, r4
    f774:	3336      	adds	r3, #54	; 0x36
    f776:	781b      	ldrb	r3, [r3, #0]
    f778:	3b07      	subs	r3, #7
    f77a:	2b01      	cmp	r3, #1
    f77c:	d906      	bls.n	f78c <Radio_WriteConfiguration+0x118>
    f77e:	6b62      	ldr	r2, [r4, #52]	; 0x34
    f780:	4b73      	ldr	r3, [pc, #460]	; (f950 <Radio_WriteConfiguration+0x2dc>)
    f782:	4013      	ands	r3, r2
    f784:	4a73      	ldr	r2, [pc, #460]	; (f954 <Radio_WriteConfiguration+0x2e0>)
    f786:	4293      	cmp	r3, r2
    f788:	d000      	beq.n	f78c <Radio_WriteConfiguration+0x118>
    f78a:	e0c2      	b.n	f912 <Radio_WriteConfiguration+0x29e>
    f78c:	2108      	movs	r1, #8
    f78e:	4308      	orrs	r0, r1
    f790:	b2c0      	uxtb	r0, r0
    f792:	2104      	movs	r1, #4
    f794:	4301      	orrs	r1, r0
    f796:	2026      	movs	r0, #38	; 0x26
    f798:	47a8      	blx	r5
    f79a:	2031      	movs	r0, #49	; 0x31
    f79c:	47b0      	blx	r6
    f79e:	21f8      	movs	r1, #248	; 0xf8
    f7a0:	4008      	ands	r0, r1
    f7a2:	39f5      	subs	r1, #245	; 0xf5
    f7a4:	4301      	orrs	r1, r0
    f7a6:	2031      	movs	r0, #49	; 0x31
    f7a8:	47a8      	blx	r5
    f7aa:	210a      	movs	r1, #10
    f7ac:	2037      	movs	r0, #55	; 0x37
    f7ae:	47a8      	blx	r5
    f7b0:	0023      	movs	r3, r4
    f7b2:	3331      	adds	r3, #49	; 0x31
    f7b4:	781b      	ldrb	r3, [r3, #0]
    f7b6:	2b12      	cmp	r3, #18
    f7b8:	d11e      	bne.n	f7f8 <Radio_WriteConfiguration+0x184>
    f7ba:	0023      	movs	r3, r4
    f7bc:	3336      	adds	r3, #54	; 0x36
    f7be:	781b      	ldrb	r3, [r3, #0]
    f7c0:	3b07      	subs	r3, #7
    f7c2:	2b01      	cmp	r3, #1
    f7c4:	d80b      	bhi.n	f7de <Radio_WriteConfiguration+0x16a>
    f7c6:	2031      	movs	r0, #49	; 0x31
    f7c8:	47b0      	blx	r6
    f7ca:	217f      	movs	r1, #127	; 0x7f
    f7cc:	4001      	ands	r1, r0
    f7ce:	2031      	movs	r0, #49	; 0x31
    f7d0:	47a8      	blx	r5
    f7d2:	2140      	movs	r1, #64	; 0x40
    f7d4:	202f      	movs	r0, #47	; 0x2f
    f7d6:	47a8      	blx	r5
    f7d8:	2100      	movs	r1, #0
    f7da:	2030      	movs	r0, #48	; 0x30
    f7dc:	47a8      	blx	r5
    f7de:	0023      	movs	r3, r4
    f7e0:	3336      	adds	r3, #54	; 0x36
    f7e2:	781b      	ldrb	r3, [r3, #0]
    f7e4:	2b09      	cmp	r3, #9
    f7e6:	d107      	bne.n	f7f8 <Radio_WriteConfiguration+0x184>
    f7e8:	2031      	movs	r0, #49	; 0x31
    f7ea:	47b0      	blx	r6
    f7ec:	2180      	movs	r1, #128	; 0x80
    f7ee:	4249      	negs	r1, r1
    f7f0:	4301      	orrs	r1, r0
    f7f2:	b2c9      	uxtb	r1, r1
    f7f4:	2031      	movs	r0, #49	; 0x31
    f7f6:	47a8      	blx	r5
    f7f8:	2033      	movs	r0, #51	; 0x33
    f7fa:	47b0      	blx	r6
    f7fc:	1da3      	adds	r3, r4, #6
    f7fe:	7fd9      	ldrb	r1, [r3, #31]
    f800:	2340      	movs	r3, #64	; 0x40
    f802:	0189      	lsls	r1, r1, #6
    f804:	4398      	bics	r0, r3
    f806:	4019      	ands	r1, r3
    f808:	4301      	orrs	r1, r0
    f80a:	b2c9      	uxtb	r1, r1
    f80c:	2033      	movs	r0, #51	; 0x33
    f80e:	47a8      	blx	r5
    f810:	8aa1      	ldrh	r1, [r4, #20]
    f812:	2020      	movs	r0, #32
    f814:	0a09      	lsrs	r1, r1, #8
    f816:	47a8      	blx	r5
    f818:	7d21      	ldrb	r1, [r4, #20]
    f81a:	2021      	movs	r0, #33	; 0x21
    f81c:	47a8      	blx	r5
    f81e:	2100      	movs	r1, #0
    f820:	200d      	movs	r0, #13
    f822:	47a8      	blx	r5
    f824:	2100      	movs	r1, #0
    f826:	200e      	movs	r0, #14
    f828:	47a8      	blx	r5
    f82a:	2100      	movs	r1, #0
    f82c:	200f      	movs	r0, #15
    f82e:	47a8      	blx	r5
    f830:	0023      	movs	r3, r4
    f832:	3331      	adds	r3, #49	; 0x31
    f834:	781b      	ldrb	r3, [r3, #0]
    f836:	2b12      	cmp	r3, #18
    f838:	d120      	bne.n	f87c <Radio_WriteConfiguration+0x208>
    f83a:	0023      	movs	r3, r4
    f83c:	3336      	adds	r3, #54	; 0x36
    f83e:	781b      	ldrb	r3, [r3, #0]
    f840:	2b09      	cmp	r3, #9
    f842:	d000      	beq.n	f846 <Radio_WriteConfiguration+0x1d2>
    f844:	e072      	b.n	f92c <Radio_WriteConfiguration+0x2b8>
    f846:	4a44      	ldr	r2, [pc, #272]	; (f958 <Radio_WriteConfiguration+0x2e4>)
    f848:	6823      	ldr	r3, [r4, #0]
    f84a:	1899      	adds	r1, r3, r2
    f84c:	4a43      	ldr	r2, [pc, #268]	; (f95c <Radio_WriteConfiguration+0x2e8>)
    f84e:	4291      	cmp	r1, r2
    f850:	d862      	bhi.n	f918 <Radio_WriteConfiguration+0x2a4>
    f852:	2102      	movs	r1, #2
    f854:	2036      	movs	r0, #54	; 0x36
    f856:	47a8      	blx	r5
    f858:	2164      	movs	r1, #100	; 0x64
    f85a:	203a      	movs	r0, #58	; 0x3a
    f85c:	47a8      	blx	r5
    f85e:	0023      	movs	r3, r4
    f860:	3336      	adds	r3, #54	; 0x36
    f862:	781b      	ldrb	r3, [r3, #0]
    f864:	2165      	movs	r1, #101	; 0x65
    f866:	203a      	movs	r0, #58	; 0x3a
    f868:	2b09      	cmp	r3, #9
    f86a:	d162      	bne.n	f932 <Radio_WriteConfiguration+0x2be>
    f86c:	3406      	adds	r4, #6
    f86e:	7fe3      	ldrb	r3, [r4, #31]
    f870:	2b01      	cmp	r3, #1
    f872:	d15e      	bne.n	f932 <Radio_WriteConfiguration+0x2be>
    f874:	47a8      	blx	r5
    f876:	2119      	movs	r1, #25
    f878:	203b      	movs	r0, #59	; 0x3b
    f87a:	47a8      	blx	r5
    f87c:	21ff      	movs	r1, #255	; 0xff
    f87e:	2012      	movs	r0, #18
    f880:	47a8      	blx	r5
    f882:	b005      	add	sp, #20
    f884:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f886:	b25b      	sxtb	r3, r3
    f888:	3303      	adds	r3, #3
    f88a:	db00      	blt.n	f88e <Radio_WriteConfiguration+0x21a>
    f88c:	e70f      	b.n	f6ae <Radio_WriteConfiguration+0x3a>
    f88e:	4b34      	ldr	r3, [pc, #208]	; (f960 <Radio_WriteConfiguration+0x2ec>)
    f890:	781f      	ldrb	r7, [r3, #0]
    f892:	e70c      	b.n	f6ae <Radio_WriteConfiguration+0x3a>
    f894:	2170      	movs	r1, #112	; 0x70
    f896:	9b01      	ldr	r3, [sp, #4]
    f898:	4319      	orrs	r1, r3
    f89a:	b2c9      	uxtb	r1, r1
    f89c:	e719      	b.n	f6d2 <Radio_WriteConfiguration+0x5e>
    f89e:	2b01      	cmp	r3, #1
    f8a0:	dd07      	ble.n	f8b2 <Radio_WriteConfiguration+0x23e>
    f8a2:	2714      	movs	r7, #20
    f8a4:	2b13      	cmp	r3, #19
    f8a6:	dc06      	bgt.n	f8b6 <Radio_WriteConfiguration+0x242>
    f8a8:	1c1f      	adds	r7, r3, #0
    f8aa:	2b11      	cmp	r3, #17
    f8ac:	dd02      	ble.n	f8b4 <Radio_WriteConfiguration+0x240>
    f8ae:	2711      	movs	r7, #17
    f8b0:	e000      	b.n	f8b4 <Radio_WriteConfiguration+0x240>
    f8b2:	2702      	movs	r7, #2
    f8b4:	b27f      	sxtb	r7, r7
    f8b6:	200b      	movs	r0, #11
    f8b8:	47b0      	blx	r6
    f8ba:	9003      	str	r0, [sp, #12]
    f8bc:	204d      	movs	r0, #77	; 0x4d
    f8be:	47b0      	blx	r6
    f8c0:	2307      	movs	r3, #7
    f8c2:	4398      	bics	r0, r3
    f8c4:	b2c1      	uxtb	r1, r0
    f8c6:	2f14      	cmp	r7, #20
    f8c8:	d112      	bne.n	f8f0 <Radio_WriteConfiguration+0x27c>
    f8ca:	4319      	orrs	r1, r3
    f8cc:	9b03      	ldr	r3, [sp, #12]
    f8ce:	37cb      	adds	r7, #203	; 0xcb
    f8d0:	403b      	ands	r3, r7
    f8d2:	001f      	movs	r7, r3
    f8d4:	230f      	movs	r3, #15
    f8d6:	9301      	str	r3, [sp, #4]
    f8d8:	204d      	movs	r0, #77	; 0x4d
    f8da:	47a8      	blx	r5
    f8dc:	2180      	movs	r1, #128	; 0x80
    f8de:	9b01      	ldr	r3, [sp, #4]
    f8e0:	4249      	negs	r1, r1
    f8e2:	4319      	orrs	r1, r3
    f8e4:	b2c9      	uxtb	r1, r1
    f8e6:	2009      	movs	r0, #9
    f8e8:	47a8      	blx	r5
    f8ea:	0039      	movs	r1, r7
    f8ec:	200b      	movs	r0, #11
    f8ee:	e6f1      	b.n	f6d4 <Radio_WriteConfiguration+0x60>
    f8f0:	3f02      	subs	r7, #2
    f8f2:	b27b      	sxtb	r3, r7
    f8f4:	2720      	movs	r7, #32
    f8f6:	2004      	movs	r0, #4
    f8f8:	9301      	str	r3, [sp, #4]
    f8fa:	9b03      	ldr	r3, [sp, #12]
    f8fc:	4301      	orrs	r1, r0
    f8fe:	431f      	orrs	r7, r3
    f900:	b2ff      	uxtb	r7, r7
    f902:	e7e9      	b.n	f8d8 <Radio_WriteConfiguration+0x264>
    f904:	23fa      	movs	r3, #250	; 0xfa
    f906:	e71f      	b.n	f748 <Radio_WriteConfiguration+0xd4>
    f908:	23fa      	movs	r3, #250	; 0xfa
    f90a:	005b      	lsls	r3, r3, #1
    f90c:	e71c      	b.n	f748 <Radio_WriteConfiguration+0xd4>
    f90e:	0019      	movs	r1, r3
    f910:	e71b      	b.n	f74a <Radio_WriteConfiguration+0xd6>
    f912:	21f7      	movs	r1, #247	; 0xf7
    f914:	4008      	ands	r0, r1
    f916:	e73c      	b.n	f792 <Radio_WriteConfiguration+0x11e>
    f918:	4a12      	ldr	r2, [pc, #72]	; (f964 <Radio_WriteConfiguration+0x2f0>)
    f91a:	189b      	adds	r3, r3, r2
    f91c:	4a12      	ldr	r2, [pc, #72]	; (f968 <Radio_WriteConfiguration+0x2f4>)
    f91e:	4293      	cmp	r3, r2
    f920:	d804      	bhi.n	f92c <Radio_WriteConfiguration+0x2b8>
    f922:	2102      	movs	r1, #2
    f924:	2036      	movs	r0, #54	; 0x36
    f926:	47a8      	blx	r5
    f928:	217f      	movs	r1, #127	; 0x7f
    f92a:	e796      	b.n	f85a <Radio_WriteConfiguration+0x1e6>
    f92c:	2103      	movs	r1, #3
    f92e:	2036      	movs	r0, #54	; 0x36
    f930:	e794      	b.n	f85c <Radio_WriteConfiguration+0x1e8>
    f932:	47a8      	blx	r5
    f934:	211d      	movs	r1, #29
    f936:	e79f      	b.n	f878 <Radio_WriteConfiguration+0x204>
    f938:	20003780 	.word	0x20003780
    f93c:	0000ebc9 	.word	0x0000ebc9
    f940:	0000f62d 	.word	0x0000f62d
    f944:	0000d9c9 	.word	0x0000d9c9
    f948:	0000d9a1 	.word	0x0000d9a1
    f94c:	200037b6 	.word	0x200037b6
    f950:	00ffff00 	.word	0x00ffff00
    f954:	00070b00 	.word	0x00070b00
    f958:	cc9eec80 	.word	0xcc9eec80
    f95c:	096ae380 	.word	0x096ae380
    f960:	0001a394 	.word	0x0001a394
    f964:	e78fe580 	.word	0xe78fe580
    f968:	06dac2c0 	.word	0x06dac2c0
    f96c:	6863      	ldr	r3, [r4, #4]
    f96e:	492c      	ldr	r1, [pc, #176]	; (fa20 <Radio_WriteConfiguration+0x3ac>)
    f970:	0218      	lsls	r0, r3, #8
    f972:	4b2c      	ldr	r3, [pc, #176]	; (fa24 <Radio_WriteConfiguration+0x3b0>)
    f974:	4798      	blx	r3
    f976:	0007      	movs	r7, r0
    f978:	0a01      	lsrs	r1, r0, #8
    f97a:	b2c9      	uxtb	r1, r1
    f97c:	2004      	movs	r0, #4
    f97e:	47a8      	blx	r5
    f980:	b2f9      	uxtb	r1, r7
    f982:	2005      	movs	r0, #5
    f984:	47a8      	blx	r5
    f986:	4b27      	ldr	r3, [pc, #156]	; (fa24 <Radio_WriteConfiguration+0x3b0>)
    f988:	68a1      	ldr	r1, [r4, #8]
    f98a:	4827      	ldr	r0, [pc, #156]	; (fa28 <Radio_WriteConfiguration+0x3b4>)
    f98c:	4798      	blx	r3
    f98e:	0007      	movs	r7, r0
    f990:	0a01      	lsrs	r1, r0, #8
    f992:	b2c9      	uxtb	r1, r1
    f994:	2002      	movs	r0, #2
    f996:	47a8      	blx	r5
    f998:	b2f9      	uxtb	r1, r7
    f99a:	2003      	movs	r0, #3
    f99c:	47a8      	blx	r5
    f99e:	2100      	movs	r1, #0
    f9a0:	205d      	movs	r0, #93	; 0x5d
    f9a2:	47a8      	blx	r5
    f9a4:	8aa1      	ldrh	r1, [r4, #20]
    f9a6:	2025      	movs	r0, #37	; 0x25
    f9a8:	0a09      	lsrs	r1, r1, #8
    f9aa:	47a8      	blx	r5
    f9ac:	7d21      	ldrb	r1, [r4, #20]
    f9ae:	2026      	movs	r0, #38	; 0x26
    f9b0:	47a8      	blx	r5
    f9b2:	219e      	movs	r1, #158	; 0x9e
    f9b4:	200d      	movs	r0, #13
    f9b6:	47a8      	blx	r5
    f9b8:	21bf      	movs	r1, #191	; 0xbf
    f9ba:	2035      	movs	r0, #53	; 0x35
    f9bc:	47a8      	blx	r5
    f9be:	200a      	movs	r0, #10
    f9c0:	47b0      	blx	r6
    f9c2:	0023      	movs	r3, r4
    f9c4:	3337      	adds	r3, #55	; 0x37
    f9c6:	7819      	ldrb	r1, [r3, #0]
    f9c8:	2360      	movs	r3, #96	; 0x60
    f9ca:	0149      	lsls	r1, r1, #5
    f9cc:	4398      	bics	r0, r3
    f9ce:	4301      	orrs	r1, r0
    f9d0:	b2c9      	uxtb	r1, r1
    f9d2:	200a      	movs	r0, #10
    f9d4:	47a8      	blx	r5
    f9d6:	1d23      	adds	r3, r4, #4
    f9d8:	7fdb      	ldrb	r3, [r3, #31]
    f9da:	21c0      	movs	r1, #192	; 0xc0
    f9dc:	2b00      	cmp	r3, #0
    f9de:	d000      	beq.n	f9e2 <Radio_WriteConfiguration+0x36e>
    f9e0:	3110      	adds	r1, #16
    f9e2:	2030      	movs	r0, #48	; 0x30
    f9e4:	47a8      	blx	r5
    f9e6:	2600      	movs	r6, #0
    f9e8:	1ca3      	adds	r3, r4, #2
    f9ea:	7fd9      	ldrb	r1, [r3, #31]
    f9ec:	428e      	cmp	r6, r1
    f9ee:	d30d      	bcc.n	fa0c <Radio_WriteConfiguration+0x398>
    f9f0:	2900      	cmp	r1, #0
    f9f2:	d003      	beq.n	f9fc <Radio_WriteConfiguration+0x388>
    f9f4:	2310      	movs	r3, #16
    f9f6:	3901      	subs	r1, #1
    f9f8:	4319      	orrs	r1, r3
    f9fa:	b2c9      	uxtb	r1, r1
    f9fc:	2027      	movs	r0, #39	; 0x27
    f9fe:	47a8      	blx	r5
    fa00:	21ff      	movs	r1, #255	; 0xff
    fa02:	203e      	movs	r0, #62	; 0x3e
    fa04:	47a8      	blx	r5
    fa06:	21ff      	movs	r1, #255	; 0xff
    fa08:	203f      	movs	r0, #63	; 0x3f
    fa0a:	e739      	b.n	f880 <Radio_WriteConfiguration+0x20c>
    fa0c:	0030      	movs	r0, r6
    fa0e:	19a3      	adds	r3, r4, r6
    fa10:	3028      	adds	r0, #40	; 0x28
    fa12:	7e59      	ldrb	r1, [r3, #25]
    fa14:	b2c0      	uxtb	r0, r0
    fa16:	3601      	adds	r6, #1
    fa18:	47a8      	blx	r5
    fa1a:	b2f6      	uxtb	r6, r6
    fa1c:	e7e4      	b.n	f9e8 <Radio_WriteConfiguration+0x374>
    fa1e:	46c0      	nop			; (mov r8, r8)
    fa20:	00003d09 	.word	0x00003d09
    fa24:	00014609 	.word	0x00014609
    fa28:	01e84800 	.word	0x01e84800

0000fa2c <RADIO_getMappingAndOpmode>:
    fa2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    fa2e:	0006      	movs	r6, r0
    fa30:	4d06      	ldr	r5, [pc, #24]	; (fa4c <RADIO_getMappingAndOpmode+0x20>)
    fa32:	2040      	movs	r0, #64	; 0x40
    fa34:	001f      	movs	r7, r3
    fa36:	0014      	movs	r4, r2
    fa38:	9101      	str	r1, [sp, #4]
    fa3a:	47a8      	blx	r5
    fa3c:	4004      	ands	r4, r0
    fa3e:	413c      	asrs	r4, r7
    fa40:	2001      	movs	r0, #1
    fa42:	7034      	strb	r4, [r6, #0]
    fa44:	47a8      	blx	r5
    fa46:	9b01      	ldr	r3, [sp, #4]
    fa48:	7018      	strb	r0, [r3, #0]
    fa4a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    fa4c:	0000d9c9 	.word	0x0000d9c9

0000fa50 <RADIO_UnhandledInterrupt.part.0>:
    fa50:	b510      	push	{r4, lr}
    fa52:	21ff      	movs	r1, #255	; 0xff
    fa54:	2012      	movs	r0, #18
    fa56:	4b01      	ldr	r3, [pc, #4]	; (fa5c <RADIO_UnhandledInterrupt.part.0+0xc>)
    fa58:	4798      	blx	r3
    fa5a:	bd10      	pop	{r4, pc}
    fa5c:	0000d9a1 	.word	0x0000d9a1

0000fa60 <RADIO_UnhandledInterrupt>:
    fa60:	b510      	push	{r4, lr}
    fa62:	2801      	cmp	r0, #1
    fa64:	d102      	bne.n	fa6c <RADIO_UnhandledInterrupt+0xc>
    fa66:	4b05      	ldr	r3, [pc, #20]	; (fa7c <RADIO_UnhandledInterrupt+0x1c>)
    fa68:	4798      	blx	r3
    fa6a:	bd10      	pop	{r4, pc}
    fa6c:	21ff      	movs	r1, #255	; 0xff
    fa6e:	203e      	movs	r0, #62	; 0x3e
    fa70:	4c03      	ldr	r4, [pc, #12]	; (fa80 <RADIO_UnhandledInterrupt+0x20>)
    fa72:	47a0      	blx	r4
    fa74:	21ff      	movs	r1, #255	; 0xff
    fa76:	203f      	movs	r0, #63	; 0x3f
    fa78:	47a0      	blx	r4
    fa7a:	e7f6      	b.n	fa6a <RADIO_UnhandledInterrupt+0xa>
    fa7c:	0000fa51 	.word	0x0000fa51
    fa80:	0000d9a1 	.word	0x0000d9a1

0000fa84 <RADIO_DIO0>:
    fa84:	b573      	push	{r0, r1, r4, r5, r6, lr}
    fa86:	466b      	mov	r3, sp
    fa88:	1ddc      	adds	r4, r3, #7
    fa8a:	1d9d      	adds	r5, r3, #6
    fa8c:	22c0      	movs	r2, #192	; 0xc0
    fa8e:	2306      	movs	r3, #6
    fa90:	0028      	movs	r0, r5
    fa92:	0021      	movs	r1, r4
    fa94:	4e12      	ldr	r6, [pc, #72]	; (fae0 <RADIO_DIO0+0x5c>)
    fa96:	47b0      	blx	r6
    fa98:	7823      	ldrb	r3, [r4, #0]
    fa9a:	7828      	ldrb	r0, [r5, #0]
    fa9c:	b25a      	sxtb	r2, r3
    fa9e:	b2c0      	uxtb	r0, r0
    faa0:	2a00      	cmp	r2, #0
    faa2:	da0b      	bge.n	fabc <RADIO_DIO0+0x38>
    faa4:	2800      	cmp	r0, #0
    faa6:	d004      	beq.n	fab2 <RADIO_DIO0+0x2e>
    faa8:	2801      	cmp	r0, #1
    faaa:	d005      	beq.n	fab8 <RADIO_DIO0+0x34>
    faac:	4b0d      	ldr	r3, [pc, #52]	; (fae4 <RADIO_DIO0+0x60>)
    faae:	4798      	blx	r3
    fab0:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    fab2:	4b0d      	ldr	r3, [pc, #52]	; (fae8 <RADIO_DIO0+0x64>)
    fab4:	4798      	blx	r3
    fab6:	e7fb      	b.n	fab0 <RADIO_DIO0+0x2c>
    fab8:	4b0c      	ldr	r3, [pc, #48]	; (faec <RADIO_DIO0+0x68>)
    faba:	e7fb      	b.n	fab4 <RADIO_DIO0+0x30>
    fabc:	2800      	cmp	r0, #0
    fabe:	d10a      	bne.n	fad6 <RADIO_DIO0+0x52>
    fac0:	2207      	movs	r2, #7
    fac2:	4013      	ands	r3, r2
    fac4:	7023      	strb	r3, [r4, #0]
    fac6:	2b03      	cmp	r3, #3
    fac8:	d101      	bne.n	face <RADIO_DIO0+0x4a>
    faca:	4b09      	ldr	r3, [pc, #36]	; (faf0 <RADIO_DIO0+0x6c>)
    facc:	e7f2      	b.n	fab4 <RADIO_DIO0+0x30>
    face:	2b05      	cmp	r3, #5
    fad0:	d102      	bne.n	fad8 <RADIO_DIO0+0x54>
    fad2:	4b08      	ldr	r3, [pc, #32]	; (faf4 <RADIO_DIO0+0x70>)
    fad4:	e7ee      	b.n	fab4 <RADIO_DIO0+0x30>
    fad6:	2000      	movs	r0, #0
    fad8:	4b07      	ldr	r3, [pc, #28]	; (faf8 <RADIO_DIO0+0x74>)
    fada:	4798      	blx	r3
    fadc:	e7e8      	b.n	fab0 <RADIO_DIO0+0x2c>
    fade:	46c0      	nop			; (mov r8, r8)
    fae0:	0000fa2d 	.word	0x0000fa2d
    fae4:	0000fa51 	.word	0x0000fa51
    fae8:	00010115 	.word	0x00010115
    faec:	00010019 	.word	0x00010019
    faf0:	00010095 	.word	0x00010095
    faf4:	00010191 	.word	0x00010191
    faf8:	0000fa61 	.word	0x0000fa61

0000fafc <RADIO_DIO1>:
    fafc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    fafe:	466b      	mov	r3, sp
    fb00:	1ddc      	adds	r4, r3, #7
    fb02:	1d9d      	adds	r5, r3, #6
    fb04:	2230      	movs	r2, #48	; 0x30
    fb06:	2304      	movs	r3, #4
    fb08:	0021      	movs	r1, r4
    fb0a:	0028      	movs	r0, r5
    fb0c:	4e11      	ldr	r6, [pc, #68]	; (fb54 <RADIO_DIO1+0x58>)
    fb0e:	47b0      	blx	r6
    fb10:	7822      	ldrb	r2, [r4, #0]
    fb12:	782b      	ldrb	r3, [r5, #0]
    fb14:	b251      	sxtb	r1, r2
    fb16:	2900      	cmp	r1, #0
    fb18:	da0c      	bge.n	fb34 <RADIO_DIO1+0x38>
    fb1a:	b2db      	uxtb	r3, r3
    fb1c:	2b00      	cmp	r3, #0
    fb1e:	d004      	beq.n	fb2a <RADIO_DIO1+0x2e>
    fb20:	2b01      	cmp	r3, #1
    fb22:	d005      	beq.n	fb30 <RADIO_DIO1+0x34>
    fb24:	4b0c      	ldr	r3, [pc, #48]	; (fb58 <RADIO_DIO1+0x5c>)
    fb26:	4798      	blx	r3
    fb28:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    fb2a:	4b0c      	ldr	r3, [pc, #48]	; (fb5c <RADIO_DIO1+0x60>)
    fb2c:	4798      	blx	r3
    fb2e:	e7fb      	b.n	fb28 <RADIO_DIO1+0x2c>
    fb30:	4b0b      	ldr	r3, [pc, #44]	; (fb60 <RADIO_DIO1+0x64>)
    fb32:	e7fb      	b.n	fb2c <RADIO_DIO1+0x30>
    fb34:	2107      	movs	r1, #7
    fb36:	b2db      	uxtb	r3, r3
    fb38:	400a      	ands	r2, r1
    fb3a:	7022      	strb	r2, [r4, #0]
    fb3c:	2b00      	cmp	r3, #0
    fb3e:	d005      	beq.n	fb4c <RADIO_DIO1+0x50>
    fb40:	2b01      	cmp	r3, #1
    fb42:	d1f1      	bne.n	fb28 <RADIO_DIO1+0x2c>
    fb44:	2a03      	cmp	r2, #3
    fb46:	d1ef      	bne.n	fb28 <RADIO_DIO1+0x2c>
    fb48:	4b06      	ldr	r3, [pc, #24]	; (fb64 <RADIO_DIO1+0x68>)
    fb4a:	e7ef      	b.n	fb2c <RADIO_DIO1+0x30>
    fb4c:	4b06      	ldr	r3, [pc, #24]	; (fb68 <RADIO_DIO1+0x6c>)
    fb4e:	2a05      	cmp	r2, #5
    fb50:	d1ea      	bne.n	fb28 <RADIO_DIO1+0x2c>
    fb52:	e7eb      	b.n	fb2c <RADIO_DIO1+0x30>
    fb54:	0000fa2d 	.word	0x0000fa2d
    fb58:	0000fa51 	.word	0x0000fa51
    fb5c:	0000ff9d 	.word	0x0000ff9d
    fb60:	0000ecad 	.word	0x0000ecad
    fb64:	0000feb9 	.word	0x0000feb9
    fb68:	0000fe1d 	.word	0x0000fe1d

0000fb6c <RADIO_DIO2>:
    fb6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    fb6e:	466b      	mov	r3, sp
    fb70:	1ddc      	adds	r4, r3, #7
    fb72:	1d9d      	adds	r5, r3, #6
    fb74:	220c      	movs	r2, #12
    fb76:	2302      	movs	r3, #2
    fb78:	0021      	movs	r1, r4
    fb7a:	0028      	movs	r0, r5
    fb7c:	4e0b      	ldr	r6, [pc, #44]	; (fbac <RADIO_DIO2+0x40>)
    fb7e:	47b0      	blx	r6
    fb80:	7823      	ldrb	r3, [r4, #0]
    fb82:	782a      	ldrb	r2, [r5, #0]
    fb84:	b259      	sxtb	r1, r3
    fb86:	2900      	cmp	r1, #0
    fb88:	da05      	bge.n	fb96 <RADIO_DIO2+0x2a>
    fb8a:	4b09      	ldr	r3, [pc, #36]	; (fbb0 <RADIO_DIO2+0x44>)
    fb8c:	2a02      	cmp	r2, #2
    fb8e:	d90a      	bls.n	fba6 <RADIO_DIO2+0x3a>
    fb90:	4b08      	ldr	r3, [pc, #32]	; (fbb4 <RADIO_DIO2+0x48>)
    fb92:	4798      	blx	r3
    fb94:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    fb96:	2107      	movs	r1, #7
    fb98:	400b      	ands	r3, r1
    fb9a:	7023      	strb	r3, [r4, #0]
    fb9c:	2a03      	cmp	r2, #3
    fb9e:	d1f9      	bne.n	fb94 <RADIO_DIO2+0x28>
    fba0:	2b05      	cmp	r3, #5
    fba2:	d1f7      	bne.n	fb94 <RADIO_DIO2+0x28>
    fba4:	4b04      	ldr	r3, [pc, #16]	; (fbb8 <RADIO_DIO2+0x4c>)
    fba6:	4798      	blx	r3
    fba8:	e7f4      	b.n	fb94 <RADIO_DIO2+0x28>
    fbaa:	46c0      	nop			; (mov r8, r8)
    fbac:	0000fa2d 	.word	0x0000fa2d
    fbb0:	0000ecad 	.word	0x0000ecad
    fbb4:	0000fa51 	.word	0x0000fa51
    fbb8:	0000fded 	.word	0x0000fded

0000fbbc <RADIO_DIO3>:
    fbbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    fbbe:	466b      	mov	r3, sp
    fbc0:	4668      	mov	r0, sp
    fbc2:	1ddc      	adds	r4, r3, #7
    fbc4:	2203      	movs	r2, #3
    fbc6:	2300      	movs	r3, #0
    fbc8:	0021      	movs	r1, r4
    fbca:	3006      	adds	r0, #6
    fbcc:	4d03      	ldr	r5, [pc, #12]	; (fbdc <RADIO_DIO3+0x20>)
    fbce:	47a8      	blx	r5
    fbd0:	7823      	ldrb	r3, [r4, #0]
    fbd2:	2b7f      	cmp	r3, #127	; 0x7f
    fbd4:	d901      	bls.n	fbda <RADIO_DIO3+0x1e>
    fbd6:	4b02      	ldr	r3, [pc, #8]	; (fbe0 <RADIO_DIO3+0x24>)
    fbd8:	4798      	blx	r3
    fbda:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    fbdc:	0000fa2d 	.word	0x0000fa2d
    fbe0:	0000fa51 	.word	0x0000fa51

0000fbe4 <RADIO_DIO4>:
    fbe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    fbe6:	466b      	mov	r3, sp
    fbe8:	4668      	mov	r0, sp
    fbea:	1ddc      	adds	r4, r3, #7
    fbec:	2306      	movs	r3, #6
    fbee:	22c0      	movs	r2, #192	; 0xc0
    fbf0:	18c0      	adds	r0, r0, r3
    fbf2:	0021      	movs	r1, r4
    fbf4:	4d03      	ldr	r5, [pc, #12]	; (fc04 <RADIO_DIO4+0x20>)
    fbf6:	47a8      	blx	r5
    fbf8:	7823      	ldrb	r3, [r4, #0]
    fbfa:	2b7f      	cmp	r3, #127	; 0x7f
    fbfc:	d901      	bls.n	fc02 <RADIO_DIO4+0x1e>
    fbfe:	4b02      	ldr	r3, [pc, #8]	; (fc08 <RADIO_DIO4+0x24>)
    fc00:	4798      	blx	r3
    fc02:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    fc04:	0000fa2d 	.word	0x0000fa2d
    fc08:	0000fa51 	.word	0x0000fa51

0000fc0c <RADIO_DIO5>:
    fc0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    fc0e:	466b      	mov	r3, sp
    fc10:	4668      	mov	r0, sp
    fc12:	1ddc      	adds	r4, r3, #7
    fc14:	2230      	movs	r2, #48	; 0x30
    fc16:	2304      	movs	r3, #4
    fc18:	0021      	movs	r1, r4
    fc1a:	3006      	adds	r0, #6
    fc1c:	4d03      	ldr	r5, [pc, #12]	; (fc2c <RADIO_DIO5+0x20>)
    fc1e:	47a8      	blx	r5
    fc20:	7823      	ldrb	r3, [r4, #0]
    fc22:	2b7f      	cmp	r3, #127	; 0x7f
    fc24:	d901      	bls.n	fc2a <RADIO_DIO5+0x1e>
    fc26:	4b02      	ldr	r3, [pc, #8]	; (fc30 <RADIO_DIO5+0x24>)
    fc28:	4798      	blx	r3
    fc2a:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    fc2c:	0000fa2d 	.word	0x0000fa2d
    fc30:	0000fa51 	.word	0x0000fa51

0000fc34 <radioPostTask>:
    fc34:	b510      	push	{r4, lr}
    fc36:	0004      	movs	r4, r0
    fc38:	4b05      	ldr	r3, [pc, #20]	; (fc50 <radioPostTask+0x1c>)
    fc3a:	4798      	blx	r3
    fc3c:	4b05      	ldr	r3, [pc, #20]	; (fc54 <radioPostTask+0x20>)
    fc3e:	8818      	ldrh	r0, [r3, #0]
    fc40:	4320      	orrs	r0, r4
    fc42:	8018      	strh	r0, [r3, #0]
    fc44:	4b04      	ldr	r3, [pc, #16]	; (fc58 <radioPostTask+0x24>)
    fc46:	4798      	blx	r3
    fc48:	2002      	movs	r0, #2
    fc4a:	4b04      	ldr	r3, [pc, #16]	; (fc5c <radioPostTask+0x28>)
    fc4c:	4798      	blx	r3
    fc4e:	bd10      	pop	{r4, pc}
    fc50:	0000db59 	.word	0x0000db59
    fc54:	200020ac 	.word	0x200020ac
    fc58:	0000db65 	.word	0x0000db65
    fc5c:	0000eba5 	.word	0x0000eba5

0000fc60 <radioClearTask>:
    fc60:	b510      	push	{r4, lr}
    fc62:	0004      	movs	r4, r0
    fc64:	4b04      	ldr	r3, [pc, #16]	; (fc78 <radioClearTask+0x18>)
    fc66:	4798      	blx	r3
    fc68:	4a04      	ldr	r2, [pc, #16]	; (fc7c <radioClearTask+0x1c>)
    fc6a:	8813      	ldrh	r3, [r2, #0]
    fc6c:	43a3      	bics	r3, r4
    fc6e:	8013      	strh	r3, [r2, #0]
    fc70:	4b03      	ldr	r3, [pc, #12]	; (fc80 <radioClearTask+0x20>)
    fc72:	4798      	blx	r3
    fc74:	bd10      	pop	{r4, pc}
    fc76:	46c0      	nop			; (mov r8, r8)
    fc78:	0000db59 	.word	0x0000db59
    fc7c:	200020ac 	.word	0x200020ac
    fc80:	0000db65 	.word	0x0000db65

0000fc84 <RADIO_TaskHandler>:
    fc84:	b570      	push	{r4, r5, r6, lr}
    fc86:	2400      	movs	r4, #0
    fc88:	4d10      	ldr	r5, [pc, #64]	; (fccc <RADIO_TaskHandler+0x48>)
    fc8a:	2601      	movs	r6, #1
    fc8c:	882b      	ldrh	r3, [r5, #0]
    fc8e:	42a3      	cmp	r3, r4
    fc90:	d015      	beq.n	fcbe <RADIO_TaskHandler+0x3a>
    fc92:	882b      	ldrh	r3, [r5, #0]
    fc94:	4123      	asrs	r3, r4
    fc96:	4233      	tst	r3, r6
    fc98:	d013      	beq.n	fcc2 <RADIO_TaskHandler+0x3e>
    fc9a:	40a6      	lsls	r6, r4
    fc9c:	4b0c      	ldr	r3, [pc, #48]	; (fcd0 <RADIO_TaskHandler+0x4c>)
    fc9e:	4798      	blx	r3
    fca0:	882b      	ldrh	r3, [r5, #0]
    fca2:	00a4      	lsls	r4, r4, #2
    fca4:	43b3      	bics	r3, r6
    fca6:	802b      	strh	r3, [r5, #0]
    fca8:	4b0a      	ldr	r3, [pc, #40]	; (fcd4 <RADIO_TaskHandler+0x50>)
    fcaa:	4798      	blx	r3
    fcac:	4b0a      	ldr	r3, [pc, #40]	; (fcd8 <RADIO_TaskHandler+0x54>)
    fcae:	58e3      	ldr	r3, [r4, r3]
    fcb0:	4798      	blx	r3
    fcb2:	882b      	ldrh	r3, [r5, #0]
    fcb4:	2b00      	cmp	r3, #0
    fcb6:	d002      	beq.n	fcbe <RADIO_TaskHandler+0x3a>
    fcb8:	2002      	movs	r0, #2
    fcba:	4b08      	ldr	r3, [pc, #32]	; (fcdc <RADIO_TaskHandler+0x58>)
    fcbc:	4798      	blx	r3
    fcbe:	2000      	movs	r0, #0
    fcc0:	bd70      	pop	{r4, r5, r6, pc}
    fcc2:	3401      	adds	r4, #1
    fcc4:	2c05      	cmp	r4, #5
    fcc6:	d1e4      	bne.n	fc92 <RADIO_TaskHandler+0xe>
    fcc8:	e7f9      	b.n	fcbe <RADIO_TaskHandler+0x3a>
    fcca:	46c0      	nop			; (mov r8, r8)
    fccc:	200020ac 	.word	0x200020ac
    fcd0:	0000db59 	.word	0x0000db59
    fcd4:	0000db65 	.word	0x0000db65
    fcd8:	0001a398 	.word	0x0001a398
    fcdc:	0000eba5 	.word	0x0000eba5

0000fce0 <RadioSetState>:
    fce0:	4b01      	ldr	r3, [pc, #4]	; (fce8 <RadioSetState+0x8>)
    fce2:	7018      	strb	r0, [r3, #0]
    fce4:	4770      	bx	lr
    fce6:	46c0      	nop			; (mov r8, r8)
    fce8:	20003943 	.word	0x20003943

0000fcec <RADIO_GetState>:
    fcec:	4b01      	ldr	r3, [pc, #4]	; (fcf4 <RADIO_GetState+0x8>)
    fcee:	7818      	ldrb	r0, [r3, #0]
    fcf0:	b2c0      	uxtb	r0, r0
    fcf2:	4770      	bx	lr
    fcf4:	20003943 	.word	0x20003943

0000fcf8 <RADIO_SetCallbackBitmask>:
    fcf8:	4a02      	ldr	r2, [pc, #8]	; (fd04 <RADIO_SetCallbackBitmask+0xc>)
    fcfa:	7813      	ldrb	r3, [r2, #0]
    fcfc:	4318      	orrs	r0, r3
    fcfe:	7010      	strb	r0, [r2, #0]
    fd00:	4770      	bx	lr
    fd02:	46c0      	nop			; (mov r8, r8)
    fd04:	20003942 	.word	0x20003942

0000fd08 <RADIO_Transmit>:
    fd08:	b570      	push	{r4, r5, r6, lr}
    fd0a:	4d10      	ldr	r5, [pc, #64]	; (fd4c <RADIO_Transmit+0x44>)
    fd0c:	0006      	movs	r6, r0
    fd0e:	782b      	ldrb	r3, [r5, #0]
    fd10:	2004      	movs	r0, #4
    fd12:	2b01      	cmp	r3, #1
    fd14:	d118      	bne.n	fd48 <RADIO_Transmit+0x40>
    fd16:	4c0e      	ldr	r4, [pc, #56]	; (fd50 <RADIO_Transmit+0x48>)
    fd18:	0023      	movs	r3, r4
    fd1a:	332f      	adds	r3, #47	; 0x2f
    fd1c:	7818      	ldrb	r0, [r3, #0]
    fd1e:	4b0d      	ldr	r3, [pc, #52]	; (fd54 <RADIO_Transmit+0x4c>)
    fd20:	4798      	blx	r3
    fd22:	4b0d      	ldr	r3, [pc, #52]	; (fd58 <RADIO_Transmit+0x50>)
    fd24:	7832      	ldrb	r2, [r6, #0]
    fd26:	6871      	ldr	r1, [r6, #4]
    fd28:	701a      	strb	r2, [r3, #0]
    fd2a:	4b0c      	ldr	r3, [pc, #48]	; (fd5c <RADIO_Transmit+0x54>)
    fd2c:	3434      	adds	r4, #52	; 0x34
    fd2e:	6019      	str	r1, [r3, #0]
    fd30:	7821      	ldrb	r1, [r4, #0]
    fd32:	2302      	movs	r3, #2
    fd34:	2900      	cmp	r1, #0
    fd36:	d102      	bne.n	fd3e <RADIO_Transmit+0x36>
    fd38:	0018      	movs	r0, r3
    fd3a:	2a3f      	cmp	r2, #63	; 0x3f
    fd3c:	d804      	bhi.n	fd48 <RADIO_Transmit+0x40>
    fd3e:	702b      	strb	r3, [r5, #0]
    fd40:	2004      	movs	r0, #4
    fd42:	4b07      	ldr	r3, [pc, #28]	; (fd60 <RADIO_Transmit+0x58>)
    fd44:	4798      	blx	r3
    fd46:	2000      	movs	r0, #0
    fd48:	bd70      	pop	{r4, r5, r6, pc}
    fd4a:	46c0      	nop			; (mov r8, r8)
    fd4c:	20003943 	.word	0x20003943
    fd50:	20003780 	.word	0x20003780
    fd54:	0000e8a5 	.word	0x0000e8a5
    fd58:	200020c4 	.word	0x200020c4
    fd5c:	200020c0 	.word	0x200020c0
    fd60:	0000fc35 	.word	0x0000fc35

0000fd64 <Radio_FSKTxPayloadHandler>:
    fd64:	b570      	push	{r4, r5, r6, lr}
    fd66:	4b1c      	ldr	r3, [pc, #112]	; (fdd8 <Radio_FSKTxPayloadHandler+0x74>)
    fd68:	000d      	movs	r5, r1
    fd6a:	4798      	blx	r3
    fd6c:	4c1b      	ldr	r4, [pc, #108]	; (fddc <Radio_FSKTxPayloadHandler+0x78>)
    fd6e:	3458      	adds	r4, #88	; 0x58
    fd70:	7820      	ldrb	r0, [r4, #0]
    fd72:	b2c0      	uxtb	r0, r0
    fd74:	2800      	cmp	r0, #0
    fd76:	d112      	bne.n	fd9e <Radio_FSKTxPayloadHandler+0x3a>
    fd78:	2d00      	cmp	r5, #0
    fd7a:	d007      	beq.n	fd8c <Radio_FSKTxPayloadHandler+0x28>
    fd7c:	4918      	ldr	r1, [pc, #96]	; (fde0 <Radio_FSKTxPayloadHandler+0x7c>)
    fd7e:	4b19      	ldr	r3, [pc, #100]	; (fde4 <Radio_FSKTxPayloadHandler+0x80>)
    fd80:	2d3e      	cmp	r5, #62	; 0x3e
    fd82:	d806      	bhi.n	fd92 <Radio_FSKTxPayloadHandler+0x2e>
    fd84:	002a      	movs	r2, r5
    fd86:	6809      	ldr	r1, [r1, #0]
    fd88:	4798      	blx	r3
    fd8a:	7025      	strb	r5, [r4, #0]
    fd8c:	4b16      	ldr	r3, [pc, #88]	; (fde8 <Radio_FSKTxPayloadHandler+0x84>)
    fd8e:	4798      	blx	r3
    fd90:	bd70      	pop	{r4, r5, r6, pc}
    fd92:	223f      	movs	r2, #63	; 0x3f
    fd94:	6809      	ldr	r1, [r1, #0]
    fd96:	4798      	blx	r3
    fd98:	233f      	movs	r3, #63	; 0x3f
    fd9a:	7023      	strb	r3, [r4, #0]
    fd9c:	e7f6      	b.n	fd8c <Radio_FSKTxPayloadHandler+0x28>
    fd9e:	7823      	ldrb	r3, [r4, #0]
    fda0:	429d      	cmp	r5, r3
    fda2:	d0f3      	beq.n	fd8c <Radio_FSKTxPayloadHandler+0x28>
    fda4:	7822      	ldrb	r2, [r4, #0]
    fda6:	480e      	ldr	r0, [pc, #56]	; (fde0 <Radio_FSKTxPayloadHandler+0x7c>)
    fda8:	1aaa      	subs	r2, r5, r2
    fdaa:	b2d2      	uxtb	r2, r2
    fdac:	4b0d      	ldr	r3, [pc, #52]	; (fde4 <Radio_FSKTxPayloadHandler+0x80>)
    fdae:	2a3f      	cmp	r2, #63	; 0x3f
    fdb0:	d807      	bhi.n	fdc2 <Radio_FSKTxPayloadHandler+0x5e>
    fdb2:	7826      	ldrb	r6, [r4, #0]
    fdb4:	7822      	ldrb	r2, [r4, #0]
    fdb6:	6801      	ldr	r1, [r0, #0]
    fdb8:	1aaa      	subs	r2, r5, r2
    fdba:	b2d2      	uxtb	r2, r2
    fdbc:	1989      	adds	r1, r1, r6
    fdbe:	2000      	movs	r0, #0
    fdc0:	e7e2      	b.n	fd88 <Radio_FSKTxPayloadHandler+0x24>
    fdc2:	7822      	ldrb	r2, [r4, #0]
    fdc4:	6801      	ldr	r1, [r0, #0]
    fdc6:	2000      	movs	r0, #0
    fdc8:	1889      	adds	r1, r1, r2
    fdca:	223f      	movs	r2, #63	; 0x3f
    fdcc:	4798      	blx	r3
    fdce:	7823      	ldrb	r3, [r4, #0]
    fdd0:	333f      	adds	r3, #63	; 0x3f
    fdd2:	b2db      	uxtb	r3, r3
    fdd4:	e7e1      	b.n	fd9a <Radio_FSKTxPayloadHandler+0x36>
    fdd6:	46c0      	nop			; (mov r8, r8)
    fdd8:	00004b21 	.word	0x00004b21
    fddc:	20003780 	.word	0x20003780
    fde0:	200020c0 	.word	0x200020c0
    fde4:	0000d9f5 	.word	0x0000d9f5
    fde8:	00004b61 	.word	0x00004b61

0000fdec <RADIO_FSKSyncAddr>:
    fdec:	4b08      	ldr	r3, [pc, #32]	; (fe10 <RADIO_FSKSyncAddr+0x24>)
    fdee:	b510      	push	{r4, lr}
    fdf0:	4798      	blx	r3
    fdf2:	4b08      	ldr	r3, [pc, #32]	; (fe14 <RADIO_FSKSyncAddr+0x28>)
    fdf4:	001a      	movs	r2, r3
    fdf6:	3234      	adds	r2, #52	; 0x34
    fdf8:	7812      	ldrb	r2, [r2, #0]
    fdfa:	2a00      	cmp	r2, #0
    fdfc:	d104      	bne.n	fe08 <RADIO_FSKSyncAddr+0x1c>
    fdfe:	0019      	movs	r1, r3
    fe00:	3358      	adds	r3, #88	; 0x58
    fe02:	312c      	adds	r1, #44	; 0x2c
    fe04:	700a      	strb	r2, [r1, #0]
    fe06:	701a      	strb	r2, [r3, #0]
    fe08:	4b03      	ldr	r3, [pc, #12]	; (fe18 <RADIO_FSKSyncAddr+0x2c>)
    fe0a:	4798      	blx	r3
    fe0c:	bd10      	pop	{r4, pc}
    fe0e:	46c0      	nop			; (mov r8, r8)
    fe10:	00004b21 	.word	0x00004b21
    fe14:	20003780 	.word	0x20003780
    fe18:	00004b61 	.word	0x00004b61

0000fe1c <RADIO_FSKFifoLevel>:
    fe1c:	b570      	push	{r4, r5, r6, lr}
    fe1e:	4b22      	ldr	r3, [pc, #136]	; (fea8 <RADIO_FSKFifoLevel+0x8c>)
    fe20:	4798      	blx	r3
    fe22:	4d22      	ldr	r5, [pc, #136]	; (feac <RADIO_FSKFifoLevel+0x90>)
    fe24:	002a      	movs	r2, r5
    fe26:	002b      	movs	r3, r5
    fe28:	322c      	adds	r2, #44	; 0x2c
    fe2a:	3358      	adds	r3, #88	; 0x58
    fe2c:	7810      	ldrb	r0, [r2, #0]
    fe2e:	7819      	ldrb	r1, [r3, #0]
    fe30:	4288      	cmp	r0, r1
    fe32:	d105      	bne.n	fe40 <RADIO_FSKFifoLevel+0x24>
    fe34:	7812      	ldrb	r2, [r2, #0]
    fe36:	2a00      	cmp	r2, #0
    fe38:	d002      	beq.n	fe40 <RADIO_FSKFifoLevel+0x24>
    fe3a:	781b      	ldrb	r3, [r3, #0]
    fe3c:	2b00      	cmp	r3, #0
    fe3e:	d11f      	bne.n	fe80 <RADIO_FSKFifoLevel+0x64>
    fe40:	0029      	movs	r1, r5
    fe42:	312c      	adds	r1, #44	; 0x2c
    fe44:	7808      	ldrb	r0, [r1, #0]
    fe46:	b2c0      	uxtb	r0, r0
    fe48:	2800      	cmp	r0, #0
    fe4a:	d102      	bne.n	fe52 <RADIO_FSKFifoLevel+0x36>
    fe4c:	2201      	movs	r2, #1
    fe4e:	4b18      	ldr	r3, [pc, #96]	; (feb0 <RADIO_FSKFifoLevel+0x94>)
    fe50:	4798      	blx	r3
    fe52:	002e      	movs	r6, r5
    fe54:	002c      	movs	r4, r5
    fe56:	362c      	adds	r6, #44	; 0x2c
    fe58:	3458      	adds	r4, #88	; 0x58
    fe5a:	7833      	ldrb	r3, [r6, #0]
    fe5c:	7822      	ldrb	r2, [r4, #0]
    fe5e:	1a9b      	subs	r3, r3, r2
    fe60:	b2db      	uxtb	r3, r3
    fe62:	2b3e      	cmp	r3, #62	; 0x3e
    fe64:	d80f      	bhi.n	fe86 <RADIO_FSKFifoLevel+0x6a>
    fe66:	7823      	ldrb	r3, [r4, #0]
    fe68:	7832      	ldrb	r2, [r6, #0]
    fe6a:	7821      	ldrb	r1, [r4, #0]
    fe6c:	2000      	movs	r0, #0
    fe6e:	1a52      	subs	r2, r2, r1
    fe70:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    fe72:	b2d2      	uxtb	r2, r2
    fe74:	18c9      	adds	r1, r1, r3
    fe76:	4b0e      	ldr	r3, [pc, #56]	; (feb0 <RADIO_FSKFifoLevel+0x94>)
    fe78:	4798      	blx	r3
    fe7a:	7833      	ldrb	r3, [r6, #0]
    fe7c:	b2db      	uxtb	r3, r3
    fe7e:	7023      	strb	r3, [r4, #0]
    fe80:	4b0c      	ldr	r3, [pc, #48]	; (feb4 <RADIO_FSKFifoLevel+0x98>)
    fe82:	4798      	blx	r3
    fe84:	bd70      	pop	{r4, r5, r6, pc}
    fe86:	7833      	ldrb	r3, [r6, #0]
    fe88:	7822      	ldrb	r2, [r4, #0]
    fe8a:	1a9b      	subs	r3, r3, r2
    fe8c:	b2db      	uxtb	r3, r3
    fe8e:	2b3f      	cmp	r3, #63	; 0x3f
    fe90:	d9f6      	bls.n	fe80 <RADIO_FSKFifoLevel+0x64>
    fe92:	7823      	ldrb	r3, [r4, #0]
    fe94:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    fe96:	223f      	movs	r2, #63	; 0x3f
    fe98:	18c9      	adds	r1, r1, r3
    fe9a:	2000      	movs	r0, #0
    fe9c:	4b04      	ldr	r3, [pc, #16]	; (feb0 <RADIO_FSKFifoLevel+0x94>)
    fe9e:	4798      	blx	r3
    fea0:	7823      	ldrb	r3, [r4, #0]
    fea2:	333f      	adds	r3, #63	; 0x3f
    fea4:	e7ea      	b.n	fe7c <RADIO_FSKFifoLevel+0x60>
    fea6:	46c0      	nop			; (mov r8, r8)
    fea8:	00004b21 	.word	0x00004b21
    feac:	20003780 	.word	0x20003780
    feb0:	0000da35 	.word	0x0000da35
    feb4:	00004b61 	.word	0x00004b61

0000feb8 <RADIO_FSKFifoEmpty>:
    feb8:	b510      	push	{r4, lr}
    feba:	4b03      	ldr	r3, [pc, #12]	; (fec8 <RADIO_FSKFifoEmpty+0x10>)
    febc:	7819      	ldrb	r1, [r3, #0]
    febe:	4b03      	ldr	r3, [pc, #12]	; (fecc <RADIO_FSKFifoEmpty+0x14>)
    fec0:	6818      	ldr	r0, [r3, #0]
    fec2:	4b03      	ldr	r3, [pc, #12]	; (fed0 <RADIO_FSKFifoEmpty+0x18>)
    fec4:	4798      	blx	r3
    fec6:	bd10      	pop	{r4, pc}
    fec8:	200020c4 	.word	0x200020c4
    fecc:	200020c0 	.word	0x200020c0
    fed0:	0000fd65 	.word	0x0000fd65

0000fed4 <RADIO_GetData>:
    fed4:	4b03      	ldr	r3, [pc, #12]	; (fee4 <RADIO_GetData+0x10>)
    fed6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    fed8:	332c      	adds	r3, #44	; 0x2c
    feda:	6002      	str	r2, [r0, #0]
    fedc:	781b      	ldrb	r3, [r3, #0]
    fede:	2000      	movs	r0, #0
    fee0:	800b      	strh	r3, [r1, #0]
    fee2:	4770      	bx	lr
    fee4:	20003780 	.word	0x20003780

0000fee8 <Radio_EnableRfControl>:
    fee8:	b510      	push	{r4, lr}
    feea:	4b08      	ldr	r3, [pc, #32]	; (ff0c <Radio_EnableRfControl+0x24>)
    feec:	0001      	movs	r1, r0
    feee:	681a      	ldr	r2, [r3, #0]
    fef0:	4807      	ldr	r0, [pc, #28]	; (ff10 <Radio_EnableRfControl+0x28>)
    fef2:	4c08      	ldr	r4, [pc, #32]	; (ff14 <Radio_EnableRfControl+0x2c>)
    fef4:	1812      	adds	r2, r2, r0
    fef6:	2000      	movs	r0, #0
    fef8:	42a2      	cmp	r2, r4
    fefa:	d804      	bhi.n	ff06 <Radio_EnableRfControl+0x1e>
    fefc:	3305      	adds	r3, #5
    fefe:	7fdb      	ldrb	r3, [r3, #31]
    ff00:	1e58      	subs	r0, r3, #1
    ff02:	4183      	sbcs	r3, r0
    ff04:	1c58      	adds	r0, r3, #1
    ff06:	4b04      	ldr	r3, [pc, #16]	; (ff18 <Radio_EnableRfControl+0x30>)
    ff08:	4798      	blx	r3
    ff0a:	bd10      	pop	{r4, pc}
    ff0c:	20003780 	.word	0x20003780
    ff10:	cc9eec80 	.word	0xcc9eec80
    ff14:	096ae380 	.word	0x096ae380
    ff18:	0000daa1 	.word	0x0000daa1

0000ff1c <Radio_DisableRfControl>:
    ff1c:	b510      	push	{r4, lr}
    ff1e:	4b08      	ldr	r3, [pc, #32]	; (ff40 <Radio_DisableRfControl+0x24>)
    ff20:	0001      	movs	r1, r0
    ff22:	681a      	ldr	r2, [r3, #0]
    ff24:	4807      	ldr	r0, [pc, #28]	; (ff44 <Radio_DisableRfControl+0x28>)
    ff26:	4c08      	ldr	r4, [pc, #32]	; (ff48 <Radio_DisableRfControl+0x2c>)
    ff28:	1812      	adds	r2, r2, r0
    ff2a:	2000      	movs	r0, #0
    ff2c:	42a2      	cmp	r2, r4
    ff2e:	d804      	bhi.n	ff3a <Radio_DisableRfControl+0x1e>
    ff30:	3305      	adds	r3, #5
    ff32:	7fdb      	ldrb	r3, [r3, #31]
    ff34:	1e58      	subs	r0, r3, #1
    ff36:	4183      	sbcs	r3, r0
    ff38:	1c58      	adds	r0, r3, #1
    ff3a:	4b04      	ldr	r3, [pc, #16]	; (ff4c <Radio_DisableRfControl+0x30>)
    ff3c:	4798      	blx	r3
    ff3e:	bd10      	pop	{r4, pc}
    ff40:	20003780 	.word	0x20003780
    ff44:	cc9eec80 	.word	0xcc9eec80
    ff48:	096ae380 	.word	0x096ae380
    ff4c:	0000dac9 	.word	0x0000dac9

0000ff50 <Radio_WatchdogTimeout>:
    ff50:	b510      	push	{r4, lr}
    ff52:	4b0e      	ldr	r3, [pc, #56]	; (ff8c <Radio_WatchdogTimeout+0x3c>)
    ff54:	781a      	ldrb	r2, [r3, #0]
    ff56:	2a04      	cmp	r2, #4
    ff58:	d10b      	bne.n	ff72 <Radio_WatchdogTimeout+0x22>
    ff5a:	2320      	movs	r3, #32
    ff5c:	4a0c      	ldr	r2, [pc, #48]	; (ff90 <Radio_WatchdogTimeout+0x40>)
    ff5e:	2000      	movs	r0, #0
    ff60:	8811      	ldrh	r1, [r2, #0]
    ff62:	430b      	orrs	r3, r1
    ff64:	8013      	strh	r3, [r2, #0]
    ff66:	4b0b      	ldr	r3, [pc, #44]	; (ff94 <Radio_WatchdogTimeout+0x44>)
    ff68:	4798      	blx	r3
    ff6a:	2002      	movs	r0, #2
    ff6c:	4b0a      	ldr	r3, [pc, #40]	; (ff98 <Radio_WatchdogTimeout+0x48>)
    ff6e:	4798      	blx	r3
    ff70:	bd10      	pop	{r4, pc}
    ff72:	781b      	ldrb	r3, [r3, #0]
    ff74:	2b02      	cmp	r3, #2
    ff76:	d1fb      	bne.n	ff70 <Radio_WatchdogTimeout+0x20>
    ff78:	4a05      	ldr	r2, [pc, #20]	; (ff90 <Radio_WatchdogTimeout+0x40>)
    ff7a:	330e      	adds	r3, #14
    ff7c:	8811      	ldrh	r1, [r2, #0]
    ff7e:	2001      	movs	r0, #1
    ff80:	430b      	orrs	r3, r1
    ff82:	8013      	strh	r3, [r2, #0]
    ff84:	4b03      	ldr	r3, [pc, #12]	; (ff94 <Radio_WatchdogTimeout+0x44>)
    ff86:	4798      	blx	r3
    ff88:	2001      	movs	r0, #1
    ff8a:	e7ef      	b.n	ff6c <Radio_WatchdogTimeout+0x1c>
    ff8c:	20003943 	.word	0x20003943
    ff90:	20003940 	.word	0x20003940
    ff94:	0000ff1d 	.word	0x0000ff1d
    ff98:	0000fc35 	.word	0x0000fc35

0000ff9c <RADIO_RxTimeout>:
    ff9c:	b510      	push	{r4, lr}
    ff9e:	4b0a      	ldr	r3, [pc, #40]	; (ffc8 <RADIO_RxTimeout+0x2c>)
    ffa0:	332f      	adds	r3, #47	; 0x2f
    ffa2:	7818      	ldrb	r0, [r3, #0]
    ffa4:	4b09      	ldr	r3, [pc, #36]	; (ffcc <RADIO_RxTimeout+0x30>)
    ffa6:	4798      	blx	r3
    ffa8:	2000      	movs	r0, #0
    ffaa:	4b09      	ldr	r3, [pc, #36]	; (ffd0 <RADIO_RxTimeout+0x34>)
    ffac:	4798      	blx	r3
    ffae:	2180      	movs	r1, #128	; 0x80
    ffb0:	2012      	movs	r0, #18
    ffb2:	4b08      	ldr	r3, [pc, #32]	; (ffd4 <RADIO_RxTimeout+0x38>)
    ffb4:	4798      	blx	r3
    ffb6:	2340      	movs	r3, #64	; 0x40
    ffb8:	4a07      	ldr	r2, [pc, #28]	; (ffd8 <RADIO_RxTimeout+0x3c>)
    ffba:	2002      	movs	r0, #2
    ffbc:	8811      	ldrh	r1, [r2, #0]
    ffbe:	430b      	orrs	r3, r1
    ffc0:	8013      	strh	r3, [r2, #0]
    ffc2:	4b06      	ldr	r3, [pc, #24]	; (ffdc <RADIO_RxTimeout+0x40>)
    ffc4:	4798      	blx	r3
    ffc6:	bd10      	pop	{r4, pc}
    ffc8:	20003780 	.word	0x20003780
    ffcc:	0000e8a5 	.word	0x0000e8a5
    ffd0:	0000ff1d 	.word	0x0000ff1d
    ffd4:	0000d9a1 	.word	0x0000d9a1
    ffd8:	20003940 	.word	0x20003940
    ffdc:	0000fc35 	.word	0x0000fc35

0000ffe0 <Radio_RxFSKTimeout>:
    ffe0:	b510      	push	{r4, lr}
    ffe2:	4b08      	ldr	r3, [pc, #32]	; (10004 <Radio_RxFSKTimeout+0x24>)
    ffe4:	332f      	adds	r3, #47	; 0x2f
    ffe6:	7818      	ldrb	r0, [r3, #0]
    ffe8:	4b07      	ldr	r3, [pc, #28]	; (10008 <Radio_RxFSKTimeout+0x28>)
    ffea:	4798      	blx	r3
    ffec:	2000      	movs	r0, #0
    ffee:	4b07      	ldr	r3, [pc, #28]	; (1000c <Radio_RxFSKTimeout+0x2c>)
    fff0:	4798      	blx	r3
    fff2:	2380      	movs	r3, #128	; 0x80
    fff4:	4a06      	ldr	r2, [pc, #24]	; (10010 <Radio_RxFSKTimeout+0x30>)
    fff6:	2002      	movs	r0, #2
    fff8:	8811      	ldrh	r1, [r2, #0]
    fffa:	430b      	orrs	r3, r1
    fffc:	8013      	strh	r3, [r2, #0]
    fffe:	4b05      	ldr	r3, [pc, #20]	; (10014 <Radio_RxFSKTimeout+0x34>)
   10000:	4798      	blx	r3
   10002:	bd10      	pop	{r4, pc}
   10004:	20003780 	.word	0x20003780
   10008:	0000e8a5 	.word	0x0000e8a5
   1000c:	0000ff1d 	.word	0x0000ff1d
   10010:	20003940 	.word	0x20003940
   10014:	0000fc35 	.word	0x0000fc35

00010018 <RADIO_TxDone>:
   10018:	b570      	push	{r4, r5, r6, lr}
   1001a:	4b14      	ldr	r3, [pc, #80]	; (1006c <RADIO_TxDone+0x54>)
   1001c:	332f      	adds	r3, #47	; 0x2f
   1001e:	7818      	ldrb	r0, [r3, #0]
   10020:	4b13      	ldr	r3, [pc, #76]	; (10070 <RADIO_TxDone+0x58>)
   10022:	4798      	blx	r3
   10024:	2001      	movs	r0, #1
   10026:	4b13      	ldr	r3, [pc, #76]	; (10074 <RADIO_TxDone+0x5c>)
   10028:	4798      	blx	r3
   1002a:	4b13      	ldr	r3, [pc, #76]	; (10078 <RADIO_TxDone+0x60>)
   1002c:	2108      	movs	r1, #8
   1002e:	2012      	movs	r0, #18
   10030:	4798      	blx	r3
   10032:	4b12      	ldr	r3, [pc, #72]	; (1007c <RADIO_TxDone+0x64>)
   10034:	781a      	ldrb	r2, [r3, #0]
   10036:	4b12      	ldr	r3, [pc, #72]	; (10080 <RADIO_TxDone+0x68>)
   10038:	2a02      	cmp	r2, #2
   1003a:	d002      	beq.n	10042 <RADIO_TxDone+0x2a>
   1003c:	881a      	ldrh	r2, [r3, #0]
   1003e:	0692      	lsls	r2, r2, #26
   10040:	d413      	bmi.n	1006a <RADIO_TxDone+0x52>
   10042:	2001      	movs	r0, #1
   10044:	881a      	ldrh	r2, [r3, #0]
   10046:	4302      	orrs	r2, r0
   10048:	801a      	strh	r2, [r3, #0]
   1004a:	4b0e      	ldr	r3, [pc, #56]	; (10084 <RADIO_TxDone+0x6c>)
   1004c:	4798      	blx	r3
   1004e:	4b0e      	ldr	r3, [pc, #56]	; (10088 <RADIO_TxDone+0x70>)
   10050:	4798      	blx	r3
   10052:	4c0e      	ldr	r4, [pc, #56]	; (1008c <RADIO_TxDone+0x74>)
   10054:	4d0e      	ldr	r5, [pc, #56]	; (10090 <RADIO_TxDone+0x78>)
   10056:	6822      	ldr	r2, [r4, #0]
   10058:	6863      	ldr	r3, [r4, #4]
   1005a:	1a80      	subs	r0, r0, r2
   1005c:	4199      	sbcs	r1, r3
   1005e:	22fa      	movs	r2, #250	; 0xfa
   10060:	2300      	movs	r3, #0
   10062:	0092      	lsls	r2, r2, #2
   10064:	47a8      	blx	r5
   10066:	6020      	str	r0, [r4, #0]
   10068:	6061      	str	r1, [r4, #4]
   1006a:	bd70      	pop	{r4, r5, r6, pc}
   1006c:	20003780 	.word	0x20003780
   10070:	0000e8a5 	.word	0x0000e8a5
   10074:	0000ff1d 	.word	0x0000ff1d
   10078:	0000d9a1 	.word	0x0000d9a1
   1007c:	20003943 	.word	0x20003943
   10080:	20003940 	.word	0x20003940
   10084:	0000fc35 	.word	0x0000fc35
   10088:	0000e535 	.word	0x0000e535
   1008c:	200020b8 	.word	0x200020b8
   10090:	000149e5 	.word	0x000149e5

00010094 <RADIO_FSKPacketSent>:
   10094:	b570      	push	{r4, r5, r6, lr}
   10096:	4b15      	ldr	r3, [pc, #84]	; (100ec <RADIO_FSKPacketSent+0x58>)
   10098:	203f      	movs	r0, #63	; 0x3f
   1009a:	4798      	blx	r3
   1009c:	0703      	lsls	r3, r0, #28
   1009e:	d524      	bpl.n	100ea <RADIO_FSKPacketSent+0x56>
   100a0:	4b13      	ldr	r3, [pc, #76]	; (100f0 <RADIO_FSKPacketSent+0x5c>)
   100a2:	332f      	adds	r3, #47	; 0x2f
   100a4:	7818      	ldrb	r0, [r3, #0]
   100a6:	4b13      	ldr	r3, [pc, #76]	; (100f4 <RADIO_FSKPacketSent+0x60>)
   100a8:	4798      	blx	r3
   100aa:	4b13      	ldr	r3, [pc, #76]	; (100f8 <RADIO_FSKPacketSent+0x64>)
   100ac:	2001      	movs	r0, #1
   100ae:	4798      	blx	r3
   100b0:	4b12      	ldr	r3, [pc, #72]	; (100fc <RADIO_FSKPacketSent+0x68>)
   100b2:	4c13      	ldr	r4, [pc, #76]	; (10100 <RADIO_FSKPacketSent+0x6c>)
   100b4:	781b      	ldrb	r3, [r3, #0]
   100b6:	2b02      	cmp	r3, #2
   100b8:	d002      	beq.n	100c0 <RADIO_FSKPacketSent+0x2c>
   100ba:	8823      	ldrh	r3, [r4, #0]
   100bc:	069b      	lsls	r3, r3, #26
   100be:	d414      	bmi.n	100ea <RADIO_FSKPacketSent+0x56>
   100c0:	4b10      	ldr	r3, [pc, #64]	; (10104 <RADIO_FSKPacketSent+0x70>)
   100c2:	4798      	blx	r3
   100c4:	4d10      	ldr	r5, [pc, #64]	; (10108 <RADIO_FSKPacketSent+0x74>)
   100c6:	4e11      	ldr	r6, [pc, #68]	; (1010c <RADIO_FSKPacketSent+0x78>)
   100c8:	682a      	ldr	r2, [r5, #0]
   100ca:	686b      	ldr	r3, [r5, #4]
   100cc:	1a80      	subs	r0, r0, r2
   100ce:	4199      	sbcs	r1, r3
   100d0:	22fa      	movs	r2, #250	; 0xfa
   100d2:	2300      	movs	r3, #0
   100d4:	0092      	lsls	r2, r2, #2
   100d6:	47b0      	blx	r6
   100d8:	4b0d      	ldr	r3, [pc, #52]	; (10110 <RADIO_FSKPacketSent+0x7c>)
   100da:	6028      	str	r0, [r5, #0]
   100dc:	6069      	str	r1, [r5, #4]
   100de:	2001      	movs	r0, #1
   100e0:	4798      	blx	r3
   100e2:	2304      	movs	r3, #4
   100e4:	8822      	ldrh	r2, [r4, #0]
   100e6:	4313      	orrs	r3, r2
   100e8:	8023      	strh	r3, [r4, #0]
   100ea:	bd70      	pop	{r4, r5, r6, pc}
   100ec:	0000d9c9 	.word	0x0000d9c9
   100f0:	20003780 	.word	0x20003780
   100f4:	0000e8a5 	.word	0x0000e8a5
   100f8:	0000ff1d 	.word	0x0000ff1d
   100fc:	20003943 	.word	0x20003943
   10100:	20003940 	.word	0x20003940
   10104:	0000e535 	.word	0x0000e535
   10108:	200020b8 	.word	0x200020b8
   1010c:	000149e5 	.word	0x000149e5
   10110:	0000fc35 	.word	0x0000fc35

00010114 <RADIO_RxDone>:
   10114:	b570      	push	{r4, r5, r6, lr}
   10116:	2012      	movs	r0, #18
   10118:	4e16      	ldr	r6, [pc, #88]	; (10174 <RADIO_RxDone+0x60>)
   1011a:	47b0      	blx	r6
   1011c:	4b16      	ldr	r3, [pc, #88]	; (10178 <RADIO_RxDone+0x64>)
   1011e:	0005      	movs	r5, r0
   10120:	2170      	movs	r1, #112	; 0x70
   10122:	2012      	movs	r0, #18
   10124:	4798      	blx	r3
   10126:	2350      	movs	r3, #80	; 0x50
   10128:	402b      	ands	r3, r5
   1012a:	2b50      	cmp	r3, #80	; 0x50
   1012c:	d119      	bne.n	10162 <RADIO_RxDone+0x4e>
   1012e:	4c13      	ldr	r4, [pc, #76]	; (1017c <RADIO_RxDone+0x68>)
   10130:	0023      	movs	r3, r4
   10132:	332f      	adds	r3, #47	; 0x2f
   10134:	7818      	ldrb	r0, [r3, #0]
   10136:	4b12      	ldr	r3, [pc, #72]	; (10180 <RADIO_RxDone+0x6c>)
   10138:	4798      	blx	r3
   1013a:	4b12      	ldr	r3, [pc, #72]	; (10184 <RADIO_RxDone+0x70>)
   1013c:	2000      	movs	r0, #0
   1013e:	4798      	blx	r3
   10140:	3404      	adds	r4, #4
   10142:	201c      	movs	r0, #28
   10144:	47b0      	blx	r6
   10146:	7fe2      	ldrb	r2, [r4, #31]
   10148:	4b0f      	ldr	r3, [pc, #60]	; (10188 <RADIO_RxDone+0x74>)
   1014a:	4910      	ldr	r1, [pc, #64]	; (1018c <RADIO_RxDone+0x78>)
   1014c:	2a00      	cmp	r2, #0
   1014e:	d003      	beq.n	10158 <RADIO_RxDone+0x44>
   10150:	06aa      	lsls	r2, r5, #26
   10152:	d407      	bmi.n	10164 <RADIO_RxDone+0x50>
   10154:	0642      	lsls	r2, r0, #25
   10156:	d505      	bpl.n	10164 <RADIO_RxDone+0x50>
   10158:	2002      	movs	r0, #2
   1015a:	881a      	ldrh	r2, [r3, #0]
   1015c:	4302      	orrs	r2, r0
   1015e:	801a      	strh	r2, [r3, #0]
   10160:	4788      	blx	r1
   10162:	bd70      	pop	{r4, r5, r6, pc}
   10164:	2280      	movs	r2, #128	; 0x80
   10166:	8818      	ldrh	r0, [r3, #0]
   10168:	0052      	lsls	r2, r2, #1
   1016a:	4302      	orrs	r2, r0
   1016c:	801a      	strh	r2, [r3, #0]
   1016e:	2002      	movs	r0, #2
   10170:	e7f6      	b.n	10160 <RADIO_RxDone+0x4c>
   10172:	46c0      	nop			; (mov r8, r8)
   10174:	0000d9c9 	.word	0x0000d9c9
   10178:	0000d9a1 	.word	0x0000d9a1
   1017c:	20003780 	.word	0x20003780
   10180:	0000e8a5 	.word	0x0000e8a5
   10184:	0000ff1d 	.word	0x0000ff1d
   10188:	20003940 	.word	0x20003940
   1018c:	0000fc35 	.word	0x0000fc35

00010190 <RADIO_FSKPayloadReady>:
   10190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10192:	203f      	movs	r0, #63	; 0x3f
   10194:	4b39      	ldr	r3, [pc, #228]	; (1027c <RADIO_FSKPayloadReady+0xec>)
   10196:	4798      	blx	r3
   10198:	0743      	lsls	r3, r0, #29
   1019a:	d559      	bpl.n	10250 <RADIO_FSKPayloadReady+0xc0>
   1019c:	4c38      	ldr	r4, [pc, #224]	; (10280 <RADIO_FSKPayloadReady+0xf0>)
   1019e:	4d39      	ldr	r5, [pc, #228]	; (10284 <RADIO_FSKPayloadReady+0xf4>)
   101a0:	1d23      	adds	r3, r4, #4
   101a2:	7fdb      	ldrb	r3, [r3, #31]
   101a4:	2b01      	cmp	r3, #1
   101a6:	d154      	bne.n	10252 <RADIO_FSKPayloadReady+0xc2>
   101a8:	2202      	movs	r2, #2
   101aa:	4210      	tst	r0, r2
   101ac:	d048      	beq.n	10240 <RADIO_FSKPayloadReady+0xb0>
   101ae:	0023      	movs	r3, r4
   101b0:	332f      	adds	r3, #47	; 0x2f
   101b2:	7818      	ldrb	r0, [r3, #0]
   101b4:	4e34      	ldr	r6, [pc, #208]	; (10288 <RADIO_FSKPayloadReady+0xf8>)
   101b6:	47b0      	blx	r6
   101b8:	0023      	movs	r3, r4
   101ba:	332e      	adds	r3, #46	; 0x2e
   101bc:	7818      	ldrb	r0, [r3, #0]
   101be:	47b0      	blx	r6
   101c0:	4b32      	ldr	r3, [pc, #200]	; (1028c <RADIO_FSKPayloadReady+0xfc>)
   101c2:	4798      	blx	r3
   101c4:	0022      	movs	r2, r4
   101c6:	0023      	movs	r3, r4
   101c8:	322c      	adds	r2, #44	; 0x2c
   101ca:	3358      	adds	r3, #88	; 0x58
   101cc:	7810      	ldrb	r0, [r2, #0]
   101ce:	7819      	ldrb	r1, [r3, #0]
   101d0:	4288      	cmp	r0, r1
   101d2:	d105      	bne.n	101e0 <RADIO_FSKPayloadReady+0x50>
   101d4:	7812      	ldrb	r2, [r2, #0]
   101d6:	2a00      	cmp	r2, #0
   101d8:	d002      	beq.n	101e0 <RADIO_FSKPayloadReady+0x50>
   101da:	781b      	ldrb	r3, [r3, #0]
   101dc:	2b00      	cmp	r3, #0
   101de:	d118      	bne.n	10212 <RADIO_FSKPayloadReady+0x82>
   101e0:	0021      	movs	r1, r4
   101e2:	312c      	adds	r1, #44	; 0x2c
   101e4:	7808      	ldrb	r0, [r1, #0]
   101e6:	b2c0      	uxtb	r0, r0
   101e8:	2800      	cmp	r0, #0
   101ea:	d102      	bne.n	101f2 <RADIO_FSKPayloadReady+0x62>
   101ec:	2201      	movs	r2, #1
   101ee:	4b28      	ldr	r3, [pc, #160]	; (10290 <RADIO_FSKPayloadReady+0x100>)
   101f0:	4798      	blx	r3
   101f2:	0026      	movs	r6, r4
   101f4:	0027      	movs	r7, r4
   101f6:	3658      	adds	r6, #88	; 0x58
   101f8:	7830      	ldrb	r0, [r6, #0]
   101fa:	372c      	adds	r7, #44	; 0x2c
   101fc:	b2c0      	uxtb	r0, r0
   101fe:	2800      	cmp	r0, #0
   10200:	d110      	bne.n	10224 <RADIO_FSKPayloadReady+0x94>
   10202:	783a      	ldrb	r2, [r7, #0]
   10204:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   10206:	b2d2      	uxtb	r2, r2
   10208:	4b21      	ldr	r3, [pc, #132]	; (10290 <RADIO_FSKPayloadReady+0x100>)
   1020a:	4798      	blx	r3
   1020c:	783b      	ldrb	r3, [r7, #0]
   1020e:	b2db      	uxtb	r3, r3
   10210:	7033      	strb	r3, [r6, #0]
   10212:	4b20      	ldr	r3, [pc, #128]	; (10294 <RADIO_FSKPayloadReady+0x104>)
   10214:	4798      	blx	r3
   10216:	4b20      	ldr	r3, [pc, #128]	; (10298 <RADIO_FSKPayloadReady+0x108>)
   10218:	2000      	movs	r0, #0
   1021a:	4798      	blx	r3
   1021c:	2308      	movs	r3, #8
   1021e:	882a      	ldrh	r2, [r5, #0]
   10220:	4313      	orrs	r3, r2
   10222:	e011      	b.n	10248 <RADIO_FSKPayloadReady+0xb8>
   10224:	783b      	ldrb	r3, [r7, #0]
   10226:	7832      	ldrb	r2, [r6, #0]
   10228:	1a9b      	subs	r3, r3, r2
   1022a:	2b00      	cmp	r3, #0
   1022c:	ddf1      	ble.n	10212 <RADIO_FSKPayloadReady+0x82>
   1022e:	7833      	ldrb	r3, [r6, #0]
   10230:	783a      	ldrb	r2, [r7, #0]
   10232:	7831      	ldrb	r1, [r6, #0]
   10234:	2000      	movs	r0, #0
   10236:	1a52      	subs	r2, r2, r1
   10238:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   1023a:	b2d2      	uxtb	r2, r2
   1023c:	18c9      	adds	r1, r1, r3
   1023e:	e7e3      	b.n	10208 <RADIO_FSKPayloadReady+0x78>
   10240:	2380      	movs	r3, #128	; 0x80
   10242:	8829      	ldrh	r1, [r5, #0]
   10244:	005b      	lsls	r3, r3, #1
   10246:	430b      	orrs	r3, r1
   10248:	802b      	strh	r3, [r5, #0]
   1024a:	2002      	movs	r0, #2
   1024c:	4b13      	ldr	r3, [pc, #76]	; (1029c <RADIO_FSKPayloadReady+0x10c>)
   1024e:	4798      	blx	r3
   10250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10252:	0023      	movs	r3, r4
   10254:	332f      	adds	r3, #47	; 0x2f
   10256:	4e0c      	ldr	r6, [pc, #48]	; (10288 <RADIO_FSKPayloadReady+0xf8>)
   10258:	7818      	ldrb	r0, [r3, #0]
   1025a:	47b0      	blx	r6
   1025c:	0023      	movs	r3, r4
   1025e:	332e      	adds	r3, #46	; 0x2e
   10260:	7818      	ldrb	r0, [r3, #0]
   10262:	47b0      	blx	r6
   10264:	4e0e      	ldr	r6, [pc, #56]	; (102a0 <RADIO_FSKPayloadReady+0x110>)
   10266:	2201      	movs	r2, #1
   10268:	0031      	movs	r1, r6
   1026a:	2000      	movs	r0, #0
   1026c:	4f08      	ldr	r7, [pc, #32]	; (10290 <RADIO_FSKPayloadReady+0x100>)
   1026e:	47b8      	blx	r7
   10270:	7832      	ldrb	r2, [r6, #0]
   10272:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   10274:	b2d2      	uxtb	r2, r2
   10276:	2000      	movs	r0, #0
   10278:	47b8      	blx	r7
   1027a:	e7cc      	b.n	10216 <RADIO_FSKPayloadReady+0x86>
   1027c:	0000d9c9 	.word	0x0000d9c9
   10280:	20003780 	.word	0x20003780
   10284:	20003940 	.word	0x20003940
   10288:	0000e8a5 	.word	0x0000e8a5
   1028c:	00004b21 	.word	0x00004b21
   10290:	0000da35 	.word	0x0000da35
   10294:	00004b61 	.word	0x00004b61
   10298:	0000ff1d 	.word	0x0000ff1d
   1029c:	0000fc35 	.word	0x0000fc35
   102a0:	200037ac 	.word	0x200037ac

000102a4 <Radio_SetClockInput>:
   102a4:	b510      	push	{r4, lr}
   102a6:	4b08      	ldr	r3, [pc, #32]	; (102c8 <Radio_SetClockInput+0x24>)
   102a8:	3355      	adds	r3, #85	; 0x55
   102aa:	781b      	ldrb	r3, [r3, #0]
   102ac:	2b00      	cmp	r3, #0
   102ae:	d10a      	bne.n	102c6 <Radio_SetClockInput+0x22>
   102b0:	4b06      	ldr	r3, [pc, #24]	; (102cc <Radio_SetClockInput+0x28>)
   102b2:	204b      	movs	r0, #75	; 0x4b
   102b4:	4798      	blx	r3
   102b6:	2110      	movs	r1, #16
   102b8:	4301      	orrs	r1, r0
   102ba:	4b05      	ldr	r3, [pc, #20]	; (102d0 <Radio_SetClockInput+0x2c>)
   102bc:	b2c9      	uxtb	r1, r1
   102be:	204b      	movs	r0, #75	; 0x4b
   102c0:	4798      	blx	r3
   102c2:	4b04      	ldr	r3, [pc, #16]	; (102d4 <Radio_SetClockInput+0x30>)
   102c4:	4798      	blx	r3
   102c6:	bd10      	pop	{r4, pc}
   102c8:	20003780 	.word	0x20003780
   102cc:	0000d9c9 	.word	0x0000d9c9
   102d0:	0000d9a1 	.word	0x0000d9a1
   102d4:	0000dae9 	.word	0x0000dae9

000102d8 <RADIO_RxHandler>:
   102d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   102da:	4b34      	ldr	r3, [pc, #208]	; (103ac <RADIO_RxHandler+0xd4>)
   102dc:	4798      	blx	r3
   102de:	2000      	movs	r0, #0
   102e0:	4b33      	ldr	r3, [pc, #204]	; (103b0 <RADIO_RxHandler+0xd8>)
   102e2:	4798      	blx	r3
   102e4:	4e33      	ldr	r6, [pc, #204]	; (103b4 <RADIO_RxHandler+0xdc>)
   102e6:	4b34      	ldr	r3, [pc, #208]	; (103b8 <RADIO_RxHandler+0xe0>)
   102e8:	8830      	ldrh	r0, [r6, #0]
   102ea:	2800      	cmp	r0, #0
   102ec:	d100      	bne.n	102f0 <RADIO_RxHandler+0x18>
   102ee:	3004      	adds	r0, #4
   102f0:	4798      	blx	r3
   102f2:	4c32      	ldr	r4, [pc, #200]	; (103bc <RADIO_RxHandler+0xe4>)
   102f4:	4d32      	ldr	r5, [pc, #200]	; (103c0 <RADIO_RxHandler+0xe8>)
   102f6:	0023      	movs	r3, r4
   102f8:	3334      	adds	r3, #52	; 0x34
   102fa:	7819      	ldrb	r1, [r3, #0]
   102fc:	2901      	cmp	r1, #1
   102fe:	d122      	bne.n	10346 <RADIO_RxHandler+0x6e>
   10300:	2022      	movs	r0, #34	; 0x22
   10302:	47a8      	blx	r5
   10304:	2100      	movs	r1, #0
   10306:	2040      	movs	r0, #64	; 0x40
   10308:	47a8      	blx	r5
   1030a:	2100      	movs	r1, #0
   1030c:	2041      	movs	r0, #65	; 0x41
   1030e:	47a8      	blx	r5
   10310:	8832      	ldrh	r2, [r6, #0]
   10312:	4b2c      	ldr	r3, [pc, #176]	; (103c4 <RADIO_RxHandler+0xec>)
   10314:	2a00      	cmp	r2, #0
   10316:	d131      	bne.n	1037c <RADIO_RxHandler+0xa4>
   10318:	0021      	movs	r1, r4
   1031a:	2005      	movs	r0, #5
   1031c:	3134      	adds	r1, #52	; 0x34
   1031e:	7809      	ldrb	r1, [r1, #0]
   10320:	4798      	blx	r3
   10322:	68e3      	ldr	r3, [r4, #12]
   10324:	2b00      	cmp	r3, #0
   10326:	d00c      	beq.n	10342 <RADIO_RxHandler+0x6a>
   10328:	8832      	ldrh	r2, [r6, #0]
   1032a:	2a00      	cmp	r2, #0
   1032c:	d009      	beq.n	10342 <RADIO_RxHandler+0x6a>
   1032e:	21fa      	movs	r1, #250	; 0xfa
   10330:	2200      	movs	r2, #0
   10332:	342f      	adds	r4, #47	; 0x2f
   10334:	0089      	lsls	r1, r1, #2
   10336:	7820      	ldrb	r0, [r4, #0]
   10338:	4359      	muls	r1, r3
   1033a:	9200      	str	r2, [sp, #0]
   1033c:	4b22      	ldr	r3, [pc, #136]	; (103c8 <RADIO_RxHandler+0xf0>)
   1033e:	4c23      	ldr	r4, [pc, #140]	; (103cc <RADIO_RxHandler+0xf4>)
   10340:	47a0      	blx	r4
   10342:	2000      	movs	r0, #0
   10344:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
   10346:	0023      	movs	r3, r4
   10348:	3338      	adds	r3, #56	; 0x38
   1034a:	7819      	ldrb	r1, [r3, #0]
   1034c:	2012      	movs	r0, #18
   1034e:	47a8      	blx	r5
   10350:	0023      	movs	r3, r4
   10352:	3339      	adds	r3, #57	; 0x39
   10354:	7819      	ldrb	r1, [r3, #0]
   10356:	2013      	movs	r0, #19
   10358:	47a8      	blx	r5
   1035a:	210c      	movs	r1, #12
   1035c:	2040      	movs	r0, #64	; 0x40
   1035e:	47a8      	blx	r5
   10360:	2100      	movs	r1, #0
   10362:	2041      	movs	r0, #65	; 0x41
   10364:	47a8      	blx	r5
   10366:	0022      	movs	r2, r4
   10368:	2300      	movs	r3, #0
   1036a:	3256      	adds	r2, #86	; 0x56
   1036c:	8013      	strh	r3, [r2, #0]
   1036e:	0022      	movs	r2, r4
   10370:	322c      	adds	r2, #44	; 0x2c
   10372:	7013      	strb	r3, [r2, #0]
   10374:	0022      	movs	r2, r4
   10376:	3258      	adds	r2, #88	; 0x58
   10378:	7013      	strb	r3, [r2, #0]
   1037a:	e7c9      	b.n	10310 <RADIO_RxHandler+0x38>
   1037c:	0022      	movs	r2, r4
   1037e:	3234      	adds	r2, #52	; 0x34
   10380:	7811      	ldrb	r1, [r2, #0]
   10382:	2200      	movs	r2, #0
   10384:	2901      	cmp	r1, #1
   10386:	d101      	bne.n	1038c <RADIO_RxHandler+0xb4>
   10388:	2006      	movs	r0, #6
   1038a:	e7c9      	b.n	10320 <RADIO_RxHandler+0x48>
   1038c:	0011      	movs	r1, r2
   1038e:	2005      	movs	r0, #5
   10390:	4798      	blx	r3
   10392:	21fa      	movs	r1, #250	; 0xfa
   10394:	8833      	ldrh	r3, [r6, #0]
   10396:	0089      	lsls	r1, r1, #2
   10398:	4359      	muls	r1, r3
   1039a:	0023      	movs	r3, r4
   1039c:	2200      	movs	r2, #0
   1039e:	332e      	adds	r3, #46	; 0x2e
   103a0:	7818      	ldrb	r0, [r3, #0]
   103a2:	4d0a      	ldr	r5, [pc, #40]	; (103cc <RADIO_RxHandler+0xf4>)
   103a4:	9200      	str	r2, [sp, #0]
   103a6:	4b0a      	ldr	r3, [pc, #40]	; (103d0 <RADIO_RxHandler+0xf8>)
   103a8:	47a8      	blx	r5
   103aa:	e7ba      	b.n	10322 <RADIO_RxHandler+0x4a>
   103ac:	000102a5 	.word	0x000102a5
   103b0:	0000fee9 	.word	0x0000fee9
   103b4:	200020b0 	.word	0x200020b0
   103b8:	0000f675 	.word	0x0000f675
   103bc:	20003780 	.word	0x20003780
   103c0:	0000d9a1 	.word	0x0000d9a1
   103c4:	0000ebc9 	.word	0x0000ebc9
   103c8:	0000ff51 	.word	0x0000ff51
   103cc:	0000e58d 	.word	0x0000e58d
   103d0:	0000ffe1 	.word	0x0000ffe1

000103d4 <Radio_ResetClockInput>:
   103d4:	b510      	push	{r4, lr}
   103d6:	4b04      	ldr	r3, [pc, #16]	; (103e8 <Radio_ResetClockInput+0x14>)
   103d8:	3355      	adds	r3, #85	; 0x55
   103da:	781b      	ldrb	r3, [r3, #0]
   103dc:	2b00      	cmp	r3, #0
   103de:	d101      	bne.n	103e4 <Radio_ResetClockInput+0x10>
   103e0:	4b02      	ldr	r3, [pc, #8]	; (103ec <Radio_ResetClockInput+0x18>)
   103e2:	4798      	blx	r3
   103e4:	bd10      	pop	{r4, pc}
   103e6:	46c0      	nop			; (mov r8, r8)
   103e8:	20003780 	.word	0x20003780
   103ec:	0000db05 	.word	0x0000db05

000103f0 <RADIO_InitDefaultAttributes>:
   103f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   103f2:	2501      	movs	r5, #1
   103f4:	4b64      	ldr	r3, [pc, #400]	; (10588 <RADIO_InitDefaultAttributes+0x198>)
   103f6:	4c65      	ldr	r4, [pc, #404]	; (1058c <RADIO_InitDefaultAttributes+0x19c>)
   103f8:	701d      	strb	r5, [r3, #0]
   103fa:	4b65      	ldr	r3, [pc, #404]	; (10590 <RADIO_InitDefaultAttributes+0x1a0>)
   103fc:	2207      	movs	r2, #7
   103fe:	6023      	str	r3, [r4, #0]
   10400:	4b64      	ldr	r3, [pc, #400]	; (10594 <RADIO_InitDefaultAttributes+0x1a4>)
   10402:	18a1      	adds	r1, r4, r2
   10404:	6063      	str	r3, [r4, #4]
   10406:	4b64      	ldr	r3, [pc, #400]	; (10598 <RADIO_InitDefaultAttributes+0x1a8>)
   10408:	0027      	movs	r7, r4
   1040a:	60a3      	str	r3, [r4, #8]
   1040c:	0023      	movs	r3, r4
   1040e:	3334      	adds	r3, #52	; 0x34
   10410:	701d      	strb	r5, [r3, #0]
   10412:	0023      	movs	r3, r4
   10414:	3336      	adds	r3, #54	; 0x36
   10416:	701a      	strb	r2, [r3, #0]
   10418:	1ce3      	adds	r3, r4, #3
   1041a:	77dd      	strb	r5, [r3, #31]
   1041c:	0023      	movs	r3, r4
   1041e:	3333      	adds	r3, #51	; 0x33
   10420:	701d      	strb	r5, [r3, #0]
   10422:	2300      	movs	r3, #0
   10424:	77cb      	strb	r3, [r1, #31]
   10426:	2108      	movs	r1, #8
   10428:	82a1      	strh	r1, [r4, #20]
   1042a:	0021      	movs	r1, r4
   1042c:	3135      	adds	r1, #53	; 0x35
   1042e:	700a      	strb	r2, [r1, #0]
   10430:	1d22      	adds	r2, r4, #4
   10432:	77d5      	strb	r5, [r2, #31]
   10434:	1d62      	adds	r2, r4, #5
   10436:	77d3      	strb	r3, [r2, #31]
   10438:	1da2      	adds	r2, r4, #6
   1043a:	77d3      	strb	r3, [r2, #31]
   1043c:	2194      	movs	r1, #148	; 0x94
   1043e:	22c1      	movs	r2, #193	; 0xc1
   10440:	76a1      	strb	r1, [r4, #26]
   10442:	7662      	strb	r2, [r4, #25]
   10444:	76e2      	strb	r2, [r4, #27]
   10446:	3991      	subs	r1, #145	; 0x91
   10448:	1ca2      	adds	r2, r4, #2
   1044a:	77d1      	strb	r1, [r2, #31]
   1044c:	2234      	movs	r2, #52	; 0x34
   1044e:	7622      	strb	r2, [r4, #24]
   10450:	0022      	movs	r2, r4
   10452:	317d      	adds	r1, #125	; 0x7d
   10454:	3232      	adds	r2, #50	; 0x32
   10456:	7011      	strb	r1, [r2, #0]
   10458:	4a50      	ldr	r2, [pc, #320]	; (1059c <RADIO_InitDefaultAttributes+0x1ac>)
   1045a:	397e      	subs	r1, #126	; 0x7e
   1045c:	60e2      	str	r2, [r4, #12]
   1045e:	0022      	movs	r2, r4
   10460:	3237      	adds	r2, #55	; 0x37
   10462:	7011      	strb	r1, [r2, #0]
   10464:	0022      	movs	r2, r4
   10466:	3109      	adds	r1, #9
   10468:	3238      	adds	r2, #56	; 0x38
   1046a:	7011      	strb	r1, [r2, #0]
   1046c:	0022      	movs	r2, r4
   1046e:	3107      	adds	r1, #7
   10470:	3239      	adds	r2, #57	; 0x39
   10472:	7011      	strb	r1, [r2, #0]
   10474:	0022      	movs	r2, r4
   10476:	322c      	adds	r2, #44	; 0x2c
   10478:	7013      	strb	r3, [r2, #0]
   1047a:	4a49      	ldr	r2, [pc, #292]	; (105a0 <RADIO_InitDefaultAttributes+0x1b0>)
   1047c:	82e3      	strh	r3, [r4, #22]
   1047e:	62a2      	str	r2, [r4, #40]	; 0x28
   10480:	0022      	movs	r2, r4
   10482:	324c      	adds	r2, #76	; 0x4c
   10484:	8013      	strh	r3, [r2, #0]
   10486:	0022      	movs	r2, r4
   10488:	324e      	adds	r2, #78	; 0x4e
   1048a:	7013      	strb	r3, [r2, #0]
   1048c:	0022      	movs	r2, r4
   1048e:	324f      	adds	r2, #79	; 0x4f
   10490:	7013      	strb	r3, [r2, #0]
   10492:	0022      	movs	r2, r4
   10494:	3240      	adds	r2, #64	; 0x40
   10496:	7013      	strb	r3, [r2, #0]
   10498:	0022      	movs	r2, r4
   1049a:	3241      	adds	r2, #65	; 0x41
   1049c:	7013      	strb	r3, [r2, #0]
   1049e:	0022      	movs	r2, r4
   104a0:	3254      	adds	r2, #84	; 0x54
   104a2:	7013      	strb	r3, [r2, #0]
   104a4:	0022      	movs	r2, r4
   104a6:	3255      	adds	r2, #85	; 0x55
   104a8:	7015      	strb	r5, [r2, #0]
   104aa:	0022      	movs	r2, r4
   104ac:	3258      	adds	r2, #88	; 0x58
   104ae:	6463      	str	r3, [r4, #68]	; 0x44
   104b0:	64a3      	str	r3, [r4, #72]	; 0x48
   104b2:	87a3      	strh	r3, [r4, #60]	; 0x3c
   104b4:	87e3      	strh	r3, [r4, #62]	; 0x3e
   104b6:	7013      	strb	r3, [r2, #0]
   104b8:	3730      	adds	r7, #48	; 0x30
   104ba:	783b      	ldrb	r3, [r7, #0]
   104bc:	2b00      	cmp	r3, #0
   104be:	d151      	bne.n	10564 <RADIO_InitDefaultAttributes+0x174>
   104c0:	4838      	ldr	r0, [pc, #224]	; (105a4 <RADIO_InitDefaultAttributes+0x1b4>)
   104c2:	4e39      	ldr	r6, [pc, #228]	; (105a8 <RADIO_InitDefaultAttributes+0x1b8>)
   104c4:	47b0      	blx	r6
   104c6:	2808      	cmp	r0, #8
   104c8:	d149      	bne.n	1055e <RADIO_InitDefaultAttributes+0x16e>
   104ca:	4838      	ldr	r0, [pc, #224]	; (105ac <RADIO_InitDefaultAttributes+0x1bc>)
   104cc:	47b0      	blx	r6
   104ce:	2808      	cmp	r0, #8
   104d0:	d145      	bne.n	1055e <RADIO_InitDefaultAttributes+0x16e>
   104d2:	4837      	ldr	r0, [pc, #220]	; (105b0 <RADIO_InitDefaultAttributes+0x1c0>)
   104d4:	47b0      	blx	r6
   104d6:	2808      	cmp	r0, #8
   104d8:	d141      	bne.n	1055e <RADIO_InitDefaultAttributes+0x16e>
   104da:	4836      	ldr	r0, [pc, #216]	; (105b4 <RADIO_InitDefaultAttributes+0x1c4>)
   104dc:	47b0      	blx	r6
   104de:	2808      	cmp	r0, #8
   104e0:	d13d      	bne.n	1055e <RADIO_InitDefaultAttributes+0x16e>
   104e2:	703d      	strb	r5, [r7, #0]
   104e4:	4b34      	ldr	r3, [pc, #208]	; (105b8 <RADIO_InitDefaultAttributes+0x1c8>)
   104e6:	4798      	blx	r3
   104e8:	4b34      	ldr	r3, [pc, #208]	; (105bc <RADIO_InitDefaultAttributes+0x1cc>)
   104ea:	4798      	blx	r3
   104ec:	2800      	cmp	r0, #0
   104ee:	d107      	bne.n	10500 <RADIO_InitDefaultAttributes+0x110>
   104f0:	0023      	movs	r3, r4
   104f2:	3355      	adds	r3, #85	; 0x55
   104f4:	7018      	strb	r0, [r3, #0]
   104f6:	4b32      	ldr	r3, [pc, #200]	; (105c0 <RADIO_InitDefaultAttributes+0x1d0>)
   104f8:	4798      	blx	r3
   104fa:	0023      	movs	r3, r4
   104fc:	3354      	adds	r3, #84	; 0x54
   104fe:	7018      	strb	r0, [r3, #0]
   10500:	4b30      	ldr	r3, [pc, #192]	; (105c4 <RADIO_InitDefaultAttributes+0x1d4>)
   10502:	4798      	blx	r3
   10504:	2201      	movs	r2, #1
   10506:	2100      	movs	r1, #0
   10508:	0010      	movs	r0, r2
   1050a:	4f2f      	ldr	r7, [pc, #188]	; (105c8 <RADIO_InitDefaultAttributes+0x1d8>)
   1050c:	47b8      	blx	r7
   1050e:	6820      	ldr	r0, [r4, #0]
   10510:	4b2e      	ldr	r3, [pc, #184]	; (105cc <RADIO_InitDefaultAttributes+0x1dc>)
   10512:	4798      	blx	r3
   10514:	2142      	movs	r1, #66	; 0x42
   10516:	203b      	movs	r0, #59	; 0x3b
   10518:	4d2d      	ldr	r5, [pc, #180]	; (105d0 <RADIO_InitDefaultAttributes+0x1e0>)
   1051a:	47a8      	blx	r5
   1051c:	203b      	movs	r0, #59	; 0x3b
   1051e:	4b2d      	ldr	r3, [pc, #180]	; (105d4 <RADIO_InitDefaultAttributes+0x1e4>)
   10520:	4798      	blx	r3
   10522:	2620      	movs	r6, #32
   10524:	4006      	ands	r6, r0
   10526:	d1f9      	bne.n	1051c <RADIO_InitDefaultAttributes+0x12c>
   10528:	2123      	movs	r1, #35	; 0x23
   1052a:	200c      	movs	r0, #12
   1052c:	47a8      	blx	r5
   1052e:	21aa      	movs	r1, #170	; 0xaa
   10530:	201f      	movs	r0, #31
   10532:	47a8      	blx	r5
   10534:	21ff      	movs	r1, #255	; 0xff
   10536:	2032      	movs	r0, #50	; 0x32
   10538:	47a8      	blx	r5
   1053a:	2140      	movs	r1, #64	; 0x40
   1053c:	2031      	movs	r0, #49	; 0x31
   1053e:	47a8      	blx	r5
   10540:	2201      	movs	r2, #1
   10542:	0030      	movs	r0, r6
   10544:	0011      	movs	r1, r2
   10546:	47b8      	blx	r7
   10548:	21ff      	movs	r1, #255	; 0xff
   1054a:	2023      	movs	r0, #35	; 0x23
   1054c:	47a8      	blx	r5
   1054e:	4b21      	ldr	r3, [pc, #132]	; (105d4 <RADIO_InitDefaultAttributes+0x1e4>)
   10550:	2042      	movs	r0, #66	; 0x42
   10552:	4798      	blx	r3
   10554:	3431      	adds	r4, #49	; 0x31
   10556:	4b20      	ldr	r3, [pc, #128]	; (105d8 <RADIO_InitDefaultAttributes+0x1e8>)
   10558:	7020      	strb	r0, [r4, #0]
   1055a:	4798      	blx	r3
   1055c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1055e:	4b1f      	ldr	r3, [pc, #124]	; (105dc <RADIO_InitDefaultAttributes+0x1ec>)
   10560:	4798      	blx	r3
   10562:	e7bf      	b.n	104e4 <RADIO_InitDefaultAttributes+0xf4>
   10564:	0023      	movs	r3, r4
   10566:	332d      	adds	r3, #45	; 0x2d
   10568:	4d1d      	ldr	r5, [pc, #116]	; (105e0 <RADIO_InitDefaultAttributes+0x1f0>)
   1056a:	7818      	ldrb	r0, [r3, #0]
   1056c:	47a8      	blx	r5
   1056e:	0023      	movs	r3, r4
   10570:	332e      	adds	r3, #46	; 0x2e
   10572:	7818      	ldrb	r0, [r3, #0]
   10574:	47a8      	blx	r5
   10576:	0023      	movs	r3, r4
   10578:	332f      	adds	r3, #47	; 0x2f
   1057a:	7818      	ldrb	r0, [r3, #0]
   1057c:	47a8      	blx	r5
   1057e:	0023      	movs	r3, r4
   10580:	3350      	adds	r3, #80	; 0x50
   10582:	7818      	ldrb	r0, [r3, #0]
   10584:	47a8      	blx	r5
   10586:	e7ad      	b.n	104e4 <RADIO_InitDefaultAttributes+0xf4>
   10588:	20003943 	.word	0x20003943
   1058c:	20003780 	.word	0x20003780
   10590:	33be27a0 	.word	0x33be27a0
   10594:	000061a8 	.word	0x000061a8
   10598:	0000c350 	.word	0x0000c350
   1059c:	00003a98 	.word	0x00003a98
   105a0:	20003840 	.word	0x20003840
   105a4:	200037ad 	.word	0x200037ad
   105a8:	0000e559 	.word	0x0000e559
   105ac:	200037ae 	.word	0x200037ae
   105b0:	200037af 	.word	0x200037af
   105b4:	200037d0 	.word	0x200037d0
   105b8:	0000d961 	.word	0x0000d961
   105bc:	0000dae5 	.word	0x0000dae5
   105c0:	0000dae1 	.word	0x0000dae1
   105c4:	000102a5 	.word	0x000102a5
   105c8:	0000ebc9 	.word	0x0000ebc9
   105cc:	0000f62d 	.word	0x0000f62d
   105d0:	0000d9a1 	.word	0x0000d9a1
   105d4:	0000d9c9 	.word	0x0000d9c9
   105d8:	000103d5 	.word	0x000103d5
   105dc:	0000e49d 	.word	0x0000e49d
   105e0:	0000e8a5 	.word	0x0000e8a5

000105e4 <RADIO_Receive>:
   105e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   105e6:	7803      	ldrb	r3, [r0, #0]
   105e8:	0006      	movs	r6, r0
   105ea:	4d24      	ldr	r5, [pc, #144]	; (1067c <RADIO_Receive+0x98>)
   105ec:	2b00      	cmp	r3, #0
   105ee:	d11d      	bne.n	1062c <RADIO_Receive+0x48>
   105f0:	782b      	ldrb	r3, [r5, #0]
   105f2:	2004      	movs	r0, #4
   105f4:	2b01      	cmp	r3, #1
   105f6:	d118      	bne.n	1062a <RADIO_Receive+0x46>
   105f8:	4c21      	ldr	r4, [pc, #132]	; (10680 <RADIO_Receive+0x9c>)
   105fa:	4f22      	ldr	r7, [pc, #136]	; (10684 <RADIO_Receive+0xa0>)
   105fc:	0023      	movs	r3, r4
   105fe:	332f      	adds	r3, #47	; 0x2f
   10600:	7818      	ldrb	r0, [r3, #0]
   10602:	47b8      	blx	r7
   10604:	0023      	movs	r3, r4
   10606:	3334      	adds	r3, #52	; 0x34
   10608:	781b      	ldrb	r3, [r3, #0]
   1060a:	2b00      	cmp	r3, #0
   1060c:	d102      	bne.n	10614 <RADIO_Receive+0x30>
   1060e:	342e      	adds	r4, #46	; 0x2e
   10610:	7820      	ldrb	r0, [r4, #0]
   10612:	47b8      	blx	r7
   10614:	8872      	ldrh	r2, [r6, #2]
   10616:	4b1c      	ldr	r3, [pc, #112]	; (10688 <RADIO_Receive+0xa4>)
   10618:	2008      	movs	r0, #8
   1061a:	801a      	strh	r2, [r3, #0]
   1061c:	2304      	movs	r3, #4
   1061e:	702b      	strb	r3, [r5, #0]
   10620:	4b1a      	ldr	r3, [pc, #104]	; (1068c <RADIO_Receive+0xa8>)
   10622:	4798      	blx	r3
   10624:	4b1a      	ldr	r3, [pc, #104]	; (10690 <RADIO_Receive+0xac>)
   10626:	4798      	blx	r3
   10628:	2000      	movs	r0, #0
   1062a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1062c:	782b      	ldrb	r3, [r5, #0]
   1062e:	2000      	movs	r0, #0
   10630:	2b01      	cmp	r3, #1
   10632:	d0fa      	beq.n	1062a <RADIO_Receive+0x46>
   10634:	782b      	ldrb	r3, [r5, #0]
   10636:	3003      	adds	r0, #3
   10638:	2b04      	cmp	r3, #4
   1063a:	d1f6      	bne.n	1062a <RADIO_Receive+0x46>
   1063c:	4c10      	ldr	r4, [pc, #64]	; (10680 <RADIO_Receive+0x9c>)
   1063e:	4e11      	ldr	r6, [pc, #68]	; (10684 <RADIO_Receive+0xa0>)
   10640:	0023      	movs	r3, r4
   10642:	332f      	adds	r3, #47	; 0x2f
   10644:	7818      	ldrb	r0, [r3, #0]
   10646:	47b0      	blx	r6
   10648:	0023      	movs	r3, r4
   1064a:	3334      	adds	r3, #52	; 0x34
   1064c:	781b      	ldrb	r3, [r3, #0]
   1064e:	2b00      	cmp	r3, #0
   10650:	d103      	bne.n	1065a <RADIO_Receive+0x76>
   10652:	0023      	movs	r3, r4
   10654:	332e      	adds	r3, #46	; 0x2e
   10656:	7818      	ldrb	r0, [r3, #0]
   10658:	47b0      	blx	r6
   1065a:	2200      	movs	r2, #0
   1065c:	3434      	adds	r4, #52	; 0x34
   1065e:	7821      	ldrb	r1, [r4, #0]
   10660:	0010      	movs	r0, r2
   10662:	4b0c      	ldr	r3, [pc, #48]	; (10694 <RADIO_Receive+0xb0>)
   10664:	4798      	blx	r3
   10666:	4b0c      	ldr	r3, [pc, #48]	; (10698 <RADIO_Receive+0xb4>)
   10668:	4798      	blx	r3
   1066a:	2301      	movs	r3, #1
   1066c:	2008      	movs	r0, #8
   1066e:	4c0b      	ldr	r4, [pc, #44]	; (1069c <RADIO_Receive+0xb8>)
   10670:	702b      	strb	r3, [r5, #0]
   10672:	47a0      	blx	r4
   10674:	2002      	movs	r0, #2
   10676:	47a0      	blx	r4
   10678:	e7d6      	b.n	10628 <RADIO_Receive+0x44>
   1067a:	46c0      	nop			; (mov r8, r8)
   1067c:	20003943 	.word	0x20003943
   10680:	20003780 	.word	0x20003780
   10684:	0000e8a5 	.word	0x0000e8a5
   10688:	200020b0 	.word	0x200020b0
   1068c:	0000fc35 	.word	0x0000fc35
   10690:	000102a5 	.word	0x000102a5
   10694:	0000ebc9 	.word	0x0000ebc9
   10698:	000103d5 	.word	0x000103d5
   1069c:	0000fc61 	.word	0x0000fc61

000106a0 <RADIO_TxHandler>:
   106a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   106a2:	2500      	movs	r5, #0
   106a4:	b087      	sub	sp, #28
   106a6:	ae03      	add	r6, sp, #12
   106a8:	4f56      	ldr	r7, [pc, #344]	; (10804 <RADIO_TxHandler+0x164>)
   106aa:	7035      	strb	r5, [r6, #0]
   106ac:	47b8      	blx	r7
   106ae:	4c56      	ldr	r4, [pc, #344]	; (10808 <RADIO_TxHandler+0x168>)
   106b0:	0023      	movs	r3, r4
   106b2:	332d      	adds	r3, #45	; 0x2d
   106b4:	7818      	ldrb	r0, [r3, #0]
   106b6:	4b55      	ldr	r3, [pc, #340]	; (1080c <RADIO_TxHandler+0x16c>)
   106b8:	4798      	blx	r3
   106ba:	0023      	movs	r3, r4
   106bc:	3341      	adds	r3, #65	; 0x41
   106be:	781b      	ldrb	r3, [r3, #0]
   106c0:	42ab      	cmp	r3, r5
   106c2:	d021      	beq.n	10708 <RADIO_TxHandler+0x68>
   106c4:	2214      	movs	r2, #20
   106c6:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
   106c8:	4353      	muls	r3, r2
   106ca:	0022      	movs	r2, r4
   106cc:	3240      	adds	r2, #64	; 0x40
   106ce:	7013      	strb	r3, [r2, #0]
   106d0:	47b8      	blx	r7
   106d2:	0028      	movs	r0, r5
   106d4:	4b4e      	ldr	r3, [pc, #312]	; (10810 <RADIO_TxHandler+0x170>)
   106d6:	4798      	blx	r3
   106d8:	6820      	ldr	r0, [r4, #0]
   106da:	4b4e      	ldr	r3, [pc, #312]	; (10814 <RADIO_TxHandler+0x174>)
   106dc:	4798      	blx	r3
   106de:	0023      	movs	r3, r4
   106e0:	2201      	movs	r2, #1
   106e2:	334c      	adds	r3, #76	; 0x4c
   106e4:	0029      	movs	r1, r5
   106e6:	0028      	movs	r0, r5
   106e8:	4f4b      	ldr	r7, [pc, #300]	; (10818 <RADIO_TxHandler+0x178>)
   106ea:	801d      	strh	r5, [r3, #0]
   106ec:	47b8      	blx	r7
   106ee:	2109      	movs	r1, #9
   106f0:	2012      	movs	r0, #18
   106f2:	4b4a      	ldr	r3, [pc, #296]	; (1081c <RADIO_TxHandler+0x17c>)
   106f4:	4798      	blx	r3
   106f6:	2201      	movs	r2, #1
   106f8:	0029      	movs	r1, r5
   106fa:	2005      	movs	r0, #5
   106fc:	47b8      	blx	r7
   106fe:	0023      	movs	r3, r4
   10700:	3340      	adds	r3, #64	; 0x40
   10702:	781b      	ldrb	r3, [r3, #0]
   10704:	42ab      	cmp	r3, r5
   10706:	d846      	bhi.n	10796 <RADIO_TxHandler+0xf6>
   10708:	7833      	ldrb	r3, [r6, #0]
   1070a:	2b07      	cmp	r3, #7
   1070c:	d076      	beq.n	107fc <RADIO_TxHandler+0x15c>
   1070e:	2001      	movs	r0, #1
   10710:	4b3f      	ldr	r3, [pc, #252]	; (10810 <RADIO_TxHandler+0x170>)
   10712:	4798      	blx	r3
   10714:	4b42      	ldr	r3, [pc, #264]	; (10820 <RADIO_TxHandler+0x180>)
   10716:	2004      	movs	r0, #4
   10718:	4798      	blx	r3
   1071a:	4b42      	ldr	r3, [pc, #264]	; (10824 <RADIO_TxHandler+0x184>)
   1071c:	4d3f      	ldr	r5, [pc, #252]	; (1081c <RADIO_TxHandler+0x17c>)
   1071e:	781f      	ldrb	r7, [r3, #0]
   10720:	4e41      	ldr	r6, [pc, #260]	; (10828 <RADIO_TxHandler+0x188>)
   10722:	2f01      	cmp	r7, #1
   10724:	d144      	bne.n	107b0 <RADIO_TxHandler+0x110>
   10726:	7831      	ldrb	r1, [r6, #0]
   10728:	2022      	movs	r0, #34	; 0x22
   1072a:	47a8      	blx	r5
   1072c:	4b3f      	ldr	r3, [pc, #252]	; (1082c <RADIO_TxHandler+0x18c>)
   1072e:	200a      	movs	r0, #10
   10730:	4798      	blx	r3
   10732:	21f0      	movs	r1, #240	; 0xf0
   10734:	4008      	ands	r0, r1
   10736:	39e8      	subs	r1, #232	; 0xe8
   10738:	4301      	orrs	r1, r0
   1073a:	200a      	movs	r0, #10
   1073c:	47a8      	blx	r5
   1073e:	2140      	movs	r1, #64	; 0x40
   10740:	0008      	movs	r0, r1
   10742:	47a8      	blx	r5
   10744:	2100      	movs	r1, #0
   10746:	2041      	movs	r0, #65	; 0x41
   10748:	47a8      	blx	r5
   1074a:	4b36      	ldr	r3, [pc, #216]	; (10824 <RADIO_TxHandler+0x184>)
   1074c:	003a      	movs	r2, r7
   1074e:	7819      	ldrb	r1, [r3, #0]
   10750:	0038      	movs	r0, r7
   10752:	4b31      	ldr	r3, [pc, #196]	; (10818 <RADIO_TxHandler+0x178>)
   10754:	4798      	blx	r3
   10756:	4b36      	ldr	r3, [pc, #216]	; (10830 <RADIO_TxHandler+0x190>)
   10758:	7832      	ldrb	r2, [r6, #0]
   1075a:	6819      	ldr	r1, [r3, #0]
   1075c:	2000      	movs	r0, #0
   1075e:	4b35      	ldr	r3, [pc, #212]	; (10834 <RADIO_TxHandler+0x194>)
   10760:	4798      	blx	r3
   10762:	0023      	movs	r3, r4
   10764:	3334      	adds	r3, #52	; 0x34
   10766:	7819      	ldrb	r1, [r3, #0]
   10768:	2200      	movs	r2, #0
   1076a:	2003      	movs	r0, #3
   1076c:	4b2a      	ldr	r3, [pc, #168]	; (10818 <RADIO_TxHandler+0x178>)
   1076e:	4798      	blx	r3
   10770:	4b31      	ldr	r3, [pc, #196]	; (10838 <RADIO_TxHandler+0x198>)
   10772:	4798      	blx	r3
   10774:	4b31      	ldr	r3, [pc, #196]	; (1083c <RADIO_TxHandler+0x19c>)
   10776:	6018      	str	r0, [r3, #0]
   10778:	6059      	str	r1, [r3, #4]
   1077a:	68e3      	ldr	r3, [r4, #12]
   1077c:	2b00      	cmp	r3, #0
   1077e:	d03d      	beq.n	107fc <RADIO_TxHandler+0x15c>
   10780:	21fa      	movs	r1, #250	; 0xfa
   10782:	2200      	movs	r2, #0
   10784:	342f      	adds	r4, #47	; 0x2f
   10786:	0089      	lsls	r1, r1, #2
   10788:	4359      	muls	r1, r3
   1078a:	7820      	ldrb	r0, [r4, #0]
   1078c:	4b2c      	ldr	r3, [pc, #176]	; (10840 <RADIO_TxHandler+0x1a0>)
   1078e:	9200      	str	r2, [sp, #0]
   10790:	4c2c      	ldr	r4, [pc, #176]	; (10844 <RADIO_TxHandler+0x1a4>)
   10792:	47a0      	blx	r4
   10794:	e032      	b.n	107fc <RADIO_TxHandler+0x15c>
   10796:	4f2c      	ldr	r7, [pc, #176]	; (10848 <RADIO_TxHandler+0x1a8>)
   10798:	4b2c      	ldr	r3, [pc, #176]	; (1084c <RADIO_TxHandler+0x1ac>)
   1079a:	0038      	movs	r0, r7
   1079c:	4798      	blx	r3
   1079e:	233e      	movs	r3, #62	; 0x3e
   107a0:	5ee2      	ldrsh	r2, [r4, r3]
   107a2:	2100      	movs	r1, #0
   107a4:	5e7b      	ldrsh	r3, [r7, r1]
   107a6:	429a      	cmp	r2, r3
   107a8:	db14      	blt.n	107d4 <RADIO_TxHandler+0x134>
   107aa:	3501      	adds	r5, #1
   107ac:	b2ed      	uxtb	r5, r5
   107ae:	e7a6      	b.n	106fe <RADIO_TxHandler+0x5e>
   107b0:	2100      	movs	r1, #0
   107b2:	2040      	movs	r0, #64	; 0x40
   107b4:	47a8      	blx	r5
   107b6:	2100      	movs	r1, #0
   107b8:	2041      	movs	r0, #65	; 0x41
   107ba:	47a8      	blx	r5
   107bc:	0023      	movs	r3, r4
   107be:	2000      	movs	r0, #0
   107c0:	3358      	adds	r3, #88	; 0x58
   107c2:	7831      	ldrb	r1, [r6, #0]
   107c4:	7018      	strb	r0, [r3, #0]
   107c6:	47a8      	blx	r5
   107c8:	4b19      	ldr	r3, [pc, #100]	; (10830 <RADIO_TxHandler+0x190>)
   107ca:	7831      	ldrb	r1, [r6, #0]
   107cc:	6818      	ldr	r0, [r3, #0]
   107ce:	4b20      	ldr	r3, [pc, #128]	; (10850 <RADIO_TxHandler+0x1b0>)
   107d0:	4798      	blx	r3
   107d2:	e7c6      	b.n	10762 <RADIO_TxHandler+0xc2>
   107d4:	2000      	movs	r0, #0
   107d6:	4b1f      	ldr	r3, [pc, #124]	; (10854 <RADIO_TxHandler+0x1b4>)
   107d8:	4798      	blx	r3
   107da:	4b1f      	ldr	r3, [pc, #124]	; (10858 <RADIO_TxHandler+0x1b8>)
   107dc:	4798      	blx	r3
   107de:	2307      	movs	r3, #7
   107e0:	2201      	movs	r2, #1
   107e2:	7033      	strb	r3, [r6, #0]
   107e4:	4b1d      	ldr	r3, [pc, #116]	; (1085c <RADIO_TxHandler+0x1bc>)
   107e6:	701a      	strb	r2, [r3, #0]
   107e8:	4b1d      	ldr	r3, [pc, #116]	; (10860 <RADIO_TxHandler+0x1c0>)
   107ea:	781b      	ldrb	r3, [r3, #0]
   107ec:	079b      	lsls	r3, r3, #30
   107ee:	d58b      	bpl.n	10708 <RADIO_TxHandler+0x68>
   107f0:	6923      	ldr	r3, [r4, #16]
   107f2:	2b00      	cmp	r3, #0
   107f4:	d088      	beq.n	10708 <RADIO_TxHandler+0x68>
   107f6:	0031      	movs	r1, r6
   107f8:	2002      	movs	r0, #2
   107fa:	4798      	blx	r3
   107fc:	2000      	movs	r0, #0
   107fe:	b007      	add	sp, #28
   10800:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10802:	46c0      	nop			; (mov r8, r8)
   10804:	000102a5 	.word	0x000102a5
   10808:	20003780 	.word	0x20003780
   1080c:	0000e8a5 	.word	0x0000e8a5
   10810:	0000fee9 	.word	0x0000fee9
   10814:	0000f62d 	.word	0x0000f62d
   10818:	0000ebc9 	.word	0x0000ebc9
   1081c:	0000d9a1 	.word	0x0000d9a1
   10820:	0000f675 	.word	0x0000f675
   10824:	200037b4 	.word	0x200037b4
   10828:	200020c4 	.word	0x200020c4
   1082c:	0000d9c9 	.word	0x0000d9c9
   10830:	200020c0 	.word	0x200020c0
   10834:	0000d9f5 	.word	0x0000d9f5
   10838:	0000e535 	.word	0x0000e535
   1083c:	200020b8 	.word	0x200020b8
   10840:	0000ff51 	.word	0x0000ff51
   10844:	0000e58d 	.word	0x0000e58d
   10848:	200020ae 	.word	0x200020ae
   1084c:	0000ede5 	.word	0x0000ede5
   10850:	0000fd65 	.word	0x0000fd65
   10854:	0000ff1d 	.word	0x0000ff1d
   10858:	000103d5 	.word	0x000103d5
   1085c:	20003943 	.word	0x20003943
   10860:	20003942 	.word	0x20003942

00010864 <RADIO_TxDoneHandler>:
   10864:	b5f0      	push	{r4, r5, r6, r7, lr}
   10866:	4b35      	ldr	r3, [pc, #212]	; (1093c <RADIO_TxDoneHandler+0xd8>)
   10868:	b087      	sub	sp, #28
   1086a:	881a      	ldrh	r2, [r3, #0]
   1086c:	06d2      	lsls	r2, r2, #27
   1086e:	0fd2      	lsrs	r2, r2, #31
   10870:	9200      	str	r2, [sp, #0]
   10872:	466a      	mov	r2, sp
   10874:	7810      	ldrb	r0, [r2, #0]
   10876:	881a      	ldrh	r2, [r3, #0]
   10878:	2801      	cmp	r0, #1
   1087a:	d12b      	bne.n	108d4 <RADIO_TxDoneHandler+0x70>
   1087c:	4c30      	ldr	r4, [pc, #192]	; (10940 <RADIO_TxDoneHandler+0xdc>)
   1087e:	2110      	movs	r1, #16
   10880:	0027      	movs	r7, r4
   10882:	2500      	movs	r5, #0
   10884:	438a      	bics	r2, r1
   10886:	801a      	strh	r2, [r3, #0]
   10888:	3734      	adds	r7, #52	; 0x34
   1088a:	0002      	movs	r2, r0
   1088c:	7839      	ldrb	r1, [r7, #0]
   1088e:	4b2d      	ldr	r3, [pc, #180]	; (10944 <RADIO_TxDoneHandler+0xe0>)
   10890:	4798      	blx	r3
   10892:	68e3      	ldr	r3, [r4, #12]
   10894:	ae03      	add	r6, sp, #12
   10896:	9304      	str	r3, [sp, #16]
   10898:	7035      	strb	r5, [r6, #0]
   1089a:	002a      	movs	r2, r5
   1089c:	4b29      	ldr	r3, [pc, #164]	; (10944 <RADIO_TxDoneHandler+0xe0>)
   1089e:	7839      	ldrb	r1, [r7, #0]
   108a0:	0028      	movs	r0, r5
   108a2:	4798      	blx	r3
   108a4:	466a      	mov	r2, sp
   108a6:	4b28      	ldr	r3, [pc, #160]	; (10948 <RADIO_TxDoneHandler+0xe4>)
   108a8:	7812      	ldrb	r2, [r2, #0]
   108aa:	701a      	strb	r2, [r3, #0]
   108ac:	0023      	movs	r3, r4
   108ae:	3358      	adds	r3, #88	; 0x58
   108b0:	701d      	strb	r5, [r3, #0]
   108b2:	4b26      	ldr	r3, [pc, #152]	; (1094c <RADIO_TxDoneHandler+0xe8>)
   108b4:	781b      	ldrb	r3, [r3, #0]
   108b6:	075b      	lsls	r3, r3, #29
   108b8:	d505      	bpl.n	108c6 <RADIO_TxDoneHandler+0x62>
   108ba:	6923      	ldr	r3, [r4, #16]
   108bc:	42ab      	cmp	r3, r5
   108be:	d002      	beq.n	108c6 <RADIO_TxDoneHandler+0x62>
   108c0:	0031      	movs	r1, r6
   108c2:	2004      	movs	r0, #4
   108c4:	4798      	blx	r3
   108c6:	4b22      	ldr	r3, [pc, #136]	; (10950 <RADIO_TxDoneHandler+0xec>)
   108c8:	4798      	blx	r3
   108ca:	4b22      	ldr	r3, [pc, #136]	; (10954 <RADIO_TxDoneHandler+0xf0>)
   108cc:	4798      	blx	r3
   108ce:	2000      	movs	r0, #0
   108d0:	b007      	add	sp, #28
   108d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   108d4:	07d2      	lsls	r2, r2, #31
   108d6:	d402      	bmi.n	108de <RADIO_TxDoneHandler+0x7a>
   108d8:	881a      	ldrh	r2, [r3, #0]
   108da:	0752      	lsls	r2, r2, #29
   108dc:	d527      	bpl.n	1092e <RADIO_TxDoneHandler+0xca>
   108de:	2601      	movs	r6, #1
   108e0:	2104      	movs	r1, #4
   108e2:	881a      	ldrh	r2, [r3, #0]
   108e4:	4f16      	ldr	r7, [pc, #88]	; (10940 <RADIO_TxDoneHandler+0xdc>)
   108e6:	43b2      	bics	r2, r6
   108e8:	801a      	strh	r2, [r3, #0]
   108ea:	881a      	ldrh	r2, [r3, #0]
   108ec:	2400      	movs	r4, #0
   108ee:	438a      	bics	r2, r1
   108f0:	801a      	strh	r2, [r3, #0]
   108f2:	4b19      	ldr	r3, [pc, #100]	; (10958 <RADIO_TxDoneHandler+0xf4>)
   108f4:	ad03      	add	r5, sp, #12
   108f6:	681b      	ldr	r3, [r3, #0]
   108f8:	702c      	strb	r4, [r5, #0]
   108fa:	9304      	str	r3, [sp, #16]
   108fc:	003b      	movs	r3, r7
   108fe:	3334      	adds	r3, #52	; 0x34
   10900:	7819      	ldrb	r1, [r3, #0]
   10902:	0022      	movs	r2, r4
   10904:	0020      	movs	r0, r4
   10906:	4b0f      	ldr	r3, [pc, #60]	; (10944 <RADIO_TxDoneHandler+0xe0>)
   10908:	4798      	blx	r3
   1090a:	4b14      	ldr	r3, [pc, #80]	; (1095c <RADIO_TxDoneHandler+0xf8>)
   1090c:	4798      	blx	r3
   1090e:	4b0e      	ldr	r3, [pc, #56]	; (10948 <RADIO_TxDoneHandler+0xe4>)
   10910:	701e      	strb	r6, [r3, #0]
   10912:	003b      	movs	r3, r7
   10914:	3358      	adds	r3, #88	; 0x58
   10916:	701c      	strb	r4, [r3, #0]
   10918:	4b0c      	ldr	r3, [pc, #48]	; (1094c <RADIO_TxDoneHandler+0xe8>)
   1091a:	781b      	ldrb	r3, [r3, #0]
   1091c:	079b      	lsls	r3, r3, #30
   1091e:	d5d6      	bpl.n	108ce <RADIO_TxDoneHandler+0x6a>
   10920:	693b      	ldr	r3, [r7, #16]
   10922:	42a3      	cmp	r3, r4
   10924:	d0d3      	beq.n	108ce <RADIO_TxDoneHandler+0x6a>
   10926:	0029      	movs	r1, r5
   10928:	2002      	movs	r0, #2
   1092a:	4798      	blx	r3
   1092c:	e7cf      	b.n	108ce <RADIO_TxDoneHandler+0x6a>
   1092e:	881b      	ldrh	r3, [r3, #0]
   10930:	059b      	lsls	r3, r3, #22
   10932:	d5cc      	bpl.n	108ce <RADIO_TxDoneHandler+0x6a>
   10934:	4b0a      	ldr	r3, [pc, #40]	; (10960 <RADIO_TxDoneHandler+0xfc>)
   10936:	4798      	blx	r3
   10938:	e7c9      	b.n	108ce <RADIO_TxDoneHandler+0x6a>
   1093a:	46c0      	nop			; (mov r8, r8)
   1093c:	20003940 	.word	0x20003940
   10940:	20003780 	.word	0x20003780
   10944:	0000ebc9 	.word	0x0000ebc9
   10948:	20003943 	.word	0x20003943
   1094c:	20003942 	.word	0x20003942
   10950:	0000d961 	.word	0x0000d961
   10954:	000103f1 	.word	0x000103f1
   10958:	200020b8 	.word	0x200020b8
   1095c:	000103d5 	.word	0x000103d5
   10960:	000143c9 	.word	0x000143c9

00010964 <RADIO_RxDoneHandler>:
   10964:	b5f0      	push	{r4, r5, r6, r7, lr}
   10966:	4b97      	ldr	r3, [pc, #604]	; (10bc4 <RADIO_RxDoneHandler+0x260>)
   10968:	b085      	sub	sp, #20
   1096a:	881c      	ldrh	r4, [r3, #0]
   1096c:	881a      	ldrh	r2, [r3, #0]
   1096e:	06a4      	lsls	r4, r4, #26
   10970:	0fe4      	lsrs	r4, r4, #31
   10972:	b2e0      	uxtb	r0, r4
   10974:	2801      	cmp	r0, #1
   10976:	d126      	bne.n	109c6 <RADIO_RxDoneHandler+0x62>
   10978:	4d93      	ldr	r5, [pc, #588]	; (10bc8 <RADIO_RxDoneHandler+0x264>)
   1097a:	2120      	movs	r1, #32
   1097c:	002e      	movs	r6, r5
   1097e:	438a      	bics	r2, r1
   10980:	801a      	strh	r2, [r3, #0]
   10982:	3634      	adds	r6, #52	; 0x34
   10984:	0002      	movs	r2, r0
   10986:	7831      	ldrb	r1, [r6, #0]
   10988:	4f90      	ldr	r7, [pc, #576]	; (10bcc <RADIO_RxDoneHandler+0x268>)
   1098a:	47b8      	blx	r7
   1098c:	2200      	movs	r2, #0
   1098e:	7831      	ldrb	r1, [r6, #0]
   10990:	0010      	movs	r0, r2
   10992:	47b8      	blx	r7
   10994:	4b8e      	ldr	r3, [pc, #568]	; (10bd0 <RADIO_RxDoneHandler+0x26c>)
   10996:	4798      	blx	r3
   10998:	4b8e      	ldr	r3, [pc, #568]	; (10bd4 <RADIO_RxDoneHandler+0x270>)
   1099a:	002a      	movs	r2, r5
   1099c:	701c      	strb	r4, [r3, #0]
   1099e:	2300      	movs	r3, #0
   109a0:	322c      	adds	r2, #44	; 0x2c
   109a2:	7013      	strb	r3, [r2, #0]
   109a4:	002a      	movs	r2, r5
   109a6:	a901      	add	r1, sp, #4
   109a8:	3258      	adds	r2, #88	; 0x58
   109aa:	7013      	strb	r3, [r2, #0]
   109ac:	700b      	strb	r3, [r1, #0]
   109ae:	4b8a      	ldr	r3, [pc, #552]	; (10bd8 <RADIO_RxDoneHandler+0x274>)
   109b0:	781b      	ldrb	r3, [r3, #0]
   109b2:	071b      	lsls	r3, r3, #28
   109b4:	d504      	bpl.n	109c0 <RADIO_RxDoneHandler+0x5c>
   109b6:	692b      	ldr	r3, [r5, #16]
   109b8:	2008      	movs	r0, #8
   109ba:	2b00      	cmp	r3, #0
   109bc:	d000      	beq.n	109c0 <RADIO_RxDoneHandler+0x5c>
   109be:	e084      	b.n	10aca <RADIO_RxDoneHandler+0x166>
   109c0:	2000      	movs	r0, #0
   109c2:	b005      	add	sp, #20
   109c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   109c6:	0652      	lsls	r2, r2, #25
   109c8:	d402      	bmi.n	109d0 <RADIO_RxDoneHandler+0x6c>
   109ca:	881a      	ldrh	r2, [r3, #0]
   109cc:	0612      	lsls	r2, r2, #24
   109ce:	d523      	bpl.n	10a18 <RADIO_RxDoneHandler+0xb4>
   109d0:	2140      	movs	r1, #64	; 0x40
   109d2:	881a      	ldrh	r2, [r3, #0]
   109d4:	4c7c      	ldr	r4, [pc, #496]	; (10bc8 <RADIO_RxDoneHandler+0x264>)
   109d6:	438a      	bics	r2, r1
   109d8:	801a      	strh	r2, [r3, #0]
   109da:	881a      	ldrh	r2, [r3, #0]
   109dc:	1849      	adds	r1, r1, r1
   109de:	438a      	bics	r2, r1
   109e0:	801a      	strh	r2, [r3, #0]
   109e2:	0023      	movs	r3, r4
   109e4:	2200      	movs	r2, #0
   109e6:	3334      	adds	r3, #52	; 0x34
   109e8:	7819      	ldrb	r1, [r3, #0]
   109ea:	0010      	movs	r0, r2
   109ec:	4b77      	ldr	r3, [pc, #476]	; (10bcc <RADIO_RxDoneHandler+0x268>)
   109ee:	4798      	blx	r3
   109f0:	4b77      	ldr	r3, [pc, #476]	; (10bd0 <RADIO_RxDoneHandler+0x26c>)
   109f2:	4798      	blx	r3
   109f4:	2201      	movs	r2, #1
   109f6:	4b77      	ldr	r3, [pc, #476]	; (10bd4 <RADIO_RxDoneHandler+0x270>)
   109f8:	a901      	add	r1, sp, #4
   109fa:	701a      	strb	r2, [r3, #0]
   109fc:	0022      	movs	r2, r4
   109fe:	2300      	movs	r3, #0
   10a00:	322c      	adds	r2, #44	; 0x2c
   10a02:	7013      	strb	r3, [r2, #0]
   10a04:	0022      	movs	r2, r4
   10a06:	3258      	adds	r2, #88	; 0x58
   10a08:	7013      	strb	r3, [r2, #0]
   10a0a:	700b      	strb	r3, [r1, #0]
   10a0c:	4b72      	ldr	r3, [pc, #456]	; (10bd8 <RADIO_RxDoneHandler+0x274>)
   10a0e:	781b      	ldrb	r3, [r3, #0]
   10a10:	071b      	lsls	r3, r3, #28
   10a12:	d5d5      	bpl.n	109c0 <RADIO_RxDoneHandler+0x5c>
   10a14:	6923      	ldr	r3, [r4, #16]
   10a16:	e7cf      	b.n	109b8 <RADIO_RxDoneHandler+0x54>
   10a18:	881a      	ldrh	r2, [r3, #0]
   10a1a:	0792      	lsls	r2, r2, #30
   10a1c:	d571      	bpl.n	10b02 <RADIO_RxDoneHandler+0x19e>
   10a1e:	2102      	movs	r1, #2
   10a20:	881a      	ldrh	r2, [r3, #0]
   10a22:	4d6e      	ldr	r5, [pc, #440]	; (10bdc <RADIO_RxDoneHandler+0x278>)
   10a24:	438a      	bics	r2, r1
   10a26:	801a      	strh	r2, [r3, #0]
   10a28:	2013      	movs	r0, #19
   10a2a:	47a8      	blx	r5
   10a2c:	4c66      	ldr	r4, [pc, #408]	; (10bc8 <RADIO_RxDoneHandler+0x264>)
   10a2e:	2100      	movs	r1, #0
   10a30:	0026      	movs	r6, r4
   10a32:	362c      	adds	r6, #44	; 0x2c
   10a34:	7030      	strb	r0, [r6, #0]
   10a36:	4b6a      	ldr	r3, [pc, #424]	; (10be0 <RADIO_RxDoneHandler+0x27c>)
   10a38:	200d      	movs	r0, #13
   10a3a:	4798      	blx	r3
   10a3c:	7832      	ldrb	r2, [r6, #0]
   10a3e:	4b69      	ldr	r3, [pc, #420]	; (10be4 <RADIO_RxDoneHandler+0x280>)
   10a40:	b2d2      	uxtb	r2, r2
   10a42:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   10a44:	2000      	movs	r0, #0
   10a46:	4798      	blx	r3
   10a48:	2019      	movs	r0, #25
   10a4a:	47a8      	blx	r5
   10a4c:	0023      	movs	r3, r4
   10a4e:	b240      	sxtb	r0, r0
   10a50:	3332      	adds	r3, #50	; 0x32
   10a52:	2800      	cmp	r0, #0
   10a54:	da3b      	bge.n	10ace <RADIO_RxDoneHandler+0x16a>
   10a56:	4240      	negs	r0, r0
   10a58:	1080      	asrs	r0, r0, #2
   10a5a:	4240      	negs	r0, r0
   10a5c:	7018      	strb	r0, [r3, #0]
   10a5e:	201a      	movs	r0, #26
   10a60:	47a8      	blx	r5
   10a62:	0023      	movs	r3, r4
   10a64:	3332      	adds	r3, #50	; 0x32
   10a66:	781b      	ldrb	r3, [r3, #0]
   10a68:	b202      	sxth	r2, r0
   10a6a:	b25b      	sxtb	r3, r3
   10a6c:	4d5e      	ldr	r5, [pc, #376]	; (10be8 <RADIO_RxDoneHandler+0x284>)
   10a6e:	2b00      	cmp	r3, #0
   10a70:	da36      	bge.n	10ae0 <RADIO_RxDoneHandler+0x17c>
   10a72:	6821      	ldr	r1, [r4, #0]
   10a74:	4e5d      	ldr	r6, [pc, #372]	; (10bec <RADIO_RxDoneHandler+0x288>)
   10a76:	198e      	adds	r6, r1, r6
   10a78:	42ae      	cmp	r6, r5
   10a7a:	d82a      	bhi.n	10ad2 <RADIO_RxDoneHandler+0x16e>
   10a7c:	3b9d      	subs	r3, #157	; 0x9d
   10a7e:	181b      	adds	r3, r3, r0
   10a80:	1112      	asrs	r2, r2, #4
   10a82:	189b      	adds	r3, r3, r2
   10a84:	0022      	movs	r2, r4
   10a86:	3256      	adds	r2, #86	; 0x56
   10a88:	8013      	strh	r3, [r2, #0]
   10a8a:	0023      	movs	r3, r4
   10a8c:	2200      	movs	r2, #0
   10a8e:	3334      	adds	r3, #52	; 0x34
   10a90:	7819      	ldrb	r1, [r3, #0]
   10a92:	0010      	movs	r0, r2
   10a94:	4b4d      	ldr	r3, [pc, #308]	; (10bcc <RADIO_RxDoneHandler+0x268>)
   10a96:	4798      	blx	r3
   10a98:	4b4d      	ldr	r3, [pc, #308]	; (10bd0 <RADIO_RxDoneHandler+0x26c>)
   10a9a:	4798      	blx	r3
   10a9c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10a9e:	a901      	add	r1, sp, #4
   10aa0:	604b      	str	r3, [r1, #4]
   10aa2:	0023      	movs	r3, r4
   10aa4:	332c      	adds	r3, #44	; 0x2c
   10aa6:	781b      	ldrb	r3, [r3, #0]
   10aa8:	2201      	movs	r2, #1
   10aaa:	720b      	strb	r3, [r1, #8]
   10aac:	2300      	movs	r3, #0
   10aae:	700b      	strb	r3, [r1, #0]
   10ab0:	4b48      	ldr	r3, [pc, #288]	; (10bd4 <RADIO_RxDoneHandler+0x270>)
   10ab2:	701a      	strb	r2, [r3, #0]
   10ab4:	4b48      	ldr	r3, [pc, #288]	; (10bd8 <RADIO_RxDoneHandler+0x274>)
   10ab6:	7818      	ldrb	r0, [r3, #0]
   10ab8:	07c0      	lsls	r0, r0, #31
   10aba:	0fc0      	lsrs	r0, r0, #31
   10abc:	4290      	cmp	r0, r2
   10abe:	d000      	beq.n	10ac2 <RADIO_RxDoneHandler+0x15e>
   10ac0:	e77e      	b.n	109c0 <RADIO_RxDoneHandler+0x5c>
   10ac2:	6923      	ldr	r3, [r4, #16]
   10ac4:	2b00      	cmp	r3, #0
   10ac6:	d100      	bne.n	10aca <RADIO_RxDoneHandler+0x166>
   10ac8:	e77a      	b.n	109c0 <RADIO_RxDoneHandler+0x5c>
   10aca:	4798      	blx	r3
   10acc:	e778      	b.n	109c0 <RADIO_RxDoneHandler+0x5c>
   10ace:	1080      	asrs	r0, r0, #2
   10ad0:	e7c4      	b.n	10a5c <RADIO_RxDoneHandler+0xf8>
   10ad2:	4d47      	ldr	r5, [pc, #284]	; (10bf0 <RADIO_RxDoneHandler+0x28c>)
   10ad4:	1949      	adds	r1, r1, r5
   10ad6:	4d47      	ldr	r5, [pc, #284]	; (10bf4 <RADIO_RxDoneHandler+0x290>)
   10ad8:	42a9      	cmp	r1, r5
   10ada:	d8d6      	bhi.n	10a8a <RADIO_RxDoneHandler+0x126>
   10adc:	3ba4      	subs	r3, #164	; 0xa4
   10ade:	e7ce      	b.n	10a7e <RADIO_RxDoneHandler+0x11a>
   10ae0:	6823      	ldr	r3, [r4, #0]
   10ae2:	4942      	ldr	r1, [pc, #264]	; (10bec <RADIO_RxDoneHandler+0x288>)
   10ae4:	1859      	adds	r1, r3, r1
   10ae6:	42a9      	cmp	r1, r5
   10ae8:	d802      	bhi.n	10af0 <RADIO_RxDoneHandler+0x18c>
   10aea:	0003      	movs	r3, r0
   10aec:	3b9d      	subs	r3, #157	; 0x9d
   10aee:	e7c7      	b.n	10a80 <RADIO_RxDoneHandler+0x11c>
   10af0:	493f      	ldr	r1, [pc, #252]	; (10bf0 <RADIO_RxDoneHandler+0x28c>)
   10af2:	185b      	adds	r3, r3, r1
   10af4:	493f      	ldr	r1, [pc, #252]	; (10bf4 <RADIO_RxDoneHandler+0x290>)
   10af6:	428b      	cmp	r3, r1
   10af8:	d8c7      	bhi.n	10a8a <RADIO_RxDoneHandler+0x126>
   10afa:	38a4      	subs	r0, #164	; 0xa4
   10afc:	1113      	asrs	r3, r2, #4
   10afe:	18c3      	adds	r3, r0, r3
   10b00:	e7c0      	b.n	10a84 <RADIO_RxDoneHandler+0x120>
   10b02:	881a      	ldrh	r2, [r3, #0]
   10b04:	0712      	lsls	r2, r2, #28
   10b06:	0fd5      	lsrs	r5, r2, #31
   10b08:	2a00      	cmp	r2, #0
   10b0a:	da27      	bge.n	10b5c <RADIO_RxDoneHandler+0x1f8>
   10b0c:	2108      	movs	r1, #8
   10b0e:	881a      	ldrh	r2, [r3, #0]
   10b10:	4c2d      	ldr	r4, [pc, #180]	; (10bc8 <RADIO_RxDoneHandler+0x264>)
   10b12:	438a      	bics	r2, r1
   10b14:	801a      	strh	r2, [r3, #0]
   10b16:	0023      	movs	r3, r4
   10b18:	2280      	movs	r2, #128	; 0x80
   10b1a:	3332      	adds	r3, #50	; 0x32
   10b1c:	701a      	strb	r2, [r3, #0]
   10b1e:	0023      	movs	r3, r4
   10b20:	2200      	movs	r2, #0
   10b22:	3334      	adds	r3, #52	; 0x34
   10b24:	7819      	ldrb	r1, [r3, #0]
   10b26:	0010      	movs	r0, r2
   10b28:	4b28      	ldr	r3, [pc, #160]	; (10bcc <RADIO_RxDoneHandler+0x268>)
   10b2a:	4798      	blx	r3
   10b2c:	4b28      	ldr	r3, [pc, #160]	; (10bd0 <RADIO_RxDoneHandler+0x26c>)
   10b2e:	4798      	blx	r3
   10b30:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10b32:	a901      	add	r1, sp, #4
   10b34:	604b      	str	r3, [r1, #4]
   10b36:	0023      	movs	r3, r4
   10b38:	332c      	adds	r3, #44	; 0x2c
   10b3a:	781b      	ldrb	r3, [r3, #0]
   10b3c:	0022      	movs	r2, r4
   10b3e:	720b      	strb	r3, [r1, #8]
   10b40:	2300      	movs	r3, #0
   10b42:	3258      	adds	r2, #88	; 0x58
   10b44:	7013      	strb	r3, [r2, #0]
   10b46:	700b      	strb	r3, [r1, #0]
   10b48:	4b22      	ldr	r3, [pc, #136]	; (10bd4 <RADIO_RxDoneHandler+0x270>)
   10b4a:	701d      	strb	r5, [r3, #0]
   10b4c:	4b22      	ldr	r3, [pc, #136]	; (10bd8 <RADIO_RxDoneHandler+0x274>)
   10b4e:	7818      	ldrb	r0, [r3, #0]
   10b50:	07c0      	lsls	r0, r0, #31
   10b52:	0fc0      	lsrs	r0, r0, #31
   10b54:	2801      	cmp	r0, #1
   10b56:	d000      	beq.n	10b5a <RADIO_RxDoneHandler+0x1f6>
   10b58:	e732      	b.n	109c0 <RADIO_RxDoneHandler+0x5c>
   10b5a:	e7b2      	b.n	10ac2 <RADIO_RxDoneHandler+0x15e>
   10b5c:	881a      	ldrh	r2, [r3, #0]
   10b5e:	05d2      	lsls	r2, r2, #23
   10b60:	0fd5      	lsrs	r5, r2, #31
   10b62:	2a00      	cmp	r2, #0
   10b64:	db00      	blt.n	10b68 <RADIO_RxDoneHandler+0x204>
   10b66:	e72b      	b.n	109c0 <RADIO_RxDoneHandler+0x5c>
   10b68:	4c17      	ldr	r4, [pc, #92]	; (10bc8 <RADIO_RxDoneHandler+0x264>)
   10b6a:	881a      	ldrh	r2, [r3, #0]
   10b6c:	0026      	movs	r6, r4
   10b6e:	4922      	ldr	r1, [pc, #136]	; (10bf8 <RADIO_RxDoneHandler+0x294>)
   10b70:	362c      	adds	r6, #44	; 0x2c
   10b72:	400a      	ands	r2, r1
   10b74:	801a      	strh	r2, [r3, #0]
   10b76:	7832      	ldrb	r2, [r6, #0]
   10b78:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   10b7a:	b2d2      	uxtb	r2, r2
   10b7c:	2000      	movs	r0, #0
   10b7e:	4b19      	ldr	r3, [pc, #100]	; (10be4 <RADIO_RxDoneHandler+0x280>)
   10b80:	4798      	blx	r3
   10b82:	0023      	movs	r3, r4
   10b84:	2200      	movs	r2, #0
   10b86:	3334      	adds	r3, #52	; 0x34
   10b88:	7819      	ldrb	r1, [r3, #0]
   10b8a:	0010      	movs	r0, r2
   10b8c:	4b0f      	ldr	r3, [pc, #60]	; (10bcc <RADIO_RxDoneHandler+0x268>)
   10b8e:	4798      	blx	r3
   10b90:	4b0f      	ldr	r3, [pc, #60]	; (10bd0 <RADIO_RxDoneHandler+0x26c>)
   10b92:	4798      	blx	r3
   10b94:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10b96:	a901      	add	r1, sp, #4
   10b98:	604b      	str	r3, [r1, #4]
   10b9a:	7833      	ldrb	r3, [r6, #0]
   10b9c:	0022      	movs	r2, r4
   10b9e:	720b      	strb	r3, [r1, #8]
   10ba0:	2300      	movs	r3, #0
   10ba2:	3258      	adds	r2, #88	; 0x58
   10ba4:	7013      	strb	r3, [r2, #0]
   10ba6:	700b      	strb	r3, [r1, #0]
   10ba8:	4b0a      	ldr	r3, [pc, #40]	; (10bd4 <RADIO_RxDoneHandler+0x270>)
   10baa:	701d      	strb	r5, [r3, #0]
   10bac:	4b0a      	ldr	r3, [pc, #40]	; (10bd8 <RADIO_RxDoneHandler+0x274>)
   10bae:	781b      	ldrb	r3, [r3, #0]
   10bb0:	06db      	lsls	r3, r3, #27
   10bb2:	d400      	bmi.n	10bb6 <RADIO_RxDoneHandler+0x252>
   10bb4:	e704      	b.n	109c0 <RADIO_RxDoneHandler+0x5c>
   10bb6:	6923      	ldr	r3, [r4, #16]
   10bb8:	2b00      	cmp	r3, #0
   10bba:	d100      	bne.n	10bbe <RADIO_RxDoneHandler+0x25a>
   10bbc:	e700      	b.n	109c0 <RADIO_RxDoneHandler+0x5c>
   10bbe:	2010      	movs	r0, #16
   10bc0:	e783      	b.n	10aca <RADIO_RxDoneHandler+0x166>
   10bc2:	46c0      	nop			; (mov r8, r8)
   10bc4:	20003940 	.word	0x20003940
   10bc8:	20003780 	.word	0x20003780
   10bcc:	0000ebc9 	.word	0x0000ebc9
   10bd0:	000103d5 	.word	0x000103d5
   10bd4:	20003943 	.word	0x20003943
   10bd8:	20003942 	.word	0x20003942
   10bdc:	0000d9c9 	.word	0x0000d9c9
   10be0:	0000d9a1 	.word	0x0000d9a1
   10be4:	0000da35 	.word	0x0000da35
   10be8:	096ae380 	.word	0x096ae380
   10bec:	cc9eec80 	.word	0xcc9eec80
   10bf0:	e78fe580 	.word	0xe78fe580
   10bf4:	06dac2c0 	.word	0x06dac2c0
   10bf8:	fffffeff 	.word	0xfffffeff

00010bfc <MacClearCommands>:
   10bfc:	490e      	ldr	r1, [pc, #56]	; (10c38 <MacClearCommands+0x3c>)
   10bfe:	b570      	push	{r4, r5, r6, lr}
   10c00:	000b      	movs	r3, r1
   10c02:	33e0      	adds	r3, #224	; 0xe0
   10c04:	7818      	ldrb	r0, [r3, #0]
   10c06:	2303      	movs	r3, #3
   10c08:	25a4      	movs	r5, #164	; 0xa4
   10c0a:	4343      	muls	r3, r0
   10c0c:	2401      	movs	r4, #1
   10c0e:	20ff      	movs	r0, #255	; 0xff
   10c10:	3399      	adds	r3, #153	; 0x99
   10c12:	4a0a      	ldr	r2, [pc, #40]	; (10c3c <MacClearCommands+0x40>)
   10c14:	185b      	adds	r3, r3, r1
   10c16:	00ed      	lsls	r5, r5, #3
   10c18:	429a      	cmp	r2, r3
   10c1a:	d100      	bne.n	10c1e <MacClearCommands+0x22>
   10c1c:	bd70      	pop	{r4, r5, r6, pc}
   10c1e:	7811      	ldrb	r1, [r2, #0]
   10c20:	29ff      	cmp	r1, #255	; 0xff
   10c22:	d006      	beq.n	10c32 <MacClearCommands+0x36>
   10c24:	290a      	cmp	r1, #10
   10c26:	d803      	bhi.n	10c30 <MacClearCommands+0x34>
   10c28:	0026      	movs	r6, r4
   10c2a:	408e      	lsls	r6, r1
   10c2c:	422e      	tst	r6, r5
   10c2e:	d100      	bne.n	10c32 <MacClearCommands+0x36>
   10c30:	7010      	strb	r0, [r2, #0]
   10c32:	3203      	adds	r2, #3
   10c34:	e7f0      	b.n	10c18 <MacClearCommands+0x1c>
   10c36:	46c0      	nop			; (mov r8, r8)
   10c38:	20003a6c 	.word	0x20003a6c
   10c3c:	20003b05 	.word	0x20003b05

00010c40 <CountfOptsLength>:
   10c40:	2200      	movs	r2, #0
   10c42:	490d      	ldr	r1, [pc, #52]	; (10c78 <CountfOptsLength+0x38>)
   10c44:	b570      	push	{r4, r5, r6, lr}
   10c46:	000b      	movs	r3, r1
   10c48:	0010      	movs	r0, r2
   10c4a:	2503      	movs	r5, #3
   10c4c:	33e0      	adds	r3, #224	; 0xe0
   10c4e:	781c      	ldrb	r4, [r3, #0]
   10c50:	4e0a      	ldr	r6, [pc, #40]	; (10c7c <CountfOptsLength+0x3c>)
   10c52:	b2d3      	uxtb	r3, r2
   10c54:	429c      	cmp	r4, r3
   10c56:	d800      	bhi.n	10c5a <CountfOptsLength+0x1a>
   10c58:	bd70      	pop	{r4, r5, r6, pc}
   10c5a:	002b      	movs	r3, r5
   10c5c:	4353      	muls	r3, r2
   10c5e:	3399      	adds	r3, #153	; 0x99
   10c60:	5ccb      	ldrb	r3, [r1, r3]
   10c62:	2bff      	cmp	r3, #255	; 0xff
   10c64:	d006      	beq.n	10c74 <CountfOptsLength+0x34>
   10c66:	18f3      	adds	r3, r6, r3
   10c68:	3b02      	subs	r3, #2
   10c6a:	781b      	ldrb	r3, [r3, #0]
   10c6c:	18c3      	adds	r3, r0, r3
   10c6e:	2b0f      	cmp	r3, #15
   10c70:	dcf2      	bgt.n	10c58 <CountfOptsLength+0x18>
   10c72:	b2d8      	uxtb	r0, r3
   10c74:	3201      	adds	r2, #1
   10c76:	e7ec      	b.n	10c52 <CountfOptsLength+0x12>
   10c78:	20003a6c 	.word	0x20003a6c
   10c7c:	0001a3bb 	.word	0x0001a3bb

00010c80 <LorawanGetMaxPayloadSize>:
   10c80:	b513      	push	{r0, r1, r4, lr}
   10c82:	466b      	mov	r3, sp
   10c84:	1ddc      	adds	r4, r3, #7
   10c86:	2300      	movs	r3, #0
   10c88:	0022      	movs	r2, r4
   10c8a:	7023      	strb	r3, [r4, #0]
   10c8c:	4903      	ldr	r1, [pc, #12]	; (10c9c <LorawanGetMaxPayloadSize+0x1c>)
   10c8e:	4b04      	ldr	r3, [pc, #16]	; (10ca0 <LorawanGetMaxPayloadSize+0x20>)
   10c90:	2005      	movs	r0, #5
   10c92:	4798      	blx	r3
   10c94:	7820      	ldrb	r0, [r4, #0]
   10c96:	3808      	subs	r0, #8
   10c98:	b2c0      	uxtb	r0, r0
   10c9a:	bd16      	pop	{r1, r2, r4, pc}
   10c9c:	20003b53 	.word	0x20003b53
   10ca0:	0000e045 	.word	0x0000e045

00010ca4 <UpdateReceiveDelays>:
   10ca4:	23fa      	movs	r3, #250	; 0xfa
   10ca6:	b570      	push	{r4, r5, r6, lr}
   10ca8:	009b      	lsls	r3, r3, #2
   10caa:	4c0b      	ldr	r4, [pc, #44]	; (10cd8 <UpdateReceiveDelays+0x34>)
   10cac:	2800      	cmp	r0, #0
   10cae:	d000      	beq.n	10cb2 <UpdateReceiveDelays+0xe>
   10cb0:	4343      	muls	r3, r0
   10cb2:	0022      	movs	r2, r4
   10cb4:	4d09      	ldr	r5, [pc, #36]	; (10cdc <UpdateReceiveDelays+0x38>)
   10cb6:	32d0      	adds	r2, #208	; 0xd0
   10cb8:	210c      	movs	r1, #12
   10cba:	2000      	movs	r0, #0
   10cbc:	8013      	strh	r3, [r2, #0]
   10cbe:	47a8      	blx	r5
   10cc0:	0023      	movs	r3, r4
   10cc2:	22fa      	movs	r2, #250	; 0xfa
   10cc4:	33d0      	adds	r3, #208	; 0xd0
   10cc6:	881b      	ldrh	r3, [r3, #0]
   10cc8:	0092      	lsls	r2, r2, #2
   10cca:	189b      	adds	r3, r3, r2
   10ccc:	34d2      	adds	r4, #210	; 0xd2
   10cce:	210d      	movs	r1, #13
   10cd0:	2000      	movs	r0, #0
   10cd2:	8023      	strh	r3, [r4, #0]
   10cd4:	47a8      	blx	r5
   10cd6:	bd70      	pop	{r4, r5, r6, pc}
   10cd8:	20003a6c 	.word	0x20003a6c
   10cdc:	000098a5 	.word	0x000098a5

00010ce0 <IncludeMacCommandsResponse>:
   10ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
   10ce2:	0005      	movs	r5, r0
   10ce4:	2600      	movs	r6, #0
   10ce6:	b087      	sub	sp, #28
   10ce8:	880c      	ldrh	r4, [r1, #0]
   10cea:	9101      	str	r1, [sp, #4]
   10cec:	9203      	str	r2, [sp, #12]
   10cee:	4f77      	ldr	r7, [pc, #476]	; (10ecc <IncludeMacCommandsResponse+0x1ec>)
   10cf0:	003b      	movs	r3, r7
   10cf2:	33e0      	adds	r3, #224	; 0xe0
   10cf4:	781b      	ldrb	r3, [r3, #0]
   10cf6:	42b3      	cmp	r3, r6
   10cf8:	d913      	bls.n	10d22 <IncludeMacCommandsResponse+0x42>
   10cfa:	9b03      	ldr	r3, [sp, #12]
   10cfc:	2b00      	cmp	r3, #0
   10cfe:	d019      	beq.n	10d34 <IncludeMacCommandsResponse+0x54>
   10d00:	2303      	movs	r3, #3
   10d02:	4373      	muls	r3, r6
   10d04:	18fb      	adds	r3, r7, r3
   10d06:	3399      	adds	r3, #153	; 0x99
   10d08:	7819      	ldrb	r1, [r3, #0]
   10d0a:	29ff      	cmp	r1, #255	; 0xff
   10d0c:	d012      	beq.n	10d34 <IncludeMacCommandsResponse+0x54>
   10d0e:	9b01      	ldr	r3, [sp, #4]
   10d10:	881a      	ldrh	r2, [r3, #0]
   10d12:	4b6f      	ldr	r3, [pc, #444]	; (10ed0 <IncludeMacCommandsResponse+0x1f0>)
   10d14:	1aa2      	subs	r2, r4, r2
   10d16:	185b      	adds	r3, r3, r1
   10d18:	3b02      	subs	r3, #2
   10d1a:	781b      	ldrb	r3, [r3, #0]
   10d1c:	18d3      	adds	r3, r2, r3
   10d1e:	2b0f      	cmp	r3, #15
   10d20:	dd08      	ble.n	10d34 <IncludeMacCommandsResponse+0x54>
   10d22:	2207      	movs	r2, #7
   10d24:	2100      	movs	r1, #0
   10d26:	4b6b      	ldr	r3, [pc, #428]	; (10ed4 <IncludeMacCommandsResponse+0x1f4>)
   10d28:	486b      	ldr	r0, [pc, #428]	; (10ed8 <IncludeMacCommandsResponse+0x1f8>)
   10d2a:	4798      	blx	r3
   10d2c:	9b01      	ldr	r3, [sp, #4]
   10d2e:	801c      	strh	r4, [r3, #0]
   10d30:	b007      	add	sp, #28
   10d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10d34:	2303      	movs	r3, #3
   10d36:	4373      	muls	r3, r6
   10d38:	18fb      	adds	r3, r7, r3
   10d3a:	3399      	adds	r3, #153	; 0x99
   10d3c:	781b      	ldrb	r3, [r3, #0]
   10d3e:	1e98      	subs	r0, r3, #2
   10d40:	280b      	cmp	r0, #11
   10d42:	d862      	bhi.n	10e0a <IncludeMacCommandsResponse+0x12a>
   10d44:	f003 fc42 	bl	145cc <__gnu_thumb1_case_uqi>
   10d48:	27a20698 	.word	0x27a20698
   10d4c:	7da26748 	.word	0x7da26748
   10d50:	a6616182 	.word	0xa6616182
   10d54:	2303      	movs	r3, #3
   10d56:	2200      	movs	r2, #0
   10d58:	552b      	strb	r3, [r5, r4]
   10d5a:	1c63      	adds	r3, r4, #1
   10d5c:	b29b      	uxth	r3, r3
   10d5e:	18eb      	adds	r3, r5, r3
   10d60:	4f5a      	ldr	r7, [pc, #360]	; (10ecc <IncludeMacCommandsResponse+0x1ec>)
   10d62:	485e      	ldr	r0, [pc, #376]	; (10edc <IncludeMacCommandsResponse+0x1fc>)
   10d64:	701a      	strb	r2, [r3, #0]
   10d66:	5c39      	ldrb	r1, [r7, r0]
   10d68:	3201      	adds	r2, #1
   10d6a:	4011      	ands	r1, r2
   10d6c:	466a      	mov	r2, sp
   10d6e:	9102      	str	r1, [sp, #8]
   10d70:	7a12      	ldrb	r2, [r2, #8]
   10d72:	701a      	strb	r2, [r3, #0]
   10d74:	5c3a      	ldrb	r2, [r7, r0]
   10d76:	4694      	mov	ip, r2
   10d78:	2202      	movs	r2, #2
   10d7a:	4661      	mov	r1, ip
   10d7c:	4211      	tst	r1, r2
   10d7e:	d002      	beq.n	10d86 <IncludeMacCommandsResponse+0xa6>
   10d80:	9902      	ldr	r1, [sp, #8]
   10d82:	430a      	orrs	r2, r1
   10d84:	701a      	strb	r2, [r3, #0]
   10d86:	2204      	movs	r2, #4
   10d88:	5c39      	ldrb	r1, [r7, r0]
   10d8a:	4211      	tst	r1, r2
   10d8c:	d071      	beq.n	10e72 <IncludeMacCommandsResponse+0x192>
   10d8e:	7819      	ldrb	r1, [r3, #0]
   10d90:	430a      	orrs	r2, r1
   10d92:	701a      	strb	r2, [r3, #0]
   10d94:	e06d      	b.n	10e72 <IncludeMacCommandsResponse+0x192>
   10d96:	2305      	movs	r3, #5
   10d98:	2103      	movs	r1, #3
   10d9a:	2200      	movs	r2, #0
   10d9c:	552b      	strb	r3, [r5, r4]
   10d9e:	1c63      	adds	r3, r4, #1
   10da0:	b29b      	uxth	r3, r3
   10da2:	4371      	muls	r1, r6
   10da4:	18eb      	adds	r3, r5, r3
   10da6:	701a      	strb	r2, [r3, #0]
   10da8:	4a48      	ldr	r2, [pc, #288]	; (10ecc <IncludeMacCommandsResponse+0x1ec>)
   10daa:	1851      	adds	r1, r2, r1
   10dac:	3198      	adds	r1, #152	; 0x98
   10dae:	7888      	ldrb	r0, [r1, #2]
   10db0:	0700      	lsls	r0, r0, #28
   10db2:	0fc0      	lsrs	r0, r0, #31
   10db4:	7018      	strb	r0, [r3, #0]
   10db6:	7889      	ldrb	r1, [r1, #2]
   10db8:	b2c7      	uxtb	r7, r0
   10dba:	06c9      	lsls	r1, r1, #27
   10dbc:	d502      	bpl.n	10dc4 <IncludeMacCommandsResponse+0xe4>
   10dbe:	2102      	movs	r1, #2
   10dc0:	4339      	orrs	r1, r7
   10dc2:	7019      	strb	r1, [r3, #0]
   10dc4:	2103      	movs	r1, #3
   10dc6:	4371      	muls	r1, r6
   10dc8:	1852      	adds	r2, r2, r1
   10dca:	3298      	adds	r2, #152	; 0x98
   10dcc:	7892      	ldrb	r2, [r2, #2]
   10dce:	0692      	lsls	r2, r2, #26
   10dd0:	d54f      	bpl.n	10e72 <IncludeMacCommandsResponse+0x192>
   10dd2:	7819      	ldrb	r1, [r3, #0]
   10dd4:	2204      	movs	r2, #4
   10dd6:	e7db      	b.n	10d90 <IncludeMacCommandsResponse+0xb0>
   10dd8:	a904      	add	r1, sp, #16
   10dda:	4b41      	ldr	r3, [pc, #260]	; (10ee0 <IncludeMacCommandsResponse+0x200>)
   10ddc:	200e      	movs	r0, #14
   10dde:	4798      	blx	r3
   10de0:	2306      	movs	r3, #6
   10de2:	4a3a      	ldr	r2, [pc, #232]	; (10ecc <IncludeMacCommandsResponse+0x1ec>)
   10de4:	552b      	strb	r3, [r5, r4]
   10de6:	32e8      	adds	r2, #232	; 0xe8
   10de8:	7811      	ldrb	r1, [r2, #0]
   10dea:	1c62      	adds	r2, r4, #1
   10dec:	b292      	uxth	r2, r2
   10dee:	54a9      	strb	r1, [r5, r2]
   10df0:	aa04      	add	r2, sp, #16
   10df2:	7812      	ldrb	r2, [r2, #0]
   10df4:	1ca3      	adds	r3, r4, #2
   10df6:	0011      	movs	r1, r2
   10df8:	3120      	adds	r1, #32
   10dfa:	3403      	adds	r4, #3
   10dfc:	b2c9      	uxtb	r1, r1
   10dfe:	b29b      	uxth	r3, r3
   10e00:	b2a4      	uxth	r4, r4
   10e02:	293f      	cmp	r1, #63	; 0x3f
   10e04:	d904      	bls.n	10e10 <IncludeMacCommandsResponse+0x130>
   10e06:	2220      	movs	r2, #32
   10e08:	54ea      	strb	r2, [r5, r3]
   10e0a:	3601      	adds	r6, #1
   10e0c:	b2f6      	uxtb	r6, r6
   10e0e:	e76e      	b.n	10cee <IncludeMacCommandsResponse+0xe>
   10e10:	213f      	movs	r1, #63	; 0x3f
   10e12:	400a      	ands	r2, r1
   10e14:	e7f8      	b.n	10e08 <IncludeMacCommandsResponse+0x128>
   10e16:	2307      	movs	r3, #7
   10e18:	2103      	movs	r1, #3
   10e1a:	2200      	movs	r2, #0
   10e1c:	552b      	strb	r3, [r5, r4]
   10e1e:	1c63      	adds	r3, r4, #1
   10e20:	4371      	muls	r1, r6
   10e22:	b29b      	uxth	r3, r3
   10e24:	18eb      	adds	r3, r5, r3
   10e26:	701a      	strb	r2, [r3, #0]
   10e28:	4a28      	ldr	r2, [pc, #160]	; (10ecc <IncludeMacCommandsResponse+0x1ec>)
   10e2a:	1852      	adds	r2, r2, r1
   10e2c:	3298      	adds	r2, #152	; 0x98
   10e2e:	7891      	ldrb	r1, [r2, #2]
   10e30:	09c9      	lsrs	r1, r1, #7
   10e32:	7019      	strb	r1, [r3, #0]
   10e34:	7892      	ldrb	r2, [r2, #2]
   10e36:	b2c8      	uxtb	r0, r1
   10e38:	0652      	lsls	r2, r2, #25
   10e3a:	d51a      	bpl.n	10e72 <IncludeMacCommandsResponse+0x192>
   10e3c:	2202      	movs	r2, #2
   10e3e:	4302      	orrs	r2, r0
   10e40:	e7a7      	b.n	10d92 <IncludeMacCommandsResponse+0xb2>
   10e42:	2209      	movs	r2, #9
   10e44:	1c63      	adds	r3, r4, #1
   10e46:	552a      	strb	r2, [r5, r4]
   10e48:	b29c      	uxth	r4, r3
   10e4a:	e7de      	b.n	10e0a <IncludeMacCommandsResponse+0x12a>
   10e4c:	230a      	movs	r3, #10
   10e4e:	2103      	movs	r1, #3
   10e50:	2200      	movs	r2, #0
   10e52:	552b      	strb	r3, [r5, r4]
   10e54:	1c63      	adds	r3, r4, #1
   10e56:	4371      	muls	r1, r6
   10e58:	b29b      	uxth	r3, r3
   10e5a:	18eb      	adds	r3, r5, r3
   10e5c:	701a      	strb	r2, [r3, #0]
   10e5e:	4a1b      	ldr	r2, [pc, #108]	; (10ecc <IncludeMacCommandsResponse+0x1ec>)
   10e60:	1852      	adds	r2, r2, r1
   10e62:	3298      	adds	r2, #152	; 0x98
   10e64:	7891      	ldrb	r1, [r2, #2]
   10e66:	09c9      	lsrs	r1, r1, #7
   10e68:	7019      	strb	r1, [r3, #0]
   10e6a:	78d2      	ldrb	r2, [r2, #3]
   10e6c:	b2c8      	uxtb	r0, r1
   10e6e:	07d2      	lsls	r2, r2, #31
   10e70:	d4e4      	bmi.n	10e3c <IncludeMacCommandsResponse+0x15c>
   10e72:	3402      	adds	r4, #2
   10e74:	b2a4      	uxth	r4, r4
   10e76:	e7c8      	b.n	10e0a <IncludeMacCommandsResponse+0x12a>
   10e78:	003b      	movs	r3, r7
   10e7a:	22ff      	movs	r2, #255	; 0xff
   10e7c:	33e5      	adds	r3, #229	; 0xe5
   10e7e:	701a      	strb	r2, [r3, #0]
   10e80:	2300      	movs	r3, #0
   10e82:	37e6      	adds	r7, #230	; 0xe6
   10e84:	703b      	strb	r3, [r7, #0]
   10e86:	3afd      	subs	r2, #253	; 0xfd
   10e88:	1c63      	adds	r3, r4, #1
   10e8a:	e7dc      	b.n	10e46 <IncludeMacCommandsResponse+0x166>
   10e8c:	1c62      	adds	r2, r4, #1
   10e8e:	552b      	strb	r3, [r5, r4]
   10e90:	b294      	uxth	r4, r2
   10e92:	e7ba      	b.n	10e0a <IncludeMacCommandsResponse+0x12a>
   10e94:	2201      	movs	r2, #1
   10e96:	4252      	negs	r2, r2
   10e98:	17d3      	asrs	r3, r2, #31
   10e9a:	9204      	str	r2, [sp, #16]
   10e9c:	9305      	str	r3, [sp, #20]
   10e9e:	4b11      	ldr	r3, [pc, #68]	; (10ee4 <IncludeMacCommandsResponse+0x204>)
   10ea0:	a904      	add	r1, sp, #16
   10ea2:	5cf8      	ldrb	r0, [r7, r3]
   10ea4:	4b10      	ldr	r3, [pc, #64]	; (10ee8 <IncludeMacCommandsResponse+0x208>)
   10ea6:	4798      	blx	r3
   10ea8:	2301      	movs	r3, #1
   10eaa:	228d      	movs	r2, #141	; 0x8d
   10eac:	425b      	negs	r3, r3
   10eae:	0092      	lsls	r2, r2, #2
   10eb0:	50bb      	str	r3, [r7, r2]
   10eb2:	3204      	adds	r2, #4
   10eb4:	54bb      	strb	r3, [r7, r2]
   10eb6:	238c      	movs	r3, #140	; 0x8c
   10eb8:	2201      	movs	r2, #1
   10eba:	009b      	lsls	r3, r3, #2
   10ebc:	54fa      	strb	r2, [r7, r3]
   10ebe:	2303      	movs	r3, #3
   10ec0:	4373      	muls	r3, r6
   10ec2:	18ff      	adds	r7, r7, r3
   10ec4:	3799      	adds	r7, #153	; 0x99
   10ec6:	18a2      	adds	r2, r4, r2
   10ec8:	783b      	ldrb	r3, [r7, #0]
   10eca:	e7e0      	b.n	10e8e <IncludeMacCommandsResponse+0x1ae>
   10ecc:	20003a6c 	.word	0x20003a6c
   10ed0:	0001a3bb 	.word	0x0001a3bb
   10ed4:	0001787d 	.word	0x0001787d
   10ed8:	20003c8f 	.word	0x20003c8f
   10edc:	00000223 	.word	0x00000223
   10ee0:	0000f2e9 	.word	0x0000f2e9
   10ee4:	00000231 	.word	0x00000231
   10ee8:	0000eb15 	.word	0x0000eb15

00010eec <UpdateJoinSuccessState>:
   10eec:	b5f0      	push	{r4, r5, r6, r7, lr}
   10eee:	4c32      	ldr	r4, [pc, #200]	; (10fb8 <UpdateJoinSuccessState+0xcc>)
   10ef0:	2104      	movs	r1, #4
   10ef2:	0022      	movs	r2, r4
   10ef4:	3294      	adds	r2, #148	; 0x94
   10ef6:	7813      	ldrb	r3, [r2, #0]
   10ef8:	2001      	movs	r0, #1
   10efa:	438b      	bics	r3, r1
   10efc:	7013      	strb	r3, [r2, #0]
   10efe:	0022      	movs	r2, r4
   10f00:	3284      	adds	r2, #132	; 0x84
   10f02:	7813      	ldrb	r3, [r2, #0]
   10f04:	b087      	sub	sp, #28
   10f06:	4303      	orrs	r3, r0
   10f08:	3107      	adds	r1, #7
   10f0a:	4f2c      	ldr	r7, [pc, #176]	; (10fbc <UpdateJoinSuccessState+0xd0>)
   10f0c:	7013      	strb	r3, [r2, #0]
   10f0e:	2500      	movs	r5, #0
   10f10:	47b8      	blx	r7
   10f12:	0023      	movs	r3, r4
   10f14:	2115      	movs	r1, #21
   10f16:	3388      	adds	r3, #136	; 0x88
   10f18:	0028      	movs	r0, r5
   10f1a:	601d      	str	r5, [r3, #0]
   10f1c:	47b8      	blx	r7
   10f1e:	0023      	movs	r3, r4
   10f20:	2020      	movs	r0, #32
   10f22:	33ff      	adds	r3, #255	; 0xff
   10f24:	7f5b      	ldrb	r3, [r3, #29]
   10f26:	4e26      	ldr	r6, [pc, #152]	; (10fc0 <UpdateJoinSuccessState+0xd4>)
   10f28:	4203      	tst	r3, r0
   10f2a:	d00c      	beq.n	10f46 <UpdateJoinSuccessState+0x5a>
   10f2c:	0023      	movs	r3, r4
   10f2e:	a904      	add	r1, sp, #16
   10f30:	3380      	adds	r3, #128	; 0x80
   10f32:	710d      	strb	r5, [r1, #4]
   10f34:	701d      	strb	r5, [r3, #0]
   10f36:	6765      	str	r5, [r4, #116]	; 0x74
   10f38:	67a5      	str	r5, [r4, #120]	; 0x78
   10f3a:	47b0      	blx	r6
   10f3c:	210f      	movs	r1, #15
   10f3e:	2021      	movs	r0, #33	; 0x21
   10f40:	4469      	add	r1, sp
   10f42:	700d      	strb	r5, [r1, #0]
   10f44:	47b0      	blx	r6
   10f46:	0023      	movs	r3, r4
   10f48:	2500      	movs	r5, #0
   10f4a:	338c      	adds	r3, #140	; 0x8c
   10f4c:	210a      	movs	r1, #10
   10f4e:	2001      	movs	r0, #1
   10f50:	601d      	str	r5, [r3, #0]
   10f52:	47b8      	blx	r7
   10f54:	0023      	movs	r3, r4
   10f56:	33ca      	adds	r3, #202	; 0xca
   10f58:	801d      	strh	r5, [r3, #0]
   10f5a:	0022      	movs	r2, r4
   10f5c:	0023      	movs	r3, r4
   10f5e:	210e      	movs	r1, #14
   10f60:	3284      	adds	r2, #132	; 0x84
   10f62:	33f6      	adds	r3, #246	; 0xf6
   10f64:	701d      	strb	r5, [r3, #0]
   10f66:	7813      	ldrb	r3, [r2, #0]
   10f68:	2039      	movs	r0, #57	; 0x39
   10f6a:	438b      	bics	r3, r1
   10f6c:	0029      	movs	r1, r5
   10f6e:	7013      	strb	r3, [r2, #0]
   10f70:	47b0      	blx	r6
   10f72:	0023      	movs	r3, r4
   10f74:	3385      	adds	r3, #133	; 0x85
   10f76:	781b      	ldrb	r3, [r3, #0]
   10f78:	079b      	lsls	r3, r3, #30
   10f7a:	d50c      	bpl.n	10f96 <UpdateJoinSuccessState+0xaa>
   10f7c:	0023      	movs	r3, r4
   10f7e:	21fa      	movs	r1, #250	; 0xfa
   10f80:	3390      	adds	r3, #144	; 0x90
   10f82:	681b      	ldr	r3, [r3, #0]
   10f84:	34f0      	adds	r4, #240	; 0xf0
   10f86:	0089      	lsls	r1, r1, #2
   10f88:	7820      	ldrb	r0, [r4, #0]
   10f8a:	4359      	muls	r1, r3
   10f8c:	9500      	str	r5, [sp, #0]
   10f8e:	4b0d      	ldr	r3, [pc, #52]	; (10fc4 <UpdateJoinSuccessState+0xd8>)
   10f90:	002a      	movs	r2, r5
   10f92:	4c0d      	ldr	r4, [pc, #52]	; (10fc8 <UpdateJoinSuccessState+0xdc>)
   10f94:	47a0      	blx	r4
   10f96:	490d      	ldr	r1, [pc, #52]	; (10fcc <UpdateJoinSuccessState+0xe0>)
   10f98:	794a      	ldrb	r2, [r1, #5]
   10f9a:	790b      	ldrb	r3, [r1, #4]
   10f9c:	0212      	lsls	r2, r2, #8
   10f9e:	431a      	orrs	r2, r3
   10fa0:	798b      	ldrb	r3, [r1, #6]
   10fa2:	041b      	lsls	r3, r3, #16
   10fa4:	431a      	orrs	r2, r3
   10fa6:	79cb      	ldrb	r3, [r1, #7]
   10fa8:	061b      	lsls	r3, r3, #24
   10faa:	4313      	orrs	r3, r2
   10fac:	d001      	beq.n	10fb2 <UpdateJoinSuccessState+0xc6>
   10fae:	2008      	movs	r0, #8
   10fb0:	4798      	blx	r3
   10fb2:	b007      	add	sp, #28
   10fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10fb6:	46c0      	nop			; (mov r8, r8)
   10fb8:	20003a6c 	.word	0x20003a6c
   10fbc:	000098a5 	.word	0x000098a5
   10fc0:	0000e07d 	.word	0x0000e07d
   10fc4:	0001110d 	.word	0x0001110d
   10fc8:	0000e58d 	.word	0x0000e58d
   10fcc:	20003dc8 	.word	0x20003dc8

00010fd0 <PrepareSessionKeys>:
   10fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10fd2:	0004      	movs	r4, r0
   10fd4:	2603      	movs	r6, #3
   10fd6:	000d      	movs	r5, r1
   10fd8:	0017      	movs	r7, r2
   10fda:	4b09      	ldr	r3, [pc, #36]	; (11000 <PrepareSessionKeys+0x30>)
   10fdc:	2210      	movs	r2, #16
   10fde:	2100      	movs	r1, #0
   10fe0:	4798      	blx	r3
   10fe2:	0032      	movs	r2, r6
   10fe4:	0029      	movs	r1, r5
   10fe6:	1c60      	adds	r0, r4, #1
   10fe8:	4d06      	ldr	r5, [pc, #24]	; (11004 <PrepareSessionKeys+0x34>)
   10fea:	47a8      	blx	r5
   10fec:	0032      	movs	r2, r6
   10fee:	0039      	movs	r1, r7
   10ff0:	1d20      	adds	r0, r4, #4
   10ff2:	47a8      	blx	r5
   10ff4:	1de0      	adds	r0, r4, #7
   10ff6:	2202      	movs	r2, #2
   10ff8:	4903      	ldr	r1, [pc, #12]	; (11008 <PrepareSessionKeys+0x38>)
   10ffa:	47a8      	blx	r5
   10ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10ffe:	46c0      	nop			; (mov r8, r8)
   11000:	0001787d 	.word	0x0001787d
   11004:	0001786b 	.word	0x0001786b
   11008:	20003b38 	.word	0x20003b38

0001100c <AssembleEncryptionBlock>:
   1100c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1100e:	001e      	movs	r6, r3
   11010:	4c0b      	ldr	r4, [pc, #44]	; (11040 <AssembleEncryptionBlock+0x34>)
   11012:	0017      	movs	r7, r2
   11014:	4b0b      	ldr	r3, [pc, #44]	; (11044 <AssembleEncryptionBlock+0x38>)
   11016:	0005      	movs	r5, r0
   11018:	9101      	str	r1, [sp, #4]
   1101a:	2210      	movs	r2, #16
   1101c:	2100      	movs	r1, #0
   1101e:	0020      	movs	r0, r4
   11020:	4798      	blx	r3
   11022:	7026      	strb	r6, [r4, #0]
   11024:	2604      	movs	r6, #4
   11026:	7165      	strb	r5, [r4, #5]
   11028:	0032      	movs	r2, r6
   1102a:	4d07      	ldr	r5, [pc, #28]	; (11048 <AssembleEncryptionBlock+0x3c>)
   1102c:	a908      	add	r1, sp, #32
   1102e:	1da0      	adds	r0, r4, #6
   11030:	47a8      	blx	r5
   11032:	0020      	movs	r0, r4
   11034:	0032      	movs	r2, r6
   11036:	a901      	add	r1, sp, #4
   11038:	300a      	adds	r0, #10
   1103a:	47a8      	blx	r5
   1103c:	73e7      	strb	r7, [r4, #15]
   1103e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   11040:	200020c5 	.word	0x200020c5
   11044:	0001787d 	.word	0x0001787d
   11048:	0001786b 	.word	0x0001786b

0001104c <ConfigureRadio>:
   1104c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1104e:	0001      	movs	r1, r0
   11050:	0005      	movs	r5, r0
   11052:	4c11      	ldr	r4, [pc, #68]	; (11098 <ConfigureRadio+0x4c>)
   11054:	3109      	adds	r1, #9
   11056:	2009      	movs	r0, #9
   11058:	47a0      	blx	r4
   1105a:	0029      	movs	r1, r5
   1105c:	2001      	movs	r0, #1
   1105e:	47a0      	blx	r4
   11060:	1d29      	adds	r1, r5, #4
   11062:	200a      	movs	r0, #10
   11064:	47a0      	blx	r4
   11066:	7a6b      	ldrb	r3, [r5, #9]
   11068:	2b01      	cmp	r3, #1
   1106a:	d10b      	bne.n	11084 <ConfigureRadio+0x38>
   1106c:	0029      	movs	r1, r5
   1106e:	2016      	movs	r0, #22
   11070:	310b      	adds	r1, #11
   11072:	47a0      	blx	r4
   11074:	0029      	movs	r1, r5
   11076:	2007      	movs	r0, #7
   11078:	310a      	adds	r1, #10
   1107a:	47a0      	blx	r4
   1107c:	2000      	movs	r0, #0
   1107e:	4907      	ldr	r1, [pc, #28]	; (1109c <ConfigureRadio+0x50>)
   11080:	47a0      	blx	r4
   11082:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   11084:	466b      	mov	r3, sp
   11086:	1dd9      	adds	r1, r3, #7
   11088:	2303      	movs	r3, #3
   1108a:	2013      	movs	r0, #19
   1108c:	700b      	strb	r3, [r1, #0]
   1108e:	47a0      	blx	r4
   11090:	4903      	ldr	r1, [pc, #12]	; (110a0 <ConfigureRadio+0x54>)
   11092:	2012      	movs	r0, #18
   11094:	e7f4      	b.n	11080 <ConfigureRadio+0x34>
   11096:	46c0      	nop			; (mov r8, r8)
   11098:	0000f3d9 	.word	0x0000f3d9
   1109c:	20003b6c 	.word	0x20003b6c
   110a0:	0001a3ac 	.word	0x0001a3ac

000110a4 <StopReceiveWindow2Timer>:
   110a4:	b510      	push	{r4, lr}
   110a6:	4c0b      	ldr	r4, [pc, #44]	; (110d4 <StopReceiveWindow2Timer+0x30>)
   110a8:	0022      	movs	r2, r4
   110aa:	32fd      	adds	r2, #253	; 0xfd
   110ac:	7812      	ldrb	r2, [r2, #0]
   110ae:	2a01      	cmp	r2, #1
   110b0:	d10e      	bne.n	110d0 <StopReceiveWindow2Timer+0x2c>
   110b2:	0021      	movs	r1, r4
   110b4:	200e      	movs	r0, #14
   110b6:	3184      	adds	r1, #132	; 0x84
   110b8:	780a      	ldrb	r2, [r1, #0]
   110ba:	34ee      	adds	r4, #238	; 0xee
   110bc:	4382      	bics	r2, r0
   110be:	700a      	strb	r2, [r1, #0]
   110c0:	7820      	ldrb	r0, [r4, #0]
   110c2:	4b05      	ldr	r3, [pc, #20]	; (110d8 <StopReceiveWindow2Timer+0x34>)
   110c4:	4798      	blx	r3
   110c6:	2800      	cmp	r0, #0
   110c8:	d002      	beq.n	110d0 <StopReceiveWindow2Timer+0x2c>
   110ca:	7820      	ldrb	r0, [r4, #0]
   110cc:	4b03      	ldr	r3, [pc, #12]	; (110dc <StopReceiveWindow2Timer+0x38>)
   110ce:	4798      	blx	r3
   110d0:	bd10      	pop	{r4, pc}
   110d2:	46c0      	nop			; (mov r8, r8)
   110d4:	20003a6c 	.word	0x20003a6c
   110d8:	0000e725 	.word	0x0000e725
   110dc:	0000e8a5 	.word	0x0000e8a5

000110e0 <LorawanLinkCheckCallback.part.1>:
   110e0:	4b07      	ldr	r3, [pc, #28]	; (11100 <LorawanLinkCheckCallback.part.1+0x20>)
   110e2:	b513      	push	{r0, r1, r4, lr}
   110e4:	001a      	movs	r2, r3
   110e6:	21fa      	movs	r1, #250	; 0xfa
   110e8:	3290      	adds	r2, #144	; 0x90
   110ea:	6812      	ldr	r2, [r2, #0]
   110ec:	0089      	lsls	r1, r1, #2
   110ee:	4351      	muls	r1, r2
   110f0:	2200      	movs	r2, #0
   110f2:	33f0      	adds	r3, #240	; 0xf0
   110f4:	7818      	ldrb	r0, [r3, #0]
   110f6:	4c03      	ldr	r4, [pc, #12]	; (11104 <LorawanLinkCheckCallback.part.1+0x24>)
   110f8:	9200      	str	r2, [sp, #0]
   110fa:	4b03      	ldr	r3, [pc, #12]	; (11108 <LorawanLinkCheckCallback.part.1+0x28>)
   110fc:	47a0      	blx	r4
   110fe:	bd13      	pop	{r0, r1, r4, pc}
   11100:	20003a6c 	.word	0x20003a6c
   11104:	0000e58d 	.word	0x0000e58d
   11108:	0001110d 	.word	0x0001110d

0001110c <LorawanLinkCheckCallback>:
   1110c:	4b17      	ldr	r3, [pc, #92]	; (1116c <LorawanLinkCheckCallback+0x60>)
   1110e:	20a0      	movs	r0, #160	; 0xa0
   11110:	001a      	movs	r2, r3
   11112:	2180      	movs	r1, #128	; 0x80
   11114:	b510      	push	{r4, lr}
   11116:	3284      	adds	r2, #132	; 0x84
   11118:	8812      	ldrh	r2, [r2, #0]
   1111a:	0080      	lsls	r0, r0, #2
   1111c:	0089      	lsls	r1, r1, #2
   1111e:	4002      	ands	r2, r0
   11120:	428a      	cmp	r2, r1
   11122:	d11c      	bne.n	1115e <LorawanLinkCheckCallback+0x52>
   11124:	001a      	movs	r2, r3
   11126:	32e0      	adds	r2, #224	; 0xe0
   11128:	7810      	ldrb	r0, [r2, #0]
   1112a:	2403      	movs	r4, #3
   1112c:	2200      	movs	r2, #0
   1112e:	b2d1      	uxtb	r1, r2
   11130:	4281      	cmp	r1, r0
   11132:	d30d      	bcc.n	11150 <LorawanLinkCheckCallback+0x44>
   11134:	d113      	bne.n	1115e <LorawanLinkCheckCallback+0x52>
   11136:	2203      	movs	r2, #3
   11138:	434a      	muls	r2, r1
   1113a:	2102      	movs	r1, #2
   1113c:	189a      	adds	r2, r3, r2
   1113e:	3299      	adds	r2, #153	; 0x99
   11140:	7011      	strb	r1, [r2, #0]
   11142:	280f      	cmp	r0, #15
   11144:	d80b      	bhi.n	1115e <LorawanLinkCheckCallback+0x52>
   11146:	001a      	movs	r2, r3
   11148:	3001      	adds	r0, #1
   1114a:	32e0      	adds	r2, #224	; 0xe0
   1114c:	7010      	strb	r0, [r2, #0]
   1114e:	e006      	b.n	1115e <LorawanLinkCheckCallback+0x52>
   11150:	0021      	movs	r1, r4
   11152:	3201      	adds	r2, #1
   11154:	4351      	muls	r1, r2
   11156:	3196      	adds	r1, #150	; 0x96
   11158:	5c59      	ldrb	r1, [r3, r1]
   1115a:	2902      	cmp	r1, #2
   1115c:	d1e7      	bne.n	1112e <LorawanLinkCheckCallback+0x22>
   1115e:	3385      	adds	r3, #133	; 0x85
   11160:	781b      	ldrb	r3, [r3, #0]
   11162:	079b      	lsls	r3, r3, #30
   11164:	d501      	bpl.n	1116a <LorawanLinkCheckCallback+0x5e>
   11166:	4b02      	ldr	r3, [pc, #8]	; (11170 <LorawanLinkCheckCallback+0x64>)
   11168:	4798      	blx	r3
   1116a:	bd10      	pop	{r4, pc}
   1116c:	20003a6c 	.word	0x20003a6c
   11170:	000110e1 	.word	0x000110e1

00011174 <LORAWAN_Send>:
   11174:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11176:	4c37      	ldr	r4, [pc, #220]	; (11254 <LORAWAN_Send+0xe0>)
   11178:	0006      	movs	r6, r0
   1117a:	0023      	movs	r3, r4
   1117c:	3384      	adds	r3, #132	; 0x84
   1117e:	781b      	ldrb	r3, [r3, #0]
   11180:	250f      	movs	r5, #15
   11182:	b25a      	sxtb	r2, r3
   11184:	2a00      	cmp	r2, #0
   11186:	db0b      	blt.n	111a0 <LORAWAN_Send+0x2c>
   11188:	3d03      	subs	r5, #3
   1118a:	065a      	lsls	r2, r3, #25
   1118c:	d408      	bmi.n	111a0 <LORAWAN_Send+0x2c>
   1118e:	3d03      	subs	r5, #3
   11190:	07db      	lsls	r3, r3, #31
   11192:	d505      	bpl.n	111a0 <LORAWAN_Send+0x2c>
   11194:	2388      	movs	r3, #136	; 0x88
   11196:	009b      	lsls	r3, r3, #2
   11198:	5ce7      	ldrb	r7, [r4, r3]
   1119a:	2f00      	cmp	r7, #0
   1119c:	d102      	bne.n	111a4 <LORAWAN_Send+0x30>
   1119e:	2511      	movs	r5, #17
   111a0:	0028      	movs	r0, r5
   111a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   111a4:	2800      	cmp	r0, #0
   111a6:	d10f      	bne.n	111c8 <LORAWAN_Send+0x54>
   111a8:	2700      	movs	r7, #0
   111aa:	0023      	movs	r3, r4
   111ac:	3388      	adds	r3, #136	; 0x88
   111ae:	681b      	ldr	r3, [r3, #0]
   111b0:	3301      	adds	r3, #1
   111b2:	d123      	bne.n	111fc <LORAWAN_Send+0x88>
   111b4:	2001      	movs	r0, #1
   111b6:	3484      	adds	r4, #132	; 0x84
   111b8:	78a3      	ldrb	r3, [r4, #2]
   111ba:	210b      	movs	r1, #11
   111bc:	4303      	orrs	r3, r0
   111be:	70a3      	strb	r3, [r4, #2]
   111c0:	4b25      	ldr	r3, [pc, #148]	; (11258 <LORAWAN_Send+0xe4>)
   111c2:	4798      	blx	r3
   111c4:	250d      	movs	r5, #13
   111c6:	e7eb      	b.n	111a0 <LORAWAN_Send+0x2c>
   111c8:	7843      	ldrb	r3, [r0, #1]
   111ca:	7a02      	ldrb	r2, [r0, #8]
   111cc:	3b01      	subs	r3, #1
   111ce:	b2db      	uxtb	r3, r3
   111d0:	9201      	str	r2, [sp, #4]
   111d2:	2bdf      	cmp	r3, #223	; 0xdf
   111d4:	d902      	bls.n	111dc <LORAWAN_Send+0x68>
   111d6:	250a      	movs	r5, #10
   111d8:	2a00      	cmp	r2, #0
   111da:	d1e1      	bne.n	111a0 <LORAWAN_Send+0x2c>
   111dc:	4b1f      	ldr	r3, [pc, #124]	; (1125c <LORAWAN_Send+0xe8>)
   111de:	4798      	blx	r3
   111e0:	4684      	mov	ip, r0
   111e2:	9b01      	ldr	r3, [sp, #4]
   111e4:	9000      	str	r0, [sp, #0]
   111e6:	4463      	add	r3, ip
   111e8:	001d      	movs	r5, r3
   111ea:	4b1d      	ldr	r3, [pc, #116]	; (11260 <LORAWAN_Send+0xec>)
   111ec:	4798      	blx	r3
   111ee:	4285      	cmp	r5, r0
   111f0:	ddda      	ble.n	111a8 <LORAWAN_Send+0x34>
   111f2:	9b00      	ldr	r3, [sp, #0]
   111f4:	250e      	movs	r5, #14
   111f6:	2b00      	cmp	r3, #0
   111f8:	d0d2      	beq.n	111a0 <LORAWAN_Send+0x2c>
   111fa:	e7d6      	b.n	111aa <LORAWAN_Send+0x36>
   111fc:	0023      	movs	r3, r4
   111fe:	33fd      	adds	r3, #253	; 0xfd
   11200:	781b      	ldrb	r3, [r3, #0]
   11202:	2b04      	cmp	r3, #4
   11204:	d01d      	beq.n	11242 <LORAWAN_Send+0xce>
   11206:	0023      	movs	r3, r4
   11208:	33fd      	adds	r3, #253	; 0xfd
   1120a:	781b      	ldrb	r3, [r3, #0]
   1120c:	2b01      	cmp	r3, #1
   1120e:	d105      	bne.n	1121c <LORAWAN_Send+0xa8>
   11210:	0023      	movs	r3, r4
   11212:	3384      	adds	r3, #132	; 0x84
   11214:	781a      	ldrb	r2, [r3, #0]
   11216:	230e      	movs	r3, #14
   11218:	421a      	tst	r2, r3
   1121a:	d1c0      	bne.n	1119e <LORAWAN_Send+0x2a>
   1121c:	0023      	movs	r3, r4
   1121e:	33fc      	adds	r3, #252	; 0xfc
   11220:	2f00      	cmp	r7, #0
   11222:	d113      	bne.n	1124c <LORAWAN_Send+0xd8>
   11224:	2508      	movs	r5, #8
   11226:	60de      	str	r6, [r3, #12]
   11228:	2388      	movs	r3, #136	; 0x88
   1122a:	2200      	movs	r2, #0
   1122c:	009b      	lsls	r3, r3, #2
   1122e:	54e2      	strb	r2, [r4, r3]
   11230:	2001      	movs	r0, #1
   11232:	4b0c      	ldr	r3, [pc, #48]	; (11264 <LORAWAN_Send+0xf0>)
   11234:	4798      	blx	r3
   11236:	2320      	movs	r3, #32
   11238:	3494      	adds	r4, #148	; 0x94
   1123a:	7822      	ldrb	r2, [r4, #0]
   1123c:	4313      	orrs	r3, r2
   1123e:	7023      	strb	r3, [r4, #0]
   11240:	e7ae      	b.n	111a0 <LORAWAN_Send+0x2c>
   11242:	4b09      	ldr	r3, [pc, #36]	; (11268 <LORAWAN_Send+0xf4>)
   11244:	4798      	blx	r3
   11246:	2808      	cmp	r0, #8
   11248:	d1a9      	bne.n	1119e <LORAWAN_Send+0x2a>
   1124a:	e7dc      	b.n	11206 <LORAWAN_Send+0x92>
   1124c:	2200      	movs	r2, #0
   1124e:	2511      	movs	r5, #17
   11250:	60da      	str	r2, [r3, #12]
   11252:	e7e9      	b.n	11228 <LORAWAN_Send+0xb4>
   11254:	20003a6c 	.word	0x20003a6c
   11258:	000098a5 	.word	0x000098a5
   1125c:	00010c41 	.word	0x00010c41
   11260:	00010c81 	.word	0x00010c81
   11264:	0000f265 	.word	0x0000f265
   11268:	00013db1 	.word	0x00013db1

0001126c <AutomaticReplyCallback>:
   1126c:	b510      	push	{r4, lr}
   1126e:	4c0d      	ldr	r4, [pc, #52]	; (112a4 <AutomaticReplyCallback+0x38>)
   11270:	0023      	movs	r3, r4
   11272:	33fd      	adds	r3, #253	; 0xfd
   11274:	781b      	ldrb	r3, [r3, #0]
   11276:	2b01      	cmp	r3, #1
   11278:	d10e      	bne.n	11298 <AutomaticReplyCallback+0x2c>
   1127a:	0022      	movs	r2, r4
   1127c:	210e      	movs	r1, #14
   1127e:	3284      	adds	r2, #132	; 0x84
   11280:	7813      	ldrb	r3, [r2, #0]
   11282:	438b      	bics	r3, r1
   11284:	7013      	strb	r3, [r2, #0]
   11286:	4b08      	ldr	r3, [pc, #32]	; (112a8 <AutomaticReplyCallback+0x3c>)
   11288:	2000      	movs	r0, #0
   1128a:	4798      	blx	r3
   1128c:	2208      	movs	r2, #8
   1128e:	3494      	adds	r4, #148	; 0x94
   11290:	7823      	ldrb	r3, [r4, #0]
   11292:	4393      	bics	r3, r2
   11294:	7023      	strb	r3, [r4, #0]
   11296:	bd10      	pop	{r4, pc}
   11298:	2b04      	cmp	r3, #4
   1129a:	d1f4      	bne.n	11286 <AutomaticReplyCallback+0x1a>
   1129c:	4b03      	ldr	r3, [pc, #12]	; (112ac <AutomaticReplyCallback+0x40>)
   1129e:	4798      	blx	r3
   112a0:	e7f1      	b.n	11286 <AutomaticReplyCallback+0x1a>
   112a2:	46c0      	nop			; (mov r8, r8)
   112a4:	20003a6c 	.word	0x20003a6c
   112a8:	00011175 	.word	0x00011175
   112ac:	0000fced 	.word	0x0000fced

000112b0 <LorawanLinkCheckConfigure>:
   112b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   112b2:	23fa      	movs	r3, #250	; 0xfa
   112b4:	4c21      	ldr	r4, [pc, #132]	; (1133c <LorawanLinkCheckConfigure+0x8c>)
   112b6:	009b      	lsls	r3, r3, #2
   112b8:	0022      	movs	r2, r4
   112ba:	0025      	movs	r5, r4
   112bc:	4343      	muls	r3, r0
   112be:	3290      	adds	r2, #144	; 0x90
   112c0:	0006      	movs	r6, r0
   112c2:	2102      	movs	r1, #2
   112c4:	2000      	movs	r0, #0
   112c6:	4f1e      	ldr	r7, [pc, #120]	; (11340 <LorawanLinkCheckConfigure+0x90>)
   112c8:	6013      	str	r3, [r2, #0]
   112ca:	3584      	adds	r5, #132	; 0x84
   112cc:	47b8      	blx	r7
   112ce:	2e00      	cmp	r6, #0
   112d0:	d127      	bne.n	11322 <LorawanLinkCheckConfigure+0x72>
   112d2:	0023      	movs	r3, r4
   112d4:	33f0      	adds	r3, #240	; 0xf0
   112d6:	7818      	ldrb	r0, [r3, #0]
   112d8:	4b1a      	ldr	r3, [pc, #104]	; (11344 <LorawanLinkCheckConfigure+0x94>)
   112da:	4798      	blx	r3
   112dc:	2202      	movs	r2, #2
   112de:	786b      	ldrb	r3, [r5, #1]
   112e0:	210b      	movs	r1, #11
   112e2:	4393      	bics	r3, r2
   112e4:	706b      	strb	r3, [r5, #1]
   112e6:	2001      	movs	r0, #1
   112e8:	47b8      	blx	r7
   112ea:	0023      	movs	r3, r4
   112ec:	2701      	movs	r7, #1
   112ee:	33e0      	adds	r3, #224	; 0xe0
   112f0:	781b      	ldrb	r3, [r3, #0]
   112f2:	0030      	movs	r0, r6
   112f4:	0032      	movs	r2, r6
   112f6:	36ff      	adds	r6, #255	; 0xff
   112f8:	429a      	cmp	r2, r3
   112fa:	d304      	bcc.n	11306 <LorawanLinkCheckConfigure+0x56>
   112fc:	2800      	cmp	r0, #0
   112fe:	d001      	beq.n	11304 <LorawanLinkCheckConfigure+0x54>
   11300:	34e0      	adds	r4, #224	; 0xe0
   11302:	7023      	strb	r3, [r4, #0]
   11304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11306:	2103      	movs	r1, #3
   11308:	4351      	muls	r1, r2
   1130a:	1861      	adds	r1, r4, r1
   1130c:	3199      	adds	r1, #153	; 0x99
   1130e:	780d      	ldrb	r5, [r1, #0]
   11310:	2d02      	cmp	r5, #2
   11312:	d103      	bne.n	1131c <LorawanLinkCheckConfigure+0x6c>
   11314:	0038      	movs	r0, r7
   11316:	3b01      	subs	r3, #1
   11318:	700e      	strb	r6, [r1, #0]
   1131a:	b2db      	uxtb	r3, r3
   1131c:	3201      	adds	r2, #1
   1131e:	b2d2      	uxtb	r2, r2
   11320:	e7ea      	b.n	112f8 <LorawanLinkCheckConfigure+0x48>
   11322:	2302      	movs	r3, #2
   11324:	786a      	ldrb	r2, [r5, #1]
   11326:	210b      	movs	r1, #11
   11328:	4313      	orrs	r3, r2
   1132a:	706b      	strb	r3, [r5, #1]
   1132c:	2001      	movs	r0, #1
   1132e:	47b8      	blx	r7
   11330:	782b      	ldrb	r3, [r5, #0]
   11332:	07db      	lsls	r3, r3, #31
   11334:	d5e6      	bpl.n	11304 <LorawanLinkCheckConfigure+0x54>
   11336:	4b04      	ldr	r3, [pc, #16]	; (11348 <LorawanLinkCheckConfigure+0x98>)
   11338:	4798      	blx	r3
   1133a:	e7e3      	b.n	11304 <LorawanLinkCheckConfigure+0x54>
   1133c:	20003a6c 	.word	0x20003a6c
   11340:	000098a5 	.word	0x000098a5
   11344:	0000e8a5 	.word	0x0000e8a5
   11348:	000110e1 	.word	0x000110e1

0001134c <EncodeDeviceTimeReq>:
   1134c:	4b08      	ldr	r3, [pc, #32]	; (11370 <EncodeDeviceTimeReq+0x24>)
   1134e:	b510      	push	{r4, lr}
   11350:	001c      	movs	r4, r3
   11352:	34e0      	adds	r4, #224	; 0xe0
   11354:	7822      	ldrb	r2, [r4, #0]
   11356:	2015      	movs	r0, #21
   11358:	2a0f      	cmp	r2, #15
   1135a:	d808      	bhi.n	1136e <EncodeDeviceTimeReq+0x22>
   1135c:	2103      	movs	r1, #3
   1135e:	4351      	muls	r1, r2
   11360:	185b      	adds	r3, r3, r1
   11362:	210d      	movs	r1, #13
   11364:	3399      	adds	r3, #153	; 0x99
   11366:	3201      	adds	r2, #1
   11368:	7019      	strb	r1, [r3, #0]
   1136a:	7022      	strb	r2, [r4, #0]
   1136c:	380d      	subs	r0, #13
   1136e:	bd10      	pop	{r4, pc}
   11370:	20003a6c 	.word	0x20003a6c

00011374 <EncodeLinkCheckReq>:
   11374:	4b08      	ldr	r3, [pc, #32]	; (11398 <EncodeLinkCheckReq+0x24>)
   11376:	b510      	push	{r4, lr}
   11378:	001c      	movs	r4, r3
   1137a:	34e0      	adds	r4, #224	; 0xe0
   1137c:	7822      	ldrb	r2, [r4, #0]
   1137e:	2015      	movs	r0, #21
   11380:	2a0f      	cmp	r2, #15
   11382:	d808      	bhi.n	11396 <EncodeLinkCheckReq+0x22>
   11384:	2103      	movs	r1, #3
   11386:	4351      	muls	r1, r2
   11388:	185b      	adds	r3, r3, r1
   1138a:	2102      	movs	r1, #2
   1138c:	3399      	adds	r3, #153	; 0x99
   1138e:	3201      	adds	r2, #1
   11390:	7019      	strb	r1, [r3, #0]
   11392:	7022      	strb	r2, [r4, #0]
   11394:	380d      	subs	r0, #13
   11396:	bd10      	pop	{r4, pc}
   11398:	20003a6c 	.word	0x20003a6c

0001139c <UpdateCurrentDataRate>:
   1139c:	b510      	push	{r4, lr}
   1139e:	4b04      	ldr	r3, [pc, #16]	; (113b0 <UpdateCurrentDataRate+0x14>)
   113a0:	210c      	movs	r1, #12
   113a2:	33e7      	adds	r3, #231	; 0xe7
   113a4:	7018      	strb	r0, [r3, #0]
   113a6:	2001      	movs	r0, #1
   113a8:	4b02      	ldr	r3, [pc, #8]	; (113b4 <UpdateCurrentDataRate+0x18>)
   113aa:	4798      	blx	r3
   113ac:	bd10      	pop	{r4, pc}
   113ae:	46c0      	nop			; (mov r8, r8)
   113b0:	20003a6c 	.word	0x20003a6c
   113b4:	000098a5 	.word	0x000098a5

000113b8 <UpdateDLSettings>:
   113b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   113ba:	466b      	mov	r3, sp
   113bc:	1dde      	adds	r6, r3, #7
   113be:	1d9c      	adds	r4, r3, #6
   113c0:	71d8      	strb	r0, [r3, #7]
   113c2:	7021      	strb	r1, [r4, #0]
   113c4:	2017      	movs	r0, #23
   113c6:	0031      	movs	r1, r6
   113c8:	4d0c      	ldr	r5, [pc, #48]	; (113fc <UpdateDLSettings+0x44>)
   113ca:	47a8      	blx	r5
   113cc:	2808      	cmp	r0, #8
   113ce:	d107      	bne.n	113e0 <UpdateDLSettings+0x28>
   113d0:	4b0b      	ldr	r3, [pc, #44]	; (11400 <UpdateDLSettings+0x48>)
   113d2:	7832      	ldrb	r2, [r6, #0]
   113d4:	336e      	adds	r3, #110	; 0x6e
   113d6:	701a      	strb	r2, [r3, #0]
   113d8:	2100      	movs	r1, #0
   113da:	3807      	subs	r0, #7
   113dc:	4b09      	ldr	r3, [pc, #36]	; (11404 <UpdateDLSettings+0x4c>)
   113de:	4798      	blx	r3
   113e0:	0021      	movs	r1, r4
   113e2:	2018      	movs	r0, #24
   113e4:	47a8      	blx	r5
   113e6:	2808      	cmp	r0, #8
   113e8:	d107      	bne.n	113fa <UpdateDLSettings+0x42>
   113ea:	2101      	movs	r1, #1
   113ec:	4b04      	ldr	r3, [pc, #16]	; (11400 <UpdateDLSettings+0x48>)
   113ee:	7822      	ldrb	r2, [r4, #0]
   113f0:	33f7      	adds	r3, #247	; 0xf7
   113f2:	701a      	strb	r2, [r3, #0]
   113f4:	0008      	movs	r0, r1
   113f6:	4b03      	ldr	r3, [pc, #12]	; (11404 <UpdateDLSettings+0x4c>)
   113f8:	4798      	blx	r3
   113fa:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   113fc:	0000e061 	.word	0x0000e061
   11400:	20003a6c 	.word	0x20003a6c
   11404:	000098a5 	.word	0x000098a5

00011408 <UpdateTxPower>:
   11408:	b510      	push	{r4, lr}
   1140a:	4b04      	ldr	r3, [pc, #16]	; (1141c <UpdateTxPower+0x14>)
   1140c:	210a      	movs	r1, #10
   1140e:	33e9      	adds	r3, #233	; 0xe9
   11410:	7018      	strb	r0, [r3, #0]
   11412:	2000      	movs	r0, #0
   11414:	4b02      	ldr	r3, [pc, #8]	; (11420 <UpdateTxPower+0x18>)
   11416:	4798      	blx	r3
   11418:	bd10      	pop	{r4, pc}
   1141a:	46c0      	nop			; (mov r8, r8)
   1141c:	20003a6c 	.word	0x20003a6c
   11420:	000098a5 	.word	0x000098a5

00011424 <UpdateRetransmissionAckTimeoutState>:
   11424:	4b10      	ldr	r3, [pc, #64]	; (11468 <UpdateRetransmissionAckTimeoutState+0x44>)
   11426:	b513      	push	{r0, r1, r4, lr}
   11428:	001a      	movs	r2, r3
   1142a:	32fd      	adds	r2, #253	; 0xfd
   1142c:	7812      	ldrb	r2, [r2, #0]
   1142e:	2a01      	cmp	r2, #1
   11430:	d108      	bne.n	11444 <UpdateRetransmissionAckTimeoutState+0x20>
   11432:	0018      	movs	r0, r3
   11434:	210e      	movs	r1, #14
   11436:	3084      	adds	r0, #132	; 0x84
   11438:	7802      	ldrb	r2, [r0, #0]
   1143a:	438a      	bics	r2, r1
   1143c:	0011      	movs	r1, r2
   1143e:	220c      	movs	r2, #12
   11440:	430a      	orrs	r2, r1
   11442:	7002      	strb	r2, [r0, #0]
   11444:	001a      	movs	r2, r3
   11446:	32da      	adds	r2, #218	; 0xda
   11448:	8811      	ldrh	r1, [r2, #0]
   1144a:	4a08      	ldr	r2, [pc, #32]	; (1146c <UpdateRetransmissionAckTimeoutState+0x48>)
   1144c:	4c08      	ldr	r4, [pc, #32]	; (11470 <UpdateRetransmissionAckTimeoutState+0x4c>)
   1144e:	5c9a      	ldrb	r2, [r3, r2]
   11450:	33f1      	adds	r3, #241	; 0xf1
   11452:	1a8a      	subs	r2, r1, r2
   11454:	21fa      	movs	r1, #250	; 0xfa
   11456:	0089      	lsls	r1, r1, #2
   11458:	4351      	muls	r1, r2
   1145a:	2200      	movs	r2, #0
   1145c:	7818      	ldrb	r0, [r3, #0]
   1145e:	9200      	str	r2, [sp, #0]
   11460:	4b04      	ldr	r3, [pc, #16]	; (11474 <UpdateRetransmissionAckTimeoutState+0x50>)
   11462:	47a0      	blx	r4
   11464:	bd13      	pop	{r0, r1, r4, pc}
   11466:	46c0      	nop			; (mov r8, r8)
   11468:	20003a6c 	.word	0x20003a6c
   1146c:	0000022b 	.word	0x0000022b
   11470:	0000e58d 	.word	0x0000e58d
   11474:	000121b5 	.word	0x000121b5

00011478 <UpdateReceiveWindow2Parameters>:
   11478:	4b0f      	ldr	r3, [pc, #60]	; (114b8 <UpdateReceiveWindow2Parameters+0x40>)
   1147a:	b570      	push	{r4, r5, r6, lr}
   1147c:	001a      	movs	r2, r3
   1147e:	326e      	adds	r2, #110	; 0x6e
   11480:	7011      	strb	r1, [r2, #0]
   11482:	001a      	movs	r2, r3
   11484:	0c04      	lsrs	r4, r0, #16
   11486:	326a      	adds	r2, #106	; 0x6a
   11488:	8010      	strh	r0, [r2, #0]
   1148a:	8054      	strh	r4, [r2, #2]
   1148c:	001a      	movs	r2, r3
   1148e:	25fd      	movs	r5, #253	; 0xfd
   11490:	32fd      	adds	r2, #253	; 0xfd
   11492:	7812      	ldrb	r2, [r2, #0]
   11494:	3a02      	subs	r2, #2
   11496:	422a      	tst	r2, r5
   11498:	d109      	bne.n	114ae <UpdateReceiveWindow2Parameters+0x36>
   1149a:	001a      	movs	r2, r3
   1149c:	336f      	adds	r3, #111	; 0x6f
   1149e:	3273      	adds	r2, #115	; 0x73
   114a0:	7011      	strb	r1, [r2, #0]
   114a2:	7018      	strb	r0, [r3, #0]
   114a4:	0a02      	lsrs	r2, r0, #8
   114a6:	0e00      	lsrs	r0, r0, #24
   114a8:	705a      	strb	r2, [r3, #1]
   114aa:	709c      	strb	r4, [r3, #2]
   114ac:	70d8      	strb	r0, [r3, #3]
   114ae:	2100      	movs	r1, #0
   114b0:	4b02      	ldr	r3, [pc, #8]	; (114bc <UpdateReceiveWindow2Parameters+0x44>)
   114b2:	2001      	movs	r0, #1
   114b4:	4798      	blx	r3
   114b6:	bd70      	pop	{r4, r5, r6, pc}
   114b8:	20003a6c 	.word	0x20003a6c
   114bc:	000098a5 	.word	0x000098a5

000114c0 <ResetParametersForConfirmedTransmission>:
   114c0:	4b0a      	ldr	r3, [pc, #40]	; (114ec <ResetParametersForConfirmedTransmission+0x2c>)
   114c2:	001a      	movs	r2, r3
   114c4:	32fd      	adds	r2, #253	; 0xfd
   114c6:	7812      	ldrb	r2, [r2, #0]
   114c8:	2a01      	cmp	r2, #1
   114ca:	d105      	bne.n	114d8 <ResetParametersForConfirmedTransmission+0x18>
   114cc:	0019      	movs	r1, r3
   114ce:	200e      	movs	r0, #14
   114d0:	3184      	adds	r1, #132	; 0x84
   114d2:	780a      	ldrb	r2, [r1, #0]
   114d4:	4382      	bics	r2, r0
   114d6:	700a      	strb	r2, [r1, #0]
   114d8:	001a      	movs	r2, r3
   114da:	2100      	movs	r1, #0
   114dc:	3394      	adds	r3, #148	; 0x94
   114de:	32e4      	adds	r2, #228	; 0xe4
   114e0:	7011      	strb	r1, [r2, #0]
   114e2:	781a      	ldrb	r2, [r3, #0]
   114e4:	3101      	adds	r1, #1
   114e6:	438a      	bics	r2, r1
   114e8:	701a      	strb	r2, [r3, #0]
   114ea:	4770      	bx	lr
   114ec:	20003a6c 	.word	0x20003a6c

000114f0 <ResetParametersForUnconfirmedTransmission>:
   114f0:	4b07      	ldr	r3, [pc, #28]	; (11510 <ResetParametersForUnconfirmedTransmission+0x20>)
   114f2:	001a      	movs	r2, r3
   114f4:	32fd      	adds	r2, #253	; 0xfd
   114f6:	7812      	ldrb	r2, [r2, #0]
   114f8:	2a01      	cmp	r2, #1
   114fa:	d105      	bne.n	11508 <ResetParametersForUnconfirmedTransmission+0x18>
   114fc:	0019      	movs	r1, r3
   114fe:	200e      	movs	r0, #14
   11500:	3184      	adds	r1, #132	; 0x84
   11502:	780a      	ldrb	r2, [r1, #0]
   11504:	4382      	bics	r2, r0
   11506:	700a      	strb	r2, [r1, #0]
   11508:	2200      	movs	r2, #0
   1150a:	33e3      	adds	r3, #227	; 0xe3
   1150c:	701a      	strb	r2, [r3, #0]
   1150e:	4770      	bx	lr
   11510:	20003a6c 	.word	0x20003a6c

00011514 <SetJoinFailState>:
   11514:	b570      	push	{r4, r5, r6, lr}
   11516:	4c15      	ldr	r4, [pc, #84]	; (1156c <SetJoinFailState+0x58>)
   11518:	2604      	movs	r6, #4
   1151a:	0025      	movs	r5, r4
   1151c:	3594      	adds	r5, #148	; 0x94
   1151e:	782a      	ldrb	r2, [r5, #0]
   11520:	0021      	movs	r1, r4
   11522:	43b2      	bics	r2, r6
   11524:	702a      	strb	r2, [r5, #0]
   11526:	22f0      	movs	r2, #240	; 0xf0
   11528:	3184      	adds	r1, #132	; 0x84
   1152a:	780b      	ldrb	r3, [r1, #0]
   1152c:	4013      	ands	r3, r2
   1152e:	700b      	strb	r3, [r1, #0]
   11530:	0023      	movs	r3, r4
   11532:	33ff      	adds	r3, #255	; 0xff
   11534:	7f5b      	ldrb	r3, [r3, #29]
   11536:	069b      	lsls	r3, r3, #26
   11538:	d503      	bpl.n	11542 <SetJoinFailState+0x2e>
   1153a:	0023      	movs	r3, r4
   1153c:	2200      	movs	r2, #0
   1153e:	3380      	adds	r3, #128	; 0x80
   11540:	701a      	strb	r2, [r3, #0]
   11542:	490b      	ldr	r1, [pc, #44]	; (11570 <SetJoinFailState+0x5c>)
   11544:	794a      	ldrb	r2, [r1, #5]
   11546:	790b      	ldrb	r3, [r1, #4]
   11548:	0212      	lsls	r2, r2, #8
   1154a:	431a      	orrs	r2, r3
   1154c:	798b      	ldrb	r3, [r1, #6]
   1154e:	041b      	lsls	r3, r3, #16
   11550:	431a      	orrs	r2, r3
   11552:	79cb      	ldrb	r3, [r1, #7]
   11554:	061b      	lsls	r3, r3, #24
   11556:	4313      	orrs	r3, r2
   11558:	d000      	beq.n	1155c <SetJoinFailState+0x48>
   1155a:	4798      	blx	r3
   1155c:	2300      	movs	r3, #0
   1155e:	34f9      	adds	r4, #249	; 0xf9
   11560:	7023      	strb	r3, [r4, #0]
   11562:	210b      	movs	r1, #11
   11564:	4b03      	ldr	r3, [pc, #12]	; (11574 <SetJoinFailState+0x60>)
   11566:	2001      	movs	r0, #1
   11568:	4798      	blx	r3
   1156a:	bd70      	pop	{r4, r5, r6, pc}
   1156c:	20003a6c 	.word	0x20003a6c
   11570:	20003dc8 	.word	0x20003dc8
   11574:	000098a5 	.word	0x000098a5

00011578 <ExecuteRxParamSetupReq>:
   11578:	b5f0      	push	{r4, r5, r6, r7, lr}
   1157a:	b085      	sub	sp, #20
   1157c:	7805      	ldrb	r5, [r0, #0]
   1157e:	0004      	movs	r4, r0
   11580:	1c41      	adds	r1, r0, #1
   11582:	2204      	movs	r2, #4
   11584:	4b36      	ldr	r3, [pc, #216]	; (11660 <ExecuteRxParamSetupReq+0xe8>)
   11586:	a803      	add	r0, sp, #12
   11588:	4798      	blx	r3
   1158a:	2264      	movs	r2, #100	; 0x64
   1158c:	9b03      	ldr	r3, [sp, #12]
   1158e:	a903      	add	r1, sp, #12
   11590:	021b      	lsls	r3, r3, #8
   11592:	0a1b      	lsrs	r3, r3, #8
   11594:	4353      	muls	r3, r2
   11596:	9303      	str	r3, [sp, #12]
   11598:	1d23      	adds	r3, r4, #4
   1159a:	9301      	str	r3, [sp, #4]
   1159c:	072b      	lsls	r3, r5, #28
   1159e:	0f1b      	lsrs	r3, r3, #28
   115a0:	b2da      	uxtb	r2, r3
   115a2:	9200      	str	r2, [sp, #0]
   115a4:	aa02      	add	r2, sp, #8
   115a6:	1c96      	adds	r6, r2, #2
   115a8:	066d      	lsls	r5, r5, #25
   115aa:	7033      	strb	r3, [r6, #0]
   115ac:	1cd7      	adds	r7, r2, #3
   115ae:	0f6d      	lsrs	r5, r5, #29
   115b0:	2001      	movs	r0, #1
   115b2:	4b2c      	ldr	r3, [pc, #176]	; (11664 <ExecuteRxParamSetupReq+0xec>)
   115b4:	703d      	strb	r5, [r7, #0]
   115b6:	4798      	blx	r3
   115b8:	4c2b      	ldr	r4, [pc, #172]	; (11668 <ExecuteRxParamSetupReq+0xf0>)
   115ba:	2808      	cmp	r0, #8
   115bc:	d109      	bne.n	115d2 <ExecuteRxParamSetupReq+0x5a>
   115be:	0023      	movs	r3, r4
   115c0:	33e0      	adds	r3, #224	; 0xe0
   115c2:	781a      	ldrb	r2, [r3, #0]
   115c4:	2303      	movs	r3, #3
   115c6:	4353      	muls	r3, r2
   115c8:	18e3      	adds	r3, r4, r3
   115ca:	3398      	adds	r3, #152	; 0x98
   115cc:	789a      	ldrb	r2, [r3, #2]
   115ce:	4310      	orrs	r0, r2
   115d0:	7098      	strb	r0, [r3, #2]
   115d2:	0031      	movs	r1, r6
   115d4:	200f      	movs	r0, #15
   115d6:	4e23      	ldr	r6, [pc, #140]	; (11664 <ExecuteRxParamSetupReq+0xec>)
   115d8:	47b0      	blx	r6
   115da:	2808      	cmp	r0, #8
   115dc:	d10a      	bne.n	115f4 <ExecuteRxParamSetupReq+0x7c>
   115de:	0023      	movs	r3, r4
   115e0:	33e0      	adds	r3, #224	; 0xe0
   115e2:	781a      	ldrb	r2, [r3, #0]
   115e4:	2303      	movs	r3, #3
   115e6:	4353      	muls	r3, r2
   115e8:	2210      	movs	r2, #16
   115ea:	18e3      	adds	r3, r4, r3
   115ec:	3398      	adds	r3, #152	; 0x98
   115ee:	7899      	ldrb	r1, [r3, #2]
   115f0:	430a      	orrs	r2, r1
   115f2:	709a      	strb	r2, [r3, #2]
   115f4:	0039      	movs	r1, r7
   115f6:	2018      	movs	r0, #24
   115f8:	47b0      	blx	r6
   115fa:	2808      	cmp	r0, #8
   115fc:	d10a      	bne.n	11614 <ExecuteRxParamSetupReq+0x9c>
   115fe:	0023      	movs	r3, r4
   11600:	33e0      	adds	r3, #224	; 0xe0
   11602:	781a      	ldrb	r2, [r3, #0]
   11604:	2303      	movs	r3, #3
   11606:	4353      	muls	r3, r2
   11608:	2220      	movs	r2, #32
   1160a:	18e3      	adds	r3, r4, r3
   1160c:	3398      	adds	r3, #152	; 0x98
   1160e:	7899      	ldrb	r1, [r3, #2]
   11610:	430a      	orrs	r2, r1
   11612:	709a      	strb	r2, [r3, #2]
   11614:	0023      	movs	r3, r4
   11616:	33e0      	adds	r3, #224	; 0xe0
   11618:	781a      	ldrb	r2, [r3, #0]
   1161a:	2303      	movs	r3, #3
   1161c:	4353      	muls	r3, r2
   1161e:	18e3      	adds	r3, r4, r3
   11620:	3398      	adds	r3, #152	; 0x98
   11622:	789e      	ldrb	r6, [r3, #2]
   11624:	06f3      	lsls	r3, r6, #27
   11626:	d518      	bpl.n	1165a <ExecuteRxParamSetupReq+0xe2>
   11628:	0733      	lsls	r3, r6, #28
   1162a:	d516      	bpl.n	1165a <ExecuteRxParamSetupReq+0xe2>
   1162c:	06b6      	lsls	r6, r6, #26
   1162e:	0ff6      	lsrs	r6, r6, #31
   11630:	2e01      	cmp	r6, #1
   11632:	d112      	bne.n	1165a <ExecuteRxParamSetupReq+0xe2>
   11634:	0023      	movs	r3, r4
   11636:	33f7      	adds	r3, #247	; 0xf7
   11638:	701d      	strb	r5, [r3, #0]
   1163a:	0031      	movs	r1, r6
   1163c:	0030      	movs	r0, r6
   1163e:	4d0b      	ldr	r5, [pc, #44]	; (1166c <ExecuteRxParamSetupReq+0xf4>)
   11640:	47a8      	blx	r5
   11642:	9900      	ldr	r1, [sp, #0]
   11644:	9803      	ldr	r0, [sp, #12]
   11646:	4b0a      	ldr	r3, [pc, #40]	; (11670 <ExecuteRxParamSetupReq+0xf8>)
   11648:	4798      	blx	r3
   1164a:	2340      	movs	r3, #64	; 0x40
   1164c:	3484      	adds	r4, #132	; 0x84
   1164e:	7862      	ldrb	r2, [r4, #1]
   11650:	210b      	movs	r1, #11
   11652:	4313      	orrs	r3, r2
   11654:	7063      	strb	r3, [r4, #1]
   11656:	0030      	movs	r0, r6
   11658:	47a8      	blx	r5
   1165a:	9801      	ldr	r0, [sp, #4]
   1165c:	b005      	add	sp, #20
   1165e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11660:	0001786b 	.word	0x0001786b
   11664:	0000e061 	.word	0x0000e061
   11668:	20003a6c 	.word	0x20003a6c
   1166c:	000098a5 	.word	0x000098a5
   11670:	00011479 	.word	0x00011479

00011674 <ExecuteDutyCycle>:
   11674:	b570      	push	{r4, r5, r6, lr}
   11676:	7803      	ldrb	r3, [r0, #0]
   11678:	1c46      	adds	r6, r0, #1
   1167a:	2b0f      	cmp	r3, #15
   1167c:	d80f      	bhi.n	1169e <ExecuteDutyCycle+0x2a>
   1167e:	4c09      	ldr	r4, [pc, #36]	; (116a4 <ExecuteDutyCycle+0x30>)
   11680:	210b      	movs	r1, #11
   11682:	0022      	movs	r2, r4
   11684:	2000      	movs	r0, #0
   11686:	3298      	adds	r2, #152	; 0x98
   11688:	4d07      	ldr	r5, [pc, #28]	; (116a8 <ExecuteDutyCycle+0x34>)
   1168a:	7013      	strb	r3, [r2, #0]
   1168c:	47a8      	blx	r5
   1168e:	2320      	movs	r3, #32
   11690:	3484      	adds	r4, #132	; 0x84
   11692:	7862      	ldrb	r2, [r4, #1]
   11694:	210b      	movs	r1, #11
   11696:	4313      	orrs	r3, r2
   11698:	7063      	strb	r3, [r4, #1]
   1169a:	2001      	movs	r0, #1
   1169c:	47a8      	blx	r5
   1169e:	0030      	movs	r0, r6
   116a0:	bd70      	pop	{r4, r5, r6, pc}
   116a2:	46c0      	nop			; (mov r8, r8)
   116a4:	20003a6c 	.word	0x20003a6c
   116a8:	000098a5 	.word	0x000098a5

000116ac <ExecuteDlChannel>:
   116ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   116ae:	b089      	sub	sp, #36	; 0x24
   116b0:	7805      	ldrb	r5, [r0, #0]
   116b2:	ab02      	add	r3, sp, #8
   116b4:	1c41      	adds	r1, r0, #1
   116b6:	0007      	movs	r7, r0
   116b8:	719d      	strb	r5, [r3, #6]
   116ba:	1d9e      	adds	r6, r3, #6
   116bc:	2204      	movs	r2, #4
   116be:	4b23      	ldr	r3, [pc, #140]	; (1174c <ExecuteDlChannel+0xa0>)
   116c0:	a805      	add	r0, sp, #20
   116c2:	4798      	blx	r3
   116c4:	9b05      	ldr	r3, [sp, #20]
   116c6:	a904      	add	r1, sp, #16
   116c8:	021c      	lsls	r4, r3, #8
   116ca:	2364      	movs	r3, #100	; 0x64
   116cc:	0a24      	lsrs	r4, r4, #8
   116ce:	435c      	muls	r4, r3
   116d0:	1d3b      	adds	r3, r7, #4
   116d2:	9301      	str	r3, [sp, #4]
   116d4:	2301      	movs	r3, #1
   116d6:	2015      	movs	r0, #21
   116d8:	704b      	strb	r3, [r1, #1]
   116da:	4b1d      	ldr	r3, [pc, #116]	; (11750 <ExecuteDlChannel+0xa4>)
   116dc:	9405      	str	r4, [sp, #20]
   116de:	700d      	strb	r5, [r1, #0]
   116e0:	4798      	blx	r3
   116e2:	2808      	cmp	r0, #8
   116e4:	d12f      	bne.n	11746 <ExecuteDlChannel+0x9a>
   116e6:	ab02      	add	r3, sp, #8
   116e8:	1ddd      	adds	r5, r3, #7
   116ea:	2300      	movs	r3, #0
   116ec:	702b      	strb	r3, [r5, #0]
   116ee:	7833      	ldrb	r3, [r6, #0]
   116f0:	af06      	add	r7, sp, #24
   116f2:	713b      	strb	r3, [r7, #4]
   116f4:	002a      	movs	r2, r5
   116f6:	0031      	movs	r1, r6
   116f8:	300e      	adds	r0, #14
   116fa:	4b16      	ldr	r3, [pc, #88]	; (11754 <ExecuteDlChannel+0xa8>)
   116fc:	9406      	str	r4, [sp, #24]
   116fe:	4798      	blx	r3
   11700:	280a      	cmp	r0, #10
   11702:	d00d      	beq.n	11720 <ExecuteDlChannel+0x74>
   11704:	782a      	ldrb	r2, [r5, #0]
   11706:	2a01      	cmp	r2, #1
   11708:	d10a      	bne.n	11720 <ExecuteDlChannel+0x74>
   1170a:	4b13      	ldr	r3, [pc, #76]	; (11758 <ExecuteDlChannel+0xac>)
   1170c:	0019      	movs	r1, r3
   1170e:	31e0      	adds	r1, #224	; 0xe0
   11710:	7808      	ldrb	r0, [r1, #0]
   11712:	2103      	movs	r1, #3
   11714:	4341      	muls	r1, r0
   11716:	185b      	adds	r3, r3, r1
   11718:	3398      	adds	r3, #152	; 0x98
   1171a:	78d9      	ldrb	r1, [r3, #3]
   1171c:	430a      	orrs	r2, r1
   1171e:	70da      	strb	r2, [r3, #3]
   11720:	0039      	movs	r1, r7
   11722:	2033      	movs	r0, #51	; 0x33
   11724:	4b0d      	ldr	r3, [pc, #52]	; (1175c <ExecuteDlChannel+0xb0>)
   11726:	4798      	blx	r3
   11728:	2808      	cmp	r0, #8
   1172a:	d10c      	bne.n	11746 <ExecuteDlChannel+0x9a>
   1172c:	4b0a      	ldr	r3, [pc, #40]	; (11758 <ExecuteDlChannel+0xac>)
   1172e:	001a      	movs	r2, r3
   11730:	32e0      	adds	r2, #224	; 0xe0
   11732:	7811      	ldrb	r1, [r2, #0]
   11734:	2203      	movs	r2, #3
   11736:	434a      	muls	r2, r1
   11738:	189b      	adds	r3, r3, r2
   1173a:	2280      	movs	r2, #128	; 0x80
   1173c:	3398      	adds	r3, #152	; 0x98
   1173e:	7899      	ldrb	r1, [r3, #2]
   11740:	4252      	negs	r2, r2
   11742:	430a      	orrs	r2, r1
   11744:	709a      	strb	r2, [r3, #2]
   11746:	9801      	ldr	r0, [sp, #4]
   11748:	b009      	add	sp, #36	; 0x24
   1174a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1174c:	0001786b 	.word	0x0001786b
   11750:	0000e061 	.word	0x0000e061
   11754:	0000e045 	.word	0x0000e045
   11758:	20003a6c 	.word	0x20003a6c
   1175c:	0000e07d 	.word	0x0000e07d

00011760 <ExecuteTxParamSetup>:
   11760:	220f      	movs	r2, #15
   11762:	b513      	push	{r0, r1, r4, lr}
   11764:	7803      	ldrb	r3, [r0, #0]
   11766:	4c0f      	ldr	r4, [pc, #60]	; (117a4 <ExecuteTxParamSetup+0x44>)
   11768:	401a      	ands	r2, r3
   1176a:	5ca2      	ldrb	r2, [r4, r2]
   1176c:	2401      	movs	r4, #1
   1176e:	a901      	add	r1, sp, #4
   11770:	700a      	strb	r2, [r1, #0]
   11772:	111a      	asrs	r2, r3, #4
   11774:	115b      	asrs	r3, r3, #5
   11776:	4023      	ands	r3, r4
   11778:	40a3      	lsls	r3, r4
   1177a:	4022      	ands	r2, r4
   1177c:	4313      	orrs	r3, r2
   1177e:	704b      	strb	r3, [r1, #1]
   11780:	1904      	adds	r4, r0, r4
   11782:	4b09      	ldr	r3, [pc, #36]	; (117a8 <ExecuteTxParamSetup+0x48>)
   11784:	2034      	movs	r0, #52	; 0x34
   11786:	4798      	blx	r3
   11788:	2808      	cmp	r0, #8
   1178a:	d009      	beq.n	117a0 <ExecuteTxParamSetup+0x40>
   1178c:	4b07      	ldr	r3, [pc, #28]	; (117ac <ExecuteTxParamSetup+0x4c>)
   1178e:	001a      	movs	r2, r3
   11790:	32e0      	adds	r2, #224	; 0xe0
   11792:	7811      	ldrb	r1, [r2, #0]
   11794:	2203      	movs	r2, #3
   11796:	434a      	muls	r2, r1
   11798:	189b      	adds	r3, r3, r2
   1179a:	22ff      	movs	r2, #255	; 0xff
   1179c:	3399      	adds	r3, #153	; 0x99
   1179e:	701a      	strb	r2, [r3, #0]
   117a0:	0020      	movs	r0, r4
   117a2:	bd16      	pop	{r1, r2, r4, pc}
   117a4:	0001a3cd 	.word	0x0001a3cd
   117a8:	0000e07d 	.word	0x0000e07d
   117ac:	20003a6c 	.word	0x20003a6c

000117b0 <ExecuteLinkAdr>:
   117b0:	220f      	movs	r2, #15
   117b2:	b5f0      	push	{r4, r5, r6, r7, lr}
   117b4:	0006      	movs	r6, r0
   117b6:	7803      	ldrb	r3, [r0, #0]
   117b8:	b089      	sub	sp, #36	; 0x24
   117ba:	401a      	ands	r2, r3
   117bc:	a905      	add	r1, sp, #20
   117be:	700a      	strb	r2, [r1, #0]
   117c0:	aa04      	add	r2, sp, #16
   117c2:	1d97      	adds	r7, r2, #6
   117c4:	091b      	lsrs	r3, r3, #4
   117c6:	7153      	strb	r3, [r2, #5]
   117c8:	1c41      	adds	r1, r0, #1
   117ca:	2202      	movs	r2, #2
   117cc:	0038      	movs	r0, r7
   117ce:	4b3d      	ldr	r3, [pc, #244]	; (118c4 <ExecuteLinkAdr+0x114>)
   117d0:	4798      	blx	r3
   117d2:	2201      	movs	r2, #1
   117d4:	1d33      	adds	r3, r6, #4
   117d6:	9303      	str	r3, [sp, #12]
   117d8:	78f3      	ldrb	r3, [r6, #3]
   117da:	4c3b      	ldr	r4, [pc, #236]	; (118c8 <ExecuteLinkAdr+0x118>)
   117dc:	4d3b      	ldr	r5, [pc, #236]	; (118cc <ExecuteLinkAdr+0x11c>)
   117de:	065b      	lsls	r3, r3, #25
   117e0:	0f5b      	lsrs	r3, r3, #29
   117e2:	9300      	str	r3, [sp, #0]
   117e4:	5d63      	ldrb	r3, [r4, r5]
   117e6:	a906      	add	r1, sp, #24
   117e8:	4393      	bics	r3, r2
   117ea:	1892      	adds	r2, r2, r2
   117ec:	4393      	bics	r3, r2
   117ee:	3202      	adds	r2, #2
   117f0:	4393      	bics	r3, r2
   117f2:	5563      	strb	r3, [r4, r5]
   117f4:	883b      	ldrh	r3, [r7, #0]
   117f6:	2037      	movs	r0, #55	; 0x37
   117f8:	9302      	str	r3, [sp, #8]
   117fa:	466b      	mov	r3, sp
   117fc:	891b      	ldrh	r3, [r3, #8]
   117fe:	4f34      	ldr	r7, [pc, #208]	; (118d0 <ExecuteLinkAdr+0x120>)
   11800:	804b      	strh	r3, [r1, #2]
   11802:	466b      	mov	r3, sp
   11804:	781b      	ldrb	r3, [r3, #0]
   11806:	700b      	strb	r3, [r1, #0]
   11808:	47b8      	blx	r7
   1180a:	2808      	cmp	r0, #8
   1180c:	d117      	bne.n	1183e <ExecuteLinkAdr+0x8e>
   1180e:	466b      	mov	r3, sp
   11810:	891b      	ldrh	r3, [r3, #8]
   11812:	a907      	add	r1, sp, #28
   11814:	800b      	strh	r3, [r1, #0]
   11816:	466b      	mov	r3, sp
   11818:	781b      	ldrb	r3, [r3, #0]
   1181a:	3014      	adds	r0, #20
   1181c:	708b      	strb	r3, [r1, #2]
   1181e:	4b2d      	ldr	r3, [pc, #180]	; (118d4 <ExecuteLinkAdr+0x124>)
   11820:	4798      	blx	r3
   11822:	2201      	movs	r2, #1
   11824:	5d63      	ldrb	r3, [r4, r5]
   11826:	2010      	movs	r0, #16
   11828:	4313      	orrs	r3, r2
   1182a:	5563      	strb	r3, [r4, r5]
   1182c:	ab04      	add	r3, sp, #16
   1182e:	1d59      	adds	r1, r3, #5
   11830:	47b8      	blx	r7
   11832:	2808      	cmp	r0, #8
   11834:	d103      	bne.n	1183e <ExecuteLinkAdr+0x8e>
   11836:	2202      	movs	r2, #2
   11838:	5d63      	ldrb	r3, [r4, r5]
   1183a:	4313      	orrs	r3, r2
   1183c:	5563      	strb	r3, [r4, r5]
   1183e:	af05      	add	r7, sp, #20
   11840:	4b23      	ldr	r3, [pc, #140]	; (118d0 <ExecuteLinkAdr+0x120>)
   11842:	0039      	movs	r1, r7
   11844:	201d      	movs	r0, #29
   11846:	4798      	blx	r3
   11848:	4b1f      	ldr	r3, [pc, #124]	; (118c8 <ExecuteLinkAdr+0x118>)
   1184a:	2808      	cmp	r0, #8
   1184c:	d103      	bne.n	11856 <ExecuteLinkAdr+0xa6>
   1184e:	2204      	movs	r2, #4
   11850:	5d59      	ldrb	r1, [r3, r5]
   11852:	430a      	orrs	r2, r1
   11854:	555a      	strb	r2, [r3, r5]
   11856:	5d5a      	ldrb	r2, [r3, r5]
   11858:	43d2      	mvns	r2, r2
   1185a:	0752      	lsls	r2, r2, #29
   1185c:	d12a      	bne.n	118b4 <ExecuteLinkAdr+0x104>
   1185e:	4669      	mov	r1, sp
   11860:	4a1d      	ldr	r2, [pc, #116]	; (118d8 <ExecuteLinkAdr+0x128>)
   11862:	7a09      	ldrb	r1, [r1, #8]
   11864:	5499      	strb	r1, [r3, r2]
   11866:	9a02      	ldr	r2, [sp, #8]
   11868:	491b      	ldr	r1, [pc, #108]	; (118d8 <ExecuteLinkAdr+0x128>)
   1186a:	0a12      	lsrs	r2, r2, #8
   1186c:	1859      	adds	r1, r3, r1
   1186e:	704a      	strb	r2, [r1, #1]
   11870:	aa04      	add	r2, sp, #16
   11872:	3205      	adds	r2, #5
   11874:	7812      	ldrb	r2, [r2, #0]
   11876:	2a0f      	cmp	r2, #15
   11878:	d101      	bne.n	1187e <ExecuteLinkAdr+0xce>
   1187a:	33e7      	adds	r3, #231	; 0xe7
   1187c:	781a      	ldrb	r2, [r3, #0]
   1187e:	2389      	movs	r3, #137	; 0x89
   11880:	2170      	movs	r1, #112	; 0x70
   11882:	2070      	movs	r0, #112	; 0x70
   11884:	009b      	lsls	r3, r3, #2
   11886:	54e2      	strb	r2, [r4, r3]
   11888:	78f3      	ldrb	r3, [r6, #3]
   1188a:	4a14      	ldr	r2, [pc, #80]	; (118dc <ExecuteLinkAdr+0x12c>)
   1188c:	4019      	ands	r1, r3
   1188e:	5ca3      	ldrb	r3, [r4, r2]
   11890:	4383      	bics	r3, r0
   11892:	430b      	orrs	r3, r1
   11894:	54a3      	strb	r3, [r4, r2]
   11896:	78f1      	ldrb	r1, [r6, #3]
   11898:	3861      	subs	r0, #97	; 0x61
   1189a:	b2db      	uxtb	r3, r3
   1189c:	4001      	ands	r1, r0
   1189e:	4383      	bics	r3, r0
   118a0:	430b      	orrs	r3, r1
   118a2:	54a3      	strb	r3, [r4, r2]
   118a4:	783b      	ldrb	r3, [r7, #0]
   118a6:	4283      	cmp	r3, r0
   118a8:	d101      	bne.n	118ae <ExecuteLinkAdr+0xfe>
   118aa:	34e9      	adds	r4, #233	; 0xe9
   118ac:	7823      	ldrb	r3, [r4, #0]
   118ae:	4a0c      	ldr	r2, [pc, #48]	; (118e0 <ExecuteLinkAdr+0x130>)
   118b0:	4905      	ldr	r1, [pc, #20]	; (118c8 <ExecuteLinkAdr+0x118>)
   118b2:	548b      	strb	r3, [r1, r2]
   118b4:	4904      	ldr	r1, [pc, #16]	; (118c8 <ExecuteLinkAdr+0x118>)
   118b6:	4a0b      	ldr	r2, [pc, #44]	; (118e4 <ExecuteLinkAdr+0x134>)
   118b8:	9803      	ldr	r0, [sp, #12]
   118ba:	5c8b      	ldrb	r3, [r1, r2]
   118bc:	3301      	adds	r3, #1
   118be:	548b      	strb	r3, [r1, r2]
   118c0:	b009      	add	sp, #36	; 0x24
   118c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   118c4:	0001786b 	.word	0x0001786b
   118c8:	20003a6c 	.word	0x20003a6c
   118cc:	00000223 	.word	0x00000223
   118d0:	0000e061 	.word	0x0000e061
   118d4:	0000e07d 	.word	0x0000e07d
   118d8:	00000227 	.word	0x00000227
   118dc:	00000229 	.word	0x00000229
   118e0:	00000225 	.word	0x00000225
   118e4:	00000226 	.word	0x00000226

000118e8 <ExecuteDevTimeAns>:
   118e8:	b510      	push	{r4, lr}
   118ea:	0001      	movs	r1, r0
   118ec:	0004      	movs	r4, r0
   118ee:	2204      	movs	r2, #4
   118f0:	4b04      	ldr	r3, [pc, #16]	; (11904 <ExecuteDevTimeAns+0x1c>)
   118f2:	4805      	ldr	r0, [pc, #20]	; (11908 <ExecuteDevTimeAns+0x20>)
   118f4:	4798      	blx	r3
   118f6:	238e      	movs	r3, #142	; 0x8e
   118f8:	7921      	ldrb	r1, [r4, #4]
   118fa:	4a04      	ldr	r2, [pc, #16]	; (1190c <ExecuteDevTimeAns+0x24>)
   118fc:	009b      	lsls	r3, r3, #2
   118fe:	1d60      	adds	r0, r4, #5
   11900:	54d1      	strb	r1, [r2, r3]
   11902:	bd10      	pop	{r4, pc}
   11904:	0001786b 	.word	0x0001786b
   11908:	20003ca0 	.word	0x20003ca0
   1190c:	20003a6c 	.word	0x20003a6c

00011910 <PrepareJoinRequestFrame>:
   11910:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   11912:	2210      	movs	r2, #16
   11914:	4d22      	ldr	r5, [pc, #136]	; (119a0 <PrepareJoinRequestFrame+0x90>)
   11916:	4b23      	ldr	r3, [pc, #140]	; (119a4 <PrepareJoinRequestFrame+0x94>)
   11918:	32ff      	adds	r2, #255	; 0xff
   1191a:	2100      	movs	r1, #0
   1191c:	0028      	movs	r0, r5
   1191e:	4798      	blx	r3
   11920:	2300      	movs	r3, #0
   11922:	4c21      	ldr	r4, [pc, #132]	; (119a8 <PrepareJoinRequestFrame+0x98>)
   11924:	702b      	strb	r3, [r5, #0]
   11926:	4b21      	ldr	r3, [pc, #132]	; (119ac <PrepareJoinRequestFrame+0x9c>)
   11928:	5ce3      	ldrb	r3, [r4, r3]
   1192a:	2b00      	cmp	r3, #0
   1192c:	d006      	beq.n	1193c <PrepareJoinRequestFrame+0x2c>
   1192e:	4920      	ldr	r1, [pc, #128]	; (119b0 <PrepareJoinRequestFrame+0xa0>)
   11930:	2006      	movs	r0, #6
   11932:	4e20      	ldr	r6, [pc, #128]	; (119b4 <PrepareJoinRequestFrame+0xa4>)
   11934:	47b0      	blx	r6
   11936:	4920      	ldr	r1, [pc, #128]	; (119b8 <PrepareJoinRequestFrame+0xa8>)
   11938:	2007      	movs	r0, #7
   1193a:	47b0      	blx	r6
   1193c:	2300      	movs	r3, #0
   1193e:	205c      	movs	r0, #92	; 0x5c
   11940:	1ac1      	subs	r1, r0, r3
   11942:	5c61      	ldrb	r1, [r4, r1]
   11944:	18ea      	adds	r2, r5, r3
   11946:	3301      	adds	r3, #1
   11948:	7051      	strb	r1, [r2, #1]
   1194a:	2b08      	cmp	r3, #8
   1194c:	d1f8      	bne.n	11940 <PrepareJoinRequestFrame+0x30>
   1194e:	2300      	movs	r3, #0
   11950:	2064      	movs	r0, #100	; 0x64
   11952:	1ac1      	subs	r1, r0, r3
   11954:	5c61      	ldrb	r1, [r4, r1]
   11956:	18ea      	adds	r2, r5, r3
   11958:	3301      	adds	r3, #1
   1195a:	7251      	strb	r1, [r2, #9]
   1195c:	2b08      	cmp	r3, #8
   1195e:	d1f8      	bne.n	11952 <PrepareJoinRequestFrame+0x42>
   11960:	4b16      	ldr	r3, [pc, #88]	; (119bc <PrepareJoinRequestFrame+0xac>)
   11962:	4798      	blx	r3
   11964:	4b16      	ldr	r3, [pc, #88]	; (119c0 <PrepareJoinRequestFrame+0xb0>)
   11966:	4917      	ldr	r1, [pc, #92]	; (119c4 <PrepareJoinRequestFrame+0xb4>)
   11968:	4798      	blx	r3
   1196a:	34cc      	adds	r4, #204	; 0xcc
   1196c:	8021      	strh	r1, [r4, #0]
   1196e:	2202      	movs	r2, #2
   11970:	0021      	movs	r1, r4
   11972:	4815      	ldr	r0, [pc, #84]	; (119c8 <PrepareJoinRequestFrame+0xb8>)
   11974:	4c15      	ldr	r4, [pc, #84]	; (119cc <PrepareJoinRequestFrame+0xbc>)
   11976:	47a0      	blx	r4
   11978:	2313      	movs	r3, #19
   1197a:	4e15      	ldr	r6, [pc, #84]	; (119d0 <PrepareJoinRequestFrame+0xc0>)
   1197c:	9300      	str	r3, [sp, #0]
   1197e:	0032      	movs	r2, r6
   11980:	002b      	movs	r3, r5
   11982:	2100      	movs	r1, #0
   11984:	4d13      	ldr	r5, [pc, #76]	; (119d4 <PrepareJoinRequestFrame+0xc4>)
   11986:	4814      	ldr	r0, [pc, #80]	; (119d8 <PrepareJoinRequestFrame+0xc8>)
   11988:	47a8      	blx	r5
   1198a:	0031      	movs	r1, r6
   1198c:	2204      	movs	r2, #4
   1198e:	a803      	add	r0, sp, #12
   11990:	47a0      	blx	r4
   11992:	2204      	movs	r2, #4
   11994:	a903      	add	r1, sp, #12
   11996:	4811      	ldr	r0, [pc, #68]	; (119dc <PrepareJoinRequestFrame+0xcc>)
   11998:	47a0      	blx	r4
   1199a:	2017      	movs	r0, #23
   1199c:	b004      	add	sp, #16
   1199e:	bd70      	pop	{r4, r5, r6, pc}
   119a0:	20003cb4 	.word	0x20003cb4
   119a4:	0001787d 	.word	0x0001787d
   119a8:	20003a6c 	.word	0x20003a6c
   119ac:	0000022d 	.word	0x0000022d
   119b0:	20003ac1 	.word	0x20003ac1
   119b4:	0000733d 	.word	0x0000733d
   119b8:	20003ac9 	.word	0x20003ac9
   119bc:	00017fb1 	.word	0x00017fb1
   119c0:	000148e9 	.word	0x000148e9
   119c4:	0000ffff 	.word	0x0000ffff
   119c8:	20003cc5 	.word	0x20003cc5
   119cc:	0001786b 	.word	0x0001786b
   119d0:	200020c5 	.word	0x200020c5
   119d4:	00007341 	.word	0x00007341
   119d8:	20003ab1 	.word	0x20003ab1
   119dc:	20003cc7 	.word	0x20003cc7

000119e0 <ConfigureRadioRx>:
   119e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   119e2:	b087      	sub	sp, #28
   119e4:	466b      	mov	r3, sp
   119e6:	2600      	movs	r6, #0
   119e8:	1ddc      	adds	r4, r3, #7
   119ea:	71d8      	strb	r0, [r3, #7]
   119ec:	729e      	strb	r6, [r3, #10]
   119ee:	466a      	mov	r2, sp
   119f0:	2301      	movs	r3, #1
   119f2:	72d3      	strb	r3, [r2, #11]
   119f4:	2215      	movs	r2, #21
   119f6:	ad03      	add	r5, sp, #12
   119f8:	4f11      	ldr	r7, [pc, #68]	; (11a40 <ConfigureRadioRx+0x60>)
   119fa:	9100      	str	r1, [sp, #0]
   119fc:	446a      	add	r2, sp
   119fe:	0021      	movs	r1, r4
   11a00:	2023      	movs	r0, #35	; 0x23
   11a02:	80ae      	strh	r6, [r5, #4]
   11a04:	47b8      	blx	r7
   11a06:	2216      	movs	r2, #22
   11a08:	0021      	movs	r1, r4
   11a0a:	446a      	add	r2, sp
   11a0c:	2024      	movs	r0, #36	; 0x24
   11a0e:	47b8      	blx	r7
   11a10:	2217      	movs	r2, #23
   11a12:	0021      	movs	r1, r4
   11a14:	446a      	add	r2, sp
   11a16:	2025      	movs	r0, #37	; 0x25
   11a18:	47b8      	blx	r7
   11a1a:	9b00      	ldr	r3, [sp, #0]
   11a1c:	0028      	movs	r0, r5
   11a1e:	9303      	str	r3, [sp, #12]
   11a20:	4b08      	ldr	r3, [pc, #32]	; (11a44 <ConfigureRadioRx+0x64>)
   11a22:	80ae      	strh	r6, [r5, #4]
   11a24:	4798      	blx	r3
   11a26:	230a      	movs	r3, #10
   11a28:	446b      	add	r3, sp
   11a2a:	0019      	movs	r1, r3
   11a2c:	4c06      	ldr	r4, [pc, #24]	; (11a48 <ConfigureRadioRx+0x68>)
   11a2e:	2014      	movs	r0, #20
   11a30:	47a0      	blx	r4
   11a32:	230b      	movs	r3, #11
   11a34:	446b      	add	r3, sp
   11a36:	0019      	movs	r1, r3
   11a38:	2006      	movs	r0, #6
   11a3a:	47a0      	blx	r4
   11a3c:	b007      	add	sp, #28
   11a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11a40:	0000e045 	.word	0x0000e045
   11a44:	0001104d 	.word	0x0001104d
   11a48:	0000f3d9 	.word	0x0000f3d9

00011a4c <ConfigureRadioTx>:
   11a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   11a4e:	2517      	movs	r5, #23
   11a50:	2300      	movs	r3, #0
   11a52:	2616      	movs	r6, #22
   11a54:	2701      	movs	r7, #1
   11a56:	b087      	sub	sp, #28
   11a58:	ac01      	add	r4, sp, #4
   11a5a:	446d      	add	r5, sp
   11a5c:	9001      	str	r0, [sp, #4]
   11a5e:	702b      	strb	r3, [r5, #0]
   11a60:	0020      	movs	r0, r4
   11a62:	4b10      	ldr	r3, [pc, #64]	; (11aa4 <ConfigureRadioTx+0x58>)
   11a64:	446e      	add	r6, sp
   11a66:	9102      	str	r1, [sp, #8]
   11a68:	9203      	str	r2, [sp, #12]
   11a6a:	7037      	strb	r7, [r6, #0]
   11a6c:	4798      	blx	r3
   11a6e:	79e3      	ldrb	r3, [r4, #7]
   11a70:	4c0d      	ldr	r4, [pc, #52]	; (11aa8 <ConfigureRadioTx+0x5c>)
   11a72:	2b00      	cmp	r3, #0
   11a74:	d00a      	beq.n	11a8c <ConfigureRadioTx+0x40>
   11a76:	4b0d      	ldr	r3, [pc, #52]	; (11aac <ConfigureRadioTx+0x60>)
   11a78:	4a0d      	ldr	r2, [pc, #52]	; (11ab0 <ConfigureRadioTx+0x64>)
   11a7a:	490e      	ldr	r1, [pc, #56]	; (11ab4 <ConfigureRadioTx+0x68>)
   11a7c:	54d7      	strb	r7, [r2, r3]
   11a7e:	200b      	movs	r0, #11
   11a80:	4b0d      	ldr	r3, [pc, #52]	; (11ab8 <ConfigureRadioTx+0x6c>)
   11a82:	4798      	blx	r3
   11a84:	210a      	movs	r1, #10
   11a86:	200b      	movs	r0, #11
   11a88:	4469      	add	r1, sp
   11a8a:	47a0      	blx	r4
   11a8c:	a903      	add	r1, sp, #12
   11a8e:	2004      	movs	r0, #4
   11a90:	47a0      	blx	r4
   11a92:	0031      	movs	r1, r6
   11a94:	2014      	movs	r0, #20
   11a96:	47a0      	blx	r4
   11a98:	0029      	movs	r1, r5
   11a9a:	2006      	movs	r0, #6
   11a9c:	47a0      	blx	r4
   11a9e:	b007      	add	sp, #28
   11aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11aa2:	46c0      	nop			; (mov r8, r8)
   11aa4:	0001104d 	.word	0x0001104d
   11aa8:	0000f3d9 	.word	0x0000f3d9
   11aac:	00000222 	.word	0x00000222
   11ab0:	20003a6c 	.word	0x20003a6c
   11ab4:	20003c8d 	.word	0x20003c8d
   11ab8:	0000f2e9 	.word	0x0000f2e9

00011abc <LorawanGetChAndInitiateRadioTransmit>:
   11abc:	2301      	movs	r3, #1
   11abe:	b530      	push	{r4, r5, lr}
   11ac0:	4c46      	ldr	r4, [pc, #280]	; (11bdc <LorawanGetChAndInitiateRadioTransmit+0x120>)
   11ac2:	b089      	sub	sp, #36	; 0x24
   11ac4:	a902      	add	r1, sp, #8
   11ac6:	700b      	strb	r3, [r1, #0]
   11ac8:	0023      	movs	r3, r4
   11aca:	33e9      	adds	r3, #233	; 0xe9
   11acc:	781b      	ldrb	r3, [r3, #0]
   11ace:	704b      	strb	r3, [r1, #1]
   11ad0:	0023      	movs	r3, r4
   11ad2:	33e7      	adds	r3, #231	; 0xe7
   11ad4:	781b      	ldrb	r3, [r3, #0]
   11ad6:	708b      	strb	r3, [r1, #2]
   11ad8:	0023      	movs	r3, r4
   11ada:	33fd      	adds	r3, #253	; 0xfd
   11adc:	781b      	ldrb	r3, [r3, #0]
   11ade:	2b01      	cmp	r3, #1
   11ae0:	d108      	bne.n	11af4 <LorawanGetChAndInitiateRadioTransmit+0x38>
   11ae2:	0020      	movs	r0, r4
   11ae4:	220e      	movs	r2, #14
   11ae6:	3084      	adds	r0, #132	; 0x84
   11ae8:	7803      	ldrb	r3, [r0, #0]
   11aea:	4393      	bics	r3, r2
   11aec:	001a      	movs	r2, r3
   11aee:	230c      	movs	r3, #12
   11af0:	4313      	orrs	r3, r2
   11af2:	7003      	strb	r3, [r0, #0]
   11af4:	aa05      	add	r2, sp, #20
   11af6:	202e      	movs	r0, #46	; 0x2e
   11af8:	4d39      	ldr	r5, [pc, #228]	; (11be0 <LorawanGetChAndInitiateRadioTransmit+0x124>)
   11afa:	47a8      	blx	r5
   11afc:	0023      	movs	r3, r4
   11afe:	2808      	cmp	r0, #8
   11b00:	d135      	bne.n	11b6e <LorawanGetChAndInitiateRadioTransmit+0xb2>
   11b02:	33fd      	adds	r3, #253	; 0xfd
   11b04:	781b      	ldrb	r3, [r3, #0]
   11b06:	ad03      	add	r5, sp, #12
   11b08:	2b04      	cmp	r3, #4
   11b0a:	d108      	bne.n	11b1e <LorawanGetChAndInitiateRadioTransmit+0x62>
   11b0c:	2390      	movs	r3, #144	; 0x90
   11b0e:	2200      	movs	r2, #0
   11b10:	009b      	lsls	r3, r3, #2
   11b12:	54e2      	strb	r2, [r4, r3]
   11b14:	2301      	movs	r3, #1
   11b16:	0028      	movs	r0, r5
   11b18:	702b      	strb	r3, [r5, #0]
   11b1a:	4b32      	ldr	r3, [pc, #200]	; (11be4 <LorawanGetChAndInitiateRadioTransmit+0x128>)
   11b1c:	4798      	blx	r3
   11b1e:	9805      	ldr	r0, [sp, #20]
   11b20:	4b31      	ldr	r3, [pc, #196]	; (11be8 <LorawanGetChAndInitiateRadioTransmit+0x12c>)
   11b22:	9906      	ldr	r1, [sp, #24]
   11b24:	9a07      	ldr	r2, [sp, #28]
   11b26:	4798      	blx	r3
   11b28:	0023      	movs	r3, r4
   11b2a:	33ce      	adds	r3, #206	; 0xce
   11b2c:	881b      	ldrh	r3, [r3, #0]
   11b2e:	0028      	movs	r0, r5
   11b30:	702b      	strb	r3, [r5, #0]
   11b32:	4b2e      	ldr	r3, [pc, #184]	; (11bec <LorawanGetChAndInitiateRadioTransmit+0x130>)
   11b34:	606b      	str	r3, [r5, #4]
   11b36:	4b2e      	ldr	r3, [pc, #184]	; (11bf0 <LorawanGetChAndInitiateRadioTransmit+0x134>)
   11b38:	4798      	blx	r3
   11b3a:	2800      	cmp	r0, #0
   11b3c:	d109      	bne.n	11b52 <LorawanGetChAndInitiateRadioTransmit+0x96>
   11b3e:	220e      	movs	r2, #14
   11b40:	3484      	adds	r4, #132	; 0x84
   11b42:	7823      	ldrb	r3, [r4, #0]
   11b44:	4393      	bics	r3, r2
   11b46:	001a      	movs	r2, r3
   11b48:	2302      	movs	r3, #2
   11b4a:	4313      	orrs	r3, r2
   11b4c:	7023      	strb	r3, [r4, #0]
   11b4e:	b009      	add	sp, #36	; 0x24
   11b50:	bd30      	pop	{r4, r5, pc}
   11b52:	2200      	movs	r2, #0
   11b54:	4b27      	ldr	r3, [pc, #156]	; (11bf4 <LorawanGetChAndInitiateRadioTransmit+0x138>)
   11b56:	4928      	ldr	r1, [pc, #160]	; (11bf8 <LorawanGetChAndInitiateRadioTransmit+0x13c>)
   11b58:	5ce3      	ldrb	r3, [r4, r3]
   11b5a:	34fc      	adds	r4, #252	; 0xfc
   11b5c:	4359      	muls	r1, r3
   11b5e:	4b27      	ldr	r3, [pc, #156]	; (11bfc <LorawanGetChAndInitiateRadioTransmit+0x140>)
   11b60:	7820      	ldrb	r0, [r4, #0]
   11b62:	18c9      	adds	r1, r1, r3
   11b64:	4b26      	ldr	r3, [pc, #152]	; (11c00 <LorawanGetChAndInitiateRadioTransmit+0x144>)
   11b66:	9200      	str	r2, [sp, #0]
   11b68:	4c26      	ldr	r4, [pc, #152]	; (11c04 <LorawanGetChAndInitiateRadioTransmit+0x148>)
   11b6a:	47a0      	blx	r4
   11b6c:	e7ef      	b.n	11b4e <LorawanGetChAndInitiateRadioTransmit+0x92>
   11b6e:	33ff      	adds	r3, #255	; 0xff
   11b70:	7f5b      	ldrb	r3, [r3, #29]
   11b72:	079a      	lsls	r2, r3, #30
   11b74:	d515      	bpl.n	11ba2 <LorawanGetChAndInitiateRadioTransmit+0xe6>
   11b76:	aa03      	add	r2, sp, #12
   11b78:	4923      	ldr	r1, [pc, #140]	; (11c08 <LorawanGetChAndInitiateRadioTransmit+0x14c>)
   11b7a:	2026      	movs	r0, #38	; 0x26
   11b7c:	47a8      	blx	r5
   11b7e:	9b03      	ldr	r3, [sp, #12]
   11b80:	1c5a      	adds	r2, r3, #1
   11b82:	d001      	beq.n	11b88 <LorawanGetChAndInitiateRadioTransmit+0xcc>
   11b84:	3314      	adds	r3, #20
   11b86:	9303      	str	r3, [sp, #12]
   11b88:	21fa      	movs	r1, #250	; 0xfa
   11b8a:	4b1a      	ldr	r3, [pc, #104]	; (11bf4 <LorawanGetChAndInitiateRadioTransmit+0x138>)
   11b8c:	9a03      	ldr	r2, [sp, #12]
   11b8e:	5ce3      	ldrb	r3, [r4, r3]
   11b90:	0089      	lsls	r1, r1, #2
   11b92:	1ad3      	subs	r3, r2, r3
   11b94:	2200      	movs	r2, #0
   11b96:	4359      	muls	r1, r3
   11b98:	34f2      	adds	r4, #242	; 0xf2
   11b9a:	7820      	ldrb	r0, [r4, #0]
   11b9c:	9200      	str	r2, [sp, #0]
   11b9e:	4b1b      	ldr	r3, [pc, #108]	; (11c0c <LorawanGetChAndInitiateRadioTransmit+0x150>)
   11ba0:	e7e2      	b.n	11b68 <LorawanGetChAndInitiateRadioTransmit+0xac>
   11ba2:	075b      	lsls	r3, r3, #29
   11ba4:	d508      	bpl.n	11bb8 <LorawanGetChAndInitiateRadioTransmit+0xfc>
   11ba6:	aa03      	add	r2, sp, #12
   11ba8:	4917      	ldr	r1, [pc, #92]	; (11c08 <LorawanGetChAndInitiateRadioTransmit+0x14c>)
   11baa:	2032      	movs	r0, #50	; 0x32
   11bac:	47a8      	blx	r5
   11bae:	9b03      	ldr	r3, [sp, #12]
   11bb0:	1c5a      	adds	r2, r3, #1
   11bb2:	d0e9      	beq.n	11b88 <LorawanGetChAndInitiateRadioTransmit+0xcc>
   11bb4:	3301      	adds	r3, #1
   11bb6:	e7e6      	b.n	11b86 <LorawanGetChAndInitiateRadioTransmit+0xca>
   11bb8:	0023      	movs	r3, r4
   11bba:	2201      	movs	r2, #1
   11bbc:	3394      	adds	r3, #148	; 0x94
   11bbe:	781b      	ldrb	r3, [r3, #0]
   11bc0:	401a      	ands	r2, r3
   11bc2:	d108      	bne.n	11bd6 <LorawanGetChAndInitiateRadioTransmit+0x11a>
   11bc4:	4b0b      	ldr	r3, [pc, #44]	; (11bf4 <LorawanGetChAndInitiateRadioTransmit+0x138>)
   11bc6:	490c      	ldr	r1, [pc, #48]	; (11bf8 <LorawanGetChAndInitiateRadioTransmit+0x13c>)
   11bc8:	5ce3      	ldrb	r3, [r4, r3]
   11bca:	34f2      	adds	r4, #242	; 0xf2
   11bcc:	4359      	muls	r1, r3
   11bce:	4b0b      	ldr	r3, [pc, #44]	; (11bfc <LorawanGetChAndInitiateRadioTransmit+0x140>)
   11bd0:	7820      	ldrb	r0, [r4, #0]
   11bd2:	18c9      	adds	r1, r1, r3
   11bd4:	e7e2      	b.n	11b9c <LorawanGetChAndInitiateRadioTransmit+0xe0>
   11bd6:	4b0e      	ldr	r3, [pc, #56]	; (11c10 <LorawanGetChAndInitiateRadioTransmit+0x154>)
   11bd8:	4798      	blx	r3
   11bda:	e7b8      	b.n	11b4e <LorawanGetChAndInitiateRadioTransmit+0x92>
   11bdc:	20003a6c 	.word	0x20003a6c
   11be0:	0000e045 	.word	0x0000e045
   11be4:	000105e5 	.word	0x000105e5
   11be8:	00011a4d 	.word	0x00011a4d
   11bec:	20003cc4 	.word	0x20003cc4
   11bf0:	0000fd09 	.word	0x0000fd09
   11bf4:	0000022b 	.word	0x0000022b
   11bf8:	fffffc18 	.word	0xfffffc18
   11bfc:	001e8480 	.word	0x001e8480
   11c00:	00011c15 	.word	0x00011c15
   11c04:	0000e58d 	.word	0x0000e58d
   11c08:	20003b53 	.word	0x20003b53
   11c0c:	00011ccd 	.word	0x00011ccd
   11c10:	00011425 	.word	0x00011425

00011c14 <TransmissionErrorCallback>:
   11c14:	b530      	push	{r4, r5, lr}
   11c16:	4c22      	ldr	r4, [pc, #136]	; (11ca0 <TransmissionErrorCallback+0x8c>)
   11c18:	2501      	movs	r5, #1
   11c1a:	0023      	movs	r3, r4
   11c1c:	b08b      	sub	sp, #44	; 0x2c
   11c1e:	a903      	add	r1, sp, #12
   11c20:	700d      	strb	r5, [r1, #0]
   11c22:	33e9      	adds	r3, #233	; 0xe9
   11c24:	781b      	ldrb	r3, [r3, #0]
   11c26:	aa07      	add	r2, sp, #28
   11c28:	704b      	strb	r3, [r1, #1]
   11c2a:	0023      	movs	r3, r4
   11c2c:	33e7      	adds	r3, #231	; 0xe7
   11c2e:	781b      	ldrb	r3, [r3, #0]
   11c30:	202e      	movs	r0, #46	; 0x2e
   11c32:	708b      	strb	r3, [r1, #2]
   11c34:	4b1b      	ldr	r3, [pc, #108]	; (11ca4 <TransmissionErrorCallback+0x90>)
   11c36:	4798      	blx	r3
   11c38:	2808      	cmp	r0, #8
   11c3a:	d121      	bne.n	11c80 <TransmissionErrorCallback+0x6c>
   11c3c:	a804      	add	r0, sp, #16
   11c3e:	4b1a      	ldr	r3, [pc, #104]	; (11ca8 <TransmissionErrorCallback+0x94>)
   11c40:	7005      	strb	r5, [r0, #0]
   11c42:	4798      	blx	r3
   11c44:	9807      	ldr	r0, [sp, #28]
   11c46:	4b19      	ldr	r3, [pc, #100]	; (11cac <TransmissionErrorCallback+0x98>)
   11c48:	9908      	ldr	r1, [sp, #32]
   11c4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11c4c:	4798      	blx	r3
   11c4e:	0023      	movs	r3, r4
   11c50:	33ce      	adds	r3, #206	; 0xce
   11c52:	881b      	ldrh	r3, [r3, #0]
   11c54:	a805      	add	r0, sp, #20
   11c56:	7003      	strb	r3, [r0, #0]
   11c58:	4b15      	ldr	r3, [pc, #84]	; (11cb0 <TransmissionErrorCallback+0x9c>)
   11c5a:	6043      	str	r3, [r0, #4]
   11c5c:	4b15      	ldr	r3, [pc, #84]	; (11cb4 <TransmissionErrorCallback+0xa0>)
   11c5e:	4798      	blx	r3
   11c60:	2800      	cmp	r0, #0
   11c62:	d01a      	beq.n	11c9a <TransmissionErrorCallback+0x86>
   11c64:	0023      	movs	r3, r4
   11c66:	33fd      	adds	r3, #253	; 0xfd
   11c68:	781b      	ldrb	r3, [r3, #0]
   11c6a:	42ab      	cmp	r3, r5
   11c6c:	d108      	bne.n	11c80 <TransmissionErrorCallback+0x6c>
   11c6e:	0021      	movs	r1, r4
   11c70:	220e      	movs	r2, #14
   11c72:	3184      	adds	r1, #132	; 0x84
   11c74:	780b      	ldrb	r3, [r1, #0]
   11c76:	4393      	bics	r3, r2
   11c78:	001a      	movs	r2, r3
   11c7a:	230c      	movs	r3, #12
   11c7c:	4313      	orrs	r3, r2
   11c7e:	700b      	strb	r3, [r1, #0]
   11c80:	2200      	movs	r2, #0
   11c82:	4b0d      	ldr	r3, [pc, #52]	; (11cb8 <TransmissionErrorCallback+0xa4>)
   11c84:	490d      	ldr	r1, [pc, #52]	; (11cbc <TransmissionErrorCallback+0xa8>)
   11c86:	5ce3      	ldrb	r3, [r4, r3]
   11c88:	34fc      	adds	r4, #252	; 0xfc
   11c8a:	4359      	muls	r1, r3
   11c8c:	4b0c      	ldr	r3, [pc, #48]	; (11cc0 <TransmissionErrorCallback+0xac>)
   11c8e:	7820      	ldrb	r0, [r4, #0]
   11c90:	18c9      	adds	r1, r1, r3
   11c92:	9200      	str	r2, [sp, #0]
   11c94:	4b0b      	ldr	r3, [pc, #44]	; (11cc4 <TransmissionErrorCallback+0xb0>)
   11c96:	4c0c      	ldr	r4, [pc, #48]	; (11cc8 <TransmissionErrorCallback+0xb4>)
   11c98:	47a0      	blx	r4
   11c9a:	b00b      	add	sp, #44	; 0x2c
   11c9c:	bd30      	pop	{r4, r5, pc}
   11c9e:	46c0      	nop			; (mov r8, r8)
   11ca0:	20003a6c 	.word	0x20003a6c
   11ca4:	0000e045 	.word	0x0000e045
   11ca8:	000105e5 	.word	0x000105e5
   11cac:	00011a4d 	.word	0x00011a4d
   11cb0:	20003cc4 	.word	0x20003cc4
   11cb4:	0000fd09 	.word	0x0000fd09
   11cb8:	0000022b 	.word	0x0000022b
   11cbc:	fffffc18 	.word	0xfffffc18
   11cc0:	001e8480 	.word	0x001e8480
   11cc4:	00011c15 	.word	0x00011c15
   11cc8:	0000e58d 	.word	0x0000e58d

00011ccc <UnconfirmedTransmissionCallback>:
   11ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
   11cce:	4c3a      	ldr	r4, [pc, #232]	; (11db8 <UnconfirmedTransmissionCallback+0xec>)
   11cd0:	b08b      	sub	sp, #44	; 0x2c
   11cd2:	0023      	movs	r3, r4
   11cd4:	33ce      	adds	r3, #206	; 0xce
   11cd6:	881b      	ldrh	r3, [r3, #0]
   11cd8:	af05      	add	r7, sp, #20
   11cda:	703b      	strb	r3, [r7, #0]
   11cdc:	4b37      	ldr	r3, [pc, #220]	; (11dbc <UnconfirmedTransmissionCallback+0xf0>)
   11cde:	a903      	add	r1, sp, #12
   11ce0:	9306      	str	r3, [sp, #24]
   11ce2:	2301      	movs	r3, #1
   11ce4:	700b      	strb	r3, [r1, #0]
   11ce6:	0023      	movs	r3, r4
   11ce8:	0026      	movs	r6, r4
   11cea:	33e9      	adds	r3, #233	; 0xe9
   11cec:	781b      	ldrb	r3, [r3, #0]
   11cee:	36e7      	adds	r6, #231	; 0xe7
   11cf0:	704b      	strb	r3, [r1, #1]
   11cf2:	7833      	ldrb	r3, [r6, #0]
   11cf4:	aa07      	add	r2, sp, #28
   11cf6:	202e      	movs	r0, #46	; 0x2e
   11cf8:	4d31      	ldr	r5, [pc, #196]	; (11dc0 <UnconfirmedTransmissionCallback+0xf4>)
   11cfa:	708b      	strb	r3, [r1, #2]
   11cfc:	47a8      	blx	r5
   11cfe:	2808      	cmp	r0, #8
   11d00:	d12b      	bne.n	11d5a <UnconfirmedTransmissionCallback+0x8e>
   11d02:	2301      	movs	r3, #1
   11d04:	a804      	add	r0, sp, #16
   11d06:	7003      	strb	r3, [r0, #0]
   11d08:	4b2e      	ldr	r3, [pc, #184]	; (11dc4 <UnconfirmedTransmissionCallback+0xf8>)
   11d0a:	4798      	blx	r3
   11d0c:	9807      	ldr	r0, [sp, #28]
   11d0e:	4b2e      	ldr	r3, [pc, #184]	; (11dc8 <UnconfirmedTransmissionCallback+0xfc>)
   11d10:	9908      	ldr	r1, [sp, #32]
   11d12:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11d14:	4798      	blx	r3
   11d16:	0038      	movs	r0, r7
   11d18:	4b2c      	ldr	r3, [pc, #176]	; (11dcc <UnconfirmedTransmissionCallback+0x100>)
   11d1a:	4798      	blx	r3
   11d1c:	2800      	cmp	r0, #0
   11d1e:	d01a      	beq.n	11d56 <UnconfirmedTransmissionCallback+0x8a>
   11d20:	0023      	movs	r3, r4
   11d22:	33fd      	adds	r3, #253	; 0xfd
   11d24:	781b      	ldrb	r3, [r3, #0]
   11d26:	2b01      	cmp	r3, #1
   11d28:	d108      	bne.n	11d3c <UnconfirmedTransmissionCallback+0x70>
   11d2a:	0021      	movs	r1, r4
   11d2c:	220e      	movs	r2, #14
   11d2e:	3184      	adds	r1, #132	; 0x84
   11d30:	780b      	ldrb	r3, [r1, #0]
   11d32:	4393      	bics	r3, r2
   11d34:	001a      	movs	r2, r3
   11d36:	230c      	movs	r3, #12
   11d38:	4313      	orrs	r3, r2
   11d3a:	700b      	strb	r3, [r1, #0]
   11d3c:	2200      	movs	r2, #0
   11d3e:	4b24      	ldr	r3, [pc, #144]	; (11dd0 <UnconfirmedTransmissionCallback+0x104>)
   11d40:	4924      	ldr	r1, [pc, #144]	; (11dd4 <UnconfirmedTransmissionCallback+0x108>)
   11d42:	5ce3      	ldrb	r3, [r4, r3]
   11d44:	34fc      	adds	r4, #252	; 0xfc
   11d46:	4359      	muls	r1, r3
   11d48:	4b23      	ldr	r3, [pc, #140]	; (11dd8 <UnconfirmedTransmissionCallback+0x10c>)
   11d4a:	7820      	ldrb	r0, [r4, #0]
   11d4c:	18c9      	adds	r1, r1, r3
   11d4e:	4b23      	ldr	r3, [pc, #140]	; (11ddc <UnconfirmedTransmissionCallback+0x110>)
   11d50:	9200      	str	r2, [sp, #0]
   11d52:	4c23      	ldr	r4, [pc, #140]	; (11de0 <UnconfirmedTransmissionCallback+0x114>)
   11d54:	47a0      	blx	r4
   11d56:	b00b      	add	sp, #44	; 0x2c
   11d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11d5a:	4b22      	ldr	r3, [pc, #136]	; (11de4 <UnconfirmedTransmissionCallback+0x118>)
   11d5c:	4798      	blx	r3
   11d5e:	4b22      	ldr	r3, [pc, #136]	; (11de8 <UnconfirmedTransmissionCallback+0x11c>)
   11d60:	4922      	ldr	r1, [pc, #136]	; (11dec <UnconfirmedTransmissionCallback+0x120>)
   11d62:	4798      	blx	r3
   11d64:	23fa      	movs	r3, #250	; 0xfa
   11d66:	009b      	lsls	r3, r3, #2
   11d68:	18c9      	adds	r1, r1, r3
   11d6a:	0023      	movs	r3, r4
   11d6c:	9104      	str	r1, [sp, #16]
   11d6e:	33ff      	adds	r3, #255	; 0xff
   11d70:	7f5b      	ldrb	r3, [r3, #29]
   11d72:	079a      	lsls	r2, r3, #30
   11d74:	d515      	bpl.n	11da2 <UnconfirmedTransmissionCallback+0xd6>
   11d76:	aa04      	add	r2, sp, #16
   11d78:	0031      	movs	r1, r6
   11d7a:	2026      	movs	r0, #38	; 0x26
   11d7c:	47a8      	blx	r5
   11d7e:	9b04      	ldr	r3, [sp, #16]
   11d80:	1c5a      	adds	r2, r3, #1
   11d82:	d001      	beq.n	11d88 <UnconfirmedTransmissionCallback+0xbc>
   11d84:	3314      	adds	r3, #20
   11d86:	9304      	str	r3, [sp, #16]
   11d88:	4b11      	ldr	r3, [pc, #68]	; (11dd0 <UnconfirmedTransmissionCallback+0x104>)
   11d8a:	9a04      	ldr	r2, [sp, #16]
   11d8c:	5ce3      	ldrb	r3, [r4, r3]
   11d8e:	21fa      	movs	r1, #250	; 0xfa
   11d90:	1ad3      	subs	r3, r2, r3
   11d92:	2200      	movs	r2, #0
   11d94:	0089      	lsls	r1, r1, #2
   11d96:	34f2      	adds	r4, #242	; 0xf2
   11d98:	4359      	muls	r1, r3
   11d9a:	7820      	ldrb	r0, [r4, #0]
   11d9c:	4b14      	ldr	r3, [pc, #80]	; (11df0 <UnconfirmedTransmissionCallback+0x124>)
   11d9e:	9200      	str	r2, [sp, #0]
   11da0:	e7d7      	b.n	11d52 <UnconfirmedTransmissionCallback+0x86>
   11da2:	075b      	lsls	r3, r3, #29
   11da4:	d5f0      	bpl.n	11d88 <UnconfirmedTransmissionCallback+0xbc>
   11da6:	aa04      	add	r2, sp, #16
   11da8:	0031      	movs	r1, r6
   11daa:	2032      	movs	r0, #50	; 0x32
   11dac:	47a8      	blx	r5
   11dae:	9b04      	ldr	r3, [sp, #16]
   11db0:	1c5a      	adds	r2, r3, #1
   11db2:	d0e9      	beq.n	11d88 <UnconfirmedTransmissionCallback+0xbc>
   11db4:	3301      	adds	r3, #1
   11db6:	e7e6      	b.n	11d86 <UnconfirmedTransmissionCallback+0xba>
   11db8:	20003a6c 	.word	0x20003a6c
   11dbc:	20003cc4 	.word	0x20003cc4
   11dc0:	0000e045 	.word	0x0000e045
   11dc4:	000105e5 	.word	0x000105e5
   11dc8:	00011a4d 	.word	0x00011a4d
   11dcc:	0000fd09 	.word	0x0000fd09
   11dd0:	0000022b 	.word	0x0000022b
   11dd4:	fffffc18 	.word	0xfffffc18
   11dd8:	001e8480 	.word	0x001e8480
   11ddc:	00011c15 	.word	0x00011c15
   11de0:	0000e58d 	.word	0x0000e58d
   11de4:	00017fb1 	.word	0x00017fb1
   11de8:	000148e9 	.word	0x000148e9
   11dec:	000007d1 	.word	0x000007d1
   11df0:	00011ccd 	.word	0x00011ccd

00011df4 <EncryptFRMPayload>:
   11df4:	b5f0      	push	{r4, r5, r6, r7, lr}
   11df6:	0007      	movs	r7, r0
   11df8:	2401      	movs	r4, #1
   11dfa:	b089      	sub	sp, #36	; 0x24
   11dfc:	9306      	str	r3, [sp, #24]
   11dfe:	ab10      	add	r3, sp, #64	; 0x40
   11e00:	881d      	ldrh	r5, [r3, #0]
   11e02:	090b      	lsrs	r3, r1, #4
   11e04:	9104      	str	r1, [sp, #16]
   11e06:	9205      	str	r2, [sp, #20]
   11e08:	9303      	str	r3, [sp, #12]
   11e0a:	9b03      	ldr	r3, [sp, #12]
   11e0c:	429c      	cmp	r4, r3
   11e0e:	d907      	bls.n	11e20 <EncryptFRMPayload+0x2c>
   11e10:	260f      	movs	r6, #15
   11e12:	9b04      	ldr	r3, [sp, #16]
   11e14:	4033      	ands	r3, r6
   11e16:	1e1e      	subs	r6, r3, #0
   11e18:	d126      	bne.n	11e68 <EncryptFRMPayload+0x74>
   11e1a:	2000      	movs	r0, #0
   11e1c:	b009      	add	sp, #36	; 0x24
   11e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11e20:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11e22:	0022      	movs	r2, r4
   11e24:	9300      	str	r3, [sp, #0]
   11e26:	9906      	ldr	r1, [sp, #24]
   11e28:	2301      	movs	r3, #1
   11e2a:	9805      	ldr	r0, [sp, #20]
   11e2c:	4e1e      	ldr	r6, [pc, #120]	; (11ea8 <EncryptFRMPayload+0xb4>)
   11e2e:	47b0      	blx	r6
   11e30:	4e1e      	ldr	r6, [pc, #120]	; (11eac <EncryptFRMPayload+0xb8>)
   11e32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   11e34:	2101      	movs	r1, #1
   11e36:	0030      	movs	r0, r6
   11e38:	4b1d      	ldr	r3, [pc, #116]	; (11eb0 <EncryptFRMPayload+0xbc>)
   11e3a:	4798      	blx	r3
   11e3c:	2800      	cmp	r0, #0
   11e3e:	d1ed      	bne.n	11e1c <EncryptFRMPayload+0x28>
   11e40:	1e63      	subs	r3, r4, #1
   11e42:	011b      	lsls	r3, r3, #4
   11e44:	18fb      	adds	r3, r7, r3
   11e46:	9307      	str	r3, [sp, #28]
   11e48:	9b07      	ldr	r3, [sp, #28]
   11e4a:	182a      	adds	r2, r5, r0
   11e4c:	5c19      	ldrb	r1, [r3, r0]
   11e4e:	5d83      	ldrb	r3, [r0, r6]
   11e50:	b292      	uxth	r2, r2
   11e52:	4059      	eors	r1, r3
   11e54:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11e56:	3001      	adds	r0, #1
   11e58:	5499      	strb	r1, [r3, r2]
   11e5a:	2810      	cmp	r0, #16
   11e5c:	d1f4      	bne.n	11e48 <EncryptFRMPayload+0x54>
   11e5e:	3510      	adds	r5, #16
   11e60:	3401      	adds	r4, #1
   11e62:	b2ad      	uxth	r5, r5
   11e64:	b2e4      	uxtb	r4, r4
   11e66:	e7d0      	b.n	11e0a <EncryptFRMPayload+0x16>
   11e68:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11e6a:	0022      	movs	r2, r4
   11e6c:	9300      	str	r3, [sp, #0]
   11e6e:	9906      	ldr	r1, [sp, #24]
   11e70:	2301      	movs	r3, #1
   11e72:	9805      	ldr	r0, [sp, #20]
   11e74:	4c0c      	ldr	r4, [pc, #48]	; (11ea8 <EncryptFRMPayload+0xb4>)
   11e76:	47a0      	blx	r4
   11e78:	4c0c      	ldr	r4, [pc, #48]	; (11eac <EncryptFRMPayload+0xb8>)
   11e7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   11e7c:	2101      	movs	r1, #1
   11e7e:	0020      	movs	r0, r4
   11e80:	4b0b      	ldr	r3, [pc, #44]	; (11eb0 <EncryptFRMPayload+0xbc>)
   11e82:	4798      	blx	r3
   11e84:	2800      	cmp	r0, #0
   11e86:	d1c9      	bne.n	11e1c <EncryptFRMPayload+0x28>
   11e88:	9b03      	ldr	r3, [sp, #12]
   11e8a:	011b      	lsls	r3, r3, #4
   11e8c:	18fb      	adds	r3, r7, r3
   11e8e:	5d07      	ldrb	r7, [r0, r4]
   11e90:	5c19      	ldrb	r1, [r3, r0]
   11e92:	182a      	adds	r2, r5, r0
   11e94:	4079      	eors	r1, r7
   11e96:	9f11      	ldr	r7, [sp, #68]	; 0x44
   11e98:	b292      	uxth	r2, r2
   11e9a:	3001      	adds	r0, #1
   11e9c:	54b9      	strb	r1, [r7, r2]
   11e9e:	b2c2      	uxtb	r2, r0
   11ea0:	4296      	cmp	r6, r2
   11ea2:	d8f4      	bhi.n	11e8e <EncryptFRMPayload+0x9a>
   11ea4:	e7b9      	b.n	11e1a <EncryptFRMPayload+0x26>
   11ea6:	46c0      	nop			; (mov r8, r8)
   11ea8:	0001100d 	.word	0x0001100d
   11eac:	200020c5 	.word	0x200020c5
   11eb0:	00007309 	.word	0x00007309

00011eb4 <UpdateTransactionCompleteCbParams>:
   11eb4:	2388      	movs	r3, #136	; 0x88
   11eb6:	2201      	movs	r2, #1
   11eb8:	b570      	push	{r4, r5, r6, lr}
   11eba:	0001      	movs	r1, r0
   11ebc:	4c13      	ldr	r4, [pc, #76]	; (11f0c <UpdateTransactionCompleteCbParams+0x58>)
   11ebe:	4814      	ldr	r0, [pc, #80]	; (11f10 <UpdateTransactionCompleteCbParams+0x5c>)
   11ec0:	009b      	lsls	r3, r3, #2
   11ec2:	54e2      	strb	r2, [r4, r3]
   11ec4:	7842      	ldrb	r2, [r0, #1]
   11ec6:	7803      	ldrb	r3, [r0, #0]
   11ec8:	0212      	lsls	r2, r2, #8
   11eca:	431a      	orrs	r2, r3
   11ecc:	7883      	ldrb	r3, [r0, #2]
   11ece:	041b      	lsls	r3, r3, #16
   11ed0:	431a      	orrs	r2, r3
   11ed2:	78c3      	ldrb	r3, [r0, #3]
   11ed4:	061b      	lsls	r3, r3, #24
   11ed6:	4313      	orrs	r3, r2
   11ed8:	d00e      	beq.n	11ef8 <UpdateTransactionCompleteCbParams+0x44>
   11eda:	0022      	movs	r2, r4
   11edc:	2504      	movs	r5, #4
   11ede:	32fc      	adds	r2, #252	; 0xfc
   11ee0:	6890      	ldr	r0, [r2, #8]
   11ee2:	4228      	tst	r0, r5
   11ee4:	d008      	beq.n	11ef8 <UpdateTransactionCompleteCbParams+0x44>
   11ee6:	68d0      	ldr	r0, [r2, #12]
   11ee8:	2800      	cmp	r0, #0
   11eea:	d005      	beq.n	11ef8 <UpdateTransactionCompleteCbParams+0x44>
   11eec:	0022      	movs	r2, r4
   11eee:	32ff      	adds	r2, #255	; 0xff
   11ef0:	7451      	strb	r1, [r2, #17]
   11ef2:	7355      	strb	r5, [r2, #13]
   11ef4:	4907      	ldr	r1, [pc, #28]	; (11f14 <UpdateTransactionCompleteCbParams+0x60>)
   11ef6:	4798      	blx	r3
   11ef8:	2388      	movs	r3, #136	; 0x88
   11efa:	009b      	lsls	r3, r3, #2
   11efc:	5ce3      	ldrb	r3, [r4, r3]
   11efe:	2b00      	cmp	r3, #0
   11f00:	d002      	beq.n	11f08 <UpdateTransactionCompleteCbParams+0x54>
   11f02:	2300      	movs	r3, #0
   11f04:	34fc      	adds	r4, #252	; 0xfc
   11f06:	60e3      	str	r3, [r4, #12]
   11f08:	bd70      	pop	{r4, r5, r6, pc}
   11f0a:	46c0      	nop			; (mov r8, r8)
   11f0c:	20003a6c 	.word	0x20003a6c
   11f10:	20003dc8 	.word	0x20003dc8
   11f14:	20003b78 	.word	0x20003b78

00011f18 <UpdateRxDataAvailableCbParams>:
   11f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11f1a:	4e0f      	ldr	r6, [pc, #60]	; (11f58 <UpdateRxDataAvailableCbParams+0x40>)
   11f1c:	469c      	mov	ip, r3
   11f1e:	7875      	ldrb	r5, [r6, #1]
   11f20:	7834      	ldrb	r4, [r6, #0]
   11f22:	022d      	lsls	r5, r5, #8
   11f24:	4325      	orrs	r5, r4
   11f26:	78b4      	ldrb	r4, [r6, #2]
   11f28:	0424      	lsls	r4, r4, #16
   11f2a:	4325      	orrs	r5, r4
   11f2c:	78f4      	ldrb	r4, [r6, #3]
   11f2e:	0624      	lsls	r4, r4, #24
   11f30:	432c      	orrs	r4, r5
   11f32:	d010      	beq.n	11f56 <UpdateRxDataAvailableCbParams+0x3e>
   11f34:	4d09      	ldr	r5, [pc, #36]	; (11f5c <UpdateRxDataAvailableCbParams+0x44>)
   11f36:	2702      	movs	r7, #2
   11f38:	002e      	movs	r6, r5
   11f3a:	36fc      	adds	r6, #252	; 0xfc
   11f3c:	68b3      	ldr	r3, [r6, #8]
   11f3e:	423b      	tst	r3, r7
   11f40:	d009      	beq.n	11f56 <UpdateRxDataAvailableCbParams+0x3e>
   11f42:	4663      	mov	r3, ip
   11f44:	35ff      	adds	r5, #255	; 0xff
   11f46:	6170      	str	r0, [r6, #20]
   11f48:	61b1      	str	r1, [r6, #24]
   11f4a:	736f      	strb	r7, [r5, #13]
   11f4c:	766a      	strb	r2, [r5, #25]
   11f4e:	76ab      	strb	r3, [r5, #26]
   11f50:	4903      	ldr	r1, [pc, #12]	; (11f60 <UpdateRxDataAvailableCbParams+0x48>)
   11f52:	68f0      	ldr	r0, [r6, #12]
   11f54:	47a0      	blx	r4
   11f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11f58:	20003dc8 	.word	0x20003dc8
   11f5c:	20003a6c 	.word	0x20003a6c
   11f60:	20003b78 	.word	0x20003b78

00011f64 <LorawanNotifyAppOnRxdone>:
   11f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11f66:	4c25      	ldr	r4, [pc, #148]	; (11ffc <LorawanNotifyAppOnRxdone+0x98>)
   11f68:	0007      	movs	r7, r0
   11f6a:	0023      	movs	r3, r4
   11f6c:	33fd      	adds	r3, #253	; 0xfd
   11f6e:	781b      	ldrb	r3, [r3, #0]
   11f70:	000d      	movs	r5, r1
   11f72:	0016      	movs	r6, r2
   11f74:	2b01      	cmp	r3, #1
   11f76:	d136      	bne.n	11fe6 <LorawanNotifyAppOnRxdone+0x82>
   11f78:	0022      	movs	r2, r4
   11f7a:	210e      	movs	r1, #14
   11f7c:	3284      	adds	r2, #132	; 0x84
   11f7e:	7813      	ldrb	r3, [r2, #0]
   11f80:	438b      	bics	r3, r1
   11f82:	7013      	strb	r3, [r2, #0]
   11f84:	491e      	ldr	r1, [pc, #120]	; (12000 <LorawanNotifyAppOnRxdone+0x9c>)
   11f86:	784a      	ldrb	r2, [r1, #1]
   11f88:	780b      	ldrb	r3, [r1, #0]
   11f8a:	0212      	lsls	r2, r2, #8
   11f8c:	431a      	orrs	r2, r3
   11f8e:	788b      	ldrb	r3, [r1, #2]
   11f90:	041b      	lsls	r3, r3, #16
   11f92:	431a      	orrs	r2, r3
   11f94:	78cb      	ldrb	r3, [r1, #3]
   11f96:	061b      	lsls	r3, r3, #24
   11f98:	4313      	orrs	r3, r2
   11f9a:	d023      	beq.n	11fe4 <LorawanNotifyAppOnRxdone+0x80>
   11f9c:	0022      	movs	r2, r4
   11f9e:	2120      	movs	r1, #32
   11fa0:	3294      	adds	r2, #148	; 0x94
   11fa2:	7813      	ldrb	r3, [r2, #0]
   11fa4:	438b      	bics	r3, r1
   11fa6:	7013      	strb	r3, [r2, #0]
   11fa8:	0023      	movs	r3, r4
   11faa:	33fd      	adds	r3, #253	; 0xfd
   11fac:	781b      	ldrb	r3, [r3, #0]
   11fae:	7878      	ldrb	r0, [r7, #1]
   11fb0:	469c      	mov	ip, r3
   11fb2:	78fa      	ldrb	r2, [r7, #3]
   11fb4:	78b9      	ldrb	r1, [r7, #2]
   11fb6:	793b      	ldrb	r3, [r7, #4]
   11fb8:	4667      	mov	r7, ip
   11fba:	0209      	lsls	r1, r1, #8
   11fbc:	4301      	orrs	r1, r0
   11fbe:	0410      	lsls	r0, r2, #16
   11fc0:	4308      	orrs	r0, r1
   11fc2:	061b      	lsls	r3, r3, #24
   11fc4:	4318      	orrs	r0, r3
   11fc6:	0032      	movs	r2, r6
   11fc8:	2308      	movs	r3, #8
   11fca:	0029      	movs	r1, r5
   11fcc:	2f04      	cmp	r7, #4
   11fce:	d112      	bne.n	11ff6 <LorawanNotifyAppOnRxdone+0x92>
   11fd0:	4d0c      	ldr	r5, [pc, #48]	; (12004 <LorawanNotifyAppOnRxdone+0xa0>)
   11fd2:	47a8      	blx	r5
   11fd4:	2388      	movs	r3, #136	; 0x88
   11fd6:	009b      	lsls	r3, r3, #2
   11fd8:	5ce3      	ldrb	r3, [r4, r3]
   11fda:	2b00      	cmp	r3, #0
   11fdc:	d102      	bne.n	11fe4 <LorawanNotifyAppOnRxdone+0x80>
   11fde:	2008      	movs	r0, #8
   11fe0:	4b09      	ldr	r3, [pc, #36]	; (12008 <LorawanNotifyAppOnRxdone+0xa4>)
   11fe2:	4798      	blx	r3
   11fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11fe6:	2b04      	cmp	r3, #4
   11fe8:	d1cc      	bne.n	11f84 <LorawanNotifyAppOnRxdone+0x20>
   11fea:	0023      	movs	r3, r4
   11fec:	33f1      	adds	r3, #241	; 0xf1
   11fee:	7818      	ldrb	r0, [r3, #0]
   11ff0:	4b06      	ldr	r3, [pc, #24]	; (1200c <LorawanNotifyAppOnRxdone+0xa8>)
   11ff2:	4798      	blx	r3
   11ff4:	e7c6      	b.n	11f84 <LorawanNotifyAppOnRxdone+0x20>
   11ff6:	4d06      	ldr	r5, [pc, #24]	; (12010 <LorawanNotifyAppOnRxdone+0xac>)
   11ff8:	47a8      	blx	r5
   11ffa:	e7eb      	b.n	11fd4 <LorawanNotifyAppOnRxdone+0x70>
   11ffc:	20003a6c 	.word	0x20003a6c
   12000:	20003dc8 	.word	0x20003dc8
   12004:	00013ebd 	.word	0x00013ebd
   12008:	00011eb5 	.word	0x00011eb5
   1200c:	0000e8a5 	.word	0x0000e8a5
   12010:	00011f19 	.word	0x00011f19

00012014 <LorawanSetReceiveWindow2Parameters>:
   12014:	b537      	push	{r0, r1, r2, r4, r5, lr}
   12016:	466b      	mov	r3, sp
   12018:	1cdd      	adds	r5, r3, #3
   1201a:	9001      	str	r0, [sp, #4]
   1201c:	7029      	strb	r1, [r5, #0]
   1201e:	2001      	movs	r0, #1
   12020:	a901      	add	r1, sp, #4
   12022:	4c09      	ldr	r4, [pc, #36]	; (12048 <LorawanSetReceiveWindow2Parameters+0x34>)
   12024:	47a0      	blx	r4
   12026:	2808      	cmp	r0, #8
   12028:	d002      	beq.n	12030 <LorawanSetReceiveWindow2Parameters+0x1c>
   1202a:	240a      	movs	r4, #10
   1202c:	0020      	movs	r0, r4
   1202e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   12030:	0029      	movs	r1, r5
   12032:	200f      	movs	r0, #15
   12034:	47a0      	blx	r4
   12036:	0004      	movs	r4, r0
   12038:	2808      	cmp	r0, #8
   1203a:	d1f6      	bne.n	1202a <LorawanSetReceiveWindow2Parameters+0x16>
   1203c:	7829      	ldrb	r1, [r5, #0]
   1203e:	9801      	ldr	r0, [sp, #4]
   12040:	4b02      	ldr	r3, [pc, #8]	; (1204c <LorawanSetReceiveWindow2Parameters+0x38>)
   12042:	4798      	blx	r3
   12044:	e7f2      	b.n	1202c <LorawanSetReceiveWindow2Parameters+0x18>
   12046:	46c0      	nop			; (mov r8, r8)
   12048:	0000e061 	.word	0x0000e061
   1204c:	00011479 	.word	0x00011479

00012050 <LorawanSetReceiveWindowCParameters>:
   12050:	b537      	push	{r0, r1, r2, r4, r5, lr}
   12052:	466b      	mov	r3, sp
   12054:	1cdc      	adds	r4, r3, #3
   12056:	9001      	str	r0, [sp, #4]
   12058:	7021      	strb	r1, [r4, #0]
   1205a:	2001      	movs	r0, #1
   1205c:	a901      	add	r1, sp, #4
   1205e:	4d0d      	ldr	r5, [pc, #52]	; (12094 <LorawanSetReceiveWindowCParameters+0x44>)
   12060:	47a8      	blx	r5
   12062:	2808      	cmp	r0, #8
   12064:	d001      	beq.n	1206a <LorawanSetReceiveWindowCParameters+0x1a>
   12066:	200a      	movs	r0, #10
   12068:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1206a:	0021      	movs	r1, r4
   1206c:	200f      	movs	r0, #15
   1206e:	47a8      	blx	r5
   12070:	2808      	cmp	r0, #8
   12072:	d1f8      	bne.n	12066 <LorawanSetReceiveWindowCParameters+0x16>
   12074:	4b08      	ldr	r3, [pc, #32]	; (12098 <LorawanSetReceiveWindowCParameters+0x48>)
   12076:	9a01      	ldr	r2, [sp, #4]
   12078:	0019      	movs	r1, r3
   1207a:	7824      	ldrb	r4, [r4, #0]
   1207c:	3173      	adds	r1, #115	; 0x73
   1207e:	336f      	adds	r3, #111	; 0x6f
   12080:	700c      	strb	r4, [r1, #0]
   12082:	0a11      	lsrs	r1, r2, #8
   12084:	701a      	strb	r2, [r3, #0]
   12086:	7059      	strb	r1, [r3, #1]
   12088:	0c11      	lsrs	r1, r2, #16
   1208a:	0e12      	lsrs	r2, r2, #24
   1208c:	7099      	strb	r1, [r3, #2]
   1208e:	70da      	strb	r2, [r3, #3]
   12090:	e7ea      	b.n	12068 <LorawanSetReceiveWindowCParameters+0x18>
   12092:	46c0      	nop			; (mov r8, r8)
   12094:	0000e061 	.word	0x0000e061
   12098:	20003a6c 	.word	0x20003a6c

0001209c <LorawanSetFrequency>:
   1209c:	b507      	push	{r0, r1, r2, lr}
   1209e:	466b      	mov	r3, sp
   120a0:	9100      	str	r1, [sp, #0]
   120a2:	7118      	strb	r0, [r3, #4]
   120a4:	4669      	mov	r1, sp
   120a6:	2000      	movs	r0, #0
   120a8:	4b01      	ldr	r3, [pc, #4]	; (120b0 <LorawanSetFrequency+0x14>)
   120aa:	4798      	blx	r3
   120ac:	bd0e      	pop	{r1, r2, r3, pc}
   120ae:	46c0      	nop			; (mov r8, r8)
   120b0:	0000e07d 	.word	0x0000e07d

000120b4 <LorawanCheckAndDoRetryOnTimeout>:
   120b4:	b513      	push	{r0, r1, r4, lr}
   120b6:	4c33      	ldr	r4, [pc, #204]	; (12184 <LorawanCheckAndDoRetryOnTimeout+0xd0>)
   120b8:	0023      	movs	r3, r4
   120ba:	3394      	adds	r3, #148	; 0x94
   120bc:	781b      	ldrb	r3, [r3, #0]
   120be:	0022      	movs	r2, r4
   120c0:	07db      	lsls	r3, r3, #31
   120c2:	d54b      	bpl.n	1215c <LorawanCheckAndDoRetryOnTimeout+0xa8>
   120c4:	0023      	movs	r3, r4
   120c6:	32e4      	adds	r2, #228	; 0xe4
   120c8:	33e2      	adds	r3, #226	; 0xe2
   120ca:	7812      	ldrb	r2, [r2, #0]
   120cc:	781b      	ldrb	r3, [r3, #0]
   120ce:	429a      	cmp	r2, r3
   120d0:	d836      	bhi.n	12140 <LorawanCheckAndDoRetryOnTimeout+0x8c>
   120d2:	4b2d      	ldr	r3, [pc, #180]	; (12188 <LorawanCheckAndDoRetryOnTimeout+0xd4>)
   120d4:	5ce3      	ldrb	r3, [r4, r3]
   120d6:	2b00      	cmp	r3, #0
   120d8:	d032      	beq.n	12140 <LorawanCheckAndDoRetryOnTimeout+0x8c>
   120da:	0023      	movs	r3, r4
   120dc:	33fd      	adds	r3, #253	; 0xfd
   120de:	781b      	ldrb	r3, [r3, #0]
   120e0:	2b01      	cmp	r3, #1
   120e2:	d119      	bne.n	12118 <LorawanCheckAndDoRetryOnTimeout+0x64>
   120e4:	0021      	movs	r1, r4
   120e6:	220e      	movs	r2, #14
   120e8:	3184      	adds	r1, #132	; 0x84
   120ea:	780b      	ldrb	r3, [r1, #0]
   120ec:	4393      	bics	r3, r2
   120ee:	001a      	movs	r2, r3
   120f0:	230c      	movs	r3, #12
   120f2:	4313      	orrs	r3, r2
   120f4:	700b      	strb	r3, [r1, #0]
   120f6:	0023      	movs	r3, r4
   120f8:	33da      	adds	r3, #218	; 0xda
   120fa:	8819      	ldrh	r1, [r3, #0]
   120fc:	4b23      	ldr	r3, [pc, #140]	; (1218c <LorawanCheckAndDoRetryOnTimeout+0xd8>)
   120fe:	2200      	movs	r2, #0
   12100:	5ce3      	ldrb	r3, [r4, r3]
   12102:	34f1      	adds	r4, #241	; 0xf1
   12104:	1acb      	subs	r3, r1, r3
   12106:	21fa      	movs	r1, #250	; 0xfa
   12108:	0089      	lsls	r1, r1, #2
   1210a:	7820      	ldrb	r0, [r4, #0]
   1210c:	4359      	muls	r1, r3
   1210e:	9200      	str	r2, [sp, #0]
   12110:	4b1f      	ldr	r3, [pc, #124]	; (12190 <LorawanCheckAndDoRetryOnTimeout+0xdc>)
   12112:	4c20      	ldr	r4, [pc, #128]	; (12194 <LorawanCheckAndDoRetryOnTimeout+0xe0>)
   12114:	47a0      	blx	r4
   12116:	bd13      	pop	{r0, r1, r4, pc}
   12118:	2b04      	cmp	r3, #4
   1211a:	d1fc      	bne.n	12116 <LorawanCheckAndDoRetryOnTimeout+0x62>
   1211c:	4b1e      	ldr	r3, [pc, #120]	; (12198 <LorawanCheckAndDoRetryOnTimeout+0xe4>)
   1211e:	4798      	blx	r3
   12120:	34ce      	adds	r4, #206	; 0xce
   12122:	300d      	adds	r0, #13
   12124:	8823      	ldrh	r3, [r4, #0]
   12126:	b280      	uxth	r0, r0
   12128:	4283      	cmp	r3, r0
   1212a:	d802      	bhi.n	12132 <LorawanCheckAndDoRetryOnTimeout+0x7e>
   1212c:	4b1b      	ldr	r3, [pc, #108]	; (1219c <LorawanCheckAndDoRetryOnTimeout+0xe8>)
   1212e:	4798      	blx	r3
   12130:	e7f1      	b.n	12116 <LorawanCheckAndDoRetryOnTimeout+0x62>
   12132:	200e      	movs	r0, #14
   12134:	4b1a      	ldr	r3, [pc, #104]	; (121a0 <LorawanCheckAndDoRetryOnTimeout+0xec>)
   12136:	4798      	blx	r3
   12138:	4b1a      	ldr	r3, [pc, #104]	; (121a4 <LorawanCheckAndDoRetryOnTimeout+0xf0>)
   1213a:	4798      	blx	r3
   1213c:	4b1a      	ldr	r3, [pc, #104]	; (121a8 <LorawanCheckAndDoRetryOnTimeout+0xf4>)
   1213e:	e7f6      	b.n	1212e <LorawanCheckAndDoRetryOnTimeout+0x7a>
   12140:	2012      	movs	r0, #18
   12142:	4b17      	ldr	r3, [pc, #92]	; (121a0 <LorawanCheckAndDoRetryOnTimeout+0xec>)
   12144:	4798      	blx	r3
   12146:	4b17      	ldr	r3, [pc, #92]	; (121a4 <LorawanCheckAndDoRetryOnTimeout+0xf0>)
   12148:	4798      	blx	r3
   1214a:	34fd      	adds	r4, #253	; 0xfd
   1214c:	4b16      	ldr	r3, [pc, #88]	; (121a8 <LorawanCheckAndDoRetryOnTimeout+0xf4>)
   1214e:	4798      	blx	r3
   12150:	7823      	ldrb	r3, [r4, #0]
   12152:	2b04      	cmp	r3, #4
   12154:	d1df      	bne.n	12116 <LorawanCheckAndDoRetryOnTimeout+0x62>
   12156:	4b15      	ldr	r3, [pc, #84]	; (121ac <LorawanCheckAndDoRetryOnTimeout+0xf8>)
   12158:	4798      	blx	r3
   1215a:	e7dc      	b.n	12116 <LorawanCheckAndDoRetryOnTimeout+0x62>
   1215c:	0023      	movs	r3, r4
   1215e:	32e3      	adds	r2, #227	; 0xe3
   12160:	33e1      	adds	r3, #225	; 0xe1
   12162:	7812      	ldrb	r2, [r2, #0]
   12164:	781b      	ldrb	r3, [r3, #0]
   12166:	429a      	cmp	r2, r3
   12168:	d803      	bhi.n	12172 <LorawanCheckAndDoRetryOnTimeout+0xbe>
   1216a:	4b07      	ldr	r3, [pc, #28]	; (12188 <LorawanCheckAndDoRetryOnTimeout+0xd4>)
   1216c:	5ce3      	ldrb	r3, [r4, r3]
   1216e:	2b00      	cmp	r3, #0
   12170:	d1dc      	bne.n	1212c <LorawanCheckAndDoRetryOnTimeout+0x78>
   12172:	4b0f      	ldr	r3, [pc, #60]	; (121b0 <LorawanCheckAndDoRetryOnTimeout+0xfc>)
   12174:	4798      	blx	r3
   12176:	4b0c      	ldr	r3, [pc, #48]	; (121a8 <LorawanCheckAndDoRetryOnTimeout+0xf4>)
   12178:	4798      	blx	r3
   1217a:	2008      	movs	r0, #8
   1217c:	4b08      	ldr	r3, [pc, #32]	; (121a0 <LorawanCheckAndDoRetryOnTimeout+0xec>)
   1217e:	4798      	blx	r3
   12180:	e7c9      	b.n	12116 <LorawanCheckAndDoRetryOnTimeout+0x62>
   12182:	46c0      	nop			; (mov r8, r8)
   12184:	20003a6c 	.word	0x20003a6c
   12188:	0000022a 	.word	0x0000022a
   1218c:	0000022b 	.word	0x0000022b
   12190:	000121b5 	.word	0x000121b5
   12194:	0000e58d 	.word	0x0000e58d
   12198:	00010c81 	.word	0x00010c81
   1219c:	00011abd 	.word	0x00011abd
   121a0:	00011eb5 	.word	0x00011eb5
   121a4:	000114c1 	.word	0x000114c1
   121a8:	00010bfd 	.word	0x00010bfd
   121ac:	0000fced 	.word	0x0000fced
   121b0:	000114f1 	.word	0x000114f1

000121b4 <AckRetransmissionCallback>:
   121b4:	b510      	push	{r4, lr}
   121b6:	4c1c      	ldr	r4, [pc, #112]	; (12228 <AckRetransmissionCallback+0x74>)
   121b8:	0023      	movs	r3, r4
   121ba:	3384      	adds	r3, #132	; 0x84
   121bc:	781b      	ldrb	r3, [r3, #0]
   121be:	2b7f      	cmp	r3, #127	; 0x7f
   121c0:	d82d      	bhi.n	1221e <AckRetransmissionCallback+0x6a>
   121c2:	0023      	movs	r3, r4
   121c4:	33fd      	adds	r3, #253	; 0xfd
   121c6:	781b      	ldrb	r3, [r3, #0]
   121c8:	2b04      	cmp	r3, #4
   121ca:	d102      	bne.n	121d2 <AckRetransmissionCallback+0x1e>
   121cc:	4b17      	ldr	r3, [pc, #92]	; (1222c <AckRetransmissionCallback+0x78>)
   121ce:	4798      	blx	r3
   121d0:	e01e      	b.n	12210 <AckRetransmissionCallback+0x5c>
   121d2:	2b01      	cmp	r3, #1
   121d4:	d11c      	bne.n	12210 <AckRetransmissionCallback+0x5c>
   121d6:	0022      	movs	r2, r4
   121d8:	0023      	movs	r3, r4
   121da:	32e4      	adds	r2, #228	; 0xe4
   121dc:	33e2      	adds	r3, #226	; 0xe2
   121de:	7812      	ldrb	r2, [r2, #0]
   121e0:	781b      	ldrb	r3, [r3, #0]
   121e2:	429a      	cmp	r2, r3
   121e4:	d815      	bhi.n	12212 <AckRetransmissionCallback+0x5e>
   121e6:	4b12      	ldr	r3, [pc, #72]	; (12230 <AckRetransmissionCallback+0x7c>)
   121e8:	5ce3      	ldrb	r3, [r4, r3]
   121ea:	2b00      	cmp	r3, #0
   121ec:	d011      	beq.n	12212 <AckRetransmissionCallback+0x5e>
   121ee:	4b11      	ldr	r3, [pc, #68]	; (12234 <AckRetransmissionCallback+0x80>)
   121f0:	4798      	blx	r3
   121f2:	34ce      	adds	r4, #206	; 0xce
   121f4:	300d      	adds	r0, #13
   121f6:	8823      	ldrh	r3, [r4, #0]
   121f8:	b280      	uxth	r0, r0
   121fa:	4283      	cmp	r3, r0
   121fc:	d801      	bhi.n	12202 <AckRetransmissionCallback+0x4e>
   121fe:	4b0e      	ldr	r3, [pc, #56]	; (12238 <AckRetransmissionCallback+0x84>)
   12200:	e7e5      	b.n	121ce <AckRetransmissionCallback+0x1a>
   12202:	4b0e      	ldr	r3, [pc, #56]	; (1223c <AckRetransmissionCallback+0x88>)
   12204:	4798      	blx	r3
   12206:	4b0e      	ldr	r3, [pc, #56]	; (12240 <AckRetransmissionCallback+0x8c>)
   12208:	4798      	blx	r3
   1220a:	200e      	movs	r0, #14
   1220c:	4b0d      	ldr	r3, [pc, #52]	; (12244 <AckRetransmissionCallback+0x90>)
   1220e:	4798      	blx	r3
   12210:	bd10      	pop	{r4, pc}
   12212:	4b0a      	ldr	r3, [pc, #40]	; (1223c <AckRetransmissionCallback+0x88>)
   12214:	4798      	blx	r3
   12216:	4b0a      	ldr	r3, [pc, #40]	; (12240 <AckRetransmissionCallback+0x8c>)
   12218:	4798      	blx	r3
   1221a:	2012      	movs	r0, #18
   1221c:	e7f6      	b.n	1220c <AckRetransmissionCallback+0x58>
   1221e:	4b07      	ldr	r3, [pc, #28]	; (1223c <AckRetransmissionCallback+0x88>)
   12220:	4798      	blx	r3
   12222:	4b07      	ldr	r3, [pc, #28]	; (12240 <AckRetransmissionCallback+0x8c>)
   12224:	e7d3      	b.n	121ce <AckRetransmissionCallback+0x1a>
   12226:	46c0      	nop			; (mov r8, r8)
   12228:	20003a6c 	.word	0x20003a6c
   1222c:	000120b5 	.word	0x000120b5
   12230:	0000022a 	.word	0x0000022a
   12234:	00010c81 	.word	0x00010c81
   12238:	00011abd 	.word	0x00011abd
   1223c:	000114c1 	.word	0x000114c1
   12240:	00010bfd 	.word	0x00010bfd
   12244:	00011eb5 	.word	0x00011eb5

00012248 <LORAWAN_RxTimeout>:
   12248:	4b24      	ldr	r3, [pc, #144]	; (122dc <LORAWAN_RxTimeout+0x94>)
   1224a:	b510      	push	{r4, lr}
   1224c:	001a      	movs	r2, r3
   1224e:	3284      	adds	r2, #132	; 0x84
   12250:	7812      	ldrb	r2, [r2, #0]
   12252:	b251      	sxtb	r1, r2
   12254:	2900      	cmp	r1, #0
   12256:	db27      	blt.n	122a8 <LORAWAN_RxTimeout+0x60>
   12258:	0019      	movs	r1, r3
   1225a:	31fd      	adds	r1, #253	; 0xfd
   1225c:	7809      	ldrb	r1, [r1, #0]
   1225e:	2904      	cmp	r1, #4
   12260:	d108      	bne.n	12274 <LORAWAN_RxTimeout+0x2c>
   12262:	3903      	subs	r1, #3
   12264:	420a      	tst	r2, r1
   12266:	d005      	beq.n	12274 <LORAWAN_RxTimeout+0x2c>
   12268:	2290      	movs	r2, #144	; 0x90
   1226a:	0092      	lsls	r2, r2, #2
   1226c:	5499      	strb	r1, [r3, r2]
   1226e:	4b1c      	ldr	r3, [pc, #112]	; (122e0 <LORAWAN_RxTimeout+0x98>)
   12270:	4798      	blx	r3
   12272:	bd10      	pop	{r4, pc}
   12274:	210e      	movs	r1, #14
   12276:	0010      	movs	r0, r2
   12278:	4008      	ands	r0, r1
   1227a:	2806      	cmp	r0, #6
   1227c:	d107      	bne.n	1228e <LORAWAN_RxTimeout+0x46>
   1227e:	3384      	adds	r3, #132	; 0x84
   12280:	781a      	ldrb	r2, [r3, #0]
   12282:	438a      	bics	r2, r1
   12284:	0011      	movs	r1, r2
   12286:	2208      	movs	r2, #8
   12288:	430a      	orrs	r2, r1
   1228a:	701a      	strb	r2, [r3, #0]
   1228c:	e7f1      	b.n	12272 <LORAWAN_RxTimeout+0x2a>
   1228e:	2004      	movs	r0, #4
   12290:	3394      	adds	r3, #148	; 0x94
   12292:	781b      	ldrb	r3, [r3, #0]
   12294:	4203      	tst	r3, r0
   12296:	d002      	beq.n	1229e <LORAWAN_RxTimeout+0x56>
   12298:	4b12      	ldr	r3, [pc, #72]	; (122e4 <LORAWAN_RxTimeout+0x9c>)
   1229a:	4798      	blx	r3
   1229c:	e7e9      	b.n	12272 <LORAWAN_RxTimeout+0x2a>
   1229e:	07d3      	lsls	r3, r2, #31
   122a0:	d5e7      	bpl.n	12272 <LORAWAN_RxTimeout+0x2a>
   122a2:	4b11      	ldr	r3, [pc, #68]	; (122e8 <LORAWAN_RxTimeout+0xa0>)
   122a4:	4798      	blx	r3
   122a6:	e7e4      	b.n	12272 <LORAWAN_RxTimeout+0x2a>
   122a8:	4810      	ldr	r0, [pc, #64]	; (122ec <LORAWAN_RxTimeout+0xa4>)
   122aa:	7841      	ldrb	r1, [r0, #1]
   122ac:	7802      	ldrb	r2, [r0, #0]
   122ae:	0209      	lsls	r1, r1, #8
   122b0:	4311      	orrs	r1, r2
   122b2:	7882      	ldrb	r2, [r0, #2]
   122b4:	0412      	lsls	r2, r2, #16
   122b6:	4311      	orrs	r1, r2
   122b8:	78c2      	ldrb	r2, [r0, #3]
   122ba:	0612      	lsls	r2, r2, #24
   122bc:	430a      	orrs	r2, r1
   122be:	d0d8      	beq.n	12272 <LORAWAN_RxTimeout+0x2a>
   122c0:	2188      	movs	r1, #136	; 0x88
   122c2:	2001      	movs	r0, #1
   122c4:	0089      	lsls	r1, r1, #2
   122c6:	5458      	strb	r0, [r3, r1]
   122c8:	0019      	movs	r1, r3
   122ca:	2404      	movs	r4, #4
   122cc:	31ff      	adds	r1, #255	; 0xff
   122ce:	33fc      	adds	r3, #252	; 0xfc
   122d0:	734c      	strb	r4, [r1, #13]
   122d2:	7448      	strb	r0, [r1, #17]
   122d4:	4906      	ldr	r1, [pc, #24]	; (122f0 <LORAWAN_RxTimeout+0xa8>)
   122d6:	68d8      	ldr	r0, [r3, #12]
   122d8:	4790      	blx	r2
   122da:	e7ca      	b.n	12272 <LORAWAN_RxTimeout+0x2a>
   122dc:	20003a6c 	.word	0x20003a6c
   122e0:	00013e81 	.word	0x00013e81
   122e4:	00011515 	.word	0x00011515
   122e8:	000120b5 	.word	0x000120b5
   122ec:	20003dc8 	.word	0x20003dc8
   122f0:	20003b78 	.word	0x20003b78

000122f4 <LorawanConfigureRadioForRX2>:
   122f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   122f6:	466b      	mov	r3, sp
   122f8:	1cdd      	adds	r5, r3, #3
   122fa:	2300      	movs	r3, #0
   122fc:	702b      	strb	r3, [r5, #0]
   122fe:	2390      	movs	r3, #144	; 0x90
   12300:	4c29      	ldr	r4, [pc, #164]	; (123a8 <LorawanConfigureRadioForRX2+0xb4>)
   12302:	009b      	lsls	r3, r3, #2
   12304:	5ce1      	ldrb	r1, [r4, r3]
   12306:	0006      	movs	r6, r0
   12308:	0023      	movs	r3, r4
   1230a:	2900      	cmp	r1, #0
   1230c:	d02f      	beq.n	1236e <LorawanConfigureRadioForRX2+0x7a>
   1230e:	3373      	adds	r3, #115	; 0x73
   12310:	781b      	ldrb	r3, [r3, #0]
   12312:	702b      	strb	r3, [r5, #0]
   12314:	0023      	movs	r3, r4
   12316:	6f22      	ldr	r2, [r4, #112]	; 0x70
   12318:	336f      	adds	r3, #111	; 0x6f
   1231a:	781b      	ldrb	r3, [r3, #0]
   1231c:	0211      	lsls	r1, r2, #8
   1231e:	4319      	orrs	r1, r3
   12320:	7828      	ldrb	r0, [r5, #0]
   12322:	4b22      	ldr	r3, [pc, #136]	; (123ac <LorawanConfigureRadioForRX2+0xb8>)
   12324:	4798      	blx	r3
   12326:	2300      	movs	r3, #0
   12328:	0022      	movs	r2, r4
   1232a:	af01      	add	r7, sp, #4
   1232c:	703b      	strb	r3, [r7, #0]
   1232e:	32fd      	adds	r2, #253	; 0xfd
   12330:	7812      	ldrb	r2, [r2, #0]
   12332:	2a04      	cmp	r2, #4
   12334:	d130      	bne.n	12398 <LorawanConfigureRadioForRX2+0xa4>
   12336:	0022      	movs	r2, r4
   12338:	3284      	adds	r2, #132	; 0x84
   1233a:	7812      	ldrb	r2, [r2, #0]
   1233c:	07d2      	lsls	r2, r2, #31
   1233e:	d52b      	bpl.n	12398 <LorawanConfigureRadioForRX2+0xa4>
   12340:	2290      	movs	r2, #144	; 0x90
   12342:	0092      	lsls	r2, r2, #2
   12344:	5ca2      	ldrb	r2, [r4, r2]
   12346:	429a      	cmp	r2, r3
   12348:	d026      	beq.n	12398 <LorawanConfigureRadioForRX2+0xa4>
   1234a:	807b      	strh	r3, [r7, #2]
   1234c:	0038      	movs	r0, r7
   1234e:	4b18      	ldr	r3, [pc, #96]	; (123b0 <LorawanConfigureRadioForRX2+0xbc>)
   12350:	4798      	blx	r3
   12352:	1e04      	subs	r4, r0, #0
   12354:	d00a      	beq.n	1236c <LorawanConfigureRadioForRX2+0x78>
   12356:	4b17      	ldr	r3, [pc, #92]	; (123b4 <LorawanConfigureRadioForRX2+0xc0>)
   12358:	4798      	blx	r3
   1235a:	4b17      	ldr	r3, [pc, #92]	; (123b8 <LorawanConfigureRadioForRX2+0xc4>)
   1235c:	4798      	blx	r3
   1235e:	4b17      	ldr	r3, [pc, #92]	; (123bc <LorawanConfigureRadioForRX2+0xc8>)
   12360:	4798      	blx	r3
   12362:	2e00      	cmp	r6, #0
   12364:	d002      	beq.n	1236c <LorawanConfigureRadioForRX2+0x78>
   12366:	0020      	movs	r0, r4
   12368:	4b15      	ldr	r3, [pc, #84]	; (123c0 <LorawanConfigureRadioForRX2+0xcc>)
   1236a:	4798      	blx	r3
   1236c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   1236e:	3394      	adds	r3, #148	; 0x94
   12370:	781b      	ldrb	r3, [r3, #0]
   12372:	075b      	lsls	r3, r3, #29
   12374:	d50b      	bpl.n	1238e <LorawanConfigureRadioForRX2+0x9a>
   12376:	002a      	movs	r2, r5
   12378:	2009      	movs	r0, #9
   1237a:	4b12      	ldr	r3, [pc, #72]	; (123c4 <LorawanConfigureRadioForRX2+0xd0>)
   1237c:	4798      	blx	r3
   1237e:	0022      	movs	r2, r4
   12380:	0023      	movs	r3, r4
   12382:	326c      	adds	r2, #108	; 0x6c
   12384:	8811      	ldrh	r1, [r2, #0]
   12386:	336a      	adds	r3, #106	; 0x6a
   12388:	881b      	ldrh	r3, [r3, #0]
   1238a:	0409      	lsls	r1, r1, #16
   1238c:	e7c7      	b.n	1231e <LorawanConfigureRadioForRX2+0x2a>
   1238e:	0023      	movs	r3, r4
   12390:	336e      	adds	r3, #110	; 0x6e
   12392:	781b      	ldrb	r3, [r3, #0]
   12394:	702b      	strb	r3, [r5, #0]
   12396:	e7f2      	b.n	1237e <LorawanConfigureRadioForRX2+0x8a>
   12398:	466b      	mov	r3, sp
   1239a:	0029      	movs	r1, r5
   1239c:	1d9a      	adds	r2, r3, #6
   1239e:	2003      	movs	r0, #3
   123a0:	4b08      	ldr	r3, [pc, #32]	; (123c4 <LorawanConfigureRadioForRX2+0xd0>)
   123a2:	4798      	blx	r3
   123a4:	e7d2      	b.n	1234c <LorawanConfigureRadioForRX2+0x58>
   123a6:	46c0      	nop			; (mov r8, r8)
   123a8:	20003a6c 	.word	0x20003a6c
   123ac:	000119e1 	.word	0x000119e1
   123b0:	000105e5 	.word	0x000105e5
   123b4:	000114c1 	.word	0x000114c1
   123b8:	000114f1 	.word	0x000114f1
   123bc:	00010bfd 	.word	0x00010bfd
   123c0:	00011eb5 	.word	0x00011eb5
   123c4:	0000e045 	.word	0x0000e045

000123c8 <SetReceptionNotOkState>:
   123c8:	4a0c      	ldr	r2, [pc, #48]	; (123fc <SetReceptionNotOkState+0x34>)
   123ca:	b510      	push	{r4, lr}
   123cc:	0013      	movs	r3, r2
   123ce:	33fd      	adds	r3, #253	; 0xfd
   123d0:	7819      	ldrb	r1, [r3, #0]
   123d2:	0013      	movs	r3, r2
   123d4:	4c0a      	ldr	r4, [pc, #40]	; (12400 <SetReceptionNotOkState+0x38>)
   123d6:	3384      	adds	r3, #132	; 0x84
   123d8:	2904      	cmp	r1, #4
   123da:	d105      	bne.n	123e8 <SetReceptionNotOkState+0x20>
   123dc:	2088      	movs	r0, #136	; 0x88
   123de:	3903      	subs	r1, #3
   123e0:	0080      	lsls	r0, r0, #2
   123e2:	5411      	strb	r1, [r2, r0]
   123e4:	3020      	adds	r0, #32
   123e6:	5411      	strb	r1, [r2, r0]
   123e8:	210e      	movs	r1, #14
   123ea:	781a      	ldrb	r2, [r3, #0]
   123ec:	2000      	movs	r0, #0
   123ee:	438a      	bics	r2, r1
   123f0:	0011      	movs	r1, r2
   123f2:	220a      	movs	r2, #10
   123f4:	430a      	orrs	r2, r1
   123f6:	701a      	strb	r2, [r3, #0]
   123f8:	47a0      	blx	r4
   123fa:	bd10      	pop	{r4, pc}
   123fc:	20003a6c 	.word	0x20003a6c
   12400:	000122f5 	.word	0x000122f5

00012404 <LorawanProcessFcntDown>:
   12404:	b570      	push	{r4, r5, r6, lr}
   12406:	79c3      	ldrb	r3, [r0, #7]
   12408:	7982      	ldrb	r2, [r0, #6]
   1240a:	4c1f      	ldr	r4, [pc, #124]	; (12488 <LorawanProcessFcntDown+0x84>)
   1240c:	021b      	lsls	r3, r3, #8
   1240e:	4313      	orrs	r3, r2
   12410:	0022      	movs	r2, r4
   12412:	218b      	movs	r1, #139	; 0x8b
   12414:	328c      	adds	r2, #140	; 0x8c
   12416:	8810      	ldrh	r0, [r2, #0]
   12418:	0089      	lsls	r1, r1, #2
   1241a:	8013      	strh	r3, [r2, #0]
   1241c:	4298      	cmp	r0, r3
   1241e:	d80f      	bhi.n	12440 <LorawanProcessFcntDown+0x3c>
   12420:	5c61      	ldrb	r1, [r4, r1]
   12422:	2900      	cmp	r1, #0
   12424:	d007      	beq.n	12436 <LorawanProcessFcntDown+0x32>
   12426:	2301      	movs	r3, #1
   12428:	408b      	lsls	r3, r1
   1242a:	6812      	ldr	r2, [r2, #0]
   1242c:	3b01      	subs	r3, #1
   1242e:	421a      	tst	r2, r3
   12430:	d001      	beq.n	12436 <LorawanProcessFcntDown+0x32>
   12432:	2008      	movs	r0, #8
   12434:	bd70      	pop	{r4, r5, r6, pc}
   12436:	210a      	movs	r1, #10
   12438:	4b14      	ldr	r3, [pc, #80]	; (1248c <LorawanProcessFcntDown+0x88>)
   1243a:	2001      	movs	r0, #1
   1243c:	4798      	blx	r3
   1243e:	e7f8      	b.n	12432 <LorawanProcessFcntDown+0x2e>
   12440:	0020      	movs	r0, r4
   12442:	308e      	adds	r0, #142	; 0x8e
   12444:	8803      	ldrh	r3, [r0, #0]
   12446:	3301      	adds	r3, #1
   12448:	8003      	strh	r3, [r0, #0]
   1244a:	5c61      	ldrb	r1, [r4, r1]
   1244c:	2900      	cmp	r1, #0
   1244e:	d005      	beq.n	1245c <LorawanProcessFcntDown+0x58>
   12450:	2301      	movs	r3, #1
   12452:	408b      	lsls	r3, r1
   12454:	6812      	ldr	r2, [r2, #0]
   12456:	3b01      	subs	r3, #1
   12458:	421a      	tst	r2, r3
   1245a:	d103      	bne.n	12464 <LorawanProcessFcntDown+0x60>
   1245c:	210a      	movs	r1, #10
   1245e:	2001      	movs	r0, #1
   12460:	4b0a      	ldr	r3, [pc, #40]	; (1248c <LorawanProcessFcntDown+0x88>)
   12462:	4798      	blx	r3
   12464:	0023      	movs	r3, r4
   12466:	338c      	adds	r3, #140	; 0x8c
   12468:	681b      	ldr	r3, [r3, #0]
   1246a:	3301      	adds	r3, #1
   1246c:	d1e1      	bne.n	12432 <LorawanProcessFcntDown+0x2e>
   1246e:	2501      	movs	r5, #1
   12470:	3484      	adds	r4, #132	; 0x84
   12472:	78a3      	ldrb	r3, [r4, #2]
   12474:	432b      	orrs	r3, r5
   12476:	70a3      	strb	r3, [r4, #2]
   12478:	4b05      	ldr	r3, [pc, #20]	; (12490 <LorawanProcessFcntDown+0x8c>)
   1247a:	4798      	blx	r3
   1247c:	210b      	movs	r1, #11
   1247e:	0028      	movs	r0, r5
   12480:	4b02      	ldr	r3, [pc, #8]	; (1248c <LorawanProcessFcntDown+0x88>)
   12482:	4798      	blx	r3
   12484:	200d      	movs	r0, #13
   12486:	e7d5      	b.n	12434 <LorawanProcessFcntDown+0x30>
   12488:	20003a6c 	.word	0x20003a6c
   1248c:	000098a5 	.word	0x000098a5
   12490:	000123c9 	.word	0x000123c9

00012494 <UpdateCurrentDataRateAfterDataRangeChanges>:
   12494:	4b09      	ldr	r3, [pc, #36]	; (124bc <UpdateCurrentDataRateAfterDataRangeChanges+0x28>)
   12496:	001a      	movs	r2, r3
   12498:	32f4      	adds	r2, #244	; 0xf4
   1249a:	7811      	ldrb	r1, [r2, #0]
   1249c:	001a      	movs	r2, r3
   1249e:	32e7      	adds	r2, #231	; 0xe7
   124a0:	7810      	ldrb	r0, [r2, #0]
   124a2:	4288      	cmp	r0, r1
   124a4:	d900      	bls.n	124a8 <UpdateCurrentDataRateAfterDataRangeChanges+0x14>
   124a6:	7011      	strb	r1, [r2, #0]
   124a8:	001a      	movs	r2, r3
   124aa:	33e7      	adds	r3, #231	; 0xe7
   124ac:	32f3      	adds	r2, #243	; 0xf3
   124ae:	7812      	ldrb	r2, [r2, #0]
   124b0:	7819      	ldrb	r1, [r3, #0]
   124b2:	4291      	cmp	r1, r2
   124b4:	d200      	bcs.n	124b8 <UpdateCurrentDataRateAfterDataRangeChanges+0x24>
   124b6:	701a      	strb	r2, [r3, #0]
   124b8:	4770      	bx	lr
   124ba:	46c0      	nop			; (mov r8, r8)
   124bc:	20003a6c 	.word	0x20003a6c

000124c0 <ExecuteNewChannel>:
   124c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   124c2:	b08d      	sub	sp, #52	; 0x34
   124c4:	7807      	ldrb	r7, [r0, #0]
   124c6:	ab02      	add	r3, sp, #8
   124c8:	0006      	movs	r6, r0
   124ca:	71df      	strb	r7, [r3, #7]
   124cc:	1c41      	adds	r1, r0, #1
   124ce:	4b59      	ldr	r3, [pc, #356]	; (12634 <ExecuteNewChannel+0x174>)
   124d0:	2204      	movs	r2, #4
   124d2:	a808      	add	r0, sp, #32
   124d4:	4798      	blx	r3
   124d6:	9b08      	ldr	r3, [sp, #32]
   124d8:	4c57      	ldr	r4, [pc, #348]	; (12638 <ExecuteNewChannel+0x178>)
   124da:	021d      	lsls	r5, r3, #8
   124dc:	2364      	movs	r3, #100	; 0x64
   124de:	0a2d      	lsrs	r5, r5, #8
   124e0:	435d      	muls	r5, r3
   124e2:	1d73      	adds	r3, r6, #5
   124e4:	9301      	str	r3, [sp, #4]
   124e6:	0023      	movs	r3, r4
   124e8:	9508      	str	r5, [sp, #32]
   124ea:	33ff      	adds	r3, #255	; 0xff
   124ec:	781b      	ldrb	r3, [r3, #0]
   124ee:	3b02      	subs	r3, #2
   124f0:	2b01      	cmp	r3, #1
   124f2:	d800      	bhi.n	124f6 <ExecuteNewChannel+0x36>
   124f4:	e092      	b.n	1261c <ExecuteNewChannel+0x15c>
   124f6:	7933      	ldrb	r3, [r6, #4]
   124f8:	a904      	add	r1, sp, #16
   124fa:	9300      	str	r3, [sp, #0]
   124fc:	2300      	movs	r3, #0
   124fe:	2015      	movs	r0, #21
   12500:	4e4e      	ldr	r6, [pc, #312]	; (1263c <ExecuteNewChannel+0x17c>)
   12502:	700f      	strb	r7, [r1, #0]
   12504:	704b      	strb	r3, [r1, #1]
   12506:	47b0      	blx	r6
   12508:	2808      	cmp	r0, #8
   1250a:	d12b      	bne.n	12564 <ExecuteNewChannel+0xa4>
   1250c:	466a      	mov	r2, sp
   1250e:	ab02      	add	r3, sp, #8
   12510:	79db      	ldrb	r3, [r3, #7]
   12512:	7812      	ldrb	r2, [r2, #0]
   12514:	af06      	add	r7, sp, #24
   12516:	a90a      	add	r1, sp, #40	; 0x28
   12518:	3806      	subs	r0, #6
   1251a:	703b      	strb	r3, [r7, #0]
   1251c:	707a      	strb	r2, [r7, #1]
   1251e:	710b      	strb	r3, [r1, #4]
   12520:	950a      	str	r5, [sp, #40]	; 0x28
   12522:	47b0      	blx	r6
   12524:	2808      	cmp	r0, #8
   12526:	d001      	beq.n	1252c <ExecuteNewChannel+0x6c>
   12528:	2d00      	cmp	r5, #0
   1252a:	d10b      	bne.n	12544 <ExecuteNewChannel+0x84>
   1252c:	0023      	movs	r3, r4
   1252e:	33e0      	adds	r3, #224	; 0xe0
   12530:	781a      	ldrb	r2, [r3, #0]
   12532:	2303      	movs	r3, #3
   12534:	4353      	muls	r3, r2
   12536:	2280      	movs	r2, #128	; 0x80
   12538:	18e3      	adds	r3, r4, r3
   1253a:	3398      	adds	r3, #152	; 0x98
   1253c:	7899      	ldrb	r1, [r3, #2]
   1253e:	4252      	negs	r2, r2
   12540:	430a      	orrs	r2, r1
   12542:	709a      	strb	r2, [r3, #2]
   12544:	0039      	movs	r1, r7
   12546:	2012      	movs	r0, #18
   12548:	47b0      	blx	r6
   1254a:	2808      	cmp	r0, #8
   1254c:	d10a      	bne.n	12564 <ExecuteNewChannel+0xa4>
   1254e:	0023      	movs	r3, r4
   12550:	33e0      	adds	r3, #224	; 0xe0
   12552:	781a      	ldrb	r2, [r3, #0]
   12554:	2303      	movs	r3, #3
   12556:	4353      	muls	r3, r2
   12558:	2240      	movs	r2, #64	; 0x40
   1255a:	18e3      	adds	r3, r4, r3
   1255c:	3398      	adds	r3, #152	; 0x98
   1255e:	7899      	ldrb	r1, [r3, #2]
   12560:	430a      	orrs	r2, r1
   12562:	709a      	strb	r2, [r3, #2]
   12564:	0023      	movs	r3, r4
   12566:	33e0      	adds	r3, #224	; 0xe0
   12568:	781a      	ldrb	r2, [r3, #0]
   1256a:	2303      	movs	r3, #3
   1256c:	4353      	muls	r3, r2
   1256e:	18e3      	adds	r3, r4, r3
   12570:	3398      	adds	r3, #152	; 0x98
   12572:	789b      	ldrb	r3, [r3, #2]
   12574:	09da      	lsrs	r2, r3, #7
   12576:	2a01      	cmp	r2, #1
   12578:	d150      	bne.n	1261c <ExecuteNewChannel+0x15c>
   1257a:	065b      	lsls	r3, r3, #25
   1257c:	d54e      	bpl.n	1261c <ExecuteNewChannel+0x15c>
   1257e:	4e30      	ldr	r6, [pc, #192]	; (12640 <ExecuteNewChannel+0x180>)
   12580:	2d00      	cmp	r5, #0
   12582:	d04e      	beq.n	12622 <ExecuteNewChannel+0x162>
   12584:	a906      	add	r1, sp, #24
   12586:	2012      	movs	r0, #18
   12588:	47b0      	blx	r6
   1258a:	ad07      	add	r5, sp, #28
   1258c:	a90a      	add	r1, sp, #40	; 0x28
   1258e:	2000      	movs	r0, #0
   12590:	47b0      	blx	r6
   12592:	002a      	movs	r2, r5
   12594:	2100      	movs	r1, #0
   12596:	2014      	movs	r0, #20
   12598:	4f2a      	ldr	r7, [pc, #168]	; (12644 <ExecuteNewChannel+0x184>)
   1259a:	47b8      	blx	r7
   1259c:	0023      	movs	r3, r4
   1259e:	782a      	ldrb	r2, [r5, #0]
   125a0:	33f3      	adds	r3, #243	; 0xf3
   125a2:	701a      	strb	r2, [r3, #0]
   125a4:	0023      	movs	r3, r4
   125a6:	786a      	ldrb	r2, [r5, #1]
   125a8:	33f4      	adds	r3, #244	; 0xf4
   125aa:	701a      	strb	r2, [r3, #0]
   125ac:	34ff      	adds	r4, #255	; 0xff
   125ae:	4b26      	ldr	r3, [pc, #152]	; (12648 <ExecuteNewChannel+0x188>)
   125b0:	4798      	blx	r3
   125b2:	7f63      	ldrb	r3, [r4, #29]
   125b4:	079b      	lsls	r3, r3, #30
   125b6:	d50e      	bpl.n	125d6 <ExecuteNewChannel+0x116>
   125b8:	2416      	movs	r4, #22
   125ba:	ab02      	add	r3, sp, #8
   125bc:	18e4      	adds	r4, r4, r3
   125be:	1dd9      	adds	r1, r3, #7
   125c0:	0022      	movs	r2, r4
   125c2:	201e      	movs	r0, #30
   125c4:	47b8      	blx	r7
   125c6:	ab02      	add	r3, sp, #8
   125c8:	79db      	ldrb	r3, [r3, #7]
   125ca:	a909      	add	r1, sp, #36	; 0x24
   125cc:	708b      	strb	r3, [r1, #2]
   125ce:	8823      	ldrh	r3, [r4, #0]
   125d0:	201e      	movs	r0, #30
   125d2:	800b      	strh	r3, [r1, #0]
   125d4:	47b0      	blx	r6
   125d6:	ab02      	add	r3, sp, #8
   125d8:	79db      	ldrb	r3, [r3, #7]
   125da:	a905      	add	r1, sp, #20
   125dc:	700b      	strb	r3, [r1, #0]
   125de:	2301      	movs	r3, #1
   125e0:	2016      	movs	r0, #22
   125e2:	704b      	strb	r3, [r1, #1]
   125e4:	4b16      	ldr	r3, [pc, #88]	; (12640 <ExecuteNewChannel+0x180>)
   125e6:	4798      	blx	r3
   125e8:	ad09      	add	r5, sp, #36	; 0x24
   125ea:	2100      	movs	r1, #0
   125ec:	002a      	movs	r2, r5
   125ee:	4b15      	ldr	r3, [pc, #84]	; (12644 <ExecuteNewChannel+0x184>)
   125f0:	2014      	movs	r0, #20
   125f2:	4798      	blx	r3
   125f4:	4c10      	ldr	r4, [pc, #64]	; (12638 <ExecuteNewChannel+0x178>)
   125f6:	782a      	ldrb	r2, [r5, #0]
   125f8:	0023      	movs	r3, r4
   125fa:	33f3      	adds	r3, #243	; 0xf3
   125fc:	701a      	strb	r2, [r3, #0]
   125fe:	0023      	movs	r3, r4
   12600:	786a      	ldrb	r2, [r5, #1]
   12602:	33f4      	adds	r3, #244	; 0xf4
   12604:	701a      	strb	r2, [r3, #0]
   12606:	4b10      	ldr	r3, [pc, #64]	; (12648 <ExecuteNewChannel+0x188>)
   12608:	4798      	blx	r3
   1260a:	2304      	movs	r3, #4
   1260c:	3484      	adds	r4, #132	; 0x84
   1260e:	7862      	ldrb	r2, [r4, #1]
   12610:	210b      	movs	r1, #11
   12612:	4313      	orrs	r3, r2
   12614:	7063      	strb	r3, [r4, #1]
   12616:	2001      	movs	r0, #1
   12618:	4b0c      	ldr	r3, [pc, #48]	; (1264c <ExecuteNewChannel+0x18c>)
   1261a:	4798      	blx	r3
   1261c:	9801      	ldr	r0, [sp, #4]
   1261e:	b00d      	add	sp, #52	; 0x34
   12620:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12622:	ab02      	add	r3, sp, #8
   12624:	79db      	ldrb	r3, [r3, #7]
   12626:	a905      	add	r1, sp, #20
   12628:	2016      	movs	r0, #22
   1262a:	700b      	strb	r3, [r1, #0]
   1262c:	704d      	strb	r5, [r1, #1]
   1262e:	47b0      	blx	r6
   12630:	e7da      	b.n	125e8 <ExecuteNewChannel+0x128>
   12632:	46c0      	nop			; (mov r8, r8)
   12634:	0001786b 	.word	0x0001786b
   12638:	20003a6c 	.word	0x20003a6c
   1263c:	0000e061 	.word	0x0000e061
   12640:	0000e07d 	.word	0x0000e07d
   12644:	0000e045 	.word	0x0000e045
   12648:	00012495 	.word	0x00012495
   1264c:	000098a5 	.word	0x000098a5

00012650 <MacExecuteCommands>:
   12650:	b5f0      	push	{r4, r5, r6, r7, lr}
   12652:	1843      	adds	r3, r0, r1
   12654:	b087      	sub	sp, #28
   12656:	9301      	str	r3, [sp, #4]
   12658:	2300      	movs	r3, #0
   1265a:	0007      	movs	r7, r0
   1265c:	2501      	movs	r5, #1
   1265e:	9302      	str	r3, [sp, #8]
   12660:	9b01      	ldr	r3, [sp, #4]
   12662:	4e71      	ldr	r6, [pc, #452]	; (12828 <MacExecuteCommands+0x1d8>)
   12664:	429f      	cmp	r7, r3
   12666:	d362      	bcc.n	1272e <MacExecuteCommands+0xde>
   12668:	4b70      	ldr	r3, [pc, #448]	; (1282c <MacExecuteCommands+0x1dc>)
   1266a:	5cf3      	ldrb	r3, [r6, r3]
   1266c:	2b00      	cmp	r3, #0
   1266e:	d000      	beq.n	12672 <MacExecuteCommands+0x22>
   12670:	e08f      	b.n	12792 <MacExecuteCommands+0x142>
   12672:	0038      	movs	r0, r7
   12674:	b007      	add	sp, #28
   12676:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12678:	0032      	movs	r2, r6
   1267a:	7879      	ldrb	r1, [r7, #1]
   1267c:	32e5      	adds	r2, #229	; 0xe5
   1267e:	7011      	strb	r1, [r2, #0]
   12680:	0032      	movs	r2, r6
   12682:	78b9      	ldrb	r1, [r7, #2]
   12684:	32e6      	adds	r2, #230	; 0xe6
   12686:	1cfc      	adds	r4, r7, #3
   12688:	7011      	strb	r1, [r2, #0]
   1268a:	2203      	movs	r2, #3
   1268c:	4353      	muls	r3, r2
   1268e:	18f3      	adds	r3, r6, r3
   12690:	3399      	adds	r3, #153	; 0x99
   12692:	32fc      	adds	r2, #252	; 0xfc
   12694:	701a      	strb	r2, [r3, #0]
   12696:	e020      	b.n	126da <MacExecuteCommands+0x8a>
   12698:	0020      	movs	r0, r4
   1269a:	4b65      	ldr	r3, [pc, #404]	; (12830 <MacExecuteCommands+0x1e0>)
   1269c:	4798      	blx	r3
   1269e:	0004      	movs	r4, r0
   126a0:	e01b      	b.n	126da <MacExecuteCommands+0x8a>
   126a2:	0020      	movs	r0, r4
   126a4:	4b63      	ldr	r3, [pc, #396]	; (12834 <MacExecuteCommands+0x1e4>)
   126a6:	e7f9      	b.n	1269c <MacExecuteCommands+0x4c>
   126a8:	0020      	movs	r0, r4
   126aa:	4b63      	ldr	r3, [pc, #396]	; (12838 <MacExecuteCommands+0x1e8>)
   126ac:	e7f6      	b.n	1269c <MacExecuteCommands+0x4c>
   126ae:	0020      	movs	r0, r4
   126b0:	4b62      	ldr	r3, [pc, #392]	; (1283c <MacExecuteCommands+0x1ec>)
   126b2:	e7f3      	b.n	1269c <MacExecuteCommands+0x4c>
   126b4:	7878      	ldrb	r0, [r7, #1]
   126b6:	230f      	movs	r3, #15
   126b8:	0002      	movs	r2, r0
   126ba:	1cbc      	adds	r4, r7, #2
   126bc:	439a      	bics	r2, r3
   126be:	d10c      	bne.n	126da <MacExecuteCommands+0x8a>
   126c0:	4b5f      	ldr	r3, [pc, #380]	; (12840 <MacExecuteCommands+0x1f0>)
   126c2:	4798      	blx	r3
   126c4:	0032      	movs	r2, r6
   126c6:	2380      	movs	r3, #128	; 0x80
   126c8:	3284      	adds	r2, #132	; 0x84
   126ca:	7851      	ldrb	r1, [r2, #1]
   126cc:	425b      	negs	r3, r3
   126ce:	430b      	orrs	r3, r1
   126d0:	7053      	strb	r3, [r2, #1]
   126d2:	210b      	movs	r1, #11
   126d4:	0028      	movs	r0, r5
   126d6:	4b5b      	ldr	r3, [pc, #364]	; (12844 <MacExecuteCommands+0x1f4>)
   126d8:	4798      	blx	r3
   126da:	0032      	movs	r2, r6
   126dc:	2103      	movs	r1, #3
   126de:	32e0      	adds	r2, #224	; 0xe0
   126e0:	7813      	ldrb	r3, [r2, #0]
   126e2:	4359      	muls	r1, r3
   126e4:	1876      	adds	r6, r6, r1
   126e6:	3699      	adds	r6, #153	; 0x99
   126e8:	7831      	ldrb	r1, [r6, #0]
   126ea:	29ff      	cmp	r1, #255	; 0xff
   126ec:	d003      	beq.n	126f6 <MacExecuteCommands+0xa6>
   126ee:	2b0f      	cmp	r3, #15
   126f0:	d801      	bhi.n	126f6 <MacExecuteCommands+0xa6>
   126f2:	3301      	adds	r3, #1
   126f4:	7013      	strb	r3, [r2, #0]
   126f6:	0027      	movs	r7, r4
   126f8:	e7b2      	b.n	12660 <MacExecuteCommands+0x10>
   126fa:	0020      	movs	r0, r4
   126fc:	4b52      	ldr	r3, [pc, #328]	; (12848 <MacExecuteCommands+0x1f8>)
   126fe:	e7cd      	b.n	1269c <MacExecuteCommands+0x4c>
   12700:	0020      	movs	r0, r4
   12702:	4b52      	ldr	r3, [pc, #328]	; (1284c <MacExecuteCommands+0x1fc>)
   12704:	e7ca      	b.n	1269c <MacExecuteCommands+0x4c>
   12706:	0020      	movs	r0, r4
   12708:	4b51      	ldr	r3, [pc, #324]	; (12850 <MacExecuteCommands+0x200>)
   1270a:	4798      	blx	r3
   1270c:	0033      	movs	r3, r6
   1270e:	33e0      	adds	r3, #224	; 0xe0
   12710:	0004      	movs	r4, r0
   12712:	781b      	ldrb	r3, [r3, #0]
   12714:	e7b9      	b.n	1268a <MacExecuteCommands+0x3a>
   12716:	2203      	movs	r2, #3
   12718:	4353      	muls	r3, r2
   1271a:	18f3      	adds	r3, r6, r3
   1271c:	3399      	adds	r3, #153	; 0x99
   1271e:	32fc      	adds	r2, #252	; 0xfc
   12720:	701a      	strb	r2, [r3, #0]
   12722:	9c01      	ldr	r4, [sp, #4]
   12724:	9502      	str	r5, [sp, #8]
   12726:	e7d8      	b.n	126da <MacExecuteCommands+0x8a>
   12728:	23ff      	movs	r3, #255	; 0xff
   1272a:	7013      	strb	r3, [r2, #0]
   1272c:	e7f9      	b.n	12722 <MacExecuteCommands+0xd2>
   1272e:	9b02      	ldr	r3, [sp, #8]
   12730:	2b00      	cmp	r3, #0
   12732:	d199      	bne.n	12668 <MacExecuteCommands+0x18>
   12734:	0033      	movs	r3, r6
   12736:	2203      	movs	r2, #3
   12738:	33e0      	adds	r3, #224	; 0xe0
   1273a:	781b      	ldrb	r3, [r3, #0]
   1273c:	2401      	movs	r4, #1
   1273e:	435a      	muls	r2, r3
   12740:	18b2      	adds	r2, r6, r2
   12742:	0010      	movs	r0, r2
   12744:	3098      	adds	r0, #152	; 0x98
   12746:	7881      	ldrb	r1, [r0, #2]
   12748:	3299      	adds	r2, #153	; 0x99
   1274a:	43a9      	bics	r1, r5
   1274c:	4021      	ands	r1, r4
   1274e:	7081      	strb	r1, [r0, #2]
   12750:	78c1      	ldrb	r1, [r0, #3]
   12752:	193c      	adds	r4, r7, r4
   12754:	43a9      	bics	r1, r5
   12756:	70c1      	strb	r1, [r0, #3]
   12758:	7839      	ldrb	r1, [r7, #0]
   1275a:	7011      	strb	r1, [r2, #0]
   1275c:	7838      	ldrb	r0, [r7, #0]
   1275e:	493d      	ldr	r1, [pc, #244]	; (12854 <MacExecuteCommands+0x204>)
   12760:	1809      	adds	r1, r1, r0
   12762:	3902      	subs	r1, #2
   12764:	7809      	ldrb	r1, [r1, #0]
   12766:	1861      	adds	r1, r4, r1
   12768:	468c      	mov	ip, r1
   1276a:	9901      	ldr	r1, [sp, #4]
   1276c:	4561      	cmp	r1, ip
   1276e:	d3db      	bcc.n	12728 <MacExecuteCommands+0xd8>
   12770:	3802      	subs	r0, #2
   12772:	280b      	cmp	r0, #11
   12774:	d8cf      	bhi.n	12716 <MacExecuteCommands+0xc6>
   12776:	f001 ff33 	bl	145e0 <__gnu_thumb1_case_shi>
   1277a:	ff7f      	.short	0xff7f
   1277c:	ff94ff8f 	.word	0xff94ff8f
   12780:	ffb0ff97 	.word	0xffb0ff97
   12784:	ff9dff9a 	.word	0xff9dff9a
   12788:	ffc3ffc0 	.word	0xffc3ffc0
   1278c:	ffceffce 	.word	0xffceffce
   12790:	ffc6      	.short	0xffc6
   12792:	4b31      	ldr	r3, [pc, #196]	; (12858 <MacExecuteCommands+0x208>)
   12794:	5cf3      	ldrb	r3, [r6, r3]
   12796:	43db      	mvns	r3, r3
   12798:	075b      	lsls	r3, r3, #29
   1279a:	d000      	beq.n	1279e <MacExecuteCommands+0x14e>
   1279c:	e769      	b.n	12672 <MacExecuteCommands+0x22>
   1279e:	4b2f      	ldr	r3, [pc, #188]	; (1285c <MacExecuteCommands+0x20c>)
   127a0:	ad05      	add	r5, sp, #20
   127a2:	5cf4      	ldrb	r4, [r6, r3]
   127a4:	2100      	movs	r1, #0
   127a6:	0724      	lsls	r4, r4, #28
   127a8:	0f24      	lsrs	r4, r4, #28
   127aa:	b2e3      	uxtb	r3, r4
   127ac:	9301      	str	r3, [sp, #4]
   127ae:	4b2c      	ldr	r3, [pc, #176]	; (12860 <MacExecuteCommands+0x210>)
   127b0:	002a      	movs	r2, r5
   127b2:	5cf3      	ldrb	r3, [r6, r3]
   127b4:	2014      	movs	r0, #20
   127b6:	9302      	str	r3, [sp, #8]
   127b8:	2389      	movs	r3, #137	; 0x89
   127ba:	009b      	lsls	r3, r3, #2
   127bc:	5cf3      	ldrb	r3, [r6, r3]
   127be:	9303      	str	r3, [sp, #12]
   127c0:	4b28      	ldr	r3, [pc, #160]	; (12864 <MacExecuteCommands+0x214>)
   127c2:	4798      	blx	r3
   127c4:	0033      	movs	r3, r6
   127c6:	782a      	ldrb	r2, [r5, #0]
   127c8:	33f3      	adds	r3, #243	; 0xf3
   127ca:	701a      	strb	r2, [r3, #0]
   127cc:	0033      	movs	r3, r6
   127ce:	786a      	ldrb	r2, [r5, #1]
   127d0:	33f4      	adds	r3, #244	; 0xf4
   127d2:	701a      	strb	r2, [r3, #0]
   127d4:	4b24      	ldr	r3, [pc, #144]	; (12868 <MacExecuteCommands+0x218>)
   127d6:	4798      	blx	r3
   127d8:	9802      	ldr	r0, [sp, #8]
   127da:	4b24      	ldr	r3, [pc, #144]	; (1286c <MacExecuteCommands+0x21c>)
   127dc:	4798      	blx	r3
   127de:	0032      	movs	r2, r6
   127e0:	2308      	movs	r3, #8
   127e2:	3284      	adds	r2, #132	; 0x84
   127e4:	7851      	ldrb	r1, [r2, #1]
   127e6:	430b      	orrs	r3, r1
   127e8:	7053      	strb	r3, [r2, #1]
   127ea:	9803      	ldr	r0, [sp, #12]
   127ec:	4b20      	ldr	r3, [pc, #128]	; (12870 <MacExecuteCommands+0x220>)
   127ee:	4798      	blx	r3
   127f0:	0033      	movs	r3, r6
   127f2:	b2e2      	uxtb	r2, r4
   127f4:	33e1      	adds	r3, #225	; 0xe1
   127f6:	2a00      	cmp	r2, #0
   127f8:	d10e      	bne.n	12818 <MacExecuteCommands+0x1c8>
   127fa:	701c      	strb	r4, [r3, #0]
   127fc:	2113      	movs	r1, #19
   127fe:	4c11      	ldr	r4, [pc, #68]	; (12844 <MacExecuteCommands+0x1f4>)
   12800:	2000      	movs	r0, #0
   12802:	47a0      	blx	r4
   12804:	2210      	movs	r2, #16
   12806:	4b08      	ldr	r3, [pc, #32]	; (12828 <MacExecuteCommands+0x1d8>)
   12808:	2001      	movs	r0, #1
   1280a:	3384      	adds	r3, #132	; 0x84
   1280c:	7859      	ldrb	r1, [r3, #1]
   1280e:	430a      	orrs	r2, r1
   12810:	705a      	strb	r2, [r3, #1]
   12812:	210b      	movs	r1, #11
   12814:	47a0      	blx	r4
   12816:	e72c      	b.n	12672 <MacExecuteCommands+0x22>
   12818:	9a01      	ldr	r2, [sp, #4]
   1281a:	3a01      	subs	r2, #1
   1281c:	b2d2      	uxtb	r2, r2
   1281e:	701a      	strb	r2, [r3, #0]
   12820:	0033      	movs	r3, r6
   12822:	33e2      	adds	r3, #226	; 0xe2
   12824:	701a      	strb	r2, [r3, #0]
   12826:	e7e9      	b.n	127fc <MacExecuteCommands+0x1ac>
   12828:	20003a6c 	.word	0x20003a6c
   1282c:	00000226 	.word	0x00000226
   12830:	000117b1 	.word	0x000117b1
   12834:	00011675 	.word	0x00011675
   12838:	00011579 	.word	0x00011579
   1283c:	000124c1 	.word	0x000124c1
   12840:	00010ca5 	.word	0x00010ca5
   12844:	000098a5 	.word	0x000098a5
   12848:	00011761 	.word	0x00011761
   1284c:	000116ad 	.word	0x000116ad
   12850:	000118e9 	.word	0x000118e9
   12854:	0001a3af 	.word	0x0001a3af
   12858:	00000223 	.word	0x00000223
   1285c:	00000229 	.word	0x00000229
   12860:	00000225 	.word	0x00000225
   12864:	0000e045 	.word	0x0000e045
   12868:	00012495 	.word	0x00012495
   1286c:	00011409 	.word	0x00011409
   12870:	0001139d 	.word	0x0001139d

00012874 <LorawanSetDataRange>:
   12874:	2201      	movs	r2, #1
   12876:	b530      	push	{r4, r5, lr}
   12878:	b085      	sub	sp, #20
   1287a:	ab01      	add	r3, sp, #4
   1287c:	ac02      	add	r4, sp, #8
   1287e:	7018      	strb	r0, [r3, #0]
   12880:	7020      	strb	r0, [r4, #0]
   12882:	7061      	strb	r1, [r4, #1]
   12884:	2015      	movs	r0, #21
   12886:	0019      	movs	r1, r3
   12888:	4d11      	ldr	r5, [pc, #68]	; (128d0 <LorawanSetDataRange+0x5c>)
   1288a:	705a      	strb	r2, [r3, #1]
   1288c:	47a8      	blx	r5
   1288e:	2808      	cmp	r0, #8
   12890:	d003      	beq.n	1289a <LorawanSetDataRange+0x26>
   12892:	250a      	movs	r5, #10
   12894:	0028      	movs	r0, r5
   12896:	b005      	add	sp, #20
   12898:	bd30      	pop	{r4, r5, pc}
   1289a:	0021      	movs	r1, r4
   1289c:	2012      	movs	r0, #18
   1289e:	47a8      	blx	r5
   128a0:	0005      	movs	r5, r0
   128a2:	2808      	cmp	r0, #8
   128a4:	d1f5      	bne.n	12892 <LorawanSetDataRange+0x1e>
   128a6:	0021      	movs	r1, r4
   128a8:	4b0a      	ldr	r3, [pc, #40]	; (128d4 <LorawanSetDataRange+0x60>)
   128aa:	ac03      	add	r4, sp, #12
   128ac:	2012      	movs	r0, #18
   128ae:	4798      	blx	r3
   128b0:	0022      	movs	r2, r4
   128b2:	2100      	movs	r1, #0
   128b4:	4b08      	ldr	r3, [pc, #32]	; (128d8 <LorawanSetDataRange+0x64>)
   128b6:	2014      	movs	r0, #20
   128b8:	4798      	blx	r3
   128ba:	4b08      	ldr	r3, [pc, #32]	; (128dc <LorawanSetDataRange+0x68>)
   128bc:	7821      	ldrb	r1, [r4, #0]
   128be:	001a      	movs	r2, r3
   128c0:	32f3      	adds	r2, #243	; 0xf3
   128c2:	7011      	strb	r1, [r2, #0]
   128c4:	7862      	ldrb	r2, [r4, #1]
   128c6:	33f4      	adds	r3, #244	; 0xf4
   128c8:	701a      	strb	r2, [r3, #0]
   128ca:	4b05      	ldr	r3, [pc, #20]	; (128e0 <LorawanSetDataRange+0x6c>)
   128cc:	4798      	blx	r3
   128ce:	e7e1      	b.n	12894 <LorawanSetDataRange+0x20>
   128d0:	0000e061 	.word	0x0000e061
   128d4:	0000e07d 	.word	0x0000e07d
   128d8:	0000e045 	.word	0x0000e045
   128dc:	20003a6c 	.word	0x20003a6c
   128e0:	00012495 	.word	0x00012495

000128e4 <LorawanSetChannelIdStatus>:
   128e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   128e6:	466b      	mov	r3, sp
   128e8:	7018      	strb	r0, [r3, #0]
   128ea:	7059      	strb	r1, [r3, #1]
   128ec:	2016      	movs	r0, #22
   128ee:	4669      	mov	r1, sp
   128f0:	4b0c      	ldr	r3, [pc, #48]	; (12924 <LorawanSetChannelIdStatus+0x40>)
   128f2:	4798      	blx	r3
   128f4:	0004      	movs	r4, r0
   128f6:	2808      	cmp	r0, #8
   128f8:	d111      	bne.n	1291e <LorawanSetChannelIdStatus+0x3a>
   128fa:	ad01      	add	r5, sp, #4
   128fc:	002a      	movs	r2, r5
   128fe:	2100      	movs	r1, #0
   12900:	4b09      	ldr	r3, [pc, #36]	; (12928 <LorawanSetChannelIdStatus+0x44>)
   12902:	2014      	movs	r0, #20
   12904:	4798      	blx	r3
   12906:	4b09      	ldr	r3, [pc, #36]	; (1292c <LorawanSetChannelIdStatus+0x48>)
   12908:	7829      	ldrb	r1, [r5, #0]
   1290a:	001a      	movs	r2, r3
   1290c:	32f3      	adds	r2, #243	; 0xf3
   1290e:	7011      	strb	r1, [r2, #0]
   12910:	786a      	ldrb	r2, [r5, #1]
   12912:	33f4      	adds	r3, #244	; 0xf4
   12914:	701a      	strb	r2, [r3, #0]
   12916:	4b06      	ldr	r3, [pc, #24]	; (12930 <LorawanSetChannelIdStatus+0x4c>)
   12918:	4798      	blx	r3
   1291a:	0020      	movs	r0, r4
   1291c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1291e:	240a      	movs	r4, #10
   12920:	e7fb      	b.n	1291a <LorawanSetChannelIdStatus+0x36>
   12922:	46c0      	nop			; (mov r8, r8)
   12924:	0000e07d 	.word	0x0000e07d
   12928:	0000e045 	.word	0x0000e045
   1292c:	20003a6c 	.word	0x20003a6c
   12930:	00012495 	.word	0x00012495

00012934 <LORAWAN_RxDone>:
   12934:	b5f0      	push	{r4, r5, r6, r7, lr}
   12936:	4bc4      	ldr	r3, [pc, #784]	; (12c48 <LORAWAN_RxDone+0x314>)
   12938:	b093      	sub	sp, #76	; 0x4c
   1293a:	781b      	ldrb	r3, [r3, #0]
   1293c:	0007      	movs	r7, r0
   1293e:	b25a      	sxtb	r2, r3
   12940:	9106      	str	r1, [sp, #24]
   12942:	4cc2      	ldr	r4, [pc, #776]	; (12c4c <LORAWAN_RxDone+0x318>)
   12944:	2a00      	cmp	r2, #0
   12946:	da01      	bge.n	1294c <LORAWAN_RxDone+0x18>
   12948:	f000 fc86 	bl	13258 <LORAWAN_RxDone+0x924>
   1294c:	7801      	ldrb	r1, [r0, #0]
   1294e:	221f      	movs	r2, #31
   12950:	000e      	movs	r6, r1
   12952:	4396      	bics	r6, r2
   12954:	2e20      	cmp	r6, #32
   12956:	d000      	beq.n	1295a <LORAWAN_RxDone+0x26>
   12958:	e1ae      	b.n	12cb8 <LORAWAN_RxDone+0x384>
   1295a:	7822      	ldrb	r2, [r4, #0]
   1295c:	2a00      	cmp	r2, #0
   1295e:	d001      	beq.n	12964 <LORAWAN_RxDone+0x30>
   12960:	f000 fc66 	bl	13230 <LORAWAN_RxDone+0x8fc>
   12964:	0022      	movs	r2, r4
   12966:	3294      	adds	r2, #148	; 0x94
   12968:	7812      	ldrb	r2, [r2, #0]
   1296a:	0752      	lsls	r2, r2, #29
   1296c:	d401      	bmi.n	12972 <LORAWAN_RxDone+0x3e>
   1296e:	f000 fc5f 	bl	13230 <LORAWAN_RxDone+0x8fc>
   12972:	9b06      	ldr	r3, [sp, #24]
   12974:	3b01      	subs	r3, #1
   12976:	b2db      	uxtb	r3, r3
   12978:	9307      	str	r3, [sp, #28]
   1297a:	4bb5      	ldr	r3, [pc, #724]	; (12c50 <LORAWAN_RxDone+0x31c>)
   1297c:	469c      	mov	ip, r3
   1297e:	9b07      	ldr	r3, [sp, #28]
   12980:	2b00      	cmp	r3, #0
   12982:	d12c      	bne.n	129de <LORAWAN_RxDone+0xaa>
   12984:	9b06      	ldr	r3, [sp, #24]
   12986:	4660      	mov	r0, ip
   12988:	1f1d      	subs	r5, r3, #4
   1298a:	b2eb      	uxtb	r3, r5
   1298c:	9300      	str	r3, [sp, #0]
   1298e:	4ab1      	ldr	r2, [pc, #708]	; (12c54 <LORAWAN_RxDone+0x320>)
   12990:	003b      	movs	r3, r7
   12992:	9907      	ldr	r1, [sp, #28]
   12994:	4eb0      	ldr	r6, [pc, #704]	; (12c58 <LORAWAN_RxDone+0x324>)
   12996:	47b0      	blx	r6
   12998:	2204      	movs	r2, #4
   1299a:	49ae      	ldr	r1, [pc, #696]	; (12c54 <LORAWAN_RxDone+0x320>)
   1299c:	4baf      	ldr	r3, [pc, #700]	; (12c5c <LORAWAN_RxDone+0x328>)
   1299e:	a810      	add	r0, sp, #64	; 0x40
   129a0:	4798      	blx	r3
   129a2:	9e10      	ldr	r6, [sp, #64]	; 0x40
   129a4:	1979      	adds	r1, r7, r5
   129a6:	2204      	movs	r2, #4
   129a8:	4bac      	ldr	r3, [pc, #688]	; (12c5c <LORAWAN_RxDone+0x328>)
   129aa:	a810      	add	r0, sp, #64	; 0x40
   129ac:	960d      	str	r6, [sp, #52]	; 0x34
   129ae:	4798      	blx	r3
   129b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
   129b2:	4ba6      	ldr	r3, [pc, #664]	; (12c4c <LORAWAN_RxDone+0x318>)
   129b4:	210e      	movs	r1, #14
   129b6:	42b2      	cmp	r2, r6
   129b8:	d029      	beq.n	12a0e <LORAWAN_RxDone+0xda>
   129ba:	001a      	movs	r2, r3
   129bc:	3284      	adds	r2, #132	; 0x84
   129be:	7812      	ldrb	r2, [r2, #0]
   129c0:	400a      	ands	r2, r1
   129c2:	2a0a      	cmp	r2, #10
   129c4:	d005      	beq.n	129d2 <LORAWAN_RxDone+0x9e>
   129c6:	2a06      	cmp	r2, #6
   129c8:	d106      	bne.n	129d8 <LORAWAN_RxDone+0xa4>
   129ca:	33f9      	adds	r3, #249	; 0xf9
   129cc:	781b      	ldrb	r3, [r3, #0]
   129ce:	2b00      	cmp	r3, #0
   129d0:	d002      	beq.n	129d8 <LORAWAN_RxDone+0xa4>
   129d2:	2018      	movs	r0, #24
   129d4:	4ba2      	ldr	r3, [pc, #648]	; (12c60 <LORAWAN_RxDone+0x32c>)
   129d6:	4798      	blx	r3
   129d8:	4ba2      	ldr	r3, [pc, #648]	; (12c64 <LORAWAN_RxDone+0x330>)
   129da:	4798      	blx	r3
   129dc:	e1d0      	b.n	12d80 <LORAWAN_RxDone+0x44c>
   129de:	9b06      	ldr	r3, [sp, #24]
   129e0:	9a07      	ldr	r2, [sp, #28]
   129e2:	2100      	movs	r1, #0
   129e4:	1a98      	subs	r0, r3, r2
   129e6:	1838      	adds	r0, r7, r0
   129e8:	4662      	mov	r2, ip
   129ea:	4b9f      	ldr	r3, [pc, #636]	; (12c68 <LORAWAN_RxDone+0x334>)
   129ec:	4798      	blx	r3
   129ee:	2800      	cmp	r0, #0
   129f0:	d006      	beq.n	12a00 <LORAWAN_RxDone+0xcc>
   129f2:	4b9b      	ldr	r3, [pc, #620]	; (12c60 <LORAWAN_RxDone+0x32c>)
   129f4:	4798      	blx	r3
   129f6:	4b9b      	ldr	r3, [pc, #620]	; (12c64 <LORAWAN_RxDone+0x330>)
   129f8:	4798      	blx	r3
   129fa:	201f      	movs	r0, #31
   129fc:	b013      	add	sp, #76	; 0x4c
   129fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12a00:	9b07      	ldr	r3, [sp, #28]
   12a02:	2b10      	cmp	r3, #16
   12a04:	d901      	bls.n	12a0a <LORAWAN_RxDone+0xd6>
   12a06:	3b10      	subs	r3, #16
   12a08:	e7b5      	b.n	12976 <LORAWAN_RxDone+0x42>
   12a0a:	9007      	str	r0, [sp, #28]
   12a0c:	e7b5      	b.n	1297a <LORAWAN_RxDone+0x46>
   12a0e:	001a      	movs	r2, r3
   12a10:	3284      	adds	r2, #132	; 0x84
   12a12:	7812      	ldrb	r2, [r2, #0]
   12a14:	400a      	ands	r2, r1
   12a16:	2a06      	cmp	r2, #6
   12a18:	d103      	bne.n	12a22 <LORAWAN_RxDone+0xee>
   12a1a:	33ec      	adds	r3, #236	; 0xec
   12a1c:	7818      	ldrb	r0, [r3, #0]
   12a1e:	4b93      	ldr	r3, [pc, #588]	; (12c6c <LORAWAN_RxDone+0x338>)
   12a20:	4798      	blx	r3
   12a22:	7a3a      	ldrb	r2, [r7, #8]
   12a24:	79fb      	ldrb	r3, [r7, #7]
   12a26:	0212      	lsls	r2, r2, #8
   12a28:	431a      	orrs	r2, r3
   12a2a:	7a7b      	ldrb	r3, [r7, #9]
   12a2c:	2001      	movs	r0, #1
   12a2e:	041b      	lsls	r3, r3, #16
   12a30:	431a      	orrs	r2, r3
   12a32:	7abb      	ldrb	r3, [r7, #10]
   12a34:	061b      	lsls	r3, r3, #24
   12a36:	4313      	orrs	r3, r2
   12a38:	0a19      	lsrs	r1, r3, #8
   12a3a:	7063      	strb	r3, [r4, #1]
   12a3c:	70a1      	strb	r1, [r4, #2]
   12a3e:	0c19      	lsrs	r1, r3, #16
   12a40:	0e1b      	lsrs	r3, r3, #24
   12a42:	70e1      	strb	r1, [r4, #3]
   12a44:	7123      	strb	r3, [r4, #4]
   12a46:	240f      	movs	r4, #15
   12a48:	2103      	movs	r1, #3
   12a4a:	4b89      	ldr	r3, [pc, #548]	; (12c70 <LORAWAN_RxDone+0x33c>)
   12a4c:	4798      	blx	r3
   12a4e:	7b38      	ldrb	r0, [r7, #12]
   12a50:	4b88      	ldr	r3, [pc, #544]	; (12c74 <LORAWAN_RxDone+0x340>)
   12a52:	4020      	ands	r0, r4
   12a54:	4798      	blx	r3
   12a56:	7af8      	ldrb	r0, [r7, #11]
   12a58:	4b87      	ldr	r3, [pc, #540]	; (12c78 <LORAWAN_RxDone+0x344>)
   12a5a:	0641      	lsls	r1, r0, #25
   12a5c:	0700      	lsls	r0, r0, #28
   12a5e:	0f49      	lsrs	r1, r1, #29
   12a60:	0f00      	lsrs	r0, r0, #28
   12a62:	4798      	blx	r3
   12a64:	4b85      	ldr	r3, [pc, #532]	; (12c7c <LORAWAN_RxDone+0x348>)
   12a66:	2100      	movs	r1, #0
   12a68:	203b      	movs	r0, #59	; 0x3b
   12a6a:	4798      	blx	r3
   12a6c:	9b06      	ldr	r3, [sp, #24]
   12a6e:	2b21      	cmp	r3, #33	; 0x21
   12a70:	d000      	beq.n	12a74 <LORAWAN_RxDone+0x140>
   12a72:	e08c      	b.n	12b8e <LORAWAN_RxDone+0x25a>
   12a74:	251a      	movs	r5, #26
   12a76:	ab04      	add	r3, sp, #16
   12a78:	18ed      	adds	r5, r5, r3
   12a7a:	002a      	movs	r2, r5
   12a7c:	4b80      	ldr	r3, [pc, #512]	; (12c80 <LORAWAN_RxDone+0x34c>)
   12a7e:	4981      	ldr	r1, [pc, #516]	; (12c84 <LORAWAN_RxDone+0x350>)
   12a80:	2007      	movs	r0, #7
   12a82:	4798      	blx	r3
   12a84:	782b      	ldrb	r3, [r5, #0]
   12a86:	2bff      	cmp	r3, #255	; 0xff
   12a88:	d100      	bne.n	12a8c <LORAWAN_RxDone+0x158>
   12a8a:	e080      	b.n	12b8e <LORAWAN_RxDone+0x25a>
   12a8c:	2350      	movs	r3, #80	; 0x50
   12a8e:	43a3      	bics	r3, r4
   12a90:	9308      	str	r3, [sp, #32]
   12a92:	003b      	movs	r3, r7
   12a94:	330d      	adds	r3, #13
   12a96:	9306      	str	r3, [sp, #24]
   12a98:	2600      	movs	r6, #0
   12a9a:	2203      	movs	r2, #3
   12a9c:	9906      	ldr	r1, [sp, #24]
   12a9e:	4b6f      	ldr	r3, [pc, #444]	; (12c5c <LORAWAN_RxDone+0x328>)
   12aa0:	a80e      	add	r0, sp, #56	; 0x38
   12aa2:	960e      	str	r6, [sp, #56]	; 0x38
   12aa4:	4798      	blx	r3
   12aa6:	2364      	movs	r3, #100	; 0x64
   12aa8:	990e      	ldr	r1, [sp, #56]	; 0x38
   12aaa:	aa04      	add	r2, sp, #16
   12aac:	4359      	muls	r1, r3
   12aae:	3b4a      	subs	r3, #74	; 0x4a
   12ab0:	189b      	adds	r3, r3, r2
   12ab2:	7818      	ldrb	r0, [r3, #0]
   12ab4:	9b07      	ldr	r3, [sp, #28]
   12ab6:	910e      	str	r1, [sp, #56]	; 0x38
   12ab8:	1818      	adds	r0, r3, r0
   12aba:	b2c0      	uxtb	r0, r0
   12abc:	76d0      	strb	r0, [r2, #27]
   12abe:	42b1      	cmp	r1, r6
   12ac0:	d100      	bne.n	12ac4 <LORAWAN_RxDone+0x190>
   12ac2:	e0a7      	b.n	12c14 <LORAWAN_RxDone+0x2e0>
   12ac4:	466b      	mov	r3, sp
   12ac6:	2220      	movs	r2, #32
   12ac8:	189b      	adds	r3, r3, r2
   12aca:	781b      	ldrb	r3, [r3, #0]
   12acc:	ad10      	add	r5, sp, #64	; 0x40
   12ace:	ac0b      	add	r4, sp, #44	; 0x2c
   12ad0:	7128      	strb	r0, [r5, #4]
   12ad2:	9110      	str	r1, [sp, #64]	; 0x40
   12ad4:	7020      	strb	r0, [r4, #0]
   12ad6:	7063      	strb	r3, [r4, #1]
   12ad8:	0029      	movs	r1, r5
   12ada:	2002      	movs	r0, #2
   12adc:	4b6a      	ldr	r3, [pc, #424]	; (12c88 <LORAWAN_RxDone+0x354>)
   12ade:	4798      	blx	r3
   12ae0:	2808      	cmp	r0, #8
   12ae2:	d140      	bne.n	12b66 <LORAWAN_RxDone+0x232>
   12ae4:	0029      	movs	r1, r5
   12ae6:	0030      	movs	r0, r6
   12ae8:	4b64      	ldr	r3, [pc, #400]	; (12c7c <LORAWAN_RxDone+0x348>)
   12aea:	4798      	blx	r3
   12aec:	ad0c      	add	r5, sp, #48	; 0x30
   12aee:	0021      	movs	r1, r4
   12af0:	4b62      	ldr	r3, [pc, #392]	; (12c7c <LORAWAN_RxDone+0x348>)
   12af2:	2012      	movs	r0, #18
   12af4:	4798      	blx	r3
   12af6:	0031      	movs	r1, r6
   12af8:	002a      	movs	r2, r5
   12afa:	4e61      	ldr	r6, [pc, #388]	; (12c80 <LORAWAN_RxDone+0x34c>)
   12afc:	2014      	movs	r0, #20
   12afe:	47b0      	blx	r6
   12b00:	4c52      	ldr	r4, [pc, #328]	; (12c4c <LORAWAN_RxDone+0x318>)
   12b02:	782a      	ldrb	r2, [r5, #0]
   12b04:	0023      	movs	r3, r4
   12b06:	33f3      	adds	r3, #243	; 0xf3
   12b08:	701a      	strb	r2, [r3, #0]
   12b0a:	0023      	movs	r3, r4
   12b0c:	786a      	ldrb	r2, [r5, #1]
   12b0e:	2522      	movs	r5, #34	; 0x22
   12b10:	33f4      	adds	r3, #244	; 0xf4
   12b12:	701a      	strb	r2, [r3, #0]
   12b14:	4b5d      	ldr	r3, [pc, #372]	; (12c8c <LORAWAN_RxDone+0x358>)
   12b16:	4798      	blx	r3
   12b18:	ab04      	add	r3, sp, #16
   12b1a:	18ed      	adds	r5, r5, r3
   12b1c:	231b      	movs	r3, #27
   12b1e:	a904      	add	r1, sp, #16
   12b20:	185b      	adds	r3, r3, r1
   12b22:	0019      	movs	r1, r3
   12b24:	002a      	movs	r2, r5
   12b26:	201e      	movs	r0, #30
   12b28:	47b0      	blx	r6
   12b2a:	0023      	movs	r3, r4
   12b2c:	33ff      	adds	r3, #255	; 0xff
   12b2e:	7f5b      	ldrb	r3, [r3, #29]
   12b30:	079b      	lsls	r3, r3, #30
   12b32:	d508      	bpl.n	12b46 <LORAWAN_RxDone+0x212>
   12b34:	ab04      	add	r3, sp, #16
   12b36:	7edb      	ldrb	r3, [r3, #27]
   12b38:	a90f      	add	r1, sp, #60	; 0x3c
   12b3a:	708b      	strb	r3, [r1, #2]
   12b3c:	882b      	ldrh	r3, [r5, #0]
   12b3e:	201e      	movs	r0, #30
   12b40:	800b      	strh	r3, [r1, #0]
   12b42:	4b4e      	ldr	r3, [pc, #312]	; (12c7c <LORAWAN_RxDone+0x348>)
   12b44:	4798      	blx	r3
   12b46:	231b      	movs	r3, #27
   12b48:	aa04      	add	r2, sp, #16
   12b4a:	189b      	adds	r3, r3, r2
   12b4c:	7818      	ldrb	r0, [r3, #0]
   12b4e:	2101      	movs	r1, #1
   12b50:	4b4f      	ldr	r3, [pc, #316]	; (12c90 <LORAWAN_RxDone+0x35c>)
   12b52:	4798      	blx	r3
   12b54:	2204      	movs	r2, #4
   12b56:	3484      	adds	r4, #132	; 0x84
   12b58:	7863      	ldrb	r3, [r4, #1]
   12b5a:	210b      	movs	r1, #11
   12b5c:	4313      	orrs	r3, r2
   12b5e:	7063      	strb	r3, [r4, #1]
   12b60:	2001      	movs	r0, #1
   12b62:	4b43      	ldr	r3, [pc, #268]	; (12c70 <LORAWAN_RxDone+0x33c>)
   12b64:	4798      	blx	r3
   12b66:	9b07      	ldr	r3, [sp, #28]
   12b68:	3301      	adds	r3, #1
   12b6a:	b2db      	uxtb	r3, r3
   12b6c:	9307      	str	r3, [sp, #28]
   12b6e:	9b06      	ldr	r3, [sp, #24]
   12b70:	3303      	adds	r3, #3
   12b72:	9306      	str	r3, [sp, #24]
   12b74:	9b07      	ldr	r3, [sp, #28]
   12b76:	2b05      	cmp	r3, #5
   12b78:	d18e      	bne.n	12a98 <LORAWAN_RxDone+0x164>
   12b7a:	2204      	movs	r2, #4
   12b7c:	4b33      	ldr	r3, [pc, #204]	; (12c4c <LORAWAN_RxDone+0x318>)
   12b7e:	2001      	movs	r0, #1
   12b80:	3384      	adds	r3, #132	; 0x84
   12b82:	7859      	ldrb	r1, [r3, #1]
   12b84:	430a      	orrs	r2, r1
   12b86:	705a      	strb	r2, [r3, #1]
   12b88:	210b      	movs	r1, #11
   12b8a:	4b39      	ldr	r3, [pc, #228]	; (12c70 <LORAWAN_RxDone+0x33c>)
   12b8c:	4798      	blx	r3
   12b8e:	4d41      	ldr	r5, [pc, #260]	; (12c94 <LORAWAN_RxDone+0x360>)
   12b90:	1c7e      	adds	r6, r7, #1
   12b92:	3704      	adds	r7, #4
   12b94:	0028      	movs	r0, r5
   12b96:	003a      	movs	r2, r7
   12b98:	0031      	movs	r1, r6
   12b9a:	4b3f      	ldr	r3, [pc, #252]	; (12c98 <LORAWAN_RxDone+0x364>)
   12b9c:	4798      	blx	r3
   12b9e:	2302      	movs	r3, #2
   12ba0:	4c2a      	ldr	r4, [pc, #168]	; (12c4c <LORAWAN_RxDone+0x318>)
   12ba2:	0028      	movs	r0, r5
   12ba4:	7563      	strb	r3, [r4, #21]
   12ba6:	4a2a      	ldr	r2, [pc, #168]	; (12c50 <LORAWAN_RxDone+0x31c>)
   12ba8:	3b01      	subs	r3, #1
   12baa:	2100      	movs	r1, #0
   12bac:	4d3b      	ldr	r5, [pc, #236]	; (12c9c <LORAWAN_RxDone+0x368>)
   12bae:	47a8      	blx	r5
   12bb0:	2800      	cmp	r0, #0
   12bb2:	d003      	beq.n	12bbc <LORAWAN_RxDone+0x288>
   12bb4:	4b2a      	ldr	r3, [pc, #168]	; (12c60 <LORAWAN_RxDone+0x32c>)
   12bb6:	4798      	blx	r3
   12bb8:	4b2a      	ldr	r3, [pc, #168]	; (12c64 <LORAWAN_RxDone+0x330>)
   12bba:	4798      	blx	r3
   12bbc:	2105      	movs	r1, #5
   12bbe:	4b2c      	ldr	r3, [pc, #176]	; (12c70 <LORAWAN_RxDone+0x33c>)
   12bc0:	2001      	movs	r0, #1
   12bc2:	4798      	blx	r3
   12bc4:	4d36      	ldr	r5, [pc, #216]	; (12ca0 <LORAWAN_RxDone+0x36c>)
   12bc6:	003a      	movs	r2, r7
   12bc8:	0028      	movs	r0, r5
   12bca:	0031      	movs	r1, r6
   12bcc:	4b32      	ldr	r3, [pc, #200]	; (12c98 <LORAWAN_RxDone+0x364>)
   12bce:	4798      	blx	r3
   12bd0:	2301      	movs	r3, #1
   12bd2:	0028      	movs	r0, r5
   12bd4:	7163      	strb	r3, [r4, #5]
   12bd6:	4a1e      	ldr	r2, [pc, #120]	; (12c50 <LORAWAN_RxDone+0x31c>)
   12bd8:	18db      	adds	r3, r3, r3
   12bda:	2100      	movs	r1, #0
   12bdc:	4d2f      	ldr	r5, [pc, #188]	; (12c9c <LORAWAN_RxDone+0x368>)
   12bde:	47a8      	blx	r5
   12be0:	2800      	cmp	r0, #0
   12be2:	d003      	beq.n	12bec <LORAWAN_RxDone+0x2b8>
   12be4:	4b1e      	ldr	r3, [pc, #120]	; (12c60 <LORAWAN_RxDone+0x32c>)
   12be6:	4798      	blx	r3
   12be8:	4b1e      	ldr	r3, [pc, #120]	; (12c64 <LORAWAN_RxDone+0x330>)
   12bea:	4798      	blx	r3
   12bec:	4b20      	ldr	r3, [pc, #128]	; (12c70 <LORAWAN_RxDone+0x33c>)
   12bee:	2104      	movs	r1, #4
   12bf0:	2001      	movs	r0, #1
   12bf2:	4798      	blx	r3
   12bf4:	4b2b      	ldr	r3, [pc, #172]	; (12ca4 <LORAWAN_RxDone+0x370>)
   12bf6:	5ce3      	ldrb	r3, [r4, r3]
   12bf8:	2b00      	cmp	r3, #0
   12bfa:	d017      	beq.n	12c2c <LORAWAN_RxDone+0x2f8>
   12bfc:	492a      	ldr	r1, [pc, #168]	; (12ca8 <LORAWAN_RxDone+0x374>)
   12bfe:	2002      	movs	r0, #2
   12c00:	4c2a      	ldr	r4, [pc, #168]	; (12cac <LORAWAN_RxDone+0x378>)
   12c02:	47a0      	blx	r4
   12c04:	2800      	cmp	r0, #0
   12c06:	d008      	beq.n	12c1a <LORAWAN_RxDone+0x2e6>
   12c08:	4b15      	ldr	r3, [pc, #84]	; (12c60 <LORAWAN_RxDone+0x32c>)
   12c0a:	4798      	blx	r3
   12c0c:	4b15      	ldr	r3, [pc, #84]	; (12c64 <LORAWAN_RxDone+0x330>)
   12c0e:	4798      	blx	r3
   12c10:	2023      	movs	r0, #35	; 0x23
   12c12:	e6f3      	b.n	129fc <LORAWAN_RxDone+0xc8>
   12c14:	4b1e      	ldr	r3, [pc, #120]	; (12c90 <LORAWAN_RxDone+0x35c>)
   12c16:	4798      	blx	r3
   12c18:	e7a5      	b.n	12b66 <LORAWAN_RxDone+0x232>
   12c1a:	4925      	ldr	r1, [pc, #148]	; (12cb0 <LORAWAN_RxDone+0x37c>)
   12c1c:	2001      	movs	r0, #1
   12c1e:	47a0      	blx	r4
   12c20:	2800      	cmp	r0, #0
   12c22:	d1f1      	bne.n	12c08 <LORAWAN_RxDone+0x2d4>
   12c24:	4b23      	ldr	r3, [pc, #140]	; (12cb4 <LORAWAN_RxDone+0x380>)
   12c26:	4798      	blx	r3
   12c28:	2008      	movs	r0, #8
   12c2a:	e6e7      	b.n	129fc <LORAWAN_RxDone+0xc8>
   12c2c:	0020      	movs	r0, r4
   12c2e:	0021      	movs	r1, r4
   12c30:	2210      	movs	r2, #16
   12c32:	3115      	adds	r1, #21
   12c34:	4d09      	ldr	r5, [pc, #36]	; (12c5c <LORAWAN_RxDone+0x328>)
   12c36:	3035      	adds	r0, #53	; 0x35
   12c38:	47a8      	blx	r5
   12c3a:	0020      	movs	r0, r4
   12c3c:	1d61      	adds	r1, r4, #5
   12c3e:	2210      	movs	r2, #16
   12c40:	3025      	adds	r0, #37	; 0x25
   12c42:	47a8      	blx	r5
   12c44:	e7ee      	b.n	12c24 <LORAWAN_RxDone+0x2f0>
   12c46:	46c0      	nop			; (mov r8, r8)
   12c48:	20003af0 	.word	0x20003af0
   12c4c:	20003a6c 	.word	0x20003a6c
   12c50:	20003ab1 	.word	0x20003ab1
   12c54:	200020c5 	.word	0x200020c5
   12c58:	00007341 	.word	0x00007341
   12c5c:	0001786b 	.word	0x0001786b
   12c60:	00011515 	.word	0x00011515
   12c64:	000123c9 	.word	0x000123c9
   12c68:	00007309 	.word	0x00007309
   12c6c:	0000e8a5 	.word	0x0000e8a5
   12c70:	000098a5 	.word	0x000098a5
   12c74:	00010ca5 	.word	0x00010ca5
   12c78:	000113b9 	.word	0x000113b9
   12c7c:	0000e07d 	.word	0x0000e07d
   12c80:	0000e045 	.word	0x0000e045
   12c84:	20003b53 	.word	0x20003b53
   12c88:	0000e061 	.word	0x0000e061
   12c8c:	00012495 	.word	0x00012495
   12c90:	000128e5 	.word	0x000128e5
   12c94:	20003a81 	.word	0x20003a81
   12c98:	00010fd1 	.word	0x00010fd1
   12c9c:	00007331 	.word	0x00007331
   12ca0:	20003a71 	.word	0x20003a71
   12ca4:	0000022d 	.word	0x0000022d
   12ca8:	20003a91 	.word	0x20003a91
   12cac:	0000733d 	.word	0x0000733d
   12cb0:	20003aa1 	.word	0x20003aa1
   12cb4:	00010eed 	.word	0x00010eed
   12cb8:	22bf      	movs	r2, #191	; 0xbf
   12cba:	3e60      	subs	r6, #96	; 0x60
   12cbc:	4016      	ands	r6, r2
   12cbe:	d000      	beq.n	12cc2 <LORAWAN_RxDone+0x38e>
   12cc0:	e2b6      	b.n	13230 <LORAWAN_RxDone+0x8fc>
   12cc2:	2501      	movs	r5, #1
   12cc4:	422b      	tst	r3, r5
   12cc6:	d100      	bne.n	12cca <LORAWAN_RxDone+0x396>
   12cc8:	e2b2      	b.n	13230 <LORAWAN_RxDone+0x8fc>
   12cca:	7922      	ldrb	r2, [r4, #4]
   12ccc:	6823      	ldr	r3, [r4, #0]
   12cce:	0612      	lsls	r2, r2, #24
   12cd0:	0a1b      	lsrs	r3, r3, #8
   12cd2:	431a      	orrs	r2, r3
   12cd4:	0023      	movs	r3, r4
   12cd6:	33e0      	adds	r3, #224	; 0xe0
   12cd8:	701e      	strb	r6, [r3, #0]
   12cda:	9207      	str	r2, [sp, #28]
   12cdc:	7882      	ldrb	r2, [r0, #2]
   12cde:	7843      	ldrb	r3, [r0, #1]
   12ce0:	0212      	lsls	r2, r2, #8
   12ce2:	431a      	orrs	r2, r3
   12ce4:	78c3      	ldrb	r3, [r0, #3]
   12ce6:	041b      	lsls	r3, r3, #16
   12ce8:	431a      	orrs	r2, r3
   12cea:	7903      	ldrb	r3, [r0, #4]
   12cec:	061b      	lsls	r3, r3, #24
   12cee:	4313      	orrs	r3, r2
   12cf0:	9a07      	ldr	r2, [sp, #28]
   12cf2:	429a      	cmp	r2, r3
   12cf4:	d100      	bne.n	12cf8 <LORAWAN_RxDone+0x3c4>
   12cf6:	e2cc      	b.n	13292 <LORAWAN_RxDone+0x95e>
   12cf8:	ab04      	add	r3, sp, #16
   12cfa:	3521      	adds	r5, #33	; 0x21
   12cfc:	18ed      	adds	r5, r5, r3
   12cfe:	7a02      	ldrb	r2, [r0, #8]
   12d00:	0949      	lsrs	r1, r1, #5
   12d02:	002b      	movs	r3, r5
   12d04:	4eda      	ldr	r6, [pc, #872]	; (13070 <LORAWAN_RxDone+0x73c>)
   12d06:	47b0      	blx	r6
   12d08:	2808      	cmp	r0, #8
   12d0a:	d131      	bne.n	12d70 <LORAWAN_RxDone+0x43c>
   12d0c:	233c      	movs	r3, #60	; 0x3c
   12d0e:	7829      	ldrb	r1, [r5, #0]
   12d10:	434b      	muls	r3, r1
   12d12:	001d      	movs	r5, r3
   12d14:	3535      	adds	r5, #53	; 0x35
   12d16:	35ff      	adds	r5, #255	; 0xff
   12d18:	192d      	adds	r5, r5, r4
   12d1a:	18e4      	adds	r4, r4, r3
   12d1c:	0023      	movs	r3, r4
   12d1e:	33fc      	adds	r3, #252	; 0xfc
   12d20:	6b58      	ldr	r0, [r3, #52]	; 0x34
   12d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   12d24:	9308      	str	r3, [sp, #32]
   12d26:	79fb      	ldrb	r3, [r7, #7]
   12d28:	79ba      	ldrb	r2, [r7, #6]
   12d2a:	021b      	lsls	r3, r3, #8
   12d2c:	4313      	orrs	r3, r2
   12d2e:	0022      	movs	r2, r4
   12d30:	3255      	adds	r2, #85	; 0x55
   12d32:	32ff      	adds	r2, #255	; 0xff
   12d34:	8816      	ldrh	r6, [r2, #0]
   12d36:	429e      	cmp	r6, r3
   12d38:	d908      	bls.n	12d4c <LORAWAN_RxDone+0x418>
   12d3a:	3457      	adds	r4, #87	; 0x57
   12d3c:	34ff      	adds	r4, #255	; 0xff
   12d3e:	8823      	ldrh	r3, [r4, #0]
   12d40:	3301      	adds	r3, #1
   12d42:	8023      	strh	r3, [r4, #0]
   12d44:	79fb      	ldrb	r3, [r7, #7]
   12d46:	79bc      	ldrb	r4, [r7, #6]
   12d48:	021b      	lsls	r3, r3, #8
   12d4a:	4323      	orrs	r3, r4
   12d4c:	8013      	strh	r3, [r2, #0]
   12d4e:	9b06      	ldr	r3, [sp, #24]
   12d50:	9000      	str	r0, [sp, #0]
   12d52:	1f1a      	subs	r2, r3, #4
   12d54:	233c      	movs	r3, #60	; 0x3c
   12d56:	434b      	muls	r3, r1
   12d58:	49c6      	ldr	r1, [pc, #792]	; (13074 <LORAWAN_RxDone+0x740>)
   12d5a:	b2d2      	uxtb	r2, r2
   12d5c:	18c9      	adds	r1, r1, r3
   12d5e:	31fc      	adds	r1, #252	; 0xfc
   12d60:	2349      	movs	r3, #73	; 0x49
   12d62:	6d89      	ldr	r1, [r1, #88]	; 0x58
   12d64:	2001      	movs	r0, #1
   12d66:	4cc4      	ldr	r4, [pc, #784]	; (13078 <LORAWAN_RxDone+0x744>)
   12d68:	47a0      	blx	r4
   12d6a:	2301      	movs	r3, #1
   12d6c:	9307      	str	r3, [sp, #28]
   12d6e:	e2a6      	b.n	132be <LORAWAN_RxDone+0x98a>
   12d70:	220e      	movs	r2, #14
   12d72:	4bc2      	ldr	r3, [pc, #776]	; (1307c <LORAWAN_RxDone+0x748>)
   12d74:	781b      	ldrb	r3, [r3, #0]
   12d76:	4013      	ands	r3, r2
   12d78:	2b0a      	cmp	r3, #10
   12d7a:	d008      	beq.n	12d8e <LORAWAN_RxDone+0x45a>
   12d7c:	2b06      	cmp	r3, #6
   12d7e:	d001      	beq.n	12d84 <LORAWAN_RxDone+0x450>
   12d80:	200a      	movs	r0, #10
   12d82:	e63b      	b.n	129fc <LORAWAN_RxDone+0xc8>
   12d84:	0023      	movs	r3, r4
   12d86:	33f9      	adds	r3, #249	; 0xf9
   12d88:	781b      	ldrb	r3, [r3, #0]
   12d8a:	2b00      	cmp	r3, #0
   12d8c:	d0f8      	beq.n	12d80 <LORAWAN_RxDone+0x44c>
   12d8e:	2220      	movs	r2, #32
   12d90:	201e      	movs	r0, #30
   12d92:	3494      	adds	r4, #148	; 0x94
   12d94:	7823      	ldrb	r3, [r4, #0]
   12d96:	4393      	bics	r3, r2
   12d98:	7023      	strb	r3, [r4, #0]
   12d9a:	4bb9      	ldr	r3, [pc, #740]	; (13080 <LORAWAN_RxDone+0x74c>)
   12d9c:	e61b      	b.n	129d6 <LORAWAN_RxDone+0xa2>
   12d9e:	0022      	movs	r2, r4
   12da0:	2102      	movs	r1, #2
   12da2:	e2a6      	b.n	132f2 <LORAWAN_RxDone+0x9be>
   12da4:	9b08      	ldr	r3, [sp, #32]
   12da6:	328c      	adds	r2, #140	; 0x8c
   12da8:	6013      	str	r3, [r2, #0]
   12daa:	e2e3      	b.n	13374 <LORAWAN_RxDone+0xa40>
   12dac:	9b07      	ldr	r3, [sp, #28]
   12dae:	4cb1      	ldr	r4, [pc, #708]	; (13074 <LORAWAN_RxDone+0x740>)
   12db0:	2b00      	cmp	r3, #0
   12db2:	d000      	beq.n	12db6 <LORAWAN_RxDone+0x482>
   12db4:	e224      	b.n	13200 <LORAWAN_RxDone+0x8cc>
   12db6:	466a      	mov	r2, sp
   12db8:	0023      	movs	r3, r4
   12dba:	7f12      	ldrb	r2, [r2, #28]
   12dbc:	33e3      	adds	r3, #227	; 0xe3
   12dbe:	701a      	strb	r2, [r3, #0]
   12dc0:	797b      	ldrb	r3, [r7, #5]
   12dc2:	2b7f      	cmp	r3, #127	; 0x7f
   12dc4:	d909      	bls.n	12dda <LORAWAN_RxDone+0x4a6>
   12dc6:	0022      	movs	r2, r4
   12dc8:	2320      	movs	r3, #32
   12dca:	3284      	adds	r2, #132	; 0x84
   12dcc:	7811      	ldrb	r1, [r2, #0]
   12dce:	2001      	movs	r0, #1
   12dd0:	430b      	orrs	r3, r1
   12dd2:	7013      	strb	r3, [r2, #0]
   12dd4:	210b      	movs	r1, #11
   12dd6:	4bab      	ldr	r3, [pc, #684]	; (13084 <LORAWAN_RxDone+0x750>)
   12dd8:	4798      	blx	r3
   12dda:	797b      	ldrb	r3, [r7, #5]
   12ddc:	06db      	lsls	r3, r3, #27
   12dde:	d505      	bpl.n	12dec <LORAWAN_RxDone+0x4b8>
   12de0:	0022      	movs	r2, r4
   12de2:	2308      	movs	r3, #8
   12de4:	3294      	adds	r2, #148	; 0x94
   12de6:	7811      	ldrb	r1, [r2, #0]
   12de8:	430b      	orrs	r3, r1
   12dea:	7013      	strb	r3, [r2, #0]
   12dec:	797b      	ldrb	r3, [r7, #5]
   12dee:	065b      	lsls	r3, r3, #25
   12df0:	d505      	bpl.n	12dfe <LORAWAN_RxDone+0x4ca>
   12df2:	0022      	movs	r2, r4
   12df4:	2310      	movs	r3, #16
   12df6:	3294      	adds	r2, #148	; 0x94
   12df8:	7811      	ldrb	r1, [r2, #0]
   12dfa:	430b      	orrs	r3, r1
   12dfc:	7013      	strb	r3, [r2, #0]
   12dfe:	221f      	movs	r2, #31
   12e00:	783b      	ldrb	r3, [r7, #0]
   12e02:	4393      	bics	r3, r2
   12e04:	2ba0      	cmp	r3, #160	; 0xa0
   12e06:	d105      	bne.n	12e14 <LORAWAN_RxDone+0x4e0>
   12e08:	0022      	movs	r2, r4
   12e0a:	3294      	adds	r2, #148	; 0x94
   12e0c:	7811      	ldrb	r1, [r2, #0]
   12e0e:	3b9e      	subs	r3, #158	; 0x9e
   12e10:	430b      	orrs	r3, r1
   12e12:	7013      	strb	r3, [r2, #0]
   12e14:	7979      	ldrb	r1, [r7, #5]
   12e16:	070b      	lsls	r3, r1, #28
   12e18:	d100      	bne.n	12e1c <LORAWAN_RxDone+0x4e8>
   12e1a:	e0d4      	b.n	12fc6 <LORAWAN_RxDone+0x692>
   12e1c:	0709      	lsls	r1, r1, #28
   12e1e:	0f09      	lsrs	r1, r1, #28
   12e20:	187b      	adds	r3, r7, r1
   12e22:	7a1b      	ldrb	r3, [r3, #8]
   12e24:	2b00      	cmp	r3, #0
   12e26:	d100      	bne.n	12e2a <LORAWAN_RxDone+0x4f6>
   12e28:	e0a9      	b.n	12f7e <LORAWAN_RxDone+0x64a>
   12e2a:	0038      	movs	r0, r7
   12e2c:	4b96      	ldr	r3, [pc, #600]	; (13088 <LORAWAN_RxDone+0x754>)
   12e2e:	3008      	adds	r0, #8
   12e30:	4798      	blx	r3
   12e32:	2301      	movs	r3, #1
   12e34:	0006      	movs	r6, r0
   12e36:	9307      	str	r3, [sp, #28]
   12e38:	7978      	ldrb	r0, [r7, #5]
   12e3a:	9906      	ldr	r1, [sp, #24]
   12e3c:	0703      	lsls	r3, r0, #28
   12e3e:	0f1b      	lsrs	r3, r3, #28
   12e40:	001a      	movs	r2, r3
   12e42:	320c      	adds	r2, #12
   12e44:	4291      	cmp	r1, r2
   12e46:	d100      	bne.n	12e4a <LORAWAN_RxDone+0x516>
   12e48:	e0f1      	b.n	1302e <LORAWAN_RxDone+0x6fa>
   12e4a:	7832      	ldrb	r2, [r6, #0]
   12e4c:	1ac9      	subs	r1, r1, r3
   12e4e:	b2c9      	uxtb	r1, r1
   12e50:	9208      	str	r2, [sp, #32]
   12e52:	000a      	movs	r2, r1
   12e54:	3319      	adds	r3, #25
   12e56:	3a0c      	subs	r2, #12
   12e58:	469c      	mov	ip, r3
   12e5a:	9b08      	ldr	r3, [sp, #32]
   12e5c:	b2d2      	uxtb	r2, r2
   12e5e:	9206      	str	r2, [sp, #24]
   12e60:	1c75      	adds	r5, r6, #1
   12e62:	4a84      	ldr	r2, [pc, #528]	; (13074 <LORAWAN_RxDone+0x740>)
   12e64:	2b00      	cmp	r3, #0
   12e66:	d100      	bne.n	12e6a <LORAWAN_RxDone+0x536>
   12e68:	e0b0      	b.n	12fcc <LORAWAN_RxDone+0x698>
   12e6a:	6813      	ldr	r3, [r2, #0]
   12e6c:	0010      	movs	r0, r2
   12e6e:	7912      	ldrb	r2, [r2, #4]
   12e70:	0a1c      	lsrs	r4, r3, #8
   12e72:	0612      	lsls	r2, r2, #24
   12e74:	4322      	orrs	r2, r4
   12e76:	9204      	str	r2, [sp, #16]
   12e78:	4a84      	ldr	r2, [pc, #528]	; (1308c <LORAWAN_RxDone+0x758>)
   12e7a:	4663      	mov	r3, ip
   12e7c:	9203      	str	r2, [sp, #12]
   12e7e:	466a      	mov	r2, sp
   12e80:	8493      	strh	r3, [r2, #36]	; 0x24
   12e82:	8c93      	ldrh	r3, [r2, #36]	; 0x24
   12e84:	2201      	movs	r2, #1
   12e86:	9302      	str	r3, [sp, #8]
   12e88:	4b81      	ldr	r3, [pc, #516]	; (13090 <LORAWAN_RxDone+0x75c>)
   12e8a:	308c      	adds	r0, #140	; 0x8c
   12e8c:	390d      	subs	r1, #13
   12e8e:	9201      	str	r2, [sp, #4]
   12e90:	9300      	str	r3, [sp, #0]
   12e92:	6803      	ldr	r3, [r0, #0]
   12e94:	b2c9      	uxtb	r1, r1
   12e96:	0028      	movs	r0, r5
   12e98:	4c7e      	ldr	r4, [pc, #504]	; (13094 <LORAWAN_RxDone+0x760>)
   12e9a:	47a0      	blx	r4
   12e9c:	2800      	cmp	r0, #0
   12e9e:	d004      	beq.n	12eaa <LORAWAN_RxDone+0x576>
   12ea0:	4b7d      	ldr	r3, [pc, #500]	; (13098 <LORAWAN_RxDone+0x764>)
   12ea2:	4798      	blx	r3
   12ea4:	201f      	movs	r0, #31
   12ea6:	4b76      	ldr	r3, [pc, #472]	; (13080 <LORAWAN_RxDone+0x74c>)
   12ea8:	4798      	blx	r3
   12eaa:	4c72      	ldr	r4, [pc, #456]	; (13074 <LORAWAN_RxDone+0x740>)
   12eac:	2300      	movs	r3, #0
   12eae:	0022      	movs	r2, r4
   12eb0:	32ca      	adds	r2, #202	; 0xca
   12eb2:	8013      	strh	r3, [r2, #0]
   12eb4:	0022      	movs	r2, r4
   12eb6:	32f6      	adds	r2, #246	; 0xf6
   12eb8:	7013      	strb	r3, [r2, #0]
   12eba:	0022      	movs	r2, r4
   12ebc:	2110      	movs	r1, #16
   12ebe:	3294      	adds	r2, #148	; 0x94
   12ec0:	7813      	ldrb	r3, [r2, #0]
   12ec2:	438b      	bics	r3, r1
   12ec4:	7013      	strb	r3, [r2, #0]
   12ec6:	0023      	movs	r3, r4
   12ec8:	2201      	movs	r2, #1
   12eca:	3384      	adds	r3, #132	; 0x84
   12ecc:	7859      	ldrb	r1, [r3, #1]
   12ece:	430a      	orrs	r2, r1
   12ed0:	705a      	strb	r2, [r3, #1]
   12ed2:	220e      	movs	r2, #14
   12ed4:	781b      	ldrb	r3, [r3, #0]
   12ed6:	4013      	ands	r3, r2
   12ed8:	2b06      	cmp	r3, #6
   12eda:	d104      	bne.n	12ee6 <LORAWAN_RxDone+0x5b2>
   12edc:	0023      	movs	r3, r4
   12ede:	33ee      	adds	r3, #238	; 0xee
   12ee0:	7818      	ldrb	r0, [r3, #0]
   12ee2:	4b6e      	ldr	r3, [pc, #440]	; (1309c <LORAWAN_RxDone+0x768>)
   12ee4:	4798      	blx	r3
   12ee6:	0025      	movs	r5, r4
   12ee8:	2201      	movs	r2, #1
   12eea:	3594      	adds	r5, #148	; 0x94
   12eec:	782b      	ldrb	r3, [r5, #0]
   12eee:	4213      	tst	r3, r2
   12ef0:	d100      	bne.n	12ef4 <LORAWAN_RxDone+0x5c0>
   12ef2:	e107      	b.n	13104 <LORAWAN_RxDone+0x7d0>
   12ef4:	797b      	ldrb	r3, [r7, #5]
   12ef6:	321f      	adds	r2, #31
   12ef8:	4213      	tst	r3, r2
   12efa:	d100      	bne.n	12efe <LORAWAN_RxDone+0x5ca>
   12efc:	e0e8      	b.n	130d0 <LORAWAN_RxDone+0x79c>
   12efe:	4b68      	ldr	r3, [pc, #416]	; (130a0 <LORAWAN_RxDone+0x76c>)
   12f00:	4798      	blx	r3
   12f02:	0023      	movs	r3, r4
   12f04:	2101      	movs	r1, #1
   12f06:	3384      	adds	r3, #132	; 0x84
   12f08:	785a      	ldrb	r2, [r3, #1]
   12f0a:	438a      	bics	r2, r1
   12f0c:	705a      	strb	r2, [r3, #1]
   12f0e:	9a08      	ldr	r2, [sp, #32]
   12f10:	2a00      	cmp	r2, #0
   12f12:	d100      	bne.n	12f16 <LORAWAN_RxDone+0x5e2>
   12f14:	e093      	b.n	1303e <LORAWAN_RxDone+0x70a>
   12f16:	9a06      	ldr	r2, [sp, #24]
   12f18:	0031      	movs	r1, r6
   12f1a:	0038      	movs	r0, r7
   12f1c:	4b61      	ldr	r3, [pc, #388]	; (130a4 <LORAWAN_RxDone+0x770>)
   12f1e:	4798      	blx	r3
   12f20:	4b56      	ldr	r3, [pc, #344]	; (1307c <LORAWAN_RxDone+0x748>)
   12f22:	4d54      	ldr	r5, [pc, #336]	; (13074 <LORAWAN_RxDone+0x740>)
   12f24:	781b      	ldrb	r3, [r3, #0]
   12f26:	06db      	lsls	r3, r3, #27
   12f28:	d400      	bmi.n	12f2c <LORAWAN_RxDone+0x5f8>
   12f2a:	e160      	b.n	131ee <LORAWAN_RxDone+0x8ba>
   12f2c:	2220      	movs	r2, #32
   12f2e:	4b5e      	ldr	r3, [pc, #376]	; (130a8 <LORAWAN_RxDone+0x774>)
   12f30:	781b      	ldrb	r3, [r3, #0]
   12f32:	401a      	ands	r2, r3
   12f34:	9206      	str	r2, [sp, #24]
   12f36:	d000      	beq.n	12f3a <LORAWAN_RxDone+0x606>
   12f38:	e159      	b.n	131ee <LORAWAN_RxDone+0x8ba>
   12f3a:	320a      	adds	r2, #10
   12f3c:	4213      	tst	r3, r2
   12f3e:	d100      	bne.n	12f42 <LORAWAN_RxDone+0x60e>
   12f40:	e155      	b.n	131ee <LORAWAN_RxDone+0x8ba>
   12f42:	002b      	movs	r3, r5
   12f44:	33f5      	adds	r3, #245	; 0xf5
   12f46:	781b      	ldrb	r3, [r3, #0]
   12f48:	a90f      	add	r1, sp, #60	; 0x3c
   12f4a:	704b      	strb	r3, [r1, #1]
   12f4c:	002e      	movs	r6, r5
   12f4e:	2301      	movs	r3, #1
   12f50:	36e7      	adds	r6, #231	; 0xe7
   12f52:	700b      	strb	r3, [r1, #0]
   12f54:	7833      	ldrb	r3, [r6, #0]
   12f56:	aa0e      	add	r2, sp, #56	; 0x38
   12f58:	202f      	movs	r0, #47	; 0x2f
   12f5a:	4f54      	ldr	r7, [pc, #336]	; (130ac <LORAWAN_RxDone+0x778>)
   12f5c:	708b      	strb	r3, [r1, #2]
   12f5e:	47b8      	blx	r7
   12f60:	9007      	str	r0, [sp, #28]
   12f62:	2808      	cmp	r0, #8
   12f64:	d000      	beq.n	12f68 <LORAWAN_RxDone+0x634>
   12f66:	e0fb      	b.n	13160 <LORAWAN_RxDone+0x82c>
   12f68:	4b51      	ldr	r3, [pc, #324]	; (130b0 <LORAWAN_RxDone+0x77c>)
   12f6a:	9806      	ldr	r0, [sp, #24]
   12f6c:	4798      	blx	r3
   12f6e:	4b4e      	ldr	r3, [pc, #312]	; (130a8 <LORAWAN_RxDone+0x774>)
   12f70:	9a07      	ldr	r2, [sp, #28]
   12f72:	781b      	ldrb	r3, [r3, #0]
   12f74:	4393      	bics	r3, r2
   12f76:	4a4c      	ldr	r2, [pc, #304]	; (130a8 <LORAWAN_RxDone+0x774>)
   12f78:	7013      	strb	r3, [r2, #0]
   12f7a:	2001      	movs	r0, #1
   12f7c:	e53e      	b.n	129fc <LORAWAN_RxDone+0xc8>
   12f7e:	0023      	movs	r3, r4
   12f80:	220e      	movs	r2, #14
   12f82:	3384      	adds	r3, #132	; 0x84
   12f84:	781b      	ldrb	r3, [r3, #0]
   12f86:	4013      	ands	r3, r2
   12f88:	2b06      	cmp	r3, #6
   12f8a:	d101      	bne.n	12f90 <LORAWAN_RxDone+0x65c>
   12f8c:	4b49      	ldr	r3, [pc, #292]	; (130b4 <LORAWAN_RxDone+0x780>)
   12f8e:	4798      	blx	r3
   12f90:	4949      	ldr	r1, [pc, #292]	; (130b8 <LORAWAN_RxDone+0x784>)
   12f92:	784a      	ldrb	r2, [r1, #1]
   12f94:	780b      	ldrb	r3, [r1, #0]
   12f96:	0212      	lsls	r2, r2, #8
   12f98:	431a      	orrs	r2, r3
   12f9a:	788b      	ldrb	r3, [r1, #2]
   12f9c:	041b      	lsls	r3, r3, #16
   12f9e:	431a      	orrs	r2, r3
   12fa0:	78cb      	ldrb	r3, [r1, #3]
   12fa2:	061b      	lsls	r3, r3, #24
   12fa4:	4313      	orrs	r3, r2
   12fa6:	d008      	beq.n	12fba <LORAWAN_RxDone+0x686>
   12fa8:	0022      	movs	r2, r4
   12faa:	2120      	movs	r1, #32
   12fac:	3294      	adds	r2, #148	; 0x94
   12fae:	7813      	ldrb	r3, [r2, #0]
   12fb0:	201e      	movs	r0, #30
   12fb2:	438b      	bics	r3, r1
   12fb4:	7013      	strb	r3, [r2, #0]
   12fb6:	4b32      	ldr	r3, [pc, #200]	; (13080 <LORAWAN_RxDone+0x74c>)
   12fb8:	4798      	blx	r3
   12fba:	2300      	movs	r3, #0
   12fbc:	34e0      	adds	r4, #224	; 0xe0
   12fbe:	7023      	strb	r3, [r4, #0]
   12fc0:	4b35      	ldr	r3, [pc, #212]	; (13098 <LORAWAN_RxDone+0x764>)
   12fc2:	4798      	blx	r3
   12fc4:	e7d9      	b.n	12f7a <LORAWAN_RxDone+0x646>
   12fc6:	003e      	movs	r6, r7
   12fc8:	3608      	adds	r6, #8
   12fca:	e735      	b.n	12e38 <LORAWAN_RxDone+0x504>
   12fcc:	9b06      	ldr	r3, [sp, #24]
   12fce:	2b00      	cmp	r3, #0
   12fd0:	d031      	beq.n	13036 <LORAWAN_RxDone+0x702>
   12fd2:	0703      	lsls	r3, r0, #28
   12fd4:	d1d3      	bne.n	12f7e <LORAWAN_RxDone+0x64a>
   12fd6:	390d      	subs	r1, #13
   12fd8:	6813      	ldr	r3, [r2, #0]
   12fda:	b2cc      	uxtb	r4, r1
   12fdc:	0011      	movs	r1, r2
   12fde:	7912      	ldrb	r2, [r2, #4]
   12fe0:	0a18      	lsrs	r0, r3, #8
   12fe2:	0612      	lsls	r2, r2, #24
   12fe4:	4302      	orrs	r2, r0
   12fe6:	9204      	str	r2, [sp, #16]
   12fe8:	4a28      	ldr	r2, [pc, #160]	; (1308c <LORAWAN_RxDone+0x758>)
   12fea:	4663      	mov	r3, ip
   12fec:	9203      	str	r2, [sp, #12]
   12fee:	466a      	mov	r2, sp
   12ff0:	8313      	strh	r3, [r2, #24]
   12ff2:	8b13      	ldrh	r3, [r2, #24]
   12ff4:	318c      	adds	r1, #140	; 0x8c
   12ff6:	9302      	str	r3, [sp, #8]
   12ff8:	2302      	movs	r3, #2
   12ffa:	9301      	str	r3, [sp, #4]
   12ffc:	4b2f      	ldr	r3, [pc, #188]	; (130bc <LORAWAN_RxDone+0x788>)
   12ffe:	2201      	movs	r2, #1
   13000:	9300      	str	r3, [sp, #0]
   13002:	680b      	ldr	r3, [r1, #0]
   13004:	0028      	movs	r0, r5
   13006:	0021      	movs	r1, r4
   13008:	4e22      	ldr	r6, [pc, #136]	; (13094 <LORAWAN_RxDone+0x760>)
   1300a:	47b0      	blx	r6
   1300c:	2800      	cmp	r0, #0
   1300e:	d004      	beq.n	1301a <LORAWAN_RxDone+0x6e6>
   13010:	4b21      	ldr	r3, [pc, #132]	; (13098 <LORAWAN_RxDone+0x764>)
   13012:	4798      	blx	r3
   13014:	201f      	movs	r0, #31
   13016:	4b1a      	ldr	r3, [pc, #104]	; (13080 <LORAWAN_RxDone+0x74c>)
   13018:	4798      	blx	r3
   1301a:	4b1b      	ldr	r3, [pc, #108]	; (13088 <LORAWAN_RxDone+0x754>)
   1301c:	0021      	movs	r1, r4
   1301e:	0028      	movs	r0, r5
   13020:	4798      	blx	r3
   13022:	2300      	movs	r3, #0
   13024:	9306      	str	r3, [sp, #24]
   13026:	3301      	adds	r3, #1
   13028:	9307      	str	r3, [sp, #28]
   1302a:	2600      	movs	r6, #0
   1302c:	e73d      	b.n	12eaa <LORAWAN_RxDone+0x576>
   1302e:	2600      	movs	r6, #0
   13030:	9608      	str	r6, [sp, #32]
   13032:	9606      	str	r6, [sp, #24]
   13034:	e739      	b.n	12eaa <LORAWAN_RxDone+0x576>
   13036:	9b06      	ldr	r3, [sp, #24]
   13038:	9308      	str	r3, [sp, #32]
   1303a:	001e      	movs	r6, r3
   1303c:	e735      	b.n	12eaa <LORAWAN_RxDone+0x576>
   1303e:	2120      	movs	r1, #32
   13040:	782a      	ldrb	r2, [r5, #0]
   13042:	438a      	bics	r2, r1
   13044:	702a      	strb	r2, [r5, #0]
   13046:	0022      	movs	r2, r4
   13048:	32fd      	adds	r2, #253	; 0xfd
   1304a:	7812      	ldrb	r2, [r2, #0]
   1304c:	2a01      	cmp	r2, #1
   1304e:	d137      	bne.n	130c0 <LORAWAN_RxDone+0x78c>
   13050:	781a      	ldrb	r2, [r3, #0]
   13052:	3912      	subs	r1, #18
   13054:	438a      	bics	r2, r1
   13056:	701a      	strb	r2, [r3, #0]
   13058:	2388      	movs	r3, #136	; 0x88
   1305a:	4a06      	ldr	r2, [pc, #24]	; (13074 <LORAWAN_RxDone+0x740>)
   1305c:	009b      	lsls	r3, r3, #2
   1305e:	5cd3      	ldrb	r3, [r2, r3]
   13060:	2b00      	cmp	r3, #0
   13062:	d000      	beq.n	13066 <LORAWAN_RxDone+0x732>
   13064:	e75c      	b.n	12f20 <LORAWAN_RxDone+0x5ec>
   13066:	2008      	movs	r0, #8
   13068:	4b05      	ldr	r3, [pc, #20]	; (13080 <LORAWAN_RxDone+0x74c>)
   1306a:	4798      	blx	r3
   1306c:	e758      	b.n	12f20 <LORAWAN_RxDone+0x5ec>
   1306e:	46c0      	nop			; (mov r8, r8)
   13070:	00013f69 	.word	0x00013f69
   13074:	20003a6c 	.word	0x20003a6c
   13078:	0001100d 	.word	0x0001100d
   1307c:	20003af0 	.word	0x20003af0
   13080:	00011eb5 	.word	0x00011eb5
   13084:	000098a5 	.word	0x000098a5
   13088:	00012651 	.word	0x00012651
   1308c:	20003830 	.word	0x20003830
   13090:	20003aa1 	.word	0x20003aa1
   13094:	00011df5 	.word	0x00011df5
   13098:	000123c9 	.word	0x000123c9
   1309c:	0000e8a5 	.word	0x0000e8a5
   130a0:	000114c1 	.word	0x000114c1
   130a4:	00011f65 	.word	0x00011f65
   130a8:	20003b00 	.word	0x20003b00
   130ac:	0000e045 	.word	0x0000e045
   130b0:	00011175 	.word	0x00011175
   130b4:	000110a5 	.word	0x000110a5
   130b8:	20003dc8 	.word	0x20003dc8
   130bc:	20003a91 	.word	0x20003a91
   130c0:	2a04      	cmp	r2, #4
   130c2:	d1c9      	bne.n	13058 <LORAWAN_RxDone+0x724>
   130c4:	0023      	movs	r3, r4
   130c6:	33f1      	adds	r3, #241	; 0xf1
   130c8:	7818      	ldrb	r0, [r3, #0]
   130ca:	4bab      	ldr	r3, [pc, #684]	; (13378 <LORAWAN_RxDone+0xa44>)
   130cc:	4798      	blx	r3
   130ce:	e7c3      	b.n	13058 <LORAWAN_RxDone+0x724>
   130d0:	9b07      	ldr	r3, [sp, #28]
   130d2:	2b00      	cmp	r3, #0
   130d4:	d013      	beq.n	130fe <LORAWAN_RxDone+0x7ca>
   130d6:	0023      	movs	r3, r4
   130d8:	33fd      	adds	r3, #253	; 0xfd
   130da:	781e      	ldrb	r6, [r3, #0]
   130dc:	2e01      	cmp	r6, #1
   130de:	d10e      	bne.n	130fe <LORAWAN_RxDone+0x7ca>
   130e0:	4ba6      	ldr	r3, [pc, #664]	; (1337c <LORAWAN_RxDone+0xa48>)
   130e2:	4798      	blx	r3
   130e4:	0022      	movs	r2, r4
   130e6:	3284      	adds	r2, #132	; 0x84
   130e8:	7853      	ldrb	r3, [r2, #1]
   130ea:	43b3      	bics	r3, r6
   130ec:	7053      	strb	r3, [r2, #1]
   130ee:	2220      	movs	r2, #32
   130f0:	782b      	ldrb	r3, [r5, #0]
   130f2:	4393      	bics	r3, r2
   130f4:	702b      	strb	r3, [r5, #0]
   130f6:	2388      	movs	r3, #136	; 0x88
   130f8:	009b      	lsls	r3, r3, #2
   130fa:	5ce3      	ldrb	r3, [r4, r3]
   130fc:	e7b0      	b.n	13060 <LORAWAN_RxDone+0x72c>
   130fe:	4ba0      	ldr	r3, [pc, #640]	; (13380 <LORAWAN_RxDone+0xa4c>)
   13100:	4798      	blx	r3
   13102:	e70d      	b.n	12f20 <LORAWAN_RxDone+0x5ec>
   13104:	9a08      	ldr	r2, [sp, #32]
   13106:	2a00      	cmp	r2, #0
   13108:	d00b      	beq.n	13122 <LORAWAN_RxDone+0x7ee>
   1310a:	9a06      	ldr	r2, [sp, #24]
   1310c:	0031      	movs	r1, r6
   1310e:	0038      	movs	r0, r7
   13110:	4b9c      	ldr	r3, [pc, #624]	; (13384 <LORAWAN_RxDone+0xa50>)
   13112:	4798      	blx	r3
   13114:	0022      	movs	r2, r4
   13116:	2101      	movs	r1, #1
   13118:	3284      	adds	r2, #132	; 0x84
   1311a:	7853      	ldrb	r3, [r2, #1]
   1311c:	438b      	bics	r3, r1
   1311e:	7053      	strb	r3, [r2, #1]
   13120:	e6fe      	b.n	12f20 <LORAWAN_RxDone+0x5ec>
   13122:	2220      	movs	r2, #32
   13124:	4393      	bics	r3, r2
   13126:	702b      	strb	r3, [r5, #0]
   13128:	0023      	movs	r3, r4
   1312a:	33fd      	adds	r3, #253	; 0xfd
   1312c:	781b      	ldrb	r3, [r3, #0]
   1312e:	2b01      	cmp	r3, #1
   13130:	d10e      	bne.n	13150 <LORAWAN_RxDone+0x81c>
   13132:	0022      	movs	r2, r4
   13134:	210e      	movs	r1, #14
   13136:	3284      	adds	r2, #132	; 0x84
   13138:	7813      	ldrb	r3, [r2, #0]
   1313a:	438b      	bics	r3, r1
   1313c:	7013      	strb	r3, [r2, #0]
   1313e:	2388      	movs	r3, #136	; 0x88
   13140:	009b      	lsls	r3, r3, #2
   13142:	5ce3      	ldrb	r3, [r4, r3]
   13144:	2b00      	cmp	r3, #0
   13146:	d1e5      	bne.n	13114 <LORAWAN_RxDone+0x7e0>
   13148:	2008      	movs	r0, #8
   1314a:	4b8f      	ldr	r3, [pc, #572]	; (13388 <LORAWAN_RxDone+0xa54>)
   1314c:	4798      	blx	r3
   1314e:	e7e1      	b.n	13114 <LORAWAN_RxDone+0x7e0>
   13150:	2b04      	cmp	r3, #4
   13152:	d1f4      	bne.n	1313e <LORAWAN_RxDone+0x80a>
   13154:	0023      	movs	r3, r4
   13156:	33f1      	adds	r3, #241	; 0xf1
   13158:	7818      	ldrb	r0, [r3, #0]
   1315a:	4b87      	ldr	r3, [pc, #540]	; (13378 <LORAWAN_RxDone+0xa44>)
   1315c:	4798      	blx	r3
   1315e:	e7ee      	b.n	1313e <LORAWAN_RxDone+0x80a>
   13160:	35ff      	adds	r5, #255	; 0xff
   13162:	7f6b      	ldrb	r3, [r5, #29]
   13164:	079a      	lsls	r2, r3, #30
   13166:	d520      	bpl.n	131aa <LORAWAN_RxDone+0x876>
   13168:	aa10      	add	r2, sp, #64	; 0x40
   1316a:	0031      	movs	r1, r6
   1316c:	2026      	movs	r0, #38	; 0x26
   1316e:	47b8      	blx	r7
   13170:	9b10      	ldr	r3, [sp, #64]	; 0x40
   13172:	1c5a      	adds	r2, r3, #1
   13174:	d001      	beq.n	1317a <LORAWAN_RxDone+0x846>
   13176:	3314      	adds	r3, #20
   13178:	9310      	str	r3, [sp, #64]	; 0x40
   1317a:	0021      	movs	r1, r4
   1317c:	220e      	movs	r2, #14
   1317e:	3184      	adds	r1, #132	; 0x84
   13180:	780b      	ldrb	r3, [r1, #0]
   13182:	4393      	bics	r3, r2
   13184:	001a      	movs	r2, r3
   13186:	230c      	movs	r3, #12
   13188:	4313      	orrs	r3, r2
   1318a:	700b      	strb	r3, [r1, #0]
   1318c:	4b7f      	ldr	r3, [pc, #508]	; (1338c <LORAWAN_RxDone+0xa58>)
   1318e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   13190:	5ce3      	ldrb	r3, [r4, r3]
   13192:	21fa      	movs	r1, #250	; 0xfa
   13194:	1ad3      	subs	r3, r2, r3
   13196:	2200      	movs	r2, #0
   13198:	0089      	lsls	r1, r1, #2
   1319a:	4359      	muls	r1, r3
   1319c:	34ef      	adds	r4, #239	; 0xef
   1319e:	4b7c      	ldr	r3, [pc, #496]	; (13390 <LORAWAN_RxDone+0xa5c>)
   131a0:	7820      	ldrb	r0, [r4, #0]
   131a2:	9200      	str	r2, [sp, #0]
   131a4:	4c7b      	ldr	r4, [pc, #492]	; (13394 <LORAWAN_RxDone+0xa60>)
   131a6:	47a0      	blx	r4
   131a8:	e6e7      	b.n	12f7a <LORAWAN_RxDone+0x646>
   131aa:	075b      	lsls	r3, r3, #29
   131ac:	d400      	bmi.n	131b0 <LORAWAN_RxDone+0x87c>
   131ae:	e6e4      	b.n	12f7a <LORAWAN_RxDone+0x646>
   131b0:	aa10      	add	r2, sp, #64	; 0x40
   131b2:	0031      	movs	r1, r6
   131b4:	2032      	movs	r0, #50	; 0x32
   131b6:	47b8      	blx	r7
   131b8:	220e      	movs	r2, #14
   131ba:	4b77      	ldr	r3, [pc, #476]	; (13398 <LORAWAN_RxDone+0xa64>)
   131bc:	781b      	ldrb	r3, [r3, #0]
   131be:	4393      	bics	r3, r2
   131c0:	001a      	movs	r2, r3
   131c2:	230c      	movs	r3, #12
   131c4:	4313      	orrs	r3, r2
   131c6:	4a74      	ldr	r2, [pc, #464]	; (13398 <LORAWAN_RxDone+0xa64>)
   131c8:	7013      	strb	r3, [r2, #0]
   131ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
   131cc:	1c5a      	adds	r2, r3, #1
   131ce:	d001      	beq.n	131d4 <LORAWAN_RxDone+0x8a0>
   131d0:	3301      	adds	r3, #1
   131d2:	9310      	str	r3, [sp, #64]	; 0x40
   131d4:	4b6d      	ldr	r3, [pc, #436]	; (1338c <LORAWAN_RxDone+0xa58>)
   131d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   131d8:	5ce3      	ldrb	r3, [r4, r3]
   131da:	21fa      	movs	r1, #250	; 0xfa
   131dc:	1ad3      	subs	r3, r2, r3
   131de:	2200      	movs	r2, #0
   131e0:	0089      	lsls	r1, r1, #2
   131e2:	34f2      	adds	r4, #242	; 0xf2
   131e4:	4359      	muls	r1, r3
   131e6:	7820      	ldrb	r0, [r4, #0]
   131e8:	4b6c      	ldr	r3, [pc, #432]	; (1339c <LORAWAN_RxDone+0xa68>)
   131ea:	9200      	str	r2, [sp, #0]
   131ec:	e7da      	b.n	131a4 <LORAWAN_RxDone+0x870>
   131ee:	35fd      	adds	r5, #253	; 0xfd
   131f0:	782b      	ldrb	r3, [r5, #0]
   131f2:	2b04      	cmp	r3, #4
   131f4:	d000      	beq.n	131f8 <LORAWAN_RxDone+0x8c4>
   131f6:	e6c0      	b.n	12f7a <LORAWAN_RxDone+0x646>
   131f8:	0038      	movs	r0, r7
   131fa:	4b69      	ldr	r3, [pc, #420]	; (133a0 <LORAWAN_RxDone+0xa6c>)
   131fc:	4798      	blx	r3
   131fe:	e6bc      	b.n	12f7a <LORAWAN_RxDone+0x646>
   13200:	2390      	movs	r3, #144	; 0x90
   13202:	009b      	lsls	r3, r3, #2
   13204:	5ce3      	ldrb	r3, [r4, r3]
   13206:	2b00      	cmp	r3, #0
   13208:	d009      	beq.n	1321e <LORAWAN_RxDone+0x8ea>
   1320a:	2322      	movs	r3, #34	; 0x22
   1320c:	aa04      	add	r2, sp, #16
   1320e:	189b      	adds	r3, r3, r2
   13210:	781b      	ldrb	r3, [r3, #0]
   13212:	003a      	movs	r2, r7
   13214:	9906      	ldr	r1, [sp, #24]
   13216:	0038      	movs	r0, r7
   13218:	4c62      	ldr	r4, [pc, #392]	; (133a4 <LORAWAN_RxDone+0xa70>)
   1321a:	47a0      	blx	r4
   1321c:	e6ad      	b.n	12f7a <LORAWAN_RxDone+0x646>
   1321e:	2220      	movs	r2, #32
   13220:	3494      	adds	r4, #148	; 0x94
   13222:	7823      	ldrb	r3, [r4, #0]
   13224:	201e      	movs	r0, #30
   13226:	4393      	bics	r3, r2
   13228:	7023      	strb	r3, [r4, #0]
   1322a:	4b57      	ldr	r3, [pc, #348]	; (13388 <LORAWAN_RxDone+0xa54>)
   1322c:	4798      	blx	r3
   1322e:	e6c7      	b.n	12fc0 <LORAWAN_RxDone+0x68c>
   13230:	220e      	movs	r2, #14
   13232:	4013      	ands	r3, r2
   13234:	2b0a      	cmp	r3, #10
   13236:	d008      	beq.n	1324a <LORAWAN_RxDone+0x916>
   13238:	2b06      	cmp	r3, #6
   1323a:	d000      	beq.n	1323e <LORAWAN_RxDone+0x90a>
   1323c:	e5a0      	b.n	12d80 <LORAWAN_RxDone+0x44c>
   1323e:	0023      	movs	r3, r4
   13240:	33f9      	adds	r3, #249	; 0xf9
   13242:	781b      	ldrb	r3, [r3, #0]
   13244:	2b00      	cmp	r3, #0
   13246:	d100      	bne.n	1324a <LORAWAN_RxDone+0x916>
   13248:	e59a      	b.n	12d80 <LORAWAN_RxDone+0x44c>
   1324a:	2220      	movs	r2, #32
   1324c:	3494      	adds	r4, #148	; 0x94
   1324e:	7823      	ldrb	r3, [r4, #0]
   13250:	2019      	movs	r0, #25
   13252:	4393      	bics	r3, r2
   13254:	7023      	strb	r3, [r4, #0]
   13256:	e5a0      	b.n	12d9a <LORAWAN_RxDone+0x466>
   13258:	4953      	ldr	r1, [pc, #332]	; (133a8 <LORAWAN_RxDone+0xa74>)
   1325a:	784a      	ldrb	r2, [r1, #1]
   1325c:	780b      	ldrb	r3, [r1, #0]
   1325e:	0212      	lsls	r2, r2, #8
   13260:	431a      	orrs	r2, r3
   13262:	788b      	ldrb	r3, [r1, #2]
   13264:	041b      	lsls	r3, r3, #16
   13266:	431a      	orrs	r2, r3
   13268:	78cb      	ldrb	r3, [r1, #3]
   1326a:	061b      	lsls	r3, r3, #24
   1326c:	4313      	orrs	r3, r2
   1326e:	d100      	bne.n	13272 <LORAWAN_RxDone+0x93e>
   13270:	e683      	b.n	12f7a <LORAWAN_RxDone+0x646>
   13272:	4b4e      	ldr	r3, [pc, #312]	; (133ac <LORAWAN_RxDone+0xa78>)
   13274:	4c4e      	ldr	r4, [pc, #312]	; (133b0 <LORAWAN_RxDone+0xa7c>)
   13276:	781b      	ldrb	r3, [r3, #0]
   13278:	2b10      	cmp	r3, #16
   1327a:	d105      	bne.n	13288 <LORAWAN_RxDone+0x954>
   1327c:	0001      	movs	r1, r0
   1327e:	2000      	movs	r0, #0
   13280:	9a06      	ldr	r2, [sp, #24]
   13282:	3b0c      	subs	r3, #12
   13284:	47a0      	blx	r4
   13286:	e678      	b.n	12f7a <LORAWAN_RxDone+0x646>
   13288:	2300      	movs	r3, #0
   1328a:	0001      	movs	r1, r0
   1328c:	9a06      	ldr	r2, [sp, #24]
   1328e:	0018      	movs	r0, r3
   13290:	e7f8      	b.n	13284 <LORAWAN_RxDone+0x950>
   13292:	348c      	adds	r4, #140	; 0x8c
   13294:	6823      	ldr	r3, [r4, #0]
   13296:	0031      	movs	r1, r6
   13298:	9308      	str	r3, [sp, #32]
   1329a:	4b46      	ldr	r3, [pc, #280]	; (133b4 <LORAWAN_RxDone+0xa80>)
   1329c:	4798      	blx	r3
   1329e:	2808      	cmp	r0, #8
   132a0:	d001      	beq.n	132a6 <LORAWAN_RxDone+0x972>
   132a2:	f7ff fbab 	bl	129fc <LORAWAN_RxDone+0xc8>
   132a6:	9b06      	ldr	r3, [sp, #24]
   132a8:	0028      	movs	r0, r5
   132aa:	1f1a      	subs	r2, r3, #4
   132ac:	9b07      	ldr	r3, [sp, #28]
   132ae:	b2d2      	uxtb	r2, r2
   132b0:	9300      	str	r3, [sp, #0]
   132b2:	6821      	ldr	r1, [r4, #0]
   132b4:	2349      	movs	r3, #73	; 0x49
   132b6:	4c40      	ldr	r4, [pc, #256]	; (133b8 <LORAWAN_RxDone+0xa84>)
   132b8:	47a0      	blx	r4
   132ba:	4d40      	ldr	r5, [pc, #256]	; (133bc <LORAWAN_RxDone+0xa88>)
   132bc:	9607      	str	r6, [sp, #28]
   132be:	4e40      	ldr	r6, [pc, #256]	; (133c0 <LORAWAN_RxDone+0xa8c>)
   132c0:	4c40      	ldr	r4, [pc, #256]	; (133c4 <LORAWAN_RxDone+0xa90>)
   132c2:	2210      	movs	r2, #16
   132c4:	0021      	movs	r1, r4
   132c6:	4b40      	ldr	r3, [pc, #256]	; (133c8 <LORAWAN_RxDone+0xa94>)
   132c8:	0030      	movs	r0, r6
   132ca:	4798      	blx	r3
   132cc:	9b06      	ldr	r3, [sp, #24]
   132ce:	0039      	movs	r1, r7
   132d0:	3b04      	subs	r3, #4
   132d2:	001a      	movs	r2, r3
   132d4:	9309      	str	r3, [sp, #36]	; 0x24
   132d6:	483d      	ldr	r0, [pc, #244]	; (133cc <LORAWAN_RxDone+0xa98>)
   132d8:	4b3b      	ldr	r3, [pc, #236]	; (133c8 <LORAWAN_RxDone+0xa94>)
   132da:	4798      	blx	r3
   132dc:	9b06      	ldr	r3, [sp, #24]
   132de:	9a07      	ldr	r2, [sp, #28]
   132e0:	330c      	adds	r3, #12
   132e2:	b29b      	uxth	r3, r3
   132e4:	9300      	str	r3, [sp, #0]
   132e6:	0033      	movs	r3, r6
   132e8:	2a00      	cmp	r2, #0
   132ea:	d100      	bne.n	132ee <LORAWAN_RxDone+0x9ba>
   132ec:	e557      	b.n	12d9e <LORAWAN_RxDone+0x46a>
   132ee:	0022      	movs	r2, r4
   132f0:	2104      	movs	r1, #4
   132f2:	4c37      	ldr	r4, [pc, #220]	; (133d0 <LORAWAN_RxDone+0xa9c>)
   132f4:	0028      	movs	r0, r5
   132f6:	47a0      	blx	r4
   132f8:	2204      	movs	r2, #4
   132fa:	4932      	ldr	r1, [pc, #200]	; (133c4 <LORAWAN_RxDone+0xa90>)
   132fc:	4c32      	ldr	r4, [pc, #200]	; (133c8 <LORAWAN_RxDone+0xa94>)
   132fe:	a80d      	add	r0, sp, #52	; 0x34
   13300:	47a0      	blx	r4
   13302:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13304:	2204      	movs	r2, #4
   13306:	18f9      	adds	r1, r7, r3
   13308:	a810      	add	r0, sp, #64	; 0x40
   1330a:	47a0      	blx	r4
   1330c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1330e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   13310:	4293      	cmp	r3, r2
   13312:	d100      	bne.n	13316 <LORAWAN_RxDone+0x9e2>
   13314:	e54a      	b.n	12dac <LORAWAN_RxDone+0x478>
   13316:	9b07      	ldr	r3, [sp, #28]
   13318:	2b00      	cmp	r3, #0
   1331a:	d108      	bne.n	1332e <LORAWAN_RxDone+0x9fa>
   1331c:	220e      	movs	r2, #14
   1331e:	4b2d      	ldr	r3, [pc, #180]	; (133d4 <LORAWAN_RxDone+0xaa0>)
   13320:	3384      	adds	r3, #132	; 0x84
   13322:	781b      	ldrb	r3, [r3, #0]
   13324:	4013      	ands	r3, r2
   13326:	2b06      	cmp	r3, #6
   13328:	d101      	bne.n	1332e <LORAWAN_RxDone+0x9fa>
   1332a:	4b2b      	ldr	r3, [pc, #172]	; (133d8 <LORAWAN_RxDone+0xaa4>)
   1332c:	4798      	blx	r3
   1332e:	491e      	ldr	r1, [pc, #120]	; (133a8 <LORAWAN_RxDone+0xa74>)
   13330:	784a      	ldrb	r2, [r1, #1]
   13332:	780b      	ldrb	r3, [r1, #0]
   13334:	0212      	lsls	r2, r2, #8
   13336:	431a      	orrs	r2, r3
   13338:	788b      	ldrb	r3, [r1, #2]
   1333a:	041b      	lsls	r3, r3, #16
   1333c:	431a      	orrs	r2, r3
   1333e:	78cb      	ldrb	r3, [r1, #3]
   13340:	061b      	lsls	r3, r3, #24
   13342:	4313      	orrs	r3, r2
   13344:	d101      	bne.n	1334a <LORAWAN_RxDone+0xa16>
   13346:	f7ff fb47 	bl	129d8 <LORAWAN_RxDone+0xa4>
   1334a:	4a22      	ldr	r2, [pc, #136]	; (133d4 <LORAWAN_RxDone+0xaa0>)
   1334c:	2020      	movs	r0, #32
   1334e:	0011      	movs	r1, r2
   13350:	3194      	adds	r1, #148	; 0x94
   13352:	780b      	ldrb	r3, [r1, #0]
   13354:	4383      	bics	r3, r0
   13356:	700b      	strb	r3, [r1, #0]
   13358:	9b07      	ldr	r3, [sp, #28]
   1335a:	2b00      	cmp	r3, #0
   1335c:	d100      	bne.n	13360 <LORAWAN_RxDone+0xa2c>
   1335e:	e521      	b.n	12da4 <LORAWAN_RxDone+0x470>
   13360:	2322      	movs	r3, #34	; 0x22
   13362:	a904      	add	r1, sp, #16
   13364:	185b      	adds	r3, r3, r1
   13366:	7819      	ldrb	r1, [r3, #0]
   13368:	233c      	movs	r3, #60	; 0x3c
   1336a:	434b      	muls	r3, r1
   1336c:	18d3      	adds	r3, r2, r3
   1336e:	9a08      	ldr	r2, [sp, #32]
   13370:	33fc      	adds	r3, #252	; 0xfc
   13372:	659a      	str	r2, [r3, #88]	; 0x58
   13374:	2018      	movs	r0, #24
   13376:	e510      	b.n	12d9a <LORAWAN_RxDone+0x466>
   13378:	0000e8a5 	.word	0x0000e8a5
   1337c:	000114c1 	.word	0x000114c1
   13380:	00011425 	.word	0x00011425
   13384:	00011f65 	.word	0x00011f65
   13388:	00011eb5 	.word	0x00011eb5
   1338c:	0000022b 	.word	0x0000022b
   13390:	0001126d 	.word	0x0001126d
   13394:	0000e58d 	.word	0x0000e58d
   13398:	20003af0 	.word	0x20003af0
   1339c:	00011ccd 	.word	0x00011ccd
   133a0:	00013de9 	.word	0x00013de9
   133a4:	00013fdd 	.word	0x00013fdd
   133a8:	20003dc8 	.word	0x20003dc8
   133ac:	2000245b 	.word	0x2000245b
   133b0:	00011f19 	.word	0x00011f19
   133b4:	00012405 	.word	0x00012405
   133b8:	0001100d 	.word	0x0001100d
   133bc:	20003a91 	.word	0x20003a91
   133c0:	20003830 	.word	0x20003830
   133c4:	200020c5 	.word	0x200020c5
   133c8:	0001786b 	.word	0x0001786b
   133cc:	20003840 	.word	0x20003840
   133d0:	00007341 	.word	0x00007341
   133d4:	20003a6c 	.word	0x20003a6c
   133d8:	000110a5 	.word	0x000110a5

000133dc <LorawanSetEdClass>:
   133dc:	2388      	movs	r3, #136	; 0x88
   133de:	b537      	push	{r0, r1, r2, r4, r5, lr}
   133e0:	4d1a      	ldr	r5, [pc, #104]	; (1344c <LorawanSetEdClass+0x70>)
   133e2:	009b      	lsls	r3, r3, #2
   133e4:	5ceb      	ldrb	r3, [r5, r3]
   133e6:	0004      	movs	r4, r0
   133e8:	2011      	movs	r0, #17
   133ea:	2b00      	cmp	r3, #0
   133ec:	d013      	beq.n	13416 <LorawanSetEdClass+0x3a>
   133ee:	002b      	movs	r3, r5
   133f0:	33fe      	adds	r3, #254	; 0xfe
   133f2:	781b      	ldrb	r3, [r3, #0]
   133f4:	3807      	subs	r0, #7
   133f6:	4223      	tst	r3, r4
   133f8:	d00d      	beq.n	13416 <LorawanSetEdClass+0x3a>
   133fa:	002b      	movs	r3, r5
   133fc:	33fd      	adds	r3, #253	; 0xfd
   133fe:	7819      	ldrb	r1, [r3, #0]
   13400:	428c      	cmp	r4, r1
   13402:	d007      	beq.n	13414 <LorawanSetEdClass+0x38>
   13404:	2901      	cmp	r1, #1
   13406:	d107      	bne.n	13418 <LorawanSetEdClass+0x3c>
   13408:	2c04      	cmp	r4, #4
   1340a:	d104      	bne.n	13416 <LorawanSetEdClass+0x3a>
   1340c:	701c      	strb	r4, [r3, #0]
   1340e:	2000      	movs	r0, #0
   13410:	4b0f      	ldr	r3, [pc, #60]	; (13450 <LorawanSetEdClass+0x74>)
   13412:	4798      	blx	r3
   13414:	2008      	movs	r0, #8
   13416:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   13418:	2904      	cmp	r1, #4
   1341a:	d1fc      	bne.n	13416 <LorawanSetEdClass+0x3a>
   1341c:	2c01      	cmp	r4, #1
   1341e:	d1fa      	bne.n	13416 <LorawanSetEdClass+0x3a>
   13420:	701c      	strb	r4, [r3, #0]
   13422:	0021      	movs	r1, r4
   13424:	4b0a      	ldr	r3, [pc, #40]	; (13450 <LorawanSetEdClass+0x74>)
   13426:	2000      	movs	r0, #0
   13428:	4798      	blx	r3
   1342a:	002a      	movs	r2, r5
   1342c:	210e      	movs	r1, #14
   1342e:	3284      	adds	r2, #132	; 0x84
   13430:	7813      	ldrb	r3, [r2, #0]
   13432:	a801      	add	r0, sp, #4
   13434:	438b      	bics	r3, r1
   13436:	7013      	strb	r3, [r2, #0]
   13438:	4b06      	ldr	r3, [pc, #24]	; (13454 <LorawanSetEdClass+0x78>)
   1343a:	7004      	strb	r4, [r0, #0]
   1343c:	4798      	blx	r3
   1343e:	2394      	movs	r3, #148	; 0x94
   13440:	005b      	lsls	r3, r3, #1
   13442:	5ce8      	ldrb	r0, [r5, r3]
   13444:	4b04      	ldr	r3, [pc, #16]	; (13458 <LorawanSetEdClass+0x7c>)
   13446:	4798      	blx	r3
   13448:	e7e4      	b.n	13414 <LorawanSetEdClass+0x38>
   1344a:	46c0      	nop			; (mov r8, r8)
   1344c:	20003a6c 	.word	0x20003a6c
   13450:	000098a5 	.word	0x000098a5
   13454:	000105e5 	.word	0x000105e5
   13458:	0000e8a5 	.word	0x0000e8a5

0001345c <LORAWAN_SetAttr>:
   1345c:	2388      	movs	r3, #136	; 0x88
   1345e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13460:	4cbb      	ldr	r4, [pc, #748]	; (13750 <LORAWAN_SetAttr+0x2f4>)
   13462:	009b      	lsls	r3, r3, #2
   13464:	5ce3      	ldrb	r3, [r4, r3]
   13466:	000d      	movs	r5, r1
   13468:	2611      	movs	r6, #17
   1346a:	2b00      	cmp	r3, #0
   1346c:	d100      	bne.n	13470 <LORAWAN_SetAttr+0x14>
   1346e:	e11f      	b.n	136b0 <LORAWAN_SetAttr+0x254>
   13470:	2846      	cmp	r0, #70	; 0x46
   13472:	d878      	bhi.n	13566 <LORAWAN_SetAttr+0x10a>
   13474:	f001 f8be 	bl	145f4 <__gnu_thumb1_case_uhi>
   13478:	00930047 	.word	0x00930047
   1347c:	00fc00b2 	.word	0x00fc00b2
   13480:	00e600c5 	.word	0x00e600c5
   13484:	0134011e 	.word	0x0134011e
   13488:	01660154 	.word	0x01660154
   1348c:	01830178 	.word	0x01830178
   13490:	01a6018d 	.word	0x01a6018d
   13494:	007701ab 	.word	0x007701ab
   13498:	01b501b0 	.word	0x01b501b0
   1349c:	01bf01ba 	.word	0x01bf01ba
   134a0:	01e601c4 	.word	0x01e601c4
   134a4:	01cb01eb 	.word	0x01cb01eb
   134a8:	01fc01c8 	.word	0x01fc01c8
   134ac:	01e101f8 	.word	0x01e101f8
   134b0:	01d701dd 	.word	0x01d701dd
   134b4:	00770077 	.word	0x00770077
   134b8:	0077019e 	.word	0x0077019e
   134bc:	00770077 	.word	0x00770077
   134c0:	00770077 	.word	0x00770077
   134c4:	02000077 	.word	0x02000077
   134c8:	02030066 	.word	0x02030066
   134cc:	020d0211 	.word	0x020d0211
   134d0:	00770208 	.word	0x00770208
   134d4:	02190215 	.word	0x02190215
   134d8:	0221021d 	.word	0x0221021d
   134dc:	02290225 	.word	0x02290225
   134e0:	00770249 	.word	0x00770249
   134e4:	00770077 	.word	0x00770077
   134e8:	00770077 	.word	0x00770077
   134ec:	00770077 	.word	0x00770077
   134f0:	00770077 	.word	0x00770077
   134f4:	02600077 	.word	0x02600077
   134f8:	026e026a 	.word	0x026e026a
   134fc:	00770077 	.word	0x00770077
   13500:	02730077 	.word	0x02730077
   13504:	0271      	.short	0x0271
   13506:	260a      	movs	r6, #10
   13508:	2900      	cmp	r1, #0
   1350a:	d100      	bne.n	1350e <LORAWAN_SetAttr+0xb2>
   1350c:	e0d0      	b.n	136b0 <LORAWAN_SetAttr+0x254>
   1350e:	0020      	movs	r0, r4
   13510:	2208      	movs	r2, #8
   13512:	4b90      	ldr	r3, [pc, #576]	; (13754 <LORAWAN_SetAttr+0x2f8>)
   13514:	305d      	adds	r0, #93	; 0x5d
   13516:	4798      	blx	r3
   13518:	2108      	movs	r1, #8
   1351a:	4e8f      	ldr	r6, [pc, #572]	; (13758 <LORAWAN_SetAttr+0x2fc>)
   1351c:	2001      	movs	r0, #1
   1351e:	47b0      	blx	r6
   13520:	0022      	movs	r2, r4
   13522:	2501      	movs	r5, #1
   13524:	32de      	adds	r2, #222	; 0xde
   13526:	7813      	ldrb	r3, [r2, #0]
   13528:	2109      	movs	r1, #9
   1352a:	432b      	orrs	r3, r5
   1352c:	3484      	adds	r4, #132	; 0x84
   1352e:	0028      	movs	r0, r5
   13530:	7013      	strb	r3, [r2, #0]
   13532:	47b0      	blx	r6
   13534:	7823      	ldrb	r3, [r4, #0]
   13536:	210b      	movs	r1, #11
   13538:	43ab      	bics	r3, r5
   1353a:	0028      	movs	r0, r5
   1353c:	7023      	strb	r3, [r4, #0]
   1353e:	47b0      	blx	r6
   13540:	2608      	movs	r6, #8
   13542:	e0b5      	b.n	136b0 <LORAWAN_SetAttr+0x254>
   13544:	0023      	movs	r3, r4
   13546:	33ff      	adds	r3, #255	; 0xff
   13548:	7f5b      	ldrb	r3, [r3, #29]
   1354a:	260a      	movs	r6, #10
   1354c:	075b      	lsls	r3, r3, #29
   1354e:	d400      	bmi.n	13552 <LORAWAN_SetAttr+0xf6>
   13550:	e0ae      	b.n	136b0 <LORAWAN_SetAttr+0x254>
   13552:	79ca      	ldrb	r2, [r1, #7]
   13554:	4b81      	ldr	r3, [pc, #516]	; (1375c <LORAWAN_SetAttr+0x300>)
   13556:	2a00      	cmp	r2, #0
   13558:	d10e      	bne.n	13578 <LORAWAN_SetAttr+0x11c>
   1355a:	4669      	mov	r1, sp
   1355c:	201d      	movs	r0, #29
   1355e:	714a      	strb	r2, [r1, #5]
   13560:	4798      	blx	r3
   13562:	2800      	cmp	r0, #0
   13564:	d001      	beq.n	1356a <LORAWAN_SetAttr+0x10e>
   13566:	260a      	movs	r6, #10
   13568:	e0a2      	b.n	136b0 <LORAWAN_SetAttr+0x254>
   1356a:	2109      	movs	r1, #9
   1356c:	34fe      	adds	r4, #254	; 0xfe
   1356e:	8460      	strh	r0, [r4, #34]	; 0x22
   13570:	8420      	strh	r0, [r4, #32]
   13572:	4b79      	ldr	r3, [pc, #484]	; (13758 <LORAWAN_SetAttr+0x2fc>)
   13574:	4798      	blx	r3
   13576:	e7e3      	b.n	13540 <LORAWAN_SetAttr+0xe4>
   13578:	2002      	movs	r0, #2
   1357a:	5e2a      	ldrsh	r2, [r5, r0]
   1357c:	88ae      	ldrh	r6, [r5, #4]
   1357e:	79a8      	ldrb	r0, [r5, #6]
   13580:	466d      	mov	r5, sp
   13582:	806a      	strh	r2, [r5, #2]
   13584:	2201      	movs	r2, #1
   13586:	8809      	ldrh	r1, [r1, #0]
   13588:	7128      	strb	r0, [r5, #4]
   1358a:	8029      	strh	r1, [r5, #0]
   1358c:	201d      	movs	r0, #29
   1358e:	4669      	mov	r1, sp
   13590:	716a      	strb	r2, [r5, #5]
   13592:	4798      	blx	r3
   13594:	2800      	cmp	r0, #0
   13596:	d1e6      	bne.n	13566 <LORAWAN_SetAttr+0x10a>
   13598:	34fe      	adds	r4, #254	; 0xfe
   1359a:	8466      	strh	r6, [r4, #34]	; 0x22
   1359c:	e7d0      	b.n	13540 <LORAWAN_SetAttr+0xe4>
   1359e:	260a      	movs	r6, #10
   135a0:	2900      	cmp	r1, #0
   135a2:	d100      	bne.n	135a6 <LORAWAN_SetAttr+0x14a>
   135a4:	e084      	b.n	136b0 <LORAWAN_SetAttr+0x254>
   135a6:	0020      	movs	r0, r4
   135a8:	2208      	movs	r2, #8
   135aa:	4b6a      	ldr	r3, [pc, #424]	; (13754 <LORAWAN_SetAttr+0x2f8>)
   135ac:	3055      	adds	r0, #85	; 0x55
   135ae:	4798      	blx	r3
   135b0:	2107      	movs	r1, #7
   135b2:	4d69      	ldr	r5, [pc, #420]	; (13758 <LORAWAN_SetAttr+0x2fc>)
   135b4:	2001      	movs	r0, #1
   135b6:	47a8      	blx	r5
   135b8:	0022      	movs	r2, r4
   135ba:	2302      	movs	r3, #2
   135bc:	32de      	adds	r2, #222	; 0xde
   135be:	7811      	ldrb	r1, [r2, #0]
   135c0:	2001      	movs	r0, #1
   135c2:	430b      	orrs	r3, r1
   135c4:	2109      	movs	r1, #9
   135c6:	7013      	strb	r3, [r2, #0]
   135c8:	47a8      	blx	r5
   135ca:	2001      	movs	r0, #1
   135cc:	3484      	adds	r4, #132	; 0x84
   135ce:	7823      	ldrb	r3, [r4, #0]
   135d0:	210b      	movs	r1, #11
   135d2:	4383      	bics	r3, r0
   135d4:	7023      	strb	r3, [r4, #0]
   135d6:	47a8      	blx	r5
   135d8:	3e02      	subs	r6, #2
   135da:	e069      	b.n	136b0 <LORAWAN_SetAttr+0x254>
   135dc:	680b      	ldr	r3, [r1, #0]
   135de:	2001      	movs	r0, #1
   135e0:	0a19      	lsrs	r1, r3, #8
   135e2:	70a1      	strb	r1, [r4, #2]
   135e4:	0c19      	lsrs	r1, r3, #16
   135e6:	7063      	strb	r3, [r4, #1]
   135e8:	70e1      	strb	r1, [r4, #3]
   135ea:	0e1b      	lsrs	r3, r3, #24
   135ec:	2103      	movs	r1, #3
   135ee:	4d5a      	ldr	r5, [pc, #360]	; (13758 <LORAWAN_SetAttr+0x2fc>)
   135f0:	7123      	strb	r3, [r4, #4]
   135f2:	47a8      	blx	r5
   135f4:	0022      	movs	r2, r4
   135f6:	2304      	movs	r3, #4
   135f8:	32de      	adds	r2, #222	; 0xde
   135fa:	7811      	ldrb	r1, [r2, #0]
   135fc:	430b      	orrs	r3, r1
   135fe:	7013      	strb	r3, [r2, #0]
   13600:	e015      	b.n	1362e <LORAWAN_SetAttr+0x1d2>
   13602:	260a      	movs	r6, #10
   13604:	2900      	cmp	r1, #0
   13606:	d053      	beq.n	136b0 <LORAWAN_SetAttr+0x254>
   13608:	3606      	adds	r6, #6
   1360a:	0032      	movs	r2, r6
   1360c:	4f51      	ldr	r7, [pc, #324]	; (13754 <LORAWAN_SetAttr+0x2f8>)
   1360e:	1d60      	adds	r0, r4, #5
   13610:	47b8      	blx	r7
   13612:	0020      	movs	r0, r4
   13614:	0032      	movs	r2, r6
   13616:	0029      	movs	r1, r5
   13618:	3025      	adds	r0, #37	; 0x25
   1361a:	47b8      	blx	r7
   1361c:	2104      	movs	r1, #4
   1361e:	2001      	movs	r0, #1
   13620:	4d4d      	ldr	r5, [pc, #308]	; (13758 <LORAWAN_SetAttr+0x2fc>)
   13622:	47a8      	blx	r5
   13624:	0023      	movs	r3, r4
   13626:	33de      	adds	r3, #222	; 0xde
   13628:	781a      	ldrb	r2, [r3, #0]
   1362a:	4316      	orrs	r6, r2
   1362c:	701e      	strb	r6, [r3, #0]
   1362e:	2109      	movs	r1, #9
   13630:	2001      	movs	r0, #1
   13632:	47a8      	blx	r5
   13634:	2001      	movs	r0, #1
   13636:	210b      	movs	r1, #11
   13638:	3484      	adds	r4, #132	; 0x84
   1363a:	7823      	ldrb	r3, [r4, #0]
   1363c:	4383      	bics	r3, r0
   1363e:	7023      	strb	r3, [r4, #0]
   13640:	47a8      	blx	r5
   13642:	e77d      	b.n	13540 <LORAWAN_SetAttr+0xe4>
   13644:	260a      	movs	r6, #10
   13646:	2900      	cmp	r1, #0
   13648:	d032      	beq.n	136b0 <LORAWAN_SetAttr+0x254>
   1364a:	0020      	movs	r0, r4
   1364c:	2210      	movs	r2, #16
   1364e:	4e41      	ldr	r6, [pc, #260]	; (13754 <LORAWAN_SetAttr+0x2f8>)
   13650:	3015      	adds	r0, #21
   13652:	47b0      	blx	r6
   13654:	0020      	movs	r0, r4
   13656:	2210      	movs	r2, #16
   13658:	0029      	movs	r1, r5
   1365a:	3035      	adds	r0, #53	; 0x35
   1365c:	47b0      	blx	r6
   1365e:	2105      	movs	r1, #5
   13660:	2001      	movs	r0, #1
   13662:	4d3d      	ldr	r5, [pc, #244]	; (13758 <LORAWAN_SetAttr+0x2fc>)
   13664:	47a8      	blx	r5
   13666:	0022      	movs	r2, r4
   13668:	32de      	adds	r2, #222	; 0xde
   1366a:	7811      	ldrb	r1, [r2, #0]
   1366c:	2320      	movs	r3, #32
   1366e:	e7c5      	b.n	135fc <LORAWAN_SetAttr+0x1a0>
   13670:	260a      	movs	r6, #10
   13672:	2900      	cmp	r1, #0
   13674:	d01c      	beq.n	136b0 <LORAWAN_SetAttr+0x254>
   13676:	4b3a      	ldr	r3, [pc, #232]	; (13760 <LORAWAN_SetAttr+0x304>)
   13678:	3e02      	subs	r6, #2
   1367a:	5ce3      	ldrb	r3, [r4, r3]
   1367c:	2b00      	cmp	r3, #0
   1367e:	d117      	bne.n	136b0 <LORAWAN_SetAttr+0x254>
   13680:	0020      	movs	r0, r4
   13682:	2210      	movs	r2, #16
   13684:	4b33      	ldr	r3, [pc, #204]	; (13754 <LORAWAN_SetAttr+0x2f8>)
   13686:	3045      	adds	r0, #69	; 0x45
   13688:	4798      	blx	r3
   1368a:	2106      	movs	r1, #6
   1368c:	4d32      	ldr	r5, [pc, #200]	; (13758 <LORAWAN_SetAttr+0x2fc>)
   1368e:	2001      	movs	r0, #1
   13690:	47a8      	blx	r5
   13692:	0022      	movs	r2, r4
   13694:	32de      	adds	r2, #222	; 0xde
   13696:	7813      	ldrb	r3, [r2, #0]
   13698:	2109      	movs	r1, #9
   1369a:	4333      	orrs	r3, r6
   1369c:	2001      	movs	r0, #1
   1369e:	7013      	strb	r3, [r2, #0]
   136a0:	47a8      	blx	r5
   136a2:	2001      	movs	r0, #1
   136a4:	3484      	adds	r4, #132	; 0x84
   136a6:	7823      	ldrb	r3, [r4, #0]
   136a8:	210b      	movs	r1, #11
   136aa:	4383      	bics	r3, r0
   136ac:	7023      	strb	r3, [r4, #0]
   136ae:	47a8      	blx	r5
   136b0:	0030      	movs	r0, r6
   136b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   136b4:	780b      	ldrb	r3, [r1, #0]
   136b6:	2001      	movs	r0, #1
   136b8:	0021      	movs	r1, r4
   136ba:	2520      	movs	r5, #32
   136bc:	3184      	adds	r1, #132	; 0x84
   136be:	4003      	ands	r3, r0
   136c0:	015a      	lsls	r2, r3, #5
   136c2:	780b      	ldrb	r3, [r1, #0]
   136c4:	43ab      	bics	r3, r5
   136c6:	4313      	orrs	r3, r2
   136c8:	700b      	strb	r3, [r1, #0]
   136ca:	0023      	movs	r3, r4
   136cc:	2200      	movs	r2, #0
   136ce:	33ca      	adds	r3, #202	; 0xca
   136d0:	3494      	adds	r4, #148	; 0x94
   136d2:	801a      	strh	r2, [r3, #0]
   136d4:	7823      	ldrb	r3, [r4, #0]
   136d6:	3210      	adds	r2, #16
   136d8:	4393      	bics	r3, r2
   136da:	7023      	strb	r3, [r4, #0]
   136dc:	210b      	movs	r1, #11
   136de:	e748      	b.n	13572 <LORAWAN_SetAttr+0x116>
   136e0:	466a      	mov	r2, sp
   136e2:	780b      	ldrb	r3, [r1, #0]
   136e4:	7013      	strb	r3, [r2, #0]
   136e6:	0022      	movs	r2, r4
   136e8:	32f3      	adds	r2, #243	; 0xf3
   136ea:	7812      	ldrb	r2, [r2, #0]
   136ec:	429a      	cmp	r2, r3
   136ee:	d900      	bls.n	136f2 <LORAWAN_SetAttr+0x296>
   136f0:	e739      	b.n	13566 <LORAWAN_SetAttr+0x10a>
   136f2:	0022      	movs	r2, r4
   136f4:	32f4      	adds	r2, #244	; 0xf4
   136f6:	7812      	ldrb	r2, [r2, #0]
   136f8:	429a      	cmp	r2, r3
   136fa:	d200      	bcs.n	136fe <LORAWAN_SetAttr+0x2a2>
   136fc:	e733      	b.n	13566 <LORAWAN_SetAttr+0x10a>
   136fe:	4669      	mov	r1, sp
   13700:	2010      	movs	r0, #16
   13702:	4b18      	ldr	r3, [pc, #96]	; (13764 <LORAWAN_SetAttr+0x308>)
   13704:	4798      	blx	r3
   13706:	0006      	movs	r6, r0
   13708:	2808      	cmp	r0, #8
   1370a:	d000      	beq.n	1370e <LORAWAN_SetAttr+0x2b2>
   1370c:	e72b      	b.n	13566 <LORAWAN_SetAttr+0x10a>
   1370e:	466b      	mov	r3, sp
   13710:	210c      	movs	r1, #12
   13712:	2001      	movs	r0, #1
   13714:	781b      	ldrb	r3, [r3, #0]
   13716:	34e7      	adds	r4, #231	; 0xe7
   13718:	7023      	strb	r3, [r4, #0]
   1371a:	4b0f      	ldr	r3, [pc, #60]	; (13758 <LORAWAN_SetAttr+0x2fc>)
   1371c:	4798      	blx	r3
   1371e:	e7c7      	b.n	136b0 <LORAWAN_SetAttr+0x254>
   13720:	466a      	mov	r2, sp
   13722:	780b      	ldrb	r3, [r1, #0]
   13724:	201d      	movs	r0, #29
   13726:	7013      	strb	r3, [r2, #0]
   13728:	4669      	mov	r1, sp
   1372a:	4b0e      	ldr	r3, [pc, #56]	; (13764 <LORAWAN_SetAttr+0x308>)
   1372c:	4798      	blx	r3
   1372e:	0006      	movs	r6, r0
   13730:	2808      	cmp	r0, #8
   13732:	d000      	beq.n	13736 <LORAWAN_SetAttr+0x2da>
   13734:	e717      	b.n	13566 <LORAWAN_SetAttr+0x10a>
   13736:	466b      	mov	r3, sp
   13738:	781b      	ldrb	r3, [r3, #0]
   1373a:	34e9      	adds	r4, #233	; 0xe9
   1373c:	7023      	strb	r3, [r4, #0]
   1373e:	210a      	movs	r1, #10
   13740:	2000      	movs	r0, #0
   13742:	e7ea      	b.n	1371a <LORAWAN_SetAttr+0x2be>
   13744:	780b      	ldrb	r3, [r1, #0]
   13746:	2103      	movs	r1, #3
   13748:	34ff      	adds	r4, #255	; 0xff
   1374a:	7063      	strb	r3, [r4, #1]
   1374c:	2000      	movs	r0, #0
   1374e:	e710      	b.n	13572 <LORAWAN_SetAttr+0x116>
   13750:	20003a6c 	.word	0x20003a6c
   13754:	0001786b 	.word	0x0001786b
   13758:	000098a5 	.word	0x000098a5
   1375c:	0000f3d9 	.word	0x0000f3d9
   13760:	0000022d 	.word	0x0000022d
   13764:	0000e061 	.word	0x0000e061
   13768:	680b      	ldr	r3, [r1, #0]
   1376a:	260a      	movs	r6, #10
   1376c:	1c5a      	adds	r2, r3, #1
   1376e:	d09f      	beq.n	136b0 <LORAWAN_SetAttr+0x254>
   13770:	2115      	movs	r1, #21
   13772:	2000      	movs	r0, #0
   13774:	3488      	adds	r4, #136	; 0x88
   13776:	6023      	str	r3, [r4, #0]
   13778:	4b7f      	ldr	r3, [pc, #508]	; (13978 <LORAWAN_SetAttr+0x51c>)
   1377a:	4798      	blx	r3
   1377c:	e72c      	b.n	135d8 <LORAWAN_SetAttr+0x17c>
   1377e:	680b      	ldr	r3, [r1, #0]
   13780:	260a      	movs	r6, #10
   13782:	1c5a      	adds	r2, r3, #1
   13784:	d100      	bne.n	13788 <LORAWAN_SetAttr+0x32c>
   13786:	e793      	b.n	136b0 <LORAWAN_SetAttr+0x254>
   13788:	0031      	movs	r1, r6
   1378a:	348c      	adds	r4, #140	; 0x8c
   1378c:	6023      	str	r3, [r4, #0]
   1378e:	2001      	movs	r0, #1
   13790:	e7f2      	b.n	13778 <LORAWAN_SetAttr+0x31c>
   13792:	0026      	movs	r6, r4
   13794:	880b      	ldrh	r3, [r1, #0]
   13796:	36d0      	adds	r6, #208	; 0xd0
   13798:	210c      	movs	r1, #12
   1379a:	2000      	movs	r0, #0
   1379c:	4d76      	ldr	r5, [pc, #472]	; (13978 <LORAWAN_SetAttr+0x51c>)
   1379e:	8033      	strh	r3, [r6, #0]
   137a0:	47a8      	blx	r5
   137a2:	22fa      	movs	r2, #250	; 0xfa
   137a4:	8833      	ldrh	r3, [r6, #0]
   137a6:	0092      	lsls	r2, r2, #2
   137a8:	189b      	adds	r3, r3, r2
   137aa:	34d2      	adds	r4, #210	; 0xd2
   137ac:	8023      	strh	r3, [r4, #0]
   137ae:	210d      	movs	r1, #13
   137b0:	2000      	movs	r0, #0
   137b2:	e745      	b.n	13640 <LORAWAN_SetAttr+0x1e4>
   137b4:	780b      	ldrb	r3, [r1, #0]
   137b6:	260a      	movs	r6, #10
   137b8:	2b0f      	cmp	r3, #15
   137ba:	d900      	bls.n	137be <LORAWAN_SetAttr+0x362>
   137bc:	e778      	b.n	136b0 <LORAWAN_SetAttr+0x254>
   137be:	3498      	adds	r4, #152	; 0x98
   137c0:	7023      	strb	r3, [r4, #0]
   137c2:	e709      	b.n	135d8 <LORAWAN_SetAttr+0x17c>
   137c4:	880b      	ldrh	r3, [r1, #0]
   137c6:	34d4      	adds	r4, #212	; 0xd4
   137c8:	8023      	strh	r3, [r4, #0]
   137ca:	210e      	movs	r1, #14
   137cc:	e7be      	b.n	1374c <LORAWAN_SetAttr+0x2f0>
   137ce:	880b      	ldrh	r3, [r1, #0]
   137d0:	34d6      	adds	r4, #214	; 0xd6
   137d2:	8023      	strh	r3, [r4, #0]
   137d4:	210f      	movs	r1, #15
   137d6:	e7b9      	b.n	1374c <LORAWAN_SetAttr+0x2f0>
   137d8:	780b      	ldrb	r3, [r1, #0]
   137da:	34dc      	adds	r4, #220	; 0xdc
   137dc:	7023      	strb	r3, [r4, #0]
   137de:	2111      	movs	r1, #17
   137e0:	e7b4      	b.n	1374c <LORAWAN_SetAttr+0x2f0>
   137e2:	780b      	ldrb	r3, [r1, #0]
   137e4:	34dd      	adds	r4, #221	; 0xdd
   137e6:	7023      	strb	r3, [r4, #0]
   137e8:	2112      	movs	r1, #18
   137ea:	e7af      	b.n	1374c <LORAWAN_SetAttr+0x2f0>
   137ec:	880b      	ldrh	r3, [r1, #0]
   137ee:	34da      	adds	r4, #218	; 0xda
   137f0:	8023      	strh	r3, [r4, #0]
   137f2:	2110      	movs	r1, #16
   137f4:	e7aa      	b.n	1374c <LORAWAN_SetAttr+0x2f0>
   137f6:	780b      	ldrb	r3, [r1, #0]
   137f8:	34e2      	adds	r4, #226	; 0xe2
   137fa:	7023      	strb	r3, [r4, #0]
   137fc:	2114      	movs	r1, #20
   137fe:	e7a5      	b.n	1374c <LORAWAN_SetAttr+0x2f0>
   13800:	780b      	ldrb	r3, [r1, #0]
   13802:	34e1      	adds	r4, #225	; 0xe1
   13804:	7023      	strb	r3, [r4, #0]
   13806:	e69b      	b.n	13540 <LORAWAN_SetAttr+0xe4>
   13808:	780b      	ldrb	r3, [r1, #0]
   1380a:	34e8      	adds	r4, #232	; 0xe8
   1380c:	e7fa      	b.n	13804 <LORAWAN_SetAttr+0x3a8>
   1380e:	2001      	movs	r0, #1
   13810:	780b      	ldrb	r3, [r1, #0]
   13812:	2110      	movs	r1, #16
   13814:	3484      	adds	r4, #132	; 0x84
   13816:	4003      	ands	r3, r0
   13818:	011a      	lsls	r2, r3, #4
   1381a:	7823      	ldrb	r3, [r4, #0]
   1381c:	438b      	bics	r3, r1
   1381e:	4313      	orrs	r3, r2
   13820:	7023      	strb	r3, [r4, #0]
   13822:	3905      	subs	r1, #5
   13824:	e6a5      	b.n	13572 <LORAWAN_SetAttr+0x116>
   13826:	7909      	ldrb	r1, [r1, #4]
   13828:	7828      	ldrb	r0, [r5, #0]
   1382a:	4b54      	ldr	r3, [pc, #336]	; (1397c <LORAWAN_SetAttr+0x520>)
   1382c:	4798      	blx	r3
   1382e:	0006      	movs	r6, r0
   13830:	e73e      	b.n	136b0 <LORAWAN_SetAttr+0x254>
   13832:	7909      	ldrb	r1, [r1, #4]
   13834:	7828      	ldrb	r0, [r5, #0]
   13836:	4b52      	ldr	r3, [pc, #328]	; (13980 <LORAWAN_SetAttr+0x524>)
   13838:	e7f8      	b.n	1382c <LORAWAN_SetAttr+0x3d0>
   1383a:	7808      	ldrb	r0, [r1, #0]
   1383c:	4b51      	ldr	r3, [pc, #324]	; (13984 <LORAWAN_SetAttr+0x528>)
   1383e:	6849      	ldr	r1, [r1, #4]
   13840:	4798      	blx	r3
   13842:	e7f4      	b.n	1382e <LORAWAN_SetAttr+0x3d2>
   13844:	7909      	ldrb	r1, [r1, #4]
   13846:	6828      	ldr	r0, [r5, #0]
   13848:	4b4f      	ldr	r3, [pc, #316]	; (13988 <LORAWAN_SetAttr+0x52c>)
   1384a:	4798      	blx	r3
   1384c:	e7ef      	b.n	1382e <LORAWAN_SetAttr+0x3d2>
   1384e:	786b      	ldrb	r3, [r5, #1]
   13850:	7828      	ldrb	r0, [r5, #0]
   13852:	021b      	lsls	r3, r3, #8
   13854:	4303      	orrs	r3, r0
   13856:	78a8      	ldrb	r0, [r5, #2]
   13858:	7909      	ldrb	r1, [r1, #4]
   1385a:	0400      	lsls	r0, r0, #16
   1385c:	4303      	orrs	r3, r0
   1385e:	78e8      	ldrb	r0, [r5, #3]
   13860:	0600      	lsls	r0, r0, #24
   13862:	4318      	orrs	r0, r3
   13864:	4b49      	ldr	r3, [pc, #292]	; (1398c <LORAWAN_SetAttr+0x530>)
   13866:	e7f0      	b.n	1384a <LORAWAN_SetAttr+0x3ee>
   13868:	7808      	ldrb	r0, [r1, #0]
   1386a:	4b49      	ldr	r3, [pc, #292]	; (13990 <LORAWAN_SetAttr+0x534>)
   1386c:	4798      	blx	r3
   1386e:	e7de      	b.n	1382e <LORAWAN_SetAttr+0x3d2>
   13870:	8808      	ldrh	r0, [r1, #0]
   13872:	4b48      	ldr	r3, [pc, #288]	; (13994 <LORAWAN_SetAttr+0x538>)
   13874:	4798      	blx	r3
   13876:	e663      	b.n	13540 <LORAWAN_SetAttr+0xe4>
   13878:	4b47      	ldr	r3, [pc, #284]	; (13998 <LORAWAN_SetAttr+0x53c>)
   1387a:	6019      	str	r1, [r3, #0]
   1387c:	e673      	b.n	13566 <LORAWAN_SetAttr+0x10a>
   1387e:	7809      	ldrb	r1, [r1, #0]
   13880:	7868      	ldrb	r0, [r5, #1]
   13882:	4b46      	ldr	r3, [pc, #280]	; (1399c <LORAWAN_SetAttr+0x540>)
   13884:	4798      	blx	r3
   13886:	e7d2      	b.n	1382e <LORAWAN_SetAttr+0x3d2>
   13888:	7809      	ldrb	r1, [r1, #0]
   1388a:	4b45      	ldr	r3, [pc, #276]	; (139a0 <LORAWAN_SetAttr+0x544>)
   1388c:	1c68      	adds	r0, r5, #1
   1388e:	4798      	blx	r3
   13890:	e7cd      	b.n	1382e <LORAWAN_SetAttr+0x3d2>
   13892:	7809      	ldrb	r1, [r1, #0]
   13894:	1c68      	adds	r0, r5, #1
   13896:	4b43      	ldr	r3, [pc, #268]	; (139a4 <LORAWAN_SetAttr+0x548>)
   13898:	e7f9      	b.n	1388e <LORAWAN_SetAttr+0x432>
   1389a:	7809      	ldrb	r1, [r1, #0]
   1389c:	6868      	ldr	r0, [r5, #4]
   1389e:	4b42      	ldr	r3, [pc, #264]	; (139a8 <LORAWAN_SetAttr+0x54c>)
   138a0:	e7f5      	b.n	1388e <LORAWAN_SetAttr+0x432>
   138a2:	7809      	ldrb	r1, [r1, #0]
   138a4:	6868      	ldr	r0, [r5, #4]
   138a6:	4b41      	ldr	r3, [pc, #260]	; (139ac <LORAWAN_SetAttr+0x550>)
   138a8:	e7f1      	b.n	1388e <LORAWAN_SetAttr+0x432>
   138aa:	7809      	ldrb	r1, [r1, #0]
   138ac:	6868      	ldr	r0, [r5, #4]
   138ae:	4b40      	ldr	r3, [pc, #256]	; (139b0 <LORAWAN_SetAttr+0x554>)
   138b0:	e7ed      	b.n	1388e <LORAWAN_SetAttr+0x432>
   138b2:	7809      	ldrb	r1, [r1, #0]
   138b4:	6868      	ldr	r0, [r5, #4]
   138b6:	4b3f      	ldr	r3, [pc, #252]	; (139b4 <LORAWAN_SetAttr+0x558>)
   138b8:	e7e9      	b.n	1388e <LORAWAN_SetAttr+0x432>
   138ba:	7809      	ldrb	r1, [r1, #0]
   138bc:	7868      	ldrb	r0, [r5, #1]
   138be:	4b3e      	ldr	r3, [pc, #248]	; (139b8 <LORAWAN_SetAttr+0x55c>)
   138c0:	e7e0      	b.n	13884 <LORAWAN_SetAttr+0x428>
   138c2:	7809      	ldrb	r1, [r1, #0]
   138c4:	7868      	ldrb	r0, [r5, #1]
   138c6:	4b3d      	ldr	r3, [pc, #244]	; (139bc <LORAWAN_SetAttr+0x560>)
   138c8:	e7dc      	b.n	13884 <LORAWAN_SetAttr+0x428>
   138ca:	2300      	movs	r3, #0
   138cc:	466a      	mov	r2, sp
   138ce:	7809      	ldrb	r1, [r1, #0]
   138d0:	7013      	strb	r3, [r2, #0]
   138d2:	4299      	cmp	r1, r3
   138d4:	d014      	beq.n	13900 <LORAWAN_SetAttr+0x4a4>
   138d6:	0022      	movs	r2, r4
   138d8:	2102      	movs	r1, #2
   138da:	32ff      	adds	r2, #255	; 0xff
   138dc:	7f53      	ldrb	r3, [r2, #29]
   138de:	420b      	tst	r3, r1
   138e0:	d001      	beq.n	138e6 <LORAWAN_SetAttr+0x48a>
   138e2:	438b      	bics	r3, r1
   138e4:	7753      	strb	r3, [r2, #29]
   138e6:	2220      	movs	r2, #32
   138e8:	34ff      	adds	r4, #255	; 0xff
   138ea:	7f63      	ldrb	r3, [r4, #29]
   138ec:	4213      	tst	r3, r2
   138ee:	d100      	bne.n	138f2 <LORAWAN_SetAttr+0x496>
   138f0:	e626      	b.n	13540 <LORAWAN_SetAttr+0xe4>
   138f2:	4393      	bics	r3, r2
   138f4:	7763      	strb	r3, [r4, #29]
   138f6:	4669      	mov	r1, sp
   138f8:	4b31      	ldr	r3, [pc, #196]	; (139c0 <LORAWAN_SetAttr+0x564>)
   138fa:	2038      	movs	r0, #56	; 0x38
   138fc:	4798      	blx	r3
   138fe:	e61f      	b.n	13540 <LORAWAN_SetAttr+0xe4>
   13900:	4a30      	ldr	r2, [pc, #192]	; (139c4 <LORAWAN_SetAttr+0x568>)
   13902:	4b31      	ldr	r3, [pc, #196]	; (139c8 <LORAWAN_SetAttr+0x56c>)
   13904:	200e      	movs	r0, #14
   13906:	4798      	blx	r3
   13908:	e61a      	b.n	13540 <LORAWAN_SetAttr+0xe4>
   1390a:	466b      	mov	r3, sp
   1390c:	780a      	ldrb	r2, [r1, #0]
   1390e:	34ff      	adds	r4, #255	; 0xff
   13910:	701a      	strb	r2, [r3, #0]
   13912:	2320      	movs	r3, #32
   13914:	2a00      	cmp	r2, #0
   13916:	d007      	beq.n	13928 <LORAWAN_SetAttr+0x4cc>
   13918:	7f62      	ldrb	r2, [r4, #29]
   1391a:	4313      	orrs	r3, r2
   1391c:	7763      	strb	r3, [r4, #29]
   1391e:	4669      	mov	r1, sp
   13920:	4b27      	ldr	r3, [pc, #156]	; (139c0 <LORAWAN_SetAttr+0x564>)
   13922:	2038      	movs	r0, #56	; 0x38
   13924:	4798      	blx	r3
   13926:	e782      	b.n	1382e <LORAWAN_SetAttr+0x3d2>
   13928:	7f62      	ldrb	r2, [r4, #29]
   1392a:	260a      	movs	r6, #10
   1392c:	421a      	tst	r2, r3
   1392e:	d100      	bne.n	13932 <LORAWAN_SetAttr+0x4d6>
   13930:	e6be      	b.n	136b0 <LORAWAN_SetAttr+0x254>
   13932:	439a      	bics	r2, r3
   13934:	7762      	strb	r2, [r4, #29]
   13936:	e7f2      	b.n	1391e <LORAWAN_SetAttr+0x4c2>
   13938:	780b      	ldrb	r3, [r1, #0]
   1393a:	260a      	movs	r6, #10
   1393c:	2b08      	cmp	r3, #8
   1393e:	d900      	bls.n	13942 <LORAWAN_SetAttr+0x4e6>
   13940:	e6b6      	b.n	136b0 <LORAWAN_SetAttr+0x254>
   13942:	228b      	movs	r2, #139	; 0x8b
   13944:	0092      	lsls	r2, r2, #2
   13946:	54a3      	strb	r3, [r4, r2]
   13948:	210d      	movs	r1, #13
   1394a:	e720      	b.n	1378e <LORAWAN_SetAttr+0x332>
   1394c:	780a      	ldrb	r2, [r1, #0]
   1394e:	4b1f      	ldr	r3, [pc, #124]	; (139cc <LORAWAN_SetAttr+0x570>)
   13950:	54e2      	strb	r2, [r4, r3]
   13952:	e5f5      	b.n	13540 <LORAWAN_SetAttr+0xe4>
   13954:	4b1e      	ldr	r3, [pc, #120]	; (139d0 <LORAWAN_SetAttr+0x574>)
   13956:	4798      	blx	r3
   13958:	e769      	b.n	1382e <LORAWAN_SetAttr+0x3d2>
   1395a:	4b1e      	ldr	r3, [pc, #120]	; (139d4 <LORAWAN_SetAttr+0x578>)
   1395c:	e7fb      	b.n	13956 <LORAWAN_SetAttr+0x4fa>
   1395e:	780a      	ldrb	r2, [r1, #0]
   13960:	2302      	movs	r3, #2
   13962:	34ff      	adds	r4, #255	; 0xff
   13964:	2a00      	cmp	r2, #0
   13966:	d003      	beq.n	13970 <LORAWAN_SetAttr+0x514>
   13968:	7f62      	ldrb	r2, [r4, #29]
   1396a:	4313      	orrs	r3, r2
   1396c:	7763      	strb	r3, [r4, #29]
   1396e:	e5e7      	b.n	13540 <LORAWAN_SetAttr+0xe4>
   13970:	7f62      	ldrb	r2, [r4, #29]
   13972:	439a      	bics	r2, r3
   13974:	7762      	strb	r2, [r4, #29]
   13976:	e5e3      	b.n	13540 <LORAWAN_SetAttr+0xe4>
   13978:	000098a5 	.word	0x000098a5
   1397c:	000128e5 	.word	0x000128e5
   13980:	00012875 	.word	0x00012875
   13984:	0001209d 	.word	0x0001209d
   13988:	00012015 	.word	0x00012015
   1398c:	00012051 	.word	0x00012051
   13990:	000133dd 	.word	0x000133dd
   13994:	000112b1 	.word	0x000112b1
   13998:	20003dc4 	.word	0x20003dc4
   1399c:	00013ef1 	.word	0x00013ef1
   139a0:	00014151 	.word	0x00014151
   139a4:	0001419d 	.word	0x0001419d
   139a8:	00014109 	.word	0x00014109
   139ac:	000141e9 	.word	0x000141e9
   139b0:	00014209 	.word	0x00014209
   139b4:	00014225 	.word	0x00014225
   139b8:	00014269 	.word	0x00014269
   139bc:	000142a5 	.word	0x000142a5
   139c0:	0000e07d 	.word	0x0000e07d
   139c4:	20003b88 	.word	0x20003b88
   139c8:	0000e045 	.word	0x0000e045
   139cc:	0000022d 	.word	0x0000022d
   139d0:	0001134d 	.word	0x0001134d
   139d4:	00011375 	.word	0x00011375

000139d8 <AssemblePacket>:
   139d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   139da:	2710      	movs	r7, #16
   139dc:	b08f      	sub	sp, #60	; 0x3c
   139de:	9308      	str	r3, [sp, #32]
   139e0:	ab0d      	add	r3, sp, #52	; 0x34
   139e2:	801f      	strh	r7, [r3, #0]
   139e4:	231e      	movs	r3, #30
   139e6:	920a      	str	r2, [sp, #40]	; 0x28
   139e8:	aa06      	add	r2, sp, #24
   139ea:	189b      	adds	r3, r3, r2
   139ec:	2500      	movs	r5, #0
   139ee:	2210      	movs	r2, #16
   139f0:	ac0c      	add	r4, sp, #48	; 0x30
   139f2:	9006      	str	r0, [sp, #24]
   139f4:	910b      	str	r1, [sp, #44]	; 0x2c
   139f6:	32ff      	adds	r2, #255	; 0xff
   139f8:	0029      	movs	r1, r5
   139fa:	4ed1      	ldr	r6, [pc, #836]	; (13d40 <AssemblePacket+0x368>)
   139fc:	7025      	strb	r5, [r4, #0]
   139fe:	48d1      	ldr	r0, [pc, #836]	; (13d44 <AssemblePacket+0x36c>)
   13a00:	801d      	strh	r5, [r3, #0]
   13a02:	47b0      	blx	r6
   13a04:	003a      	movs	r2, r7
   13a06:	0029      	movs	r1, r5
   13a08:	48cf      	ldr	r0, [pc, #828]	; (13d48 <AssemblePacket+0x370>)
   13a0a:	47b0      	blx	r6
   13a0c:	221f      	movs	r2, #31
   13a0e:	7823      	ldrb	r3, [r4, #0]
   13a10:	9906      	ldr	r1, [sp, #24]
   13a12:	4013      	ands	r3, r2
   13a14:	42a9      	cmp	r1, r5
   13a16:	d100      	bne.n	13a1a <AssemblePacket+0x42>
   13a18:	e0dc      	b.n	13bd4 <AssemblePacket+0x1fc>
   13a1a:	3a9f      	subs	r2, #159	; 0x9f
   13a1c:	4313      	orrs	r3, r2
   13a1e:	7023      	strb	r3, [r4, #0]
   13a20:	4bca      	ldr	r3, [pc, #808]	; (13d4c <AssemblePacket+0x374>)
   13a22:	3281      	adds	r2, #129	; 0x81
   13a24:	3394      	adds	r3, #148	; 0x94
   13a26:	7819      	ldrb	r1, [r3, #0]
   13a28:	430a      	orrs	r2, r1
   13a2a:	701a      	strb	r2, [r3, #0]
   13a2c:	22e0      	movs	r2, #224	; 0xe0
   13a2e:	7823      	ldrb	r3, [r4, #0]
   13a30:	48c4      	ldr	r0, [pc, #784]	; (13d44 <AssemblePacket+0x36c>)
   13a32:	4013      	ands	r3, r2
   13a34:	7023      	strb	r3, [r4, #0]
   13a36:	4cc5      	ldr	r4, [pc, #788]	; (13d4c <AssemblePacket+0x374>)
   13a38:	7403      	strb	r3, [r0, #16]
   13a3a:	3adc      	subs	r2, #220	; 0xdc
   13a3c:	4bc4      	ldr	r3, [pc, #784]	; (13d50 <AssemblePacket+0x378>)
   13a3e:	3011      	adds	r0, #17
   13a40:	1c61      	adds	r1, r4, #1
   13a42:	4798      	blx	r3
   13a44:	2215      	movs	r2, #21
   13a46:	ab0d      	add	r3, sp, #52	; 0x34
   13a48:	0025      	movs	r5, r4
   13a4a:	801a      	strh	r2, [r3, #0]
   13a4c:	2600      	movs	r6, #0
   13a4e:	466b      	mov	r3, sp
   13a50:	3584      	adds	r5, #132	; 0x84
   13a52:	761e      	strb	r6, [r3, #24]
   13a54:	782b      	ldrb	r3, [r5, #0]
   13a56:	069b      	lsls	r3, r3, #26
   13a58:	d400      	bmi.n	13a5c <AssemblePacket+0x84>
   13a5a:	e130      	b.n	13cbe <AssemblePacket+0x2e6>
   13a5c:	0027      	movs	r7, r4
   13a5e:	4bbd      	ldr	r3, [pc, #756]	; (13d54 <AssemblePacket+0x37c>)
   13a60:	37f3      	adds	r7, #243	; 0xf3
   13a62:	781a      	ldrb	r2, [r3, #0]
   13a64:	783b      	ldrb	r3, [r7, #0]
   13a66:	429a      	cmp	r2, r3
   13a68:	d31e      	bcc.n	13aa8 <AssemblePacket+0xd0>
   13a6a:	2180      	movs	r1, #128	; 0x80
   13a6c:	466b      	mov	r3, sp
   13a6e:	0022      	movs	r2, r4
   13a70:	4249      	negs	r1, r1
   13a72:	32ca      	adds	r2, #202	; 0xca
   13a74:	7619      	strb	r1, [r3, #24]
   13a76:	8813      	ldrh	r3, [r2, #0]
   13a78:	3301      	adds	r3, #1
   13a7a:	b29b      	uxth	r3, r3
   13a7c:	8013      	strh	r3, [r2, #0]
   13a7e:	0022      	movs	r2, r4
   13a80:	32dc      	adds	r2, #220	; 0xdc
   13a82:	7812      	ldrb	r2, [r2, #0]
   13a84:	4293      	cmp	r3, r2
   13a86:	d30f      	bcc.n	13aa8 <AssemblePacket+0xd0>
   13a88:	2040      	movs	r0, #64	; 0x40
   13a8a:	4308      	orrs	r0, r1
   13a8c:	9006      	str	r0, [sp, #24]
   13a8e:	0020      	movs	r0, r4
   13a90:	3094      	adds	r0, #148	; 0x94
   13a92:	7801      	ldrb	r1, [r0, #0]
   13a94:	4684      	mov	ip, r0
   13a96:	2010      	movs	r0, #16
   13a98:	4301      	orrs	r1, r0
   13a9a:	4660      	mov	r0, ip
   13a9c:	7001      	strb	r1, [r0, #0]
   13a9e:	4293      	cmp	r3, r2
   13aa0:	d000      	beq.n	13aa4 <AssemblePacket+0xcc>
   13aa2:	e09b      	b.n	13bdc <AssemblePacket+0x204>
   13aa4:	34f6      	adds	r4, #246	; 0xf6
   13aa6:	7026      	strb	r6, [r4, #0]
   13aa8:	4da8      	ldr	r5, [pc, #672]	; (13d4c <AssemblePacket+0x374>)
   13aaa:	2102      	movs	r1, #2
   13aac:	002a      	movs	r2, r5
   13aae:	3294      	adds	r2, #148	; 0x94
   13ab0:	7813      	ldrb	r3, [r2, #0]
   13ab2:	420b      	tst	r3, r1
   13ab4:	d005      	beq.n	13ac2 <AssemblePacket+0xea>
   13ab6:	2020      	movs	r0, #32
   13ab8:	9c06      	ldr	r4, [sp, #24]
   13aba:	438b      	bics	r3, r1
   13abc:	4304      	orrs	r4, r0
   13abe:	9406      	str	r4, [sp, #24]
   13ac0:	7013      	strb	r3, [r2, #0]
   13ac2:	2310      	movs	r3, #16
   13ac4:	9c06      	ldr	r4, [sp, #24]
   13ac6:	439c      	bics	r4, r3
   13ac8:	002b      	movs	r3, r5
   13aca:	33e0      	adds	r3, #224	; 0xe0
   13acc:	781b      	ldrb	r3, [r3, #0]
   13ace:	9309      	str	r3, [sp, #36]	; 0x24
   13ad0:	2b00      	cmp	r3, #0
   13ad2:	d003      	beq.n	13adc <AssemblePacket+0x104>
   13ad4:	9b08      	ldr	r3, [sp, #32]
   13ad6:	2b00      	cmp	r3, #0
   13ad8:	d000      	beq.n	13adc <AssemblePacket+0x104>
   13ada:	e0f6      	b.n	13cca <AssemblePacket+0x2f2>
   13adc:	230f      	movs	r3, #15
   13ade:	439c      	bics	r4, r3
   13ae0:	466b      	mov	r3, sp
   13ae2:	9406      	str	r4, [sp, #24]
   13ae4:	ac0d      	add	r4, sp, #52	; 0x34
   13ae6:	8826      	ldrh	r6, [r4, #0]
   13ae8:	4f96      	ldr	r7, [pc, #600]	; (13d44 <AssemblePacket+0x36c>)
   13aea:	7e1b      	ldrb	r3, [r3, #24]
   13aec:	1c70      	adds	r0, r6, #1
   13aee:	b280      	uxth	r0, r0
   13af0:	55bb      	strb	r3, [r7, r6]
   13af2:	19c0      	adds	r0, r0, r7
   13af4:	4b96      	ldr	r3, [pc, #600]	; (13d50 <AssemblePacket+0x378>)
   13af6:	2202      	movs	r2, #2
   13af8:	4997      	ldr	r1, [pc, #604]	; (13d58 <AssemblePacket+0x380>)
   13afa:	4798      	blx	r3
   13afc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13afe:	3603      	adds	r6, #3
   13b00:	8026      	strh	r6, [r4, #0]
   13b02:	2b00      	cmp	r3, #0
   13b04:	d100      	bne.n	13b08 <AssemblePacket+0x130>
   13b06:	e0e7      	b.n	13cd8 <AssemblePacket+0x300>
   13b08:	9b08      	ldr	r3, [sp, #32]
   13b0a:	2b00      	cmp	r3, #0
   13b0c:	d004      	beq.n	13b18 <AssemblePacket+0x140>
   13b0e:	2201      	movs	r2, #1
   13b10:	0021      	movs	r1, r4
   13b12:	0038      	movs	r0, r7
   13b14:	4b91      	ldr	r3, [pc, #580]	; (13d5c <AssemblePacket+0x384>)
   13b16:	4798      	blx	r3
   13b18:	466a      	mov	r2, sp
   13b1a:	212c      	movs	r1, #44	; 0x2c
   13b1c:	1852      	adds	r2, r2, r1
   13b1e:	8823      	ldrh	r3, [r4, #0]
   13b20:	7812      	ldrb	r2, [r2, #0]
   13b22:	1c5e      	adds	r6, r3, #1
   13b24:	54fa      	strb	r2, [r7, r3]
   13b26:	9b08      	ldr	r3, [sp, #32]
   13b28:	b2b6      	uxth	r6, r6
   13b2a:	8026      	strh	r6, [r4, #0]
   13b2c:	2b00      	cmp	r3, #0
   13b2e:	d100      	bne.n	13b32 <AssemblePacket+0x15a>
   13b30:	e0d6      	b.n	13ce0 <AssemblePacket+0x308>
   13b32:	001a      	movs	r2, r3
   13b34:	990a      	ldr	r1, [sp, #40]	; 0x28
   13b36:	4b86      	ldr	r3, [pc, #536]	; (13d50 <AssemblePacket+0x378>)
   13b38:	19b8      	adds	r0, r7, r6
   13b3a:	4798      	blx	r3
   13b3c:	2120      	movs	r1, #32
   13b3e:	466b      	mov	r3, sp
   13b40:	185b      	adds	r3, r3, r1
   13b42:	7819      	ldrb	r1, [r3, #0]
   13b44:	682b      	ldr	r3, [r5, #0]
   13b46:	002a      	movs	r2, r5
   13b48:	0a18      	lsrs	r0, r3, #8
   13b4a:	792b      	ldrb	r3, [r5, #4]
   13b4c:	3288      	adds	r2, #136	; 0x88
   13b4e:	061b      	lsls	r3, r3, #24
   13b50:	4303      	orrs	r3, r0
   13b52:	9304      	str	r3, [sp, #16]
   13b54:	2301      	movs	r3, #1
   13b56:	9301      	str	r3, [sp, #4]
   13b58:	4b81      	ldr	r3, [pc, #516]	; (13d60 <AssemblePacket+0x388>)
   13b5a:	9703      	str	r7, [sp, #12]
   13b5c:	9602      	str	r6, [sp, #8]
   13b5e:	9300      	str	r3, [sp, #0]
   13b60:	6813      	ldr	r3, [r2, #0]
   13b62:	980a      	ldr	r0, [sp, #40]	; 0x28
   13b64:	2200      	movs	r2, #0
   13b66:	4c7f      	ldr	r4, [pc, #508]	; (13d64 <AssemblePacket+0x38c>)
   13b68:	47a0      	blx	r4
   13b6a:	2800      	cmp	r0, #0
   13b6c:	d002      	beq.n	13b74 <AssemblePacket+0x19c>
   13b6e:	2020      	movs	r0, #32
   13b70:	4b7d      	ldr	r3, [pc, #500]	; (13d68 <AssemblePacket+0x390>)
   13b72:	4798      	blx	r3
   13b74:	aa0d      	add	r2, sp, #52	; 0x34
   13b76:	8813      	ldrh	r3, [r2, #0]
   13b78:	9908      	ldr	r1, [sp, #32]
   13b7a:	18cb      	adds	r3, r1, r3
   13b7c:	8013      	strh	r3, [r2, #0]
   13b7e:	4c73      	ldr	r4, [pc, #460]	; (13d4c <AssemblePacket+0x374>)
   13b80:	ae0d      	add	r6, sp, #52	; 0x34
   13b82:	0021      	movs	r1, r4
   13b84:	6823      	ldr	r3, [r4, #0]
   13b86:	8832      	ldrh	r2, [r6, #0]
   13b88:	0a18      	lsrs	r0, r3, #8
   13b8a:	7923      	ldrb	r3, [r4, #4]
   13b8c:	3a10      	subs	r2, #16
   13b8e:	061b      	lsls	r3, r3, #24
   13b90:	4303      	orrs	r3, r0
   13b92:	9300      	str	r3, [sp, #0]
   13b94:	3188      	adds	r1, #136	; 0x88
   13b96:	b2d2      	uxtb	r2, r2
   13b98:	2349      	movs	r3, #73	; 0x49
   13b9a:	6809      	ldr	r1, [r1, #0]
   13b9c:	2000      	movs	r0, #0
   13b9e:	4d73      	ldr	r5, [pc, #460]	; (13d6c <AssemblePacket+0x394>)
   13ba0:	47a8      	blx	r5
   13ba2:	4f68      	ldr	r7, [pc, #416]	; (13d44 <AssemblePacket+0x36c>)
   13ba4:	2210      	movs	r2, #16
   13ba6:	4968      	ldr	r1, [pc, #416]	; (13d48 <AssemblePacket+0x370>)
   13ba8:	0038      	movs	r0, r7
   13baa:	4b69      	ldr	r3, [pc, #420]	; (13d50 <AssemblePacket+0x378>)
   13bac:	4798      	blx	r3
   13bae:	8833      	ldrh	r3, [r6, #0]
   13bb0:	4a65      	ldr	r2, [pc, #404]	; (13d48 <AssemblePacket+0x370>)
   13bb2:	9300      	str	r3, [sp, #0]
   13bb4:	2102      	movs	r1, #2
   13bb6:	003b      	movs	r3, r7
   13bb8:	4d6d      	ldr	r5, [pc, #436]	; (13d70 <AssemblePacket+0x398>)
   13bba:	486e      	ldr	r0, [pc, #440]	; (13d74 <AssemblePacket+0x39c>)
   13bbc:	47a8      	blx	r5
   13bbe:	8836      	ldrh	r6, [r6, #0]
   13bc0:	2204      	movs	r2, #4
   13bc2:	19f0      	adds	r0, r6, r7
   13bc4:	4960      	ldr	r1, [pc, #384]	; (13d48 <AssemblePacket+0x370>)
   13bc6:	4b62      	ldr	r3, [pc, #392]	; (13d50 <AssemblePacket+0x378>)
   13bc8:	4798      	blx	r3
   13bca:	3e0c      	subs	r6, #12
   13bcc:	34ce      	adds	r4, #206	; 0xce
   13bce:	8026      	strh	r6, [r4, #0]
   13bd0:	b00f      	add	sp, #60	; 0x3c
   13bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13bd4:	2240      	movs	r2, #64	; 0x40
   13bd6:	4313      	orrs	r3, r2
   13bd8:	7023      	strb	r3, [r4, #0]
   13bda:	e727      	b.n	13a2c <AssemblePacket+0x54>
   13bdc:	4293      	cmp	r3, r2
   13bde:	d800      	bhi.n	13be2 <AssemblePacket+0x20a>
   13be0:	e762      	b.n	13aa8 <AssemblePacket+0xd0>
   13be2:	0022      	movs	r2, r4
   13be4:	0021      	movs	r1, r4
   13be6:	32f6      	adds	r2, #246	; 0xf6
   13be8:	7813      	ldrb	r3, [r2, #0]
   13bea:	31dd      	adds	r1, #221	; 0xdd
   13bec:	3301      	adds	r3, #1
   13bee:	b2db      	uxtb	r3, r3
   13bf0:	7013      	strb	r3, [r2, #0]
   13bf2:	7809      	ldrb	r1, [r1, #0]
   13bf4:	4299      	cmp	r1, r3
   13bf6:	d900      	bls.n	13bfa <AssemblePacket+0x222>
   13bf8:	e756      	b.n	13aa8 <AssemblePacket+0xd0>
   13bfa:	231a      	movs	r3, #26
   13bfc:	7016      	strb	r6, [r2, #0]
   13bfe:	aa06      	add	r2, sp, #24
   13c00:	189b      	adds	r3, r3, r2
   13c02:	001a      	movs	r2, r3
   13c04:	0031      	movs	r1, r6
   13c06:	4b5c      	ldr	r3, [pc, #368]	; (13d78 <AssemblePacket+0x3a0>)
   13c08:	203c      	movs	r0, #60	; 0x3c
   13c0a:	4798      	blx	r3
   13c0c:	4b5b      	ldr	r3, [pc, #364]	; (13d7c <AssemblePacket+0x3a4>)
   13c0e:	781a      	ldrb	r2, [r3, #0]
   13c10:	ab06      	add	r3, sp, #24
   13c12:	7e9b      	ldrb	r3, [r3, #26]
   13c14:	429a      	cmp	r2, r3
   13c16:	d00d      	beq.n	13c34 <AssemblePacket+0x25c>
   13c18:	34ff      	adds	r4, #255	; 0xff
   13c1a:	7820      	ldrb	r0, [r4, #0]
   13c1c:	4b58      	ldr	r3, [pc, #352]	; (13d80 <AssemblePacket+0x3a8>)
   13c1e:	4798      	blx	r3
   13c20:	0031      	movs	r1, r6
   13c22:	4a56      	ldr	r2, [pc, #344]	; (13d7c <AssemblePacket+0x3a4>)
   13c24:	4b54      	ldr	r3, [pc, #336]	; (13d78 <AssemblePacket+0x3a0>)
   13c26:	2035      	movs	r0, #53	; 0x35
   13c28:	4798      	blx	r3
   13c2a:	210a      	movs	r1, #10
   13c2c:	0030      	movs	r0, r6
   13c2e:	4b55      	ldr	r3, [pc, #340]	; (13d84 <AssemblePacket+0x3ac>)
   13c30:	4798      	blx	r3
   13c32:	e739      	b.n	13aa8 <AssemblePacket+0xd0>
   13c34:	4b47      	ldr	r3, [pc, #284]	; (13d54 <AssemblePacket+0x37c>)
   13c36:	783a      	ldrb	r2, [r7, #0]
   13c38:	781b      	ldrb	r3, [r3, #0]
   13c3a:	4293      	cmp	r3, r2
   13c3c:	d022      	beq.n	13c84 <AssemblePacket+0x2ac>
   13c3e:	d800      	bhi.n	13c42 <AssemblePacket+0x26a>
   13c40:	e732      	b.n	13aa8 <AssemblePacket+0xd0>
   13c42:	221b      	movs	r2, #27
   13c44:	003d      	movs	r5, r7
   13c46:	a906      	add	r1, sp, #24
   13c48:	3b01      	subs	r3, #1
   13c4a:	1852      	adds	r2, r2, r1
   13c4c:	7013      	strb	r3, [r2, #0]
   13c4e:	261b      	movs	r6, #27
   13c50:	ab06      	add	r3, sp, #24
   13c52:	18f6      	adds	r6, r6, r3
   13c54:	782a      	ldrb	r2, [r5, #0]
   13c56:	7833      	ldrb	r3, [r6, #0]
   13c58:	429a      	cmp	r2, r3
   13c5a:	d900      	bls.n	13c5e <AssemblePacket+0x286>
   13c5c:	e724      	b.n	13aa8 <AssemblePacket+0xd0>
   13c5e:	0031      	movs	r1, r6
   13c60:	2010      	movs	r0, #16
   13c62:	4f49      	ldr	r7, [pc, #292]	; (13d88 <AssemblePacket+0x3b0>)
   13c64:	47b8      	blx	r7
   13c66:	2808      	cmp	r0, #8
   13c68:	d000      	beq.n	13c6c <AssemblePacket+0x294>
   13c6a:	e71d      	b.n	13aa8 <AssemblePacket+0xd0>
   13c6c:	0031      	movs	r1, r6
   13c6e:	3009      	adds	r0, #9
   13c70:	47b8      	blx	r7
   13c72:	7833      	ldrb	r3, [r6, #0]
   13c74:	2808      	cmp	r0, #8
   13c76:	d061      	beq.n	13d3c <AssemblePacket+0x364>
   13c78:	782a      	ldrb	r2, [r5, #0]
   13c7a:	429a      	cmp	r2, r3
   13c7c:	d2e7      	bcs.n	13c4e <AssemblePacket+0x276>
   13c7e:	3b01      	subs	r3, #1
   13c80:	7033      	strb	r3, [r6, #0]
   13c82:	e7e4      	b.n	13c4e <AssemblePacket+0x276>
   13c84:	34ff      	adds	r4, #255	; 0xff
   13c86:	7820      	ldrb	r0, [r4, #0]
   13c88:	4b40      	ldr	r3, [pc, #256]	; (13d8c <AssemblePacket+0x3b4>)
   13c8a:	4798      	blx	r3
   13c8c:	231b      	movs	r3, #27
   13c8e:	aa06      	add	r2, sp, #24
   13c90:	189b      	adds	r3, r3, r2
   13c92:	0019      	movs	r1, r3
   13c94:	4c3e      	ldr	r4, [pc, #248]	; (13d90 <AssemblePacket+0x3b8>)
   13c96:	2013      	movs	r0, #19
   13c98:	47a0      	blx	r4
   13c9a:	231b      	movs	r3, #27
   13c9c:	aa06      	add	r2, sp, #24
   13c9e:	189b      	adds	r3, r3, r2
   13ca0:	0019      	movs	r1, r3
   13ca2:	2014      	movs	r0, #20
   13ca4:	47a0      	blx	r4
   13ca6:	2113      	movs	r1, #19
   13ca8:	0030      	movs	r0, r6
   13caa:	4c36      	ldr	r4, [pc, #216]	; (13d84 <AssemblePacket+0x3ac>)
   13cac:	47a0      	blx	r4
   13cae:	2210      	movs	r2, #16
   13cb0:	786b      	ldrb	r3, [r5, #1]
   13cb2:	210b      	movs	r1, #11
   13cb4:	4313      	orrs	r3, r2
   13cb6:	706b      	strb	r3, [r5, #1]
   13cb8:	2001      	movs	r0, #1
   13cba:	47a0      	blx	r4
   13cbc:	e6f4      	b.n	13aa8 <AssemblePacket+0xd0>
   13cbe:	2210      	movs	r2, #16
   13cc0:	3494      	adds	r4, #148	; 0x94
   13cc2:	7823      	ldrb	r3, [r4, #0]
   13cc4:	4393      	bics	r3, r2
   13cc6:	7023      	strb	r3, [r4, #0]
   13cc8:	e6ee      	b.n	13aa8 <AssemblePacket+0xd0>
   13cca:	4b32      	ldr	r3, [pc, #200]	; (13d94 <AssemblePacket+0x3bc>)
   13ccc:	4798      	blx	r3
   13cce:	230f      	movs	r3, #15
   13cd0:	4018      	ands	r0, r3
   13cd2:	439c      	bics	r4, r3
   13cd4:	4304      	orrs	r4, r0
   13cd6:	e703      	b.n	13ae0 <AssemblePacket+0x108>
   13cd8:	9b08      	ldr	r3, [sp, #32]
   13cda:	2b00      	cmp	r3, #0
   13cdc:	d000      	beq.n	13ce0 <AssemblePacket+0x308>
   13cde:	e71b      	b.n	13b18 <AssemblePacket+0x140>
   13ce0:	4d1a      	ldr	r5, [pc, #104]	; (13d4c <AssemblePacket+0x374>)
   13ce2:	002b      	movs	r3, r5
   13ce4:	33e0      	adds	r3, #224	; 0xe0
   13ce6:	781b      	ldrb	r3, [r3, #0]
   13ce8:	2b00      	cmp	r3, #0
   13cea:	d100      	bne.n	13cee <AssemblePacket+0x316>
   13cec:	e747      	b.n	13b7e <AssemblePacket+0x1a6>
   13cee:	261e      	movs	r6, #30
   13cf0:	ab06      	add	r3, sp, #24
   13cf2:	18f6      	adds	r6, r6, r3
   13cf4:	2200      	movs	r2, #0
   13cf6:	0031      	movs	r1, r6
   13cf8:	4827      	ldr	r0, [pc, #156]	; (13d98 <AssemblePacket+0x3c0>)
   13cfa:	4b18      	ldr	r3, [pc, #96]	; (13d5c <AssemblePacket+0x384>)
   13cfc:	4798      	blx	r3
   13cfe:	682b      	ldr	r3, [r5, #0]
   13d00:	7831      	ldrb	r1, [r6, #0]
   13d02:	0a18      	lsrs	r0, r3, #8
   13d04:	792b      	ldrb	r3, [r5, #4]
   13d06:	9703      	str	r7, [sp, #12]
   13d08:	061b      	lsls	r3, r3, #24
   13d0a:	4303      	orrs	r3, r0
   13d0c:	9304      	str	r3, [sp, #16]
   13d0e:	8823      	ldrh	r3, [r4, #0]
   13d10:	002a      	movs	r2, r5
   13d12:	9302      	str	r3, [sp, #8]
   13d14:	2302      	movs	r3, #2
   13d16:	9301      	str	r3, [sp, #4]
   13d18:	4b16      	ldr	r3, [pc, #88]	; (13d74 <AssemblePacket+0x39c>)
   13d1a:	3288      	adds	r2, #136	; 0x88
   13d1c:	9300      	str	r3, [sp, #0]
   13d1e:	6813      	ldr	r3, [r2, #0]
   13d20:	481d      	ldr	r0, [pc, #116]	; (13d98 <AssemblePacket+0x3c0>)
   13d22:	2200      	movs	r2, #0
   13d24:	4d0f      	ldr	r5, [pc, #60]	; (13d64 <AssemblePacket+0x38c>)
   13d26:	47a8      	blx	r5
   13d28:	2800      	cmp	r0, #0
   13d2a:	d002      	beq.n	13d32 <AssemblePacket+0x35a>
   13d2c:	2020      	movs	r0, #32
   13d2e:	4b0e      	ldr	r3, [pc, #56]	; (13d68 <AssemblePacket+0x390>)
   13d30:	4798      	blx	r3
   13d32:	8823      	ldrh	r3, [r4, #0]
   13d34:	8832      	ldrh	r2, [r6, #0]
   13d36:	189b      	adds	r3, r3, r2
   13d38:	8023      	strh	r3, [r4, #0]
   13d3a:	e720      	b.n	13b7e <AssemblePacket+0x1a6>
   13d3c:	34e7      	adds	r4, #231	; 0xe7
   13d3e:	e7c2      	b.n	13cc6 <AssemblePacket+0x2ee>
   13d40:	0001787d 	.word	0x0001787d
   13d44:	20003cb4 	.word	0x20003cb4
   13d48:	200020c5 	.word	0x200020c5
   13d4c:	20003a6c 	.word	0x20003a6c
   13d50:	0001786b 	.word	0x0001786b
   13d54:	20003b53 	.word	0x20003b53
   13d58:	20003af4 	.word	0x20003af4
   13d5c:	00010ce1 	.word	0x00010ce1
   13d60:	20003aa1 	.word	0x20003aa1
   13d64:	00011df5 	.word	0x00011df5
   13d68:	00011eb5 	.word	0x00011eb5
   13d6c:	0001100d 	.word	0x0001100d
   13d70:	00007341 	.word	0x00007341
   13d74:	20003a91 	.word	0x20003a91
   13d78:	0000e045 	.word	0x0000e045
   13d7c:	20003b55 	.word	0x20003b55
   13d80:	0000e099 	.word	0x0000e099
   13d84:	000098a5 	.word	0x000098a5
   13d88:	0000e061 	.word	0x0000e061
   13d8c:	0000e125 	.word	0x0000e125
   13d90:	0001345d 	.word	0x0001345d
   13d94:	00010c41 	.word	0x00010c41
   13d98:	20003830 	.word	0x20003830

00013d9c <LorawanClasscUlAckTimerCallback>:
   13d9c:	2102      	movs	r1, #2
   13d9e:	4b03      	ldr	r3, [pc, #12]	; (13dac <LorawanClasscUlAckTimerCallback+0x10>)
   13da0:	3394      	adds	r3, #148	; 0x94
   13da2:	781a      	ldrb	r2, [r3, #0]
   13da4:	438a      	bics	r2, r1
   13da6:	701a      	strb	r2, [r3, #0]
   13da8:	4770      	bx	lr
   13daa:	46c0      	nop			; (mov r8, r8)
   13dac:	20003a6c 	.word	0x20003a6c

00013db0 <LorawanClasscValidateSend>:
   13db0:	2388      	movs	r3, #136	; 0x88
   13db2:	b510      	push	{r4, lr}
   13db4:	4c0a      	ldr	r4, [pc, #40]	; (13de0 <LorawanClasscValidateSend+0x30>)
   13db6:	009b      	lsls	r3, r3, #2
   13db8:	5ce3      	ldrb	r3, [r4, r3]
   13dba:	2b00      	cmp	r3, #0
   13dbc:	d008      	beq.n	13dd0 <LorawanClasscValidateSend+0x20>
   13dbe:	220e      	movs	r2, #14
   13dc0:	3484      	adds	r4, #132	; 0x84
   13dc2:	7823      	ldrb	r3, [r4, #0]
   13dc4:	2008      	movs	r0, #8
   13dc6:	4013      	ands	r3, r2
   13dc8:	2b02      	cmp	r3, #2
   13dca:	d100      	bne.n	13dce <LorawanClasscValidateSend+0x1e>
   13dcc:	2011      	movs	r0, #17
   13dce:	bd10      	pop	{r4, pc}
   13dd0:	2394      	movs	r3, #148	; 0x94
   13dd2:	005b      	lsls	r3, r3, #1
   13dd4:	5ce0      	ldrb	r0, [r4, r3]
   13dd6:	4b03      	ldr	r3, [pc, #12]	; (13de4 <LorawanClasscValidateSend+0x34>)
   13dd8:	4798      	blx	r3
   13dda:	2800      	cmp	r0, #0
   13ddc:	d1ef      	bne.n	13dbe <LorawanClasscValidateSend+0xe>
   13dde:	e7f5      	b.n	13dcc <LorawanClasscValidateSend+0x1c>
   13de0:	20003a6c 	.word	0x20003a6c
   13de4:	0000e725 	.word	0x0000e725

00013de8 <LorawanClasscRxDone>:
   13de8:	221f      	movs	r2, #31
   13dea:	b573      	push	{r0, r1, r4, r5, r6, lr}
   13dec:	7803      	ldrb	r3, [r0, #0]
   13dee:	4c1c      	ldr	r4, [pc, #112]	; (13e60 <LorawanClasscRxDone+0x78>)
   13df0:	4393      	bics	r3, r2
   13df2:	2ba0      	cmp	r3, #160	; 0xa0
   13df4:	d10c      	bne.n	13e10 <LorawanClasscRxDone+0x28>
   13df6:	2694      	movs	r6, #148	; 0x94
   13df8:	0076      	lsls	r6, r6, #1
   13dfa:	5da0      	ldrb	r0, [r4, r6]
   13dfc:	4b19      	ldr	r3, [pc, #100]	; (13e64 <LorawanClasscRxDone+0x7c>)
   13dfe:	4798      	blx	r3
   13e00:	1e05      	subs	r5, r0, #0
   13e02:	d019      	beq.n	13e38 <LorawanClasscRxDone+0x50>
   13e04:	0022      	movs	r2, r4
   13e06:	2102      	movs	r1, #2
   13e08:	3294      	adds	r2, #148	; 0x94
   13e0a:	7813      	ldrb	r3, [r2, #0]
   13e0c:	438b      	bics	r3, r1
   13e0e:	7013      	strb	r3, [r2, #0]
   13e10:	0021      	movs	r1, r4
   13e12:	3184      	adds	r1, #132	; 0x84
   13e14:	780b      	ldrb	r3, [r1, #0]
   13e16:	220e      	movs	r2, #14
   13e18:	0018      	movs	r0, r3
   13e1a:	4010      	ands	r0, r2
   13e1c:	2806      	cmp	r0, #6
   13e1e:	d103      	bne.n	13e28 <LorawanClasscRxDone+0x40>
   13e20:	4393      	bics	r3, r2
   13e22:	3a04      	subs	r2, #4
   13e24:	4313      	orrs	r3, r2
   13e26:	700b      	strb	r3, [r1, #0]
   13e28:	2390      	movs	r3, #144	; 0x90
   13e2a:	2201      	movs	r2, #1
   13e2c:	009b      	lsls	r3, r3, #2
   13e2e:	54e2      	strb	r2, [r4, r3]
   13e30:	2000      	movs	r0, #0
   13e32:	4b0d      	ldr	r3, [pc, #52]	; (13e68 <LorawanClasscRxDone+0x80>)
   13e34:	4798      	blx	r3
   13e36:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   13e38:	4b0c      	ldr	r3, [pc, #48]	; (13e6c <LorawanClasscRxDone+0x84>)
   13e3a:	5da6      	ldrb	r6, [r4, r6]
   13e3c:	4798      	blx	r3
   13e3e:	4b0c      	ldr	r3, [pc, #48]	; (13e70 <LorawanClasscRxDone+0x88>)
   13e40:	490c      	ldr	r1, [pc, #48]	; (13e74 <LorawanClasscRxDone+0x8c>)
   13e42:	4798      	blx	r3
   13e44:	23fa      	movs	r3, #250	; 0xfa
   13e46:	009b      	lsls	r3, r3, #2
   13e48:	18cb      	adds	r3, r1, r3
   13e4a:	21fa      	movs	r1, #250	; 0xfa
   13e4c:	0089      	lsls	r1, r1, #2
   13e4e:	4359      	muls	r1, r3
   13e50:	9500      	str	r5, [sp, #0]
   13e52:	002a      	movs	r2, r5
   13e54:	4b08      	ldr	r3, [pc, #32]	; (13e78 <LorawanClasscRxDone+0x90>)
   13e56:	0030      	movs	r0, r6
   13e58:	4d08      	ldr	r5, [pc, #32]	; (13e7c <LorawanClasscRxDone+0x94>)
   13e5a:	47a8      	blx	r5
   13e5c:	e7d8      	b.n	13e10 <LorawanClasscRxDone+0x28>
   13e5e:	46c0      	nop			; (mov r8, r8)
   13e60:	20003a6c 	.word	0x20003a6c
   13e64:	0000e725 	.word	0x0000e725
   13e68:	000122f5 	.word	0x000122f5
   13e6c:	00017fb1 	.word	0x00017fb1
   13e70:	000148e9 	.word	0x000148e9
   13e74:	000007d1 	.word	0x000007d1
   13e78:	00013d9d 	.word	0x00013d9d
   13e7c:	0000e58d 	.word	0x0000e58d

00013e80 <LorawanClasscRxTimeout>:
   13e80:	4a0c      	ldr	r2, [pc, #48]	; (13eb4 <LorawanClasscRxTimeout+0x34>)
   13e82:	b510      	push	{r4, lr}
   13e84:	0010      	movs	r0, r2
   13e86:	3084      	adds	r0, #132	; 0x84
   13e88:	7803      	ldrb	r3, [r0, #0]
   13e8a:	240e      	movs	r4, #14
   13e8c:	0019      	movs	r1, r3
   13e8e:	4021      	ands	r1, r4
   13e90:	2906      	cmp	r1, #6
   13e92:	d107      	bne.n	13ea4 <LorawanClasscRxTimeout+0x24>
   13e94:	2208      	movs	r2, #8
   13e96:	43a3      	bics	r3, r4
   13e98:	4313      	orrs	r3, r2
   13e9a:	7003      	strb	r3, [r0, #0]
   13e9c:	2000      	movs	r0, #0
   13e9e:	4b06      	ldr	r3, [pc, #24]	; (13eb8 <LorawanClasscRxTimeout+0x38>)
   13ea0:	4798      	blx	r3
   13ea2:	e006      	b.n	13eb2 <LorawanClasscRxTimeout+0x32>
   13ea4:	290a      	cmp	r1, #10
   13ea6:	d1f9      	bne.n	13e9c <LorawanClasscRxTimeout+0x1c>
   13ea8:	2388      	movs	r3, #136	; 0x88
   13eaa:	009b      	lsls	r3, r3, #2
   13eac:	5cd3      	ldrb	r3, [r2, r3]
   13eae:	2b00      	cmp	r3, #0
   13eb0:	d0f4      	beq.n	13e9c <LorawanClasscRxTimeout+0x1c>
   13eb2:	bd10      	pop	{r4, pc}
   13eb4:	20003a6c 	.word	0x20003a6c
   13eb8:	000122f5 	.word	0x000122f5

00013ebc <LorawanClasscNotifyAppOnReceive>:
   13ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13ebe:	001f      	movs	r7, r3
   13ec0:	2394      	movs	r3, #148	; 0x94
   13ec2:	0016      	movs	r6, r2
   13ec4:	4a07      	ldr	r2, [pc, #28]	; (13ee4 <LorawanClasscNotifyAppOnReceive+0x28>)
   13ec6:	005b      	lsls	r3, r3, #1
   13ec8:	0004      	movs	r4, r0
   13eca:	5cd0      	ldrb	r0, [r2, r3]
   13ecc:	4b06      	ldr	r3, [pc, #24]	; (13ee8 <LorawanClasscNotifyAppOnReceive+0x2c>)
   13ece:	000d      	movs	r5, r1
   13ed0:	4798      	blx	r3
   13ed2:	2800      	cmp	r0, #0
   13ed4:	d105      	bne.n	13ee2 <LorawanClasscNotifyAppOnReceive+0x26>
   13ed6:	0020      	movs	r0, r4
   13ed8:	003b      	movs	r3, r7
   13eda:	0032      	movs	r2, r6
   13edc:	0029      	movs	r1, r5
   13ede:	4c03      	ldr	r4, [pc, #12]	; (13eec <LorawanClasscNotifyAppOnReceive+0x30>)
   13ee0:	47a0      	blx	r4
   13ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13ee4:	20003a6c 	.word	0x20003a6c
   13ee8:	0000e725 	.word	0x0000e725
   13eec:	00011f19 	.word	0x00011f19

00013ef0 <LorawanMcastEnable>:
   13ef0:	0002      	movs	r2, r0
   13ef2:	b510      	push	{r4, lr}
   13ef4:	200a      	movs	r0, #10
   13ef6:	2903      	cmp	r1, #3
   13ef8:	d822      	bhi.n	13f40 <LorawanMcastEnable+0x50>
   13efa:	4b1a      	ldr	r3, [pc, #104]	; (13f64 <LorawanMcastEnable+0x74>)
   13efc:	2a00      	cmp	r2, #0
   13efe:	d020      	beq.n	13f42 <LorawanMcastEnable+0x52>
   13f00:	223c      	movs	r2, #60	; 0x3c
   13f02:	434a      	muls	r2, r1
   13f04:	189a      	adds	r2, r3, r2
   13f06:	3259      	adds	r2, #89	; 0x59
   13f08:	32ff      	adds	r2, #255	; 0xff
   13f0a:	7a12      	ldrb	r2, [r2, #8]
   13f0c:	0754      	lsls	r4, r2, #29
   13f0e:	d512      	bpl.n	13f36 <LorawanMcastEnable+0x46>
   13f10:	0794      	lsls	r4, r2, #30
   13f12:	d510      	bpl.n	13f36 <LorawanMcastEnable+0x46>
   13f14:	07d2      	lsls	r2, r2, #31
   13f16:	0fd2      	lsrs	r2, r2, #31
   13f18:	2a01      	cmp	r2, #1
   13f1a:	d10c      	bne.n	13f36 <LorawanMcastEnable+0x46>
   13f1c:	001c      	movs	r4, r3
   13f1e:	34fd      	adds	r4, #253	; 0xfd
   13f20:	7824      	ldrb	r4, [r4, #0]
   13f22:	0764      	lsls	r4, r4, #29
   13f24:	d007      	beq.n	13f36 <LorawanMcastEnable+0x46>
   13f26:	202e      	movs	r0, #46	; 0x2e
   13f28:	408a      	lsls	r2, r1
   13f2a:	30ff      	adds	r0, #255	; 0xff
   13f2c:	5c19      	ldrb	r1, [r3, r0]
   13f2e:	430a      	orrs	r2, r1
   13f30:	541a      	strb	r2, [r3, r0]
   13f32:	3826      	subs	r0, #38	; 0x26
   13f34:	38ff      	subs	r0, #255	; 0xff
   13f36:	2196      	movs	r1, #150	; 0x96
   13f38:	0049      	lsls	r1, r1, #1
   13f3a:	5c5a      	ldrb	r2, [r3, r1]
   13f3c:	3201      	adds	r2, #1
   13f3e:	545a      	strb	r2, [r3, r1]
   13f40:	bd10      	pop	{r4, pc}
   13f42:	2201      	movs	r2, #1
   13f44:	408a      	lsls	r2, r1
   13f46:	202e      	movs	r0, #46	; 0x2e
   13f48:	0011      	movs	r1, r2
   13f4a:	30ff      	adds	r0, #255	; 0xff
   13f4c:	5c1a      	ldrb	r2, [r3, r0]
   13f4e:	438a      	bics	r2, r1
   13f50:	2196      	movs	r1, #150	; 0x96
   13f52:	541a      	strb	r2, [r3, r0]
   13f54:	0049      	lsls	r1, r1, #1
   13f56:	5c5a      	ldrb	r2, [r3, r1]
   13f58:	3826      	subs	r0, #38	; 0x26
   13f5a:	3a01      	subs	r2, #1
   13f5c:	545a      	strb	r2, [r3, r1]
   13f5e:	38ff      	subs	r0, #255	; 0xff
   13f60:	e7ee      	b.n	13f40 <LorawanMcastEnable+0x50>
   13f62:	46c0      	nop			; (mov r8, r8)
   13f64:	20003a6c 	.word	0x20003a6c

00013f68 <LorawanMcastValidateHdr>:
   13f68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13f6a:	469c      	mov	ip, r3
   13f6c:	2400      	movs	r4, #0
   13f6e:	230a      	movs	r3, #10
   13f70:	4f18      	ldr	r7, [pc, #96]	; (13fd4 <LorawanMcastValidateHdr+0x6c>)
   13f72:	b2e5      	uxtb	r5, r4
   13f74:	9501      	str	r5, [sp, #4]
   13f76:	252e      	movs	r5, #46	; 0x2e
   13f78:	35ff      	adds	r5, #255	; 0xff
   13f7a:	5d7d      	ldrb	r5, [r7, r5]
   13f7c:	2601      	movs	r6, #1
   13f7e:	4125      	asrs	r5, r4
   13f80:	4235      	tst	r5, r6
   13f82:	d022      	beq.n	13fca <LorawanMcastValidateHdr+0x62>
   13f84:	7886      	ldrb	r6, [r0, #2]
   13f86:	7845      	ldrb	r5, [r0, #1]
   13f88:	0236      	lsls	r6, r6, #8
   13f8a:	432e      	orrs	r6, r5
   13f8c:	78c5      	ldrb	r5, [r0, #3]
   13f8e:	042d      	lsls	r5, r5, #16
   13f90:	432e      	orrs	r6, r5
   13f92:	7905      	ldrb	r5, [r0, #4]
   13f94:	062d      	lsls	r5, r5, #24
   13f96:	4335      	orrs	r5, r6
   13f98:	263c      	movs	r6, #60	; 0x3c
   13f9a:	4366      	muls	r6, r4
   13f9c:	3631      	adds	r6, #49	; 0x31
   13f9e:	36ff      	adds	r6, #255	; 0xff
   13fa0:	59be      	ldr	r6, [r7, r6]
   13fa2:	42b5      	cmp	r5, r6
   13fa4:	d111      	bne.n	13fca <LorawanMcastValidateHdr+0x62>
   13fa6:	4d0c      	ldr	r5, [pc, #48]	; (13fd8 <LorawanMcastValidateHdr+0x70>)
   13fa8:	782e      	ldrb	r6, [r5, #0]
   13faa:	2506      	movs	r5, #6
   13fac:	422e      	tst	r6, r5
   13fae:	d00c      	beq.n	13fca <LorawanMcastValidateHdr+0x62>
   13fb0:	2a00      	cmp	r2, #0
   13fb2:	d00a      	beq.n	13fca <LorawanMcastValidateHdr+0x62>
   13fb4:	7946      	ldrb	r6, [r0, #5]
   13fb6:	3569      	adds	r5, #105	; 0x69
   13fb8:	422e      	tst	r6, r5
   13fba:	d106      	bne.n	13fca <LorawanMcastValidateHdr+0x62>
   13fbc:	2903      	cmp	r1, #3
   13fbe:	d104      	bne.n	13fca <LorawanMcastValidateHdr+0x62>
   13fc0:	466d      	mov	r5, sp
   13fc2:	4663      	mov	r3, ip
   13fc4:	792d      	ldrb	r5, [r5, #4]
   13fc6:	701d      	strb	r5, [r3, #0]
   13fc8:	2308      	movs	r3, #8
   13fca:	3401      	adds	r4, #1
   13fcc:	2c04      	cmp	r4, #4
   13fce:	d1d0      	bne.n	13f72 <LorawanMcastValidateHdr+0xa>
   13fd0:	0018      	movs	r0, r3
   13fd2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   13fd4:	20003a6c 	.word	0x20003a6c
   13fd8:	20003b69 	.word	0x20003b69

00013fdc <LorawanMcastProcessPkt>:
   13fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
   13fde:	0015      	movs	r5, r2
   13fe0:	223c      	movs	r2, #60	; 0x3c
   13fe2:	435a      	muls	r2, r3
   13fe4:	b089      	sub	sp, #36	; 0x24
   13fe6:	9107      	str	r1, [sp, #28]
   13fe8:	493f      	ldr	r1, [pc, #252]	; (140e8 <LorawanMcastProcessPkt+0x10c>)
   13fea:	9006      	str	r0, [sp, #24]
   13fec:	1889      	adds	r1, r1, r2
   13fee:	31fc      	adds	r1, #252	; 0xfc
   13ff0:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
   13ff2:	6e08      	ldr	r0, [r1, #96]	; 0x60
   13ff4:	6d8a      	ldr	r2, [r1, #88]	; 0x58
   13ff6:	4284      	cmp	r4, r0
   13ff8:	d224      	bcs.n	14044 <LorawanMcastProcessPkt+0x68>
   13ffa:	2100      	movs	r1, #0
   13ffc:	4294      	cmp	r4, r2
   13ffe:	d802      	bhi.n	14006 <LorawanMcastProcessPkt+0x2a>
   14000:	4282      	cmp	r2, r0
   14002:	4192      	sbcs	r2, r2
   14004:	4251      	negs	r1, r2
   14006:	270a      	movs	r7, #10
   14008:	2900      	cmp	r1, #0
   1400a:	d11d      	bne.n	14048 <LorawanMcastProcessPkt+0x6c>
   1400c:	4a36      	ldr	r2, [pc, #216]	; (140e8 <LorawanMcastProcessPkt+0x10c>)
   1400e:	210e      	movs	r1, #14
   14010:	0010      	movs	r0, r2
   14012:	3084      	adds	r0, #132	; 0x84
   14014:	7803      	ldrb	r3, [r0, #0]
   14016:	001c      	movs	r4, r3
   14018:	400c      	ands	r4, r1
   1401a:	2c06      	cmp	r4, #6
   1401c:	d108      	bne.n	14030 <LorawanMcastProcessPkt+0x54>
   1401e:	0014      	movs	r4, r2
   14020:	34fd      	adds	r4, #253	; 0xfd
   14022:	7824      	ldrb	r4, [r4, #0]
   14024:	2c04      	cmp	r4, #4
   14026:	d103      	bne.n	14030 <LorawanMcastProcessPkt+0x54>
   14028:	438b      	bics	r3, r1
   1402a:	3904      	subs	r1, #4
   1402c:	430b      	orrs	r3, r1
   1402e:	7003      	strb	r3, [r0, #0]
   14030:	2390      	movs	r3, #144	; 0x90
   14032:	2101      	movs	r1, #1
   14034:	009b      	lsls	r3, r3, #2
   14036:	54d1      	strb	r1, [r2, r3]
   14038:	2000      	movs	r0, #0
   1403a:	4b2c      	ldr	r3, [pc, #176]	; (140ec <LorawanMcastProcessPkt+0x110>)
   1403c:	4798      	blx	r3
   1403e:	0038      	movs	r0, r7
   14040:	b009      	add	sp, #36	; 0x24
   14042:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14044:	4294      	cmp	r4, r2
   14046:	d8db      	bhi.n	14000 <LorawanMcastProcessPkt+0x24>
   14048:	243c      	movs	r4, #60	; 0x3c
   1404a:	435c      	muls	r4, r3
   1404c:	4e26      	ldr	r6, [pc, #152]	; (140e8 <LorawanMcastProcessPkt+0x10c>)
   1404e:	79ea      	ldrb	r2, [r5, #7]
   14050:	1937      	adds	r7, r6, r4
   14052:	003b      	movs	r3, r7
   14054:	79a9      	ldrb	r1, [r5, #6]
   14056:	0212      	lsls	r2, r2, #8
   14058:	3355      	adds	r3, #85	; 0x55
   1405a:	430a      	orrs	r2, r1
   1405c:	33ff      	adds	r3, #255	; 0xff
   1405e:	801a      	strh	r2, [r3, #0]
   14060:	2105      	movs	r1, #5
   14062:	4b23      	ldr	r3, [pc, #140]	; (140f0 <LorawanMcastProcessPkt+0x114>)
   14064:	37fc      	adds	r7, #252	; 0xfc
   14066:	2000      	movs	r0, #0
   14068:	4798      	blx	r3
   1406a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1406c:	3445      	adds	r4, #69	; 0x45
   1406e:	9304      	str	r3, [sp, #16]
   14070:	4b20      	ldr	r3, [pc, #128]	; (140f4 <LorawanMcastProcessPkt+0x118>)
   14072:	9907      	ldr	r1, [sp, #28]
   14074:	9303      	str	r3, [sp, #12]
   14076:	2319      	movs	r3, #25
   14078:	34ff      	adds	r4, #255	; 0xff
   1407a:	9302      	str	r3, [sp, #8]
   1407c:	19a4      	adds	r4, r4, r6
   1407e:	3b16      	subs	r3, #22
   14080:	9806      	ldr	r0, [sp, #24]
   14082:	9400      	str	r4, [sp, #0]
   14084:	390d      	subs	r1, #13
   14086:	9301      	str	r3, [sp, #4]
   14088:	b2c9      	uxtb	r1, r1
   1408a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1408c:	2201      	movs	r2, #1
   1408e:	3009      	adds	r0, #9
   14090:	4c19      	ldr	r4, [pc, #100]	; (140f8 <LorawanMcastProcessPkt+0x11c>)
   14092:	47a0      	blx	r4
   14094:	2800      	cmp	r0, #0
   14096:	d002      	beq.n	1409e <LorawanMcastProcessPkt+0xc2>
   14098:	201f      	movs	r0, #31
   1409a:	4b18      	ldr	r3, [pc, #96]	; (140fc <LorawanMcastProcessPkt+0x120>)
   1409c:	4798      	blx	r3
   1409e:	4918      	ldr	r1, [pc, #96]	; (14100 <LorawanMcastProcessPkt+0x124>)
   140a0:	2708      	movs	r7, #8
   140a2:	784a      	ldrb	r2, [r1, #1]
   140a4:	780b      	ldrb	r3, [r1, #0]
   140a6:	0212      	lsls	r2, r2, #8
   140a8:	431a      	orrs	r2, r3
   140aa:	788b      	ldrb	r3, [r1, #2]
   140ac:	041b      	lsls	r3, r3, #16
   140ae:	431a      	orrs	r2, r3
   140b0:	78cb      	ldrb	r3, [r1, #3]
   140b2:	061b      	lsls	r3, r3, #24
   140b4:	4313      	orrs	r3, r2
   140b6:	d0a9      	beq.n	1400c <LorawanMcastProcessPkt+0x30>
   140b8:	2220      	movs	r2, #32
   140ba:	3694      	adds	r6, #148	; 0x94
   140bc:	7833      	ldrb	r3, [r6, #0]
   140be:	9906      	ldr	r1, [sp, #24]
   140c0:	4393      	bics	r3, r2
   140c2:	7033      	strb	r3, [r6, #0]
   140c4:	78ab      	ldrb	r3, [r5, #2]
   140c6:	7868      	ldrb	r0, [r5, #1]
   140c8:	40bb      	lsls	r3, r7
   140ca:	4303      	orrs	r3, r0
   140cc:	78e8      	ldrb	r0, [r5, #3]
   140ce:	9a07      	ldr	r2, [sp, #28]
   140d0:	0400      	lsls	r0, r0, #16
   140d2:	4303      	orrs	r3, r0
   140d4:	7928      	ldrb	r0, [r5, #4]
   140d6:	3a0c      	subs	r2, #12
   140d8:	0600      	lsls	r0, r0, #24
   140da:	4318      	orrs	r0, r3
   140dc:	b2d2      	uxtb	r2, r2
   140de:	19c9      	adds	r1, r1, r7
   140e0:	003b      	movs	r3, r7
   140e2:	4c08      	ldr	r4, [pc, #32]	; (14104 <LorawanMcastProcessPkt+0x128>)
   140e4:	47a0      	blx	r4
   140e6:	e791      	b.n	1400c <LorawanMcastProcessPkt+0x30>
   140e8:	20003a6c 	.word	0x20003a6c
   140ec:	000122f5 	.word	0x000122f5
   140f0:	000098a5 	.word	0x000098a5
   140f4:	20003830 	.word	0x20003830
   140f8:	00011df5 	.word	0x00011df5
   140fc:	00011eb5 	.word	0x00011eb5
   14100:	20003dc8 	.word	0x20003dc8
   14104:	00011f19 	.word	0x00011f19

00014108 <LorawanAddMcastAddr>:
   14108:	b570      	push	{r4, r5, r6, lr}
   1410a:	260a      	movs	r6, #10
   1410c:	2903      	cmp	r1, #3
   1410e:	d818      	bhi.n	14142 <LorawanAddMcastAddr+0x3a>
   14110:	4b0d      	ldr	r3, [pc, #52]	; (14148 <LorawanAddMcastAddr+0x40>)
   14112:	681a      	ldr	r2, [r3, #0]
   14114:	0a15      	lsrs	r5, r2, #8
   14116:	791a      	ldrb	r2, [r3, #4]
   14118:	0612      	lsls	r2, r2, #24
   1411a:	432a      	orrs	r2, r5
   1411c:	4282      	cmp	r2, r0
   1411e:	d010      	beq.n	14142 <LorawanAddMcastAddr+0x3a>
   14120:	243c      	movs	r4, #60	; 0x3c
   14122:	434c      	muls	r4, r1
   14124:	191c      	adds	r4, r3, r4
   14126:	0023      	movs	r3, r4
   14128:	33fc      	adds	r3, #252	; 0xfc
   1412a:	6358      	str	r0, [r3, #52]	; 0x34
   1412c:	2106      	movs	r1, #6
   1412e:	2000      	movs	r0, #0
   14130:	4b06      	ldr	r3, [pc, #24]	; (1414c <LorawanAddMcastAddr+0x44>)
   14132:	4798      	blx	r3
   14134:	2201      	movs	r2, #1
   14136:	3459      	adds	r4, #89	; 0x59
   14138:	34ff      	adds	r4, #255	; 0xff
   1413a:	7a21      	ldrb	r1, [r4, #8]
   1413c:	3e02      	subs	r6, #2
   1413e:	430a      	orrs	r2, r1
   14140:	7222      	strb	r2, [r4, #8]
   14142:	0030      	movs	r0, r6
   14144:	bd70      	pop	{r4, r5, r6, pc}
   14146:	46c0      	nop			; (mov r8, r8)
   14148:	20003a6c 	.word	0x20003a6c
   1414c:	000098a5 	.word	0x000098a5

00014150 <LorawanAddMcastAppskey>:
   14150:	b570      	push	{r4, r5, r6, lr}
   14152:	0006      	movs	r6, r0
   14154:	200a      	movs	r0, #10
   14156:	2903      	cmp	r1, #3
   14158:	d818      	bhi.n	1418c <LorawanAddMcastAppskey+0x3c>
   1415a:	2e00      	cmp	r6, #0
   1415c:	d016      	beq.n	1418c <LorawanAddMcastAppskey+0x3c>
   1415e:	253c      	movs	r5, #60	; 0x3c
   14160:	434d      	muls	r5, r1
   14162:	0028      	movs	r0, r5
   14164:	4c0a      	ldr	r4, [pc, #40]	; (14190 <LorawanAddMcastAppskey+0x40>)
   14166:	3045      	adds	r0, #69	; 0x45
   14168:	30ff      	adds	r0, #255	; 0xff
   1416a:	2210      	movs	r2, #16
   1416c:	1900      	adds	r0, r0, r4
   1416e:	0031      	movs	r1, r6
   14170:	4b08      	ldr	r3, [pc, #32]	; (14194 <LorawanAddMcastAppskey+0x44>)
   14172:	4798      	blx	r3
   14174:	4b08      	ldr	r3, [pc, #32]	; (14198 <LorawanAddMcastAppskey+0x48>)
   14176:	2107      	movs	r1, #7
   14178:	2000      	movs	r0, #0
   1417a:	4798      	blx	r3
   1417c:	2304      	movs	r3, #4
   1417e:	2008      	movs	r0, #8
   14180:	1964      	adds	r4, r4, r5
   14182:	3459      	adds	r4, #89	; 0x59
   14184:	34ff      	adds	r4, #255	; 0xff
   14186:	7a22      	ldrb	r2, [r4, #8]
   14188:	4313      	orrs	r3, r2
   1418a:	7223      	strb	r3, [r4, #8]
   1418c:	bd70      	pop	{r4, r5, r6, pc}
   1418e:	46c0      	nop			; (mov r8, r8)
   14190:	20003a6c 	.word	0x20003a6c
   14194:	0001786b 	.word	0x0001786b
   14198:	000098a5 	.word	0x000098a5

0001419c <LorawanAddMcastNwkskey>:
   1419c:	b570      	push	{r4, r5, r6, lr}
   1419e:	0006      	movs	r6, r0
   141a0:	200a      	movs	r0, #10
   141a2:	2903      	cmp	r1, #3
   141a4:	d818      	bhi.n	141d8 <LorawanAddMcastNwkskey+0x3c>
   141a6:	2e00      	cmp	r6, #0
   141a8:	d016      	beq.n	141d8 <LorawanAddMcastNwkskey+0x3c>
   141aa:	253c      	movs	r5, #60	; 0x3c
   141ac:	434d      	muls	r5, r1
   141ae:	0028      	movs	r0, r5
   141b0:	4c0a      	ldr	r4, [pc, #40]	; (141dc <LorawanAddMcastNwkskey+0x40>)
   141b2:	3035      	adds	r0, #53	; 0x35
   141b4:	30ff      	adds	r0, #255	; 0xff
   141b6:	2210      	movs	r2, #16
   141b8:	1900      	adds	r0, r0, r4
   141ba:	0031      	movs	r1, r6
   141bc:	4b08      	ldr	r3, [pc, #32]	; (141e0 <LorawanAddMcastNwkskey+0x44>)
   141be:	4798      	blx	r3
   141c0:	4b08      	ldr	r3, [pc, #32]	; (141e4 <LorawanAddMcastNwkskey+0x48>)
   141c2:	2108      	movs	r1, #8
   141c4:	2000      	movs	r0, #0
   141c6:	4798      	blx	r3
   141c8:	2302      	movs	r3, #2
   141ca:	2008      	movs	r0, #8
   141cc:	1964      	adds	r4, r4, r5
   141ce:	3459      	adds	r4, #89	; 0x59
   141d0:	34ff      	adds	r4, #255	; 0xff
   141d2:	7a22      	ldrb	r2, [r4, #8]
   141d4:	4313      	orrs	r3, r2
   141d6:	7223      	strb	r3, [r4, #8]
   141d8:	bd70      	pop	{r4, r5, r6, pc}
   141da:	46c0      	nop			; (mov r8, r8)
   141dc:	20003a6c 	.word	0x20003a6c
   141e0:	0001786b 	.word	0x0001786b
   141e4:	000098a5 	.word	0x000098a5

000141e8 <LorawanAddMcastFcntMin>:
   141e8:	220a      	movs	r2, #10
   141ea:	2903      	cmp	r1, #3
   141ec:	d807      	bhi.n	141fe <LorawanAddMcastFcntMin+0x16>
   141ee:	233c      	movs	r3, #60	; 0x3c
   141f0:	434b      	muls	r3, r1
   141f2:	4904      	ldr	r1, [pc, #16]	; (14204 <LorawanAddMcastFcntMin+0x1c>)
   141f4:	3a02      	subs	r2, #2
   141f6:	18c9      	adds	r1, r1, r3
   141f8:	31fc      	adds	r1, #252	; 0xfc
   141fa:	65c8      	str	r0, [r1, #92]	; 0x5c
   141fc:	6588      	str	r0, [r1, #88]	; 0x58
   141fe:	0010      	movs	r0, r2
   14200:	4770      	bx	lr
   14202:	46c0      	nop			; (mov r8, r8)
   14204:	20003a6c 	.word	0x20003a6c

00014208 <LorawanAddMcastFcntMax>:
   14208:	220a      	movs	r2, #10
   1420a:	2903      	cmp	r1, #3
   1420c:	d806      	bhi.n	1421c <LorawanAddMcastFcntMax+0x14>
   1420e:	233c      	movs	r3, #60	; 0x3c
   14210:	434b      	muls	r3, r1
   14212:	4903      	ldr	r1, [pc, #12]	; (14220 <LorawanAddMcastFcntMax+0x18>)
   14214:	3a02      	subs	r2, #2
   14216:	18c9      	adds	r1, r1, r3
   14218:	31fc      	adds	r1, #252	; 0xfc
   1421a:	6608      	str	r0, [r1, #96]	; 0x60
   1421c:	0010      	movs	r0, r2
   1421e:	4770      	bx	lr
   14220:	20003a6c 	.word	0x20003a6c

00014224 <LorawanAddMcastDlFrequency>:
   14224:	b513      	push	{r0, r1, r4, lr}
   14226:	000c      	movs	r4, r1
   14228:	9001      	str	r0, [sp, #4]
   1422a:	2903      	cmp	r1, #3
   1422c:	d901      	bls.n	14232 <LorawanAddMcastDlFrequency+0xe>
   1422e:	200a      	movs	r0, #10
   14230:	bd16      	pop	{r1, r2, r4, pc}
   14232:	a901      	add	r1, sp, #4
   14234:	2001      	movs	r0, #1
   14236:	4b0a      	ldr	r3, [pc, #40]	; (14260 <LorawanAddMcastDlFrequency+0x3c>)
   14238:	4798      	blx	r3
   1423a:	2808      	cmp	r0, #8
   1423c:	d1f7      	bne.n	1422e <LorawanAddMcastDlFrequency+0xa>
   1423e:	213c      	movs	r1, #60	; 0x3c
   14240:	4361      	muls	r1, r4
   14242:	4b08      	ldr	r3, [pc, #32]	; (14264 <LorawanAddMcastDlFrequency+0x40>)
   14244:	9a01      	ldr	r2, [sp, #4]
   14246:	1859      	adds	r1, r3, r1
   14248:	31fc      	adds	r1, #252	; 0xfc
   1424a:	336f      	adds	r3, #111	; 0x6f
   1424c:	668a      	str	r2, [r1, #104]	; 0x68
   1424e:	0a11      	lsrs	r1, r2, #8
   14250:	701a      	strb	r2, [r3, #0]
   14252:	7059      	strb	r1, [r3, #1]
   14254:	0c11      	lsrs	r1, r2, #16
   14256:	0e12      	lsrs	r2, r2, #24
   14258:	7099      	strb	r1, [r3, #2]
   1425a:	70da      	strb	r2, [r3, #3]
   1425c:	e7e8      	b.n	14230 <LorawanAddMcastDlFrequency+0xc>
   1425e:	46c0      	nop			; (mov r8, r8)
   14260:	0000e061 	.word	0x0000e061
   14264:	20003a6c 	.word	0x20003a6c

00014268 <LorawanAddMcastDatarate>:
   14268:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1426a:	466b      	mov	r3, sp
   1426c:	1ddd      	adds	r5, r3, #7
   1426e:	000c      	movs	r4, r1
   14270:	7028      	strb	r0, [r5, #0]
   14272:	2903      	cmp	r1, #3
   14274:	d901      	bls.n	1427a <LorawanAddMcastDatarate+0x12>
   14276:	200a      	movs	r0, #10
   14278:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1427a:	0029      	movs	r1, r5
   1427c:	200f      	movs	r0, #15
   1427e:	4b07      	ldr	r3, [pc, #28]	; (1429c <LorawanAddMcastDatarate+0x34>)
   14280:	4798      	blx	r3
   14282:	2808      	cmp	r0, #8
   14284:	d1f7      	bne.n	14276 <LorawanAddMcastDatarate+0xe>
   14286:	213c      	movs	r1, #60	; 0x3c
   14288:	4361      	muls	r1, r4
   1428a:	4b05      	ldr	r3, [pc, #20]	; (142a0 <LorawanAddMcastDatarate+0x38>)
   1428c:	782a      	ldrb	r2, [r5, #0]
   1428e:	1859      	adds	r1, r3, r1
   14290:	3169      	adds	r1, #105	; 0x69
   14292:	31ff      	adds	r1, #255	; 0xff
   14294:	3373      	adds	r3, #115	; 0x73
   14296:	700a      	strb	r2, [r1, #0]
   14298:	701a      	strb	r2, [r3, #0]
   1429a:	e7ed      	b.n	14278 <LorawanAddMcastDatarate+0x10>
   1429c:	0000e061 	.word	0x0000e061
   142a0:	20003a6c 	.word	0x20003a6c

000142a4 <LorawanAddMcastPeriodicity>:
   142a4:	220a      	movs	r2, #10
   142a6:	2903      	cmp	r1, #3
   142a8:	d809      	bhi.n	142be <LorawanAddMcastPeriodicity+0x1a>
   142aa:	2807      	cmp	r0, #7
   142ac:	d807      	bhi.n	142be <LorawanAddMcastPeriodicity+0x1a>
   142ae:	233c      	movs	r3, #60	; 0x3c
   142b0:	434b      	muls	r3, r1
   142b2:	4904      	ldr	r1, [pc, #16]	; (142c4 <LorawanAddMcastPeriodicity+0x20>)
   142b4:	3a02      	subs	r2, #2
   142b6:	18c9      	adds	r1, r1, r3
   142b8:	316a      	adds	r1, #106	; 0x6a
   142ba:	31ff      	adds	r1, #255	; 0xff
   142bc:	7008      	strb	r0, [r1, #0]
   142be:	0010      	movs	r0, r2
   142c0:	4770      	bx	lr
   142c2:	46c0      	nop			; (mov r8, r8)
   142c4:	20003a6c 	.word	0x20003a6c

000142c8 <Radio_LBTScanTimeout>:
   142c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   142ca:	4c1c      	ldr	r4, [pc, #112]	; (1433c <Radio_LBTScanTimeout+0x74>)
   142cc:	0025      	movs	r5, r4
   142ce:	0023      	movs	r3, r4
   142d0:	354f      	adds	r5, #79	; 0x4f
   142d2:	7829      	ldrb	r1, [r5, #0]
   142d4:	3340      	adds	r3, #64	; 0x40
   142d6:	3101      	adds	r1, #1
   142d8:	b2c9      	uxtb	r1, r1
   142da:	7029      	strb	r1, [r5, #0]
   142dc:	781b      	ldrb	r3, [r3, #0]
   142de:	428b      	cmp	r3, r1
   142e0:	d315      	bcc.n	1430e <Radio_LBTScanTimeout+0x46>
   142e2:	260e      	movs	r6, #14
   142e4:	446e      	add	r6, sp
   142e6:	4b16      	ldr	r3, [pc, #88]	; (14340 <Radio_LBTScanTimeout+0x78>)
   142e8:	0030      	movs	r0, r6
   142ea:	4798      	blx	r3
   142ec:	2300      	movs	r3, #0
   142ee:	5ef2      	ldrsh	r2, [r6, r3]
   142f0:	782b      	ldrb	r3, [r5, #0]
   142f2:	4353      	muls	r3, r2
   142f4:	6c62      	ldr	r2, [r4, #68]	; 0x44
   142f6:	189b      	adds	r3, r3, r2
   142f8:	6463      	str	r3, [r4, #68]	; 0x44
   142fa:	0023      	movs	r3, r4
   142fc:	2200      	movs	r2, #0
   142fe:	3350      	adds	r3, #80	; 0x50
   14300:	7818      	ldrb	r0, [r3, #0]
   14302:	9200      	str	r2, [sp, #0]
   14304:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   14306:	4b0f      	ldr	r3, [pc, #60]	; (14344 <Radio_LBTScanTimeout+0x7c>)
   14308:	4c0f      	ldr	r4, [pc, #60]	; (14348 <Radio_LBTScanTimeout+0x80>)
   1430a:	47a0      	blx	r4
   1430c:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
   1430e:	2380      	movs	r3, #128	; 0x80
   14310:	4a0e      	ldr	r2, [pc, #56]	; (1434c <Radio_LBTScanTimeout+0x84>)
   14312:	009b      	lsls	r3, r3, #2
   14314:	8810      	ldrh	r0, [r2, #0]
   14316:	4303      	orrs	r3, r0
   14318:	8013      	strh	r3, [r2, #0]
   1431a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1431c:	0058      	lsls	r0, r3, #1
   1431e:	1e4b      	subs	r3, r1, #1
   14320:	4359      	muls	r1, r3
   14322:	4b0b      	ldr	r3, [pc, #44]	; (14350 <Radio_LBTScanTimeout+0x88>)
   14324:	b289      	uxth	r1, r1
   14326:	4798      	blx	r3
   14328:	0023      	movs	r3, r4
   1432a:	334c      	adds	r3, #76	; 0x4c
   1432c:	8018      	strh	r0, [r3, #0]
   1432e:	2300      	movs	r3, #0
   14330:	2001      	movs	r0, #1
   14332:	702b      	strb	r3, [r5, #0]
   14334:	6463      	str	r3, [r4, #68]	; 0x44
   14336:	4b07      	ldr	r3, [pc, #28]	; (14354 <Radio_LBTScanTimeout+0x8c>)
   14338:	4798      	blx	r3
   1433a:	e7e7      	b.n	1430c <Radio_LBTScanTimeout+0x44>
   1433c:	20003780 	.word	0x20003780
   14340:	0000ede5 	.word	0x0000ede5
   14344:	000142c9 	.word	0x000142c9
   14348:	0000e58d 	.word	0x0000e58d
   1434c:	20003940 	.word	0x20003940
   14350:	0001471d 	.word	0x0001471d
   14354:	0000fc35 	.word	0x0000fc35

00014358 <RADIO_ScanHandler>:
   14358:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1435a:	4b12      	ldr	r3, [pc, #72]	; (143a4 <RADIO_ScanHandler+0x4c>)
   1435c:	4798      	blx	r3
   1435e:	2000      	movs	r0, #0
   14360:	4b11      	ldr	r3, [pc, #68]	; (143a8 <RADIO_ScanHandler+0x50>)
   14362:	4798      	blx	r3
   14364:	4d11      	ldr	r5, [pc, #68]	; (143ac <RADIO_ScanHandler+0x54>)
   14366:	4b12      	ldr	r3, [pc, #72]	; (143b0 <RADIO_ScanHandler+0x58>)
   14368:	6828      	ldr	r0, [r5, #0]
   1436a:	2400      	movs	r4, #0
   1436c:	4798      	blx	r3
   1436e:	002b      	movs	r3, r5
   14370:	4e10      	ldr	r6, [pc, #64]	; (143b4 <RADIO_ScanHandler+0x5c>)
   14372:	334c      	adds	r3, #76	; 0x4c
   14374:	2201      	movs	r2, #1
   14376:	0021      	movs	r1, r4
   14378:	0020      	movs	r0, r4
   1437a:	801c      	strh	r4, [r3, #0]
   1437c:	47b0      	blx	r6
   1437e:	4b0e      	ldr	r3, [pc, #56]	; (143b8 <RADIO_ScanHandler+0x60>)
   14380:	2109      	movs	r1, #9
   14382:	2012      	movs	r0, #18
   14384:	4798      	blx	r3
   14386:	3550      	adds	r5, #80	; 0x50
   14388:	0022      	movs	r2, r4
   1438a:	0021      	movs	r1, r4
   1438c:	2005      	movs	r0, #5
   1438e:	47b0      	blx	r6
   14390:	7828      	ldrb	r0, [r5, #0]
   14392:	4b0a      	ldr	r3, [pc, #40]	; (143bc <RADIO_ScanHandler+0x64>)
   14394:	4d0a      	ldr	r5, [pc, #40]	; (143c0 <RADIO_ScanHandler+0x68>)
   14396:	9400      	str	r4, [sp, #0]
   14398:	0022      	movs	r2, r4
   1439a:	490a      	ldr	r1, [pc, #40]	; (143c4 <RADIO_ScanHandler+0x6c>)
   1439c:	47a8      	blx	r5
   1439e:	0020      	movs	r0, r4
   143a0:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
   143a2:	46c0      	nop			; (mov r8, r8)
   143a4:	000102a5 	.word	0x000102a5
   143a8:	0000fee9 	.word	0x0000fee9
   143ac:	20003780 	.word	0x20003780
   143b0:	0000f62d 	.word	0x0000f62d
   143b4:	0000ebc9 	.word	0x0000ebc9
   143b8:	0000d9a1 	.word	0x0000d9a1
   143bc:	000142c9 	.word	0x000142c9
   143c0:	0000e58d 	.word	0x0000e58d
   143c4:	00002328 	.word	0x00002328

000143c8 <radioScanDoneHandler>:
   143c8:	b530      	push	{r4, r5, lr}
   143ca:	4a18      	ldr	r2, [pc, #96]	; (1442c <radioScanDoneHandler+0x64>)
   143cc:	4918      	ldr	r1, [pc, #96]	; (14430 <radioScanDoneHandler+0x68>)
   143ce:	8813      	ldrh	r3, [r2, #0]
   143d0:	b085      	sub	sp, #20
   143d2:	400b      	ands	r3, r1
   143d4:	8013      	strh	r3, [r2, #0]
   143d6:	2200      	movs	r2, #0
   143d8:	4b16      	ldr	r3, [pc, #88]	; (14434 <radioScanDoneHandler+0x6c>)
   143da:	0011      	movs	r1, r2
   143dc:	0010      	movs	r0, r2
   143de:	4798      	blx	r3
   143e0:	2000      	movs	r0, #0
   143e2:	4b15      	ldr	r3, [pc, #84]	; (14438 <radioScanDoneHandler+0x70>)
   143e4:	4798      	blx	r3
   143e6:	4b15      	ldr	r3, [pc, #84]	; (1443c <radioScanDoneHandler+0x74>)
   143e8:	4798      	blx	r3
   143ea:	4c15      	ldr	r4, [pc, #84]	; (14440 <radioScanDoneHandler+0x78>)
   143ec:	0023      	movs	r3, r4
   143ee:	334c      	adds	r3, #76	; 0x4c
   143f0:	2100      	movs	r1, #0
   143f2:	5e59      	ldrsh	r1, [r3, r1]
   143f4:	233e      	movs	r3, #62	; 0x3e
   143f6:	5ee2      	ldrsh	r2, [r4, r3]
   143f8:	4b12      	ldr	r3, [pc, #72]	; (14444 <radioScanDoneHandler+0x7c>)
   143fa:	4291      	cmp	r1, r2
   143fc:	da06      	bge.n	1440c <radioScanDoneHandler+0x44>
   143fe:	2002      	movs	r0, #2
   14400:	4798      	blx	r3
   14402:	4b11      	ldr	r3, [pc, #68]	; (14448 <radioScanDoneHandler+0x80>)
   14404:	4798      	blx	r3
   14406:	2000      	movs	r0, #0
   14408:	b005      	add	sp, #20
   1440a:	bd30      	pop	{r4, r5, pc}
   1440c:	2207      	movs	r2, #7
   1440e:	ad01      	add	r5, sp, #4
   14410:	2001      	movs	r0, #1
   14412:	702a      	strb	r2, [r5, #0]
   14414:	4798      	blx	r3
   14416:	4b0d      	ldr	r3, [pc, #52]	; (1444c <radioScanDoneHandler+0x84>)
   14418:	781b      	ldrb	r3, [r3, #0]
   1441a:	079b      	lsls	r3, r3, #30
   1441c:	d5f3      	bpl.n	14406 <radioScanDoneHandler+0x3e>
   1441e:	6923      	ldr	r3, [r4, #16]
   14420:	2b00      	cmp	r3, #0
   14422:	d0f0      	beq.n	14406 <radioScanDoneHandler+0x3e>
   14424:	0029      	movs	r1, r5
   14426:	2002      	movs	r0, #2
   14428:	4798      	blx	r3
   1442a:	e7ec      	b.n	14406 <radioScanDoneHandler+0x3e>
   1442c:	20003940 	.word	0x20003940
   14430:	fffffdff 	.word	0xfffffdff
   14434:	0000ebc9 	.word	0x0000ebc9
   14438:	0000ff1d 	.word	0x0000ff1d
   1443c:	000103d5 	.word	0x000103d5
   14440:	20003780 	.word	0x20003780
   14444:	0000fce1 	.word	0x0000fce1
   14448:	000106a1 	.word	0x000106a1
   1444c:	20003942 	.word	0x20003942

00014450 <common_tc_read_count>:
   14450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14452:	4b0d      	ldr	r3, [pc, #52]	; (14488 <common_tc_read_count+0x38>)
   14454:	4798      	blx	r3
   14456:	4b0d      	ldr	r3, [pc, #52]	; (1448c <common_tc_read_count+0x3c>)
   14458:	781b      	ldrb	r3, [r3, #0]
   1445a:	2b00      	cmp	r3, #0
   1445c:	d00e      	beq.n	1447c <common_tc_read_count+0x2c>
   1445e:	4b0c      	ldr	r3, [pc, #48]	; (14490 <common_tc_read_count+0x40>)
   14460:	781d      	ldrb	r5, [r3, #0]
   14462:	4b0a      	ldr	r3, [pc, #40]	; (1448c <common_tc_read_count+0x3c>)
   14464:	781f      	ldrb	r7, [r3, #0]
   14466:	4c0b      	ldr	r4, [pc, #44]	; (14494 <common_tc_read_count+0x44>)
   14468:	1c29      	adds	r1, r5, #0
   1446a:	47a0      	blx	r4
   1446c:	1c06      	adds	r6, r0, #0
   1446e:	480a      	ldr	r0, [pc, #40]	; (14498 <common_tc_read_count+0x48>)
   14470:	1c29      	adds	r1, r5, #0
   14472:	47a0      	blx	r4
   14474:	4378      	muls	r0, r7
   14476:	1830      	adds	r0, r6, r0
   14478:	b280      	uxth	r0, r0
   1447a:	e004      	b.n	14486 <common_tc_read_count+0x36>
   1447c:	4b04      	ldr	r3, [pc, #16]	; (14490 <common_tc_read_count+0x40>)
   1447e:	7819      	ldrb	r1, [r3, #0]
   14480:	4b04      	ldr	r3, [pc, #16]	; (14494 <common_tc_read_count+0x44>)
   14482:	4798      	blx	r3
   14484:	b280      	uxth	r0, r0
   14486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14488:	0000ee19 	.word	0x0000ee19
   1448c:	200020d8 	.word	0x200020d8
   14490:	20003dd0 	.word	0x20003dd0
   14494:	0001471d 	.word	0x0001471d
   14498:	0000ffff 	.word	0x0000ffff

0001449c <common_tc_compare_stop>:
   1449c:	b508      	push	{r3, lr}
   1449e:	4b05      	ldr	r3, [pc, #20]	; (144b4 <common_tc_compare_stop+0x18>)
   144a0:	4798      	blx	r3
   144a2:	4b05      	ldr	r3, [pc, #20]	; (144b8 <common_tc_compare_stop+0x1c>)
   144a4:	4798      	blx	r3
   144a6:	4b05      	ldr	r3, [pc, #20]	; (144bc <common_tc_compare_stop+0x20>)
   144a8:	2200      	movs	r2, #0
   144aa:	605a      	str	r2, [r3, #4]
   144ac:	811a      	strh	r2, [r3, #8]
   144ae:	4b04      	ldr	r3, [pc, #16]	; (144c0 <common_tc_compare_stop+0x24>)
   144b0:	4798      	blx	r3
   144b2:	bd08      	pop	{r3, pc}
   144b4:	0000ee2d 	.word	0x0000ee2d
   144b8:	0000eee5 	.word	0x0000eee5
   144bc:	200020d8 	.word	0x200020d8
   144c0:	0000ef09 	.word	0x0000ef09

000144c4 <common_tc_delay>:
   144c4:	b510      	push	{r4, lr}
   144c6:	1c04      	adds	r4, r0, #0
   144c8:	4b13      	ldr	r3, [pc, #76]	; (14518 <common_tc_delay+0x54>)
   144ca:	4798      	blx	r3
   144cc:	4b13      	ldr	r3, [pc, #76]	; (1451c <common_tc_delay+0x58>)
   144ce:	781a      	ldrb	r2, [r3, #0]
   144d0:	4362      	muls	r2, r4
   144d2:	1881      	adds	r1, r0, r2
   144d4:	4b12      	ldr	r3, [pc, #72]	; (14520 <common_tc_delay+0x5c>)
   144d6:	6059      	str	r1, [r3, #4]
   144d8:	6859      	ldr	r1, [r3, #4]
   144da:	0c09      	lsrs	r1, r1, #16
   144dc:	6059      	str	r1, [r3, #4]
   144de:	685b      	ldr	r3, [r3, #4]
   144e0:	2b00      	cmp	r3, #0
   144e2:	d007      	beq.n	144f4 <common_tc_delay+0x30>
   144e4:	4b0e      	ldr	r3, [pc, #56]	; (14520 <common_tc_delay+0x5c>)
   144e6:	6859      	ldr	r1, [r3, #4]
   144e8:	3201      	adds	r2, #1
   144ea:	1880      	adds	r0, r0, r2
   144ec:	8118      	strh	r0, [r3, #8]
   144ee:	4b0d      	ldr	r3, [pc, #52]	; (14524 <common_tc_delay+0x60>)
   144f0:	4798      	blx	r3
   144f2:	e004      	b.n	144fe <common_tc_delay+0x3a>
   144f4:	1882      	adds	r2, r0, r2
   144f6:	4b0a      	ldr	r3, [pc, #40]	; (14520 <common_tc_delay+0x5c>)
   144f8:	811a      	strh	r2, [r3, #8]
   144fa:	4b0b      	ldr	r3, [pc, #44]	; (14528 <common_tc_delay+0x64>)
   144fc:	4798      	blx	r3
   144fe:	4b08      	ldr	r3, [pc, #32]	; (14520 <common_tc_delay+0x5c>)
   14500:	891b      	ldrh	r3, [r3, #8]
   14502:	2b63      	cmp	r3, #99	; 0x63
   14504:	d802      	bhi.n	1450c <common_tc_delay+0x48>
   14506:	3364      	adds	r3, #100	; 0x64
   14508:	4a05      	ldr	r2, [pc, #20]	; (14520 <common_tc_delay+0x5c>)
   1450a:	8113      	strh	r3, [r2, #8]
   1450c:	4b04      	ldr	r3, [pc, #16]	; (14520 <common_tc_delay+0x5c>)
   1450e:	8918      	ldrh	r0, [r3, #8]
   14510:	4b06      	ldr	r3, [pc, #24]	; (1452c <common_tc_delay+0x68>)
   14512:	4798      	blx	r3
   14514:	bd10      	pop	{r4, pc}
   14516:	46c0      	nop			; (mov r8, r8)
   14518:	0000ee19 	.word	0x0000ee19
   1451c:	20003dd0 	.word	0x20003dd0
   14520:	200020d8 	.word	0x200020d8
   14524:	0000ee2d 	.word	0x0000ee2d
   14528:	0000ee41 	.word	0x0000ee41
   1452c:	0000eecd 	.word	0x0000eecd

00014530 <common_tc_init>:
   14530:	b508      	push	{r3, lr}
   14532:	2200      	movs	r2, #0
   14534:	4b03      	ldr	r3, [pc, #12]	; (14544 <common_tc_init+0x14>)
   14536:	701a      	strb	r2, [r3, #0]
   14538:	4b03      	ldr	r3, [pc, #12]	; (14548 <common_tc_init+0x18>)
   1453a:	4798      	blx	r3
   1453c:	4b03      	ldr	r3, [pc, #12]	; (1454c <common_tc_init+0x1c>)
   1453e:	7018      	strb	r0, [r3, #0]
   14540:	bd08      	pop	{r3, pc}
   14542:	46c0      	nop			; (mov r8, r8)
   14544:	200020d8 	.word	0x200020d8
   14548:	0000ef21 	.word	0x0000ef21
   1454c:	20003dd0 	.word	0x20003dd0

00014550 <tmr_ovf_callback>:
   14550:	b508      	push	{r3, lr}
   14552:	4b0e      	ldr	r3, [pc, #56]	; (1458c <tmr_ovf_callback+0x3c>)
   14554:	685b      	ldr	r3, [r3, #4]
   14556:	2b00      	cmp	r3, #0
   14558:	d007      	beq.n	1456a <tmr_ovf_callback+0x1a>
   1455a:	4a0c      	ldr	r2, [pc, #48]	; (1458c <tmr_ovf_callback+0x3c>)
   1455c:	6853      	ldr	r3, [r2, #4]
   1455e:	3b01      	subs	r3, #1
   14560:	6053      	str	r3, [r2, #4]
   14562:	2b00      	cmp	r3, #0
   14564:	d101      	bne.n	1456a <tmr_ovf_callback+0x1a>
   14566:	4b0a      	ldr	r3, [pc, #40]	; (14590 <tmr_ovf_callback+0x40>)
   14568:	4798      	blx	r3
   1456a:	4a08      	ldr	r2, [pc, #32]	; (1458c <tmr_ovf_callback+0x3c>)
   1456c:	7813      	ldrb	r3, [r2, #0]
   1456e:	3301      	adds	r3, #1
   14570:	b2db      	uxtb	r3, r3
   14572:	7013      	strb	r3, [r2, #0]
   14574:	4a07      	ldr	r2, [pc, #28]	; (14594 <tmr_ovf_callback+0x44>)
   14576:	7812      	ldrb	r2, [r2, #0]
   14578:	429a      	cmp	r2, r3
   1457a:	d806      	bhi.n	1458a <tmr_ovf_callback+0x3a>
   1457c:	4b03      	ldr	r3, [pc, #12]	; (1458c <tmr_ovf_callback+0x3c>)
   1457e:	2200      	movs	r2, #0
   14580:	701a      	strb	r2, [r3, #0]
   14582:	68db      	ldr	r3, [r3, #12]
   14584:	2b00      	cmp	r3, #0
   14586:	d000      	beq.n	1458a <tmr_ovf_callback+0x3a>
   14588:	4798      	blx	r3
   1458a:	bd08      	pop	{r3, pc}
   1458c:	200020d8 	.word	0x200020d8
   14590:	0000ee41 	.word	0x0000ee41
   14594:	20003dd0 	.word	0x20003dd0

00014598 <tmr_cca_callback>:
   14598:	b508      	push	{r3, lr}
   1459a:	4b04      	ldr	r3, [pc, #16]	; (145ac <tmr_cca_callback+0x14>)
   1459c:	4798      	blx	r3
   1459e:	4b04      	ldr	r3, [pc, #16]	; (145b0 <tmr_cca_callback+0x18>)
   145a0:	691b      	ldr	r3, [r3, #16]
   145a2:	2b00      	cmp	r3, #0
   145a4:	d000      	beq.n	145a8 <tmr_cca_callback+0x10>
   145a6:	4798      	blx	r3
   145a8:	bd08      	pop	{r3, pc}
   145aa:	46c0      	nop			; (mov r8, r8)
   145ac:	0000ee2d 	.word	0x0000ee2d
   145b0:	200020d8 	.word	0x200020d8

000145b4 <set_common_tc_overflow_callback>:
   145b4:	4b01      	ldr	r3, [pc, #4]	; (145bc <set_common_tc_overflow_callback+0x8>)
   145b6:	60d8      	str	r0, [r3, #12]
   145b8:	4770      	bx	lr
   145ba:	46c0      	nop			; (mov r8, r8)
   145bc:	200020d8 	.word	0x200020d8

000145c0 <set_common_tc_expiry_callback>:
   145c0:	4b01      	ldr	r3, [pc, #4]	; (145c8 <set_common_tc_expiry_callback+0x8>)
   145c2:	6118      	str	r0, [r3, #16]
   145c4:	4770      	bx	lr
   145c6:	46c0      	nop			; (mov r8, r8)
   145c8:	200020d8 	.word	0x200020d8

000145cc <__gnu_thumb1_case_uqi>:
   145cc:	b402      	push	{r1}
   145ce:	4671      	mov	r1, lr
   145d0:	0849      	lsrs	r1, r1, #1
   145d2:	0049      	lsls	r1, r1, #1
   145d4:	5c09      	ldrb	r1, [r1, r0]
   145d6:	0049      	lsls	r1, r1, #1
   145d8:	448e      	add	lr, r1
   145da:	bc02      	pop	{r1}
   145dc:	4770      	bx	lr
   145de:	46c0      	nop			; (mov r8, r8)

000145e0 <__gnu_thumb1_case_shi>:
   145e0:	b403      	push	{r0, r1}
   145e2:	4671      	mov	r1, lr
   145e4:	0849      	lsrs	r1, r1, #1
   145e6:	0040      	lsls	r0, r0, #1
   145e8:	0049      	lsls	r1, r1, #1
   145ea:	5e09      	ldrsh	r1, [r1, r0]
   145ec:	0049      	lsls	r1, r1, #1
   145ee:	448e      	add	lr, r1
   145f0:	bc03      	pop	{r0, r1}
   145f2:	4770      	bx	lr

000145f4 <__gnu_thumb1_case_uhi>:
   145f4:	b403      	push	{r0, r1}
   145f6:	4671      	mov	r1, lr
   145f8:	0849      	lsrs	r1, r1, #1
   145fa:	0040      	lsls	r0, r0, #1
   145fc:	0049      	lsls	r1, r1, #1
   145fe:	5a09      	ldrh	r1, [r1, r0]
   14600:	0049      	lsls	r1, r1, #1
   14602:	448e      	add	lr, r1
   14604:	bc03      	pop	{r0, r1}
   14606:	4770      	bx	lr

00014608 <__udivsi3>:
   14608:	2200      	movs	r2, #0
   1460a:	0843      	lsrs	r3, r0, #1
   1460c:	428b      	cmp	r3, r1
   1460e:	d374      	bcc.n	146fa <__udivsi3+0xf2>
   14610:	0903      	lsrs	r3, r0, #4
   14612:	428b      	cmp	r3, r1
   14614:	d35f      	bcc.n	146d6 <__udivsi3+0xce>
   14616:	0a03      	lsrs	r3, r0, #8
   14618:	428b      	cmp	r3, r1
   1461a:	d344      	bcc.n	146a6 <__udivsi3+0x9e>
   1461c:	0b03      	lsrs	r3, r0, #12
   1461e:	428b      	cmp	r3, r1
   14620:	d328      	bcc.n	14674 <__udivsi3+0x6c>
   14622:	0c03      	lsrs	r3, r0, #16
   14624:	428b      	cmp	r3, r1
   14626:	d30d      	bcc.n	14644 <__udivsi3+0x3c>
   14628:	22ff      	movs	r2, #255	; 0xff
   1462a:	0209      	lsls	r1, r1, #8
   1462c:	ba12      	rev	r2, r2
   1462e:	0c03      	lsrs	r3, r0, #16
   14630:	428b      	cmp	r3, r1
   14632:	d302      	bcc.n	1463a <__udivsi3+0x32>
   14634:	1212      	asrs	r2, r2, #8
   14636:	0209      	lsls	r1, r1, #8
   14638:	d065      	beq.n	14706 <__udivsi3+0xfe>
   1463a:	0b03      	lsrs	r3, r0, #12
   1463c:	428b      	cmp	r3, r1
   1463e:	d319      	bcc.n	14674 <__udivsi3+0x6c>
   14640:	e000      	b.n	14644 <__udivsi3+0x3c>
   14642:	0a09      	lsrs	r1, r1, #8
   14644:	0bc3      	lsrs	r3, r0, #15
   14646:	428b      	cmp	r3, r1
   14648:	d301      	bcc.n	1464e <__udivsi3+0x46>
   1464a:	03cb      	lsls	r3, r1, #15
   1464c:	1ac0      	subs	r0, r0, r3
   1464e:	4152      	adcs	r2, r2
   14650:	0b83      	lsrs	r3, r0, #14
   14652:	428b      	cmp	r3, r1
   14654:	d301      	bcc.n	1465a <__udivsi3+0x52>
   14656:	038b      	lsls	r3, r1, #14
   14658:	1ac0      	subs	r0, r0, r3
   1465a:	4152      	adcs	r2, r2
   1465c:	0b43      	lsrs	r3, r0, #13
   1465e:	428b      	cmp	r3, r1
   14660:	d301      	bcc.n	14666 <__udivsi3+0x5e>
   14662:	034b      	lsls	r3, r1, #13
   14664:	1ac0      	subs	r0, r0, r3
   14666:	4152      	adcs	r2, r2
   14668:	0b03      	lsrs	r3, r0, #12
   1466a:	428b      	cmp	r3, r1
   1466c:	d301      	bcc.n	14672 <__udivsi3+0x6a>
   1466e:	030b      	lsls	r3, r1, #12
   14670:	1ac0      	subs	r0, r0, r3
   14672:	4152      	adcs	r2, r2
   14674:	0ac3      	lsrs	r3, r0, #11
   14676:	428b      	cmp	r3, r1
   14678:	d301      	bcc.n	1467e <__udivsi3+0x76>
   1467a:	02cb      	lsls	r3, r1, #11
   1467c:	1ac0      	subs	r0, r0, r3
   1467e:	4152      	adcs	r2, r2
   14680:	0a83      	lsrs	r3, r0, #10
   14682:	428b      	cmp	r3, r1
   14684:	d301      	bcc.n	1468a <__udivsi3+0x82>
   14686:	028b      	lsls	r3, r1, #10
   14688:	1ac0      	subs	r0, r0, r3
   1468a:	4152      	adcs	r2, r2
   1468c:	0a43      	lsrs	r3, r0, #9
   1468e:	428b      	cmp	r3, r1
   14690:	d301      	bcc.n	14696 <__udivsi3+0x8e>
   14692:	024b      	lsls	r3, r1, #9
   14694:	1ac0      	subs	r0, r0, r3
   14696:	4152      	adcs	r2, r2
   14698:	0a03      	lsrs	r3, r0, #8
   1469a:	428b      	cmp	r3, r1
   1469c:	d301      	bcc.n	146a2 <__udivsi3+0x9a>
   1469e:	020b      	lsls	r3, r1, #8
   146a0:	1ac0      	subs	r0, r0, r3
   146a2:	4152      	adcs	r2, r2
   146a4:	d2cd      	bcs.n	14642 <__udivsi3+0x3a>
   146a6:	09c3      	lsrs	r3, r0, #7
   146a8:	428b      	cmp	r3, r1
   146aa:	d301      	bcc.n	146b0 <__udivsi3+0xa8>
   146ac:	01cb      	lsls	r3, r1, #7
   146ae:	1ac0      	subs	r0, r0, r3
   146b0:	4152      	adcs	r2, r2
   146b2:	0983      	lsrs	r3, r0, #6
   146b4:	428b      	cmp	r3, r1
   146b6:	d301      	bcc.n	146bc <__udivsi3+0xb4>
   146b8:	018b      	lsls	r3, r1, #6
   146ba:	1ac0      	subs	r0, r0, r3
   146bc:	4152      	adcs	r2, r2
   146be:	0943      	lsrs	r3, r0, #5
   146c0:	428b      	cmp	r3, r1
   146c2:	d301      	bcc.n	146c8 <__udivsi3+0xc0>
   146c4:	014b      	lsls	r3, r1, #5
   146c6:	1ac0      	subs	r0, r0, r3
   146c8:	4152      	adcs	r2, r2
   146ca:	0903      	lsrs	r3, r0, #4
   146cc:	428b      	cmp	r3, r1
   146ce:	d301      	bcc.n	146d4 <__udivsi3+0xcc>
   146d0:	010b      	lsls	r3, r1, #4
   146d2:	1ac0      	subs	r0, r0, r3
   146d4:	4152      	adcs	r2, r2
   146d6:	08c3      	lsrs	r3, r0, #3
   146d8:	428b      	cmp	r3, r1
   146da:	d301      	bcc.n	146e0 <__udivsi3+0xd8>
   146dc:	00cb      	lsls	r3, r1, #3
   146de:	1ac0      	subs	r0, r0, r3
   146e0:	4152      	adcs	r2, r2
   146e2:	0883      	lsrs	r3, r0, #2
   146e4:	428b      	cmp	r3, r1
   146e6:	d301      	bcc.n	146ec <__udivsi3+0xe4>
   146e8:	008b      	lsls	r3, r1, #2
   146ea:	1ac0      	subs	r0, r0, r3
   146ec:	4152      	adcs	r2, r2
   146ee:	0843      	lsrs	r3, r0, #1
   146f0:	428b      	cmp	r3, r1
   146f2:	d301      	bcc.n	146f8 <__udivsi3+0xf0>
   146f4:	004b      	lsls	r3, r1, #1
   146f6:	1ac0      	subs	r0, r0, r3
   146f8:	4152      	adcs	r2, r2
   146fa:	1a41      	subs	r1, r0, r1
   146fc:	d200      	bcs.n	14700 <__udivsi3+0xf8>
   146fe:	4601      	mov	r1, r0
   14700:	4152      	adcs	r2, r2
   14702:	4610      	mov	r0, r2
   14704:	4770      	bx	lr
   14706:	e7ff      	b.n	14708 <__udivsi3+0x100>
   14708:	b501      	push	{r0, lr}
   1470a:	2000      	movs	r0, #0
   1470c:	f000 f8f0 	bl	148f0 <__aeabi_idiv0>
   14710:	bd02      	pop	{r1, pc}
   14712:	46c0      	nop			; (mov r8, r8)

00014714 <__aeabi_uidivmod>:
   14714:	2900      	cmp	r1, #0
   14716:	d0f7      	beq.n	14708 <__udivsi3+0x100>
   14718:	e776      	b.n	14608 <__udivsi3>
   1471a:	4770      	bx	lr

0001471c <__divsi3>:
   1471c:	4603      	mov	r3, r0
   1471e:	430b      	orrs	r3, r1
   14720:	d47f      	bmi.n	14822 <__divsi3+0x106>
   14722:	2200      	movs	r2, #0
   14724:	0843      	lsrs	r3, r0, #1
   14726:	428b      	cmp	r3, r1
   14728:	d374      	bcc.n	14814 <__divsi3+0xf8>
   1472a:	0903      	lsrs	r3, r0, #4
   1472c:	428b      	cmp	r3, r1
   1472e:	d35f      	bcc.n	147f0 <__divsi3+0xd4>
   14730:	0a03      	lsrs	r3, r0, #8
   14732:	428b      	cmp	r3, r1
   14734:	d344      	bcc.n	147c0 <__divsi3+0xa4>
   14736:	0b03      	lsrs	r3, r0, #12
   14738:	428b      	cmp	r3, r1
   1473a:	d328      	bcc.n	1478e <__divsi3+0x72>
   1473c:	0c03      	lsrs	r3, r0, #16
   1473e:	428b      	cmp	r3, r1
   14740:	d30d      	bcc.n	1475e <__divsi3+0x42>
   14742:	22ff      	movs	r2, #255	; 0xff
   14744:	0209      	lsls	r1, r1, #8
   14746:	ba12      	rev	r2, r2
   14748:	0c03      	lsrs	r3, r0, #16
   1474a:	428b      	cmp	r3, r1
   1474c:	d302      	bcc.n	14754 <__divsi3+0x38>
   1474e:	1212      	asrs	r2, r2, #8
   14750:	0209      	lsls	r1, r1, #8
   14752:	d065      	beq.n	14820 <__divsi3+0x104>
   14754:	0b03      	lsrs	r3, r0, #12
   14756:	428b      	cmp	r3, r1
   14758:	d319      	bcc.n	1478e <__divsi3+0x72>
   1475a:	e000      	b.n	1475e <__divsi3+0x42>
   1475c:	0a09      	lsrs	r1, r1, #8
   1475e:	0bc3      	lsrs	r3, r0, #15
   14760:	428b      	cmp	r3, r1
   14762:	d301      	bcc.n	14768 <__divsi3+0x4c>
   14764:	03cb      	lsls	r3, r1, #15
   14766:	1ac0      	subs	r0, r0, r3
   14768:	4152      	adcs	r2, r2
   1476a:	0b83      	lsrs	r3, r0, #14
   1476c:	428b      	cmp	r3, r1
   1476e:	d301      	bcc.n	14774 <__divsi3+0x58>
   14770:	038b      	lsls	r3, r1, #14
   14772:	1ac0      	subs	r0, r0, r3
   14774:	4152      	adcs	r2, r2
   14776:	0b43      	lsrs	r3, r0, #13
   14778:	428b      	cmp	r3, r1
   1477a:	d301      	bcc.n	14780 <__divsi3+0x64>
   1477c:	034b      	lsls	r3, r1, #13
   1477e:	1ac0      	subs	r0, r0, r3
   14780:	4152      	adcs	r2, r2
   14782:	0b03      	lsrs	r3, r0, #12
   14784:	428b      	cmp	r3, r1
   14786:	d301      	bcc.n	1478c <__divsi3+0x70>
   14788:	030b      	lsls	r3, r1, #12
   1478a:	1ac0      	subs	r0, r0, r3
   1478c:	4152      	adcs	r2, r2
   1478e:	0ac3      	lsrs	r3, r0, #11
   14790:	428b      	cmp	r3, r1
   14792:	d301      	bcc.n	14798 <__divsi3+0x7c>
   14794:	02cb      	lsls	r3, r1, #11
   14796:	1ac0      	subs	r0, r0, r3
   14798:	4152      	adcs	r2, r2
   1479a:	0a83      	lsrs	r3, r0, #10
   1479c:	428b      	cmp	r3, r1
   1479e:	d301      	bcc.n	147a4 <__divsi3+0x88>
   147a0:	028b      	lsls	r3, r1, #10
   147a2:	1ac0      	subs	r0, r0, r3
   147a4:	4152      	adcs	r2, r2
   147a6:	0a43      	lsrs	r3, r0, #9
   147a8:	428b      	cmp	r3, r1
   147aa:	d301      	bcc.n	147b0 <__divsi3+0x94>
   147ac:	024b      	lsls	r3, r1, #9
   147ae:	1ac0      	subs	r0, r0, r3
   147b0:	4152      	adcs	r2, r2
   147b2:	0a03      	lsrs	r3, r0, #8
   147b4:	428b      	cmp	r3, r1
   147b6:	d301      	bcc.n	147bc <__divsi3+0xa0>
   147b8:	020b      	lsls	r3, r1, #8
   147ba:	1ac0      	subs	r0, r0, r3
   147bc:	4152      	adcs	r2, r2
   147be:	d2cd      	bcs.n	1475c <__divsi3+0x40>
   147c0:	09c3      	lsrs	r3, r0, #7
   147c2:	428b      	cmp	r3, r1
   147c4:	d301      	bcc.n	147ca <__divsi3+0xae>
   147c6:	01cb      	lsls	r3, r1, #7
   147c8:	1ac0      	subs	r0, r0, r3
   147ca:	4152      	adcs	r2, r2
   147cc:	0983      	lsrs	r3, r0, #6
   147ce:	428b      	cmp	r3, r1
   147d0:	d301      	bcc.n	147d6 <__divsi3+0xba>
   147d2:	018b      	lsls	r3, r1, #6
   147d4:	1ac0      	subs	r0, r0, r3
   147d6:	4152      	adcs	r2, r2
   147d8:	0943      	lsrs	r3, r0, #5
   147da:	428b      	cmp	r3, r1
   147dc:	d301      	bcc.n	147e2 <__divsi3+0xc6>
   147de:	014b      	lsls	r3, r1, #5
   147e0:	1ac0      	subs	r0, r0, r3
   147e2:	4152      	adcs	r2, r2
   147e4:	0903      	lsrs	r3, r0, #4
   147e6:	428b      	cmp	r3, r1
   147e8:	d301      	bcc.n	147ee <__divsi3+0xd2>
   147ea:	010b      	lsls	r3, r1, #4
   147ec:	1ac0      	subs	r0, r0, r3
   147ee:	4152      	adcs	r2, r2
   147f0:	08c3      	lsrs	r3, r0, #3
   147f2:	428b      	cmp	r3, r1
   147f4:	d301      	bcc.n	147fa <__divsi3+0xde>
   147f6:	00cb      	lsls	r3, r1, #3
   147f8:	1ac0      	subs	r0, r0, r3
   147fa:	4152      	adcs	r2, r2
   147fc:	0883      	lsrs	r3, r0, #2
   147fe:	428b      	cmp	r3, r1
   14800:	d301      	bcc.n	14806 <__divsi3+0xea>
   14802:	008b      	lsls	r3, r1, #2
   14804:	1ac0      	subs	r0, r0, r3
   14806:	4152      	adcs	r2, r2
   14808:	0843      	lsrs	r3, r0, #1
   1480a:	428b      	cmp	r3, r1
   1480c:	d301      	bcc.n	14812 <__divsi3+0xf6>
   1480e:	004b      	lsls	r3, r1, #1
   14810:	1ac0      	subs	r0, r0, r3
   14812:	4152      	adcs	r2, r2
   14814:	1a41      	subs	r1, r0, r1
   14816:	d200      	bcs.n	1481a <__divsi3+0xfe>
   14818:	4601      	mov	r1, r0
   1481a:	4152      	adcs	r2, r2
   1481c:	4610      	mov	r0, r2
   1481e:	4770      	bx	lr
   14820:	e05d      	b.n	148de <__divsi3+0x1c2>
   14822:	0fca      	lsrs	r2, r1, #31
   14824:	d000      	beq.n	14828 <__divsi3+0x10c>
   14826:	4249      	negs	r1, r1
   14828:	1003      	asrs	r3, r0, #32
   1482a:	d300      	bcc.n	1482e <__divsi3+0x112>
   1482c:	4240      	negs	r0, r0
   1482e:	4053      	eors	r3, r2
   14830:	2200      	movs	r2, #0
   14832:	469c      	mov	ip, r3
   14834:	0903      	lsrs	r3, r0, #4
   14836:	428b      	cmp	r3, r1
   14838:	d32d      	bcc.n	14896 <__divsi3+0x17a>
   1483a:	0a03      	lsrs	r3, r0, #8
   1483c:	428b      	cmp	r3, r1
   1483e:	d312      	bcc.n	14866 <__divsi3+0x14a>
   14840:	22fc      	movs	r2, #252	; 0xfc
   14842:	0189      	lsls	r1, r1, #6
   14844:	ba12      	rev	r2, r2
   14846:	0a03      	lsrs	r3, r0, #8
   14848:	428b      	cmp	r3, r1
   1484a:	d30c      	bcc.n	14866 <__divsi3+0x14a>
   1484c:	0189      	lsls	r1, r1, #6
   1484e:	1192      	asrs	r2, r2, #6
   14850:	428b      	cmp	r3, r1
   14852:	d308      	bcc.n	14866 <__divsi3+0x14a>
   14854:	0189      	lsls	r1, r1, #6
   14856:	1192      	asrs	r2, r2, #6
   14858:	428b      	cmp	r3, r1
   1485a:	d304      	bcc.n	14866 <__divsi3+0x14a>
   1485c:	0189      	lsls	r1, r1, #6
   1485e:	d03a      	beq.n	148d6 <__divsi3+0x1ba>
   14860:	1192      	asrs	r2, r2, #6
   14862:	e000      	b.n	14866 <__divsi3+0x14a>
   14864:	0989      	lsrs	r1, r1, #6
   14866:	09c3      	lsrs	r3, r0, #7
   14868:	428b      	cmp	r3, r1
   1486a:	d301      	bcc.n	14870 <__divsi3+0x154>
   1486c:	01cb      	lsls	r3, r1, #7
   1486e:	1ac0      	subs	r0, r0, r3
   14870:	4152      	adcs	r2, r2
   14872:	0983      	lsrs	r3, r0, #6
   14874:	428b      	cmp	r3, r1
   14876:	d301      	bcc.n	1487c <__divsi3+0x160>
   14878:	018b      	lsls	r3, r1, #6
   1487a:	1ac0      	subs	r0, r0, r3
   1487c:	4152      	adcs	r2, r2
   1487e:	0943      	lsrs	r3, r0, #5
   14880:	428b      	cmp	r3, r1
   14882:	d301      	bcc.n	14888 <__divsi3+0x16c>
   14884:	014b      	lsls	r3, r1, #5
   14886:	1ac0      	subs	r0, r0, r3
   14888:	4152      	adcs	r2, r2
   1488a:	0903      	lsrs	r3, r0, #4
   1488c:	428b      	cmp	r3, r1
   1488e:	d301      	bcc.n	14894 <__divsi3+0x178>
   14890:	010b      	lsls	r3, r1, #4
   14892:	1ac0      	subs	r0, r0, r3
   14894:	4152      	adcs	r2, r2
   14896:	08c3      	lsrs	r3, r0, #3
   14898:	428b      	cmp	r3, r1
   1489a:	d301      	bcc.n	148a0 <__divsi3+0x184>
   1489c:	00cb      	lsls	r3, r1, #3
   1489e:	1ac0      	subs	r0, r0, r3
   148a0:	4152      	adcs	r2, r2
   148a2:	0883      	lsrs	r3, r0, #2
   148a4:	428b      	cmp	r3, r1
   148a6:	d301      	bcc.n	148ac <__divsi3+0x190>
   148a8:	008b      	lsls	r3, r1, #2
   148aa:	1ac0      	subs	r0, r0, r3
   148ac:	4152      	adcs	r2, r2
   148ae:	d2d9      	bcs.n	14864 <__divsi3+0x148>
   148b0:	0843      	lsrs	r3, r0, #1
   148b2:	428b      	cmp	r3, r1
   148b4:	d301      	bcc.n	148ba <__divsi3+0x19e>
   148b6:	004b      	lsls	r3, r1, #1
   148b8:	1ac0      	subs	r0, r0, r3
   148ba:	4152      	adcs	r2, r2
   148bc:	1a41      	subs	r1, r0, r1
   148be:	d200      	bcs.n	148c2 <__divsi3+0x1a6>
   148c0:	4601      	mov	r1, r0
   148c2:	4663      	mov	r3, ip
   148c4:	4152      	adcs	r2, r2
   148c6:	105b      	asrs	r3, r3, #1
   148c8:	4610      	mov	r0, r2
   148ca:	d301      	bcc.n	148d0 <__divsi3+0x1b4>
   148cc:	4240      	negs	r0, r0
   148ce:	2b00      	cmp	r3, #0
   148d0:	d500      	bpl.n	148d4 <__divsi3+0x1b8>
   148d2:	4249      	negs	r1, r1
   148d4:	4770      	bx	lr
   148d6:	4663      	mov	r3, ip
   148d8:	105b      	asrs	r3, r3, #1
   148da:	d300      	bcc.n	148de <__divsi3+0x1c2>
   148dc:	4240      	negs	r0, r0
   148de:	b501      	push	{r0, lr}
   148e0:	2000      	movs	r0, #0
   148e2:	f000 f805 	bl	148f0 <__aeabi_idiv0>
   148e6:	bd02      	pop	{r1, pc}

000148e8 <__aeabi_idivmod>:
   148e8:	2900      	cmp	r1, #0
   148ea:	d0f8      	beq.n	148de <__divsi3+0x1c2>
   148ec:	e716      	b.n	1471c <__divsi3>
   148ee:	4770      	bx	lr

000148f0 <__aeabi_idiv0>:
   148f0:	4770      	bx	lr
   148f2:	46c0      	nop			; (mov r8, r8)

000148f4 <__aeabi_cdrcmple>:
   148f4:	4684      	mov	ip, r0
   148f6:	1c10      	adds	r0, r2, #0
   148f8:	4662      	mov	r2, ip
   148fa:	468c      	mov	ip, r1
   148fc:	1c19      	adds	r1, r3, #0
   148fe:	4663      	mov	r3, ip
   14900:	e000      	b.n	14904 <__aeabi_cdcmpeq>
   14902:	46c0      	nop			; (mov r8, r8)

00014904 <__aeabi_cdcmpeq>:
   14904:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   14906:	f001 ffa3 	bl	16850 <__ledf2>
   1490a:	2800      	cmp	r0, #0
   1490c:	d401      	bmi.n	14912 <__aeabi_cdcmpeq+0xe>
   1490e:	2100      	movs	r1, #0
   14910:	42c8      	cmn	r0, r1
   14912:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00014914 <__aeabi_dcmpeq>:
   14914:	b510      	push	{r4, lr}
   14916:	f001 fefd 	bl	16714 <__eqdf2>
   1491a:	4240      	negs	r0, r0
   1491c:	3001      	adds	r0, #1
   1491e:	bd10      	pop	{r4, pc}

00014920 <__aeabi_dcmplt>:
   14920:	b510      	push	{r4, lr}
   14922:	f001 ff95 	bl	16850 <__ledf2>
   14926:	2800      	cmp	r0, #0
   14928:	db01      	blt.n	1492e <__aeabi_dcmplt+0xe>
   1492a:	2000      	movs	r0, #0
   1492c:	bd10      	pop	{r4, pc}
   1492e:	2001      	movs	r0, #1
   14930:	bd10      	pop	{r4, pc}
   14932:	46c0      	nop			; (mov r8, r8)

00014934 <__aeabi_dcmple>:
   14934:	b510      	push	{r4, lr}
   14936:	f001 ff8b 	bl	16850 <__ledf2>
   1493a:	2800      	cmp	r0, #0
   1493c:	dd01      	ble.n	14942 <__aeabi_dcmple+0xe>
   1493e:	2000      	movs	r0, #0
   14940:	bd10      	pop	{r4, pc}
   14942:	2001      	movs	r0, #1
   14944:	bd10      	pop	{r4, pc}
   14946:	46c0      	nop			; (mov r8, r8)

00014948 <__aeabi_dcmpgt>:
   14948:	b510      	push	{r4, lr}
   1494a:	f001 ff1d 	bl	16788 <__gedf2>
   1494e:	2800      	cmp	r0, #0
   14950:	dc01      	bgt.n	14956 <__aeabi_dcmpgt+0xe>
   14952:	2000      	movs	r0, #0
   14954:	bd10      	pop	{r4, pc}
   14956:	2001      	movs	r0, #1
   14958:	bd10      	pop	{r4, pc}
   1495a:	46c0      	nop			; (mov r8, r8)

0001495c <__aeabi_dcmpge>:
   1495c:	b510      	push	{r4, lr}
   1495e:	f001 ff13 	bl	16788 <__gedf2>
   14962:	2800      	cmp	r0, #0
   14964:	da01      	bge.n	1496a <__aeabi_dcmpge+0xe>
   14966:	2000      	movs	r0, #0
   14968:	bd10      	pop	{r4, pc}
   1496a:	2001      	movs	r0, #1
   1496c:	bd10      	pop	{r4, pc}
   1496e:	46c0      	nop			; (mov r8, r8)

00014970 <__aeabi_cfrcmple>:
   14970:	4684      	mov	ip, r0
   14972:	1c08      	adds	r0, r1, #0
   14974:	4661      	mov	r1, ip
   14976:	e7ff      	b.n	14978 <__aeabi_cfcmpeq>

00014978 <__aeabi_cfcmpeq>:
   14978:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1497a:	f000 fcd3 	bl	15324 <__lesf2>
   1497e:	2800      	cmp	r0, #0
   14980:	d401      	bmi.n	14986 <__aeabi_cfcmpeq+0xe>
   14982:	2100      	movs	r1, #0
   14984:	42c8      	cmn	r0, r1
   14986:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00014988 <__aeabi_fcmpeq>:
   14988:	b510      	push	{r4, lr}
   1498a:	f000 fc65 	bl	15258 <__eqsf2>
   1498e:	4240      	negs	r0, r0
   14990:	3001      	adds	r0, #1
   14992:	bd10      	pop	{r4, pc}

00014994 <__aeabi_fcmplt>:
   14994:	b510      	push	{r4, lr}
   14996:	f000 fcc5 	bl	15324 <__lesf2>
   1499a:	2800      	cmp	r0, #0
   1499c:	db01      	blt.n	149a2 <__aeabi_fcmplt+0xe>
   1499e:	2000      	movs	r0, #0
   149a0:	bd10      	pop	{r4, pc}
   149a2:	2001      	movs	r0, #1
   149a4:	bd10      	pop	{r4, pc}
   149a6:	46c0      	nop			; (mov r8, r8)

000149a8 <__aeabi_fcmple>:
   149a8:	b510      	push	{r4, lr}
   149aa:	f000 fcbb 	bl	15324 <__lesf2>
   149ae:	2800      	cmp	r0, #0
   149b0:	dd01      	ble.n	149b6 <__aeabi_fcmple+0xe>
   149b2:	2000      	movs	r0, #0
   149b4:	bd10      	pop	{r4, pc}
   149b6:	2001      	movs	r0, #1
   149b8:	bd10      	pop	{r4, pc}
   149ba:	46c0      	nop			; (mov r8, r8)

000149bc <__aeabi_fcmpgt>:
   149bc:	b510      	push	{r4, lr}
   149be:	f000 fc71 	bl	152a4 <__gesf2>
   149c2:	2800      	cmp	r0, #0
   149c4:	dc01      	bgt.n	149ca <__aeabi_fcmpgt+0xe>
   149c6:	2000      	movs	r0, #0
   149c8:	bd10      	pop	{r4, pc}
   149ca:	2001      	movs	r0, #1
   149cc:	bd10      	pop	{r4, pc}
   149ce:	46c0      	nop			; (mov r8, r8)

000149d0 <__aeabi_fcmpge>:
   149d0:	b510      	push	{r4, lr}
   149d2:	f000 fc67 	bl	152a4 <__gesf2>
   149d6:	2800      	cmp	r0, #0
   149d8:	da01      	bge.n	149de <__aeabi_fcmpge+0xe>
   149da:	2000      	movs	r0, #0
   149dc:	bd10      	pop	{r4, pc}
   149de:	2001      	movs	r0, #1
   149e0:	bd10      	pop	{r4, pc}
   149e2:	46c0      	nop			; (mov r8, r8)

000149e4 <__aeabi_uldivmod>:
   149e4:	2b00      	cmp	r3, #0
   149e6:	d111      	bne.n	14a0c <__aeabi_uldivmod+0x28>
   149e8:	2a00      	cmp	r2, #0
   149ea:	d10f      	bne.n	14a0c <__aeabi_uldivmod+0x28>
   149ec:	2900      	cmp	r1, #0
   149ee:	d100      	bne.n	149f2 <__aeabi_uldivmod+0xe>
   149f0:	2800      	cmp	r0, #0
   149f2:	d002      	beq.n	149fa <__aeabi_uldivmod+0x16>
   149f4:	2100      	movs	r1, #0
   149f6:	43c9      	mvns	r1, r1
   149f8:	1c08      	adds	r0, r1, #0
   149fa:	b407      	push	{r0, r1, r2}
   149fc:	4802      	ldr	r0, [pc, #8]	; (14a08 <__aeabi_uldivmod+0x24>)
   149fe:	a102      	add	r1, pc, #8	; (adr r1, 14a08 <__aeabi_uldivmod+0x24>)
   14a00:	1840      	adds	r0, r0, r1
   14a02:	9002      	str	r0, [sp, #8]
   14a04:	bd03      	pop	{r0, r1, pc}
   14a06:	46c0      	nop			; (mov r8, r8)
   14a08:	fffffee9 	.word	0xfffffee9
   14a0c:	b403      	push	{r0, r1}
   14a0e:	4668      	mov	r0, sp
   14a10:	b501      	push	{r0, lr}
   14a12:	9802      	ldr	r0, [sp, #8]
   14a14:	f000 f886 	bl	14b24 <__udivmoddi4>
   14a18:	9b01      	ldr	r3, [sp, #4]
   14a1a:	469e      	mov	lr, r3
   14a1c:	b002      	add	sp, #8
   14a1e:	bc0c      	pop	{r2, r3}
   14a20:	4770      	bx	lr
   14a22:	46c0      	nop			; (mov r8, r8)

00014a24 <__aeabi_lmul>:
   14a24:	b5f0      	push	{r4, r5, r6, r7, lr}
   14a26:	46ce      	mov	lr, r9
   14a28:	4647      	mov	r7, r8
   14a2a:	0415      	lsls	r5, r2, #16
   14a2c:	0c2d      	lsrs	r5, r5, #16
   14a2e:	002e      	movs	r6, r5
   14a30:	b580      	push	{r7, lr}
   14a32:	0407      	lsls	r7, r0, #16
   14a34:	0c14      	lsrs	r4, r2, #16
   14a36:	0c3f      	lsrs	r7, r7, #16
   14a38:	4699      	mov	r9, r3
   14a3a:	0c03      	lsrs	r3, r0, #16
   14a3c:	437e      	muls	r6, r7
   14a3e:	435d      	muls	r5, r3
   14a40:	4367      	muls	r7, r4
   14a42:	4363      	muls	r3, r4
   14a44:	197f      	adds	r7, r7, r5
   14a46:	0c34      	lsrs	r4, r6, #16
   14a48:	19e4      	adds	r4, r4, r7
   14a4a:	469c      	mov	ip, r3
   14a4c:	42a5      	cmp	r5, r4
   14a4e:	d903      	bls.n	14a58 <__aeabi_lmul+0x34>
   14a50:	2380      	movs	r3, #128	; 0x80
   14a52:	025b      	lsls	r3, r3, #9
   14a54:	4698      	mov	r8, r3
   14a56:	44c4      	add	ip, r8
   14a58:	464b      	mov	r3, r9
   14a5a:	4351      	muls	r1, r2
   14a5c:	4343      	muls	r3, r0
   14a5e:	0436      	lsls	r6, r6, #16
   14a60:	0c36      	lsrs	r6, r6, #16
   14a62:	0c25      	lsrs	r5, r4, #16
   14a64:	0424      	lsls	r4, r4, #16
   14a66:	4465      	add	r5, ip
   14a68:	19a4      	adds	r4, r4, r6
   14a6a:	1859      	adds	r1, r3, r1
   14a6c:	1949      	adds	r1, r1, r5
   14a6e:	0020      	movs	r0, r4
   14a70:	bc0c      	pop	{r2, r3}
   14a72:	4690      	mov	r8, r2
   14a74:	4699      	mov	r9, r3
   14a76:	bdf0      	pop	{r4, r5, r6, r7, pc}

00014a78 <__aeabi_f2uiz>:
   14a78:	219e      	movs	r1, #158	; 0x9e
   14a7a:	b510      	push	{r4, lr}
   14a7c:	05c9      	lsls	r1, r1, #23
   14a7e:	1c04      	adds	r4, r0, #0
   14a80:	f7ff ffa6 	bl	149d0 <__aeabi_fcmpge>
   14a84:	2800      	cmp	r0, #0
   14a86:	d103      	bne.n	14a90 <__aeabi_f2uiz+0x18>
   14a88:	1c20      	adds	r0, r4, #0
   14a8a:	f000 ff49 	bl	15920 <__aeabi_f2iz>
   14a8e:	bd10      	pop	{r4, pc}
   14a90:	219e      	movs	r1, #158	; 0x9e
   14a92:	1c20      	adds	r0, r4, #0
   14a94:	05c9      	lsls	r1, r1, #23
   14a96:	f000 fda7 	bl	155e8 <__aeabi_fsub>
   14a9a:	f000 ff41 	bl	15920 <__aeabi_f2iz>
   14a9e:	2380      	movs	r3, #128	; 0x80
   14aa0:	061b      	lsls	r3, r3, #24
   14aa2:	469c      	mov	ip, r3
   14aa4:	4460      	add	r0, ip
   14aa6:	e7f2      	b.n	14a8e <__aeabi_f2uiz+0x16>

00014aa8 <__aeabi_d2uiz>:
   14aa8:	b570      	push	{r4, r5, r6, lr}
   14aaa:	2200      	movs	r2, #0
   14aac:	4b0c      	ldr	r3, [pc, #48]	; (14ae0 <__aeabi_d2uiz+0x38>)
   14aae:	0004      	movs	r4, r0
   14ab0:	000d      	movs	r5, r1
   14ab2:	f7ff ff53 	bl	1495c <__aeabi_dcmpge>
   14ab6:	2800      	cmp	r0, #0
   14ab8:	d104      	bne.n	14ac4 <__aeabi_d2uiz+0x1c>
   14aba:	0020      	movs	r0, r4
   14abc:	0029      	movs	r1, r5
   14abe:	f002 fcbf 	bl	17440 <__aeabi_d2iz>
   14ac2:	bd70      	pop	{r4, r5, r6, pc}
   14ac4:	4b06      	ldr	r3, [pc, #24]	; (14ae0 <__aeabi_d2uiz+0x38>)
   14ac6:	2200      	movs	r2, #0
   14ac8:	0020      	movs	r0, r4
   14aca:	0029      	movs	r1, r5
   14acc:	f002 f9a2 	bl	16e14 <__aeabi_dsub>
   14ad0:	f002 fcb6 	bl	17440 <__aeabi_d2iz>
   14ad4:	2380      	movs	r3, #128	; 0x80
   14ad6:	061b      	lsls	r3, r3, #24
   14ad8:	469c      	mov	ip, r3
   14ada:	4460      	add	r0, ip
   14adc:	e7f1      	b.n	14ac2 <__aeabi_d2uiz+0x1a>
   14ade:	46c0      	nop			; (mov r8, r8)
   14ae0:	41e00000 	.word	0x41e00000

00014ae4 <__aeabi_f2ulz>:
   14ae4:	b570      	push	{r4, r5, r6, lr}
   14ae6:	f002 fd59 	bl	1759c <__aeabi_f2d>
   14aea:	2200      	movs	r2, #0
   14aec:	4b0b      	ldr	r3, [pc, #44]	; (14b1c <__aeabi_f2ulz+0x38>)
   14aee:	000d      	movs	r5, r1
   14af0:	0004      	movs	r4, r0
   14af2:	f001 ff0f 	bl	16914 <__aeabi_dmul>
   14af6:	f7ff ffd7 	bl	14aa8 <__aeabi_d2uiz>
   14afa:	0006      	movs	r6, r0
   14afc:	f002 fd16 	bl	1752c <__aeabi_ui2d>
   14b00:	2200      	movs	r2, #0
   14b02:	4b07      	ldr	r3, [pc, #28]	; (14b20 <__aeabi_f2ulz+0x3c>)
   14b04:	f001 ff06 	bl	16914 <__aeabi_dmul>
   14b08:	0002      	movs	r2, r0
   14b0a:	000b      	movs	r3, r1
   14b0c:	0020      	movs	r0, r4
   14b0e:	0029      	movs	r1, r5
   14b10:	f002 f980 	bl	16e14 <__aeabi_dsub>
   14b14:	f7ff ffc8 	bl	14aa8 <__aeabi_d2uiz>
   14b18:	0031      	movs	r1, r6
   14b1a:	bd70      	pop	{r4, r5, r6, pc}
   14b1c:	3df00000 	.word	0x3df00000
   14b20:	41f00000 	.word	0x41f00000

00014b24 <__udivmoddi4>:
   14b24:	b5f0      	push	{r4, r5, r6, r7, lr}
   14b26:	4657      	mov	r7, sl
   14b28:	464e      	mov	r6, r9
   14b2a:	4645      	mov	r5, r8
   14b2c:	46de      	mov	lr, fp
   14b2e:	b5e0      	push	{r5, r6, r7, lr}
   14b30:	0004      	movs	r4, r0
   14b32:	b083      	sub	sp, #12
   14b34:	000d      	movs	r5, r1
   14b36:	4692      	mov	sl, r2
   14b38:	4699      	mov	r9, r3
   14b3a:	428b      	cmp	r3, r1
   14b3c:	d82f      	bhi.n	14b9e <__udivmoddi4+0x7a>
   14b3e:	d02c      	beq.n	14b9a <__udivmoddi4+0x76>
   14b40:	4649      	mov	r1, r9
   14b42:	4650      	mov	r0, sl
   14b44:	f002 fe24 	bl	17790 <__clzdi2>
   14b48:	0029      	movs	r1, r5
   14b4a:	0006      	movs	r6, r0
   14b4c:	0020      	movs	r0, r4
   14b4e:	f002 fe1f 	bl	17790 <__clzdi2>
   14b52:	1a33      	subs	r3, r6, r0
   14b54:	4698      	mov	r8, r3
   14b56:	3b20      	subs	r3, #32
   14b58:	469b      	mov	fp, r3
   14b5a:	d500      	bpl.n	14b5e <__udivmoddi4+0x3a>
   14b5c:	e074      	b.n	14c48 <__udivmoddi4+0x124>
   14b5e:	4653      	mov	r3, sl
   14b60:	465a      	mov	r2, fp
   14b62:	4093      	lsls	r3, r2
   14b64:	001f      	movs	r7, r3
   14b66:	4653      	mov	r3, sl
   14b68:	4642      	mov	r2, r8
   14b6a:	4093      	lsls	r3, r2
   14b6c:	001e      	movs	r6, r3
   14b6e:	42af      	cmp	r7, r5
   14b70:	d829      	bhi.n	14bc6 <__udivmoddi4+0xa2>
   14b72:	d026      	beq.n	14bc2 <__udivmoddi4+0x9e>
   14b74:	465b      	mov	r3, fp
   14b76:	1ba4      	subs	r4, r4, r6
   14b78:	41bd      	sbcs	r5, r7
   14b7a:	2b00      	cmp	r3, #0
   14b7c:	da00      	bge.n	14b80 <__udivmoddi4+0x5c>
   14b7e:	e079      	b.n	14c74 <__udivmoddi4+0x150>
   14b80:	2200      	movs	r2, #0
   14b82:	2300      	movs	r3, #0
   14b84:	9200      	str	r2, [sp, #0]
   14b86:	9301      	str	r3, [sp, #4]
   14b88:	2301      	movs	r3, #1
   14b8a:	465a      	mov	r2, fp
   14b8c:	4093      	lsls	r3, r2
   14b8e:	9301      	str	r3, [sp, #4]
   14b90:	2301      	movs	r3, #1
   14b92:	4642      	mov	r2, r8
   14b94:	4093      	lsls	r3, r2
   14b96:	9300      	str	r3, [sp, #0]
   14b98:	e019      	b.n	14bce <__udivmoddi4+0xaa>
   14b9a:	4282      	cmp	r2, r0
   14b9c:	d9d0      	bls.n	14b40 <__udivmoddi4+0x1c>
   14b9e:	2200      	movs	r2, #0
   14ba0:	2300      	movs	r3, #0
   14ba2:	9200      	str	r2, [sp, #0]
   14ba4:	9301      	str	r3, [sp, #4]
   14ba6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14ba8:	2b00      	cmp	r3, #0
   14baa:	d001      	beq.n	14bb0 <__udivmoddi4+0x8c>
   14bac:	601c      	str	r4, [r3, #0]
   14bae:	605d      	str	r5, [r3, #4]
   14bb0:	9800      	ldr	r0, [sp, #0]
   14bb2:	9901      	ldr	r1, [sp, #4]
   14bb4:	b003      	add	sp, #12
   14bb6:	bc3c      	pop	{r2, r3, r4, r5}
   14bb8:	4690      	mov	r8, r2
   14bba:	4699      	mov	r9, r3
   14bbc:	46a2      	mov	sl, r4
   14bbe:	46ab      	mov	fp, r5
   14bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14bc2:	42a3      	cmp	r3, r4
   14bc4:	d9d6      	bls.n	14b74 <__udivmoddi4+0x50>
   14bc6:	2200      	movs	r2, #0
   14bc8:	2300      	movs	r3, #0
   14bca:	9200      	str	r2, [sp, #0]
   14bcc:	9301      	str	r3, [sp, #4]
   14bce:	4643      	mov	r3, r8
   14bd0:	2b00      	cmp	r3, #0
   14bd2:	d0e8      	beq.n	14ba6 <__udivmoddi4+0x82>
   14bd4:	07fb      	lsls	r3, r7, #31
   14bd6:	0872      	lsrs	r2, r6, #1
   14bd8:	431a      	orrs	r2, r3
   14bda:	4646      	mov	r6, r8
   14bdc:	087b      	lsrs	r3, r7, #1
   14bde:	e00e      	b.n	14bfe <__udivmoddi4+0xda>
   14be0:	42ab      	cmp	r3, r5
   14be2:	d101      	bne.n	14be8 <__udivmoddi4+0xc4>
   14be4:	42a2      	cmp	r2, r4
   14be6:	d80c      	bhi.n	14c02 <__udivmoddi4+0xde>
   14be8:	1aa4      	subs	r4, r4, r2
   14bea:	419d      	sbcs	r5, r3
   14bec:	2001      	movs	r0, #1
   14bee:	1924      	adds	r4, r4, r4
   14bf0:	416d      	adcs	r5, r5
   14bf2:	2100      	movs	r1, #0
   14bf4:	3e01      	subs	r6, #1
   14bf6:	1824      	adds	r4, r4, r0
   14bf8:	414d      	adcs	r5, r1
   14bfa:	2e00      	cmp	r6, #0
   14bfc:	d006      	beq.n	14c0c <__udivmoddi4+0xe8>
   14bfe:	42ab      	cmp	r3, r5
   14c00:	d9ee      	bls.n	14be0 <__udivmoddi4+0xbc>
   14c02:	3e01      	subs	r6, #1
   14c04:	1924      	adds	r4, r4, r4
   14c06:	416d      	adcs	r5, r5
   14c08:	2e00      	cmp	r6, #0
   14c0a:	d1f8      	bne.n	14bfe <__udivmoddi4+0xda>
   14c0c:	465b      	mov	r3, fp
   14c0e:	9800      	ldr	r0, [sp, #0]
   14c10:	9901      	ldr	r1, [sp, #4]
   14c12:	1900      	adds	r0, r0, r4
   14c14:	4169      	adcs	r1, r5
   14c16:	2b00      	cmp	r3, #0
   14c18:	db22      	blt.n	14c60 <__udivmoddi4+0x13c>
   14c1a:	002b      	movs	r3, r5
   14c1c:	465a      	mov	r2, fp
   14c1e:	40d3      	lsrs	r3, r2
   14c20:	002a      	movs	r2, r5
   14c22:	4644      	mov	r4, r8
   14c24:	40e2      	lsrs	r2, r4
   14c26:	001c      	movs	r4, r3
   14c28:	465b      	mov	r3, fp
   14c2a:	0015      	movs	r5, r2
   14c2c:	2b00      	cmp	r3, #0
   14c2e:	db2c      	blt.n	14c8a <__udivmoddi4+0x166>
   14c30:	0026      	movs	r6, r4
   14c32:	409e      	lsls	r6, r3
   14c34:	0033      	movs	r3, r6
   14c36:	0026      	movs	r6, r4
   14c38:	4647      	mov	r7, r8
   14c3a:	40be      	lsls	r6, r7
   14c3c:	0032      	movs	r2, r6
   14c3e:	1a80      	subs	r0, r0, r2
   14c40:	4199      	sbcs	r1, r3
   14c42:	9000      	str	r0, [sp, #0]
   14c44:	9101      	str	r1, [sp, #4]
   14c46:	e7ae      	b.n	14ba6 <__udivmoddi4+0x82>
   14c48:	4642      	mov	r2, r8
   14c4a:	2320      	movs	r3, #32
   14c4c:	1a9b      	subs	r3, r3, r2
   14c4e:	4652      	mov	r2, sl
   14c50:	40da      	lsrs	r2, r3
   14c52:	4641      	mov	r1, r8
   14c54:	0013      	movs	r3, r2
   14c56:	464a      	mov	r2, r9
   14c58:	408a      	lsls	r2, r1
   14c5a:	0017      	movs	r7, r2
   14c5c:	431f      	orrs	r7, r3
   14c5e:	e782      	b.n	14b66 <__udivmoddi4+0x42>
   14c60:	4642      	mov	r2, r8
   14c62:	2320      	movs	r3, #32
   14c64:	1a9b      	subs	r3, r3, r2
   14c66:	002a      	movs	r2, r5
   14c68:	4646      	mov	r6, r8
   14c6a:	409a      	lsls	r2, r3
   14c6c:	0023      	movs	r3, r4
   14c6e:	40f3      	lsrs	r3, r6
   14c70:	4313      	orrs	r3, r2
   14c72:	e7d5      	b.n	14c20 <__udivmoddi4+0xfc>
   14c74:	4642      	mov	r2, r8
   14c76:	2320      	movs	r3, #32
   14c78:	2100      	movs	r1, #0
   14c7a:	1a9b      	subs	r3, r3, r2
   14c7c:	2200      	movs	r2, #0
   14c7e:	9100      	str	r1, [sp, #0]
   14c80:	9201      	str	r2, [sp, #4]
   14c82:	2201      	movs	r2, #1
   14c84:	40da      	lsrs	r2, r3
   14c86:	9201      	str	r2, [sp, #4]
   14c88:	e782      	b.n	14b90 <__udivmoddi4+0x6c>
   14c8a:	4642      	mov	r2, r8
   14c8c:	2320      	movs	r3, #32
   14c8e:	0026      	movs	r6, r4
   14c90:	1a9b      	subs	r3, r3, r2
   14c92:	40de      	lsrs	r6, r3
   14c94:	002f      	movs	r7, r5
   14c96:	46b4      	mov	ip, r6
   14c98:	4097      	lsls	r7, r2
   14c9a:	4666      	mov	r6, ip
   14c9c:	003b      	movs	r3, r7
   14c9e:	4333      	orrs	r3, r6
   14ca0:	e7c9      	b.n	14c36 <__udivmoddi4+0x112>
   14ca2:	46c0      	nop			; (mov r8, r8)

00014ca4 <__aeabi_fadd>:
   14ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
   14ca6:	46c6      	mov	lr, r8
   14ca8:	024e      	lsls	r6, r1, #9
   14caa:	0247      	lsls	r7, r0, #9
   14cac:	0a76      	lsrs	r6, r6, #9
   14cae:	0a7b      	lsrs	r3, r7, #9
   14cb0:	0044      	lsls	r4, r0, #1
   14cb2:	0fc5      	lsrs	r5, r0, #31
   14cb4:	00f7      	lsls	r7, r6, #3
   14cb6:	0048      	lsls	r0, r1, #1
   14cb8:	4698      	mov	r8, r3
   14cba:	b500      	push	{lr}
   14cbc:	0e24      	lsrs	r4, r4, #24
   14cbe:	002a      	movs	r2, r5
   14cc0:	00db      	lsls	r3, r3, #3
   14cc2:	0e00      	lsrs	r0, r0, #24
   14cc4:	0fc9      	lsrs	r1, r1, #31
   14cc6:	46bc      	mov	ip, r7
   14cc8:	428d      	cmp	r5, r1
   14cca:	d067      	beq.n	14d9c <__aeabi_fadd+0xf8>
   14ccc:	1a22      	subs	r2, r4, r0
   14cce:	2a00      	cmp	r2, #0
   14cd0:	dc00      	bgt.n	14cd4 <__aeabi_fadd+0x30>
   14cd2:	e0a5      	b.n	14e20 <__aeabi_fadd+0x17c>
   14cd4:	2800      	cmp	r0, #0
   14cd6:	d13a      	bne.n	14d4e <__aeabi_fadd+0xaa>
   14cd8:	2f00      	cmp	r7, #0
   14cda:	d100      	bne.n	14cde <__aeabi_fadd+0x3a>
   14cdc:	e093      	b.n	14e06 <__aeabi_fadd+0x162>
   14cde:	1e51      	subs	r1, r2, #1
   14ce0:	2900      	cmp	r1, #0
   14ce2:	d000      	beq.n	14ce6 <__aeabi_fadd+0x42>
   14ce4:	e0bc      	b.n	14e60 <__aeabi_fadd+0x1bc>
   14ce6:	2401      	movs	r4, #1
   14ce8:	1bdb      	subs	r3, r3, r7
   14cea:	015a      	lsls	r2, r3, #5
   14cec:	d546      	bpl.n	14d7c <__aeabi_fadd+0xd8>
   14cee:	019b      	lsls	r3, r3, #6
   14cf0:	099e      	lsrs	r6, r3, #6
   14cf2:	0030      	movs	r0, r6
   14cf4:	f002 fd2e 	bl	17754 <__clzsi2>
   14cf8:	3805      	subs	r0, #5
   14cfa:	4086      	lsls	r6, r0
   14cfc:	4284      	cmp	r4, r0
   14cfe:	dd00      	ble.n	14d02 <__aeabi_fadd+0x5e>
   14d00:	e09d      	b.n	14e3e <__aeabi_fadd+0x19a>
   14d02:	1b04      	subs	r4, r0, r4
   14d04:	0032      	movs	r2, r6
   14d06:	2020      	movs	r0, #32
   14d08:	3401      	adds	r4, #1
   14d0a:	40e2      	lsrs	r2, r4
   14d0c:	1b04      	subs	r4, r0, r4
   14d0e:	40a6      	lsls	r6, r4
   14d10:	0033      	movs	r3, r6
   14d12:	1e5e      	subs	r6, r3, #1
   14d14:	41b3      	sbcs	r3, r6
   14d16:	2400      	movs	r4, #0
   14d18:	4313      	orrs	r3, r2
   14d1a:	075a      	lsls	r2, r3, #29
   14d1c:	d004      	beq.n	14d28 <__aeabi_fadd+0x84>
   14d1e:	220f      	movs	r2, #15
   14d20:	401a      	ands	r2, r3
   14d22:	2a04      	cmp	r2, #4
   14d24:	d000      	beq.n	14d28 <__aeabi_fadd+0x84>
   14d26:	3304      	adds	r3, #4
   14d28:	015a      	lsls	r2, r3, #5
   14d2a:	d529      	bpl.n	14d80 <__aeabi_fadd+0xdc>
   14d2c:	3401      	adds	r4, #1
   14d2e:	2cff      	cmp	r4, #255	; 0xff
   14d30:	d100      	bne.n	14d34 <__aeabi_fadd+0x90>
   14d32:	e081      	b.n	14e38 <__aeabi_fadd+0x194>
   14d34:	002a      	movs	r2, r5
   14d36:	019b      	lsls	r3, r3, #6
   14d38:	0a5b      	lsrs	r3, r3, #9
   14d3a:	b2e4      	uxtb	r4, r4
   14d3c:	025b      	lsls	r3, r3, #9
   14d3e:	05e4      	lsls	r4, r4, #23
   14d40:	0a58      	lsrs	r0, r3, #9
   14d42:	07d2      	lsls	r2, r2, #31
   14d44:	4320      	orrs	r0, r4
   14d46:	4310      	orrs	r0, r2
   14d48:	bc04      	pop	{r2}
   14d4a:	4690      	mov	r8, r2
   14d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14d4e:	2cff      	cmp	r4, #255	; 0xff
   14d50:	d0e3      	beq.n	14d1a <__aeabi_fadd+0x76>
   14d52:	2180      	movs	r1, #128	; 0x80
   14d54:	0038      	movs	r0, r7
   14d56:	04c9      	lsls	r1, r1, #19
   14d58:	4308      	orrs	r0, r1
   14d5a:	4684      	mov	ip, r0
   14d5c:	2a1b      	cmp	r2, #27
   14d5e:	dd00      	ble.n	14d62 <__aeabi_fadd+0xbe>
   14d60:	e082      	b.n	14e68 <__aeabi_fadd+0x1c4>
   14d62:	2020      	movs	r0, #32
   14d64:	4661      	mov	r1, ip
   14d66:	40d1      	lsrs	r1, r2
   14d68:	1a82      	subs	r2, r0, r2
   14d6a:	4660      	mov	r0, ip
   14d6c:	4090      	lsls	r0, r2
   14d6e:	0002      	movs	r2, r0
   14d70:	1e50      	subs	r0, r2, #1
   14d72:	4182      	sbcs	r2, r0
   14d74:	430a      	orrs	r2, r1
   14d76:	1a9b      	subs	r3, r3, r2
   14d78:	015a      	lsls	r2, r3, #5
   14d7a:	d4b8      	bmi.n	14cee <__aeabi_fadd+0x4a>
   14d7c:	075a      	lsls	r2, r3, #29
   14d7e:	d1ce      	bne.n	14d1e <__aeabi_fadd+0x7a>
   14d80:	08de      	lsrs	r6, r3, #3
   14d82:	002a      	movs	r2, r5
   14d84:	2cff      	cmp	r4, #255	; 0xff
   14d86:	d13a      	bne.n	14dfe <__aeabi_fadd+0x15a>
   14d88:	2e00      	cmp	r6, #0
   14d8a:	d100      	bne.n	14d8e <__aeabi_fadd+0xea>
   14d8c:	e0ae      	b.n	14eec <__aeabi_fadd+0x248>
   14d8e:	2380      	movs	r3, #128	; 0x80
   14d90:	03db      	lsls	r3, r3, #15
   14d92:	4333      	orrs	r3, r6
   14d94:	025b      	lsls	r3, r3, #9
   14d96:	0a5b      	lsrs	r3, r3, #9
   14d98:	24ff      	movs	r4, #255	; 0xff
   14d9a:	e7cf      	b.n	14d3c <__aeabi_fadd+0x98>
   14d9c:	1a21      	subs	r1, r4, r0
   14d9e:	2900      	cmp	r1, #0
   14da0:	dd52      	ble.n	14e48 <__aeabi_fadd+0x1a4>
   14da2:	2800      	cmp	r0, #0
   14da4:	d031      	beq.n	14e0a <__aeabi_fadd+0x166>
   14da6:	2cff      	cmp	r4, #255	; 0xff
   14da8:	d0b7      	beq.n	14d1a <__aeabi_fadd+0x76>
   14daa:	2080      	movs	r0, #128	; 0x80
   14dac:	003e      	movs	r6, r7
   14dae:	04c0      	lsls	r0, r0, #19
   14db0:	4306      	orrs	r6, r0
   14db2:	46b4      	mov	ip, r6
   14db4:	291b      	cmp	r1, #27
   14db6:	dd00      	ble.n	14dba <__aeabi_fadd+0x116>
   14db8:	e0aa      	b.n	14f10 <__aeabi_fadd+0x26c>
   14dba:	2620      	movs	r6, #32
   14dbc:	4660      	mov	r0, ip
   14dbe:	40c8      	lsrs	r0, r1
   14dc0:	1a71      	subs	r1, r6, r1
   14dc2:	4666      	mov	r6, ip
   14dc4:	408e      	lsls	r6, r1
   14dc6:	0031      	movs	r1, r6
   14dc8:	1e4e      	subs	r6, r1, #1
   14dca:	41b1      	sbcs	r1, r6
   14dcc:	4301      	orrs	r1, r0
   14dce:	185b      	adds	r3, r3, r1
   14dd0:	0159      	lsls	r1, r3, #5
   14dd2:	d5d3      	bpl.n	14d7c <__aeabi_fadd+0xd8>
   14dd4:	3401      	adds	r4, #1
   14dd6:	2cff      	cmp	r4, #255	; 0xff
   14dd8:	d100      	bne.n	14ddc <__aeabi_fadd+0x138>
   14dda:	e087      	b.n	14eec <__aeabi_fadd+0x248>
   14ddc:	2201      	movs	r2, #1
   14dde:	4978      	ldr	r1, [pc, #480]	; (14fc0 <__aeabi_fadd+0x31c>)
   14de0:	401a      	ands	r2, r3
   14de2:	085b      	lsrs	r3, r3, #1
   14de4:	400b      	ands	r3, r1
   14de6:	4313      	orrs	r3, r2
   14de8:	e797      	b.n	14d1a <__aeabi_fadd+0x76>
   14dea:	2c00      	cmp	r4, #0
   14dec:	d000      	beq.n	14df0 <__aeabi_fadd+0x14c>
   14dee:	e0a7      	b.n	14f40 <__aeabi_fadd+0x29c>
   14df0:	2b00      	cmp	r3, #0
   14df2:	d000      	beq.n	14df6 <__aeabi_fadd+0x152>
   14df4:	e0b6      	b.n	14f64 <__aeabi_fadd+0x2c0>
   14df6:	1e3b      	subs	r3, r7, #0
   14df8:	d162      	bne.n	14ec0 <__aeabi_fadd+0x21c>
   14dfa:	2600      	movs	r6, #0
   14dfc:	2200      	movs	r2, #0
   14dfe:	0273      	lsls	r3, r6, #9
   14e00:	0a5b      	lsrs	r3, r3, #9
   14e02:	b2e4      	uxtb	r4, r4
   14e04:	e79a      	b.n	14d3c <__aeabi_fadd+0x98>
   14e06:	0014      	movs	r4, r2
   14e08:	e787      	b.n	14d1a <__aeabi_fadd+0x76>
   14e0a:	2f00      	cmp	r7, #0
   14e0c:	d04d      	beq.n	14eaa <__aeabi_fadd+0x206>
   14e0e:	1e48      	subs	r0, r1, #1
   14e10:	2800      	cmp	r0, #0
   14e12:	d157      	bne.n	14ec4 <__aeabi_fadd+0x220>
   14e14:	4463      	add	r3, ip
   14e16:	2401      	movs	r4, #1
   14e18:	015a      	lsls	r2, r3, #5
   14e1a:	d5af      	bpl.n	14d7c <__aeabi_fadd+0xd8>
   14e1c:	2402      	movs	r4, #2
   14e1e:	e7dd      	b.n	14ddc <__aeabi_fadd+0x138>
   14e20:	2a00      	cmp	r2, #0
   14e22:	d124      	bne.n	14e6e <__aeabi_fadd+0x1ca>
   14e24:	1c62      	adds	r2, r4, #1
   14e26:	b2d2      	uxtb	r2, r2
   14e28:	2a01      	cmp	r2, #1
   14e2a:	ddde      	ble.n	14dea <__aeabi_fadd+0x146>
   14e2c:	1bde      	subs	r6, r3, r7
   14e2e:	0172      	lsls	r2, r6, #5
   14e30:	d535      	bpl.n	14e9e <__aeabi_fadd+0x1fa>
   14e32:	1afe      	subs	r6, r7, r3
   14e34:	000d      	movs	r5, r1
   14e36:	e75c      	b.n	14cf2 <__aeabi_fadd+0x4e>
   14e38:	002a      	movs	r2, r5
   14e3a:	2300      	movs	r3, #0
   14e3c:	e77e      	b.n	14d3c <__aeabi_fadd+0x98>
   14e3e:	0033      	movs	r3, r6
   14e40:	4a60      	ldr	r2, [pc, #384]	; (14fc4 <__aeabi_fadd+0x320>)
   14e42:	1a24      	subs	r4, r4, r0
   14e44:	4013      	ands	r3, r2
   14e46:	e768      	b.n	14d1a <__aeabi_fadd+0x76>
   14e48:	2900      	cmp	r1, #0
   14e4a:	d163      	bne.n	14f14 <__aeabi_fadd+0x270>
   14e4c:	1c61      	adds	r1, r4, #1
   14e4e:	b2c8      	uxtb	r0, r1
   14e50:	2801      	cmp	r0, #1
   14e52:	dd4e      	ble.n	14ef2 <__aeabi_fadd+0x24e>
   14e54:	29ff      	cmp	r1, #255	; 0xff
   14e56:	d049      	beq.n	14eec <__aeabi_fadd+0x248>
   14e58:	4463      	add	r3, ip
   14e5a:	085b      	lsrs	r3, r3, #1
   14e5c:	000c      	movs	r4, r1
   14e5e:	e75c      	b.n	14d1a <__aeabi_fadd+0x76>
   14e60:	2aff      	cmp	r2, #255	; 0xff
   14e62:	d041      	beq.n	14ee8 <__aeabi_fadd+0x244>
   14e64:	000a      	movs	r2, r1
   14e66:	e779      	b.n	14d5c <__aeabi_fadd+0xb8>
   14e68:	2201      	movs	r2, #1
   14e6a:	1a9b      	subs	r3, r3, r2
   14e6c:	e784      	b.n	14d78 <__aeabi_fadd+0xd4>
   14e6e:	2c00      	cmp	r4, #0
   14e70:	d01d      	beq.n	14eae <__aeabi_fadd+0x20a>
   14e72:	28ff      	cmp	r0, #255	; 0xff
   14e74:	d022      	beq.n	14ebc <__aeabi_fadd+0x218>
   14e76:	2480      	movs	r4, #128	; 0x80
   14e78:	04e4      	lsls	r4, r4, #19
   14e7a:	4252      	negs	r2, r2
   14e7c:	4323      	orrs	r3, r4
   14e7e:	2a1b      	cmp	r2, #27
   14e80:	dd00      	ble.n	14e84 <__aeabi_fadd+0x1e0>
   14e82:	e08a      	b.n	14f9a <__aeabi_fadd+0x2f6>
   14e84:	001c      	movs	r4, r3
   14e86:	2520      	movs	r5, #32
   14e88:	40d4      	lsrs	r4, r2
   14e8a:	1aaa      	subs	r2, r5, r2
   14e8c:	4093      	lsls	r3, r2
   14e8e:	1e5a      	subs	r2, r3, #1
   14e90:	4193      	sbcs	r3, r2
   14e92:	4323      	orrs	r3, r4
   14e94:	4662      	mov	r2, ip
   14e96:	0004      	movs	r4, r0
   14e98:	1ad3      	subs	r3, r2, r3
   14e9a:	000d      	movs	r5, r1
   14e9c:	e725      	b.n	14cea <__aeabi_fadd+0x46>
   14e9e:	2e00      	cmp	r6, #0
   14ea0:	d000      	beq.n	14ea4 <__aeabi_fadd+0x200>
   14ea2:	e726      	b.n	14cf2 <__aeabi_fadd+0x4e>
   14ea4:	2200      	movs	r2, #0
   14ea6:	2400      	movs	r4, #0
   14ea8:	e7a9      	b.n	14dfe <__aeabi_fadd+0x15a>
   14eaa:	000c      	movs	r4, r1
   14eac:	e735      	b.n	14d1a <__aeabi_fadd+0x76>
   14eae:	2b00      	cmp	r3, #0
   14eb0:	d04d      	beq.n	14f4e <__aeabi_fadd+0x2aa>
   14eb2:	43d2      	mvns	r2, r2
   14eb4:	2a00      	cmp	r2, #0
   14eb6:	d0ed      	beq.n	14e94 <__aeabi_fadd+0x1f0>
   14eb8:	28ff      	cmp	r0, #255	; 0xff
   14eba:	d1e0      	bne.n	14e7e <__aeabi_fadd+0x1da>
   14ebc:	4663      	mov	r3, ip
   14ebe:	24ff      	movs	r4, #255	; 0xff
   14ec0:	000d      	movs	r5, r1
   14ec2:	e72a      	b.n	14d1a <__aeabi_fadd+0x76>
   14ec4:	29ff      	cmp	r1, #255	; 0xff
   14ec6:	d00f      	beq.n	14ee8 <__aeabi_fadd+0x244>
   14ec8:	0001      	movs	r1, r0
   14eca:	e773      	b.n	14db4 <__aeabi_fadd+0x110>
   14ecc:	2b00      	cmp	r3, #0
   14ece:	d061      	beq.n	14f94 <__aeabi_fadd+0x2f0>
   14ed0:	24ff      	movs	r4, #255	; 0xff
   14ed2:	2f00      	cmp	r7, #0
   14ed4:	d100      	bne.n	14ed8 <__aeabi_fadd+0x234>
   14ed6:	e720      	b.n	14d1a <__aeabi_fadd+0x76>
   14ed8:	2280      	movs	r2, #128	; 0x80
   14eda:	4641      	mov	r1, r8
   14edc:	03d2      	lsls	r2, r2, #15
   14ede:	4211      	tst	r1, r2
   14ee0:	d002      	beq.n	14ee8 <__aeabi_fadd+0x244>
   14ee2:	4216      	tst	r6, r2
   14ee4:	d100      	bne.n	14ee8 <__aeabi_fadd+0x244>
   14ee6:	003b      	movs	r3, r7
   14ee8:	24ff      	movs	r4, #255	; 0xff
   14eea:	e716      	b.n	14d1a <__aeabi_fadd+0x76>
   14eec:	24ff      	movs	r4, #255	; 0xff
   14eee:	2300      	movs	r3, #0
   14ef0:	e724      	b.n	14d3c <__aeabi_fadd+0x98>
   14ef2:	2c00      	cmp	r4, #0
   14ef4:	d1ea      	bne.n	14ecc <__aeabi_fadd+0x228>
   14ef6:	2b00      	cmp	r3, #0
   14ef8:	d058      	beq.n	14fac <__aeabi_fadd+0x308>
   14efa:	2f00      	cmp	r7, #0
   14efc:	d100      	bne.n	14f00 <__aeabi_fadd+0x25c>
   14efe:	e70c      	b.n	14d1a <__aeabi_fadd+0x76>
   14f00:	4463      	add	r3, ip
   14f02:	015a      	lsls	r2, r3, #5
   14f04:	d400      	bmi.n	14f08 <__aeabi_fadd+0x264>
   14f06:	e739      	b.n	14d7c <__aeabi_fadd+0xd8>
   14f08:	4a2e      	ldr	r2, [pc, #184]	; (14fc4 <__aeabi_fadd+0x320>)
   14f0a:	000c      	movs	r4, r1
   14f0c:	4013      	ands	r3, r2
   14f0e:	e704      	b.n	14d1a <__aeabi_fadd+0x76>
   14f10:	2101      	movs	r1, #1
   14f12:	e75c      	b.n	14dce <__aeabi_fadd+0x12a>
   14f14:	2c00      	cmp	r4, #0
   14f16:	d11e      	bne.n	14f56 <__aeabi_fadd+0x2b2>
   14f18:	2b00      	cmp	r3, #0
   14f1a:	d040      	beq.n	14f9e <__aeabi_fadd+0x2fa>
   14f1c:	43c9      	mvns	r1, r1
   14f1e:	2900      	cmp	r1, #0
   14f20:	d00b      	beq.n	14f3a <__aeabi_fadd+0x296>
   14f22:	28ff      	cmp	r0, #255	; 0xff
   14f24:	d036      	beq.n	14f94 <__aeabi_fadd+0x2f0>
   14f26:	291b      	cmp	r1, #27
   14f28:	dc47      	bgt.n	14fba <__aeabi_fadd+0x316>
   14f2a:	001c      	movs	r4, r3
   14f2c:	2620      	movs	r6, #32
   14f2e:	40cc      	lsrs	r4, r1
   14f30:	1a71      	subs	r1, r6, r1
   14f32:	408b      	lsls	r3, r1
   14f34:	1e59      	subs	r1, r3, #1
   14f36:	418b      	sbcs	r3, r1
   14f38:	4323      	orrs	r3, r4
   14f3a:	4463      	add	r3, ip
   14f3c:	0004      	movs	r4, r0
   14f3e:	e747      	b.n	14dd0 <__aeabi_fadd+0x12c>
   14f40:	2b00      	cmp	r3, #0
   14f42:	d118      	bne.n	14f76 <__aeabi_fadd+0x2d2>
   14f44:	1e3b      	subs	r3, r7, #0
   14f46:	d02d      	beq.n	14fa4 <__aeabi_fadd+0x300>
   14f48:	000d      	movs	r5, r1
   14f4a:	24ff      	movs	r4, #255	; 0xff
   14f4c:	e6e5      	b.n	14d1a <__aeabi_fadd+0x76>
   14f4e:	003b      	movs	r3, r7
   14f50:	0004      	movs	r4, r0
   14f52:	000d      	movs	r5, r1
   14f54:	e6e1      	b.n	14d1a <__aeabi_fadd+0x76>
   14f56:	28ff      	cmp	r0, #255	; 0xff
   14f58:	d01c      	beq.n	14f94 <__aeabi_fadd+0x2f0>
   14f5a:	2480      	movs	r4, #128	; 0x80
   14f5c:	04e4      	lsls	r4, r4, #19
   14f5e:	4249      	negs	r1, r1
   14f60:	4323      	orrs	r3, r4
   14f62:	e7e0      	b.n	14f26 <__aeabi_fadd+0x282>
   14f64:	2f00      	cmp	r7, #0
   14f66:	d100      	bne.n	14f6a <__aeabi_fadd+0x2c6>
   14f68:	e6d7      	b.n	14d1a <__aeabi_fadd+0x76>
   14f6a:	1bde      	subs	r6, r3, r7
   14f6c:	0172      	lsls	r2, r6, #5
   14f6e:	d51f      	bpl.n	14fb0 <__aeabi_fadd+0x30c>
   14f70:	1afb      	subs	r3, r7, r3
   14f72:	000d      	movs	r5, r1
   14f74:	e6d1      	b.n	14d1a <__aeabi_fadd+0x76>
   14f76:	24ff      	movs	r4, #255	; 0xff
   14f78:	2f00      	cmp	r7, #0
   14f7a:	d100      	bne.n	14f7e <__aeabi_fadd+0x2da>
   14f7c:	e6cd      	b.n	14d1a <__aeabi_fadd+0x76>
   14f7e:	2280      	movs	r2, #128	; 0x80
   14f80:	4640      	mov	r0, r8
   14f82:	03d2      	lsls	r2, r2, #15
   14f84:	4210      	tst	r0, r2
   14f86:	d0af      	beq.n	14ee8 <__aeabi_fadd+0x244>
   14f88:	4216      	tst	r6, r2
   14f8a:	d1ad      	bne.n	14ee8 <__aeabi_fadd+0x244>
   14f8c:	003b      	movs	r3, r7
   14f8e:	000d      	movs	r5, r1
   14f90:	24ff      	movs	r4, #255	; 0xff
   14f92:	e6c2      	b.n	14d1a <__aeabi_fadd+0x76>
   14f94:	4663      	mov	r3, ip
   14f96:	24ff      	movs	r4, #255	; 0xff
   14f98:	e6bf      	b.n	14d1a <__aeabi_fadd+0x76>
   14f9a:	2301      	movs	r3, #1
   14f9c:	e77a      	b.n	14e94 <__aeabi_fadd+0x1f0>
   14f9e:	003b      	movs	r3, r7
   14fa0:	0004      	movs	r4, r0
   14fa2:	e6ba      	b.n	14d1a <__aeabi_fadd+0x76>
   14fa4:	2680      	movs	r6, #128	; 0x80
   14fa6:	2200      	movs	r2, #0
   14fa8:	03f6      	lsls	r6, r6, #15
   14faa:	e6f0      	b.n	14d8e <__aeabi_fadd+0xea>
   14fac:	003b      	movs	r3, r7
   14fae:	e6b4      	b.n	14d1a <__aeabi_fadd+0x76>
   14fb0:	1e33      	subs	r3, r6, #0
   14fb2:	d000      	beq.n	14fb6 <__aeabi_fadd+0x312>
   14fb4:	e6e2      	b.n	14d7c <__aeabi_fadd+0xd8>
   14fb6:	2200      	movs	r2, #0
   14fb8:	e721      	b.n	14dfe <__aeabi_fadd+0x15a>
   14fba:	2301      	movs	r3, #1
   14fbc:	e7bd      	b.n	14f3a <__aeabi_fadd+0x296>
   14fbe:	46c0      	nop			; (mov r8, r8)
   14fc0:	7dffffff 	.word	0x7dffffff
   14fc4:	fbffffff 	.word	0xfbffffff

00014fc8 <__aeabi_fdiv>:
   14fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   14fca:	4657      	mov	r7, sl
   14fcc:	464e      	mov	r6, r9
   14fce:	46de      	mov	lr, fp
   14fd0:	4645      	mov	r5, r8
   14fd2:	b5e0      	push	{r5, r6, r7, lr}
   14fd4:	0244      	lsls	r4, r0, #9
   14fd6:	0043      	lsls	r3, r0, #1
   14fd8:	0fc6      	lsrs	r6, r0, #31
   14fda:	b083      	sub	sp, #12
   14fdc:	1c0f      	adds	r7, r1, #0
   14fde:	0a64      	lsrs	r4, r4, #9
   14fe0:	0e1b      	lsrs	r3, r3, #24
   14fe2:	46b2      	mov	sl, r6
   14fe4:	d053      	beq.n	1508e <__aeabi_fdiv+0xc6>
   14fe6:	2bff      	cmp	r3, #255	; 0xff
   14fe8:	d027      	beq.n	1503a <__aeabi_fdiv+0x72>
   14fea:	2280      	movs	r2, #128	; 0x80
   14fec:	00e4      	lsls	r4, r4, #3
   14fee:	04d2      	lsls	r2, r2, #19
   14ff0:	4314      	orrs	r4, r2
   14ff2:	227f      	movs	r2, #127	; 0x7f
   14ff4:	4252      	negs	r2, r2
   14ff6:	4690      	mov	r8, r2
   14ff8:	4498      	add	r8, r3
   14ffa:	2300      	movs	r3, #0
   14ffc:	4699      	mov	r9, r3
   14ffe:	469b      	mov	fp, r3
   15000:	027d      	lsls	r5, r7, #9
   15002:	0078      	lsls	r0, r7, #1
   15004:	0ffb      	lsrs	r3, r7, #31
   15006:	0a6d      	lsrs	r5, r5, #9
   15008:	0e00      	lsrs	r0, r0, #24
   1500a:	9300      	str	r3, [sp, #0]
   1500c:	d024      	beq.n	15058 <__aeabi_fdiv+0x90>
   1500e:	28ff      	cmp	r0, #255	; 0xff
   15010:	d046      	beq.n	150a0 <__aeabi_fdiv+0xd8>
   15012:	2380      	movs	r3, #128	; 0x80
   15014:	2100      	movs	r1, #0
   15016:	00ed      	lsls	r5, r5, #3
   15018:	04db      	lsls	r3, r3, #19
   1501a:	431d      	orrs	r5, r3
   1501c:	387f      	subs	r0, #127	; 0x7f
   1501e:	4647      	mov	r7, r8
   15020:	1a38      	subs	r0, r7, r0
   15022:	464f      	mov	r7, r9
   15024:	430f      	orrs	r7, r1
   15026:	00bf      	lsls	r7, r7, #2
   15028:	46b9      	mov	r9, r7
   1502a:	0033      	movs	r3, r6
   1502c:	9a00      	ldr	r2, [sp, #0]
   1502e:	4f87      	ldr	r7, [pc, #540]	; (1524c <__aeabi_fdiv+0x284>)
   15030:	4053      	eors	r3, r2
   15032:	464a      	mov	r2, r9
   15034:	58ba      	ldr	r2, [r7, r2]
   15036:	9301      	str	r3, [sp, #4]
   15038:	4697      	mov	pc, r2
   1503a:	2c00      	cmp	r4, #0
   1503c:	d14e      	bne.n	150dc <__aeabi_fdiv+0x114>
   1503e:	2308      	movs	r3, #8
   15040:	4699      	mov	r9, r3
   15042:	33f7      	adds	r3, #247	; 0xf7
   15044:	4698      	mov	r8, r3
   15046:	3bfd      	subs	r3, #253	; 0xfd
   15048:	469b      	mov	fp, r3
   1504a:	027d      	lsls	r5, r7, #9
   1504c:	0078      	lsls	r0, r7, #1
   1504e:	0ffb      	lsrs	r3, r7, #31
   15050:	0a6d      	lsrs	r5, r5, #9
   15052:	0e00      	lsrs	r0, r0, #24
   15054:	9300      	str	r3, [sp, #0]
   15056:	d1da      	bne.n	1500e <__aeabi_fdiv+0x46>
   15058:	2d00      	cmp	r5, #0
   1505a:	d126      	bne.n	150aa <__aeabi_fdiv+0xe2>
   1505c:	2000      	movs	r0, #0
   1505e:	2101      	movs	r1, #1
   15060:	0033      	movs	r3, r6
   15062:	9a00      	ldr	r2, [sp, #0]
   15064:	4f7a      	ldr	r7, [pc, #488]	; (15250 <__aeabi_fdiv+0x288>)
   15066:	4053      	eors	r3, r2
   15068:	4642      	mov	r2, r8
   1506a:	1a10      	subs	r0, r2, r0
   1506c:	464a      	mov	r2, r9
   1506e:	430a      	orrs	r2, r1
   15070:	0092      	lsls	r2, r2, #2
   15072:	58ba      	ldr	r2, [r7, r2]
   15074:	001d      	movs	r5, r3
   15076:	4697      	mov	pc, r2
   15078:	9b00      	ldr	r3, [sp, #0]
   1507a:	002c      	movs	r4, r5
   1507c:	469a      	mov	sl, r3
   1507e:	468b      	mov	fp, r1
   15080:	465b      	mov	r3, fp
   15082:	2b02      	cmp	r3, #2
   15084:	d131      	bne.n	150ea <__aeabi_fdiv+0x122>
   15086:	4653      	mov	r3, sl
   15088:	21ff      	movs	r1, #255	; 0xff
   1508a:	2400      	movs	r4, #0
   1508c:	e038      	b.n	15100 <__aeabi_fdiv+0x138>
   1508e:	2c00      	cmp	r4, #0
   15090:	d117      	bne.n	150c2 <__aeabi_fdiv+0xfa>
   15092:	2304      	movs	r3, #4
   15094:	4699      	mov	r9, r3
   15096:	2300      	movs	r3, #0
   15098:	4698      	mov	r8, r3
   1509a:	3301      	adds	r3, #1
   1509c:	469b      	mov	fp, r3
   1509e:	e7af      	b.n	15000 <__aeabi_fdiv+0x38>
   150a0:	20ff      	movs	r0, #255	; 0xff
   150a2:	2d00      	cmp	r5, #0
   150a4:	d10b      	bne.n	150be <__aeabi_fdiv+0xf6>
   150a6:	2102      	movs	r1, #2
   150a8:	e7da      	b.n	15060 <__aeabi_fdiv+0x98>
   150aa:	0028      	movs	r0, r5
   150ac:	f002 fb52 	bl	17754 <__clzsi2>
   150b0:	1f43      	subs	r3, r0, #5
   150b2:	409d      	lsls	r5, r3
   150b4:	2376      	movs	r3, #118	; 0x76
   150b6:	425b      	negs	r3, r3
   150b8:	1a18      	subs	r0, r3, r0
   150ba:	2100      	movs	r1, #0
   150bc:	e7af      	b.n	1501e <__aeabi_fdiv+0x56>
   150be:	2103      	movs	r1, #3
   150c0:	e7ad      	b.n	1501e <__aeabi_fdiv+0x56>
   150c2:	0020      	movs	r0, r4
   150c4:	f002 fb46 	bl	17754 <__clzsi2>
   150c8:	1f43      	subs	r3, r0, #5
   150ca:	409c      	lsls	r4, r3
   150cc:	2376      	movs	r3, #118	; 0x76
   150ce:	425b      	negs	r3, r3
   150d0:	1a1b      	subs	r3, r3, r0
   150d2:	4698      	mov	r8, r3
   150d4:	2300      	movs	r3, #0
   150d6:	4699      	mov	r9, r3
   150d8:	469b      	mov	fp, r3
   150da:	e791      	b.n	15000 <__aeabi_fdiv+0x38>
   150dc:	230c      	movs	r3, #12
   150de:	4699      	mov	r9, r3
   150e0:	33f3      	adds	r3, #243	; 0xf3
   150e2:	4698      	mov	r8, r3
   150e4:	3bfc      	subs	r3, #252	; 0xfc
   150e6:	469b      	mov	fp, r3
   150e8:	e78a      	b.n	15000 <__aeabi_fdiv+0x38>
   150ea:	2b03      	cmp	r3, #3
   150ec:	d100      	bne.n	150f0 <__aeabi_fdiv+0x128>
   150ee:	e0a5      	b.n	1523c <__aeabi_fdiv+0x274>
   150f0:	4655      	mov	r5, sl
   150f2:	2b01      	cmp	r3, #1
   150f4:	d000      	beq.n	150f8 <__aeabi_fdiv+0x130>
   150f6:	e081      	b.n	151fc <__aeabi_fdiv+0x234>
   150f8:	2301      	movs	r3, #1
   150fa:	2100      	movs	r1, #0
   150fc:	2400      	movs	r4, #0
   150fe:	402b      	ands	r3, r5
   15100:	0264      	lsls	r4, r4, #9
   15102:	05c9      	lsls	r1, r1, #23
   15104:	0a60      	lsrs	r0, r4, #9
   15106:	07db      	lsls	r3, r3, #31
   15108:	4308      	orrs	r0, r1
   1510a:	4318      	orrs	r0, r3
   1510c:	b003      	add	sp, #12
   1510e:	bc3c      	pop	{r2, r3, r4, r5}
   15110:	4690      	mov	r8, r2
   15112:	4699      	mov	r9, r3
   15114:	46a2      	mov	sl, r4
   15116:	46ab      	mov	fp, r5
   15118:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1511a:	2480      	movs	r4, #128	; 0x80
   1511c:	2300      	movs	r3, #0
   1511e:	03e4      	lsls	r4, r4, #15
   15120:	21ff      	movs	r1, #255	; 0xff
   15122:	e7ed      	b.n	15100 <__aeabi_fdiv+0x138>
   15124:	21ff      	movs	r1, #255	; 0xff
   15126:	2400      	movs	r4, #0
   15128:	e7ea      	b.n	15100 <__aeabi_fdiv+0x138>
   1512a:	2301      	movs	r3, #1
   1512c:	1a59      	subs	r1, r3, r1
   1512e:	291b      	cmp	r1, #27
   15130:	dd66      	ble.n	15200 <__aeabi_fdiv+0x238>
   15132:	9a01      	ldr	r2, [sp, #4]
   15134:	4013      	ands	r3, r2
   15136:	2100      	movs	r1, #0
   15138:	2400      	movs	r4, #0
   1513a:	e7e1      	b.n	15100 <__aeabi_fdiv+0x138>
   1513c:	2380      	movs	r3, #128	; 0x80
   1513e:	03db      	lsls	r3, r3, #15
   15140:	421c      	tst	r4, r3
   15142:	d038      	beq.n	151b6 <__aeabi_fdiv+0x1ee>
   15144:	421d      	tst	r5, r3
   15146:	d051      	beq.n	151ec <__aeabi_fdiv+0x224>
   15148:	431c      	orrs	r4, r3
   1514a:	0264      	lsls	r4, r4, #9
   1514c:	0a64      	lsrs	r4, r4, #9
   1514e:	0033      	movs	r3, r6
   15150:	21ff      	movs	r1, #255	; 0xff
   15152:	e7d5      	b.n	15100 <__aeabi_fdiv+0x138>
   15154:	0163      	lsls	r3, r4, #5
   15156:	016c      	lsls	r4, r5, #5
   15158:	42a3      	cmp	r3, r4
   1515a:	d23b      	bcs.n	151d4 <__aeabi_fdiv+0x20c>
   1515c:	261b      	movs	r6, #27
   1515e:	2100      	movs	r1, #0
   15160:	3801      	subs	r0, #1
   15162:	2501      	movs	r5, #1
   15164:	001f      	movs	r7, r3
   15166:	0049      	lsls	r1, r1, #1
   15168:	005b      	lsls	r3, r3, #1
   1516a:	2f00      	cmp	r7, #0
   1516c:	db01      	blt.n	15172 <__aeabi_fdiv+0x1aa>
   1516e:	429c      	cmp	r4, r3
   15170:	d801      	bhi.n	15176 <__aeabi_fdiv+0x1ae>
   15172:	1b1b      	subs	r3, r3, r4
   15174:	4329      	orrs	r1, r5
   15176:	3e01      	subs	r6, #1
   15178:	2e00      	cmp	r6, #0
   1517a:	d1f3      	bne.n	15164 <__aeabi_fdiv+0x19c>
   1517c:	001c      	movs	r4, r3
   1517e:	1e63      	subs	r3, r4, #1
   15180:	419c      	sbcs	r4, r3
   15182:	430c      	orrs	r4, r1
   15184:	0001      	movs	r1, r0
   15186:	317f      	adds	r1, #127	; 0x7f
   15188:	2900      	cmp	r1, #0
   1518a:	ddce      	ble.n	1512a <__aeabi_fdiv+0x162>
   1518c:	0763      	lsls	r3, r4, #29
   1518e:	d004      	beq.n	1519a <__aeabi_fdiv+0x1d2>
   15190:	230f      	movs	r3, #15
   15192:	4023      	ands	r3, r4
   15194:	2b04      	cmp	r3, #4
   15196:	d000      	beq.n	1519a <__aeabi_fdiv+0x1d2>
   15198:	3404      	adds	r4, #4
   1519a:	0123      	lsls	r3, r4, #4
   1519c:	d503      	bpl.n	151a6 <__aeabi_fdiv+0x1de>
   1519e:	0001      	movs	r1, r0
   151a0:	4b2c      	ldr	r3, [pc, #176]	; (15254 <__aeabi_fdiv+0x28c>)
   151a2:	3180      	adds	r1, #128	; 0x80
   151a4:	401c      	ands	r4, r3
   151a6:	29fe      	cmp	r1, #254	; 0xfe
   151a8:	dd0d      	ble.n	151c6 <__aeabi_fdiv+0x1fe>
   151aa:	2301      	movs	r3, #1
   151ac:	9a01      	ldr	r2, [sp, #4]
   151ae:	21ff      	movs	r1, #255	; 0xff
   151b0:	4013      	ands	r3, r2
   151b2:	2400      	movs	r4, #0
   151b4:	e7a4      	b.n	15100 <__aeabi_fdiv+0x138>
   151b6:	2380      	movs	r3, #128	; 0x80
   151b8:	03db      	lsls	r3, r3, #15
   151ba:	431c      	orrs	r4, r3
   151bc:	0264      	lsls	r4, r4, #9
   151be:	0a64      	lsrs	r4, r4, #9
   151c0:	0033      	movs	r3, r6
   151c2:	21ff      	movs	r1, #255	; 0xff
   151c4:	e79c      	b.n	15100 <__aeabi_fdiv+0x138>
   151c6:	2301      	movs	r3, #1
   151c8:	9a01      	ldr	r2, [sp, #4]
   151ca:	01a4      	lsls	r4, r4, #6
   151cc:	0a64      	lsrs	r4, r4, #9
   151ce:	b2c9      	uxtb	r1, r1
   151d0:	4013      	ands	r3, r2
   151d2:	e795      	b.n	15100 <__aeabi_fdiv+0x138>
   151d4:	1b1b      	subs	r3, r3, r4
   151d6:	261a      	movs	r6, #26
   151d8:	2101      	movs	r1, #1
   151da:	e7c2      	b.n	15162 <__aeabi_fdiv+0x19a>
   151dc:	9b00      	ldr	r3, [sp, #0]
   151de:	468b      	mov	fp, r1
   151e0:	469a      	mov	sl, r3
   151e2:	2400      	movs	r4, #0
   151e4:	e74c      	b.n	15080 <__aeabi_fdiv+0xb8>
   151e6:	0263      	lsls	r3, r4, #9
   151e8:	d5e5      	bpl.n	151b6 <__aeabi_fdiv+0x1ee>
   151ea:	2500      	movs	r5, #0
   151ec:	2480      	movs	r4, #128	; 0x80
   151ee:	03e4      	lsls	r4, r4, #15
   151f0:	432c      	orrs	r4, r5
   151f2:	0264      	lsls	r4, r4, #9
   151f4:	0a64      	lsrs	r4, r4, #9
   151f6:	9b00      	ldr	r3, [sp, #0]
   151f8:	21ff      	movs	r1, #255	; 0xff
   151fa:	e781      	b.n	15100 <__aeabi_fdiv+0x138>
   151fc:	9501      	str	r5, [sp, #4]
   151fe:	e7c1      	b.n	15184 <__aeabi_fdiv+0x1bc>
   15200:	0023      	movs	r3, r4
   15202:	2020      	movs	r0, #32
   15204:	40cb      	lsrs	r3, r1
   15206:	1a41      	subs	r1, r0, r1
   15208:	408c      	lsls	r4, r1
   1520a:	1e61      	subs	r1, r4, #1
   1520c:	418c      	sbcs	r4, r1
   1520e:	431c      	orrs	r4, r3
   15210:	0763      	lsls	r3, r4, #29
   15212:	d004      	beq.n	1521e <__aeabi_fdiv+0x256>
   15214:	230f      	movs	r3, #15
   15216:	4023      	ands	r3, r4
   15218:	2b04      	cmp	r3, #4
   1521a:	d000      	beq.n	1521e <__aeabi_fdiv+0x256>
   1521c:	3404      	adds	r4, #4
   1521e:	0163      	lsls	r3, r4, #5
   15220:	d505      	bpl.n	1522e <__aeabi_fdiv+0x266>
   15222:	2301      	movs	r3, #1
   15224:	9a01      	ldr	r2, [sp, #4]
   15226:	2101      	movs	r1, #1
   15228:	4013      	ands	r3, r2
   1522a:	2400      	movs	r4, #0
   1522c:	e768      	b.n	15100 <__aeabi_fdiv+0x138>
   1522e:	2301      	movs	r3, #1
   15230:	9a01      	ldr	r2, [sp, #4]
   15232:	01a4      	lsls	r4, r4, #6
   15234:	0a64      	lsrs	r4, r4, #9
   15236:	4013      	ands	r3, r2
   15238:	2100      	movs	r1, #0
   1523a:	e761      	b.n	15100 <__aeabi_fdiv+0x138>
   1523c:	2380      	movs	r3, #128	; 0x80
   1523e:	03db      	lsls	r3, r3, #15
   15240:	431c      	orrs	r4, r3
   15242:	0264      	lsls	r4, r4, #9
   15244:	0a64      	lsrs	r4, r4, #9
   15246:	4653      	mov	r3, sl
   15248:	21ff      	movs	r1, #255	; 0xff
   1524a:	e759      	b.n	15100 <__aeabi_fdiv+0x138>
   1524c:	0001a3e0 	.word	0x0001a3e0
   15250:	0001a420 	.word	0x0001a420
   15254:	f7ffffff 	.word	0xf7ffffff

00015258 <__eqsf2>:
   15258:	b570      	push	{r4, r5, r6, lr}
   1525a:	0042      	lsls	r2, r0, #1
   1525c:	0245      	lsls	r5, r0, #9
   1525e:	024e      	lsls	r6, r1, #9
   15260:	004c      	lsls	r4, r1, #1
   15262:	0fc3      	lsrs	r3, r0, #31
   15264:	0a6d      	lsrs	r5, r5, #9
   15266:	0e12      	lsrs	r2, r2, #24
   15268:	0a76      	lsrs	r6, r6, #9
   1526a:	0e24      	lsrs	r4, r4, #24
   1526c:	0fc9      	lsrs	r1, r1, #31
   1526e:	2001      	movs	r0, #1
   15270:	2aff      	cmp	r2, #255	; 0xff
   15272:	d006      	beq.n	15282 <__eqsf2+0x2a>
   15274:	2cff      	cmp	r4, #255	; 0xff
   15276:	d003      	beq.n	15280 <__eqsf2+0x28>
   15278:	42a2      	cmp	r2, r4
   1527a:	d101      	bne.n	15280 <__eqsf2+0x28>
   1527c:	42b5      	cmp	r5, r6
   1527e:	d006      	beq.n	1528e <__eqsf2+0x36>
   15280:	bd70      	pop	{r4, r5, r6, pc}
   15282:	2d00      	cmp	r5, #0
   15284:	d1fc      	bne.n	15280 <__eqsf2+0x28>
   15286:	2cff      	cmp	r4, #255	; 0xff
   15288:	d1fa      	bne.n	15280 <__eqsf2+0x28>
   1528a:	2e00      	cmp	r6, #0
   1528c:	d1f8      	bne.n	15280 <__eqsf2+0x28>
   1528e:	428b      	cmp	r3, r1
   15290:	d006      	beq.n	152a0 <__eqsf2+0x48>
   15292:	2001      	movs	r0, #1
   15294:	2a00      	cmp	r2, #0
   15296:	d1f3      	bne.n	15280 <__eqsf2+0x28>
   15298:	0028      	movs	r0, r5
   1529a:	1e45      	subs	r5, r0, #1
   1529c:	41a8      	sbcs	r0, r5
   1529e:	e7ef      	b.n	15280 <__eqsf2+0x28>
   152a0:	2000      	movs	r0, #0
   152a2:	e7ed      	b.n	15280 <__eqsf2+0x28>

000152a4 <__gesf2>:
   152a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   152a6:	0042      	lsls	r2, r0, #1
   152a8:	0245      	lsls	r5, r0, #9
   152aa:	024c      	lsls	r4, r1, #9
   152ac:	0fc3      	lsrs	r3, r0, #31
   152ae:	0048      	lsls	r0, r1, #1
   152b0:	0a6d      	lsrs	r5, r5, #9
   152b2:	0e12      	lsrs	r2, r2, #24
   152b4:	0a64      	lsrs	r4, r4, #9
   152b6:	0e00      	lsrs	r0, r0, #24
   152b8:	0fc9      	lsrs	r1, r1, #31
   152ba:	2aff      	cmp	r2, #255	; 0xff
   152bc:	d01e      	beq.n	152fc <__gesf2+0x58>
   152be:	28ff      	cmp	r0, #255	; 0xff
   152c0:	d021      	beq.n	15306 <__gesf2+0x62>
   152c2:	2a00      	cmp	r2, #0
   152c4:	d10a      	bne.n	152dc <__gesf2+0x38>
   152c6:	426e      	negs	r6, r5
   152c8:	416e      	adcs	r6, r5
   152ca:	b2f6      	uxtb	r6, r6
   152cc:	2800      	cmp	r0, #0
   152ce:	d10f      	bne.n	152f0 <__gesf2+0x4c>
   152d0:	2c00      	cmp	r4, #0
   152d2:	d10d      	bne.n	152f0 <__gesf2+0x4c>
   152d4:	2000      	movs	r0, #0
   152d6:	2d00      	cmp	r5, #0
   152d8:	d009      	beq.n	152ee <__gesf2+0x4a>
   152da:	e005      	b.n	152e8 <__gesf2+0x44>
   152dc:	2800      	cmp	r0, #0
   152de:	d101      	bne.n	152e4 <__gesf2+0x40>
   152e0:	2c00      	cmp	r4, #0
   152e2:	d001      	beq.n	152e8 <__gesf2+0x44>
   152e4:	428b      	cmp	r3, r1
   152e6:	d011      	beq.n	1530c <__gesf2+0x68>
   152e8:	2101      	movs	r1, #1
   152ea:	4258      	negs	r0, r3
   152ec:	4308      	orrs	r0, r1
   152ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   152f0:	2e00      	cmp	r6, #0
   152f2:	d0f7      	beq.n	152e4 <__gesf2+0x40>
   152f4:	2001      	movs	r0, #1
   152f6:	3901      	subs	r1, #1
   152f8:	4308      	orrs	r0, r1
   152fa:	e7f8      	b.n	152ee <__gesf2+0x4a>
   152fc:	2d00      	cmp	r5, #0
   152fe:	d0de      	beq.n	152be <__gesf2+0x1a>
   15300:	2002      	movs	r0, #2
   15302:	4240      	negs	r0, r0
   15304:	e7f3      	b.n	152ee <__gesf2+0x4a>
   15306:	2c00      	cmp	r4, #0
   15308:	d0db      	beq.n	152c2 <__gesf2+0x1e>
   1530a:	e7f9      	b.n	15300 <__gesf2+0x5c>
   1530c:	4282      	cmp	r2, r0
   1530e:	dceb      	bgt.n	152e8 <__gesf2+0x44>
   15310:	db04      	blt.n	1531c <__gesf2+0x78>
   15312:	42a5      	cmp	r5, r4
   15314:	d8e8      	bhi.n	152e8 <__gesf2+0x44>
   15316:	2000      	movs	r0, #0
   15318:	42a5      	cmp	r5, r4
   1531a:	d2e8      	bcs.n	152ee <__gesf2+0x4a>
   1531c:	2101      	movs	r1, #1
   1531e:	1e58      	subs	r0, r3, #1
   15320:	4308      	orrs	r0, r1
   15322:	e7e4      	b.n	152ee <__gesf2+0x4a>

00015324 <__lesf2>:
   15324:	b5f0      	push	{r4, r5, r6, r7, lr}
   15326:	0042      	lsls	r2, r0, #1
   15328:	024d      	lsls	r5, r1, #9
   1532a:	004c      	lsls	r4, r1, #1
   1532c:	0246      	lsls	r6, r0, #9
   1532e:	0a76      	lsrs	r6, r6, #9
   15330:	0e12      	lsrs	r2, r2, #24
   15332:	0fc3      	lsrs	r3, r0, #31
   15334:	0a6d      	lsrs	r5, r5, #9
   15336:	0e24      	lsrs	r4, r4, #24
   15338:	0fc9      	lsrs	r1, r1, #31
   1533a:	2aff      	cmp	r2, #255	; 0xff
   1533c:	d016      	beq.n	1536c <__lesf2+0x48>
   1533e:	2cff      	cmp	r4, #255	; 0xff
   15340:	d018      	beq.n	15374 <__lesf2+0x50>
   15342:	2a00      	cmp	r2, #0
   15344:	d10a      	bne.n	1535c <__lesf2+0x38>
   15346:	4270      	negs	r0, r6
   15348:	4170      	adcs	r0, r6
   1534a:	b2c0      	uxtb	r0, r0
   1534c:	2c00      	cmp	r4, #0
   1534e:	d015      	beq.n	1537c <__lesf2+0x58>
   15350:	2800      	cmp	r0, #0
   15352:	d005      	beq.n	15360 <__lesf2+0x3c>
   15354:	2001      	movs	r0, #1
   15356:	3901      	subs	r1, #1
   15358:	4308      	orrs	r0, r1
   1535a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1535c:	2c00      	cmp	r4, #0
   1535e:	d013      	beq.n	15388 <__lesf2+0x64>
   15360:	4299      	cmp	r1, r3
   15362:	d014      	beq.n	1538e <__lesf2+0x6a>
   15364:	2001      	movs	r0, #1
   15366:	425b      	negs	r3, r3
   15368:	4318      	orrs	r0, r3
   1536a:	e7f6      	b.n	1535a <__lesf2+0x36>
   1536c:	2002      	movs	r0, #2
   1536e:	2e00      	cmp	r6, #0
   15370:	d1f3      	bne.n	1535a <__lesf2+0x36>
   15372:	e7e4      	b.n	1533e <__lesf2+0x1a>
   15374:	2002      	movs	r0, #2
   15376:	2d00      	cmp	r5, #0
   15378:	d1ef      	bne.n	1535a <__lesf2+0x36>
   1537a:	e7e2      	b.n	15342 <__lesf2+0x1e>
   1537c:	2d00      	cmp	r5, #0
   1537e:	d1e7      	bne.n	15350 <__lesf2+0x2c>
   15380:	2000      	movs	r0, #0
   15382:	2e00      	cmp	r6, #0
   15384:	d0e9      	beq.n	1535a <__lesf2+0x36>
   15386:	e7ed      	b.n	15364 <__lesf2+0x40>
   15388:	2d00      	cmp	r5, #0
   1538a:	d1e9      	bne.n	15360 <__lesf2+0x3c>
   1538c:	e7ea      	b.n	15364 <__lesf2+0x40>
   1538e:	42a2      	cmp	r2, r4
   15390:	dc06      	bgt.n	153a0 <__lesf2+0x7c>
   15392:	dbdf      	blt.n	15354 <__lesf2+0x30>
   15394:	42ae      	cmp	r6, r5
   15396:	d803      	bhi.n	153a0 <__lesf2+0x7c>
   15398:	2000      	movs	r0, #0
   1539a:	42ae      	cmp	r6, r5
   1539c:	d3da      	bcc.n	15354 <__lesf2+0x30>
   1539e:	e7dc      	b.n	1535a <__lesf2+0x36>
   153a0:	2001      	movs	r0, #1
   153a2:	4249      	negs	r1, r1
   153a4:	4308      	orrs	r0, r1
   153a6:	e7d8      	b.n	1535a <__lesf2+0x36>

000153a8 <__aeabi_fmul>:
   153a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   153aa:	4657      	mov	r7, sl
   153ac:	464e      	mov	r6, r9
   153ae:	4645      	mov	r5, r8
   153b0:	46de      	mov	lr, fp
   153b2:	b5e0      	push	{r5, r6, r7, lr}
   153b4:	0247      	lsls	r7, r0, #9
   153b6:	0046      	lsls	r6, r0, #1
   153b8:	4688      	mov	r8, r1
   153ba:	0a7f      	lsrs	r7, r7, #9
   153bc:	0e36      	lsrs	r6, r6, #24
   153be:	0fc4      	lsrs	r4, r0, #31
   153c0:	2e00      	cmp	r6, #0
   153c2:	d047      	beq.n	15454 <__aeabi_fmul+0xac>
   153c4:	2eff      	cmp	r6, #255	; 0xff
   153c6:	d024      	beq.n	15412 <__aeabi_fmul+0x6a>
   153c8:	00fb      	lsls	r3, r7, #3
   153ca:	2780      	movs	r7, #128	; 0x80
   153cc:	04ff      	lsls	r7, r7, #19
   153ce:	431f      	orrs	r7, r3
   153d0:	2300      	movs	r3, #0
   153d2:	4699      	mov	r9, r3
   153d4:	469a      	mov	sl, r3
   153d6:	3e7f      	subs	r6, #127	; 0x7f
   153d8:	4643      	mov	r3, r8
   153da:	025d      	lsls	r5, r3, #9
   153dc:	0058      	lsls	r0, r3, #1
   153de:	0fdb      	lsrs	r3, r3, #31
   153e0:	0a6d      	lsrs	r5, r5, #9
   153e2:	0e00      	lsrs	r0, r0, #24
   153e4:	4698      	mov	r8, r3
   153e6:	d043      	beq.n	15470 <__aeabi_fmul+0xc8>
   153e8:	28ff      	cmp	r0, #255	; 0xff
   153ea:	d03b      	beq.n	15464 <__aeabi_fmul+0xbc>
   153ec:	00eb      	lsls	r3, r5, #3
   153ee:	2580      	movs	r5, #128	; 0x80
   153f0:	2200      	movs	r2, #0
   153f2:	04ed      	lsls	r5, r5, #19
   153f4:	431d      	orrs	r5, r3
   153f6:	387f      	subs	r0, #127	; 0x7f
   153f8:	1836      	adds	r6, r6, r0
   153fa:	1c73      	adds	r3, r6, #1
   153fc:	4641      	mov	r1, r8
   153fe:	469b      	mov	fp, r3
   15400:	464b      	mov	r3, r9
   15402:	4061      	eors	r1, r4
   15404:	4313      	orrs	r3, r2
   15406:	2b0f      	cmp	r3, #15
   15408:	d864      	bhi.n	154d4 <__aeabi_fmul+0x12c>
   1540a:	4875      	ldr	r0, [pc, #468]	; (155e0 <__aeabi_fmul+0x238>)
   1540c:	009b      	lsls	r3, r3, #2
   1540e:	58c3      	ldr	r3, [r0, r3]
   15410:	469f      	mov	pc, r3
   15412:	2f00      	cmp	r7, #0
   15414:	d142      	bne.n	1549c <__aeabi_fmul+0xf4>
   15416:	2308      	movs	r3, #8
   15418:	4699      	mov	r9, r3
   1541a:	3b06      	subs	r3, #6
   1541c:	26ff      	movs	r6, #255	; 0xff
   1541e:	469a      	mov	sl, r3
   15420:	e7da      	b.n	153d8 <__aeabi_fmul+0x30>
   15422:	4641      	mov	r1, r8
   15424:	2a02      	cmp	r2, #2
   15426:	d028      	beq.n	1547a <__aeabi_fmul+0xd2>
   15428:	2a03      	cmp	r2, #3
   1542a:	d100      	bne.n	1542e <__aeabi_fmul+0x86>
   1542c:	e0ce      	b.n	155cc <__aeabi_fmul+0x224>
   1542e:	2a01      	cmp	r2, #1
   15430:	d000      	beq.n	15434 <__aeabi_fmul+0x8c>
   15432:	e0ac      	b.n	1558e <__aeabi_fmul+0x1e6>
   15434:	4011      	ands	r1, r2
   15436:	2000      	movs	r0, #0
   15438:	2200      	movs	r2, #0
   1543a:	b2cc      	uxtb	r4, r1
   1543c:	0240      	lsls	r0, r0, #9
   1543e:	05d2      	lsls	r2, r2, #23
   15440:	0a40      	lsrs	r0, r0, #9
   15442:	07e4      	lsls	r4, r4, #31
   15444:	4310      	orrs	r0, r2
   15446:	4320      	orrs	r0, r4
   15448:	bc3c      	pop	{r2, r3, r4, r5}
   1544a:	4690      	mov	r8, r2
   1544c:	4699      	mov	r9, r3
   1544e:	46a2      	mov	sl, r4
   15450:	46ab      	mov	fp, r5
   15452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15454:	2f00      	cmp	r7, #0
   15456:	d115      	bne.n	15484 <__aeabi_fmul+0xdc>
   15458:	2304      	movs	r3, #4
   1545a:	4699      	mov	r9, r3
   1545c:	3b03      	subs	r3, #3
   1545e:	2600      	movs	r6, #0
   15460:	469a      	mov	sl, r3
   15462:	e7b9      	b.n	153d8 <__aeabi_fmul+0x30>
   15464:	20ff      	movs	r0, #255	; 0xff
   15466:	2202      	movs	r2, #2
   15468:	2d00      	cmp	r5, #0
   1546a:	d0c5      	beq.n	153f8 <__aeabi_fmul+0x50>
   1546c:	2203      	movs	r2, #3
   1546e:	e7c3      	b.n	153f8 <__aeabi_fmul+0x50>
   15470:	2d00      	cmp	r5, #0
   15472:	d119      	bne.n	154a8 <__aeabi_fmul+0x100>
   15474:	2000      	movs	r0, #0
   15476:	2201      	movs	r2, #1
   15478:	e7be      	b.n	153f8 <__aeabi_fmul+0x50>
   1547a:	2401      	movs	r4, #1
   1547c:	22ff      	movs	r2, #255	; 0xff
   1547e:	400c      	ands	r4, r1
   15480:	2000      	movs	r0, #0
   15482:	e7db      	b.n	1543c <__aeabi_fmul+0x94>
   15484:	0038      	movs	r0, r7
   15486:	f002 f965 	bl	17754 <__clzsi2>
   1548a:	2676      	movs	r6, #118	; 0x76
   1548c:	1f43      	subs	r3, r0, #5
   1548e:	409f      	lsls	r7, r3
   15490:	2300      	movs	r3, #0
   15492:	4276      	negs	r6, r6
   15494:	1a36      	subs	r6, r6, r0
   15496:	4699      	mov	r9, r3
   15498:	469a      	mov	sl, r3
   1549a:	e79d      	b.n	153d8 <__aeabi_fmul+0x30>
   1549c:	230c      	movs	r3, #12
   1549e:	4699      	mov	r9, r3
   154a0:	3b09      	subs	r3, #9
   154a2:	26ff      	movs	r6, #255	; 0xff
   154a4:	469a      	mov	sl, r3
   154a6:	e797      	b.n	153d8 <__aeabi_fmul+0x30>
   154a8:	0028      	movs	r0, r5
   154aa:	f002 f953 	bl	17754 <__clzsi2>
   154ae:	1f43      	subs	r3, r0, #5
   154b0:	409d      	lsls	r5, r3
   154b2:	2376      	movs	r3, #118	; 0x76
   154b4:	425b      	negs	r3, r3
   154b6:	1a18      	subs	r0, r3, r0
   154b8:	2200      	movs	r2, #0
   154ba:	e79d      	b.n	153f8 <__aeabi_fmul+0x50>
   154bc:	2080      	movs	r0, #128	; 0x80
   154be:	2400      	movs	r4, #0
   154c0:	03c0      	lsls	r0, r0, #15
   154c2:	22ff      	movs	r2, #255	; 0xff
   154c4:	e7ba      	b.n	1543c <__aeabi_fmul+0x94>
   154c6:	003d      	movs	r5, r7
   154c8:	4652      	mov	r2, sl
   154ca:	e7ab      	b.n	15424 <__aeabi_fmul+0x7c>
   154cc:	003d      	movs	r5, r7
   154ce:	0021      	movs	r1, r4
   154d0:	4652      	mov	r2, sl
   154d2:	e7a7      	b.n	15424 <__aeabi_fmul+0x7c>
   154d4:	0c3b      	lsrs	r3, r7, #16
   154d6:	469c      	mov	ip, r3
   154d8:	042a      	lsls	r2, r5, #16
   154da:	0c12      	lsrs	r2, r2, #16
   154dc:	0c2b      	lsrs	r3, r5, #16
   154de:	0014      	movs	r4, r2
   154e0:	4660      	mov	r0, ip
   154e2:	4665      	mov	r5, ip
   154e4:	043f      	lsls	r7, r7, #16
   154e6:	0c3f      	lsrs	r7, r7, #16
   154e8:	437c      	muls	r4, r7
   154ea:	4342      	muls	r2, r0
   154ec:	435d      	muls	r5, r3
   154ee:	437b      	muls	r3, r7
   154f0:	0c27      	lsrs	r7, r4, #16
   154f2:	189b      	adds	r3, r3, r2
   154f4:	18ff      	adds	r7, r7, r3
   154f6:	42ba      	cmp	r2, r7
   154f8:	d903      	bls.n	15502 <__aeabi_fmul+0x15a>
   154fa:	2380      	movs	r3, #128	; 0x80
   154fc:	025b      	lsls	r3, r3, #9
   154fe:	469c      	mov	ip, r3
   15500:	4465      	add	r5, ip
   15502:	0424      	lsls	r4, r4, #16
   15504:	043a      	lsls	r2, r7, #16
   15506:	0c24      	lsrs	r4, r4, #16
   15508:	1912      	adds	r2, r2, r4
   1550a:	0193      	lsls	r3, r2, #6
   1550c:	1e5c      	subs	r4, r3, #1
   1550e:	41a3      	sbcs	r3, r4
   15510:	0c3f      	lsrs	r7, r7, #16
   15512:	0e92      	lsrs	r2, r2, #26
   15514:	197d      	adds	r5, r7, r5
   15516:	431a      	orrs	r2, r3
   15518:	01ad      	lsls	r5, r5, #6
   1551a:	4315      	orrs	r5, r2
   1551c:	012b      	lsls	r3, r5, #4
   1551e:	d504      	bpl.n	1552a <__aeabi_fmul+0x182>
   15520:	2301      	movs	r3, #1
   15522:	465e      	mov	r6, fp
   15524:	086a      	lsrs	r2, r5, #1
   15526:	401d      	ands	r5, r3
   15528:	4315      	orrs	r5, r2
   1552a:	0032      	movs	r2, r6
   1552c:	327f      	adds	r2, #127	; 0x7f
   1552e:	2a00      	cmp	r2, #0
   15530:	dd25      	ble.n	1557e <__aeabi_fmul+0x1d6>
   15532:	076b      	lsls	r3, r5, #29
   15534:	d004      	beq.n	15540 <__aeabi_fmul+0x198>
   15536:	230f      	movs	r3, #15
   15538:	402b      	ands	r3, r5
   1553a:	2b04      	cmp	r3, #4
   1553c:	d000      	beq.n	15540 <__aeabi_fmul+0x198>
   1553e:	3504      	adds	r5, #4
   15540:	012b      	lsls	r3, r5, #4
   15542:	d503      	bpl.n	1554c <__aeabi_fmul+0x1a4>
   15544:	0032      	movs	r2, r6
   15546:	4b27      	ldr	r3, [pc, #156]	; (155e4 <__aeabi_fmul+0x23c>)
   15548:	3280      	adds	r2, #128	; 0x80
   1554a:	401d      	ands	r5, r3
   1554c:	2afe      	cmp	r2, #254	; 0xfe
   1554e:	dc94      	bgt.n	1547a <__aeabi_fmul+0xd2>
   15550:	2401      	movs	r4, #1
   15552:	01a8      	lsls	r0, r5, #6
   15554:	0a40      	lsrs	r0, r0, #9
   15556:	b2d2      	uxtb	r2, r2
   15558:	400c      	ands	r4, r1
   1555a:	e76f      	b.n	1543c <__aeabi_fmul+0x94>
   1555c:	2080      	movs	r0, #128	; 0x80
   1555e:	03c0      	lsls	r0, r0, #15
   15560:	4207      	tst	r7, r0
   15562:	d007      	beq.n	15574 <__aeabi_fmul+0x1cc>
   15564:	4205      	tst	r5, r0
   15566:	d105      	bne.n	15574 <__aeabi_fmul+0x1cc>
   15568:	4328      	orrs	r0, r5
   1556a:	0240      	lsls	r0, r0, #9
   1556c:	0a40      	lsrs	r0, r0, #9
   1556e:	4644      	mov	r4, r8
   15570:	22ff      	movs	r2, #255	; 0xff
   15572:	e763      	b.n	1543c <__aeabi_fmul+0x94>
   15574:	4338      	orrs	r0, r7
   15576:	0240      	lsls	r0, r0, #9
   15578:	0a40      	lsrs	r0, r0, #9
   1557a:	22ff      	movs	r2, #255	; 0xff
   1557c:	e75e      	b.n	1543c <__aeabi_fmul+0x94>
   1557e:	2401      	movs	r4, #1
   15580:	1aa3      	subs	r3, r4, r2
   15582:	2b1b      	cmp	r3, #27
   15584:	dd05      	ble.n	15592 <__aeabi_fmul+0x1ea>
   15586:	400c      	ands	r4, r1
   15588:	2200      	movs	r2, #0
   1558a:	2000      	movs	r0, #0
   1558c:	e756      	b.n	1543c <__aeabi_fmul+0x94>
   1558e:	465e      	mov	r6, fp
   15590:	e7cb      	b.n	1552a <__aeabi_fmul+0x182>
   15592:	002a      	movs	r2, r5
   15594:	2020      	movs	r0, #32
   15596:	40da      	lsrs	r2, r3
   15598:	1ac3      	subs	r3, r0, r3
   1559a:	409d      	lsls	r5, r3
   1559c:	002b      	movs	r3, r5
   1559e:	1e5d      	subs	r5, r3, #1
   155a0:	41ab      	sbcs	r3, r5
   155a2:	4313      	orrs	r3, r2
   155a4:	075a      	lsls	r2, r3, #29
   155a6:	d004      	beq.n	155b2 <__aeabi_fmul+0x20a>
   155a8:	220f      	movs	r2, #15
   155aa:	401a      	ands	r2, r3
   155ac:	2a04      	cmp	r2, #4
   155ae:	d000      	beq.n	155b2 <__aeabi_fmul+0x20a>
   155b0:	3304      	adds	r3, #4
   155b2:	015a      	lsls	r2, r3, #5
   155b4:	d504      	bpl.n	155c0 <__aeabi_fmul+0x218>
   155b6:	2401      	movs	r4, #1
   155b8:	2201      	movs	r2, #1
   155ba:	400c      	ands	r4, r1
   155bc:	2000      	movs	r0, #0
   155be:	e73d      	b.n	1543c <__aeabi_fmul+0x94>
   155c0:	2401      	movs	r4, #1
   155c2:	019b      	lsls	r3, r3, #6
   155c4:	0a58      	lsrs	r0, r3, #9
   155c6:	400c      	ands	r4, r1
   155c8:	2200      	movs	r2, #0
   155ca:	e737      	b.n	1543c <__aeabi_fmul+0x94>
   155cc:	2080      	movs	r0, #128	; 0x80
   155ce:	2401      	movs	r4, #1
   155d0:	03c0      	lsls	r0, r0, #15
   155d2:	4328      	orrs	r0, r5
   155d4:	0240      	lsls	r0, r0, #9
   155d6:	0a40      	lsrs	r0, r0, #9
   155d8:	400c      	ands	r4, r1
   155da:	22ff      	movs	r2, #255	; 0xff
   155dc:	e72e      	b.n	1543c <__aeabi_fmul+0x94>
   155de:	46c0      	nop			; (mov r8, r8)
   155e0:	0001a460 	.word	0x0001a460
   155e4:	f7ffffff 	.word	0xf7ffffff

000155e8 <__aeabi_fsub>:
   155e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   155ea:	464f      	mov	r7, r9
   155ec:	46d6      	mov	lr, sl
   155ee:	4646      	mov	r6, r8
   155f0:	0044      	lsls	r4, r0, #1
   155f2:	b5c0      	push	{r6, r7, lr}
   155f4:	0fc2      	lsrs	r2, r0, #31
   155f6:	0247      	lsls	r7, r0, #9
   155f8:	0248      	lsls	r0, r1, #9
   155fa:	0a40      	lsrs	r0, r0, #9
   155fc:	4684      	mov	ip, r0
   155fe:	4666      	mov	r6, ip
   15600:	0a7b      	lsrs	r3, r7, #9
   15602:	0048      	lsls	r0, r1, #1
   15604:	0fc9      	lsrs	r1, r1, #31
   15606:	469a      	mov	sl, r3
   15608:	0e24      	lsrs	r4, r4, #24
   1560a:	0015      	movs	r5, r2
   1560c:	00db      	lsls	r3, r3, #3
   1560e:	0e00      	lsrs	r0, r0, #24
   15610:	4689      	mov	r9, r1
   15612:	00f6      	lsls	r6, r6, #3
   15614:	28ff      	cmp	r0, #255	; 0xff
   15616:	d100      	bne.n	1561a <__aeabi_fsub+0x32>
   15618:	e08f      	b.n	1573a <__aeabi_fsub+0x152>
   1561a:	2101      	movs	r1, #1
   1561c:	464f      	mov	r7, r9
   1561e:	404f      	eors	r7, r1
   15620:	0039      	movs	r1, r7
   15622:	4291      	cmp	r1, r2
   15624:	d066      	beq.n	156f4 <__aeabi_fsub+0x10c>
   15626:	1a22      	subs	r2, r4, r0
   15628:	2a00      	cmp	r2, #0
   1562a:	dc00      	bgt.n	1562e <__aeabi_fsub+0x46>
   1562c:	e09d      	b.n	1576a <__aeabi_fsub+0x182>
   1562e:	2800      	cmp	r0, #0
   15630:	d13d      	bne.n	156ae <__aeabi_fsub+0xc6>
   15632:	2e00      	cmp	r6, #0
   15634:	d100      	bne.n	15638 <__aeabi_fsub+0x50>
   15636:	e08b      	b.n	15750 <__aeabi_fsub+0x168>
   15638:	1e51      	subs	r1, r2, #1
   1563a:	2900      	cmp	r1, #0
   1563c:	d000      	beq.n	15640 <__aeabi_fsub+0x58>
   1563e:	e0b5      	b.n	157ac <__aeabi_fsub+0x1c4>
   15640:	2401      	movs	r4, #1
   15642:	1b9b      	subs	r3, r3, r6
   15644:	015a      	lsls	r2, r3, #5
   15646:	d544      	bpl.n	156d2 <__aeabi_fsub+0xea>
   15648:	019b      	lsls	r3, r3, #6
   1564a:	099f      	lsrs	r7, r3, #6
   1564c:	0038      	movs	r0, r7
   1564e:	f002 f881 	bl	17754 <__clzsi2>
   15652:	3805      	subs	r0, #5
   15654:	4087      	lsls	r7, r0
   15656:	4284      	cmp	r4, r0
   15658:	dd00      	ble.n	1565c <__aeabi_fsub+0x74>
   1565a:	e096      	b.n	1578a <__aeabi_fsub+0x1a2>
   1565c:	1b04      	subs	r4, r0, r4
   1565e:	003a      	movs	r2, r7
   15660:	2020      	movs	r0, #32
   15662:	3401      	adds	r4, #1
   15664:	40e2      	lsrs	r2, r4
   15666:	1b04      	subs	r4, r0, r4
   15668:	40a7      	lsls	r7, r4
   1566a:	003b      	movs	r3, r7
   1566c:	1e5f      	subs	r7, r3, #1
   1566e:	41bb      	sbcs	r3, r7
   15670:	2400      	movs	r4, #0
   15672:	4313      	orrs	r3, r2
   15674:	075a      	lsls	r2, r3, #29
   15676:	d004      	beq.n	15682 <__aeabi_fsub+0x9a>
   15678:	220f      	movs	r2, #15
   1567a:	401a      	ands	r2, r3
   1567c:	2a04      	cmp	r2, #4
   1567e:	d000      	beq.n	15682 <__aeabi_fsub+0x9a>
   15680:	3304      	adds	r3, #4
   15682:	015a      	lsls	r2, r3, #5
   15684:	d527      	bpl.n	156d6 <__aeabi_fsub+0xee>
   15686:	3401      	adds	r4, #1
   15688:	2cff      	cmp	r4, #255	; 0xff
   1568a:	d100      	bne.n	1568e <__aeabi_fsub+0xa6>
   1568c:	e079      	b.n	15782 <__aeabi_fsub+0x19a>
   1568e:	2201      	movs	r2, #1
   15690:	019b      	lsls	r3, r3, #6
   15692:	0a5b      	lsrs	r3, r3, #9
   15694:	b2e4      	uxtb	r4, r4
   15696:	402a      	ands	r2, r5
   15698:	025b      	lsls	r3, r3, #9
   1569a:	05e4      	lsls	r4, r4, #23
   1569c:	0a58      	lsrs	r0, r3, #9
   1569e:	07d2      	lsls	r2, r2, #31
   156a0:	4320      	orrs	r0, r4
   156a2:	4310      	orrs	r0, r2
   156a4:	bc1c      	pop	{r2, r3, r4}
   156a6:	4690      	mov	r8, r2
   156a8:	4699      	mov	r9, r3
   156aa:	46a2      	mov	sl, r4
   156ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   156ae:	2cff      	cmp	r4, #255	; 0xff
   156b0:	d0e0      	beq.n	15674 <__aeabi_fsub+0x8c>
   156b2:	2180      	movs	r1, #128	; 0x80
   156b4:	04c9      	lsls	r1, r1, #19
   156b6:	430e      	orrs	r6, r1
   156b8:	2a1b      	cmp	r2, #27
   156ba:	dc7b      	bgt.n	157b4 <__aeabi_fsub+0x1cc>
   156bc:	0031      	movs	r1, r6
   156be:	2020      	movs	r0, #32
   156c0:	40d1      	lsrs	r1, r2
   156c2:	1a82      	subs	r2, r0, r2
   156c4:	4096      	lsls	r6, r2
   156c6:	1e72      	subs	r2, r6, #1
   156c8:	4196      	sbcs	r6, r2
   156ca:	430e      	orrs	r6, r1
   156cc:	1b9b      	subs	r3, r3, r6
   156ce:	015a      	lsls	r2, r3, #5
   156d0:	d4ba      	bmi.n	15648 <__aeabi_fsub+0x60>
   156d2:	075a      	lsls	r2, r3, #29
   156d4:	d1d0      	bne.n	15678 <__aeabi_fsub+0x90>
   156d6:	2201      	movs	r2, #1
   156d8:	08df      	lsrs	r7, r3, #3
   156da:	402a      	ands	r2, r5
   156dc:	2cff      	cmp	r4, #255	; 0xff
   156de:	d133      	bne.n	15748 <__aeabi_fsub+0x160>
   156e0:	2f00      	cmp	r7, #0
   156e2:	d100      	bne.n	156e6 <__aeabi_fsub+0xfe>
   156e4:	e0a8      	b.n	15838 <__aeabi_fsub+0x250>
   156e6:	2380      	movs	r3, #128	; 0x80
   156e8:	03db      	lsls	r3, r3, #15
   156ea:	433b      	orrs	r3, r7
   156ec:	025b      	lsls	r3, r3, #9
   156ee:	0a5b      	lsrs	r3, r3, #9
   156f0:	24ff      	movs	r4, #255	; 0xff
   156f2:	e7d1      	b.n	15698 <__aeabi_fsub+0xb0>
   156f4:	1a21      	subs	r1, r4, r0
   156f6:	2900      	cmp	r1, #0
   156f8:	dd4c      	ble.n	15794 <__aeabi_fsub+0x1ac>
   156fa:	2800      	cmp	r0, #0
   156fc:	d02a      	beq.n	15754 <__aeabi_fsub+0x16c>
   156fe:	2cff      	cmp	r4, #255	; 0xff
   15700:	d0b8      	beq.n	15674 <__aeabi_fsub+0x8c>
   15702:	2080      	movs	r0, #128	; 0x80
   15704:	04c0      	lsls	r0, r0, #19
   15706:	4306      	orrs	r6, r0
   15708:	291b      	cmp	r1, #27
   1570a:	dd00      	ble.n	1570e <__aeabi_fsub+0x126>
   1570c:	e0af      	b.n	1586e <__aeabi_fsub+0x286>
   1570e:	0030      	movs	r0, r6
   15710:	2720      	movs	r7, #32
   15712:	40c8      	lsrs	r0, r1
   15714:	1a79      	subs	r1, r7, r1
   15716:	408e      	lsls	r6, r1
   15718:	1e71      	subs	r1, r6, #1
   1571a:	418e      	sbcs	r6, r1
   1571c:	4306      	orrs	r6, r0
   1571e:	199b      	adds	r3, r3, r6
   15720:	0159      	lsls	r1, r3, #5
   15722:	d5d6      	bpl.n	156d2 <__aeabi_fsub+0xea>
   15724:	3401      	adds	r4, #1
   15726:	2cff      	cmp	r4, #255	; 0xff
   15728:	d100      	bne.n	1572c <__aeabi_fsub+0x144>
   1572a:	e085      	b.n	15838 <__aeabi_fsub+0x250>
   1572c:	2201      	movs	r2, #1
   1572e:	497a      	ldr	r1, [pc, #488]	; (15918 <__aeabi_fsub+0x330>)
   15730:	401a      	ands	r2, r3
   15732:	085b      	lsrs	r3, r3, #1
   15734:	400b      	ands	r3, r1
   15736:	4313      	orrs	r3, r2
   15738:	e79c      	b.n	15674 <__aeabi_fsub+0x8c>
   1573a:	2e00      	cmp	r6, #0
   1573c:	d000      	beq.n	15740 <__aeabi_fsub+0x158>
   1573e:	e770      	b.n	15622 <__aeabi_fsub+0x3a>
   15740:	e76b      	b.n	1561a <__aeabi_fsub+0x32>
   15742:	1e3b      	subs	r3, r7, #0
   15744:	d1c5      	bne.n	156d2 <__aeabi_fsub+0xea>
   15746:	2200      	movs	r2, #0
   15748:	027b      	lsls	r3, r7, #9
   1574a:	0a5b      	lsrs	r3, r3, #9
   1574c:	b2e4      	uxtb	r4, r4
   1574e:	e7a3      	b.n	15698 <__aeabi_fsub+0xb0>
   15750:	0014      	movs	r4, r2
   15752:	e78f      	b.n	15674 <__aeabi_fsub+0x8c>
   15754:	2e00      	cmp	r6, #0
   15756:	d04d      	beq.n	157f4 <__aeabi_fsub+0x20c>
   15758:	1e48      	subs	r0, r1, #1
   1575a:	2800      	cmp	r0, #0
   1575c:	d157      	bne.n	1580e <__aeabi_fsub+0x226>
   1575e:	199b      	adds	r3, r3, r6
   15760:	2401      	movs	r4, #1
   15762:	015a      	lsls	r2, r3, #5
   15764:	d5b5      	bpl.n	156d2 <__aeabi_fsub+0xea>
   15766:	2402      	movs	r4, #2
   15768:	e7e0      	b.n	1572c <__aeabi_fsub+0x144>
   1576a:	2a00      	cmp	r2, #0
   1576c:	d125      	bne.n	157ba <__aeabi_fsub+0x1d2>
   1576e:	1c62      	adds	r2, r4, #1
   15770:	b2d2      	uxtb	r2, r2
   15772:	2a01      	cmp	r2, #1
   15774:	dd72      	ble.n	1585c <__aeabi_fsub+0x274>
   15776:	1b9f      	subs	r7, r3, r6
   15778:	017a      	lsls	r2, r7, #5
   1577a:	d535      	bpl.n	157e8 <__aeabi_fsub+0x200>
   1577c:	1af7      	subs	r7, r6, r3
   1577e:	000d      	movs	r5, r1
   15780:	e764      	b.n	1564c <__aeabi_fsub+0x64>
   15782:	2201      	movs	r2, #1
   15784:	2300      	movs	r3, #0
   15786:	402a      	ands	r2, r5
   15788:	e786      	b.n	15698 <__aeabi_fsub+0xb0>
   1578a:	003b      	movs	r3, r7
   1578c:	4a63      	ldr	r2, [pc, #396]	; (1591c <__aeabi_fsub+0x334>)
   1578e:	1a24      	subs	r4, r4, r0
   15790:	4013      	ands	r3, r2
   15792:	e76f      	b.n	15674 <__aeabi_fsub+0x8c>
   15794:	2900      	cmp	r1, #0
   15796:	d16c      	bne.n	15872 <__aeabi_fsub+0x28a>
   15798:	1c61      	adds	r1, r4, #1
   1579a:	b2c8      	uxtb	r0, r1
   1579c:	2801      	cmp	r0, #1
   1579e:	dd4e      	ble.n	1583e <__aeabi_fsub+0x256>
   157a0:	29ff      	cmp	r1, #255	; 0xff
   157a2:	d049      	beq.n	15838 <__aeabi_fsub+0x250>
   157a4:	199b      	adds	r3, r3, r6
   157a6:	085b      	lsrs	r3, r3, #1
   157a8:	000c      	movs	r4, r1
   157aa:	e763      	b.n	15674 <__aeabi_fsub+0x8c>
   157ac:	2aff      	cmp	r2, #255	; 0xff
   157ae:	d041      	beq.n	15834 <__aeabi_fsub+0x24c>
   157b0:	000a      	movs	r2, r1
   157b2:	e781      	b.n	156b8 <__aeabi_fsub+0xd0>
   157b4:	2601      	movs	r6, #1
   157b6:	1b9b      	subs	r3, r3, r6
   157b8:	e789      	b.n	156ce <__aeabi_fsub+0xe6>
   157ba:	2c00      	cmp	r4, #0
   157bc:	d01c      	beq.n	157f8 <__aeabi_fsub+0x210>
   157be:	28ff      	cmp	r0, #255	; 0xff
   157c0:	d021      	beq.n	15806 <__aeabi_fsub+0x21e>
   157c2:	2480      	movs	r4, #128	; 0x80
   157c4:	04e4      	lsls	r4, r4, #19
   157c6:	4252      	negs	r2, r2
   157c8:	4323      	orrs	r3, r4
   157ca:	2a1b      	cmp	r2, #27
   157cc:	dd00      	ble.n	157d0 <__aeabi_fsub+0x1e8>
   157ce:	e096      	b.n	158fe <__aeabi_fsub+0x316>
   157d0:	001c      	movs	r4, r3
   157d2:	2520      	movs	r5, #32
   157d4:	40d4      	lsrs	r4, r2
   157d6:	1aaa      	subs	r2, r5, r2
   157d8:	4093      	lsls	r3, r2
   157da:	1e5a      	subs	r2, r3, #1
   157dc:	4193      	sbcs	r3, r2
   157de:	4323      	orrs	r3, r4
   157e0:	1af3      	subs	r3, r6, r3
   157e2:	0004      	movs	r4, r0
   157e4:	000d      	movs	r5, r1
   157e6:	e72d      	b.n	15644 <__aeabi_fsub+0x5c>
   157e8:	2f00      	cmp	r7, #0
   157ea:	d000      	beq.n	157ee <__aeabi_fsub+0x206>
   157ec:	e72e      	b.n	1564c <__aeabi_fsub+0x64>
   157ee:	2200      	movs	r2, #0
   157f0:	2400      	movs	r4, #0
   157f2:	e7a9      	b.n	15748 <__aeabi_fsub+0x160>
   157f4:	000c      	movs	r4, r1
   157f6:	e73d      	b.n	15674 <__aeabi_fsub+0x8c>
   157f8:	2b00      	cmp	r3, #0
   157fa:	d058      	beq.n	158ae <__aeabi_fsub+0x2c6>
   157fc:	43d2      	mvns	r2, r2
   157fe:	2a00      	cmp	r2, #0
   15800:	d0ee      	beq.n	157e0 <__aeabi_fsub+0x1f8>
   15802:	28ff      	cmp	r0, #255	; 0xff
   15804:	d1e1      	bne.n	157ca <__aeabi_fsub+0x1e2>
   15806:	0033      	movs	r3, r6
   15808:	24ff      	movs	r4, #255	; 0xff
   1580a:	000d      	movs	r5, r1
   1580c:	e732      	b.n	15674 <__aeabi_fsub+0x8c>
   1580e:	29ff      	cmp	r1, #255	; 0xff
   15810:	d010      	beq.n	15834 <__aeabi_fsub+0x24c>
   15812:	0001      	movs	r1, r0
   15814:	e778      	b.n	15708 <__aeabi_fsub+0x120>
   15816:	2b00      	cmp	r3, #0
   15818:	d06e      	beq.n	158f8 <__aeabi_fsub+0x310>
   1581a:	24ff      	movs	r4, #255	; 0xff
   1581c:	2e00      	cmp	r6, #0
   1581e:	d100      	bne.n	15822 <__aeabi_fsub+0x23a>
   15820:	e728      	b.n	15674 <__aeabi_fsub+0x8c>
   15822:	2280      	movs	r2, #128	; 0x80
   15824:	4651      	mov	r1, sl
   15826:	03d2      	lsls	r2, r2, #15
   15828:	4211      	tst	r1, r2
   1582a:	d003      	beq.n	15834 <__aeabi_fsub+0x24c>
   1582c:	4661      	mov	r1, ip
   1582e:	4211      	tst	r1, r2
   15830:	d100      	bne.n	15834 <__aeabi_fsub+0x24c>
   15832:	0033      	movs	r3, r6
   15834:	24ff      	movs	r4, #255	; 0xff
   15836:	e71d      	b.n	15674 <__aeabi_fsub+0x8c>
   15838:	24ff      	movs	r4, #255	; 0xff
   1583a:	2300      	movs	r3, #0
   1583c:	e72c      	b.n	15698 <__aeabi_fsub+0xb0>
   1583e:	2c00      	cmp	r4, #0
   15840:	d1e9      	bne.n	15816 <__aeabi_fsub+0x22e>
   15842:	2b00      	cmp	r3, #0
   15844:	d063      	beq.n	1590e <__aeabi_fsub+0x326>
   15846:	2e00      	cmp	r6, #0
   15848:	d100      	bne.n	1584c <__aeabi_fsub+0x264>
   1584a:	e713      	b.n	15674 <__aeabi_fsub+0x8c>
   1584c:	199b      	adds	r3, r3, r6
   1584e:	015a      	lsls	r2, r3, #5
   15850:	d400      	bmi.n	15854 <__aeabi_fsub+0x26c>
   15852:	e73e      	b.n	156d2 <__aeabi_fsub+0xea>
   15854:	4a31      	ldr	r2, [pc, #196]	; (1591c <__aeabi_fsub+0x334>)
   15856:	000c      	movs	r4, r1
   15858:	4013      	ands	r3, r2
   1585a:	e70b      	b.n	15674 <__aeabi_fsub+0x8c>
   1585c:	2c00      	cmp	r4, #0
   1585e:	d11e      	bne.n	1589e <__aeabi_fsub+0x2b6>
   15860:	2b00      	cmp	r3, #0
   15862:	d12f      	bne.n	158c4 <__aeabi_fsub+0x2dc>
   15864:	2e00      	cmp	r6, #0
   15866:	d04f      	beq.n	15908 <__aeabi_fsub+0x320>
   15868:	0033      	movs	r3, r6
   1586a:	000d      	movs	r5, r1
   1586c:	e702      	b.n	15674 <__aeabi_fsub+0x8c>
   1586e:	2601      	movs	r6, #1
   15870:	e755      	b.n	1571e <__aeabi_fsub+0x136>
   15872:	2c00      	cmp	r4, #0
   15874:	d11f      	bne.n	158b6 <__aeabi_fsub+0x2ce>
   15876:	2b00      	cmp	r3, #0
   15878:	d043      	beq.n	15902 <__aeabi_fsub+0x31a>
   1587a:	43c9      	mvns	r1, r1
   1587c:	2900      	cmp	r1, #0
   1587e:	d00b      	beq.n	15898 <__aeabi_fsub+0x2b0>
   15880:	28ff      	cmp	r0, #255	; 0xff
   15882:	d039      	beq.n	158f8 <__aeabi_fsub+0x310>
   15884:	291b      	cmp	r1, #27
   15886:	dc44      	bgt.n	15912 <__aeabi_fsub+0x32a>
   15888:	001c      	movs	r4, r3
   1588a:	2720      	movs	r7, #32
   1588c:	40cc      	lsrs	r4, r1
   1588e:	1a79      	subs	r1, r7, r1
   15890:	408b      	lsls	r3, r1
   15892:	1e59      	subs	r1, r3, #1
   15894:	418b      	sbcs	r3, r1
   15896:	4323      	orrs	r3, r4
   15898:	199b      	adds	r3, r3, r6
   1589a:	0004      	movs	r4, r0
   1589c:	e740      	b.n	15720 <__aeabi_fsub+0x138>
   1589e:	2b00      	cmp	r3, #0
   158a0:	d11a      	bne.n	158d8 <__aeabi_fsub+0x2f0>
   158a2:	2e00      	cmp	r6, #0
   158a4:	d124      	bne.n	158f0 <__aeabi_fsub+0x308>
   158a6:	2780      	movs	r7, #128	; 0x80
   158a8:	2200      	movs	r2, #0
   158aa:	03ff      	lsls	r7, r7, #15
   158ac:	e71b      	b.n	156e6 <__aeabi_fsub+0xfe>
   158ae:	0033      	movs	r3, r6
   158b0:	0004      	movs	r4, r0
   158b2:	000d      	movs	r5, r1
   158b4:	e6de      	b.n	15674 <__aeabi_fsub+0x8c>
   158b6:	28ff      	cmp	r0, #255	; 0xff
   158b8:	d01e      	beq.n	158f8 <__aeabi_fsub+0x310>
   158ba:	2480      	movs	r4, #128	; 0x80
   158bc:	04e4      	lsls	r4, r4, #19
   158be:	4249      	negs	r1, r1
   158c0:	4323      	orrs	r3, r4
   158c2:	e7df      	b.n	15884 <__aeabi_fsub+0x29c>
   158c4:	2e00      	cmp	r6, #0
   158c6:	d100      	bne.n	158ca <__aeabi_fsub+0x2e2>
   158c8:	e6d4      	b.n	15674 <__aeabi_fsub+0x8c>
   158ca:	1b9f      	subs	r7, r3, r6
   158cc:	017a      	lsls	r2, r7, #5
   158ce:	d400      	bmi.n	158d2 <__aeabi_fsub+0x2ea>
   158d0:	e737      	b.n	15742 <__aeabi_fsub+0x15a>
   158d2:	1af3      	subs	r3, r6, r3
   158d4:	000d      	movs	r5, r1
   158d6:	e6cd      	b.n	15674 <__aeabi_fsub+0x8c>
   158d8:	24ff      	movs	r4, #255	; 0xff
   158da:	2e00      	cmp	r6, #0
   158dc:	d100      	bne.n	158e0 <__aeabi_fsub+0x2f8>
   158de:	e6c9      	b.n	15674 <__aeabi_fsub+0x8c>
   158e0:	2280      	movs	r2, #128	; 0x80
   158e2:	4650      	mov	r0, sl
   158e4:	03d2      	lsls	r2, r2, #15
   158e6:	4210      	tst	r0, r2
   158e8:	d0a4      	beq.n	15834 <__aeabi_fsub+0x24c>
   158ea:	4660      	mov	r0, ip
   158ec:	4210      	tst	r0, r2
   158ee:	d1a1      	bne.n	15834 <__aeabi_fsub+0x24c>
   158f0:	0033      	movs	r3, r6
   158f2:	000d      	movs	r5, r1
   158f4:	24ff      	movs	r4, #255	; 0xff
   158f6:	e6bd      	b.n	15674 <__aeabi_fsub+0x8c>
   158f8:	0033      	movs	r3, r6
   158fa:	24ff      	movs	r4, #255	; 0xff
   158fc:	e6ba      	b.n	15674 <__aeabi_fsub+0x8c>
   158fe:	2301      	movs	r3, #1
   15900:	e76e      	b.n	157e0 <__aeabi_fsub+0x1f8>
   15902:	0033      	movs	r3, r6
   15904:	0004      	movs	r4, r0
   15906:	e6b5      	b.n	15674 <__aeabi_fsub+0x8c>
   15908:	2700      	movs	r7, #0
   1590a:	2200      	movs	r2, #0
   1590c:	e71c      	b.n	15748 <__aeabi_fsub+0x160>
   1590e:	0033      	movs	r3, r6
   15910:	e6b0      	b.n	15674 <__aeabi_fsub+0x8c>
   15912:	2301      	movs	r3, #1
   15914:	e7c0      	b.n	15898 <__aeabi_fsub+0x2b0>
   15916:	46c0      	nop			; (mov r8, r8)
   15918:	7dffffff 	.word	0x7dffffff
   1591c:	fbffffff 	.word	0xfbffffff

00015920 <__aeabi_f2iz>:
   15920:	0241      	lsls	r1, r0, #9
   15922:	0043      	lsls	r3, r0, #1
   15924:	0fc2      	lsrs	r2, r0, #31
   15926:	0a49      	lsrs	r1, r1, #9
   15928:	0e1b      	lsrs	r3, r3, #24
   1592a:	2000      	movs	r0, #0
   1592c:	2b7e      	cmp	r3, #126	; 0x7e
   1592e:	dd0d      	ble.n	1594c <__aeabi_f2iz+0x2c>
   15930:	2b9d      	cmp	r3, #157	; 0x9d
   15932:	dc0c      	bgt.n	1594e <__aeabi_f2iz+0x2e>
   15934:	2080      	movs	r0, #128	; 0x80
   15936:	0400      	lsls	r0, r0, #16
   15938:	4301      	orrs	r1, r0
   1593a:	2b95      	cmp	r3, #149	; 0x95
   1593c:	dc0a      	bgt.n	15954 <__aeabi_f2iz+0x34>
   1593e:	2096      	movs	r0, #150	; 0x96
   15940:	1ac3      	subs	r3, r0, r3
   15942:	40d9      	lsrs	r1, r3
   15944:	4248      	negs	r0, r1
   15946:	2a00      	cmp	r2, #0
   15948:	d100      	bne.n	1594c <__aeabi_f2iz+0x2c>
   1594a:	0008      	movs	r0, r1
   1594c:	4770      	bx	lr
   1594e:	4b03      	ldr	r3, [pc, #12]	; (1595c <__aeabi_f2iz+0x3c>)
   15950:	18d0      	adds	r0, r2, r3
   15952:	e7fb      	b.n	1594c <__aeabi_f2iz+0x2c>
   15954:	3b96      	subs	r3, #150	; 0x96
   15956:	4099      	lsls	r1, r3
   15958:	e7f4      	b.n	15944 <__aeabi_f2iz+0x24>
   1595a:	46c0      	nop			; (mov r8, r8)
   1595c:	7fffffff 	.word	0x7fffffff

00015960 <__aeabi_i2f>:
   15960:	b570      	push	{r4, r5, r6, lr}
   15962:	2800      	cmp	r0, #0
   15964:	d030      	beq.n	159c8 <__aeabi_i2f+0x68>
   15966:	17c3      	asrs	r3, r0, #31
   15968:	18c4      	adds	r4, r0, r3
   1596a:	405c      	eors	r4, r3
   1596c:	0fc5      	lsrs	r5, r0, #31
   1596e:	0020      	movs	r0, r4
   15970:	f001 fef0 	bl	17754 <__clzsi2>
   15974:	239e      	movs	r3, #158	; 0x9e
   15976:	1a1b      	subs	r3, r3, r0
   15978:	2b96      	cmp	r3, #150	; 0x96
   1597a:	dc0d      	bgt.n	15998 <__aeabi_i2f+0x38>
   1597c:	2296      	movs	r2, #150	; 0x96
   1597e:	1ad2      	subs	r2, r2, r3
   15980:	4094      	lsls	r4, r2
   15982:	002a      	movs	r2, r5
   15984:	0264      	lsls	r4, r4, #9
   15986:	0a64      	lsrs	r4, r4, #9
   15988:	b2db      	uxtb	r3, r3
   1598a:	0264      	lsls	r4, r4, #9
   1598c:	05db      	lsls	r3, r3, #23
   1598e:	0a60      	lsrs	r0, r4, #9
   15990:	07d2      	lsls	r2, r2, #31
   15992:	4318      	orrs	r0, r3
   15994:	4310      	orrs	r0, r2
   15996:	bd70      	pop	{r4, r5, r6, pc}
   15998:	2b99      	cmp	r3, #153	; 0x99
   1599a:	dc19      	bgt.n	159d0 <__aeabi_i2f+0x70>
   1599c:	2299      	movs	r2, #153	; 0x99
   1599e:	1ad2      	subs	r2, r2, r3
   159a0:	2a00      	cmp	r2, #0
   159a2:	dd29      	ble.n	159f8 <__aeabi_i2f+0x98>
   159a4:	4094      	lsls	r4, r2
   159a6:	0022      	movs	r2, r4
   159a8:	4c14      	ldr	r4, [pc, #80]	; (159fc <__aeabi_i2f+0x9c>)
   159aa:	4014      	ands	r4, r2
   159ac:	0751      	lsls	r1, r2, #29
   159ae:	d004      	beq.n	159ba <__aeabi_i2f+0x5a>
   159b0:	210f      	movs	r1, #15
   159b2:	400a      	ands	r2, r1
   159b4:	2a04      	cmp	r2, #4
   159b6:	d000      	beq.n	159ba <__aeabi_i2f+0x5a>
   159b8:	3404      	adds	r4, #4
   159ba:	0162      	lsls	r2, r4, #5
   159bc:	d413      	bmi.n	159e6 <__aeabi_i2f+0x86>
   159be:	01a4      	lsls	r4, r4, #6
   159c0:	0a64      	lsrs	r4, r4, #9
   159c2:	b2db      	uxtb	r3, r3
   159c4:	002a      	movs	r2, r5
   159c6:	e7e0      	b.n	1598a <__aeabi_i2f+0x2a>
   159c8:	2200      	movs	r2, #0
   159ca:	2300      	movs	r3, #0
   159cc:	2400      	movs	r4, #0
   159ce:	e7dc      	b.n	1598a <__aeabi_i2f+0x2a>
   159d0:	2205      	movs	r2, #5
   159d2:	0021      	movs	r1, r4
   159d4:	1a12      	subs	r2, r2, r0
   159d6:	40d1      	lsrs	r1, r2
   159d8:	22b9      	movs	r2, #185	; 0xb9
   159da:	1ad2      	subs	r2, r2, r3
   159dc:	4094      	lsls	r4, r2
   159de:	1e62      	subs	r2, r4, #1
   159e0:	4194      	sbcs	r4, r2
   159e2:	430c      	orrs	r4, r1
   159e4:	e7da      	b.n	1599c <__aeabi_i2f+0x3c>
   159e6:	4b05      	ldr	r3, [pc, #20]	; (159fc <__aeabi_i2f+0x9c>)
   159e8:	002a      	movs	r2, r5
   159ea:	401c      	ands	r4, r3
   159ec:	239f      	movs	r3, #159	; 0x9f
   159ee:	01a4      	lsls	r4, r4, #6
   159f0:	1a1b      	subs	r3, r3, r0
   159f2:	0a64      	lsrs	r4, r4, #9
   159f4:	b2db      	uxtb	r3, r3
   159f6:	e7c8      	b.n	1598a <__aeabi_i2f+0x2a>
   159f8:	0022      	movs	r2, r4
   159fa:	e7d5      	b.n	159a8 <__aeabi_i2f+0x48>
   159fc:	fbffffff 	.word	0xfbffffff

00015a00 <__aeabi_ui2f>:
   15a00:	b510      	push	{r4, lr}
   15a02:	1e04      	subs	r4, r0, #0
   15a04:	d027      	beq.n	15a56 <__aeabi_ui2f+0x56>
   15a06:	f001 fea5 	bl	17754 <__clzsi2>
   15a0a:	239e      	movs	r3, #158	; 0x9e
   15a0c:	1a1b      	subs	r3, r3, r0
   15a0e:	2b96      	cmp	r3, #150	; 0x96
   15a10:	dc0a      	bgt.n	15a28 <__aeabi_ui2f+0x28>
   15a12:	2296      	movs	r2, #150	; 0x96
   15a14:	1ad2      	subs	r2, r2, r3
   15a16:	4094      	lsls	r4, r2
   15a18:	0264      	lsls	r4, r4, #9
   15a1a:	0a64      	lsrs	r4, r4, #9
   15a1c:	b2db      	uxtb	r3, r3
   15a1e:	0264      	lsls	r4, r4, #9
   15a20:	05db      	lsls	r3, r3, #23
   15a22:	0a60      	lsrs	r0, r4, #9
   15a24:	4318      	orrs	r0, r3
   15a26:	bd10      	pop	{r4, pc}
   15a28:	2b99      	cmp	r3, #153	; 0x99
   15a2a:	dc17      	bgt.n	15a5c <__aeabi_ui2f+0x5c>
   15a2c:	2299      	movs	r2, #153	; 0x99
   15a2e:	1ad2      	subs	r2, r2, r3
   15a30:	2a00      	cmp	r2, #0
   15a32:	dd27      	ble.n	15a84 <__aeabi_ui2f+0x84>
   15a34:	4094      	lsls	r4, r2
   15a36:	0022      	movs	r2, r4
   15a38:	4c13      	ldr	r4, [pc, #76]	; (15a88 <__aeabi_ui2f+0x88>)
   15a3a:	4014      	ands	r4, r2
   15a3c:	0751      	lsls	r1, r2, #29
   15a3e:	d004      	beq.n	15a4a <__aeabi_ui2f+0x4a>
   15a40:	210f      	movs	r1, #15
   15a42:	400a      	ands	r2, r1
   15a44:	2a04      	cmp	r2, #4
   15a46:	d000      	beq.n	15a4a <__aeabi_ui2f+0x4a>
   15a48:	3404      	adds	r4, #4
   15a4a:	0162      	lsls	r2, r4, #5
   15a4c:	d412      	bmi.n	15a74 <__aeabi_ui2f+0x74>
   15a4e:	01a4      	lsls	r4, r4, #6
   15a50:	0a64      	lsrs	r4, r4, #9
   15a52:	b2db      	uxtb	r3, r3
   15a54:	e7e3      	b.n	15a1e <__aeabi_ui2f+0x1e>
   15a56:	2300      	movs	r3, #0
   15a58:	2400      	movs	r4, #0
   15a5a:	e7e0      	b.n	15a1e <__aeabi_ui2f+0x1e>
   15a5c:	22b9      	movs	r2, #185	; 0xb9
   15a5e:	0021      	movs	r1, r4
   15a60:	1ad2      	subs	r2, r2, r3
   15a62:	4091      	lsls	r1, r2
   15a64:	000a      	movs	r2, r1
   15a66:	1e51      	subs	r1, r2, #1
   15a68:	418a      	sbcs	r2, r1
   15a6a:	2105      	movs	r1, #5
   15a6c:	1a09      	subs	r1, r1, r0
   15a6e:	40cc      	lsrs	r4, r1
   15a70:	4314      	orrs	r4, r2
   15a72:	e7db      	b.n	15a2c <__aeabi_ui2f+0x2c>
   15a74:	4b04      	ldr	r3, [pc, #16]	; (15a88 <__aeabi_ui2f+0x88>)
   15a76:	401c      	ands	r4, r3
   15a78:	239f      	movs	r3, #159	; 0x9f
   15a7a:	01a4      	lsls	r4, r4, #6
   15a7c:	1a1b      	subs	r3, r3, r0
   15a7e:	0a64      	lsrs	r4, r4, #9
   15a80:	b2db      	uxtb	r3, r3
   15a82:	e7cc      	b.n	15a1e <__aeabi_ui2f+0x1e>
   15a84:	0022      	movs	r2, r4
   15a86:	e7d7      	b.n	15a38 <__aeabi_ui2f+0x38>
   15a88:	fbffffff 	.word	0xfbffffff

00015a8c <__aeabi_dadd>:
   15a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15a8e:	4645      	mov	r5, r8
   15a90:	46de      	mov	lr, fp
   15a92:	4657      	mov	r7, sl
   15a94:	464e      	mov	r6, r9
   15a96:	030c      	lsls	r4, r1, #12
   15a98:	b5e0      	push	{r5, r6, r7, lr}
   15a9a:	004e      	lsls	r6, r1, #1
   15a9c:	0fc9      	lsrs	r1, r1, #31
   15a9e:	4688      	mov	r8, r1
   15aa0:	000d      	movs	r5, r1
   15aa2:	0a61      	lsrs	r1, r4, #9
   15aa4:	0f44      	lsrs	r4, r0, #29
   15aa6:	430c      	orrs	r4, r1
   15aa8:	00c7      	lsls	r7, r0, #3
   15aaa:	0319      	lsls	r1, r3, #12
   15aac:	0058      	lsls	r0, r3, #1
   15aae:	0fdb      	lsrs	r3, r3, #31
   15ab0:	469b      	mov	fp, r3
   15ab2:	0a4b      	lsrs	r3, r1, #9
   15ab4:	0f51      	lsrs	r1, r2, #29
   15ab6:	430b      	orrs	r3, r1
   15ab8:	0d76      	lsrs	r6, r6, #21
   15aba:	0d40      	lsrs	r0, r0, #21
   15abc:	0019      	movs	r1, r3
   15abe:	00d2      	lsls	r2, r2, #3
   15ac0:	45d8      	cmp	r8, fp
   15ac2:	d100      	bne.n	15ac6 <__aeabi_dadd+0x3a>
   15ac4:	e0ae      	b.n	15c24 <__aeabi_dadd+0x198>
   15ac6:	1a35      	subs	r5, r6, r0
   15ac8:	2d00      	cmp	r5, #0
   15aca:	dc00      	bgt.n	15ace <__aeabi_dadd+0x42>
   15acc:	e0f6      	b.n	15cbc <__aeabi_dadd+0x230>
   15ace:	2800      	cmp	r0, #0
   15ad0:	d10f      	bne.n	15af2 <__aeabi_dadd+0x66>
   15ad2:	4313      	orrs	r3, r2
   15ad4:	d100      	bne.n	15ad8 <__aeabi_dadd+0x4c>
   15ad6:	e0db      	b.n	15c90 <__aeabi_dadd+0x204>
   15ad8:	1e6b      	subs	r3, r5, #1
   15ada:	2b00      	cmp	r3, #0
   15adc:	d000      	beq.n	15ae0 <__aeabi_dadd+0x54>
   15ade:	e137      	b.n	15d50 <__aeabi_dadd+0x2c4>
   15ae0:	1aba      	subs	r2, r7, r2
   15ae2:	4297      	cmp	r7, r2
   15ae4:	41bf      	sbcs	r7, r7
   15ae6:	1a64      	subs	r4, r4, r1
   15ae8:	427f      	negs	r7, r7
   15aea:	1be4      	subs	r4, r4, r7
   15aec:	2601      	movs	r6, #1
   15aee:	0017      	movs	r7, r2
   15af0:	e024      	b.n	15b3c <__aeabi_dadd+0xb0>
   15af2:	4bc6      	ldr	r3, [pc, #792]	; (15e0c <__aeabi_dadd+0x380>)
   15af4:	429e      	cmp	r6, r3
   15af6:	d04d      	beq.n	15b94 <__aeabi_dadd+0x108>
   15af8:	2380      	movs	r3, #128	; 0x80
   15afa:	041b      	lsls	r3, r3, #16
   15afc:	4319      	orrs	r1, r3
   15afe:	2d38      	cmp	r5, #56	; 0x38
   15b00:	dd00      	ble.n	15b04 <__aeabi_dadd+0x78>
   15b02:	e107      	b.n	15d14 <__aeabi_dadd+0x288>
   15b04:	2d1f      	cmp	r5, #31
   15b06:	dd00      	ble.n	15b0a <__aeabi_dadd+0x7e>
   15b08:	e138      	b.n	15d7c <__aeabi_dadd+0x2f0>
   15b0a:	2020      	movs	r0, #32
   15b0c:	1b43      	subs	r3, r0, r5
   15b0e:	469a      	mov	sl, r3
   15b10:	000b      	movs	r3, r1
   15b12:	4650      	mov	r0, sl
   15b14:	4083      	lsls	r3, r0
   15b16:	4699      	mov	r9, r3
   15b18:	0013      	movs	r3, r2
   15b1a:	4648      	mov	r0, r9
   15b1c:	40eb      	lsrs	r3, r5
   15b1e:	4318      	orrs	r0, r3
   15b20:	0003      	movs	r3, r0
   15b22:	4650      	mov	r0, sl
   15b24:	4082      	lsls	r2, r0
   15b26:	1e50      	subs	r0, r2, #1
   15b28:	4182      	sbcs	r2, r0
   15b2a:	40e9      	lsrs	r1, r5
   15b2c:	431a      	orrs	r2, r3
   15b2e:	1aba      	subs	r2, r7, r2
   15b30:	1a61      	subs	r1, r4, r1
   15b32:	4297      	cmp	r7, r2
   15b34:	41a4      	sbcs	r4, r4
   15b36:	0017      	movs	r7, r2
   15b38:	4264      	negs	r4, r4
   15b3a:	1b0c      	subs	r4, r1, r4
   15b3c:	0223      	lsls	r3, r4, #8
   15b3e:	d562      	bpl.n	15c06 <__aeabi_dadd+0x17a>
   15b40:	0264      	lsls	r4, r4, #9
   15b42:	0a65      	lsrs	r5, r4, #9
   15b44:	2d00      	cmp	r5, #0
   15b46:	d100      	bne.n	15b4a <__aeabi_dadd+0xbe>
   15b48:	e0df      	b.n	15d0a <__aeabi_dadd+0x27e>
   15b4a:	0028      	movs	r0, r5
   15b4c:	f001 fe02 	bl	17754 <__clzsi2>
   15b50:	0003      	movs	r3, r0
   15b52:	3b08      	subs	r3, #8
   15b54:	2b1f      	cmp	r3, #31
   15b56:	dd00      	ble.n	15b5a <__aeabi_dadd+0xce>
   15b58:	e0d2      	b.n	15d00 <__aeabi_dadd+0x274>
   15b5a:	2220      	movs	r2, #32
   15b5c:	003c      	movs	r4, r7
   15b5e:	1ad2      	subs	r2, r2, r3
   15b60:	409d      	lsls	r5, r3
   15b62:	40d4      	lsrs	r4, r2
   15b64:	409f      	lsls	r7, r3
   15b66:	4325      	orrs	r5, r4
   15b68:	429e      	cmp	r6, r3
   15b6a:	dd00      	ble.n	15b6e <__aeabi_dadd+0xe2>
   15b6c:	e0c4      	b.n	15cf8 <__aeabi_dadd+0x26c>
   15b6e:	1b9e      	subs	r6, r3, r6
   15b70:	1c73      	adds	r3, r6, #1
   15b72:	2b1f      	cmp	r3, #31
   15b74:	dd00      	ble.n	15b78 <__aeabi_dadd+0xec>
   15b76:	e0f1      	b.n	15d5c <__aeabi_dadd+0x2d0>
   15b78:	2220      	movs	r2, #32
   15b7a:	0038      	movs	r0, r7
   15b7c:	0029      	movs	r1, r5
   15b7e:	1ad2      	subs	r2, r2, r3
   15b80:	40d8      	lsrs	r0, r3
   15b82:	4091      	lsls	r1, r2
   15b84:	4097      	lsls	r7, r2
   15b86:	002c      	movs	r4, r5
   15b88:	4301      	orrs	r1, r0
   15b8a:	1e78      	subs	r0, r7, #1
   15b8c:	4187      	sbcs	r7, r0
   15b8e:	40dc      	lsrs	r4, r3
   15b90:	2600      	movs	r6, #0
   15b92:	430f      	orrs	r7, r1
   15b94:	077b      	lsls	r3, r7, #29
   15b96:	d009      	beq.n	15bac <__aeabi_dadd+0x120>
   15b98:	230f      	movs	r3, #15
   15b9a:	403b      	ands	r3, r7
   15b9c:	2b04      	cmp	r3, #4
   15b9e:	d005      	beq.n	15bac <__aeabi_dadd+0x120>
   15ba0:	1d3b      	adds	r3, r7, #4
   15ba2:	42bb      	cmp	r3, r7
   15ba4:	41bf      	sbcs	r7, r7
   15ba6:	427f      	negs	r7, r7
   15ba8:	19e4      	adds	r4, r4, r7
   15baa:	001f      	movs	r7, r3
   15bac:	0223      	lsls	r3, r4, #8
   15bae:	d52c      	bpl.n	15c0a <__aeabi_dadd+0x17e>
   15bb0:	4b96      	ldr	r3, [pc, #600]	; (15e0c <__aeabi_dadd+0x380>)
   15bb2:	3601      	adds	r6, #1
   15bb4:	429e      	cmp	r6, r3
   15bb6:	d100      	bne.n	15bba <__aeabi_dadd+0x12e>
   15bb8:	e09a      	b.n	15cf0 <__aeabi_dadd+0x264>
   15bba:	4645      	mov	r5, r8
   15bbc:	4b94      	ldr	r3, [pc, #592]	; (15e10 <__aeabi_dadd+0x384>)
   15bbe:	08ff      	lsrs	r7, r7, #3
   15bc0:	401c      	ands	r4, r3
   15bc2:	0760      	lsls	r0, r4, #29
   15bc4:	0576      	lsls	r6, r6, #21
   15bc6:	0264      	lsls	r4, r4, #9
   15bc8:	4307      	orrs	r7, r0
   15bca:	0b24      	lsrs	r4, r4, #12
   15bcc:	0d76      	lsrs	r6, r6, #21
   15bce:	2100      	movs	r1, #0
   15bd0:	0324      	lsls	r4, r4, #12
   15bd2:	0b23      	lsrs	r3, r4, #12
   15bd4:	0d0c      	lsrs	r4, r1, #20
   15bd6:	4a8f      	ldr	r2, [pc, #572]	; (15e14 <__aeabi_dadd+0x388>)
   15bd8:	0524      	lsls	r4, r4, #20
   15bda:	431c      	orrs	r4, r3
   15bdc:	4014      	ands	r4, r2
   15bde:	0533      	lsls	r3, r6, #20
   15be0:	4323      	orrs	r3, r4
   15be2:	005b      	lsls	r3, r3, #1
   15be4:	07ed      	lsls	r5, r5, #31
   15be6:	085b      	lsrs	r3, r3, #1
   15be8:	432b      	orrs	r3, r5
   15bea:	0038      	movs	r0, r7
   15bec:	0019      	movs	r1, r3
   15bee:	bc3c      	pop	{r2, r3, r4, r5}
   15bf0:	4690      	mov	r8, r2
   15bf2:	4699      	mov	r9, r3
   15bf4:	46a2      	mov	sl, r4
   15bf6:	46ab      	mov	fp, r5
   15bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15bfa:	4664      	mov	r4, ip
   15bfc:	4304      	orrs	r4, r0
   15bfe:	d100      	bne.n	15c02 <__aeabi_dadd+0x176>
   15c00:	e211      	b.n	16026 <__aeabi_dadd+0x59a>
   15c02:	0004      	movs	r4, r0
   15c04:	4667      	mov	r7, ip
   15c06:	077b      	lsls	r3, r7, #29
   15c08:	d1c6      	bne.n	15b98 <__aeabi_dadd+0x10c>
   15c0a:	4645      	mov	r5, r8
   15c0c:	0760      	lsls	r0, r4, #29
   15c0e:	08ff      	lsrs	r7, r7, #3
   15c10:	4307      	orrs	r7, r0
   15c12:	08e4      	lsrs	r4, r4, #3
   15c14:	4b7d      	ldr	r3, [pc, #500]	; (15e0c <__aeabi_dadd+0x380>)
   15c16:	429e      	cmp	r6, r3
   15c18:	d030      	beq.n	15c7c <__aeabi_dadd+0x1f0>
   15c1a:	0324      	lsls	r4, r4, #12
   15c1c:	0576      	lsls	r6, r6, #21
   15c1e:	0b24      	lsrs	r4, r4, #12
   15c20:	0d76      	lsrs	r6, r6, #21
   15c22:	e7d4      	b.n	15bce <__aeabi_dadd+0x142>
   15c24:	1a33      	subs	r3, r6, r0
   15c26:	469a      	mov	sl, r3
   15c28:	2b00      	cmp	r3, #0
   15c2a:	dd78      	ble.n	15d1e <__aeabi_dadd+0x292>
   15c2c:	2800      	cmp	r0, #0
   15c2e:	d031      	beq.n	15c94 <__aeabi_dadd+0x208>
   15c30:	4876      	ldr	r0, [pc, #472]	; (15e0c <__aeabi_dadd+0x380>)
   15c32:	4286      	cmp	r6, r0
   15c34:	d0ae      	beq.n	15b94 <__aeabi_dadd+0x108>
   15c36:	2080      	movs	r0, #128	; 0x80
   15c38:	0400      	lsls	r0, r0, #16
   15c3a:	4301      	orrs	r1, r0
   15c3c:	4653      	mov	r3, sl
   15c3e:	2b38      	cmp	r3, #56	; 0x38
   15c40:	dc00      	bgt.n	15c44 <__aeabi_dadd+0x1b8>
   15c42:	e0e9      	b.n	15e18 <__aeabi_dadd+0x38c>
   15c44:	430a      	orrs	r2, r1
   15c46:	1e51      	subs	r1, r2, #1
   15c48:	418a      	sbcs	r2, r1
   15c4a:	2100      	movs	r1, #0
   15c4c:	19d2      	adds	r2, r2, r7
   15c4e:	42ba      	cmp	r2, r7
   15c50:	41bf      	sbcs	r7, r7
   15c52:	1909      	adds	r1, r1, r4
   15c54:	427c      	negs	r4, r7
   15c56:	0017      	movs	r7, r2
   15c58:	190c      	adds	r4, r1, r4
   15c5a:	0223      	lsls	r3, r4, #8
   15c5c:	d5d3      	bpl.n	15c06 <__aeabi_dadd+0x17a>
   15c5e:	4b6b      	ldr	r3, [pc, #428]	; (15e0c <__aeabi_dadd+0x380>)
   15c60:	3601      	adds	r6, #1
   15c62:	429e      	cmp	r6, r3
   15c64:	d100      	bne.n	15c68 <__aeabi_dadd+0x1dc>
   15c66:	e13a      	b.n	15ede <__aeabi_dadd+0x452>
   15c68:	2001      	movs	r0, #1
   15c6a:	4b69      	ldr	r3, [pc, #420]	; (15e10 <__aeabi_dadd+0x384>)
   15c6c:	401c      	ands	r4, r3
   15c6e:	087b      	lsrs	r3, r7, #1
   15c70:	4007      	ands	r7, r0
   15c72:	431f      	orrs	r7, r3
   15c74:	07e0      	lsls	r0, r4, #31
   15c76:	4307      	orrs	r7, r0
   15c78:	0864      	lsrs	r4, r4, #1
   15c7a:	e78b      	b.n	15b94 <__aeabi_dadd+0x108>
   15c7c:	0023      	movs	r3, r4
   15c7e:	433b      	orrs	r3, r7
   15c80:	d100      	bne.n	15c84 <__aeabi_dadd+0x1f8>
   15c82:	e1cb      	b.n	1601c <__aeabi_dadd+0x590>
   15c84:	2280      	movs	r2, #128	; 0x80
   15c86:	0312      	lsls	r2, r2, #12
   15c88:	4314      	orrs	r4, r2
   15c8a:	0324      	lsls	r4, r4, #12
   15c8c:	0b24      	lsrs	r4, r4, #12
   15c8e:	e79e      	b.n	15bce <__aeabi_dadd+0x142>
   15c90:	002e      	movs	r6, r5
   15c92:	e77f      	b.n	15b94 <__aeabi_dadd+0x108>
   15c94:	0008      	movs	r0, r1
   15c96:	4310      	orrs	r0, r2
   15c98:	d100      	bne.n	15c9c <__aeabi_dadd+0x210>
   15c9a:	e0b4      	b.n	15e06 <__aeabi_dadd+0x37a>
   15c9c:	1e58      	subs	r0, r3, #1
   15c9e:	2800      	cmp	r0, #0
   15ca0:	d000      	beq.n	15ca4 <__aeabi_dadd+0x218>
   15ca2:	e0de      	b.n	15e62 <__aeabi_dadd+0x3d6>
   15ca4:	18ba      	adds	r2, r7, r2
   15ca6:	42ba      	cmp	r2, r7
   15ca8:	419b      	sbcs	r3, r3
   15caa:	1864      	adds	r4, r4, r1
   15cac:	425b      	negs	r3, r3
   15cae:	18e4      	adds	r4, r4, r3
   15cb0:	0017      	movs	r7, r2
   15cb2:	2601      	movs	r6, #1
   15cb4:	0223      	lsls	r3, r4, #8
   15cb6:	d5a6      	bpl.n	15c06 <__aeabi_dadd+0x17a>
   15cb8:	2602      	movs	r6, #2
   15cba:	e7d5      	b.n	15c68 <__aeabi_dadd+0x1dc>
   15cbc:	2d00      	cmp	r5, #0
   15cbe:	d16e      	bne.n	15d9e <__aeabi_dadd+0x312>
   15cc0:	1c70      	adds	r0, r6, #1
   15cc2:	0540      	lsls	r0, r0, #21
   15cc4:	0d40      	lsrs	r0, r0, #21
   15cc6:	2801      	cmp	r0, #1
   15cc8:	dc00      	bgt.n	15ccc <__aeabi_dadd+0x240>
   15cca:	e0f9      	b.n	15ec0 <__aeabi_dadd+0x434>
   15ccc:	1ab8      	subs	r0, r7, r2
   15cce:	4684      	mov	ip, r0
   15cd0:	4287      	cmp	r7, r0
   15cd2:	4180      	sbcs	r0, r0
   15cd4:	1ae5      	subs	r5, r4, r3
   15cd6:	4240      	negs	r0, r0
   15cd8:	1a2d      	subs	r5, r5, r0
   15cda:	0228      	lsls	r0, r5, #8
   15cdc:	d400      	bmi.n	15ce0 <__aeabi_dadd+0x254>
   15cde:	e089      	b.n	15df4 <__aeabi_dadd+0x368>
   15ce0:	1bd7      	subs	r7, r2, r7
   15ce2:	42ba      	cmp	r2, r7
   15ce4:	4192      	sbcs	r2, r2
   15ce6:	1b1c      	subs	r4, r3, r4
   15ce8:	4252      	negs	r2, r2
   15cea:	1aa5      	subs	r5, r4, r2
   15cec:	46d8      	mov	r8, fp
   15cee:	e729      	b.n	15b44 <__aeabi_dadd+0xb8>
   15cf0:	4645      	mov	r5, r8
   15cf2:	2400      	movs	r4, #0
   15cf4:	2700      	movs	r7, #0
   15cf6:	e76a      	b.n	15bce <__aeabi_dadd+0x142>
   15cf8:	4c45      	ldr	r4, [pc, #276]	; (15e10 <__aeabi_dadd+0x384>)
   15cfa:	1af6      	subs	r6, r6, r3
   15cfc:	402c      	ands	r4, r5
   15cfe:	e749      	b.n	15b94 <__aeabi_dadd+0x108>
   15d00:	003d      	movs	r5, r7
   15d02:	3828      	subs	r0, #40	; 0x28
   15d04:	4085      	lsls	r5, r0
   15d06:	2700      	movs	r7, #0
   15d08:	e72e      	b.n	15b68 <__aeabi_dadd+0xdc>
   15d0a:	0038      	movs	r0, r7
   15d0c:	f001 fd22 	bl	17754 <__clzsi2>
   15d10:	3020      	adds	r0, #32
   15d12:	e71d      	b.n	15b50 <__aeabi_dadd+0xc4>
   15d14:	430a      	orrs	r2, r1
   15d16:	1e51      	subs	r1, r2, #1
   15d18:	418a      	sbcs	r2, r1
   15d1a:	2100      	movs	r1, #0
   15d1c:	e707      	b.n	15b2e <__aeabi_dadd+0xa2>
   15d1e:	2b00      	cmp	r3, #0
   15d20:	d000      	beq.n	15d24 <__aeabi_dadd+0x298>
   15d22:	e0f3      	b.n	15f0c <__aeabi_dadd+0x480>
   15d24:	1c70      	adds	r0, r6, #1
   15d26:	0543      	lsls	r3, r0, #21
   15d28:	0d5b      	lsrs	r3, r3, #21
   15d2a:	2b01      	cmp	r3, #1
   15d2c:	dc00      	bgt.n	15d30 <__aeabi_dadd+0x2a4>
   15d2e:	e0ad      	b.n	15e8c <__aeabi_dadd+0x400>
   15d30:	4b36      	ldr	r3, [pc, #216]	; (15e0c <__aeabi_dadd+0x380>)
   15d32:	4298      	cmp	r0, r3
   15d34:	d100      	bne.n	15d38 <__aeabi_dadd+0x2ac>
   15d36:	e0d1      	b.n	15edc <__aeabi_dadd+0x450>
   15d38:	18ba      	adds	r2, r7, r2
   15d3a:	42ba      	cmp	r2, r7
   15d3c:	41bf      	sbcs	r7, r7
   15d3e:	1864      	adds	r4, r4, r1
   15d40:	427f      	negs	r7, r7
   15d42:	19e4      	adds	r4, r4, r7
   15d44:	07e7      	lsls	r7, r4, #31
   15d46:	0852      	lsrs	r2, r2, #1
   15d48:	4317      	orrs	r7, r2
   15d4a:	0864      	lsrs	r4, r4, #1
   15d4c:	0006      	movs	r6, r0
   15d4e:	e721      	b.n	15b94 <__aeabi_dadd+0x108>
   15d50:	482e      	ldr	r0, [pc, #184]	; (15e0c <__aeabi_dadd+0x380>)
   15d52:	4285      	cmp	r5, r0
   15d54:	d100      	bne.n	15d58 <__aeabi_dadd+0x2cc>
   15d56:	e093      	b.n	15e80 <__aeabi_dadd+0x3f4>
   15d58:	001d      	movs	r5, r3
   15d5a:	e6d0      	b.n	15afe <__aeabi_dadd+0x72>
   15d5c:	0029      	movs	r1, r5
   15d5e:	3e1f      	subs	r6, #31
   15d60:	40f1      	lsrs	r1, r6
   15d62:	2b20      	cmp	r3, #32
   15d64:	d100      	bne.n	15d68 <__aeabi_dadd+0x2dc>
   15d66:	e08d      	b.n	15e84 <__aeabi_dadd+0x3f8>
   15d68:	2240      	movs	r2, #64	; 0x40
   15d6a:	1ad3      	subs	r3, r2, r3
   15d6c:	409d      	lsls	r5, r3
   15d6e:	432f      	orrs	r7, r5
   15d70:	1e7d      	subs	r5, r7, #1
   15d72:	41af      	sbcs	r7, r5
   15d74:	2400      	movs	r4, #0
   15d76:	430f      	orrs	r7, r1
   15d78:	2600      	movs	r6, #0
   15d7a:	e744      	b.n	15c06 <__aeabi_dadd+0x17a>
   15d7c:	002b      	movs	r3, r5
   15d7e:	0008      	movs	r0, r1
   15d80:	3b20      	subs	r3, #32
   15d82:	40d8      	lsrs	r0, r3
   15d84:	0003      	movs	r3, r0
   15d86:	2d20      	cmp	r5, #32
   15d88:	d100      	bne.n	15d8c <__aeabi_dadd+0x300>
   15d8a:	e07d      	b.n	15e88 <__aeabi_dadd+0x3fc>
   15d8c:	2040      	movs	r0, #64	; 0x40
   15d8e:	1b45      	subs	r5, r0, r5
   15d90:	40a9      	lsls	r1, r5
   15d92:	430a      	orrs	r2, r1
   15d94:	1e51      	subs	r1, r2, #1
   15d96:	418a      	sbcs	r2, r1
   15d98:	2100      	movs	r1, #0
   15d9a:	431a      	orrs	r2, r3
   15d9c:	e6c7      	b.n	15b2e <__aeabi_dadd+0xa2>
   15d9e:	2e00      	cmp	r6, #0
   15da0:	d050      	beq.n	15e44 <__aeabi_dadd+0x3b8>
   15da2:	4e1a      	ldr	r6, [pc, #104]	; (15e0c <__aeabi_dadd+0x380>)
   15da4:	42b0      	cmp	r0, r6
   15da6:	d057      	beq.n	15e58 <__aeabi_dadd+0x3cc>
   15da8:	2680      	movs	r6, #128	; 0x80
   15daa:	426b      	negs	r3, r5
   15dac:	4699      	mov	r9, r3
   15dae:	0436      	lsls	r6, r6, #16
   15db0:	4334      	orrs	r4, r6
   15db2:	464b      	mov	r3, r9
   15db4:	2b38      	cmp	r3, #56	; 0x38
   15db6:	dd00      	ble.n	15dba <__aeabi_dadd+0x32e>
   15db8:	e0d6      	b.n	15f68 <__aeabi_dadd+0x4dc>
   15dba:	2b1f      	cmp	r3, #31
   15dbc:	dd00      	ble.n	15dc0 <__aeabi_dadd+0x334>
   15dbe:	e135      	b.n	1602c <__aeabi_dadd+0x5a0>
   15dc0:	2620      	movs	r6, #32
   15dc2:	1af5      	subs	r5, r6, r3
   15dc4:	0026      	movs	r6, r4
   15dc6:	40ae      	lsls	r6, r5
   15dc8:	46b2      	mov	sl, r6
   15dca:	003e      	movs	r6, r7
   15dcc:	40de      	lsrs	r6, r3
   15dce:	46ac      	mov	ip, r5
   15dd0:	0035      	movs	r5, r6
   15dd2:	4656      	mov	r6, sl
   15dd4:	432e      	orrs	r6, r5
   15dd6:	4665      	mov	r5, ip
   15dd8:	40af      	lsls	r7, r5
   15dda:	1e7d      	subs	r5, r7, #1
   15ddc:	41af      	sbcs	r7, r5
   15dde:	40dc      	lsrs	r4, r3
   15de0:	4337      	orrs	r7, r6
   15de2:	1bd7      	subs	r7, r2, r7
   15de4:	42ba      	cmp	r2, r7
   15de6:	4192      	sbcs	r2, r2
   15de8:	1b0c      	subs	r4, r1, r4
   15dea:	4252      	negs	r2, r2
   15dec:	1aa4      	subs	r4, r4, r2
   15dee:	0006      	movs	r6, r0
   15df0:	46d8      	mov	r8, fp
   15df2:	e6a3      	b.n	15b3c <__aeabi_dadd+0xb0>
   15df4:	4664      	mov	r4, ip
   15df6:	4667      	mov	r7, ip
   15df8:	432c      	orrs	r4, r5
   15dfa:	d000      	beq.n	15dfe <__aeabi_dadd+0x372>
   15dfc:	e6a2      	b.n	15b44 <__aeabi_dadd+0xb8>
   15dfe:	2500      	movs	r5, #0
   15e00:	2600      	movs	r6, #0
   15e02:	2700      	movs	r7, #0
   15e04:	e706      	b.n	15c14 <__aeabi_dadd+0x188>
   15e06:	001e      	movs	r6, r3
   15e08:	e6c4      	b.n	15b94 <__aeabi_dadd+0x108>
   15e0a:	46c0      	nop			; (mov r8, r8)
   15e0c:	000007ff 	.word	0x000007ff
   15e10:	ff7fffff 	.word	0xff7fffff
   15e14:	800fffff 	.word	0x800fffff
   15e18:	2b1f      	cmp	r3, #31
   15e1a:	dc63      	bgt.n	15ee4 <__aeabi_dadd+0x458>
   15e1c:	2020      	movs	r0, #32
   15e1e:	1ac3      	subs	r3, r0, r3
   15e20:	0008      	movs	r0, r1
   15e22:	4098      	lsls	r0, r3
   15e24:	469c      	mov	ip, r3
   15e26:	4683      	mov	fp, r0
   15e28:	4653      	mov	r3, sl
   15e2a:	0010      	movs	r0, r2
   15e2c:	40d8      	lsrs	r0, r3
   15e2e:	0003      	movs	r3, r0
   15e30:	4658      	mov	r0, fp
   15e32:	4318      	orrs	r0, r3
   15e34:	4663      	mov	r3, ip
   15e36:	409a      	lsls	r2, r3
   15e38:	1e53      	subs	r3, r2, #1
   15e3a:	419a      	sbcs	r2, r3
   15e3c:	4653      	mov	r3, sl
   15e3e:	4302      	orrs	r2, r0
   15e40:	40d9      	lsrs	r1, r3
   15e42:	e703      	b.n	15c4c <__aeabi_dadd+0x1c0>
   15e44:	0026      	movs	r6, r4
   15e46:	433e      	orrs	r6, r7
   15e48:	d006      	beq.n	15e58 <__aeabi_dadd+0x3cc>
   15e4a:	43eb      	mvns	r3, r5
   15e4c:	4699      	mov	r9, r3
   15e4e:	2b00      	cmp	r3, #0
   15e50:	d0c7      	beq.n	15de2 <__aeabi_dadd+0x356>
   15e52:	4e94      	ldr	r6, [pc, #592]	; (160a4 <__aeabi_dadd+0x618>)
   15e54:	42b0      	cmp	r0, r6
   15e56:	d1ac      	bne.n	15db2 <__aeabi_dadd+0x326>
   15e58:	000c      	movs	r4, r1
   15e5a:	0017      	movs	r7, r2
   15e5c:	0006      	movs	r6, r0
   15e5e:	46d8      	mov	r8, fp
   15e60:	e698      	b.n	15b94 <__aeabi_dadd+0x108>
   15e62:	4b90      	ldr	r3, [pc, #576]	; (160a4 <__aeabi_dadd+0x618>)
   15e64:	459a      	cmp	sl, r3
   15e66:	d00b      	beq.n	15e80 <__aeabi_dadd+0x3f4>
   15e68:	4682      	mov	sl, r0
   15e6a:	e6e7      	b.n	15c3c <__aeabi_dadd+0x1b0>
   15e6c:	2800      	cmp	r0, #0
   15e6e:	d000      	beq.n	15e72 <__aeabi_dadd+0x3e6>
   15e70:	e09e      	b.n	15fb0 <__aeabi_dadd+0x524>
   15e72:	0018      	movs	r0, r3
   15e74:	4310      	orrs	r0, r2
   15e76:	d100      	bne.n	15e7a <__aeabi_dadd+0x3ee>
   15e78:	e0e9      	b.n	1604e <__aeabi_dadd+0x5c2>
   15e7a:	001c      	movs	r4, r3
   15e7c:	0017      	movs	r7, r2
   15e7e:	46d8      	mov	r8, fp
   15e80:	4e88      	ldr	r6, [pc, #544]	; (160a4 <__aeabi_dadd+0x618>)
   15e82:	e687      	b.n	15b94 <__aeabi_dadd+0x108>
   15e84:	2500      	movs	r5, #0
   15e86:	e772      	b.n	15d6e <__aeabi_dadd+0x2e2>
   15e88:	2100      	movs	r1, #0
   15e8a:	e782      	b.n	15d92 <__aeabi_dadd+0x306>
   15e8c:	0023      	movs	r3, r4
   15e8e:	433b      	orrs	r3, r7
   15e90:	2e00      	cmp	r6, #0
   15e92:	d000      	beq.n	15e96 <__aeabi_dadd+0x40a>
   15e94:	e0ab      	b.n	15fee <__aeabi_dadd+0x562>
   15e96:	2b00      	cmp	r3, #0
   15e98:	d100      	bne.n	15e9c <__aeabi_dadd+0x410>
   15e9a:	e0e7      	b.n	1606c <__aeabi_dadd+0x5e0>
   15e9c:	000b      	movs	r3, r1
   15e9e:	4313      	orrs	r3, r2
   15ea0:	d100      	bne.n	15ea4 <__aeabi_dadd+0x418>
   15ea2:	e677      	b.n	15b94 <__aeabi_dadd+0x108>
   15ea4:	18ba      	adds	r2, r7, r2
   15ea6:	42ba      	cmp	r2, r7
   15ea8:	41bf      	sbcs	r7, r7
   15eaa:	1864      	adds	r4, r4, r1
   15eac:	427f      	negs	r7, r7
   15eae:	19e4      	adds	r4, r4, r7
   15eb0:	0223      	lsls	r3, r4, #8
   15eb2:	d400      	bmi.n	15eb6 <__aeabi_dadd+0x42a>
   15eb4:	e0f2      	b.n	1609c <__aeabi_dadd+0x610>
   15eb6:	4b7c      	ldr	r3, [pc, #496]	; (160a8 <__aeabi_dadd+0x61c>)
   15eb8:	0017      	movs	r7, r2
   15eba:	401c      	ands	r4, r3
   15ebc:	0006      	movs	r6, r0
   15ebe:	e669      	b.n	15b94 <__aeabi_dadd+0x108>
   15ec0:	0020      	movs	r0, r4
   15ec2:	4338      	orrs	r0, r7
   15ec4:	2e00      	cmp	r6, #0
   15ec6:	d1d1      	bne.n	15e6c <__aeabi_dadd+0x3e0>
   15ec8:	2800      	cmp	r0, #0
   15eca:	d15b      	bne.n	15f84 <__aeabi_dadd+0x4f8>
   15ecc:	001c      	movs	r4, r3
   15ece:	4314      	orrs	r4, r2
   15ed0:	d100      	bne.n	15ed4 <__aeabi_dadd+0x448>
   15ed2:	e0a8      	b.n	16026 <__aeabi_dadd+0x59a>
   15ed4:	001c      	movs	r4, r3
   15ed6:	0017      	movs	r7, r2
   15ed8:	46d8      	mov	r8, fp
   15eda:	e65b      	b.n	15b94 <__aeabi_dadd+0x108>
   15edc:	0006      	movs	r6, r0
   15ede:	2400      	movs	r4, #0
   15ee0:	2700      	movs	r7, #0
   15ee2:	e697      	b.n	15c14 <__aeabi_dadd+0x188>
   15ee4:	4650      	mov	r0, sl
   15ee6:	000b      	movs	r3, r1
   15ee8:	3820      	subs	r0, #32
   15eea:	40c3      	lsrs	r3, r0
   15eec:	4699      	mov	r9, r3
   15eee:	4653      	mov	r3, sl
   15ef0:	2b20      	cmp	r3, #32
   15ef2:	d100      	bne.n	15ef6 <__aeabi_dadd+0x46a>
   15ef4:	e095      	b.n	16022 <__aeabi_dadd+0x596>
   15ef6:	2340      	movs	r3, #64	; 0x40
   15ef8:	4650      	mov	r0, sl
   15efa:	1a1b      	subs	r3, r3, r0
   15efc:	4099      	lsls	r1, r3
   15efe:	430a      	orrs	r2, r1
   15f00:	1e51      	subs	r1, r2, #1
   15f02:	418a      	sbcs	r2, r1
   15f04:	464b      	mov	r3, r9
   15f06:	2100      	movs	r1, #0
   15f08:	431a      	orrs	r2, r3
   15f0a:	e69f      	b.n	15c4c <__aeabi_dadd+0x1c0>
   15f0c:	2e00      	cmp	r6, #0
   15f0e:	d130      	bne.n	15f72 <__aeabi_dadd+0x4e6>
   15f10:	0026      	movs	r6, r4
   15f12:	433e      	orrs	r6, r7
   15f14:	d067      	beq.n	15fe6 <__aeabi_dadd+0x55a>
   15f16:	43db      	mvns	r3, r3
   15f18:	469a      	mov	sl, r3
   15f1a:	2b00      	cmp	r3, #0
   15f1c:	d01c      	beq.n	15f58 <__aeabi_dadd+0x4cc>
   15f1e:	4e61      	ldr	r6, [pc, #388]	; (160a4 <__aeabi_dadd+0x618>)
   15f20:	42b0      	cmp	r0, r6
   15f22:	d060      	beq.n	15fe6 <__aeabi_dadd+0x55a>
   15f24:	4653      	mov	r3, sl
   15f26:	2b38      	cmp	r3, #56	; 0x38
   15f28:	dd00      	ble.n	15f2c <__aeabi_dadd+0x4a0>
   15f2a:	e096      	b.n	1605a <__aeabi_dadd+0x5ce>
   15f2c:	2b1f      	cmp	r3, #31
   15f2e:	dd00      	ble.n	15f32 <__aeabi_dadd+0x4a6>
   15f30:	e09f      	b.n	16072 <__aeabi_dadd+0x5e6>
   15f32:	2620      	movs	r6, #32
   15f34:	1af3      	subs	r3, r6, r3
   15f36:	0026      	movs	r6, r4
   15f38:	409e      	lsls	r6, r3
   15f3a:	469c      	mov	ip, r3
   15f3c:	46b3      	mov	fp, r6
   15f3e:	4653      	mov	r3, sl
   15f40:	003e      	movs	r6, r7
   15f42:	40de      	lsrs	r6, r3
   15f44:	0033      	movs	r3, r6
   15f46:	465e      	mov	r6, fp
   15f48:	431e      	orrs	r6, r3
   15f4a:	4663      	mov	r3, ip
   15f4c:	409f      	lsls	r7, r3
   15f4e:	1e7b      	subs	r3, r7, #1
   15f50:	419f      	sbcs	r7, r3
   15f52:	4653      	mov	r3, sl
   15f54:	40dc      	lsrs	r4, r3
   15f56:	4337      	orrs	r7, r6
   15f58:	18bf      	adds	r7, r7, r2
   15f5a:	4297      	cmp	r7, r2
   15f5c:	4192      	sbcs	r2, r2
   15f5e:	1864      	adds	r4, r4, r1
   15f60:	4252      	negs	r2, r2
   15f62:	18a4      	adds	r4, r4, r2
   15f64:	0006      	movs	r6, r0
   15f66:	e678      	b.n	15c5a <__aeabi_dadd+0x1ce>
   15f68:	4327      	orrs	r7, r4
   15f6a:	1e7c      	subs	r4, r7, #1
   15f6c:	41a7      	sbcs	r7, r4
   15f6e:	2400      	movs	r4, #0
   15f70:	e737      	b.n	15de2 <__aeabi_dadd+0x356>
   15f72:	4e4c      	ldr	r6, [pc, #304]	; (160a4 <__aeabi_dadd+0x618>)
   15f74:	42b0      	cmp	r0, r6
   15f76:	d036      	beq.n	15fe6 <__aeabi_dadd+0x55a>
   15f78:	2680      	movs	r6, #128	; 0x80
   15f7a:	425b      	negs	r3, r3
   15f7c:	0436      	lsls	r6, r6, #16
   15f7e:	469a      	mov	sl, r3
   15f80:	4334      	orrs	r4, r6
   15f82:	e7cf      	b.n	15f24 <__aeabi_dadd+0x498>
   15f84:	0018      	movs	r0, r3
   15f86:	4310      	orrs	r0, r2
   15f88:	d100      	bne.n	15f8c <__aeabi_dadd+0x500>
   15f8a:	e603      	b.n	15b94 <__aeabi_dadd+0x108>
   15f8c:	1ab8      	subs	r0, r7, r2
   15f8e:	4684      	mov	ip, r0
   15f90:	4567      	cmp	r7, ip
   15f92:	41ad      	sbcs	r5, r5
   15f94:	1ae0      	subs	r0, r4, r3
   15f96:	426d      	negs	r5, r5
   15f98:	1b40      	subs	r0, r0, r5
   15f9a:	0205      	lsls	r5, r0, #8
   15f9c:	d400      	bmi.n	15fa0 <__aeabi_dadd+0x514>
   15f9e:	e62c      	b.n	15bfa <__aeabi_dadd+0x16e>
   15fa0:	1bd7      	subs	r7, r2, r7
   15fa2:	42ba      	cmp	r2, r7
   15fa4:	4192      	sbcs	r2, r2
   15fa6:	1b1c      	subs	r4, r3, r4
   15fa8:	4252      	negs	r2, r2
   15faa:	1aa4      	subs	r4, r4, r2
   15fac:	46d8      	mov	r8, fp
   15fae:	e5f1      	b.n	15b94 <__aeabi_dadd+0x108>
   15fb0:	0018      	movs	r0, r3
   15fb2:	4310      	orrs	r0, r2
   15fb4:	d100      	bne.n	15fb8 <__aeabi_dadd+0x52c>
   15fb6:	e763      	b.n	15e80 <__aeabi_dadd+0x3f4>
   15fb8:	08f8      	lsrs	r0, r7, #3
   15fba:	0767      	lsls	r7, r4, #29
   15fbc:	4307      	orrs	r7, r0
   15fbe:	2080      	movs	r0, #128	; 0x80
   15fc0:	08e4      	lsrs	r4, r4, #3
   15fc2:	0300      	lsls	r0, r0, #12
   15fc4:	4204      	tst	r4, r0
   15fc6:	d008      	beq.n	15fda <__aeabi_dadd+0x54e>
   15fc8:	08dd      	lsrs	r5, r3, #3
   15fca:	4205      	tst	r5, r0
   15fcc:	d105      	bne.n	15fda <__aeabi_dadd+0x54e>
   15fce:	08d2      	lsrs	r2, r2, #3
   15fd0:	0759      	lsls	r1, r3, #29
   15fd2:	4311      	orrs	r1, r2
   15fd4:	000f      	movs	r7, r1
   15fd6:	002c      	movs	r4, r5
   15fd8:	46d8      	mov	r8, fp
   15fda:	0f7b      	lsrs	r3, r7, #29
   15fdc:	00e4      	lsls	r4, r4, #3
   15fde:	431c      	orrs	r4, r3
   15fe0:	00ff      	lsls	r7, r7, #3
   15fe2:	4e30      	ldr	r6, [pc, #192]	; (160a4 <__aeabi_dadd+0x618>)
   15fe4:	e5d6      	b.n	15b94 <__aeabi_dadd+0x108>
   15fe6:	000c      	movs	r4, r1
   15fe8:	0017      	movs	r7, r2
   15fea:	0006      	movs	r6, r0
   15fec:	e5d2      	b.n	15b94 <__aeabi_dadd+0x108>
   15fee:	2b00      	cmp	r3, #0
   15ff0:	d038      	beq.n	16064 <__aeabi_dadd+0x5d8>
   15ff2:	000b      	movs	r3, r1
   15ff4:	4313      	orrs	r3, r2
   15ff6:	d100      	bne.n	15ffa <__aeabi_dadd+0x56e>
   15ff8:	e742      	b.n	15e80 <__aeabi_dadd+0x3f4>
   15ffa:	08f8      	lsrs	r0, r7, #3
   15ffc:	0767      	lsls	r7, r4, #29
   15ffe:	4307      	orrs	r7, r0
   16000:	2080      	movs	r0, #128	; 0x80
   16002:	08e4      	lsrs	r4, r4, #3
   16004:	0300      	lsls	r0, r0, #12
   16006:	4204      	tst	r4, r0
   16008:	d0e7      	beq.n	15fda <__aeabi_dadd+0x54e>
   1600a:	08cb      	lsrs	r3, r1, #3
   1600c:	4203      	tst	r3, r0
   1600e:	d1e4      	bne.n	15fda <__aeabi_dadd+0x54e>
   16010:	08d2      	lsrs	r2, r2, #3
   16012:	0749      	lsls	r1, r1, #29
   16014:	4311      	orrs	r1, r2
   16016:	000f      	movs	r7, r1
   16018:	001c      	movs	r4, r3
   1601a:	e7de      	b.n	15fda <__aeabi_dadd+0x54e>
   1601c:	2700      	movs	r7, #0
   1601e:	2400      	movs	r4, #0
   16020:	e5d5      	b.n	15bce <__aeabi_dadd+0x142>
   16022:	2100      	movs	r1, #0
   16024:	e76b      	b.n	15efe <__aeabi_dadd+0x472>
   16026:	2500      	movs	r5, #0
   16028:	2700      	movs	r7, #0
   1602a:	e5f3      	b.n	15c14 <__aeabi_dadd+0x188>
   1602c:	464e      	mov	r6, r9
   1602e:	0025      	movs	r5, r4
   16030:	3e20      	subs	r6, #32
   16032:	40f5      	lsrs	r5, r6
   16034:	464b      	mov	r3, r9
   16036:	002e      	movs	r6, r5
   16038:	2b20      	cmp	r3, #32
   1603a:	d02d      	beq.n	16098 <__aeabi_dadd+0x60c>
   1603c:	2540      	movs	r5, #64	; 0x40
   1603e:	1aed      	subs	r5, r5, r3
   16040:	40ac      	lsls	r4, r5
   16042:	4327      	orrs	r7, r4
   16044:	1e7c      	subs	r4, r7, #1
   16046:	41a7      	sbcs	r7, r4
   16048:	2400      	movs	r4, #0
   1604a:	4337      	orrs	r7, r6
   1604c:	e6c9      	b.n	15de2 <__aeabi_dadd+0x356>
   1604e:	2480      	movs	r4, #128	; 0x80
   16050:	2500      	movs	r5, #0
   16052:	0324      	lsls	r4, r4, #12
   16054:	4e13      	ldr	r6, [pc, #76]	; (160a4 <__aeabi_dadd+0x618>)
   16056:	2700      	movs	r7, #0
   16058:	e5dc      	b.n	15c14 <__aeabi_dadd+0x188>
   1605a:	4327      	orrs	r7, r4
   1605c:	1e7c      	subs	r4, r7, #1
   1605e:	41a7      	sbcs	r7, r4
   16060:	2400      	movs	r4, #0
   16062:	e779      	b.n	15f58 <__aeabi_dadd+0x4cc>
   16064:	000c      	movs	r4, r1
   16066:	0017      	movs	r7, r2
   16068:	4e0e      	ldr	r6, [pc, #56]	; (160a4 <__aeabi_dadd+0x618>)
   1606a:	e593      	b.n	15b94 <__aeabi_dadd+0x108>
   1606c:	000c      	movs	r4, r1
   1606e:	0017      	movs	r7, r2
   16070:	e590      	b.n	15b94 <__aeabi_dadd+0x108>
   16072:	4656      	mov	r6, sl
   16074:	0023      	movs	r3, r4
   16076:	3e20      	subs	r6, #32
   16078:	40f3      	lsrs	r3, r6
   1607a:	4699      	mov	r9, r3
   1607c:	4653      	mov	r3, sl
   1607e:	2b20      	cmp	r3, #32
   16080:	d00e      	beq.n	160a0 <__aeabi_dadd+0x614>
   16082:	2340      	movs	r3, #64	; 0x40
   16084:	4656      	mov	r6, sl
   16086:	1b9b      	subs	r3, r3, r6
   16088:	409c      	lsls	r4, r3
   1608a:	4327      	orrs	r7, r4
   1608c:	1e7c      	subs	r4, r7, #1
   1608e:	41a7      	sbcs	r7, r4
   16090:	464b      	mov	r3, r9
   16092:	2400      	movs	r4, #0
   16094:	431f      	orrs	r7, r3
   16096:	e75f      	b.n	15f58 <__aeabi_dadd+0x4cc>
   16098:	2400      	movs	r4, #0
   1609a:	e7d2      	b.n	16042 <__aeabi_dadd+0x5b6>
   1609c:	0017      	movs	r7, r2
   1609e:	e5b2      	b.n	15c06 <__aeabi_dadd+0x17a>
   160a0:	2400      	movs	r4, #0
   160a2:	e7f2      	b.n	1608a <__aeabi_dadd+0x5fe>
   160a4:	000007ff 	.word	0x000007ff
   160a8:	ff7fffff 	.word	0xff7fffff

000160ac <__aeabi_ddiv>:
   160ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   160ae:	4657      	mov	r7, sl
   160b0:	4645      	mov	r5, r8
   160b2:	46de      	mov	lr, fp
   160b4:	464e      	mov	r6, r9
   160b6:	b5e0      	push	{r5, r6, r7, lr}
   160b8:	004c      	lsls	r4, r1, #1
   160ba:	030e      	lsls	r6, r1, #12
   160bc:	b087      	sub	sp, #28
   160be:	4683      	mov	fp, r0
   160c0:	4692      	mov	sl, r2
   160c2:	001d      	movs	r5, r3
   160c4:	4680      	mov	r8, r0
   160c6:	0b36      	lsrs	r6, r6, #12
   160c8:	0d64      	lsrs	r4, r4, #21
   160ca:	0fcf      	lsrs	r7, r1, #31
   160cc:	2c00      	cmp	r4, #0
   160ce:	d04f      	beq.n	16170 <__aeabi_ddiv+0xc4>
   160d0:	4b6f      	ldr	r3, [pc, #444]	; (16290 <__aeabi_ddiv+0x1e4>)
   160d2:	429c      	cmp	r4, r3
   160d4:	d035      	beq.n	16142 <__aeabi_ddiv+0x96>
   160d6:	2380      	movs	r3, #128	; 0x80
   160d8:	0f42      	lsrs	r2, r0, #29
   160da:	041b      	lsls	r3, r3, #16
   160dc:	00f6      	lsls	r6, r6, #3
   160de:	4313      	orrs	r3, r2
   160e0:	4333      	orrs	r3, r6
   160e2:	4699      	mov	r9, r3
   160e4:	00c3      	lsls	r3, r0, #3
   160e6:	4698      	mov	r8, r3
   160e8:	4b6a      	ldr	r3, [pc, #424]	; (16294 <__aeabi_ddiv+0x1e8>)
   160ea:	2600      	movs	r6, #0
   160ec:	469c      	mov	ip, r3
   160ee:	2300      	movs	r3, #0
   160f0:	4464      	add	r4, ip
   160f2:	9303      	str	r3, [sp, #12]
   160f4:	032b      	lsls	r3, r5, #12
   160f6:	0b1b      	lsrs	r3, r3, #12
   160f8:	469b      	mov	fp, r3
   160fa:	006b      	lsls	r3, r5, #1
   160fc:	0fed      	lsrs	r5, r5, #31
   160fe:	4650      	mov	r0, sl
   16100:	0d5b      	lsrs	r3, r3, #21
   16102:	9501      	str	r5, [sp, #4]
   16104:	d05e      	beq.n	161c4 <__aeabi_ddiv+0x118>
   16106:	4a62      	ldr	r2, [pc, #392]	; (16290 <__aeabi_ddiv+0x1e4>)
   16108:	4293      	cmp	r3, r2
   1610a:	d053      	beq.n	161b4 <__aeabi_ddiv+0x108>
   1610c:	465a      	mov	r2, fp
   1610e:	00d1      	lsls	r1, r2, #3
   16110:	2280      	movs	r2, #128	; 0x80
   16112:	0f40      	lsrs	r0, r0, #29
   16114:	0412      	lsls	r2, r2, #16
   16116:	4302      	orrs	r2, r0
   16118:	430a      	orrs	r2, r1
   1611a:	4693      	mov	fp, r2
   1611c:	4652      	mov	r2, sl
   1611e:	00d1      	lsls	r1, r2, #3
   16120:	4a5c      	ldr	r2, [pc, #368]	; (16294 <__aeabi_ddiv+0x1e8>)
   16122:	4694      	mov	ip, r2
   16124:	2200      	movs	r2, #0
   16126:	4463      	add	r3, ip
   16128:	0038      	movs	r0, r7
   1612a:	4068      	eors	r0, r5
   1612c:	4684      	mov	ip, r0
   1612e:	9002      	str	r0, [sp, #8]
   16130:	1ae4      	subs	r4, r4, r3
   16132:	4316      	orrs	r6, r2
   16134:	2e0f      	cmp	r6, #15
   16136:	d900      	bls.n	1613a <__aeabi_ddiv+0x8e>
   16138:	e0b4      	b.n	162a4 <__aeabi_ddiv+0x1f8>
   1613a:	4b57      	ldr	r3, [pc, #348]	; (16298 <__aeabi_ddiv+0x1ec>)
   1613c:	00b6      	lsls	r6, r6, #2
   1613e:	599b      	ldr	r3, [r3, r6]
   16140:	469f      	mov	pc, r3
   16142:	0003      	movs	r3, r0
   16144:	4333      	orrs	r3, r6
   16146:	4699      	mov	r9, r3
   16148:	d16c      	bne.n	16224 <__aeabi_ddiv+0x178>
   1614a:	2300      	movs	r3, #0
   1614c:	4698      	mov	r8, r3
   1614e:	3302      	adds	r3, #2
   16150:	2608      	movs	r6, #8
   16152:	9303      	str	r3, [sp, #12]
   16154:	e7ce      	b.n	160f4 <__aeabi_ddiv+0x48>
   16156:	46cb      	mov	fp, r9
   16158:	4641      	mov	r1, r8
   1615a:	9a03      	ldr	r2, [sp, #12]
   1615c:	9701      	str	r7, [sp, #4]
   1615e:	2a02      	cmp	r2, #2
   16160:	d165      	bne.n	1622e <__aeabi_ddiv+0x182>
   16162:	9b01      	ldr	r3, [sp, #4]
   16164:	4c4a      	ldr	r4, [pc, #296]	; (16290 <__aeabi_ddiv+0x1e4>)
   16166:	469c      	mov	ip, r3
   16168:	2300      	movs	r3, #0
   1616a:	2200      	movs	r2, #0
   1616c:	4698      	mov	r8, r3
   1616e:	e06b      	b.n	16248 <__aeabi_ddiv+0x19c>
   16170:	0003      	movs	r3, r0
   16172:	4333      	orrs	r3, r6
   16174:	4699      	mov	r9, r3
   16176:	d04e      	beq.n	16216 <__aeabi_ddiv+0x16a>
   16178:	2e00      	cmp	r6, #0
   1617a:	d100      	bne.n	1617e <__aeabi_ddiv+0xd2>
   1617c:	e1bc      	b.n	164f8 <__aeabi_ddiv+0x44c>
   1617e:	0030      	movs	r0, r6
   16180:	f001 fae8 	bl	17754 <__clzsi2>
   16184:	0003      	movs	r3, r0
   16186:	3b0b      	subs	r3, #11
   16188:	2b1c      	cmp	r3, #28
   1618a:	dd00      	ble.n	1618e <__aeabi_ddiv+0xe2>
   1618c:	e1ac      	b.n	164e8 <__aeabi_ddiv+0x43c>
   1618e:	221d      	movs	r2, #29
   16190:	1ad3      	subs	r3, r2, r3
   16192:	465a      	mov	r2, fp
   16194:	0001      	movs	r1, r0
   16196:	40da      	lsrs	r2, r3
   16198:	3908      	subs	r1, #8
   1619a:	408e      	lsls	r6, r1
   1619c:	0013      	movs	r3, r2
   1619e:	4333      	orrs	r3, r6
   161a0:	4699      	mov	r9, r3
   161a2:	465b      	mov	r3, fp
   161a4:	408b      	lsls	r3, r1
   161a6:	4698      	mov	r8, r3
   161a8:	2300      	movs	r3, #0
   161aa:	4c3c      	ldr	r4, [pc, #240]	; (1629c <__aeabi_ddiv+0x1f0>)
   161ac:	2600      	movs	r6, #0
   161ae:	1a24      	subs	r4, r4, r0
   161b0:	9303      	str	r3, [sp, #12]
   161b2:	e79f      	b.n	160f4 <__aeabi_ddiv+0x48>
   161b4:	4651      	mov	r1, sl
   161b6:	465a      	mov	r2, fp
   161b8:	4311      	orrs	r1, r2
   161ba:	d129      	bne.n	16210 <__aeabi_ddiv+0x164>
   161bc:	2200      	movs	r2, #0
   161be:	4693      	mov	fp, r2
   161c0:	3202      	adds	r2, #2
   161c2:	e7b1      	b.n	16128 <__aeabi_ddiv+0x7c>
   161c4:	4659      	mov	r1, fp
   161c6:	4301      	orrs	r1, r0
   161c8:	d01e      	beq.n	16208 <__aeabi_ddiv+0x15c>
   161ca:	465b      	mov	r3, fp
   161cc:	2b00      	cmp	r3, #0
   161ce:	d100      	bne.n	161d2 <__aeabi_ddiv+0x126>
   161d0:	e19e      	b.n	16510 <__aeabi_ddiv+0x464>
   161d2:	4658      	mov	r0, fp
   161d4:	f001 fabe 	bl	17754 <__clzsi2>
   161d8:	0003      	movs	r3, r0
   161da:	3b0b      	subs	r3, #11
   161dc:	2b1c      	cmp	r3, #28
   161de:	dd00      	ble.n	161e2 <__aeabi_ddiv+0x136>
   161e0:	e18f      	b.n	16502 <__aeabi_ddiv+0x456>
   161e2:	0002      	movs	r2, r0
   161e4:	4659      	mov	r1, fp
   161e6:	3a08      	subs	r2, #8
   161e8:	4091      	lsls	r1, r2
   161ea:	468b      	mov	fp, r1
   161ec:	211d      	movs	r1, #29
   161ee:	1acb      	subs	r3, r1, r3
   161f0:	4651      	mov	r1, sl
   161f2:	40d9      	lsrs	r1, r3
   161f4:	000b      	movs	r3, r1
   161f6:	4659      	mov	r1, fp
   161f8:	430b      	orrs	r3, r1
   161fa:	4651      	mov	r1, sl
   161fc:	469b      	mov	fp, r3
   161fe:	4091      	lsls	r1, r2
   16200:	4b26      	ldr	r3, [pc, #152]	; (1629c <__aeabi_ddiv+0x1f0>)
   16202:	2200      	movs	r2, #0
   16204:	1a1b      	subs	r3, r3, r0
   16206:	e78f      	b.n	16128 <__aeabi_ddiv+0x7c>
   16208:	2300      	movs	r3, #0
   1620a:	2201      	movs	r2, #1
   1620c:	469b      	mov	fp, r3
   1620e:	e78b      	b.n	16128 <__aeabi_ddiv+0x7c>
   16210:	4651      	mov	r1, sl
   16212:	2203      	movs	r2, #3
   16214:	e788      	b.n	16128 <__aeabi_ddiv+0x7c>
   16216:	2300      	movs	r3, #0
   16218:	4698      	mov	r8, r3
   1621a:	3301      	adds	r3, #1
   1621c:	2604      	movs	r6, #4
   1621e:	2400      	movs	r4, #0
   16220:	9303      	str	r3, [sp, #12]
   16222:	e767      	b.n	160f4 <__aeabi_ddiv+0x48>
   16224:	2303      	movs	r3, #3
   16226:	46b1      	mov	r9, r6
   16228:	9303      	str	r3, [sp, #12]
   1622a:	260c      	movs	r6, #12
   1622c:	e762      	b.n	160f4 <__aeabi_ddiv+0x48>
   1622e:	2a03      	cmp	r2, #3
   16230:	d100      	bne.n	16234 <__aeabi_ddiv+0x188>
   16232:	e25c      	b.n	166ee <__aeabi_ddiv+0x642>
   16234:	9b01      	ldr	r3, [sp, #4]
   16236:	2a01      	cmp	r2, #1
   16238:	d000      	beq.n	1623c <__aeabi_ddiv+0x190>
   1623a:	e1e4      	b.n	16606 <__aeabi_ddiv+0x55a>
   1623c:	4013      	ands	r3, r2
   1623e:	469c      	mov	ip, r3
   16240:	2300      	movs	r3, #0
   16242:	2400      	movs	r4, #0
   16244:	2200      	movs	r2, #0
   16246:	4698      	mov	r8, r3
   16248:	2100      	movs	r1, #0
   1624a:	0312      	lsls	r2, r2, #12
   1624c:	0b13      	lsrs	r3, r2, #12
   1624e:	0d0a      	lsrs	r2, r1, #20
   16250:	0512      	lsls	r2, r2, #20
   16252:	431a      	orrs	r2, r3
   16254:	0523      	lsls	r3, r4, #20
   16256:	4c12      	ldr	r4, [pc, #72]	; (162a0 <__aeabi_ddiv+0x1f4>)
   16258:	4640      	mov	r0, r8
   1625a:	4022      	ands	r2, r4
   1625c:	4313      	orrs	r3, r2
   1625e:	4662      	mov	r2, ip
   16260:	005b      	lsls	r3, r3, #1
   16262:	07d2      	lsls	r2, r2, #31
   16264:	085b      	lsrs	r3, r3, #1
   16266:	4313      	orrs	r3, r2
   16268:	0019      	movs	r1, r3
   1626a:	b007      	add	sp, #28
   1626c:	bc3c      	pop	{r2, r3, r4, r5}
   1626e:	4690      	mov	r8, r2
   16270:	4699      	mov	r9, r3
   16272:	46a2      	mov	sl, r4
   16274:	46ab      	mov	fp, r5
   16276:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16278:	2300      	movs	r3, #0
   1627a:	2280      	movs	r2, #128	; 0x80
   1627c:	469c      	mov	ip, r3
   1627e:	0312      	lsls	r2, r2, #12
   16280:	4698      	mov	r8, r3
   16282:	4c03      	ldr	r4, [pc, #12]	; (16290 <__aeabi_ddiv+0x1e4>)
   16284:	e7e0      	b.n	16248 <__aeabi_ddiv+0x19c>
   16286:	2300      	movs	r3, #0
   16288:	4c01      	ldr	r4, [pc, #4]	; (16290 <__aeabi_ddiv+0x1e4>)
   1628a:	2200      	movs	r2, #0
   1628c:	4698      	mov	r8, r3
   1628e:	e7db      	b.n	16248 <__aeabi_ddiv+0x19c>
   16290:	000007ff 	.word	0x000007ff
   16294:	fffffc01 	.word	0xfffffc01
   16298:	0001a4a0 	.word	0x0001a4a0
   1629c:	fffffc0d 	.word	0xfffffc0d
   162a0:	800fffff 	.word	0x800fffff
   162a4:	45d9      	cmp	r9, fp
   162a6:	d900      	bls.n	162aa <__aeabi_ddiv+0x1fe>
   162a8:	e139      	b.n	1651e <__aeabi_ddiv+0x472>
   162aa:	d100      	bne.n	162ae <__aeabi_ddiv+0x202>
   162ac:	e134      	b.n	16518 <__aeabi_ddiv+0x46c>
   162ae:	2300      	movs	r3, #0
   162b0:	4646      	mov	r6, r8
   162b2:	464d      	mov	r5, r9
   162b4:	469a      	mov	sl, r3
   162b6:	3c01      	subs	r4, #1
   162b8:	465b      	mov	r3, fp
   162ba:	0e0a      	lsrs	r2, r1, #24
   162bc:	021b      	lsls	r3, r3, #8
   162be:	431a      	orrs	r2, r3
   162c0:	020b      	lsls	r3, r1, #8
   162c2:	0c17      	lsrs	r7, r2, #16
   162c4:	9303      	str	r3, [sp, #12]
   162c6:	0413      	lsls	r3, r2, #16
   162c8:	0c1b      	lsrs	r3, r3, #16
   162ca:	0039      	movs	r1, r7
   162cc:	0028      	movs	r0, r5
   162ce:	4690      	mov	r8, r2
   162d0:	9301      	str	r3, [sp, #4]
   162d2:	f7fe f999 	bl	14608 <__udivsi3>
   162d6:	0002      	movs	r2, r0
   162d8:	9b01      	ldr	r3, [sp, #4]
   162da:	4683      	mov	fp, r0
   162dc:	435a      	muls	r2, r3
   162de:	0028      	movs	r0, r5
   162e0:	0039      	movs	r1, r7
   162e2:	4691      	mov	r9, r2
   162e4:	f7fe fa16 	bl	14714 <__aeabi_uidivmod>
   162e8:	0c35      	lsrs	r5, r6, #16
   162ea:	0409      	lsls	r1, r1, #16
   162ec:	430d      	orrs	r5, r1
   162ee:	45a9      	cmp	r9, r5
   162f0:	d90d      	bls.n	1630e <__aeabi_ddiv+0x262>
   162f2:	465b      	mov	r3, fp
   162f4:	4445      	add	r5, r8
   162f6:	3b01      	subs	r3, #1
   162f8:	45a8      	cmp	r8, r5
   162fa:	d900      	bls.n	162fe <__aeabi_ddiv+0x252>
   162fc:	e13a      	b.n	16574 <__aeabi_ddiv+0x4c8>
   162fe:	45a9      	cmp	r9, r5
   16300:	d800      	bhi.n	16304 <__aeabi_ddiv+0x258>
   16302:	e137      	b.n	16574 <__aeabi_ddiv+0x4c8>
   16304:	2302      	movs	r3, #2
   16306:	425b      	negs	r3, r3
   16308:	469c      	mov	ip, r3
   1630a:	4445      	add	r5, r8
   1630c:	44e3      	add	fp, ip
   1630e:	464b      	mov	r3, r9
   16310:	1aeb      	subs	r3, r5, r3
   16312:	0039      	movs	r1, r7
   16314:	0018      	movs	r0, r3
   16316:	9304      	str	r3, [sp, #16]
   16318:	f7fe f976 	bl	14608 <__udivsi3>
   1631c:	9b01      	ldr	r3, [sp, #4]
   1631e:	0005      	movs	r5, r0
   16320:	4343      	muls	r3, r0
   16322:	0039      	movs	r1, r7
   16324:	9804      	ldr	r0, [sp, #16]
   16326:	4699      	mov	r9, r3
   16328:	f7fe f9f4 	bl	14714 <__aeabi_uidivmod>
   1632c:	0433      	lsls	r3, r6, #16
   1632e:	0409      	lsls	r1, r1, #16
   16330:	0c1b      	lsrs	r3, r3, #16
   16332:	430b      	orrs	r3, r1
   16334:	4599      	cmp	r9, r3
   16336:	d909      	bls.n	1634c <__aeabi_ddiv+0x2a0>
   16338:	4443      	add	r3, r8
   1633a:	1e6a      	subs	r2, r5, #1
   1633c:	4598      	cmp	r8, r3
   1633e:	d900      	bls.n	16342 <__aeabi_ddiv+0x296>
   16340:	e11a      	b.n	16578 <__aeabi_ddiv+0x4cc>
   16342:	4599      	cmp	r9, r3
   16344:	d800      	bhi.n	16348 <__aeabi_ddiv+0x29c>
   16346:	e117      	b.n	16578 <__aeabi_ddiv+0x4cc>
   16348:	3d02      	subs	r5, #2
   1634a:	4443      	add	r3, r8
   1634c:	464a      	mov	r2, r9
   1634e:	1a9b      	subs	r3, r3, r2
   16350:	465a      	mov	r2, fp
   16352:	0412      	lsls	r2, r2, #16
   16354:	432a      	orrs	r2, r5
   16356:	9903      	ldr	r1, [sp, #12]
   16358:	4693      	mov	fp, r2
   1635a:	0c10      	lsrs	r0, r2, #16
   1635c:	0c0a      	lsrs	r2, r1, #16
   1635e:	4691      	mov	r9, r2
   16360:	0409      	lsls	r1, r1, #16
   16362:	465a      	mov	r2, fp
   16364:	0c09      	lsrs	r1, r1, #16
   16366:	464e      	mov	r6, r9
   16368:	000d      	movs	r5, r1
   1636a:	0412      	lsls	r2, r2, #16
   1636c:	0c12      	lsrs	r2, r2, #16
   1636e:	4345      	muls	r5, r0
   16370:	9105      	str	r1, [sp, #20]
   16372:	4351      	muls	r1, r2
   16374:	4372      	muls	r2, r6
   16376:	4370      	muls	r0, r6
   16378:	1952      	adds	r2, r2, r5
   1637a:	0c0e      	lsrs	r6, r1, #16
   1637c:	18b2      	adds	r2, r6, r2
   1637e:	4295      	cmp	r5, r2
   16380:	d903      	bls.n	1638a <__aeabi_ddiv+0x2de>
   16382:	2580      	movs	r5, #128	; 0x80
   16384:	026d      	lsls	r5, r5, #9
   16386:	46ac      	mov	ip, r5
   16388:	4460      	add	r0, ip
   1638a:	0c15      	lsrs	r5, r2, #16
   1638c:	0409      	lsls	r1, r1, #16
   1638e:	0412      	lsls	r2, r2, #16
   16390:	0c09      	lsrs	r1, r1, #16
   16392:	1828      	adds	r0, r5, r0
   16394:	1852      	adds	r2, r2, r1
   16396:	4283      	cmp	r3, r0
   16398:	d200      	bcs.n	1639c <__aeabi_ddiv+0x2f0>
   1639a:	e0ce      	b.n	1653a <__aeabi_ddiv+0x48e>
   1639c:	d100      	bne.n	163a0 <__aeabi_ddiv+0x2f4>
   1639e:	e0c8      	b.n	16532 <__aeabi_ddiv+0x486>
   163a0:	1a1d      	subs	r5, r3, r0
   163a2:	4653      	mov	r3, sl
   163a4:	1a9e      	subs	r6, r3, r2
   163a6:	45b2      	cmp	sl, r6
   163a8:	4192      	sbcs	r2, r2
   163aa:	4252      	negs	r2, r2
   163ac:	1aab      	subs	r3, r5, r2
   163ae:	469a      	mov	sl, r3
   163b0:	4598      	cmp	r8, r3
   163b2:	d100      	bne.n	163b6 <__aeabi_ddiv+0x30a>
   163b4:	e117      	b.n	165e6 <__aeabi_ddiv+0x53a>
   163b6:	0039      	movs	r1, r7
   163b8:	0018      	movs	r0, r3
   163ba:	f7fe f925 	bl	14608 <__udivsi3>
   163be:	9b01      	ldr	r3, [sp, #4]
   163c0:	0005      	movs	r5, r0
   163c2:	4343      	muls	r3, r0
   163c4:	0039      	movs	r1, r7
   163c6:	4650      	mov	r0, sl
   163c8:	9304      	str	r3, [sp, #16]
   163ca:	f7fe f9a3 	bl	14714 <__aeabi_uidivmod>
   163ce:	9804      	ldr	r0, [sp, #16]
   163d0:	040b      	lsls	r3, r1, #16
   163d2:	0c31      	lsrs	r1, r6, #16
   163d4:	4319      	orrs	r1, r3
   163d6:	4288      	cmp	r0, r1
   163d8:	d909      	bls.n	163ee <__aeabi_ddiv+0x342>
   163da:	4441      	add	r1, r8
   163dc:	1e6b      	subs	r3, r5, #1
   163de:	4588      	cmp	r8, r1
   163e0:	d900      	bls.n	163e4 <__aeabi_ddiv+0x338>
   163e2:	e107      	b.n	165f4 <__aeabi_ddiv+0x548>
   163e4:	4288      	cmp	r0, r1
   163e6:	d800      	bhi.n	163ea <__aeabi_ddiv+0x33e>
   163e8:	e104      	b.n	165f4 <__aeabi_ddiv+0x548>
   163ea:	3d02      	subs	r5, #2
   163ec:	4441      	add	r1, r8
   163ee:	9b04      	ldr	r3, [sp, #16]
   163f0:	1acb      	subs	r3, r1, r3
   163f2:	0018      	movs	r0, r3
   163f4:	0039      	movs	r1, r7
   163f6:	9304      	str	r3, [sp, #16]
   163f8:	f7fe f906 	bl	14608 <__udivsi3>
   163fc:	9b01      	ldr	r3, [sp, #4]
   163fe:	4682      	mov	sl, r0
   16400:	4343      	muls	r3, r0
   16402:	0039      	movs	r1, r7
   16404:	9804      	ldr	r0, [sp, #16]
   16406:	9301      	str	r3, [sp, #4]
   16408:	f7fe f984 	bl	14714 <__aeabi_uidivmod>
   1640c:	9801      	ldr	r0, [sp, #4]
   1640e:	040b      	lsls	r3, r1, #16
   16410:	0431      	lsls	r1, r6, #16
   16412:	0c09      	lsrs	r1, r1, #16
   16414:	4319      	orrs	r1, r3
   16416:	4288      	cmp	r0, r1
   16418:	d90d      	bls.n	16436 <__aeabi_ddiv+0x38a>
   1641a:	4653      	mov	r3, sl
   1641c:	4441      	add	r1, r8
   1641e:	3b01      	subs	r3, #1
   16420:	4588      	cmp	r8, r1
   16422:	d900      	bls.n	16426 <__aeabi_ddiv+0x37a>
   16424:	e0e8      	b.n	165f8 <__aeabi_ddiv+0x54c>
   16426:	4288      	cmp	r0, r1
   16428:	d800      	bhi.n	1642c <__aeabi_ddiv+0x380>
   1642a:	e0e5      	b.n	165f8 <__aeabi_ddiv+0x54c>
   1642c:	2302      	movs	r3, #2
   1642e:	425b      	negs	r3, r3
   16430:	469c      	mov	ip, r3
   16432:	4441      	add	r1, r8
   16434:	44e2      	add	sl, ip
   16436:	9b01      	ldr	r3, [sp, #4]
   16438:	042d      	lsls	r5, r5, #16
   1643a:	1ace      	subs	r6, r1, r3
   1643c:	4651      	mov	r1, sl
   1643e:	4329      	orrs	r1, r5
   16440:	9d05      	ldr	r5, [sp, #20]
   16442:	464f      	mov	r7, r9
   16444:	002a      	movs	r2, r5
   16446:	040b      	lsls	r3, r1, #16
   16448:	0c08      	lsrs	r0, r1, #16
   1644a:	0c1b      	lsrs	r3, r3, #16
   1644c:	435a      	muls	r2, r3
   1644e:	4345      	muls	r5, r0
   16450:	437b      	muls	r3, r7
   16452:	4378      	muls	r0, r7
   16454:	195b      	adds	r3, r3, r5
   16456:	0c17      	lsrs	r7, r2, #16
   16458:	18fb      	adds	r3, r7, r3
   1645a:	429d      	cmp	r5, r3
   1645c:	d903      	bls.n	16466 <__aeabi_ddiv+0x3ba>
   1645e:	2580      	movs	r5, #128	; 0x80
   16460:	026d      	lsls	r5, r5, #9
   16462:	46ac      	mov	ip, r5
   16464:	4460      	add	r0, ip
   16466:	0c1d      	lsrs	r5, r3, #16
   16468:	0412      	lsls	r2, r2, #16
   1646a:	041b      	lsls	r3, r3, #16
   1646c:	0c12      	lsrs	r2, r2, #16
   1646e:	1828      	adds	r0, r5, r0
   16470:	189b      	adds	r3, r3, r2
   16472:	4286      	cmp	r6, r0
   16474:	d200      	bcs.n	16478 <__aeabi_ddiv+0x3cc>
   16476:	e093      	b.n	165a0 <__aeabi_ddiv+0x4f4>
   16478:	d100      	bne.n	1647c <__aeabi_ddiv+0x3d0>
   1647a:	e08e      	b.n	1659a <__aeabi_ddiv+0x4ee>
   1647c:	2301      	movs	r3, #1
   1647e:	4319      	orrs	r1, r3
   16480:	4ba0      	ldr	r3, [pc, #640]	; (16704 <__aeabi_ddiv+0x658>)
   16482:	18e3      	adds	r3, r4, r3
   16484:	2b00      	cmp	r3, #0
   16486:	dc00      	bgt.n	1648a <__aeabi_ddiv+0x3de>
   16488:	e099      	b.n	165be <__aeabi_ddiv+0x512>
   1648a:	074a      	lsls	r2, r1, #29
   1648c:	d000      	beq.n	16490 <__aeabi_ddiv+0x3e4>
   1648e:	e09e      	b.n	165ce <__aeabi_ddiv+0x522>
   16490:	465a      	mov	r2, fp
   16492:	01d2      	lsls	r2, r2, #7
   16494:	d506      	bpl.n	164a4 <__aeabi_ddiv+0x3f8>
   16496:	465a      	mov	r2, fp
   16498:	4b9b      	ldr	r3, [pc, #620]	; (16708 <__aeabi_ddiv+0x65c>)
   1649a:	401a      	ands	r2, r3
   1649c:	2380      	movs	r3, #128	; 0x80
   1649e:	4693      	mov	fp, r2
   164a0:	00db      	lsls	r3, r3, #3
   164a2:	18e3      	adds	r3, r4, r3
   164a4:	4a99      	ldr	r2, [pc, #612]	; (1670c <__aeabi_ddiv+0x660>)
   164a6:	4293      	cmp	r3, r2
   164a8:	dd68      	ble.n	1657c <__aeabi_ddiv+0x4d0>
   164aa:	2301      	movs	r3, #1
   164ac:	9a02      	ldr	r2, [sp, #8]
   164ae:	4c98      	ldr	r4, [pc, #608]	; (16710 <__aeabi_ddiv+0x664>)
   164b0:	401a      	ands	r2, r3
   164b2:	2300      	movs	r3, #0
   164b4:	4694      	mov	ip, r2
   164b6:	4698      	mov	r8, r3
   164b8:	2200      	movs	r2, #0
   164ba:	e6c5      	b.n	16248 <__aeabi_ddiv+0x19c>
   164bc:	2280      	movs	r2, #128	; 0x80
   164be:	464b      	mov	r3, r9
   164c0:	0312      	lsls	r2, r2, #12
   164c2:	4213      	tst	r3, r2
   164c4:	d00a      	beq.n	164dc <__aeabi_ddiv+0x430>
   164c6:	465b      	mov	r3, fp
   164c8:	4213      	tst	r3, r2
   164ca:	d106      	bne.n	164da <__aeabi_ddiv+0x42e>
   164cc:	431a      	orrs	r2, r3
   164ce:	0312      	lsls	r2, r2, #12
   164d0:	0b12      	lsrs	r2, r2, #12
   164d2:	46ac      	mov	ip, r5
   164d4:	4688      	mov	r8, r1
   164d6:	4c8e      	ldr	r4, [pc, #568]	; (16710 <__aeabi_ddiv+0x664>)
   164d8:	e6b6      	b.n	16248 <__aeabi_ddiv+0x19c>
   164da:	464b      	mov	r3, r9
   164dc:	431a      	orrs	r2, r3
   164de:	0312      	lsls	r2, r2, #12
   164e0:	0b12      	lsrs	r2, r2, #12
   164e2:	46bc      	mov	ip, r7
   164e4:	4c8a      	ldr	r4, [pc, #552]	; (16710 <__aeabi_ddiv+0x664>)
   164e6:	e6af      	b.n	16248 <__aeabi_ddiv+0x19c>
   164e8:	0003      	movs	r3, r0
   164ea:	465a      	mov	r2, fp
   164ec:	3b28      	subs	r3, #40	; 0x28
   164ee:	409a      	lsls	r2, r3
   164f0:	2300      	movs	r3, #0
   164f2:	4691      	mov	r9, r2
   164f4:	4698      	mov	r8, r3
   164f6:	e657      	b.n	161a8 <__aeabi_ddiv+0xfc>
   164f8:	4658      	mov	r0, fp
   164fa:	f001 f92b 	bl	17754 <__clzsi2>
   164fe:	3020      	adds	r0, #32
   16500:	e640      	b.n	16184 <__aeabi_ddiv+0xd8>
   16502:	0003      	movs	r3, r0
   16504:	4652      	mov	r2, sl
   16506:	3b28      	subs	r3, #40	; 0x28
   16508:	409a      	lsls	r2, r3
   1650a:	2100      	movs	r1, #0
   1650c:	4693      	mov	fp, r2
   1650e:	e677      	b.n	16200 <__aeabi_ddiv+0x154>
   16510:	f001 f920 	bl	17754 <__clzsi2>
   16514:	3020      	adds	r0, #32
   16516:	e65f      	b.n	161d8 <__aeabi_ddiv+0x12c>
   16518:	4588      	cmp	r8, r1
   1651a:	d200      	bcs.n	1651e <__aeabi_ddiv+0x472>
   1651c:	e6c7      	b.n	162ae <__aeabi_ddiv+0x202>
   1651e:	464b      	mov	r3, r9
   16520:	07de      	lsls	r6, r3, #31
   16522:	085d      	lsrs	r5, r3, #1
   16524:	4643      	mov	r3, r8
   16526:	085b      	lsrs	r3, r3, #1
   16528:	431e      	orrs	r6, r3
   1652a:	4643      	mov	r3, r8
   1652c:	07db      	lsls	r3, r3, #31
   1652e:	469a      	mov	sl, r3
   16530:	e6c2      	b.n	162b8 <__aeabi_ddiv+0x20c>
   16532:	2500      	movs	r5, #0
   16534:	4592      	cmp	sl, r2
   16536:	d300      	bcc.n	1653a <__aeabi_ddiv+0x48e>
   16538:	e733      	b.n	163a2 <__aeabi_ddiv+0x2f6>
   1653a:	9e03      	ldr	r6, [sp, #12]
   1653c:	4659      	mov	r1, fp
   1653e:	46b4      	mov	ip, r6
   16540:	44e2      	add	sl, ip
   16542:	45b2      	cmp	sl, r6
   16544:	41ad      	sbcs	r5, r5
   16546:	426d      	negs	r5, r5
   16548:	4445      	add	r5, r8
   1654a:	18eb      	adds	r3, r5, r3
   1654c:	3901      	subs	r1, #1
   1654e:	4598      	cmp	r8, r3
   16550:	d207      	bcs.n	16562 <__aeabi_ddiv+0x4b6>
   16552:	4298      	cmp	r0, r3
   16554:	d900      	bls.n	16558 <__aeabi_ddiv+0x4ac>
   16556:	e07f      	b.n	16658 <__aeabi_ddiv+0x5ac>
   16558:	d100      	bne.n	1655c <__aeabi_ddiv+0x4b0>
   1655a:	e0bc      	b.n	166d6 <__aeabi_ddiv+0x62a>
   1655c:	1a1d      	subs	r5, r3, r0
   1655e:	468b      	mov	fp, r1
   16560:	e71f      	b.n	163a2 <__aeabi_ddiv+0x2f6>
   16562:	4598      	cmp	r8, r3
   16564:	d1fa      	bne.n	1655c <__aeabi_ddiv+0x4b0>
   16566:	9d03      	ldr	r5, [sp, #12]
   16568:	4555      	cmp	r5, sl
   1656a:	d9f2      	bls.n	16552 <__aeabi_ddiv+0x4a6>
   1656c:	4643      	mov	r3, r8
   1656e:	468b      	mov	fp, r1
   16570:	1a1d      	subs	r5, r3, r0
   16572:	e716      	b.n	163a2 <__aeabi_ddiv+0x2f6>
   16574:	469b      	mov	fp, r3
   16576:	e6ca      	b.n	1630e <__aeabi_ddiv+0x262>
   16578:	0015      	movs	r5, r2
   1657a:	e6e7      	b.n	1634c <__aeabi_ddiv+0x2a0>
   1657c:	465a      	mov	r2, fp
   1657e:	08c9      	lsrs	r1, r1, #3
   16580:	0752      	lsls	r2, r2, #29
   16582:	430a      	orrs	r2, r1
   16584:	055b      	lsls	r3, r3, #21
   16586:	4690      	mov	r8, r2
   16588:	0d5c      	lsrs	r4, r3, #21
   1658a:	465a      	mov	r2, fp
   1658c:	2301      	movs	r3, #1
   1658e:	9902      	ldr	r1, [sp, #8]
   16590:	0252      	lsls	r2, r2, #9
   16592:	4019      	ands	r1, r3
   16594:	0b12      	lsrs	r2, r2, #12
   16596:	468c      	mov	ip, r1
   16598:	e656      	b.n	16248 <__aeabi_ddiv+0x19c>
   1659a:	2b00      	cmp	r3, #0
   1659c:	d100      	bne.n	165a0 <__aeabi_ddiv+0x4f4>
   1659e:	e76f      	b.n	16480 <__aeabi_ddiv+0x3d4>
   165a0:	4446      	add	r6, r8
   165a2:	1e4a      	subs	r2, r1, #1
   165a4:	45b0      	cmp	r8, r6
   165a6:	d929      	bls.n	165fc <__aeabi_ddiv+0x550>
   165a8:	0011      	movs	r1, r2
   165aa:	4286      	cmp	r6, r0
   165ac:	d000      	beq.n	165b0 <__aeabi_ddiv+0x504>
   165ae:	e765      	b.n	1647c <__aeabi_ddiv+0x3d0>
   165b0:	9a03      	ldr	r2, [sp, #12]
   165b2:	4293      	cmp	r3, r2
   165b4:	d000      	beq.n	165b8 <__aeabi_ddiv+0x50c>
   165b6:	e761      	b.n	1647c <__aeabi_ddiv+0x3d0>
   165b8:	e762      	b.n	16480 <__aeabi_ddiv+0x3d4>
   165ba:	2101      	movs	r1, #1
   165bc:	4249      	negs	r1, r1
   165be:	2001      	movs	r0, #1
   165c0:	1ac2      	subs	r2, r0, r3
   165c2:	2a38      	cmp	r2, #56	; 0x38
   165c4:	dd21      	ble.n	1660a <__aeabi_ddiv+0x55e>
   165c6:	9b02      	ldr	r3, [sp, #8]
   165c8:	4003      	ands	r3, r0
   165ca:	469c      	mov	ip, r3
   165cc:	e638      	b.n	16240 <__aeabi_ddiv+0x194>
   165ce:	220f      	movs	r2, #15
   165d0:	400a      	ands	r2, r1
   165d2:	2a04      	cmp	r2, #4
   165d4:	d100      	bne.n	165d8 <__aeabi_ddiv+0x52c>
   165d6:	e75b      	b.n	16490 <__aeabi_ddiv+0x3e4>
   165d8:	000a      	movs	r2, r1
   165da:	1d11      	adds	r1, r2, #4
   165dc:	4291      	cmp	r1, r2
   165de:	4192      	sbcs	r2, r2
   165e0:	4252      	negs	r2, r2
   165e2:	4493      	add	fp, r2
   165e4:	e754      	b.n	16490 <__aeabi_ddiv+0x3e4>
   165e6:	4b47      	ldr	r3, [pc, #284]	; (16704 <__aeabi_ddiv+0x658>)
   165e8:	18e3      	adds	r3, r4, r3
   165ea:	2b00      	cmp	r3, #0
   165ec:	dde5      	ble.n	165ba <__aeabi_ddiv+0x50e>
   165ee:	2201      	movs	r2, #1
   165f0:	4252      	negs	r2, r2
   165f2:	e7f2      	b.n	165da <__aeabi_ddiv+0x52e>
   165f4:	001d      	movs	r5, r3
   165f6:	e6fa      	b.n	163ee <__aeabi_ddiv+0x342>
   165f8:	469a      	mov	sl, r3
   165fa:	e71c      	b.n	16436 <__aeabi_ddiv+0x38a>
   165fc:	42b0      	cmp	r0, r6
   165fe:	d839      	bhi.n	16674 <__aeabi_ddiv+0x5c8>
   16600:	d06e      	beq.n	166e0 <__aeabi_ddiv+0x634>
   16602:	0011      	movs	r1, r2
   16604:	e73a      	b.n	1647c <__aeabi_ddiv+0x3d0>
   16606:	9302      	str	r3, [sp, #8]
   16608:	e73a      	b.n	16480 <__aeabi_ddiv+0x3d4>
   1660a:	2a1f      	cmp	r2, #31
   1660c:	dc3c      	bgt.n	16688 <__aeabi_ddiv+0x5dc>
   1660e:	2320      	movs	r3, #32
   16610:	1a9b      	subs	r3, r3, r2
   16612:	000c      	movs	r4, r1
   16614:	4658      	mov	r0, fp
   16616:	4099      	lsls	r1, r3
   16618:	4098      	lsls	r0, r3
   1661a:	1e4b      	subs	r3, r1, #1
   1661c:	4199      	sbcs	r1, r3
   1661e:	465b      	mov	r3, fp
   16620:	40d4      	lsrs	r4, r2
   16622:	40d3      	lsrs	r3, r2
   16624:	4320      	orrs	r0, r4
   16626:	4308      	orrs	r0, r1
   16628:	001a      	movs	r2, r3
   1662a:	0743      	lsls	r3, r0, #29
   1662c:	d009      	beq.n	16642 <__aeabi_ddiv+0x596>
   1662e:	230f      	movs	r3, #15
   16630:	4003      	ands	r3, r0
   16632:	2b04      	cmp	r3, #4
   16634:	d005      	beq.n	16642 <__aeabi_ddiv+0x596>
   16636:	0001      	movs	r1, r0
   16638:	1d08      	adds	r0, r1, #4
   1663a:	4288      	cmp	r0, r1
   1663c:	419b      	sbcs	r3, r3
   1663e:	425b      	negs	r3, r3
   16640:	18d2      	adds	r2, r2, r3
   16642:	0213      	lsls	r3, r2, #8
   16644:	d53a      	bpl.n	166bc <__aeabi_ddiv+0x610>
   16646:	2301      	movs	r3, #1
   16648:	9a02      	ldr	r2, [sp, #8]
   1664a:	2401      	movs	r4, #1
   1664c:	401a      	ands	r2, r3
   1664e:	2300      	movs	r3, #0
   16650:	4694      	mov	ip, r2
   16652:	4698      	mov	r8, r3
   16654:	2200      	movs	r2, #0
   16656:	e5f7      	b.n	16248 <__aeabi_ddiv+0x19c>
   16658:	2102      	movs	r1, #2
   1665a:	4249      	negs	r1, r1
   1665c:	468c      	mov	ip, r1
   1665e:	9d03      	ldr	r5, [sp, #12]
   16660:	44e3      	add	fp, ip
   16662:	46ac      	mov	ip, r5
   16664:	44e2      	add	sl, ip
   16666:	45aa      	cmp	sl, r5
   16668:	41ad      	sbcs	r5, r5
   1666a:	426d      	negs	r5, r5
   1666c:	4445      	add	r5, r8
   1666e:	18ed      	adds	r5, r5, r3
   16670:	1a2d      	subs	r5, r5, r0
   16672:	e696      	b.n	163a2 <__aeabi_ddiv+0x2f6>
   16674:	1e8a      	subs	r2, r1, #2
   16676:	9903      	ldr	r1, [sp, #12]
   16678:	004d      	lsls	r5, r1, #1
   1667a:	428d      	cmp	r5, r1
   1667c:	4189      	sbcs	r1, r1
   1667e:	4249      	negs	r1, r1
   16680:	4441      	add	r1, r8
   16682:	1876      	adds	r6, r6, r1
   16684:	9503      	str	r5, [sp, #12]
   16686:	e78f      	b.n	165a8 <__aeabi_ddiv+0x4fc>
   16688:	201f      	movs	r0, #31
   1668a:	4240      	negs	r0, r0
   1668c:	1ac3      	subs	r3, r0, r3
   1668e:	4658      	mov	r0, fp
   16690:	40d8      	lsrs	r0, r3
   16692:	0003      	movs	r3, r0
   16694:	2a20      	cmp	r2, #32
   16696:	d028      	beq.n	166ea <__aeabi_ddiv+0x63e>
   16698:	2040      	movs	r0, #64	; 0x40
   1669a:	465d      	mov	r5, fp
   1669c:	1a82      	subs	r2, r0, r2
   1669e:	4095      	lsls	r5, r2
   166a0:	4329      	orrs	r1, r5
   166a2:	1e4a      	subs	r2, r1, #1
   166a4:	4191      	sbcs	r1, r2
   166a6:	4319      	orrs	r1, r3
   166a8:	2307      	movs	r3, #7
   166aa:	2200      	movs	r2, #0
   166ac:	400b      	ands	r3, r1
   166ae:	d009      	beq.n	166c4 <__aeabi_ddiv+0x618>
   166b0:	230f      	movs	r3, #15
   166b2:	2200      	movs	r2, #0
   166b4:	400b      	ands	r3, r1
   166b6:	0008      	movs	r0, r1
   166b8:	2b04      	cmp	r3, #4
   166ba:	d1bd      	bne.n	16638 <__aeabi_ddiv+0x58c>
   166bc:	0001      	movs	r1, r0
   166be:	0753      	lsls	r3, r2, #29
   166c0:	0252      	lsls	r2, r2, #9
   166c2:	0b12      	lsrs	r2, r2, #12
   166c4:	08c9      	lsrs	r1, r1, #3
   166c6:	4319      	orrs	r1, r3
   166c8:	2301      	movs	r3, #1
   166ca:	4688      	mov	r8, r1
   166cc:	9902      	ldr	r1, [sp, #8]
   166ce:	2400      	movs	r4, #0
   166d0:	4019      	ands	r1, r3
   166d2:	468c      	mov	ip, r1
   166d4:	e5b8      	b.n	16248 <__aeabi_ddiv+0x19c>
   166d6:	4552      	cmp	r2, sl
   166d8:	d8be      	bhi.n	16658 <__aeabi_ddiv+0x5ac>
   166da:	468b      	mov	fp, r1
   166dc:	2500      	movs	r5, #0
   166de:	e660      	b.n	163a2 <__aeabi_ddiv+0x2f6>
   166e0:	9d03      	ldr	r5, [sp, #12]
   166e2:	429d      	cmp	r5, r3
   166e4:	d3c6      	bcc.n	16674 <__aeabi_ddiv+0x5c8>
   166e6:	0011      	movs	r1, r2
   166e8:	e762      	b.n	165b0 <__aeabi_ddiv+0x504>
   166ea:	2500      	movs	r5, #0
   166ec:	e7d8      	b.n	166a0 <__aeabi_ddiv+0x5f4>
   166ee:	2280      	movs	r2, #128	; 0x80
   166f0:	465b      	mov	r3, fp
   166f2:	0312      	lsls	r2, r2, #12
   166f4:	431a      	orrs	r2, r3
   166f6:	9b01      	ldr	r3, [sp, #4]
   166f8:	0312      	lsls	r2, r2, #12
   166fa:	0b12      	lsrs	r2, r2, #12
   166fc:	469c      	mov	ip, r3
   166fe:	4688      	mov	r8, r1
   16700:	4c03      	ldr	r4, [pc, #12]	; (16710 <__aeabi_ddiv+0x664>)
   16702:	e5a1      	b.n	16248 <__aeabi_ddiv+0x19c>
   16704:	000003ff 	.word	0x000003ff
   16708:	feffffff 	.word	0xfeffffff
   1670c:	000007fe 	.word	0x000007fe
   16710:	000007ff 	.word	0x000007ff

00016714 <__eqdf2>:
   16714:	b5f0      	push	{r4, r5, r6, r7, lr}
   16716:	464f      	mov	r7, r9
   16718:	4646      	mov	r6, r8
   1671a:	46d6      	mov	lr, sl
   1671c:	005c      	lsls	r4, r3, #1
   1671e:	b5c0      	push	{r6, r7, lr}
   16720:	031f      	lsls	r7, r3, #12
   16722:	0fdb      	lsrs	r3, r3, #31
   16724:	469a      	mov	sl, r3
   16726:	4b17      	ldr	r3, [pc, #92]	; (16784 <__eqdf2+0x70>)
   16728:	030e      	lsls	r6, r1, #12
   1672a:	004d      	lsls	r5, r1, #1
   1672c:	4684      	mov	ip, r0
   1672e:	4680      	mov	r8, r0
   16730:	0b36      	lsrs	r6, r6, #12
   16732:	0d6d      	lsrs	r5, r5, #21
   16734:	0fc9      	lsrs	r1, r1, #31
   16736:	4691      	mov	r9, r2
   16738:	0b3f      	lsrs	r7, r7, #12
   1673a:	0d64      	lsrs	r4, r4, #21
   1673c:	2001      	movs	r0, #1
   1673e:	429d      	cmp	r5, r3
   16740:	d008      	beq.n	16754 <__eqdf2+0x40>
   16742:	429c      	cmp	r4, r3
   16744:	d001      	beq.n	1674a <__eqdf2+0x36>
   16746:	42a5      	cmp	r5, r4
   16748:	d00b      	beq.n	16762 <__eqdf2+0x4e>
   1674a:	bc1c      	pop	{r2, r3, r4}
   1674c:	4690      	mov	r8, r2
   1674e:	4699      	mov	r9, r3
   16750:	46a2      	mov	sl, r4
   16752:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16754:	4663      	mov	r3, ip
   16756:	4333      	orrs	r3, r6
   16758:	d1f7      	bne.n	1674a <__eqdf2+0x36>
   1675a:	42ac      	cmp	r4, r5
   1675c:	d1f5      	bne.n	1674a <__eqdf2+0x36>
   1675e:	433a      	orrs	r2, r7
   16760:	d1f3      	bne.n	1674a <__eqdf2+0x36>
   16762:	2001      	movs	r0, #1
   16764:	42be      	cmp	r6, r7
   16766:	d1f0      	bne.n	1674a <__eqdf2+0x36>
   16768:	45c8      	cmp	r8, r9
   1676a:	d1ee      	bne.n	1674a <__eqdf2+0x36>
   1676c:	4551      	cmp	r1, sl
   1676e:	d007      	beq.n	16780 <__eqdf2+0x6c>
   16770:	2d00      	cmp	r5, #0
   16772:	d1ea      	bne.n	1674a <__eqdf2+0x36>
   16774:	4663      	mov	r3, ip
   16776:	431e      	orrs	r6, r3
   16778:	0030      	movs	r0, r6
   1677a:	1e46      	subs	r6, r0, #1
   1677c:	41b0      	sbcs	r0, r6
   1677e:	e7e4      	b.n	1674a <__eqdf2+0x36>
   16780:	2000      	movs	r0, #0
   16782:	e7e2      	b.n	1674a <__eqdf2+0x36>
   16784:	000007ff 	.word	0x000007ff

00016788 <__gedf2>:
   16788:	b5f0      	push	{r4, r5, r6, r7, lr}
   1678a:	4645      	mov	r5, r8
   1678c:	46de      	mov	lr, fp
   1678e:	4657      	mov	r7, sl
   16790:	464e      	mov	r6, r9
   16792:	b5e0      	push	{r5, r6, r7, lr}
   16794:	031f      	lsls	r7, r3, #12
   16796:	0b3d      	lsrs	r5, r7, #12
   16798:	4f2c      	ldr	r7, [pc, #176]	; (1684c <__gedf2+0xc4>)
   1679a:	030e      	lsls	r6, r1, #12
   1679c:	004c      	lsls	r4, r1, #1
   1679e:	46ab      	mov	fp, r5
   167a0:	005d      	lsls	r5, r3, #1
   167a2:	4684      	mov	ip, r0
   167a4:	0b36      	lsrs	r6, r6, #12
   167a6:	0d64      	lsrs	r4, r4, #21
   167a8:	0fc9      	lsrs	r1, r1, #31
   167aa:	4690      	mov	r8, r2
   167ac:	0d6d      	lsrs	r5, r5, #21
   167ae:	0fdb      	lsrs	r3, r3, #31
   167b0:	42bc      	cmp	r4, r7
   167b2:	d02a      	beq.n	1680a <__gedf2+0x82>
   167b4:	4f25      	ldr	r7, [pc, #148]	; (1684c <__gedf2+0xc4>)
   167b6:	42bd      	cmp	r5, r7
   167b8:	d02d      	beq.n	16816 <__gedf2+0x8e>
   167ba:	2c00      	cmp	r4, #0
   167bc:	d10f      	bne.n	167de <__gedf2+0x56>
   167be:	4330      	orrs	r0, r6
   167c0:	0007      	movs	r7, r0
   167c2:	4681      	mov	r9, r0
   167c4:	4278      	negs	r0, r7
   167c6:	4178      	adcs	r0, r7
   167c8:	b2c0      	uxtb	r0, r0
   167ca:	2d00      	cmp	r5, #0
   167cc:	d117      	bne.n	167fe <__gedf2+0x76>
   167ce:	465f      	mov	r7, fp
   167d0:	433a      	orrs	r2, r7
   167d2:	d114      	bne.n	167fe <__gedf2+0x76>
   167d4:	464b      	mov	r3, r9
   167d6:	2000      	movs	r0, #0
   167d8:	2b00      	cmp	r3, #0
   167da:	d00a      	beq.n	167f2 <__gedf2+0x6a>
   167dc:	e006      	b.n	167ec <__gedf2+0x64>
   167de:	2d00      	cmp	r5, #0
   167e0:	d102      	bne.n	167e8 <__gedf2+0x60>
   167e2:	4658      	mov	r0, fp
   167e4:	4302      	orrs	r2, r0
   167e6:	d001      	beq.n	167ec <__gedf2+0x64>
   167e8:	4299      	cmp	r1, r3
   167ea:	d018      	beq.n	1681e <__gedf2+0x96>
   167ec:	4248      	negs	r0, r1
   167ee:	2101      	movs	r1, #1
   167f0:	4308      	orrs	r0, r1
   167f2:	bc3c      	pop	{r2, r3, r4, r5}
   167f4:	4690      	mov	r8, r2
   167f6:	4699      	mov	r9, r3
   167f8:	46a2      	mov	sl, r4
   167fa:	46ab      	mov	fp, r5
   167fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   167fe:	2800      	cmp	r0, #0
   16800:	d0f2      	beq.n	167e8 <__gedf2+0x60>
   16802:	2001      	movs	r0, #1
   16804:	3b01      	subs	r3, #1
   16806:	4318      	orrs	r0, r3
   16808:	e7f3      	b.n	167f2 <__gedf2+0x6a>
   1680a:	0037      	movs	r7, r6
   1680c:	4307      	orrs	r7, r0
   1680e:	d0d1      	beq.n	167b4 <__gedf2+0x2c>
   16810:	2002      	movs	r0, #2
   16812:	4240      	negs	r0, r0
   16814:	e7ed      	b.n	167f2 <__gedf2+0x6a>
   16816:	465f      	mov	r7, fp
   16818:	4317      	orrs	r7, r2
   1681a:	d0ce      	beq.n	167ba <__gedf2+0x32>
   1681c:	e7f8      	b.n	16810 <__gedf2+0x88>
   1681e:	42ac      	cmp	r4, r5
   16820:	dce4      	bgt.n	167ec <__gedf2+0x64>
   16822:	da03      	bge.n	1682c <__gedf2+0xa4>
   16824:	1e48      	subs	r0, r1, #1
   16826:	2101      	movs	r1, #1
   16828:	4308      	orrs	r0, r1
   1682a:	e7e2      	b.n	167f2 <__gedf2+0x6a>
   1682c:	455e      	cmp	r6, fp
   1682e:	d8dd      	bhi.n	167ec <__gedf2+0x64>
   16830:	d006      	beq.n	16840 <__gedf2+0xb8>
   16832:	2000      	movs	r0, #0
   16834:	455e      	cmp	r6, fp
   16836:	d2dc      	bcs.n	167f2 <__gedf2+0x6a>
   16838:	2301      	movs	r3, #1
   1683a:	1e48      	subs	r0, r1, #1
   1683c:	4318      	orrs	r0, r3
   1683e:	e7d8      	b.n	167f2 <__gedf2+0x6a>
   16840:	45c4      	cmp	ip, r8
   16842:	d8d3      	bhi.n	167ec <__gedf2+0x64>
   16844:	2000      	movs	r0, #0
   16846:	45c4      	cmp	ip, r8
   16848:	d3f6      	bcc.n	16838 <__gedf2+0xb0>
   1684a:	e7d2      	b.n	167f2 <__gedf2+0x6a>
   1684c:	000007ff 	.word	0x000007ff

00016850 <__ledf2>:
   16850:	b5f0      	push	{r4, r5, r6, r7, lr}
   16852:	464e      	mov	r6, r9
   16854:	4645      	mov	r5, r8
   16856:	46de      	mov	lr, fp
   16858:	4657      	mov	r7, sl
   1685a:	005c      	lsls	r4, r3, #1
   1685c:	b5e0      	push	{r5, r6, r7, lr}
   1685e:	031f      	lsls	r7, r3, #12
   16860:	0fdb      	lsrs	r3, r3, #31
   16862:	4699      	mov	r9, r3
   16864:	4b2a      	ldr	r3, [pc, #168]	; (16910 <__ledf2+0xc0>)
   16866:	030e      	lsls	r6, r1, #12
   16868:	004d      	lsls	r5, r1, #1
   1686a:	0fc9      	lsrs	r1, r1, #31
   1686c:	4684      	mov	ip, r0
   1686e:	0b36      	lsrs	r6, r6, #12
   16870:	0d6d      	lsrs	r5, r5, #21
   16872:	468b      	mov	fp, r1
   16874:	4690      	mov	r8, r2
   16876:	0b3f      	lsrs	r7, r7, #12
   16878:	0d64      	lsrs	r4, r4, #21
   1687a:	429d      	cmp	r5, r3
   1687c:	d020      	beq.n	168c0 <__ledf2+0x70>
   1687e:	4b24      	ldr	r3, [pc, #144]	; (16910 <__ledf2+0xc0>)
   16880:	429c      	cmp	r4, r3
   16882:	d022      	beq.n	168ca <__ledf2+0x7a>
   16884:	2d00      	cmp	r5, #0
   16886:	d112      	bne.n	168ae <__ledf2+0x5e>
   16888:	4330      	orrs	r0, r6
   1688a:	4243      	negs	r3, r0
   1688c:	4143      	adcs	r3, r0
   1688e:	b2db      	uxtb	r3, r3
   16890:	2c00      	cmp	r4, #0
   16892:	d01f      	beq.n	168d4 <__ledf2+0x84>
   16894:	2b00      	cmp	r3, #0
   16896:	d00c      	beq.n	168b2 <__ledf2+0x62>
   16898:	464b      	mov	r3, r9
   1689a:	2001      	movs	r0, #1
   1689c:	3b01      	subs	r3, #1
   1689e:	4303      	orrs	r3, r0
   168a0:	0018      	movs	r0, r3
   168a2:	bc3c      	pop	{r2, r3, r4, r5}
   168a4:	4690      	mov	r8, r2
   168a6:	4699      	mov	r9, r3
   168a8:	46a2      	mov	sl, r4
   168aa:	46ab      	mov	fp, r5
   168ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   168ae:	2c00      	cmp	r4, #0
   168b0:	d016      	beq.n	168e0 <__ledf2+0x90>
   168b2:	45cb      	cmp	fp, r9
   168b4:	d017      	beq.n	168e6 <__ledf2+0x96>
   168b6:	465b      	mov	r3, fp
   168b8:	4259      	negs	r1, r3
   168ba:	2301      	movs	r3, #1
   168bc:	430b      	orrs	r3, r1
   168be:	e7ef      	b.n	168a0 <__ledf2+0x50>
   168c0:	0031      	movs	r1, r6
   168c2:	2302      	movs	r3, #2
   168c4:	4301      	orrs	r1, r0
   168c6:	d1eb      	bne.n	168a0 <__ledf2+0x50>
   168c8:	e7d9      	b.n	1687e <__ledf2+0x2e>
   168ca:	0039      	movs	r1, r7
   168cc:	2302      	movs	r3, #2
   168ce:	4311      	orrs	r1, r2
   168d0:	d1e6      	bne.n	168a0 <__ledf2+0x50>
   168d2:	e7d7      	b.n	16884 <__ledf2+0x34>
   168d4:	433a      	orrs	r2, r7
   168d6:	d1dd      	bne.n	16894 <__ledf2+0x44>
   168d8:	2300      	movs	r3, #0
   168da:	2800      	cmp	r0, #0
   168dc:	d0e0      	beq.n	168a0 <__ledf2+0x50>
   168de:	e7ea      	b.n	168b6 <__ledf2+0x66>
   168e0:	433a      	orrs	r2, r7
   168e2:	d1e6      	bne.n	168b2 <__ledf2+0x62>
   168e4:	e7e7      	b.n	168b6 <__ledf2+0x66>
   168e6:	42a5      	cmp	r5, r4
   168e8:	dce5      	bgt.n	168b6 <__ledf2+0x66>
   168ea:	db05      	blt.n	168f8 <__ledf2+0xa8>
   168ec:	42be      	cmp	r6, r7
   168ee:	d8e2      	bhi.n	168b6 <__ledf2+0x66>
   168f0:	d007      	beq.n	16902 <__ledf2+0xb2>
   168f2:	2300      	movs	r3, #0
   168f4:	42be      	cmp	r6, r7
   168f6:	d2d3      	bcs.n	168a0 <__ledf2+0x50>
   168f8:	4659      	mov	r1, fp
   168fa:	2301      	movs	r3, #1
   168fc:	3901      	subs	r1, #1
   168fe:	430b      	orrs	r3, r1
   16900:	e7ce      	b.n	168a0 <__ledf2+0x50>
   16902:	45c4      	cmp	ip, r8
   16904:	d8d7      	bhi.n	168b6 <__ledf2+0x66>
   16906:	2300      	movs	r3, #0
   16908:	45c4      	cmp	ip, r8
   1690a:	d3f5      	bcc.n	168f8 <__ledf2+0xa8>
   1690c:	e7c8      	b.n	168a0 <__ledf2+0x50>
   1690e:	46c0      	nop			; (mov r8, r8)
   16910:	000007ff 	.word	0x000007ff

00016914 <__aeabi_dmul>:
   16914:	b5f0      	push	{r4, r5, r6, r7, lr}
   16916:	4657      	mov	r7, sl
   16918:	4645      	mov	r5, r8
   1691a:	46de      	mov	lr, fp
   1691c:	464e      	mov	r6, r9
   1691e:	b5e0      	push	{r5, r6, r7, lr}
   16920:	030c      	lsls	r4, r1, #12
   16922:	4698      	mov	r8, r3
   16924:	004e      	lsls	r6, r1, #1
   16926:	0b23      	lsrs	r3, r4, #12
   16928:	b087      	sub	sp, #28
   1692a:	0007      	movs	r7, r0
   1692c:	4692      	mov	sl, r2
   1692e:	469b      	mov	fp, r3
   16930:	0d76      	lsrs	r6, r6, #21
   16932:	0fcd      	lsrs	r5, r1, #31
   16934:	2e00      	cmp	r6, #0
   16936:	d06b      	beq.n	16a10 <__aeabi_dmul+0xfc>
   16938:	4b6d      	ldr	r3, [pc, #436]	; (16af0 <__aeabi_dmul+0x1dc>)
   1693a:	429e      	cmp	r6, r3
   1693c:	d035      	beq.n	169aa <__aeabi_dmul+0x96>
   1693e:	2480      	movs	r4, #128	; 0x80
   16940:	465b      	mov	r3, fp
   16942:	0f42      	lsrs	r2, r0, #29
   16944:	0424      	lsls	r4, r4, #16
   16946:	00db      	lsls	r3, r3, #3
   16948:	4314      	orrs	r4, r2
   1694a:	431c      	orrs	r4, r3
   1694c:	00c3      	lsls	r3, r0, #3
   1694e:	4699      	mov	r9, r3
   16950:	4b68      	ldr	r3, [pc, #416]	; (16af4 <__aeabi_dmul+0x1e0>)
   16952:	46a3      	mov	fp, r4
   16954:	469c      	mov	ip, r3
   16956:	2300      	movs	r3, #0
   16958:	2700      	movs	r7, #0
   1695a:	4466      	add	r6, ip
   1695c:	9302      	str	r3, [sp, #8]
   1695e:	4643      	mov	r3, r8
   16960:	031c      	lsls	r4, r3, #12
   16962:	005a      	lsls	r2, r3, #1
   16964:	0fdb      	lsrs	r3, r3, #31
   16966:	4650      	mov	r0, sl
   16968:	0b24      	lsrs	r4, r4, #12
   1696a:	0d52      	lsrs	r2, r2, #21
   1696c:	4698      	mov	r8, r3
   1696e:	d100      	bne.n	16972 <__aeabi_dmul+0x5e>
   16970:	e076      	b.n	16a60 <__aeabi_dmul+0x14c>
   16972:	4b5f      	ldr	r3, [pc, #380]	; (16af0 <__aeabi_dmul+0x1dc>)
   16974:	429a      	cmp	r2, r3
   16976:	d06d      	beq.n	16a54 <__aeabi_dmul+0x140>
   16978:	2380      	movs	r3, #128	; 0x80
   1697a:	0f41      	lsrs	r1, r0, #29
   1697c:	041b      	lsls	r3, r3, #16
   1697e:	430b      	orrs	r3, r1
   16980:	495c      	ldr	r1, [pc, #368]	; (16af4 <__aeabi_dmul+0x1e0>)
   16982:	00e4      	lsls	r4, r4, #3
   16984:	468c      	mov	ip, r1
   16986:	431c      	orrs	r4, r3
   16988:	00c3      	lsls	r3, r0, #3
   1698a:	2000      	movs	r0, #0
   1698c:	4462      	add	r2, ip
   1698e:	4641      	mov	r1, r8
   16990:	18b6      	adds	r6, r6, r2
   16992:	4069      	eors	r1, r5
   16994:	1c72      	adds	r2, r6, #1
   16996:	9101      	str	r1, [sp, #4]
   16998:	4694      	mov	ip, r2
   1699a:	4307      	orrs	r7, r0
   1699c:	2f0f      	cmp	r7, #15
   1699e:	d900      	bls.n	169a2 <__aeabi_dmul+0x8e>
   169a0:	e0b0      	b.n	16b04 <__aeabi_dmul+0x1f0>
   169a2:	4a55      	ldr	r2, [pc, #340]	; (16af8 <__aeabi_dmul+0x1e4>)
   169a4:	00bf      	lsls	r7, r7, #2
   169a6:	59d2      	ldr	r2, [r2, r7]
   169a8:	4697      	mov	pc, r2
   169aa:	465b      	mov	r3, fp
   169ac:	4303      	orrs	r3, r0
   169ae:	4699      	mov	r9, r3
   169b0:	d000      	beq.n	169b4 <__aeabi_dmul+0xa0>
   169b2:	e087      	b.n	16ac4 <__aeabi_dmul+0x1b0>
   169b4:	2300      	movs	r3, #0
   169b6:	469b      	mov	fp, r3
   169b8:	3302      	adds	r3, #2
   169ba:	2708      	movs	r7, #8
   169bc:	9302      	str	r3, [sp, #8]
   169be:	e7ce      	b.n	1695e <__aeabi_dmul+0x4a>
   169c0:	4642      	mov	r2, r8
   169c2:	9201      	str	r2, [sp, #4]
   169c4:	2802      	cmp	r0, #2
   169c6:	d067      	beq.n	16a98 <__aeabi_dmul+0x184>
   169c8:	2803      	cmp	r0, #3
   169ca:	d100      	bne.n	169ce <__aeabi_dmul+0xba>
   169cc:	e20e      	b.n	16dec <__aeabi_dmul+0x4d8>
   169ce:	2801      	cmp	r0, #1
   169d0:	d000      	beq.n	169d4 <__aeabi_dmul+0xc0>
   169d2:	e162      	b.n	16c9a <__aeabi_dmul+0x386>
   169d4:	2300      	movs	r3, #0
   169d6:	2400      	movs	r4, #0
   169d8:	2200      	movs	r2, #0
   169da:	4699      	mov	r9, r3
   169dc:	9901      	ldr	r1, [sp, #4]
   169de:	4001      	ands	r1, r0
   169e0:	b2cd      	uxtb	r5, r1
   169e2:	2100      	movs	r1, #0
   169e4:	0312      	lsls	r2, r2, #12
   169e6:	0d0b      	lsrs	r3, r1, #20
   169e8:	0b12      	lsrs	r2, r2, #12
   169ea:	051b      	lsls	r3, r3, #20
   169ec:	4313      	orrs	r3, r2
   169ee:	4a43      	ldr	r2, [pc, #268]	; (16afc <__aeabi_dmul+0x1e8>)
   169f0:	0524      	lsls	r4, r4, #20
   169f2:	4013      	ands	r3, r2
   169f4:	431c      	orrs	r4, r3
   169f6:	0064      	lsls	r4, r4, #1
   169f8:	07ed      	lsls	r5, r5, #31
   169fa:	0864      	lsrs	r4, r4, #1
   169fc:	432c      	orrs	r4, r5
   169fe:	4648      	mov	r0, r9
   16a00:	0021      	movs	r1, r4
   16a02:	b007      	add	sp, #28
   16a04:	bc3c      	pop	{r2, r3, r4, r5}
   16a06:	4690      	mov	r8, r2
   16a08:	4699      	mov	r9, r3
   16a0a:	46a2      	mov	sl, r4
   16a0c:	46ab      	mov	fp, r5
   16a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16a10:	4303      	orrs	r3, r0
   16a12:	4699      	mov	r9, r3
   16a14:	d04f      	beq.n	16ab6 <__aeabi_dmul+0x1a2>
   16a16:	465b      	mov	r3, fp
   16a18:	2b00      	cmp	r3, #0
   16a1a:	d100      	bne.n	16a1e <__aeabi_dmul+0x10a>
   16a1c:	e189      	b.n	16d32 <__aeabi_dmul+0x41e>
   16a1e:	4658      	mov	r0, fp
   16a20:	f000 fe98 	bl	17754 <__clzsi2>
   16a24:	0003      	movs	r3, r0
   16a26:	3b0b      	subs	r3, #11
   16a28:	2b1c      	cmp	r3, #28
   16a2a:	dd00      	ble.n	16a2e <__aeabi_dmul+0x11a>
   16a2c:	e17a      	b.n	16d24 <__aeabi_dmul+0x410>
   16a2e:	221d      	movs	r2, #29
   16a30:	1ad3      	subs	r3, r2, r3
   16a32:	003a      	movs	r2, r7
   16a34:	0001      	movs	r1, r0
   16a36:	465c      	mov	r4, fp
   16a38:	40da      	lsrs	r2, r3
   16a3a:	3908      	subs	r1, #8
   16a3c:	408c      	lsls	r4, r1
   16a3e:	0013      	movs	r3, r2
   16a40:	408f      	lsls	r7, r1
   16a42:	4323      	orrs	r3, r4
   16a44:	469b      	mov	fp, r3
   16a46:	46b9      	mov	r9, r7
   16a48:	2300      	movs	r3, #0
   16a4a:	4e2d      	ldr	r6, [pc, #180]	; (16b00 <__aeabi_dmul+0x1ec>)
   16a4c:	2700      	movs	r7, #0
   16a4e:	1a36      	subs	r6, r6, r0
   16a50:	9302      	str	r3, [sp, #8]
   16a52:	e784      	b.n	1695e <__aeabi_dmul+0x4a>
   16a54:	4653      	mov	r3, sl
   16a56:	4323      	orrs	r3, r4
   16a58:	d12a      	bne.n	16ab0 <__aeabi_dmul+0x19c>
   16a5a:	2400      	movs	r4, #0
   16a5c:	2002      	movs	r0, #2
   16a5e:	e796      	b.n	1698e <__aeabi_dmul+0x7a>
   16a60:	4653      	mov	r3, sl
   16a62:	4323      	orrs	r3, r4
   16a64:	d020      	beq.n	16aa8 <__aeabi_dmul+0x194>
   16a66:	2c00      	cmp	r4, #0
   16a68:	d100      	bne.n	16a6c <__aeabi_dmul+0x158>
   16a6a:	e157      	b.n	16d1c <__aeabi_dmul+0x408>
   16a6c:	0020      	movs	r0, r4
   16a6e:	f000 fe71 	bl	17754 <__clzsi2>
   16a72:	0003      	movs	r3, r0
   16a74:	3b0b      	subs	r3, #11
   16a76:	2b1c      	cmp	r3, #28
   16a78:	dd00      	ble.n	16a7c <__aeabi_dmul+0x168>
   16a7a:	e149      	b.n	16d10 <__aeabi_dmul+0x3fc>
   16a7c:	211d      	movs	r1, #29
   16a7e:	1acb      	subs	r3, r1, r3
   16a80:	4651      	mov	r1, sl
   16a82:	0002      	movs	r2, r0
   16a84:	40d9      	lsrs	r1, r3
   16a86:	4653      	mov	r3, sl
   16a88:	3a08      	subs	r2, #8
   16a8a:	4094      	lsls	r4, r2
   16a8c:	4093      	lsls	r3, r2
   16a8e:	430c      	orrs	r4, r1
   16a90:	4a1b      	ldr	r2, [pc, #108]	; (16b00 <__aeabi_dmul+0x1ec>)
   16a92:	1a12      	subs	r2, r2, r0
   16a94:	2000      	movs	r0, #0
   16a96:	e77a      	b.n	1698e <__aeabi_dmul+0x7a>
   16a98:	2501      	movs	r5, #1
   16a9a:	9b01      	ldr	r3, [sp, #4]
   16a9c:	4c14      	ldr	r4, [pc, #80]	; (16af0 <__aeabi_dmul+0x1dc>)
   16a9e:	401d      	ands	r5, r3
   16aa0:	2300      	movs	r3, #0
   16aa2:	2200      	movs	r2, #0
   16aa4:	4699      	mov	r9, r3
   16aa6:	e79c      	b.n	169e2 <__aeabi_dmul+0xce>
   16aa8:	2400      	movs	r4, #0
   16aaa:	2200      	movs	r2, #0
   16aac:	2001      	movs	r0, #1
   16aae:	e76e      	b.n	1698e <__aeabi_dmul+0x7a>
   16ab0:	4653      	mov	r3, sl
   16ab2:	2003      	movs	r0, #3
   16ab4:	e76b      	b.n	1698e <__aeabi_dmul+0x7a>
   16ab6:	2300      	movs	r3, #0
   16ab8:	469b      	mov	fp, r3
   16aba:	3301      	adds	r3, #1
   16abc:	2704      	movs	r7, #4
   16abe:	2600      	movs	r6, #0
   16ac0:	9302      	str	r3, [sp, #8]
   16ac2:	e74c      	b.n	1695e <__aeabi_dmul+0x4a>
   16ac4:	2303      	movs	r3, #3
   16ac6:	4681      	mov	r9, r0
   16ac8:	270c      	movs	r7, #12
   16aca:	9302      	str	r3, [sp, #8]
   16acc:	e747      	b.n	1695e <__aeabi_dmul+0x4a>
   16ace:	2280      	movs	r2, #128	; 0x80
   16ad0:	2300      	movs	r3, #0
   16ad2:	2500      	movs	r5, #0
   16ad4:	0312      	lsls	r2, r2, #12
   16ad6:	4699      	mov	r9, r3
   16ad8:	4c05      	ldr	r4, [pc, #20]	; (16af0 <__aeabi_dmul+0x1dc>)
   16ada:	e782      	b.n	169e2 <__aeabi_dmul+0xce>
   16adc:	465c      	mov	r4, fp
   16ade:	464b      	mov	r3, r9
   16ae0:	9802      	ldr	r0, [sp, #8]
   16ae2:	e76f      	b.n	169c4 <__aeabi_dmul+0xb0>
   16ae4:	465c      	mov	r4, fp
   16ae6:	464b      	mov	r3, r9
   16ae8:	9501      	str	r5, [sp, #4]
   16aea:	9802      	ldr	r0, [sp, #8]
   16aec:	e76a      	b.n	169c4 <__aeabi_dmul+0xb0>
   16aee:	46c0      	nop			; (mov r8, r8)
   16af0:	000007ff 	.word	0x000007ff
   16af4:	fffffc01 	.word	0xfffffc01
   16af8:	0001a4e0 	.word	0x0001a4e0
   16afc:	800fffff 	.word	0x800fffff
   16b00:	fffffc0d 	.word	0xfffffc0d
   16b04:	464a      	mov	r2, r9
   16b06:	4649      	mov	r1, r9
   16b08:	0c17      	lsrs	r7, r2, #16
   16b0a:	0c1a      	lsrs	r2, r3, #16
   16b0c:	041b      	lsls	r3, r3, #16
   16b0e:	0c1b      	lsrs	r3, r3, #16
   16b10:	0408      	lsls	r0, r1, #16
   16b12:	0019      	movs	r1, r3
   16b14:	0c00      	lsrs	r0, r0, #16
   16b16:	4341      	muls	r1, r0
   16b18:	0015      	movs	r5, r2
   16b1a:	4688      	mov	r8, r1
   16b1c:	0019      	movs	r1, r3
   16b1e:	437d      	muls	r5, r7
   16b20:	4379      	muls	r1, r7
   16b22:	9503      	str	r5, [sp, #12]
   16b24:	4689      	mov	r9, r1
   16b26:	0029      	movs	r1, r5
   16b28:	0015      	movs	r5, r2
   16b2a:	4345      	muls	r5, r0
   16b2c:	444d      	add	r5, r9
   16b2e:	9502      	str	r5, [sp, #8]
   16b30:	4645      	mov	r5, r8
   16b32:	0c2d      	lsrs	r5, r5, #16
   16b34:	46aa      	mov	sl, r5
   16b36:	9d02      	ldr	r5, [sp, #8]
   16b38:	4455      	add	r5, sl
   16b3a:	45a9      	cmp	r9, r5
   16b3c:	d906      	bls.n	16b4c <__aeabi_dmul+0x238>
   16b3e:	468a      	mov	sl, r1
   16b40:	2180      	movs	r1, #128	; 0x80
   16b42:	0249      	lsls	r1, r1, #9
   16b44:	4689      	mov	r9, r1
   16b46:	44ca      	add	sl, r9
   16b48:	4651      	mov	r1, sl
   16b4a:	9103      	str	r1, [sp, #12]
   16b4c:	0c29      	lsrs	r1, r5, #16
   16b4e:	9104      	str	r1, [sp, #16]
   16b50:	4641      	mov	r1, r8
   16b52:	0409      	lsls	r1, r1, #16
   16b54:	042d      	lsls	r5, r5, #16
   16b56:	0c09      	lsrs	r1, r1, #16
   16b58:	4688      	mov	r8, r1
   16b5a:	0029      	movs	r1, r5
   16b5c:	0c25      	lsrs	r5, r4, #16
   16b5e:	0424      	lsls	r4, r4, #16
   16b60:	4441      	add	r1, r8
   16b62:	0c24      	lsrs	r4, r4, #16
   16b64:	9105      	str	r1, [sp, #20]
   16b66:	0021      	movs	r1, r4
   16b68:	4341      	muls	r1, r0
   16b6a:	4688      	mov	r8, r1
   16b6c:	0021      	movs	r1, r4
   16b6e:	4379      	muls	r1, r7
   16b70:	468a      	mov	sl, r1
   16b72:	4368      	muls	r0, r5
   16b74:	4641      	mov	r1, r8
   16b76:	4450      	add	r0, sl
   16b78:	4681      	mov	r9, r0
   16b7a:	0c08      	lsrs	r0, r1, #16
   16b7c:	4448      	add	r0, r9
   16b7e:	436f      	muls	r7, r5
   16b80:	4582      	cmp	sl, r0
   16b82:	d903      	bls.n	16b8c <__aeabi_dmul+0x278>
   16b84:	2180      	movs	r1, #128	; 0x80
   16b86:	0249      	lsls	r1, r1, #9
   16b88:	4689      	mov	r9, r1
   16b8a:	444f      	add	r7, r9
   16b8c:	0c01      	lsrs	r1, r0, #16
   16b8e:	4689      	mov	r9, r1
   16b90:	0039      	movs	r1, r7
   16b92:	4449      	add	r1, r9
   16b94:	9102      	str	r1, [sp, #8]
   16b96:	4641      	mov	r1, r8
   16b98:	040f      	lsls	r7, r1, #16
   16b9a:	9904      	ldr	r1, [sp, #16]
   16b9c:	0c3f      	lsrs	r7, r7, #16
   16b9e:	4688      	mov	r8, r1
   16ba0:	0400      	lsls	r0, r0, #16
   16ba2:	19c0      	adds	r0, r0, r7
   16ba4:	4480      	add	r8, r0
   16ba6:	4641      	mov	r1, r8
   16ba8:	9104      	str	r1, [sp, #16]
   16baa:	4659      	mov	r1, fp
   16bac:	0c0f      	lsrs	r7, r1, #16
   16bae:	0409      	lsls	r1, r1, #16
   16bb0:	0c09      	lsrs	r1, r1, #16
   16bb2:	4688      	mov	r8, r1
   16bb4:	4359      	muls	r1, r3
   16bb6:	468a      	mov	sl, r1
   16bb8:	0039      	movs	r1, r7
   16bba:	4351      	muls	r1, r2
   16bbc:	4689      	mov	r9, r1
   16bbe:	4641      	mov	r1, r8
   16bc0:	434a      	muls	r2, r1
   16bc2:	4651      	mov	r1, sl
   16bc4:	0c09      	lsrs	r1, r1, #16
   16bc6:	468b      	mov	fp, r1
   16bc8:	437b      	muls	r3, r7
   16bca:	18d2      	adds	r2, r2, r3
   16bcc:	445a      	add	r2, fp
   16bce:	4293      	cmp	r3, r2
   16bd0:	d903      	bls.n	16bda <__aeabi_dmul+0x2c6>
   16bd2:	2380      	movs	r3, #128	; 0x80
   16bd4:	025b      	lsls	r3, r3, #9
   16bd6:	469b      	mov	fp, r3
   16bd8:	44d9      	add	r9, fp
   16bda:	4651      	mov	r1, sl
   16bdc:	0409      	lsls	r1, r1, #16
   16bde:	0c09      	lsrs	r1, r1, #16
   16be0:	468a      	mov	sl, r1
   16be2:	4641      	mov	r1, r8
   16be4:	4361      	muls	r1, r4
   16be6:	437c      	muls	r4, r7
   16be8:	0c13      	lsrs	r3, r2, #16
   16bea:	0412      	lsls	r2, r2, #16
   16bec:	444b      	add	r3, r9
   16bee:	4452      	add	r2, sl
   16bf0:	46a1      	mov	r9, r4
   16bf2:	468a      	mov	sl, r1
   16bf4:	003c      	movs	r4, r7
   16bf6:	4641      	mov	r1, r8
   16bf8:	436c      	muls	r4, r5
   16bfa:	434d      	muls	r5, r1
   16bfc:	4651      	mov	r1, sl
   16bfe:	444d      	add	r5, r9
   16c00:	0c0f      	lsrs	r7, r1, #16
   16c02:	197d      	adds	r5, r7, r5
   16c04:	45a9      	cmp	r9, r5
   16c06:	d903      	bls.n	16c10 <__aeabi_dmul+0x2fc>
   16c08:	2180      	movs	r1, #128	; 0x80
   16c0a:	0249      	lsls	r1, r1, #9
   16c0c:	4688      	mov	r8, r1
   16c0e:	4444      	add	r4, r8
   16c10:	9f04      	ldr	r7, [sp, #16]
   16c12:	9903      	ldr	r1, [sp, #12]
   16c14:	46b8      	mov	r8, r7
   16c16:	4441      	add	r1, r8
   16c18:	468b      	mov	fp, r1
   16c1a:	4583      	cmp	fp, r0
   16c1c:	4180      	sbcs	r0, r0
   16c1e:	4241      	negs	r1, r0
   16c20:	4688      	mov	r8, r1
   16c22:	4651      	mov	r1, sl
   16c24:	0408      	lsls	r0, r1, #16
   16c26:	042f      	lsls	r7, r5, #16
   16c28:	0c00      	lsrs	r0, r0, #16
   16c2a:	183f      	adds	r7, r7, r0
   16c2c:	4658      	mov	r0, fp
   16c2e:	9902      	ldr	r1, [sp, #8]
   16c30:	1810      	adds	r0, r2, r0
   16c32:	4689      	mov	r9, r1
   16c34:	4290      	cmp	r0, r2
   16c36:	4192      	sbcs	r2, r2
   16c38:	444f      	add	r7, r9
   16c3a:	46ba      	mov	sl, r7
   16c3c:	4252      	negs	r2, r2
   16c3e:	4699      	mov	r9, r3
   16c40:	4693      	mov	fp, r2
   16c42:	44c2      	add	sl, r8
   16c44:	44d1      	add	r9, sl
   16c46:	44cb      	add	fp, r9
   16c48:	428f      	cmp	r7, r1
   16c4a:	41bf      	sbcs	r7, r7
   16c4c:	45c2      	cmp	sl, r8
   16c4e:	4189      	sbcs	r1, r1
   16c50:	4599      	cmp	r9, r3
   16c52:	419b      	sbcs	r3, r3
   16c54:	4593      	cmp	fp, r2
   16c56:	4192      	sbcs	r2, r2
   16c58:	427f      	negs	r7, r7
   16c5a:	4249      	negs	r1, r1
   16c5c:	0c2d      	lsrs	r5, r5, #16
   16c5e:	4252      	negs	r2, r2
   16c60:	430f      	orrs	r7, r1
   16c62:	425b      	negs	r3, r3
   16c64:	4313      	orrs	r3, r2
   16c66:	197f      	adds	r7, r7, r5
   16c68:	18ff      	adds	r7, r7, r3
   16c6a:	465b      	mov	r3, fp
   16c6c:	193c      	adds	r4, r7, r4
   16c6e:	0ddb      	lsrs	r3, r3, #23
   16c70:	9a05      	ldr	r2, [sp, #20]
   16c72:	0264      	lsls	r4, r4, #9
   16c74:	431c      	orrs	r4, r3
   16c76:	0243      	lsls	r3, r0, #9
   16c78:	4313      	orrs	r3, r2
   16c7a:	1e5d      	subs	r5, r3, #1
   16c7c:	41ab      	sbcs	r3, r5
   16c7e:	465a      	mov	r2, fp
   16c80:	0dc0      	lsrs	r0, r0, #23
   16c82:	4303      	orrs	r3, r0
   16c84:	0252      	lsls	r2, r2, #9
   16c86:	4313      	orrs	r3, r2
   16c88:	01e2      	lsls	r2, r4, #7
   16c8a:	d556      	bpl.n	16d3a <__aeabi_dmul+0x426>
   16c8c:	2001      	movs	r0, #1
   16c8e:	085a      	lsrs	r2, r3, #1
   16c90:	4003      	ands	r3, r0
   16c92:	4313      	orrs	r3, r2
   16c94:	07e2      	lsls	r2, r4, #31
   16c96:	4313      	orrs	r3, r2
   16c98:	0864      	lsrs	r4, r4, #1
   16c9a:	485a      	ldr	r0, [pc, #360]	; (16e04 <__aeabi_dmul+0x4f0>)
   16c9c:	4460      	add	r0, ip
   16c9e:	2800      	cmp	r0, #0
   16ca0:	dd4d      	ble.n	16d3e <__aeabi_dmul+0x42a>
   16ca2:	075a      	lsls	r2, r3, #29
   16ca4:	d009      	beq.n	16cba <__aeabi_dmul+0x3a6>
   16ca6:	220f      	movs	r2, #15
   16ca8:	401a      	ands	r2, r3
   16caa:	2a04      	cmp	r2, #4
   16cac:	d005      	beq.n	16cba <__aeabi_dmul+0x3a6>
   16cae:	1d1a      	adds	r2, r3, #4
   16cb0:	429a      	cmp	r2, r3
   16cb2:	419b      	sbcs	r3, r3
   16cb4:	425b      	negs	r3, r3
   16cb6:	18e4      	adds	r4, r4, r3
   16cb8:	0013      	movs	r3, r2
   16cba:	01e2      	lsls	r2, r4, #7
   16cbc:	d504      	bpl.n	16cc8 <__aeabi_dmul+0x3b4>
   16cbe:	2080      	movs	r0, #128	; 0x80
   16cc0:	4a51      	ldr	r2, [pc, #324]	; (16e08 <__aeabi_dmul+0x4f4>)
   16cc2:	00c0      	lsls	r0, r0, #3
   16cc4:	4014      	ands	r4, r2
   16cc6:	4460      	add	r0, ip
   16cc8:	4a50      	ldr	r2, [pc, #320]	; (16e0c <__aeabi_dmul+0x4f8>)
   16cca:	4290      	cmp	r0, r2
   16ccc:	dd00      	ble.n	16cd0 <__aeabi_dmul+0x3bc>
   16cce:	e6e3      	b.n	16a98 <__aeabi_dmul+0x184>
   16cd0:	2501      	movs	r5, #1
   16cd2:	08db      	lsrs	r3, r3, #3
   16cd4:	0762      	lsls	r2, r4, #29
   16cd6:	431a      	orrs	r2, r3
   16cd8:	0264      	lsls	r4, r4, #9
   16cda:	9b01      	ldr	r3, [sp, #4]
   16cdc:	4691      	mov	r9, r2
   16cde:	0b22      	lsrs	r2, r4, #12
   16ce0:	0544      	lsls	r4, r0, #21
   16ce2:	0d64      	lsrs	r4, r4, #21
   16ce4:	401d      	ands	r5, r3
   16ce6:	e67c      	b.n	169e2 <__aeabi_dmul+0xce>
   16ce8:	2280      	movs	r2, #128	; 0x80
   16cea:	4659      	mov	r1, fp
   16cec:	0312      	lsls	r2, r2, #12
   16cee:	4211      	tst	r1, r2
   16cf0:	d008      	beq.n	16d04 <__aeabi_dmul+0x3f0>
   16cf2:	4214      	tst	r4, r2
   16cf4:	d106      	bne.n	16d04 <__aeabi_dmul+0x3f0>
   16cf6:	4322      	orrs	r2, r4
   16cf8:	0312      	lsls	r2, r2, #12
   16cfa:	0b12      	lsrs	r2, r2, #12
   16cfc:	4645      	mov	r5, r8
   16cfe:	4699      	mov	r9, r3
   16d00:	4c43      	ldr	r4, [pc, #268]	; (16e10 <__aeabi_dmul+0x4fc>)
   16d02:	e66e      	b.n	169e2 <__aeabi_dmul+0xce>
   16d04:	465b      	mov	r3, fp
   16d06:	431a      	orrs	r2, r3
   16d08:	0312      	lsls	r2, r2, #12
   16d0a:	0b12      	lsrs	r2, r2, #12
   16d0c:	4c40      	ldr	r4, [pc, #256]	; (16e10 <__aeabi_dmul+0x4fc>)
   16d0e:	e668      	b.n	169e2 <__aeabi_dmul+0xce>
   16d10:	0003      	movs	r3, r0
   16d12:	4654      	mov	r4, sl
   16d14:	3b28      	subs	r3, #40	; 0x28
   16d16:	409c      	lsls	r4, r3
   16d18:	2300      	movs	r3, #0
   16d1a:	e6b9      	b.n	16a90 <__aeabi_dmul+0x17c>
   16d1c:	f000 fd1a 	bl	17754 <__clzsi2>
   16d20:	3020      	adds	r0, #32
   16d22:	e6a6      	b.n	16a72 <__aeabi_dmul+0x15e>
   16d24:	0003      	movs	r3, r0
   16d26:	3b28      	subs	r3, #40	; 0x28
   16d28:	409f      	lsls	r7, r3
   16d2a:	2300      	movs	r3, #0
   16d2c:	46bb      	mov	fp, r7
   16d2e:	4699      	mov	r9, r3
   16d30:	e68a      	b.n	16a48 <__aeabi_dmul+0x134>
   16d32:	f000 fd0f 	bl	17754 <__clzsi2>
   16d36:	3020      	adds	r0, #32
   16d38:	e674      	b.n	16a24 <__aeabi_dmul+0x110>
   16d3a:	46b4      	mov	ip, r6
   16d3c:	e7ad      	b.n	16c9a <__aeabi_dmul+0x386>
   16d3e:	2501      	movs	r5, #1
   16d40:	1a2a      	subs	r2, r5, r0
   16d42:	2a38      	cmp	r2, #56	; 0x38
   16d44:	dd06      	ble.n	16d54 <__aeabi_dmul+0x440>
   16d46:	9b01      	ldr	r3, [sp, #4]
   16d48:	2400      	movs	r4, #0
   16d4a:	401d      	ands	r5, r3
   16d4c:	2300      	movs	r3, #0
   16d4e:	2200      	movs	r2, #0
   16d50:	4699      	mov	r9, r3
   16d52:	e646      	b.n	169e2 <__aeabi_dmul+0xce>
   16d54:	2a1f      	cmp	r2, #31
   16d56:	dc21      	bgt.n	16d9c <__aeabi_dmul+0x488>
   16d58:	2520      	movs	r5, #32
   16d5a:	0020      	movs	r0, r4
   16d5c:	1aad      	subs	r5, r5, r2
   16d5e:	001e      	movs	r6, r3
   16d60:	40ab      	lsls	r3, r5
   16d62:	40a8      	lsls	r0, r5
   16d64:	40d6      	lsrs	r6, r2
   16d66:	1e5d      	subs	r5, r3, #1
   16d68:	41ab      	sbcs	r3, r5
   16d6a:	4330      	orrs	r0, r6
   16d6c:	4318      	orrs	r0, r3
   16d6e:	40d4      	lsrs	r4, r2
   16d70:	0743      	lsls	r3, r0, #29
   16d72:	d009      	beq.n	16d88 <__aeabi_dmul+0x474>
   16d74:	230f      	movs	r3, #15
   16d76:	4003      	ands	r3, r0
   16d78:	2b04      	cmp	r3, #4
   16d7a:	d005      	beq.n	16d88 <__aeabi_dmul+0x474>
   16d7c:	0003      	movs	r3, r0
   16d7e:	1d18      	adds	r0, r3, #4
   16d80:	4298      	cmp	r0, r3
   16d82:	419b      	sbcs	r3, r3
   16d84:	425b      	negs	r3, r3
   16d86:	18e4      	adds	r4, r4, r3
   16d88:	0223      	lsls	r3, r4, #8
   16d8a:	d521      	bpl.n	16dd0 <__aeabi_dmul+0x4bc>
   16d8c:	2501      	movs	r5, #1
   16d8e:	9b01      	ldr	r3, [sp, #4]
   16d90:	2401      	movs	r4, #1
   16d92:	401d      	ands	r5, r3
   16d94:	2300      	movs	r3, #0
   16d96:	2200      	movs	r2, #0
   16d98:	4699      	mov	r9, r3
   16d9a:	e622      	b.n	169e2 <__aeabi_dmul+0xce>
   16d9c:	251f      	movs	r5, #31
   16d9e:	0021      	movs	r1, r4
   16da0:	426d      	negs	r5, r5
   16da2:	1a28      	subs	r0, r5, r0
   16da4:	40c1      	lsrs	r1, r0
   16da6:	0008      	movs	r0, r1
   16da8:	2a20      	cmp	r2, #32
   16daa:	d01d      	beq.n	16de8 <__aeabi_dmul+0x4d4>
   16dac:	355f      	adds	r5, #95	; 0x5f
   16dae:	1aaa      	subs	r2, r5, r2
   16db0:	4094      	lsls	r4, r2
   16db2:	4323      	orrs	r3, r4
   16db4:	1e5c      	subs	r4, r3, #1
   16db6:	41a3      	sbcs	r3, r4
   16db8:	2507      	movs	r5, #7
   16dba:	4303      	orrs	r3, r0
   16dbc:	401d      	ands	r5, r3
   16dbe:	2200      	movs	r2, #0
   16dc0:	2d00      	cmp	r5, #0
   16dc2:	d009      	beq.n	16dd8 <__aeabi_dmul+0x4c4>
   16dc4:	220f      	movs	r2, #15
   16dc6:	2400      	movs	r4, #0
   16dc8:	401a      	ands	r2, r3
   16dca:	0018      	movs	r0, r3
   16dcc:	2a04      	cmp	r2, #4
   16dce:	d1d6      	bne.n	16d7e <__aeabi_dmul+0x46a>
   16dd0:	0003      	movs	r3, r0
   16dd2:	0765      	lsls	r5, r4, #29
   16dd4:	0264      	lsls	r4, r4, #9
   16dd6:	0b22      	lsrs	r2, r4, #12
   16dd8:	08db      	lsrs	r3, r3, #3
   16dda:	432b      	orrs	r3, r5
   16ddc:	2501      	movs	r5, #1
   16dde:	4699      	mov	r9, r3
   16de0:	9b01      	ldr	r3, [sp, #4]
   16de2:	2400      	movs	r4, #0
   16de4:	401d      	ands	r5, r3
   16de6:	e5fc      	b.n	169e2 <__aeabi_dmul+0xce>
   16de8:	2400      	movs	r4, #0
   16dea:	e7e2      	b.n	16db2 <__aeabi_dmul+0x49e>
   16dec:	2280      	movs	r2, #128	; 0x80
   16dee:	2501      	movs	r5, #1
   16df0:	0312      	lsls	r2, r2, #12
   16df2:	4322      	orrs	r2, r4
   16df4:	9901      	ldr	r1, [sp, #4]
   16df6:	0312      	lsls	r2, r2, #12
   16df8:	0b12      	lsrs	r2, r2, #12
   16dfa:	400d      	ands	r5, r1
   16dfc:	4699      	mov	r9, r3
   16dfe:	4c04      	ldr	r4, [pc, #16]	; (16e10 <__aeabi_dmul+0x4fc>)
   16e00:	e5ef      	b.n	169e2 <__aeabi_dmul+0xce>
   16e02:	46c0      	nop			; (mov r8, r8)
   16e04:	000003ff 	.word	0x000003ff
   16e08:	feffffff 	.word	0xfeffffff
   16e0c:	000007fe 	.word	0x000007fe
   16e10:	000007ff 	.word	0x000007ff

00016e14 <__aeabi_dsub>:
   16e14:	b5f0      	push	{r4, r5, r6, r7, lr}
   16e16:	4646      	mov	r6, r8
   16e18:	46d6      	mov	lr, sl
   16e1a:	464f      	mov	r7, r9
   16e1c:	030c      	lsls	r4, r1, #12
   16e1e:	b5c0      	push	{r6, r7, lr}
   16e20:	0fcd      	lsrs	r5, r1, #31
   16e22:	004e      	lsls	r6, r1, #1
   16e24:	0a61      	lsrs	r1, r4, #9
   16e26:	0f44      	lsrs	r4, r0, #29
   16e28:	430c      	orrs	r4, r1
   16e2a:	00c1      	lsls	r1, r0, #3
   16e2c:	0058      	lsls	r0, r3, #1
   16e2e:	0d40      	lsrs	r0, r0, #21
   16e30:	4684      	mov	ip, r0
   16e32:	468a      	mov	sl, r1
   16e34:	000f      	movs	r7, r1
   16e36:	0319      	lsls	r1, r3, #12
   16e38:	0f50      	lsrs	r0, r2, #29
   16e3a:	0a49      	lsrs	r1, r1, #9
   16e3c:	4301      	orrs	r1, r0
   16e3e:	48c6      	ldr	r0, [pc, #792]	; (17158 <__aeabi_dsub+0x344>)
   16e40:	0d76      	lsrs	r6, r6, #21
   16e42:	46a8      	mov	r8, r5
   16e44:	0fdb      	lsrs	r3, r3, #31
   16e46:	00d2      	lsls	r2, r2, #3
   16e48:	4584      	cmp	ip, r0
   16e4a:	d100      	bne.n	16e4e <__aeabi_dsub+0x3a>
   16e4c:	e0d8      	b.n	17000 <__aeabi_dsub+0x1ec>
   16e4e:	2001      	movs	r0, #1
   16e50:	4043      	eors	r3, r0
   16e52:	42ab      	cmp	r3, r5
   16e54:	d100      	bne.n	16e58 <__aeabi_dsub+0x44>
   16e56:	e0a6      	b.n	16fa6 <__aeabi_dsub+0x192>
   16e58:	4660      	mov	r0, ip
   16e5a:	1a35      	subs	r5, r6, r0
   16e5c:	2d00      	cmp	r5, #0
   16e5e:	dc00      	bgt.n	16e62 <__aeabi_dsub+0x4e>
   16e60:	e105      	b.n	1706e <__aeabi_dsub+0x25a>
   16e62:	2800      	cmp	r0, #0
   16e64:	d110      	bne.n	16e88 <__aeabi_dsub+0x74>
   16e66:	000b      	movs	r3, r1
   16e68:	4313      	orrs	r3, r2
   16e6a:	d100      	bne.n	16e6e <__aeabi_dsub+0x5a>
   16e6c:	e0d7      	b.n	1701e <__aeabi_dsub+0x20a>
   16e6e:	1e6b      	subs	r3, r5, #1
   16e70:	2b00      	cmp	r3, #0
   16e72:	d000      	beq.n	16e76 <__aeabi_dsub+0x62>
   16e74:	e14b      	b.n	1710e <__aeabi_dsub+0x2fa>
   16e76:	4653      	mov	r3, sl
   16e78:	1a9f      	subs	r7, r3, r2
   16e7a:	45ba      	cmp	sl, r7
   16e7c:	4180      	sbcs	r0, r0
   16e7e:	1a64      	subs	r4, r4, r1
   16e80:	4240      	negs	r0, r0
   16e82:	1a24      	subs	r4, r4, r0
   16e84:	2601      	movs	r6, #1
   16e86:	e01e      	b.n	16ec6 <__aeabi_dsub+0xb2>
   16e88:	4bb3      	ldr	r3, [pc, #716]	; (17158 <__aeabi_dsub+0x344>)
   16e8a:	429e      	cmp	r6, r3
   16e8c:	d048      	beq.n	16f20 <__aeabi_dsub+0x10c>
   16e8e:	2380      	movs	r3, #128	; 0x80
   16e90:	041b      	lsls	r3, r3, #16
   16e92:	4319      	orrs	r1, r3
   16e94:	2d38      	cmp	r5, #56	; 0x38
   16e96:	dd00      	ble.n	16e9a <__aeabi_dsub+0x86>
   16e98:	e119      	b.n	170ce <__aeabi_dsub+0x2ba>
   16e9a:	2d1f      	cmp	r5, #31
   16e9c:	dd00      	ble.n	16ea0 <__aeabi_dsub+0x8c>
   16e9e:	e14c      	b.n	1713a <__aeabi_dsub+0x326>
   16ea0:	2320      	movs	r3, #32
   16ea2:	000f      	movs	r7, r1
   16ea4:	1b5b      	subs	r3, r3, r5
   16ea6:	0010      	movs	r0, r2
   16ea8:	409a      	lsls	r2, r3
   16eaa:	409f      	lsls	r7, r3
   16eac:	40e8      	lsrs	r0, r5
   16eae:	1e53      	subs	r3, r2, #1
   16eb0:	419a      	sbcs	r2, r3
   16eb2:	40e9      	lsrs	r1, r5
   16eb4:	4307      	orrs	r7, r0
   16eb6:	4317      	orrs	r7, r2
   16eb8:	4653      	mov	r3, sl
   16eba:	1bdf      	subs	r7, r3, r7
   16ebc:	1a61      	subs	r1, r4, r1
   16ebe:	45ba      	cmp	sl, r7
   16ec0:	41a4      	sbcs	r4, r4
   16ec2:	4264      	negs	r4, r4
   16ec4:	1b0c      	subs	r4, r1, r4
   16ec6:	0223      	lsls	r3, r4, #8
   16ec8:	d400      	bmi.n	16ecc <__aeabi_dsub+0xb8>
   16eca:	e0c5      	b.n	17058 <__aeabi_dsub+0x244>
   16ecc:	0264      	lsls	r4, r4, #9
   16ece:	0a65      	lsrs	r5, r4, #9
   16ed0:	2d00      	cmp	r5, #0
   16ed2:	d100      	bne.n	16ed6 <__aeabi_dsub+0xc2>
   16ed4:	e0f6      	b.n	170c4 <__aeabi_dsub+0x2b0>
   16ed6:	0028      	movs	r0, r5
   16ed8:	f000 fc3c 	bl	17754 <__clzsi2>
   16edc:	0003      	movs	r3, r0
   16ede:	3b08      	subs	r3, #8
   16ee0:	2b1f      	cmp	r3, #31
   16ee2:	dd00      	ble.n	16ee6 <__aeabi_dsub+0xd2>
   16ee4:	e0e9      	b.n	170ba <__aeabi_dsub+0x2a6>
   16ee6:	2220      	movs	r2, #32
   16ee8:	003c      	movs	r4, r7
   16eea:	1ad2      	subs	r2, r2, r3
   16eec:	409d      	lsls	r5, r3
   16eee:	40d4      	lsrs	r4, r2
   16ef0:	409f      	lsls	r7, r3
   16ef2:	4325      	orrs	r5, r4
   16ef4:	429e      	cmp	r6, r3
   16ef6:	dd00      	ble.n	16efa <__aeabi_dsub+0xe6>
   16ef8:	e0db      	b.n	170b2 <__aeabi_dsub+0x29e>
   16efa:	1b9e      	subs	r6, r3, r6
   16efc:	1c73      	adds	r3, r6, #1
   16efe:	2b1f      	cmp	r3, #31
   16f00:	dd00      	ble.n	16f04 <__aeabi_dsub+0xf0>
   16f02:	e10a      	b.n	1711a <__aeabi_dsub+0x306>
   16f04:	2220      	movs	r2, #32
   16f06:	0038      	movs	r0, r7
   16f08:	1ad2      	subs	r2, r2, r3
   16f0a:	0029      	movs	r1, r5
   16f0c:	4097      	lsls	r7, r2
   16f0e:	002c      	movs	r4, r5
   16f10:	4091      	lsls	r1, r2
   16f12:	40d8      	lsrs	r0, r3
   16f14:	1e7a      	subs	r2, r7, #1
   16f16:	4197      	sbcs	r7, r2
   16f18:	40dc      	lsrs	r4, r3
   16f1a:	2600      	movs	r6, #0
   16f1c:	4301      	orrs	r1, r0
   16f1e:	430f      	orrs	r7, r1
   16f20:	077b      	lsls	r3, r7, #29
   16f22:	d009      	beq.n	16f38 <__aeabi_dsub+0x124>
   16f24:	230f      	movs	r3, #15
   16f26:	403b      	ands	r3, r7
   16f28:	2b04      	cmp	r3, #4
   16f2a:	d005      	beq.n	16f38 <__aeabi_dsub+0x124>
   16f2c:	1d3b      	adds	r3, r7, #4
   16f2e:	42bb      	cmp	r3, r7
   16f30:	41bf      	sbcs	r7, r7
   16f32:	427f      	negs	r7, r7
   16f34:	19e4      	adds	r4, r4, r7
   16f36:	001f      	movs	r7, r3
   16f38:	0223      	lsls	r3, r4, #8
   16f3a:	d525      	bpl.n	16f88 <__aeabi_dsub+0x174>
   16f3c:	4b86      	ldr	r3, [pc, #536]	; (17158 <__aeabi_dsub+0x344>)
   16f3e:	3601      	adds	r6, #1
   16f40:	429e      	cmp	r6, r3
   16f42:	d100      	bne.n	16f46 <__aeabi_dsub+0x132>
   16f44:	e0af      	b.n	170a6 <__aeabi_dsub+0x292>
   16f46:	4b85      	ldr	r3, [pc, #532]	; (1715c <__aeabi_dsub+0x348>)
   16f48:	2501      	movs	r5, #1
   16f4a:	401c      	ands	r4, r3
   16f4c:	4643      	mov	r3, r8
   16f4e:	0762      	lsls	r2, r4, #29
   16f50:	08ff      	lsrs	r7, r7, #3
   16f52:	0264      	lsls	r4, r4, #9
   16f54:	0576      	lsls	r6, r6, #21
   16f56:	4317      	orrs	r7, r2
   16f58:	0b24      	lsrs	r4, r4, #12
   16f5a:	0d76      	lsrs	r6, r6, #21
   16f5c:	401d      	ands	r5, r3
   16f5e:	2100      	movs	r1, #0
   16f60:	0324      	lsls	r4, r4, #12
   16f62:	0b23      	lsrs	r3, r4, #12
   16f64:	0d0c      	lsrs	r4, r1, #20
   16f66:	4a7e      	ldr	r2, [pc, #504]	; (17160 <__aeabi_dsub+0x34c>)
   16f68:	0524      	lsls	r4, r4, #20
   16f6a:	431c      	orrs	r4, r3
   16f6c:	4014      	ands	r4, r2
   16f6e:	0533      	lsls	r3, r6, #20
   16f70:	4323      	orrs	r3, r4
   16f72:	005b      	lsls	r3, r3, #1
   16f74:	07ed      	lsls	r5, r5, #31
   16f76:	085b      	lsrs	r3, r3, #1
   16f78:	432b      	orrs	r3, r5
   16f7a:	0038      	movs	r0, r7
   16f7c:	0019      	movs	r1, r3
   16f7e:	bc1c      	pop	{r2, r3, r4}
   16f80:	4690      	mov	r8, r2
   16f82:	4699      	mov	r9, r3
   16f84:	46a2      	mov	sl, r4
   16f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16f88:	2501      	movs	r5, #1
   16f8a:	4643      	mov	r3, r8
   16f8c:	0762      	lsls	r2, r4, #29
   16f8e:	08ff      	lsrs	r7, r7, #3
   16f90:	4317      	orrs	r7, r2
   16f92:	08e4      	lsrs	r4, r4, #3
   16f94:	401d      	ands	r5, r3
   16f96:	4b70      	ldr	r3, [pc, #448]	; (17158 <__aeabi_dsub+0x344>)
   16f98:	429e      	cmp	r6, r3
   16f9a:	d036      	beq.n	1700a <__aeabi_dsub+0x1f6>
   16f9c:	0324      	lsls	r4, r4, #12
   16f9e:	0576      	lsls	r6, r6, #21
   16fa0:	0b24      	lsrs	r4, r4, #12
   16fa2:	0d76      	lsrs	r6, r6, #21
   16fa4:	e7db      	b.n	16f5e <__aeabi_dsub+0x14a>
   16fa6:	4663      	mov	r3, ip
   16fa8:	1af3      	subs	r3, r6, r3
   16faa:	2b00      	cmp	r3, #0
   16fac:	dc00      	bgt.n	16fb0 <__aeabi_dsub+0x19c>
   16fae:	e094      	b.n	170da <__aeabi_dsub+0x2c6>
   16fb0:	4660      	mov	r0, ip
   16fb2:	2800      	cmp	r0, #0
   16fb4:	d035      	beq.n	17022 <__aeabi_dsub+0x20e>
   16fb6:	4868      	ldr	r0, [pc, #416]	; (17158 <__aeabi_dsub+0x344>)
   16fb8:	4286      	cmp	r6, r0
   16fba:	d0b1      	beq.n	16f20 <__aeabi_dsub+0x10c>
   16fbc:	2780      	movs	r7, #128	; 0x80
   16fbe:	043f      	lsls	r7, r7, #16
   16fc0:	4339      	orrs	r1, r7
   16fc2:	2b38      	cmp	r3, #56	; 0x38
   16fc4:	dc00      	bgt.n	16fc8 <__aeabi_dsub+0x1b4>
   16fc6:	e0fd      	b.n	171c4 <__aeabi_dsub+0x3b0>
   16fc8:	430a      	orrs	r2, r1
   16fca:	0017      	movs	r7, r2
   16fcc:	2100      	movs	r1, #0
   16fce:	1e7a      	subs	r2, r7, #1
   16fd0:	4197      	sbcs	r7, r2
   16fd2:	4457      	add	r7, sl
   16fd4:	4557      	cmp	r7, sl
   16fd6:	4180      	sbcs	r0, r0
   16fd8:	1909      	adds	r1, r1, r4
   16fda:	4244      	negs	r4, r0
   16fdc:	190c      	adds	r4, r1, r4
   16fde:	0223      	lsls	r3, r4, #8
   16fe0:	d53a      	bpl.n	17058 <__aeabi_dsub+0x244>
   16fe2:	4b5d      	ldr	r3, [pc, #372]	; (17158 <__aeabi_dsub+0x344>)
   16fe4:	3601      	adds	r6, #1
   16fe6:	429e      	cmp	r6, r3
   16fe8:	d100      	bne.n	16fec <__aeabi_dsub+0x1d8>
   16fea:	e14b      	b.n	17284 <__aeabi_dsub+0x470>
   16fec:	2201      	movs	r2, #1
   16fee:	4b5b      	ldr	r3, [pc, #364]	; (1715c <__aeabi_dsub+0x348>)
   16ff0:	401c      	ands	r4, r3
   16ff2:	087b      	lsrs	r3, r7, #1
   16ff4:	4017      	ands	r7, r2
   16ff6:	431f      	orrs	r7, r3
   16ff8:	07e2      	lsls	r2, r4, #31
   16ffa:	4317      	orrs	r7, r2
   16ffc:	0864      	lsrs	r4, r4, #1
   16ffe:	e78f      	b.n	16f20 <__aeabi_dsub+0x10c>
   17000:	0008      	movs	r0, r1
   17002:	4310      	orrs	r0, r2
   17004:	d000      	beq.n	17008 <__aeabi_dsub+0x1f4>
   17006:	e724      	b.n	16e52 <__aeabi_dsub+0x3e>
   17008:	e721      	b.n	16e4e <__aeabi_dsub+0x3a>
   1700a:	0023      	movs	r3, r4
   1700c:	433b      	orrs	r3, r7
   1700e:	d100      	bne.n	17012 <__aeabi_dsub+0x1fe>
   17010:	e1b9      	b.n	17386 <__aeabi_dsub+0x572>
   17012:	2280      	movs	r2, #128	; 0x80
   17014:	0312      	lsls	r2, r2, #12
   17016:	4314      	orrs	r4, r2
   17018:	0324      	lsls	r4, r4, #12
   1701a:	0b24      	lsrs	r4, r4, #12
   1701c:	e79f      	b.n	16f5e <__aeabi_dsub+0x14a>
   1701e:	002e      	movs	r6, r5
   17020:	e77e      	b.n	16f20 <__aeabi_dsub+0x10c>
   17022:	0008      	movs	r0, r1
   17024:	4310      	orrs	r0, r2
   17026:	d100      	bne.n	1702a <__aeabi_dsub+0x216>
   17028:	e0ca      	b.n	171c0 <__aeabi_dsub+0x3ac>
   1702a:	1e58      	subs	r0, r3, #1
   1702c:	4684      	mov	ip, r0
   1702e:	2800      	cmp	r0, #0
   17030:	d000      	beq.n	17034 <__aeabi_dsub+0x220>
   17032:	e0e7      	b.n	17204 <__aeabi_dsub+0x3f0>
   17034:	4452      	add	r2, sl
   17036:	4552      	cmp	r2, sl
   17038:	4180      	sbcs	r0, r0
   1703a:	1864      	adds	r4, r4, r1
   1703c:	4240      	negs	r0, r0
   1703e:	1824      	adds	r4, r4, r0
   17040:	0017      	movs	r7, r2
   17042:	2601      	movs	r6, #1
   17044:	0223      	lsls	r3, r4, #8
   17046:	d507      	bpl.n	17058 <__aeabi_dsub+0x244>
   17048:	2602      	movs	r6, #2
   1704a:	e7cf      	b.n	16fec <__aeabi_dsub+0x1d8>
   1704c:	4664      	mov	r4, ip
   1704e:	432c      	orrs	r4, r5
   17050:	d100      	bne.n	17054 <__aeabi_dsub+0x240>
   17052:	e1b3      	b.n	173bc <__aeabi_dsub+0x5a8>
   17054:	002c      	movs	r4, r5
   17056:	4667      	mov	r7, ip
   17058:	077b      	lsls	r3, r7, #29
   1705a:	d000      	beq.n	1705e <__aeabi_dsub+0x24a>
   1705c:	e762      	b.n	16f24 <__aeabi_dsub+0x110>
   1705e:	0763      	lsls	r3, r4, #29
   17060:	08ff      	lsrs	r7, r7, #3
   17062:	431f      	orrs	r7, r3
   17064:	2501      	movs	r5, #1
   17066:	4643      	mov	r3, r8
   17068:	08e4      	lsrs	r4, r4, #3
   1706a:	401d      	ands	r5, r3
   1706c:	e793      	b.n	16f96 <__aeabi_dsub+0x182>
   1706e:	2d00      	cmp	r5, #0
   17070:	d178      	bne.n	17164 <__aeabi_dsub+0x350>
   17072:	1c75      	adds	r5, r6, #1
   17074:	056d      	lsls	r5, r5, #21
   17076:	0d6d      	lsrs	r5, r5, #21
   17078:	2d01      	cmp	r5, #1
   1707a:	dc00      	bgt.n	1707e <__aeabi_dsub+0x26a>
   1707c:	e0f2      	b.n	17264 <__aeabi_dsub+0x450>
   1707e:	4650      	mov	r0, sl
   17080:	1a80      	subs	r0, r0, r2
   17082:	4582      	cmp	sl, r0
   17084:	41bf      	sbcs	r7, r7
   17086:	1a65      	subs	r5, r4, r1
   17088:	427f      	negs	r7, r7
   1708a:	1bed      	subs	r5, r5, r7
   1708c:	4684      	mov	ip, r0
   1708e:	0228      	lsls	r0, r5, #8
   17090:	d400      	bmi.n	17094 <__aeabi_dsub+0x280>
   17092:	e08c      	b.n	171ae <__aeabi_dsub+0x39a>
   17094:	4650      	mov	r0, sl
   17096:	1a17      	subs	r7, r2, r0
   17098:	42ba      	cmp	r2, r7
   1709a:	4192      	sbcs	r2, r2
   1709c:	1b0c      	subs	r4, r1, r4
   1709e:	4255      	negs	r5, r2
   170a0:	1b65      	subs	r5, r4, r5
   170a2:	4698      	mov	r8, r3
   170a4:	e714      	b.n	16ed0 <__aeabi_dsub+0xbc>
   170a6:	2501      	movs	r5, #1
   170a8:	4643      	mov	r3, r8
   170aa:	2400      	movs	r4, #0
   170ac:	401d      	ands	r5, r3
   170ae:	2700      	movs	r7, #0
   170b0:	e755      	b.n	16f5e <__aeabi_dsub+0x14a>
   170b2:	4c2a      	ldr	r4, [pc, #168]	; (1715c <__aeabi_dsub+0x348>)
   170b4:	1af6      	subs	r6, r6, r3
   170b6:	402c      	ands	r4, r5
   170b8:	e732      	b.n	16f20 <__aeabi_dsub+0x10c>
   170ba:	003d      	movs	r5, r7
   170bc:	3828      	subs	r0, #40	; 0x28
   170be:	4085      	lsls	r5, r0
   170c0:	2700      	movs	r7, #0
   170c2:	e717      	b.n	16ef4 <__aeabi_dsub+0xe0>
   170c4:	0038      	movs	r0, r7
   170c6:	f000 fb45 	bl	17754 <__clzsi2>
   170ca:	3020      	adds	r0, #32
   170cc:	e706      	b.n	16edc <__aeabi_dsub+0xc8>
   170ce:	430a      	orrs	r2, r1
   170d0:	0017      	movs	r7, r2
   170d2:	2100      	movs	r1, #0
   170d4:	1e7a      	subs	r2, r7, #1
   170d6:	4197      	sbcs	r7, r2
   170d8:	e6ee      	b.n	16eb8 <__aeabi_dsub+0xa4>
   170da:	2b00      	cmp	r3, #0
   170dc:	d000      	beq.n	170e0 <__aeabi_dsub+0x2cc>
   170de:	e0e5      	b.n	172ac <__aeabi_dsub+0x498>
   170e0:	1c73      	adds	r3, r6, #1
   170e2:	469c      	mov	ip, r3
   170e4:	055b      	lsls	r3, r3, #21
   170e6:	0d5b      	lsrs	r3, r3, #21
   170e8:	2b01      	cmp	r3, #1
   170ea:	dc00      	bgt.n	170ee <__aeabi_dsub+0x2da>
   170ec:	e09f      	b.n	1722e <__aeabi_dsub+0x41a>
   170ee:	4b1a      	ldr	r3, [pc, #104]	; (17158 <__aeabi_dsub+0x344>)
   170f0:	459c      	cmp	ip, r3
   170f2:	d100      	bne.n	170f6 <__aeabi_dsub+0x2e2>
   170f4:	e0c5      	b.n	17282 <__aeabi_dsub+0x46e>
   170f6:	4452      	add	r2, sl
   170f8:	4552      	cmp	r2, sl
   170fa:	4180      	sbcs	r0, r0
   170fc:	1864      	adds	r4, r4, r1
   170fe:	4240      	negs	r0, r0
   17100:	1824      	adds	r4, r4, r0
   17102:	07e7      	lsls	r7, r4, #31
   17104:	0852      	lsrs	r2, r2, #1
   17106:	4317      	orrs	r7, r2
   17108:	0864      	lsrs	r4, r4, #1
   1710a:	4666      	mov	r6, ip
   1710c:	e708      	b.n	16f20 <__aeabi_dsub+0x10c>
   1710e:	4812      	ldr	r0, [pc, #72]	; (17158 <__aeabi_dsub+0x344>)
   17110:	4285      	cmp	r5, r0
   17112:	d100      	bne.n	17116 <__aeabi_dsub+0x302>
   17114:	e085      	b.n	17222 <__aeabi_dsub+0x40e>
   17116:	001d      	movs	r5, r3
   17118:	e6bc      	b.n	16e94 <__aeabi_dsub+0x80>
   1711a:	0029      	movs	r1, r5
   1711c:	3e1f      	subs	r6, #31
   1711e:	40f1      	lsrs	r1, r6
   17120:	2b20      	cmp	r3, #32
   17122:	d100      	bne.n	17126 <__aeabi_dsub+0x312>
   17124:	e07f      	b.n	17226 <__aeabi_dsub+0x412>
   17126:	2240      	movs	r2, #64	; 0x40
   17128:	1ad3      	subs	r3, r2, r3
   1712a:	409d      	lsls	r5, r3
   1712c:	432f      	orrs	r7, r5
   1712e:	1e7d      	subs	r5, r7, #1
   17130:	41af      	sbcs	r7, r5
   17132:	2400      	movs	r4, #0
   17134:	430f      	orrs	r7, r1
   17136:	2600      	movs	r6, #0
   17138:	e78e      	b.n	17058 <__aeabi_dsub+0x244>
   1713a:	002b      	movs	r3, r5
   1713c:	000f      	movs	r7, r1
   1713e:	3b20      	subs	r3, #32
   17140:	40df      	lsrs	r7, r3
   17142:	2d20      	cmp	r5, #32
   17144:	d071      	beq.n	1722a <__aeabi_dsub+0x416>
   17146:	2340      	movs	r3, #64	; 0x40
   17148:	1b5d      	subs	r5, r3, r5
   1714a:	40a9      	lsls	r1, r5
   1714c:	430a      	orrs	r2, r1
   1714e:	1e51      	subs	r1, r2, #1
   17150:	418a      	sbcs	r2, r1
   17152:	2100      	movs	r1, #0
   17154:	4317      	orrs	r7, r2
   17156:	e6af      	b.n	16eb8 <__aeabi_dsub+0xa4>
   17158:	000007ff 	.word	0x000007ff
   1715c:	ff7fffff 	.word	0xff7fffff
   17160:	800fffff 	.word	0x800fffff
   17164:	2e00      	cmp	r6, #0
   17166:	d03e      	beq.n	171e6 <__aeabi_dsub+0x3d2>
   17168:	4eb3      	ldr	r6, [pc, #716]	; (17438 <__aeabi_dsub+0x624>)
   1716a:	45b4      	cmp	ip, r6
   1716c:	d045      	beq.n	171fa <__aeabi_dsub+0x3e6>
   1716e:	2680      	movs	r6, #128	; 0x80
   17170:	0436      	lsls	r6, r6, #16
   17172:	426d      	negs	r5, r5
   17174:	4334      	orrs	r4, r6
   17176:	2d38      	cmp	r5, #56	; 0x38
   17178:	dd00      	ble.n	1717c <__aeabi_dsub+0x368>
   1717a:	e0a8      	b.n	172ce <__aeabi_dsub+0x4ba>
   1717c:	2d1f      	cmp	r5, #31
   1717e:	dd00      	ble.n	17182 <__aeabi_dsub+0x36e>
   17180:	e11f      	b.n	173c2 <__aeabi_dsub+0x5ae>
   17182:	2620      	movs	r6, #32
   17184:	0027      	movs	r7, r4
   17186:	4650      	mov	r0, sl
   17188:	1b76      	subs	r6, r6, r5
   1718a:	40b7      	lsls	r7, r6
   1718c:	40e8      	lsrs	r0, r5
   1718e:	4307      	orrs	r7, r0
   17190:	4650      	mov	r0, sl
   17192:	40b0      	lsls	r0, r6
   17194:	1e46      	subs	r6, r0, #1
   17196:	41b0      	sbcs	r0, r6
   17198:	40ec      	lsrs	r4, r5
   1719a:	4338      	orrs	r0, r7
   1719c:	1a17      	subs	r7, r2, r0
   1719e:	42ba      	cmp	r2, r7
   171a0:	4192      	sbcs	r2, r2
   171a2:	1b0c      	subs	r4, r1, r4
   171a4:	4252      	negs	r2, r2
   171a6:	1aa4      	subs	r4, r4, r2
   171a8:	4666      	mov	r6, ip
   171aa:	4698      	mov	r8, r3
   171ac:	e68b      	b.n	16ec6 <__aeabi_dsub+0xb2>
   171ae:	4664      	mov	r4, ip
   171b0:	4667      	mov	r7, ip
   171b2:	432c      	orrs	r4, r5
   171b4:	d000      	beq.n	171b8 <__aeabi_dsub+0x3a4>
   171b6:	e68b      	b.n	16ed0 <__aeabi_dsub+0xbc>
   171b8:	2500      	movs	r5, #0
   171ba:	2600      	movs	r6, #0
   171bc:	2700      	movs	r7, #0
   171be:	e6ea      	b.n	16f96 <__aeabi_dsub+0x182>
   171c0:	001e      	movs	r6, r3
   171c2:	e6ad      	b.n	16f20 <__aeabi_dsub+0x10c>
   171c4:	2b1f      	cmp	r3, #31
   171c6:	dc60      	bgt.n	1728a <__aeabi_dsub+0x476>
   171c8:	2720      	movs	r7, #32
   171ca:	1af8      	subs	r0, r7, r3
   171cc:	000f      	movs	r7, r1
   171ce:	4684      	mov	ip, r0
   171d0:	4087      	lsls	r7, r0
   171d2:	0010      	movs	r0, r2
   171d4:	40d8      	lsrs	r0, r3
   171d6:	4307      	orrs	r7, r0
   171d8:	4660      	mov	r0, ip
   171da:	4082      	lsls	r2, r0
   171dc:	1e50      	subs	r0, r2, #1
   171de:	4182      	sbcs	r2, r0
   171e0:	40d9      	lsrs	r1, r3
   171e2:	4317      	orrs	r7, r2
   171e4:	e6f5      	b.n	16fd2 <__aeabi_dsub+0x1be>
   171e6:	0026      	movs	r6, r4
   171e8:	4650      	mov	r0, sl
   171ea:	4306      	orrs	r6, r0
   171ec:	d005      	beq.n	171fa <__aeabi_dsub+0x3e6>
   171ee:	43ed      	mvns	r5, r5
   171f0:	2d00      	cmp	r5, #0
   171f2:	d0d3      	beq.n	1719c <__aeabi_dsub+0x388>
   171f4:	4e90      	ldr	r6, [pc, #576]	; (17438 <__aeabi_dsub+0x624>)
   171f6:	45b4      	cmp	ip, r6
   171f8:	d1bd      	bne.n	17176 <__aeabi_dsub+0x362>
   171fa:	000c      	movs	r4, r1
   171fc:	0017      	movs	r7, r2
   171fe:	4666      	mov	r6, ip
   17200:	4698      	mov	r8, r3
   17202:	e68d      	b.n	16f20 <__aeabi_dsub+0x10c>
   17204:	488c      	ldr	r0, [pc, #560]	; (17438 <__aeabi_dsub+0x624>)
   17206:	4283      	cmp	r3, r0
   17208:	d00b      	beq.n	17222 <__aeabi_dsub+0x40e>
   1720a:	4663      	mov	r3, ip
   1720c:	e6d9      	b.n	16fc2 <__aeabi_dsub+0x1ae>
   1720e:	2d00      	cmp	r5, #0
   17210:	d000      	beq.n	17214 <__aeabi_dsub+0x400>
   17212:	e096      	b.n	17342 <__aeabi_dsub+0x52e>
   17214:	0008      	movs	r0, r1
   17216:	4310      	orrs	r0, r2
   17218:	d100      	bne.n	1721c <__aeabi_dsub+0x408>
   1721a:	e0e2      	b.n	173e2 <__aeabi_dsub+0x5ce>
   1721c:	000c      	movs	r4, r1
   1721e:	0017      	movs	r7, r2
   17220:	4698      	mov	r8, r3
   17222:	4e85      	ldr	r6, [pc, #532]	; (17438 <__aeabi_dsub+0x624>)
   17224:	e67c      	b.n	16f20 <__aeabi_dsub+0x10c>
   17226:	2500      	movs	r5, #0
   17228:	e780      	b.n	1712c <__aeabi_dsub+0x318>
   1722a:	2100      	movs	r1, #0
   1722c:	e78e      	b.n	1714c <__aeabi_dsub+0x338>
   1722e:	0023      	movs	r3, r4
   17230:	4650      	mov	r0, sl
   17232:	4303      	orrs	r3, r0
   17234:	2e00      	cmp	r6, #0
   17236:	d000      	beq.n	1723a <__aeabi_dsub+0x426>
   17238:	e0a8      	b.n	1738c <__aeabi_dsub+0x578>
   1723a:	2b00      	cmp	r3, #0
   1723c:	d100      	bne.n	17240 <__aeabi_dsub+0x42c>
   1723e:	e0de      	b.n	173fe <__aeabi_dsub+0x5ea>
   17240:	000b      	movs	r3, r1
   17242:	4313      	orrs	r3, r2
   17244:	d100      	bne.n	17248 <__aeabi_dsub+0x434>
   17246:	e66b      	b.n	16f20 <__aeabi_dsub+0x10c>
   17248:	4452      	add	r2, sl
   1724a:	4552      	cmp	r2, sl
   1724c:	4180      	sbcs	r0, r0
   1724e:	1864      	adds	r4, r4, r1
   17250:	4240      	negs	r0, r0
   17252:	1824      	adds	r4, r4, r0
   17254:	0017      	movs	r7, r2
   17256:	0223      	lsls	r3, r4, #8
   17258:	d400      	bmi.n	1725c <__aeabi_dsub+0x448>
   1725a:	e6fd      	b.n	17058 <__aeabi_dsub+0x244>
   1725c:	4b77      	ldr	r3, [pc, #476]	; (1743c <__aeabi_dsub+0x628>)
   1725e:	4666      	mov	r6, ip
   17260:	401c      	ands	r4, r3
   17262:	e65d      	b.n	16f20 <__aeabi_dsub+0x10c>
   17264:	0025      	movs	r5, r4
   17266:	4650      	mov	r0, sl
   17268:	4305      	orrs	r5, r0
   1726a:	2e00      	cmp	r6, #0
   1726c:	d1cf      	bne.n	1720e <__aeabi_dsub+0x3fa>
   1726e:	2d00      	cmp	r5, #0
   17270:	d14f      	bne.n	17312 <__aeabi_dsub+0x4fe>
   17272:	000c      	movs	r4, r1
   17274:	4314      	orrs	r4, r2
   17276:	d100      	bne.n	1727a <__aeabi_dsub+0x466>
   17278:	e0a0      	b.n	173bc <__aeabi_dsub+0x5a8>
   1727a:	000c      	movs	r4, r1
   1727c:	0017      	movs	r7, r2
   1727e:	4698      	mov	r8, r3
   17280:	e64e      	b.n	16f20 <__aeabi_dsub+0x10c>
   17282:	4666      	mov	r6, ip
   17284:	2400      	movs	r4, #0
   17286:	2700      	movs	r7, #0
   17288:	e685      	b.n	16f96 <__aeabi_dsub+0x182>
   1728a:	001f      	movs	r7, r3
   1728c:	0008      	movs	r0, r1
   1728e:	3f20      	subs	r7, #32
   17290:	40f8      	lsrs	r0, r7
   17292:	0007      	movs	r7, r0
   17294:	2b20      	cmp	r3, #32
   17296:	d100      	bne.n	1729a <__aeabi_dsub+0x486>
   17298:	e08e      	b.n	173b8 <__aeabi_dsub+0x5a4>
   1729a:	2040      	movs	r0, #64	; 0x40
   1729c:	1ac3      	subs	r3, r0, r3
   1729e:	4099      	lsls	r1, r3
   172a0:	430a      	orrs	r2, r1
   172a2:	1e51      	subs	r1, r2, #1
   172a4:	418a      	sbcs	r2, r1
   172a6:	2100      	movs	r1, #0
   172a8:	4317      	orrs	r7, r2
   172aa:	e692      	b.n	16fd2 <__aeabi_dsub+0x1be>
   172ac:	2e00      	cmp	r6, #0
   172ae:	d114      	bne.n	172da <__aeabi_dsub+0x4c6>
   172b0:	0026      	movs	r6, r4
   172b2:	4650      	mov	r0, sl
   172b4:	4306      	orrs	r6, r0
   172b6:	d062      	beq.n	1737e <__aeabi_dsub+0x56a>
   172b8:	43db      	mvns	r3, r3
   172ba:	2b00      	cmp	r3, #0
   172bc:	d15c      	bne.n	17378 <__aeabi_dsub+0x564>
   172be:	1887      	adds	r7, r0, r2
   172c0:	4297      	cmp	r7, r2
   172c2:	4192      	sbcs	r2, r2
   172c4:	1864      	adds	r4, r4, r1
   172c6:	4252      	negs	r2, r2
   172c8:	18a4      	adds	r4, r4, r2
   172ca:	4666      	mov	r6, ip
   172cc:	e687      	b.n	16fde <__aeabi_dsub+0x1ca>
   172ce:	4650      	mov	r0, sl
   172d0:	4320      	orrs	r0, r4
   172d2:	1e44      	subs	r4, r0, #1
   172d4:	41a0      	sbcs	r0, r4
   172d6:	2400      	movs	r4, #0
   172d8:	e760      	b.n	1719c <__aeabi_dsub+0x388>
   172da:	4e57      	ldr	r6, [pc, #348]	; (17438 <__aeabi_dsub+0x624>)
   172dc:	45b4      	cmp	ip, r6
   172de:	d04e      	beq.n	1737e <__aeabi_dsub+0x56a>
   172e0:	2680      	movs	r6, #128	; 0x80
   172e2:	0436      	lsls	r6, r6, #16
   172e4:	425b      	negs	r3, r3
   172e6:	4334      	orrs	r4, r6
   172e8:	2b38      	cmp	r3, #56	; 0x38
   172ea:	dd00      	ble.n	172ee <__aeabi_dsub+0x4da>
   172ec:	e07f      	b.n	173ee <__aeabi_dsub+0x5da>
   172ee:	2b1f      	cmp	r3, #31
   172f0:	dd00      	ble.n	172f4 <__aeabi_dsub+0x4e0>
   172f2:	e08b      	b.n	1740c <__aeabi_dsub+0x5f8>
   172f4:	2620      	movs	r6, #32
   172f6:	0027      	movs	r7, r4
   172f8:	4650      	mov	r0, sl
   172fa:	1af6      	subs	r6, r6, r3
   172fc:	40b7      	lsls	r7, r6
   172fe:	40d8      	lsrs	r0, r3
   17300:	4307      	orrs	r7, r0
   17302:	4650      	mov	r0, sl
   17304:	40b0      	lsls	r0, r6
   17306:	1e46      	subs	r6, r0, #1
   17308:	41b0      	sbcs	r0, r6
   1730a:	4307      	orrs	r7, r0
   1730c:	40dc      	lsrs	r4, r3
   1730e:	18bf      	adds	r7, r7, r2
   17310:	e7d6      	b.n	172c0 <__aeabi_dsub+0x4ac>
   17312:	000d      	movs	r5, r1
   17314:	4315      	orrs	r5, r2
   17316:	d100      	bne.n	1731a <__aeabi_dsub+0x506>
   17318:	e602      	b.n	16f20 <__aeabi_dsub+0x10c>
   1731a:	4650      	mov	r0, sl
   1731c:	1a80      	subs	r0, r0, r2
   1731e:	4582      	cmp	sl, r0
   17320:	41bf      	sbcs	r7, r7
   17322:	1a65      	subs	r5, r4, r1
   17324:	427f      	negs	r7, r7
   17326:	1bed      	subs	r5, r5, r7
   17328:	4684      	mov	ip, r0
   1732a:	0228      	lsls	r0, r5, #8
   1732c:	d400      	bmi.n	17330 <__aeabi_dsub+0x51c>
   1732e:	e68d      	b.n	1704c <__aeabi_dsub+0x238>
   17330:	4650      	mov	r0, sl
   17332:	1a17      	subs	r7, r2, r0
   17334:	42ba      	cmp	r2, r7
   17336:	4192      	sbcs	r2, r2
   17338:	1b0c      	subs	r4, r1, r4
   1733a:	4252      	negs	r2, r2
   1733c:	1aa4      	subs	r4, r4, r2
   1733e:	4698      	mov	r8, r3
   17340:	e5ee      	b.n	16f20 <__aeabi_dsub+0x10c>
   17342:	000d      	movs	r5, r1
   17344:	4315      	orrs	r5, r2
   17346:	d100      	bne.n	1734a <__aeabi_dsub+0x536>
   17348:	e76b      	b.n	17222 <__aeabi_dsub+0x40e>
   1734a:	4650      	mov	r0, sl
   1734c:	0767      	lsls	r7, r4, #29
   1734e:	08c0      	lsrs	r0, r0, #3
   17350:	4307      	orrs	r7, r0
   17352:	2080      	movs	r0, #128	; 0x80
   17354:	08e4      	lsrs	r4, r4, #3
   17356:	0300      	lsls	r0, r0, #12
   17358:	4204      	tst	r4, r0
   1735a:	d007      	beq.n	1736c <__aeabi_dsub+0x558>
   1735c:	08cd      	lsrs	r5, r1, #3
   1735e:	4205      	tst	r5, r0
   17360:	d104      	bne.n	1736c <__aeabi_dsub+0x558>
   17362:	002c      	movs	r4, r5
   17364:	4698      	mov	r8, r3
   17366:	08d7      	lsrs	r7, r2, #3
   17368:	0749      	lsls	r1, r1, #29
   1736a:	430f      	orrs	r7, r1
   1736c:	0f7b      	lsrs	r3, r7, #29
   1736e:	00e4      	lsls	r4, r4, #3
   17370:	431c      	orrs	r4, r3
   17372:	00ff      	lsls	r7, r7, #3
   17374:	4e30      	ldr	r6, [pc, #192]	; (17438 <__aeabi_dsub+0x624>)
   17376:	e5d3      	b.n	16f20 <__aeabi_dsub+0x10c>
   17378:	4e2f      	ldr	r6, [pc, #188]	; (17438 <__aeabi_dsub+0x624>)
   1737a:	45b4      	cmp	ip, r6
   1737c:	d1b4      	bne.n	172e8 <__aeabi_dsub+0x4d4>
   1737e:	000c      	movs	r4, r1
   17380:	0017      	movs	r7, r2
   17382:	4666      	mov	r6, ip
   17384:	e5cc      	b.n	16f20 <__aeabi_dsub+0x10c>
   17386:	2700      	movs	r7, #0
   17388:	2400      	movs	r4, #0
   1738a:	e5e8      	b.n	16f5e <__aeabi_dsub+0x14a>
   1738c:	2b00      	cmp	r3, #0
   1738e:	d039      	beq.n	17404 <__aeabi_dsub+0x5f0>
   17390:	000b      	movs	r3, r1
   17392:	4313      	orrs	r3, r2
   17394:	d100      	bne.n	17398 <__aeabi_dsub+0x584>
   17396:	e744      	b.n	17222 <__aeabi_dsub+0x40e>
   17398:	08c0      	lsrs	r0, r0, #3
   1739a:	0767      	lsls	r7, r4, #29
   1739c:	4307      	orrs	r7, r0
   1739e:	2080      	movs	r0, #128	; 0x80
   173a0:	08e4      	lsrs	r4, r4, #3
   173a2:	0300      	lsls	r0, r0, #12
   173a4:	4204      	tst	r4, r0
   173a6:	d0e1      	beq.n	1736c <__aeabi_dsub+0x558>
   173a8:	08cb      	lsrs	r3, r1, #3
   173aa:	4203      	tst	r3, r0
   173ac:	d1de      	bne.n	1736c <__aeabi_dsub+0x558>
   173ae:	08d7      	lsrs	r7, r2, #3
   173b0:	0749      	lsls	r1, r1, #29
   173b2:	430f      	orrs	r7, r1
   173b4:	001c      	movs	r4, r3
   173b6:	e7d9      	b.n	1736c <__aeabi_dsub+0x558>
   173b8:	2100      	movs	r1, #0
   173ba:	e771      	b.n	172a0 <__aeabi_dsub+0x48c>
   173bc:	2500      	movs	r5, #0
   173be:	2700      	movs	r7, #0
   173c0:	e5e9      	b.n	16f96 <__aeabi_dsub+0x182>
   173c2:	002e      	movs	r6, r5
   173c4:	0027      	movs	r7, r4
   173c6:	3e20      	subs	r6, #32
   173c8:	40f7      	lsrs	r7, r6
   173ca:	2d20      	cmp	r5, #32
   173cc:	d02f      	beq.n	1742e <__aeabi_dsub+0x61a>
   173ce:	2640      	movs	r6, #64	; 0x40
   173d0:	1b75      	subs	r5, r6, r5
   173d2:	40ac      	lsls	r4, r5
   173d4:	4650      	mov	r0, sl
   173d6:	4320      	orrs	r0, r4
   173d8:	1e44      	subs	r4, r0, #1
   173da:	41a0      	sbcs	r0, r4
   173dc:	2400      	movs	r4, #0
   173de:	4338      	orrs	r0, r7
   173e0:	e6dc      	b.n	1719c <__aeabi_dsub+0x388>
   173e2:	2480      	movs	r4, #128	; 0x80
   173e4:	2500      	movs	r5, #0
   173e6:	0324      	lsls	r4, r4, #12
   173e8:	4e13      	ldr	r6, [pc, #76]	; (17438 <__aeabi_dsub+0x624>)
   173ea:	2700      	movs	r7, #0
   173ec:	e5d3      	b.n	16f96 <__aeabi_dsub+0x182>
   173ee:	4650      	mov	r0, sl
   173f0:	4320      	orrs	r0, r4
   173f2:	0007      	movs	r7, r0
   173f4:	1e78      	subs	r0, r7, #1
   173f6:	4187      	sbcs	r7, r0
   173f8:	2400      	movs	r4, #0
   173fa:	18bf      	adds	r7, r7, r2
   173fc:	e760      	b.n	172c0 <__aeabi_dsub+0x4ac>
   173fe:	000c      	movs	r4, r1
   17400:	0017      	movs	r7, r2
   17402:	e58d      	b.n	16f20 <__aeabi_dsub+0x10c>
   17404:	000c      	movs	r4, r1
   17406:	0017      	movs	r7, r2
   17408:	4e0b      	ldr	r6, [pc, #44]	; (17438 <__aeabi_dsub+0x624>)
   1740a:	e589      	b.n	16f20 <__aeabi_dsub+0x10c>
   1740c:	001e      	movs	r6, r3
   1740e:	0027      	movs	r7, r4
   17410:	3e20      	subs	r6, #32
   17412:	40f7      	lsrs	r7, r6
   17414:	2b20      	cmp	r3, #32
   17416:	d00c      	beq.n	17432 <__aeabi_dsub+0x61e>
   17418:	2640      	movs	r6, #64	; 0x40
   1741a:	1af3      	subs	r3, r6, r3
   1741c:	409c      	lsls	r4, r3
   1741e:	4650      	mov	r0, sl
   17420:	4320      	orrs	r0, r4
   17422:	1e44      	subs	r4, r0, #1
   17424:	41a0      	sbcs	r0, r4
   17426:	4307      	orrs	r7, r0
   17428:	2400      	movs	r4, #0
   1742a:	18bf      	adds	r7, r7, r2
   1742c:	e748      	b.n	172c0 <__aeabi_dsub+0x4ac>
   1742e:	2400      	movs	r4, #0
   17430:	e7d0      	b.n	173d4 <__aeabi_dsub+0x5c0>
   17432:	2400      	movs	r4, #0
   17434:	e7f3      	b.n	1741e <__aeabi_dsub+0x60a>
   17436:	46c0      	nop			; (mov r8, r8)
   17438:	000007ff 	.word	0x000007ff
   1743c:	ff7fffff 	.word	0xff7fffff

00017440 <__aeabi_d2iz>:
   17440:	b530      	push	{r4, r5, lr}
   17442:	4d13      	ldr	r5, [pc, #76]	; (17490 <__aeabi_d2iz+0x50>)
   17444:	030a      	lsls	r2, r1, #12
   17446:	004b      	lsls	r3, r1, #1
   17448:	0b12      	lsrs	r2, r2, #12
   1744a:	0d5b      	lsrs	r3, r3, #21
   1744c:	0fc9      	lsrs	r1, r1, #31
   1744e:	2400      	movs	r4, #0
   17450:	42ab      	cmp	r3, r5
   17452:	dd10      	ble.n	17476 <__aeabi_d2iz+0x36>
   17454:	4c0f      	ldr	r4, [pc, #60]	; (17494 <__aeabi_d2iz+0x54>)
   17456:	42a3      	cmp	r3, r4
   17458:	dc0f      	bgt.n	1747a <__aeabi_d2iz+0x3a>
   1745a:	2480      	movs	r4, #128	; 0x80
   1745c:	4d0e      	ldr	r5, [pc, #56]	; (17498 <__aeabi_d2iz+0x58>)
   1745e:	0364      	lsls	r4, r4, #13
   17460:	4322      	orrs	r2, r4
   17462:	1aed      	subs	r5, r5, r3
   17464:	2d1f      	cmp	r5, #31
   17466:	dd0b      	ble.n	17480 <__aeabi_d2iz+0x40>
   17468:	480c      	ldr	r0, [pc, #48]	; (1749c <__aeabi_d2iz+0x5c>)
   1746a:	1ac3      	subs	r3, r0, r3
   1746c:	40da      	lsrs	r2, r3
   1746e:	4254      	negs	r4, r2
   17470:	2900      	cmp	r1, #0
   17472:	d100      	bne.n	17476 <__aeabi_d2iz+0x36>
   17474:	0014      	movs	r4, r2
   17476:	0020      	movs	r0, r4
   17478:	bd30      	pop	{r4, r5, pc}
   1747a:	4b09      	ldr	r3, [pc, #36]	; (174a0 <__aeabi_d2iz+0x60>)
   1747c:	18cc      	adds	r4, r1, r3
   1747e:	e7fa      	b.n	17476 <__aeabi_d2iz+0x36>
   17480:	4c08      	ldr	r4, [pc, #32]	; (174a4 <__aeabi_d2iz+0x64>)
   17482:	40e8      	lsrs	r0, r5
   17484:	46a4      	mov	ip, r4
   17486:	4463      	add	r3, ip
   17488:	409a      	lsls	r2, r3
   1748a:	4302      	orrs	r2, r0
   1748c:	e7ef      	b.n	1746e <__aeabi_d2iz+0x2e>
   1748e:	46c0      	nop			; (mov r8, r8)
   17490:	000003fe 	.word	0x000003fe
   17494:	0000041d 	.word	0x0000041d
   17498:	00000433 	.word	0x00000433
   1749c:	00000413 	.word	0x00000413
   174a0:	7fffffff 	.word	0x7fffffff
   174a4:	fffffbed 	.word	0xfffffbed

000174a8 <__aeabi_i2d>:
   174a8:	b570      	push	{r4, r5, r6, lr}
   174aa:	2800      	cmp	r0, #0
   174ac:	d030      	beq.n	17510 <__aeabi_i2d+0x68>
   174ae:	17c3      	asrs	r3, r0, #31
   174b0:	18c4      	adds	r4, r0, r3
   174b2:	405c      	eors	r4, r3
   174b4:	0fc5      	lsrs	r5, r0, #31
   174b6:	0020      	movs	r0, r4
   174b8:	f000 f94c 	bl	17754 <__clzsi2>
   174bc:	4b17      	ldr	r3, [pc, #92]	; (1751c <__aeabi_i2d+0x74>)
   174be:	4a18      	ldr	r2, [pc, #96]	; (17520 <__aeabi_i2d+0x78>)
   174c0:	1a1b      	subs	r3, r3, r0
   174c2:	1ad2      	subs	r2, r2, r3
   174c4:	2a1f      	cmp	r2, #31
   174c6:	dd18      	ble.n	174fa <__aeabi_i2d+0x52>
   174c8:	4a16      	ldr	r2, [pc, #88]	; (17524 <__aeabi_i2d+0x7c>)
   174ca:	1ad2      	subs	r2, r2, r3
   174cc:	4094      	lsls	r4, r2
   174ce:	2200      	movs	r2, #0
   174d0:	0324      	lsls	r4, r4, #12
   174d2:	055b      	lsls	r3, r3, #21
   174d4:	0b24      	lsrs	r4, r4, #12
   174d6:	0d5b      	lsrs	r3, r3, #21
   174d8:	2100      	movs	r1, #0
   174da:	0010      	movs	r0, r2
   174dc:	0324      	lsls	r4, r4, #12
   174de:	0d0a      	lsrs	r2, r1, #20
   174e0:	0b24      	lsrs	r4, r4, #12
   174e2:	0512      	lsls	r2, r2, #20
   174e4:	4322      	orrs	r2, r4
   174e6:	4c10      	ldr	r4, [pc, #64]	; (17528 <__aeabi_i2d+0x80>)
   174e8:	051b      	lsls	r3, r3, #20
   174ea:	4022      	ands	r2, r4
   174ec:	4313      	orrs	r3, r2
   174ee:	005b      	lsls	r3, r3, #1
   174f0:	07ed      	lsls	r5, r5, #31
   174f2:	085b      	lsrs	r3, r3, #1
   174f4:	432b      	orrs	r3, r5
   174f6:	0019      	movs	r1, r3
   174f8:	bd70      	pop	{r4, r5, r6, pc}
   174fa:	0021      	movs	r1, r4
   174fc:	4091      	lsls	r1, r2
   174fe:	000a      	movs	r2, r1
   17500:	210b      	movs	r1, #11
   17502:	1a08      	subs	r0, r1, r0
   17504:	40c4      	lsrs	r4, r0
   17506:	055b      	lsls	r3, r3, #21
   17508:	0324      	lsls	r4, r4, #12
   1750a:	0b24      	lsrs	r4, r4, #12
   1750c:	0d5b      	lsrs	r3, r3, #21
   1750e:	e7e3      	b.n	174d8 <__aeabi_i2d+0x30>
   17510:	2500      	movs	r5, #0
   17512:	2300      	movs	r3, #0
   17514:	2400      	movs	r4, #0
   17516:	2200      	movs	r2, #0
   17518:	e7de      	b.n	174d8 <__aeabi_i2d+0x30>
   1751a:	46c0      	nop			; (mov r8, r8)
   1751c:	0000041e 	.word	0x0000041e
   17520:	00000433 	.word	0x00000433
   17524:	00000413 	.word	0x00000413
   17528:	800fffff 	.word	0x800fffff

0001752c <__aeabi_ui2d>:
   1752c:	b510      	push	{r4, lr}
   1752e:	1e04      	subs	r4, r0, #0
   17530:	d028      	beq.n	17584 <__aeabi_ui2d+0x58>
   17532:	f000 f90f 	bl	17754 <__clzsi2>
   17536:	4b15      	ldr	r3, [pc, #84]	; (1758c <__aeabi_ui2d+0x60>)
   17538:	4a15      	ldr	r2, [pc, #84]	; (17590 <__aeabi_ui2d+0x64>)
   1753a:	1a1b      	subs	r3, r3, r0
   1753c:	1ad2      	subs	r2, r2, r3
   1753e:	2a1f      	cmp	r2, #31
   17540:	dd15      	ble.n	1756e <__aeabi_ui2d+0x42>
   17542:	4a14      	ldr	r2, [pc, #80]	; (17594 <__aeabi_ui2d+0x68>)
   17544:	1ad2      	subs	r2, r2, r3
   17546:	4094      	lsls	r4, r2
   17548:	2200      	movs	r2, #0
   1754a:	0324      	lsls	r4, r4, #12
   1754c:	055b      	lsls	r3, r3, #21
   1754e:	0b24      	lsrs	r4, r4, #12
   17550:	0d5b      	lsrs	r3, r3, #21
   17552:	2100      	movs	r1, #0
   17554:	0010      	movs	r0, r2
   17556:	0324      	lsls	r4, r4, #12
   17558:	0d0a      	lsrs	r2, r1, #20
   1755a:	0b24      	lsrs	r4, r4, #12
   1755c:	0512      	lsls	r2, r2, #20
   1755e:	4322      	orrs	r2, r4
   17560:	4c0d      	ldr	r4, [pc, #52]	; (17598 <__aeabi_ui2d+0x6c>)
   17562:	051b      	lsls	r3, r3, #20
   17564:	4022      	ands	r2, r4
   17566:	4313      	orrs	r3, r2
   17568:	005b      	lsls	r3, r3, #1
   1756a:	0859      	lsrs	r1, r3, #1
   1756c:	bd10      	pop	{r4, pc}
   1756e:	0021      	movs	r1, r4
   17570:	4091      	lsls	r1, r2
   17572:	000a      	movs	r2, r1
   17574:	210b      	movs	r1, #11
   17576:	1a08      	subs	r0, r1, r0
   17578:	40c4      	lsrs	r4, r0
   1757a:	055b      	lsls	r3, r3, #21
   1757c:	0324      	lsls	r4, r4, #12
   1757e:	0b24      	lsrs	r4, r4, #12
   17580:	0d5b      	lsrs	r3, r3, #21
   17582:	e7e6      	b.n	17552 <__aeabi_ui2d+0x26>
   17584:	2300      	movs	r3, #0
   17586:	2400      	movs	r4, #0
   17588:	2200      	movs	r2, #0
   1758a:	e7e2      	b.n	17552 <__aeabi_ui2d+0x26>
   1758c:	0000041e 	.word	0x0000041e
   17590:	00000433 	.word	0x00000433
   17594:	00000413 	.word	0x00000413
   17598:	800fffff 	.word	0x800fffff

0001759c <__aeabi_f2d>:
   1759c:	0041      	lsls	r1, r0, #1
   1759e:	0e09      	lsrs	r1, r1, #24
   175a0:	1c4b      	adds	r3, r1, #1
   175a2:	b570      	push	{r4, r5, r6, lr}
   175a4:	b2db      	uxtb	r3, r3
   175a6:	0246      	lsls	r6, r0, #9
   175a8:	0a75      	lsrs	r5, r6, #9
   175aa:	0fc4      	lsrs	r4, r0, #31
   175ac:	2b01      	cmp	r3, #1
   175ae:	dd14      	ble.n	175da <__aeabi_f2d+0x3e>
   175b0:	23e0      	movs	r3, #224	; 0xe0
   175b2:	009b      	lsls	r3, r3, #2
   175b4:	076d      	lsls	r5, r5, #29
   175b6:	0b36      	lsrs	r6, r6, #12
   175b8:	18cb      	adds	r3, r1, r3
   175ba:	2100      	movs	r1, #0
   175bc:	0d0a      	lsrs	r2, r1, #20
   175be:	0028      	movs	r0, r5
   175c0:	0512      	lsls	r2, r2, #20
   175c2:	4d1c      	ldr	r5, [pc, #112]	; (17634 <__aeabi_f2d+0x98>)
   175c4:	4332      	orrs	r2, r6
   175c6:	055b      	lsls	r3, r3, #21
   175c8:	402a      	ands	r2, r5
   175ca:	085b      	lsrs	r3, r3, #1
   175cc:	4313      	orrs	r3, r2
   175ce:	005b      	lsls	r3, r3, #1
   175d0:	07e4      	lsls	r4, r4, #31
   175d2:	085b      	lsrs	r3, r3, #1
   175d4:	4323      	orrs	r3, r4
   175d6:	0019      	movs	r1, r3
   175d8:	bd70      	pop	{r4, r5, r6, pc}
   175da:	2900      	cmp	r1, #0
   175dc:	d114      	bne.n	17608 <__aeabi_f2d+0x6c>
   175de:	2d00      	cmp	r5, #0
   175e0:	d01e      	beq.n	17620 <__aeabi_f2d+0x84>
   175e2:	0028      	movs	r0, r5
   175e4:	f000 f8b6 	bl	17754 <__clzsi2>
   175e8:	280a      	cmp	r0, #10
   175ea:	dc1c      	bgt.n	17626 <__aeabi_f2d+0x8a>
   175ec:	230b      	movs	r3, #11
   175ee:	002a      	movs	r2, r5
   175f0:	1a1b      	subs	r3, r3, r0
   175f2:	40da      	lsrs	r2, r3
   175f4:	0003      	movs	r3, r0
   175f6:	3315      	adds	r3, #21
   175f8:	409d      	lsls	r5, r3
   175fa:	4b0f      	ldr	r3, [pc, #60]	; (17638 <__aeabi_f2d+0x9c>)
   175fc:	0312      	lsls	r2, r2, #12
   175fe:	1a1b      	subs	r3, r3, r0
   17600:	055b      	lsls	r3, r3, #21
   17602:	0b16      	lsrs	r6, r2, #12
   17604:	0d5b      	lsrs	r3, r3, #21
   17606:	e7d8      	b.n	175ba <__aeabi_f2d+0x1e>
   17608:	2d00      	cmp	r5, #0
   1760a:	d006      	beq.n	1761a <__aeabi_f2d+0x7e>
   1760c:	0b32      	lsrs	r2, r6, #12
   1760e:	2680      	movs	r6, #128	; 0x80
   17610:	0336      	lsls	r6, r6, #12
   17612:	076d      	lsls	r5, r5, #29
   17614:	4316      	orrs	r6, r2
   17616:	4b09      	ldr	r3, [pc, #36]	; (1763c <__aeabi_f2d+0xa0>)
   17618:	e7cf      	b.n	175ba <__aeabi_f2d+0x1e>
   1761a:	4b08      	ldr	r3, [pc, #32]	; (1763c <__aeabi_f2d+0xa0>)
   1761c:	2600      	movs	r6, #0
   1761e:	e7cc      	b.n	175ba <__aeabi_f2d+0x1e>
   17620:	2300      	movs	r3, #0
   17622:	2600      	movs	r6, #0
   17624:	e7c9      	b.n	175ba <__aeabi_f2d+0x1e>
   17626:	0003      	movs	r3, r0
   17628:	002a      	movs	r2, r5
   1762a:	3b0b      	subs	r3, #11
   1762c:	409a      	lsls	r2, r3
   1762e:	2500      	movs	r5, #0
   17630:	e7e3      	b.n	175fa <__aeabi_f2d+0x5e>
   17632:	46c0      	nop			; (mov r8, r8)
   17634:	800fffff 	.word	0x800fffff
   17638:	00000389 	.word	0x00000389
   1763c:	000007ff 	.word	0x000007ff

00017640 <__aeabi_d2f>:
   17640:	b5f0      	push	{r4, r5, r6, r7, lr}
   17642:	004c      	lsls	r4, r1, #1
   17644:	0d64      	lsrs	r4, r4, #21
   17646:	030b      	lsls	r3, r1, #12
   17648:	1c62      	adds	r2, r4, #1
   1764a:	0f45      	lsrs	r5, r0, #29
   1764c:	0a5b      	lsrs	r3, r3, #9
   1764e:	0552      	lsls	r2, r2, #21
   17650:	432b      	orrs	r3, r5
   17652:	0fc9      	lsrs	r1, r1, #31
   17654:	00c5      	lsls	r5, r0, #3
   17656:	0d52      	lsrs	r2, r2, #21
   17658:	2a01      	cmp	r2, #1
   1765a:	dd28      	ble.n	176ae <__aeabi_d2f+0x6e>
   1765c:	4a3a      	ldr	r2, [pc, #232]	; (17748 <__aeabi_d2f+0x108>)
   1765e:	18a6      	adds	r6, r4, r2
   17660:	2efe      	cmp	r6, #254	; 0xfe
   17662:	dc1b      	bgt.n	1769c <__aeabi_d2f+0x5c>
   17664:	2e00      	cmp	r6, #0
   17666:	dd3e      	ble.n	176e6 <__aeabi_d2f+0xa6>
   17668:	0180      	lsls	r0, r0, #6
   1766a:	0002      	movs	r2, r0
   1766c:	1e50      	subs	r0, r2, #1
   1766e:	4182      	sbcs	r2, r0
   17670:	0f6d      	lsrs	r5, r5, #29
   17672:	432a      	orrs	r2, r5
   17674:	00db      	lsls	r3, r3, #3
   17676:	4313      	orrs	r3, r2
   17678:	075a      	lsls	r2, r3, #29
   1767a:	d004      	beq.n	17686 <__aeabi_d2f+0x46>
   1767c:	220f      	movs	r2, #15
   1767e:	401a      	ands	r2, r3
   17680:	2a04      	cmp	r2, #4
   17682:	d000      	beq.n	17686 <__aeabi_d2f+0x46>
   17684:	3304      	adds	r3, #4
   17686:	2280      	movs	r2, #128	; 0x80
   17688:	04d2      	lsls	r2, r2, #19
   1768a:	401a      	ands	r2, r3
   1768c:	d05a      	beq.n	17744 <__aeabi_d2f+0x104>
   1768e:	3601      	adds	r6, #1
   17690:	2eff      	cmp	r6, #255	; 0xff
   17692:	d003      	beq.n	1769c <__aeabi_d2f+0x5c>
   17694:	019b      	lsls	r3, r3, #6
   17696:	0a5b      	lsrs	r3, r3, #9
   17698:	b2f4      	uxtb	r4, r6
   1769a:	e001      	b.n	176a0 <__aeabi_d2f+0x60>
   1769c:	24ff      	movs	r4, #255	; 0xff
   1769e:	2300      	movs	r3, #0
   176a0:	0258      	lsls	r0, r3, #9
   176a2:	05e4      	lsls	r4, r4, #23
   176a4:	0a40      	lsrs	r0, r0, #9
   176a6:	07c9      	lsls	r1, r1, #31
   176a8:	4320      	orrs	r0, r4
   176aa:	4308      	orrs	r0, r1
   176ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   176ae:	2c00      	cmp	r4, #0
   176b0:	d007      	beq.n	176c2 <__aeabi_d2f+0x82>
   176b2:	431d      	orrs	r5, r3
   176b4:	d0f2      	beq.n	1769c <__aeabi_d2f+0x5c>
   176b6:	2080      	movs	r0, #128	; 0x80
   176b8:	00db      	lsls	r3, r3, #3
   176ba:	0480      	lsls	r0, r0, #18
   176bc:	4303      	orrs	r3, r0
   176be:	26ff      	movs	r6, #255	; 0xff
   176c0:	e7da      	b.n	17678 <__aeabi_d2f+0x38>
   176c2:	432b      	orrs	r3, r5
   176c4:	d003      	beq.n	176ce <__aeabi_d2f+0x8e>
   176c6:	2305      	movs	r3, #5
   176c8:	08db      	lsrs	r3, r3, #3
   176ca:	2cff      	cmp	r4, #255	; 0xff
   176cc:	d003      	beq.n	176d6 <__aeabi_d2f+0x96>
   176ce:	025b      	lsls	r3, r3, #9
   176d0:	0a5b      	lsrs	r3, r3, #9
   176d2:	b2e4      	uxtb	r4, r4
   176d4:	e7e4      	b.n	176a0 <__aeabi_d2f+0x60>
   176d6:	2b00      	cmp	r3, #0
   176d8:	d032      	beq.n	17740 <__aeabi_d2f+0x100>
   176da:	2080      	movs	r0, #128	; 0x80
   176dc:	03c0      	lsls	r0, r0, #15
   176de:	4303      	orrs	r3, r0
   176e0:	025b      	lsls	r3, r3, #9
   176e2:	0a5b      	lsrs	r3, r3, #9
   176e4:	e7dc      	b.n	176a0 <__aeabi_d2f+0x60>
   176e6:	0032      	movs	r2, r6
   176e8:	3217      	adds	r2, #23
   176ea:	db14      	blt.n	17716 <__aeabi_d2f+0xd6>
   176ec:	2280      	movs	r2, #128	; 0x80
   176ee:	271e      	movs	r7, #30
   176f0:	0412      	lsls	r2, r2, #16
   176f2:	4313      	orrs	r3, r2
   176f4:	1bbf      	subs	r7, r7, r6
   176f6:	2f1f      	cmp	r7, #31
   176f8:	dc0f      	bgt.n	1771a <__aeabi_d2f+0xda>
   176fa:	4a14      	ldr	r2, [pc, #80]	; (1774c <__aeabi_d2f+0x10c>)
   176fc:	4694      	mov	ip, r2
   176fe:	4464      	add	r4, ip
   17700:	002a      	movs	r2, r5
   17702:	40a5      	lsls	r5, r4
   17704:	002e      	movs	r6, r5
   17706:	40a3      	lsls	r3, r4
   17708:	1e75      	subs	r5, r6, #1
   1770a:	41ae      	sbcs	r6, r5
   1770c:	40fa      	lsrs	r2, r7
   1770e:	4333      	orrs	r3, r6
   17710:	4313      	orrs	r3, r2
   17712:	2600      	movs	r6, #0
   17714:	e7b0      	b.n	17678 <__aeabi_d2f+0x38>
   17716:	2400      	movs	r4, #0
   17718:	e7d5      	b.n	176c6 <__aeabi_d2f+0x86>
   1771a:	2202      	movs	r2, #2
   1771c:	4252      	negs	r2, r2
   1771e:	1b96      	subs	r6, r2, r6
   17720:	001a      	movs	r2, r3
   17722:	40f2      	lsrs	r2, r6
   17724:	2f20      	cmp	r7, #32
   17726:	d009      	beq.n	1773c <__aeabi_d2f+0xfc>
   17728:	4809      	ldr	r0, [pc, #36]	; (17750 <__aeabi_d2f+0x110>)
   1772a:	4684      	mov	ip, r0
   1772c:	4464      	add	r4, ip
   1772e:	40a3      	lsls	r3, r4
   17730:	432b      	orrs	r3, r5
   17732:	1e5d      	subs	r5, r3, #1
   17734:	41ab      	sbcs	r3, r5
   17736:	2600      	movs	r6, #0
   17738:	4313      	orrs	r3, r2
   1773a:	e79d      	b.n	17678 <__aeabi_d2f+0x38>
   1773c:	2300      	movs	r3, #0
   1773e:	e7f7      	b.n	17730 <__aeabi_d2f+0xf0>
   17740:	2300      	movs	r3, #0
   17742:	e7ad      	b.n	176a0 <__aeabi_d2f+0x60>
   17744:	0034      	movs	r4, r6
   17746:	e7bf      	b.n	176c8 <__aeabi_d2f+0x88>
   17748:	fffffc80 	.word	0xfffffc80
   1774c:	fffffc82 	.word	0xfffffc82
   17750:	fffffca2 	.word	0xfffffca2

00017754 <__clzsi2>:
   17754:	211c      	movs	r1, #28
   17756:	2301      	movs	r3, #1
   17758:	041b      	lsls	r3, r3, #16
   1775a:	4298      	cmp	r0, r3
   1775c:	d301      	bcc.n	17762 <__clzsi2+0xe>
   1775e:	0c00      	lsrs	r0, r0, #16
   17760:	3910      	subs	r1, #16
   17762:	0a1b      	lsrs	r3, r3, #8
   17764:	4298      	cmp	r0, r3
   17766:	d301      	bcc.n	1776c <__clzsi2+0x18>
   17768:	0a00      	lsrs	r0, r0, #8
   1776a:	3908      	subs	r1, #8
   1776c:	091b      	lsrs	r3, r3, #4
   1776e:	4298      	cmp	r0, r3
   17770:	d301      	bcc.n	17776 <__clzsi2+0x22>
   17772:	0900      	lsrs	r0, r0, #4
   17774:	3904      	subs	r1, #4
   17776:	a202      	add	r2, pc, #8	; (adr r2, 17780 <__clzsi2+0x2c>)
   17778:	5c10      	ldrb	r0, [r2, r0]
   1777a:	1840      	adds	r0, r0, r1
   1777c:	4770      	bx	lr
   1777e:	46c0      	nop			; (mov r8, r8)
   17780:	02020304 	.word	0x02020304
   17784:	01010101 	.word	0x01010101
	...

00017790 <__clzdi2>:
   17790:	b510      	push	{r4, lr}
   17792:	2900      	cmp	r1, #0
   17794:	d103      	bne.n	1779e <__clzdi2+0xe>
   17796:	f7ff ffdd 	bl	17754 <__clzsi2>
   1779a:	3020      	adds	r0, #32
   1779c:	e002      	b.n	177a4 <__clzdi2+0x14>
   1779e:	1c08      	adds	r0, r1, #0
   177a0:	f7ff ffd8 	bl	17754 <__clzsi2>
   177a4:	bd10      	pop	{r4, pc}
   177a6:	46c0      	nop			; (mov r8, r8)

000177a8 <__assert_func>:
   177a8:	b530      	push	{r4, r5, lr}
   177aa:	001c      	movs	r4, r3
   177ac:	4b09      	ldr	r3, [pc, #36]	; (177d4 <__assert_func+0x2c>)
   177ae:	0005      	movs	r5, r0
   177b0:	681b      	ldr	r3, [r3, #0]
   177b2:	b085      	sub	sp, #20
   177b4:	68d8      	ldr	r0, [r3, #12]
   177b6:	4b08      	ldr	r3, [pc, #32]	; (177d8 <__assert_func+0x30>)
   177b8:	2a00      	cmp	r2, #0
   177ba:	d101      	bne.n	177c0 <__assert_func+0x18>
   177bc:	4b07      	ldr	r3, [pc, #28]	; (177dc <__assert_func+0x34>)
   177be:	001a      	movs	r2, r3
   177c0:	9202      	str	r2, [sp, #8]
   177c2:	9301      	str	r3, [sp, #4]
   177c4:	9100      	str	r1, [sp, #0]
   177c6:	002b      	movs	r3, r5
   177c8:	0022      	movs	r2, r4
   177ca:	4905      	ldr	r1, [pc, #20]	; (177e0 <__assert_func+0x38>)
   177cc:	f000 f80a 	bl	177e4 <fiprintf>
   177d0:	f000 fdde 	bl	18390 <abort>
   177d4:	20000028 	.word	0x20000028
   177d8:	0001a520 	.word	0x0001a520
   177dc:	0001a55b 	.word	0x0001a55b
   177e0:	0001a52d 	.word	0x0001a52d

000177e4 <fiprintf>:
   177e4:	b40e      	push	{r1, r2, r3}
   177e6:	b503      	push	{r0, r1, lr}
   177e8:	0001      	movs	r1, r0
   177ea:	ab03      	add	r3, sp, #12
   177ec:	4804      	ldr	r0, [pc, #16]	; (17800 <fiprintf+0x1c>)
   177ee:	cb04      	ldmia	r3!, {r2}
   177f0:	6800      	ldr	r0, [r0, #0]
   177f2:	9301      	str	r3, [sp, #4]
   177f4:	f000 f872 	bl	178dc <_vfiprintf_r>
   177f8:	b002      	add	sp, #8
   177fa:	bc08      	pop	{r3}
   177fc:	b003      	add	sp, #12
   177fe:	4718      	bx	r3
   17800:	20000028 	.word	0x20000028

00017804 <__libc_init_array>:
   17804:	b570      	push	{r4, r5, r6, lr}
   17806:	2600      	movs	r6, #0
   17808:	4d0c      	ldr	r5, [pc, #48]	; (1783c <__libc_init_array+0x38>)
   1780a:	4c0d      	ldr	r4, [pc, #52]	; (17840 <__libc_init_array+0x3c>)
   1780c:	1b64      	subs	r4, r4, r5
   1780e:	10a4      	asrs	r4, r4, #2
   17810:	42a6      	cmp	r6, r4
   17812:	d109      	bne.n	17828 <__libc_init_array+0x24>
   17814:	2600      	movs	r6, #0
   17816:	f002 feed 	bl	1a5f4 <_init>
   1781a:	4d0a      	ldr	r5, [pc, #40]	; (17844 <__libc_init_array+0x40>)
   1781c:	4c0a      	ldr	r4, [pc, #40]	; (17848 <__libc_init_array+0x44>)
   1781e:	1b64      	subs	r4, r4, r5
   17820:	10a4      	asrs	r4, r4, #2
   17822:	42a6      	cmp	r6, r4
   17824:	d105      	bne.n	17832 <__libc_init_array+0x2e>
   17826:	bd70      	pop	{r4, r5, r6, pc}
   17828:	00b3      	lsls	r3, r6, #2
   1782a:	58eb      	ldr	r3, [r5, r3]
   1782c:	4798      	blx	r3
   1782e:	3601      	adds	r6, #1
   17830:	e7ee      	b.n	17810 <__libc_init_array+0xc>
   17832:	00b3      	lsls	r3, r6, #2
   17834:	58eb      	ldr	r3, [r5, r3]
   17836:	4798      	blx	r3
   17838:	3601      	adds	r6, #1
   1783a:	e7f2      	b.n	17822 <__libc_init_array+0x1e>
   1783c:	0001a600 	.word	0x0001a600
   17840:	0001a600 	.word	0x0001a600
   17844:	0001a600 	.word	0x0001a600
   17848:	0001a604 	.word	0x0001a604

0001784c <memcmp>:
   1784c:	b530      	push	{r4, r5, lr}
   1784e:	2400      	movs	r4, #0
   17850:	42a2      	cmp	r2, r4
   17852:	d101      	bne.n	17858 <memcmp+0xc>
   17854:	2000      	movs	r0, #0
   17856:	e005      	b.n	17864 <memcmp+0x18>
   17858:	5d03      	ldrb	r3, [r0, r4]
   1785a:	1c65      	adds	r5, r4, #1
   1785c:	5d0c      	ldrb	r4, [r1, r4]
   1785e:	42a3      	cmp	r3, r4
   17860:	d001      	beq.n	17866 <memcmp+0x1a>
   17862:	1b18      	subs	r0, r3, r4
   17864:	bd30      	pop	{r4, r5, pc}
   17866:	002c      	movs	r4, r5
   17868:	e7f2      	b.n	17850 <memcmp+0x4>

0001786a <memcpy>:
   1786a:	2300      	movs	r3, #0
   1786c:	b510      	push	{r4, lr}
   1786e:	429a      	cmp	r2, r3
   17870:	d100      	bne.n	17874 <memcpy+0xa>
   17872:	bd10      	pop	{r4, pc}
   17874:	5ccc      	ldrb	r4, [r1, r3]
   17876:	54c4      	strb	r4, [r0, r3]
   17878:	3301      	adds	r3, #1
   1787a:	e7f8      	b.n	1786e <memcpy+0x4>

0001787c <memset>:
   1787c:	0003      	movs	r3, r0
   1787e:	1882      	adds	r2, r0, r2
   17880:	4293      	cmp	r3, r2
   17882:	d100      	bne.n	17886 <memset+0xa>
   17884:	4770      	bx	lr
   17886:	7019      	strb	r1, [r3, #0]
   17888:	3301      	adds	r3, #1
   1788a:	e7f9      	b.n	17880 <memset+0x4>

0001788c <__sfputc_r>:
   1788c:	6893      	ldr	r3, [r2, #8]
   1788e:	b510      	push	{r4, lr}
   17890:	3b01      	subs	r3, #1
   17892:	6093      	str	r3, [r2, #8]
   17894:	2b00      	cmp	r3, #0
   17896:	da05      	bge.n	178a4 <__sfputc_r+0x18>
   17898:	6994      	ldr	r4, [r2, #24]
   1789a:	42a3      	cmp	r3, r4
   1789c:	db08      	blt.n	178b0 <__sfputc_r+0x24>
   1789e:	b2cb      	uxtb	r3, r1
   178a0:	2b0a      	cmp	r3, #10
   178a2:	d005      	beq.n	178b0 <__sfputc_r+0x24>
   178a4:	6813      	ldr	r3, [r2, #0]
   178a6:	1c58      	adds	r0, r3, #1
   178a8:	6010      	str	r0, [r2, #0]
   178aa:	7019      	strb	r1, [r3, #0]
   178ac:	b2c8      	uxtb	r0, r1
   178ae:	bd10      	pop	{r4, pc}
   178b0:	f000 fca2 	bl	181f8 <__swbuf_r>
   178b4:	e7fb      	b.n	178ae <__sfputc_r+0x22>

000178b6 <__sfputs_r>:
   178b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   178b8:	0006      	movs	r6, r0
   178ba:	000f      	movs	r7, r1
   178bc:	0014      	movs	r4, r2
   178be:	18d5      	adds	r5, r2, r3
   178c0:	42ac      	cmp	r4, r5
   178c2:	d101      	bne.n	178c8 <__sfputs_r+0x12>
   178c4:	2000      	movs	r0, #0
   178c6:	e007      	b.n	178d8 <__sfputs_r+0x22>
   178c8:	7821      	ldrb	r1, [r4, #0]
   178ca:	003a      	movs	r2, r7
   178cc:	0030      	movs	r0, r6
   178ce:	f7ff ffdd 	bl	1788c <__sfputc_r>
   178d2:	3401      	adds	r4, #1
   178d4:	1c43      	adds	r3, r0, #1
   178d6:	d1f3      	bne.n	178c0 <__sfputs_r+0xa>
   178d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   178da:	Address 0x000178da is out of bounds.


000178dc <_vfiprintf_r>:
   178dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   178de:	b09f      	sub	sp, #124	; 0x7c
   178e0:	0006      	movs	r6, r0
   178e2:	000f      	movs	r7, r1
   178e4:	0014      	movs	r4, r2
   178e6:	9305      	str	r3, [sp, #20]
   178e8:	2800      	cmp	r0, #0
   178ea:	d004      	beq.n	178f6 <_vfiprintf_r+0x1a>
   178ec:	6983      	ldr	r3, [r0, #24]
   178ee:	2b00      	cmp	r3, #0
   178f0:	d101      	bne.n	178f6 <_vfiprintf_r+0x1a>
   178f2:	f000 fe4d 	bl	18590 <__sinit>
   178f6:	4b7f      	ldr	r3, [pc, #508]	; (17af4 <_vfiprintf_r+0x218>)
   178f8:	429f      	cmp	r7, r3
   178fa:	d15c      	bne.n	179b6 <_vfiprintf_r+0xda>
   178fc:	6877      	ldr	r7, [r6, #4]
   178fe:	89bb      	ldrh	r3, [r7, #12]
   17900:	071b      	lsls	r3, r3, #28
   17902:	d562      	bpl.n	179ca <_vfiprintf_r+0xee>
   17904:	693b      	ldr	r3, [r7, #16]
   17906:	2b00      	cmp	r3, #0
   17908:	d05f      	beq.n	179ca <_vfiprintf_r+0xee>
   1790a:	2300      	movs	r3, #0
   1790c:	ad06      	add	r5, sp, #24
   1790e:	616b      	str	r3, [r5, #20]
   17910:	3320      	adds	r3, #32
   17912:	766b      	strb	r3, [r5, #25]
   17914:	3310      	adds	r3, #16
   17916:	76ab      	strb	r3, [r5, #26]
   17918:	9402      	str	r4, [sp, #8]
   1791a:	9c02      	ldr	r4, [sp, #8]
   1791c:	7823      	ldrb	r3, [r4, #0]
   1791e:	2b00      	cmp	r3, #0
   17920:	d15d      	bne.n	179de <_vfiprintf_r+0x102>
   17922:	9b02      	ldr	r3, [sp, #8]
   17924:	1ae3      	subs	r3, r4, r3
   17926:	9304      	str	r3, [sp, #16]
   17928:	d00d      	beq.n	17946 <_vfiprintf_r+0x6a>
   1792a:	9b04      	ldr	r3, [sp, #16]
   1792c:	9a02      	ldr	r2, [sp, #8]
   1792e:	0039      	movs	r1, r7
   17930:	0030      	movs	r0, r6
   17932:	f7ff ffc0 	bl	178b6 <__sfputs_r>
   17936:	1c43      	adds	r3, r0, #1
   17938:	d100      	bne.n	1793c <_vfiprintf_r+0x60>
   1793a:	e0cc      	b.n	17ad6 <_vfiprintf_r+0x1fa>
   1793c:	696a      	ldr	r2, [r5, #20]
   1793e:	9b04      	ldr	r3, [sp, #16]
   17940:	4694      	mov	ip, r2
   17942:	4463      	add	r3, ip
   17944:	616b      	str	r3, [r5, #20]
   17946:	7823      	ldrb	r3, [r4, #0]
   17948:	2b00      	cmp	r3, #0
   1794a:	d100      	bne.n	1794e <_vfiprintf_r+0x72>
   1794c:	e0c3      	b.n	17ad6 <_vfiprintf_r+0x1fa>
   1794e:	2201      	movs	r2, #1
   17950:	2300      	movs	r3, #0
   17952:	4252      	negs	r2, r2
   17954:	606a      	str	r2, [r5, #4]
   17956:	a902      	add	r1, sp, #8
   17958:	3254      	adds	r2, #84	; 0x54
   1795a:	1852      	adds	r2, r2, r1
   1795c:	3401      	adds	r4, #1
   1795e:	602b      	str	r3, [r5, #0]
   17960:	60eb      	str	r3, [r5, #12]
   17962:	60ab      	str	r3, [r5, #8]
   17964:	7013      	strb	r3, [r2, #0]
   17966:	65ab      	str	r3, [r5, #88]	; 0x58
   17968:	7821      	ldrb	r1, [r4, #0]
   1796a:	2205      	movs	r2, #5
   1796c:	4862      	ldr	r0, [pc, #392]	; (17af8 <_vfiprintf_r+0x21c>)
   1796e:	f000 ff1b 	bl	187a8 <memchr>
   17972:	1c63      	adds	r3, r4, #1
   17974:	469c      	mov	ip, r3
   17976:	2800      	cmp	r0, #0
   17978:	d135      	bne.n	179e6 <_vfiprintf_r+0x10a>
   1797a:	6829      	ldr	r1, [r5, #0]
   1797c:	06cb      	lsls	r3, r1, #27
   1797e:	d504      	bpl.n	1798a <_vfiprintf_r+0xae>
   17980:	2353      	movs	r3, #83	; 0x53
   17982:	aa02      	add	r2, sp, #8
   17984:	3020      	adds	r0, #32
   17986:	189b      	adds	r3, r3, r2
   17988:	7018      	strb	r0, [r3, #0]
   1798a:	070b      	lsls	r3, r1, #28
   1798c:	d504      	bpl.n	17998 <_vfiprintf_r+0xbc>
   1798e:	2353      	movs	r3, #83	; 0x53
   17990:	202b      	movs	r0, #43	; 0x2b
   17992:	aa02      	add	r2, sp, #8
   17994:	189b      	adds	r3, r3, r2
   17996:	7018      	strb	r0, [r3, #0]
   17998:	7823      	ldrb	r3, [r4, #0]
   1799a:	2b2a      	cmp	r3, #42	; 0x2a
   1799c:	d02c      	beq.n	179f8 <_vfiprintf_r+0x11c>
   1799e:	2000      	movs	r0, #0
   179a0:	210a      	movs	r1, #10
   179a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   179a4:	7822      	ldrb	r2, [r4, #0]
   179a6:	3a30      	subs	r2, #48	; 0x30
   179a8:	2a09      	cmp	r2, #9
   179aa:	d800      	bhi.n	179ae <_vfiprintf_r+0xd2>
   179ac:	e06b      	b.n	17a86 <_vfiprintf_r+0x1aa>
   179ae:	2800      	cmp	r0, #0
   179b0:	d02a      	beq.n	17a08 <_vfiprintf_r+0x12c>
   179b2:	9309      	str	r3, [sp, #36]	; 0x24
   179b4:	e028      	b.n	17a08 <_vfiprintf_r+0x12c>
   179b6:	4b51      	ldr	r3, [pc, #324]	; (17afc <_vfiprintf_r+0x220>)
   179b8:	429f      	cmp	r7, r3
   179ba:	d101      	bne.n	179c0 <_vfiprintf_r+0xe4>
   179bc:	68b7      	ldr	r7, [r6, #8]
   179be:	e79e      	b.n	178fe <_vfiprintf_r+0x22>
   179c0:	4b4f      	ldr	r3, [pc, #316]	; (17b00 <_vfiprintf_r+0x224>)
   179c2:	429f      	cmp	r7, r3
   179c4:	d19b      	bne.n	178fe <_vfiprintf_r+0x22>
   179c6:	68f7      	ldr	r7, [r6, #12]
   179c8:	e799      	b.n	178fe <_vfiprintf_r+0x22>
   179ca:	0039      	movs	r1, r7
   179cc:	0030      	movs	r0, r6
   179ce:	f000 fc69 	bl	182a4 <__swsetup_r>
   179d2:	2800      	cmp	r0, #0
   179d4:	d099      	beq.n	1790a <_vfiprintf_r+0x2e>
   179d6:	2001      	movs	r0, #1
   179d8:	4240      	negs	r0, r0
   179da:	b01f      	add	sp, #124	; 0x7c
   179dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   179de:	2b25      	cmp	r3, #37	; 0x25
   179e0:	d09f      	beq.n	17922 <_vfiprintf_r+0x46>
   179e2:	3401      	adds	r4, #1
   179e4:	e79a      	b.n	1791c <_vfiprintf_r+0x40>
   179e6:	4b44      	ldr	r3, [pc, #272]	; (17af8 <_vfiprintf_r+0x21c>)
   179e8:	6829      	ldr	r1, [r5, #0]
   179ea:	1ac0      	subs	r0, r0, r3
   179ec:	2301      	movs	r3, #1
   179ee:	4083      	lsls	r3, r0
   179f0:	430b      	orrs	r3, r1
   179f2:	602b      	str	r3, [r5, #0]
   179f4:	4664      	mov	r4, ip
   179f6:	e7b7      	b.n	17968 <_vfiprintf_r+0x8c>
   179f8:	9b05      	ldr	r3, [sp, #20]
   179fa:	1d18      	adds	r0, r3, #4
   179fc:	681b      	ldr	r3, [r3, #0]
   179fe:	9005      	str	r0, [sp, #20]
   17a00:	2b00      	cmp	r3, #0
   17a02:	db3a      	blt.n	17a7a <_vfiprintf_r+0x19e>
   17a04:	9309      	str	r3, [sp, #36]	; 0x24
   17a06:	4664      	mov	r4, ip
   17a08:	7823      	ldrb	r3, [r4, #0]
   17a0a:	2b2e      	cmp	r3, #46	; 0x2e
   17a0c:	d10b      	bne.n	17a26 <_vfiprintf_r+0x14a>
   17a0e:	7863      	ldrb	r3, [r4, #1]
   17a10:	1c62      	adds	r2, r4, #1
   17a12:	2b2a      	cmp	r3, #42	; 0x2a
   17a14:	d13f      	bne.n	17a96 <_vfiprintf_r+0x1ba>
   17a16:	9b05      	ldr	r3, [sp, #20]
   17a18:	3402      	adds	r4, #2
   17a1a:	1d1a      	adds	r2, r3, #4
   17a1c:	681b      	ldr	r3, [r3, #0]
   17a1e:	9205      	str	r2, [sp, #20]
   17a20:	2b00      	cmp	r3, #0
   17a22:	db35      	blt.n	17a90 <_vfiprintf_r+0x1b4>
   17a24:	9307      	str	r3, [sp, #28]
   17a26:	7821      	ldrb	r1, [r4, #0]
   17a28:	2203      	movs	r2, #3
   17a2a:	4836      	ldr	r0, [pc, #216]	; (17b04 <_vfiprintf_r+0x228>)
   17a2c:	f000 febc 	bl	187a8 <memchr>
   17a30:	2800      	cmp	r0, #0
   17a32:	d007      	beq.n	17a44 <_vfiprintf_r+0x168>
   17a34:	4b33      	ldr	r3, [pc, #204]	; (17b04 <_vfiprintf_r+0x228>)
   17a36:	682a      	ldr	r2, [r5, #0]
   17a38:	1ac0      	subs	r0, r0, r3
   17a3a:	2340      	movs	r3, #64	; 0x40
   17a3c:	4083      	lsls	r3, r0
   17a3e:	4313      	orrs	r3, r2
   17a40:	602b      	str	r3, [r5, #0]
   17a42:	3401      	adds	r4, #1
   17a44:	7821      	ldrb	r1, [r4, #0]
   17a46:	1c63      	adds	r3, r4, #1
   17a48:	2206      	movs	r2, #6
   17a4a:	482f      	ldr	r0, [pc, #188]	; (17b08 <_vfiprintf_r+0x22c>)
   17a4c:	9302      	str	r3, [sp, #8]
   17a4e:	7629      	strb	r1, [r5, #24]
   17a50:	f000 feaa 	bl	187a8 <memchr>
   17a54:	2800      	cmp	r0, #0
   17a56:	d044      	beq.n	17ae2 <_vfiprintf_r+0x206>
   17a58:	4b2c      	ldr	r3, [pc, #176]	; (17b0c <_vfiprintf_r+0x230>)
   17a5a:	2b00      	cmp	r3, #0
   17a5c:	d12f      	bne.n	17abe <_vfiprintf_r+0x1e2>
   17a5e:	6829      	ldr	r1, [r5, #0]
   17a60:	9b05      	ldr	r3, [sp, #20]
   17a62:	2207      	movs	r2, #7
   17a64:	05c9      	lsls	r1, r1, #23
   17a66:	d528      	bpl.n	17aba <_vfiprintf_r+0x1de>
   17a68:	189b      	adds	r3, r3, r2
   17a6a:	4393      	bics	r3, r2
   17a6c:	3308      	adds	r3, #8
   17a6e:	9305      	str	r3, [sp, #20]
   17a70:	696b      	ldr	r3, [r5, #20]
   17a72:	9a03      	ldr	r2, [sp, #12]
   17a74:	189b      	adds	r3, r3, r2
   17a76:	616b      	str	r3, [r5, #20]
   17a78:	e74f      	b.n	1791a <_vfiprintf_r+0x3e>
   17a7a:	425b      	negs	r3, r3
   17a7c:	60eb      	str	r3, [r5, #12]
   17a7e:	2302      	movs	r3, #2
   17a80:	430b      	orrs	r3, r1
   17a82:	602b      	str	r3, [r5, #0]
   17a84:	e7bf      	b.n	17a06 <_vfiprintf_r+0x12a>
   17a86:	434b      	muls	r3, r1
   17a88:	3401      	adds	r4, #1
   17a8a:	189b      	adds	r3, r3, r2
   17a8c:	2001      	movs	r0, #1
   17a8e:	e789      	b.n	179a4 <_vfiprintf_r+0xc8>
   17a90:	2301      	movs	r3, #1
   17a92:	425b      	negs	r3, r3
   17a94:	e7c6      	b.n	17a24 <_vfiprintf_r+0x148>
   17a96:	2300      	movs	r3, #0
   17a98:	0014      	movs	r4, r2
   17a9a:	200a      	movs	r0, #10
   17a9c:	001a      	movs	r2, r3
   17a9e:	606b      	str	r3, [r5, #4]
   17aa0:	7821      	ldrb	r1, [r4, #0]
   17aa2:	3930      	subs	r1, #48	; 0x30
   17aa4:	2909      	cmp	r1, #9
   17aa6:	d903      	bls.n	17ab0 <_vfiprintf_r+0x1d4>
   17aa8:	2b00      	cmp	r3, #0
   17aaa:	d0bc      	beq.n	17a26 <_vfiprintf_r+0x14a>
   17aac:	9207      	str	r2, [sp, #28]
   17aae:	e7ba      	b.n	17a26 <_vfiprintf_r+0x14a>
   17ab0:	4342      	muls	r2, r0
   17ab2:	3401      	adds	r4, #1
   17ab4:	1852      	adds	r2, r2, r1
   17ab6:	2301      	movs	r3, #1
   17ab8:	e7f2      	b.n	17aa0 <_vfiprintf_r+0x1c4>
   17aba:	3307      	adds	r3, #7
   17abc:	e7d5      	b.n	17a6a <_vfiprintf_r+0x18e>
   17abe:	ab05      	add	r3, sp, #20
   17ac0:	9300      	str	r3, [sp, #0]
   17ac2:	003a      	movs	r2, r7
   17ac4:	4b12      	ldr	r3, [pc, #72]	; (17b10 <_vfiprintf_r+0x234>)
   17ac6:	0029      	movs	r1, r5
   17ac8:	0030      	movs	r0, r6
   17aca:	e000      	b.n	17ace <_vfiprintf_r+0x1f2>
   17acc:	bf00      	nop
   17ace:	9003      	str	r0, [sp, #12]
   17ad0:	9b03      	ldr	r3, [sp, #12]
   17ad2:	3301      	adds	r3, #1
   17ad4:	d1cc      	bne.n	17a70 <_vfiprintf_r+0x194>
   17ad6:	89bb      	ldrh	r3, [r7, #12]
   17ad8:	065b      	lsls	r3, r3, #25
   17ada:	d500      	bpl.n	17ade <_vfiprintf_r+0x202>
   17adc:	e77b      	b.n	179d6 <_vfiprintf_r+0xfa>
   17ade:	980b      	ldr	r0, [sp, #44]	; 0x2c
   17ae0:	e77b      	b.n	179da <_vfiprintf_r+0xfe>
   17ae2:	ab05      	add	r3, sp, #20
   17ae4:	9300      	str	r3, [sp, #0]
   17ae6:	003a      	movs	r2, r7
   17ae8:	4b09      	ldr	r3, [pc, #36]	; (17b10 <_vfiprintf_r+0x234>)
   17aea:	0029      	movs	r1, r5
   17aec:	0030      	movs	r0, r6
   17aee:	f000 f87f 	bl	17bf0 <_printf_i>
   17af2:	e7ec      	b.n	17ace <_vfiprintf_r+0x1f2>
   17af4:	0001a5b4 	.word	0x0001a5b4
   17af8:	0001a560 	.word	0x0001a560
   17afc:	0001a5d4 	.word	0x0001a5d4
   17b00:	0001a594 	.word	0x0001a594
   17b04:	0001a566 	.word	0x0001a566
   17b08:	0001a56a 	.word	0x0001a56a
   17b0c:	00000000 	.word	0x00000000
   17b10:	000178b7 	.word	0x000178b7

00017b14 <_printf_common>:
   17b14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17b16:	0015      	movs	r5, r2
   17b18:	9301      	str	r3, [sp, #4]
   17b1a:	688a      	ldr	r2, [r1, #8]
   17b1c:	690b      	ldr	r3, [r1, #16]
   17b1e:	9000      	str	r0, [sp, #0]
   17b20:	000c      	movs	r4, r1
   17b22:	4293      	cmp	r3, r2
   17b24:	da00      	bge.n	17b28 <_printf_common+0x14>
   17b26:	0013      	movs	r3, r2
   17b28:	0022      	movs	r2, r4
   17b2a:	602b      	str	r3, [r5, #0]
   17b2c:	3243      	adds	r2, #67	; 0x43
   17b2e:	7812      	ldrb	r2, [r2, #0]
   17b30:	2a00      	cmp	r2, #0
   17b32:	d001      	beq.n	17b38 <_printf_common+0x24>
   17b34:	3301      	adds	r3, #1
   17b36:	602b      	str	r3, [r5, #0]
   17b38:	6823      	ldr	r3, [r4, #0]
   17b3a:	069b      	lsls	r3, r3, #26
   17b3c:	d502      	bpl.n	17b44 <_printf_common+0x30>
   17b3e:	682b      	ldr	r3, [r5, #0]
   17b40:	3302      	adds	r3, #2
   17b42:	602b      	str	r3, [r5, #0]
   17b44:	2706      	movs	r7, #6
   17b46:	6823      	ldr	r3, [r4, #0]
   17b48:	401f      	ands	r7, r3
   17b4a:	d027      	beq.n	17b9c <_printf_common+0x88>
   17b4c:	0023      	movs	r3, r4
   17b4e:	3343      	adds	r3, #67	; 0x43
   17b50:	781b      	ldrb	r3, [r3, #0]
   17b52:	1e5a      	subs	r2, r3, #1
   17b54:	4193      	sbcs	r3, r2
   17b56:	6822      	ldr	r2, [r4, #0]
   17b58:	0692      	lsls	r2, r2, #26
   17b5a:	d430      	bmi.n	17bbe <_printf_common+0xaa>
   17b5c:	0022      	movs	r2, r4
   17b5e:	9901      	ldr	r1, [sp, #4]
   17b60:	3243      	adds	r2, #67	; 0x43
   17b62:	9800      	ldr	r0, [sp, #0]
   17b64:	9e08      	ldr	r6, [sp, #32]
   17b66:	47b0      	blx	r6
   17b68:	1c43      	adds	r3, r0, #1
   17b6a:	d025      	beq.n	17bb8 <_printf_common+0xa4>
   17b6c:	2306      	movs	r3, #6
   17b6e:	6820      	ldr	r0, [r4, #0]
   17b70:	682a      	ldr	r2, [r5, #0]
   17b72:	68e1      	ldr	r1, [r4, #12]
   17b74:	4003      	ands	r3, r0
   17b76:	2500      	movs	r5, #0
   17b78:	2b04      	cmp	r3, #4
   17b7a:	d103      	bne.n	17b84 <_printf_common+0x70>
   17b7c:	1a8d      	subs	r5, r1, r2
   17b7e:	43eb      	mvns	r3, r5
   17b80:	17db      	asrs	r3, r3, #31
   17b82:	401d      	ands	r5, r3
   17b84:	68a3      	ldr	r3, [r4, #8]
   17b86:	6922      	ldr	r2, [r4, #16]
   17b88:	4293      	cmp	r3, r2
   17b8a:	dd01      	ble.n	17b90 <_printf_common+0x7c>
   17b8c:	1a9b      	subs	r3, r3, r2
   17b8e:	18ed      	adds	r5, r5, r3
   17b90:	2700      	movs	r7, #0
   17b92:	42bd      	cmp	r5, r7
   17b94:	d120      	bne.n	17bd8 <_printf_common+0xc4>
   17b96:	2000      	movs	r0, #0
   17b98:	e010      	b.n	17bbc <_printf_common+0xa8>
   17b9a:	3701      	adds	r7, #1
   17b9c:	68e3      	ldr	r3, [r4, #12]
   17b9e:	682a      	ldr	r2, [r5, #0]
   17ba0:	1a9b      	subs	r3, r3, r2
   17ba2:	429f      	cmp	r7, r3
   17ba4:	dad2      	bge.n	17b4c <_printf_common+0x38>
   17ba6:	0022      	movs	r2, r4
   17ba8:	2301      	movs	r3, #1
   17baa:	3219      	adds	r2, #25
   17bac:	9901      	ldr	r1, [sp, #4]
   17bae:	9800      	ldr	r0, [sp, #0]
   17bb0:	9e08      	ldr	r6, [sp, #32]
   17bb2:	47b0      	blx	r6
   17bb4:	1c43      	adds	r3, r0, #1
   17bb6:	d1f0      	bne.n	17b9a <_printf_common+0x86>
   17bb8:	2001      	movs	r0, #1
   17bba:	4240      	negs	r0, r0
   17bbc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   17bbe:	2030      	movs	r0, #48	; 0x30
   17bc0:	18e1      	adds	r1, r4, r3
   17bc2:	3143      	adds	r1, #67	; 0x43
   17bc4:	7008      	strb	r0, [r1, #0]
   17bc6:	0021      	movs	r1, r4
   17bc8:	1c5a      	adds	r2, r3, #1
   17bca:	3145      	adds	r1, #69	; 0x45
   17bcc:	7809      	ldrb	r1, [r1, #0]
   17bce:	18a2      	adds	r2, r4, r2
   17bd0:	3243      	adds	r2, #67	; 0x43
   17bd2:	3302      	adds	r3, #2
   17bd4:	7011      	strb	r1, [r2, #0]
   17bd6:	e7c1      	b.n	17b5c <_printf_common+0x48>
   17bd8:	0022      	movs	r2, r4
   17bda:	2301      	movs	r3, #1
   17bdc:	321a      	adds	r2, #26
   17bde:	9901      	ldr	r1, [sp, #4]
   17be0:	9800      	ldr	r0, [sp, #0]
   17be2:	9e08      	ldr	r6, [sp, #32]
   17be4:	47b0      	blx	r6
   17be6:	1c43      	adds	r3, r0, #1
   17be8:	d0e6      	beq.n	17bb8 <_printf_common+0xa4>
   17bea:	3701      	adds	r7, #1
   17bec:	e7d1      	b.n	17b92 <_printf_common+0x7e>
   17bee:	Address 0x00017bee is out of bounds.


00017bf0 <_printf_i>:
   17bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
   17bf2:	b08b      	sub	sp, #44	; 0x2c
   17bf4:	9206      	str	r2, [sp, #24]
   17bf6:	000a      	movs	r2, r1
   17bf8:	3243      	adds	r2, #67	; 0x43
   17bfa:	9307      	str	r3, [sp, #28]
   17bfc:	9005      	str	r0, [sp, #20]
   17bfe:	9204      	str	r2, [sp, #16]
   17c00:	7e0a      	ldrb	r2, [r1, #24]
   17c02:	000c      	movs	r4, r1
   17c04:	9b10      	ldr	r3, [sp, #64]	; 0x40
   17c06:	2a6e      	cmp	r2, #110	; 0x6e
   17c08:	d100      	bne.n	17c0c <_printf_i+0x1c>
   17c0a:	e08f      	b.n	17d2c <_printf_i+0x13c>
   17c0c:	d817      	bhi.n	17c3e <_printf_i+0x4e>
   17c0e:	2a63      	cmp	r2, #99	; 0x63
   17c10:	d02c      	beq.n	17c6c <_printf_i+0x7c>
   17c12:	d808      	bhi.n	17c26 <_printf_i+0x36>
   17c14:	2a00      	cmp	r2, #0
   17c16:	d100      	bne.n	17c1a <_printf_i+0x2a>
   17c18:	e099      	b.n	17d4e <_printf_i+0x15e>
   17c1a:	2a58      	cmp	r2, #88	; 0x58
   17c1c:	d054      	beq.n	17cc8 <_printf_i+0xd8>
   17c1e:	0026      	movs	r6, r4
   17c20:	3642      	adds	r6, #66	; 0x42
   17c22:	7032      	strb	r2, [r6, #0]
   17c24:	e029      	b.n	17c7a <_printf_i+0x8a>
   17c26:	2a64      	cmp	r2, #100	; 0x64
   17c28:	d001      	beq.n	17c2e <_printf_i+0x3e>
   17c2a:	2a69      	cmp	r2, #105	; 0x69
   17c2c:	d1f7      	bne.n	17c1e <_printf_i+0x2e>
   17c2e:	6821      	ldr	r1, [r4, #0]
   17c30:	681a      	ldr	r2, [r3, #0]
   17c32:	0608      	lsls	r0, r1, #24
   17c34:	d523      	bpl.n	17c7e <_printf_i+0x8e>
   17c36:	1d11      	adds	r1, r2, #4
   17c38:	6019      	str	r1, [r3, #0]
   17c3a:	6815      	ldr	r5, [r2, #0]
   17c3c:	e025      	b.n	17c8a <_printf_i+0x9a>
   17c3e:	2a73      	cmp	r2, #115	; 0x73
   17c40:	d100      	bne.n	17c44 <_printf_i+0x54>
   17c42:	e088      	b.n	17d56 <_printf_i+0x166>
   17c44:	d808      	bhi.n	17c58 <_printf_i+0x68>
   17c46:	2a6f      	cmp	r2, #111	; 0x6f
   17c48:	d029      	beq.n	17c9e <_printf_i+0xae>
   17c4a:	2a70      	cmp	r2, #112	; 0x70
   17c4c:	d1e7      	bne.n	17c1e <_printf_i+0x2e>
   17c4e:	2220      	movs	r2, #32
   17c50:	6809      	ldr	r1, [r1, #0]
   17c52:	430a      	orrs	r2, r1
   17c54:	6022      	str	r2, [r4, #0]
   17c56:	e003      	b.n	17c60 <_printf_i+0x70>
   17c58:	2a75      	cmp	r2, #117	; 0x75
   17c5a:	d020      	beq.n	17c9e <_printf_i+0xae>
   17c5c:	2a78      	cmp	r2, #120	; 0x78
   17c5e:	d1de      	bne.n	17c1e <_printf_i+0x2e>
   17c60:	0022      	movs	r2, r4
   17c62:	2178      	movs	r1, #120	; 0x78
   17c64:	3245      	adds	r2, #69	; 0x45
   17c66:	7011      	strb	r1, [r2, #0]
   17c68:	4a6c      	ldr	r2, [pc, #432]	; (17e1c <_printf_i+0x22c>)
   17c6a:	e030      	b.n	17cce <_printf_i+0xde>
   17c6c:	000e      	movs	r6, r1
   17c6e:	681a      	ldr	r2, [r3, #0]
   17c70:	3642      	adds	r6, #66	; 0x42
   17c72:	1d11      	adds	r1, r2, #4
   17c74:	6019      	str	r1, [r3, #0]
   17c76:	6813      	ldr	r3, [r2, #0]
   17c78:	7033      	strb	r3, [r6, #0]
   17c7a:	2301      	movs	r3, #1
   17c7c:	e079      	b.n	17d72 <_printf_i+0x182>
   17c7e:	0649      	lsls	r1, r1, #25
   17c80:	d5d9      	bpl.n	17c36 <_printf_i+0x46>
   17c82:	1d11      	adds	r1, r2, #4
   17c84:	6019      	str	r1, [r3, #0]
   17c86:	2300      	movs	r3, #0
   17c88:	5ed5      	ldrsh	r5, [r2, r3]
   17c8a:	2d00      	cmp	r5, #0
   17c8c:	da03      	bge.n	17c96 <_printf_i+0xa6>
   17c8e:	232d      	movs	r3, #45	; 0x2d
   17c90:	9a04      	ldr	r2, [sp, #16]
   17c92:	426d      	negs	r5, r5
   17c94:	7013      	strb	r3, [r2, #0]
   17c96:	4b62      	ldr	r3, [pc, #392]	; (17e20 <_printf_i+0x230>)
   17c98:	270a      	movs	r7, #10
   17c9a:	9303      	str	r3, [sp, #12]
   17c9c:	e02f      	b.n	17cfe <_printf_i+0x10e>
   17c9e:	6820      	ldr	r0, [r4, #0]
   17ca0:	6819      	ldr	r1, [r3, #0]
   17ca2:	0605      	lsls	r5, r0, #24
   17ca4:	d503      	bpl.n	17cae <_printf_i+0xbe>
   17ca6:	1d08      	adds	r0, r1, #4
   17ca8:	6018      	str	r0, [r3, #0]
   17caa:	680d      	ldr	r5, [r1, #0]
   17cac:	e005      	b.n	17cba <_printf_i+0xca>
   17cae:	0640      	lsls	r0, r0, #25
   17cb0:	d5f9      	bpl.n	17ca6 <_printf_i+0xb6>
   17cb2:	680d      	ldr	r5, [r1, #0]
   17cb4:	1d08      	adds	r0, r1, #4
   17cb6:	6018      	str	r0, [r3, #0]
   17cb8:	b2ad      	uxth	r5, r5
   17cba:	4b59      	ldr	r3, [pc, #356]	; (17e20 <_printf_i+0x230>)
   17cbc:	2708      	movs	r7, #8
   17cbe:	9303      	str	r3, [sp, #12]
   17cc0:	2a6f      	cmp	r2, #111	; 0x6f
   17cc2:	d018      	beq.n	17cf6 <_printf_i+0x106>
   17cc4:	270a      	movs	r7, #10
   17cc6:	e016      	b.n	17cf6 <_printf_i+0x106>
   17cc8:	3145      	adds	r1, #69	; 0x45
   17cca:	700a      	strb	r2, [r1, #0]
   17ccc:	4a54      	ldr	r2, [pc, #336]	; (17e20 <_printf_i+0x230>)
   17cce:	9203      	str	r2, [sp, #12]
   17cd0:	681a      	ldr	r2, [r3, #0]
   17cd2:	6821      	ldr	r1, [r4, #0]
   17cd4:	1d10      	adds	r0, r2, #4
   17cd6:	6018      	str	r0, [r3, #0]
   17cd8:	6815      	ldr	r5, [r2, #0]
   17cda:	0608      	lsls	r0, r1, #24
   17cdc:	d522      	bpl.n	17d24 <_printf_i+0x134>
   17cde:	07cb      	lsls	r3, r1, #31
   17ce0:	d502      	bpl.n	17ce8 <_printf_i+0xf8>
   17ce2:	2320      	movs	r3, #32
   17ce4:	4319      	orrs	r1, r3
   17ce6:	6021      	str	r1, [r4, #0]
   17ce8:	2710      	movs	r7, #16
   17cea:	2d00      	cmp	r5, #0
   17cec:	d103      	bne.n	17cf6 <_printf_i+0x106>
   17cee:	2320      	movs	r3, #32
   17cf0:	6822      	ldr	r2, [r4, #0]
   17cf2:	439a      	bics	r2, r3
   17cf4:	6022      	str	r2, [r4, #0]
   17cf6:	0023      	movs	r3, r4
   17cf8:	2200      	movs	r2, #0
   17cfa:	3343      	adds	r3, #67	; 0x43
   17cfc:	701a      	strb	r2, [r3, #0]
   17cfe:	6863      	ldr	r3, [r4, #4]
   17d00:	60a3      	str	r3, [r4, #8]
   17d02:	2b00      	cmp	r3, #0
   17d04:	db5c      	blt.n	17dc0 <_printf_i+0x1d0>
   17d06:	2204      	movs	r2, #4
   17d08:	6821      	ldr	r1, [r4, #0]
   17d0a:	4391      	bics	r1, r2
   17d0c:	6021      	str	r1, [r4, #0]
   17d0e:	2d00      	cmp	r5, #0
   17d10:	d158      	bne.n	17dc4 <_printf_i+0x1d4>
   17d12:	9e04      	ldr	r6, [sp, #16]
   17d14:	2b00      	cmp	r3, #0
   17d16:	d064      	beq.n	17de2 <_printf_i+0x1f2>
   17d18:	0026      	movs	r6, r4
   17d1a:	9b03      	ldr	r3, [sp, #12]
   17d1c:	3642      	adds	r6, #66	; 0x42
   17d1e:	781b      	ldrb	r3, [r3, #0]
   17d20:	7033      	strb	r3, [r6, #0]
   17d22:	e05e      	b.n	17de2 <_printf_i+0x1f2>
   17d24:	0648      	lsls	r0, r1, #25
   17d26:	d5da      	bpl.n	17cde <_printf_i+0xee>
   17d28:	b2ad      	uxth	r5, r5
   17d2a:	e7d8      	b.n	17cde <_printf_i+0xee>
   17d2c:	6809      	ldr	r1, [r1, #0]
   17d2e:	681a      	ldr	r2, [r3, #0]
   17d30:	0608      	lsls	r0, r1, #24
   17d32:	d505      	bpl.n	17d40 <_printf_i+0x150>
   17d34:	1d11      	adds	r1, r2, #4
   17d36:	6019      	str	r1, [r3, #0]
   17d38:	6813      	ldr	r3, [r2, #0]
   17d3a:	6962      	ldr	r2, [r4, #20]
   17d3c:	601a      	str	r2, [r3, #0]
   17d3e:	e006      	b.n	17d4e <_printf_i+0x15e>
   17d40:	0649      	lsls	r1, r1, #25
   17d42:	d5f7      	bpl.n	17d34 <_printf_i+0x144>
   17d44:	1d11      	adds	r1, r2, #4
   17d46:	6019      	str	r1, [r3, #0]
   17d48:	6813      	ldr	r3, [r2, #0]
   17d4a:	8aa2      	ldrh	r2, [r4, #20]
   17d4c:	801a      	strh	r2, [r3, #0]
   17d4e:	2300      	movs	r3, #0
   17d50:	9e04      	ldr	r6, [sp, #16]
   17d52:	6123      	str	r3, [r4, #16]
   17d54:	e054      	b.n	17e00 <_printf_i+0x210>
   17d56:	681a      	ldr	r2, [r3, #0]
   17d58:	1d11      	adds	r1, r2, #4
   17d5a:	6019      	str	r1, [r3, #0]
   17d5c:	6816      	ldr	r6, [r2, #0]
   17d5e:	2100      	movs	r1, #0
   17d60:	6862      	ldr	r2, [r4, #4]
   17d62:	0030      	movs	r0, r6
   17d64:	f000 fd20 	bl	187a8 <memchr>
   17d68:	2800      	cmp	r0, #0
   17d6a:	d001      	beq.n	17d70 <_printf_i+0x180>
   17d6c:	1b80      	subs	r0, r0, r6
   17d6e:	6060      	str	r0, [r4, #4]
   17d70:	6863      	ldr	r3, [r4, #4]
   17d72:	6123      	str	r3, [r4, #16]
   17d74:	2300      	movs	r3, #0
   17d76:	9a04      	ldr	r2, [sp, #16]
   17d78:	7013      	strb	r3, [r2, #0]
   17d7a:	e041      	b.n	17e00 <_printf_i+0x210>
   17d7c:	6923      	ldr	r3, [r4, #16]
   17d7e:	0032      	movs	r2, r6
   17d80:	9906      	ldr	r1, [sp, #24]
   17d82:	9805      	ldr	r0, [sp, #20]
   17d84:	9d07      	ldr	r5, [sp, #28]
   17d86:	47a8      	blx	r5
   17d88:	1c43      	adds	r3, r0, #1
   17d8a:	d043      	beq.n	17e14 <_printf_i+0x224>
   17d8c:	6823      	ldr	r3, [r4, #0]
   17d8e:	2500      	movs	r5, #0
   17d90:	079b      	lsls	r3, r3, #30
   17d92:	d40f      	bmi.n	17db4 <_printf_i+0x1c4>
   17d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17d96:	68e0      	ldr	r0, [r4, #12]
   17d98:	4298      	cmp	r0, r3
   17d9a:	da3d      	bge.n	17e18 <_printf_i+0x228>
   17d9c:	0018      	movs	r0, r3
   17d9e:	e03b      	b.n	17e18 <_printf_i+0x228>
   17da0:	0022      	movs	r2, r4
   17da2:	2301      	movs	r3, #1
   17da4:	3219      	adds	r2, #25
   17da6:	9906      	ldr	r1, [sp, #24]
   17da8:	9805      	ldr	r0, [sp, #20]
   17daa:	9e07      	ldr	r6, [sp, #28]
   17dac:	47b0      	blx	r6
   17dae:	1c43      	adds	r3, r0, #1
   17db0:	d030      	beq.n	17e14 <_printf_i+0x224>
   17db2:	3501      	adds	r5, #1
   17db4:	68e3      	ldr	r3, [r4, #12]
   17db6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   17db8:	1a9b      	subs	r3, r3, r2
   17dba:	429d      	cmp	r5, r3
   17dbc:	dbf0      	blt.n	17da0 <_printf_i+0x1b0>
   17dbe:	e7e9      	b.n	17d94 <_printf_i+0x1a4>
   17dc0:	2d00      	cmp	r5, #0
   17dc2:	d0a9      	beq.n	17d18 <_printf_i+0x128>
   17dc4:	9e04      	ldr	r6, [sp, #16]
   17dc6:	0028      	movs	r0, r5
   17dc8:	0039      	movs	r1, r7
   17dca:	f7fc fca3 	bl	14714 <__aeabi_uidivmod>
   17dce:	9b03      	ldr	r3, [sp, #12]
   17dd0:	3e01      	subs	r6, #1
   17dd2:	5c5b      	ldrb	r3, [r3, r1]
   17dd4:	0028      	movs	r0, r5
   17dd6:	7033      	strb	r3, [r6, #0]
   17dd8:	0039      	movs	r1, r7
   17dda:	f7fc fc15 	bl	14608 <__udivsi3>
   17dde:	1e05      	subs	r5, r0, #0
   17de0:	d1f1      	bne.n	17dc6 <_printf_i+0x1d6>
   17de2:	2f08      	cmp	r7, #8
   17de4:	d109      	bne.n	17dfa <_printf_i+0x20a>
   17de6:	6823      	ldr	r3, [r4, #0]
   17de8:	07db      	lsls	r3, r3, #31
   17dea:	d506      	bpl.n	17dfa <_printf_i+0x20a>
   17dec:	6863      	ldr	r3, [r4, #4]
   17dee:	6922      	ldr	r2, [r4, #16]
   17df0:	4293      	cmp	r3, r2
   17df2:	dc02      	bgt.n	17dfa <_printf_i+0x20a>
   17df4:	2330      	movs	r3, #48	; 0x30
   17df6:	3e01      	subs	r6, #1
   17df8:	7033      	strb	r3, [r6, #0]
   17dfa:	9b04      	ldr	r3, [sp, #16]
   17dfc:	1b9b      	subs	r3, r3, r6
   17dfe:	6123      	str	r3, [r4, #16]
   17e00:	9b07      	ldr	r3, [sp, #28]
   17e02:	aa09      	add	r2, sp, #36	; 0x24
   17e04:	9300      	str	r3, [sp, #0]
   17e06:	0021      	movs	r1, r4
   17e08:	9b06      	ldr	r3, [sp, #24]
   17e0a:	9805      	ldr	r0, [sp, #20]
   17e0c:	f7ff fe82 	bl	17b14 <_printf_common>
   17e10:	1c43      	adds	r3, r0, #1
   17e12:	d1b3      	bne.n	17d7c <_printf_i+0x18c>
   17e14:	2001      	movs	r0, #1
   17e16:	4240      	negs	r0, r0
   17e18:	b00b      	add	sp, #44	; 0x2c
   17e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17e1c:	0001a582 	.word	0x0001a582
   17e20:	0001a571 	.word	0x0001a571

00017e24 <iprintf>:
   17e24:	b40f      	push	{r0, r1, r2, r3}
   17e26:	4b0b      	ldr	r3, [pc, #44]	; (17e54 <iprintf+0x30>)
   17e28:	b513      	push	{r0, r1, r4, lr}
   17e2a:	681c      	ldr	r4, [r3, #0]
   17e2c:	2c00      	cmp	r4, #0
   17e2e:	d005      	beq.n	17e3c <iprintf+0x18>
   17e30:	69a3      	ldr	r3, [r4, #24]
   17e32:	2b00      	cmp	r3, #0
   17e34:	d102      	bne.n	17e3c <iprintf+0x18>
   17e36:	0020      	movs	r0, r4
   17e38:	f000 fbaa 	bl	18590 <__sinit>
   17e3c:	ab05      	add	r3, sp, #20
   17e3e:	9a04      	ldr	r2, [sp, #16]
   17e40:	68a1      	ldr	r1, [r4, #8]
   17e42:	0020      	movs	r0, r4
   17e44:	9301      	str	r3, [sp, #4]
   17e46:	f7ff fd49 	bl	178dc <_vfiprintf_r>
   17e4a:	bc16      	pop	{r1, r2, r4}
   17e4c:	bc08      	pop	{r3}
   17e4e:	b004      	add	sp, #16
   17e50:	4718      	bx	r3
   17e52:	46c0      	nop			; (mov r8, r8)
   17e54:	20000028 	.word	0x20000028

00017e58 <putchar>:
   17e58:	4b08      	ldr	r3, [pc, #32]	; (17e7c <putchar+0x24>)
   17e5a:	b570      	push	{r4, r5, r6, lr}
   17e5c:	681c      	ldr	r4, [r3, #0]
   17e5e:	0005      	movs	r5, r0
   17e60:	2c00      	cmp	r4, #0
   17e62:	d005      	beq.n	17e70 <putchar+0x18>
   17e64:	69a3      	ldr	r3, [r4, #24]
   17e66:	2b00      	cmp	r3, #0
   17e68:	d102      	bne.n	17e70 <putchar+0x18>
   17e6a:	0020      	movs	r0, r4
   17e6c:	f000 fb90 	bl	18590 <__sinit>
   17e70:	0029      	movs	r1, r5
   17e72:	68a2      	ldr	r2, [r4, #8]
   17e74:	0020      	movs	r0, r4
   17e76:	f000 fee9 	bl	18c4c <_putc_r>
   17e7a:	bd70      	pop	{r4, r5, r6, pc}
   17e7c:	20000028 	.word	0x20000028

00017e80 <_puts_r>:
   17e80:	b570      	push	{r4, r5, r6, lr}
   17e82:	0005      	movs	r5, r0
   17e84:	000e      	movs	r6, r1
   17e86:	2800      	cmp	r0, #0
   17e88:	d004      	beq.n	17e94 <_puts_r+0x14>
   17e8a:	6983      	ldr	r3, [r0, #24]
   17e8c:	2b00      	cmp	r3, #0
   17e8e:	d101      	bne.n	17e94 <_puts_r+0x14>
   17e90:	f000 fb7e 	bl	18590 <__sinit>
   17e94:	69ab      	ldr	r3, [r5, #24]
   17e96:	68ac      	ldr	r4, [r5, #8]
   17e98:	2b00      	cmp	r3, #0
   17e9a:	d102      	bne.n	17ea2 <_puts_r+0x22>
   17e9c:	0028      	movs	r0, r5
   17e9e:	f000 fb77 	bl	18590 <__sinit>
   17ea2:	4b24      	ldr	r3, [pc, #144]	; (17f34 <_puts_r+0xb4>)
   17ea4:	429c      	cmp	r4, r3
   17ea6:	d10f      	bne.n	17ec8 <_puts_r+0x48>
   17ea8:	686c      	ldr	r4, [r5, #4]
   17eaa:	89a3      	ldrh	r3, [r4, #12]
   17eac:	071b      	lsls	r3, r3, #28
   17eae:	d502      	bpl.n	17eb6 <_puts_r+0x36>
   17eb0:	6923      	ldr	r3, [r4, #16]
   17eb2:	2b00      	cmp	r3, #0
   17eb4:	d120      	bne.n	17ef8 <_puts_r+0x78>
   17eb6:	0021      	movs	r1, r4
   17eb8:	0028      	movs	r0, r5
   17eba:	f000 f9f3 	bl	182a4 <__swsetup_r>
   17ebe:	2800      	cmp	r0, #0
   17ec0:	d01a      	beq.n	17ef8 <_puts_r+0x78>
   17ec2:	2001      	movs	r0, #1
   17ec4:	4240      	negs	r0, r0
   17ec6:	bd70      	pop	{r4, r5, r6, pc}
   17ec8:	4b1b      	ldr	r3, [pc, #108]	; (17f38 <_puts_r+0xb8>)
   17eca:	429c      	cmp	r4, r3
   17ecc:	d101      	bne.n	17ed2 <_puts_r+0x52>
   17ece:	68ac      	ldr	r4, [r5, #8]
   17ed0:	e7eb      	b.n	17eaa <_puts_r+0x2a>
   17ed2:	4b1a      	ldr	r3, [pc, #104]	; (17f3c <_puts_r+0xbc>)
   17ed4:	429c      	cmp	r4, r3
   17ed6:	d1e8      	bne.n	17eaa <_puts_r+0x2a>
   17ed8:	68ec      	ldr	r4, [r5, #12]
   17eda:	e7e6      	b.n	17eaa <_puts_r+0x2a>
   17edc:	3b01      	subs	r3, #1
   17ede:	3601      	adds	r6, #1
   17ee0:	60a3      	str	r3, [r4, #8]
   17ee2:	2b00      	cmp	r3, #0
   17ee4:	da04      	bge.n	17ef0 <_puts_r+0x70>
   17ee6:	69a2      	ldr	r2, [r4, #24]
   17ee8:	4293      	cmp	r3, r2
   17eea:	db16      	blt.n	17f1a <_puts_r+0x9a>
   17eec:	290a      	cmp	r1, #10
   17eee:	d014      	beq.n	17f1a <_puts_r+0x9a>
   17ef0:	6823      	ldr	r3, [r4, #0]
   17ef2:	1c5a      	adds	r2, r3, #1
   17ef4:	6022      	str	r2, [r4, #0]
   17ef6:	7019      	strb	r1, [r3, #0]
   17ef8:	7831      	ldrb	r1, [r6, #0]
   17efa:	68a3      	ldr	r3, [r4, #8]
   17efc:	2900      	cmp	r1, #0
   17efe:	d1ed      	bne.n	17edc <_puts_r+0x5c>
   17f00:	3b01      	subs	r3, #1
   17f02:	60a3      	str	r3, [r4, #8]
   17f04:	2b00      	cmp	r3, #0
   17f06:	da0f      	bge.n	17f28 <_puts_r+0xa8>
   17f08:	0022      	movs	r2, r4
   17f0a:	310a      	adds	r1, #10
   17f0c:	0028      	movs	r0, r5
   17f0e:	f000 f973 	bl	181f8 <__swbuf_r>
   17f12:	1c43      	adds	r3, r0, #1
   17f14:	d0d5      	beq.n	17ec2 <_puts_r+0x42>
   17f16:	200a      	movs	r0, #10
   17f18:	e7d5      	b.n	17ec6 <_puts_r+0x46>
   17f1a:	0022      	movs	r2, r4
   17f1c:	0028      	movs	r0, r5
   17f1e:	f000 f96b 	bl	181f8 <__swbuf_r>
   17f22:	1c43      	adds	r3, r0, #1
   17f24:	d1e8      	bne.n	17ef8 <_puts_r+0x78>
   17f26:	e7cc      	b.n	17ec2 <_puts_r+0x42>
   17f28:	200a      	movs	r0, #10
   17f2a:	6823      	ldr	r3, [r4, #0]
   17f2c:	1c5a      	adds	r2, r3, #1
   17f2e:	6022      	str	r2, [r4, #0]
   17f30:	7018      	strb	r0, [r3, #0]
   17f32:	e7c8      	b.n	17ec6 <_puts_r+0x46>
   17f34:	0001a5b4 	.word	0x0001a5b4
   17f38:	0001a5d4 	.word	0x0001a5d4
   17f3c:	0001a594 	.word	0x0001a594

00017f40 <puts>:
   17f40:	b510      	push	{r4, lr}
   17f42:	4b03      	ldr	r3, [pc, #12]	; (17f50 <puts+0x10>)
   17f44:	0001      	movs	r1, r0
   17f46:	6818      	ldr	r0, [r3, #0]
   17f48:	f7ff ff9a 	bl	17e80 <_puts_r>
   17f4c:	bd10      	pop	{r4, pc}
   17f4e:	46c0      	nop			; (mov r8, r8)
   17f50:	20000028 	.word	0x20000028

00017f54 <srand>:
   17f54:	4b10      	ldr	r3, [pc, #64]	; (17f98 <srand+0x44>)
   17f56:	b570      	push	{r4, r5, r6, lr}
   17f58:	681c      	ldr	r4, [r3, #0]
   17f5a:	0005      	movs	r5, r0
   17f5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   17f5e:	2b00      	cmp	r3, #0
   17f60:	d115      	bne.n	17f8e <srand+0x3a>
   17f62:	2018      	movs	r0, #24
   17f64:	f000 fc16 	bl	18794 <malloc>
   17f68:	4b0c      	ldr	r3, [pc, #48]	; (17f9c <srand+0x48>)
   17f6a:	63a0      	str	r0, [r4, #56]	; 0x38
   17f6c:	8003      	strh	r3, [r0, #0]
   17f6e:	4b0c      	ldr	r3, [pc, #48]	; (17fa0 <srand+0x4c>)
   17f70:	2201      	movs	r2, #1
   17f72:	8043      	strh	r3, [r0, #2]
   17f74:	4b0b      	ldr	r3, [pc, #44]	; (17fa4 <srand+0x50>)
   17f76:	8083      	strh	r3, [r0, #4]
   17f78:	4b0b      	ldr	r3, [pc, #44]	; (17fa8 <srand+0x54>)
   17f7a:	80c3      	strh	r3, [r0, #6]
   17f7c:	4b0b      	ldr	r3, [pc, #44]	; (17fac <srand+0x58>)
   17f7e:	8103      	strh	r3, [r0, #8]
   17f80:	2305      	movs	r3, #5
   17f82:	8143      	strh	r3, [r0, #10]
   17f84:	3306      	adds	r3, #6
   17f86:	8183      	strh	r3, [r0, #12]
   17f88:	2300      	movs	r3, #0
   17f8a:	6102      	str	r2, [r0, #16]
   17f8c:	6143      	str	r3, [r0, #20]
   17f8e:	2200      	movs	r2, #0
   17f90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   17f92:	611d      	str	r5, [r3, #16]
   17f94:	615a      	str	r2, [r3, #20]
   17f96:	bd70      	pop	{r4, r5, r6, pc}
   17f98:	20000028 	.word	0x20000028
   17f9c:	0000330e 	.word	0x0000330e
   17fa0:	ffffabcd 	.word	0xffffabcd
   17fa4:	00001234 	.word	0x00001234
   17fa8:	ffffe66d 	.word	0xffffe66d
   17fac:	ffffdeec 	.word	0xffffdeec

00017fb0 <rand>:
   17fb0:	4b15      	ldr	r3, [pc, #84]	; (18008 <rand+0x58>)
   17fb2:	b510      	push	{r4, lr}
   17fb4:	681c      	ldr	r4, [r3, #0]
   17fb6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   17fb8:	2b00      	cmp	r3, #0
   17fba:	d115      	bne.n	17fe8 <rand+0x38>
   17fbc:	2018      	movs	r0, #24
   17fbe:	f000 fbe9 	bl	18794 <malloc>
   17fc2:	4b12      	ldr	r3, [pc, #72]	; (1800c <rand+0x5c>)
   17fc4:	63a0      	str	r0, [r4, #56]	; 0x38
   17fc6:	8003      	strh	r3, [r0, #0]
   17fc8:	4b11      	ldr	r3, [pc, #68]	; (18010 <rand+0x60>)
   17fca:	2201      	movs	r2, #1
   17fcc:	8043      	strh	r3, [r0, #2]
   17fce:	4b11      	ldr	r3, [pc, #68]	; (18014 <rand+0x64>)
   17fd0:	8083      	strh	r3, [r0, #4]
   17fd2:	4b11      	ldr	r3, [pc, #68]	; (18018 <rand+0x68>)
   17fd4:	80c3      	strh	r3, [r0, #6]
   17fd6:	4b11      	ldr	r3, [pc, #68]	; (1801c <rand+0x6c>)
   17fd8:	8103      	strh	r3, [r0, #8]
   17fda:	2305      	movs	r3, #5
   17fdc:	8143      	strh	r3, [r0, #10]
   17fde:	3306      	adds	r3, #6
   17fe0:	8183      	strh	r3, [r0, #12]
   17fe2:	2300      	movs	r3, #0
   17fe4:	6102      	str	r2, [r0, #16]
   17fe6:	6143      	str	r3, [r0, #20]
   17fe8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   17fea:	4a0d      	ldr	r2, [pc, #52]	; (18020 <rand+0x70>)
   17fec:	6920      	ldr	r0, [r4, #16]
   17fee:	6961      	ldr	r1, [r4, #20]
   17ff0:	4b0c      	ldr	r3, [pc, #48]	; (18024 <rand+0x74>)
   17ff2:	f7fc fd17 	bl	14a24 <__aeabi_lmul>
   17ff6:	2201      	movs	r2, #1
   17ff8:	2300      	movs	r3, #0
   17ffa:	1880      	adds	r0, r0, r2
   17ffc:	4159      	adcs	r1, r3
   17ffe:	6120      	str	r0, [r4, #16]
   18000:	6161      	str	r1, [r4, #20]
   18002:	0048      	lsls	r0, r1, #1
   18004:	0840      	lsrs	r0, r0, #1
   18006:	bd10      	pop	{r4, pc}
   18008:	20000028 	.word	0x20000028
   1800c:	0000330e 	.word	0x0000330e
   18010:	ffffabcd 	.word	0xffffabcd
   18014:	00001234 	.word	0x00001234
   18018:	ffffe66d 	.word	0xffffe66d
   1801c:	ffffdeec 	.word	0xffffdeec
   18020:	4c957f2d 	.word	0x4c957f2d
   18024:	5851f42d 	.word	0x5851f42d

00018028 <setbuf>:
   18028:	424a      	negs	r2, r1
   1802a:	414a      	adcs	r2, r1
   1802c:	2380      	movs	r3, #128	; 0x80
   1802e:	b510      	push	{r4, lr}
   18030:	0052      	lsls	r2, r2, #1
   18032:	00db      	lsls	r3, r3, #3
   18034:	f000 f802 	bl	1803c <setvbuf>
   18038:	bd10      	pop	{r4, pc}
   1803a:	Address 0x0001803a is out of bounds.


0001803c <setvbuf>:
   1803c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1803e:	001d      	movs	r5, r3
   18040:	4b4f      	ldr	r3, [pc, #316]	; (18180 <setvbuf+0x144>)
   18042:	b085      	sub	sp, #20
   18044:	681e      	ldr	r6, [r3, #0]
   18046:	0004      	movs	r4, r0
   18048:	000f      	movs	r7, r1
   1804a:	9200      	str	r2, [sp, #0]
   1804c:	2e00      	cmp	r6, #0
   1804e:	d005      	beq.n	1805c <setvbuf+0x20>
   18050:	69b3      	ldr	r3, [r6, #24]
   18052:	2b00      	cmp	r3, #0
   18054:	d102      	bne.n	1805c <setvbuf+0x20>
   18056:	0030      	movs	r0, r6
   18058:	f000 fa9a 	bl	18590 <__sinit>
   1805c:	4b49      	ldr	r3, [pc, #292]	; (18184 <setvbuf+0x148>)
   1805e:	429c      	cmp	r4, r3
   18060:	d150      	bne.n	18104 <setvbuf+0xc8>
   18062:	6874      	ldr	r4, [r6, #4]
   18064:	9b00      	ldr	r3, [sp, #0]
   18066:	2b02      	cmp	r3, #2
   18068:	d005      	beq.n	18076 <setvbuf+0x3a>
   1806a:	2b01      	cmp	r3, #1
   1806c:	d900      	bls.n	18070 <setvbuf+0x34>
   1806e:	e084      	b.n	1817a <setvbuf+0x13e>
   18070:	2d00      	cmp	r5, #0
   18072:	da00      	bge.n	18076 <setvbuf+0x3a>
   18074:	e081      	b.n	1817a <setvbuf+0x13e>
   18076:	0021      	movs	r1, r4
   18078:	0030      	movs	r0, r6
   1807a:	f000 fa1b 	bl	184b4 <_fflush_r>
   1807e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   18080:	2900      	cmp	r1, #0
   18082:	d008      	beq.n	18096 <setvbuf+0x5a>
   18084:	0023      	movs	r3, r4
   18086:	3344      	adds	r3, #68	; 0x44
   18088:	4299      	cmp	r1, r3
   1808a:	d002      	beq.n	18092 <setvbuf+0x56>
   1808c:	0030      	movs	r0, r6
   1808e:	f000 fba9 	bl	187e4 <_free_r>
   18092:	2300      	movs	r3, #0
   18094:	6363      	str	r3, [r4, #52]	; 0x34
   18096:	2300      	movs	r3, #0
   18098:	61a3      	str	r3, [r4, #24]
   1809a:	6063      	str	r3, [r4, #4]
   1809c:	89a3      	ldrh	r3, [r4, #12]
   1809e:	061b      	lsls	r3, r3, #24
   180a0:	d503      	bpl.n	180aa <setvbuf+0x6e>
   180a2:	6921      	ldr	r1, [r4, #16]
   180a4:	0030      	movs	r0, r6
   180a6:	f000 fb9d 	bl	187e4 <_free_r>
   180aa:	89a3      	ldrh	r3, [r4, #12]
   180ac:	4a36      	ldr	r2, [pc, #216]	; (18188 <setvbuf+0x14c>)
   180ae:	4013      	ands	r3, r2
   180b0:	81a3      	strh	r3, [r4, #12]
   180b2:	9b00      	ldr	r3, [sp, #0]
   180b4:	2b02      	cmp	r3, #2
   180b6:	d05a      	beq.n	1816e <setvbuf+0x132>
   180b8:	ab03      	add	r3, sp, #12
   180ba:	aa02      	add	r2, sp, #8
   180bc:	0021      	movs	r1, r4
   180be:	0030      	movs	r0, r6
   180c0:	f000 fafc 	bl	186bc <__swhatbuf_r>
   180c4:	89a3      	ldrh	r3, [r4, #12]
   180c6:	4318      	orrs	r0, r3
   180c8:	81a0      	strh	r0, [r4, #12]
   180ca:	2d00      	cmp	r5, #0
   180cc:	d124      	bne.n	18118 <setvbuf+0xdc>
   180ce:	9d02      	ldr	r5, [sp, #8]
   180d0:	0028      	movs	r0, r5
   180d2:	f000 fb5f 	bl	18794 <malloc>
   180d6:	9501      	str	r5, [sp, #4]
   180d8:	1e07      	subs	r7, r0, #0
   180da:	d142      	bne.n	18162 <setvbuf+0x126>
   180dc:	9b02      	ldr	r3, [sp, #8]
   180de:	9301      	str	r3, [sp, #4]
   180e0:	42ab      	cmp	r3, r5
   180e2:	d139      	bne.n	18158 <setvbuf+0x11c>
   180e4:	2001      	movs	r0, #1
   180e6:	4240      	negs	r0, r0
   180e8:	2302      	movs	r3, #2
   180ea:	89a2      	ldrh	r2, [r4, #12]
   180ec:	4313      	orrs	r3, r2
   180ee:	81a3      	strh	r3, [r4, #12]
   180f0:	2300      	movs	r3, #0
   180f2:	60a3      	str	r3, [r4, #8]
   180f4:	0023      	movs	r3, r4
   180f6:	3347      	adds	r3, #71	; 0x47
   180f8:	6023      	str	r3, [r4, #0]
   180fa:	6123      	str	r3, [r4, #16]
   180fc:	2301      	movs	r3, #1
   180fe:	6163      	str	r3, [r4, #20]
   18100:	b005      	add	sp, #20
   18102:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18104:	4b21      	ldr	r3, [pc, #132]	; (1818c <setvbuf+0x150>)
   18106:	429c      	cmp	r4, r3
   18108:	d101      	bne.n	1810e <setvbuf+0xd2>
   1810a:	68b4      	ldr	r4, [r6, #8]
   1810c:	e7aa      	b.n	18064 <setvbuf+0x28>
   1810e:	4b20      	ldr	r3, [pc, #128]	; (18190 <setvbuf+0x154>)
   18110:	429c      	cmp	r4, r3
   18112:	d1a7      	bne.n	18064 <setvbuf+0x28>
   18114:	68f4      	ldr	r4, [r6, #12]
   18116:	e7a5      	b.n	18064 <setvbuf+0x28>
   18118:	2f00      	cmp	r7, #0
   1811a:	d0d9      	beq.n	180d0 <setvbuf+0x94>
   1811c:	69b3      	ldr	r3, [r6, #24]
   1811e:	2b00      	cmp	r3, #0
   18120:	d102      	bne.n	18128 <setvbuf+0xec>
   18122:	0030      	movs	r0, r6
   18124:	f000 fa34 	bl	18590 <__sinit>
   18128:	9b00      	ldr	r3, [sp, #0]
   1812a:	2b01      	cmp	r3, #1
   1812c:	d103      	bne.n	18136 <setvbuf+0xfa>
   1812e:	89a3      	ldrh	r3, [r4, #12]
   18130:	9a00      	ldr	r2, [sp, #0]
   18132:	431a      	orrs	r2, r3
   18134:	81a2      	strh	r2, [r4, #12]
   18136:	2008      	movs	r0, #8
   18138:	89a3      	ldrh	r3, [r4, #12]
   1813a:	6027      	str	r7, [r4, #0]
   1813c:	6127      	str	r7, [r4, #16]
   1813e:	6165      	str	r5, [r4, #20]
   18140:	4018      	ands	r0, r3
   18142:	d018      	beq.n	18176 <setvbuf+0x13a>
   18144:	2001      	movs	r0, #1
   18146:	4018      	ands	r0, r3
   18148:	2300      	movs	r3, #0
   1814a:	4298      	cmp	r0, r3
   1814c:	d011      	beq.n	18172 <setvbuf+0x136>
   1814e:	426d      	negs	r5, r5
   18150:	60a3      	str	r3, [r4, #8]
   18152:	61a5      	str	r5, [r4, #24]
   18154:	0018      	movs	r0, r3
   18156:	e7d3      	b.n	18100 <setvbuf+0xc4>
   18158:	9801      	ldr	r0, [sp, #4]
   1815a:	f000 fb1b 	bl	18794 <malloc>
   1815e:	1e07      	subs	r7, r0, #0
   18160:	d0c0      	beq.n	180e4 <setvbuf+0xa8>
   18162:	2380      	movs	r3, #128	; 0x80
   18164:	89a2      	ldrh	r2, [r4, #12]
   18166:	9d01      	ldr	r5, [sp, #4]
   18168:	4313      	orrs	r3, r2
   1816a:	81a3      	strh	r3, [r4, #12]
   1816c:	e7d6      	b.n	1811c <setvbuf+0xe0>
   1816e:	2000      	movs	r0, #0
   18170:	e7ba      	b.n	180e8 <setvbuf+0xac>
   18172:	60a5      	str	r5, [r4, #8]
   18174:	e7c4      	b.n	18100 <setvbuf+0xc4>
   18176:	60a0      	str	r0, [r4, #8]
   18178:	e7c2      	b.n	18100 <setvbuf+0xc4>
   1817a:	2001      	movs	r0, #1
   1817c:	4240      	negs	r0, r0
   1817e:	e7bf      	b.n	18100 <setvbuf+0xc4>
   18180:	20000028 	.word	0x20000028
   18184:	0001a5b4 	.word	0x0001a5b4
   18188:	fffff35c 	.word	0xfffff35c
   1818c:	0001a5d4 	.word	0x0001a5d4
   18190:	0001a594 	.word	0x0001a594

00018194 <sniprintf>:
   18194:	b40c      	push	{r2, r3}
   18196:	b530      	push	{r4, r5, lr}
   18198:	4b16      	ldr	r3, [pc, #88]	; (181f4 <sniprintf+0x60>)
   1819a:	b09d      	sub	sp, #116	; 0x74
   1819c:	1e0c      	subs	r4, r1, #0
   1819e:	681d      	ldr	r5, [r3, #0]
   181a0:	da08      	bge.n	181b4 <sniprintf+0x20>
   181a2:	238b      	movs	r3, #139	; 0x8b
   181a4:	2001      	movs	r0, #1
   181a6:	602b      	str	r3, [r5, #0]
   181a8:	4240      	negs	r0, r0
   181aa:	b01d      	add	sp, #116	; 0x74
   181ac:	bc30      	pop	{r4, r5}
   181ae:	bc08      	pop	{r3}
   181b0:	b002      	add	sp, #8
   181b2:	4718      	bx	r3
   181b4:	2382      	movs	r3, #130	; 0x82
   181b6:	a902      	add	r1, sp, #8
   181b8:	009b      	lsls	r3, r3, #2
   181ba:	818b      	strh	r3, [r1, #12]
   181bc:	2300      	movs	r3, #0
   181be:	9002      	str	r0, [sp, #8]
   181c0:	6108      	str	r0, [r1, #16]
   181c2:	429c      	cmp	r4, r3
   181c4:	d000      	beq.n	181c8 <sniprintf+0x34>
   181c6:	1e63      	subs	r3, r4, #1
   181c8:	608b      	str	r3, [r1, #8]
   181ca:	614b      	str	r3, [r1, #20]
   181cc:	2301      	movs	r3, #1
   181ce:	425b      	negs	r3, r3
   181d0:	81cb      	strh	r3, [r1, #14]
   181d2:	9a20      	ldr	r2, [sp, #128]	; 0x80
   181d4:	ab21      	add	r3, sp, #132	; 0x84
   181d6:	0028      	movs	r0, r5
   181d8:	9301      	str	r3, [sp, #4]
   181da:	f000 fc33 	bl	18a44 <_svfiprintf_r>
   181de:	1c43      	adds	r3, r0, #1
   181e0:	da01      	bge.n	181e6 <sniprintf+0x52>
   181e2:	238b      	movs	r3, #139	; 0x8b
   181e4:	602b      	str	r3, [r5, #0]
   181e6:	2c00      	cmp	r4, #0
   181e8:	d0df      	beq.n	181aa <sniprintf+0x16>
   181ea:	2300      	movs	r3, #0
   181ec:	9a02      	ldr	r2, [sp, #8]
   181ee:	7013      	strb	r3, [r2, #0]
   181f0:	e7db      	b.n	181aa <sniprintf+0x16>
   181f2:	46c0      	nop			; (mov r8, r8)
   181f4:	20000028 	.word	0x20000028

000181f8 <__swbuf_r>:
   181f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   181fa:	0005      	movs	r5, r0
   181fc:	000e      	movs	r6, r1
   181fe:	0014      	movs	r4, r2
   18200:	2800      	cmp	r0, #0
   18202:	d004      	beq.n	1820e <__swbuf_r+0x16>
   18204:	6983      	ldr	r3, [r0, #24]
   18206:	2b00      	cmp	r3, #0
   18208:	d101      	bne.n	1820e <__swbuf_r+0x16>
   1820a:	f000 f9c1 	bl	18590 <__sinit>
   1820e:	4b22      	ldr	r3, [pc, #136]	; (18298 <__swbuf_r+0xa0>)
   18210:	429c      	cmp	r4, r3
   18212:	d12d      	bne.n	18270 <__swbuf_r+0x78>
   18214:	686c      	ldr	r4, [r5, #4]
   18216:	69a3      	ldr	r3, [r4, #24]
   18218:	60a3      	str	r3, [r4, #8]
   1821a:	89a3      	ldrh	r3, [r4, #12]
   1821c:	071b      	lsls	r3, r3, #28
   1821e:	d531      	bpl.n	18284 <__swbuf_r+0x8c>
   18220:	6923      	ldr	r3, [r4, #16]
   18222:	2b00      	cmp	r3, #0
   18224:	d02e      	beq.n	18284 <__swbuf_r+0x8c>
   18226:	6823      	ldr	r3, [r4, #0]
   18228:	6922      	ldr	r2, [r4, #16]
   1822a:	b2f7      	uxtb	r7, r6
   1822c:	1a98      	subs	r0, r3, r2
   1822e:	6963      	ldr	r3, [r4, #20]
   18230:	b2f6      	uxtb	r6, r6
   18232:	4298      	cmp	r0, r3
   18234:	db05      	blt.n	18242 <__swbuf_r+0x4a>
   18236:	0021      	movs	r1, r4
   18238:	0028      	movs	r0, r5
   1823a:	f000 f93b 	bl	184b4 <_fflush_r>
   1823e:	2800      	cmp	r0, #0
   18240:	d126      	bne.n	18290 <__swbuf_r+0x98>
   18242:	68a3      	ldr	r3, [r4, #8]
   18244:	3001      	adds	r0, #1
   18246:	3b01      	subs	r3, #1
   18248:	60a3      	str	r3, [r4, #8]
   1824a:	6823      	ldr	r3, [r4, #0]
   1824c:	1c5a      	adds	r2, r3, #1
   1824e:	6022      	str	r2, [r4, #0]
   18250:	701f      	strb	r7, [r3, #0]
   18252:	6963      	ldr	r3, [r4, #20]
   18254:	4298      	cmp	r0, r3
   18256:	d004      	beq.n	18262 <__swbuf_r+0x6a>
   18258:	89a3      	ldrh	r3, [r4, #12]
   1825a:	07db      	lsls	r3, r3, #31
   1825c:	d51a      	bpl.n	18294 <__swbuf_r+0x9c>
   1825e:	2e0a      	cmp	r6, #10
   18260:	d118      	bne.n	18294 <__swbuf_r+0x9c>
   18262:	0021      	movs	r1, r4
   18264:	0028      	movs	r0, r5
   18266:	f000 f925 	bl	184b4 <_fflush_r>
   1826a:	2800      	cmp	r0, #0
   1826c:	d012      	beq.n	18294 <__swbuf_r+0x9c>
   1826e:	e00f      	b.n	18290 <__swbuf_r+0x98>
   18270:	4b0a      	ldr	r3, [pc, #40]	; (1829c <__swbuf_r+0xa4>)
   18272:	429c      	cmp	r4, r3
   18274:	d101      	bne.n	1827a <__swbuf_r+0x82>
   18276:	68ac      	ldr	r4, [r5, #8]
   18278:	e7cd      	b.n	18216 <__swbuf_r+0x1e>
   1827a:	4b09      	ldr	r3, [pc, #36]	; (182a0 <__swbuf_r+0xa8>)
   1827c:	429c      	cmp	r4, r3
   1827e:	d1ca      	bne.n	18216 <__swbuf_r+0x1e>
   18280:	68ec      	ldr	r4, [r5, #12]
   18282:	e7c8      	b.n	18216 <__swbuf_r+0x1e>
   18284:	0021      	movs	r1, r4
   18286:	0028      	movs	r0, r5
   18288:	f000 f80c 	bl	182a4 <__swsetup_r>
   1828c:	2800      	cmp	r0, #0
   1828e:	d0ca      	beq.n	18226 <__swbuf_r+0x2e>
   18290:	2601      	movs	r6, #1
   18292:	4276      	negs	r6, r6
   18294:	0030      	movs	r0, r6
   18296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18298:	0001a5b4 	.word	0x0001a5b4
   1829c:	0001a5d4 	.word	0x0001a5d4
   182a0:	0001a594 	.word	0x0001a594

000182a4 <__swsetup_r>:
   182a4:	4b36      	ldr	r3, [pc, #216]	; (18380 <__swsetup_r+0xdc>)
   182a6:	b570      	push	{r4, r5, r6, lr}
   182a8:	681d      	ldr	r5, [r3, #0]
   182aa:	0006      	movs	r6, r0
   182ac:	000c      	movs	r4, r1
   182ae:	2d00      	cmp	r5, #0
   182b0:	d005      	beq.n	182be <__swsetup_r+0x1a>
   182b2:	69ab      	ldr	r3, [r5, #24]
   182b4:	2b00      	cmp	r3, #0
   182b6:	d102      	bne.n	182be <__swsetup_r+0x1a>
   182b8:	0028      	movs	r0, r5
   182ba:	f000 f969 	bl	18590 <__sinit>
   182be:	4b31      	ldr	r3, [pc, #196]	; (18384 <__swsetup_r+0xe0>)
   182c0:	429c      	cmp	r4, r3
   182c2:	d10f      	bne.n	182e4 <__swsetup_r+0x40>
   182c4:	686c      	ldr	r4, [r5, #4]
   182c6:	230c      	movs	r3, #12
   182c8:	5ee2      	ldrsh	r2, [r4, r3]
   182ca:	b293      	uxth	r3, r2
   182cc:	0719      	lsls	r1, r3, #28
   182ce:	d42d      	bmi.n	1832c <__swsetup_r+0x88>
   182d0:	06d9      	lsls	r1, r3, #27
   182d2:	d411      	bmi.n	182f8 <__swsetup_r+0x54>
   182d4:	2309      	movs	r3, #9
   182d6:	2001      	movs	r0, #1
   182d8:	6033      	str	r3, [r6, #0]
   182da:	3337      	adds	r3, #55	; 0x37
   182dc:	4313      	orrs	r3, r2
   182de:	81a3      	strh	r3, [r4, #12]
   182e0:	4240      	negs	r0, r0
   182e2:	bd70      	pop	{r4, r5, r6, pc}
   182e4:	4b28      	ldr	r3, [pc, #160]	; (18388 <__swsetup_r+0xe4>)
   182e6:	429c      	cmp	r4, r3
   182e8:	d101      	bne.n	182ee <__swsetup_r+0x4a>
   182ea:	68ac      	ldr	r4, [r5, #8]
   182ec:	e7eb      	b.n	182c6 <__swsetup_r+0x22>
   182ee:	4b27      	ldr	r3, [pc, #156]	; (1838c <__swsetup_r+0xe8>)
   182f0:	429c      	cmp	r4, r3
   182f2:	d1e8      	bne.n	182c6 <__swsetup_r+0x22>
   182f4:	68ec      	ldr	r4, [r5, #12]
   182f6:	e7e6      	b.n	182c6 <__swsetup_r+0x22>
   182f8:	075b      	lsls	r3, r3, #29
   182fa:	d513      	bpl.n	18324 <__swsetup_r+0x80>
   182fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
   182fe:	2900      	cmp	r1, #0
   18300:	d008      	beq.n	18314 <__swsetup_r+0x70>
   18302:	0023      	movs	r3, r4
   18304:	3344      	adds	r3, #68	; 0x44
   18306:	4299      	cmp	r1, r3
   18308:	d002      	beq.n	18310 <__swsetup_r+0x6c>
   1830a:	0030      	movs	r0, r6
   1830c:	f000 fa6a 	bl	187e4 <_free_r>
   18310:	2300      	movs	r3, #0
   18312:	6363      	str	r3, [r4, #52]	; 0x34
   18314:	2224      	movs	r2, #36	; 0x24
   18316:	89a3      	ldrh	r3, [r4, #12]
   18318:	4393      	bics	r3, r2
   1831a:	81a3      	strh	r3, [r4, #12]
   1831c:	2300      	movs	r3, #0
   1831e:	6063      	str	r3, [r4, #4]
   18320:	6923      	ldr	r3, [r4, #16]
   18322:	6023      	str	r3, [r4, #0]
   18324:	2308      	movs	r3, #8
   18326:	89a2      	ldrh	r2, [r4, #12]
   18328:	4313      	orrs	r3, r2
   1832a:	81a3      	strh	r3, [r4, #12]
   1832c:	6923      	ldr	r3, [r4, #16]
   1832e:	2b00      	cmp	r3, #0
   18330:	d10b      	bne.n	1834a <__swsetup_r+0xa6>
   18332:	21a0      	movs	r1, #160	; 0xa0
   18334:	2280      	movs	r2, #128	; 0x80
   18336:	89a3      	ldrh	r3, [r4, #12]
   18338:	0089      	lsls	r1, r1, #2
   1833a:	0092      	lsls	r2, r2, #2
   1833c:	400b      	ands	r3, r1
   1833e:	4293      	cmp	r3, r2
   18340:	d003      	beq.n	1834a <__swsetup_r+0xa6>
   18342:	0021      	movs	r1, r4
   18344:	0030      	movs	r0, r6
   18346:	f000 f9e1 	bl	1870c <__smakebuf_r>
   1834a:	2301      	movs	r3, #1
   1834c:	89a2      	ldrh	r2, [r4, #12]
   1834e:	4013      	ands	r3, r2
   18350:	d011      	beq.n	18376 <__swsetup_r+0xd2>
   18352:	2300      	movs	r3, #0
   18354:	60a3      	str	r3, [r4, #8]
   18356:	6963      	ldr	r3, [r4, #20]
   18358:	425b      	negs	r3, r3
   1835a:	61a3      	str	r3, [r4, #24]
   1835c:	2000      	movs	r0, #0
   1835e:	6923      	ldr	r3, [r4, #16]
   18360:	4283      	cmp	r3, r0
   18362:	d1be      	bne.n	182e2 <__swsetup_r+0x3e>
   18364:	230c      	movs	r3, #12
   18366:	5ee2      	ldrsh	r2, [r4, r3]
   18368:	0613      	lsls	r3, r2, #24
   1836a:	d5ba      	bpl.n	182e2 <__swsetup_r+0x3e>
   1836c:	2340      	movs	r3, #64	; 0x40
   1836e:	4313      	orrs	r3, r2
   18370:	81a3      	strh	r3, [r4, #12]
   18372:	3801      	subs	r0, #1
   18374:	e7b5      	b.n	182e2 <__swsetup_r+0x3e>
   18376:	0792      	lsls	r2, r2, #30
   18378:	d400      	bmi.n	1837c <__swsetup_r+0xd8>
   1837a:	6963      	ldr	r3, [r4, #20]
   1837c:	60a3      	str	r3, [r4, #8]
   1837e:	e7ed      	b.n	1835c <__swsetup_r+0xb8>
   18380:	20000028 	.word	0x20000028
   18384:	0001a5b4 	.word	0x0001a5b4
   18388:	0001a5d4 	.word	0x0001a5d4
   1838c:	0001a594 	.word	0x0001a594

00018390 <abort>:
   18390:	b510      	push	{r4, lr}
   18392:	2006      	movs	r0, #6
   18394:	f000 fccc 	bl	18d30 <raise>
   18398:	2001      	movs	r0, #1
   1839a:	f7ee ff9d 	bl	72d8 <_exit>
   1839e:	Address 0x0001839e is out of bounds.


000183a0 <__sflush_r>:
   183a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   183a2:	898a      	ldrh	r2, [r1, #12]
   183a4:	0005      	movs	r5, r0
   183a6:	000c      	movs	r4, r1
   183a8:	0713      	lsls	r3, r2, #28
   183aa:	d460      	bmi.n	1846e <__sflush_r+0xce>
   183ac:	684b      	ldr	r3, [r1, #4]
   183ae:	2b00      	cmp	r3, #0
   183b0:	dc04      	bgt.n	183bc <__sflush_r+0x1c>
   183b2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   183b4:	2b00      	cmp	r3, #0
   183b6:	dc01      	bgt.n	183bc <__sflush_r+0x1c>
   183b8:	2000      	movs	r0, #0
   183ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   183bc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   183be:	2f00      	cmp	r7, #0
   183c0:	d0fa      	beq.n	183b8 <__sflush_r+0x18>
   183c2:	2300      	movs	r3, #0
   183c4:	682e      	ldr	r6, [r5, #0]
   183c6:	602b      	str	r3, [r5, #0]
   183c8:	2380      	movs	r3, #128	; 0x80
   183ca:	015b      	lsls	r3, r3, #5
   183cc:	401a      	ands	r2, r3
   183ce:	d034      	beq.n	1843a <__sflush_r+0x9a>
   183d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
   183d2:	89a3      	ldrh	r3, [r4, #12]
   183d4:	075b      	lsls	r3, r3, #29
   183d6:	d506      	bpl.n	183e6 <__sflush_r+0x46>
   183d8:	6863      	ldr	r3, [r4, #4]
   183da:	1ac0      	subs	r0, r0, r3
   183dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   183de:	2b00      	cmp	r3, #0
   183e0:	d001      	beq.n	183e6 <__sflush_r+0x46>
   183e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   183e4:	1ac0      	subs	r0, r0, r3
   183e6:	0002      	movs	r2, r0
   183e8:	6a21      	ldr	r1, [r4, #32]
   183ea:	2300      	movs	r3, #0
   183ec:	0028      	movs	r0, r5
   183ee:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   183f0:	47b8      	blx	r7
   183f2:	89a1      	ldrh	r1, [r4, #12]
   183f4:	1c43      	adds	r3, r0, #1
   183f6:	d106      	bne.n	18406 <__sflush_r+0x66>
   183f8:	682b      	ldr	r3, [r5, #0]
   183fa:	2b1d      	cmp	r3, #29
   183fc:	d831      	bhi.n	18462 <__sflush_r+0xc2>
   183fe:	4a2c      	ldr	r2, [pc, #176]	; (184b0 <__sflush_r+0x110>)
   18400:	40da      	lsrs	r2, r3
   18402:	07d3      	lsls	r3, r2, #31
   18404:	d52d      	bpl.n	18462 <__sflush_r+0xc2>
   18406:	2300      	movs	r3, #0
   18408:	6063      	str	r3, [r4, #4]
   1840a:	6923      	ldr	r3, [r4, #16]
   1840c:	6023      	str	r3, [r4, #0]
   1840e:	04cb      	lsls	r3, r1, #19
   18410:	d505      	bpl.n	1841e <__sflush_r+0x7e>
   18412:	1c43      	adds	r3, r0, #1
   18414:	d102      	bne.n	1841c <__sflush_r+0x7c>
   18416:	682b      	ldr	r3, [r5, #0]
   18418:	2b00      	cmp	r3, #0
   1841a:	d100      	bne.n	1841e <__sflush_r+0x7e>
   1841c:	6560      	str	r0, [r4, #84]	; 0x54
   1841e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   18420:	602e      	str	r6, [r5, #0]
   18422:	2900      	cmp	r1, #0
   18424:	d0c8      	beq.n	183b8 <__sflush_r+0x18>
   18426:	0023      	movs	r3, r4
   18428:	3344      	adds	r3, #68	; 0x44
   1842a:	4299      	cmp	r1, r3
   1842c:	d002      	beq.n	18434 <__sflush_r+0x94>
   1842e:	0028      	movs	r0, r5
   18430:	f000 f9d8 	bl	187e4 <_free_r>
   18434:	2000      	movs	r0, #0
   18436:	6360      	str	r0, [r4, #52]	; 0x34
   18438:	e7bf      	b.n	183ba <__sflush_r+0x1a>
   1843a:	2301      	movs	r3, #1
   1843c:	6a21      	ldr	r1, [r4, #32]
   1843e:	0028      	movs	r0, r5
   18440:	47b8      	blx	r7
   18442:	1c43      	adds	r3, r0, #1
   18444:	d1c5      	bne.n	183d2 <__sflush_r+0x32>
   18446:	682b      	ldr	r3, [r5, #0]
   18448:	2b00      	cmp	r3, #0
   1844a:	d0c2      	beq.n	183d2 <__sflush_r+0x32>
   1844c:	2b1d      	cmp	r3, #29
   1844e:	d001      	beq.n	18454 <__sflush_r+0xb4>
   18450:	2b16      	cmp	r3, #22
   18452:	d101      	bne.n	18458 <__sflush_r+0xb8>
   18454:	602e      	str	r6, [r5, #0]
   18456:	e7af      	b.n	183b8 <__sflush_r+0x18>
   18458:	2340      	movs	r3, #64	; 0x40
   1845a:	89a2      	ldrh	r2, [r4, #12]
   1845c:	4313      	orrs	r3, r2
   1845e:	81a3      	strh	r3, [r4, #12]
   18460:	e7ab      	b.n	183ba <__sflush_r+0x1a>
   18462:	2340      	movs	r3, #64	; 0x40
   18464:	430b      	orrs	r3, r1
   18466:	2001      	movs	r0, #1
   18468:	81a3      	strh	r3, [r4, #12]
   1846a:	4240      	negs	r0, r0
   1846c:	e7a5      	b.n	183ba <__sflush_r+0x1a>
   1846e:	690f      	ldr	r7, [r1, #16]
   18470:	2f00      	cmp	r7, #0
   18472:	d0a1      	beq.n	183b8 <__sflush_r+0x18>
   18474:	680b      	ldr	r3, [r1, #0]
   18476:	600f      	str	r7, [r1, #0]
   18478:	1bdb      	subs	r3, r3, r7
   1847a:	9301      	str	r3, [sp, #4]
   1847c:	2300      	movs	r3, #0
   1847e:	0792      	lsls	r2, r2, #30
   18480:	d100      	bne.n	18484 <__sflush_r+0xe4>
   18482:	694b      	ldr	r3, [r1, #20]
   18484:	60a3      	str	r3, [r4, #8]
   18486:	9b01      	ldr	r3, [sp, #4]
   18488:	2b00      	cmp	r3, #0
   1848a:	dc00      	bgt.n	1848e <__sflush_r+0xee>
   1848c:	e794      	b.n	183b8 <__sflush_r+0x18>
   1848e:	9b01      	ldr	r3, [sp, #4]
   18490:	003a      	movs	r2, r7
   18492:	6a21      	ldr	r1, [r4, #32]
   18494:	0028      	movs	r0, r5
   18496:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   18498:	47b0      	blx	r6
   1849a:	2800      	cmp	r0, #0
   1849c:	dc03      	bgt.n	184a6 <__sflush_r+0x106>
   1849e:	2340      	movs	r3, #64	; 0x40
   184a0:	89a2      	ldrh	r2, [r4, #12]
   184a2:	4313      	orrs	r3, r2
   184a4:	e7df      	b.n	18466 <__sflush_r+0xc6>
   184a6:	9b01      	ldr	r3, [sp, #4]
   184a8:	183f      	adds	r7, r7, r0
   184aa:	1a1b      	subs	r3, r3, r0
   184ac:	9301      	str	r3, [sp, #4]
   184ae:	e7ea      	b.n	18486 <__sflush_r+0xe6>
   184b0:	20400001 	.word	0x20400001

000184b4 <_fflush_r>:
   184b4:	690b      	ldr	r3, [r1, #16]
   184b6:	b570      	push	{r4, r5, r6, lr}
   184b8:	0005      	movs	r5, r0
   184ba:	000c      	movs	r4, r1
   184bc:	2b00      	cmp	r3, #0
   184be:	d101      	bne.n	184c4 <_fflush_r+0x10>
   184c0:	2000      	movs	r0, #0
   184c2:	bd70      	pop	{r4, r5, r6, pc}
   184c4:	2800      	cmp	r0, #0
   184c6:	d004      	beq.n	184d2 <_fflush_r+0x1e>
   184c8:	6983      	ldr	r3, [r0, #24]
   184ca:	2b00      	cmp	r3, #0
   184cc:	d101      	bne.n	184d2 <_fflush_r+0x1e>
   184ce:	f000 f85f 	bl	18590 <__sinit>
   184d2:	4b0b      	ldr	r3, [pc, #44]	; (18500 <_fflush_r+0x4c>)
   184d4:	429c      	cmp	r4, r3
   184d6:	d109      	bne.n	184ec <_fflush_r+0x38>
   184d8:	686c      	ldr	r4, [r5, #4]
   184da:	220c      	movs	r2, #12
   184dc:	5ea3      	ldrsh	r3, [r4, r2]
   184de:	2b00      	cmp	r3, #0
   184e0:	d0ee      	beq.n	184c0 <_fflush_r+0xc>
   184e2:	0021      	movs	r1, r4
   184e4:	0028      	movs	r0, r5
   184e6:	f7ff ff5b 	bl	183a0 <__sflush_r>
   184ea:	e7ea      	b.n	184c2 <_fflush_r+0xe>
   184ec:	4b05      	ldr	r3, [pc, #20]	; (18504 <_fflush_r+0x50>)
   184ee:	429c      	cmp	r4, r3
   184f0:	d101      	bne.n	184f6 <_fflush_r+0x42>
   184f2:	68ac      	ldr	r4, [r5, #8]
   184f4:	e7f1      	b.n	184da <_fflush_r+0x26>
   184f6:	4b04      	ldr	r3, [pc, #16]	; (18508 <_fflush_r+0x54>)
   184f8:	429c      	cmp	r4, r3
   184fa:	d1ee      	bne.n	184da <_fflush_r+0x26>
   184fc:	68ec      	ldr	r4, [r5, #12]
   184fe:	e7ec      	b.n	184da <_fflush_r+0x26>
   18500:	0001a5b4 	.word	0x0001a5b4
   18504:	0001a5d4 	.word	0x0001a5d4
   18508:	0001a594 	.word	0x0001a594

0001850c <_cleanup_r>:
   1850c:	b510      	push	{r4, lr}
   1850e:	4902      	ldr	r1, [pc, #8]	; (18518 <_cleanup_r+0xc>)
   18510:	f000 f8b2 	bl	18678 <_fwalk_reent>
   18514:	bd10      	pop	{r4, pc}
   18516:	46c0      	nop			; (mov r8, r8)
   18518:	000184b5 	.word	0x000184b5

0001851c <std.isra.0>:
   1851c:	2300      	movs	r3, #0
   1851e:	b510      	push	{r4, lr}
   18520:	0004      	movs	r4, r0
   18522:	6003      	str	r3, [r0, #0]
   18524:	6043      	str	r3, [r0, #4]
   18526:	6083      	str	r3, [r0, #8]
   18528:	8181      	strh	r1, [r0, #12]
   1852a:	6643      	str	r3, [r0, #100]	; 0x64
   1852c:	81c2      	strh	r2, [r0, #14]
   1852e:	6103      	str	r3, [r0, #16]
   18530:	6143      	str	r3, [r0, #20]
   18532:	6183      	str	r3, [r0, #24]
   18534:	0019      	movs	r1, r3
   18536:	2208      	movs	r2, #8
   18538:	305c      	adds	r0, #92	; 0x5c
   1853a:	f7ff f99f 	bl	1787c <memset>
   1853e:	4b05      	ldr	r3, [pc, #20]	; (18554 <std.isra.0+0x38>)
   18540:	6224      	str	r4, [r4, #32]
   18542:	6263      	str	r3, [r4, #36]	; 0x24
   18544:	4b04      	ldr	r3, [pc, #16]	; (18558 <std.isra.0+0x3c>)
   18546:	62a3      	str	r3, [r4, #40]	; 0x28
   18548:	4b04      	ldr	r3, [pc, #16]	; (1855c <std.isra.0+0x40>)
   1854a:	62e3      	str	r3, [r4, #44]	; 0x2c
   1854c:	4b04      	ldr	r3, [pc, #16]	; (18560 <std.isra.0+0x44>)
   1854e:	6323      	str	r3, [r4, #48]	; 0x30
   18550:	bd10      	pop	{r4, pc}
   18552:	46c0      	nop			; (mov r8, r8)
   18554:	00018d71 	.word	0x00018d71
   18558:	00018d99 	.word	0x00018d99
   1855c:	00018dd1 	.word	0x00018dd1
   18560:	00018dfd 	.word	0x00018dfd

00018564 <__sfmoreglue>:
   18564:	b570      	push	{r4, r5, r6, lr}
   18566:	2568      	movs	r5, #104	; 0x68
   18568:	1e4a      	subs	r2, r1, #1
   1856a:	4355      	muls	r5, r2
   1856c:	000e      	movs	r6, r1
   1856e:	0029      	movs	r1, r5
   18570:	3174      	adds	r1, #116	; 0x74
   18572:	f000 f981 	bl	18878 <_malloc_r>
   18576:	1e04      	subs	r4, r0, #0
   18578:	d008      	beq.n	1858c <__sfmoreglue+0x28>
   1857a:	2100      	movs	r1, #0
   1857c:	002a      	movs	r2, r5
   1857e:	6001      	str	r1, [r0, #0]
   18580:	6046      	str	r6, [r0, #4]
   18582:	300c      	adds	r0, #12
   18584:	60a0      	str	r0, [r4, #8]
   18586:	3268      	adds	r2, #104	; 0x68
   18588:	f7ff f978 	bl	1787c <memset>
   1858c:	0020      	movs	r0, r4
   1858e:	bd70      	pop	{r4, r5, r6, pc}

00018590 <__sinit>:
   18590:	6983      	ldr	r3, [r0, #24]
   18592:	b513      	push	{r0, r1, r4, lr}
   18594:	0004      	movs	r4, r0
   18596:	2b00      	cmp	r3, #0
   18598:	d128      	bne.n	185ec <__sinit+0x5c>
   1859a:	6483      	str	r3, [r0, #72]	; 0x48
   1859c:	64c3      	str	r3, [r0, #76]	; 0x4c
   1859e:	6503      	str	r3, [r0, #80]	; 0x50
   185a0:	4b13      	ldr	r3, [pc, #76]	; (185f0 <__sinit+0x60>)
   185a2:	4a14      	ldr	r2, [pc, #80]	; (185f4 <__sinit+0x64>)
   185a4:	681b      	ldr	r3, [r3, #0]
   185a6:	6282      	str	r2, [r0, #40]	; 0x28
   185a8:	9301      	str	r3, [sp, #4]
   185aa:	4298      	cmp	r0, r3
   185ac:	d101      	bne.n	185b2 <__sinit+0x22>
   185ae:	2301      	movs	r3, #1
   185b0:	6183      	str	r3, [r0, #24]
   185b2:	0020      	movs	r0, r4
   185b4:	f000 f820 	bl	185f8 <__sfp>
   185b8:	6060      	str	r0, [r4, #4]
   185ba:	0020      	movs	r0, r4
   185bc:	f000 f81c 	bl	185f8 <__sfp>
   185c0:	60a0      	str	r0, [r4, #8]
   185c2:	0020      	movs	r0, r4
   185c4:	f000 f818 	bl	185f8 <__sfp>
   185c8:	2200      	movs	r2, #0
   185ca:	60e0      	str	r0, [r4, #12]
   185cc:	2104      	movs	r1, #4
   185ce:	6860      	ldr	r0, [r4, #4]
   185d0:	f7ff ffa4 	bl	1851c <std.isra.0>
   185d4:	2201      	movs	r2, #1
   185d6:	2109      	movs	r1, #9
   185d8:	68a0      	ldr	r0, [r4, #8]
   185da:	f7ff ff9f 	bl	1851c <std.isra.0>
   185de:	2202      	movs	r2, #2
   185e0:	2112      	movs	r1, #18
   185e2:	68e0      	ldr	r0, [r4, #12]
   185e4:	f7ff ff9a 	bl	1851c <std.isra.0>
   185e8:	2301      	movs	r3, #1
   185ea:	61a3      	str	r3, [r4, #24]
   185ec:	bd13      	pop	{r0, r1, r4, pc}
   185ee:	46c0      	nop			; (mov r8, r8)
   185f0:	0001a55c 	.word	0x0001a55c
   185f4:	0001850d 	.word	0x0001850d

000185f8 <__sfp>:
   185f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   185fa:	4b1e      	ldr	r3, [pc, #120]	; (18674 <__sfp+0x7c>)
   185fc:	0007      	movs	r7, r0
   185fe:	681e      	ldr	r6, [r3, #0]
   18600:	69b3      	ldr	r3, [r6, #24]
   18602:	2b00      	cmp	r3, #0
   18604:	d102      	bne.n	1860c <__sfp+0x14>
   18606:	0030      	movs	r0, r6
   18608:	f7ff ffc2 	bl	18590 <__sinit>
   1860c:	3648      	adds	r6, #72	; 0x48
   1860e:	68b4      	ldr	r4, [r6, #8]
   18610:	6873      	ldr	r3, [r6, #4]
   18612:	3b01      	subs	r3, #1
   18614:	d504      	bpl.n	18620 <__sfp+0x28>
   18616:	6833      	ldr	r3, [r6, #0]
   18618:	2b00      	cmp	r3, #0
   1861a:	d007      	beq.n	1862c <__sfp+0x34>
   1861c:	6836      	ldr	r6, [r6, #0]
   1861e:	e7f6      	b.n	1860e <__sfp+0x16>
   18620:	220c      	movs	r2, #12
   18622:	5ea5      	ldrsh	r5, [r4, r2]
   18624:	2d00      	cmp	r5, #0
   18626:	d00d      	beq.n	18644 <__sfp+0x4c>
   18628:	3468      	adds	r4, #104	; 0x68
   1862a:	e7f2      	b.n	18612 <__sfp+0x1a>
   1862c:	2104      	movs	r1, #4
   1862e:	0038      	movs	r0, r7
   18630:	f7ff ff98 	bl	18564 <__sfmoreglue>
   18634:	6030      	str	r0, [r6, #0]
   18636:	2800      	cmp	r0, #0
   18638:	d1f0      	bne.n	1861c <__sfp+0x24>
   1863a:	230c      	movs	r3, #12
   1863c:	0004      	movs	r4, r0
   1863e:	603b      	str	r3, [r7, #0]
   18640:	0020      	movs	r0, r4
   18642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18644:	2301      	movs	r3, #1
   18646:	0020      	movs	r0, r4
   18648:	425b      	negs	r3, r3
   1864a:	81e3      	strh	r3, [r4, #14]
   1864c:	3302      	adds	r3, #2
   1864e:	81a3      	strh	r3, [r4, #12]
   18650:	6665      	str	r5, [r4, #100]	; 0x64
   18652:	6025      	str	r5, [r4, #0]
   18654:	60a5      	str	r5, [r4, #8]
   18656:	6065      	str	r5, [r4, #4]
   18658:	6125      	str	r5, [r4, #16]
   1865a:	6165      	str	r5, [r4, #20]
   1865c:	61a5      	str	r5, [r4, #24]
   1865e:	2208      	movs	r2, #8
   18660:	0029      	movs	r1, r5
   18662:	305c      	adds	r0, #92	; 0x5c
   18664:	f7ff f90a 	bl	1787c <memset>
   18668:	6365      	str	r5, [r4, #52]	; 0x34
   1866a:	63a5      	str	r5, [r4, #56]	; 0x38
   1866c:	64a5      	str	r5, [r4, #72]	; 0x48
   1866e:	64e5      	str	r5, [r4, #76]	; 0x4c
   18670:	e7e6      	b.n	18640 <__sfp+0x48>
   18672:	46c0      	nop			; (mov r8, r8)
   18674:	0001a55c 	.word	0x0001a55c

00018678 <_fwalk_reent>:
   18678:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1867a:	0004      	movs	r4, r0
   1867c:	0007      	movs	r7, r0
   1867e:	2600      	movs	r6, #0
   18680:	9101      	str	r1, [sp, #4]
   18682:	3448      	adds	r4, #72	; 0x48
   18684:	2c00      	cmp	r4, #0
   18686:	d101      	bne.n	1868c <_fwalk_reent+0x14>
   18688:	0030      	movs	r0, r6
   1868a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1868c:	6863      	ldr	r3, [r4, #4]
   1868e:	68a5      	ldr	r5, [r4, #8]
   18690:	9300      	str	r3, [sp, #0]
   18692:	9b00      	ldr	r3, [sp, #0]
   18694:	3b01      	subs	r3, #1
   18696:	9300      	str	r3, [sp, #0]
   18698:	d501      	bpl.n	1869e <_fwalk_reent+0x26>
   1869a:	6824      	ldr	r4, [r4, #0]
   1869c:	e7f2      	b.n	18684 <_fwalk_reent+0xc>
   1869e:	89ab      	ldrh	r3, [r5, #12]
   186a0:	2b01      	cmp	r3, #1
   186a2:	d908      	bls.n	186b6 <_fwalk_reent+0x3e>
   186a4:	220e      	movs	r2, #14
   186a6:	5eab      	ldrsh	r3, [r5, r2]
   186a8:	3301      	adds	r3, #1
   186aa:	d004      	beq.n	186b6 <_fwalk_reent+0x3e>
   186ac:	0029      	movs	r1, r5
   186ae:	0038      	movs	r0, r7
   186b0:	9b01      	ldr	r3, [sp, #4]
   186b2:	4798      	blx	r3
   186b4:	4306      	orrs	r6, r0
   186b6:	3568      	adds	r5, #104	; 0x68
   186b8:	e7eb      	b.n	18692 <_fwalk_reent+0x1a>
   186ba:	Address 0x000186ba is out of bounds.


000186bc <__swhatbuf_r>:
   186bc:	b570      	push	{r4, r5, r6, lr}
   186be:	000e      	movs	r6, r1
   186c0:	001d      	movs	r5, r3
   186c2:	230e      	movs	r3, #14
   186c4:	5ec9      	ldrsh	r1, [r1, r3]
   186c6:	b090      	sub	sp, #64	; 0x40
   186c8:	0014      	movs	r4, r2
   186ca:	2900      	cmp	r1, #0
   186cc:	da07      	bge.n	186de <__swhatbuf_r+0x22>
   186ce:	2300      	movs	r3, #0
   186d0:	602b      	str	r3, [r5, #0]
   186d2:	89b3      	ldrh	r3, [r6, #12]
   186d4:	061b      	lsls	r3, r3, #24
   186d6:	d411      	bmi.n	186fc <__swhatbuf_r+0x40>
   186d8:	2380      	movs	r3, #128	; 0x80
   186da:	00db      	lsls	r3, r3, #3
   186dc:	e00f      	b.n	186fe <__swhatbuf_r+0x42>
   186de:	aa01      	add	r2, sp, #4
   186e0:	f000 fbb8 	bl	18e54 <_fstat_r>
   186e4:	2800      	cmp	r0, #0
   186e6:	dbf2      	blt.n	186ce <__swhatbuf_r+0x12>
   186e8:	22f0      	movs	r2, #240	; 0xf0
   186ea:	9b02      	ldr	r3, [sp, #8]
   186ec:	0212      	lsls	r2, r2, #8
   186ee:	4013      	ands	r3, r2
   186f0:	4a05      	ldr	r2, [pc, #20]	; (18708 <__swhatbuf_r+0x4c>)
   186f2:	189b      	adds	r3, r3, r2
   186f4:	425a      	negs	r2, r3
   186f6:	4153      	adcs	r3, r2
   186f8:	602b      	str	r3, [r5, #0]
   186fa:	e7ed      	b.n	186d8 <__swhatbuf_r+0x1c>
   186fc:	2340      	movs	r3, #64	; 0x40
   186fe:	2000      	movs	r0, #0
   18700:	6023      	str	r3, [r4, #0]
   18702:	b010      	add	sp, #64	; 0x40
   18704:	bd70      	pop	{r4, r5, r6, pc}
   18706:	46c0      	nop			; (mov r8, r8)
   18708:	ffffe000 	.word	0xffffe000

0001870c <__smakebuf_r>:
   1870c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1870e:	2602      	movs	r6, #2
   18710:	898b      	ldrh	r3, [r1, #12]
   18712:	0005      	movs	r5, r0
   18714:	000c      	movs	r4, r1
   18716:	4233      	tst	r3, r6
   18718:	d006      	beq.n	18728 <__smakebuf_r+0x1c>
   1871a:	0023      	movs	r3, r4
   1871c:	3347      	adds	r3, #71	; 0x47
   1871e:	6023      	str	r3, [r4, #0]
   18720:	6123      	str	r3, [r4, #16]
   18722:	2301      	movs	r3, #1
   18724:	6163      	str	r3, [r4, #20]
   18726:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   18728:	ab01      	add	r3, sp, #4
   1872a:	466a      	mov	r2, sp
   1872c:	f7ff ffc6 	bl	186bc <__swhatbuf_r>
   18730:	9900      	ldr	r1, [sp, #0]
   18732:	0007      	movs	r7, r0
   18734:	0028      	movs	r0, r5
   18736:	f000 f89f 	bl	18878 <_malloc_r>
   1873a:	2800      	cmp	r0, #0
   1873c:	d108      	bne.n	18750 <__smakebuf_r+0x44>
   1873e:	220c      	movs	r2, #12
   18740:	5ea3      	ldrsh	r3, [r4, r2]
   18742:	059a      	lsls	r2, r3, #22
   18744:	d4ef      	bmi.n	18726 <__smakebuf_r+0x1a>
   18746:	2203      	movs	r2, #3
   18748:	4393      	bics	r3, r2
   1874a:	431e      	orrs	r6, r3
   1874c:	81a6      	strh	r6, [r4, #12]
   1874e:	e7e4      	b.n	1871a <__smakebuf_r+0xe>
   18750:	4b0f      	ldr	r3, [pc, #60]	; (18790 <__smakebuf_r+0x84>)
   18752:	62ab      	str	r3, [r5, #40]	; 0x28
   18754:	2380      	movs	r3, #128	; 0x80
   18756:	89a2      	ldrh	r2, [r4, #12]
   18758:	6020      	str	r0, [r4, #0]
   1875a:	4313      	orrs	r3, r2
   1875c:	81a3      	strh	r3, [r4, #12]
   1875e:	9b00      	ldr	r3, [sp, #0]
   18760:	6120      	str	r0, [r4, #16]
   18762:	6163      	str	r3, [r4, #20]
   18764:	9b01      	ldr	r3, [sp, #4]
   18766:	2b00      	cmp	r3, #0
   18768:	d00d      	beq.n	18786 <__smakebuf_r+0x7a>
   1876a:	230e      	movs	r3, #14
   1876c:	5ee1      	ldrsh	r1, [r4, r3]
   1876e:	0028      	movs	r0, r5
   18770:	f000 fb82 	bl	18e78 <_isatty_r>
   18774:	2800      	cmp	r0, #0
   18776:	d006      	beq.n	18786 <__smakebuf_r+0x7a>
   18778:	2203      	movs	r2, #3
   1877a:	89a3      	ldrh	r3, [r4, #12]
   1877c:	4393      	bics	r3, r2
   1877e:	001a      	movs	r2, r3
   18780:	2301      	movs	r3, #1
   18782:	4313      	orrs	r3, r2
   18784:	81a3      	strh	r3, [r4, #12]
   18786:	89a0      	ldrh	r0, [r4, #12]
   18788:	4338      	orrs	r0, r7
   1878a:	81a0      	strh	r0, [r4, #12]
   1878c:	e7cb      	b.n	18726 <__smakebuf_r+0x1a>
   1878e:	46c0      	nop			; (mov r8, r8)
   18790:	0001850d 	.word	0x0001850d

00018794 <malloc>:
   18794:	b510      	push	{r4, lr}
   18796:	4b03      	ldr	r3, [pc, #12]	; (187a4 <malloc+0x10>)
   18798:	0001      	movs	r1, r0
   1879a:	6818      	ldr	r0, [r3, #0]
   1879c:	f000 f86c 	bl	18878 <_malloc_r>
   187a0:	bd10      	pop	{r4, pc}
   187a2:	46c0      	nop			; (mov r8, r8)
   187a4:	20000028 	.word	0x20000028

000187a8 <memchr>:
   187a8:	b2c9      	uxtb	r1, r1
   187aa:	1882      	adds	r2, r0, r2
   187ac:	4290      	cmp	r0, r2
   187ae:	d101      	bne.n	187b4 <memchr+0xc>
   187b0:	2000      	movs	r0, #0
   187b2:	4770      	bx	lr
   187b4:	7803      	ldrb	r3, [r0, #0]
   187b6:	428b      	cmp	r3, r1
   187b8:	d0fb      	beq.n	187b2 <memchr+0xa>
   187ba:	3001      	adds	r0, #1
   187bc:	e7f6      	b.n	187ac <memchr+0x4>

000187be <memmove>:
   187be:	b510      	push	{r4, lr}
   187c0:	4288      	cmp	r0, r1
   187c2:	d902      	bls.n	187ca <memmove+0xc>
   187c4:	188b      	adds	r3, r1, r2
   187c6:	4298      	cmp	r0, r3
   187c8:	d308      	bcc.n	187dc <memmove+0x1e>
   187ca:	2300      	movs	r3, #0
   187cc:	429a      	cmp	r2, r3
   187ce:	d007      	beq.n	187e0 <memmove+0x22>
   187d0:	5ccc      	ldrb	r4, [r1, r3]
   187d2:	54c4      	strb	r4, [r0, r3]
   187d4:	3301      	adds	r3, #1
   187d6:	e7f9      	b.n	187cc <memmove+0xe>
   187d8:	5c8b      	ldrb	r3, [r1, r2]
   187da:	5483      	strb	r3, [r0, r2]
   187dc:	3a01      	subs	r2, #1
   187de:	d2fb      	bcs.n	187d8 <memmove+0x1a>
   187e0:	bd10      	pop	{r4, pc}
   187e2:	Address 0x000187e2 is out of bounds.


000187e4 <_free_r>:
   187e4:	b570      	push	{r4, r5, r6, lr}
   187e6:	0005      	movs	r5, r0
   187e8:	2900      	cmp	r1, #0
   187ea:	d010      	beq.n	1880e <_free_r+0x2a>
   187ec:	1f0c      	subs	r4, r1, #4
   187ee:	6823      	ldr	r3, [r4, #0]
   187f0:	2b00      	cmp	r3, #0
   187f2:	da00      	bge.n	187f6 <_free_r+0x12>
   187f4:	18e4      	adds	r4, r4, r3
   187f6:	0028      	movs	r0, r5
   187f8:	f000 fb64 	bl	18ec4 <__malloc_lock>
   187fc:	4a1d      	ldr	r2, [pc, #116]	; (18874 <_free_r+0x90>)
   187fe:	6813      	ldr	r3, [r2, #0]
   18800:	2b00      	cmp	r3, #0
   18802:	d105      	bne.n	18810 <_free_r+0x2c>
   18804:	6063      	str	r3, [r4, #4]
   18806:	6014      	str	r4, [r2, #0]
   18808:	0028      	movs	r0, r5
   1880a:	f000 fb5c 	bl	18ec6 <__malloc_unlock>
   1880e:	bd70      	pop	{r4, r5, r6, pc}
   18810:	42a3      	cmp	r3, r4
   18812:	d909      	bls.n	18828 <_free_r+0x44>
   18814:	6821      	ldr	r1, [r4, #0]
   18816:	1860      	adds	r0, r4, r1
   18818:	4283      	cmp	r3, r0
   1881a:	d1f3      	bne.n	18804 <_free_r+0x20>
   1881c:	6818      	ldr	r0, [r3, #0]
   1881e:	685b      	ldr	r3, [r3, #4]
   18820:	1841      	adds	r1, r0, r1
   18822:	6021      	str	r1, [r4, #0]
   18824:	e7ee      	b.n	18804 <_free_r+0x20>
   18826:	0013      	movs	r3, r2
   18828:	685a      	ldr	r2, [r3, #4]
   1882a:	2a00      	cmp	r2, #0
   1882c:	d001      	beq.n	18832 <_free_r+0x4e>
   1882e:	42a2      	cmp	r2, r4
   18830:	d9f9      	bls.n	18826 <_free_r+0x42>
   18832:	6819      	ldr	r1, [r3, #0]
   18834:	1858      	adds	r0, r3, r1
   18836:	42a0      	cmp	r0, r4
   18838:	d10b      	bne.n	18852 <_free_r+0x6e>
   1883a:	6820      	ldr	r0, [r4, #0]
   1883c:	1809      	adds	r1, r1, r0
   1883e:	1858      	adds	r0, r3, r1
   18840:	6019      	str	r1, [r3, #0]
   18842:	4282      	cmp	r2, r0
   18844:	d1e0      	bne.n	18808 <_free_r+0x24>
   18846:	6810      	ldr	r0, [r2, #0]
   18848:	6852      	ldr	r2, [r2, #4]
   1884a:	1841      	adds	r1, r0, r1
   1884c:	6019      	str	r1, [r3, #0]
   1884e:	605a      	str	r2, [r3, #4]
   18850:	e7da      	b.n	18808 <_free_r+0x24>
   18852:	42a0      	cmp	r0, r4
   18854:	d902      	bls.n	1885c <_free_r+0x78>
   18856:	230c      	movs	r3, #12
   18858:	602b      	str	r3, [r5, #0]
   1885a:	e7d5      	b.n	18808 <_free_r+0x24>
   1885c:	6821      	ldr	r1, [r4, #0]
   1885e:	1860      	adds	r0, r4, r1
   18860:	4282      	cmp	r2, r0
   18862:	d103      	bne.n	1886c <_free_r+0x88>
   18864:	6810      	ldr	r0, [r2, #0]
   18866:	6852      	ldr	r2, [r2, #4]
   18868:	1841      	adds	r1, r0, r1
   1886a:	6021      	str	r1, [r4, #0]
   1886c:	6062      	str	r2, [r4, #4]
   1886e:	605c      	str	r4, [r3, #4]
   18870:	e7ca      	b.n	18808 <_free_r+0x24>
   18872:	46c0      	nop			; (mov r8, r8)
   18874:	200020ec 	.word	0x200020ec

00018878 <_malloc_r>:
   18878:	2303      	movs	r3, #3
   1887a:	b570      	push	{r4, r5, r6, lr}
   1887c:	1ccd      	adds	r5, r1, #3
   1887e:	439d      	bics	r5, r3
   18880:	3508      	adds	r5, #8
   18882:	0006      	movs	r6, r0
   18884:	2d0c      	cmp	r5, #12
   18886:	d21e      	bcs.n	188c6 <_malloc_r+0x4e>
   18888:	250c      	movs	r5, #12
   1888a:	42a9      	cmp	r1, r5
   1888c:	d81d      	bhi.n	188ca <_malloc_r+0x52>
   1888e:	0030      	movs	r0, r6
   18890:	f000 fb18 	bl	18ec4 <__malloc_lock>
   18894:	4a25      	ldr	r2, [pc, #148]	; (1892c <_malloc_r+0xb4>)
   18896:	6814      	ldr	r4, [r2, #0]
   18898:	0021      	movs	r1, r4
   1889a:	2900      	cmp	r1, #0
   1889c:	d119      	bne.n	188d2 <_malloc_r+0x5a>
   1889e:	4c24      	ldr	r4, [pc, #144]	; (18930 <_malloc_r+0xb8>)
   188a0:	6823      	ldr	r3, [r4, #0]
   188a2:	2b00      	cmp	r3, #0
   188a4:	d103      	bne.n	188ae <_malloc_r+0x36>
   188a6:	0030      	movs	r0, r6
   188a8:	f000 fa06 	bl	18cb8 <_sbrk_r>
   188ac:	6020      	str	r0, [r4, #0]
   188ae:	0029      	movs	r1, r5
   188b0:	0030      	movs	r0, r6
   188b2:	f000 fa01 	bl	18cb8 <_sbrk_r>
   188b6:	1c43      	adds	r3, r0, #1
   188b8:	d12c      	bne.n	18914 <_malloc_r+0x9c>
   188ba:	230c      	movs	r3, #12
   188bc:	0030      	movs	r0, r6
   188be:	6033      	str	r3, [r6, #0]
   188c0:	f000 fb01 	bl	18ec6 <__malloc_unlock>
   188c4:	e003      	b.n	188ce <_malloc_r+0x56>
   188c6:	2d00      	cmp	r5, #0
   188c8:	dadf      	bge.n	1888a <_malloc_r+0x12>
   188ca:	230c      	movs	r3, #12
   188cc:	6033      	str	r3, [r6, #0]
   188ce:	2000      	movs	r0, #0
   188d0:	bd70      	pop	{r4, r5, r6, pc}
   188d2:	680b      	ldr	r3, [r1, #0]
   188d4:	1b5b      	subs	r3, r3, r5
   188d6:	d41a      	bmi.n	1890e <_malloc_r+0x96>
   188d8:	2b0b      	cmp	r3, #11
   188da:	d903      	bls.n	188e4 <_malloc_r+0x6c>
   188dc:	600b      	str	r3, [r1, #0]
   188de:	18cc      	adds	r4, r1, r3
   188e0:	6025      	str	r5, [r4, #0]
   188e2:	e003      	b.n	188ec <_malloc_r+0x74>
   188e4:	428c      	cmp	r4, r1
   188e6:	d10e      	bne.n	18906 <_malloc_r+0x8e>
   188e8:	6863      	ldr	r3, [r4, #4]
   188ea:	6013      	str	r3, [r2, #0]
   188ec:	0030      	movs	r0, r6
   188ee:	f000 faea 	bl	18ec6 <__malloc_unlock>
   188f2:	0020      	movs	r0, r4
   188f4:	2207      	movs	r2, #7
   188f6:	300b      	adds	r0, #11
   188f8:	1d23      	adds	r3, r4, #4
   188fa:	4390      	bics	r0, r2
   188fc:	1ac3      	subs	r3, r0, r3
   188fe:	d0e7      	beq.n	188d0 <_malloc_r+0x58>
   18900:	425a      	negs	r2, r3
   18902:	50e2      	str	r2, [r4, r3]
   18904:	e7e4      	b.n	188d0 <_malloc_r+0x58>
   18906:	684b      	ldr	r3, [r1, #4]
   18908:	6063      	str	r3, [r4, #4]
   1890a:	000c      	movs	r4, r1
   1890c:	e7ee      	b.n	188ec <_malloc_r+0x74>
   1890e:	000c      	movs	r4, r1
   18910:	6849      	ldr	r1, [r1, #4]
   18912:	e7c2      	b.n	1889a <_malloc_r+0x22>
   18914:	2303      	movs	r3, #3
   18916:	1cc4      	adds	r4, r0, #3
   18918:	439c      	bics	r4, r3
   1891a:	42a0      	cmp	r0, r4
   1891c:	d0e0      	beq.n	188e0 <_malloc_r+0x68>
   1891e:	1a21      	subs	r1, r4, r0
   18920:	0030      	movs	r0, r6
   18922:	f000 f9c9 	bl	18cb8 <_sbrk_r>
   18926:	1c43      	adds	r3, r0, #1
   18928:	d1da      	bne.n	188e0 <_malloc_r+0x68>
   1892a:	e7c6      	b.n	188ba <_malloc_r+0x42>
   1892c:	200020ec 	.word	0x200020ec
   18930:	200020f0 	.word	0x200020f0

00018934 <_realloc_r>:
   18934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18936:	0007      	movs	r7, r0
   18938:	000d      	movs	r5, r1
   1893a:	0016      	movs	r6, r2
   1893c:	2900      	cmp	r1, #0
   1893e:	d105      	bne.n	1894c <_realloc_r+0x18>
   18940:	0011      	movs	r1, r2
   18942:	f7ff ff99 	bl	18878 <_malloc_r>
   18946:	0004      	movs	r4, r0
   18948:	0020      	movs	r0, r4
   1894a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1894c:	2a00      	cmp	r2, #0
   1894e:	d103      	bne.n	18958 <_realloc_r+0x24>
   18950:	f7ff ff48 	bl	187e4 <_free_r>
   18954:	0034      	movs	r4, r6
   18956:	e7f7      	b.n	18948 <_realloc_r+0x14>
   18958:	f000 fab6 	bl	18ec8 <_malloc_usable_size_r>
   1895c:	002c      	movs	r4, r5
   1895e:	4286      	cmp	r6, r0
   18960:	d9f2      	bls.n	18948 <_realloc_r+0x14>
   18962:	0031      	movs	r1, r6
   18964:	0038      	movs	r0, r7
   18966:	f7ff ff87 	bl	18878 <_malloc_r>
   1896a:	1e04      	subs	r4, r0, #0
   1896c:	d0ec      	beq.n	18948 <_realloc_r+0x14>
   1896e:	0029      	movs	r1, r5
   18970:	0032      	movs	r2, r6
   18972:	f7fe ff7a 	bl	1786a <memcpy>
   18976:	0029      	movs	r1, r5
   18978:	0038      	movs	r0, r7
   1897a:	f7ff ff33 	bl	187e4 <_free_r>
   1897e:	e7e3      	b.n	18948 <_realloc_r+0x14>

00018980 <__ssputs_r>:
   18980:	b5f0      	push	{r4, r5, r6, r7, lr}
   18982:	688e      	ldr	r6, [r1, #8]
   18984:	b085      	sub	sp, #20
   18986:	0007      	movs	r7, r0
   18988:	000c      	movs	r4, r1
   1898a:	9203      	str	r2, [sp, #12]
   1898c:	9301      	str	r3, [sp, #4]
   1898e:	429e      	cmp	r6, r3
   18990:	d839      	bhi.n	18a06 <__ssputs_r+0x86>
   18992:	2390      	movs	r3, #144	; 0x90
   18994:	898a      	ldrh	r2, [r1, #12]
   18996:	00db      	lsls	r3, r3, #3
   18998:	421a      	tst	r2, r3
   1899a:	d034      	beq.n	18a06 <__ssputs_r+0x86>
   1899c:	2503      	movs	r5, #3
   1899e:	6909      	ldr	r1, [r1, #16]
   189a0:	6823      	ldr	r3, [r4, #0]
   189a2:	1a5b      	subs	r3, r3, r1
   189a4:	9302      	str	r3, [sp, #8]
   189a6:	6963      	ldr	r3, [r4, #20]
   189a8:	9802      	ldr	r0, [sp, #8]
   189aa:	435d      	muls	r5, r3
   189ac:	0feb      	lsrs	r3, r5, #31
   189ae:	195d      	adds	r5, r3, r5
   189b0:	9b01      	ldr	r3, [sp, #4]
   189b2:	106d      	asrs	r5, r5, #1
   189b4:	3301      	adds	r3, #1
   189b6:	181b      	adds	r3, r3, r0
   189b8:	42ab      	cmp	r3, r5
   189ba:	d900      	bls.n	189be <__ssputs_r+0x3e>
   189bc:	001d      	movs	r5, r3
   189be:	0553      	lsls	r3, r2, #21
   189c0:	d532      	bpl.n	18a28 <__ssputs_r+0xa8>
   189c2:	0029      	movs	r1, r5
   189c4:	0038      	movs	r0, r7
   189c6:	f7ff ff57 	bl	18878 <_malloc_r>
   189ca:	1e06      	subs	r6, r0, #0
   189cc:	d109      	bne.n	189e2 <__ssputs_r+0x62>
   189ce:	230c      	movs	r3, #12
   189d0:	603b      	str	r3, [r7, #0]
   189d2:	2340      	movs	r3, #64	; 0x40
   189d4:	2001      	movs	r0, #1
   189d6:	89a2      	ldrh	r2, [r4, #12]
   189d8:	4240      	negs	r0, r0
   189da:	4313      	orrs	r3, r2
   189dc:	81a3      	strh	r3, [r4, #12]
   189de:	b005      	add	sp, #20
   189e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   189e2:	9a02      	ldr	r2, [sp, #8]
   189e4:	6921      	ldr	r1, [r4, #16]
   189e6:	f7fe ff40 	bl	1786a <memcpy>
   189ea:	89a3      	ldrh	r3, [r4, #12]
   189ec:	4a14      	ldr	r2, [pc, #80]	; (18a40 <__ssputs_r+0xc0>)
   189ee:	401a      	ands	r2, r3
   189f0:	2380      	movs	r3, #128	; 0x80
   189f2:	4313      	orrs	r3, r2
   189f4:	81a3      	strh	r3, [r4, #12]
   189f6:	9b02      	ldr	r3, [sp, #8]
   189f8:	6126      	str	r6, [r4, #16]
   189fa:	18f6      	adds	r6, r6, r3
   189fc:	6026      	str	r6, [r4, #0]
   189fe:	6165      	str	r5, [r4, #20]
   18a00:	9e01      	ldr	r6, [sp, #4]
   18a02:	1aed      	subs	r5, r5, r3
   18a04:	60a5      	str	r5, [r4, #8]
   18a06:	9b01      	ldr	r3, [sp, #4]
   18a08:	42b3      	cmp	r3, r6
   18a0a:	d200      	bcs.n	18a0e <__ssputs_r+0x8e>
   18a0c:	001e      	movs	r6, r3
   18a0e:	0032      	movs	r2, r6
   18a10:	9903      	ldr	r1, [sp, #12]
   18a12:	6820      	ldr	r0, [r4, #0]
   18a14:	f7ff fed3 	bl	187be <memmove>
   18a18:	68a3      	ldr	r3, [r4, #8]
   18a1a:	2000      	movs	r0, #0
   18a1c:	1b9b      	subs	r3, r3, r6
   18a1e:	60a3      	str	r3, [r4, #8]
   18a20:	6823      	ldr	r3, [r4, #0]
   18a22:	199e      	adds	r6, r3, r6
   18a24:	6026      	str	r6, [r4, #0]
   18a26:	e7da      	b.n	189de <__ssputs_r+0x5e>
   18a28:	002a      	movs	r2, r5
   18a2a:	0038      	movs	r0, r7
   18a2c:	f7ff ff82 	bl	18934 <_realloc_r>
   18a30:	1e06      	subs	r6, r0, #0
   18a32:	d1e0      	bne.n	189f6 <__ssputs_r+0x76>
   18a34:	6921      	ldr	r1, [r4, #16]
   18a36:	0038      	movs	r0, r7
   18a38:	f7ff fed4 	bl	187e4 <_free_r>
   18a3c:	e7c7      	b.n	189ce <__ssputs_r+0x4e>
   18a3e:	46c0      	nop			; (mov r8, r8)
   18a40:	fffffb7f 	.word	0xfffffb7f

00018a44 <_svfiprintf_r>:
   18a44:	b5f0      	push	{r4, r5, r6, r7, lr}
   18a46:	b09f      	sub	sp, #124	; 0x7c
   18a48:	9002      	str	r0, [sp, #8]
   18a4a:	9305      	str	r3, [sp, #20]
   18a4c:	898b      	ldrh	r3, [r1, #12]
   18a4e:	000f      	movs	r7, r1
   18a50:	0016      	movs	r6, r2
   18a52:	061b      	lsls	r3, r3, #24
   18a54:	d511      	bpl.n	18a7a <_svfiprintf_r+0x36>
   18a56:	690b      	ldr	r3, [r1, #16]
   18a58:	2b00      	cmp	r3, #0
   18a5a:	d10e      	bne.n	18a7a <_svfiprintf_r+0x36>
   18a5c:	2140      	movs	r1, #64	; 0x40
   18a5e:	f7ff ff0b 	bl	18878 <_malloc_r>
   18a62:	6038      	str	r0, [r7, #0]
   18a64:	6138      	str	r0, [r7, #16]
   18a66:	2800      	cmp	r0, #0
   18a68:	d105      	bne.n	18a76 <_svfiprintf_r+0x32>
   18a6a:	230c      	movs	r3, #12
   18a6c:	9a02      	ldr	r2, [sp, #8]
   18a6e:	3801      	subs	r0, #1
   18a70:	6013      	str	r3, [r2, #0]
   18a72:	b01f      	add	sp, #124	; 0x7c
   18a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18a76:	2340      	movs	r3, #64	; 0x40
   18a78:	617b      	str	r3, [r7, #20]
   18a7a:	2300      	movs	r3, #0
   18a7c:	ad06      	add	r5, sp, #24
   18a7e:	616b      	str	r3, [r5, #20]
   18a80:	3320      	adds	r3, #32
   18a82:	766b      	strb	r3, [r5, #25]
   18a84:	3310      	adds	r3, #16
   18a86:	76ab      	strb	r3, [r5, #26]
   18a88:	0034      	movs	r4, r6
   18a8a:	7823      	ldrb	r3, [r4, #0]
   18a8c:	2b00      	cmp	r3, #0
   18a8e:	d147      	bne.n	18b20 <_svfiprintf_r+0xdc>
   18a90:	1ba3      	subs	r3, r4, r6
   18a92:	9304      	str	r3, [sp, #16]
   18a94:	d00d      	beq.n	18ab2 <_svfiprintf_r+0x6e>
   18a96:	1ba3      	subs	r3, r4, r6
   18a98:	0032      	movs	r2, r6
   18a9a:	0039      	movs	r1, r7
   18a9c:	9802      	ldr	r0, [sp, #8]
   18a9e:	f7ff ff6f 	bl	18980 <__ssputs_r>
   18aa2:	1c43      	adds	r3, r0, #1
   18aa4:	d100      	bne.n	18aa8 <_svfiprintf_r+0x64>
   18aa6:	e0b5      	b.n	18c14 <_svfiprintf_r+0x1d0>
   18aa8:	696a      	ldr	r2, [r5, #20]
   18aaa:	9b04      	ldr	r3, [sp, #16]
   18aac:	4694      	mov	ip, r2
   18aae:	4463      	add	r3, ip
   18ab0:	616b      	str	r3, [r5, #20]
   18ab2:	7823      	ldrb	r3, [r4, #0]
   18ab4:	2b00      	cmp	r3, #0
   18ab6:	d100      	bne.n	18aba <_svfiprintf_r+0x76>
   18ab8:	e0ac      	b.n	18c14 <_svfiprintf_r+0x1d0>
   18aba:	2201      	movs	r2, #1
   18abc:	2300      	movs	r3, #0
   18abe:	4252      	negs	r2, r2
   18ac0:	606a      	str	r2, [r5, #4]
   18ac2:	a902      	add	r1, sp, #8
   18ac4:	3254      	adds	r2, #84	; 0x54
   18ac6:	1852      	adds	r2, r2, r1
   18ac8:	3401      	adds	r4, #1
   18aca:	602b      	str	r3, [r5, #0]
   18acc:	60eb      	str	r3, [r5, #12]
   18ace:	60ab      	str	r3, [r5, #8]
   18ad0:	7013      	strb	r3, [r2, #0]
   18ad2:	65ab      	str	r3, [r5, #88]	; 0x58
   18ad4:	4e58      	ldr	r6, [pc, #352]	; (18c38 <_svfiprintf_r+0x1f4>)
   18ad6:	2205      	movs	r2, #5
   18ad8:	7821      	ldrb	r1, [r4, #0]
   18ada:	0030      	movs	r0, r6
   18adc:	f7ff fe64 	bl	187a8 <memchr>
   18ae0:	1c62      	adds	r2, r4, #1
   18ae2:	2800      	cmp	r0, #0
   18ae4:	d120      	bne.n	18b28 <_svfiprintf_r+0xe4>
   18ae6:	6829      	ldr	r1, [r5, #0]
   18ae8:	06cb      	lsls	r3, r1, #27
   18aea:	d504      	bpl.n	18af6 <_svfiprintf_r+0xb2>
   18aec:	2353      	movs	r3, #83	; 0x53
   18aee:	ae02      	add	r6, sp, #8
   18af0:	3020      	adds	r0, #32
   18af2:	199b      	adds	r3, r3, r6
   18af4:	7018      	strb	r0, [r3, #0]
   18af6:	070b      	lsls	r3, r1, #28
   18af8:	d504      	bpl.n	18b04 <_svfiprintf_r+0xc0>
   18afa:	2353      	movs	r3, #83	; 0x53
   18afc:	202b      	movs	r0, #43	; 0x2b
   18afe:	ae02      	add	r6, sp, #8
   18b00:	199b      	adds	r3, r3, r6
   18b02:	7018      	strb	r0, [r3, #0]
   18b04:	7823      	ldrb	r3, [r4, #0]
   18b06:	2b2a      	cmp	r3, #42	; 0x2a
   18b08:	d016      	beq.n	18b38 <_svfiprintf_r+0xf4>
   18b0a:	2000      	movs	r0, #0
   18b0c:	210a      	movs	r1, #10
   18b0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18b10:	7822      	ldrb	r2, [r4, #0]
   18b12:	3a30      	subs	r2, #48	; 0x30
   18b14:	2a09      	cmp	r2, #9
   18b16:	d955      	bls.n	18bc4 <_svfiprintf_r+0x180>
   18b18:	2800      	cmp	r0, #0
   18b1a:	d015      	beq.n	18b48 <_svfiprintf_r+0x104>
   18b1c:	9309      	str	r3, [sp, #36]	; 0x24
   18b1e:	e013      	b.n	18b48 <_svfiprintf_r+0x104>
   18b20:	2b25      	cmp	r3, #37	; 0x25
   18b22:	d0b5      	beq.n	18a90 <_svfiprintf_r+0x4c>
   18b24:	3401      	adds	r4, #1
   18b26:	e7b0      	b.n	18a8a <_svfiprintf_r+0x46>
   18b28:	2301      	movs	r3, #1
   18b2a:	1b80      	subs	r0, r0, r6
   18b2c:	4083      	lsls	r3, r0
   18b2e:	6829      	ldr	r1, [r5, #0]
   18b30:	0014      	movs	r4, r2
   18b32:	430b      	orrs	r3, r1
   18b34:	602b      	str	r3, [r5, #0]
   18b36:	e7cd      	b.n	18ad4 <_svfiprintf_r+0x90>
   18b38:	9b05      	ldr	r3, [sp, #20]
   18b3a:	1d18      	adds	r0, r3, #4
   18b3c:	681b      	ldr	r3, [r3, #0]
   18b3e:	9005      	str	r0, [sp, #20]
   18b40:	2b00      	cmp	r3, #0
   18b42:	db39      	blt.n	18bb8 <_svfiprintf_r+0x174>
   18b44:	9309      	str	r3, [sp, #36]	; 0x24
   18b46:	0014      	movs	r4, r2
   18b48:	7823      	ldrb	r3, [r4, #0]
   18b4a:	2b2e      	cmp	r3, #46	; 0x2e
   18b4c:	d10b      	bne.n	18b66 <_svfiprintf_r+0x122>
   18b4e:	7863      	ldrb	r3, [r4, #1]
   18b50:	1c62      	adds	r2, r4, #1
   18b52:	2b2a      	cmp	r3, #42	; 0x2a
   18b54:	d13e      	bne.n	18bd4 <_svfiprintf_r+0x190>
   18b56:	9b05      	ldr	r3, [sp, #20]
   18b58:	3402      	adds	r4, #2
   18b5a:	1d1a      	adds	r2, r3, #4
   18b5c:	681b      	ldr	r3, [r3, #0]
   18b5e:	9205      	str	r2, [sp, #20]
   18b60:	2b00      	cmp	r3, #0
   18b62:	db34      	blt.n	18bce <_svfiprintf_r+0x18a>
   18b64:	9307      	str	r3, [sp, #28]
   18b66:	4e35      	ldr	r6, [pc, #212]	; (18c3c <_svfiprintf_r+0x1f8>)
   18b68:	7821      	ldrb	r1, [r4, #0]
   18b6a:	2203      	movs	r2, #3
   18b6c:	0030      	movs	r0, r6
   18b6e:	f7ff fe1b 	bl	187a8 <memchr>
   18b72:	2800      	cmp	r0, #0
   18b74:	d006      	beq.n	18b84 <_svfiprintf_r+0x140>
   18b76:	2340      	movs	r3, #64	; 0x40
   18b78:	1b80      	subs	r0, r0, r6
   18b7a:	4083      	lsls	r3, r0
   18b7c:	682a      	ldr	r2, [r5, #0]
   18b7e:	3401      	adds	r4, #1
   18b80:	4313      	orrs	r3, r2
   18b82:	602b      	str	r3, [r5, #0]
   18b84:	7821      	ldrb	r1, [r4, #0]
   18b86:	2206      	movs	r2, #6
   18b88:	482d      	ldr	r0, [pc, #180]	; (18c40 <_svfiprintf_r+0x1fc>)
   18b8a:	1c66      	adds	r6, r4, #1
   18b8c:	7629      	strb	r1, [r5, #24]
   18b8e:	f7ff fe0b 	bl	187a8 <memchr>
   18b92:	2800      	cmp	r0, #0
   18b94:	d046      	beq.n	18c24 <_svfiprintf_r+0x1e0>
   18b96:	4b2b      	ldr	r3, [pc, #172]	; (18c44 <_svfiprintf_r+0x200>)
   18b98:	2b00      	cmp	r3, #0
   18b9a:	d12f      	bne.n	18bfc <_svfiprintf_r+0x1b8>
   18b9c:	6829      	ldr	r1, [r5, #0]
   18b9e:	9b05      	ldr	r3, [sp, #20]
   18ba0:	2207      	movs	r2, #7
   18ba2:	05c9      	lsls	r1, r1, #23
   18ba4:	d528      	bpl.n	18bf8 <_svfiprintf_r+0x1b4>
   18ba6:	189b      	adds	r3, r3, r2
   18ba8:	4393      	bics	r3, r2
   18baa:	3308      	adds	r3, #8
   18bac:	9305      	str	r3, [sp, #20]
   18bae:	696b      	ldr	r3, [r5, #20]
   18bb0:	9a03      	ldr	r2, [sp, #12]
   18bb2:	189b      	adds	r3, r3, r2
   18bb4:	616b      	str	r3, [r5, #20]
   18bb6:	e767      	b.n	18a88 <_svfiprintf_r+0x44>
   18bb8:	425b      	negs	r3, r3
   18bba:	60eb      	str	r3, [r5, #12]
   18bbc:	2302      	movs	r3, #2
   18bbe:	430b      	orrs	r3, r1
   18bc0:	602b      	str	r3, [r5, #0]
   18bc2:	e7c0      	b.n	18b46 <_svfiprintf_r+0x102>
   18bc4:	434b      	muls	r3, r1
   18bc6:	3401      	adds	r4, #1
   18bc8:	189b      	adds	r3, r3, r2
   18bca:	2001      	movs	r0, #1
   18bcc:	e7a0      	b.n	18b10 <_svfiprintf_r+0xcc>
   18bce:	2301      	movs	r3, #1
   18bd0:	425b      	negs	r3, r3
   18bd2:	e7c7      	b.n	18b64 <_svfiprintf_r+0x120>
   18bd4:	2300      	movs	r3, #0
   18bd6:	0014      	movs	r4, r2
   18bd8:	200a      	movs	r0, #10
   18bda:	001a      	movs	r2, r3
   18bdc:	606b      	str	r3, [r5, #4]
   18bde:	7821      	ldrb	r1, [r4, #0]
   18be0:	3930      	subs	r1, #48	; 0x30
   18be2:	2909      	cmp	r1, #9
   18be4:	d903      	bls.n	18bee <_svfiprintf_r+0x1aa>
   18be6:	2b00      	cmp	r3, #0
   18be8:	d0bd      	beq.n	18b66 <_svfiprintf_r+0x122>
   18bea:	9207      	str	r2, [sp, #28]
   18bec:	e7bb      	b.n	18b66 <_svfiprintf_r+0x122>
   18bee:	4342      	muls	r2, r0
   18bf0:	3401      	adds	r4, #1
   18bf2:	1852      	adds	r2, r2, r1
   18bf4:	2301      	movs	r3, #1
   18bf6:	e7f2      	b.n	18bde <_svfiprintf_r+0x19a>
   18bf8:	3307      	adds	r3, #7
   18bfa:	e7d5      	b.n	18ba8 <_svfiprintf_r+0x164>
   18bfc:	ab05      	add	r3, sp, #20
   18bfe:	9300      	str	r3, [sp, #0]
   18c00:	003a      	movs	r2, r7
   18c02:	4b11      	ldr	r3, [pc, #68]	; (18c48 <_svfiprintf_r+0x204>)
   18c04:	0029      	movs	r1, r5
   18c06:	9802      	ldr	r0, [sp, #8]
   18c08:	e000      	b.n	18c0c <_svfiprintf_r+0x1c8>
   18c0a:	bf00      	nop
   18c0c:	9003      	str	r0, [sp, #12]
   18c0e:	9b03      	ldr	r3, [sp, #12]
   18c10:	3301      	adds	r3, #1
   18c12:	d1cc      	bne.n	18bae <_svfiprintf_r+0x16a>
   18c14:	89bb      	ldrh	r3, [r7, #12]
   18c16:	980b      	ldr	r0, [sp, #44]	; 0x2c
   18c18:	065b      	lsls	r3, r3, #25
   18c1a:	d400      	bmi.n	18c1e <_svfiprintf_r+0x1da>
   18c1c:	e729      	b.n	18a72 <_svfiprintf_r+0x2e>
   18c1e:	2001      	movs	r0, #1
   18c20:	4240      	negs	r0, r0
   18c22:	e726      	b.n	18a72 <_svfiprintf_r+0x2e>
   18c24:	ab05      	add	r3, sp, #20
   18c26:	9300      	str	r3, [sp, #0]
   18c28:	003a      	movs	r2, r7
   18c2a:	4b07      	ldr	r3, [pc, #28]	; (18c48 <_svfiprintf_r+0x204>)
   18c2c:	0029      	movs	r1, r5
   18c2e:	9802      	ldr	r0, [sp, #8]
   18c30:	f7fe ffde 	bl	17bf0 <_printf_i>
   18c34:	e7ea      	b.n	18c0c <_svfiprintf_r+0x1c8>
   18c36:	46c0      	nop			; (mov r8, r8)
   18c38:	0001a560 	.word	0x0001a560
   18c3c:	0001a566 	.word	0x0001a566
   18c40:	0001a56a 	.word	0x0001a56a
   18c44:	00000000 	.word	0x00000000
   18c48:	00018981 	.word	0x00018981

00018c4c <_putc_r>:
   18c4c:	b570      	push	{r4, r5, r6, lr}
   18c4e:	0006      	movs	r6, r0
   18c50:	000d      	movs	r5, r1
   18c52:	0014      	movs	r4, r2
   18c54:	2800      	cmp	r0, #0
   18c56:	d004      	beq.n	18c62 <_putc_r+0x16>
   18c58:	6983      	ldr	r3, [r0, #24]
   18c5a:	2b00      	cmp	r3, #0
   18c5c:	d101      	bne.n	18c62 <_putc_r+0x16>
   18c5e:	f7ff fc97 	bl	18590 <__sinit>
   18c62:	4b12      	ldr	r3, [pc, #72]	; (18cac <_putc_r+0x60>)
   18c64:	429c      	cmp	r4, r3
   18c66:	d111      	bne.n	18c8c <_putc_r+0x40>
   18c68:	6874      	ldr	r4, [r6, #4]
   18c6a:	68a3      	ldr	r3, [r4, #8]
   18c6c:	3b01      	subs	r3, #1
   18c6e:	60a3      	str	r3, [r4, #8]
   18c70:	2b00      	cmp	r3, #0
   18c72:	da05      	bge.n	18c80 <_putc_r+0x34>
   18c74:	69a2      	ldr	r2, [r4, #24]
   18c76:	4293      	cmp	r3, r2
   18c78:	db12      	blt.n	18ca0 <_putc_r+0x54>
   18c7a:	b2eb      	uxtb	r3, r5
   18c7c:	2b0a      	cmp	r3, #10
   18c7e:	d00f      	beq.n	18ca0 <_putc_r+0x54>
   18c80:	6823      	ldr	r3, [r4, #0]
   18c82:	b2e8      	uxtb	r0, r5
   18c84:	1c5a      	adds	r2, r3, #1
   18c86:	6022      	str	r2, [r4, #0]
   18c88:	701d      	strb	r5, [r3, #0]
   18c8a:	bd70      	pop	{r4, r5, r6, pc}
   18c8c:	4b08      	ldr	r3, [pc, #32]	; (18cb0 <_putc_r+0x64>)
   18c8e:	429c      	cmp	r4, r3
   18c90:	d101      	bne.n	18c96 <_putc_r+0x4a>
   18c92:	68b4      	ldr	r4, [r6, #8]
   18c94:	e7e9      	b.n	18c6a <_putc_r+0x1e>
   18c96:	4b07      	ldr	r3, [pc, #28]	; (18cb4 <_putc_r+0x68>)
   18c98:	429c      	cmp	r4, r3
   18c9a:	d1e6      	bne.n	18c6a <_putc_r+0x1e>
   18c9c:	68f4      	ldr	r4, [r6, #12]
   18c9e:	e7e4      	b.n	18c6a <_putc_r+0x1e>
   18ca0:	0022      	movs	r2, r4
   18ca2:	0029      	movs	r1, r5
   18ca4:	0030      	movs	r0, r6
   18ca6:	f7ff faa7 	bl	181f8 <__swbuf_r>
   18caa:	e7ee      	b.n	18c8a <_putc_r+0x3e>
   18cac:	0001a5b4 	.word	0x0001a5b4
   18cb0:	0001a5d4 	.word	0x0001a5d4
   18cb4:	0001a594 	.word	0x0001a594

00018cb8 <_sbrk_r>:
   18cb8:	2300      	movs	r3, #0
   18cba:	b570      	push	{r4, r5, r6, lr}
   18cbc:	4c06      	ldr	r4, [pc, #24]	; (18cd8 <_sbrk_r+0x20>)
   18cbe:	0005      	movs	r5, r0
   18cc0:	0008      	movs	r0, r1
   18cc2:	6023      	str	r3, [r4, #0]
   18cc4:	f7ee faea 	bl	729c <_sbrk>
   18cc8:	1c43      	adds	r3, r0, #1
   18cca:	d103      	bne.n	18cd4 <_sbrk_r+0x1c>
   18ccc:	6823      	ldr	r3, [r4, #0]
   18cce:	2b00      	cmp	r3, #0
   18cd0:	d000      	beq.n	18cd4 <_sbrk_r+0x1c>
   18cd2:	602b      	str	r3, [r5, #0]
   18cd4:	bd70      	pop	{r4, r5, r6, pc}
   18cd6:	46c0      	nop			; (mov r8, r8)
   18cd8:	20003dd4 	.word	0x20003dd4

00018cdc <_raise_r>:
   18cdc:	b570      	push	{r4, r5, r6, lr}
   18cde:	0004      	movs	r4, r0
   18ce0:	000d      	movs	r5, r1
   18ce2:	291f      	cmp	r1, #31
   18ce4:	d904      	bls.n	18cf0 <_raise_r+0x14>
   18ce6:	2316      	movs	r3, #22
   18ce8:	6003      	str	r3, [r0, #0]
   18cea:	2001      	movs	r0, #1
   18cec:	4240      	negs	r0, r0
   18cee:	bd70      	pop	{r4, r5, r6, pc}
   18cf0:	6c43      	ldr	r3, [r0, #68]	; 0x44
   18cf2:	2b00      	cmp	r3, #0
   18cf4:	d004      	beq.n	18d00 <_raise_r+0x24>
   18cf6:	008a      	lsls	r2, r1, #2
   18cf8:	189b      	adds	r3, r3, r2
   18cfa:	681a      	ldr	r2, [r3, #0]
   18cfc:	2a00      	cmp	r2, #0
   18cfe:	d108      	bne.n	18d12 <_raise_r+0x36>
   18d00:	0020      	movs	r0, r4
   18d02:	f000 f831 	bl	18d68 <_getpid_r>
   18d06:	002a      	movs	r2, r5
   18d08:	0001      	movs	r1, r0
   18d0a:	0020      	movs	r0, r4
   18d0c:	f000 f81a 	bl	18d44 <_kill_r>
   18d10:	e7ed      	b.n	18cee <_raise_r+0x12>
   18d12:	2000      	movs	r0, #0
   18d14:	2a01      	cmp	r2, #1
   18d16:	d0ea      	beq.n	18cee <_raise_r+0x12>
   18d18:	1c51      	adds	r1, r2, #1
   18d1a:	d103      	bne.n	18d24 <_raise_r+0x48>
   18d1c:	2316      	movs	r3, #22
   18d1e:	3001      	adds	r0, #1
   18d20:	6023      	str	r3, [r4, #0]
   18d22:	e7e4      	b.n	18cee <_raise_r+0x12>
   18d24:	2400      	movs	r4, #0
   18d26:	0028      	movs	r0, r5
   18d28:	601c      	str	r4, [r3, #0]
   18d2a:	4790      	blx	r2
   18d2c:	0020      	movs	r0, r4
   18d2e:	e7de      	b.n	18cee <_raise_r+0x12>

00018d30 <raise>:
   18d30:	b510      	push	{r4, lr}
   18d32:	4b03      	ldr	r3, [pc, #12]	; (18d40 <raise+0x10>)
   18d34:	0001      	movs	r1, r0
   18d36:	6818      	ldr	r0, [r3, #0]
   18d38:	f7ff ffd0 	bl	18cdc <_raise_r>
   18d3c:	bd10      	pop	{r4, pc}
   18d3e:	46c0      	nop			; (mov r8, r8)
   18d40:	20000028 	.word	0x20000028

00018d44 <_kill_r>:
   18d44:	2300      	movs	r3, #0
   18d46:	b570      	push	{r4, r5, r6, lr}
   18d48:	4c06      	ldr	r4, [pc, #24]	; (18d64 <_kill_r+0x20>)
   18d4a:	0005      	movs	r5, r0
   18d4c:	0008      	movs	r0, r1
   18d4e:	0011      	movs	r1, r2
   18d50:	6023      	str	r3, [r4, #0]
   18d52:	f7ee fac3 	bl	72dc <_kill>
   18d56:	1c43      	adds	r3, r0, #1
   18d58:	d103      	bne.n	18d62 <_kill_r+0x1e>
   18d5a:	6823      	ldr	r3, [r4, #0]
   18d5c:	2b00      	cmp	r3, #0
   18d5e:	d000      	beq.n	18d62 <_kill_r+0x1e>
   18d60:	602b      	str	r3, [r5, #0]
   18d62:	bd70      	pop	{r4, r5, r6, pc}
   18d64:	20003dd4 	.word	0x20003dd4

00018d68 <_getpid_r>:
   18d68:	b510      	push	{r4, lr}
   18d6a:	f7ee fab8 	bl	72de <_getpid>
   18d6e:	bd10      	pop	{r4, pc}

00018d70 <__sread>:
   18d70:	b570      	push	{r4, r5, r6, lr}
   18d72:	000c      	movs	r4, r1
   18d74:	250e      	movs	r5, #14
   18d76:	5f49      	ldrsh	r1, [r1, r5]
   18d78:	f000 f8ae 	bl	18ed8 <_read_r>
   18d7c:	2800      	cmp	r0, #0
   18d7e:	db03      	blt.n	18d88 <__sread+0x18>
   18d80:	6d63      	ldr	r3, [r4, #84]	; 0x54
   18d82:	181b      	adds	r3, r3, r0
   18d84:	6563      	str	r3, [r4, #84]	; 0x54
   18d86:	bd70      	pop	{r4, r5, r6, pc}
   18d88:	89a3      	ldrh	r3, [r4, #12]
   18d8a:	4a02      	ldr	r2, [pc, #8]	; (18d94 <__sread+0x24>)
   18d8c:	4013      	ands	r3, r2
   18d8e:	81a3      	strh	r3, [r4, #12]
   18d90:	e7f9      	b.n	18d86 <__sread+0x16>
   18d92:	46c0      	nop			; (mov r8, r8)
   18d94:	ffffefff 	.word	0xffffefff

00018d98 <__swrite>:
   18d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18d9a:	001f      	movs	r7, r3
   18d9c:	898b      	ldrh	r3, [r1, #12]
   18d9e:	0005      	movs	r5, r0
   18da0:	000c      	movs	r4, r1
   18da2:	0016      	movs	r6, r2
   18da4:	05db      	lsls	r3, r3, #23
   18da6:	d505      	bpl.n	18db4 <__swrite+0x1c>
   18da8:	230e      	movs	r3, #14
   18daa:	5ec9      	ldrsh	r1, [r1, r3]
   18dac:	2200      	movs	r2, #0
   18dae:	2302      	movs	r3, #2
   18db0:	f000 f874 	bl	18e9c <_lseek_r>
   18db4:	89a3      	ldrh	r3, [r4, #12]
   18db6:	4a05      	ldr	r2, [pc, #20]	; (18dcc <__swrite+0x34>)
   18db8:	0028      	movs	r0, r5
   18dba:	4013      	ands	r3, r2
   18dbc:	81a3      	strh	r3, [r4, #12]
   18dbe:	0032      	movs	r2, r6
   18dc0:	230e      	movs	r3, #14
   18dc2:	5ee1      	ldrsh	r1, [r4, r3]
   18dc4:	003b      	movs	r3, r7
   18dc6:	f000 f81f 	bl	18e08 <_write_r>
   18dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18dcc:	ffffefff 	.word	0xffffefff

00018dd0 <__sseek>:
   18dd0:	b570      	push	{r4, r5, r6, lr}
   18dd2:	000c      	movs	r4, r1
   18dd4:	250e      	movs	r5, #14
   18dd6:	5f49      	ldrsh	r1, [r1, r5]
   18dd8:	f000 f860 	bl	18e9c <_lseek_r>
   18ddc:	89a3      	ldrh	r3, [r4, #12]
   18dde:	1c42      	adds	r2, r0, #1
   18de0:	d103      	bne.n	18dea <__sseek+0x1a>
   18de2:	4a05      	ldr	r2, [pc, #20]	; (18df8 <__sseek+0x28>)
   18de4:	4013      	ands	r3, r2
   18de6:	81a3      	strh	r3, [r4, #12]
   18de8:	bd70      	pop	{r4, r5, r6, pc}
   18dea:	2280      	movs	r2, #128	; 0x80
   18dec:	0152      	lsls	r2, r2, #5
   18dee:	4313      	orrs	r3, r2
   18df0:	81a3      	strh	r3, [r4, #12]
   18df2:	6560      	str	r0, [r4, #84]	; 0x54
   18df4:	e7f8      	b.n	18de8 <__sseek+0x18>
   18df6:	46c0      	nop			; (mov r8, r8)
   18df8:	ffffefff 	.word	0xffffefff

00018dfc <__sclose>:
   18dfc:	b510      	push	{r4, lr}
   18dfe:	230e      	movs	r3, #14
   18e00:	5ec9      	ldrsh	r1, [r1, r3]
   18e02:	f000 f815 	bl	18e30 <_close_r>
   18e06:	bd10      	pop	{r4, pc}

00018e08 <_write_r>:
   18e08:	b570      	push	{r4, r5, r6, lr}
   18e0a:	0005      	movs	r5, r0
   18e0c:	0008      	movs	r0, r1
   18e0e:	0011      	movs	r1, r2
   18e10:	2200      	movs	r2, #0
   18e12:	4c06      	ldr	r4, [pc, #24]	; (18e2c <_write_r+0x24>)
   18e14:	6022      	str	r2, [r4, #0]
   18e16:	001a      	movs	r2, r3
   18e18:	f7ee fa18 	bl	724c <_write>
   18e1c:	1c43      	adds	r3, r0, #1
   18e1e:	d103      	bne.n	18e28 <_write_r+0x20>
   18e20:	6823      	ldr	r3, [r4, #0]
   18e22:	2b00      	cmp	r3, #0
   18e24:	d000      	beq.n	18e28 <_write_r+0x20>
   18e26:	602b      	str	r3, [r5, #0]
   18e28:	bd70      	pop	{r4, r5, r6, pc}
   18e2a:	46c0      	nop			; (mov r8, r8)
   18e2c:	20003dd4 	.word	0x20003dd4

00018e30 <_close_r>:
   18e30:	2300      	movs	r3, #0
   18e32:	b570      	push	{r4, r5, r6, lr}
   18e34:	4c06      	ldr	r4, [pc, #24]	; (18e50 <_close_r+0x20>)
   18e36:	0005      	movs	r5, r0
   18e38:	0008      	movs	r0, r1
   18e3a:	6023      	str	r3, [r4, #0]
   18e3c:	f7ee fa40 	bl	72c0 <_close>
   18e40:	1c43      	adds	r3, r0, #1
   18e42:	d103      	bne.n	18e4c <_close_r+0x1c>
   18e44:	6823      	ldr	r3, [r4, #0]
   18e46:	2b00      	cmp	r3, #0
   18e48:	d000      	beq.n	18e4c <_close_r+0x1c>
   18e4a:	602b      	str	r3, [r5, #0]
   18e4c:	bd70      	pop	{r4, r5, r6, pc}
   18e4e:	46c0      	nop			; (mov r8, r8)
   18e50:	20003dd4 	.word	0x20003dd4

00018e54 <_fstat_r>:
   18e54:	2300      	movs	r3, #0
   18e56:	b570      	push	{r4, r5, r6, lr}
   18e58:	4c06      	ldr	r4, [pc, #24]	; (18e74 <_fstat_r+0x20>)
   18e5a:	0005      	movs	r5, r0
   18e5c:	0008      	movs	r0, r1
   18e5e:	0011      	movs	r1, r2
   18e60:	6023      	str	r3, [r4, #0]
   18e62:	f7ee fa30 	bl	72c6 <_fstat>
   18e66:	1c43      	adds	r3, r0, #1
   18e68:	d103      	bne.n	18e72 <_fstat_r+0x1e>
   18e6a:	6823      	ldr	r3, [r4, #0]
   18e6c:	2b00      	cmp	r3, #0
   18e6e:	d000      	beq.n	18e72 <_fstat_r+0x1e>
   18e70:	602b      	str	r3, [r5, #0]
   18e72:	bd70      	pop	{r4, r5, r6, pc}
   18e74:	20003dd4 	.word	0x20003dd4

00018e78 <_isatty_r>:
   18e78:	2300      	movs	r3, #0
   18e7a:	b570      	push	{r4, r5, r6, lr}
   18e7c:	4c06      	ldr	r4, [pc, #24]	; (18e98 <_isatty_r+0x20>)
   18e7e:	0005      	movs	r5, r0
   18e80:	0008      	movs	r0, r1
   18e82:	6023      	str	r3, [r4, #0]
   18e84:	f7ee fa24 	bl	72d0 <_isatty>
   18e88:	1c43      	adds	r3, r0, #1
   18e8a:	d103      	bne.n	18e94 <_isatty_r+0x1c>
   18e8c:	6823      	ldr	r3, [r4, #0]
   18e8e:	2b00      	cmp	r3, #0
   18e90:	d000      	beq.n	18e94 <_isatty_r+0x1c>
   18e92:	602b      	str	r3, [r5, #0]
   18e94:	bd70      	pop	{r4, r5, r6, pc}
   18e96:	46c0      	nop			; (mov r8, r8)
   18e98:	20003dd4 	.word	0x20003dd4

00018e9c <_lseek_r>:
   18e9c:	b570      	push	{r4, r5, r6, lr}
   18e9e:	0005      	movs	r5, r0
   18ea0:	0008      	movs	r0, r1
   18ea2:	0011      	movs	r1, r2
   18ea4:	2200      	movs	r2, #0
   18ea6:	4c06      	ldr	r4, [pc, #24]	; (18ec0 <_lseek_r+0x24>)
   18ea8:	6022      	str	r2, [r4, #0]
   18eaa:	001a      	movs	r2, r3
   18eac:	f7ee fa12 	bl	72d4 <_lseek>
   18eb0:	1c43      	adds	r3, r0, #1
   18eb2:	d103      	bne.n	18ebc <_lseek_r+0x20>
   18eb4:	6823      	ldr	r3, [r4, #0]
   18eb6:	2b00      	cmp	r3, #0
   18eb8:	d000      	beq.n	18ebc <_lseek_r+0x20>
   18eba:	602b      	str	r3, [r5, #0]
   18ebc:	bd70      	pop	{r4, r5, r6, pc}
   18ebe:	46c0      	nop			; (mov r8, r8)
   18ec0:	20003dd4 	.word	0x20003dd4

00018ec4 <__malloc_lock>:
   18ec4:	4770      	bx	lr

00018ec6 <__malloc_unlock>:
   18ec6:	4770      	bx	lr

00018ec8 <_malloc_usable_size_r>:
   18ec8:	1f0b      	subs	r3, r1, #4
   18eca:	681b      	ldr	r3, [r3, #0]
   18ecc:	1f18      	subs	r0, r3, #4
   18ece:	2b00      	cmp	r3, #0
   18ed0:	da01      	bge.n	18ed6 <_malloc_usable_size_r+0xe>
   18ed2:	580b      	ldr	r3, [r1, r0]
   18ed4:	18c0      	adds	r0, r0, r3
   18ed6:	4770      	bx	lr

00018ed8 <_read_r>:
   18ed8:	b570      	push	{r4, r5, r6, lr}
   18eda:	0005      	movs	r5, r0
   18edc:	0008      	movs	r0, r1
   18ede:	0011      	movs	r1, r2
   18ee0:	2200      	movs	r2, #0
   18ee2:	4c06      	ldr	r4, [pc, #24]	; (18efc <_read_r+0x24>)
   18ee4:	6022      	str	r2, [r4, #0]
   18ee6:	001a      	movs	r2, r3
   18ee8:	f7ee f98e 	bl	7208 <_read>
   18eec:	1c43      	adds	r3, r0, #1
   18eee:	d103      	bne.n	18ef8 <_read_r+0x20>
   18ef0:	6823      	ldr	r3, [r4, #0]
   18ef2:	2b00      	cmp	r3, #0
   18ef4:	d000      	beq.n	18ef8 <_read_r+0x20>
   18ef6:	602b      	str	r3, [r5, #0]
   18ef8:	bd70      	pop	{r4, r5, r6, pc}
   18efa:	46c0      	nop			; (mov r8, r8)
   18efc:	20003dd4 	.word	0x20003dd4

00018f00 <sysfont_glyphs>:
   18f00:	00000000 20000000 20202020 50502000     .......     . PP
   18f10:	00000050 f8505000 5050f850 70a07820     P....PP.P.PP x.p
   18f20:	c020f028 402010c8 90601898 90a840a0     (. ... @..`..@..
   18f30:	40206068 00000000 40402010 40102040     h` @..... @@@ .@
   18f40:	10101020 50004020 5020f820 20200000      ... @.P . P..  
   18f50:	002020f8 00000000 00402060 00f80000     .  .....` @.....
   18f60:	00000000 60000000 10080060 00804020     .......``... @..
   18f70:	a8988870 207088c8 20202060 88707020     p.....p `    pp.
   18f80:	40201008 2010f8f8 70880810 90503010     .. @... ...p.0P.
   18f90:	f81010f8 0808f080 40307088 8888f080     .........p0@....
   18fa0:	1008f870 40404020 70888870 70708888     p... @@@p..p..pp
   18fb0:	08788888 60006010 60600060 60600000     ..x..`.``.``..``
   18fc0:	40206000 40201008 00081020 f800f800     .` @.. @ .......
   18fd0:	40800000 40201020 08887080 20002010     ...@ . @.p... . 
   18fe0:	68088870 7070a8a8 f8888888 88f08888     p..h..pp........
   18ff0:	8888f088 808870f0 70888080 888890e0     .....p.....p....
   19000:	f8e09088 80f08080 80f8f880 8080e080     ................
   19010:	80887080 70889880 f8888888 70888888     .p.....p.......p
   19020:	20202020 10387020 90101010 a0908860          p8.....`...
   19030:	8890a0c0 80808080 88f88080 8888a8d8     ................
   19040:	88888888 8898a8c8 88887088 70888888     .........p.....p
   19050:	f08888f0 70808080 a8888888 88f06890     .......p.....h..
   19060:	90a0f088 80807888 f0080870 202020f8     .....x..p....   
   19070:	88202020 88888888 88887088 50888888        ......p.....P
   19080:	88888820 88d8a8a8 20508888 88888850      .........P P...
   19090:	20205088 08f82020 80402010 202038f8     .P    ... @..8  
   190a0:	38202020 20408000 e0000810 20202020        8..@ ....    
   190b0:	5020e020 00000088 00000000 f8000000      . P............
   190c0:	00102040 00000000 78087000 80807888     @ .......p.x.x..
   190d0:	8888c8b0 700000f0 70888080 98680808     .......p...p..h.
   190e0:	00788888 f8887000 48307080 4040e040     ..x..p...p0H@.@@
   190f0:	78000040 30087888 c8b08080 20888888     @..x.x.0....... 
   19100:	20206000 00107020 90101030 48404060     .`   p..0...`@@H
   19110:	48506050 20202060 00702020 a8a8d000     P`PH`     p.....
   19120:	00008888 8888c8b0 70000088 70888888     ...........p...p
   19130:	88f00000 008080f0 78986800 00000808     .........h.x....
   19140:	8080c8b0 70000080 f0087080 40e04040     .......p.p..@@.@
   19150:	00304840 88888800 00006898 50888888     @H0......h.....P
   19160:	88000020 50a8a888 50880000 00885020      ......P...P P..
   19170:	78888800 00007008 402010f8 202010f8     ...x.p.... @..  
   19180:	10202040 20202020 40202020 20102020     @  .       @  . 
   19190:	ffff4020 000050d6 000050d6 000050b2      @...P...P...P..
   191a0:	000050d6 000050b2 00005098 00005098     .P...P...P...P..
   191b0:	000050d6 000050d6 000050d6 000050d6     .P...P...P...P..
   191c0:	000050d6 000050d6 000050d6 000050d6     .P...P...P...P..
   191d0:	000050d6 000050d6 000050d6 000050d6     .P...P...P...P..
   191e0:	000050d6 000050d6 000050d6 000050d6     .P...P...P...P..
   191f0:	000050d6 000050d6 000050d6 000050b2     .P...P...P...P..
   19200:	000050d6 000050b2 000050d6 000050d6     .P...P...P...P..
   19210:	000050d6 000050d6 000050d6 000050d6     .P...P...P...P..
   19220:	000050d6 000050d6 000050d6 000050d6     .P...P...P...P..
   19230:	000050d6 000050d6 000050d6 000050d6     .P...P...P...P..
   19240:	000050d6 000050d6 000050d6 000050d6     .P...P...P...P..
   19250:	000050d6 000050d6 000050d6 000050d6     .P...P...P...P..
   19260:	000050d6 000050d6 000050d6 000050d6     .P...P...P...P..
   19270:	000050d6 000050d6 000050d6 000050d6     .P...P...P...P..
   19280:	000050d6 000050d6 000050d6 000050d6     .P...P...P...P..
   19290:	000050d6 000050b2 000050b2 000050ba     .P...P...P...P..
   192a0:	000050ba 000050ba 000050ba 42000000     .P...P...P.....B
   192b0:	42000400 42000800 42000c00 42001000     ...B...B...B...B
   192c0:	43000400 0000652a 00006526 00006526     ...C*e..&e..&e..
   192d0:	0000658c 0000658c 00006540 00006530     .e...e..@e..0e..
   192e0:	00006546 0000657a 000066a8 00006688     Fe..ze...f...f..
   192f0:	00006688 00006722 0000669a 000066b6     .f.."g...f...f..
   19300:	0000668c 000066c4 00006706 00006760     .f...f...g..`g..
   19310:	000067a2 000067a2 000067a2 00006752     .g...g...g..Rg..
   19320:	0000676e 00006744 0000677c 00006792     ng..Dg..|g...g..
   19330:	00006e9e 00006f94 00006f9e 00006fa8     .n...o...o...o..
   19340:	00006fb2 00006fe4 00006fee 00006ff8     .o...o...o...o..
   19350:	00007002 0000700c 42002000 42002400     .p...p... .B.$.B
   19360:	42002800 42002c00 43000800 00000002     .(.B.,.B...C....
   19370:	00000100 00000002 00000200 00000002     ................
   19380:	00000400 00000002 00000800 00000003     ................
   19390:	00000004 72420a0d 6364616f 20747361     ......Broadcast 
   193a0:	6c696146 000d6465 6f724220 61636461     Failed.. Broadca
   193b0:	46207473 656c6961 ffff0064 6e6e6f43     st Failed...Conn
   193c0:	69746365 5020676e 20726565 0a206e6f     ecting Peer on .
   193d0:	61684320 6c656e6e 00000020 6f430a0d      Channel .....Co
   193e0:	63656e6e 676e6974 65655020 6e6f2072     nnecting Peer on
   193f0:	61684320 6c656e6e 00000020 00006425      Channel ...%d..
   19400:	6e6e6f43 65746365 65502064 6f207265     Connected Peer o
   19410:	200a206e 6e616843 206c656e 00000000     n . Channel ....
   19420:	6f430a0d 63656e6e 20646574 72656550     ..Connected Peer
   19430:	206e6f20 6e616843 206c656e ffffff00      on Channel ....
   19440:	65530a0d 7463656c 206e6f69 6320666f     ..Selection of c
   19450:	6e6e6168 00206c65 20736920 20746f6e     hannel . is not 
   19460:	70707573 6574726f 6e692064 72756320     supported in cur
   19470:	746e6572 6e6f6320 75676966 69746172     rent configurati
   19480:	0d2e6e6f ffffff00 706d6953 5320656c     on......Simple S
   19490:	20524154 0a206e6f 4d415320 20343352     TAR on . SAMR34 
   194a0:	65646f4e 00000000 2d2d0d0a 2d2d2d2d     Node......------
   194b0:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   194c0:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   194d0:	2d2d2d2d 2d2d2d2d 2d2d2d2d 0a2d2d2d     ---------------.
   194e0:	2d2d2d0d 2d2d2d2d 2d2d2d2d 2d2d2d2d     .---------------
   194f0:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   19500:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   19510:	2d2d2d2d 00002d2d 74530a0d 69747261     ------....Starti
   19520:	4e20676e 2065646f 666f2031 6d695320     ng Node 1 of Sim
   19530:	20656c70 6f6d6544 726f6620 526f4c20     ple Demo for LoR
   19540:	74532061 53207261 6b636174 2e2e2e20     a Star Stack ...
   19550:	00000000 75460a0d 46206c6c 74636e75     ......Full Funct
   19560:	206e6f69 69766544 28206563 29444646     ion Device (FFD)
   19570:	65706f20 69746172 00736e6f 20200a0d      operations...  
   19580:	52202020 72542046 63736e61 65766965        RF Transceive
   19590:	53203a72 32315f58 00003637 20200a0d     r: SX_1276....  
   195a0:	44202020 206f6d65 74736e49 74637572        Demo Instruct
   195b0:	3a6e6f69 00000000 20200a0d 20202020     ion:......      
   195c0:	20202020 20202020 20202020 50202020                    P
   195d0:	7265776f 206e6f20 20656874 72616f62     ower on the boar
   195e0:	6e752064 206c6974 2044454c 696c2031     d until LED 1 li
   195f0:	73746867 00707520 20200a0d 20202020     ghts up...      
   19600:	20202020 20202020 20202020 74202020                    t
   19610:	6e69206f 61636964 63206574 656e6e6f     o indicate conne
   19620:	6e697463 69772067 70206874 2e726565     cting with peer.
   19630:	00000000 20200a0d 20202020 20202020     ......          
   19640:	20202020 20202020 50202020 20687375                Push 
   19650:	74747542 31206e6f 206f7420 616f7262     Button 1 to broa
   19660:	73616364 656d2074 67617373 00002e65     dcast message...
   19670:	20200a0d 20202020 20202020 20202020     ..              
   19680:	20202020 4c202020 31204445 6c697720            LED 1 wil
   19690:	6562206c 676f7420 64656c67 6f707520     l be toggled upo
   196a0:	6572206e 76696563 20676e69 7373656d     n receiving mess
   196b0:	73656761 0000202e 000d0a0d 69726550     ages. ......Peri
   196c0:	6369646f 61725420 696d736e 6f697373     odic Transmissio
   196d0:	203d206e 61736944 0d656c62 00000000     n = Disable.....
   196e0:	79747544 63794320 676e696c 70757320     Duty Cycling sup
   196f0:	74726f70 44203d20 62617369 000d656c     port = Disable..
   19700:	2054424c 70707573 2074726f 6944203d     LBT support = Di
   19710:	6c626173 ff000d65 75636553 20646572     sable...Secured 
   19720:	00000000 616f7242 73616364 61502074     ....Broadcast Pa
   19730:	74656b63 74697720 53522068 00204953     cket with RSSI .
   19740:	63696e55 20747361 6b636150 77207465     Unicast Packet w
   19750:	20687469 49535352 00000020 78323025     ith RSSI ...%02x
   19760:	00000000 6f726620 0000206d 00007825     .... from ..%x..
   19770:	ff00203a 3a204350 20305753 42206f74     : ..PC :SW0 to B
   19780:	64616f72 74736163 00000000 3a305753     roadcast....SW0:
   19790:	6e552020 73616369 420a2074 4f545455       Unicast .BUTTO
   197a0:	203a314e 7478654e 646f4e20 ffff0065     N1: Next Node...
   197b0:	203a5753 20657355 206b774e 65657246     SW: Use Nwk Free
   197c0:	2072657a 6572500a 69207373 2035206e     zer .Press in 5 
   197d0:	00636573 6b636150 72207465 69656365     sec.Packet recei
   197e0:	20646576 6d6f7266 68746f20 53207265     ved from other S
   197f0:	6372756f 41502065 4449204e 30203a20     ource PAN ID : 0
   19800:	25782578 000a0d78 7461440a 6f432061     x%x%x....Data Co
   19810:	7269666e 48203a6d 6c646e61 25203a65     nfirm: Handle: %
   19820:	74732064 73757461 2064253a ff000a0d     d status:%d ....
   19830:	3a305753 64323025 3230252d 32302578     SW0:%02d-%02x%02
   19840:	32302578 656d2d78 55420a20 4e4f5454     x%02x-me .BUTTON
   19850:	43203a31 676e6168 6f6e2065 00006564     1: Change node..
   19860:	3a305753 64323025 3230252d 32302578     SW0:%02d-%02x%02
   19870:	32302578 420a2078 4f545455 203a314e     x%02x .BUTTON1: 
   19880:	6e616843 6e206567 0065646f 6572500a     Change node..Pre
   19890:	756f6976 72542073 61736e61 6f697463     vious Transactio
   198a0:	7369206e 676e6f20 676e696f 00000d0a     n is ongoing....
   198b0:	656c6f52 3230253a 00000064 444e450a     Role:%02d....END
   198c0:	5645445f 53454349 30253a20 ff006432     _DEVICES :%02d..
   198d0:	6f430a0d 63656e6e 704f2074 74617265     ..Connect Operat
   198e0:	206e6f69 74617453 203a7375 000a6425     ion Status: %d..
   198f0:	74530a0d 65747261 69572064 656c6572     ..Started Wirele
   19900:	43207373 756d6d6f 6163696e 6e6f6974     ss Communication
   19910:	206e6f20 6e616843 206c656e 0a0d7525      on Channel %u..
   19920:	ffffff00 6f636552 63656e6e 0a646574     ....Reconnected.
   19930:	ffff000d 2d2d0a0d 2d2d2d2d 2d2d2d2d     ......----------
   19940:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   19950:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   19960:	2d2d2d2d 2d2d2d2d 0d2d2d2d 00000000     -----------.....
   19970:	50204652 6d617261 72657465 00000d73     RF Parameters...
   19980:	54202d20 756f2078 74757074 776f7020      - Tx output pow
   19990:	203a7265 0a0d6425 00000000 50202d20     er: %d...... - P
   199a0:	6f622041 3a74736f 0d642520 0000000a     A boost: %d.....
   199b0:	53202d20 61657270 676e6964 63616620      - Spreading fac
   199c0:	3a726f74 25465320 000a0d64 42202d20     tor: SF%d... - B
   199d0:	77646e61 68746469 32312820 7a486b35     andwidth (125kHz
   199e0:	202c373d 6b303532 383d7a48 3035202c     =7, 250kHz=8, 50
   199f0:	7a486b30 3a29393d 00642520 74736552     0kHz=9): %d.Rest
   19a00:	6e69726f 654e2067 726f7774 2121206b     oring Network !!
   19a10:	ffffff00 4d205854 61737365 3a736567     ....TX Messages:
   19a20:	20642520 2058520a 7373654d 73656761      %d .RX Messages
   19a30:	6425203a ffffff00 626d756e 664f7265     : %d....numberOf
   19a40:	65747942 00000073 732f2e2e 412f6372     Bytes...../src/A
   19a50:	742f4653 64726968 74726170 69772f79     SF/thirdparty/wi
   19a60:	656c6572 4c2f7373 5f61526f 2f503250     reless/LoRa_P2P/
   19a70:	76726573 73656369 7364702f 6372732f     services/pds/src
   19a80:	2f766e2f 764e5f44 0000632e 72646461     /nv/D_Nv.c..addr
   19a90:	20737365 44203d3c 5f564e5f 4f4d454d     ess <= D_NV_MEMO
   19aa0:	455f5952 0000444e 64646128 73736572     RY_END..(address
   19ab0:	6e202b20 65626d75 42664f72 73657479      + numberOfBytes
   19ac0:	3d3c2029 5f442820 4d5f564e 524f4d45     ) <= (D_NV_MEMOR
   19ad0:	4e455f59 202b2044 00295531 66666f28     Y_END + 1U).(off
   19ae0:	20746573 756e202b 7265626d 7942664f     set + numberOfBy
   19af0:	29736574 203d3c20 564e5f44 4345535f     tes) <= D_NV_SEC
   19b00:	5f524f54 455a4953 ffffff00 4e5f4428     TOR_SIZE....(D_N
   19b10:	454d5f56 59524f4d 4154535f 25205452     V_MEMORY_START %
   19b20:	4d564e20 4c525443 574f525f 5a49535f      NVMCTRL_ROW_SIZ
   19b30:	3d202945 5530203d 00000000 4e5f4428     E) == 0U....(D_N
   19b40:	454d5f56 59524f4d 444e455f 44202d20     V_MEMORY_END - D
   19b50:	5f564e5f 4f4d454d 535f5952 54524154     _NV_MEMORY_START
   19b60:	31202b20 3d202955 5f44203d 4d5f564e      + 1U) == D_NV_M
   19b70:	524f4d45 49535f59 ff00455a              EMORY_SIZE..

00019b7c <__func__.13277>:
   19b7c:	764e5f44 696e495f ffff0074              D_Nv_Init...

00019b88 <__func__.13289>:
   19b88:	764e5f44 6165525f 6d495f64 ff006c70     D_Nv_Read_Impl..

00019b98 <__func__.13302>:
   19b98:	764e5f44 6972575f 495f6574 006c706d     D_Nv_Write_Impl.

00019ba8 <__func__.13314>:
   19ba8:	764e5f44 6172455f 65536573 726f7463     D_Nv_EraseSector
   19bb8:	706d495f ffff006c                       _Impl...

00019bc0 <__func__.13327>:
   19bc0:	706d6f43 44657261 00617461 68636163     CompareData.cach
   19bd0:	3d212065 4c554e20 ffff004c 736c6166     e != NULL...fals
   19be0:	ffff0065 646e6946 6d657449 68636143     e...FindItemCach
   19bf0:	64692865 3d3d2029 4c554e20 0000004c     e(id) == NULL...
   19c00:	74695f73 6f436d65 20746e75 414d203c     s_itemCount < MA
   19c10:	54495f58 435f4d45 544e554f ffffff00     X_ITEM_COUNT....
   19c20:	646e6946 6d657449 68636143 64692865     FindItemCache(id
   19c30:	3d212029 4c554e20 ffff004c 68636163     ) != NULL...cach
   19c40:	6c3e2d65 42747361 6b636f6c 203d2120     e->lastBlock != 
   19c50:	30307830 00003030 732f2e2e 412f6372     0x0000..../src/A
   19c60:	742f4653 64726968 74726170 69772f79     SF/thirdparty/wi
   19c70:	656c6572 4c2f7373 5f61526f 2f503250     reless/LoRa_P2P/
   19c80:	76726573 73656369 7364702f 6372732f     services/pds/src
   19c90:	2f766e2f 764e5f53 6d61532d 2e313252     /nv/S_Nv-SamR21.
   19ca0:	ffff0063 20646928 30203d21 26202975     c...(id != 0u) &
   19cb0:	69282026 203c2064 30467830 29753030     & (id < 0xF000u)
   19cc0:	20262620 65746928 6e654c6d 20687467      && (itemLength 
   19cd0:	4d203d3c 495f5841 5f4d4554 474e454c     <= MAX_ITEM_LENG
   19ce0:	00294854 21206469 7530203d ffffff00     TH).id != 0u....
   19cf0:	20646928 30203d21 26202975 70282026     (id != 0u) && (p
   19d00:	61746144 203d2120 4c4c554e ffff0029     Data != NULL)...

00019d10 <__func__.13291>:
   19d10:	706d6f63 53746361 6f746365 6d695472     compactSectorTim
   19d20:	69467265 00646572                       erFired.

00019d28 <__func__.13327>:
   19d28:	646e6946 6d657449 68636143 ffff0065     FindItemCache...

00019d38 <__func__.13334>:
   19d38:	61657243 74496574 61436d65 00656863     CreateItemCache.

00019d48 <__func__.13339>:
   19d48:	656c6544 74496574 61436d65 00656863     DeleteItemCache.

00019d58 <__func__.13432>:
   19d58:	64616f4c 74636553 ff00726f              LoadSector..

00019d64 <__func__.13454>:
   19d64:	706d6f43 53746361 6f746365 ffff0072     CompactSector...

00019d74 <__func__.13474>:
   19d74:	706d6f43 53746361 6f746365 4e664972     CompactSectorIfN
   19d84:	65646565 ffff0064                       eeded...

00019d8c <__func__.13481>:
   19d8c:	706d6f43 49746361 006d6574              CompactItem.

00019d98 <__func__.13505>:
   19d98:	764e5f53 7261455f 6e49796c ff007469     S_Nv_EarlyInit..

00019da8 <__func__.13515>:
   19da8:	764e5f53 6574495f 696e496d 6d495f74     S_Nv_ItemInit_Im
   19db8:	ff006c70                                pl..

00019dbc <__func__.13528>:
   19dbc:	764e5f53 6972575f 495f6574 006c706d     S_Nv_Write_Impl.

00019dcc <__func__.13539>:
   19dcc:	764e5f53 6165525f 6d495f64 ff006c70     S_Nv_Read_Impl..

00019ddc <__func__.13544>:
   19ddc:	764e5f53 6574495f 6e654c6d 5f687467     S_Nv_ItemLength_
   19dec:	6c706d49 ffffff00 20553028 69203d21     Impl....(0U != i
   19dfc:	446d6574 72637365 6574692e 7a69536d     temDescr.itemSiz
   19e0c:	26202965 4e282026 204c4c55 69203d21     e) && (NULL != i
   19e1c:	446d6574 72637365 6574692e 7461446d     temDescr.itemDat
   19e2c:	00002961 732f2e2e 412f6372 742f4653     a)..../src/ASF/t
   19e3c:	64726968 74726170 69772f79 656c6572     hirdparty/wirele
   19e4c:	4c2f7373 5f61526f 2f503250 76726573     ss/LoRa_P2P/serv
   19e5c:	73656369 7364702f 6372732f 2f6c772f     ices/pds/src/wl/
   19e6c:	64506c77 74614473 72655361 2e726576     wlPdsDataServer.
   19e7c:	00000063 4e5f5328 65525f76 6e727574     c...(S_Nv_Return
   19e8c:	756c6156 69445f65 746f4e64 73697845     Value_DidNotExis
   19e9c:	3d3d2074 74657220 7c7c2029 5f532820     t == ret) || (S_
   19eac:	525f764e 72757465 6c61566e 4f5f6575     Nv_ReturnValue_O
   19ebc:	3d3d206b 74657220 ffff0029              k == ret)...

00019ec8 <__func__.13204>:
   19ec8:	53736470 65726f74 6d657449 6b736154     pdsStoreItemTask
   19ed8:	646e6148 0072656c                       Handler.

00019ee0 <__func__.13224>:
   19ee0:	53736470 65726f74 6d657449 ffffff00     pdsStoreItem....

00019ef0 <__func__.13231>:
   19ef0:	52736470 6f747365 74496572 ff006d65     pdsRestoreItem..
   19f00:	20746572 53203d3d 5f764e5f 75746552     ret == S_Nv_Retu
   19f10:	61566e72 5f65756c ff006b4f              rnValue_Ok..

00019f1c <__func__.13418>:
   19f1c:	69726576 74497966 69536d65 0073657a     verifyItemSizes.
   19f2c:	4970616d 2e6d6574 67616c66 20262073     mapItem.flags & 
   19f3c:	455a4953 444f4d5f 43494649 4f495441     SIZE_MODIFICATIO
   19f4c:	4c415f4e 45574f4c 00000044 732f2e2e     N_ALLOWED...../s
   19f5c:	412f6372 742f4653 64726968 74726170     rc/ASF/thirdpart
   19f6c:	69772f79 656c6572 4c2f7373 5f61526f     y/wireless/LoRa_
   19f7c:	2f503250 76726573 73656369 7364702f     P2P/services/pds
   19f8c:	6372732f 2f6c772f 64506c77 70795473     /src/wl/wlPdsTyp
   19f9c:	6f437365 7265766e 2e726574 ffff0063     esConverter.c...

00019fac <mySecurityKey>:
   19fac:	03020100 07060504 0b0a0908 0f0e0d0c     ................
   19fbc:	0000aca8 0000acb8 0000acbe 0000acc4     ................
   19fcc:	0000acca 0000acd0 0000acd6 0000acdc     ................
   19fdc:	0000ace2 0000ace8 0000acee 0000acf4     ................
   19fec:	0000acfa 0000ad00 0000ad06 0000ad0c     ................
   19ffc:	0000ad12 0000ad18 0000ad1e 0000ad24     ............$...
   1a00c:	0000ad2a 0000ad30 0000ad36 0000ad3c     *...0...6...<...
   1a01c:	0000ad42 0000ad48 0000ae8c 0000adec     B...H...........
   1a02c:	0000ae6c 0000ae8c 0000ae6c 0000ae8c     l.......l.......
   1a03c:	0000ae8c 0000ae8c 0000adec 0000ae8c     ................
   1a04c:	0000ae8c 0000ae8c 0000ae8c 0000ae8c     ................
   1a05c:	0000ae8c 0000ae8c 0000aeb4 0a0d0a0d     ................
   1a06c:	4120794d 65726464 203a7373 00007830     My Address: 0x..
   1a07c:	41502020 3a44494e 00783020 68432020       PANID: 0x.  Ch
   1a08c:	656e6e61 00203a6c 6f430a0d 63656e6e     annel: ...Connec
   1a09c:	6e6f6974 65500920 6f4c7265 6441676e     tion .PeerLongAd
   1a0ac:	73657264 50092073 49726565 206f666e     dress .PeerInfo 
   1a0bc:	4f785209 6174536e 31737574 0000000d     .RxOnStatus1....
   1a0cc:	00090909 0000742f 0a0d0a0d 6e6e6f43     ..../t......Conn
   1a0dc:	69746365 20206e6f 50202020 4c726565     ection     PeerL
   1a0ec:	41676e6f 65726464 20207373 50202020     ongAddress     P
   1a0fc:	49726565 096f666e 6e4f7852 74617453     eerInfo.RxOnStat
   1a10c:	000d7375 20202020 20202020 20202020     us..            
   1a11c:	00000020 20202020 ffffff00 41500a0d      ...    ......PA
   1a12c:	3a44494e 00000000 61684320 6c656e6e     NID:.... Channel
   1a13c:	ffff003a 61530a0d 43206576 656e6e6f     :.....Save Conne
   1a14c:	6f697463 00000d6e 41200a0d 54206b63     ction..... Ack T
   1a15c:	6f656d69 000d7475 6365520a 65766965     imeout...Receive
   1a16c:	6f662064 72617772 61502064 74656b63     d forward Packet
   1a17c:	71657220 74736575 00000d0a 69646e49      request....Indi
   1a18c:	74636572 73656d20 65676173 65755120     rect message Que
   1a19c:	0a646575 ffff000d 2d2d2d0a 2d2d2d2d     ued......-------
   1a1ac:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   1a1bc:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   1a1cc:	2d2d2d2d 2d2d2d2d 200d0a2d 20202020     ---------..     
   1a1dc:	20202020 43202020 656e6e6f 6f697463            Connectio
   1a1ec:	6174206e 0a656c62 2d2d2d2d 2d2d2d2d     n table.--------
   1a1fc:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   1a20c:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   1a21c:	2d2d2d2d 2d2d2d2d 00000d0a 0944490a     --------.....ID.
   1a22c:	69766544 41206563 65726464 09207373     Device Address .
   1a23c:	61747309 20737574 4e415009 20444920     .status .PAN ID 
   1a24c:	00000000                                ....

0001a250 <AdvChannels433>:
   1a250:	19d1b9d8 19d1b9d8 ff0c0101 19d4c718     ................
   1a260:	19d4c718 ff0c0101 19d7d458 19d7d458     ........X...X...
   1a270:	ff0c0101                                ....

0001a274 <AdvChannels868>:
   1a274:	33be27a0 33be27a0 ff100101 33c134e0     .'.3.'.3.....4.3
   1a284:	33c134e0 ff100101 33c44220 33c44220     .4.3.... B.3 B.3
   1a294:	ff100101                                ....

0001a298 <DefaultChannels433>:
   1a298:	50015001 ffff5001                       .P.P.P..

0001a2a0 <DefaultChannels868>:
   1a2a0:	50015001 ffff5001                       .P.P.P..

0001a2a8 <SubBandDutyCycle868>:
   1a2a8:	006403e8 03e80064 0064000a              ..d.d.....d.

0001a2b4 <SubBandParams433>:
   1a2b4:	19cf0e40 19ea8580 00000000              @...........

0001a2c0 <SubBandParams868>:
   1a2c0:	337055c0 338eda40 00000000 338eda41     .Up3@..3....A..3
   1a2d0:	33bca100 00000000 33bca101 33c5c8c0     ...3.......3...3
   1a2e0:	00000000 33c74f60 33cef080 00000000     ....`O.3...3....
   1a2f0:	33d1fdc0 33d5ce50 00000000 33d691a0     ...3P..3.......3
   1a300:	33db2580 00000000                       .%.3....

0001a308 <AdvChannels923JP>:
   1a308:	3706ea00 3706ea00 ff100101 3709f740     ...7...7....@..7
   1a318:	3709f740 ff100101                       @..7....

0001a320 <DefaultChannels923JP>:
   1a320:	50015001                                .P.P

0001a324 <SubBandDutyCycleJP923>:
   1a324:	000a0064                                d...

0001a328 <SubBandParamsJP923>:
   1a328:	36d61600 36f7a7c0 00000000 36fab500     ...6...6.......6
   1a338:	37502800 00000000                       .(P7....

0001a340 <AdvChannels920KR>:
   1a340:	36f62120 36f62120 ff0e0100 36f92e60      !.6 !.6....`..6
   1a350:	36f92e60 ff0e0100 36fc3ba0 36fc3ba0     `..6.....;.6.;.6
   1a360:	ff0e0100                                ....

0001a364 <DefaultChannels920KR>:
   1a364:	50015001 ffff5001                       .P.P.P..

0001a36c <taskHandlers>:
   1a36c:	0000e895 0000fc85 0000f299 00009a81     ................
   1a37c:	00007835                                5x..

0001a380 <tc_interrupt_vectors.13447>:
   1a380:	00151211 ffffff00                       ........

0001a388 <lorawanHandlers>:
   1a388:	0000f15d 0000f071 0000f221 fffffffd     ]...q...!.......

0001a398 <radioTaskHandlers>:
   1a398:	00010865 00010965 000106a1 000102d9     e...e...........
   1a3a8:	00014359                                YC..

0001a3ac <FskSyncWordBuff>:
   1a3ac:	02c194c1                                         ...

0001a3af <macEndDevCmdInputLen>:
   1a3af:	04010402 01010500 05000004              ............

0001a3bb <macEndDevCmdReplyLen>:
   1a3bb:	02010201 01010203 01000002 02020000     ................
   1a3cb:	0a080200                                         ..

0001a3cd <maxEIRPTable>:
   1a3cd:	0d0c0a08 1412100e 1b1a1815 24211e1d     ..............!$
   1a3dd:	54ffffff 24000151 36000151 78000151     ...TQ..$Q..6Q..x
   1a3ed:	36000150 1a000151 36000151 78000151     P..6Q...Q..6Q..x
   1a3fd:	24000150 24000151 1a000151 78000151     P..$Q..$Q...Q..x
   1a40d:	80000150 80000150 80000150 3c000150     P...P...P...P..<
   1a41d:	24000151 24000151 f8000151 dc000150     Q..$Q..$Q...P...
   1a42d:	f8000151 1a000150 f8000151 dc000150     Q...P...Q...P...
   1a43d:	24000151 24000151 1a000151 dc000151     Q..$Q..$Q...Q...
   1a44d:	80000151 80000150 80000150 e6000150     Q...P...P...P...
   1a45d:	d4000151 24000154 24000154 22000154     Q...T..$T..$T.."
   1a46d:	c6000154 c6000154 bc000154 22000154     T...T...T...T.."
   1a47d:	c6000154 bc000154 c6000154 22000154     T...T...T...T.."
   1a48d:	cc000154 cc000154 cc000154 5c000154     T...T...T...T..\
   1a49d:	a4000155 86000162 40000162 5e000162     U...b...b..@b..^
   1a4ad:	40000161 78000162 40000162 5e000162     a..@b..xb..@b..^
   1a4bd:	86000161 86000162 78000162 5e000162     a...b...b..xb..^
   1a4cd:	56000161 56000161 56000161 bc000161     a..Va..Va..Va...
   1a4dd:	04000164 c400016b c4000169 c0000169     d...k...i...i...
   1a4ed:	dc000169 dc00016a ce00016a c000016a     i...j...j...j...
   1a4fd:	dc000169 ce00016a dc00016a c000016a     i...j...j...j...
   1a50d:	e4000169 e400016a e400016a e800016a     i...j...j...j...
   1a51d:	2c00016c 6e756620 6f697463 00203a6e     l.., function: .
   1a52d:	65737361 6f697472 2522206e 66202273     assertion "%s" f
   1a53d:	656c6961 66203a64 20656c69 22732522     ailed: file "%s"
   1a54d:	696c202c 2520656e 25732564 2c000a73              , line %d%s%s..

0001a55c <_global_impure_ptr>:
   1a55c:	2000002c 2b302d23 6c680020 6665004c     ,.. #-0+ .hlL.ef
   1a56c:	47464567 32313000 36353433 41393837     gEFG.0123456789A
   1a57c:	45444342 31300046 35343332 39383736     BCDEF.0123456789
   1a58c:	64636261 ff006665                       abcdef..

0001a594 <__sf_fake_stderr>:
	...

0001a5b4 <__sf_fake_stdin>:
	...

0001a5d4 <__sf_fake_stdout>:
	...

0001a5f4 <_init>:
   1a5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a5f6:	46c0      	nop			; (mov r8, r8)
   1a5f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1a5fa:	bc08      	pop	{r3}
   1a5fc:	469e      	mov	lr, r3
   1a5fe:	4770      	bx	lr

0001a600 <__init_array_start>:
   1a600:	000044a9 	.word	0x000044a9

0001a604 <_fini>:
   1a604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a606:	46c0      	nop			; (mov r8, r8)
   1a608:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1a60a:	bc08      	pop	{r3}
   1a60c:	469e      	mov	lr, r3
   1a60e:	4770      	bx	lr

0001a610 <__fini_array_start>:
   1a610:	00004481 	.word	0x00004481
