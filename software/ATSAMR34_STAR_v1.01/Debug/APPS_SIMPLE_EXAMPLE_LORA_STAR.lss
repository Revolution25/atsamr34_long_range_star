
APPS_SIMPLE_EXAMPLE_LORA_STAR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001b250  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0001b250  0001b250  0002b250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000090  20000000  0001b258  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .lpram        00000000  30000000  30000000  00030090  2**0
                  CONTENTS
  4 .bss          00004168  20000090  0001b2e8  00030090  2**3
                  ALLOC
  5 .stack        00002000  200041f8  0001f450  00030090  2**0
                  ALLOC
  6 .ARM.attributes 00000028  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
  7 .comment      0000008c  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY
  8 .debug_info   000b2964  00000000  00000000  00030144  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000efc5  00000000  00000000  000e2aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00021c4b  00000000  00000000  000f1a6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001ca8  00000000  00000000  001136b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002930  00000000  00000000  00115360  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00035e6d  00000000  00000000  00117c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003e129  00000000  00000000  0014dafd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b688e  00000000  00000000  0018bc26  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005d3c  00000000  00000000  002424b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f8 61 00 20 d5 76 00 00 d1 76 00 00 d1 76 00 00     .a. .v...v...v..
	...
      2c:	d1 76 00 00 00 00 00 00 00 00 00 00 d1 76 00 00     .v...........v..
      3c:	d1 76 00 00 d1 76 00 00 d1 76 00 00 0d 52 00 00     .v...v...v...R..
      4c:	c9 4d 00 00 d1 76 00 00 d1 76 00 00 d1 76 00 00     .M...v...v...v..
      5c:	d1 76 00 00 e5 5c 00 00 f5 5c 00 00 05 5d 00 00     .v...\...\...]..
      6c:	15 5d 00 00 25 5d 00 00 35 5d 00 00 d1 76 00 00     .]..%]..5]...v..
      7c:	d1 76 00 00 d1 76 00 00 a5 72 00 00 b5 72 00 00     .v...v...r...r..
      8c:	d1 76 00 00 d1 76 00 00 c5 72 00 00 d1 76 00 00     .v...v...r...v..
      9c:	d1 76 00 00 d1 76 00 00 d1 76 00 00 21 4d 00 00     .v...v...v..!M..
      ac:	d1 76 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .v..............
	...

00000400 <__d_nv_mem_start>:
     400:	ffffffff 	.word	0xffffffff
     404:	ffffffff 	.word	0xffffffff
     408:	ffffffff 	.word	0xffffffff
     40c:	ffffffff 	.word	0xffffffff
     410:	ffffffff 	.word	0xffffffff
     414:	ffffffff 	.word	0xffffffff
     418:	ffffffff 	.word	0xffffffff
     41c:	ffffffff 	.word	0xffffffff
     420:	ffffffff 	.word	0xffffffff
     424:	ffffffff 	.word	0xffffffff
     428:	ffffffff 	.word	0xffffffff
     42c:	ffffffff 	.word	0xffffffff
     430:	ffffffff 	.word	0xffffffff
     434:	ffffffff 	.word	0xffffffff
     438:	ffffffff 	.word	0xffffffff
     43c:	ffffffff 	.word	0xffffffff
     440:	ffffffff 	.word	0xffffffff
     444:	ffffffff 	.word	0xffffffff
     448:	ffffffff 	.word	0xffffffff
     44c:	ffffffff 	.word	0xffffffff
     450:	ffffffff 	.word	0xffffffff
     454:	ffffffff 	.word	0xffffffff
     458:	ffffffff 	.word	0xffffffff
     45c:	ffffffff 	.word	0xffffffff
     460:	ffffffff 	.word	0xffffffff
     464:	ffffffff 	.word	0xffffffff
     468:	ffffffff 	.word	0xffffffff
     46c:	ffffffff 	.word	0xffffffff
     470:	ffffffff 	.word	0xffffffff
     474:	ffffffff 	.word	0xffffffff
     478:	ffffffff 	.word	0xffffffff
     47c:	ffffffff 	.word	0xffffffff
     480:	ffffffff 	.word	0xffffffff
     484:	ffffffff 	.word	0xffffffff
     488:	ffffffff 	.word	0xffffffff
     48c:	ffffffff 	.word	0xffffffff
     490:	ffffffff 	.word	0xffffffff
     494:	ffffffff 	.word	0xffffffff
     498:	ffffffff 	.word	0xffffffff
     49c:	ffffffff 	.word	0xffffffff
     4a0:	ffffffff 	.word	0xffffffff
     4a4:	ffffffff 	.word	0xffffffff
     4a8:	ffffffff 	.word	0xffffffff
     4ac:	ffffffff 	.word	0xffffffff
     4b0:	ffffffff 	.word	0xffffffff
     4b4:	ffffffff 	.word	0xffffffff
     4b8:	ffffffff 	.word	0xffffffff
     4bc:	ffffffff 	.word	0xffffffff
     4c0:	ffffffff 	.word	0xffffffff
     4c4:	ffffffff 	.word	0xffffffff
     4c8:	ffffffff 	.word	0xffffffff
     4cc:	ffffffff 	.word	0xffffffff
     4d0:	ffffffff 	.word	0xffffffff
     4d4:	ffffffff 	.word	0xffffffff
     4d8:	ffffffff 	.word	0xffffffff
     4dc:	ffffffff 	.word	0xffffffff
     4e0:	ffffffff 	.word	0xffffffff
     4e4:	ffffffff 	.word	0xffffffff
     4e8:	ffffffff 	.word	0xffffffff
     4ec:	ffffffff 	.word	0xffffffff
     4f0:	ffffffff 	.word	0xffffffff
     4f4:	ffffffff 	.word	0xffffffff
     4f8:	ffffffff 	.word	0xffffffff
     4fc:	ffffffff 	.word	0xffffffff
     500:	ffffffff 	.word	0xffffffff
     504:	ffffffff 	.word	0xffffffff
     508:	ffffffff 	.word	0xffffffff
     50c:	ffffffff 	.word	0xffffffff
     510:	ffffffff 	.word	0xffffffff
     514:	ffffffff 	.word	0xffffffff
     518:	ffffffff 	.word	0xffffffff
     51c:	ffffffff 	.word	0xffffffff
     520:	ffffffff 	.word	0xffffffff
     524:	ffffffff 	.word	0xffffffff
     528:	ffffffff 	.word	0xffffffff
     52c:	ffffffff 	.word	0xffffffff
     530:	ffffffff 	.word	0xffffffff
     534:	ffffffff 	.word	0xffffffff
     538:	ffffffff 	.word	0xffffffff
     53c:	ffffffff 	.word	0xffffffff
     540:	ffffffff 	.word	0xffffffff
     544:	ffffffff 	.word	0xffffffff
     548:	ffffffff 	.word	0xffffffff
     54c:	ffffffff 	.word	0xffffffff
     550:	ffffffff 	.word	0xffffffff
     554:	ffffffff 	.word	0xffffffff
     558:	ffffffff 	.word	0xffffffff
     55c:	ffffffff 	.word	0xffffffff
     560:	ffffffff 	.word	0xffffffff
     564:	ffffffff 	.word	0xffffffff
     568:	ffffffff 	.word	0xffffffff
     56c:	ffffffff 	.word	0xffffffff
     570:	ffffffff 	.word	0xffffffff
     574:	ffffffff 	.word	0xffffffff
     578:	ffffffff 	.word	0xffffffff
     57c:	ffffffff 	.word	0xffffffff
     580:	ffffffff 	.word	0xffffffff
     584:	ffffffff 	.word	0xffffffff
     588:	ffffffff 	.word	0xffffffff
     58c:	ffffffff 	.word	0xffffffff
     590:	ffffffff 	.word	0xffffffff
     594:	ffffffff 	.word	0xffffffff
     598:	ffffffff 	.word	0xffffffff
     59c:	ffffffff 	.word	0xffffffff
     5a0:	ffffffff 	.word	0xffffffff
     5a4:	ffffffff 	.word	0xffffffff
     5a8:	ffffffff 	.word	0xffffffff
     5ac:	ffffffff 	.word	0xffffffff
     5b0:	ffffffff 	.word	0xffffffff
     5b4:	ffffffff 	.word	0xffffffff
     5b8:	ffffffff 	.word	0xffffffff
     5bc:	ffffffff 	.word	0xffffffff
     5c0:	ffffffff 	.word	0xffffffff
     5c4:	ffffffff 	.word	0xffffffff
     5c8:	ffffffff 	.word	0xffffffff
     5cc:	ffffffff 	.word	0xffffffff
     5d0:	ffffffff 	.word	0xffffffff
     5d4:	ffffffff 	.word	0xffffffff
     5d8:	ffffffff 	.word	0xffffffff
     5dc:	ffffffff 	.word	0xffffffff
     5e0:	ffffffff 	.word	0xffffffff
     5e4:	ffffffff 	.word	0xffffffff
     5e8:	ffffffff 	.word	0xffffffff
     5ec:	ffffffff 	.word	0xffffffff
     5f0:	ffffffff 	.word	0xffffffff
     5f4:	ffffffff 	.word	0xffffffff
     5f8:	ffffffff 	.word	0xffffffff
     5fc:	ffffffff 	.word	0xffffffff
     600:	ffffffff 	.word	0xffffffff
     604:	ffffffff 	.word	0xffffffff
     608:	ffffffff 	.word	0xffffffff
     60c:	ffffffff 	.word	0xffffffff
     610:	ffffffff 	.word	0xffffffff
     614:	ffffffff 	.word	0xffffffff
     618:	ffffffff 	.word	0xffffffff
     61c:	ffffffff 	.word	0xffffffff
     620:	ffffffff 	.word	0xffffffff
     624:	ffffffff 	.word	0xffffffff
     628:	ffffffff 	.word	0xffffffff
     62c:	ffffffff 	.word	0xffffffff
     630:	ffffffff 	.word	0xffffffff
     634:	ffffffff 	.word	0xffffffff
     638:	ffffffff 	.word	0xffffffff
     63c:	ffffffff 	.word	0xffffffff
     640:	ffffffff 	.word	0xffffffff
     644:	ffffffff 	.word	0xffffffff
     648:	ffffffff 	.word	0xffffffff
     64c:	ffffffff 	.word	0xffffffff
     650:	ffffffff 	.word	0xffffffff
     654:	ffffffff 	.word	0xffffffff
     658:	ffffffff 	.word	0xffffffff
     65c:	ffffffff 	.word	0xffffffff
     660:	ffffffff 	.word	0xffffffff
     664:	ffffffff 	.word	0xffffffff
     668:	ffffffff 	.word	0xffffffff
     66c:	ffffffff 	.word	0xffffffff
     670:	ffffffff 	.word	0xffffffff
     674:	ffffffff 	.word	0xffffffff
     678:	ffffffff 	.word	0xffffffff
     67c:	ffffffff 	.word	0xffffffff
     680:	ffffffff 	.word	0xffffffff
     684:	ffffffff 	.word	0xffffffff
     688:	ffffffff 	.word	0xffffffff
     68c:	ffffffff 	.word	0xffffffff
     690:	ffffffff 	.word	0xffffffff
     694:	ffffffff 	.word	0xffffffff
     698:	ffffffff 	.word	0xffffffff
     69c:	ffffffff 	.word	0xffffffff
     6a0:	ffffffff 	.word	0xffffffff
     6a4:	ffffffff 	.word	0xffffffff
     6a8:	ffffffff 	.word	0xffffffff
     6ac:	ffffffff 	.word	0xffffffff
     6b0:	ffffffff 	.word	0xffffffff
     6b4:	ffffffff 	.word	0xffffffff
     6b8:	ffffffff 	.word	0xffffffff
     6bc:	ffffffff 	.word	0xffffffff
     6c0:	ffffffff 	.word	0xffffffff
     6c4:	ffffffff 	.word	0xffffffff
     6c8:	ffffffff 	.word	0xffffffff
     6cc:	ffffffff 	.word	0xffffffff
     6d0:	ffffffff 	.word	0xffffffff
     6d4:	ffffffff 	.word	0xffffffff
     6d8:	ffffffff 	.word	0xffffffff
     6dc:	ffffffff 	.word	0xffffffff
     6e0:	ffffffff 	.word	0xffffffff
     6e4:	ffffffff 	.word	0xffffffff
     6e8:	ffffffff 	.word	0xffffffff
     6ec:	ffffffff 	.word	0xffffffff
     6f0:	ffffffff 	.word	0xffffffff
     6f4:	ffffffff 	.word	0xffffffff
     6f8:	ffffffff 	.word	0xffffffff
     6fc:	ffffffff 	.word	0xffffffff
     700:	ffffffff 	.word	0xffffffff
     704:	ffffffff 	.word	0xffffffff
     708:	ffffffff 	.word	0xffffffff
     70c:	ffffffff 	.word	0xffffffff
     710:	ffffffff 	.word	0xffffffff
     714:	ffffffff 	.word	0xffffffff
     718:	ffffffff 	.word	0xffffffff
     71c:	ffffffff 	.word	0xffffffff
     720:	ffffffff 	.word	0xffffffff
     724:	ffffffff 	.word	0xffffffff
     728:	ffffffff 	.word	0xffffffff
     72c:	ffffffff 	.word	0xffffffff
     730:	ffffffff 	.word	0xffffffff
     734:	ffffffff 	.word	0xffffffff
     738:	ffffffff 	.word	0xffffffff
     73c:	ffffffff 	.word	0xffffffff
     740:	ffffffff 	.word	0xffffffff
     744:	ffffffff 	.word	0xffffffff
     748:	ffffffff 	.word	0xffffffff
     74c:	ffffffff 	.word	0xffffffff
     750:	ffffffff 	.word	0xffffffff
     754:	ffffffff 	.word	0xffffffff
     758:	ffffffff 	.word	0xffffffff
     75c:	ffffffff 	.word	0xffffffff
     760:	ffffffff 	.word	0xffffffff
     764:	ffffffff 	.word	0xffffffff
     768:	ffffffff 	.word	0xffffffff
     76c:	ffffffff 	.word	0xffffffff
     770:	ffffffff 	.word	0xffffffff
     774:	ffffffff 	.word	0xffffffff
     778:	ffffffff 	.word	0xffffffff
     77c:	ffffffff 	.word	0xffffffff
     780:	ffffffff 	.word	0xffffffff
     784:	ffffffff 	.word	0xffffffff
     788:	ffffffff 	.word	0xffffffff
     78c:	ffffffff 	.word	0xffffffff
     790:	ffffffff 	.word	0xffffffff
     794:	ffffffff 	.word	0xffffffff
     798:	ffffffff 	.word	0xffffffff
     79c:	ffffffff 	.word	0xffffffff
     7a0:	ffffffff 	.word	0xffffffff
     7a4:	ffffffff 	.word	0xffffffff
     7a8:	ffffffff 	.word	0xffffffff
     7ac:	ffffffff 	.word	0xffffffff
     7b0:	ffffffff 	.word	0xffffffff
     7b4:	ffffffff 	.word	0xffffffff
     7b8:	ffffffff 	.word	0xffffffff
     7bc:	ffffffff 	.word	0xffffffff
     7c0:	ffffffff 	.word	0xffffffff
     7c4:	ffffffff 	.word	0xffffffff
     7c8:	ffffffff 	.word	0xffffffff
     7cc:	ffffffff 	.word	0xffffffff
     7d0:	ffffffff 	.word	0xffffffff
     7d4:	ffffffff 	.word	0xffffffff
     7d8:	ffffffff 	.word	0xffffffff
     7dc:	ffffffff 	.word	0xffffffff
     7e0:	ffffffff 	.word	0xffffffff
     7e4:	ffffffff 	.word	0xffffffff
     7e8:	ffffffff 	.word	0xffffffff
     7ec:	ffffffff 	.word	0xffffffff
     7f0:	ffffffff 	.word	0xffffffff
     7f4:	ffffffff 	.word	0xffffffff
     7f8:	ffffffff 	.word	0xffffffff
     7fc:	ffffffff 	.word	0xffffffff
     800:	ffffffff 	.word	0xffffffff
     804:	ffffffff 	.word	0xffffffff
     808:	ffffffff 	.word	0xffffffff
     80c:	ffffffff 	.word	0xffffffff
     810:	ffffffff 	.word	0xffffffff
     814:	ffffffff 	.word	0xffffffff
     818:	ffffffff 	.word	0xffffffff
     81c:	ffffffff 	.word	0xffffffff
     820:	ffffffff 	.word	0xffffffff
     824:	ffffffff 	.word	0xffffffff
     828:	ffffffff 	.word	0xffffffff
     82c:	ffffffff 	.word	0xffffffff
     830:	ffffffff 	.word	0xffffffff
     834:	ffffffff 	.word	0xffffffff
     838:	ffffffff 	.word	0xffffffff
     83c:	ffffffff 	.word	0xffffffff
     840:	ffffffff 	.word	0xffffffff
     844:	ffffffff 	.word	0xffffffff
     848:	ffffffff 	.word	0xffffffff
     84c:	ffffffff 	.word	0xffffffff
     850:	ffffffff 	.word	0xffffffff
     854:	ffffffff 	.word	0xffffffff
     858:	ffffffff 	.word	0xffffffff
     85c:	ffffffff 	.word	0xffffffff
     860:	ffffffff 	.word	0xffffffff
     864:	ffffffff 	.word	0xffffffff
     868:	ffffffff 	.word	0xffffffff
     86c:	ffffffff 	.word	0xffffffff
     870:	ffffffff 	.word	0xffffffff
     874:	ffffffff 	.word	0xffffffff
     878:	ffffffff 	.word	0xffffffff
     87c:	ffffffff 	.word	0xffffffff
     880:	ffffffff 	.word	0xffffffff
     884:	ffffffff 	.word	0xffffffff
     888:	ffffffff 	.word	0xffffffff
     88c:	ffffffff 	.word	0xffffffff
     890:	ffffffff 	.word	0xffffffff
     894:	ffffffff 	.word	0xffffffff
     898:	ffffffff 	.word	0xffffffff
     89c:	ffffffff 	.word	0xffffffff
     8a0:	ffffffff 	.word	0xffffffff
     8a4:	ffffffff 	.word	0xffffffff
     8a8:	ffffffff 	.word	0xffffffff
     8ac:	ffffffff 	.word	0xffffffff
     8b0:	ffffffff 	.word	0xffffffff
     8b4:	ffffffff 	.word	0xffffffff
     8b8:	ffffffff 	.word	0xffffffff
     8bc:	ffffffff 	.word	0xffffffff
     8c0:	ffffffff 	.word	0xffffffff
     8c4:	ffffffff 	.word	0xffffffff
     8c8:	ffffffff 	.word	0xffffffff
     8cc:	ffffffff 	.word	0xffffffff
     8d0:	ffffffff 	.word	0xffffffff
     8d4:	ffffffff 	.word	0xffffffff
     8d8:	ffffffff 	.word	0xffffffff
     8dc:	ffffffff 	.word	0xffffffff
     8e0:	ffffffff 	.word	0xffffffff
     8e4:	ffffffff 	.word	0xffffffff
     8e8:	ffffffff 	.word	0xffffffff
     8ec:	ffffffff 	.word	0xffffffff
     8f0:	ffffffff 	.word	0xffffffff
     8f4:	ffffffff 	.word	0xffffffff
     8f8:	ffffffff 	.word	0xffffffff
     8fc:	ffffffff 	.word	0xffffffff
     900:	ffffffff 	.word	0xffffffff
     904:	ffffffff 	.word	0xffffffff
     908:	ffffffff 	.word	0xffffffff
     90c:	ffffffff 	.word	0xffffffff
     910:	ffffffff 	.word	0xffffffff
     914:	ffffffff 	.word	0xffffffff
     918:	ffffffff 	.word	0xffffffff
     91c:	ffffffff 	.word	0xffffffff
     920:	ffffffff 	.word	0xffffffff
     924:	ffffffff 	.word	0xffffffff
     928:	ffffffff 	.word	0xffffffff
     92c:	ffffffff 	.word	0xffffffff
     930:	ffffffff 	.word	0xffffffff
     934:	ffffffff 	.word	0xffffffff
     938:	ffffffff 	.word	0xffffffff
     93c:	ffffffff 	.word	0xffffffff
     940:	ffffffff 	.word	0xffffffff
     944:	ffffffff 	.word	0xffffffff
     948:	ffffffff 	.word	0xffffffff
     94c:	ffffffff 	.word	0xffffffff
     950:	ffffffff 	.word	0xffffffff
     954:	ffffffff 	.word	0xffffffff
     958:	ffffffff 	.word	0xffffffff
     95c:	ffffffff 	.word	0xffffffff
     960:	ffffffff 	.word	0xffffffff
     964:	ffffffff 	.word	0xffffffff
     968:	ffffffff 	.word	0xffffffff
     96c:	ffffffff 	.word	0xffffffff
     970:	ffffffff 	.word	0xffffffff
     974:	ffffffff 	.word	0xffffffff
     978:	ffffffff 	.word	0xffffffff
     97c:	ffffffff 	.word	0xffffffff
     980:	ffffffff 	.word	0xffffffff
     984:	ffffffff 	.word	0xffffffff
     988:	ffffffff 	.word	0xffffffff
     98c:	ffffffff 	.word	0xffffffff
     990:	ffffffff 	.word	0xffffffff
     994:	ffffffff 	.word	0xffffffff
     998:	ffffffff 	.word	0xffffffff
     99c:	ffffffff 	.word	0xffffffff
     9a0:	ffffffff 	.word	0xffffffff
     9a4:	ffffffff 	.word	0xffffffff
     9a8:	ffffffff 	.word	0xffffffff
     9ac:	ffffffff 	.word	0xffffffff
     9b0:	ffffffff 	.word	0xffffffff
     9b4:	ffffffff 	.word	0xffffffff
     9b8:	ffffffff 	.word	0xffffffff
     9bc:	ffffffff 	.word	0xffffffff
     9c0:	ffffffff 	.word	0xffffffff
     9c4:	ffffffff 	.word	0xffffffff
     9c8:	ffffffff 	.word	0xffffffff
     9cc:	ffffffff 	.word	0xffffffff
     9d0:	ffffffff 	.word	0xffffffff
     9d4:	ffffffff 	.word	0xffffffff
     9d8:	ffffffff 	.word	0xffffffff
     9dc:	ffffffff 	.word	0xffffffff
     9e0:	ffffffff 	.word	0xffffffff
     9e4:	ffffffff 	.word	0xffffffff
     9e8:	ffffffff 	.word	0xffffffff
     9ec:	ffffffff 	.word	0xffffffff
     9f0:	ffffffff 	.word	0xffffffff
     9f4:	ffffffff 	.word	0xffffffff
     9f8:	ffffffff 	.word	0xffffffff
     9fc:	ffffffff 	.word	0xffffffff
     a00:	ffffffff 	.word	0xffffffff
     a04:	ffffffff 	.word	0xffffffff
     a08:	ffffffff 	.word	0xffffffff
     a0c:	ffffffff 	.word	0xffffffff
     a10:	ffffffff 	.word	0xffffffff
     a14:	ffffffff 	.word	0xffffffff
     a18:	ffffffff 	.word	0xffffffff
     a1c:	ffffffff 	.word	0xffffffff
     a20:	ffffffff 	.word	0xffffffff
     a24:	ffffffff 	.word	0xffffffff
     a28:	ffffffff 	.word	0xffffffff
     a2c:	ffffffff 	.word	0xffffffff
     a30:	ffffffff 	.word	0xffffffff
     a34:	ffffffff 	.word	0xffffffff
     a38:	ffffffff 	.word	0xffffffff
     a3c:	ffffffff 	.word	0xffffffff
     a40:	ffffffff 	.word	0xffffffff
     a44:	ffffffff 	.word	0xffffffff
     a48:	ffffffff 	.word	0xffffffff
     a4c:	ffffffff 	.word	0xffffffff
     a50:	ffffffff 	.word	0xffffffff
     a54:	ffffffff 	.word	0xffffffff
     a58:	ffffffff 	.word	0xffffffff
     a5c:	ffffffff 	.word	0xffffffff
     a60:	ffffffff 	.word	0xffffffff
     a64:	ffffffff 	.word	0xffffffff
     a68:	ffffffff 	.word	0xffffffff
     a6c:	ffffffff 	.word	0xffffffff
     a70:	ffffffff 	.word	0xffffffff
     a74:	ffffffff 	.word	0xffffffff
     a78:	ffffffff 	.word	0xffffffff
     a7c:	ffffffff 	.word	0xffffffff
     a80:	ffffffff 	.word	0xffffffff
     a84:	ffffffff 	.word	0xffffffff
     a88:	ffffffff 	.word	0xffffffff
     a8c:	ffffffff 	.word	0xffffffff
     a90:	ffffffff 	.word	0xffffffff
     a94:	ffffffff 	.word	0xffffffff
     a98:	ffffffff 	.word	0xffffffff
     a9c:	ffffffff 	.word	0xffffffff
     aa0:	ffffffff 	.word	0xffffffff
     aa4:	ffffffff 	.word	0xffffffff
     aa8:	ffffffff 	.word	0xffffffff
     aac:	ffffffff 	.word	0xffffffff
     ab0:	ffffffff 	.word	0xffffffff
     ab4:	ffffffff 	.word	0xffffffff
     ab8:	ffffffff 	.word	0xffffffff
     abc:	ffffffff 	.word	0xffffffff
     ac0:	ffffffff 	.word	0xffffffff
     ac4:	ffffffff 	.word	0xffffffff
     ac8:	ffffffff 	.word	0xffffffff
     acc:	ffffffff 	.word	0xffffffff
     ad0:	ffffffff 	.word	0xffffffff
     ad4:	ffffffff 	.word	0xffffffff
     ad8:	ffffffff 	.word	0xffffffff
     adc:	ffffffff 	.word	0xffffffff
     ae0:	ffffffff 	.word	0xffffffff
     ae4:	ffffffff 	.word	0xffffffff
     ae8:	ffffffff 	.word	0xffffffff
     aec:	ffffffff 	.word	0xffffffff
     af0:	ffffffff 	.word	0xffffffff
     af4:	ffffffff 	.word	0xffffffff
     af8:	ffffffff 	.word	0xffffffff
     afc:	ffffffff 	.word	0xffffffff
     b00:	ffffffff 	.word	0xffffffff
     b04:	ffffffff 	.word	0xffffffff
     b08:	ffffffff 	.word	0xffffffff
     b0c:	ffffffff 	.word	0xffffffff
     b10:	ffffffff 	.word	0xffffffff
     b14:	ffffffff 	.word	0xffffffff
     b18:	ffffffff 	.word	0xffffffff
     b1c:	ffffffff 	.word	0xffffffff
     b20:	ffffffff 	.word	0xffffffff
     b24:	ffffffff 	.word	0xffffffff
     b28:	ffffffff 	.word	0xffffffff
     b2c:	ffffffff 	.word	0xffffffff
     b30:	ffffffff 	.word	0xffffffff
     b34:	ffffffff 	.word	0xffffffff
     b38:	ffffffff 	.word	0xffffffff
     b3c:	ffffffff 	.word	0xffffffff
     b40:	ffffffff 	.word	0xffffffff
     b44:	ffffffff 	.word	0xffffffff
     b48:	ffffffff 	.word	0xffffffff
     b4c:	ffffffff 	.word	0xffffffff
     b50:	ffffffff 	.word	0xffffffff
     b54:	ffffffff 	.word	0xffffffff
     b58:	ffffffff 	.word	0xffffffff
     b5c:	ffffffff 	.word	0xffffffff
     b60:	ffffffff 	.word	0xffffffff
     b64:	ffffffff 	.word	0xffffffff
     b68:	ffffffff 	.word	0xffffffff
     b6c:	ffffffff 	.word	0xffffffff
     b70:	ffffffff 	.word	0xffffffff
     b74:	ffffffff 	.word	0xffffffff
     b78:	ffffffff 	.word	0xffffffff
     b7c:	ffffffff 	.word	0xffffffff
     b80:	ffffffff 	.word	0xffffffff
     b84:	ffffffff 	.word	0xffffffff
     b88:	ffffffff 	.word	0xffffffff
     b8c:	ffffffff 	.word	0xffffffff
     b90:	ffffffff 	.word	0xffffffff
     b94:	ffffffff 	.word	0xffffffff
     b98:	ffffffff 	.word	0xffffffff
     b9c:	ffffffff 	.word	0xffffffff
     ba0:	ffffffff 	.word	0xffffffff
     ba4:	ffffffff 	.word	0xffffffff
     ba8:	ffffffff 	.word	0xffffffff
     bac:	ffffffff 	.word	0xffffffff
     bb0:	ffffffff 	.word	0xffffffff
     bb4:	ffffffff 	.word	0xffffffff
     bb8:	ffffffff 	.word	0xffffffff
     bbc:	ffffffff 	.word	0xffffffff
     bc0:	ffffffff 	.word	0xffffffff
     bc4:	ffffffff 	.word	0xffffffff
     bc8:	ffffffff 	.word	0xffffffff
     bcc:	ffffffff 	.word	0xffffffff
     bd0:	ffffffff 	.word	0xffffffff
     bd4:	ffffffff 	.word	0xffffffff
     bd8:	ffffffff 	.word	0xffffffff
     bdc:	ffffffff 	.word	0xffffffff
     be0:	ffffffff 	.word	0xffffffff
     be4:	ffffffff 	.word	0xffffffff
     be8:	ffffffff 	.word	0xffffffff
     bec:	ffffffff 	.word	0xffffffff
     bf0:	ffffffff 	.word	0xffffffff
     bf4:	ffffffff 	.word	0xffffffff
     bf8:	ffffffff 	.word	0xffffffff
     bfc:	ffffffff 	.word	0xffffffff
     c00:	ffffffff 	.word	0xffffffff
     c04:	ffffffff 	.word	0xffffffff
     c08:	ffffffff 	.word	0xffffffff
     c0c:	ffffffff 	.word	0xffffffff
     c10:	ffffffff 	.word	0xffffffff
     c14:	ffffffff 	.word	0xffffffff
     c18:	ffffffff 	.word	0xffffffff
     c1c:	ffffffff 	.word	0xffffffff
     c20:	ffffffff 	.word	0xffffffff
     c24:	ffffffff 	.word	0xffffffff
     c28:	ffffffff 	.word	0xffffffff
     c2c:	ffffffff 	.word	0xffffffff
     c30:	ffffffff 	.word	0xffffffff
     c34:	ffffffff 	.word	0xffffffff
     c38:	ffffffff 	.word	0xffffffff
     c3c:	ffffffff 	.word	0xffffffff
     c40:	ffffffff 	.word	0xffffffff
     c44:	ffffffff 	.word	0xffffffff
     c48:	ffffffff 	.word	0xffffffff
     c4c:	ffffffff 	.word	0xffffffff
     c50:	ffffffff 	.word	0xffffffff
     c54:	ffffffff 	.word	0xffffffff
     c58:	ffffffff 	.word	0xffffffff
     c5c:	ffffffff 	.word	0xffffffff
     c60:	ffffffff 	.word	0xffffffff
     c64:	ffffffff 	.word	0xffffffff
     c68:	ffffffff 	.word	0xffffffff
     c6c:	ffffffff 	.word	0xffffffff
     c70:	ffffffff 	.word	0xffffffff
     c74:	ffffffff 	.word	0xffffffff
     c78:	ffffffff 	.word	0xffffffff
     c7c:	ffffffff 	.word	0xffffffff
     c80:	ffffffff 	.word	0xffffffff
     c84:	ffffffff 	.word	0xffffffff
     c88:	ffffffff 	.word	0xffffffff
     c8c:	ffffffff 	.word	0xffffffff
     c90:	ffffffff 	.word	0xffffffff
     c94:	ffffffff 	.word	0xffffffff
     c98:	ffffffff 	.word	0xffffffff
     c9c:	ffffffff 	.word	0xffffffff
     ca0:	ffffffff 	.word	0xffffffff
     ca4:	ffffffff 	.word	0xffffffff
     ca8:	ffffffff 	.word	0xffffffff
     cac:	ffffffff 	.word	0xffffffff
     cb0:	ffffffff 	.word	0xffffffff
     cb4:	ffffffff 	.word	0xffffffff
     cb8:	ffffffff 	.word	0xffffffff
     cbc:	ffffffff 	.word	0xffffffff
     cc0:	ffffffff 	.word	0xffffffff
     cc4:	ffffffff 	.word	0xffffffff
     cc8:	ffffffff 	.word	0xffffffff
     ccc:	ffffffff 	.word	0xffffffff
     cd0:	ffffffff 	.word	0xffffffff
     cd4:	ffffffff 	.word	0xffffffff
     cd8:	ffffffff 	.word	0xffffffff
     cdc:	ffffffff 	.word	0xffffffff
     ce0:	ffffffff 	.word	0xffffffff
     ce4:	ffffffff 	.word	0xffffffff
     ce8:	ffffffff 	.word	0xffffffff
     cec:	ffffffff 	.word	0xffffffff
     cf0:	ffffffff 	.word	0xffffffff
     cf4:	ffffffff 	.word	0xffffffff
     cf8:	ffffffff 	.word	0xffffffff
     cfc:	ffffffff 	.word	0xffffffff
     d00:	ffffffff 	.word	0xffffffff
     d04:	ffffffff 	.word	0xffffffff
     d08:	ffffffff 	.word	0xffffffff
     d0c:	ffffffff 	.word	0xffffffff
     d10:	ffffffff 	.word	0xffffffff
     d14:	ffffffff 	.word	0xffffffff
     d18:	ffffffff 	.word	0xffffffff
     d1c:	ffffffff 	.word	0xffffffff
     d20:	ffffffff 	.word	0xffffffff
     d24:	ffffffff 	.word	0xffffffff
     d28:	ffffffff 	.word	0xffffffff
     d2c:	ffffffff 	.word	0xffffffff
     d30:	ffffffff 	.word	0xffffffff
     d34:	ffffffff 	.word	0xffffffff
     d38:	ffffffff 	.word	0xffffffff
     d3c:	ffffffff 	.word	0xffffffff
     d40:	ffffffff 	.word	0xffffffff
     d44:	ffffffff 	.word	0xffffffff
     d48:	ffffffff 	.word	0xffffffff
     d4c:	ffffffff 	.word	0xffffffff
     d50:	ffffffff 	.word	0xffffffff
     d54:	ffffffff 	.word	0xffffffff
     d58:	ffffffff 	.word	0xffffffff
     d5c:	ffffffff 	.word	0xffffffff
     d60:	ffffffff 	.word	0xffffffff
     d64:	ffffffff 	.word	0xffffffff
     d68:	ffffffff 	.word	0xffffffff
     d6c:	ffffffff 	.word	0xffffffff
     d70:	ffffffff 	.word	0xffffffff
     d74:	ffffffff 	.word	0xffffffff
     d78:	ffffffff 	.word	0xffffffff
     d7c:	ffffffff 	.word	0xffffffff
     d80:	ffffffff 	.word	0xffffffff
     d84:	ffffffff 	.word	0xffffffff
     d88:	ffffffff 	.word	0xffffffff
     d8c:	ffffffff 	.word	0xffffffff
     d90:	ffffffff 	.word	0xffffffff
     d94:	ffffffff 	.word	0xffffffff
     d98:	ffffffff 	.word	0xffffffff
     d9c:	ffffffff 	.word	0xffffffff
     da0:	ffffffff 	.word	0xffffffff
     da4:	ffffffff 	.word	0xffffffff
     da8:	ffffffff 	.word	0xffffffff
     dac:	ffffffff 	.word	0xffffffff
     db0:	ffffffff 	.word	0xffffffff
     db4:	ffffffff 	.word	0xffffffff
     db8:	ffffffff 	.word	0xffffffff
     dbc:	ffffffff 	.word	0xffffffff
     dc0:	ffffffff 	.word	0xffffffff
     dc4:	ffffffff 	.word	0xffffffff
     dc8:	ffffffff 	.word	0xffffffff
     dcc:	ffffffff 	.word	0xffffffff
     dd0:	ffffffff 	.word	0xffffffff
     dd4:	ffffffff 	.word	0xffffffff
     dd8:	ffffffff 	.word	0xffffffff
     ddc:	ffffffff 	.word	0xffffffff
     de0:	ffffffff 	.word	0xffffffff
     de4:	ffffffff 	.word	0xffffffff
     de8:	ffffffff 	.word	0xffffffff
     dec:	ffffffff 	.word	0xffffffff
     df0:	ffffffff 	.word	0xffffffff
     df4:	ffffffff 	.word	0xffffffff
     df8:	ffffffff 	.word	0xffffffff
     dfc:	ffffffff 	.word	0xffffffff
     e00:	ffffffff 	.word	0xffffffff
     e04:	ffffffff 	.word	0xffffffff
     e08:	ffffffff 	.word	0xffffffff
     e0c:	ffffffff 	.word	0xffffffff
     e10:	ffffffff 	.word	0xffffffff
     e14:	ffffffff 	.word	0xffffffff
     e18:	ffffffff 	.word	0xffffffff
     e1c:	ffffffff 	.word	0xffffffff
     e20:	ffffffff 	.word	0xffffffff
     e24:	ffffffff 	.word	0xffffffff
     e28:	ffffffff 	.word	0xffffffff
     e2c:	ffffffff 	.word	0xffffffff
     e30:	ffffffff 	.word	0xffffffff
     e34:	ffffffff 	.word	0xffffffff
     e38:	ffffffff 	.word	0xffffffff
     e3c:	ffffffff 	.word	0xffffffff
     e40:	ffffffff 	.word	0xffffffff
     e44:	ffffffff 	.word	0xffffffff
     e48:	ffffffff 	.word	0xffffffff
     e4c:	ffffffff 	.word	0xffffffff
     e50:	ffffffff 	.word	0xffffffff
     e54:	ffffffff 	.word	0xffffffff
     e58:	ffffffff 	.word	0xffffffff
     e5c:	ffffffff 	.word	0xffffffff
     e60:	ffffffff 	.word	0xffffffff
     e64:	ffffffff 	.word	0xffffffff
     e68:	ffffffff 	.word	0xffffffff
     e6c:	ffffffff 	.word	0xffffffff
     e70:	ffffffff 	.word	0xffffffff
     e74:	ffffffff 	.word	0xffffffff
     e78:	ffffffff 	.word	0xffffffff
     e7c:	ffffffff 	.word	0xffffffff
     e80:	ffffffff 	.word	0xffffffff
     e84:	ffffffff 	.word	0xffffffff
     e88:	ffffffff 	.word	0xffffffff
     e8c:	ffffffff 	.word	0xffffffff
     e90:	ffffffff 	.word	0xffffffff
     e94:	ffffffff 	.word	0xffffffff
     e98:	ffffffff 	.word	0xffffffff
     e9c:	ffffffff 	.word	0xffffffff
     ea0:	ffffffff 	.word	0xffffffff
     ea4:	ffffffff 	.word	0xffffffff
     ea8:	ffffffff 	.word	0xffffffff
     eac:	ffffffff 	.word	0xffffffff
     eb0:	ffffffff 	.word	0xffffffff
     eb4:	ffffffff 	.word	0xffffffff
     eb8:	ffffffff 	.word	0xffffffff
     ebc:	ffffffff 	.word	0xffffffff
     ec0:	ffffffff 	.word	0xffffffff
     ec4:	ffffffff 	.word	0xffffffff
     ec8:	ffffffff 	.word	0xffffffff
     ecc:	ffffffff 	.word	0xffffffff
     ed0:	ffffffff 	.word	0xffffffff
     ed4:	ffffffff 	.word	0xffffffff
     ed8:	ffffffff 	.word	0xffffffff
     edc:	ffffffff 	.word	0xffffffff
     ee0:	ffffffff 	.word	0xffffffff
     ee4:	ffffffff 	.word	0xffffffff
     ee8:	ffffffff 	.word	0xffffffff
     eec:	ffffffff 	.word	0xffffffff
     ef0:	ffffffff 	.word	0xffffffff
     ef4:	ffffffff 	.word	0xffffffff
     ef8:	ffffffff 	.word	0xffffffff
     efc:	ffffffff 	.word	0xffffffff
     f00:	ffffffff 	.word	0xffffffff
     f04:	ffffffff 	.word	0xffffffff
     f08:	ffffffff 	.word	0xffffffff
     f0c:	ffffffff 	.word	0xffffffff
     f10:	ffffffff 	.word	0xffffffff
     f14:	ffffffff 	.word	0xffffffff
     f18:	ffffffff 	.word	0xffffffff
     f1c:	ffffffff 	.word	0xffffffff
     f20:	ffffffff 	.word	0xffffffff
     f24:	ffffffff 	.word	0xffffffff
     f28:	ffffffff 	.word	0xffffffff
     f2c:	ffffffff 	.word	0xffffffff
     f30:	ffffffff 	.word	0xffffffff
     f34:	ffffffff 	.word	0xffffffff
     f38:	ffffffff 	.word	0xffffffff
     f3c:	ffffffff 	.word	0xffffffff
     f40:	ffffffff 	.word	0xffffffff
     f44:	ffffffff 	.word	0xffffffff
     f48:	ffffffff 	.word	0xffffffff
     f4c:	ffffffff 	.word	0xffffffff
     f50:	ffffffff 	.word	0xffffffff
     f54:	ffffffff 	.word	0xffffffff
     f58:	ffffffff 	.word	0xffffffff
     f5c:	ffffffff 	.word	0xffffffff
     f60:	ffffffff 	.word	0xffffffff
     f64:	ffffffff 	.word	0xffffffff
     f68:	ffffffff 	.word	0xffffffff
     f6c:	ffffffff 	.word	0xffffffff
     f70:	ffffffff 	.word	0xffffffff
     f74:	ffffffff 	.word	0xffffffff
     f78:	ffffffff 	.word	0xffffffff
     f7c:	ffffffff 	.word	0xffffffff
     f80:	ffffffff 	.word	0xffffffff
     f84:	ffffffff 	.word	0xffffffff
     f88:	ffffffff 	.word	0xffffffff
     f8c:	ffffffff 	.word	0xffffffff
     f90:	ffffffff 	.word	0xffffffff
     f94:	ffffffff 	.word	0xffffffff
     f98:	ffffffff 	.word	0xffffffff
     f9c:	ffffffff 	.word	0xffffffff
     fa0:	ffffffff 	.word	0xffffffff
     fa4:	ffffffff 	.word	0xffffffff
     fa8:	ffffffff 	.word	0xffffffff
     fac:	ffffffff 	.word	0xffffffff
     fb0:	ffffffff 	.word	0xffffffff
     fb4:	ffffffff 	.word	0xffffffff
     fb8:	ffffffff 	.word	0xffffffff
     fbc:	ffffffff 	.word	0xffffffff
     fc0:	ffffffff 	.word	0xffffffff
     fc4:	ffffffff 	.word	0xffffffff
     fc8:	ffffffff 	.word	0xffffffff
     fcc:	ffffffff 	.word	0xffffffff
     fd0:	ffffffff 	.word	0xffffffff
     fd4:	ffffffff 	.word	0xffffffff
     fd8:	ffffffff 	.word	0xffffffff
     fdc:	ffffffff 	.word	0xffffffff
     fe0:	ffffffff 	.word	0xffffffff
     fe4:	ffffffff 	.word	0xffffffff
     fe8:	ffffffff 	.word	0xffffffff
     fec:	ffffffff 	.word	0xffffffff
     ff0:	ffffffff 	.word	0xffffffff
     ff4:	ffffffff 	.word	0xffffffff
     ff8:	ffffffff 	.word	0xffffffff
     ffc:	ffffffff 	.word	0xffffffff
    1000:	ffffffff 	.word	0xffffffff
    1004:	ffffffff 	.word	0xffffffff
    1008:	ffffffff 	.word	0xffffffff
    100c:	ffffffff 	.word	0xffffffff
    1010:	ffffffff 	.word	0xffffffff
    1014:	ffffffff 	.word	0xffffffff
    1018:	ffffffff 	.word	0xffffffff
    101c:	ffffffff 	.word	0xffffffff
    1020:	ffffffff 	.word	0xffffffff
    1024:	ffffffff 	.word	0xffffffff
    1028:	ffffffff 	.word	0xffffffff
    102c:	ffffffff 	.word	0xffffffff
    1030:	ffffffff 	.word	0xffffffff
    1034:	ffffffff 	.word	0xffffffff
    1038:	ffffffff 	.word	0xffffffff
    103c:	ffffffff 	.word	0xffffffff
    1040:	ffffffff 	.word	0xffffffff
    1044:	ffffffff 	.word	0xffffffff
    1048:	ffffffff 	.word	0xffffffff
    104c:	ffffffff 	.word	0xffffffff
    1050:	ffffffff 	.word	0xffffffff
    1054:	ffffffff 	.word	0xffffffff
    1058:	ffffffff 	.word	0xffffffff
    105c:	ffffffff 	.word	0xffffffff
    1060:	ffffffff 	.word	0xffffffff
    1064:	ffffffff 	.word	0xffffffff
    1068:	ffffffff 	.word	0xffffffff
    106c:	ffffffff 	.word	0xffffffff
    1070:	ffffffff 	.word	0xffffffff
    1074:	ffffffff 	.word	0xffffffff
    1078:	ffffffff 	.word	0xffffffff
    107c:	ffffffff 	.word	0xffffffff
    1080:	ffffffff 	.word	0xffffffff
    1084:	ffffffff 	.word	0xffffffff
    1088:	ffffffff 	.word	0xffffffff
    108c:	ffffffff 	.word	0xffffffff
    1090:	ffffffff 	.word	0xffffffff
    1094:	ffffffff 	.word	0xffffffff
    1098:	ffffffff 	.word	0xffffffff
    109c:	ffffffff 	.word	0xffffffff
    10a0:	ffffffff 	.word	0xffffffff
    10a4:	ffffffff 	.word	0xffffffff
    10a8:	ffffffff 	.word	0xffffffff
    10ac:	ffffffff 	.word	0xffffffff
    10b0:	ffffffff 	.word	0xffffffff
    10b4:	ffffffff 	.word	0xffffffff
    10b8:	ffffffff 	.word	0xffffffff
    10bc:	ffffffff 	.word	0xffffffff
    10c0:	ffffffff 	.word	0xffffffff
    10c4:	ffffffff 	.word	0xffffffff
    10c8:	ffffffff 	.word	0xffffffff
    10cc:	ffffffff 	.word	0xffffffff
    10d0:	ffffffff 	.word	0xffffffff
    10d4:	ffffffff 	.word	0xffffffff
    10d8:	ffffffff 	.word	0xffffffff
    10dc:	ffffffff 	.word	0xffffffff
    10e0:	ffffffff 	.word	0xffffffff
    10e4:	ffffffff 	.word	0xffffffff
    10e8:	ffffffff 	.word	0xffffffff
    10ec:	ffffffff 	.word	0xffffffff
    10f0:	ffffffff 	.word	0xffffffff
    10f4:	ffffffff 	.word	0xffffffff
    10f8:	ffffffff 	.word	0xffffffff
    10fc:	ffffffff 	.word	0xffffffff
    1100:	ffffffff 	.word	0xffffffff
    1104:	ffffffff 	.word	0xffffffff
    1108:	ffffffff 	.word	0xffffffff
    110c:	ffffffff 	.word	0xffffffff
    1110:	ffffffff 	.word	0xffffffff
    1114:	ffffffff 	.word	0xffffffff
    1118:	ffffffff 	.word	0xffffffff
    111c:	ffffffff 	.word	0xffffffff
    1120:	ffffffff 	.word	0xffffffff
    1124:	ffffffff 	.word	0xffffffff
    1128:	ffffffff 	.word	0xffffffff
    112c:	ffffffff 	.word	0xffffffff
    1130:	ffffffff 	.word	0xffffffff
    1134:	ffffffff 	.word	0xffffffff
    1138:	ffffffff 	.word	0xffffffff
    113c:	ffffffff 	.word	0xffffffff
    1140:	ffffffff 	.word	0xffffffff
    1144:	ffffffff 	.word	0xffffffff
    1148:	ffffffff 	.word	0xffffffff
    114c:	ffffffff 	.word	0xffffffff
    1150:	ffffffff 	.word	0xffffffff
    1154:	ffffffff 	.word	0xffffffff
    1158:	ffffffff 	.word	0xffffffff
    115c:	ffffffff 	.word	0xffffffff
    1160:	ffffffff 	.word	0xffffffff
    1164:	ffffffff 	.word	0xffffffff
    1168:	ffffffff 	.word	0xffffffff
    116c:	ffffffff 	.word	0xffffffff
    1170:	ffffffff 	.word	0xffffffff
    1174:	ffffffff 	.word	0xffffffff
    1178:	ffffffff 	.word	0xffffffff
    117c:	ffffffff 	.word	0xffffffff
    1180:	ffffffff 	.word	0xffffffff
    1184:	ffffffff 	.word	0xffffffff
    1188:	ffffffff 	.word	0xffffffff
    118c:	ffffffff 	.word	0xffffffff
    1190:	ffffffff 	.word	0xffffffff
    1194:	ffffffff 	.word	0xffffffff
    1198:	ffffffff 	.word	0xffffffff
    119c:	ffffffff 	.word	0xffffffff
    11a0:	ffffffff 	.word	0xffffffff
    11a4:	ffffffff 	.word	0xffffffff
    11a8:	ffffffff 	.word	0xffffffff
    11ac:	ffffffff 	.word	0xffffffff
    11b0:	ffffffff 	.word	0xffffffff
    11b4:	ffffffff 	.word	0xffffffff
    11b8:	ffffffff 	.word	0xffffffff
    11bc:	ffffffff 	.word	0xffffffff
    11c0:	ffffffff 	.word	0xffffffff
    11c4:	ffffffff 	.word	0xffffffff
    11c8:	ffffffff 	.word	0xffffffff
    11cc:	ffffffff 	.word	0xffffffff
    11d0:	ffffffff 	.word	0xffffffff
    11d4:	ffffffff 	.word	0xffffffff
    11d8:	ffffffff 	.word	0xffffffff
    11dc:	ffffffff 	.word	0xffffffff
    11e0:	ffffffff 	.word	0xffffffff
    11e4:	ffffffff 	.word	0xffffffff
    11e8:	ffffffff 	.word	0xffffffff
    11ec:	ffffffff 	.word	0xffffffff
    11f0:	ffffffff 	.word	0xffffffff
    11f4:	ffffffff 	.word	0xffffffff
    11f8:	ffffffff 	.word	0xffffffff
    11fc:	ffffffff 	.word	0xffffffff
    1200:	ffffffff 	.word	0xffffffff
    1204:	ffffffff 	.word	0xffffffff
    1208:	ffffffff 	.word	0xffffffff
    120c:	ffffffff 	.word	0xffffffff
    1210:	ffffffff 	.word	0xffffffff
    1214:	ffffffff 	.word	0xffffffff
    1218:	ffffffff 	.word	0xffffffff
    121c:	ffffffff 	.word	0xffffffff
    1220:	ffffffff 	.word	0xffffffff
    1224:	ffffffff 	.word	0xffffffff
    1228:	ffffffff 	.word	0xffffffff
    122c:	ffffffff 	.word	0xffffffff
    1230:	ffffffff 	.word	0xffffffff
    1234:	ffffffff 	.word	0xffffffff
    1238:	ffffffff 	.word	0xffffffff
    123c:	ffffffff 	.word	0xffffffff
    1240:	ffffffff 	.word	0xffffffff
    1244:	ffffffff 	.word	0xffffffff
    1248:	ffffffff 	.word	0xffffffff
    124c:	ffffffff 	.word	0xffffffff
    1250:	ffffffff 	.word	0xffffffff
    1254:	ffffffff 	.word	0xffffffff
    1258:	ffffffff 	.word	0xffffffff
    125c:	ffffffff 	.word	0xffffffff
    1260:	ffffffff 	.word	0xffffffff
    1264:	ffffffff 	.word	0xffffffff
    1268:	ffffffff 	.word	0xffffffff
    126c:	ffffffff 	.word	0xffffffff
    1270:	ffffffff 	.word	0xffffffff
    1274:	ffffffff 	.word	0xffffffff
    1278:	ffffffff 	.word	0xffffffff
    127c:	ffffffff 	.word	0xffffffff
    1280:	ffffffff 	.word	0xffffffff
    1284:	ffffffff 	.word	0xffffffff
    1288:	ffffffff 	.word	0xffffffff
    128c:	ffffffff 	.word	0xffffffff
    1290:	ffffffff 	.word	0xffffffff
    1294:	ffffffff 	.word	0xffffffff
    1298:	ffffffff 	.word	0xffffffff
    129c:	ffffffff 	.word	0xffffffff
    12a0:	ffffffff 	.word	0xffffffff
    12a4:	ffffffff 	.word	0xffffffff
    12a8:	ffffffff 	.word	0xffffffff
    12ac:	ffffffff 	.word	0xffffffff
    12b0:	ffffffff 	.word	0xffffffff
    12b4:	ffffffff 	.word	0xffffffff
    12b8:	ffffffff 	.word	0xffffffff
    12bc:	ffffffff 	.word	0xffffffff
    12c0:	ffffffff 	.word	0xffffffff
    12c4:	ffffffff 	.word	0xffffffff
    12c8:	ffffffff 	.word	0xffffffff
    12cc:	ffffffff 	.word	0xffffffff
    12d0:	ffffffff 	.word	0xffffffff
    12d4:	ffffffff 	.word	0xffffffff
    12d8:	ffffffff 	.word	0xffffffff
    12dc:	ffffffff 	.word	0xffffffff
    12e0:	ffffffff 	.word	0xffffffff
    12e4:	ffffffff 	.word	0xffffffff
    12e8:	ffffffff 	.word	0xffffffff
    12ec:	ffffffff 	.word	0xffffffff
    12f0:	ffffffff 	.word	0xffffffff
    12f4:	ffffffff 	.word	0xffffffff
    12f8:	ffffffff 	.word	0xffffffff
    12fc:	ffffffff 	.word	0xffffffff
    1300:	ffffffff 	.word	0xffffffff
    1304:	ffffffff 	.word	0xffffffff
    1308:	ffffffff 	.word	0xffffffff
    130c:	ffffffff 	.word	0xffffffff
    1310:	ffffffff 	.word	0xffffffff
    1314:	ffffffff 	.word	0xffffffff
    1318:	ffffffff 	.word	0xffffffff
    131c:	ffffffff 	.word	0xffffffff
    1320:	ffffffff 	.word	0xffffffff
    1324:	ffffffff 	.word	0xffffffff
    1328:	ffffffff 	.word	0xffffffff
    132c:	ffffffff 	.word	0xffffffff
    1330:	ffffffff 	.word	0xffffffff
    1334:	ffffffff 	.word	0xffffffff
    1338:	ffffffff 	.word	0xffffffff
    133c:	ffffffff 	.word	0xffffffff
    1340:	ffffffff 	.word	0xffffffff
    1344:	ffffffff 	.word	0xffffffff
    1348:	ffffffff 	.word	0xffffffff
    134c:	ffffffff 	.word	0xffffffff
    1350:	ffffffff 	.word	0xffffffff
    1354:	ffffffff 	.word	0xffffffff
    1358:	ffffffff 	.word	0xffffffff
    135c:	ffffffff 	.word	0xffffffff
    1360:	ffffffff 	.word	0xffffffff
    1364:	ffffffff 	.word	0xffffffff
    1368:	ffffffff 	.word	0xffffffff
    136c:	ffffffff 	.word	0xffffffff
    1370:	ffffffff 	.word	0xffffffff
    1374:	ffffffff 	.word	0xffffffff
    1378:	ffffffff 	.word	0xffffffff
    137c:	ffffffff 	.word	0xffffffff
    1380:	ffffffff 	.word	0xffffffff
    1384:	ffffffff 	.word	0xffffffff
    1388:	ffffffff 	.word	0xffffffff
    138c:	ffffffff 	.word	0xffffffff
    1390:	ffffffff 	.word	0xffffffff
    1394:	ffffffff 	.word	0xffffffff
    1398:	ffffffff 	.word	0xffffffff
    139c:	ffffffff 	.word	0xffffffff
    13a0:	ffffffff 	.word	0xffffffff
    13a4:	ffffffff 	.word	0xffffffff
    13a8:	ffffffff 	.word	0xffffffff
    13ac:	ffffffff 	.word	0xffffffff
    13b0:	ffffffff 	.word	0xffffffff
    13b4:	ffffffff 	.word	0xffffffff
    13b8:	ffffffff 	.word	0xffffffff
    13bc:	ffffffff 	.word	0xffffffff
    13c0:	ffffffff 	.word	0xffffffff
    13c4:	ffffffff 	.word	0xffffffff
    13c8:	ffffffff 	.word	0xffffffff
    13cc:	ffffffff 	.word	0xffffffff
    13d0:	ffffffff 	.word	0xffffffff
    13d4:	ffffffff 	.word	0xffffffff
    13d8:	ffffffff 	.word	0xffffffff
    13dc:	ffffffff 	.word	0xffffffff
    13e0:	ffffffff 	.word	0xffffffff
    13e4:	ffffffff 	.word	0xffffffff
    13e8:	ffffffff 	.word	0xffffffff
    13ec:	ffffffff 	.word	0xffffffff
    13f0:	ffffffff 	.word	0xffffffff
    13f4:	ffffffff 	.word	0xffffffff
    13f8:	ffffffff 	.word	0xffffffff
    13fc:	ffffffff 	.word	0xffffffff
    1400:	ffffffff 	.word	0xffffffff
    1404:	ffffffff 	.word	0xffffffff
    1408:	ffffffff 	.word	0xffffffff
    140c:	ffffffff 	.word	0xffffffff
    1410:	ffffffff 	.word	0xffffffff
    1414:	ffffffff 	.word	0xffffffff
    1418:	ffffffff 	.word	0xffffffff
    141c:	ffffffff 	.word	0xffffffff
    1420:	ffffffff 	.word	0xffffffff
    1424:	ffffffff 	.word	0xffffffff
    1428:	ffffffff 	.word	0xffffffff
    142c:	ffffffff 	.word	0xffffffff
    1430:	ffffffff 	.word	0xffffffff
    1434:	ffffffff 	.word	0xffffffff
    1438:	ffffffff 	.word	0xffffffff
    143c:	ffffffff 	.word	0xffffffff
    1440:	ffffffff 	.word	0xffffffff
    1444:	ffffffff 	.word	0xffffffff
    1448:	ffffffff 	.word	0xffffffff
    144c:	ffffffff 	.word	0xffffffff
    1450:	ffffffff 	.word	0xffffffff
    1454:	ffffffff 	.word	0xffffffff
    1458:	ffffffff 	.word	0xffffffff
    145c:	ffffffff 	.word	0xffffffff
    1460:	ffffffff 	.word	0xffffffff
    1464:	ffffffff 	.word	0xffffffff
    1468:	ffffffff 	.word	0xffffffff
    146c:	ffffffff 	.word	0xffffffff
    1470:	ffffffff 	.word	0xffffffff
    1474:	ffffffff 	.word	0xffffffff
    1478:	ffffffff 	.word	0xffffffff
    147c:	ffffffff 	.word	0xffffffff
    1480:	ffffffff 	.word	0xffffffff
    1484:	ffffffff 	.word	0xffffffff
    1488:	ffffffff 	.word	0xffffffff
    148c:	ffffffff 	.word	0xffffffff
    1490:	ffffffff 	.word	0xffffffff
    1494:	ffffffff 	.word	0xffffffff
    1498:	ffffffff 	.word	0xffffffff
    149c:	ffffffff 	.word	0xffffffff
    14a0:	ffffffff 	.word	0xffffffff
    14a4:	ffffffff 	.word	0xffffffff
    14a8:	ffffffff 	.word	0xffffffff
    14ac:	ffffffff 	.word	0xffffffff
    14b0:	ffffffff 	.word	0xffffffff
    14b4:	ffffffff 	.word	0xffffffff
    14b8:	ffffffff 	.word	0xffffffff
    14bc:	ffffffff 	.word	0xffffffff
    14c0:	ffffffff 	.word	0xffffffff
    14c4:	ffffffff 	.word	0xffffffff
    14c8:	ffffffff 	.word	0xffffffff
    14cc:	ffffffff 	.word	0xffffffff
    14d0:	ffffffff 	.word	0xffffffff
    14d4:	ffffffff 	.word	0xffffffff
    14d8:	ffffffff 	.word	0xffffffff
    14dc:	ffffffff 	.word	0xffffffff
    14e0:	ffffffff 	.word	0xffffffff
    14e4:	ffffffff 	.word	0xffffffff
    14e8:	ffffffff 	.word	0xffffffff
    14ec:	ffffffff 	.word	0xffffffff
    14f0:	ffffffff 	.word	0xffffffff
    14f4:	ffffffff 	.word	0xffffffff
    14f8:	ffffffff 	.word	0xffffffff
    14fc:	ffffffff 	.word	0xffffffff
    1500:	ffffffff 	.word	0xffffffff
    1504:	ffffffff 	.word	0xffffffff
    1508:	ffffffff 	.word	0xffffffff
    150c:	ffffffff 	.word	0xffffffff
    1510:	ffffffff 	.word	0xffffffff
    1514:	ffffffff 	.word	0xffffffff
    1518:	ffffffff 	.word	0xffffffff
    151c:	ffffffff 	.word	0xffffffff
    1520:	ffffffff 	.word	0xffffffff
    1524:	ffffffff 	.word	0xffffffff
    1528:	ffffffff 	.word	0xffffffff
    152c:	ffffffff 	.word	0xffffffff
    1530:	ffffffff 	.word	0xffffffff
    1534:	ffffffff 	.word	0xffffffff
    1538:	ffffffff 	.word	0xffffffff
    153c:	ffffffff 	.word	0xffffffff
    1540:	ffffffff 	.word	0xffffffff
    1544:	ffffffff 	.word	0xffffffff
    1548:	ffffffff 	.word	0xffffffff
    154c:	ffffffff 	.word	0xffffffff
    1550:	ffffffff 	.word	0xffffffff
    1554:	ffffffff 	.word	0xffffffff
    1558:	ffffffff 	.word	0xffffffff
    155c:	ffffffff 	.word	0xffffffff
    1560:	ffffffff 	.word	0xffffffff
    1564:	ffffffff 	.word	0xffffffff
    1568:	ffffffff 	.word	0xffffffff
    156c:	ffffffff 	.word	0xffffffff
    1570:	ffffffff 	.word	0xffffffff
    1574:	ffffffff 	.word	0xffffffff
    1578:	ffffffff 	.word	0xffffffff
    157c:	ffffffff 	.word	0xffffffff
    1580:	ffffffff 	.word	0xffffffff
    1584:	ffffffff 	.word	0xffffffff
    1588:	ffffffff 	.word	0xffffffff
    158c:	ffffffff 	.word	0xffffffff
    1590:	ffffffff 	.word	0xffffffff
    1594:	ffffffff 	.word	0xffffffff
    1598:	ffffffff 	.word	0xffffffff
    159c:	ffffffff 	.word	0xffffffff
    15a0:	ffffffff 	.word	0xffffffff
    15a4:	ffffffff 	.word	0xffffffff
    15a8:	ffffffff 	.word	0xffffffff
    15ac:	ffffffff 	.word	0xffffffff
    15b0:	ffffffff 	.word	0xffffffff
    15b4:	ffffffff 	.word	0xffffffff
    15b8:	ffffffff 	.word	0xffffffff
    15bc:	ffffffff 	.word	0xffffffff
    15c0:	ffffffff 	.word	0xffffffff
    15c4:	ffffffff 	.word	0xffffffff
    15c8:	ffffffff 	.word	0xffffffff
    15cc:	ffffffff 	.word	0xffffffff
    15d0:	ffffffff 	.word	0xffffffff
    15d4:	ffffffff 	.word	0xffffffff
    15d8:	ffffffff 	.word	0xffffffff
    15dc:	ffffffff 	.word	0xffffffff
    15e0:	ffffffff 	.word	0xffffffff
    15e4:	ffffffff 	.word	0xffffffff
    15e8:	ffffffff 	.word	0xffffffff
    15ec:	ffffffff 	.word	0xffffffff
    15f0:	ffffffff 	.word	0xffffffff
    15f4:	ffffffff 	.word	0xffffffff
    15f8:	ffffffff 	.word	0xffffffff
    15fc:	ffffffff 	.word	0xffffffff
    1600:	ffffffff 	.word	0xffffffff
    1604:	ffffffff 	.word	0xffffffff
    1608:	ffffffff 	.word	0xffffffff
    160c:	ffffffff 	.word	0xffffffff
    1610:	ffffffff 	.word	0xffffffff
    1614:	ffffffff 	.word	0xffffffff
    1618:	ffffffff 	.word	0xffffffff
    161c:	ffffffff 	.word	0xffffffff
    1620:	ffffffff 	.word	0xffffffff
    1624:	ffffffff 	.word	0xffffffff
    1628:	ffffffff 	.word	0xffffffff
    162c:	ffffffff 	.word	0xffffffff
    1630:	ffffffff 	.word	0xffffffff
    1634:	ffffffff 	.word	0xffffffff
    1638:	ffffffff 	.word	0xffffffff
    163c:	ffffffff 	.word	0xffffffff
    1640:	ffffffff 	.word	0xffffffff
    1644:	ffffffff 	.word	0xffffffff
    1648:	ffffffff 	.word	0xffffffff
    164c:	ffffffff 	.word	0xffffffff
    1650:	ffffffff 	.word	0xffffffff
    1654:	ffffffff 	.word	0xffffffff
    1658:	ffffffff 	.word	0xffffffff
    165c:	ffffffff 	.word	0xffffffff
    1660:	ffffffff 	.word	0xffffffff
    1664:	ffffffff 	.word	0xffffffff
    1668:	ffffffff 	.word	0xffffffff
    166c:	ffffffff 	.word	0xffffffff
    1670:	ffffffff 	.word	0xffffffff
    1674:	ffffffff 	.word	0xffffffff
    1678:	ffffffff 	.word	0xffffffff
    167c:	ffffffff 	.word	0xffffffff
    1680:	ffffffff 	.word	0xffffffff
    1684:	ffffffff 	.word	0xffffffff
    1688:	ffffffff 	.word	0xffffffff
    168c:	ffffffff 	.word	0xffffffff
    1690:	ffffffff 	.word	0xffffffff
    1694:	ffffffff 	.word	0xffffffff
    1698:	ffffffff 	.word	0xffffffff
    169c:	ffffffff 	.word	0xffffffff
    16a0:	ffffffff 	.word	0xffffffff
    16a4:	ffffffff 	.word	0xffffffff
    16a8:	ffffffff 	.word	0xffffffff
    16ac:	ffffffff 	.word	0xffffffff
    16b0:	ffffffff 	.word	0xffffffff
    16b4:	ffffffff 	.word	0xffffffff
    16b8:	ffffffff 	.word	0xffffffff
    16bc:	ffffffff 	.word	0xffffffff
    16c0:	ffffffff 	.word	0xffffffff
    16c4:	ffffffff 	.word	0xffffffff
    16c8:	ffffffff 	.word	0xffffffff
    16cc:	ffffffff 	.word	0xffffffff
    16d0:	ffffffff 	.word	0xffffffff
    16d4:	ffffffff 	.word	0xffffffff
    16d8:	ffffffff 	.word	0xffffffff
    16dc:	ffffffff 	.word	0xffffffff
    16e0:	ffffffff 	.word	0xffffffff
    16e4:	ffffffff 	.word	0xffffffff
    16e8:	ffffffff 	.word	0xffffffff
    16ec:	ffffffff 	.word	0xffffffff
    16f0:	ffffffff 	.word	0xffffffff
    16f4:	ffffffff 	.word	0xffffffff
    16f8:	ffffffff 	.word	0xffffffff
    16fc:	ffffffff 	.word	0xffffffff
    1700:	ffffffff 	.word	0xffffffff
    1704:	ffffffff 	.word	0xffffffff
    1708:	ffffffff 	.word	0xffffffff
    170c:	ffffffff 	.word	0xffffffff
    1710:	ffffffff 	.word	0xffffffff
    1714:	ffffffff 	.word	0xffffffff
    1718:	ffffffff 	.word	0xffffffff
    171c:	ffffffff 	.word	0xffffffff
    1720:	ffffffff 	.word	0xffffffff
    1724:	ffffffff 	.word	0xffffffff
    1728:	ffffffff 	.word	0xffffffff
    172c:	ffffffff 	.word	0xffffffff
    1730:	ffffffff 	.word	0xffffffff
    1734:	ffffffff 	.word	0xffffffff
    1738:	ffffffff 	.word	0xffffffff
    173c:	ffffffff 	.word	0xffffffff
    1740:	ffffffff 	.word	0xffffffff
    1744:	ffffffff 	.word	0xffffffff
    1748:	ffffffff 	.word	0xffffffff
    174c:	ffffffff 	.word	0xffffffff
    1750:	ffffffff 	.word	0xffffffff
    1754:	ffffffff 	.word	0xffffffff
    1758:	ffffffff 	.word	0xffffffff
    175c:	ffffffff 	.word	0xffffffff
    1760:	ffffffff 	.word	0xffffffff
    1764:	ffffffff 	.word	0xffffffff
    1768:	ffffffff 	.word	0xffffffff
    176c:	ffffffff 	.word	0xffffffff
    1770:	ffffffff 	.word	0xffffffff
    1774:	ffffffff 	.word	0xffffffff
    1778:	ffffffff 	.word	0xffffffff
    177c:	ffffffff 	.word	0xffffffff
    1780:	ffffffff 	.word	0xffffffff
    1784:	ffffffff 	.word	0xffffffff
    1788:	ffffffff 	.word	0xffffffff
    178c:	ffffffff 	.word	0xffffffff
    1790:	ffffffff 	.word	0xffffffff
    1794:	ffffffff 	.word	0xffffffff
    1798:	ffffffff 	.word	0xffffffff
    179c:	ffffffff 	.word	0xffffffff
    17a0:	ffffffff 	.word	0xffffffff
    17a4:	ffffffff 	.word	0xffffffff
    17a8:	ffffffff 	.word	0xffffffff
    17ac:	ffffffff 	.word	0xffffffff
    17b0:	ffffffff 	.word	0xffffffff
    17b4:	ffffffff 	.word	0xffffffff
    17b8:	ffffffff 	.word	0xffffffff
    17bc:	ffffffff 	.word	0xffffffff
    17c0:	ffffffff 	.word	0xffffffff
    17c4:	ffffffff 	.word	0xffffffff
    17c8:	ffffffff 	.word	0xffffffff
    17cc:	ffffffff 	.word	0xffffffff
    17d0:	ffffffff 	.word	0xffffffff
    17d4:	ffffffff 	.word	0xffffffff
    17d8:	ffffffff 	.word	0xffffffff
    17dc:	ffffffff 	.word	0xffffffff
    17e0:	ffffffff 	.word	0xffffffff
    17e4:	ffffffff 	.word	0xffffffff
    17e8:	ffffffff 	.word	0xffffffff
    17ec:	ffffffff 	.word	0xffffffff
    17f0:	ffffffff 	.word	0xffffffff
    17f4:	ffffffff 	.word	0xffffffff
    17f8:	ffffffff 	.word	0xffffffff
    17fc:	ffffffff 	.word	0xffffffff
    1800:	ffffffff 	.word	0xffffffff
    1804:	ffffffff 	.word	0xffffffff
    1808:	ffffffff 	.word	0xffffffff
    180c:	ffffffff 	.word	0xffffffff
    1810:	ffffffff 	.word	0xffffffff
    1814:	ffffffff 	.word	0xffffffff
    1818:	ffffffff 	.word	0xffffffff
    181c:	ffffffff 	.word	0xffffffff
    1820:	ffffffff 	.word	0xffffffff
    1824:	ffffffff 	.word	0xffffffff
    1828:	ffffffff 	.word	0xffffffff
    182c:	ffffffff 	.word	0xffffffff
    1830:	ffffffff 	.word	0xffffffff
    1834:	ffffffff 	.word	0xffffffff
    1838:	ffffffff 	.word	0xffffffff
    183c:	ffffffff 	.word	0xffffffff
    1840:	ffffffff 	.word	0xffffffff
    1844:	ffffffff 	.word	0xffffffff
    1848:	ffffffff 	.word	0xffffffff
    184c:	ffffffff 	.word	0xffffffff
    1850:	ffffffff 	.word	0xffffffff
    1854:	ffffffff 	.word	0xffffffff
    1858:	ffffffff 	.word	0xffffffff
    185c:	ffffffff 	.word	0xffffffff
    1860:	ffffffff 	.word	0xffffffff
    1864:	ffffffff 	.word	0xffffffff
    1868:	ffffffff 	.word	0xffffffff
    186c:	ffffffff 	.word	0xffffffff
    1870:	ffffffff 	.word	0xffffffff
    1874:	ffffffff 	.word	0xffffffff
    1878:	ffffffff 	.word	0xffffffff
    187c:	ffffffff 	.word	0xffffffff
    1880:	ffffffff 	.word	0xffffffff
    1884:	ffffffff 	.word	0xffffffff
    1888:	ffffffff 	.word	0xffffffff
    188c:	ffffffff 	.word	0xffffffff
    1890:	ffffffff 	.word	0xffffffff
    1894:	ffffffff 	.word	0xffffffff
    1898:	ffffffff 	.word	0xffffffff
    189c:	ffffffff 	.word	0xffffffff
    18a0:	ffffffff 	.word	0xffffffff
    18a4:	ffffffff 	.word	0xffffffff
    18a8:	ffffffff 	.word	0xffffffff
    18ac:	ffffffff 	.word	0xffffffff
    18b0:	ffffffff 	.word	0xffffffff
    18b4:	ffffffff 	.word	0xffffffff
    18b8:	ffffffff 	.word	0xffffffff
    18bc:	ffffffff 	.word	0xffffffff
    18c0:	ffffffff 	.word	0xffffffff
    18c4:	ffffffff 	.word	0xffffffff
    18c8:	ffffffff 	.word	0xffffffff
    18cc:	ffffffff 	.word	0xffffffff
    18d0:	ffffffff 	.word	0xffffffff
    18d4:	ffffffff 	.word	0xffffffff
    18d8:	ffffffff 	.word	0xffffffff
    18dc:	ffffffff 	.word	0xffffffff
    18e0:	ffffffff 	.word	0xffffffff
    18e4:	ffffffff 	.word	0xffffffff
    18e8:	ffffffff 	.word	0xffffffff
    18ec:	ffffffff 	.word	0xffffffff
    18f0:	ffffffff 	.word	0xffffffff
    18f4:	ffffffff 	.word	0xffffffff
    18f8:	ffffffff 	.word	0xffffffff
    18fc:	ffffffff 	.word	0xffffffff
    1900:	ffffffff 	.word	0xffffffff
    1904:	ffffffff 	.word	0xffffffff
    1908:	ffffffff 	.word	0xffffffff
    190c:	ffffffff 	.word	0xffffffff
    1910:	ffffffff 	.word	0xffffffff
    1914:	ffffffff 	.word	0xffffffff
    1918:	ffffffff 	.word	0xffffffff
    191c:	ffffffff 	.word	0xffffffff
    1920:	ffffffff 	.word	0xffffffff
    1924:	ffffffff 	.word	0xffffffff
    1928:	ffffffff 	.word	0xffffffff
    192c:	ffffffff 	.word	0xffffffff
    1930:	ffffffff 	.word	0xffffffff
    1934:	ffffffff 	.word	0xffffffff
    1938:	ffffffff 	.word	0xffffffff
    193c:	ffffffff 	.word	0xffffffff
    1940:	ffffffff 	.word	0xffffffff
    1944:	ffffffff 	.word	0xffffffff
    1948:	ffffffff 	.word	0xffffffff
    194c:	ffffffff 	.word	0xffffffff
    1950:	ffffffff 	.word	0xffffffff
    1954:	ffffffff 	.word	0xffffffff
    1958:	ffffffff 	.word	0xffffffff
    195c:	ffffffff 	.word	0xffffffff
    1960:	ffffffff 	.word	0xffffffff
    1964:	ffffffff 	.word	0xffffffff
    1968:	ffffffff 	.word	0xffffffff
    196c:	ffffffff 	.word	0xffffffff
    1970:	ffffffff 	.word	0xffffffff
    1974:	ffffffff 	.word	0xffffffff
    1978:	ffffffff 	.word	0xffffffff
    197c:	ffffffff 	.word	0xffffffff
    1980:	ffffffff 	.word	0xffffffff
    1984:	ffffffff 	.word	0xffffffff
    1988:	ffffffff 	.word	0xffffffff
    198c:	ffffffff 	.word	0xffffffff
    1990:	ffffffff 	.word	0xffffffff
    1994:	ffffffff 	.word	0xffffffff
    1998:	ffffffff 	.word	0xffffffff
    199c:	ffffffff 	.word	0xffffffff
    19a0:	ffffffff 	.word	0xffffffff
    19a4:	ffffffff 	.word	0xffffffff
    19a8:	ffffffff 	.word	0xffffffff
    19ac:	ffffffff 	.word	0xffffffff
    19b0:	ffffffff 	.word	0xffffffff
    19b4:	ffffffff 	.word	0xffffffff
    19b8:	ffffffff 	.word	0xffffffff
    19bc:	ffffffff 	.word	0xffffffff
    19c0:	ffffffff 	.word	0xffffffff
    19c4:	ffffffff 	.word	0xffffffff
    19c8:	ffffffff 	.word	0xffffffff
    19cc:	ffffffff 	.word	0xffffffff
    19d0:	ffffffff 	.word	0xffffffff
    19d4:	ffffffff 	.word	0xffffffff
    19d8:	ffffffff 	.word	0xffffffff
    19dc:	ffffffff 	.word	0xffffffff
    19e0:	ffffffff 	.word	0xffffffff
    19e4:	ffffffff 	.word	0xffffffff
    19e8:	ffffffff 	.word	0xffffffff
    19ec:	ffffffff 	.word	0xffffffff
    19f0:	ffffffff 	.word	0xffffffff
    19f4:	ffffffff 	.word	0xffffffff
    19f8:	ffffffff 	.word	0xffffffff
    19fc:	ffffffff 	.word	0xffffffff
    1a00:	ffffffff 	.word	0xffffffff
    1a04:	ffffffff 	.word	0xffffffff
    1a08:	ffffffff 	.word	0xffffffff
    1a0c:	ffffffff 	.word	0xffffffff
    1a10:	ffffffff 	.word	0xffffffff
    1a14:	ffffffff 	.word	0xffffffff
    1a18:	ffffffff 	.word	0xffffffff
    1a1c:	ffffffff 	.word	0xffffffff
    1a20:	ffffffff 	.word	0xffffffff
    1a24:	ffffffff 	.word	0xffffffff
    1a28:	ffffffff 	.word	0xffffffff
    1a2c:	ffffffff 	.word	0xffffffff
    1a30:	ffffffff 	.word	0xffffffff
    1a34:	ffffffff 	.word	0xffffffff
    1a38:	ffffffff 	.word	0xffffffff
    1a3c:	ffffffff 	.word	0xffffffff
    1a40:	ffffffff 	.word	0xffffffff
    1a44:	ffffffff 	.word	0xffffffff
    1a48:	ffffffff 	.word	0xffffffff
    1a4c:	ffffffff 	.word	0xffffffff
    1a50:	ffffffff 	.word	0xffffffff
    1a54:	ffffffff 	.word	0xffffffff
    1a58:	ffffffff 	.word	0xffffffff
    1a5c:	ffffffff 	.word	0xffffffff
    1a60:	ffffffff 	.word	0xffffffff
    1a64:	ffffffff 	.word	0xffffffff
    1a68:	ffffffff 	.word	0xffffffff
    1a6c:	ffffffff 	.word	0xffffffff
    1a70:	ffffffff 	.word	0xffffffff
    1a74:	ffffffff 	.word	0xffffffff
    1a78:	ffffffff 	.word	0xffffffff
    1a7c:	ffffffff 	.word	0xffffffff
    1a80:	ffffffff 	.word	0xffffffff
    1a84:	ffffffff 	.word	0xffffffff
    1a88:	ffffffff 	.word	0xffffffff
    1a8c:	ffffffff 	.word	0xffffffff
    1a90:	ffffffff 	.word	0xffffffff
    1a94:	ffffffff 	.word	0xffffffff
    1a98:	ffffffff 	.word	0xffffffff
    1a9c:	ffffffff 	.word	0xffffffff
    1aa0:	ffffffff 	.word	0xffffffff
    1aa4:	ffffffff 	.word	0xffffffff
    1aa8:	ffffffff 	.word	0xffffffff
    1aac:	ffffffff 	.word	0xffffffff
    1ab0:	ffffffff 	.word	0xffffffff
    1ab4:	ffffffff 	.word	0xffffffff
    1ab8:	ffffffff 	.word	0xffffffff
    1abc:	ffffffff 	.word	0xffffffff
    1ac0:	ffffffff 	.word	0xffffffff
    1ac4:	ffffffff 	.word	0xffffffff
    1ac8:	ffffffff 	.word	0xffffffff
    1acc:	ffffffff 	.word	0xffffffff
    1ad0:	ffffffff 	.word	0xffffffff
    1ad4:	ffffffff 	.word	0xffffffff
    1ad8:	ffffffff 	.word	0xffffffff
    1adc:	ffffffff 	.word	0xffffffff
    1ae0:	ffffffff 	.word	0xffffffff
    1ae4:	ffffffff 	.word	0xffffffff
    1ae8:	ffffffff 	.word	0xffffffff
    1aec:	ffffffff 	.word	0xffffffff
    1af0:	ffffffff 	.word	0xffffffff
    1af4:	ffffffff 	.word	0xffffffff
    1af8:	ffffffff 	.word	0xffffffff
    1afc:	ffffffff 	.word	0xffffffff
    1b00:	ffffffff 	.word	0xffffffff
    1b04:	ffffffff 	.word	0xffffffff
    1b08:	ffffffff 	.word	0xffffffff
    1b0c:	ffffffff 	.word	0xffffffff
    1b10:	ffffffff 	.word	0xffffffff
    1b14:	ffffffff 	.word	0xffffffff
    1b18:	ffffffff 	.word	0xffffffff
    1b1c:	ffffffff 	.word	0xffffffff
    1b20:	ffffffff 	.word	0xffffffff
    1b24:	ffffffff 	.word	0xffffffff
    1b28:	ffffffff 	.word	0xffffffff
    1b2c:	ffffffff 	.word	0xffffffff
    1b30:	ffffffff 	.word	0xffffffff
    1b34:	ffffffff 	.word	0xffffffff
    1b38:	ffffffff 	.word	0xffffffff
    1b3c:	ffffffff 	.word	0xffffffff
    1b40:	ffffffff 	.word	0xffffffff
    1b44:	ffffffff 	.word	0xffffffff
    1b48:	ffffffff 	.word	0xffffffff
    1b4c:	ffffffff 	.word	0xffffffff
    1b50:	ffffffff 	.word	0xffffffff
    1b54:	ffffffff 	.word	0xffffffff
    1b58:	ffffffff 	.word	0xffffffff
    1b5c:	ffffffff 	.word	0xffffffff
    1b60:	ffffffff 	.word	0xffffffff
    1b64:	ffffffff 	.word	0xffffffff
    1b68:	ffffffff 	.word	0xffffffff
    1b6c:	ffffffff 	.word	0xffffffff
    1b70:	ffffffff 	.word	0xffffffff
    1b74:	ffffffff 	.word	0xffffffff
    1b78:	ffffffff 	.word	0xffffffff
    1b7c:	ffffffff 	.word	0xffffffff
    1b80:	ffffffff 	.word	0xffffffff
    1b84:	ffffffff 	.word	0xffffffff
    1b88:	ffffffff 	.word	0xffffffff
    1b8c:	ffffffff 	.word	0xffffffff
    1b90:	ffffffff 	.word	0xffffffff
    1b94:	ffffffff 	.word	0xffffffff
    1b98:	ffffffff 	.word	0xffffffff
    1b9c:	ffffffff 	.word	0xffffffff
    1ba0:	ffffffff 	.word	0xffffffff
    1ba4:	ffffffff 	.word	0xffffffff
    1ba8:	ffffffff 	.word	0xffffffff
    1bac:	ffffffff 	.word	0xffffffff
    1bb0:	ffffffff 	.word	0xffffffff
    1bb4:	ffffffff 	.word	0xffffffff
    1bb8:	ffffffff 	.word	0xffffffff
    1bbc:	ffffffff 	.word	0xffffffff
    1bc0:	ffffffff 	.word	0xffffffff
    1bc4:	ffffffff 	.word	0xffffffff
    1bc8:	ffffffff 	.word	0xffffffff
    1bcc:	ffffffff 	.word	0xffffffff
    1bd0:	ffffffff 	.word	0xffffffff
    1bd4:	ffffffff 	.word	0xffffffff
    1bd8:	ffffffff 	.word	0xffffffff
    1bdc:	ffffffff 	.word	0xffffffff
    1be0:	ffffffff 	.word	0xffffffff
    1be4:	ffffffff 	.word	0xffffffff
    1be8:	ffffffff 	.word	0xffffffff
    1bec:	ffffffff 	.word	0xffffffff
    1bf0:	ffffffff 	.word	0xffffffff
    1bf4:	ffffffff 	.word	0xffffffff
    1bf8:	ffffffff 	.word	0xffffffff
    1bfc:	ffffffff 	.word	0xffffffff
    1c00:	ffffffff 	.word	0xffffffff
    1c04:	ffffffff 	.word	0xffffffff
    1c08:	ffffffff 	.word	0xffffffff
    1c0c:	ffffffff 	.word	0xffffffff
    1c10:	ffffffff 	.word	0xffffffff
    1c14:	ffffffff 	.word	0xffffffff
    1c18:	ffffffff 	.word	0xffffffff
    1c1c:	ffffffff 	.word	0xffffffff
    1c20:	ffffffff 	.word	0xffffffff
    1c24:	ffffffff 	.word	0xffffffff
    1c28:	ffffffff 	.word	0xffffffff
    1c2c:	ffffffff 	.word	0xffffffff
    1c30:	ffffffff 	.word	0xffffffff
    1c34:	ffffffff 	.word	0xffffffff
    1c38:	ffffffff 	.word	0xffffffff
    1c3c:	ffffffff 	.word	0xffffffff
    1c40:	ffffffff 	.word	0xffffffff
    1c44:	ffffffff 	.word	0xffffffff
    1c48:	ffffffff 	.word	0xffffffff
    1c4c:	ffffffff 	.word	0xffffffff
    1c50:	ffffffff 	.word	0xffffffff
    1c54:	ffffffff 	.word	0xffffffff
    1c58:	ffffffff 	.word	0xffffffff
    1c5c:	ffffffff 	.word	0xffffffff
    1c60:	ffffffff 	.word	0xffffffff
    1c64:	ffffffff 	.word	0xffffffff
    1c68:	ffffffff 	.word	0xffffffff
    1c6c:	ffffffff 	.word	0xffffffff
    1c70:	ffffffff 	.word	0xffffffff
    1c74:	ffffffff 	.word	0xffffffff
    1c78:	ffffffff 	.word	0xffffffff
    1c7c:	ffffffff 	.word	0xffffffff
    1c80:	ffffffff 	.word	0xffffffff
    1c84:	ffffffff 	.word	0xffffffff
    1c88:	ffffffff 	.word	0xffffffff
    1c8c:	ffffffff 	.word	0xffffffff
    1c90:	ffffffff 	.word	0xffffffff
    1c94:	ffffffff 	.word	0xffffffff
    1c98:	ffffffff 	.word	0xffffffff
    1c9c:	ffffffff 	.word	0xffffffff
    1ca0:	ffffffff 	.word	0xffffffff
    1ca4:	ffffffff 	.word	0xffffffff
    1ca8:	ffffffff 	.word	0xffffffff
    1cac:	ffffffff 	.word	0xffffffff
    1cb0:	ffffffff 	.word	0xffffffff
    1cb4:	ffffffff 	.word	0xffffffff
    1cb8:	ffffffff 	.word	0xffffffff
    1cbc:	ffffffff 	.word	0xffffffff
    1cc0:	ffffffff 	.word	0xffffffff
    1cc4:	ffffffff 	.word	0xffffffff
    1cc8:	ffffffff 	.word	0xffffffff
    1ccc:	ffffffff 	.word	0xffffffff
    1cd0:	ffffffff 	.word	0xffffffff
    1cd4:	ffffffff 	.word	0xffffffff
    1cd8:	ffffffff 	.word	0xffffffff
    1cdc:	ffffffff 	.word	0xffffffff
    1ce0:	ffffffff 	.word	0xffffffff
    1ce4:	ffffffff 	.word	0xffffffff
    1ce8:	ffffffff 	.word	0xffffffff
    1cec:	ffffffff 	.word	0xffffffff
    1cf0:	ffffffff 	.word	0xffffffff
    1cf4:	ffffffff 	.word	0xffffffff
    1cf8:	ffffffff 	.word	0xffffffff
    1cfc:	ffffffff 	.word	0xffffffff
    1d00:	ffffffff 	.word	0xffffffff
    1d04:	ffffffff 	.word	0xffffffff
    1d08:	ffffffff 	.word	0xffffffff
    1d0c:	ffffffff 	.word	0xffffffff
    1d10:	ffffffff 	.word	0xffffffff
    1d14:	ffffffff 	.word	0xffffffff
    1d18:	ffffffff 	.word	0xffffffff
    1d1c:	ffffffff 	.word	0xffffffff
    1d20:	ffffffff 	.word	0xffffffff
    1d24:	ffffffff 	.word	0xffffffff
    1d28:	ffffffff 	.word	0xffffffff
    1d2c:	ffffffff 	.word	0xffffffff
    1d30:	ffffffff 	.word	0xffffffff
    1d34:	ffffffff 	.word	0xffffffff
    1d38:	ffffffff 	.word	0xffffffff
    1d3c:	ffffffff 	.word	0xffffffff
    1d40:	ffffffff 	.word	0xffffffff
    1d44:	ffffffff 	.word	0xffffffff
    1d48:	ffffffff 	.word	0xffffffff
    1d4c:	ffffffff 	.word	0xffffffff
    1d50:	ffffffff 	.word	0xffffffff
    1d54:	ffffffff 	.word	0xffffffff
    1d58:	ffffffff 	.word	0xffffffff
    1d5c:	ffffffff 	.word	0xffffffff
    1d60:	ffffffff 	.word	0xffffffff
    1d64:	ffffffff 	.word	0xffffffff
    1d68:	ffffffff 	.word	0xffffffff
    1d6c:	ffffffff 	.word	0xffffffff
    1d70:	ffffffff 	.word	0xffffffff
    1d74:	ffffffff 	.word	0xffffffff
    1d78:	ffffffff 	.word	0xffffffff
    1d7c:	ffffffff 	.word	0xffffffff
    1d80:	ffffffff 	.word	0xffffffff
    1d84:	ffffffff 	.word	0xffffffff
    1d88:	ffffffff 	.word	0xffffffff
    1d8c:	ffffffff 	.word	0xffffffff
    1d90:	ffffffff 	.word	0xffffffff
    1d94:	ffffffff 	.word	0xffffffff
    1d98:	ffffffff 	.word	0xffffffff
    1d9c:	ffffffff 	.word	0xffffffff
    1da0:	ffffffff 	.word	0xffffffff
    1da4:	ffffffff 	.word	0xffffffff
    1da8:	ffffffff 	.word	0xffffffff
    1dac:	ffffffff 	.word	0xffffffff
    1db0:	ffffffff 	.word	0xffffffff
    1db4:	ffffffff 	.word	0xffffffff
    1db8:	ffffffff 	.word	0xffffffff
    1dbc:	ffffffff 	.word	0xffffffff
    1dc0:	ffffffff 	.word	0xffffffff
    1dc4:	ffffffff 	.word	0xffffffff
    1dc8:	ffffffff 	.word	0xffffffff
    1dcc:	ffffffff 	.word	0xffffffff
    1dd0:	ffffffff 	.word	0xffffffff
    1dd4:	ffffffff 	.word	0xffffffff
    1dd8:	ffffffff 	.word	0xffffffff
    1ddc:	ffffffff 	.word	0xffffffff
    1de0:	ffffffff 	.word	0xffffffff
    1de4:	ffffffff 	.word	0xffffffff
    1de8:	ffffffff 	.word	0xffffffff
    1dec:	ffffffff 	.word	0xffffffff
    1df0:	ffffffff 	.word	0xffffffff
    1df4:	ffffffff 	.word	0xffffffff
    1df8:	ffffffff 	.word	0xffffffff
    1dfc:	ffffffff 	.word	0xffffffff
    1e00:	ffffffff 	.word	0xffffffff
    1e04:	ffffffff 	.word	0xffffffff
    1e08:	ffffffff 	.word	0xffffffff
    1e0c:	ffffffff 	.word	0xffffffff
    1e10:	ffffffff 	.word	0xffffffff
    1e14:	ffffffff 	.word	0xffffffff
    1e18:	ffffffff 	.word	0xffffffff
    1e1c:	ffffffff 	.word	0xffffffff
    1e20:	ffffffff 	.word	0xffffffff
    1e24:	ffffffff 	.word	0xffffffff
    1e28:	ffffffff 	.word	0xffffffff
    1e2c:	ffffffff 	.word	0xffffffff
    1e30:	ffffffff 	.word	0xffffffff
    1e34:	ffffffff 	.word	0xffffffff
    1e38:	ffffffff 	.word	0xffffffff
    1e3c:	ffffffff 	.word	0xffffffff
    1e40:	ffffffff 	.word	0xffffffff
    1e44:	ffffffff 	.word	0xffffffff
    1e48:	ffffffff 	.word	0xffffffff
    1e4c:	ffffffff 	.word	0xffffffff
    1e50:	ffffffff 	.word	0xffffffff
    1e54:	ffffffff 	.word	0xffffffff
    1e58:	ffffffff 	.word	0xffffffff
    1e5c:	ffffffff 	.word	0xffffffff
    1e60:	ffffffff 	.word	0xffffffff
    1e64:	ffffffff 	.word	0xffffffff
    1e68:	ffffffff 	.word	0xffffffff
    1e6c:	ffffffff 	.word	0xffffffff
    1e70:	ffffffff 	.word	0xffffffff
    1e74:	ffffffff 	.word	0xffffffff
    1e78:	ffffffff 	.word	0xffffffff
    1e7c:	ffffffff 	.word	0xffffffff
    1e80:	ffffffff 	.word	0xffffffff
    1e84:	ffffffff 	.word	0xffffffff
    1e88:	ffffffff 	.word	0xffffffff
    1e8c:	ffffffff 	.word	0xffffffff
    1e90:	ffffffff 	.word	0xffffffff
    1e94:	ffffffff 	.word	0xffffffff
    1e98:	ffffffff 	.word	0xffffffff
    1e9c:	ffffffff 	.word	0xffffffff
    1ea0:	ffffffff 	.word	0xffffffff
    1ea4:	ffffffff 	.word	0xffffffff
    1ea8:	ffffffff 	.word	0xffffffff
    1eac:	ffffffff 	.word	0xffffffff
    1eb0:	ffffffff 	.word	0xffffffff
    1eb4:	ffffffff 	.word	0xffffffff
    1eb8:	ffffffff 	.word	0xffffffff
    1ebc:	ffffffff 	.word	0xffffffff
    1ec0:	ffffffff 	.word	0xffffffff
    1ec4:	ffffffff 	.word	0xffffffff
    1ec8:	ffffffff 	.word	0xffffffff
    1ecc:	ffffffff 	.word	0xffffffff
    1ed0:	ffffffff 	.word	0xffffffff
    1ed4:	ffffffff 	.word	0xffffffff
    1ed8:	ffffffff 	.word	0xffffffff
    1edc:	ffffffff 	.word	0xffffffff
    1ee0:	ffffffff 	.word	0xffffffff
    1ee4:	ffffffff 	.word	0xffffffff
    1ee8:	ffffffff 	.word	0xffffffff
    1eec:	ffffffff 	.word	0xffffffff
    1ef0:	ffffffff 	.word	0xffffffff
    1ef4:	ffffffff 	.word	0xffffffff
    1ef8:	ffffffff 	.word	0xffffffff
    1efc:	ffffffff 	.word	0xffffffff
    1f00:	ffffffff 	.word	0xffffffff
    1f04:	ffffffff 	.word	0xffffffff
    1f08:	ffffffff 	.word	0xffffffff
    1f0c:	ffffffff 	.word	0xffffffff
    1f10:	ffffffff 	.word	0xffffffff
    1f14:	ffffffff 	.word	0xffffffff
    1f18:	ffffffff 	.word	0xffffffff
    1f1c:	ffffffff 	.word	0xffffffff
    1f20:	ffffffff 	.word	0xffffffff
    1f24:	ffffffff 	.word	0xffffffff
    1f28:	ffffffff 	.word	0xffffffff
    1f2c:	ffffffff 	.word	0xffffffff
    1f30:	ffffffff 	.word	0xffffffff
    1f34:	ffffffff 	.word	0xffffffff
    1f38:	ffffffff 	.word	0xffffffff
    1f3c:	ffffffff 	.word	0xffffffff
    1f40:	ffffffff 	.word	0xffffffff
    1f44:	ffffffff 	.word	0xffffffff
    1f48:	ffffffff 	.word	0xffffffff
    1f4c:	ffffffff 	.word	0xffffffff
    1f50:	ffffffff 	.word	0xffffffff
    1f54:	ffffffff 	.word	0xffffffff
    1f58:	ffffffff 	.word	0xffffffff
    1f5c:	ffffffff 	.word	0xffffffff
    1f60:	ffffffff 	.word	0xffffffff
    1f64:	ffffffff 	.word	0xffffffff
    1f68:	ffffffff 	.word	0xffffffff
    1f6c:	ffffffff 	.word	0xffffffff
    1f70:	ffffffff 	.word	0xffffffff
    1f74:	ffffffff 	.word	0xffffffff
    1f78:	ffffffff 	.word	0xffffffff
    1f7c:	ffffffff 	.word	0xffffffff
    1f80:	ffffffff 	.word	0xffffffff
    1f84:	ffffffff 	.word	0xffffffff
    1f88:	ffffffff 	.word	0xffffffff
    1f8c:	ffffffff 	.word	0xffffffff
    1f90:	ffffffff 	.word	0xffffffff
    1f94:	ffffffff 	.word	0xffffffff
    1f98:	ffffffff 	.word	0xffffffff
    1f9c:	ffffffff 	.word	0xffffffff
    1fa0:	ffffffff 	.word	0xffffffff
    1fa4:	ffffffff 	.word	0xffffffff
    1fa8:	ffffffff 	.word	0xffffffff
    1fac:	ffffffff 	.word	0xffffffff
    1fb0:	ffffffff 	.word	0xffffffff
    1fb4:	ffffffff 	.word	0xffffffff
    1fb8:	ffffffff 	.word	0xffffffff
    1fbc:	ffffffff 	.word	0xffffffff
    1fc0:	ffffffff 	.word	0xffffffff
    1fc4:	ffffffff 	.word	0xffffffff
    1fc8:	ffffffff 	.word	0xffffffff
    1fcc:	ffffffff 	.word	0xffffffff
    1fd0:	ffffffff 	.word	0xffffffff
    1fd4:	ffffffff 	.word	0xffffffff
    1fd8:	ffffffff 	.word	0xffffffff
    1fdc:	ffffffff 	.word	0xffffffff
    1fe0:	ffffffff 	.word	0xffffffff
    1fe4:	ffffffff 	.word	0xffffffff
    1fe8:	ffffffff 	.word	0xffffffff
    1fec:	ffffffff 	.word	0xffffffff
    1ff0:	ffffffff 	.word	0xffffffff
    1ff4:	ffffffff 	.word	0xffffffff
    1ff8:	ffffffff 	.word	0xffffffff
    1ffc:	ffffffff 	.word	0xffffffff
    2000:	ffffffff 	.word	0xffffffff
    2004:	ffffffff 	.word	0xffffffff
    2008:	ffffffff 	.word	0xffffffff
    200c:	ffffffff 	.word	0xffffffff
    2010:	ffffffff 	.word	0xffffffff
    2014:	ffffffff 	.word	0xffffffff
    2018:	ffffffff 	.word	0xffffffff
    201c:	ffffffff 	.word	0xffffffff
    2020:	ffffffff 	.word	0xffffffff
    2024:	ffffffff 	.word	0xffffffff
    2028:	ffffffff 	.word	0xffffffff
    202c:	ffffffff 	.word	0xffffffff
    2030:	ffffffff 	.word	0xffffffff
    2034:	ffffffff 	.word	0xffffffff
    2038:	ffffffff 	.word	0xffffffff
    203c:	ffffffff 	.word	0xffffffff
    2040:	ffffffff 	.word	0xffffffff
    2044:	ffffffff 	.word	0xffffffff
    2048:	ffffffff 	.word	0xffffffff
    204c:	ffffffff 	.word	0xffffffff
    2050:	ffffffff 	.word	0xffffffff
    2054:	ffffffff 	.word	0xffffffff
    2058:	ffffffff 	.word	0xffffffff
    205c:	ffffffff 	.word	0xffffffff
    2060:	ffffffff 	.word	0xffffffff
    2064:	ffffffff 	.word	0xffffffff
    2068:	ffffffff 	.word	0xffffffff
    206c:	ffffffff 	.word	0xffffffff
    2070:	ffffffff 	.word	0xffffffff
    2074:	ffffffff 	.word	0xffffffff
    2078:	ffffffff 	.word	0xffffffff
    207c:	ffffffff 	.word	0xffffffff
    2080:	ffffffff 	.word	0xffffffff
    2084:	ffffffff 	.word	0xffffffff
    2088:	ffffffff 	.word	0xffffffff
    208c:	ffffffff 	.word	0xffffffff
    2090:	ffffffff 	.word	0xffffffff
    2094:	ffffffff 	.word	0xffffffff
    2098:	ffffffff 	.word	0xffffffff
    209c:	ffffffff 	.word	0xffffffff
    20a0:	ffffffff 	.word	0xffffffff
    20a4:	ffffffff 	.word	0xffffffff
    20a8:	ffffffff 	.word	0xffffffff
    20ac:	ffffffff 	.word	0xffffffff
    20b0:	ffffffff 	.word	0xffffffff
    20b4:	ffffffff 	.word	0xffffffff
    20b8:	ffffffff 	.word	0xffffffff
    20bc:	ffffffff 	.word	0xffffffff
    20c0:	ffffffff 	.word	0xffffffff
    20c4:	ffffffff 	.word	0xffffffff
    20c8:	ffffffff 	.word	0xffffffff
    20cc:	ffffffff 	.word	0xffffffff
    20d0:	ffffffff 	.word	0xffffffff
    20d4:	ffffffff 	.word	0xffffffff
    20d8:	ffffffff 	.word	0xffffffff
    20dc:	ffffffff 	.word	0xffffffff
    20e0:	ffffffff 	.word	0xffffffff
    20e4:	ffffffff 	.word	0xffffffff
    20e8:	ffffffff 	.word	0xffffffff
    20ec:	ffffffff 	.word	0xffffffff
    20f0:	ffffffff 	.word	0xffffffff
    20f4:	ffffffff 	.word	0xffffffff
    20f8:	ffffffff 	.word	0xffffffff
    20fc:	ffffffff 	.word	0xffffffff
    2100:	ffffffff 	.word	0xffffffff
    2104:	ffffffff 	.word	0xffffffff
    2108:	ffffffff 	.word	0xffffffff
    210c:	ffffffff 	.word	0xffffffff
    2110:	ffffffff 	.word	0xffffffff
    2114:	ffffffff 	.word	0xffffffff
    2118:	ffffffff 	.word	0xffffffff
    211c:	ffffffff 	.word	0xffffffff
    2120:	ffffffff 	.word	0xffffffff
    2124:	ffffffff 	.word	0xffffffff
    2128:	ffffffff 	.word	0xffffffff
    212c:	ffffffff 	.word	0xffffffff
    2130:	ffffffff 	.word	0xffffffff
    2134:	ffffffff 	.word	0xffffffff
    2138:	ffffffff 	.word	0xffffffff
    213c:	ffffffff 	.word	0xffffffff
    2140:	ffffffff 	.word	0xffffffff
    2144:	ffffffff 	.word	0xffffffff
    2148:	ffffffff 	.word	0xffffffff
    214c:	ffffffff 	.word	0xffffffff
    2150:	ffffffff 	.word	0xffffffff
    2154:	ffffffff 	.word	0xffffffff
    2158:	ffffffff 	.word	0xffffffff
    215c:	ffffffff 	.word	0xffffffff
    2160:	ffffffff 	.word	0xffffffff
    2164:	ffffffff 	.word	0xffffffff
    2168:	ffffffff 	.word	0xffffffff
    216c:	ffffffff 	.word	0xffffffff
    2170:	ffffffff 	.word	0xffffffff
    2174:	ffffffff 	.word	0xffffffff
    2178:	ffffffff 	.word	0xffffffff
    217c:	ffffffff 	.word	0xffffffff
    2180:	ffffffff 	.word	0xffffffff
    2184:	ffffffff 	.word	0xffffffff
    2188:	ffffffff 	.word	0xffffffff
    218c:	ffffffff 	.word	0xffffffff
    2190:	ffffffff 	.word	0xffffffff
    2194:	ffffffff 	.word	0xffffffff
    2198:	ffffffff 	.word	0xffffffff
    219c:	ffffffff 	.word	0xffffffff
    21a0:	ffffffff 	.word	0xffffffff
    21a4:	ffffffff 	.word	0xffffffff
    21a8:	ffffffff 	.word	0xffffffff
    21ac:	ffffffff 	.word	0xffffffff
    21b0:	ffffffff 	.word	0xffffffff
    21b4:	ffffffff 	.word	0xffffffff
    21b8:	ffffffff 	.word	0xffffffff
    21bc:	ffffffff 	.word	0xffffffff
    21c0:	ffffffff 	.word	0xffffffff
    21c4:	ffffffff 	.word	0xffffffff
    21c8:	ffffffff 	.word	0xffffffff
    21cc:	ffffffff 	.word	0xffffffff
    21d0:	ffffffff 	.word	0xffffffff
    21d4:	ffffffff 	.word	0xffffffff
    21d8:	ffffffff 	.word	0xffffffff
    21dc:	ffffffff 	.word	0xffffffff
    21e0:	ffffffff 	.word	0xffffffff
    21e4:	ffffffff 	.word	0xffffffff
    21e8:	ffffffff 	.word	0xffffffff
    21ec:	ffffffff 	.word	0xffffffff
    21f0:	ffffffff 	.word	0xffffffff
    21f4:	ffffffff 	.word	0xffffffff
    21f8:	ffffffff 	.word	0xffffffff
    21fc:	ffffffff 	.word	0xffffffff
    2200:	ffffffff 	.word	0xffffffff
    2204:	ffffffff 	.word	0xffffffff
    2208:	ffffffff 	.word	0xffffffff
    220c:	ffffffff 	.word	0xffffffff
    2210:	ffffffff 	.word	0xffffffff
    2214:	ffffffff 	.word	0xffffffff
    2218:	ffffffff 	.word	0xffffffff
    221c:	ffffffff 	.word	0xffffffff
    2220:	ffffffff 	.word	0xffffffff
    2224:	ffffffff 	.word	0xffffffff
    2228:	ffffffff 	.word	0xffffffff
    222c:	ffffffff 	.word	0xffffffff
    2230:	ffffffff 	.word	0xffffffff
    2234:	ffffffff 	.word	0xffffffff
    2238:	ffffffff 	.word	0xffffffff
    223c:	ffffffff 	.word	0xffffffff
    2240:	ffffffff 	.word	0xffffffff
    2244:	ffffffff 	.word	0xffffffff
    2248:	ffffffff 	.word	0xffffffff
    224c:	ffffffff 	.word	0xffffffff
    2250:	ffffffff 	.word	0xffffffff
    2254:	ffffffff 	.word	0xffffffff
    2258:	ffffffff 	.word	0xffffffff
    225c:	ffffffff 	.word	0xffffffff
    2260:	ffffffff 	.word	0xffffffff
    2264:	ffffffff 	.word	0xffffffff
    2268:	ffffffff 	.word	0xffffffff
    226c:	ffffffff 	.word	0xffffffff
    2270:	ffffffff 	.word	0xffffffff
    2274:	ffffffff 	.word	0xffffffff
    2278:	ffffffff 	.word	0xffffffff
    227c:	ffffffff 	.word	0xffffffff
    2280:	ffffffff 	.word	0xffffffff
    2284:	ffffffff 	.word	0xffffffff
    2288:	ffffffff 	.word	0xffffffff
    228c:	ffffffff 	.word	0xffffffff
    2290:	ffffffff 	.word	0xffffffff
    2294:	ffffffff 	.word	0xffffffff
    2298:	ffffffff 	.word	0xffffffff
    229c:	ffffffff 	.word	0xffffffff
    22a0:	ffffffff 	.word	0xffffffff
    22a4:	ffffffff 	.word	0xffffffff
    22a8:	ffffffff 	.word	0xffffffff
    22ac:	ffffffff 	.word	0xffffffff
    22b0:	ffffffff 	.word	0xffffffff
    22b4:	ffffffff 	.word	0xffffffff
    22b8:	ffffffff 	.word	0xffffffff
    22bc:	ffffffff 	.word	0xffffffff
    22c0:	ffffffff 	.word	0xffffffff
    22c4:	ffffffff 	.word	0xffffffff
    22c8:	ffffffff 	.word	0xffffffff
    22cc:	ffffffff 	.word	0xffffffff
    22d0:	ffffffff 	.word	0xffffffff
    22d4:	ffffffff 	.word	0xffffffff
    22d8:	ffffffff 	.word	0xffffffff
    22dc:	ffffffff 	.word	0xffffffff
    22e0:	ffffffff 	.word	0xffffffff
    22e4:	ffffffff 	.word	0xffffffff
    22e8:	ffffffff 	.word	0xffffffff
    22ec:	ffffffff 	.word	0xffffffff
    22f0:	ffffffff 	.word	0xffffffff
    22f4:	ffffffff 	.word	0xffffffff
    22f8:	ffffffff 	.word	0xffffffff
    22fc:	ffffffff 	.word	0xffffffff
    2300:	ffffffff 	.word	0xffffffff
    2304:	ffffffff 	.word	0xffffffff
    2308:	ffffffff 	.word	0xffffffff
    230c:	ffffffff 	.word	0xffffffff
    2310:	ffffffff 	.word	0xffffffff
    2314:	ffffffff 	.word	0xffffffff
    2318:	ffffffff 	.word	0xffffffff
    231c:	ffffffff 	.word	0xffffffff
    2320:	ffffffff 	.word	0xffffffff
    2324:	ffffffff 	.word	0xffffffff
    2328:	ffffffff 	.word	0xffffffff
    232c:	ffffffff 	.word	0xffffffff
    2330:	ffffffff 	.word	0xffffffff
    2334:	ffffffff 	.word	0xffffffff
    2338:	ffffffff 	.word	0xffffffff
    233c:	ffffffff 	.word	0xffffffff
    2340:	ffffffff 	.word	0xffffffff
    2344:	ffffffff 	.word	0xffffffff
    2348:	ffffffff 	.word	0xffffffff
    234c:	ffffffff 	.word	0xffffffff
    2350:	ffffffff 	.word	0xffffffff
    2354:	ffffffff 	.word	0xffffffff
    2358:	ffffffff 	.word	0xffffffff
    235c:	ffffffff 	.word	0xffffffff
    2360:	ffffffff 	.word	0xffffffff
    2364:	ffffffff 	.word	0xffffffff
    2368:	ffffffff 	.word	0xffffffff
    236c:	ffffffff 	.word	0xffffffff
    2370:	ffffffff 	.word	0xffffffff
    2374:	ffffffff 	.word	0xffffffff
    2378:	ffffffff 	.word	0xffffffff
    237c:	ffffffff 	.word	0xffffffff
    2380:	ffffffff 	.word	0xffffffff
    2384:	ffffffff 	.word	0xffffffff
    2388:	ffffffff 	.word	0xffffffff
    238c:	ffffffff 	.word	0xffffffff
    2390:	ffffffff 	.word	0xffffffff
    2394:	ffffffff 	.word	0xffffffff
    2398:	ffffffff 	.word	0xffffffff
    239c:	ffffffff 	.word	0xffffffff
    23a0:	ffffffff 	.word	0xffffffff
    23a4:	ffffffff 	.word	0xffffffff
    23a8:	ffffffff 	.word	0xffffffff
    23ac:	ffffffff 	.word	0xffffffff
    23b0:	ffffffff 	.word	0xffffffff
    23b4:	ffffffff 	.word	0xffffffff
    23b8:	ffffffff 	.word	0xffffffff
    23bc:	ffffffff 	.word	0xffffffff
    23c0:	ffffffff 	.word	0xffffffff
    23c4:	ffffffff 	.word	0xffffffff
    23c8:	ffffffff 	.word	0xffffffff
    23cc:	ffffffff 	.word	0xffffffff
    23d0:	ffffffff 	.word	0xffffffff
    23d4:	ffffffff 	.word	0xffffffff
    23d8:	ffffffff 	.word	0xffffffff
    23dc:	ffffffff 	.word	0xffffffff
    23e0:	ffffffff 	.word	0xffffffff
    23e4:	ffffffff 	.word	0xffffffff
    23e8:	ffffffff 	.word	0xffffffff
    23ec:	ffffffff 	.word	0xffffffff
    23f0:	ffffffff 	.word	0xffffffff
    23f4:	ffffffff 	.word	0xffffffff
    23f8:	ffffffff 	.word	0xffffffff
    23fc:	ffffffff 	.word	0xffffffff
    2400:	ffffffff 	.word	0xffffffff
    2404:	ffffffff 	.word	0xffffffff
    2408:	ffffffff 	.word	0xffffffff
    240c:	ffffffff 	.word	0xffffffff
    2410:	ffffffff 	.word	0xffffffff
    2414:	ffffffff 	.word	0xffffffff
    2418:	ffffffff 	.word	0xffffffff
    241c:	ffffffff 	.word	0xffffffff
    2420:	ffffffff 	.word	0xffffffff
    2424:	ffffffff 	.word	0xffffffff
    2428:	ffffffff 	.word	0xffffffff
    242c:	ffffffff 	.word	0xffffffff
    2430:	ffffffff 	.word	0xffffffff
    2434:	ffffffff 	.word	0xffffffff
    2438:	ffffffff 	.word	0xffffffff
    243c:	ffffffff 	.word	0xffffffff
    2440:	ffffffff 	.word	0xffffffff
    2444:	ffffffff 	.word	0xffffffff
    2448:	ffffffff 	.word	0xffffffff
    244c:	ffffffff 	.word	0xffffffff
    2450:	ffffffff 	.word	0xffffffff
    2454:	ffffffff 	.word	0xffffffff
    2458:	ffffffff 	.word	0xffffffff
    245c:	ffffffff 	.word	0xffffffff
    2460:	ffffffff 	.word	0xffffffff
    2464:	ffffffff 	.word	0xffffffff
    2468:	ffffffff 	.word	0xffffffff
    246c:	ffffffff 	.word	0xffffffff
    2470:	ffffffff 	.word	0xffffffff
    2474:	ffffffff 	.word	0xffffffff
    2478:	ffffffff 	.word	0xffffffff
    247c:	ffffffff 	.word	0xffffffff
    2480:	ffffffff 	.word	0xffffffff
    2484:	ffffffff 	.word	0xffffffff
    2488:	ffffffff 	.word	0xffffffff
    248c:	ffffffff 	.word	0xffffffff
    2490:	ffffffff 	.word	0xffffffff
    2494:	ffffffff 	.word	0xffffffff
    2498:	ffffffff 	.word	0xffffffff
    249c:	ffffffff 	.word	0xffffffff
    24a0:	ffffffff 	.word	0xffffffff
    24a4:	ffffffff 	.word	0xffffffff
    24a8:	ffffffff 	.word	0xffffffff
    24ac:	ffffffff 	.word	0xffffffff
    24b0:	ffffffff 	.word	0xffffffff
    24b4:	ffffffff 	.word	0xffffffff
    24b8:	ffffffff 	.word	0xffffffff
    24bc:	ffffffff 	.word	0xffffffff
    24c0:	ffffffff 	.word	0xffffffff
    24c4:	ffffffff 	.word	0xffffffff
    24c8:	ffffffff 	.word	0xffffffff
    24cc:	ffffffff 	.word	0xffffffff
    24d0:	ffffffff 	.word	0xffffffff
    24d4:	ffffffff 	.word	0xffffffff
    24d8:	ffffffff 	.word	0xffffffff
    24dc:	ffffffff 	.word	0xffffffff
    24e0:	ffffffff 	.word	0xffffffff
    24e4:	ffffffff 	.word	0xffffffff
    24e8:	ffffffff 	.word	0xffffffff
    24ec:	ffffffff 	.word	0xffffffff
    24f0:	ffffffff 	.word	0xffffffff
    24f4:	ffffffff 	.word	0xffffffff
    24f8:	ffffffff 	.word	0xffffffff
    24fc:	ffffffff 	.word	0xffffffff
    2500:	ffffffff 	.word	0xffffffff
    2504:	ffffffff 	.word	0xffffffff
    2508:	ffffffff 	.word	0xffffffff
    250c:	ffffffff 	.word	0xffffffff
    2510:	ffffffff 	.word	0xffffffff
    2514:	ffffffff 	.word	0xffffffff
    2518:	ffffffff 	.word	0xffffffff
    251c:	ffffffff 	.word	0xffffffff
    2520:	ffffffff 	.word	0xffffffff
    2524:	ffffffff 	.word	0xffffffff
    2528:	ffffffff 	.word	0xffffffff
    252c:	ffffffff 	.word	0xffffffff
    2530:	ffffffff 	.word	0xffffffff
    2534:	ffffffff 	.word	0xffffffff
    2538:	ffffffff 	.word	0xffffffff
    253c:	ffffffff 	.word	0xffffffff
    2540:	ffffffff 	.word	0xffffffff
    2544:	ffffffff 	.word	0xffffffff
    2548:	ffffffff 	.word	0xffffffff
    254c:	ffffffff 	.word	0xffffffff
    2550:	ffffffff 	.word	0xffffffff
    2554:	ffffffff 	.word	0xffffffff
    2558:	ffffffff 	.word	0xffffffff
    255c:	ffffffff 	.word	0xffffffff
    2560:	ffffffff 	.word	0xffffffff
    2564:	ffffffff 	.word	0xffffffff
    2568:	ffffffff 	.word	0xffffffff
    256c:	ffffffff 	.word	0xffffffff
    2570:	ffffffff 	.word	0xffffffff
    2574:	ffffffff 	.word	0xffffffff
    2578:	ffffffff 	.word	0xffffffff
    257c:	ffffffff 	.word	0xffffffff
    2580:	ffffffff 	.word	0xffffffff
    2584:	ffffffff 	.word	0xffffffff
    2588:	ffffffff 	.word	0xffffffff
    258c:	ffffffff 	.word	0xffffffff
    2590:	ffffffff 	.word	0xffffffff
    2594:	ffffffff 	.word	0xffffffff
    2598:	ffffffff 	.word	0xffffffff
    259c:	ffffffff 	.word	0xffffffff
    25a0:	ffffffff 	.word	0xffffffff
    25a4:	ffffffff 	.word	0xffffffff
    25a8:	ffffffff 	.word	0xffffffff
    25ac:	ffffffff 	.word	0xffffffff
    25b0:	ffffffff 	.word	0xffffffff
    25b4:	ffffffff 	.word	0xffffffff
    25b8:	ffffffff 	.word	0xffffffff
    25bc:	ffffffff 	.word	0xffffffff
    25c0:	ffffffff 	.word	0xffffffff
    25c4:	ffffffff 	.word	0xffffffff
    25c8:	ffffffff 	.word	0xffffffff
    25cc:	ffffffff 	.word	0xffffffff
    25d0:	ffffffff 	.word	0xffffffff
    25d4:	ffffffff 	.word	0xffffffff
    25d8:	ffffffff 	.word	0xffffffff
    25dc:	ffffffff 	.word	0xffffffff
    25e0:	ffffffff 	.word	0xffffffff
    25e4:	ffffffff 	.word	0xffffffff
    25e8:	ffffffff 	.word	0xffffffff
    25ec:	ffffffff 	.word	0xffffffff
    25f0:	ffffffff 	.word	0xffffffff
    25f4:	ffffffff 	.word	0xffffffff
    25f8:	ffffffff 	.word	0xffffffff
    25fc:	ffffffff 	.word	0xffffffff
    2600:	ffffffff 	.word	0xffffffff
    2604:	ffffffff 	.word	0xffffffff
    2608:	ffffffff 	.word	0xffffffff
    260c:	ffffffff 	.word	0xffffffff
    2610:	ffffffff 	.word	0xffffffff
    2614:	ffffffff 	.word	0xffffffff
    2618:	ffffffff 	.word	0xffffffff
    261c:	ffffffff 	.word	0xffffffff
    2620:	ffffffff 	.word	0xffffffff
    2624:	ffffffff 	.word	0xffffffff
    2628:	ffffffff 	.word	0xffffffff
    262c:	ffffffff 	.word	0xffffffff
    2630:	ffffffff 	.word	0xffffffff
    2634:	ffffffff 	.word	0xffffffff
    2638:	ffffffff 	.word	0xffffffff
    263c:	ffffffff 	.word	0xffffffff
    2640:	ffffffff 	.word	0xffffffff
    2644:	ffffffff 	.word	0xffffffff
    2648:	ffffffff 	.word	0xffffffff
    264c:	ffffffff 	.word	0xffffffff
    2650:	ffffffff 	.word	0xffffffff
    2654:	ffffffff 	.word	0xffffffff
    2658:	ffffffff 	.word	0xffffffff
    265c:	ffffffff 	.word	0xffffffff
    2660:	ffffffff 	.word	0xffffffff
    2664:	ffffffff 	.word	0xffffffff
    2668:	ffffffff 	.word	0xffffffff
    266c:	ffffffff 	.word	0xffffffff
    2670:	ffffffff 	.word	0xffffffff
    2674:	ffffffff 	.word	0xffffffff
    2678:	ffffffff 	.word	0xffffffff
    267c:	ffffffff 	.word	0xffffffff
    2680:	ffffffff 	.word	0xffffffff
    2684:	ffffffff 	.word	0xffffffff
    2688:	ffffffff 	.word	0xffffffff
    268c:	ffffffff 	.word	0xffffffff
    2690:	ffffffff 	.word	0xffffffff
    2694:	ffffffff 	.word	0xffffffff
    2698:	ffffffff 	.word	0xffffffff
    269c:	ffffffff 	.word	0xffffffff
    26a0:	ffffffff 	.word	0xffffffff
    26a4:	ffffffff 	.word	0xffffffff
    26a8:	ffffffff 	.word	0xffffffff
    26ac:	ffffffff 	.word	0xffffffff
    26b0:	ffffffff 	.word	0xffffffff
    26b4:	ffffffff 	.word	0xffffffff
    26b8:	ffffffff 	.word	0xffffffff
    26bc:	ffffffff 	.word	0xffffffff
    26c0:	ffffffff 	.word	0xffffffff
    26c4:	ffffffff 	.word	0xffffffff
    26c8:	ffffffff 	.word	0xffffffff
    26cc:	ffffffff 	.word	0xffffffff
    26d0:	ffffffff 	.word	0xffffffff
    26d4:	ffffffff 	.word	0xffffffff
    26d8:	ffffffff 	.word	0xffffffff
    26dc:	ffffffff 	.word	0xffffffff
    26e0:	ffffffff 	.word	0xffffffff
    26e4:	ffffffff 	.word	0xffffffff
    26e8:	ffffffff 	.word	0xffffffff
    26ec:	ffffffff 	.word	0xffffffff
    26f0:	ffffffff 	.word	0xffffffff
    26f4:	ffffffff 	.word	0xffffffff
    26f8:	ffffffff 	.word	0xffffffff
    26fc:	ffffffff 	.word	0xffffffff
    2700:	ffffffff 	.word	0xffffffff
    2704:	ffffffff 	.word	0xffffffff
    2708:	ffffffff 	.word	0xffffffff
    270c:	ffffffff 	.word	0xffffffff
    2710:	ffffffff 	.word	0xffffffff
    2714:	ffffffff 	.word	0xffffffff
    2718:	ffffffff 	.word	0xffffffff
    271c:	ffffffff 	.word	0xffffffff
    2720:	ffffffff 	.word	0xffffffff
    2724:	ffffffff 	.word	0xffffffff
    2728:	ffffffff 	.word	0xffffffff
    272c:	ffffffff 	.word	0xffffffff
    2730:	ffffffff 	.word	0xffffffff
    2734:	ffffffff 	.word	0xffffffff
    2738:	ffffffff 	.word	0xffffffff
    273c:	ffffffff 	.word	0xffffffff
    2740:	ffffffff 	.word	0xffffffff
    2744:	ffffffff 	.word	0xffffffff
    2748:	ffffffff 	.word	0xffffffff
    274c:	ffffffff 	.word	0xffffffff
    2750:	ffffffff 	.word	0xffffffff
    2754:	ffffffff 	.word	0xffffffff
    2758:	ffffffff 	.word	0xffffffff
    275c:	ffffffff 	.word	0xffffffff
    2760:	ffffffff 	.word	0xffffffff
    2764:	ffffffff 	.word	0xffffffff
    2768:	ffffffff 	.word	0xffffffff
    276c:	ffffffff 	.word	0xffffffff
    2770:	ffffffff 	.word	0xffffffff
    2774:	ffffffff 	.word	0xffffffff
    2778:	ffffffff 	.word	0xffffffff
    277c:	ffffffff 	.word	0xffffffff
    2780:	ffffffff 	.word	0xffffffff
    2784:	ffffffff 	.word	0xffffffff
    2788:	ffffffff 	.word	0xffffffff
    278c:	ffffffff 	.word	0xffffffff
    2790:	ffffffff 	.word	0xffffffff
    2794:	ffffffff 	.word	0xffffffff
    2798:	ffffffff 	.word	0xffffffff
    279c:	ffffffff 	.word	0xffffffff
    27a0:	ffffffff 	.word	0xffffffff
    27a4:	ffffffff 	.word	0xffffffff
    27a8:	ffffffff 	.word	0xffffffff
    27ac:	ffffffff 	.word	0xffffffff
    27b0:	ffffffff 	.word	0xffffffff
    27b4:	ffffffff 	.word	0xffffffff
    27b8:	ffffffff 	.word	0xffffffff
    27bc:	ffffffff 	.word	0xffffffff
    27c0:	ffffffff 	.word	0xffffffff
    27c4:	ffffffff 	.word	0xffffffff
    27c8:	ffffffff 	.word	0xffffffff
    27cc:	ffffffff 	.word	0xffffffff
    27d0:	ffffffff 	.word	0xffffffff
    27d4:	ffffffff 	.word	0xffffffff
    27d8:	ffffffff 	.word	0xffffffff
    27dc:	ffffffff 	.word	0xffffffff
    27e0:	ffffffff 	.word	0xffffffff
    27e4:	ffffffff 	.word	0xffffffff
    27e8:	ffffffff 	.word	0xffffffff
    27ec:	ffffffff 	.word	0xffffffff
    27f0:	ffffffff 	.word	0xffffffff
    27f4:	ffffffff 	.word	0xffffffff
    27f8:	ffffffff 	.word	0xffffffff
    27fc:	ffffffff 	.word	0xffffffff
    2800:	ffffffff 	.word	0xffffffff
    2804:	ffffffff 	.word	0xffffffff
    2808:	ffffffff 	.word	0xffffffff
    280c:	ffffffff 	.word	0xffffffff
    2810:	ffffffff 	.word	0xffffffff
    2814:	ffffffff 	.word	0xffffffff
    2818:	ffffffff 	.word	0xffffffff
    281c:	ffffffff 	.word	0xffffffff
    2820:	ffffffff 	.word	0xffffffff
    2824:	ffffffff 	.word	0xffffffff
    2828:	ffffffff 	.word	0xffffffff
    282c:	ffffffff 	.word	0xffffffff
    2830:	ffffffff 	.word	0xffffffff
    2834:	ffffffff 	.word	0xffffffff
    2838:	ffffffff 	.word	0xffffffff
    283c:	ffffffff 	.word	0xffffffff
    2840:	ffffffff 	.word	0xffffffff
    2844:	ffffffff 	.word	0xffffffff
    2848:	ffffffff 	.word	0xffffffff
    284c:	ffffffff 	.word	0xffffffff
    2850:	ffffffff 	.word	0xffffffff
    2854:	ffffffff 	.word	0xffffffff
    2858:	ffffffff 	.word	0xffffffff
    285c:	ffffffff 	.word	0xffffffff
    2860:	ffffffff 	.word	0xffffffff
    2864:	ffffffff 	.word	0xffffffff
    2868:	ffffffff 	.word	0xffffffff
    286c:	ffffffff 	.word	0xffffffff
    2870:	ffffffff 	.word	0xffffffff
    2874:	ffffffff 	.word	0xffffffff
    2878:	ffffffff 	.word	0xffffffff
    287c:	ffffffff 	.word	0xffffffff
    2880:	ffffffff 	.word	0xffffffff
    2884:	ffffffff 	.word	0xffffffff
    2888:	ffffffff 	.word	0xffffffff
    288c:	ffffffff 	.word	0xffffffff
    2890:	ffffffff 	.word	0xffffffff
    2894:	ffffffff 	.word	0xffffffff
    2898:	ffffffff 	.word	0xffffffff
    289c:	ffffffff 	.word	0xffffffff
    28a0:	ffffffff 	.word	0xffffffff
    28a4:	ffffffff 	.word	0xffffffff
    28a8:	ffffffff 	.word	0xffffffff
    28ac:	ffffffff 	.word	0xffffffff
    28b0:	ffffffff 	.word	0xffffffff
    28b4:	ffffffff 	.word	0xffffffff
    28b8:	ffffffff 	.word	0xffffffff
    28bc:	ffffffff 	.word	0xffffffff
    28c0:	ffffffff 	.word	0xffffffff
    28c4:	ffffffff 	.word	0xffffffff
    28c8:	ffffffff 	.word	0xffffffff
    28cc:	ffffffff 	.word	0xffffffff
    28d0:	ffffffff 	.word	0xffffffff
    28d4:	ffffffff 	.word	0xffffffff
    28d8:	ffffffff 	.word	0xffffffff
    28dc:	ffffffff 	.word	0xffffffff
    28e0:	ffffffff 	.word	0xffffffff
    28e4:	ffffffff 	.word	0xffffffff
    28e8:	ffffffff 	.word	0xffffffff
    28ec:	ffffffff 	.word	0xffffffff
    28f0:	ffffffff 	.word	0xffffffff
    28f4:	ffffffff 	.word	0xffffffff
    28f8:	ffffffff 	.word	0xffffffff
    28fc:	ffffffff 	.word	0xffffffff
    2900:	ffffffff 	.word	0xffffffff
    2904:	ffffffff 	.word	0xffffffff
    2908:	ffffffff 	.word	0xffffffff
    290c:	ffffffff 	.word	0xffffffff
    2910:	ffffffff 	.word	0xffffffff
    2914:	ffffffff 	.word	0xffffffff
    2918:	ffffffff 	.word	0xffffffff
    291c:	ffffffff 	.word	0xffffffff
    2920:	ffffffff 	.word	0xffffffff
    2924:	ffffffff 	.word	0xffffffff
    2928:	ffffffff 	.word	0xffffffff
    292c:	ffffffff 	.word	0xffffffff
    2930:	ffffffff 	.word	0xffffffff
    2934:	ffffffff 	.word	0xffffffff
    2938:	ffffffff 	.word	0xffffffff
    293c:	ffffffff 	.word	0xffffffff
    2940:	ffffffff 	.word	0xffffffff
    2944:	ffffffff 	.word	0xffffffff
    2948:	ffffffff 	.word	0xffffffff
    294c:	ffffffff 	.word	0xffffffff
    2950:	ffffffff 	.word	0xffffffff
    2954:	ffffffff 	.word	0xffffffff
    2958:	ffffffff 	.word	0xffffffff
    295c:	ffffffff 	.word	0xffffffff
    2960:	ffffffff 	.word	0xffffffff
    2964:	ffffffff 	.word	0xffffffff
    2968:	ffffffff 	.word	0xffffffff
    296c:	ffffffff 	.word	0xffffffff
    2970:	ffffffff 	.word	0xffffffff
    2974:	ffffffff 	.word	0xffffffff
    2978:	ffffffff 	.word	0xffffffff
    297c:	ffffffff 	.word	0xffffffff
    2980:	ffffffff 	.word	0xffffffff
    2984:	ffffffff 	.word	0xffffffff
    2988:	ffffffff 	.word	0xffffffff
    298c:	ffffffff 	.word	0xffffffff
    2990:	ffffffff 	.word	0xffffffff
    2994:	ffffffff 	.word	0xffffffff
    2998:	ffffffff 	.word	0xffffffff
    299c:	ffffffff 	.word	0xffffffff
    29a0:	ffffffff 	.word	0xffffffff
    29a4:	ffffffff 	.word	0xffffffff
    29a8:	ffffffff 	.word	0xffffffff
    29ac:	ffffffff 	.word	0xffffffff
    29b0:	ffffffff 	.word	0xffffffff
    29b4:	ffffffff 	.word	0xffffffff
    29b8:	ffffffff 	.word	0xffffffff
    29bc:	ffffffff 	.word	0xffffffff
    29c0:	ffffffff 	.word	0xffffffff
    29c4:	ffffffff 	.word	0xffffffff
    29c8:	ffffffff 	.word	0xffffffff
    29cc:	ffffffff 	.word	0xffffffff
    29d0:	ffffffff 	.word	0xffffffff
    29d4:	ffffffff 	.word	0xffffffff
    29d8:	ffffffff 	.word	0xffffffff
    29dc:	ffffffff 	.word	0xffffffff
    29e0:	ffffffff 	.word	0xffffffff
    29e4:	ffffffff 	.word	0xffffffff
    29e8:	ffffffff 	.word	0xffffffff
    29ec:	ffffffff 	.word	0xffffffff
    29f0:	ffffffff 	.word	0xffffffff
    29f4:	ffffffff 	.word	0xffffffff
    29f8:	ffffffff 	.word	0xffffffff
    29fc:	ffffffff 	.word	0xffffffff
    2a00:	ffffffff 	.word	0xffffffff
    2a04:	ffffffff 	.word	0xffffffff
    2a08:	ffffffff 	.word	0xffffffff
    2a0c:	ffffffff 	.word	0xffffffff
    2a10:	ffffffff 	.word	0xffffffff
    2a14:	ffffffff 	.word	0xffffffff
    2a18:	ffffffff 	.word	0xffffffff
    2a1c:	ffffffff 	.word	0xffffffff
    2a20:	ffffffff 	.word	0xffffffff
    2a24:	ffffffff 	.word	0xffffffff
    2a28:	ffffffff 	.word	0xffffffff
    2a2c:	ffffffff 	.word	0xffffffff
    2a30:	ffffffff 	.word	0xffffffff
    2a34:	ffffffff 	.word	0xffffffff
    2a38:	ffffffff 	.word	0xffffffff
    2a3c:	ffffffff 	.word	0xffffffff
    2a40:	ffffffff 	.word	0xffffffff
    2a44:	ffffffff 	.word	0xffffffff
    2a48:	ffffffff 	.word	0xffffffff
    2a4c:	ffffffff 	.word	0xffffffff
    2a50:	ffffffff 	.word	0xffffffff
    2a54:	ffffffff 	.word	0xffffffff
    2a58:	ffffffff 	.word	0xffffffff
    2a5c:	ffffffff 	.word	0xffffffff
    2a60:	ffffffff 	.word	0xffffffff
    2a64:	ffffffff 	.word	0xffffffff
    2a68:	ffffffff 	.word	0xffffffff
    2a6c:	ffffffff 	.word	0xffffffff
    2a70:	ffffffff 	.word	0xffffffff
    2a74:	ffffffff 	.word	0xffffffff
    2a78:	ffffffff 	.word	0xffffffff
    2a7c:	ffffffff 	.word	0xffffffff
    2a80:	ffffffff 	.word	0xffffffff
    2a84:	ffffffff 	.word	0xffffffff
    2a88:	ffffffff 	.word	0xffffffff
    2a8c:	ffffffff 	.word	0xffffffff
    2a90:	ffffffff 	.word	0xffffffff
    2a94:	ffffffff 	.word	0xffffffff
    2a98:	ffffffff 	.word	0xffffffff
    2a9c:	ffffffff 	.word	0xffffffff
    2aa0:	ffffffff 	.word	0xffffffff
    2aa4:	ffffffff 	.word	0xffffffff
    2aa8:	ffffffff 	.word	0xffffffff
    2aac:	ffffffff 	.word	0xffffffff
    2ab0:	ffffffff 	.word	0xffffffff
    2ab4:	ffffffff 	.word	0xffffffff
    2ab8:	ffffffff 	.word	0xffffffff
    2abc:	ffffffff 	.word	0xffffffff
    2ac0:	ffffffff 	.word	0xffffffff
    2ac4:	ffffffff 	.word	0xffffffff
    2ac8:	ffffffff 	.word	0xffffffff
    2acc:	ffffffff 	.word	0xffffffff
    2ad0:	ffffffff 	.word	0xffffffff
    2ad4:	ffffffff 	.word	0xffffffff
    2ad8:	ffffffff 	.word	0xffffffff
    2adc:	ffffffff 	.word	0xffffffff
    2ae0:	ffffffff 	.word	0xffffffff
    2ae4:	ffffffff 	.word	0xffffffff
    2ae8:	ffffffff 	.word	0xffffffff
    2aec:	ffffffff 	.word	0xffffffff
    2af0:	ffffffff 	.word	0xffffffff
    2af4:	ffffffff 	.word	0xffffffff
    2af8:	ffffffff 	.word	0xffffffff
    2afc:	ffffffff 	.word	0xffffffff
    2b00:	ffffffff 	.word	0xffffffff
    2b04:	ffffffff 	.word	0xffffffff
    2b08:	ffffffff 	.word	0xffffffff
    2b0c:	ffffffff 	.word	0xffffffff
    2b10:	ffffffff 	.word	0xffffffff
    2b14:	ffffffff 	.word	0xffffffff
    2b18:	ffffffff 	.word	0xffffffff
    2b1c:	ffffffff 	.word	0xffffffff
    2b20:	ffffffff 	.word	0xffffffff
    2b24:	ffffffff 	.word	0xffffffff
    2b28:	ffffffff 	.word	0xffffffff
    2b2c:	ffffffff 	.word	0xffffffff
    2b30:	ffffffff 	.word	0xffffffff
    2b34:	ffffffff 	.word	0xffffffff
    2b38:	ffffffff 	.word	0xffffffff
    2b3c:	ffffffff 	.word	0xffffffff
    2b40:	ffffffff 	.word	0xffffffff
    2b44:	ffffffff 	.word	0xffffffff
    2b48:	ffffffff 	.word	0xffffffff
    2b4c:	ffffffff 	.word	0xffffffff
    2b50:	ffffffff 	.word	0xffffffff
    2b54:	ffffffff 	.word	0xffffffff
    2b58:	ffffffff 	.word	0xffffffff
    2b5c:	ffffffff 	.word	0xffffffff
    2b60:	ffffffff 	.word	0xffffffff
    2b64:	ffffffff 	.word	0xffffffff
    2b68:	ffffffff 	.word	0xffffffff
    2b6c:	ffffffff 	.word	0xffffffff
    2b70:	ffffffff 	.word	0xffffffff
    2b74:	ffffffff 	.word	0xffffffff
    2b78:	ffffffff 	.word	0xffffffff
    2b7c:	ffffffff 	.word	0xffffffff
    2b80:	ffffffff 	.word	0xffffffff
    2b84:	ffffffff 	.word	0xffffffff
    2b88:	ffffffff 	.word	0xffffffff
    2b8c:	ffffffff 	.word	0xffffffff
    2b90:	ffffffff 	.word	0xffffffff
    2b94:	ffffffff 	.word	0xffffffff
    2b98:	ffffffff 	.word	0xffffffff
    2b9c:	ffffffff 	.word	0xffffffff
    2ba0:	ffffffff 	.word	0xffffffff
    2ba4:	ffffffff 	.word	0xffffffff
    2ba8:	ffffffff 	.word	0xffffffff
    2bac:	ffffffff 	.word	0xffffffff
    2bb0:	ffffffff 	.word	0xffffffff
    2bb4:	ffffffff 	.word	0xffffffff
    2bb8:	ffffffff 	.word	0xffffffff
    2bbc:	ffffffff 	.word	0xffffffff
    2bc0:	ffffffff 	.word	0xffffffff
    2bc4:	ffffffff 	.word	0xffffffff
    2bc8:	ffffffff 	.word	0xffffffff
    2bcc:	ffffffff 	.word	0xffffffff
    2bd0:	ffffffff 	.word	0xffffffff
    2bd4:	ffffffff 	.word	0xffffffff
    2bd8:	ffffffff 	.word	0xffffffff
    2bdc:	ffffffff 	.word	0xffffffff
    2be0:	ffffffff 	.word	0xffffffff
    2be4:	ffffffff 	.word	0xffffffff
    2be8:	ffffffff 	.word	0xffffffff
    2bec:	ffffffff 	.word	0xffffffff
    2bf0:	ffffffff 	.word	0xffffffff
    2bf4:	ffffffff 	.word	0xffffffff
    2bf8:	ffffffff 	.word	0xffffffff
    2bfc:	ffffffff 	.word	0xffffffff
    2c00:	ffffffff 	.word	0xffffffff
    2c04:	ffffffff 	.word	0xffffffff
    2c08:	ffffffff 	.word	0xffffffff
    2c0c:	ffffffff 	.word	0xffffffff
    2c10:	ffffffff 	.word	0xffffffff
    2c14:	ffffffff 	.word	0xffffffff
    2c18:	ffffffff 	.word	0xffffffff
    2c1c:	ffffffff 	.word	0xffffffff
    2c20:	ffffffff 	.word	0xffffffff
    2c24:	ffffffff 	.word	0xffffffff
    2c28:	ffffffff 	.word	0xffffffff
    2c2c:	ffffffff 	.word	0xffffffff
    2c30:	ffffffff 	.word	0xffffffff
    2c34:	ffffffff 	.word	0xffffffff
    2c38:	ffffffff 	.word	0xffffffff
    2c3c:	ffffffff 	.word	0xffffffff
    2c40:	ffffffff 	.word	0xffffffff
    2c44:	ffffffff 	.word	0xffffffff
    2c48:	ffffffff 	.word	0xffffffff
    2c4c:	ffffffff 	.word	0xffffffff
    2c50:	ffffffff 	.word	0xffffffff
    2c54:	ffffffff 	.word	0xffffffff
    2c58:	ffffffff 	.word	0xffffffff
    2c5c:	ffffffff 	.word	0xffffffff
    2c60:	ffffffff 	.word	0xffffffff
    2c64:	ffffffff 	.word	0xffffffff
    2c68:	ffffffff 	.word	0xffffffff
    2c6c:	ffffffff 	.word	0xffffffff
    2c70:	ffffffff 	.word	0xffffffff
    2c74:	ffffffff 	.word	0xffffffff
    2c78:	ffffffff 	.word	0xffffffff
    2c7c:	ffffffff 	.word	0xffffffff
    2c80:	ffffffff 	.word	0xffffffff
    2c84:	ffffffff 	.word	0xffffffff
    2c88:	ffffffff 	.word	0xffffffff
    2c8c:	ffffffff 	.word	0xffffffff
    2c90:	ffffffff 	.word	0xffffffff
    2c94:	ffffffff 	.word	0xffffffff
    2c98:	ffffffff 	.word	0xffffffff
    2c9c:	ffffffff 	.word	0xffffffff
    2ca0:	ffffffff 	.word	0xffffffff
    2ca4:	ffffffff 	.word	0xffffffff
    2ca8:	ffffffff 	.word	0xffffffff
    2cac:	ffffffff 	.word	0xffffffff
    2cb0:	ffffffff 	.word	0xffffffff
    2cb4:	ffffffff 	.word	0xffffffff
    2cb8:	ffffffff 	.word	0xffffffff
    2cbc:	ffffffff 	.word	0xffffffff
    2cc0:	ffffffff 	.word	0xffffffff
    2cc4:	ffffffff 	.word	0xffffffff
    2cc8:	ffffffff 	.word	0xffffffff
    2ccc:	ffffffff 	.word	0xffffffff
    2cd0:	ffffffff 	.word	0xffffffff
    2cd4:	ffffffff 	.word	0xffffffff
    2cd8:	ffffffff 	.word	0xffffffff
    2cdc:	ffffffff 	.word	0xffffffff
    2ce0:	ffffffff 	.word	0xffffffff
    2ce4:	ffffffff 	.word	0xffffffff
    2ce8:	ffffffff 	.word	0xffffffff
    2cec:	ffffffff 	.word	0xffffffff
    2cf0:	ffffffff 	.word	0xffffffff
    2cf4:	ffffffff 	.word	0xffffffff
    2cf8:	ffffffff 	.word	0xffffffff
    2cfc:	ffffffff 	.word	0xffffffff
    2d00:	ffffffff 	.word	0xffffffff
    2d04:	ffffffff 	.word	0xffffffff
    2d08:	ffffffff 	.word	0xffffffff
    2d0c:	ffffffff 	.word	0xffffffff
    2d10:	ffffffff 	.word	0xffffffff
    2d14:	ffffffff 	.word	0xffffffff
    2d18:	ffffffff 	.word	0xffffffff
    2d1c:	ffffffff 	.word	0xffffffff
    2d20:	ffffffff 	.word	0xffffffff
    2d24:	ffffffff 	.word	0xffffffff
    2d28:	ffffffff 	.word	0xffffffff
    2d2c:	ffffffff 	.word	0xffffffff
    2d30:	ffffffff 	.word	0xffffffff
    2d34:	ffffffff 	.word	0xffffffff
    2d38:	ffffffff 	.word	0xffffffff
    2d3c:	ffffffff 	.word	0xffffffff
    2d40:	ffffffff 	.word	0xffffffff
    2d44:	ffffffff 	.word	0xffffffff
    2d48:	ffffffff 	.word	0xffffffff
    2d4c:	ffffffff 	.word	0xffffffff
    2d50:	ffffffff 	.word	0xffffffff
    2d54:	ffffffff 	.word	0xffffffff
    2d58:	ffffffff 	.word	0xffffffff
    2d5c:	ffffffff 	.word	0xffffffff
    2d60:	ffffffff 	.word	0xffffffff
    2d64:	ffffffff 	.word	0xffffffff
    2d68:	ffffffff 	.word	0xffffffff
    2d6c:	ffffffff 	.word	0xffffffff
    2d70:	ffffffff 	.word	0xffffffff
    2d74:	ffffffff 	.word	0xffffffff
    2d78:	ffffffff 	.word	0xffffffff
    2d7c:	ffffffff 	.word	0xffffffff
    2d80:	ffffffff 	.word	0xffffffff
    2d84:	ffffffff 	.word	0xffffffff
    2d88:	ffffffff 	.word	0xffffffff
    2d8c:	ffffffff 	.word	0xffffffff
    2d90:	ffffffff 	.word	0xffffffff
    2d94:	ffffffff 	.word	0xffffffff
    2d98:	ffffffff 	.word	0xffffffff
    2d9c:	ffffffff 	.word	0xffffffff
    2da0:	ffffffff 	.word	0xffffffff
    2da4:	ffffffff 	.word	0xffffffff
    2da8:	ffffffff 	.word	0xffffffff
    2dac:	ffffffff 	.word	0xffffffff
    2db0:	ffffffff 	.word	0xffffffff
    2db4:	ffffffff 	.word	0xffffffff
    2db8:	ffffffff 	.word	0xffffffff
    2dbc:	ffffffff 	.word	0xffffffff
    2dc0:	ffffffff 	.word	0xffffffff
    2dc4:	ffffffff 	.word	0xffffffff
    2dc8:	ffffffff 	.word	0xffffffff
    2dcc:	ffffffff 	.word	0xffffffff
    2dd0:	ffffffff 	.word	0xffffffff
    2dd4:	ffffffff 	.word	0xffffffff
    2dd8:	ffffffff 	.word	0xffffffff
    2ddc:	ffffffff 	.word	0xffffffff
    2de0:	ffffffff 	.word	0xffffffff
    2de4:	ffffffff 	.word	0xffffffff
    2de8:	ffffffff 	.word	0xffffffff
    2dec:	ffffffff 	.word	0xffffffff
    2df0:	ffffffff 	.word	0xffffffff
    2df4:	ffffffff 	.word	0xffffffff
    2df8:	ffffffff 	.word	0xffffffff
    2dfc:	ffffffff 	.word	0xffffffff
    2e00:	ffffffff 	.word	0xffffffff
    2e04:	ffffffff 	.word	0xffffffff
    2e08:	ffffffff 	.word	0xffffffff
    2e0c:	ffffffff 	.word	0xffffffff
    2e10:	ffffffff 	.word	0xffffffff
    2e14:	ffffffff 	.word	0xffffffff
    2e18:	ffffffff 	.word	0xffffffff
    2e1c:	ffffffff 	.word	0xffffffff
    2e20:	ffffffff 	.word	0xffffffff
    2e24:	ffffffff 	.word	0xffffffff
    2e28:	ffffffff 	.word	0xffffffff
    2e2c:	ffffffff 	.word	0xffffffff
    2e30:	ffffffff 	.word	0xffffffff
    2e34:	ffffffff 	.word	0xffffffff
    2e38:	ffffffff 	.word	0xffffffff
    2e3c:	ffffffff 	.word	0xffffffff
    2e40:	ffffffff 	.word	0xffffffff
    2e44:	ffffffff 	.word	0xffffffff
    2e48:	ffffffff 	.word	0xffffffff
    2e4c:	ffffffff 	.word	0xffffffff
    2e50:	ffffffff 	.word	0xffffffff
    2e54:	ffffffff 	.word	0xffffffff
    2e58:	ffffffff 	.word	0xffffffff
    2e5c:	ffffffff 	.word	0xffffffff
    2e60:	ffffffff 	.word	0xffffffff
    2e64:	ffffffff 	.word	0xffffffff
    2e68:	ffffffff 	.word	0xffffffff
    2e6c:	ffffffff 	.word	0xffffffff
    2e70:	ffffffff 	.word	0xffffffff
    2e74:	ffffffff 	.word	0xffffffff
    2e78:	ffffffff 	.word	0xffffffff
    2e7c:	ffffffff 	.word	0xffffffff
    2e80:	ffffffff 	.word	0xffffffff
    2e84:	ffffffff 	.word	0xffffffff
    2e88:	ffffffff 	.word	0xffffffff
    2e8c:	ffffffff 	.word	0xffffffff
    2e90:	ffffffff 	.word	0xffffffff
    2e94:	ffffffff 	.word	0xffffffff
    2e98:	ffffffff 	.word	0xffffffff
    2e9c:	ffffffff 	.word	0xffffffff
    2ea0:	ffffffff 	.word	0xffffffff
    2ea4:	ffffffff 	.word	0xffffffff
    2ea8:	ffffffff 	.word	0xffffffff
    2eac:	ffffffff 	.word	0xffffffff
    2eb0:	ffffffff 	.word	0xffffffff
    2eb4:	ffffffff 	.word	0xffffffff
    2eb8:	ffffffff 	.word	0xffffffff
    2ebc:	ffffffff 	.word	0xffffffff
    2ec0:	ffffffff 	.word	0xffffffff
    2ec4:	ffffffff 	.word	0xffffffff
    2ec8:	ffffffff 	.word	0xffffffff
    2ecc:	ffffffff 	.word	0xffffffff
    2ed0:	ffffffff 	.word	0xffffffff
    2ed4:	ffffffff 	.word	0xffffffff
    2ed8:	ffffffff 	.word	0xffffffff
    2edc:	ffffffff 	.word	0xffffffff
    2ee0:	ffffffff 	.word	0xffffffff
    2ee4:	ffffffff 	.word	0xffffffff
    2ee8:	ffffffff 	.word	0xffffffff
    2eec:	ffffffff 	.word	0xffffffff
    2ef0:	ffffffff 	.word	0xffffffff
    2ef4:	ffffffff 	.word	0xffffffff
    2ef8:	ffffffff 	.word	0xffffffff
    2efc:	ffffffff 	.word	0xffffffff
    2f00:	ffffffff 	.word	0xffffffff
    2f04:	ffffffff 	.word	0xffffffff
    2f08:	ffffffff 	.word	0xffffffff
    2f0c:	ffffffff 	.word	0xffffffff
    2f10:	ffffffff 	.word	0xffffffff
    2f14:	ffffffff 	.word	0xffffffff
    2f18:	ffffffff 	.word	0xffffffff
    2f1c:	ffffffff 	.word	0xffffffff
    2f20:	ffffffff 	.word	0xffffffff
    2f24:	ffffffff 	.word	0xffffffff
    2f28:	ffffffff 	.word	0xffffffff
    2f2c:	ffffffff 	.word	0xffffffff
    2f30:	ffffffff 	.word	0xffffffff
    2f34:	ffffffff 	.word	0xffffffff
    2f38:	ffffffff 	.word	0xffffffff
    2f3c:	ffffffff 	.word	0xffffffff
    2f40:	ffffffff 	.word	0xffffffff
    2f44:	ffffffff 	.word	0xffffffff
    2f48:	ffffffff 	.word	0xffffffff
    2f4c:	ffffffff 	.word	0xffffffff
    2f50:	ffffffff 	.word	0xffffffff
    2f54:	ffffffff 	.word	0xffffffff
    2f58:	ffffffff 	.word	0xffffffff
    2f5c:	ffffffff 	.word	0xffffffff
    2f60:	ffffffff 	.word	0xffffffff
    2f64:	ffffffff 	.word	0xffffffff
    2f68:	ffffffff 	.word	0xffffffff
    2f6c:	ffffffff 	.word	0xffffffff
    2f70:	ffffffff 	.word	0xffffffff
    2f74:	ffffffff 	.word	0xffffffff
    2f78:	ffffffff 	.word	0xffffffff
    2f7c:	ffffffff 	.word	0xffffffff
    2f80:	ffffffff 	.word	0xffffffff
    2f84:	ffffffff 	.word	0xffffffff
    2f88:	ffffffff 	.word	0xffffffff
    2f8c:	ffffffff 	.word	0xffffffff
    2f90:	ffffffff 	.word	0xffffffff
    2f94:	ffffffff 	.word	0xffffffff
    2f98:	ffffffff 	.word	0xffffffff
    2f9c:	ffffffff 	.word	0xffffffff
    2fa0:	ffffffff 	.word	0xffffffff
    2fa4:	ffffffff 	.word	0xffffffff
    2fa8:	ffffffff 	.word	0xffffffff
    2fac:	ffffffff 	.word	0xffffffff
    2fb0:	ffffffff 	.word	0xffffffff
    2fb4:	ffffffff 	.word	0xffffffff
    2fb8:	ffffffff 	.word	0xffffffff
    2fbc:	ffffffff 	.word	0xffffffff
    2fc0:	ffffffff 	.word	0xffffffff
    2fc4:	ffffffff 	.word	0xffffffff
    2fc8:	ffffffff 	.word	0xffffffff
    2fcc:	ffffffff 	.word	0xffffffff
    2fd0:	ffffffff 	.word	0xffffffff
    2fd4:	ffffffff 	.word	0xffffffff
    2fd8:	ffffffff 	.word	0xffffffff
    2fdc:	ffffffff 	.word	0xffffffff
    2fe0:	ffffffff 	.word	0xffffffff
    2fe4:	ffffffff 	.word	0xffffffff
    2fe8:	ffffffff 	.word	0xffffffff
    2fec:	ffffffff 	.word	0xffffffff
    2ff0:	ffffffff 	.word	0xffffffff
    2ff4:	ffffffff 	.word	0xffffffff
    2ff8:	ffffffff 	.word	0xffffffff
    2ffc:	ffffffff 	.word	0xffffffff
    3000:	ffffffff 	.word	0xffffffff
    3004:	ffffffff 	.word	0xffffffff
    3008:	ffffffff 	.word	0xffffffff
    300c:	ffffffff 	.word	0xffffffff
    3010:	ffffffff 	.word	0xffffffff
    3014:	ffffffff 	.word	0xffffffff
    3018:	ffffffff 	.word	0xffffffff
    301c:	ffffffff 	.word	0xffffffff
    3020:	ffffffff 	.word	0xffffffff
    3024:	ffffffff 	.word	0xffffffff
    3028:	ffffffff 	.word	0xffffffff
    302c:	ffffffff 	.word	0xffffffff
    3030:	ffffffff 	.word	0xffffffff
    3034:	ffffffff 	.word	0xffffffff
    3038:	ffffffff 	.word	0xffffffff
    303c:	ffffffff 	.word	0xffffffff
    3040:	ffffffff 	.word	0xffffffff
    3044:	ffffffff 	.word	0xffffffff
    3048:	ffffffff 	.word	0xffffffff
    304c:	ffffffff 	.word	0xffffffff
    3050:	ffffffff 	.word	0xffffffff
    3054:	ffffffff 	.word	0xffffffff
    3058:	ffffffff 	.word	0xffffffff
    305c:	ffffffff 	.word	0xffffffff
    3060:	ffffffff 	.word	0xffffffff
    3064:	ffffffff 	.word	0xffffffff
    3068:	ffffffff 	.word	0xffffffff
    306c:	ffffffff 	.word	0xffffffff
    3070:	ffffffff 	.word	0xffffffff
    3074:	ffffffff 	.word	0xffffffff
    3078:	ffffffff 	.word	0xffffffff
    307c:	ffffffff 	.word	0xffffffff
    3080:	ffffffff 	.word	0xffffffff
    3084:	ffffffff 	.word	0xffffffff
    3088:	ffffffff 	.word	0xffffffff
    308c:	ffffffff 	.word	0xffffffff
    3090:	ffffffff 	.word	0xffffffff
    3094:	ffffffff 	.word	0xffffffff
    3098:	ffffffff 	.word	0xffffffff
    309c:	ffffffff 	.word	0xffffffff
    30a0:	ffffffff 	.word	0xffffffff
    30a4:	ffffffff 	.word	0xffffffff
    30a8:	ffffffff 	.word	0xffffffff
    30ac:	ffffffff 	.word	0xffffffff
    30b0:	ffffffff 	.word	0xffffffff
    30b4:	ffffffff 	.word	0xffffffff
    30b8:	ffffffff 	.word	0xffffffff
    30bc:	ffffffff 	.word	0xffffffff
    30c0:	ffffffff 	.word	0xffffffff
    30c4:	ffffffff 	.word	0xffffffff
    30c8:	ffffffff 	.word	0xffffffff
    30cc:	ffffffff 	.word	0xffffffff
    30d0:	ffffffff 	.word	0xffffffff
    30d4:	ffffffff 	.word	0xffffffff
    30d8:	ffffffff 	.word	0xffffffff
    30dc:	ffffffff 	.word	0xffffffff
    30e0:	ffffffff 	.word	0xffffffff
    30e4:	ffffffff 	.word	0xffffffff
    30e8:	ffffffff 	.word	0xffffffff
    30ec:	ffffffff 	.word	0xffffffff
    30f0:	ffffffff 	.word	0xffffffff
    30f4:	ffffffff 	.word	0xffffffff
    30f8:	ffffffff 	.word	0xffffffff
    30fc:	ffffffff 	.word	0xffffffff
    3100:	ffffffff 	.word	0xffffffff
    3104:	ffffffff 	.word	0xffffffff
    3108:	ffffffff 	.word	0xffffffff
    310c:	ffffffff 	.word	0xffffffff
    3110:	ffffffff 	.word	0xffffffff
    3114:	ffffffff 	.word	0xffffffff
    3118:	ffffffff 	.word	0xffffffff
    311c:	ffffffff 	.word	0xffffffff
    3120:	ffffffff 	.word	0xffffffff
    3124:	ffffffff 	.word	0xffffffff
    3128:	ffffffff 	.word	0xffffffff
    312c:	ffffffff 	.word	0xffffffff
    3130:	ffffffff 	.word	0xffffffff
    3134:	ffffffff 	.word	0xffffffff
    3138:	ffffffff 	.word	0xffffffff
    313c:	ffffffff 	.word	0xffffffff
    3140:	ffffffff 	.word	0xffffffff
    3144:	ffffffff 	.word	0xffffffff
    3148:	ffffffff 	.word	0xffffffff
    314c:	ffffffff 	.word	0xffffffff
    3150:	ffffffff 	.word	0xffffffff
    3154:	ffffffff 	.word	0xffffffff
    3158:	ffffffff 	.word	0xffffffff
    315c:	ffffffff 	.word	0xffffffff
    3160:	ffffffff 	.word	0xffffffff
    3164:	ffffffff 	.word	0xffffffff
    3168:	ffffffff 	.word	0xffffffff
    316c:	ffffffff 	.word	0xffffffff
    3170:	ffffffff 	.word	0xffffffff
    3174:	ffffffff 	.word	0xffffffff
    3178:	ffffffff 	.word	0xffffffff
    317c:	ffffffff 	.word	0xffffffff
    3180:	ffffffff 	.word	0xffffffff
    3184:	ffffffff 	.word	0xffffffff
    3188:	ffffffff 	.word	0xffffffff
    318c:	ffffffff 	.word	0xffffffff
    3190:	ffffffff 	.word	0xffffffff
    3194:	ffffffff 	.word	0xffffffff
    3198:	ffffffff 	.word	0xffffffff
    319c:	ffffffff 	.word	0xffffffff
    31a0:	ffffffff 	.word	0xffffffff
    31a4:	ffffffff 	.word	0xffffffff
    31a8:	ffffffff 	.word	0xffffffff
    31ac:	ffffffff 	.word	0xffffffff
    31b0:	ffffffff 	.word	0xffffffff
    31b4:	ffffffff 	.word	0xffffffff
    31b8:	ffffffff 	.word	0xffffffff
    31bc:	ffffffff 	.word	0xffffffff
    31c0:	ffffffff 	.word	0xffffffff
    31c4:	ffffffff 	.word	0xffffffff
    31c8:	ffffffff 	.word	0xffffffff
    31cc:	ffffffff 	.word	0xffffffff
    31d0:	ffffffff 	.word	0xffffffff
    31d4:	ffffffff 	.word	0xffffffff
    31d8:	ffffffff 	.word	0xffffffff
    31dc:	ffffffff 	.word	0xffffffff
    31e0:	ffffffff 	.word	0xffffffff
    31e4:	ffffffff 	.word	0xffffffff
    31e8:	ffffffff 	.word	0xffffffff
    31ec:	ffffffff 	.word	0xffffffff
    31f0:	ffffffff 	.word	0xffffffff
    31f4:	ffffffff 	.word	0xffffffff
    31f8:	ffffffff 	.word	0xffffffff
    31fc:	ffffffff 	.word	0xffffffff
    3200:	ffffffff 	.word	0xffffffff
    3204:	ffffffff 	.word	0xffffffff
    3208:	ffffffff 	.word	0xffffffff
    320c:	ffffffff 	.word	0xffffffff
    3210:	ffffffff 	.word	0xffffffff
    3214:	ffffffff 	.word	0xffffffff
    3218:	ffffffff 	.word	0xffffffff
    321c:	ffffffff 	.word	0xffffffff
    3220:	ffffffff 	.word	0xffffffff
    3224:	ffffffff 	.word	0xffffffff
    3228:	ffffffff 	.word	0xffffffff
    322c:	ffffffff 	.word	0xffffffff
    3230:	ffffffff 	.word	0xffffffff
    3234:	ffffffff 	.word	0xffffffff
    3238:	ffffffff 	.word	0xffffffff
    323c:	ffffffff 	.word	0xffffffff
    3240:	ffffffff 	.word	0xffffffff
    3244:	ffffffff 	.word	0xffffffff
    3248:	ffffffff 	.word	0xffffffff
    324c:	ffffffff 	.word	0xffffffff
    3250:	ffffffff 	.word	0xffffffff
    3254:	ffffffff 	.word	0xffffffff
    3258:	ffffffff 	.word	0xffffffff
    325c:	ffffffff 	.word	0xffffffff
    3260:	ffffffff 	.word	0xffffffff
    3264:	ffffffff 	.word	0xffffffff
    3268:	ffffffff 	.word	0xffffffff
    326c:	ffffffff 	.word	0xffffffff
    3270:	ffffffff 	.word	0xffffffff
    3274:	ffffffff 	.word	0xffffffff
    3278:	ffffffff 	.word	0xffffffff
    327c:	ffffffff 	.word	0xffffffff
    3280:	ffffffff 	.word	0xffffffff
    3284:	ffffffff 	.word	0xffffffff
    3288:	ffffffff 	.word	0xffffffff
    328c:	ffffffff 	.word	0xffffffff
    3290:	ffffffff 	.word	0xffffffff
    3294:	ffffffff 	.word	0xffffffff
    3298:	ffffffff 	.word	0xffffffff
    329c:	ffffffff 	.word	0xffffffff
    32a0:	ffffffff 	.word	0xffffffff
    32a4:	ffffffff 	.word	0xffffffff
    32a8:	ffffffff 	.word	0xffffffff
    32ac:	ffffffff 	.word	0xffffffff
    32b0:	ffffffff 	.word	0xffffffff
    32b4:	ffffffff 	.word	0xffffffff
    32b8:	ffffffff 	.word	0xffffffff
    32bc:	ffffffff 	.word	0xffffffff
    32c0:	ffffffff 	.word	0xffffffff
    32c4:	ffffffff 	.word	0xffffffff
    32c8:	ffffffff 	.word	0xffffffff
    32cc:	ffffffff 	.word	0xffffffff
    32d0:	ffffffff 	.word	0xffffffff
    32d4:	ffffffff 	.word	0xffffffff
    32d8:	ffffffff 	.word	0xffffffff
    32dc:	ffffffff 	.word	0xffffffff
    32e0:	ffffffff 	.word	0xffffffff
    32e4:	ffffffff 	.word	0xffffffff
    32e8:	ffffffff 	.word	0xffffffff
    32ec:	ffffffff 	.word	0xffffffff
    32f0:	ffffffff 	.word	0xffffffff
    32f4:	ffffffff 	.word	0xffffffff
    32f8:	ffffffff 	.word	0xffffffff
    32fc:	ffffffff 	.word	0xffffffff
    3300:	ffffffff 	.word	0xffffffff
    3304:	ffffffff 	.word	0xffffffff
    3308:	ffffffff 	.word	0xffffffff
    330c:	ffffffff 	.word	0xffffffff
    3310:	ffffffff 	.word	0xffffffff
    3314:	ffffffff 	.word	0xffffffff
    3318:	ffffffff 	.word	0xffffffff
    331c:	ffffffff 	.word	0xffffffff
    3320:	ffffffff 	.word	0xffffffff
    3324:	ffffffff 	.word	0xffffffff
    3328:	ffffffff 	.word	0xffffffff
    332c:	ffffffff 	.word	0xffffffff
    3330:	ffffffff 	.word	0xffffffff
    3334:	ffffffff 	.word	0xffffffff
    3338:	ffffffff 	.word	0xffffffff
    333c:	ffffffff 	.word	0xffffffff
    3340:	ffffffff 	.word	0xffffffff
    3344:	ffffffff 	.word	0xffffffff
    3348:	ffffffff 	.word	0xffffffff
    334c:	ffffffff 	.word	0xffffffff
    3350:	ffffffff 	.word	0xffffffff
    3354:	ffffffff 	.word	0xffffffff
    3358:	ffffffff 	.word	0xffffffff
    335c:	ffffffff 	.word	0xffffffff
    3360:	ffffffff 	.word	0xffffffff
    3364:	ffffffff 	.word	0xffffffff
    3368:	ffffffff 	.word	0xffffffff
    336c:	ffffffff 	.word	0xffffffff
    3370:	ffffffff 	.word	0xffffffff
    3374:	ffffffff 	.word	0xffffffff
    3378:	ffffffff 	.word	0xffffffff
    337c:	ffffffff 	.word	0xffffffff
    3380:	ffffffff 	.word	0xffffffff
    3384:	ffffffff 	.word	0xffffffff
    3388:	ffffffff 	.word	0xffffffff
    338c:	ffffffff 	.word	0xffffffff
    3390:	ffffffff 	.word	0xffffffff
    3394:	ffffffff 	.word	0xffffffff
    3398:	ffffffff 	.word	0xffffffff
    339c:	ffffffff 	.word	0xffffffff
    33a0:	ffffffff 	.word	0xffffffff
    33a4:	ffffffff 	.word	0xffffffff
    33a8:	ffffffff 	.word	0xffffffff
    33ac:	ffffffff 	.word	0xffffffff
    33b0:	ffffffff 	.word	0xffffffff
    33b4:	ffffffff 	.word	0xffffffff
    33b8:	ffffffff 	.word	0xffffffff
    33bc:	ffffffff 	.word	0xffffffff
    33c0:	ffffffff 	.word	0xffffffff
    33c4:	ffffffff 	.word	0xffffffff
    33c8:	ffffffff 	.word	0xffffffff
    33cc:	ffffffff 	.word	0xffffffff
    33d0:	ffffffff 	.word	0xffffffff
    33d4:	ffffffff 	.word	0xffffffff
    33d8:	ffffffff 	.word	0xffffffff
    33dc:	ffffffff 	.word	0xffffffff
    33e0:	ffffffff 	.word	0xffffffff
    33e4:	ffffffff 	.word	0xffffffff
    33e8:	ffffffff 	.word	0xffffffff
    33ec:	ffffffff 	.word	0xffffffff
    33f0:	ffffffff 	.word	0xffffffff
    33f4:	ffffffff 	.word	0xffffffff
    33f8:	ffffffff 	.word	0xffffffff
    33fc:	ffffffff 	.word	0xffffffff
    3400:	ffffffff 	.word	0xffffffff
    3404:	ffffffff 	.word	0xffffffff
    3408:	ffffffff 	.word	0xffffffff
    340c:	ffffffff 	.word	0xffffffff
    3410:	ffffffff 	.word	0xffffffff
    3414:	ffffffff 	.word	0xffffffff
    3418:	ffffffff 	.word	0xffffffff
    341c:	ffffffff 	.word	0xffffffff
    3420:	ffffffff 	.word	0xffffffff
    3424:	ffffffff 	.word	0xffffffff
    3428:	ffffffff 	.word	0xffffffff
    342c:	ffffffff 	.word	0xffffffff
    3430:	ffffffff 	.word	0xffffffff
    3434:	ffffffff 	.word	0xffffffff
    3438:	ffffffff 	.word	0xffffffff
    343c:	ffffffff 	.word	0xffffffff
    3440:	ffffffff 	.word	0xffffffff
    3444:	ffffffff 	.word	0xffffffff
    3448:	ffffffff 	.word	0xffffffff
    344c:	ffffffff 	.word	0xffffffff
    3450:	ffffffff 	.word	0xffffffff
    3454:	ffffffff 	.word	0xffffffff
    3458:	ffffffff 	.word	0xffffffff
    345c:	ffffffff 	.word	0xffffffff
    3460:	ffffffff 	.word	0xffffffff
    3464:	ffffffff 	.word	0xffffffff
    3468:	ffffffff 	.word	0xffffffff
    346c:	ffffffff 	.word	0xffffffff
    3470:	ffffffff 	.word	0xffffffff
    3474:	ffffffff 	.word	0xffffffff
    3478:	ffffffff 	.word	0xffffffff
    347c:	ffffffff 	.word	0xffffffff
    3480:	ffffffff 	.word	0xffffffff
    3484:	ffffffff 	.word	0xffffffff
    3488:	ffffffff 	.word	0xffffffff
    348c:	ffffffff 	.word	0xffffffff
    3490:	ffffffff 	.word	0xffffffff
    3494:	ffffffff 	.word	0xffffffff
    3498:	ffffffff 	.word	0xffffffff
    349c:	ffffffff 	.word	0xffffffff
    34a0:	ffffffff 	.word	0xffffffff
    34a4:	ffffffff 	.word	0xffffffff
    34a8:	ffffffff 	.word	0xffffffff
    34ac:	ffffffff 	.word	0xffffffff
    34b0:	ffffffff 	.word	0xffffffff
    34b4:	ffffffff 	.word	0xffffffff
    34b8:	ffffffff 	.word	0xffffffff
    34bc:	ffffffff 	.word	0xffffffff
    34c0:	ffffffff 	.word	0xffffffff
    34c4:	ffffffff 	.word	0xffffffff
    34c8:	ffffffff 	.word	0xffffffff
    34cc:	ffffffff 	.word	0xffffffff
    34d0:	ffffffff 	.word	0xffffffff
    34d4:	ffffffff 	.word	0xffffffff
    34d8:	ffffffff 	.word	0xffffffff
    34dc:	ffffffff 	.word	0xffffffff
    34e0:	ffffffff 	.word	0xffffffff
    34e4:	ffffffff 	.word	0xffffffff
    34e8:	ffffffff 	.word	0xffffffff
    34ec:	ffffffff 	.word	0xffffffff
    34f0:	ffffffff 	.word	0xffffffff
    34f4:	ffffffff 	.word	0xffffffff
    34f8:	ffffffff 	.word	0xffffffff
    34fc:	ffffffff 	.word	0xffffffff
    3500:	ffffffff 	.word	0xffffffff
    3504:	ffffffff 	.word	0xffffffff
    3508:	ffffffff 	.word	0xffffffff
    350c:	ffffffff 	.word	0xffffffff
    3510:	ffffffff 	.word	0xffffffff
    3514:	ffffffff 	.word	0xffffffff
    3518:	ffffffff 	.word	0xffffffff
    351c:	ffffffff 	.word	0xffffffff
    3520:	ffffffff 	.word	0xffffffff
    3524:	ffffffff 	.word	0xffffffff
    3528:	ffffffff 	.word	0xffffffff
    352c:	ffffffff 	.word	0xffffffff
    3530:	ffffffff 	.word	0xffffffff
    3534:	ffffffff 	.word	0xffffffff
    3538:	ffffffff 	.word	0xffffffff
    353c:	ffffffff 	.word	0xffffffff
    3540:	ffffffff 	.word	0xffffffff
    3544:	ffffffff 	.word	0xffffffff
    3548:	ffffffff 	.word	0xffffffff
    354c:	ffffffff 	.word	0xffffffff
    3550:	ffffffff 	.word	0xffffffff
    3554:	ffffffff 	.word	0xffffffff
    3558:	ffffffff 	.word	0xffffffff
    355c:	ffffffff 	.word	0xffffffff
    3560:	ffffffff 	.word	0xffffffff
    3564:	ffffffff 	.word	0xffffffff
    3568:	ffffffff 	.word	0xffffffff
    356c:	ffffffff 	.word	0xffffffff
    3570:	ffffffff 	.word	0xffffffff
    3574:	ffffffff 	.word	0xffffffff
    3578:	ffffffff 	.word	0xffffffff
    357c:	ffffffff 	.word	0xffffffff
    3580:	ffffffff 	.word	0xffffffff
    3584:	ffffffff 	.word	0xffffffff
    3588:	ffffffff 	.word	0xffffffff
    358c:	ffffffff 	.word	0xffffffff
    3590:	ffffffff 	.word	0xffffffff
    3594:	ffffffff 	.word	0xffffffff
    3598:	ffffffff 	.word	0xffffffff
    359c:	ffffffff 	.word	0xffffffff
    35a0:	ffffffff 	.word	0xffffffff
    35a4:	ffffffff 	.word	0xffffffff
    35a8:	ffffffff 	.word	0xffffffff
    35ac:	ffffffff 	.word	0xffffffff
    35b0:	ffffffff 	.word	0xffffffff
    35b4:	ffffffff 	.word	0xffffffff
    35b8:	ffffffff 	.word	0xffffffff
    35bc:	ffffffff 	.word	0xffffffff
    35c0:	ffffffff 	.word	0xffffffff
    35c4:	ffffffff 	.word	0xffffffff
    35c8:	ffffffff 	.word	0xffffffff
    35cc:	ffffffff 	.word	0xffffffff
    35d0:	ffffffff 	.word	0xffffffff
    35d4:	ffffffff 	.word	0xffffffff
    35d8:	ffffffff 	.word	0xffffffff
    35dc:	ffffffff 	.word	0xffffffff
    35e0:	ffffffff 	.word	0xffffffff
    35e4:	ffffffff 	.word	0xffffffff
    35e8:	ffffffff 	.word	0xffffffff
    35ec:	ffffffff 	.word	0xffffffff
    35f0:	ffffffff 	.word	0xffffffff
    35f4:	ffffffff 	.word	0xffffffff
    35f8:	ffffffff 	.word	0xffffffff
    35fc:	ffffffff 	.word	0xffffffff
    3600:	ffffffff 	.word	0xffffffff
    3604:	ffffffff 	.word	0xffffffff
    3608:	ffffffff 	.word	0xffffffff
    360c:	ffffffff 	.word	0xffffffff
    3610:	ffffffff 	.word	0xffffffff
    3614:	ffffffff 	.word	0xffffffff
    3618:	ffffffff 	.word	0xffffffff
    361c:	ffffffff 	.word	0xffffffff
    3620:	ffffffff 	.word	0xffffffff
    3624:	ffffffff 	.word	0xffffffff
    3628:	ffffffff 	.word	0xffffffff
    362c:	ffffffff 	.word	0xffffffff
    3630:	ffffffff 	.word	0xffffffff
    3634:	ffffffff 	.word	0xffffffff
    3638:	ffffffff 	.word	0xffffffff
    363c:	ffffffff 	.word	0xffffffff
    3640:	ffffffff 	.word	0xffffffff
    3644:	ffffffff 	.word	0xffffffff
    3648:	ffffffff 	.word	0xffffffff
    364c:	ffffffff 	.word	0xffffffff
    3650:	ffffffff 	.word	0xffffffff
    3654:	ffffffff 	.word	0xffffffff
    3658:	ffffffff 	.word	0xffffffff
    365c:	ffffffff 	.word	0xffffffff
    3660:	ffffffff 	.word	0xffffffff
    3664:	ffffffff 	.word	0xffffffff
    3668:	ffffffff 	.word	0xffffffff
    366c:	ffffffff 	.word	0xffffffff
    3670:	ffffffff 	.word	0xffffffff
    3674:	ffffffff 	.word	0xffffffff
    3678:	ffffffff 	.word	0xffffffff
    367c:	ffffffff 	.word	0xffffffff
    3680:	ffffffff 	.word	0xffffffff
    3684:	ffffffff 	.word	0xffffffff
    3688:	ffffffff 	.word	0xffffffff
    368c:	ffffffff 	.word	0xffffffff
    3690:	ffffffff 	.word	0xffffffff
    3694:	ffffffff 	.word	0xffffffff
    3698:	ffffffff 	.word	0xffffffff
    369c:	ffffffff 	.word	0xffffffff
    36a0:	ffffffff 	.word	0xffffffff
    36a4:	ffffffff 	.word	0xffffffff
    36a8:	ffffffff 	.word	0xffffffff
    36ac:	ffffffff 	.word	0xffffffff
    36b0:	ffffffff 	.word	0xffffffff
    36b4:	ffffffff 	.word	0xffffffff
    36b8:	ffffffff 	.word	0xffffffff
    36bc:	ffffffff 	.word	0xffffffff
    36c0:	ffffffff 	.word	0xffffffff
    36c4:	ffffffff 	.word	0xffffffff
    36c8:	ffffffff 	.word	0xffffffff
    36cc:	ffffffff 	.word	0xffffffff
    36d0:	ffffffff 	.word	0xffffffff
    36d4:	ffffffff 	.word	0xffffffff
    36d8:	ffffffff 	.word	0xffffffff
    36dc:	ffffffff 	.word	0xffffffff
    36e0:	ffffffff 	.word	0xffffffff
    36e4:	ffffffff 	.word	0xffffffff
    36e8:	ffffffff 	.word	0xffffffff
    36ec:	ffffffff 	.word	0xffffffff
    36f0:	ffffffff 	.word	0xffffffff
    36f4:	ffffffff 	.word	0xffffffff
    36f8:	ffffffff 	.word	0xffffffff
    36fc:	ffffffff 	.word	0xffffffff
    3700:	ffffffff 	.word	0xffffffff
    3704:	ffffffff 	.word	0xffffffff
    3708:	ffffffff 	.word	0xffffffff
    370c:	ffffffff 	.word	0xffffffff
    3710:	ffffffff 	.word	0xffffffff
    3714:	ffffffff 	.word	0xffffffff
    3718:	ffffffff 	.word	0xffffffff
    371c:	ffffffff 	.word	0xffffffff
    3720:	ffffffff 	.word	0xffffffff
    3724:	ffffffff 	.word	0xffffffff
    3728:	ffffffff 	.word	0xffffffff
    372c:	ffffffff 	.word	0xffffffff
    3730:	ffffffff 	.word	0xffffffff
    3734:	ffffffff 	.word	0xffffffff
    3738:	ffffffff 	.word	0xffffffff
    373c:	ffffffff 	.word	0xffffffff
    3740:	ffffffff 	.word	0xffffffff
    3744:	ffffffff 	.word	0xffffffff
    3748:	ffffffff 	.word	0xffffffff
    374c:	ffffffff 	.word	0xffffffff
    3750:	ffffffff 	.word	0xffffffff
    3754:	ffffffff 	.word	0xffffffff
    3758:	ffffffff 	.word	0xffffffff
    375c:	ffffffff 	.word	0xffffffff
    3760:	ffffffff 	.word	0xffffffff
    3764:	ffffffff 	.word	0xffffffff
    3768:	ffffffff 	.word	0xffffffff
    376c:	ffffffff 	.word	0xffffffff
    3770:	ffffffff 	.word	0xffffffff
    3774:	ffffffff 	.word	0xffffffff
    3778:	ffffffff 	.word	0xffffffff
    377c:	ffffffff 	.word	0xffffffff
    3780:	ffffffff 	.word	0xffffffff
    3784:	ffffffff 	.word	0xffffffff
    3788:	ffffffff 	.word	0xffffffff
    378c:	ffffffff 	.word	0xffffffff
    3790:	ffffffff 	.word	0xffffffff
    3794:	ffffffff 	.word	0xffffffff
    3798:	ffffffff 	.word	0xffffffff
    379c:	ffffffff 	.word	0xffffffff
    37a0:	ffffffff 	.word	0xffffffff
    37a4:	ffffffff 	.word	0xffffffff
    37a8:	ffffffff 	.word	0xffffffff
    37ac:	ffffffff 	.word	0xffffffff
    37b0:	ffffffff 	.word	0xffffffff
    37b4:	ffffffff 	.word	0xffffffff
    37b8:	ffffffff 	.word	0xffffffff
    37bc:	ffffffff 	.word	0xffffffff
    37c0:	ffffffff 	.word	0xffffffff
    37c4:	ffffffff 	.word	0xffffffff
    37c8:	ffffffff 	.word	0xffffffff
    37cc:	ffffffff 	.word	0xffffffff
    37d0:	ffffffff 	.word	0xffffffff
    37d4:	ffffffff 	.word	0xffffffff
    37d8:	ffffffff 	.word	0xffffffff
    37dc:	ffffffff 	.word	0xffffffff
    37e0:	ffffffff 	.word	0xffffffff
    37e4:	ffffffff 	.word	0xffffffff
    37e8:	ffffffff 	.word	0xffffffff
    37ec:	ffffffff 	.word	0xffffffff
    37f0:	ffffffff 	.word	0xffffffff
    37f4:	ffffffff 	.word	0xffffffff
    37f8:	ffffffff 	.word	0xffffffff
    37fc:	ffffffff 	.word	0xffffffff
    3800:	ffffffff 	.word	0xffffffff
    3804:	ffffffff 	.word	0xffffffff
    3808:	ffffffff 	.word	0xffffffff
    380c:	ffffffff 	.word	0xffffffff
    3810:	ffffffff 	.word	0xffffffff
    3814:	ffffffff 	.word	0xffffffff
    3818:	ffffffff 	.word	0xffffffff
    381c:	ffffffff 	.word	0xffffffff
    3820:	ffffffff 	.word	0xffffffff
    3824:	ffffffff 	.word	0xffffffff
    3828:	ffffffff 	.word	0xffffffff
    382c:	ffffffff 	.word	0xffffffff
    3830:	ffffffff 	.word	0xffffffff
    3834:	ffffffff 	.word	0xffffffff
    3838:	ffffffff 	.word	0xffffffff
    383c:	ffffffff 	.word	0xffffffff
    3840:	ffffffff 	.word	0xffffffff
    3844:	ffffffff 	.word	0xffffffff
    3848:	ffffffff 	.word	0xffffffff
    384c:	ffffffff 	.word	0xffffffff
    3850:	ffffffff 	.word	0xffffffff
    3854:	ffffffff 	.word	0xffffffff
    3858:	ffffffff 	.word	0xffffffff
    385c:	ffffffff 	.word	0xffffffff
    3860:	ffffffff 	.word	0xffffffff
    3864:	ffffffff 	.word	0xffffffff
    3868:	ffffffff 	.word	0xffffffff
    386c:	ffffffff 	.word	0xffffffff
    3870:	ffffffff 	.word	0xffffffff
    3874:	ffffffff 	.word	0xffffffff
    3878:	ffffffff 	.word	0xffffffff
    387c:	ffffffff 	.word	0xffffffff
    3880:	ffffffff 	.word	0xffffffff
    3884:	ffffffff 	.word	0xffffffff
    3888:	ffffffff 	.word	0xffffffff
    388c:	ffffffff 	.word	0xffffffff
    3890:	ffffffff 	.word	0xffffffff
    3894:	ffffffff 	.word	0xffffffff
    3898:	ffffffff 	.word	0xffffffff
    389c:	ffffffff 	.word	0xffffffff
    38a0:	ffffffff 	.word	0xffffffff
    38a4:	ffffffff 	.word	0xffffffff
    38a8:	ffffffff 	.word	0xffffffff
    38ac:	ffffffff 	.word	0xffffffff
    38b0:	ffffffff 	.word	0xffffffff
    38b4:	ffffffff 	.word	0xffffffff
    38b8:	ffffffff 	.word	0xffffffff
    38bc:	ffffffff 	.word	0xffffffff
    38c0:	ffffffff 	.word	0xffffffff
    38c4:	ffffffff 	.word	0xffffffff
    38c8:	ffffffff 	.word	0xffffffff
    38cc:	ffffffff 	.word	0xffffffff
    38d0:	ffffffff 	.word	0xffffffff
    38d4:	ffffffff 	.word	0xffffffff
    38d8:	ffffffff 	.word	0xffffffff
    38dc:	ffffffff 	.word	0xffffffff
    38e0:	ffffffff 	.word	0xffffffff
    38e4:	ffffffff 	.word	0xffffffff
    38e8:	ffffffff 	.word	0xffffffff
    38ec:	ffffffff 	.word	0xffffffff
    38f0:	ffffffff 	.word	0xffffffff
    38f4:	ffffffff 	.word	0xffffffff
    38f8:	ffffffff 	.word	0xffffffff
    38fc:	ffffffff 	.word	0xffffffff
    3900:	ffffffff 	.word	0xffffffff
    3904:	ffffffff 	.word	0xffffffff
    3908:	ffffffff 	.word	0xffffffff
    390c:	ffffffff 	.word	0xffffffff
    3910:	ffffffff 	.word	0xffffffff
    3914:	ffffffff 	.word	0xffffffff
    3918:	ffffffff 	.word	0xffffffff
    391c:	ffffffff 	.word	0xffffffff
    3920:	ffffffff 	.word	0xffffffff
    3924:	ffffffff 	.word	0xffffffff
    3928:	ffffffff 	.word	0xffffffff
    392c:	ffffffff 	.word	0xffffffff
    3930:	ffffffff 	.word	0xffffffff
    3934:	ffffffff 	.word	0xffffffff
    3938:	ffffffff 	.word	0xffffffff
    393c:	ffffffff 	.word	0xffffffff
    3940:	ffffffff 	.word	0xffffffff
    3944:	ffffffff 	.word	0xffffffff
    3948:	ffffffff 	.word	0xffffffff
    394c:	ffffffff 	.word	0xffffffff
    3950:	ffffffff 	.word	0xffffffff
    3954:	ffffffff 	.word	0xffffffff
    3958:	ffffffff 	.word	0xffffffff
    395c:	ffffffff 	.word	0xffffffff
    3960:	ffffffff 	.word	0xffffffff
    3964:	ffffffff 	.word	0xffffffff
    3968:	ffffffff 	.word	0xffffffff
    396c:	ffffffff 	.word	0xffffffff
    3970:	ffffffff 	.word	0xffffffff
    3974:	ffffffff 	.word	0xffffffff
    3978:	ffffffff 	.word	0xffffffff
    397c:	ffffffff 	.word	0xffffffff
    3980:	ffffffff 	.word	0xffffffff
    3984:	ffffffff 	.word	0xffffffff
    3988:	ffffffff 	.word	0xffffffff
    398c:	ffffffff 	.word	0xffffffff
    3990:	ffffffff 	.word	0xffffffff
    3994:	ffffffff 	.word	0xffffffff
    3998:	ffffffff 	.word	0xffffffff
    399c:	ffffffff 	.word	0xffffffff
    39a0:	ffffffff 	.word	0xffffffff
    39a4:	ffffffff 	.word	0xffffffff
    39a8:	ffffffff 	.word	0xffffffff
    39ac:	ffffffff 	.word	0xffffffff
    39b0:	ffffffff 	.word	0xffffffff
    39b4:	ffffffff 	.word	0xffffffff
    39b8:	ffffffff 	.word	0xffffffff
    39bc:	ffffffff 	.word	0xffffffff
    39c0:	ffffffff 	.word	0xffffffff
    39c4:	ffffffff 	.word	0xffffffff
    39c8:	ffffffff 	.word	0xffffffff
    39cc:	ffffffff 	.word	0xffffffff
    39d0:	ffffffff 	.word	0xffffffff
    39d4:	ffffffff 	.word	0xffffffff
    39d8:	ffffffff 	.word	0xffffffff
    39dc:	ffffffff 	.word	0xffffffff
    39e0:	ffffffff 	.word	0xffffffff
    39e4:	ffffffff 	.word	0xffffffff
    39e8:	ffffffff 	.word	0xffffffff
    39ec:	ffffffff 	.word	0xffffffff
    39f0:	ffffffff 	.word	0xffffffff
    39f4:	ffffffff 	.word	0xffffffff
    39f8:	ffffffff 	.word	0xffffffff
    39fc:	ffffffff 	.word	0xffffffff
    3a00:	ffffffff 	.word	0xffffffff
    3a04:	ffffffff 	.word	0xffffffff
    3a08:	ffffffff 	.word	0xffffffff
    3a0c:	ffffffff 	.word	0xffffffff
    3a10:	ffffffff 	.word	0xffffffff
    3a14:	ffffffff 	.word	0xffffffff
    3a18:	ffffffff 	.word	0xffffffff
    3a1c:	ffffffff 	.word	0xffffffff
    3a20:	ffffffff 	.word	0xffffffff
    3a24:	ffffffff 	.word	0xffffffff
    3a28:	ffffffff 	.word	0xffffffff
    3a2c:	ffffffff 	.word	0xffffffff
    3a30:	ffffffff 	.word	0xffffffff
    3a34:	ffffffff 	.word	0xffffffff
    3a38:	ffffffff 	.word	0xffffffff
    3a3c:	ffffffff 	.word	0xffffffff
    3a40:	ffffffff 	.word	0xffffffff
    3a44:	ffffffff 	.word	0xffffffff
    3a48:	ffffffff 	.word	0xffffffff
    3a4c:	ffffffff 	.word	0xffffffff
    3a50:	ffffffff 	.word	0xffffffff
    3a54:	ffffffff 	.word	0xffffffff
    3a58:	ffffffff 	.word	0xffffffff
    3a5c:	ffffffff 	.word	0xffffffff
    3a60:	ffffffff 	.word	0xffffffff
    3a64:	ffffffff 	.word	0xffffffff
    3a68:	ffffffff 	.word	0xffffffff
    3a6c:	ffffffff 	.word	0xffffffff
    3a70:	ffffffff 	.word	0xffffffff
    3a74:	ffffffff 	.word	0xffffffff
    3a78:	ffffffff 	.word	0xffffffff
    3a7c:	ffffffff 	.word	0xffffffff
    3a80:	ffffffff 	.word	0xffffffff
    3a84:	ffffffff 	.word	0xffffffff
    3a88:	ffffffff 	.word	0xffffffff
    3a8c:	ffffffff 	.word	0xffffffff
    3a90:	ffffffff 	.word	0xffffffff
    3a94:	ffffffff 	.word	0xffffffff
    3a98:	ffffffff 	.word	0xffffffff
    3a9c:	ffffffff 	.word	0xffffffff
    3aa0:	ffffffff 	.word	0xffffffff
    3aa4:	ffffffff 	.word	0xffffffff
    3aa8:	ffffffff 	.word	0xffffffff
    3aac:	ffffffff 	.word	0xffffffff
    3ab0:	ffffffff 	.word	0xffffffff
    3ab4:	ffffffff 	.word	0xffffffff
    3ab8:	ffffffff 	.word	0xffffffff
    3abc:	ffffffff 	.word	0xffffffff
    3ac0:	ffffffff 	.word	0xffffffff
    3ac4:	ffffffff 	.word	0xffffffff
    3ac8:	ffffffff 	.word	0xffffffff
    3acc:	ffffffff 	.word	0xffffffff
    3ad0:	ffffffff 	.word	0xffffffff
    3ad4:	ffffffff 	.word	0xffffffff
    3ad8:	ffffffff 	.word	0xffffffff
    3adc:	ffffffff 	.word	0xffffffff
    3ae0:	ffffffff 	.word	0xffffffff
    3ae4:	ffffffff 	.word	0xffffffff
    3ae8:	ffffffff 	.word	0xffffffff
    3aec:	ffffffff 	.word	0xffffffff
    3af0:	ffffffff 	.word	0xffffffff
    3af4:	ffffffff 	.word	0xffffffff
    3af8:	ffffffff 	.word	0xffffffff
    3afc:	ffffffff 	.word	0xffffffff
    3b00:	ffffffff 	.word	0xffffffff
    3b04:	ffffffff 	.word	0xffffffff
    3b08:	ffffffff 	.word	0xffffffff
    3b0c:	ffffffff 	.word	0xffffffff
    3b10:	ffffffff 	.word	0xffffffff
    3b14:	ffffffff 	.word	0xffffffff
    3b18:	ffffffff 	.word	0xffffffff
    3b1c:	ffffffff 	.word	0xffffffff
    3b20:	ffffffff 	.word	0xffffffff
    3b24:	ffffffff 	.word	0xffffffff
    3b28:	ffffffff 	.word	0xffffffff
    3b2c:	ffffffff 	.word	0xffffffff
    3b30:	ffffffff 	.word	0xffffffff
    3b34:	ffffffff 	.word	0xffffffff
    3b38:	ffffffff 	.word	0xffffffff
    3b3c:	ffffffff 	.word	0xffffffff
    3b40:	ffffffff 	.word	0xffffffff
    3b44:	ffffffff 	.word	0xffffffff
    3b48:	ffffffff 	.word	0xffffffff
    3b4c:	ffffffff 	.word	0xffffffff
    3b50:	ffffffff 	.word	0xffffffff
    3b54:	ffffffff 	.word	0xffffffff
    3b58:	ffffffff 	.word	0xffffffff
    3b5c:	ffffffff 	.word	0xffffffff
    3b60:	ffffffff 	.word	0xffffffff
    3b64:	ffffffff 	.word	0xffffffff
    3b68:	ffffffff 	.word	0xffffffff
    3b6c:	ffffffff 	.word	0xffffffff
    3b70:	ffffffff 	.word	0xffffffff
    3b74:	ffffffff 	.word	0xffffffff
    3b78:	ffffffff 	.word	0xffffffff
    3b7c:	ffffffff 	.word	0xffffffff
    3b80:	ffffffff 	.word	0xffffffff
    3b84:	ffffffff 	.word	0xffffffff
    3b88:	ffffffff 	.word	0xffffffff
    3b8c:	ffffffff 	.word	0xffffffff
    3b90:	ffffffff 	.word	0xffffffff
    3b94:	ffffffff 	.word	0xffffffff
    3b98:	ffffffff 	.word	0xffffffff
    3b9c:	ffffffff 	.word	0xffffffff
    3ba0:	ffffffff 	.word	0xffffffff
    3ba4:	ffffffff 	.word	0xffffffff
    3ba8:	ffffffff 	.word	0xffffffff
    3bac:	ffffffff 	.word	0xffffffff
    3bb0:	ffffffff 	.word	0xffffffff
    3bb4:	ffffffff 	.word	0xffffffff
    3bb8:	ffffffff 	.word	0xffffffff
    3bbc:	ffffffff 	.word	0xffffffff
    3bc0:	ffffffff 	.word	0xffffffff
    3bc4:	ffffffff 	.word	0xffffffff
    3bc8:	ffffffff 	.word	0xffffffff
    3bcc:	ffffffff 	.word	0xffffffff
    3bd0:	ffffffff 	.word	0xffffffff
    3bd4:	ffffffff 	.word	0xffffffff
    3bd8:	ffffffff 	.word	0xffffffff
    3bdc:	ffffffff 	.word	0xffffffff
    3be0:	ffffffff 	.word	0xffffffff
    3be4:	ffffffff 	.word	0xffffffff
    3be8:	ffffffff 	.word	0xffffffff
    3bec:	ffffffff 	.word	0xffffffff
    3bf0:	ffffffff 	.word	0xffffffff
    3bf4:	ffffffff 	.word	0xffffffff
    3bf8:	ffffffff 	.word	0xffffffff
    3bfc:	ffffffff 	.word	0xffffffff
    3c00:	ffffffff 	.word	0xffffffff
    3c04:	ffffffff 	.word	0xffffffff
    3c08:	ffffffff 	.word	0xffffffff
    3c0c:	ffffffff 	.word	0xffffffff
    3c10:	ffffffff 	.word	0xffffffff
    3c14:	ffffffff 	.word	0xffffffff
    3c18:	ffffffff 	.word	0xffffffff
    3c1c:	ffffffff 	.word	0xffffffff
    3c20:	ffffffff 	.word	0xffffffff
    3c24:	ffffffff 	.word	0xffffffff
    3c28:	ffffffff 	.word	0xffffffff
    3c2c:	ffffffff 	.word	0xffffffff
    3c30:	ffffffff 	.word	0xffffffff
    3c34:	ffffffff 	.word	0xffffffff
    3c38:	ffffffff 	.word	0xffffffff
    3c3c:	ffffffff 	.word	0xffffffff
    3c40:	ffffffff 	.word	0xffffffff
    3c44:	ffffffff 	.word	0xffffffff
    3c48:	ffffffff 	.word	0xffffffff
    3c4c:	ffffffff 	.word	0xffffffff
    3c50:	ffffffff 	.word	0xffffffff
    3c54:	ffffffff 	.word	0xffffffff
    3c58:	ffffffff 	.word	0xffffffff
    3c5c:	ffffffff 	.word	0xffffffff
    3c60:	ffffffff 	.word	0xffffffff
    3c64:	ffffffff 	.word	0xffffffff
    3c68:	ffffffff 	.word	0xffffffff
    3c6c:	ffffffff 	.word	0xffffffff
    3c70:	ffffffff 	.word	0xffffffff
    3c74:	ffffffff 	.word	0xffffffff
    3c78:	ffffffff 	.word	0xffffffff
    3c7c:	ffffffff 	.word	0xffffffff
    3c80:	ffffffff 	.word	0xffffffff
    3c84:	ffffffff 	.word	0xffffffff
    3c88:	ffffffff 	.word	0xffffffff
    3c8c:	ffffffff 	.word	0xffffffff
    3c90:	ffffffff 	.word	0xffffffff
    3c94:	ffffffff 	.word	0xffffffff
    3c98:	ffffffff 	.word	0xffffffff
    3c9c:	ffffffff 	.word	0xffffffff
    3ca0:	ffffffff 	.word	0xffffffff
    3ca4:	ffffffff 	.word	0xffffffff
    3ca8:	ffffffff 	.word	0xffffffff
    3cac:	ffffffff 	.word	0xffffffff
    3cb0:	ffffffff 	.word	0xffffffff
    3cb4:	ffffffff 	.word	0xffffffff
    3cb8:	ffffffff 	.word	0xffffffff
    3cbc:	ffffffff 	.word	0xffffffff
    3cc0:	ffffffff 	.word	0xffffffff
    3cc4:	ffffffff 	.word	0xffffffff
    3cc8:	ffffffff 	.word	0xffffffff
    3ccc:	ffffffff 	.word	0xffffffff
    3cd0:	ffffffff 	.word	0xffffffff
    3cd4:	ffffffff 	.word	0xffffffff
    3cd8:	ffffffff 	.word	0xffffffff
    3cdc:	ffffffff 	.word	0xffffffff
    3ce0:	ffffffff 	.word	0xffffffff
    3ce4:	ffffffff 	.word	0xffffffff
    3ce8:	ffffffff 	.word	0xffffffff
    3cec:	ffffffff 	.word	0xffffffff
    3cf0:	ffffffff 	.word	0xffffffff
    3cf4:	ffffffff 	.word	0xffffffff
    3cf8:	ffffffff 	.word	0xffffffff
    3cfc:	ffffffff 	.word	0xffffffff
    3d00:	ffffffff 	.word	0xffffffff
    3d04:	ffffffff 	.word	0xffffffff
    3d08:	ffffffff 	.word	0xffffffff
    3d0c:	ffffffff 	.word	0xffffffff
    3d10:	ffffffff 	.word	0xffffffff
    3d14:	ffffffff 	.word	0xffffffff
    3d18:	ffffffff 	.word	0xffffffff
    3d1c:	ffffffff 	.word	0xffffffff
    3d20:	ffffffff 	.word	0xffffffff
    3d24:	ffffffff 	.word	0xffffffff
    3d28:	ffffffff 	.word	0xffffffff
    3d2c:	ffffffff 	.word	0xffffffff
    3d30:	ffffffff 	.word	0xffffffff
    3d34:	ffffffff 	.word	0xffffffff
    3d38:	ffffffff 	.word	0xffffffff
    3d3c:	ffffffff 	.word	0xffffffff
    3d40:	ffffffff 	.word	0xffffffff
    3d44:	ffffffff 	.word	0xffffffff
    3d48:	ffffffff 	.word	0xffffffff
    3d4c:	ffffffff 	.word	0xffffffff
    3d50:	ffffffff 	.word	0xffffffff
    3d54:	ffffffff 	.word	0xffffffff
    3d58:	ffffffff 	.word	0xffffffff
    3d5c:	ffffffff 	.word	0xffffffff
    3d60:	ffffffff 	.word	0xffffffff
    3d64:	ffffffff 	.word	0xffffffff
    3d68:	ffffffff 	.word	0xffffffff
    3d6c:	ffffffff 	.word	0xffffffff
    3d70:	ffffffff 	.word	0xffffffff
    3d74:	ffffffff 	.word	0xffffffff
    3d78:	ffffffff 	.word	0xffffffff
    3d7c:	ffffffff 	.word	0xffffffff
    3d80:	ffffffff 	.word	0xffffffff
    3d84:	ffffffff 	.word	0xffffffff
    3d88:	ffffffff 	.word	0xffffffff
    3d8c:	ffffffff 	.word	0xffffffff
    3d90:	ffffffff 	.word	0xffffffff
    3d94:	ffffffff 	.word	0xffffffff
    3d98:	ffffffff 	.word	0xffffffff
    3d9c:	ffffffff 	.word	0xffffffff
    3da0:	ffffffff 	.word	0xffffffff
    3da4:	ffffffff 	.word	0xffffffff
    3da8:	ffffffff 	.word	0xffffffff
    3dac:	ffffffff 	.word	0xffffffff
    3db0:	ffffffff 	.word	0xffffffff
    3db4:	ffffffff 	.word	0xffffffff
    3db8:	ffffffff 	.word	0xffffffff
    3dbc:	ffffffff 	.word	0xffffffff
    3dc0:	ffffffff 	.word	0xffffffff
    3dc4:	ffffffff 	.word	0xffffffff
    3dc8:	ffffffff 	.word	0xffffffff
    3dcc:	ffffffff 	.word	0xffffffff
    3dd0:	ffffffff 	.word	0xffffffff
    3dd4:	ffffffff 	.word	0xffffffff
    3dd8:	ffffffff 	.word	0xffffffff
    3ddc:	ffffffff 	.word	0xffffffff
    3de0:	ffffffff 	.word	0xffffffff
    3de4:	ffffffff 	.word	0xffffffff
    3de8:	ffffffff 	.word	0xffffffff
    3dec:	ffffffff 	.word	0xffffffff
    3df0:	ffffffff 	.word	0xffffffff
    3df4:	ffffffff 	.word	0xffffffff
    3df8:	ffffffff 	.word	0xffffffff
    3dfc:	ffffffff 	.word	0xffffffff
    3e00:	ffffffff 	.word	0xffffffff
    3e04:	ffffffff 	.word	0xffffffff
    3e08:	ffffffff 	.word	0xffffffff
    3e0c:	ffffffff 	.word	0xffffffff
    3e10:	ffffffff 	.word	0xffffffff
    3e14:	ffffffff 	.word	0xffffffff
    3e18:	ffffffff 	.word	0xffffffff
    3e1c:	ffffffff 	.word	0xffffffff
    3e20:	ffffffff 	.word	0xffffffff
    3e24:	ffffffff 	.word	0xffffffff
    3e28:	ffffffff 	.word	0xffffffff
    3e2c:	ffffffff 	.word	0xffffffff
    3e30:	ffffffff 	.word	0xffffffff
    3e34:	ffffffff 	.word	0xffffffff
    3e38:	ffffffff 	.word	0xffffffff
    3e3c:	ffffffff 	.word	0xffffffff
    3e40:	ffffffff 	.word	0xffffffff
    3e44:	ffffffff 	.word	0xffffffff
    3e48:	ffffffff 	.word	0xffffffff
    3e4c:	ffffffff 	.word	0xffffffff
    3e50:	ffffffff 	.word	0xffffffff
    3e54:	ffffffff 	.word	0xffffffff
    3e58:	ffffffff 	.word	0xffffffff
    3e5c:	ffffffff 	.word	0xffffffff
    3e60:	ffffffff 	.word	0xffffffff
    3e64:	ffffffff 	.word	0xffffffff
    3e68:	ffffffff 	.word	0xffffffff
    3e6c:	ffffffff 	.word	0xffffffff
    3e70:	ffffffff 	.word	0xffffffff
    3e74:	ffffffff 	.word	0xffffffff
    3e78:	ffffffff 	.word	0xffffffff
    3e7c:	ffffffff 	.word	0xffffffff
    3e80:	ffffffff 	.word	0xffffffff
    3e84:	ffffffff 	.word	0xffffffff
    3e88:	ffffffff 	.word	0xffffffff
    3e8c:	ffffffff 	.word	0xffffffff
    3e90:	ffffffff 	.word	0xffffffff
    3e94:	ffffffff 	.word	0xffffffff
    3e98:	ffffffff 	.word	0xffffffff
    3e9c:	ffffffff 	.word	0xffffffff
    3ea0:	ffffffff 	.word	0xffffffff
    3ea4:	ffffffff 	.word	0xffffffff
    3ea8:	ffffffff 	.word	0xffffffff
    3eac:	ffffffff 	.word	0xffffffff
    3eb0:	ffffffff 	.word	0xffffffff
    3eb4:	ffffffff 	.word	0xffffffff
    3eb8:	ffffffff 	.word	0xffffffff
    3ebc:	ffffffff 	.word	0xffffffff
    3ec0:	ffffffff 	.word	0xffffffff
    3ec4:	ffffffff 	.word	0xffffffff
    3ec8:	ffffffff 	.word	0xffffffff
    3ecc:	ffffffff 	.word	0xffffffff
    3ed0:	ffffffff 	.word	0xffffffff
    3ed4:	ffffffff 	.word	0xffffffff
    3ed8:	ffffffff 	.word	0xffffffff
    3edc:	ffffffff 	.word	0xffffffff
    3ee0:	ffffffff 	.word	0xffffffff
    3ee4:	ffffffff 	.word	0xffffffff
    3ee8:	ffffffff 	.word	0xffffffff
    3eec:	ffffffff 	.word	0xffffffff
    3ef0:	ffffffff 	.word	0xffffffff
    3ef4:	ffffffff 	.word	0xffffffff
    3ef8:	ffffffff 	.word	0xffffffff
    3efc:	ffffffff 	.word	0xffffffff
    3f00:	ffffffff 	.word	0xffffffff
    3f04:	ffffffff 	.word	0xffffffff
    3f08:	ffffffff 	.word	0xffffffff
    3f0c:	ffffffff 	.word	0xffffffff
    3f10:	ffffffff 	.word	0xffffffff
    3f14:	ffffffff 	.word	0xffffffff
    3f18:	ffffffff 	.word	0xffffffff
    3f1c:	ffffffff 	.word	0xffffffff
    3f20:	ffffffff 	.word	0xffffffff
    3f24:	ffffffff 	.word	0xffffffff
    3f28:	ffffffff 	.word	0xffffffff
    3f2c:	ffffffff 	.word	0xffffffff
    3f30:	ffffffff 	.word	0xffffffff
    3f34:	ffffffff 	.word	0xffffffff
    3f38:	ffffffff 	.word	0xffffffff
    3f3c:	ffffffff 	.word	0xffffffff
    3f40:	ffffffff 	.word	0xffffffff
    3f44:	ffffffff 	.word	0xffffffff
    3f48:	ffffffff 	.word	0xffffffff
    3f4c:	ffffffff 	.word	0xffffffff
    3f50:	ffffffff 	.word	0xffffffff
    3f54:	ffffffff 	.word	0xffffffff
    3f58:	ffffffff 	.word	0xffffffff
    3f5c:	ffffffff 	.word	0xffffffff
    3f60:	ffffffff 	.word	0xffffffff
    3f64:	ffffffff 	.word	0xffffffff
    3f68:	ffffffff 	.word	0xffffffff
    3f6c:	ffffffff 	.word	0xffffffff
    3f70:	ffffffff 	.word	0xffffffff
    3f74:	ffffffff 	.word	0xffffffff
    3f78:	ffffffff 	.word	0xffffffff
    3f7c:	ffffffff 	.word	0xffffffff
    3f80:	ffffffff 	.word	0xffffffff
    3f84:	ffffffff 	.word	0xffffffff
    3f88:	ffffffff 	.word	0xffffffff
    3f8c:	ffffffff 	.word	0xffffffff
    3f90:	ffffffff 	.word	0xffffffff
    3f94:	ffffffff 	.word	0xffffffff
    3f98:	ffffffff 	.word	0xffffffff
    3f9c:	ffffffff 	.word	0xffffffff
    3fa0:	ffffffff 	.word	0xffffffff
    3fa4:	ffffffff 	.word	0xffffffff
    3fa8:	ffffffff 	.word	0xffffffff
    3fac:	ffffffff 	.word	0xffffffff
    3fb0:	ffffffff 	.word	0xffffffff
    3fb4:	ffffffff 	.word	0xffffffff
    3fb8:	ffffffff 	.word	0xffffffff
    3fbc:	ffffffff 	.word	0xffffffff
    3fc0:	ffffffff 	.word	0xffffffff
    3fc4:	ffffffff 	.word	0xffffffff
    3fc8:	ffffffff 	.word	0xffffffff
    3fcc:	ffffffff 	.word	0xffffffff
    3fd0:	ffffffff 	.word	0xffffffff
    3fd4:	ffffffff 	.word	0xffffffff
    3fd8:	ffffffff 	.word	0xffffffff
    3fdc:	ffffffff 	.word	0xffffffff
    3fe0:	ffffffff 	.word	0xffffffff
    3fe4:	ffffffff 	.word	0xffffffff
    3fe8:	ffffffff 	.word	0xffffffff
    3fec:	ffffffff 	.word	0xffffffff
    3ff0:	ffffffff 	.word	0xffffffff
    3ff4:	ffffffff 	.word	0xffffffff
    3ff8:	ffffffff 	.word	0xffffffff
    3ffc:	ffffffff 	.word	0xffffffff
    4000:	ffffffff 	.word	0xffffffff
    4004:	ffffffff 	.word	0xffffffff
    4008:	ffffffff 	.word	0xffffffff
    400c:	ffffffff 	.word	0xffffffff
    4010:	ffffffff 	.word	0xffffffff
    4014:	ffffffff 	.word	0xffffffff
    4018:	ffffffff 	.word	0xffffffff
    401c:	ffffffff 	.word	0xffffffff
    4020:	ffffffff 	.word	0xffffffff
    4024:	ffffffff 	.word	0xffffffff
    4028:	ffffffff 	.word	0xffffffff
    402c:	ffffffff 	.word	0xffffffff
    4030:	ffffffff 	.word	0xffffffff
    4034:	ffffffff 	.word	0xffffffff
    4038:	ffffffff 	.word	0xffffffff
    403c:	ffffffff 	.word	0xffffffff
    4040:	ffffffff 	.word	0xffffffff
    4044:	ffffffff 	.word	0xffffffff
    4048:	ffffffff 	.word	0xffffffff
    404c:	ffffffff 	.word	0xffffffff
    4050:	ffffffff 	.word	0xffffffff
    4054:	ffffffff 	.word	0xffffffff
    4058:	ffffffff 	.word	0xffffffff
    405c:	ffffffff 	.word	0xffffffff
    4060:	ffffffff 	.word	0xffffffff
    4064:	ffffffff 	.word	0xffffffff
    4068:	ffffffff 	.word	0xffffffff
    406c:	ffffffff 	.word	0xffffffff
    4070:	ffffffff 	.word	0xffffffff
    4074:	ffffffff 	.word	0xffffffff
    4078:	ffffffff 	.word	0xffffffff
    407c:	ffffffff 	.word	0xffffffff
    4080:	ffffffff 	.word	0xffffffff
    4084:	ffffffff 	.word	0xffffffff
    4088:	ffffffff 	.word	0xffffffff
    408c:	ffffffff 	.word	0xffffffff
    4090:	ffffffff 	.word	0xffffffff
    4094:	ffffffff 	.word	0xffffffff
    4098:	ffffffff 	.word	0xffffffff
    409c:	ffffffff 	.word	0xffffffff
    40a0:	ffffffff 	.word	0xffffffff
    40a4:	ffffffff 	.word	0xffffffff
    40a8:	ffffffff 	.word	0xffffffff
    40ac:	ffffffff 	.word	0xffffffff
    40b0:	ffffffff 	.word	0xffffffff
    40b4:	ffffffff 	.word	0xffffffff
    40b8:	ffffffff 	.word	0xffffffff
    40bc:	ffffffff 	.word	0xffffffff
    40c0:	ffffffff 	.word	0xffffffff
    40c4:	ffffffff 	.word	0xffffffff
    40c8:	ffffffff 	.word	0xffffffff
    40cc:	ffffffff 	.word	0xffffffff
    40d0:	ffffffff 	.word	0xffffffff
    40d4:	ffffffff 	.word	0xffffffff
    40d8:	ffffffff 	.word	0xffffffff
    40dc:	ffffffff 	.word	0xffffffff
    40e0:	ffffffff 	.word	0xffffffff
    40e4:	ffffffff 	.word	0xffffffff
    40e8:	ffffffff 	.word	0xffffffff
    40ec:	ffffffff 	.word	0xffffffff
    40f0:	ffffffff 	.word	0xffffffff
    40f4:	ffffffff 	.word	0xffffffff
    40f8:	ffffffff 	.word	0xffffffff
    40fc:	ffffffff 	.word	0xffffffff
    4100:	ffffffff 	.word	0xffffffff
    4104:	ffffffff 	.word	0xffffffff
    4108:	ffffffff 	.word	0xffffffff
    410c:	ffffffff 	.word	0xffffffff
    4110:	ffffffff 	.word	0xffffffff
    4114:	ffffffff 	.word	0xffffffff
    4118:	ffffffff 	.word	0xffffffff
    411c:	ffffffff 	.word	0xffffffff
    4120:	ffffffff 	.word	0xffffffff
    4124:	ffffffff 	.word	0xffffffff
    4128:	ffffffff 	.word	0xffffffff
    412c:	ffffffff 	.word	0xffffffff
    4130:	ffffffff 	.word	0xffffffff
    4134:	ffffffff 	.word	0xffffffff
    4138:	ffffffff 	.word	0xffffffff
    413c:	ffffffff 	.word	0xffffffff
    4140:	ffffffff 	.word	0xffffffff
    4144:	ffffffff 	.word	0xffffffff
    4148:	ffffffff 	.word	0xffffffff
    414c:	ffffffff 	.word	0xffffffff
    4150:	ffffffff 	.word	0xffffffff
    4154:	ffffffff 	.word	0xffffffff
    4158:	ffffffff 	.word	0xffffffff
    415c:	ffffffff 	.word	0xffffffff
    4160:	ffffffff 	.word	0xffffffff
    4164:	ffffffff 	.word	0xffffffff
    4168:	ffffffff 	.word	0xffffffff
    416c:	ffffffff 	.word	0xffffffff
    4170:	ffffffff 	.word	0xffffffff
    4174:	ffffffff 	.word	0xffffffff
    4178:	ffffffff 	.word	0xffffffff
    417c:	ffffffff 	.word	0xffffffff
    4180:	ffffffff 	.word	0xffffffff
    4184:	ffffffff 	.word	0xffffffff
    4188:	ffffffff 	.word	0xffffffff
    418c:	ffffffff 	.word	0xffffffff
    4190:	ffffffff 	.word	0xffffffff
    4194:	ffffffff 	.word	0xffffffff
    4198:	ffffffff 	.word	0xffffffff
    419c:	ffffffff 	.word	0xffffffff
    41a0:	ffffffff 	.word	0xffffffff
    41a4:	ffffffff 	.word	0xffffffff
    41a8:	ffffffff 	.word	0xffffffff
    41ac:	ffffffff 	.word	0xffffffff
    41b0:	ffffffff 	.word	0xffffffff
    41b4:	ffffffff 	.word	0xffffffff
    41b8:	ffffffff 	.word	0xffffffff
    41bc:	ffffffff 	.word	0xffffffff
    41c0:	ffffffff 	.word	0xffffffff
    41c4:	ffffffff 	.word	0xffffffff
    41c8:	ffffffff 	.word	0xffffffff
    41cc:	ffffffff 	.word	0xffffffff
    41d0:	ffffffff 	.word	0xffffffff
    41d4:	ffffffff 	.word	0xffffffff
    41d8:	ffffffff 	.word	0xffffffff
    41dc:	ffffffff 	.word	0xffffffff
    41e0:	ffffffff 	.word	0xffffffff
    41e4:	ffffffff 	.word	0xffffffff
    41e8:	ffffffff 	.word	0xffffffff
    41ec:	ffffffff 	.word	0xffffffff
    41f0:	ffffffff 	.word	0xffffffff
    41f4:	ffffffff 	.word	0xffffffff
    41f8:	ffffffff 	.word	0xffffffff
    41fc:	ffffffff 	.word	0xffffffff
    4200:	ffffffff 	.word	0xffffffff
    4204:	ffffffff 	.word	0xffffffff
    4208:	ffffffff 	.word	0xffffffff
    420c:	ffffffff 	.word	0xffffffff
    4210:	ffffffff 	.word	0xffffffff
    4214:	ffffffff 	.word	0xffffffff
    4218:	ffffffff 	.word	0xffffffff
    421c:	ffffffff 	.word	0xffffffff
    4220:	ffffffff 	.word	0xffffffff
    4224:	ffffffff 	.word	0xffffffff
    4228:	ffffffff 	.word	0xffffffff
    422c:	ffffffff 	.word	0xffffffff
    4230:	ffffffff 	.word	0xffffffff
    4234:	ffffffff 	.word	0xffffffff
    4238:	ffffffff 	.word	0xffffffff
    423c:	ffffffff 	.word	0xffffffff
    4240:	ffffffff 	.word	0xffffffff
    4244:	ffffffff 	.word	0xffffffff
    4248:	ffffffff 	.word	0xffffffff
    424c:	ffffffff 	.word	0xffffffff
    4250:	ffffffff 	.word	0xffffffff
    4254:	ffffffff 	.word	0xffffffff
    4258:	ffffffff 	.word	0xffffffff
    425c:	ffffffff 	.word	0xffffffff
    4260:	ffffffff 	.word	0xffffffff
    4264:	ffffffff 	.word	0xffffffff
    4268:	ffffffff 	.word	0xffffffff
    426c:	ffffffff 	.word	0xffffffff
    4270:	ffffffff 	.word	0xffffffff
    4274:	ffffffff 	.word	0xffffffff
    4278:	ffffffff 	.word	0xffffffff
    427c:	ffffffff 	.word	0xffffffff
    4280:	ffffffff 	.word	0xffffffff
    4284:	ffffffff 	.word	0xffffffff
    4288:	ffffffff 	.word	0xffffffff
    428c:	ffffffff 	.word	0xffffffff
    4290:	ffffffff 	.word	0xffffffff
    4294:	ffffffff 	.word	0xffffffff
    4298:	ffffffff 	.word	0xffffffff
    429c:	ffffffff 	.word	0xffffffff
    42a0:	ffffffff 	.word	0xffffffff
    42a4:	ffffffff 	.word	0xffffffff
    42a8:	ffffffff 	.word	0xffffffff
    42ac:	ffffffff 	.word	0xffffffff
    42b0:	ffffffff 	.word	0xffffffff
    42b4:	ffffffff 	.word	0xffffffff
    42b8:	ffffffff 	.word	0xffffffff
    42bc:	ffffffff 	.word	0xffffffff
    42c0:	ffffffff 	.word	0xffffffff
    42c4:	ffffffff 	.word	0xffffffff
    42c8:	ffffffff 	.word	0xffffffff
    42cc:	ffffffff 	.word	0xffffffff
    42d0:	ffffffff 	.word	0xffffffff
    42d4:	ffffffff 	.word	0xffffffff
    42d8:	ffffffff 	.word	0xffffffff
    42dc:	ffffffff 	.word	0xffffffff
    42e0:	ffffffff 	.word	0xffffffff
    42e4:	ffffffff 	.word	0xffffffff
    42e8:	ffffffff 	.word	0xffffffff
    42ec:	ffffffff 	.word	0xffffffff
    42f0:	ffffffff 	.word	0xffffffff
    42f4:	ffffffff 	.word	0xffffffff
    42f8:	ffffffff 	.word	0xffffffff
    42fc:	ffffffff 	.word	0xffffffff
    4300:	ffffffff 	.word	0xffffffff
    4304:	ffffffff 	.word	0xffffffff
    4308:	ffffffff 	.word	0xffffffff
    430c:	ffffffff 	.word	0xffffffff
    4310:	ffffffff 	.word	0xffffffff
    4314:	ffffffff 	.word	0xffffffff
    4318:	ffffffff 	.word	0xffffffff
    431c:	ffffffff 	.word	0xffffffff
    4320:	ffffffff 	.word	0xffffffff
    4324:	ffffffff 	.word	0xffffffff
    4328:	ffffffff 	.word	0xffffffff
    432c:	ffffffff 	.word	0xffffffff
    4330:	ffffffff 	.word	0xffffffff
    4334:	ffffffff 	.word	0xffffffff
    4338:	ffffffff 	.word	0xffffffff
    433c:	ffffffff 	.word	0xffffffff
    4340:	ffffffff 	.word	0xffffffff
    4344:	ffffffff 	.word	0xffffffff
    4348:	ffffffff 	.word	0xffffffff
    434c:	ffffffff 	.word	0xffffffff
    4350:	ffffffff 	.word	0xffffffff
    4354:	ffffffff 	.word	0xffffffff
    4358:	ffffffff 	.word	0xffffffff
    435c:	ffffffff 	.word	0xffffffff
    4360:	ffffffff 	.word	0xffffffff
    4364:	ffffffff 	.word	0xffffffff
    4368:	ffffffff 	.word	0xffffffff
    436c:	ffffffff 	.word	0xffffffff
    4370:	ffffffff 	.word	0xffffffff
    4374:	ffffffff 	.word	0xffffffff
    4378:	ffffffff 	.word	0xffffffff
    437c:	ffffffff 	.word	0xffffffff
    4380:	ffffffff 	.word	0xffffffff
    4384:	ffffffff 	.word	0xffffffff
    4388:	ffffffff 	.word	0xffffffff
    438c:	ffffffff 	.word	0xffffffff
    4390:	ffffffff 	.word	0xffffffff
    4394:	ffffffff 	.word	0xffffffff
    4398:	ffffffff 	.word	0xffffffff
    439c:	ffffffff 	.word	0xffffffff
    43a0:	ffffffff 	.word	0xffffffff
    43a4:	ffffffff 	.word	0xffffffff
    43a8:	ffffffff 	.word	0xffffffff
    43ac:	ffffffff 	.word	0xffffffff
    43b0:	ffffffff 	.word	0xffffffff
    43b4:	ffffffff 	.word	0xffffffff
    43b8:	ffffffff 	.word	0xffffffff
    43bc:	ffffffff 	.word	0xffffffff
    43c0:	ffffffff 	.word	0xffffffff
    43c4:	ffffffff 	.word	0xffffffff
    43c8:	ffffffff 	.word	0xffffffff
    43cc:	ffffffff 	.word	0xffffffff
    43d0:	ffffffff 	.word	0xffffffff
    43d4:	ffffffff 	.word	0xffffffff
    43d8:	ffffffff 	.word	0xffffffff
    43dc:	ffffffff 	.word	0xffffffff
    43e0:	ffffffff 	.word	0xffffffff
    43e4:	ffffffff 	.word	0xffffffff
    43e8:	ffffffff 	.word	0xffffffff
    43ec:	ffffffff 	.word	0xffffffff
    43f0:	ffffffff 	.word	0xffffffff
    43f4:	ffffffff 	.word	0xffffffff
    43f8:	ffffffff 	.word	0xffffffff
    43fc:	ffffffff 	.word	0xffffffff

00004400 <__do_global_dtors_aux>:
    4400:	b510      	push	{r4, lr}
    4402:	4c06      	ldr	r4, [pc, #24]	; (441c <__do_global_dtors_aux+0x1c>)
    4404:	7823      	ldrb	r3, [r4, #0]
    4406:	2b00      	cmp	r3, #0
    4408:	d107      	bne.n	441a <__do_global_dtors_aux+0x1a>
    440a:	4b05      	ldr	r3, [pc, #20]	; (4420 <__do_global_dtors_aux+0x20>)
    440c:	2b00      	cmp	r3, #0
    440e:	d002      	beq.n	4416 <__do_global_dtors_aux+0x16>
    4410:	4804      	ldr	r0, [pc, #16]	; (4424 <__do_global_dtors_aux+0x24>)
    4412:	e000      	b.n	4416 <__do_global_dtors_aux+0x16>
    4414:	bf00      	nop
    4416:	2301      	movs	r3, #1
    4418:	7023      	strb	r3, [r4, #0]
    441a:	bd10      	pop	{r4, pc}
    441c:	20000090 	.word	0x20000090
    4420:	00000000 	.word	0x00000000
    4424:	0001b258 	.word	0x0001b258

00004428 <frame_dummy>:
    4428:	4b08      	ldr	r3, [pc, #32]	; (444c <frame_dummy+0x24>)
    442a:	b510      	push	{r4, lr}
    442c:	2b00      	cmp	r3, #0
    442e:	d003      	beq.n	4438 <frame_dummy+0x10>
    4430:	4907      	ldr	r1, [pc, #28]	; (4450 <frame_dummy+0x28>)
    4432:	4808      	ldr	r0, [pc, #32]	; (4454 <frame_dummy+0x2c>)
    4434:	e000      	b.n	4438 <frame_dummy+0x10>
    4436:	bf00      	nop
    4438:	4807      	ldr	r0, [pc, #28]	; (4458 <frame_dummy+0x30>)
    443a:	6803      	ldr	r3, [r0, #0]
    443c:	2b00      	cmp	r3, #0
    443e:	d100      	bne.n	4442 <frame_dummy+0x1a>
    4440:	bd10      	pop	{r4, pc}
    4442:	4b06      	ldr	r3, [pc, #24]	; (445c <frame_dummy+0x34>)
    4444:	2b00      	cmp	r3, #0
    4446:	d0fb      	beq.n	4440 <frame_dummy+0x18>
    4448:	4798      	blx	r3
    444a:	e7f9      	b.n	4440 <frame_dummy+0x18>
    444c:	00000000 	.word	0x00000000
    4450:	20000094 	.word	0x20000094
    4454:	0001b258 	.word	0x0001b258
    4458:	0001b258 	.word	0x0001b258
    445c:	00000000 	.word	0x00000000

00004460 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
    4460:	b5f0      	push	{r4, r5, r6, r7, lr}
    4462:	b083      	sub	sp, #12
    4464:	466b      	mov	r3, sp
    4466:	1ddf      	adds	r7, r3, #7
    4468:	71d8      	strb	r0, [r3, #7]
	spi_select_slave(&ssd1306_master, &ssd1306_slave, true);
    446a:	4e0b      	ldr	r6, [pc, #44]	; (4498 <ssd1306_write_command+0x38>)
    446c:	4c0b      	ldr	r4, [pc, #44]	; (449c <ssd1306_write_command+0x3c>)
    446e:	2201      	movs	r2, #1
    4470:	0031      	movs	r1, r6
    4472:	0020      	movs	r0, r4
    4474:	4d0a      	ldr	r5, [pc, #40]	; (44a0 <ssd1306_write_command+0x40>)
    4476:	47a8      	blx	r5

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    4478:	2280      	movs	r2, #128	; 0x80
    447a:	0052      	lsls	r2, r2, #1
    447c:	4b09      	ldr	r3, [pc, #36]	; (44a4 <ssd1306_write_command+0x44>)
    447e:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(SSD1306_DC_PIN, false);
	spi_write_buffer_wait(&ssd1306_master, &command, 1);
    4480:	3aff      	subs	r2, #255	; 0xff
    4482:	0039      	movs	r1, r7
    4484:	0020      	movs	r0, r4
    4486:	4b08      	ldr	r3, [pc, #32]	; (44a8 <ssd1306_write_command+0x48>)
    4488:	4798      	blx	r3
	spi_select_slave(&ssd1306_master, &ssd1306_slave, false);
    448a:	2200      	movs	r2, #0
    448c:	0031      	movs	r1, r6
    448e:	0020      	movs	r0, r4
    4490:	47a8      	blx	r5
}
    4492:	b003      	add	sp, #12
    4494:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4496:	46c0      	nop			; (mov r8, r8)
    4498:	20002414 	.word	0x20002414
    449c:	20002408 	.word	0x20002408
    44a0:	00006091 	.word	0x00006091
    44a4:	40002800 	.word	0x40002800
    44a8:	00006185 	.word	0x00006185

000044ac <ssd1306_init>:
{
    44ac:	b530      	push	{r4, r5, lr}
    44ae:	b091      	sub	sp, #68	; 0x44
	delay_init();
    44b0:	4b59      	ldr	r3, [pc, #356]	; (4618 <ssd1306_init+0x16c>)
    44b2:	4798      	blx	r3
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    44b4:	4c59      	ldr	r4, [pc, #356]	; (461c <ssd1306_init+0x170>)
    44b6:	2317      	movs	r3, #23
    44b8:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    44ba:	2300      	movs	r3, #0
    44bc:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    44be:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    44c0:	a902      	add	r1, sp, #8
    44c2:	2201      	movs	r2, #1
    44c4:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    44c6:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    44c8:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    44ca:	2017      	movs	r0, #23
    44cc:	4b54      	ldr	r3, [pc, #336]	; (4620 <ssd1306_init+0x174>)
    44ce:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    44d0:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    44d2:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    44d4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    44d6:	2900      	cmp	r1, #0
    44d8:	d104      	bne.n	44e4 <ssd1306_init+0x38>
		return &(ports[port_index]->Group[group_index]);
    44da:	0953      	lsrs	r3, r2, #5
    44dc:	01db      	lsls	r3, r3, #7
    44de:	4951      	ldr	r1, [pc, #324]	; (4624 <ssd1306_init+0x178>)
    44e0:	468c      	mov	ip, r1
    44e2:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    44e4:	211f      	movs	r1, #31
    44e6:	4011      	ands	r1, r2
    44e8:	2201      	movs	r2, #1
    44ea:	0010      	movs	r0, r2
    44ec:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    44ee:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    44f0:	ac02      	add	r4, sp, #8
    44f2:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    44f4:	2300      	movs	r3, #0
    44f6:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    44f8:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    44fa:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    44fc:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    44fe:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    4500:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    4502:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    4504:	3223      	adds	r2, #35	; 0x23
    4506:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    4508:	3a18      	subs	r2, #24
    450a:	2100      	movs	r1, #0
    450c:	a808      	add	r0, sp, #32
    450e:	4b46      	ldr	r3, [pc, #280]	; (4628 <ssd1306_init+0x17c>)
    4510:	4798      	blx	r3
	config.mux_setting = SSD1306_SPI_PINMUX_SETTING;
    4512:	2380      	movs	r3, #128	; 0x80
    4514:	025b      	lsls	r3, r3, #9
    4516:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SSD1306_SPI_PINMUX_PAD0;
    4518:	4b44      	ldr	r3, [pc, #272]	; (462c <ssd1306_init+0x180>)
    451a:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SSD1306_SPI_PINMUX_PAD1;
    451c:	4b44      	ldr	r3, [pc, #272]	; (4630 <ssd1306_init+0x184>)
    451e:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SSD1306_SPI_PINMUX_PAD2;
    4520:	4b44      	ldr	r3, [pc, #272]	; (4634 <ssd1306_init+0x188>)
    4522:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SSD1306_SPI_PINMUX_PAD3;
    4524:	4b44      	ldr	r3, [pc, #272]	; (4638 <ssd1306_init+0x18c>)
    4526:	6363      	str	r3, [r4, #52]	; 0x34
	config.mode_specific.master.baudrate = SSD1306_CLOCK_SPEED;
    4528:	4b44      	ldr	r3, [pc, #272]	; (463c <ssd1306_init+0x190>)
    452a:	61a3      	str	r3, [r4, #24]
	spi_init(&ssd1306_master, SSD1306_SPI, &config);
    452c:	4d44      	ldr	r5, [pc, #272]	; (4640 <ssd1306_init+0x194>)
    452e:	0022      	movs	r2, r4
    4530:	4944      	ldr	r1, [pc, #272]	; (4644 <ssd1306_init+0x198>)
    4532:	0028      	movs	r0, r5
    4534:	4b44      	ldr	r3, [pc, #272]	; (4648 <ssd1306_init+0x19c>)
    4536:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4538:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    453a:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    453c:	2b00      	cmp	r3, #0
    453e:	d1fc      	bne.n	453a <ssd1306_init+0x8e>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    4540:	6813      	ldr	r3, [r2, #0]
    4542:	2102      	movs	r1, #2
    4544:	430b      	orrs	r3, r1
    4546:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    4548:	ac01      	add	r4, sp, #4
    454a:	2301      	movs	r3, #1
    454c:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    454e:	2200      	movs	r2, #0
    4550:	70a2      	strb	r2, [r4, #2]
	pin.direction = PORT_PIN_DIR_OUTPUT;
    4552:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(SSD1306_DC_PIN, &pin);
    4554:	0021      	movs	r1, r4
    4556:	2008      	movs	r0, #8
    4558:	4d31      	ldr	r5, [pc, #196]	; (4620 <ssd1306_init+0x174>)
    455a:	47a8      	blx	r5
	port_pin_set_config(SSD1306_RES_PIN, &pin);
    455c:	0021      	movs	r1, r4
    455e:	2022      	movs	r0, #34	; 0x22
    4560:	47a8      	blx	r5
 *
 * This functions will reset the OLED controller by setting the reset pin low.
 */
static inline void ssd1306_hard_reset(void)
{
	uint32_t delay_10us = 10 * (system_gclk_gen_get_hz(0)/1000000);
    4562:	2000      	movs	r0, #0
    4564:	4b39      	ldr	r3, [pc, #228]	; (464c <ssd1306_init+0x1a0>)
    4566:	4798      	blx	r3
    4568:	4934      	ldr	r1, [pc, #208]	; (463c <ssd1306_init+0x190>)
    456a:	4b39      	ldr	r3, [pc, #228]	; (4650 <ssd1306_init+0x1a4>)
    456c:	4798      	blx	r3
    456e:	0083      	lsls	r3, r0, #2
    4570:	1818      	adds	r0, r3, r0
    4572:	0040      	lsls	r0, r0, #1
		port_base->OUTCLR.reg = pin_mask;
    4574:	2204      	movs	r2, #4
    4576:	4b37      	ldr	r3, [pc, #220]	; (4654 <ssd1306_init+0x1a8>)
    4578:	615a      	str	r2, [r3, #20]
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
    457a:	2800      	cmp	r0, #0
    457c:	d048      	beq.n	4610 <ssd1306_init+0x164>
		SysTick->LOAD = n;
    457e:	4b36      	ldr	r3, [pc, #216]	; (4658 <ssd1306_init+0x1ac>)
    4580:	6058      	str	r0, [r3, #4]
		SysTick->VAL = 0;
    4582:	2200      	movs	r2, #0
    4584:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    4586:	0019      	movs	r1, r3
    4588:	2280      	movs	r2, #128	; 0x80
    458a:	0252      	lsls	r2, r2, #9
    458c:	680b      	ldr	r3, [r1, #0]
    458e:	4213      	tst	r3, r2
    4590:	d0fc      	beq.n	458c <ssd1306_init+0xe0>
		port_base->OUTSET.reg = pin_mask;
    4592:	2204      	movs	r2, #4
    4594:	4b2f      	ldr	r3, [pc, #188]	; (4654 <ssd1306_init+0x1a8>)
    4596:	619a      	str	r2, [r3, #24]
		SysTick->LOAD = n;
    4598:	4b2f      	ldr	r3, [pc, #188]	; (4658 <ssd1306_init+0x1ac>)
    459a:	6058      	str	r0, [r3, #4]
		SysTick->VAL = 0;
    459c:	2200      	movs	r2, #0
    459e:	609a      	str	r2, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    45a0:	0019      	movs	r1, r3
    45a2:	2280      	movs	r2, #128	; 0x80
    45a4:	0252      	lsls	r2, r2, #9
    45a6:	680b      	ldr	r3, [r1, #0]
    45a8:	4213      	tst	r3, r2
    45aa:	d0fc      	beq.n	45a6 <ssd1306_init+0xfa>
    45ac:	2204      	movs	r2, #4
    45ae:	4b29      	ldr	r3, [pc, #164]	; (4654 <ssd1306_init+0x1a8>)
    45b0:	619a      	str	r2, [r3, #24]
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
    45b2:	20a8      	movs	r0, #168	; 0xa8
    45b4:	4c29      	ldr	r4, [pc, #164]	; (465c <ssd1306_init+0x1b0>)
    45b6:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
    45b8:	201f      	movs	r0, #31
    45ba:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
    45bc:	20d3      	movs	r0, #211	; 0xd3
    45be:	47a0      	blx	r4
	ssd1306_write_command(0x00);
    45c0:	2000      	movs	r0, #0
    45c2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
    45c4:	2040      	movs	r0, #64	; 0x40
    45c6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
    45c8:	20a1      	movs	r0, #161	; 0xa1
    45ca:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
    45cc:	20c8      	movs	r0, #200	; 0xc8
    45ce:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
    45d0:	20da      	movs	r0, #218	; 0xda
    45d2:	47a0      	blx	r4
	ssd1306_write_command(0x02);
    45d4:	2002      	movs	r0, #2
    45d6:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
    45d8:	2081      	movs	r0, #129	; 0x81
    45da:	47a0      	blx	r4
	ssd1306_write_command(contrast);
    45dc:	208f      	movs	r0, #143	; 0x8f
    45de:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
    45e0:	20a4      	movs	r0, #164	; 0xa4
    45e2:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
    45e4:	20a6      	movs	r0, #166	; 0xa6
    45e6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
    45e8:	20d5      	movs	r0, #213	; 0xd5
    45ea:	47a0      	blx	r4
	ssd1306_write_command(0x80);
    45ec:	2080      	movs	r0, #128	; 0x80
    45ee:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
    45f0:	208d      	movs	r0, #141	; 0x8d
    45f2:	47a0      	blx	r4
	ssd1306_write_command(0x14);
    45f4:	2014      	movs	r0, #20
    45f6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
    45f8:	20db      	movs	r0, #219	; 0xdb
    45fa:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
    45fc:	2040      	movs	r0, #64	; 0x40
    45fe:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
    4600:	20d9      	movs	r0, #217	; 0xd9
    4602:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
    4604:	20f1      	movs	r0, #241	; 0xf1
    4606:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
    4608:	20af      	movs	r0, #175	; 0xaf
    460a:	47a0      	blx	r4
}
    460c:	b011      	add	sp, #68	; 0x44
    460e:	bd30      	pop	{r4, r5, pc}
    4610:	2204      	movs	r2, #4
    4612:	4b10      	ldr	r3, [pc, #64]	; (4654 <ssd1306_init+0x1a8>)
    4614:	619a      	str	r2, [r3, #24]
    4616:	e7c9      	b.n	45ac <ssd1306_init+0x100>
    4618:	000046ad 	.word	0x000046ad
    461c:	20002414 	.word	0x20002414
    4620:	00005171 	.word	0x00005171
    4624:	40002800 	.word	0x40002800
    4628:	0001836d 	.word	0x0001836d
    462c:	00220003 	.word	0x00220003
    4630:	00170003 	.word	0x00170003
    4634:	00360003 	.word	0x00360003
    4638:	00370003 	.word	0x00370003
    463c:	000f4240 	.word	0x000f4240
    4640:	20002408 	.word	0x20002408
    4644:	43000400 	.word	0x43000400
    4648:	00005d45 	.word	0x00005d45
    464c:	00006fd5 	.word	0x00006fd5
    4650:	000150f9 	.word	0x000150f9
    4654:	40002880 	.word	0x40002880
    4658:	e000e010 	.word	0xe000e010
    465c:	00004461 	.word	0x00004461

00004660 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
    4660:	b5f0      	push	{r4, r5, r6, r7, lr}
    4662:	b083      	sub	sp, #12
    4664:	466b      	mov	r3, sp
    4666:	1ddf      	adds	r7, r3, #7
    4668:	71d8      	strb	r0, [r3, #7]
	spi_select_slave(&ssd1306_master, &ssd1306_slave, true);
    466a:	4e0b      	ldr	r6, [pc, #44]	; (4698 <ssd1306_write_data+0x38>)
    466c:	4c0b      	ldr	r4, [pc, #44]	; (469c <ssd1306_write_data+0x3c>)
    466e:	2201      	movs	r2, #1
    4670:	0031      	movs	r1, r6
    4672:	0020      	movs	r0, r4
    4674:	4d0a      	ldr	r5, [pc, #40]	; (46a0 <ssd1306_write_data+0x40>)
    4676:	47a8      	blx	r5
    4678:	2280      	movs	r2, #128	; 0x80
    467a:	0052      	lsls	r2, r2, #1
    467c:	4b09      	ldr	r3, [pc, #36]	; (46a4 <ssd1306_write_data+0x44>)
    467e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(SSD1306_DC_PIN, true);
	spi_write_buffer_wait(&ssd1306_master, &data, 1);
    4680:	3aff      	subs	r2, #255	; 0xff
    4682:	0039      	movs	r1, r7
    4684:	0020      	movs	r0, r4
    4686:	4b08      	ldr	r3, [pc, #32]	; (46a8 <ssd1306_write_data+0x48>)
    4688:	4798      	blx	r3
	spi_select_slave(&ssd1306_master, &ssd1306_slave, false);
    468a:	2200      	movs	r2, #0
    468c:	0031      	movs	r1, r6
    468e:	0020      	movs	r0, r4
    4690:	47a8      	blx	r5
}
    4692:	b003      	add	sp, #12
    4694:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4696:	46c0      	nop			; (mov r8, r8)
    4698:	20002414 	.word	0x20002414
    469c:	20002408 	.word	0x20002408
    46a0:	00006091 	.word	0x00006091
    46a4:	40002800 	.word	0x40002800
    46a8:	00006185 	.word	0x00006185

000046ac <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    46ac:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    46ae:	2000      	movs	r0, #0
    46b0:	4b08      	ldr	r3, [pc, #32]	; (46d4 <delay_init+0x28>)
    46b2:	4798      	blx	r3
    46b4:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    46b6:	4c08      	ldr	r4, [pc, #32]	; (46d8 <delay_init+0x2c>)
    46b8:	21fa      	movs	r1, #250	; 0xfa
    46ba:	0089      	lsls	r1, r1, #2
    46bc:	47a0      	blx	r4
    46be:	4b07      	ldr	r3, [pc, #28]	; (46dc <delay_init+0x30>)
    46c0:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    46c2:	4907      	ldr	r1, [pc, #28]	; (46e0 <delay_init+0x34>)
    46c4:	0028      	movs	r0, r5
    46c6:	47a0      	blx	r4
    46c8:	4b06      	ldr	r3, [pc, #24]	; (46e4 <delay_init+0x38>)
    46ca:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    46cc:	2205      	movs	r2, #5
    46ce:	4b06      	ldr	r3, [pc, #24]	; (46e8 <delay_init+0x3c>)
    46d0:	601a      	str	r2, [r3, #0]
}
    46d2:	bd70      	pop	{r4, r5, r6, pc}
    46d4:	00006fd5 	.word	0x00006fd5
    46d8:	000150f9 	.word	0x000150f9
    46dc:	20000000 	.word	0x20000000
    46e0:	000f4240 	.word	0x000f4240
    46e4:	20000004 	.word	0x20000004
    46e8:	e000e010 	.word	0xe000e010

000046ec <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    46ec:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    46ee:	4b08      	ldr	r3, [pc, #32]	; (4710 <delay_cycles_us+0x24>)
    46f0:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
    46f2:	4a08      	ldr	r2, [pc, #32]	; (4714 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    46f4:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    46f6:	2180      	movs	r1, #128	; 0x80
    46f8:	0249      	lsls	r1, r1, #9
	while (n--) {
    46fa:	3801      	subs	r0, #1
    46fc:	d307      	bcc.n	470e <delay_cycles_us+0x22>
	if (n > 0) {
    46fe:	2c00      	cmp	r4, #0
    4700:	d0fb      	beq.n	46fa <delay_cycles_us+0xe>
		SysTick->LOAD = n;
    4702:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    4704:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    4706:	6813      	ldr	r3, [r2, #0]
    4708:	420b      	tst	r3, r1
    470a:	d0fc      	beq.n	4706 <delay_cycles_us+0x1a>
    470c:	e7f5      	b.n	46fa <delay_cycles_us+0xe>
	}
}
    470e:	bd30      	pop	{r4, r5, pc}
    4710:	20000004 	.word	0x20000004
    4714:	e000e010 	.word	0xe000e010

00004718 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    4718:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    471a:	4b08      	ldr	r3, [pc, #32]	; (473c <delay_cycles_ms+0x24>)
    471c:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
    471e:	4a08      	ldr	r2, [pc, #32]	; (4740 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    4720:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    4722:	2180      	movs	r1, #128	; 0x80
    4724:	0249      	lsls	r1, r1, #9
	while (n--) {
    4726:	3801      	subs	r0, #1
    4728:	d307      	bcc.n	473a <delay_cycles_ms+0x22>
	if (n > 0) {
    472a:	2c00      	cmp	r4, #0
    472c:	d0fb      	beq.n	4726 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    472e:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    4730:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    4732:	6813      	ldr	r3, [r2, #0]
    4734:	420b      	tst	r3, r1
    4736:	d0fc      	beq.n	4732 <delay_cycles_ms+0x1a>
    4738:	e7f5      	b.n	4726 <delay_cycles_ms+0xe>
	}
}
    473a:	bd30      	pop	{r4, r5, pc}
    473c:	20000000 	.word	0x20000000
    4740:	e000e010 	.word	0xe000e010

00004744 <gfx_mono_set_framebuffer>:
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
    4744:	4b01      	ldr	r3, [pc, #4]	; (474c <gfx_mono_set_framebuffer+0x8>)
    4746:	6018      	str	r0, [r3, #0]
}
    4748:	4770      	bx	lr
    474a:	46c0      	nop			; (mov r8, r8)
    474c:	200000ac 	.word	0x200000ac

00004750 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
    4750:	4b02      	ldr	r3, [pc, #8]	; (475c <gfx_mono_framebuffer_put_byte+0xc>)
    4752:	681b      	ldr	r3, [r3, #0]
    4754:	01c0      	lsls	r0, r0, #7
    4756:	1818      	adds	r0, r3, r0
    4758:	5442      	strb	r2, [r0, r1]
}
    475a:	4770      	bx	lr
    475c:	200000ac 	.word	0x200000ac

00004760 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
    4760:	4b02      	ldr	r3, [pc, #8]	; (476c <gfx_mono_framebuffer_get_byte+0xc>)
    4762:	681b      	ldr	r3, [r3, #0]
    4764:	01c0      	lsls	r0, r0, #7
    4766:	1818      	adds	r0, r3, r0
    4768:	5c40      	ldrb	r0, [r0, r1]
}
    476a:	4770      	bx	lr
    476c:	200000ac 	.word	0x200000ac

00004770 <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
    4770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4772:	46ce      	mov	lr, r9
    4774:	4647      	mov	r7, r8
    4776:	b580      	push	{r7, lr}
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
    4778:	1884      	adds	r4, r0, r2
    477a:	2c80      	cmp	r4, #128	; 0x80
    477c:	dd03      	ble.n	4786 <gfx_mono_generic_draw_horizontal_line+0x16>
		length = GFX_MONO_LCD_WIDTH - x;
    477e:	2280      	movs	r2, #128	; 0x80
    4780:	4252      	negs	r2, r2
    4782:	1a12      	subs	r2, r2, r0
    4784:	b2d2      	uxtb	r2, r2
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
    4786:	2a00      	cmp	r2, #0
    4788:	d037      	beq.n	47fa <gfx_mono_generic_draw_horizontal_line+0x8a>
	page = y / 8;
    478a:	08cd      	lsrs	r5, r1, #3
	pixelmask = (1 << (y - (page * 8)));
    478c:	00ec      	lsls	r4, r5, #3
    478e:	1b09      	subs	r1, r1, r4
    4790:	2701      	movs	r7, #1
    4792:	408f      	lsls	r7, r1
    4794:	0039      	movs	r1, r7
    4796:	b2ff      	uxtb	r7, r7
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
    4798:	2b01      	cmp	r3, #1
    479a:	d019      	beq.n	47d0 <gfx_mono_generic_draw_horizontal_line+0x60>
    479c:	2b00      	cmp	r3, #0
    479e:	d030      	beq.n	4802 <gfx_mono_generic_draw_horizontal_line+0x92>
    47a0:	2b02      	cmp	r3, #2
    47a2:	d12a      	bne.n	47fa <gfx_mono_generic_draw_horizontal_line+0x8a>
    47a4:	3801      	subs	r0, #1
    47a6:	b2c6      	uxtb	r6, r0
    47a8:	1992      	adds	r2, r2, r6
    47aa:	b2d4      	uxtb	r4, r2
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
    47ac:	4b20      	ldr	r3, [pc, #128]	; (4830 <gfx_mono_generic_draw_horizontal_line+0xc0>)
    47ae:	4699      	mov	r9, r3
			temp ^= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
    47b0:	4b20      	ldr	r3, [pc, #128]	; (4834 <gfx_mono_generic_draw_horizontal_line+0xc4>)
    47b2:	4698      	mov	r8, r3
			temp = gfx_mono_get_byte(page, x + length);
    47b4:	0021      	movs	r1, r4
    47b6:	0028      	movs	r0, r5
    47b8:	47c8      	blx	r9
			temp ^= pixelmask;
    47ba:	4078      	eors	r0, r7
			gfx_mono_put_byte(page, x + length, temp);
    47bc:	b2c2      	uxtb	r2, r0
    47be:	2300      	movs	r3, #0
    47c0:	0021      	movs	r1, r4
    47c2:	0028      	movs	r0, r5
    47c4:	47c0      	blx	r8
    47c6:	3c01      	subs	r4, #1
    47c8:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
    47ca:	42b4      	cmp	r4, r6
    47cc:	d1f2      	bne.n	47b4 <gfx_mono_generic_draw_horizontal_line+0x44>
    47ce:	e014      	b.n	47fa <gfx_mono_generic_draw_horizontal_line+0x8a>
    47d0:	3801      	subs	r0, #1
    47d2:	b2c6      	uxtb	r6, r0
    47d4:	1992      	adds	r2, r2, r6
    47d6:	b2d4      	uxtb	r4, r2
			temp = gfx_mono_get_byte(page, x + length);
    47d8:	4b15      	ldr	r3, [pc, #84]	; (4830 <gfx_mono_generic_draw_horizontal_line+0xc0>)
    47da:	4699      	mov	r9, r3
			gfx_mono_put_byte(page, x + length, temp);
    47dc:	4b15      	ldr	r3, [pc, #84]	; (4834 <gfx_mono_generic_draw_horizontal_line+0xc4>)
    47de:	4698      	mov	r8, r3
			temp = gfx_mono_get_byte(page, x + length);
    47e0:	0021      	movs	r1, r4
    47e2:	0028      	movs	r0, r5
    47e4:	47c8      	blx	r9
			temp |= pixelmask;
    47e6:	4338      	orrs	r0, r7
			gfx_mono_put_byte(page, x + length, temp);
    47e8:	b2c2      	uxtb	r2, r0
    47ea:	2300      	movs	r3, #0
    47ec:	0021      	movs	r1, r4
    47ee:	0028      	movs	r0, r5
    47f0:	47c0      	blx	r8
    47f2:	3c01      	subs	r4, #1
    47f4:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
    47f6:	42b4      	cmp	r4, r6
    47f8:	d1f2      	bne.n	47e0 <gfx_mono_generic_draw_horizontal_line+0x70>
		break;

	default:
		break;
	}
}
    47fa:	bc0c      	pop	{r2, r3}
    47fc:	4690      	mov	r8, r2
    47fe:	4699      	mov	r9, r3
    4800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4802:	3801      	subs	r0, #1
    4804:	b2c6      	uxtb	r6, r0
    4806:	1992      	adds	r2, r2, r6
    4808:	b2d4      	uxtb	r4, r2
			temp = gfx_mono_get_byte(page, x + length);
    480a:	4b09      	ldr	r3, [pc, #36]	; (4830 <gfx_mono_generic_draw_horizontal_line+0xc0>)
    480c:	4699      	mov	r9, r3
			temp &= ~pixelmask;
    480e:	43cf      	mvns	r7, r1
			gfx_mono_put_byte(page, x + length, temp);
    4810:	4b08      	ldr	r3, [pc, #32]	; (4834 <gfx_mono_generic_draw_horizontal_line+0xc4>)
    4812:	4698      	mov	r8, r3
			temp = gfx_mono_get_byte(page, x + length);
    4814:	0021      	movs	r1, r4
    4816:	0028      	movs	r0, r5
    4818:	47c8      	blx	r9
			temp &= ~pixelmask;
    481a:	4038      	ands	r0, r7
			gfx_mono_put_byte(page, x + length, temp);
    481c:	b2c2      	uxtb	r2, r0
    481e:	2300      	movs	r3, #0
    4820:	0021      	movs	r1, r4
    4822:	0028      	movs	r0, r5
    4824:	47c0      	blx	r8
    4826:	3c01      	subs	r4, #1
    4828:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
    482a:	42b4      	cmp	r4, r6
    482c:	d1f2      	bne.n	4814 <gfx_mono_generic_draw_horizontal_line+0xa4>
    482e:	e7e4      	b.n	47fa <gfx_mono_generic_draw_horizontal_line+0x8a>
    4830:	00004a95 	.word	0x00004a95
    4834:	0000498d 	.word	0x0000498d

00004838 <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
    4838:	b5f0      	push	{r4, r5, r6, r7, lr}
    483a:	b083      	sub	sp, #12
    483c:	9000      	str	r0, [sp, #0]
    483e:	9201      	str	r2, [sp, #4]
    4840:	aa08      	add	r2, sp, #32
    4842:	7817      	ldrb	r7, [r2, #0]
	if (height == 0) {
    4844:	2b00      	cmp	r3, #0
    4846:	d00d      	beq.n	4864 <gfx_mono_generic_draw_filled_rect+0x2c>
    4848:	3901      	subs	r1, #1
    484a:	b2ce      	uxtb	r6, r1
    484c:	199b      	adds	r3, r3, r6
    484e:	b2dc      	uxtb	r4, r3
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
    4850:	4d05      	ldr	r5, [pc, #20]	; (4868 <gfx_mono_generic_draw_filled_rect+0x30>)
    4852:	003b      	movs	r3, r7
    4854:	9a01      	ldr	r2, [sp, #4]
    4856:	0021      	movs	r1, r4
    4858:	9800      	ldr	r0, [sp, #0]
    485a:	47a8      	blx	r5
    485c:	3c01      	subs	r4, #1
    485e:	b2e4      	uxtb	r4, r4
	while (height-- > 0) {
    4860:	42b4      	cmp	r4, r6
    4862:	d1f6      	bne.n	4852 <gfx_mono_generic_draw_filled_rect+0x1a>
	}
}
    4864:	b003      	add	sp, #12
    4866:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4868:	00004771 	.word	0x00004771

0000486c <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
    486c:	b5f0      	push	{r4, r5, r6, r7, lr}
    486e:	46de      	mov	lr, fp
    4870:	4657      	mov	r7, sl
    4872:	464e      	mov	r6, r9
    4874:	4645      	mov	r5, r8
    4876:	b5e0      	push	{r5, r6, r7, lr}
    4878:	b085      	sub	sp, #20
    487a:	0004      	movs	r4, r0
    487c:	4688      	mov	r8, r1
    487e:	0015      	movs	r5, r2
    4880:	469b      	mov	fp, r3
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
    4882:	7a5b      	ldrb	r3, [r3, #9]
    4884:	465a      	mov	r2, fp
    4886:	7a12      	ldrb	r2, [r2, #8]
    4888:	2100      	movs	r1, #0
    488a:	9100      	str	r1, [sp, #0]
    488c:	0029      	movs	r1, r5
    488e:	4640      	mov	r0, r8
    4890:	4e28      	ldr	r6, [pc, #160]	; (4934 <gfx_mono_draw_char+0xc8>)
    4892:	47b0      	blx	r6
			GFX_PIXEL_CLR);

	switch (font->type) {
    4894:	465b      	mov	r3, fp
    4896:	781b      	ldrb	r3, [r3, #0]
    4898:	2b00      	cmp	r3, #0
    489a:	d006      	beq.n	48aa <gfx_mono_draw_char+0x3e>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
    489c:	b005      	add	sp, #20
    489e:	bc3c      	pop	{r2, r3, r4, r5}
    48a0:	4690      	mov	r8, r2
    48a2:	4699      	mov	r9, r3
    48a4:	46a2      	mov	sl, r4
    48a6:	46ab      	mov	fp, r5
    48a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
    48aa:	465b      	mov	r3, fp
    48ac:	7a1a      	ldrb	r2, [r3, #8]
    48ae:	08d3      	lsrs	r3, r2, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
    48b0:	0752      	lsls	r2, r2, #29
    48b2:	d000      	beq.n	48b6 <gfx_mono_draw_char+0x4a>
		char_row_size++;
    48b4:	3301      	adds	r3, #1
	glyph_data_offset = char_row_size * font->height *
    48b6:	465a      	mov	r2, fp
    48b8:	7a52      	ldrb	r2, [r2, #9]
    48ba:	4692      	mov	sl, r2
			((uint8_t)ch - font->first_char);
    48bc:	465a      	mov	r2, fp
    48be:	7a97      	ldrb	r7, [r2, #10]
    48c0:	1be7      	subs	r7, r4, r7
	glyph_data_offset = char_row_size * font->height *
    48c2:	4652      	mov	r2, sl
    48c4:	4357      	muls	r7, r2
    48c6:	435f      	muls	r7, r3
	glyph_data = font->data.progmem + glyph_data_offset;
    48c8:	b2bf      	uxth	r7, r7
    48ca:	465b      	mov	r3, fp
    48cc:	685b      	ldr	r3, [r3, #4]
    48ce:	469c      	mov	ip, r3
    48d0:	4467      	add	r7, ip
	gfx_coord_t inc_y = y;
    48d2:	9502      	str	r5, [sp, #8]
		for (i = 0; i < pixelsToDraw; i++) {
    48d4:	4643      	mov	r3, r8
    48d6:	9303      	str	r3, [sp, #12]
    48d8:	e020      	b.n	491c <gfx_mono_draw_char+0xb0>
			if ((glyph_byte & 0x80)) {
    48da:	b26b      	sxtb	r3, r5
    48dc:	2b00      	cmp	r3, #0
    48de:	db0d      	blt.n	48fc <gfx_mono_draw_char+0x90>
			inc_x += 1;
    48e0:	3401      	adds	r4, #1
    48e2:	b2e4      	uxtb	r4, r4
			glyph_byte <<= 1;
    48e4:	006d      	lsls	r5, r5, #1
    48e6:	b2ed      	uxtb	r5, r5
		for (i = 0; i < pixelsToDraw; i++) {
    48e8:	42a6      	cmp	r6, r4
    48ea:	d00d      	beq.n	4908 <gfx_mono_draw_char+0x9c>
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
    48ec:	4643      	mov	r3, r8
    48ee:	1ae3      	subs	r3, r4, r3
    48f0:	464a      	mov	r2, r9
    48f2:	421a      	tst	r2, r3
    48f4:	d1f1      	bne.n	48da <gfx_mono_draw_char+0x6e>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
    48f6:	783d      	ldrb	r5, [r7, #0]
				glyph_data++;
    48f8:	3701      	adds	r7, #1
    48fa:	e7ee      	b.n	48da <gfx_mono_draw_char+0x6e>
				gfx_mono_draw_pixel(inc_x, inc_y,
    48fc:	2201      	movs	r2, #1
    48fe:	9902      	ldr	r1, [sp, #8]
    4900:	0020      	movs	r0, r4
    4902:	4b0d      	ldr	r3, [pc, #52]	; (4938 <gfx_mono_draw_char+0xcc>)
    4904:	4798      	blx	r3
    4906:	e7eb      	b.n	48e0 <gfx_mono_draw_char+0x74>
		inc_y += 1;
    4908:	9b02      	ldr	r3, [sp, #8]
    490a:	3301      	adds	r3, #1
    490c:	b2db      	uxtb	r3, r3
    490e:	9302      	str	r3, [sp, #8]
		rows_left--;
    4910:	4653      	mov	r3, sl
    4912:	3b01      	subs	r3, #1
    4914:	b2db      	uxtb	r3, r3
    4916:	469a      	mov	sl, r3
	} while (rows_left > 0);
    4918:	2b00      	cmp	r3, #0
    491a:	d0bf      	beq.n	489c <gfx_mono_draw_char+0x30>
		uint8_t pixelsToDraw = font->width;
    491c:	465b      	mov	r3, fp
    491e:	7a1e      	ldrb	r6, [r3, #8]
		for (i = 0; i < pixelsToDraw; i++) {
    4920:	2e00      	cmp	r6, #0
    4922:	d0f1      	beq.n	4908 <gfx_mono_draw_char+0x9c>
    4924:	4446      	add	r6, r8
    4926:	b2f6      	uxtb	r6, r6
    4928:	9c03      	ldr	r4, [sp, #12]
    492a:	2500      	movs	r5, #0
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
    492c:	2307      	movs	r3, #7
    492e:	4699      	mov	r9, r3
    4930:	e7dc      	b.n	48ec <gfx_mono_draw_char+0x80>
    4932:	46c0      	nop			; (mov r8, r8)
    4934:	00004839 	.word	0x00004839
    4938:	00004a2d 	.word	0x00004a2d

0000493c <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
    493c:	b5f0      	push	{r4, r5, r6, r7, lr}
    493e:	46c6      	mov	lr, r8
    4940:	b500      	push	{lr}
    4942:	b082      	sub	sp, #8
    4944:	0004      	movs	r4, r0
    4946:	4690      	mov	r8, r2
    4948:	001f      	movs	r7, r3
    494a:	000d      	movs	r5, r1

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
    494c:	9101      	str	r1, [sp, #4]
    494e:	e009      	b.n	4964 <gfx_mono_draw_string+0x28>
			y += font->height + 1;
    4950:	7a7a      	ldrb	r2, [r7, #9]
    4952:	3201      	adds	r2, #1
    4954:	4442      	add	r2, r8
    4956:	b2d3      	uxtb	r3, r2
    4958:	4698      	mov	r8, r3
			x = start_of_string_position_x;
    495a:	9d01      	ldr	r5, [sp, #4]
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
			x += font->width;
		}
	} while (*(++str));
    495c:	3401      	adds	r4, #1
    495e:	7823      	ldrb	r3, [r4, #0]
    4960:	2b00      	cmp	r3, #0
    4962:	d00d      	beq.n	4980 <gfx_mono_draw_string+0x44>
		if (*str == '\n') {
    4964:	7820      	ldrb	r0, [r4, #0]
    4966:	280a      	cmp	r0, #10
    4968:	d0f2      	beq.n	4950 <gfx_mono_draw_string+0x14>
		} else if (*str == '\r') {
    496a:	280d      	cmp	r0, #13
    496c:	d0f6      	beq.n	495c <gfx_mono_draw_string+0x20>
			gfx_mono_draw_char(*str, x, y, font);
    496e:	003b      	movs	r3, r7
    4970:	4642      	mov	r2, r8
    4972:	0029      	movs	r1, r5
    4974:	4e04      	ldr	r6, [pc, #16]	; (4988 <gfx_mono_draw_string+0x4c>)
    4976:	47b0      	blx	r6
			x += font->width;
    4978:	7a3b      	ldrb	r3, [r7, #8]
    497a:	18ed      	adds	r5, r5, r3
    497c:	b2ed      	uxtb	r5, r5
    497e:	e7ed      	b.n	495c <gfx_mono_draw_string+0x20>
}
    4980:	b002      	add	sp, #8
    4982:	bc04      	pop	{r2}
    4984:	4690      	mov	r8, r2
    4986:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4988:	0000486d 	.word	0x0000486d

0000498c <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
    498c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    498e:	0004      	movs	r4, r0
    4990:	000f      	movs	r7, r1
    4992:	0015      	movs	r5, r2
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
    4994:	2b00      	cmp	r3, #0
    4996:	d103      	bne.n	49a0 <gfx_mono_ssd1306_put_byte+0x14>
    4998:	4b0d      	ldr	r3, [pc, #52]	; (49d0 <gfx_mono_ssd1306_put_byte+0x44>)
    499a:	4798      	blx	r3
    499c:	42a8      	cmp	r0, r5
    499e:	d015      	beq.n	49cc <gfx_mono_ssd1306_put_byte+0x40>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
    49a0:	002a      	movs	r2, r5
    49a2:	0039      	movs	r1, r7
    49a4:	0020      	movs	r0, r4
    49a6:	4b0b      	ldr	r3, [pc, #44]	; (49d4 <gfx_mono_ssd1306_put_byte+0x48>)
    49a8:	4798      	blx	r3
	address &= 0x0F;
    49aa:	260f      	movs	r6, #15
    49ac:	4034      	ands	r4, r6
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
    49ae:	20b0      	movs	r0, #176	; 0xb0
    49b0:	4320      	orrs	r0, r4
    49b2:	4c09      	ldr	r4, [pc, #36]	; (49d8 <gfx_mono_ssd1306_put_byte+0x4c>)
    49b4:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
    49b6:	0678      	lsls	r0, r7, #25
    49b8:	0f40      	lsrs	r0, r0, #29
    49ba:	2310      	movs	r3, #16
    49bc:	4318      	orrs	r0, r3
    49be:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
    49c0:	0030      	movs	r0, r6
    49c2:	4038      	ands	r0, r7
    49c4:	47a0      	blx	r4
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
    49c6:	0028      	movs	r0, r5
    49c8:	4b04      	ldr	r3, [pc, #16]	; (49dc <gfx_mono_ssd1306_put_byte+0x50>)
    49ca:	4798      	blx	r3
}
    49cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    49ce:	46c0      	nop			; (mov r8, r8)
    49d0:	00004761 	.word	0x00004761
    49d4:	00004751 	.word	0x00004751
    49d8:	00004461 	.word	0x00004461
    49dc:	00004661 	.word	0x00004661

000049e0 <gfx_mono_ssd1306_init>:
{
    49e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	gfx_mono_set_framebuffer(framebuffer);
    49e2:	480d      	ldr	r0, [pc, #52]	; (4a18 <gfx_mono_ssd1306_init+0x38>)
    49e4:	4b0d      	ldr	r3, [pc, #52]	; (4a1c <gfx_mono_ssd1306_init+0x3c>)
    49e6:	4798      	blx	r3
	ssd1306_init();
    49e8:	4b0d      	ldr	r3, [pc, #52]	; (4a20 <gfx_mono_ssd1306_init+0x40>)
    49ea:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
    49ec:	2040      	movs	r0, #64	; 0x40
    49ee:	4b0d      	ldr	r3, [pc, #52]	; (4a24 <gfx_mono_ssd1306_init+0x44>)
    49f0:	4798      	blx	r3
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
    49f2:	2500      	movs	r5, #0
{
    49f4:	2600      	movs	r6, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
    49f6:	4f0c      	ldr	r7, [pc, #48]	; (4a28 <gfx_mono_ssd1306_init+0x48>)
{
    49f8:	0034      	movs	r4, r6
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
    49fa:	2301      	movs	r3, #1
    49fc:	0032      	movs	r2, r6
    49fe:	0021      	movs	r1, r4
    4a00:	0028      	movs	r0, r5
    4a02:	47b8      	blx	r7
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
    4a04:	3401      	adds	r4, #1
    4a06:	b2e4      	uxtb	r4, r4
    4a08:	2c80      	cmp	r4, #128	; 0x80
    4a0a:	d1f6      	bne.n	49fa <gfx_mono_ssd1306_init+0x1a>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
    4a0c:	3501      	adds	r5, #1
    4a0e:	b2ed      	uxtb	r5, r5
    4a10:	2d04      	cmp	r5, #4
    4a12:	d1f1      	bne.n	49f8 <gfx_mono_ssd1306_init+0x18>
}
    4a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4a16:	46c0      	nop			; (mov r8, r8)
    4a18:	200000b0 	.word	0x200000b0
    4a1c:	00004745 	.word	0x00004745
    4a20:	000044ad 	.word	0x000044ad
    4a24:	00004461 	.word	0x00004461
    4a28:	0000498d 	.word	0x0000498d

00004a2c <gfx_mono_ssd1306_draw_pixel>:
{
    4a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a2e:	46c6      	mov	lr, r8
    4a30:	b500      	push	{lr}
    4a32:	0004      	movs	r4, r0
    4a34:	0015      	movs	r5, r2
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
    4a36:	b243      	sxtb	r3, r0
    4a38:	2b00      	cmp	r3, #0
    4a3a:	db01      	blt.n	4a40 <gfx_mono_ssd1306_draw_pixel+0x14>
    4a3c:	291f      	cmp	r1, #31
    4a3e:	d902      	bls.n	4a46 <gfx_mono_ssd1306_draw_pixel+0x1a>
}
    4a40:	bc04      	pop	{r2}
    4a42:	4690      	mov	r8, r2
    4a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
    4a46:	08cf      	lsrs	r7, r1, #3
	pixel_mask = (1 << (y - (page * 8)));
    4a48:	00fb      	lsls	r3, r7, #3
    4a4a:	1ac9      	subs	r1, r1, r3
    4a4c:	2601      	movs	r6, #1
    4a4e:	408e      	lsls	r6, r1
    4a50:	b2f3      	uxtb	r3, r6
    4a52:	4698      	mov	r8, r3
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
    4a54:	0001      	movs	r1, r0
    4a56:	0038      	movs	r0, r7
    4a58:	4b0c      	ldr	r3, [pc, #48]	; (4a8c <gfx_mono_ssd1306_draw_pixel+0x60>)
    4a5a:	4798      	blx	r3
    4a5c:	0002      	movs	r2, r0
	switch (color) {
    4a5e:	2d01      	cmp	r5, #1
    4a60:	d009      	beq.n	4a76 <gfx_mono_ssd1306_draw_pixel+0x4a>
    4a62:	2d00      	cmp	r5, #0
    4a64:	d00b      	beq.n	4a7e <gfx_mono_ssd1306_draw_pixel+0x52>
    4a66:	2d02      	cmp	r5, #2
    4a68:	d00c      	beq.n	4a84 <gfx_mono_ssd1306_draw_pixel+0x58>
	gfx_mono_put_byte(page, x, pixel_value);
    4a6a:	2300      	movs	r3, #0
    4a6c:	0021      	movs	r1, r4
    4a6e:	0038      	movs	r0, r7
    4a70:	4c07      	ldr	r4, [pc, #28]	; (4a90 <gfx_mono_ssd1306_draw_pixel+0x64>)
    4a72:	47a0      	blx	r4
    4a74:	e7e4      	b.n	4a40 <gfx_mono_ssd1306_draw_pixel+0x14>
		pixel_value |= pixel_mask;
    4a76:	4643      	mov	r3, r8
    4a78:	4303      	orrs	r3, r0
    4a7a:	b2da      	uxtb	r2, r3
		break;
    4a7c:	e7f5      	b.n	4a6a <gfx_mono_ssd1306_draw_pixel+0x3e>
		pixel_value &= ~pixel_mask;
    4a7e:	43b0      	bics	r0, r6
    4a80:	b2c2      	uxtb	r2, r0
		break;
    4a82:	e7f2      	b.n	4a6a <gfx_mono_ssd1306_draw_pixel+0x3e>
		pixel_value ^= pixel_mask;
    4a84:	4643      	mov	r3, r8
    4a86:	4043      	eors	r3, r0
    4a88:	b2da      	uxtb	r2, r3
		break;
    4a8a:	e7ee      	b.n	4a6a <gfx_mono_ssd1306_draw_pixel+0x3e>
    4a8c:	00004761 	.word	0x00004761
    4a90:	0000498d 	.word	0x0000498d

00004a94 <gfx_mono_ssd1306_get_byte>:
{
    4a94:	b510      	push	{r4, lr}
	return gfx_mono_framebuffer_get_byte(page, column);
    4a96:	4b01      	ldr	r3, [pc, #4]	; (4a9c <gfx_mono_ssd1306_get_byte+0x8>)
    4a98:	4798      	blx	r3
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
    4a9a:	bd10      	pop	{r4, pc}
    4a9c:	00004761 	.word	0x00004761

00004aa0 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    4aa0:	4b0c      	ldr	r3, [pc, #48]	; (4ad4 <cpu_irq_enter_critical+0x34>)
    4aa2:	681b      	ldr	r3, [r3, #0]
    4aa4:	2b00      	cmp	r3, #0
    4aa6:	d106      	bne.n	4ab6 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4aa8:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    4aac:	2b00      	cmp	r3, #0
    4aae:	d007      	beq.n	4ac0 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    4ab0:	2200      	movs	r2, #0
    4ab2:	4b09      	ldr	r3, [pc, #36]	; (4ad8 <cpu_irq_enter_critical+0x38>)
    4ab4:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    4ab6:	4a07      	ldr	r2, [pc, #28]	; (4ad4 <cpu_irq_enter_critical+0x34>)
    4ab8:	6813      	ldr	r3, [r2, #0]
    4aba:	3301      	adds	r3, #1
    4abc:	6013      	str	r3, [r2, #0]
}
    4abe:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    4ac0:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    4ac2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    4ac6:	2200      	movs	r2, #0
    4ac8:	4b04      	ldr	r3, [pc, #16]	; (4adc <cpu_irq_enter_critical+0x3c>)
    4aca:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    4acc:	3201      	adds	r2, #1
    4ace:	4b02      	ldr	r3, [pc, #8]	; (4ad8 <cpu_irq_enter_critical+0x38>)
    4ad0:	701a      	strb	r2, [r3, #0]
    4ad2:	e7f0      	b.n	4ab6 <cpu_irq_enter_critical+0x16>
    4ad4:	200002b0 	.word	0x200002b0
    4ad8:	200002b4 	.word	0x200002b4
    4adc:	20000014 	.word	0x20000014

00004ae0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    4ae0:	4b08      	ldr	r3, [pc, #32]	; (4b04 <cpu_irq_leave_critical+0x24>)
    4ae2:	681a      	ldr	r2, [r3, #0]
    4ae4:	3a01      	subs	r2, #1
    4ae6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    4ae8:	681b      	ldr	r3, [r3, #0]
    4aea:	2b00      	cmp	r3, #0
    4aec:	d109      	bne.n	4b02 <cpu_irq_leave_critical+0x22>
    4aee:	4b06      	ldr	r3, [pc, #24]	; (4b08 <cpu_irq_leave_critical+0x28>)
    4af0:	781b      	ldrb	r3, [r3, #0]
    4af2:	2b00      	cmp	r3, #0
    4af4:	d005      	beq.n	4b02 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    4af6:	2201      	movs	r2, #1
    4af8:	4b04      	ldr	r3, [pc, #16]	; (4b0c <cpu_irq_leave_critical+0x2c>)
    4afa:	701a      	strb	r2, [r3, #0]
    4afc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4b00:	b662      	cpsie	i
	}
}
    4b02:	4770      	bx	lr
    4b04:	200002b0 	.word	0x200002b0
    4b08:	200002b4 	.word	0x200002b4
    4b0c:	20000014 	.word	0x20000014

00004b10 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    4b10:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b12:	46c6      	mov	lr, r8
    4b14:	b500      	push	{lr}
    4b16:	b082      	sub	sp, #8
	config->input_pull = PORT_PIN_PULL_UP;
    4b18:	ac01      	add	r4, sp, #4
    4b1a:	2501      	movs	r5, #1
    4b1c:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    4b1e:	2300      	movs	r3, #0
    4b20:	4698      	mov	r8, r3
    4b22:	70a3      	strb	r3, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    4b24:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    4b26:	0021      	movs	r1, r4
    4b28:	2013      	movs	r0, #19
    4b2a:	4e12      	ldr	r6, [pc, #72]	; (4b74 <system_board_init+0x64>)
    4b2c:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    4b2e:	4f12      	ldr	r7, [pc, #72]	; (4b78 <system_board_init+0x68>)
    4b30:	2380      	movs	r3, #128	; 0x80
    4b32:	031b      	lsls	r3, r3, #12
    4b34:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	
	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    4b36:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_1_PIN, &pin_conf);
    4b38:	0021      	movs	r1, r4
    4b3a:	2012      	movs	r0, #18
    4b3c:	47b0      	blx	r6
    4b3e:	2380      	movs	r3, #128	; 0x80
    4b40:	02db      	lsls	r3, r3, #11
    4b42:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(LED_1_PIN, LED_1_INACTIVE);
#ifdef RFSWITCH_ENABLE
	/* Configure RFSWITCH as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    4b44:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(RF_SWITCH_PIN, &pin_conf);
    4b46:	0021      	movs	r1, r4
    4b48:	200d      	movs	r0, #13
    4b4a:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
    4b4c:	2380      	movs	r3, #128	; 0x80
    4b4e:	019b      	lsls	r3, r3, #6
    4b50:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
#endif

#ifdef TCXO_ENABLE
	/* Configure TXPO PWR as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    4b52:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(TCXO_PWR_PIN, &pin_conf);
    4b54:	0021      	movs	r1, r4
    4b56:	2009      	movs	r0, #9
    4b58:	47b0      	blx	r6
    4b5a:	2380      	movs	r3, #128	; 0x80
    4b5c:	009b      	lsls	r3, r3, #2
    4b5e:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
#endif
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    4b60:	4643      	mov	r3, r8
    4b62:	7023      	strb	r3, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    4b64:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    4b66:	0021      	movs	r1, r4
    4b68:	201c      	movs	r0, #28
    4b6a:	47b0      	blx	r6
		
}
    4b6c:	b002      	add	sp, #8
    4b6e:	bc04      	pop	{r2}
    4b70:	4690      	mov	r8, r2
    4b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b74:	00005171 	.word	0x00005171
    4b78:	40002800 	.word	0x40002800

00004b7c <aes_get_config_defaults>:
		struct aes_config *const config)
{

	/* Sanity check arguments */
	Assert(config);
	config->encrypt_mode = AES_ENCRYPTION;
    4b7c:	2301      	movs	r3, #1
    4b7e:	7003      	strb	r3, [r0, #0]
	config->key_size = AES_KEY_SIZE_128;
    4b80:	2300      	movs	r3, #0
    4b82:	7043      	strb	r3, [r0, #1]
	config->start_mode = AES_MANUAL_START;
    4b84:	7083      	strb	r3, [r0, #2]
	config->opmode= AES_ECB_MODE;
    4b86:	70c3      	strb	r3, [r0, #3]
	config->cfb_size = AES_CFB_SIZE_128;
    4b88:	7103      	strb	r3, [r0, #4]
	config->ctype = AES_COUNTERMEASURE_TYPE_ALL;
    4b8a:	220f      	movs	r2, #15
    4b8c:	7142      	strb	r2, [r0, #5]
	config->enable_xor_key = false;
    4b8e:	7183      	strb	r3, [r0, #6]
	config->enable_key_gen = false;
    4b90:	71c3      	strb	r3, [r0, #7]
	config->lod = false;
    4b92:	7203      	strb	r3, [r0, #8]
}
    4b94:	4770      	bx	lr

00004b96 <aes_enable>:
 */
void aes_enable(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLA.reg |= AES_CTRLA_ENABLE;
    4b96:	6802      	ldr	r2, [r0, #0]
    4b98:	6813      	ldr	r3, [r2, #0]
    4b9a:	2102      	movs	r1, #2
    4b9c:	430b      	orrs	r3, r1
    4b9e:	6013      	str	r3, [r2, #0]

}
    4ba0:	4770      	bx	lr

00004ba2 <aes_disable>:
{
	Assert(module);
	Assert(module->hw);

	/* Disbale interrupt */
	module->hw->INTENCLR.reg = AES_INTENCLR_MASK;
    4ba2:	2303      	movs	r3, #3
    4ba4:	6802      	ldr	r2, [r0, #0]
    4ba6:	7153      	strb	r3, [r2, #5]
	/* Clear interrupt flag */
	module->hw->INTFLAG.reg = AES_INTFLAG_MASK;
    4ba8:	6802      	ldr	r2, [r0, #0]
    4baa:	71d3      	strb	r3, [r2, #7]

	module->hw->CTRLA.reg &= (~AES_CTRLA_ENABLE);
    4bac:	6802      	ldr	r2, [r0, #0]
    4bae:	6813      	ldr	r3, [r2, #0]
    4bb0:	2102      	movs	r1, #2
    4bb2:	438b      	bics	r3, r1
    4bb4:	6013      	str	r3, [r2, #0]
}
    4bb6:	4770      	bx	lr

00004bb8 <aes_set_config>:
 */
void aes_set_config(
		struct aes_module *const module,
		Aes *const hw,
		struct aes_config *const config)
{
    4bb8:	b570      	push	{r4, r5, r6, lr}
    4bba:	0004      	movs	r4, r0
    4bbc:	000d      	movs	r5, r1
	/* Validate arguments. */
	Assert(hw);
	Assert(config);
	Assert(module);

	module->opmode = config->opmode;
    4bbe:	78d3      	ldrb	r3, [r2, #3]
    4bc0:	7103      	strb	r3, [r0, #4]
	module->hw = hw;
    4bc2:	6021      	str	r1, [r4, #0]
	module->key_size = config->key_size;
    4bc4:	7853      	ldrb	r3, [r2, #1]
    4bc6:	7143      	strb	r3, [r0, #5]
	module->cfb_size = config->cfb_size;
    4bc8:	7913      	ldrb	r3, [r2, #4]
    4bca:	7183      	strb	r3, [r0, #6]

	ul_mode |= (config->encrypt_mode << AES_CTRLA_CIPHER_Pos)
    4bcc:	7813      	ldrb	r3, [r2, #0]
    4bce:	029b      	lsls	r3, r3, #10
			 | (config->start_mode << AES_CTRLA_STARTMODE_Pos)
    4bd0:	7891      	ldrb	r1, [r2, #2]
    4bd2:	02c9      	lsls	r1, r1, #11
    4bd4:	430b      	orrs	r3, r1
			 | (config->key_size << AES_CTRLA_KEYSIZE_Pos)
    4bd6:	7851      	ldrb	r1, [r2, #1]
    4bd8:	0209      	lsls	r1, r1, #8
    4bda:	430b      	orrs	r3, r1
			 | (config->opmode << AES_CTRLA_AESMODE_Pos)
    4bdc:	78d1      	ldrb	r1, [r2, #3]
    4bde:	0089      	lsls	r1, r1, #2
    4be0:	430b      	orrs	r3, r1
			 | (config->cfb_size << AES_CTRLA_CFBS_Pos)
    4be2:	7911      	ldrb	r1, [r2, #4]
    4be4:	0149      	lsls	r1, r1, #5
    4be6:	430b      	orrs	r3, r1
			 | (AES_CTRLA_CTYPE(config->ctype))
			 | (config->enable_xor_key << AES_CTRLA_XORKEY_Pos)
    4be8:	7991      	ldrb	r1, [r2, #6]
    4bea:	0389      	lsls	r1, r1, #14
			 | (config->enable_key_gen << AES_CTRLA_KEYGEN_Pos)
    4bec:	79d0      	ldrb	r0, [r2, #7]
    4bee:	0340      	lsls	r0, r0, #13
			 | (config->lod << AES_CTRLA_LOD_Pos);
    4bf0:	4301      	orrs	r1, r0
    4bf2:	7a10      	ldrb	r0, [r2, #8]
    4bf4:	0300      	lsls	r0, r0, #12
    4bf6:	4301      	orrs	r1, r0
			 | (AES_CTRLA_CTYPE(config->ctype))
    4bf8:	7952      	ldrb	r2, [r2, #5]
    4bfa:	0412      	lsls	r2, r2, #16
    4bfc:	20f0      	movs	r0, #240	; 0xf0
    4bfe:	0300      	lsls	r0, r0, #12
    4c00:	4002      	ands	r2, r0
			 | (config->lod << AES_CTRLA_LOD_Pos);
    4c02:	430a      	orrs	r2, r1
    4c04:	4313      	orrs	r3, r2
    4c06:	001e      	movs	r6, r3
	if (hw->CTRLA.reg & AES_CTRLA_ENABLE) {
    4c08:	682b      	ldr	r3, [r5, #0]
    4c0a:	079b      	lsls	r3, r3, #30
    4c0c:	d401      	bmi.n	4c12 <aes_set_config+0x5a>
		aes_disable(module);
		hw->CTRLA.reg = ul_mode;
		aes_enable(module);
	} else {
		hw->CTRLA.reg = ul_mode;
    4c0e:	602e      	str	r6, [r5, #0]
	}
}
    4c10:	bd70      	pop	{r4, r5, r6, pc}
		aes_disable(module);
    4c12:	0020      	movs	r0, r4
    4c14:	4b03      	ldr	r3, [pc, #12]	; (4c24 <aes_set_config+0x6c>)
    4c16:	4798      	blx	r3
		hw->CTRLA.reg = ul_mode;
    4c18:	602e      	str	r6, [r5, #0]
		aes_enable(module);
    4c1a:	0020      	movs	r0, r4
    4c1c:	4b02      	ldr	r3, [pc, #8]	; (4c28 <aes_set_config+0x70>)
    4c1e:	4798      	blx	r3
    4c20:	e7f6      	b.n	4c10 <aes_set_config+0x58>
    4c22:	46c0      	nop			; (mov r8, r8)
    4c24:	00004ba3 	.word	0x00004ba3
    4c28:	00004b97 	.word	0x00004b97

00004c2c <aes_init>:
{
    4c2c:	b570      	push	{r4, r5, r6, lr}
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    4c2e:	4c05      	ldr	r4, [pc, #20]	; (4c44 <aes_init+0x18>)
    4c30:	69e5      	ldr	r5, [r4, #28]
    4c32:	2380      	movs	r3, #128	; 0x80
    4c34:	019b      	lsls	r3, r3, #6
    4c36:	432b      	orrs	r3, r5
    4c38:	61e3      	str	r3, [r4, #28]
	hw->CTRLA.reg = AES_CTRLA_SWRST;
    4c3a:	2301      	movs	r3, #1
    4c3c:	600b      	str	r3, [r1, #0]
	aes_set_config(module,hw, config);
    4c3e:	4b02      	ldr	r3, [pc, #8]	; (4c48 <aes_init+0x1c>)
    4c40:	4798      	blx	r3
}
    4c42:	bd70      	pop	{r4, r5, r6, pc}
    4c44:	40000400 	.word	0x40000400
    4c48:	00004bb9 	.word	0x00004bb9

00004c4c <aes_write_key>:
 * \note The key size depends on the current AES configuration.
 */
void aes_write_key(
		struct aes_module *const module,
		const uint32_t *key)
{
    4c4c:	b570      	push	{r4, r5, r6, lr}
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(key);

	switch (module->key_size) {
    4c4e:	7943      	ldrb	r3, [r0, #5]
    4c50:	2b01      	cmp	r3, #1
    4c52:	d005      	beq.n	4c60 <aes_write_key+0x14>
    4c54:	2b00      	cmp	r3, #0
    4c56:	d010      	beq.n	4c7a <aes_write_key+0x2e>
    4c58:	2b02      	cmp	r3, #2
    4c5a:	d10d      	bne.n	4c78 <aes_write_key+0x2c>
	case AES_KEY_SIZE_192:
		key_length = 6;
		break;

	case AES_KEY_SIZE_256:
		key_length = 8;
    4c5c:	2508      	movs	r5, #8
    4c5e:	e000      	b.n	4c62 <aes_write_key+0x16>
		key_length = 6;
    4c60:	2506      	movs	r5, #6
{
    4c62:	2300      	movs	r3, #0
	default:
		break;
	}

	for (i = 0; i < key_length; i++) {
		module->hw->KEYWORD[i].reg = *key;
    4c64:	c910      	ldmia	r1!, {r4}
    4c66:	1c9a      	adds	r2, r3, #2
    4c68:	0092      	lsls	r2, r2, #2
    4c6a:	6806      	ldr	r6, [r0, #0]
    4c6c:	46b4      	mov	ip, r6
    4c6e:	4462      	add	r2, ip
    4c70:	6054      	str	r4, [r2, #4]
	for (i = 0; i < key_length; i++) {
    4c72:	3301      	adds	r3, #1
    4c74:	42ab      	cmp	r3, r5
    4c76:	d3f5      	bcc.n	4c64 <aes_write_key+0x18>
		key++;
	}
}
    4c78:	bd70      	pop	{r4, r5, r6, pc}
		key_length = 4;
    4c7a:	2504      	movs	r5, #4
    4c7c:	e7f1      	b.n	4c62 <aes_write_key+0x16>
    4c7e:	Address 0x00004c7e is out of bounds.


00004c80 <aes_write_input_data>:
 * \param[in] input_data_buffer Pointer to an input data buffer
 */
void aes_write_input_data(
		struct aes_module *const module,
		const uint32_t *input_data_buffer)
{
    4c80:	b510      	push	{r4, lr}
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);;
	Assert(input_data_buffer);

	module->hw->DATABUFPTR.reg = 0;
    4c82:	2300      	movs	r3, #0
    4c84:	6802      	ldr	r2, [r0, #0]
    4c86:	7213      	strb	r3, [r2, #8]
	if (module->opmode == AES_CFB_MODE
		&& module->cfb_size == AES_CFB_SIZE_64){
    4c88:	4b0f      	ldr	r3, [pc, #60]	; (4cc8 <aes_write_input_data+0x48>)
    4c8a:	6842      	ldr	r2, [r0, #4]
    4c8c:	4013      	ands	r3, r2
	if (module->opmode == AES_CFB_MODE
    4c8e:	4a0f      	ldr	r2, [pc, #60]	; (4ccc <aes_write_input_data+0x4c>)
    4c90:	4293      	cmp	r3, r2
    4c92:	d00a      	beq.n	4caa <aes_write_input_data+0x2a>
		for (i = 0; i < 2; i++) {
			module->hw->INDATA.reg = *input_data_buffer;
			input_data_buffer++;
		}
	} else if (module->opmode == AES_CFB_MODE
    4c94:	7903      	ldrb	r3, [r0, #4]
    4c96:	2b03      	cmp	r3, #3
    4c98:	d00e      	beq.n	4cb8 <aes_write_input_data+0x38>
    4c9a:	000c      	movs	r4, r1
    4c9c:	3410      	adds	r4, #16
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
		module->hw->INDATA.reg = *input_data_buffer;
	} else {
		for (i = 0; i < 4; i++) {
			module->hw->INDATA.reg = *input_data_buffer;
    4c9e:	6803      	ldr	r3, [r0, #0]
    4ca0:	c904      	ldmia	r1!, {r2}
    4ca2:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < 4; i++) {
    4ca4:	428c      	cmp	r4, r1
    4ca6:	d1fa      	bne.n	4c9e <aes_write_input_data+0x1e>
			input_data_buffer++;
		}
	}
}
    4ca8:	bd10      	pop	{r4, pc}
			module->hw->INDATA.reg = *input_data_buffer;
    4caa:	6803      	ldr	r3, [r0, #0]
    4cac:	680a      	ldr	r2, [r1, #0]
    4cae:	639a      	str	r2, [r3, #56]	; 0x38
    4cb0:	6803      	ldr	r3, [r0, #0]
    4cb2:	684a      	ldr	r2, [r1, #4]
    4cb4:	639a      	str	r2, [r3, #56]	; 0x38
    4cb6:	e7f7      	b.n	4ca8 <aes_write_input_data+0x28>
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
    4cb8:	7983      	ldrb	r3, [r0, #6]
    4cba:	3b02      	subs	r3, #2
    4cbc:	2b01      	cmp	r3, #1
    4cbe:	d8ec      	bhi.n	4c9a <aes_write_input_data+0x1a>
		module->hw->INDATA.reg = *input_data_buffer;
    4cc0:	6803      	ldr	r3, [r0, #0]
    4cc2:	680a      	ldr	r2, [r1, #0]
    4cc4:	639a      	str	r2, [r3, #56]	; 0x38
    4cc6:	e7ef      	b.n	4ca8 <aes_write_input_data+0x28>
    4cc8:	00ff00ff 	.word	0x00ff00ff
    4ccc:	00010003 	.word	0x00010003

00004cd0 <aes_read_output_data>:
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(output_data_buffer);

	module->hw->DATABUFPTR.reg = 0;
    4cd0:	2300      	movs	r3, #0
    4cd2:	6802      	ldr	r2, [r0, #0]
    4cd4:	7213      	strb	r3, [r2, #8]
	if (module->opmode == AES_CFB_MODE
		&& module->cfb_size == AES_CFB_SIZE_64){
    4cd6:	4b10      	ldr	r3, [pc, #64]	; (4d18 <aes_read_output_data+0x48>)
    4cd8:	6842      	ldr	r2, [r0, #4]
    4cda:	4013      	ands	r3, r2
	if (module->opmode == AES_CFB_MODE
    4cdc:	4a0f      	ldr	r2, [pc, #60]	; (4d1c <aes_read_output_data+0x4c>)
    4cde:	4293      	cmp	r3, r2
    4ce0:	d00a      	beq.n	4cf8 <aes_read_output_data+0x28>
		for (i = 0; i < 2; i++) {
			*output_data_buffer = module->hw->INDATA.reg;
			output_data_buffer++;
		}
	} else if (module->opmode == AES_CFB_MODE
    4ce2:	7903      	ldrb	r3, [r0, #4]
    4ce4:	2b03      	cmp	r3, #3
    4ce6:	d00e      	beq.n	4d06 <aes_read_output_data+0x36>
    4ce8:	000a      	movs	r2, r1
    4cea:	3210      	adds	r2, #16
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
		*output_data_buffer = module->hw->INDATA.reg;
	} else {
		for (i = 0; i < 4; i++) {
			*output_data_buffer = module->hw->INDATA.reg;
    4cec:	6803      	ldr	r3, [r0, #0]
    4cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4cf0:	c108      	stmia	r1!, {r3}
		for (i = 0; i < 4; i++) {
    4cf2:	428a      	cmp	r2, r1
    4cf4:	d1fa      	bne.n	4cec <aes_read_output_data+0x1c>
			output_data_buffer++;
		}
	}
}
    4cf6:	4770      	bx	lr
			*output_data_buffer = module->hw->INDATA.reg;
    4cf8:	6803      	ldr	r3, [r0, #0]
    4cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4cfc:	600b      	str	r3, [r1, #0]
    4cfe:	6803      	ldr	r3, [r0, #0]
    4d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4d02:	604b      	str	r3, [r1, #4]
    4d04:	e7f7      	b.n	4cf6 <aes_read_output_data+0x26>
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
    4d06:	7983      	ldrb	r3, [r0, #6]
    4d08:	3b02      	subs	r3, #2
    4d0a:	2b01      	cmp	r3, #1
    4d0c:	d8ec      	bhi.n	4ce8 <aes_read_output_data+0x18>
		*output_data_buffer = module->hw->INDATA.reg;
    4d0e:	6803      	ldr	r3, [r0, #0]
    4d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4d12:	600b      	str	r3, [r1, #0]
    4d14:	e7ef      	b.n	4cf6 <aes_read_output_data+0x26>
    4d16:	46c0      	nop			; (mov r8, r8)
    4d18:	00ff00ff 	.word	0x00ff00ff
    4d1c:	00010003 	.word	0x00010003

00004d20 <AES_Handler>:

/**
* \internal The AES interrupt handler.
*/
void AES_Handler(void)
{
    4d20:	b510      	push	{r4, lr}
	uint32_t status = AES->INTFLAG.reg;
    4d22:	4b0c      	ldr	r3, [pc, #48]	; (4d54 <AES_Handler+0x34>)
    4d24:	79dc      	ldrb	r4, [r3, #7]
    4d26:	b2e4      	uxtb	r4, r4

	if (status & AES_INTFLAG_ENCCMP) {
    4d28:	07e3      	lsls	r3, r4, #31
    4d2a:	d507      	bpl.n	4d3c <AES_Handler+0x1c>
		if (aes_callback_pointer[AES_CALLBACK_ENCRYPTION_COMPLETE]) {
    4d2c:	4b0a      	ldr	r3, [pc, #40]	; (4d58 <AES_Handler+0x38>)
    4d2e:	681b      	ldr	r3, [r3, #0]
    4d30:	2b00      	cmp	r3, #0
    4d32:	d00d      	beq.n	4d50 <AES_Handler+0x30>
			AES->INTFLAG.reg = AES_INTFLAG_ENCCMP;
    4d34:	2101      	movs	r1, #1
    4d36:	4a07      	ldr	r2, [pc, #28]	; (4d54 <AES_Handler+0x34>)
    4d38:	71d1      	strb	r1, [r2, #7]
			aes_callback_pointer[AES_CALLBACK_ENCRYPTION_COMPLETE]();
    4d3a:	4798      	blx	r3
		}
	}

	if (status & AES_INTFLAG_GFMCMP) {
    4d3c:	07a3      	lsls	r3, r4, #30
    4d3e:	d507      	bpl.n	4d50 <AES_Handler+0x30>
		if (aes_callback_pointer[AES_CALLBACK_ENCRYPTION_COMPLETE]) {
    4d40:	4b05      	ldr	r3, [pc, #20]	; (4d58 <AES_Handler+0x38>)
    4d42:	681b      	ldr	r3, [r3, #0]
    4d44:	2b00      	cmp	r3, #0
    4d46:	d003      	beq.n	4d50 <AES_Handler+0x30>
			AES->INTFLAG.reg = AES_INTFLAG_GFMCMP;
    4d48:	2102      	movs	r1, #2
    4d4a:	4a02      	ldr	r2, [pc, #8]	; (4d54 <AES_Handler+0x34>)
    4d4c:	71d1      	strb	r1, [r2, #7]
			aes_callback_pointer[AES_CALLBACK_ENCRYPTION_COMPLETE]();
    4d4e:	4798      	blx	r3
		}
	}
}
    4d50:	bd10      	pop	{r4, pc}
    4d52:	46c0      	nop			; (mov r8, r8)
    4d54:	42003400 	.word	0x42003400
    4d58:	200002b8 	.word	0x200002b8

00004d5c <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4d5c:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    4d5e:	2a00      	cmp	r2, #0
    4d60:	d001      	beq.n	4d66 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    4d62:	0018      	movs	r0, r3
    4d64:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    4d66:	008b      	lsls	r3, r1, #2
    4d68:	4a06      	ldr	r2, [pc, #24]	; (4d84 <extint_register_callback+0x28>)
    4d6a:	589b      	ldr	r3, [r3, r2]
    4d6c:	2b00      	cmp	r3, #0
    4d6e:	d003      	beq.n	4d78 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    4d70:	4283      	cmp	r3, r0
    4d72:	d005      	beq.n	4d80 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    4d74:	231d      	movs	r3, #29
    4d76:	e7f4      	b.n	4d62 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    4d78:	0089      	lsls	r1, r1, #2
    4d7a:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    4d7c:	2300      	movs	r3, #0
    4d7e:	e7f0      	b.n	4d62 <extint_register_callback+0x6>
		return STATUS_OK;
    4d80:	2300      	movs	r3, #0
    4d82:	e7ee      	b.n	4d62 <extint_register_callback+0x6>
    4d84:	20002418 	.word	0x20002418

00004d88 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4d88:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    4d8a:	2900      	cmp	r1, #0
    4d8c:	d001      	beq.n	4d92 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    4d8e:	0018      	movs	r0, r3
    4d90:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    4d92:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    4d94:	281f      	cmp	r0, #31
    4d96:	d800      	bhi.n	4d9a <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    4d98:	4a02      	ldr	r2, [pc, #8]	; (4da4 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    4d9a:	2301      	movs	r3, #1
    4d9c:	4083      	lsls	r3, r0
    4d9e:	6113      	str	r3, [r2, #16]
	return STATUS_OK;
    4da0:	2300      	movs	r3, #0
    4da2:	e7f4      	b.n	4d8e <extint_chan_enable_callback+0x6>
    4da4:	40002400 	.word	0x40002400

00004da8 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4da8:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    4daa:	2900      	cmp	r1, #0
    4dac:	d001      	beq.n	4db2 <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    4dae:	0018      	movs	r0, r3
    4db0:	4770      	bx	lr
		return NULL;
    4db2:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    4db4:	281f      	cmp	r0, #31
    4db6:	d800      	bhi.n	4dba <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    4db8:	4a02      	ldr	r2, [pc, #8]	; (4dc4 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    4dba:	2301      	movs	r3, #1
    4dbc:	4083      	lsls	r3, r0
    4dbe:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    4dc0:	2300      	movs	r3, #0
    4dc2:	e7f4      	b.n	4dae <extint_chan_disable_callback+0x6>
    4dc4:	40002400 	.word	0x40002400

00004dc8 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    4dc8:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4dca:	2200      	movs	r2, #0
    4dcc:	4b10      	ldr	r3, [pc, #64]	; (4e10 <EIC_Handler+0x48>)
    4dce:	701a      	strb	r2, [r3, #0]
    4dd0:	2300      	movs	r3, #0
    4dd2:	4910      	ldr	r1, [pc, #64]	; (4e14 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    4dd4:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    4dd6:	4e10      	ldr	r6, [pc, #64]	; (4e18 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4dd8:	4c0d      	ldr	r4, [pc, #52]	; (4e10 <EIC_Handler+0x48>)
    4dda:	e00a      	b.n	4df2 <EIC_Handler+0x2a>
		return eics[eic_index];
    4ddc:	490d      	ldr	r1, [pc, #52]	; (4e14 <EIC_Handler+0x4c>)
    4dde:	e008      	b.n	4df2 <EIC_Handler+0x2a>
    4de0:	7823      	ldrb	r3, [r4, #0]
    4de2:	3301      	adds	r3, #1
    4de4:	b2db      	uxtb	r3, r3
    4de6:	7023      	strb	r3, [r4, #0]
    4de8:	2b0f      	cmp	r3, #15
    4dea:	d810      	bhi.n	4e0e <EIC_Handler+0x46>
		return NULL;
    4dec:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    4dee:	2b1f      	cmp	r3, #31
    4df0:	d9f4      	bls.n	4ddc <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    4df2:	0028      	movs	r0, r5
    4df4:	4018      	ands	r0, r3
    4df6:	2201      	movs	r2, #1
    4df8:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    4dfa:	6948      	ldr	r0, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
    4dfc:	4210      	tst	r0, r2
    4dfe:	d0ef      	beq.n	4de0 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    4e00:	614a      	str	r2, [r1, #20]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    4e02:	009b      	lsls	r3, r3, #2
    4e04:	599b      	ldr	r3, [r3, r6]
    4e06:	2b00      	cmp	r3, #0
    4e08:	d0ea      	beq.n	4de0 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    4e0a:	4798      	blx	r3
    4e0c:	e7e8      	b.n	4de0 <EIC_Handler+0x18>
			}
		}
	}
}
    4e0e:	bd70      	pop	{r4, r5, r6, pc}
    4e10:	20002417 	.word	0x20002417
    4e14:	40002400 	.word	0x40002400
    4e18:	20002418 	.word	0x20002418

00004e1c <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
    4e1c:	4a06      	ldr	r2, [pc, #24]	; (4e38 <_extint_enable+0x1c>)
    4e1e:	7813      	ldrb	r3, [r2, #0]
    4e20:	2102      	movs	r1, #2
    4e22:	430b      	orrs	r3, r1
    4e24:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4e26:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    4e28:	6853      	ldr	r3, [r2, #4]
    4e2a:	4219      	tst	r1, r3
    4e2c:	d1fc      	bne.n	4e28 <_extint_enable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4e2e:	6853      	ldr	r3, [r2, #4]
    4e30:	4218      	tst	r0, r3
    4e32:	d1f9      	bne.n	4e28 <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    4e34:	4770      	bx	lr
    4e36:	46c0      	nop			; (mov r8, r8)
    4e38:	40002400 	.word	0x40002400

00004e3c <_extint_disable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Disable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    4e3c:	4a06      	ldr	r2, [pc, #24]	; (4e58 <_extint_disable+0x1c>)
    4e3e:	7813      	ldrb	r3, [r2, #0]
    4e40:	2102      	movs	r1, #2
    4e42:	438b      	bics	r3, r1
    4e44:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4e46:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    4e48:	6853      	ldr	r3, [r2, #4]
    4e4a:	4219      	tst	r1, r3
    4e4c:	d1fc      	bne.n	4e48 <_extint_disable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4e4e:	6853      	ldr	r3, [r2, #4]
    4e50:	4218      	tst	r0, r3
    4e52:	d1f9      	bne.n	4e48 <_extint_disable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    4e54:	4770      	bx	lr
    4e56:	46c0      	nop			; (mov r8, r8)
    4e58:	40002400 	.word	0x40002400

00004e5c <_system_extint_init>:
{
    4e5c:	b510      	push	{r4, lr}
			MCLK->APBAMASK.reg |= mask;
    4e5e:	4a12      	ldr	r2, [pc, #72]	; (4ea8 <_system_extint_init+0x4c>)
    4e60:	6951      	ldr	r1, [r2, #20]
    4e62:	2380      	movs	r3, #128	; 0x80
    4e64:	009b      	lsls	r3, r3, #2
    4e66:	430b      	orrs	r3, r1
    4e68:	6153      	str	r3, [r2, #20]
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
    4e6a:	4a10      	ldr	r2, [pc, #64]	; (4eac <_system_extint_init+0x50>)
    4e6c:	7813      	ldrb	r3, [r2, #0]
    4e6e:	2101      	movs	r1, #1
    4e70:	430b      	orrs	r3, r1
    4e72:	7013      	strb	r3, [r2, #0]
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    4e74:	3101      	adds	r1, #1
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4e76:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    4e78:	6853      	ldr	r3, [r2, #4]
    4e7a:	4219      	tst	r1, r3
    4e7c:	d1fc      	bne.n	4e78 <_system_extint_init+0x1c>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4e7e:	6853      	ldr	r3, [r2, #4]
    4e80:	4218      	tst	r0, r3
    4e82:	d1f9      	bne.n	4e78 <_system_extint_init+0x1c>
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_ULP32K;
    4e84:	4a09      	ldr	r2, [pc, #36]	; (4eac <_system_extint_init+0x50>)
    4e86:	7813      	ldrb	r3, [r2, #0]
    4e88:	2110      	movs	r1, #16
    4e8a:	430b      	orrs	r3, r1
    4e8c:	7013      	strb	r3, [r2, #0]
    4e8e:	4b08      	ldr	r3, [pc, #32]	; (4eb0 <_system_extint_init+0x54>)
    4e90:	0019      	movs	r1, r3
    4e92:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    4e94:	2200      	movs	r2, #0
    4e96:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    4e98:	428b      	cmp	r3, r1
    4e9a:	d1fc      	bne.n	4e96 <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4e9c:	2208      	movs	r2, #8
    4e9e:	4b05      	ldr	r3, [pc, #20]	; (4eb4 <_system_extint_init+0x58>)
    4ea0:	601a      	str	r2, [r3, #0]
	_extint_enable();
    4ea2:	4b05      	ldr	r3, [pc, #20]	; (4eb8 <_system_extint_init+0x5c>)
    4ea4:	4798      	blx	r3
}
    4ea6:	bd10      	pop	{r4, pc}
    4ea8:	40000400 	.word	0x40000400
    4eac:	40002400 	.word	0x40002400
    4eb0:	20002418 	.word	0x20002418
    4eb4:	e000e100 	.word	0xe000e100
    4eb8:	00004e1d 	.word	0x00004e1d

00004ebc <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    4ebc:	2300      	movs	r3, #0
    4ebe:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    4ec0:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    4ec2:	2201      	movs	r2, #1
    4ec4:	7202      	strb	r2, [r0, #8]
	config->filter_input_signal = false;
    4ec6:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    4ec8:	3201      	adds	r2, #1
    4eca:	72c2      	strb	r2, [r0, #11]
	config->enable_async_edge_detection = false;
    4ecc:	7243      	strb	r3, [r0, #9]
}
    4ece:	4770      	bx	lr

00004ed0 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    4ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ed2:	b083      	sub	sp, #12
    4ed4:	0005      	movs	r5, r0
    4ed6:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);
	_extint_disable();
    4ed8:	4b1c      	ldr	r3, [pc, #112]	; (4f4c <extint_chan_set_config+0x7c>)
    4eda:	4798      	blx	r3
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4edc:	a901      	add	r1, sp, #4
    4ede:	2300      	movs	r3, #0
    4ee0:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    4ee2:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));
#endif
	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    4ee4:	7923      	ldrb	r3, [r4, #4]
    4ee6:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    4ee8:	7a23      	ldrb	r3, [r4, #8]
    4eea:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    4eec:	7820      	ldrb	r0, [r4, #0]
    4eee:	4b18      	ldr	r3, [pc, #96]	; (4f50 <extint_chan_set_config+0x80>)
    4ef0:	4798      	blx	r3
		return NULL;
    4ef2:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    4ef4:	2d1f      	cmp	r5, #31
    4ef6:	d800      	bhi.n	4efa <extint_chan_set_config+0x2a>
		return eics[eic_index];
    4ef8:	4916      	ldr	r1, [pc, #88]	; (4f54 <extint_chan_set_config+0x84>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    4efa:	2207      	movs	r2, #7
    4efc:	402a      	ands	r2, r5
    4efe:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    4f00:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    4f02:	7aa3      	ldrb	r3, [r4, #10]
    4f04:	2b00      	cmp	r3, #0
    4f06:	d001      	beq.n	4f0c <extint_chan_set_config+0x3c>
    4f08:	2308      	movs	r3, #8
    4f0a:	431f      	orrs	r7, r3
    4f0c:	08eb      	lsrs	r3, r5, #3
    4f0e:	009b      	lsls	r3, r3, #2
    4f10:	18cb      	adds	r3, r1, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    4f12:	69d8      	ldr	r0, [r3, #28]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    4f14:	260f      	movs	r6, #15
    4f16:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    4f18:	43b0      	bics	r0, r6
			(new_config << config_pos);
    4f1a:	4097      	lsls	r7, r2
    4f1c:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    4f1e:	4302      	orrs	r2, r0
		= (EIC_module->CONFIG[channel / 8].reg &
    4f20:	61da      	str	r2, [r3, #28]
#if (SAML22) || (SAML21XXXB) || (SAMC20) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	/* Config asynchronous edge detection */
	if (config->enable_async_edge_detection) {
    4f22:	7a63      	ldrb	r3, [r4, #9]
    4f24:	2b00      	cmp	r3, #0
    4f26:	d10b      	bne.n	4f40 <extint_chan_set_config+0x70>
		EIC_module->ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->ASYNCH.reg &= (EIC_ASYNCH_MASK & (~(1UL << channel)));
    4f28:	698a      	ldr	r2, [r1, #24]
    4f2a:	2301      	movs	r3, #1
    4f2c:	40ab      	lsls	r3, r5
    4f2e:	43db      	mvns	r3, r3
    4f30:	041b      	lsls	r3, r3, #16
    4f32:	0c1b      	lsrs	r3, r3, #16
    4f34:	4013      	ands	r3, r2
    4f36:	618b      	str	r3, [r1, #24]
		EIC_module->EIC_ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->EIC_ASYNCH.reg &= (EIC_EIC_ASYNCH_MASK & (~(1UL << channel)));
	}
#endif
	_extint_enable();
    4f38:	4b07      	ldr	r3, [pc, #28]	; (4f58 <extint_chan_set_config+0x88>)
    4f3a:	4798      	blx	r3
}
    4f3c:	b003      	add	sp, #12
    4f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->ASYNCH.reg |= (1UL << channel);
    4f40:	698a      	ldr	r2, [r1, #24]
    4f42:	2301      	movs	r3, #1
    4f44:	40ab      	lsls	r3, r5
    4f46:	4313      	orrs	r3, r2
    4f48:	618b      	str	r3, [r1, #24]
    4f4a:	e7f5      	b.n	4f38 <extint_chan_set_config+0x68>
    4f4c:	00004e3d 	.word	0x00004e3d
    4f50:	000071ad 	.word	0x000071ad
    4f54:	40002400 	.word	0x40002400
    4f58:	00004e1d 	.word	0x00004e1d

00004f5c <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    4f5c:	b530      	push	{r4, r5, lr}
    4f5e:	0004      	movs	r4, r0
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    4f60:	4a25      	ldr	r2, [pc, #148]	; (4ff8 <nvm_execute_command+0x9c>)
    4f62:	8810      	ldrh	r0, [r2, #0]
    4f64:	8853      	ldrh	r3, [r2, #2]
    4f66:	4343      	muls	r3, r0
    4f68:	428b      	cmp	r3, r1
    4f6a:	d20b      	bcs.n	4f84 <nvm_execute_command+0x28>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    4f6c:	2280      	movs	r2, #128	; 0x80
    4f6e:	0192      	lsls	r2, r2, #6
    4f70:	4b22      	ldr	r3, [pc, #136]	; (4ffc <nvm_execute_command+0xa0>)
    4f72:	18cb      	adds	r3, r1, r3
    4f74:	4293      	cmp	r3, r2
    4f76:	d905      	bls.n	4f84 <nvm_execute_command+0x28>
#ifdef FEATURE_NVM_RWWEE
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4f78:	4a21      	ldr	r2, [pc, #132]	; (5000 <nvm_execute_command+0xa4>)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    4f7a:	2018      	movs	r0, #24
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4f7c:	4b21      	ldr	r3, [pc, #132]	; (5004 <nvm_execute_command+0xa8>)
    4f7e:	18cb      	adds	r3, r1, r3
    4f80:	4293      	cmp	r3, r2
    4f82:	d80e      	bhi.n	4fa2 <nvm_execute_command+0x46>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    4f84:	4b20      	ldr	r3, [pc, #128]	; (5008 <nvm_execute_command+0xac>)
    4f86:	685d      	ldr	r5, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    4f88:	2280      	movs	r2, #128	; 0x80
    4f8a:	02d2      	lsls	r2, r2, #11
    4f8c:	432a      	orrs	r2, r5
    4f8e:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4f90:	2220      	movs	r2, #32
    4f92:	32ff      	adds	r2, #255	; 0xff
    4f94:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    4f96:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    4f98:	07db      	lsls	r3, r3, #31
    4f9a:	d403      	bmi.n	4fa4 <nvm_execute_command+0x48>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    4f9c:	4b1a      	ldr	r3, [pc, #104]	; (5008 <nvm_execute_command+0xac>)
    4f9e:	605d      	str	r5, [r3, #4]
		return STATUS_BUSY;
    4fa0:	2005      	movs	r0, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
    4fa2:	bd30      	pop	{r4, r5, pc}
	switch (command) {
    4fa4:	2c45      	cmp	r4, #69	; 0x45
    4fa6:	d822      	bhi.n	4fee <nvm_execute_command+0x92>
    4fa8:	00a3      	lsls	r3, r4, #2
    4faa:	4a18      	ldr	r2, [pc, #96]	; (500c <nvm_execute_command+0xb0>)
    4fac:	58d3      	ldr	r3, [r2, r3]
    4fae:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    4fb0:	4b15      	ldr	r3, [pc, #84]	; (5008 <nvm_execute_command+0xac>)
    4fb2:	8b1b      	ldrh	r3, [r3, #24]
    4fb4:	05db      	lsls	r3, r3, #23
    4fb6:	d503      	bpl.n	4fc0 <nvm_execute_command+0x64>
				nvm_module->CTRLB.reg = ctrlb_bak;
    4fb8:	4b13      	ldr	r3, [pc, #76]	; (5008 <nvm_execute_command+0xac>)
    4fba:	605d      	str	r5, [r3, #4]
				return STATUS_ERR_IO;
    4fbc:	2010      	movs	r0, #16
    4fbe:	e7f0      	b.n	4fa2 <nvm_execute_command+0x46>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    4fc0:	0889      	lsrs	r1, r1, #2
    4fc2:	0049      	lsls	r1, r1, #1
    4fc4:	4b10      	ldr	r3, [pc, #64]	; (5008 <nvm_execute_command+0xac>)
    4fc6:	61d9      	str	r1, [r3, #28]
			break;
    4fc8:	e003      	b.n	4fd2 <nvm_execute_command+0x76>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    4fca:	0889      	lsrs	r1, r1, #2
    4fcc:	0049      	lsls	r1, r1, #1
    4fce:	4b0e      	ldr	r3, [pc, #56]	; (5008 <nvm_execute_command+0xac>)
    4fd0:	61d9      	str	r1, [r3, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    4fd2:	20a5      	movs	r0, #165	; 0xa5
    4fd4:	0200      	lsls	r0, r0, #8
    4fd6:	4304      	orrs	r4, r0
    4fd8:	4b0b      	ldr	r3, [pc, #44]	; (5008 <nvm_execute_command+0xac>)
    4fda:	801c      	strh	r4, [r3, #0]
    4fdc:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    4fde:	2201      	movs	r2, #1
    4fe0:	7d0b      	ldrb	r3, [r1, #20]
    4fe2:	4213      	tst	r3, r2
    4fe4:	d0fc      	beq.n	4fe0 <nvm_execute_command+0x84>
	nvm_module->CTRLB.reg = ctrlb_bak;
    4fe6:	4b08      	ldr	r3, [pc, #32]	; (5008 <nvm_execute_command+0xac>)
    4fe8:	605d      	str	r5, [r3, #4]
	return STATUS_OK;
    4fea:	2000      	movs	r0, #0
    4fec:	e7d9      	b.n	4fa2 <nvm_execute_command+0x46>
			nvm_module->CTRLB.reg = ctrlb_bak;
    4fee:	4b06      	ldr	r3, [pc, #24]	; (5008 <nvm_execute_command+0xac>)
    4ff0:	605d      	str	r5, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    4ff2:	2017      	movs	r0, #23
    4ff4:	e7d5      	b.n	4fa2 <nvm_execute_command+0x46>
    4ff6:	46c0      	nop			; (mov r8, r8)
    4ff8:	200002c0 	.word	0x200002c0
    4ffc:	ff7fc000 	.word	0xff7fc000
    5000:	00001fff 	.word	0x00001fff
    5004:	ffc00000 	.word	0xffc00000
    5008:	41004000 	.word	0x41004000
    500c:	00019c84 	.word	0x00019c84

00005010 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    5010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    5012:	4b2f      	ldr	r3, [pc, #188]	; (50d0 <nvm_write_buffer+0xc0>)
    5014:	881c      	ldrh	r4, [r3, #0]
    5016:	885b      	ldrh	r3, [r3, #2]
    5018:	4363      	muls	r3, r4
	if (destination_address >
    501a:	4283      	cmp	r3, r0
    501c:	d207      	bcs.n	502e <nvm_write_buffer+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    501e:	4e2d      	ldr	r6, [pc, #180]	; (50d4 <nvm_write_buffer+0xc4>)
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    5020:	2518      	movs	r5, #24
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    5022:	4b2d      	ldr	r3, [pc, #180]	; (50d8 <nvm_write_buffer+0xc8>)
    5024:	18c3      	adds	r3, r0, r3
    5026:	42b3      	cmp	r3, r6
    5028:	d806      	bhi.n	5038 <nvm_write_buffer+0x28>
		}
		is_rww_eeprom = true;
    502a:	2601      	movs	r6, #1
    502c:	e000      	b.n	5030 <nvm_write_buffer+0x20>
	bool is_rww_eeprom = false;
    502e:	2600      	movs	r6, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
    5030:	1e63      	subs	r3, r4, #1
		return STATUS_ERR_BAD_ADDRESS;
    5032:	2518      	movs	r5, #24
	if (destination_address & (_nvm_dev.page_size - 1)) {
    5034:	4218      	tst	r0, r3
    5036:	d001      	beq.n	503c <nvm_write_buffer+0x2c>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
    5038:	0028      	movs	r0, r5
    503a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    503c:	3d01      	subs	r5, #1
	if (length > _nvm_dev.page_size) {
    503e:	4294      	cmp	r4, r2
    5040:	d3fa      	bcc.n	5038 <nvm_write_buffer+0x28>
    5042:	4b26      	ldr	r3, [pc, #152]	; (50dc <nvm_write_buffer+0xcc>)
    5044:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    5046:	3d12      	subs	r5, #18
	if (!nvm_is_ready()) {
    5048:	07db      	lsls	r3, r3, #31
    504a:	d5f5      	bpl.n	5038 <nvm_write_buffer+0x28>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    504c:	4c24      	ldr	r4, [pc, #144]	; (50e0 <nvm_write_buffer+0xd0>)
    504e:	4b23      	ldr	r3, [pc, #140]	; (50dc <nvm_write_buffer+0xcc>)
    5050:	801c      	strh	r4, [r3, #0]
    5052:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
    5054:	2401      	movs	r4, #1
    5056:	7d2b      	ldrb	r3, [r5, #20]
    5058:	4223      	tst	r3, r4
    505a:	d0fc      	beq.n	5056 <nvm_write_buffer+0x46>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    505c:	2420      	movs	r4, #32
    505e:	34ff      	adds	r4, #255	; 0xff
    5060:	4b1e      	ldr	r3, [pc, #120]	; (50dc <nvm_write_buffer+0xcc>)
    5062:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    5064:	2a00      	cmp	r2, #0
    5066:	d02c      	beq.n	50c2 <nvm_write_buffer+0xb2>
    5068:	2301      	movs	r3, #1
    506a:	0005      	movs	r5, r0
    506c:	439d      	bics	r5, r3
    506e:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    5070:	1e54      	subs	r4, r2, #1
    5072:	46a4      	mov	ip, r4
    5074:	e009      	b.n	508a <nvm_write_buffer+0x7a>
			data |= (buffer[i + 1] << 8);
    5076:	18cf      	adds	r7, r1, r3
    5078:	787f      	ldrb	r7, [r7, #1]
    507a:	023f      	lsls	r7, r7, #8
    507c:	433c      	orrs	r4, r7
		NVM_MEMORY[nvm_address++] = data;
    507e:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    5080:	3302      	adds	r3, #2
    5082:	b29b      	uxth	r3, r3
    5084:	3502      	adds	r5, #2
    5086:	429a      	cmp	r2, r3
    5088:	d904      	bls.n	5094 <nvm_write_buffer+0x84>
		data = buffer[i];
    508a:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
    508c:	4563      	cmp	r3, ip
    508e:	dbf2      	blt.n	5076 <nvm_write_buffer+0x66>
		data = buffer[i];
    5090:	b2a4      	uxth	r4, r4
    5092:	e7f4      	b.n	507e <nvm_write_buffer+0x6e>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    5094:	4b0e      	ldr	r3, [pc, #56]	; (50d0 <nvm_write_buffer+0xc0>)
    5096:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    5098:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    509a:	2b00      	cmp	r3, #0
    509c:	d1cc      	bne.n	5038 <nvm_write_buffer+0x28>
    509e:	2a3f      	cmp	r2, #63	; 0x3f
    50a0:	d8ca      	bhi.n	5038 <nvm_write_buffer+0x28>
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
    50a2:	2e00      	cmp	r6, #0
    50a4:	d106      	bne.n	50b4 <nvm_write_buffer+0xa4>
    50a6:	2200      	movs	r2, #0
    50a8:	0001      	movs	r1, r0
    50aa:	2004      	movs	r0, #4
    50ac:	4b0d      	ldr	r3, [pc, #52]	; (50e4 <nvm_write_buffer+0xd4>)
    50ae:	4798      	blx	r3
    50b0:	0005      	movs	r5, r0
    50b2:	e7c1      	b.n	5038 <nvm_write_buffer+0x28>
    50b4:	2200      	movs	r2, #0
    50b6:	0001      	movs	r1, r0
    50b8:	201c      	movs	r0, #28
    50ba:	4b0a      	ldr	r3, [pc, #40]	; (50e4 <nvm_write_buffer+0xd4>)
    50bc:	4798      	blx	r3
    50be:	0005      	movs	r5, r0
    50c0:	e7ba      	b.n	5038 <nvm_write_buffer+0x28>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    50c2:	4b03      	ldr	r3, [pc, #12]	; (50d0 <nvm_write_buffer+0xc0>)
    50c4:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    50c6:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    50c8:	2b00      	cmp	r3, #0
    50ca:	d0ea      	beq.n	50a2 <nvm_write_buffer+0x92>
    50cc:	e7b4      	b.n	5038 <nvm_write_buffer+0x28>
    50ce:	46c0      	nop			; (mov r8, r8)
    50d0:	200002c0 	.word	0x200002c0
    50d4:	00001fff 	.word	0x00001fff
    50d8:	ffc00000 	.word	0xffc00000
    50dc:	41004000 	.word	0x41004000
    50e0:	ffffa544 	.word	0xffffa544
    50e4:	00004f5d 	.word	0x00004f5d

000050e8 <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
    50e8:	b510      	push	{r4, lr}
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    50ea:	4a1b      	ldr	r2, [pc, #108]	; (5158 <nvm_erase_row+0x70>)
    50ec:	8813      	ldrh	r3, [r2, #0]
    50ee:	8852      	ldrh	r2, [r2, #2]
    50f0:	435a      	muls	r2, r3
	if (row_address >
    50f2:	4282      	cmp	r2, r0
    50f4:	d207      	bcs.n	5106 <nvm_erase_row+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    50f6:	4c19      	ldr	r4, [pc, #100]	; (515c <nvm_erase_row+0x74>)
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    50f8:	2218      	movs	r2, #24
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    50fa:	4919      	ldr	r1, [pc, #100]	; (5160 <nvm_erase_row+0x78>)
    50fc:	1841      	adds	r1, r0, r1
    50fe:	42a1      	cmp	r1, r4
    5100:	d807      	bhi.n	5112 <nvm_erase_row+0x2a>
		}
		is_rww_eeprom = true;
    5102:	2101      	movs	r1, #1
    5104:	e000      	b.n	5108 <nvm_erase_row+0x20>
		bool is_rww_eeprom = false;
    5106:	2100      	movs	r1, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    5108:	009b      	lsls	r3, r3, #2
    510a:	3b01      	subs	r3, #1
		return STATUS_ERR_BAD_ADDRESS;
    510c:	2218      	movs	r2, #24
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    510e:	4218      	tst	r0, r3
    5110:	d001      	beq.n	5116 <nvm_erase_row+0x2e>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
    5112:	0010      	movs	r0, r2
    5114:	bd10      	pop	{r4, pc}
    5116:	4b13      	ldr	r3, [pc, #76]	; (5164 <nvm_erase_row+0x7c>)
    5118:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    511a:	3a13      	subs	r2, #19
	if (!nvm_is_ready()) {
    511c:	07db      	lsls	r3, r3, #31
    511e:	d5f8      	bpl.n	5112 <nvm_erase_row+0x2a>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    5120:	4b10      	ldr	r3, [pc, #64]	; (5164 <nvm_erase_row+0x7c>)
    5122:	2220      	movs	r2, #32
    5124:	32ff      	adds	r2, #255	; 0xff
    5126:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    5128:	0880      	lsrs	r0, r0, #2
    512a:	0040      	lsls	r0, r0, #1
    512c:	61d8      	str	r0, [r3, #28]
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
    512e:	2900      	cmp	r1, #0
    5130:	d10f      	bne.n	5152 <nvm_erase_row+0x6a>
    5132:	4a0d      	ldr	r2, [pc, #52]	; (5168 <nvm_erase_row+0x80>)
    5134:	4b0b      	ldr	r3, [pc, #44]	; (5164 <nvm_erase_row+0x7c>)
    5136:	801a      	strh	r2, [r3, #0]
    5138:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    513a:	2201      	movs	r2, #1
    513c:	7d0b      	ldrb	r3, [r1, #20]
    513e:	4213      	tst	r3, r2
    5140:	d0fc      	beq.n	513c <nvm_erase_row+0x54>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    5142:	4b08      	ldr	r3, [pc, #32]	; (5164 <nvm_erase_row+0x7c>)
    5144:	8b1a      	ldrh	r2, [r3, #24]
    5146:	201c      	movs	r0, #28
    5148:	4002      	ands	r2, r0
	return STATUS_OK;
    514a:	1e50      	subs	r0, r2, #1
    514c:	4182      	sbcs	r2, r0
    514e:	0092      	lsls	r2, r2, #2
    5150:	e7df      	b.n	5112 <nvm_erase_row+0x2a>
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
    5152:	4a06      	ldr	r2, [pc, #24]	; (516c <nvm_erase_row+0x84>)
    5154:	e7ee      	b.n	5134 <nvm_erase_row+0x4c>
    5156:	46c0      	nop			; (mov r8, r8)
    5158:	200002c0 	.word	0x200002c0
    515c:	00001fff 	.word	0x00001fff
    5160:	ffc00000 	.word	0xffc00000
    5164:	41004000 	.word	0x41004000
    5168:	0000a502 	.word	0x0000a502
    516c:	0000a51a 	.word	0x0000a51a

00005170 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    5170:	b500      	push	{lr}
    5172:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5174:	ab01      	add	r3, sp, #4
    5176:	2280      	movs	r2, #128	; 0x80
    5178:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    517a:	780a      	ldrb	r2, [r1, #0]
    517c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    517e:	784a      	ldrb	r2, [r1, #1]
    5180:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    5182:	788a      	ldrb	r2, [r1, #2]
    5184:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    5186:	0019      	movs	r1, r3
    5188:	4b01      	ldr	r3, [pc, #4]	; (5190 <port_pin_set_config+0x20>)
    518a:	4798      	blx	r3
}
    518c:	b003      	add	sp, #12
    518e:	bd00      	pop	{pc}
    5190:	000071ad 	.word	0x000071ad

00005194 <rtc_count_is_syncing>:
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    5194:	6803      	ldr	r3, [r0, #0]

	if (rtc_module->MODE0.SYNCBUSY.reg) {
    5196:	6918      	ldr	r0, [r3, #16]
    5198:	1e43      	subs	r3, r0, #1
    519a:	4198      	sbcs	r0, r3
    519c:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
    519e:	4770      	bx	lr

000051a0 <rtc_count_get_count>:
 * Returns the current count value.
 *
 * \return The current counter value as a 32-bit unsigned integer.
 */
uint32_t rtc_count_get_count(struct rtc_module *const module)
{
    51a0:	b570      	push	{r4, r5, r6, lr}
    51a2:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    51a4:	6806      	ldr	r6, [r0, #0]

	/* Initialize return value. */
	uint32_t ret_val;

	while (rtc_count_is_syncing(module)) {
    51a6:	4d08      	ldr	r5, [pc, #32]	; (51c8 <rtc_count_get_count+0x28>)
    51a8:	0020      	movs	r0, r4
    51aa:	47a8      	blx	r5
    51ac:	2800      	cmp	r0, #0
    51ae:	d1fb      	bne.n	51a8 <rtc_count_get_count+0x8>
		/* Wait for synchronization */
	}

	/* Read value based on mode. */
	switch (module->mode) {
    51b0:	7923      	ldrb	r3, [r4, #4]
    51b2:	2b00      	cmp	r3, #0
    51b4:	d004      	beq.n	51c0 <rtc_count_get_count+0x20>
			break;

		default:
			Assert(false);
			/* Counter not initialized. Assume counter value 0.*/
			ret_val = 0;
    51b6:	2000      	movs	r0, #0
	switch (module->mode) {
    51b8:	2b01      	cmp	r3, #1
    51ba:	d100      	bne.n	51be <rtc_count_get_count+0x1e>
			ret_val = rtc_module->MODE0.COUNT.reg;
    51bc:	69b0      	ldr	r0, [r6, #24]
			break;
	}

	return ret_val;
}
    51be:	bd70      	pop	{r4, r5, r6, pc}
			ret_val = (uint32_t)rtc_module->MODE1.COUNT.reg;
    51c0:	8b30      	ldrh	r0, [r6, #24]
    51c2:	b280      	uxth	r0, r0
			break;
    51c4:	e7fb      	b.n	51be <rtc_count_get_count+0x1e>
    51c6:	46c0      	nop			; (mov r8, r8)
    51c8:	00005195 	.word	0x00005195

000051cc <rtc_count_disable_callback>:
 * \param[in]     callback_type Callback type to disable
 */
void rtc_count_disable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
    51cc:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    51ce:	6802      	ldr	r2, [r0, #0]

	/* Disable interrupt */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
    51d0:	290a      	cmp	r1, #10
    51d2:	d010      	beq.n	51f6 <rtc_count_disable_callback+0x2a>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_COUNT_CALLBACK_TAMPER) {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_TAMPER;
#endif
	} else if(callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    51d4:	2907      	cmp	r1, #7
    51d6:	d911      	bls.n	51fc <rtc_count_disable_callback+0x30>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7){
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
	}else {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_CMP(1 << (callback_type - RTC_PER_NUM));
    51d8:	2380      	movs	r3, #128	; 0x80
    51da:	005b      	lsls	r3, r3, #1
    51dc:	000c      	movs	r4, r1
    51de:	3c08      	subs	r4, #8
    51e0:	40a3      	lsls	r3, r4
    51e2:	24c0      	movs	r4, #192	; 0xc0
    51e4:	00a4      	lsls	r4, r4, #2
    51e6:	4023      	ands	r3, r4
    51e8:	8113      	strh	r3, [r2, #8]
	}

	/* Mark callback as disabled. */
	module->enabled_callback &= ~(1 << callback_type);
    51ea:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
    51ec:	2201      	movs	r2, #1
    51ee:	408a      	lsls	r2, r1
    51f0:	4393      	bics	r3, r2
    51f2:	86c3      	strh	r3, [r0, #54]	; 0x36
}
    51f4:	bd10      	pop	{r4, pc}
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
    51f6:	4b04      	ldr	r3, [pc, #16]	; (5208 <rtc_count_disable_callback+0x3c>)
    51f8:	8113      	strh	r3, [r2, #8]
    51fa:	e7f6      	b.n	51ea <rtc_count_disable_callback+0x1e>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
    51fc:	2401      	movs	r4, #1
    51fe:	408c      	lsls	r4, r1
    5200:	23ff      	movs	r3, #255	; 0xff
    5202:	4023      	ands	r3, r4
    5204:	8113      	strh	r3, [r2, #8]
    5206:	e7f0      	b.n	51ea <rtc_count_disable_callback+0x1e>
    5208:	ffff8000 	.word	0xffff8000

0000520c <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    520c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    520e:	46de      	mov	lr, fp
    5210:	4657      	mov	r7, sl
    5212:	464e      	mov	r6, r9
    5214:	4645      	mov	r5, r8
    5216:	b5e0      	push	{r5, r6, r7, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    5218:	4b2b      	ldr	r3, [pc, #172]	; (52c8 <RTC_Handler+0xbc>)
    521a:	681b      	ldr	r3, [r3, #0]
    521c:	469a      	mov	sl, r3
	Rtc *const rtc_module = module->hw;
    521e:	681e      	ldr	r6, [r3, #0]
	uint16_t callback_mask = module->enabled_callback;
    5220:	8edb      	ldrh	r3, [r3, #54]	; 0x36
	callback_mask &= module->registered_callback;
    5222:	4652      	mov	r2, sl
    5224:	8e92      	ldrh	r2, [r2, #52]	; 0x34
    5226:	401a      	ands	r2, r3
    5228:	4690      	mov	r8, r2
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
    522a:	89b2      	ldrh	r2, [r6, #12]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
    522c:	8973      	ldrh	r3, [r6, #10]
    522e:	4013      	ands	r3, r2
	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
    5230:	b21a      	sxth	r2, r3
    5232:	2a00      	cmp	r2, #0
    5234:	db08      	blt.n	5248 <RTC_Handler+0x3c>
    5236:	27ff      	movs	r7, #255	; 0xff
    5238:	401f      	ands	r7, r3
	} else if (interrupt_status & RTC_MODE1_INTFLAG_PER(0xff)) {
    523a:	d02a      	beq.n	5292 <RTC_Handler+0x86>
    523c:	2400      	movs	r4, #0
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    523e:	2301      	movs	r3, #1
    5240:	4699      	mov	r9, r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    5242:	33fe      	adds	r3, #254	; 0xfe
    5244:	469b      	mov	fp, r3
    5246:	e014      	b.n	5272 <RTC_Handler+0x66>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
    5248:	4643      	mov	r3, r8
    524a:	055b      	lsls	r3, r3, #21
    524c:	d407      	bmi.n	525e <RTC_Handler+0x52>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
    524e:	4b1f      	ldr	r3, [pc, #124]	; (52cc <RTC_Handler+0xc0>)
    5250:	81b3      	strh	r3, [r6, #12]
	_rtc_interrupt_handler(0);
}
    5252:	bc3c      	pop	{r2, r3, r4, r5}
    5254:	4690      	mov	r8, r2
    5256:	4699      	mov	r9, r3
    5258:	46a2      	mov	sl, r4
    525a:	46ab      	mov	fp, r5
    525c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
    525e:	4653      	mov	r3, sl
    5260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5262:	4798      	blx	r3
    5264:	e7f3      	b.n	524e <RTC_Handler+0x42>
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    5266:	465b      	mov	r3, fp
    5268:	401d      	ands	r5, r3
    526a:	81b5      	strh	r5, [r6, #12]
    526c:	3401      	adds	r4, #1
		for ( i = 0;i < RTC_PER_NUM;i++) {
    526e:	2c08      	cmp	r4, #8
    5270:	d0ef      	beq.n	5252 <RTC_Handler+0x46>
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    5272:	0023      	movs	r3, r4
    5274:	464d      	mov	r5, r9
    5276:	40a5      	lsls	r5, r4
    5278:	422f      	tst	r7, r5
    527a:	d0f4      	beq.n	5266 <RTC_Handler+0x5a>
			  && (callback_mask & (1 << i))) {
    527c:	4642      	mov	r2, r8
    527e:	4122      	asrs	r2, r4
    5280:	4649      	mov	r1, r9
    5282:	4211      	tst	r1, r2
    5284:	d0ef      	beq.n	5266 <RTC_Handler+0x5a>
				module->callbacks[i]();
    5286:	3302      	adds	r3, #2
    5288:	009b      	lsls	r3, r3, #2
    528a:	4652      	mov	r2, sl
    528c:	589b      	ldr	r3, [r3, r2]
    528e:	4798      	blx	r3
    5290:	e7e9      	b.n	5266 <RTC_Handler+0x5a>
	}else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
    5292:	05da      	lsls	r2, r3, #23
    5294:	d50a      	bpl.n	52ac <RTC_Handler+0xa0>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
    5296:	4643      	mov	r3, r8
    5298:	05db      	lsls	r3, r3, #23
    529a:	d403      	bmi.n	52a4 <RTC_Handler+0x98>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
    529c:	2380      	movs	r3, #128	; 0x80
    529e:	005b      	lsls	r3, r3, #1
    52a0:	81b3      	strh	r3, [r6, #12]
    52a2:	e7d6      	b.n	5252 <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
    52a4:	4653      	mov	r3, sl
    52a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    52a8:	4798      	blx	r3
    52aa:	e7f7      	b.n	529c <RTC_Handler+0x90>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
    52ac:	059b      	lsls	r3, r3, #22
    52ae:	d5d0      	bpl.n	5252 <RTC_Handler+0x46>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
    52b0:	4643      	mov	r3, r8
    52b2:	059b      	lsls	r3, r3, #22
    52b4:	d403      	bmi.n	52be <RTC_Handler+0xb2>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
    52b6:	2380      	movs	r3, #128	; 0x80
    52b8:	009b      	lsls	r3, r3, #2
    52ba:	81b3      	strh	r3, [r6, #12]
}
    52bc:	e7c9      	b.n	5252 <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
    52be:	4653      	mov	r3, sl
    52c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    52c2:	4798      	blx	r3
    52c4:	e7f7      	b.n	52b6 <RTC_Handler+0xaa>
    52c6:	46c0      	nop			; (mov r8, r8)
    52c8:	20002458 	.word	0x20002458
    52cc:	ffff8000 	.word	0xffff8000

000052d0 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    52d0:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    52d2:	2207      	movs	r2, #7
    52d4:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    52d6:	421a      	tst	r2, r3
    52d8:	d1fc      	bne.n	52d4 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
    52da:	4770      	bx	lr

000052dc <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    52dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    52de:	46d6      	mov	lr, sl
    52e0:	464f      	mov	r7, r9
    52e2:	4646      	mov	r6, r8
    52e4:	b5c0      	push	{r6, r7, lr}
    52e6:	b08a      	sub	sp, #40	; 0x28
    52e8:	0007      	movs	r7, r0
    52ea:	000e      	movs	r6, r1
    52ec:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    52ee:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    52f0:	0008      	movs	r0, r1
    52f2:	4b9c      	ldr	r3, [pc, #624]	; (5564 <i2c_master_init+0x288>)
    52f4:	4798      	blx	r3

#if (SAML22) || (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
    52f6:	2805      	cmp	r0, #5
    52f8:	d100      	bne.n	52fc <i2c_master_init+0x20>
    52fa:	e12b      	b.n	5554 <i2c_master_init+0x278>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    52fc:	0005      	movs	r5, r0
    52fe:	3512      	adds	r5, #18
			MCLK->APBCMASK.reg |= mask;
    5300:	4a99      	ldr	r2, [pc, #612]	; (5568 <i2c_master_init+0x28c>)
    5302:	69d1      	ldr	r1, [r2, #28]
	/* Turn on module in PM */
#if (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    5304:	2301      	movs	r3, #1
    5306:	4083      	lsls	r3, r0
    5308:	430b      	orrs	r3, r1
    530a:	61d3      	str	r3, [r2, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    530c:	a909      	add	r1, sp, #36	; 0x24
    530e:	7b23      	ldrb	r3, [r4, #12]
    5310:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    5312:	b2ed      	uxtb	r5, r5
    5314:	0028      	movs	r0, r5
    5316:	4b95      	ldr	r3, [pc, #596]	; (556c <i2c_master_init+0x290>)
    5318:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    531a:	0028      	movs	r0, r5
    531c:	4b94      	ldr	r3, [pc, #592]	; (5570 <i2c_master_init+0x294>)
    531e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    5320:	7b20      	ldrb	r0, [r4, #12]
    5322:	2100      	movs	r1, #0
    5324:	4b93      	ldr	r3, [pc, #588]	; (5574 <i2c_master_init+0x298>)
    5326:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    5328:	6833      	ldr	r3, [r6, #0]
		return STATUS_ERR_DENIED;
    532a:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    532c:	079b      	lsls	r3, r3, #30
    532e:	d505      	bpl.n	533c <i2c_master_init+0x60>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
    5330:	b00a      	add	sp, #40	; 0x28
    5332:	bc1c      	pop	{r2, r3, r4}
    5334:	4690      	mov	r8, r2
    5336:	4699      	mov	r9, r3
    5338:	46a2      	mov	sl, r4
    533a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    533c:	6833      	ldr	r3, [r6, #0]
		return STATUS_BUSY;
    533e:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    5340:	07db      	lsls	r3, r3, #31
    5342:	d4f5      	bmi.n	5330 <i2c_master_init+0x54>
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    5344:	2314      	movs	r3, #20
    5346:	6033      	str	r3, [r6, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5348:	683b      	ldr	r3, [r7, #0]
    534a:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    534c:	0018      	movs	r0, r3
    534e:	4b85      	ldr	r3, [pc, #532]	; (5564 <i2c_master_init+0x288>)
    5350:	4798      	blx	r3
    5352:	0005      	movs	r5, r0
    5354:	2380      	movs	r3, #128	; 0x80
    5356:	aa08      	add	r2, sp, #32
    5358:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    535a:	2300      	movs	r3, #0
    535c:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    535e:	2201      	movs	r2, #1
    5360:	a908      	add	r1, sp, #32
    5362:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
    5364:	70cb      	strb	r3, [r1, #3]
	uint32_t pad0 = config->pinmux_pad0;
    5366:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
    5368:	6a26      	ldr	r6, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
    536a:	2800      	cmp	r0, #0
    536c:	d100      	bne.n	5370 <i2c_master_init+0x94>
    536e:	e0ae      	b.n	54ce <i2c_master_init+0x1f2>
	pin_conf.mux_position = pad0 & 0xFFFF;
    5370:	ab08      	add	r3, sp, #32
    5372:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    5374:	2302      	movs	r3, #2
    5376:	aa08      	add	r2, sp, #32
    5378:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    537a:	0c00      	lsrs	r0, r0, #16
    537c:	b2c0      	uxtb	r0, r0
    537e:	0011      	movs	r1, r2
    5380:	4b7d      	ldr	r3, [pc, #500]	; (5578 <i2c_master_init+0x29c>)
    5382:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
    5384:	2e00      	cmp	r6, #0
    5386:	d100      	bne.n	538a <i2c_master_init+0xae>
    5388:	e0a6      	b.n	54d8 <i2c_master_init+0x1fc>
	pin_conf.mux_position = pad1 & 0xFFFF;
    538a:	ab08      	add	r3, sp, #32
    538c:	701e      	strb	r6, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    538e:	2302      	movs	r3, #2
    5390:	aa08      	add	r2, sp, #32
    5392:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    5394:	0c36      	lsrs	r6, r6, #16
    5396:	b2f0      	uxtb	r0, r6
    5398:	0011      	movs	r1, r2
    539a:	4b77      	ldr	r3, [pc, #476]	; (5578 <i2c_master_init+0x29c>)
    539c:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    539e:	8aa3      	ldrh	r3, [r4, #20]
    53a0:	80fb      	strh	r3, [r7, #6]
	module->buffer_timeout = config->buffer_timeout;
    53a2:	8ae3      	ldrh	r3, [r4, #22]
    53a4:	813b      	strh	r3, [r7, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
    53a6:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    53a8:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
    53aa:	2b00      	cmp	r3, #0
    53ac:	d104      	bne.n	53b8 <i2c_master_init+0xdc>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    53ae:	4b73      	ldr	r3, [pc, #460]	; (557c <i2c_master_init+0x2a0>)
    53b0:	789b      	ldrb	r3, [r3, #2]
    53b2:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    53b4:	0fdb      	lsrs	r3, r3, #31
    53b6:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
    53b8:	68a1      	ldr	r1, [r4, #8]
    53ba:	6923      	ldr	r3, [r4, #16]
    53bc:	430b      	orrs	r3, r1
    53be:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
    53c0:	2224      	movs	r2, #36	; 0x24
    53c2:	5ca2      	ldrb	r2, [r4, r2]
    53c4:	2a00      	cmp	r2, #0
    53c6:	d002      	beq.n	53ce <i2c_master_init+0xf2>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    53c8:	2280      	movs	r2, #128	; 0x80
    53ca:	05d2      	lsls	r2, r2, #23
    53cc:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
    53ce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    53d0:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    53d2:	222c      	movs	r2, #44	; 0x2c
    53d4:	5ca2      	ldrb	r2, [r4, r2]
    53d6:	2a00      	cmp	r2, #0
    53d8:	d103      	bne.n	53e2 <i2c_master_init+0x106>
    53da:	2280      	movs	r2, #128	; 0x80
    53dc:	0492      	lsls	r2, r2, #18
    53de:	4291      	cmp	r1, r2
    53e0:	d102      	bne.n	53e8 <i2c_master_init+0x10c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    53e2:	2280      	movs	r2, #128	; 0x80
    53e4:	0512      	lsls	r2, r2, #20
    53e6:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
    53e8:	222d      	movs	r2, #45	; 0x2d
    53ea:	5ca2      	ldrb	r2, [r4, r2]
    53ec:	2a00      	cmp	r2, #0
    53ee:	d002      	beq.n	53f6 <i2c_master_init+0x11a>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    53f0:	2280      	movs	r2, #128	; 0x80
    53f2:	0412      	lsls	r2, r2, #16
    53f4:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
    53f6:	222e      	movs	r2, #46	; 0x2e
    53f8:	5ca2      	ldrb	r2, [r4, r2]
    53fa:	2a00      	cmp	r2, #0
    53fc:	d002      	beq.n	5404 <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    53fe:	2280      	movs	r2, #128	; 0x80
    5400:	03d2      	lsls	r2, r2, #15
    5402:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
    5404:	4642      	mov	r2, r8
    5406:	6812      	ldr	r2, [r2, #0]
    5408:	4313      	orrs	r3, r2
    540a:	4642      	mov	r2, r8
    540c:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    540e:	2380      	movs	r3, #128	; 0x80
    5410:	005b      	lsls	r3, r3, #1
    5412:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    5414:	3512      	adds	r5, #18
    5416:	b2e8      	uxtb	r0, r5
    5418:	4b59      	ldr	r3, [pc, #356]	; (5580 <i2c_master_init+0x2a4>)
    541a:	4798      	blx	r3
    541c:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
    541e:	23fa      	movs	r3, #250	; 0xfa
    5420:	009b      	lsls	r3, r3, #2
    5422:	6822      	ldr	r2, [r4, #0]
    5424:	435a      	muls	r2, r3
    5426:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    5428:	6863      	ldr	r3, [r4, #4]
    542a:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
    542c:	4d55      	ldr	r5, [pc, #340]	; (5584 <i2c_master_init+0x2a8>)
    542e:	47a8      	blx	r5
    5430:	9000      	str	r0, [sp, #0]
    5432:	9101      	str	r1, [sp, #4]
    5434:	464b      	mov	r3, r9
    5436:	0058      	lsls	r0, r3, #1
    5438:	47a8      	blx	r5
    543a:	9002      	str	r0, [sp, #8]
    543c:	9103      	str	r1, [sp, #12]
    543e:	8e20      	ldrh	r0, [r4, #48]	; 0x30
    5440:	47a8      	blx	r5
    5442:	9004      	str	r0, [sp, #16]
    5444:	9105      	str	r1, [sp, #20]
    5446:	4f50      	ldr	r7, [pc, #320]	; (5588 <i2c_master_init+0x2ac>)
    5448:	4a50      	ldr	r2, [pc, #320]	; (558c <i2c_master_init+0x2b0>)
    544a:	4b51      	ldr	r3, [pc, #324]	; (5590 <i2c_master_init+0x2b4>)
    544c:	9800      	ldr	r0, [sp, #0]
    544e:	9901      	ldr	r1, [sp, #4]
    5450:	47b8      	blx	r7
    5452:	0002      	movs	r2, r0
    5454:	000b      	movs	r3, r1
    5456:	9804      	ldr	r0, [sp, #16]
    5458:	9905      	ldr	r1, [sp, #20]
    545a:	47b8      	blx	r7
    545c:	4e4d      	ldr	r6, [pc, #308]	; (5594 <i2c_master_init+0x2b8>)
    545e:	2200      	movs	r2, #0
    5460:	4b4d      	ldr	r3, [pc, #308]	; (5598 <i2c_master_init+0x2bc>)
    5462:	47b0      	blx	r6
    5464:	9004      	str	r0, [sp, #16]
    5466:	9105      	str	r1, [sp, #20]
    5468:	4648      	mov	r0, r9
    546a:	47a8      	blx	r5
    546c:	0002      	movs	r2, r0
    546e:	000b      	movs	r3, r1
    5470:	9804      	ldr	r0, [sp, #16]
    5472:	9905      	ldr	r1, [sp, #20]
    5474:	47b8      	blx	r7
    5476:	0002      	movs	r2, r0
    5478:	000b      	movs	r3, r1
    547a:	4d48      	ldr	r5, [pc, #288]	; (559c <i2c_master_init+0x2c0>)
    547c:	9800      	ldr	r0, [sp, #0]
    547e:	9901      	ldr	r1, [sp, #4]
    5480:	47a8      	blx	r5
    5482:	9a02      	ldr	r2, [sp, #8]
    5484:	9b03      	ldr	r3, [sp, #12]
    5486:	47b0      	blx	r6
    5488:	2200      	movs	r2, #0
    548a:	4b45      	ldr	r3, [pc, #276]	; (55a0 <i2c_master_init+0x2c4>)
    548c:	47a8      	blx	r5
    548e:	9a02      	ldr	r2, [sp, #8]
    5490:	9b03      	ldr	r3, [sp, #12]
    5492:	4d44      	ldr	r5, [pc, #272]	; (55a4 <i2c_master_init+0x2c8>)
    5494:	47a8      	blx	r5
    5496:	4b44      	ldr	r3, [pc, #272]	; (55a8 <i2c_master_init+0x2cc>)
    5498:	4798      	blx	r3
    549a:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    549c:	2380      	movs	r3, #128	; 0x80
    549e:	049b      	lsls	r3, r3, #18
    54a0:	68a2      	ldr	r2, [r4, #8]
    54a2:	429a      	cmp	r2, r3
    54a4:	d01e      	beq.n	54e4 <i2c_master_init+0x208>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    54a6:	0003      	movs	r3, r0
    54a8:	2040      	movs	r0, #64	; 0x40
    54aa:	2dff      	cmp	r5, #255	; 0xff
    54ac:	d900      	bls.n	54b0 <i2c_master_init+0x1d4>
    54ae:	e73f      	b.n	5330 <i2c_master_init+0x54>
	int32_t tmp_baudlow_hs = 0;
    54b0:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
    54b2:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    54b4:	25ff      	movs	r5, #255	; 0xff
    54b6:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    54b8:	0624      	lsls	r4, r4, #24
    54ba:	4325      	orrs	r5, r4
    54bc:	0400      	lsls	r0, r0, #16
    54be:	23ff      	movs	r3, #255	; 0xff
    54c0:	041b      	lsls	r3, r3, #16
    54c2:	4018      	ands	r0, r3
    54c4:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    54c6:	4643      	mov	r3, r8
    54c8:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
    54ca:	2000      	movs	r0, #0
    54cc:	e730      	b.n	5330 <i2c_master_init+0x54>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    54ce:	2100      	movs	r1, #0
    54d0:	4640      	mov	r0, r8
    54d2:	4b36      	ldr	r3, [pc, #216]	; (55ac <i2c_master_init+0x2d0>)
    54d4:	4798      	blx	r3
    54d6:	e74b      	b.n	5370 <i2c_master_init+0x94>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    54d8:	2101      	movs	r1, #1
    54da:	4640      	mov	r0, r8
    54dc:	4b33      	ldr	r3, [pc, #204]	; (55ac <i2c_master_init+0x2d0>)
    54de:	4798      	blx	r3
    54e0:	0006      	movs	r6, r0
    54e2:	e752      	b.n	538a <i2c_master_init+0xae>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    54e4:	26fa      	movs	r6, #250	; 0xfa
    54e6:	00b6      	lsls	r6, r6, #2
    54e8:	4653      	mov	r3, sl
    54ea:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    54ec:	9800      	ldr	r0, [sp, #0]
    54ee:	9901      	ldr	r1, [sp, #4]
    54f0:	0002      	movs	r2, r0
    54f2:	000b      	movs	r3, r1
    54f4:	4c27      	ldr	r4, [pc, #156]	; (5594 <i2c_master_init+0x2b8>)
    54f6:	47a0      	blx	r4
    54f8:	9000      	str	r0, [sp, #0]
    54fa:	9101      	str	r1, [sp, #4]
    54fc:	0030      	movs	r0, r6
    54fe:	4b21      	ldr	r3, [pc, #132]	; (5584 <i2c_master_init+0x2a8>)
    5500:	4798      	blx	r3
    5502:	2200      	movs	r2, #0
    5504:	4b2a      	ldr	r3, [pc, #168]	; (55b0 <i2c_master_init+0x2d4>)
    5506:	47b8      	blx	r7
    5508:	0002      	movs	r2, r0
    550a:	000b      	movs	r3, r1
    550c:	9800      	ldr	r0, [sp, #0]
    550e:	9901      	ldr	r1, [sp, #4]
    5510:	4c24      	ldr	r4, [pc, #144]	; (55a4 <i2c_master_init+0x2c8>)
    5512:	47a0      	blx	r4
    5514:	2200      	movs	r2, #0
    5516:	4b22      	ldr	r3, [pc, #136]	; (55a0 <i2c_master_init+0x2c4>)
    5518:	4c20      	ldr	r4, [pc, #128]	; (559c <i2c_master_init+0x2c0>)
    551a:	47a0      	blx	r4
    551c:	4b22      	ldr	r3, [pc, #136]	; (55a8 <i2c_master_init+0x2cc>)
    551e:	4798      	blx	r3
    5520:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
    5522:	d00c      	beq.n	553e <i2c_master_init+0x262>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    5524:	0031      	movs	r1, r6
    5526:	9807      	ldr	r0, [sp, #28]
    5528:	4b22      	ldr	r3, [pc, #136]	; (55b4 <i2c_master_init+0x2d8>)
    552a:	4798      	blx	r3
    552c:	3802      	subs	r0, #2
    552e:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    5530:	002b      	movs	r3, r5
    5532:	2dff      	cmp	r5, #255	; 0xff
    5534:	d80c      	bhi.n	5550 <i2c_master_init+0x274>
    5536:	28ff      	cmp	r0, #255	; 0xff
    5538:	d9bc      	bls.n	54b4 <i2c_master_init+0x1d8>
    553a:	2040      	movs	r0, #64	; 0x40
    553c:	e6f8      	b.n	5330 <i2c_master_init+0x54>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    553e:	0071      	lsls	r1, r6, #1
    5540:	1e48      	subs	r0, r1, #1
    5542:	9b07      	ldr	r3, [sp, #28]
    5544:	469c      	mov	ip, r3
    5546:	4460      	add	r0, ip
    5548:	4b1a      	ldr	r3, [pc, #104]	; (55b4 <i2c_master_init+0x2d8>)
    554a:	4798      	blx	r3
    554c:	3801      	subs	r0, #1
    554e:	e7ef      	b.n	5530 <i2c_master_init+0x254>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    5550:	2040      	movs	r0, #64	; 0x40
    5552:	e6ed      	b.n	5330 <i2c_master_init+0x54>
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    5554:	4a04      	ldr	r2, [pc, #16]	; (5568 <i2c_master_init+0x28c>)
    5556:	6a13      	ldr	r3, [r2, #32]
    5558:	2102      	movs	r1, #2
    555a:	430b      	orrs	r3, r1
    555c:	6213      	str	r3, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    555e:	2518      	movs	r5, #24
    5560:	e6d4      	b.n	530c <i2c_master_init+0x30>
    5562:	46c0      	nop			; (mov r8, r8)
    5564:	00005c3d 	.word	0x00005c3d
    5568:	40000400 	.word	0x40000400
    556c:	000070b1 	.word	0x000070b1
    5570:	00007041 	.word	0x00007041
    5574:	00005a95 	.word	0x00005a95
    5578:	000071ad 	.word	0x000071ad
    557c:	41002000 	.word	0x41002000
    5580:	000070d5 	.word	0x000070d5
    5584:	0001801d 	.word	0x0001801d
    5588:	00017405 	.word	0x00017405
    558c:	e826d695 	.word	0xe826d695
    5590:	3e112e0b 	.word	0x3e112e0b
    5594:	0001657d 	.word	0x0001657d
    5598:	40240000 	.word	0x40240000
    559c:	00017905 	.word	0x00017905
    55a0:	3ff00000 	.word	0x3ff00000
    55a4:	00016b9d 	.word	0x00016b9d
    55a8:	00017f31 	.word	0x00017f31
    55ac:	00005ae1 	.word	0x00005ae1
    55b0:	40080000 	.word	0x40080000
    55b4:	000150f9 	.word	0x000150f9

000055b8 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
    55b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    55ba:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    55bc:	6807      	ldr	r7, [r0, #0]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    55be:	4e08      	ldr	r6, [pc, #32]	; (55e0 <i2c_master_reset+0x28>)
    55c0:	47b0      	blx	r6
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    55c2:	6825      	ldr	r5, [r4, #0]
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    55c4:	0020      	movs	r0, r4
    55c6:	47b0      	blx	r6

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    55c8:	2383      	movs	r3, #131	; 0x83
    55ca:	752b      	strb	r3, [r5, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    55cc:	762b      	strb	r3, [r5, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    55ce:	682b      	ldr	r3, [r5, #0]
    55d0:	2202      	movs	r2, #2
    55d2:	4393      	bics	r3, r2
    55d4:	602b      	str	r3, [r5, #0]
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
	system_interrupt_leave_critical_section();
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    55d6:	0020      	movs	r0, r4
    55d8:	47b0      	blx	r6

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
    55da:	2301      	movs	r3, #1
    55dc:	603b      	str	r3, [r7, #0]
}
    55de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    55e0:	000052d1 	.word	0x000052d1

000055e4 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    55e4:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    55e6:	7e1a      	ldrb	r2, [r3, #24]
    55e8:	0792      	lsls	r2, r2, #30
    55ea:	d507      	bpl.n	55fc <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    55ec:	2202      	movs	r2, #2
    55ee:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    55f0:	8b5b      	ldrh	r3, [r3, #26]
    55f2:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    55f4:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    55f6:	17db      	asrs	r3, r3, #31
    55f8:	4018      	ands	r0, r3
}
    55fa:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    55fc:	8b5a      	ldrh	r2, [r3, #26]
    55fe:	0752      	lsls	r2, r2, #29
    5600:	d506      	bpl.n	5610 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    5602:	6859      	ldr	r1, [r3, #4]
    5604:	22c0      	movs	r2, #192	; 0xc0
    5606:	0292      	lsls	r2, r2, #10
    5608:	430a      	orrs	r2, r1
    560a:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
    560c:	2018      	movs	r0, #24
    560e:	e7f4      	b.n	55fa <_i2c_master_address_response+0x16>
	return STATUS_OK;
    5610:	2000      	movs	r0, #0
    5612:	e7f2      	b.n	55fa <_i2c_master_address_response+0x16>

00005614 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    5614:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5616:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    5618:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    561a:	2401      	movs	r4, #1
    561c:	2502      	movs	r5, #2
    561e:	7e11      	ldrb	r1, [r2, #24]
    5620:	4221      	tst	r1, r4
    5622:	d10b      	bne.n	563c <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    5624:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    5626:	4229      	tst	r1, r5
    5628:	d106      	bne.n	5638 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    562a:	3301      	adds	r3, #1
    562c:	b29b      	uxth	r3, r3
    562e:	8901      	ldrh	r1, [r0, #8]
    5630:	4299      	cmp	r1, r3
    5632:	d8f4      	bhi.n	561e <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
    5634:	2012      	movs	r0, #18
    5636:	e002      	b.n	563e <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
    5638:	2000      	movs	r0, #0
    563a:	e000      	b.n	563e <_i2c_master_wait_for_bus+0x2a>
    563c:	2000      	movs	r0, #0
}
    563e:	bd30      	pop	{r4, r5, pc}

00005640 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    5640:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5642:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5644:	6862      	ldr	r2, [r4, #4]
    5646:	2380      	movs	r3, #128	; 0x80
    5648:	02db      	lsls	r3, r3, #11
    564a:	4313      	orrs	r3, r2
    564c:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    564e:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    5650:	4b02      	ldr	r3, [pc, #8]	; (565c <_i2c_master_send_hs_master_code+0x1c>)
    5652:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    5654:	2301      	movs	r3, #1
    5656:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    5658:	bd10      	pop	{r4, pc}
    565a:	46c0      	nop			; (mov r8, r8)
    565c:	00005615 	.word	0x00005615

00005660 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    5660:	b5f0      	push	{r4, r5, r6, r7, lr}
    5662:	46de      	mov	lr, fp
    5664:	4657      	mov	r7, sl
    5666:	464e      	mov	r6, r9
    5668:	4645      	mov	r5, r8
    566a:	b5e0      	push	{r5, r6, r7, lr}
    566c:	b083      	sub	sp, #12
    566e:	0006      	movs	r6, r0
    5670:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5672:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    5674:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    5676:	682b      	ldr	r3, [r5, #0]
    5678:	011b      	lsls	r3, r3, #4
    567a:	0fdb      	lsrs	r3, r3, #31
    567c:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    567e:	7a4b      	ldrb	r3, [r1, #9]
    5680:	2b00      	cmp	r3, #0
    5682:	d12b      	bne.n	56dc <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    5684:	686b      	ldr	r3, [r5, #4]
    5686:	4a58      	ldr	r2, [pc, #352]	; (57e8 <_i2c_master_read_packet+0x188>)
    5688:	4013      	ands	r3, r2
    568a:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    568c:	464b      	mov	r3, r9
    568e:	7a1b      	ldrb	r3, [r3, #8]
    5690:	2b00      	cmp	r3, #0
    5692:	d127      	bne.n	56e4 <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    5694:	464b      	mov	r3, r9
    5696:	881b      	ldrh	r3, [r3, #0]
    5698:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    569a:	464a      	mov	r2, r9
    569c:	7a52      	ldrb	r2, [r2, #9]
    569e:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    56a0:	4313      	orrs	r3, r2
    56a2:	2201      	movs	r2, #1
    56a4:	4313      	orrs	r3, r2
    56a6:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    56a8:	0030      	movs	r0, r6
    56aa:	4b50      	ldr	r3, [pc, #320]	; (57ec <_i2c_master_read_packet+0x18c>)
    56ac:	4798      	blx	r3
    56ae:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    56b0:	4653      	mov	r3, sl
    56b2:	2b00      	cmp	r3, #0
    56b4:	d003      	beq.n	56be <_i2c_master_read_packet+0x5e>
    56b6:	464b      	mov	r3, r9
    56b8:	885b      	ldrh	r3, [r3, #2]
    56ba:	2b01      	cmp	r3, #1
    56bc:	d03b      	beq.n	5736 <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    56be:	686b      	ldr	r3, [r5, #4]
    56c0:	4a49      	ldr	r2, [pc, #292]	; (57e8 <_i2c_master_read_packet+0x188>)
    56c2:	4013      	ands	r3, r2
    56c4:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    56c6:	9b01      	ldr	r3, [sp, #4]
    56c8:	2b00      	cmp	r3, #0
    56ca:	d03a      	beq.n	5742 <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
    56cc:	9801      	ldr	r0, [sp, #4]
    56ce:	b003      	add	sp, #12
    56d0:	bc3c      	pop	{r2, r3, r4, r5}
    56d2:	4690      	mov	r8, r2
    56d4:	4699      	mov	r9, r3
    56d6:	46a2      	mov	sl, r4
    56d8:	46ab      	mov	fp, r5
    56da:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    56dc:	7a89      	ldrb	r1, [r1, #10]
    56de:	4b44      	ldr	r3, [pc, #272]	; (57f0 <_i2c_master_read_packet+0x190>)
    56e0:	4798      	blx	r3
    56e2:	e7cf      	b.n	5684 <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
    56e4:	464b      	mov	r3, r9
    56e6:	881b      	ldrh	r3, [r3, #0]
    56e8:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    56ea:	464a      	mov	r2, r9
    56ec:	7a52      	ldrb	r2, [r2, #9]
    56ee:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    56f0:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    56f2:	2280      	movs	r2, #128	; 0x80
    56f4:	0212      	lsls	r2, r2, #8
    56f6:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
    56f8:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
    56fa:	0030      	movs	r0, r6
    56fc:	4b3b      	ldr	r3, [pc, #236]	; (57ec <_i2c_master_read_packet+0x18c>)
    56fe:	4798      	blx	r3
    5700:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    5702:	686b      	ldr	r3, [r5, #4]
    5704:	4a38      	ldr	r2, [pc, #224]	; (57e8 <_i2c_master_read_packet+0x188>)
    5706:	4013      	ands	r3, r2
    5708:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
    570a:	2800      	cmp	r0, #0
    570c:	d1de      	bne.n	56cc <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
    570e:	0030      	movs	r0, r6
    5710:	4b38      	ldr	r3, [pc, #224]	; (57f4 <_i2c_master_read_packet+0x194>)
    5712:	4798      	blx	r3
    5714:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
    5716:	2800      	cmp	r0, #0
    5718:	d1d8      	bne.n	56cc <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    571a:	464b      	mov	r3, r9
    571c:	881b      	ldrh	r3, [r3, #0]
    571e:	0a1b      	lsrs	r3, r3, #8
    5720:	2278      	movs	r2, #120	; 0x78
    5722:	4313      	orrs	r3, r2
    5724:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    5726:	464a      	mov	r2, r9
    5728:	7a52      	ldrb	r2, [r2, #9]
    572a:	0392      	lsls	r2, r2, #14
    572c:	2101      	movs	r1, #1
    572e:	430a      	orrs	r2, r1
    5730:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    5732:	626b      	str	r3, [r5, #36]	; 0x24
    5734:	e7b8      	b.n	56a8 <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5736:	686a      	ldr	r2, [r5, #4]
    5738:	2380      	movs	r3, #128	; 0x80
    573a:	02db      	lsls	r3, r3, #11
    573c:	4313      	orrs	r3, r2
    573e:	606b      	str	r3, [r5, #4]
    5740:	e7c1      	b.n	56c6 <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
    5742:	0030      	movs	r0, r6
    5744:	4b2b      	ldr	r3, [pc, #172]	; (57f4 <_i2c_master_read_packet+0x194>)
    5746:	4798      	blx	r3
    5748:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    574a:	2800      	cmp	r0, #0
    574c:	d1be      	bne.n	56cc <_i2c_master_read_packet+0x6c>
    574e:	3c01      	subs	r4, #1
    5750:	b2a4      	uxth	r4, r4
    5752:	4680      	mov	r8, r0
		while (tmp_data_length--) {
    5754:	4b28      	ldr	r3, [pc, #160]	; (57f8 <_i2c_master_read_packet+0x198>)
    5756:	469b      	mov	fp, r3
    5758:	e015      	b.n	5786 <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    575a:	2c01      	cmp	r4, #1
    575c:	d020      	beq.n	57a0 <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
    575e:	0030      	movs	r0, r6
    5760:	4b26      	ldr	r3, [pc, #152]	; (57fc <_i2c_master_read_packet+0x19c>)
    5762:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    5764:	4643      	mov	r3, r8
    5766:	1c5f      	adds	r7, r3, #1
    5768:	b2bf      	uxth	r7, r7
    576a:	2328      	movs	r3, #40	; 0x28
    576c:	5ceb      	ldrb	r3, [r5, r3]
    576e:	464a      	mov	r2, r9
    5770:	6852      	ldr	r2, [r2, #4]
    5772:	4641      	mov	r1, r8
    5774:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
    5776:	0030      	movs	r0, r6
    5778:	4b1c      	ldr	r3, [pc, #112]	; (57ec <_i2c_master_read_packet+0x18c>)
    577a:	4798      	blx	r3
    577c:	3c01      	subs	r4, #1
    577e:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
    5780:	2800      	cmp	r0, #0
    5782:	d115      	bne.n	57b0 <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
    5784:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
    5786:	455c      	cmp	r4, fp
    5788:	d014      	beq.n	57b4 <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    578a:	8b6b      	ldrh	r3, [r5, #26]
    578c:	069b      	lsls	r3, r3, #26
    578e:	d527      	bpl.n	57e0 <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    5790:	7af3      	ldrb	r3, [r6, #11]
    5792:	2b00      	cmp	r3, #0
    5794:	d0e3      	beq.n	575e <_i2c_master_read_packet+0xfe>
    5796:	4653      	mov	r3, sl
    5798:	2b00      	cmp	r3, #0
    579a:	d1de      	bne.n	575a <_i2c_master_read_packet+0xfa>
    579c:	2c00      	cmp	r4, #0
    579e:	d1de      	bne.n	575e <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    57a0:	686a      	ldr	r2, [r5, #4]
    57a2:	2380      	movs	r3, #128	; 0x80
    57a4:	02db      	lsls	r3, r3, #11
    57a6:	4313      	orrs	r3, r2
    57a8:	606b      	str	r3, [r5, #4]
    57aa:	3c01      	subs	r4, #1
    57ac:	b2a4      	uxth	r4, r4
    57ae:	e7ea      	b.n	5786 <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
    57b0:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
    57b2:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    57b4:	7ab3      	ldrb	r3, [r6, #10]
    57b6:	2b00      	cmp	r3, #0
    57b8:	d109      	bne.n	57ce <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
    57ba:	0030      	movs	r0, r6
    57bc:	4b0f      	ldr	r3, [pc, #60]	; (57fc <_i2c_master_read_packet+0x19c>)
    57be:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    57c0:	2328      	movs	r3, #40	; 0x28
    57c2:	5cea      	ldrb	r2, [r5, r3]
    57c4:	464b      	mov	r3, r9
    57c6:	685b      	ldr	r3, [r3, #4]
    57c8:	4641      	mov	r1, r8
    57ca:	545a      	strb	r2, [r3, r1]
    57cc:	e77e      	b.n	56cc <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
    57ce:	0030      	movs	r0, r6
    57d0:	4b0a      	ldr	r3, [pc, #40]	; (57fc <_i2c_master_read_packet+0x19c>)
    57d2:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    57d4:	686a      	ldr	r2, [r5, #4]
    57d6:	23c0      	movs	r3, #192	; 0xc0
    57d8:	029b      	lsls	r3, r3, #10
    57da:	4313      	orrs	r3, r2
    57dc:	606b      	str	r3, [r5, #4]
    57de:	e7ec      	b.n	57ba <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
    57e0:	2341      	movs	r3, #65	; 0x41
    57e2:	9301      	str	r3, [sp, #4]
    57e4:	e772      	b.n	56cc <_i2c_master_read_packet+0x6c>
    57e6:	46c0      	nop			; (mov r8, r8)
    57e8:	fffbffff 	.word	0xfffbffff
    57ec:	00005615 	.word	0x00005615
    57f0:	00005641 	.word	0x00005641
    57f4:	000055e5 	.word	0x000055e5
    57f8:	0000ffff 	.word	0x0000ffff
    57fc:	000052d1 	.word	0x000052d1

00005800 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    5800:	b5f0      	push	{r4, r5, r6, r7, lr}
    5802:	46de      	mov	lr, fp
    5804:	4657      	mov	r7, sl
    5806:	464e      	mov	r6, r9
    5808:	4645      	mov	r5, r8
    580a:	b5e0      	push	{r5, r6, r7, lr}
    580c:	b083      	sub	sp, #12
    580e:	0006      	movs	r6, r0
    5810:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5812:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    5814:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
    5816:	4b32      	ldr	r3, [pc, #200]	; (58e0 <_i2c_master_write_packet+0xe0>)
    5818:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    581a:	7a7b      	ldrb	r3, [r7, #9]
    581c:	2b00      	cmp	r3, #0
    581e:	d11d      	bne.n	585c <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    5820:	686b      	ldr	r3, [r5, #4]
    5822:	4a30      	ldr	r2, [pc, #192]	; (58e4 <_i2c_master_write_packet+0xe4>)
    5824:	4013      	ands	r3, r2
    5826:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    5828:	7a3b      	ldrb	r3, [r7, #8]
    582a:	2b00      	cmp	r3, #0
    582c:	d01b      	beq.n	5866 <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    582e:	883b      	ldrh	r3, [r7, #0]
    5830:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    5832:	7a7a      	ldrb	r2, [r7, #9]
    5834:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    5836:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    5838:	2280      	movs	r2, #128	; 0x80
    583a:	0212      	lsls	r2, r2, #8
    583c:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    583e:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    5840:	0030      	movs	r0, r6
    5842:	4b29      	ldr	r3, [pc, #164]	; (58e8 <_i2c_master_write_packet+0xe8>)
    5844:	4798      	blx	r3
    5846:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    5848:	2800      	cmp	r0, #0
    584a:	d013      	beq.n	5874 <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
    584c:	9801      	ldr	r0, [sp, #4]
    584e:	b003      	add	sp, #12
    5850:	bc3c      	pop	{r2, r3, r4, r5}
    5852:	4690      	mov	r8, r2
    5854:	4699      	mov	r9, r3
    5856:	46a2      	mov	sl, r4
    5858:	46ab      	mov	fp, r5
    585a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    585c:	7ab9      	ldrb	r1, [r7, #10]
    585e:	0030      	movs	r0, r6
    5860:	4b22      	ldr	r3, [pc, #136]	; (58ec <_i2c_master_write_packet+0xec>)
    5862:	4798      	blx	r3
    5864:	e7dc      	b.n	5820 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    5866:	883b      	ldrh	r3, [r7, #0]
    5868:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    586a:	7a7a      	ldrb	r2, [r7, #9]
    586c:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    586e:	4313      	orrs	r3, r2
    5870:	626b      	str	r3, [r5, #36]	; 0x24
    5872:	e7e5      	b.n	5840 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
    5874:	0030      	movs	r0, r6
    5876:	4b1e      	ldr	r3, [pc, #120]	; (58f0 <_i2c_master_write_packet+0xf0>)
    5878:	4798      	blx	r3
    587a:	1e03      	subs	r3, r0, #0
    587c:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    587e:	d1e5      	bne.n	584c <_i2c_master_write_packet+0x4c>
    5880:	46a0      	mov	r8, r4
    5882:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    5884:	3320      	adds	r3, #32
    5886:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
    5888:	4b15      	ldr	r3, [pc, #84]	; (58e0 <_i2c_master_write_packet+0xe0>)
    588a:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
    588c:	4b16      	ldr	r3, [pc, #88]	; (58e8 <_i2c_master_write_packet+0xe8>)
    588e:	469a      	mov	sl, r3
		while (tmp_data_length--) {
    5890:	4544      	cmp	r4, r8
    5892:	d015      	beq.n	58c0 <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    5894:	8b6b      	ldrh	r3, [r5, #26]
    5896:	464a      	mov	r2, r9
    5898:	4213      	tst	r3, r2
    589a:	d01d      	beq.n	58d8 <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
    589c:	0030      	movs	r0, r6
    589e:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    58a0:	687b      	ldr	r3, [r7, #4]
    58a2:	5d1a      	ldrb	r2, [r3, r4]
    58a4:	2328      	movs	r3, #40	; 0x28
    58a6:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
    58a8:	0030      	movs	r0, r6
    58aa:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
    58ac:	2800      	cmp	r0, #0
    58ae:	d106      	bne.n	58be <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    58b0:	8b6b      	ldrh	r3, [r5, #26]
    58b2:	3401      	adds	r4, #1
    58b4:	075b      	lsls	r3, r3, #29
    58b6:	d5eb      	bpl.n	5890 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
    58b8:	231e      	movs	r3, #30
    58ba:	9301      	str	r3, [sp, #4]
    58bc:	e000      	b.n	58c0 <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
    58be:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    58c0:	7ab3      	ldrb	r3, [r6, #10]
    58c2:	2b00      	cmp	r3, #0
    58c4:	d0c2      	beq.n	584c <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
    58c6:	0030      	movs	r0, r6
    58c8:	4b05      	ldr	r3, [pc, #20]	; (58e0 <_i2c_master_write_packet+0xe0>)
    58ca:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    58cc:	686a      	ldr	r2, [r5, #4]
    58ce:	23c0      	movs	r3, #192	; 0xc0
    58d0:	029b      	lsls	r3, r3, #10
    58d2:	4313      	orrs	r3, r2
    58d4:	606b      	str	r3, [r5, #4]
    58d6:	e7b9      	b.n	584c <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
    58d8:	2341      	movs	r3, #65	; 0x41
    58da:	9301      	str	r3, [sp, #4]
    58dc:	e7b6      	b.n	584c <_i2c_master_write_packet+0x4c>
    58de:	46c0      	nop			; (mov r8, r8)
    58e0:	000052d1 	.word	0x000052d1
    58e4:	fffbffff 	.word	0xfffbffff
    58e8:	00005615 	.word	0x00005615
    58ec:	00005641 	.word	0x00005641
    58f0:	000055e5 	.word	0x000055e5

000058f4 <i2c_master_read_packet_wait>:
{
    58f4:	b510      	push	{r4, lr}
	module->send_stop = true;
    58f6:	2301      	movs	r3, #1
    58f8:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    58fa:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
    58fc:	4b01      	ldr	r3, [pc, #4]	; (5904 <i2c_master_read_packet_wait+0x10>)
    58fe:	4798      	blx	r3
}
    5900:	bd10      	pop	{r4, pc}
    5902:	46c0      	nop			; (mov r8, r8)
    5904:	00005661 	.word	0x00005661

00005908 <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    5908:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = false;
    590a:	2300      	movs	r3, #0
    590c:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    590e:	3301      	adds	r3, #1
    5910:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
    5912:	4b01      	ldr	r3, [pc, #4]	; (5918 <i2c_master_write_packet_wait_no_stop+0x10>)
    5914:	4798      	blx	r3
}
    5916:	bd10      	pop	{r4, pc}
    5918:	00005801 	.word	0x00005801

0000591c <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    591c:	b5f0      	push	{r4, r5, r6, r7, lr}
    591e:	46de      	mov	lr, fp
    5920:	4657      	mov	r7, sl
    5922:	464e      	mov	r6, r9
    5924:	4645      	mov	r5, r8
    5926:	b5e0      	push	{r5, r6, r7, lr}
    5928:	b087      	sub	sp, #28
    592a:	4680      	mov	r8, r0
    592c:	9104      	str	r1, [sp, #16]
    592e:	0016      	movs	r6, r2
    5930:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    5932:	2200      	movs	r2, #0
    5934:	2300      	movs	r3, #0
    5936:	2100      	movs	r1, #0
    5938:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    593a:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    593c:	2001      	movs	r0, #1
    593e:	0021      	movs	r1, r4
    5940:	9600      	str	r6, [sp, #0]
    5942:	9701      	str	r7, [sp, #4]
    5944:	465c      	mov	r4, fp
    5946:	9403      	str	r4, [sp, #12]
    5948:	4644      	mov	r4, r8
    594a:	9405      	str	r4, [sp, #20]
    594c:	e013      	b.n	5976 <long_division+0x5a>
    594e:	2420      	movs	r4, #32
    5950:	1a64      	subs	r4, r4, r1
    5952:	0005      	movs	r5, r0
    5954:	40e5      	lsrs	r5, r4
    5956:	46a8      	mov	r8, r5
    5958:	e014      	b.n	5984 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    595a:	9c00      	ldr	r4, [sp, #0]
    595c:	9d01      	ldr	r5, [sp, #4]
    595e:	1b12      	subs	r2, r2, r4
    5960:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    5962:	465c      	mov	r4, fp
    5964:	464d      	mov	r5, r9
    5966:	432c      	orrs	r4, r5
    5968:	46a3      	mov	fp, r4
    596a:	9c03      	ldr	r4, [sp, #12]
    596c:	4645      	mov	r5, r8
    596e:	432c      	orrs	r4, r5
    5970:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    5972:	3901      	subs	r1, #1
    5974:	d325      	bcc.n	59c2 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    5976:	2420      	movs	r4, #32
    5978:	4264      	negs	r4, r4
    597a:	190c      	adds	r4, r1, r4
    597c:	d4e7      	bmi.n	594e <long_division+0x32>
    597e:	0005      	movs	r5, r0
    5980:	40a5      	lsls	r5, r4
    5982:	46a8      	mov	r8, r5
    5984:	0004      	movs	r4, r0
    5986:	408c      	lsls	r4, r1
    5988:	46a1      	mov	r9, r4
		r = r << 1;
    598a:	1892      	adds	r2, r2, r2
    598c:	415b      	adcs	r3, r3
    598e:	0014      	movs	r4, r2
    5990:	001d      	movs	r5, r3
		if (n & bit_shift) {
    5992:	9e05      	ldr	r6, [sp, #20]
    5994:	464f      	mov	r7, r9
    5996:	403e      	ands	r6, r7
    5998:	46b4      	mov	ip, r6
    599a:	9e04      	ldr	r6, [sp, #16]
    599c:	4647      	mov	r7, r8
    599e:	403e      	ands	r6, r7
    59a0:	46b2      	mov	sl, r6
    59a2:	4666      	mov	r6, ip
    59a4:	4657      	mov	r7, sl
    59a6:	433e      	orrs	r6, r7
    59a8:	d003      	beq.n	59b2 <long_division+0x96>
			r |= 0x01;
    59aa:	0006      	movs	r6, r0
    59ac:	4326      	orrs	r6, r4
    59ae:	0032      	movs	r2, r6
    59b0:	002b      	movs	r3, r5
		if (r >= d) {
    59b2:	9c00      	ldr	r4, [sp, #0]
    59b4:	9d01      	ldr	r5, [sp, #4]
    59b6:	429d      	cmp	r5, r3
    59b8:	d8db      	bhi.n	5972 <long_division+0x56>
    59ba:	d1ce      	bne.n	595a <long_division+0x3e>
    59bc:	4294      	cmp	r4, r2
    59be:	d8d8      	bhi.n	5972 <long_division+0x56>
    59c0:	e7cb      	b.n	595a <long_division+0x3e>
    59c2:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    59c4:	4658      	mov	r0, fp
    59c6:	0019      	movs	r1, r3
    59c8:	b007      	add	sp, #28
    59ca:	bc3c      	pop	{r2, r3, r4, r5}
    59cc:	4690      	mov	r8, r2
    59ce:	4699      	mov	r9, r3
    59d0:	46a2      	mov	sl, r4
    59d2:	46ab      	mov	fp, r5
    59d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000059d6 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    59d6:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    59d8:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    59da:	2340      	movs	r3, #64	; 0x40
    59dc:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    59de:	4281      	cmp	r1, r0
    59e0:	d202      	bcs.n	59e8 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    59e2:	0018      	movs	r0, r3
    59e4:	bd10      	pop	{r4, pc}
		baud_calculated++;
    59e6:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    59e8:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    59ea:	1c63      	adds	r3, r4, #1
    59ec:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    59ee:	4288      	cmp	r0, r1
    59f0:	d9f9      	bls.n	59e6 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    59f2:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    59f4:	2cff      	cmp	r4, #255	; 0xff
    59f6:	d8f4      	bhi.n	59e2 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    59f8:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    59fa:	2300      	movs	r3, #0
    59fc:	e7f1      	b.n	59e2 <_sercom_get_sync_baud_val+0xc>
    59fe:	Address 0x000059fe is out of bounds.


00005a00 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    5a00:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a02:	b083      	sub	sp, #12
    5a04:	000f      	movs	r7, r1
    5a06:	0016      	movs	r6, r2
    5a08:	aa08      	add	r2, sp, #32
    5a0a:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    5a0c:	0004      	movs	r4, r0
    5a0e:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5a10:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    5a12:	42bc      	cmp	r4, r7
    5a14:	d902      	bls.n	5a1c <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    5a16:	0010      	movs	r0, r2
    5a18:	b003      	add	sp, #12
    5a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    5a1c:	2b00      	cmp	r3, #0
    5a1e:	d114      	bne.n	5a4a <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    5a20:	0002      	movs	r2, r0
    5a22:	0008      	movs	r0, r1
    5a24:	2100      	movs	r1, #0
    5a26:	4c19      	ldr	r4, [pc, #100]	; (5a8c <_sercom_get_async_baud_val+0x8c>)
    5a28:	47a0      	blx	r4
    5a2a:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    5a2c:	003a      	movs	r2, r7
    5a2e:	2300      	movs	r3, #0
    5a30:	2000      	movs	r0, #0
    5a32:	4c17      	ldr	r4, [pc, #92]	; (5a90 <_sercom_get_async_baud_val+0x90>)
    5a34:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    5a36:	2200      	movs	r2, #0
    5a38:	2301      	movs	r3, #1
    5a3a:	1a12      	subs	r2, r2, r0
    5a3c:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    5a3e:	0c12      	lsrs	r2, r2, #16
    5a40:	041b      	lsls	r3, r3, #16
    5a42:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    5a44:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    5a46:	2200      	movs	r2, #0
    5a48:	e7e5      	b.n	5a16 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    5a4a:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    5a4c:	2b01      	cmp	r3, #1
    5a4e:	d1f9      	bne.n	5a44 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    5a50:	000a      	movs	r2, r1
    5a52:	2300      	movs	r3, #0
    5a54:	2100      	movs	r1, #0
    5a56:	4c0d      	ldr	r4, [pc, #52]	; (5a8c <_sercom_get_async_baud_val+0x8c>)
    5a58:	47a0      	blx	r4
    5a5a:	0002      	movs	r2, r0
    5a5c:	000b      	movs	r3, r1
    5a5e:	9200      	str	r2, [sp, #0]
    5a60:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    5a62:	0038      	movs	r0, r7
    5a64:	2100      	movs	r1, #0
    5a66:	4c0a      	ldr	r4, [pc, #40]	; (5a90 <_sercom_get_async_baud_val+0x90>)
    5a68:	47a0      	blx	r4
    5a6a:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    5a6c:	2380      	movs	r3, #128	; 0x80
    5a6e:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5a70:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    5a72:	4298      	cmp	r0, r3
    5a74:	d8cf      	bhi.n	5a16 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    5a76:	0f79      	lsrs	r1, r7, #29
    5a78:	00f8      	lsls	r0, r7, #3
    5a7a:	9a00      	ldr	r2, [sp, #0]
    5a7c:	9b01      	ldr	r3, [sp, #4]
    5a7e:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    5a80:	00ea      	lsls	r2, r5, #3
    5a82:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    5a84:	b2d2      	uxtb	r2, r2
    5a86:	0352      	lsls	r2, r2, #13
    5a88:	432a      	orrs	r2, r5
    5a8a:	e7db      	b.n	5a44 <_sercom_get_async_baud_val+0x44>
    5a8c:	00015515 	.word	0x00015515
    5a90:	0000591d 	.word	0x0000591d

00005a94 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    5a94:	b510      	push	{r4, lr}
    5a96:	b082      	sub	sp, #8
    5a98:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    5a9a:	4b0e      	ldr	r3, [pc, #56]	; (5ad4 <sercom_set_gclk_generator+0x40>)
    5a9c:	781b      	ldrb	r3, [r3, #0]
    5a9e:	2b00      	cmp	r3, #0
    5aa0:	d007      	beq.n	5ab2 <sercom_set_gclk_generator+0x1e>
    5aa2:	2900      	cmp	r1, #0
    5aa4:	d105      	bne.n	5ab2 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    5aa6:	4b0b      	ldr	r3, [pc, #44]	; (5ad4 <sercom_set_gclk_generator+0x40>)
    5aa8:	785b      	ldrb	r3, [r3, #1]
    5aaa:	4283      	cmp	r3, r0
    5aac:	d010      	beq.n	5ad0 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    5aae:	201d      	movs	r0, #29
    5ab0:	e00c      	b.n	5acc <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    5ab2:	a901      	add	r1, sp, #4
    5ab4:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    5ab6:	2011      	movs	r0, #17
    5ab8:	4b07      	ldr	r3, [pc, #28]	; (5ad8 <sercom_set_gclk_generator+0x44>)
    5aba:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    5abc:	2011      	movs	r0, #17
    5abe:	4b07      	ldr	r3, [pc, #28]	; (5adc <sercom_set_gclk_generator+0x48>)
    5ac0:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    5ac2:	4b04      	ldr	r3, [pc, #16]	; (5ad4 <sercom_set_gclk_generator+0x40>)
    5ac4:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    5ac6:	2201      	movs	r2, #1
    5ac8:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    5aca:	2000      	movs	r0, #0
}
    5acc:	b002      	add	sp, #8
    5ace:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    5ad0:	2000      	movs	r0, #0
    5ad2:	e7fb      	b.n	5acc <sercom_set_gclk_generator+0x38>
    5ad4:	200002c8 	.word	0x200002c8
    5ad8:	000070b1 	.word	0x000070b1
    5adc:	00007041 	.word	0x00007041

00005ae0 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    5ae0:	4b3c      	ldr	r3, [pc, #240]	; (5bd4 <_sercom_get_default_pad+0xf4>)
    5ae2:	4298      	cmp	r0, r3
    5ae4:	d032      	beq.n	5b4c <_sercom_get_default_pad+0x6c>
    5ae6:	d90a      	bls.n	5afe <_sercom_get_default_pad+0x1e>
    5ae8:	4b3b      	ldr	r3, [pc, #236]	; (5bd8 <_sercom_get_default_pad+0xf8>)
    5aea:	4298      	cmp	r0, r3
    5aec:	d04e      	beq.n	5b8c <_sercom_get_default_pad+0xac>
    5aee:	4b3b      	ldr	r3, [pc, #236]	; (5bdc <_sercom_get_default_pad+0xfc>)
    5af0:	4298      	cmp	r0, r3
    5af2:	d055      	beq.n	5ba0 <_sercom_get_default_pad+0xc0>
    5af4:	4b3a      	ldr	r3, [pc, #232]	; (5be0 <_sercom_get_default_pad+0x100>)
    5af6:	4298      	cmp	r0, r3
    5af8:	d038      	beq.n	5b6c <_sercom_get_default_pad+0x8c>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    5afa:	2000      	movs	r0, #0
}
    5afc:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    5afe:	2384      	movs	r3, #132	; 0x84
    5b00:	05db      	lsls	r3, r3, #23
    5b02:	4298      	cmp	r0, r3
    5b04:	d00c      	beq.n	5b20 <_sercom_get_default_pad+0x40>
    5b06:	4b37      	ldr	r3, [pc, #220]	; (5be4 <_sercom_get_default_pad+0x104>)
    5b08:	4298      	cmp	r0, r3
    5b0a:	d1f6      	bne.n	5afa <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5b0c:	2901      	cmp	r1, #1
    5b0e:	d017      	beq.n	5b40 <_sercom_get_default_pad+0x60>
    5b10:	2900      	cmp	r1, #0
    5b12:	d057      	beq.n	5bc4 <_sercom_get_default_pad+0xe4>
    5b14:	2902      	cmp	r1, #2
    5b16:	d015      	beq.n	5b44 <_sercom_get_default_pad+0x64>
    5b18:	2903      	cmp	r1, #3
    5b1a:	d015      	beq.n	5b48 <_sercom_get_default_pad+0x68>
	return 0;
    5b1c:	2000      	movs	r0, #0
    5b1e:	e7ed      	b.n	5afc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5b20:	2901      	cmp	r1, #1
    5b22:	d007      	beq.n	5b34 <_sercom_get_default_pad+0x54>
    5b24:	2900      	cmp	r1, #0
    5b26:	d04b      	beq.n	5bc0 <_sercom_get_default_pad+0xe0>
    5b28:	2902      	cmp	r1, #2
    5b2a:	d005      	beq.n	5b38 <_sercom_get_default_pad+0x58>
    5b2c:	2903      	cmp	r1, #3
    5b2e:	d005      	beq.n	5b3c <_sercom_get_default_pad+0x5c>
	return 0;
    5b30:	2000      	movs	r0, #0
    5b32:	e7e3      	b.n	5afc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5b34:	482c      	ldr	r0, [pc, #176]	; (5be8 <_sercom_get_default_pad+0x108>)
    5b36:	e7e1      	b.n	5afc <_sercom_get_default_pad+0x1c>
    5b38:	482c      	ldr	r0, [pc, #176]	; (5bec <_sercom_get_default_pad+0x10c>)
    5b3a:	e7df      	b.n	5afc <_sercom_get_default_pad+0x1c>
    5b3c:	482c      	ldr	r0, [pc, #176]	; (5bf0 <_sercom_get_default_pad+0x110>)
    5b3e:	e7dd      	b.n	5afc <_sercom_get_default_pad+0x1c>
    5b40:	482c      	ldr	r0, [pc, #176]	; (5bf4 <_sercom_get_default_pad+0x114>)
    5b42:	e7db      	b.n	5afc <_sercom_get_default_pad+0x1c>
    5b44:	482c      	ldr	r0, [pc, #176]	; (5bf8 <_sercom_get_default_pad+0x118>)
    5b46:	e7d9      	b.n	5afc <_sercom_get_default_pad+0x1c>
    5b48:	482c      	ldr	r0, [pc, #176]	; (5bfc <_sercom_get_default_pad+0x11c>)
    5b4a:	e7d7      	b.n	5afc <_sercom_get_default_pad+0x1c>
    5b4c:	2901      	cmp	r1, #1
    5b4e:	d007      	beq.n	5b60 <_sercom_get_default_pad+0x80>
    5b50:	2900      	cmp	r1, #0
    5b52:	d039      	beq.n	5bc8 <_sercom_get_default_pad+0xe8>
    5b54:	2902      	cmp	r1, #2
    5b56:	d005      	beq.n	5b64 <_sercom_get_default_pad+0x84>
    5b58:	2903      	cmp	r1, #3
    5b5a:	d005      	beq.n	5b68 <_sercom_get_default_pad+0x88>
	return 0;
    5b5c:	2000      	movs	r0, #0
    5b5e:	e7cd      	b.n	5afc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5b60:	4827      	ldr	r0, [pc, #156]	; (5c00 <_sercom_get_default_pad+0x120>)
    5b62:	e7cb      	b.n	5afc <_sercom_get_default_pad+0x1c>
    5b64:	4827      	ldr	r0, [pc, #156]	; (5c04 <_sercom_get_default_pad+0x124>)
    5b66:	e7c9      	b.n	5afc <_sercom_get_default_pad+0x1c>
    5b68:	4827      	ldr	r0, [pc, #156]	; (5c08 <_sercom_get_default_pad+0x128>)
    5b6a:	e7c7      	b.n	5afc <_sercom_get_default_pad+0x1c>
    5b6c:	2901      	cmp	r1, #1
    5b6e:	d007      	beq.n	5b80 <_sercom_get_default_pad+0xa0>
    5b70:	2900      	cmp	r1, #0
    5b72:	d02b      	beq.n	5bcc <_sercom_get_default_pad+0xec>
    5b74:	2902      	cmp	r1, #2
    5b76:	d005      	beq.n	5b84 <_sercom_get_default_pad+0xa4>
    5b78:	2903      	cmp	r1, #3
    5b7a:	d005      	beq.n	5b88 <_sercom_get_default_pad+0xa8>
	return 0;
    5b7c:	2000      	movs	r0, #0
    5b7e:	e7bd      	b.n	5afc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5b80:	4822      	ldr	r0, [pc, #136]	; (5c0c <_sercom_get_default_pad+0x12c>)
    5b82:	e7bb      	b.n	5afc <_sercom_get_default_pad+0x1c>
    5b84:	4822      	ldr	r0, [pc, #136]	; (5c10 <_sercom_get_default_pad+0x130>)
    5b86:	e7b9      	b.n	5afc <_sercom_get_default_pad+0x1c>
    5b88:	4822      	ldr	r0, [pc, #136]	; (5c14 <_sercom_get_default_pad+0x134>)
    5b8a:	e7b7      	b.n	5afc <_sercom_get_default_pad+0x1c>
    5b8c:	2902      	cmp	r1, #2
    5b8e:	d003      	beq.n	5b98 <_sercom_get_default_pad+0xb8>
    5b90:	2903      	cmp	r1, #3
    5b92:	d003      	beq.n	5b9c <_sercom_get_default_pad+0xbc>
    5b94:	2000      	movs	r0, #0
    5b96:	e7b1      	b.n	5afc <_sercom_get_default_pad+0x1c>
    5b98:	481f      	ldr	r0, [pc, #124]	; (5c18 <_sercom_get_default_pad+0x138>)
    5b9a:	e7af      	b.n	5afc <_sercom_get_default_pad+0x1c>
    5b9c:	481f      	ldr	r0, [pc, #124]	; (5c1c <_sercom_get_default_pad+0x13c>)
    5b9e:	e7ad      	b.n	5afc <_sercom_get_default_pad+0x1c>
    5ba0:	2901      	cmp	r1, #1
    5ba2:	d007      	beq.n	5bb4 <_sercom_get_default_pad+0xd4>
    5ba4:	2900      	cmp	r1, #0
    5ba6:	d013      	beq.n	5bd0 <_sercom_get_default_pad+0xf0>
    5ba8:	2902      	cmp	r1, #2
    5baa:	d005      	beq.n	5bb8 <_sercom_get_default_pad+0xd8>
    5bac:	2903      	cmp	r1, #3
    5bae:	d005      	beq.n	5bbc <_sercom_get_default_pad+0xdc>
	return 0;
    5bb0:	2000      	movs	r0, #0
    5bb2:	e7a3      	b.n	5afc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5bb4:	481a      	ldr	r0, [pc, #104]	; (5c20 <_sercom_get_default_pad+0x140>)
    5bb6:	e7a1      	b.n	5afc <_sercom_get_default_pad+0x1c>
    5bb8:	481a      	ldr	r0, [pc, #104]	; (5c24 <_sercom_get_default_pad+0x144>)
    5bba:	e79f      	b.n	5afc <_sercom_get_default_pad+0x1c>
    5bbc:	481a      	ldr	r0, [pc, #104]	; (5c28 <_sercom_get_default_pad+0x148>)
    5bbe:	e79d      	b.n	5afc <_sercom_get_default_pad+0x1c>
    5bc0:	481a      	ldr	r0, [pc, #104]	; (5c2c <_sercom_get_default_pad+0x14c>)
    5bc2:	e79b      	b.n	5afc <_sercom_get_default_pad+0x1c>
    5bc4:	2003      	movs	r0, #3
    5bc6:	e799      	b.n	5afc <_sercom_get_default_pad+0x1c>
    5bc8:	4819      	ldr	r0, [pc, #100]	; (5c30 <_sercom_get_default_pad+0x150>)
    5bca:	e797      	b.n	5afc <_sercom_get_default_pad+0x1c>
    5bcc:	4819      	ldr	r0, [pc, #100]	; (5c34 <_sercom_get_default_pad+0x154>)
    5bce:	e795      	b.n	5afc <_sercom_get_default_pad+0x1c>
    5bd0:	4819      	ldr	r0, [pc, #100]	; (5c38 <_sercom_get_default_pad+0x158>)
    5bd2:	e793      	b.n	5afc <_sercom_get_default_pad+0x1c>
    5bd4:	42000800 	.word	0x42000800
    5bd8:	42001000 	.word	0x42001000
    5bdc:	43000400 	.word	0x43000400
    5be0:	42000c00 	.word	0x42000c00
    5be4:	42000400 	.word	0x42000400
    5be8:	00050003 	.word	0x00050003
    5bec:	00060003 	.word	0x00060003
    5bf0:	00070003 	.word	0x00070003
    5bf4:	00010003 	.word	0x00010003
    5bf8:	001e0003 	.word	0x001e0003
    5bfc:	001f0003 	.word	0x001f0003
    5c00:	00090003 	.word	0x00090003
    5c04:	000a0003 	.word	0x000a0003
    5c08:	000b0003 	.word	0x000b0003
    5c0c:	00110003 	.word	0x00110003
    5c10:	00120003 	.word	0x00120003
    5c14:	00130003 	.word	0x00130003
    5c18:	000e0003 	.word	0x000e0003
    5c1c:	000f0003 	.word	0x000f0003
    5c20:	00170003 	.word	0x00170003
    5c24:	00180003 	.word	0x00180003
    5c28:	00190003 	.word	0x00190003
    5c2c:	00040003 	.word	0x00040003
    5c30:	00080003 	.word	0x00080003
    5c34:	00100003 	.word	0x00100003
    5c38:	00160003 	.word	0x00160003

00005c3c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    5c3c:	b530      	push	{r4, r5, lr}
    5c3e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    5c40:	4b0b      	ldr	r3, [pc, #44]	; (5c70 <_sercom_get_sercom_inst_index+0x34>)
    5c42:	466a      	mov	r2, sp
    5c44:	cb32      	ldmia	r3!, {r1, r4, r5}
    5c46:	c232      	stmia	r2!, {r1, r4, r5}
    5c48:	cb32      	ldmia	r3!, {r1, r4, r5}
    5c4a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    5c4c:	9b00      	ldr	r3, [sp, #0]
    5c4e:	4283      	cmp	r3, r0
    5c50:	d00b      	beq.n	5c6a <_sercom_get_sercom_inst_index+0x2e>
    5c52:	2301      	movs	r3, #1
    5c54:	009a      	lsls	r2, r3, #2
    5c56:	4669      	mov	r1, sp
    5c58:	5852      	ldr	r2, [r2, r1]
    5c5a:	4282      	cmp	r2, r0
    5c5c:	d006      	beq.n	5c6c <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5c5e:	3301      	adds	r3, #1
    5c60:	2b06      	cmp	r3, #6
    5c62:	d1f7      	bne.n	5c54 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    5c64:	2000      	movs	r0, #0
}
    5c66:	b007      	add	sp, #28
    5c68:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5c6a:	2300      	movs	r3, #0
			return i;
    5c6c:	b2d8      	uxtb	r0, r3
    5c6e:	e7fa      	b.n	5c66 <_sercom_get_sercom_inst_index+0x2a>
    5c70:	00019d9c 	.word	0x00019d9c

00005c74 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    5c74:	4770      	bx	lr
    5c76:	Address 0x00005c76 is out of bounds.


00005c78 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    5c78:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    5c7a:	4b0a      	ldr	r3, [pc, #40]	; (5ca4 <_sercom_set_handler+0x2c>)
    5c7c:	781b      	ldrb	r3, [r3, #0]
    5c7e:	2b00      	cmp	r3, #0
    5c80:	d10c      	bne.n	5c9c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    5c82:	4f09      	ldr	r7, [pc, #36]	; (5ca8 <_sercom_set_handler+0x30>)
    5c84:	4e09      	ldr	r6, [pc, #36]	; (5cac <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    5c86:	4d0a      	ldr	r5, [pc, #40]	; (5cb0 <_sercom_set_handler+0x38>)
    5c88:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    5c8a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    5c8c:	195a      	adds	r2, r3, r5
    5c8e:	6014      	str	r4, [r2, #0]
    5c90:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5c92:	2b18      	cmp	r3, #24
    5c94:	d1f9      	bne.n	5c8a <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    5c96:	2201      	movs	r2, #1
    5c98:	4b02      	ldr	r3, [pc, #8]	; (5ca4 <_sercom_set_handler+0x2c>)
    5c9a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    5c9c:	0080      	lsls	r0, r0, #2
    5c9e:	4b02      	ldr	r3, [pc, #8]	; (5ca8 <_sercom_set_handler+0x30>)
    5ca0:	50c1      	str	r1, [r0, r3]
}
    5ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5ca4:	200002ca 	.word	0x200002ca
    5ca8:	200002cc 	.word	0x200002cc
    5cac:	00005c75 	.word	0x00005c75
    5cb0:	2000245c 	.word	0x2000245c

00005cb4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    5cb4:	b500      	push	{lr}
    5cb6:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    5cb8:	2308      	movs	r3, #8
    5cba:	466a      	mov	r2, sp
    5cbc:	7013      	strb	r3, [r2, #0]
    5cbe:	3301      	adds	r3, #1
    5cc0:	7053      	strb	r3, [r2, #1]
    5cc2:	3301      	adds	r3, #1
    5cc4:	7093      	strb	r3, [r2, #2]
    5cc6:	3301      	adds	r3, #1
    5cc8:	70d3      	strb	r3, [r2, #3]
    5cca:	3301      	adds	r3, #1
    5ccc:	7113      	strb	r3, [r2, #4]
    5cce:	3301      	adds	r3, #1
    5cd0:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    5cd2:	4b03      	ldr	r3, [pc, #12]	; (5ce0 <_sercom_get_interrupt_vector+0x2c>)
    5cd4:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    5cd6:	466b      	mov	r3, sp
    5cd8:	5618      	ldrsb	r0, [r3, r0]
}
    5cda:	b003      	add	sp, #12
    5cdc:	bd00      	pop	{pc}
    5cde:	46c0      	nop			; (mov r8, r8)
    5ce0:	00005c3d 	.word	0x00005c3d

00005ce4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    5ce4:	b510      	push	{r4, lr}
    5ce6:	4b02      	ldr	r3, [pc, #8]	; (5cf0 <SERCOM0_Handler+0xc>)
    5ce8:	681b      	ldr	r3, [r3, #0]
    5cea:	2000      	movs	r0, #0
    5cec:	4798      	blx	r3
    5cee:	bd10      	pop	{r4, pc}
    5cf0:	200002cc 	.word	0x200002cc

00005cf4 <SERCOM1_Handler>:
    5cf4:	b510      	push	{r4, lr}
    5cf6:	4b02      	ldr	r3, [pc, #8]	; (5d00 <SERCOM1_Handler+0xc>)
    5cf8:	685b      	ldr	r3, [r3, #4]
    5cfa:	2001      	movs	r0, #1
    5cfc:	4798      	blx	r3
    5cfe:	bd10      	pop	{r4, pc}
    5d00:	200002cc 	.word	0x200002cc

00005d04 <SERCOM2_Handler>:
    5d04:	b510      	push	{r4, lr}
    5d06:	4b02      	ldr	r3, [pc, #8]	; (5d10 <SERCOM2_Handler+0xc>)
    5d08:	689b      	ldr	r3, [r3, #8]
    5d0a:	2002      	movs	r0, #2
    5d0c:	4798      	blx	r3
    5d0e:	bd10      	pop	{r4, pc}
    5d10:	200002cc 	.word	0x200002cc

00005d14 <SERCOM3_Handler>:
    5d14:	b510      	push	{r4, lr}
    5d16:	4b02      	ldr	r3, [pc, #8]	; (5d20 <SERCOM3_Handler+0xc>)
    5d18:	68db      	ldr	r3, [r3, #12]
    5d1a:	2003      	movs	r0, #3
    5d1c:	4798      	blx	r3
    5d1e:	bd10      	pop	{r4, pc}
    5d20:	200002cc 	.word	0x200002cc

00005d24 <SERCOM4_Handler>:
    5d24:	b510      	push	{r4, lr}
    5d26:	4b02      	ldr	r3, [pc, #8]	; (5d30 <SERCOM4_Handler+0xc>)
    5d28:	691b      	ldr	r3, [r3, #16]
    5d2a:	2004      	movs	r0, #4
    5d2c:	4798      	blx	r3
    5d2e:	bd10      	pop	{r4, pc}
    5d30:	200002cc 	.word	0x200002cc

00005d34 <SERCOM5_Handler>:
    5d34:	b510      	push	{r4, lr}
    5d36:	4b02      	ldr	r3, [pc, #8]	; (5d40 <SERCOM5_Handler+0xc>)
    5d38:	695b      	ldr	r3, [r3, #20]
    5d3a:	2005      	movs	r0, #5
    5d3c:	4798      	blx	r3
    5d3e:	bd10      	pop	{r4, pc}
    5d40:	200002cc 	.word	0x200002cc

00005d44 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    5d44:	b5f0      	push	{r4, r5, r6, r7, lr}
    5d46:	46d6      	mov	lr, sl
    5d48:	464f      	mov	r7, r9
    5d4a:	4646      	mov	r6, r8
    5d4c:	b5c0      	push	{r6, r7, lr}
    5d4e:	b08a      	sub	sp, #40	; 0x28
    5d50:	0006      	movs	r6, r0
    5d52:	000f      	movs	r7, r1
    5d54:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    5d56:	6031      	str	r1, [r6, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    5d58:	680b      	ldr	r3, [r1, #0]
    5d5a:	079b      	lsls	r3, r3, #30
    5d5c:	d40a      	bmi.n	5d74 <spi_init+0x30>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    5d5e:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    5d60:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    5d62:	07db      	lsls	r3, r3, #31
    5d64:	d400      	bmi.n	5d68 <spi_init+0x24>
    5d66:	e0af      	b.n	5ec8 <spi_init+0x184>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    5d68:	b00a      	add	sp, #40	; 0x28
    5d6a:	bc1c      	pop	{r2, r3, r4}
    5d6c:	4690      	mov	r8, r2
    5d6e:	4699      	mov	r9, r3
    5d70:	46a2      	mov	sl, r4
    5d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    5d74:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5d76:	9305      	str	r3, [sp, #20]
    5d78:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    5d7a:	9306      	str	r3, [sp, #24]
    5d7c:	6b13      	ldr	r3, [r2, #48]	; 0x30
    5d7e:	9307      	str	r3, [sp, #28]
    5d80:	6b53      	ldr	r3, [r2, #52]	; 0x34
    5d82:	9308      	str	r3, [sp, #32]
    5d84:	2500      	movs	r5, #0
    5d86:	e00a      	b.n	5d9e <spi_init+0x5a>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    5d88:	0038      	movs	r0, r7
    5d8a:	4bb6      	ldr	r3, [pc, #728]	; (6064 <spi_init+0x320>)
    5d8c:	4798      	blx	r3
    5d8e:	e00e      	b.n	5dae <spi_init+0x6a>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    5d90:	230f      	movs	r3, #15
    5d92:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    5d94:	4581      	cmp	r9, r0
    5d96:	d130      	bne.n	5dfa <spi_init+0xb6>
    5d98:	3501      	adds	r5, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    5d9a:	2d04      	cmp	r5, #4
    5d9c:	d031      	beq.n	5e02 <spi_init+0xbe>
    5d9e:	b2e9      	uxtb	r1, r5
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5da0:	00ab      	lsls	r3, r5, #2
    5da2:	aa02      	add	r2, sp, #8
    5da4:	200c      	movs	r0, #12
    5da6:	1812      	adds	r2, r2, r0
    5da8:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    5daa:	2800      	cmp	r0, #0
    5dac:	d0ec      	beq.n	5d88 <spi_init+0x44>
		if (current_pinmux == PINMUX_UNUSED) {
    5dae:	1c43      	adds	r3, r0, #1
    5db0:	d0f2      	beq.n	5d98 <spi_init+0x54>
		if ((current_pinmux & 0xFFFF) !=
    5db2:	0401      	lsls	r1, r0, #16
    5db4:	0c0b      	lsrs	r3, r1, #16
    5db6:	4699      	mov	r9, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    5db8:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    5dba:	b2c3      	uxtb	r3, r0
    5dbc:	469c      	mov	ip, r3
		return NULL;
    5dbe:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5dc0:	0602      	lsls	r2, r0, #24
    5dc2:	d405      	bmi.n	5dd0 <spi_init+0x8c>
		return &(ports[port_index]->Group[group_index]);
    5dc4:	4663      	mov	r3, ip
    5dc6:	095b      	lsrs	r3, r3, #5
    5dc8:	01db      	lsls	r3, r3, #7
    5dca:	4aa7      	ldr	r2, [pc, #668]	; (6068 <spi_init+0x324>)
    5dcc:	4690      	mov	r8, r2
    5dce:	4443      	add	r3, r8
	uint32_t pin_index = (gpio_pin % 32);
    5dd0:	221f      	movs	r2, #31
    5dd2:	4660      	mov	r0, ip
    5dd4:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    5dd6:	1898      	adds	r0, r3, r2
    5dd8:	3040      	adds	r0, #64	; 0x40
    5dda:	7800      	ldrb	r0, [r0, #0]
    5ddc:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    5dde:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    5de0:	4651      	mov	r1, sl
    5de2:	07c9      	lsls	r1, r1, #31
    5de4:	d5d6      	bpl.n	5d94 <spi_init+0x50>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    5de6:	0852      	lsrs	r2, r2, #1
    5de8:	189b      	adds	r3, r3, r2
    5dea:	3330      	adds	r3, #48	; 0x30
    5dec:	7818      	ldrb	r0, [r3, #0]
    5dee:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    5df0:	4663      	mov	r3, ip
    5df2:	07db      	lsls	r3, r3, #31
    5df4:	d5cc      	bpl.n	5d90 <spi_init+0x4c>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    5df6:	0900      	lsrs	r0, r0, #4
    5df8:	e7cc      	b.n	5d94 <spi_init+0x50>
			module->hw = NULL;
    5dfa:	2300      	movs	r3, #0
    5dfc:	6033      	str	r3, [r6, #0]
			return STATUS_ERR_DENIED;
    5dfe:	201c      	movs	r0, #28
    5e00:	e7b2      	b.n	5d68 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    5e02:	2011      	movs	r0, #17
    5e04:	4b99      	ldr	r3, [pc, #612]	; (606c <spi_init+0x328>)
    5e06:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    5e08:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    5e0a:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    5e0c:	2a01      	cmp	r2, #1
    5e0e:	d016      	beq.n	5e3e <spi_init+0xfa>
	if (config->mode == SPI_MODE_SLAVE) {
    5e10:	7821      	ldrb	r1, [r4, #0]
    5e12:	2900      	cmp	r1, #0
    5e14:	d127      	bne.n	5e66 <spi_init+0x122>
		if (spi_module->CTRLA.reg != addr) {
    5e16:	683b      	ldr	r3, [r7, #0]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    5e18:	7fe2      	ldrb	r2, [r4, #31]
    5e1a:	0412      	lsls	r2, r2, #16
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    5e1c:	7fa0      	ldrb	r0, [r4, #30]
    5e1e:	4302      	orrs	r2, r0
			return STATUS_ERR_DENIED;
    5e20:	201c      	movs	r0, #28
		if (spi_module->CTRLA.reg != addr) {
    5e22:	429a      	cmp	r2, r3
    5e24:	d1a0      	bne.n	5d68 <spi_init+0x24>
		ctrla |= config->mode_specific.slave.frame_format;
    5e26:	69a3      	ldr	r3, [r4, #24]
		ctrlb |= config->mode_specific.slave.address_mode;
    5e28:	8ba2      	ldrh	r2, [r4, #28]
		if (config->mode_specific.slave.preload_enable) {
    5e2a:	3004      	adds	r0, #4
    5e2c:	5c20      	ldrb	r0, [r4, r0]
    5e2e:	2800      	cmp	r0, #0
    5e30:	d001      	beq.n	5e36 <spi_init+0xf2>
    5e32:	2040      	movs	r0, #64	; 0x40
    5e34:	4302      	orrs	r2, r0
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
    5e36:	2008      	movs	r0, #8
    5e38:	4303      	orrs	r3, r0
    5e3a:	431d      	orrs	r5, r3
    5e3c:	e014      	b.n	5e68 <spi_init+0x124>
		enum status_code error_code = _sercom_get_sync_baud_val(
    5e3e:	aa04      	add	r2, sp, #16
    5e40:	0001      	movs	r1, r0
    5e42:	69a0      	ldr	r0, [r4, #24]
    5e44:	4b8a      	ldr	r3, [pc, #552]	; (6070 <spi_init+0x32c>)
    5e46:	4798      	blx	r3
    5e48:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    5e4a:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    5e4c:	2b00      	cmp	r3, #0
    5e4e:	d000      	beq.n	5e52 <spi_init+0x10e>
    5e50:	e78a      	b.n	5d68 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    5e52:	7b3b      	ldrb	r3, [r7, #12]
    5e54:	b2db      	uxtb	r3, r3
    5e56:	aa04      	add	r2, sp, #16
    5e58:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    5e5a:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    5e5c:	429a      	cmp	r2, r3
    5e5e:	d000      	beq.n	5e62 <spi_init+0x11e>
    5e60:	e782      	b.n	5d68 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    5e62:	350c      	adds	r5, #12
    5e64:	e7d4      	b.n	5e10 <spi_init+0xcc>
	uint32_t ctrlb = 0;
    5e66:	2200      	movs	r2, #0
	ctrla |= config->mux_setting;
    5e68:	6863      	ldr	r3, [r4, #4]
    5e6a:	68a0      	ldr	r0, [r4, #8]
    5e6c:	4303      	orrs	r3, r0
    5e6e:	68e0      	ldr	r0, [r4, #12]
    5e70:	4303      	orrs	r3, r0
    5e72:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    5e74:	7c20      	ldrb	r0, [r4, #16]
    5e76:	4302      	orrs	r2, r0
	if (config->run_in_standby) {
    5e78:	7c60      	ldrb	r0, [r4, #17]
    5e7a:	2800      	cmp	r0, #0
    5e7c:	d001      	beq.n	5e82 <spi_init+0x13e>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    5e7e:	2080      	movs	r0, #128	; 0x80
    5e80:	4303      	orrs	r3, r0
	if (config->receiver_enable) {
    5e82:	7ca0      	ldrb	r0, [r4, #18]
    5e84:	2800      	cmp	r0, #0
    5e86:	d002      	beq.n	5e8e <spi_init+0x14a>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    5e88:	2080      	movs	r0, #128	; 0x80
    5e8a:	0280      	lsls	r0, r0, #10
    5e8c:	4302      	orrs	r2, r0
	if (config->select_slave_low_detect_enable) {
    5e8e:	7ce0      	ldrb	r0, [r4, #19]
    5e90:	2800      	cmp	r0, #0
    5e92:	d002      	beq.n	5e9a <spi_init+0x156>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    5e94:	2080      	movs	r0, #128	; 0x80
    5e96:	0080      	lsls	r0, r0, #2
    5e98:	4302      	orrs	r2, r0
	if (config->master_slave_select_enable) {
    5e9a:	7d20      	ldrb	r0, [r4, #20]
    5e9c:	2800      	cmp	r0, #0
    5e9e:	d002      	beq.n	5ea6 <spi_init+0x162>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    5ea0:	2080      	movs	r0, #128	; 0x80
    5ea2:	0180      	lsls	r0, r0, #6
    5ea4:	4302      	orrs	r2, r0
	if (spi_module->CTRLA.reg == ctrla &&
    5ea6:	6838      	ldr	r0, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    5ea8:	2502      	movs	r5, #2
    5eaa:	432b      	orrs	r3, r5
	if (spi_module->CTRLA.reg == ctrla &&
    5eac:	4283      	cmp	r3, r0
    5eae:	d003      	beq.n	5eb8 <spi_init+0x174>
	module->hw = NULL;
    5eb0:	2300      	movs	r3, #0
    5eb2:	6033      	str	r3, [r6, #0]
	return STATUS_ERR_DENIED;
    5eb4:	201c      	movs	r0, #28
    5eb6:	e757      	b.n	5d68 <spi_init+0x24>
			spi_module->CTRLB.reg == ctrlb) {
    5eb8:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    5eba:	4293      	cmp	r3, r2
    5ebc:	d1f8      	bne.n	5eb0 <spi_init+0x16c>
		module->mode           = config->mode;
    5ebe:	7171      	strb	r1, [r6, #5]
		module->character_size = config->character_size;
    5ec0:	7c23      	ldrb	r3, [r4, #16]
    5ec2:	71b3      	strb	r3, [r6, #6]
		return STATUS_OK;
    5ec4:	2000      	movs	r0, #0
    5ec6:	e74f      	b.n	5d68 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5ec8:	0008      	movs	r0, r1
    5eca:	4b6a      	ldr	r3, [pc, #424]	; (6074 <spi_init+0x330>)
    5ecc:	4798      	blx	r3
	if (sercom_index == 5) {
    5ece:	2805      	cmp	r0, #5
    5ed0:	d100      	bne.n	5ed4 <spi_init+0x190>
    5ed2:	e0bf      	b.n	6054 <spi_init+0x310>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5ed4:	0003      	movs	r3, r0
    5ed6:	3312      	adds	r3, #18
			MCLK->APBCMASK.reg |= mask;
    5ed8:	4967      	ldr	r1, [pc, #412]	; (6078 <spi_init+0x334>)
    5eda:	69cd      	ldr	r5, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    5edc:	2201      	movs	r2, #1
    5ede:	4082      	lsls	r2, r0
    5ee0:	432a      	orrs	r2, r5
    5ee2:	61ca      	str	r2, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    5ee4:	a909      	add	r1, sp, #36	; 0x24
    5ee6:	2524      	movs	r5, #36	; 0x24
    5ee8:	5d62      	ldrb	r2, [r4, r5]
    5eea:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    5eec:	b2db      	uxtb	r3, r3
    5eee:	9301      	str	r3, [sp, #4]
    5ef0:	0018      	movs	r0, r3
    5ef2:	4b62      	ldr	r3, [pc, #392]	; (607c <spi_init+0x338>)
    5ef4:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    5ef6:	9801      	ldr	r0, [sp, #4]
    5ef8:	4b61      	ldr	r3, [pc, #388]	; (6080 <spi_init+0x33c>)
    5efa:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    5efc:	5d60      	ldrb	r0, [r4, r5]
    5efe:	2100      	movs	r1, #0
    5f00:	4b60      	ldr	r3, [pc, #384]	; (6084 <spi_init+0x340>)
    5f02:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    5f04:	7823      	ldrb	r3, [r4, #0]
    5f06:	2b01      	cmp	r3, #1
    5f08:	d020      	beq.n	5f4c <spi_init+0x208>
	if (config->mode == SPI_MODE_SLAVE) {
    5f0a:	7823      	ldrb	r3, [r4, #0]
    5f0c:	2b00      	cmp	r3, #0
    5f0e:	d103      	bne.n	5f18 <spi_init+0x1d4>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    5f10:	683b      	ldr	r3, [r7, #0]
    5f12:	2208      	movs	r2, #8
    5f14:	4313      	orrs	r3, r2
    5f16:	603b      	str	r3, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5f18:	6833      	ldr	r3, [r6, #0]
    5f1a:	4698      	mov	r8, r3
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5f1c:	ab04      	add	r3, sp, #16
    5f1e:	2280      	movs	r2, #128	; 0x80
    5f20:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5f22:	2200      	movs	r2, #0
    5f24:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5f26:	2101      	movs	r1, #1
    5f28:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    5f2a:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    5f2c:	7823      	ldrb	r3, [r4, #0]
    5f2e:	2b00      	cmp	r3, #0
    5f30:	d101      	bne.n	5f36 <spi_init+0x1f2>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    5f32:	ab04      	add	r3, sp, #16
    5f34:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    5f36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5f38:	9305      	str	r3, [sp, #20]
    5f3a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5f3c:	9306      	str	r3, [sp, #24]
    5f3e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5f40:	9307      	str	r3, [sp, #28]
    5f42:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5f44:	9308      	str	r3, [sp, #32]
    5f46:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5f48:	ad05      	add	r5, sp, #20
    5f4a:	e011      	b.n	5f70 <spi_init+0x22c>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    5f4c:	683b      	ldr	r3, [r7, #0]
    5f4e:	220c      	movs	r2, #12
    5f50:	4313      	orrs	r3, r2
    5f52:	603b      	str	r3, [r7, #0]
    5f54:	e7d9      	b.n	5f0a <spi_init+0x1c6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    5f56:	4640      	mov	r0, r8
    5f58:	4b42      	ldr	r3, [pc, #264]	; (6064 <spi_init+0x320>)
    5f5a:	4798      	blx	r3
    5f5c:	e00d      	b.n	5f7a <spi_init+0x236>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    5f5e:	a904      	add	r1, sp, #16
    5f60:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    5f62:	0c00      	lsrs	r0, r0, #16
    5f64:	b2c0      	uxtb	r0, r0
    5f66:	4b48      	ldr	r3, [pc, #288]	; (6088 <spi_init+0x344>)
    5f68:	4798      	blx	r3
    5f6a:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    5f6c:	2f04      	cmp	r7, #4
    5f6e:	d007      	beq.n	5f80 <spi_init+0x23c>
    5f70:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5f72:	00bb      	lsls	r3, r7, #2
    5f74:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    5f76:	2800      	cmp	r0, #0
    5f78:	d0ed      	beq.n	5f56 <spi_init+0x212>
		if (current_pinmux != PINMUX_UNUSED) {
    5f7a:	1c43      	adds	r3, r0, #1
    5f7c:	d1ef      	bne.n	5f5e <spi_init+0x21a>
    5f7e:	e7f4      	b.n	5f6a <spi_init+0x226>
	module->mode             = config->mode;
    5f80:	7823      	ldrb	r3, [r4, #0]
    5f82:	7173      	strb	r3, [r6, #5]
	module->character_size   = config->character_size;
    5f84:	7c23      	ldrb	r3, [r4, #16]
    5f86:	71b3      	strb	r3, [r6, #6]
	module->receiver_enabled = config->receiver_enable;
    5f88:	7ca3      	ldrb	r3, [r4, #18]
    5f8a:	71f3      	strb	r3, [r6, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    5f8c:	7d23      	ldrb	r3, [r4, #20]
    5f8e:	7233      	strb	r3, [r6, #8]
	uint16_t baud = 0;
    5f90:	2200      	movs	r2, #0
    5f92:	ab02      	add	r3, sp, #8
    5f94:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    5f96:	7823      	ldrb	r3, [r4, #0]
    5f98:	2b01      	cmp	r3, #1
    5f9a:	d014      	beq.n	5fc6 <spi_init+0x282>
	if (config->mode == SPI_MODE_SLAVE) {
    5f9c:	7823      	ldrb	r3, [r4, #0]
    5f9e:	2b00      	cmp	r3, #0
    5fa0:	d129      	bne.n	5ff6 <spi_init+0x2b2>
		ctrla = config->mode_specific.slave.frame_format;
    5fa2:	69a0      	ldr	r0, [r4, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    5fa4:	8ba2      	ldrh	r2, [r4, #28]
		spi_module->ADDR.reg |=
    5fa6:	4643      	mov	r3, r8
    5fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    5faa:	7fe1      	ldrb	r1, [r4, #31]
    5fac:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    5fae:	7fa5      	ldrb	r5, [r4, #30]
    5fb0:	4329      	orrs	r1, r5
		spi_module->ADDR.reg |=
    5fb2:	4319      	orrs	r1, r3
    5fb4:	4643      	mov	r3, r8
    5fb6:	6259      	str	r1, [r3, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    5fb8:	2320      	movs	r3, #32
    5fba:	5ce3      	ldrb	r3, [r4, r3]
    5fbc:	2b00      	cmp	r3, #0
    5fbe:	d01c      	beq.n	5ffa <spi_init+0x2b6>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    5fc0:	2340      	movs	r3, #64	; 0x40
    5fc2:	431a      	orrs	r2, r3
    5fc4:	e019      	b.n	5ffa <spi_init+0x2b6>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5fc6:	6830      	ldr	r0, [r6, #0]
    5fc8:	4b2a      	ldr	r3, [pc, #168]	; (6074 <spi_init+0x330>)
    5fca:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5fcc:	3012      	adds	r0, #18
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    5fce:	b2c0      	uxtb	r0, r0
    5fd0:	4b26      	ldr	r3, [pc, #152]	; (606c <spi_init+0x328>)
    5fd2:	4798      	blx	r3
    5fd4:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    5fd6:	ab02      	add	r3, sp, #8
    5fd8:	1d9a      	adds	r2, r3, #6
    5fda:	69a0      	ldr	r0, [r4, #24]
    5fdc:	4b24      	ldr	r3, [pc, #144]	; (6070 <spi_init+0x32c>)
    5fde:	4798      	blx	r3
    5fe0:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    5fe2:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    5fe4:	2b00      	cmp	r3, #0
    5fe6:	d000      	beq.n	5fea <spi_init+0x2a6>
    5fe8:	e6be      	b.n	5d68 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    5fea:	ab02      	add	r3, sp, #8
    5fec:	3306      	adds	r3, #6
    5fee:	781b      	ldrb	r3, [r3, #0]
    5ff0:	4642      	mov	r2, r8
    5ff2:	7313      	strb	r3, [r2, #12]
    5ff4:	e7d2      	b.n	5f9c <spi_init+0x258>
	uint32_t ctrlb = 0;
    5ff6:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    5ff8:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    5ffa:	6863      	ldr	r3, [r4, #4]
    5ffc:	68a1      	ldr	r1, [r4, #8]
    5ffe:	430b      	orrs	r3, r1
    6000:	68e1      	ldr	r1, [r4, #12]
    6002:	430b      	orrs	r3, r1
    6004:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    6006:	7c21      	ldrb	r1, [r4, #16]
    6008:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    600a:	7c61      	ldrb	r1, [r4, #17]
    600c:	2900      	cmp	r1, #0
    600e:	d103      	bne.n	6018 <spi_init+0x2d4>
    6010:	491e      	ldr	r1, [pc, #120]	; (608c <spi_init+0x348>)
    6012:	7889      	ldrb	r1, [r1, #2]
    6014:	0789      	lsls	r1, r1, #30
    6016:	d501      	bpl.n	601c <spi_init+0x2d8>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    6018:	2180      	movs	r1, #128	; 0x80
    601a:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    601c:	7ca1      	ldrb	r1, [r4, #18]
    601e:	2900      	cmp	r1, #0
    6020:	d002      	beq.n	6028 <spi_init+0x2e4>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    6022:	2180      	movs	r1, #128	; 0x80
    6024:	0289      	lsls	r1, r1, #10
    6026:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    6028:	7ce1      	ldrb	r1, [r4, #19]
    602a:	2900      	cmp	r1, #0
    602c:	d002      	beq.n	6034 <spi_init+0x2f0>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    602e:	2180      	movs	r1, #128	; 0x80
    6030:	0089      	lsls	r1, r1, #2
    6032:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    6034:	7d21      	ldrb	r1, [r4, #20]
    6036:	2900      	cmp	r1, #0
    6038:	d002      	beq.n	6040 <spi_init+0x2fc>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    603a:	2180      	movs	r1, #128	; 0x80
    603c:	0189      	lsls	r1, r1, #6
    603e:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    6040:	4641      	mov	r1, r8
    6042:	6809      	ldr	r1, [r1, #0]
    6044:	430b      	orrs	r3, r1
    6046:	4641      	mov	r1, r8
    6048:	600b      	str	r3, [r1, #0]
	spi_module->CTRLB.reg |= ctrlb;
    604a:	684b      	ldr	r3, [r1, #4]
    604c:	431a      	orrs	r2, r3
    604e:	604a      	str	r2, [r1, #4]
	return STATUS_OK;
    6050:	2000      	movs	r0, #0
    6052:	e689      	b.n	5d68 <spi_init+0x24>
			MCLK->APBDMASK.reg |= mask;
    6054:	4a08      	ldr	r2, [pc, #32]	; (6078 <spi_init+0x334>)
    6056:	6a13      	ldr	r3, [r2, #32]
    6058:	2102      	movs	r1, #2
    605a:	430b      	orrs	r3, r1
    605c:	6213      	str	r3, [r2, #32]
		gclk_index   =  SERCOM5_GCLK_ID_CORE;
    605e:	2318      	movs	r3, #24
    6060:	e740      	b.n	5ee4 <spi_init+0x1a0>
    6062:	46c0      	nop			; (mov r8, r8)
    6064:	00005ae1 	.word	0x00005ae1
    6068:	40002800 	.word	0x40002800
    606c:	000070d5 	.word	0x000070d5
    6070:	000059d7 	.word	0x000059d7
    6074:	00005c3d 	.word	0x00005c3d
    6078:	40000400 	.word	0x40000400
    607c:	000070b1 	.word	0x000070b1
    6080:	00007041 	.word	0x00007041
    6084:	00005a95 	.word	0x00005a95
    6088:	000071ad 	.word	0x000071ad
    608c:	41002000 	.word	0x41002000

00006090 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    6090:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    6092:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    6094:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    6096:	2c01      	cmp	r4, #1
    6098:	d001      	beq.n	609e <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    609a:	0018      	movs	r0, r3
    609c:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    609e:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    60a0:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    60a2:	2c00      	cmp	r4, #0
    60a4:	d1f9      	bne.n	609a <spi_select_slave+0xa>
		if (select) {
    60a6:	2a00      	cmp	r2, #0
    60a8:	d058      	beq.n	615c <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    60aa:	784b      	ldrb	r3, [r1, #1]
    60ac:	2b00      	cmp	r3, #0
    60ae:	d044      	beq.n	613a <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    60b0:	6803      	ldr	r3, [r0, #0]
    60b2:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    60b4:	07db      	lsls	r3, r3, #31
    60b6:	d410      	bmi.n	60da <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    60b8:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    60ba:	09d1      	lsrs	r1, r2, #7
		return NULL;
    60bc:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    60be:	2900      	cmp	r1, #0
    60c0:	d104      	bne.n	60cc <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    60c2:	0953      	lsrs	r3, r2, #5
    60c4:	01db      	lsls	r3, r3, #7
    60c6:	492e      	ldr	r1, [pc, #184]	; (6180 <spi_select_slave+0xf0>)
    60c8:	468c      	mov	ip, r1
    60ca:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    60cc:	211f      	movs	r1, #31
    60ce:	4011      	ands	r1, r2
    60d0:	2201      	movs	r2, #1
    60d2:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    60d4:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    60d6:	2305      	movs	r3, #5
    60d8:	e7df      	b.n	609a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    60da:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    60dc:	09d4      	lsrs	r4, r2, #7
		return NULL;
    60de:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    60e0:	2c00      	cmp	r4, #0
    60e2:	d104      	bne.n	60ee <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    60e4:	0953      	lsrs	r3, r2, #5
    60e6:	01db      	lsls	r3, r3, #7
    60e8:	4c25      	ldr	r4, [pc, #148]	; (6180 <spi_select_slave+0xf0>)
    60ea:	46a4      	mov	ip, r4
    60ec:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    60ee:	241f      	movs	r4, #31
    60f0:	4014      	ands	r4, r2
    60f2:	2201      	movs	r2, #1
    60f4:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    60f6:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    60f8:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    60fa:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    60fc:	07d2      	lsls	r2, r2, #31
    60fe:	d501      	bpl.n	6104 <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    6100:	788a      	ldrb	r2, [r1, #2]
    6102:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    6104:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    6106:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    6108:	2a00      	cmp	r2, #0
    610a:	d1c6      	bne.n	609a <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    610c:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    610e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    6110:	7e13      	ldrb	r3, [r2, #24]
    6112:	420b      	tst	r3, r1
    6114:	d0fc      	beq.n	6110 <spi_select_slave+0x80>
    6116:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    6118:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    611a:	0749      	lsls	r1, r1, #29
    611c:	d5bd      	bpl.n	609a <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    611e:	8b53      	ldrh	r3, [r2, #26]
    6120:	075b      	lsls	r3, r3, #29
    6122:	d501      	bpl.n	6128 <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    6124:	2304      	movs	r3, #4
    6126:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    6128:	7983      	ldrb	r3, [r0, #6]
    612a:	2b01      	cmp	r3, #1
    612c:	d002      	beq.n	6134 <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    612e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    6130:	2300      	movs	r3, #0
    6132:	e7b2      	b.n	609a <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    6134:	6a93      	ldr	r3, [r2, #40]	; 0x28
    6136:	2300      	movs	r3, #0
    6138:	e7af      	b.n	609a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    613a:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    613c:	09d1      	lsrs	r1, r2, #7
		return NULL;
    613e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    6140:	2900      	cmp	r1, #0
    6142:	d104      	bne.n	614e <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    6144:	0953      	lsrs	r3, r2, #5
    6146:	01db      	lsls	r3, r3, #7
    6148:	490d      	ldr	r1, [pc, #52]	; (6180 <spi_select_slave+0xf0>)
    614a:	468c      	mov	ip, r1
    614c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    614e:	211f      	movs	r1, #31
    6150:	4011      	ands	r1, r2
    6152:	2201      	movs	r2, #1
    6154:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    6156:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    6158:	2300      	movs	r3, #0
    615a:	e79e      	b.n	609a <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    615c:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    615e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    6160:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    6162:	2900      	cmp	r1, #0
    6164:	d104      	bne.n	6170 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    6166:	0953      	lsrs	r3, r2, #5
    6168:	01db      	lsls	r3, r3, #7
    616a:	4905      	ldr	r1, [pc, #20]	; (6180 <spi_select_slave+0xf0>)
    616c:	468c      	mov	ip, r1
    616e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    6170:	211f      	movs	r1, #31
    6172:	4011      	ands	r1, r2
    6174:	2201      	movs	r2, #1
    6176:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    6178:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    617a:	2300      	movs	r3, #0
    617c:	e78d      	b.n	609a <spi_select_slave+0xa>
    617e:	46c0      	nop			; (mov r8, r8)
    6180:	40002800 	.word	0x40002800

00006184 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    6184:	b5f0      	push	{r4, r5, r6, r7, lr}
    6186:	46de      	mov	lr, fp
    6188:	4657      	mov	r7, sl
    618a:	464e      	mov	r6, r9
    618c:	4645      	mov	r5, r8
    618e:	b5e0      	push	{r5, r6, r7, lr}
    6190:	b083      	sub	sp, #12
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    6192:	2317      	movs	r3, #23
	if (length == 0) {
    6194:	2a00      	cmp	r2, #0
    6196:	d107      	bne.n	61a8 <spi_write_buffer_wait+0x24>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    6198:	0018      	movs	r0, r3
    619a:	b003      	add	sp, #12
    619c:	bc3c      	pop	{r2, r3, r4, r5}
    619e:	4690      	mov	r8, r2
    61a0:	4699      	mov	r9, r3
    61a2:	46a2      	mov	sl, r4
    61a4:	46ab      	mov	fp, r5
    61a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    61a8:	7943      	ldrb	r3, [r0, #5]
    61aa:	2b00      	cmp	r3, #0
    61ac:	d103      	bne.n	61b6 <spi_write_buffer_wait+0x32>
	SercomSpi *const spi_module = &(module->hw->SPI);
    61ae:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    61b0:	7e1c      	ldrb	r4, [r3, #24]
    61b2:	07a4      	lsls	r4, r4, #30
    61b4:	d40a      	bmi.n	61cc <spi_write_buffer_wait+0x48>
						data_to_send = tx_data[tx_pos++];
    61b6:	4693      	mov	fp, r2
    61b8:	2400      	movs	r4, #0
				if (spi_is_ready_to_write(module)) {
    61ba:	2301      	movs	r3, #1
			if (spi_is_write_complete(module)) {
    61bc:	2502      	movs	r5, #2
    61be:	46ac      	mov	ip, r5
					if (spi_is_ready_to_read(module)) {
    61c0:	3502      	adds	r5, #2
    61c2:	46a8      	mov	r8, r5
    61c4:	3a01      	subs	r2, #1
    61c6:	b292      	uxth	r2, r2
    61c8:	468a      	mov	sl, r1
    61ca:	e023      	b.n	6214 <spi_write_buffer_wait+0x90>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    61cc:	2402      	movs	r4, #2
    61ce:	761c      	strb	r4, [r3, #24]
    61d0:	e7f1      	b.n	61b6 <spi_write_buffer_wait+0x32>
    61d2:	7e35      	ldrb	r5, [r6, #24]
			if (spi_is_write_complete(module)) {
    61d4:	4661      	mov	r1, ip
    61d6:	420d      	tst	r5, r1
    61d8:	d12e      	bne.n	6238 <spi_write_buffer_wait+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    61da:	7e35      	ldrb	r5, [r6, #24]
			if (!spi_is_ready_to_write(module)) {
    61dc:	421d      	tst	r5, r3
    61de:	d100      	bne.n	61e2 <spi_write_buffer_wait+0x5e>
    61e0:	e0c2      	b.n	6368 <spi_write_buffer_wait+0x1e4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    61e2:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    61e4:	7e35      	ldrb	r5, [r6, #24]
		while (!spi_is_ready_to_write(module)) {
    61e6:	421d      	tst	r5, r3
    61e8:	d0fc      	beq.n	61e4 <spi_write_buffer_wait+0x60>
		uint16_t data_to_send = tx_data[tx_pos++];
    61ea:	1c67      	adds	r7, r4, #1
    61ec:	b2bf      	uxth	r7, r7
    61ee:	4651      	mov	r1, sl
    61f0:	5d0d      	ldrb	r5, [r1, r4]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    61f2:	7981      	ldrb	r1, [r0, #6]
    61f4:	2901      	cmp	r1, #1
    61f6:	d023      	beq.n	6240 <spi_write_buffer_wait+0xbc>
		uint16_t data_to_send = tx_data[tx_pos++];
    61f8:	b2ad      	uxth	r5, r5
    61fa:	003c      	movs	r4, r7
    61fc:	7e37      	ldrb	r7, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    61fe:	421f      	tst	r7, r3
    6200:	d002      	beq.n	6208 <spi_write_buffer_wait+0x84>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    6202:	05ed      	lsls	r5, r5, #23
    6204:	0ded      	lsrs	r5, r5, #23
    6206:	62b5      	str	r5, [r6, #40]	; 0x28
    6208:	1e55      	subs	r5, r2, #1
    620a:	b2ad      	uxth	r5, r5
		if (module->receiver_enabled) {
    620c:	79c6      	ldrb	r6, [r0, #7]
    620e:	2e00      	cmp	r6, #0
    6210:	d11d      	bne.n	624e <spi_write_buffer_wait+0xca>
    6212:	002a      	movs	r2, r5
	while (length--) {
    6214:	4d59      	ldr	r5, [pc, #356]	; (637c <spi_write_buffer_wait+0x1f8>)
    6216:	42aa      	cmp	r2, r5
    6218:	d070      	beq.n	62fc <spi_write_buffer_wait+0x178>
		if (module->mode == SPI_MODE_SLAVE) {
    621a:	7945      	ldrb	r5, [r0, #5]
    621c:	2d00      	cmp	r5, #0
    621e:	d1e0      	bne.n	61e2 <spi_write_buffer_wait+0x5e>
	SercomSpi *const spi_module = &(module->hw->SPI);
    6220:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    6222:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_ready_to_write(module)) {
    6224:	421d      	tst	r5, r3
    6226:	d1d4      	bne.n	61d2 <spi_write_buffer_wait+0x4e>
    6228:	4d55      	ldr	r5, [pc, #340]	; (6380 <spi_write_buffer_wait+0x1fc>)
    622a:	7e37      	ldrb	r7, [r6, #24]
    622c:	421f      	tst	r7, r3
    622e:	d1d0      	bne.n	61d2 <spi_write_buffer_wait+0x4e>
    6230:	3d01      	subs	r5, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    6232:	2d00      	cmp	r5, #0
    6234:	d1f9      	bne.n	622a <spi_write_buffer_wait+0xa6>
    6236:	e7cc      	b.n	61d2 <spi_write_buffer_wait+0x4e>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    6238:	2302      	movs	r3, #2
    623a:	7633      	strb	r3, [r6, #24]
				return STATUS_ABORTED;
    623c:	3302      	adds	r3, #2
    623e:	e7ab      	b.n	6198 <spi_write_buffer_wait+0x14>
			data_to_send |= (tx_data[tx_pos++] << 8);
    6240:	3402      	adds	r4, #2
    6242:	b2a4      	uxth	r4, r4
    6244:	4651      	mov	r1, sl
    6246:	5dcf      	ldrb	r7, [r1, r7]
    6248:	023f      	lsls	r7, r7, #8
    624a:	433d      	orrs	r5, r7
    624c:	e7d6      	b.n	61fc <spi_write_buffer_wait+0x78>
    624e:	4651      	mov	r1, sl
			if (module->mode == SPI_MODE_SLAVE) {
    6250:	7945      	ldrb	r5, [r0, #5]
    6252:	2d00      	cmp	r5, #0
    6254:	d137      	bne.n	62c6 <spi_write_buffer_wait+0x142>
    6256:	4d4b      	ldr	r5, [pc, #300]	; (6384 <spi_write_buffer_wait+0x200>)
    6258:	9101      	str	r1, [sp, #4]
    625a:	e012      	b.n	6282 <spi_write_buffer_wait+0xfe>
							data_to_send |= (tx_data[tx_pos++] << 8);
    625c:	3402      	adds	r4, #2
    625e:	b2a4      	uxth	r4, r4
    6260:	4649      	mov	r1, r9
    6262:	9f01      	ldr	r7, [sp, #4]
    6264:	5c79      	ldrb	r1, [r7, r1]
    6266:	0209      	lsls	r1, r1, #8
    6268:	9f00      	ldr	r7, [sp, #0]
    626a:	430f      	orrs	r7, r1
    626c:	e01b      	b.n	62a6 <spi_write_buffer_wait+0x122>
						length--;
    626e:	3a01      	subs	r2, #1
    6270:	b292      	uxth	r2, r2
	SercomSpi *const spi_module = &(module->hw->SPI);
    6272:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    6274:	7e37      	ldrb	r7, [r6, #24]
					if (spi_is_ready_to_read(module)) {
    6276:	4641      	mov	r1, r8
    6278:	420f      	tst	r7, r1
    627a:	d11b      	bne.n	62b4 <spi_write_buffer_wait+0x130>
    627c:	3d01      	subs	r5, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    627e:	2d00      	cmp	r5, #0
    6280:	d018      	beq.n	62b4 <spi_write_buffer_wait+0x130>
					if (length && spi_is_ready_to_write(module)) {
    6282:	2a00      	cmp	r2, #0
    6284:	d0f5      	beq.n	6272 <spi_write_buffer_wait+0xee>
	SercomSpi *const spi_module = &(module->hw->SPI);
    6286:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    6288:	7e37      	ldrb	r7, [r6, #24]
    628a:	421f      	tst	r7, r3
    628c:	d0f1      	beq.n	6272 <spi_write_buffer_wait+0xee>
						data_to_send = tx_data[tx_pos++];
    628e:	1c67      	adds	r7, r4, #1
    6290:	b2b9      	uxth	r1, r7
    6292:	4689      	mov	r9, r1
    6294:	9901      	ldr	r1, [sp, #4]
    6296:	5d09      	ldrb	r1, [r1, r4]
    6298:	9100      	str	r1, [sp, #0]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    629a:	7981      	ldrb	r1, [r0, #6]
    629c:	2901      	cmp	r1, #1
    629e:	d0dd      	beq.n	625c <spi_write_buffer_wait+0xd8>
						data_to_send = tx_data[tx_pos++];
    62a0:	4669      	mov	r1, sp
    62a2:	880f      	ldrh	r7, [r1, #0]
    62a4:	464c      	mov	r4, r9
    62a6:	7e31      	ldrb	r1, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    62a8:	4219      	tst	r1, r3
    62aa:	d0e0      	beq.n	626e <spi_write_buffer_wait+0xea>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    62ac:	05ff      	lsls	r7, r7, #23
    62ae:	0dff      	lsrs	r7, r7, #23
    62b0:	62b7      	str	r7, [r6, #40]	; 0x28
    62b2:	e7dc      	b.n	626e <spi_write_buffer_wait+0xea>
    62b4:	9901      	ldr	r1, [sp, #4]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    62b6:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_write_complete(module)) {
    62b8:	4667      	mov	r7, ip
    62ba:	423d      	tst	r5, r7
    62bc:	d118      	bne.n	62f0 <spi_write_buffer_wait+0x16c>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    62be:	7e35      	ldrb	r5, [r6, #24]
				if (!spi_is_ready_to_read(module)) {
    62c0:	4646      	mov	r6, r8
    62c2:	4235      	tst	r5, r6
    62c4:	d052      	beq.n	636c <spi_write_buffer_wait+0x1e8>
	SercomSpi *const spi_module = &(module->hw->SPI);
    62c6:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    62c8:	7e35      	ldrb	r5, [r6, #24]
			while (!spi_is_ready_to_read(module)) {
    62ca:	4647      	mov	r7, r8
    62cc:	423d      	tst	r5, r7
    62ce:	d0fb      	beq.n	62c8 <spi_write_buffer_wait+0x144>
    62d0:	7e35      	ldrb	r5, [r6, #24]
	if (!spi_is_ready_to_read(module)) {
    62d2:	423d      	tst	r5, r7
    62d4:	d007      	beq.n	62e6 <spi_write_buffer_wait+0x162>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    62d6:	8b75      	ldrh	r5, [r6, #26]
    62d8:	423d      	tst	r5, r7
    62da:	d000      	beq.n	62de <spi_write_buffer_wait+0x15a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    62dc:	8377      	strh	r7, [r6, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    62de:	7985      	ldrb	r5, [r0, #6]
    62e0:	2d01      	cmp	r5, #1
    62e2:	d009      	beq.n	62f8 <spi_write_buffer_wait+0x174>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    62e4:	6ab5      	ldr	r5, [r6, #40]	; 0x28
			flush_length--;
    62e6:	465d      	mov	r5, fp
    62e8:	3d01      	subs	r5, #1
    62ea:	b2ad      	uxth	r5, r5
    62ec:	46ab      	mov	fp, r5
    62ee:	e769      	b.n	61c4 <spi_write_buffer_wait+0x40>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    62f0:	2302      	movs	r3, #2
    62f2:	7633      	strb	r3, [r6, #24]
					return STATUS_ABORTED;
    62f4:	3302      	adds	r3, #2
    62f6:	e74f      	b.n	6198 <spi_write_buffer_wait+0x14>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    62f8:	6ab5      	ldr	r5, [r6, #40]	; 0x28
    62fa:	e7f4      	b.n	62e6 <spi_write_buffer_wait+0x162>
	if (module->mode == SPI_MODE_MASTER) {
    62fc:	7943      	ldrb	r3, [r0, #5]
    62fe:	2b01      	cmp	r3, #1
    6300:	d00b      	beq.n	631a <spi_write_buffer_wait+0x196>
	if (module->mode == SPI_MODE_SLAVE) {
    6302:	2b00      	cmp	r3, #0
    6304:	d134      	bne.n	6370 <spi_write_buffer_wait+0x1ec>
		if (module->receiver_enabled) {
    6306:	79c2      	ldrb	r2, [r0, #7]
    6308:	2a00      	cmp	r2, #0
    630a:	d100      	bne.n	630e <spi_write_buffer_wait+0x18a>
    630c:	e744      	b.n	6198 <spi_write_buffer_wait+0x14>
					if (spi_is_ready_to_read(module)) {
    630e:	2404      	movs	r4, #4
			while (flush_length) {
    6310:	465b      	mov	r3, fp
    6312:	465d      	mov	r5, fp
    6314:	2b00      	cmp	r3, #0
    6316:	d119      	bne.n	634c <spi_write_buffer_wait+0x1c8>
    6318:	e73e      	b.n	6198 <spi_write_buffer_wait+0x14>
	SercomSpi *const spi_module = &(module->hw->SPI);
    631a:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    631c:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    631e:	7e0b      	ldrb	r3, [r1, #24]
    6320:	4213      	tst	r3, r2
    6322:	d0fc      	beq.n	631e <spi_write_buffer_wait+0x19a>
	return STATUS_OK;
    6324:	2300      	movs	r3, #0
    6326:	e737      	b.n	6198 <spi_write_buffer_wait+0x14>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    6328:	7e0b      	ldrb	r3, [r1, #24]
				if (!spi_is_ready_to_read(module)) {
    632a:	4223      	tst	r3, r4
    632c:	d022      	beq.n	6374 <spi_write_buffer_wait+0x1f0>
    632e:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    6330:	4223      	tst	r3, r4
    6332:	d007      	beq.n	6344 <spi_write_buffer_wait+0x1c0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    6334:	8b4b      	ldrh	r3, [r1, #26]
    6336:	4223      	tst	r3, r4
    6338:	d000      	beq.n	633c <spi_write_buffer_wait+0x1b8>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    633a:	834c      	strh	r4, [r1, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    633c:	7983      	ldrb	r3, [r0, #6]
    633e:	2b01      	cmp	r3, #1
    6340:	d010      	beq.n	6364 <spi_write_buffer_wait+0x1e0>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    6342:	6a8b      	ldr	r3, [r1, #40]	; 0x28
				flush_length--;
    6344:	3d01      	subs	r5, #1
    6346:	b2ad      	uxth	r5, r5
			while (flush_length) {
    6348:	2d00      	cmp	r5, #0
    634a:	d015      	beq.n	6378 <spi_write_buffer_wait+0x1f4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    634c:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    634e:	7e0b      	ldrb	r3, [r1, #24]
					if (spi_is_ready_to_read(module)) {
    6350:	4223      	tst	r3, r4
    6352:	d1e9      	bne.n	6328 <spi_write_buffer_wait+0x1a4>
    6354:	4b0a      	ldr	r3, [pc, #40]	; (6380 <spi_write_buffer_wait+0x1fc>)
    6356:	7e0a      	ldrb	r2, [r1, #24]
    6358:	4222      	tst	r2, r4
    635a:	d1e5      	bne.n	6328 <spi_write_buffer_wait+0x1a4>
    635c:	3b01      	subs	r3, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    635e:	2b00      	cmp	r3, #0
    6360:	d1f9      	bne.n	6356 <spi_write_buffer_wait+0x1d2>
    6362:	e7e1      	b.n	6328 <spi_write_buffer_wait+0x1a4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    6364:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    6366:	e7ed      	b.n	6344 <spi_write_buffer_wait+0x1c0>
				return STATUS_ERR_TIMEOUT;
    6368:	2312      	movs	r3, #18
    636a:	e715      	b.n	6198 <spi_write_buffer_wait+0x14>
					return STATUS_ERR_TIMEOUT;
    636c:	2312      	movs	r3, #18
    636e:	e713      	b.n	6198 <spi_write_buffer_wait+0x14>
	return STATUS_OK;
    6370:	2300      	movs	r3, #0
    6372:	e711      	b.n	6198 <spi_write_buffer_wait+0x14>
					return STATUS_ERR_TIMEOUT;
    6374:	2312      	movs	r3, #18
    6376:	e70f      	b.n	6198 <spi_write_buffer_wait+0x14>
	return STATUS_OK;
    6378:	2300      	movs	r3, #0
    637a:	e70d      	b.n	6198 <spi_write_buffer_wait+0x14>
    637c:	0000ffff 	.word	0x0000ffff
    6380:	00002710 	.word	0x00002710
    6384:	00002711 	.word	0x00002711

00006388 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    6388:	b5f0      	push	{r4, r5, r6, r7, lr}
    638a:	46de      	mov	lr, fp
    638c:	4657      	mov	r7, sl
    638e:	464e      	mov	r6, r9
    6390:	4645      	mov	r5, r8
    6392:	b5e0      	push	{r5, r6, r7, lr}
    6394:	b091      	sub	sp, #68	; 0x44
    6396:	0005      	movs	r5, r0
    6398:	000c      	movs	r4, r1
    639a:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    639c:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    639e:	0008      	movs	r0, r1
    63a0:	4bc6      	ldr	r3, [pc, #792]	; (66bc <usart_init+0x334>)
    63a2:	4798      	blx	r3
    63a4:	0002      	movs	r2, r0
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
    63a6:	2805      	cmp	r0, #5
    63a8:	d00d      	beq.n	63c6 <usart_init+0x3e>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    63aa:	0007      	movs	r7, r0
    63ac:	3712      	adds	r7, #18
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    63ae:	0003      	movs	r3, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    63b0:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    63b2:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    63b4:	07c9      	lsls	r1, r1, #31
    63b6:	d509      	bpl.n	63cc <usart_init+0x44>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    63b8:	b011      	add	sp, #68	; 0x44
    63ba:	bc3c      	pop	{r2, r3, r4, r5}
    63bc:	4690      	mov	r8, r2
    63be:	4699      	mov	r9, r3
    63c0:	46a2      	mov	sl, r4
    63c2:	46ab      	mov	fp, r5
    63c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    63c6:	2718      	movs	r7, #24
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    63c8:	2301      	movs	r3, #1
    63ca:	e7f1      	b.n	63b0 <usart_init+0x28>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    63cc:	6821      	ldr	r1, [r4, #0]
		return STATUS_ERR_DENIED;
    63ce:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    63d0:	0789      	lsls	r1, r1, #30
    63d2:	d4f1      	bmi.n	63b8 <usart_init+0x30>
	if (sercom_index == 5) {
    63d4:	2a05      	cmp	r2, #5
    63d6:	d049      	beq.n	646c <usart_init+0xe4>
			MCLK->APBCMASK.reg |= mask;
    63d8:	49b9      	ldr	r1, [pc, #740]	; (66c0 <usart_init+0x338>)
    63da:	69c8      	ldr	r0, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
    63dc:	2201      	movs	r2, #1
    63de:	409a      	lsls	r2, r3
    63e0:	0013      	movs	r3, r2
    63e2:	4303      	orrs	r3, r0
    63e4:	61cb      	str	r3, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    63e6:	a90f      	add	r1, sp, #60	; 0x3c
    63e8:	232d      	movs	r3, #45	; 0x2d
    63ea:	4698      	mov	r8, r3
    63ec:	5cf3      	ldrb	r3, [r6, r3]
    63ee:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    63f0:	b2ff      	uxtb	r7, r7
    63f2:	0038      	movs	r0, r7
    63f4:	4bb3      	ldr	r3, [pc, #716]	; (66c4 <usart_init+0x33c>)
    63f6:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    63f8:	0038      	movs	r0, r7
    63fa:	4bb3      	ldr	r3, [pc, #716]	; (66c8 <usart_init+0x340>)
    63fc:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    63fe:	4643      	mov	r3, r8
    6400:	5cf0      	ldrb	r0, [r6, r3]
    6402:	2100      	movs	r1, #0
    6404:	4bb1      	ldr	r3, [pc, #708]	; (66cc <usart_init+0x344>)
    6406:	4798      	blx	r3
	module->character_size = config->character_size;
    6408:	7af3      	ldrb	r3, [r6, #11]
    640a:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    640c:	2324      	movs	r3, #36	; 0x24
    640e:	5cf3      	ldrb	r3, [r6, r3]
    6410:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    6412:	2325      	movs	r3, #37	; 0x25
    6414:	5cf3      	ldrb	r3, [r6, r3]
    6416:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    6418:	7ef3      	ldrb	r3, [r6, #27]
    641a:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    641c:	7f33      	ldrb	r3, [r6, #28]
    641e:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    6420:	682b      	ldr	r3, [r5, #0]
    6422:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    6424:	0018      	movs	r0, r3
    6426:	4ba5      	ldr	r3, [pc, #660]	; (66bc <usart_init+0x334>)
    6428:	4798      	blx	r3
	if (sercom_index == 5) {
    642a:	2805      	cmp	r0, #5
    642c:	d026      	beq.n	647c <usart_init+0xf4>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    642e:	3012      	adds	r0, #18
	uint16_t baud  = 0;
    6430:	2200      	movs	r2, #0
    6432:	230e      	movs	r3, #14
    6434:	a906      	add	r1, sp, #24
    6436:	468c      	mov	ip, r1
    6438:	4463      	add	r3, ip
    643a:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    643c:	8a32      	ldrh	r2, [r6, #16]
    643e:	9202      	str	r2, [sp, #8]
    6440:	2380      	movs	r3, #128	; 0x80
    6442:	01db      	lsls	r3, r3, #7
    6444:	429a      	cmp	r2, r3
    6446:	d100      	bne.n	644a <usart_init+0xc2>
    6448:	e0ab      	b.n	65a2 <usart_init+0x21a>
    644a:	d919      	bls.n	6480 <usart_init+0xf8>
    644c:	23c0      	movs	r3, #192	; 0xc0
    644e:	01db      	lsls	r3, r3, #7
    6450:	9a02      	ldr	r2, [sp, #8]
    6452:	429a      	cmp	r2, r3
    6454:	d100      	bne.n	6458 <usart_init+0xd0>
    6456:	e09f      	b.n	6598 <usart_init+0x210>
    6458:	2380      	movs	r3, #128	; 0x80
    645a:	021b      	lsls	r3, r3, #8
    645c:	429a      	cmp	r2, r3
    645e:	d000      	beq.n	6462 <usart_init+0xda>
    6460:	e127      	b.n	66b2 <usart_init+0x32a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    6462:	2303      	movs	r3, #3
    6464:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    6466:	2300      	movs	r3, #0
    6468:	9307      	str	r3, [sp, #28]
    646a:	e012      	b.n	6492 <usart_init+0x10a>
			MCLK->APBDMASK.reg |= mask;
    646c:	4994      	ldr	r1, [pc, #592]	; (66c0 <usart_init+0x338>)
    646e:	6a08      	ldr	r0, [r1, #32]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
    6470:	3a04      	subs	r2, #4
    6472:	409a      	lsls	r2, r3
    6474:	0013      	movs	r3, r2
    6476:	4303      	orrs	r3, r0
    6478:	620b      	str	r3, [r1, #32]
    647a:	e7b4      	b.n	63e6 <usart_init+0x5e>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    647c:	2018      	movs	r0, #24
    647e:	e7d7      	b.n	6430 <usart_init+0xa8>
	switch (config->sample_rate) {
    6480:	2380      	movs	r3, #128	; 0x80
    6482:	019b      	lsls	r3, r3, #6
    6484:	429a      	cmp	r2, r3
    6486:	d000      	beq.n	648a <usart_init+0x102>
    6488:	e113      	b.n	66b2 <usart_init+0x32a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    648a:	2310      	movs	r3, #16
    648c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    648e:	3b0f      	subs	r3, #15
    6490:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    6492:	6833      	ldr	r3, [r6, #0]
    6494:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    6496:	68f3      	ldr	r3, [r6, #12]
    6498:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    649a:	6973      	ldr	r3, [r6, #20]
    649c:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    649e:	7e33      	ldrb	r3, [r6, #24]
    64a0:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    64a2:	2326      	movs	r3, #38	; 0x26
    64a4:	5cf3      	ldrb	r3, [r6, r3]
    64a6:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    64a8:	6873      	ldr	r3, [r6, #4]
    64aa:	4699      	mov	r9, r3
	switch (transfer_mode)
    64ac:	2b00      	cmp	r3, #0
    64ae:	d100      	bne.n	64b2 <usart_init+0x12a>
    64b0:	e09f      	b.n	65f2 <usart_init+0x26a>
    64b2:	2380      	movs	r3, #128	; 0x80
    64b4:	055b      	lsls	r3, r3, #21
    64b6:	4599      	cmp	r9, r3
    64b8:	d104      	bne.n	64c4 <usart_init+0x13c>
			if (!config->use_external_clock) {
    64ba:	2327      	movs	r3, #39	; 0x27
    64bc:	5cf3      	ldrb	r3, [r6, r3]
    64be:	2b00      	cmp	r3, #0
    64c0:	d100      	bne.n	64c4 <usart_init+0x13c>
    64c2:	e084      	b.n	65ce <usart_init+0x246>
	if(config->encoding_format_enable) {
    64c4:	7e73      	ldrb	r3, [r6, #25]
    64c6:	2b00      	cmp	r3, #0
    64c8:	d002      	beq.n	64d0 <usart_init+0x148>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    64ca:	7eb3      	ldrb	r3, [r6, #26]
    64cc:	4642      	mov	r2, r8
    64ce:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    64d0:	682a      	ldr	r2, [r5, #0]
    64d2:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    64d4:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    64d6:	2b00      	cmp	r3, #0
    64d8:	d1fc      	bne.n	64d4 <usart_init+0x14c>
	usart_hw->BAUD.reg = baud;
    64da:	330e      	adds	r3, #14
    64dc:	aa06      	add	r2, sp, #24
    64de:	4694      	mov	ip, r2
    64e0:	4463      	add	r3, ip
    64e2:	881b      	ldrh	r3, [r3, #0]
    64e4:	4642      	mov	r2, r8
    64e6:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    64e8:	9b05      	ldr	r3, [sp, #20]
    64ea:	9a03      	ldr	r2, [sp, #12]
    64ec:	4313      	orrs	r3, r2
    64ee:	9a04      	ldr	r2, [sp, #16]
    64f0:	4313      	orrs	r3, r2
    64f2:	464a      	mov	r2, r9
    64f4:	4313      	orrs	r3, r2
    64f6:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    64f8:	465b      	mov	r3, fp
    64fa:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    64fc:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    64fe:	4653      	mov	r3, sl
    6500:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    6502:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    6504:	2327      	movs	r3, #39	; 0x27
    6506:	5cf3      	ldrb	r3, [r6, r3]
    6508:	2b00      	cmp	r3, #0
    650a:	d101      	bne.n	6510 <usart_init+0x188>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    650c:	3304      	adds	r3, #4
    650e:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    6510:	7e73      	ldrb	r3, [r6, #25]
    6512:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    6514:	7f32      	ldrb	r2, [r6, #28]
    6516:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    6518:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    651a:	7f72      	ldrb	r2, [r6, #29]
    651c:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    651e:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    6520:	2224      	movs	r2, #36	; 0x24
    6522:	5cb2      	ldrb	r2, [r6, r2]
    6524:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    6526:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    6528:	2225      	movs	r2, #37	; 0x25
    652a:	5cb2      	ldrb	r2, [r6, r2]
    652c:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    652e:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    6530:	7ab1      	ldrb	r1, [r6, #10]
    6532:	7af2      	ldrb	r2, [r6, #11]
    6534:	4311      	orrs	r1, r2
    6536:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    6538:	8933      	ldrh	r3, [r6, #8]
    653a:	2bff      	cmp	r3, #255	; 0xff
    653c:	d07d      	beq.n	663a <usart_init+0x2b2>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    653e:	2280      	movs	r2, #128	; 0x80
    6540:	0452      	lsls	r2, r2, #17
    6542:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    6544:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    6546:	232c      	movs	r3, #44	; 0x2c
    6548:	5cf3      	ldrb	r3, [r6, r3]
    654a:	2b00      	cmp	r3, #0
    654c:	d103      	bne.n	6556 <usart_init+0x1ce>
    654e:	4b60      	ldr	r3, [pc, #384]	; (66d0 <usart_init+0x348>)
    6550:	789b      	ldrb	r3, [r3, #2]
    6552:	079b      	lsls	r3, r3, #30
    6554:	d501      	bpl.n	655a <usart_init+0x1d2>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    6556:	2380      	movs	r3, #128	; 0x80
    6558:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    655a:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    655c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    655e:	2b00      	cmp	r3, #0
    6560:	d1fc      	bne.n	655c <usart_init+0x1d4>
	usart_hw->CTRLB.reg = ctrlb;
    6562:	4643      	mov	r3, r8
    6564:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    6566:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    6568:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    656a:	2b00      	cmp	r3, #0
    656c:	d1fc      	bne.n	6568 <usart_init+0x1e0>
	usart_hw->CTRLA.reg = ctrla;
    656e:	4643      	mov	r3, r8
    6570:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    6572:	ab0e      	add	r3, sp, #56	; 0x38
    6574:	2280      	movs	r2, #128	; 0x80
    6576:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6578:	2200      	movs	r2, #0
    657a:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    657c:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    657e:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    6580:	6b33      	ldr	r3, [r6, #48]	; 0x30
    6582:	930a      	str	r3, [sp, #40]	; 0x28
    6584:	6b73      	ldr	r3, [r6, #52]	; 0x34
    6586:	930b      	str	r3, [sp, #44]	; 0x2c
    6588:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    658a:	930c      	str	r3, [sp, #48]	; 0x30
    658c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    658e:	9302      	str	r3, [sp, #8]
    6590:	930d      	str	r3, [sp, #52]	; 0x34
    6592:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    6594:	ae0a      	add	r6, sp, #40	; 0x28
    6596:	e05e      	b.n	6656 <usart_init+0x2ce>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    6598:	2308      	movs	r3, #8
    659a:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    659c:	3b07      	subs	r3, #7
    659e:	9307      	str	r3, [sp, #28]
    65a0:	e777      	b.n	6492 <usart_init+0x10a>
	ctrla = (uint32_t)config->data_order |
    65a2:	6833      	ldr	r3, [r6, #0]
    65a4:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    65a6:	68f3      	ldr	r3, [r6, #12]
    65a8:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    65aa:	6973      	ldr	r3, [r6, #20]
    65ac:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    65ae:	7e33      	ldrb	r3, [r6, #24]
    65b0:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    65b2:	2326      	movs	r3, #38	; 0x26
    65b4:	5cf3      	ldrb	r3, [r6, r3]
    65b6:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    65b8:	6873      	ldr	r3, [r6, #4]
    65ba:	4699      	mov	r9, r3
	switch (transfer_mode)
    65bc:	2b00      	cmp	r3, #0
    65be:	d014      	beq.n	65ea <usart_init+0x262>
    65c0:	2380      	movs	r3, #128	; 0x80
    65c2:	055b      	lsls	r3, r3, #21
    65c4:	4599      	cmp	r9, r3
    65c6:	d100      	bne.n	65ca <usart_init+0x242>
    65c8:	e777      	b.n	64ba <usart_init+0x132>
	enum status_code status_code = STATUS_OK;
    65ca:	2000      	movs	r0, #0
    65cc:	e020      	b.n	6610 <usart_init+0x288>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    65ce:	6a33      	ldr	r3, [r6, #32]
    65d0:	001f      	movs	r7, r3
    65d2:	b2c0      	uxtb	r0, r0
    65d4:	4b3f      	ldr	r3, [pc, #252]	; (66d4 <usart_init+0x34c>)
    65d6:	4798      	blx	r3
    65d8:	0001      	movs	r1, r0
    65da:	220e      	movs	r2, #14
    65dc:	ab06      	add	r3, sp, #24
    65de:	469c      	mov	ip, r3
    65e0:	4462      	add	r2, ip
    65e2:	0038      	movs	r0, r7
    65e4:	4b3c      	ldr	r3, [pc, #240]	; (66d8 <usart_init+0x350>)
    65e6:	4798      	blx	r3
    65e8:	e012      	b.n	6610 <usart_init+0x288>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    65ea:	2308      	movs	r3, #8
    65ec:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    65ee:	2300      	movs	r3, #0
    65f0:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    65f2:	2327      	movs	r3, #39	; 0x27
    65f4:	5cf3      	ldrb	r3, [r6, r3]
    65f6:	2b00      	cmp	r3, #0
    65f8:	d00e      	beq.n	6618 <usart_init+0x290>
				status_code =
    65fa:	9b06      	ldr	r3, [sp, #24]
    65fc:	9300      	str	r3, [sp, #0]
    65fe:	9b07      	ldr	r3, [sp, #28]
    6600:	220e      	movs	r2, #14
    6602:	a906      	add	r1, sp, #24
    6604:	468c      	mov	ip, r1
    6606:	4462      	add	r2, ip
    6608:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    660a:	6a30      	ldr	r0, [r6, #32]
    660c:	4f33      	ldr	r7, [pc, #204]	; (66dc <usart_init+0x354>)
    660e:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    6610:	2800      	cmp	r0, #0
    6612:	d000      	beq.n	6616 <usart_init+0x28e>
    6614:	e6d0      	b.n	63b8 <usart_init+0x30>
    6616:	e755      	b.n	64c4 <usart_init+0x13c>
						_sercom_get_async_baud_val(config->baudrate,
    6618:	6a33      	ldr	r3, [r6, #32]
    661a:	001f      	movs	r7, r3
    661c:	b2c0      	uxtb	r0, r0
    661e:	4b2d      	ldr	r3, [pc, #180]	; (66d4 <usart_init+0x34c>)
    6620:	4798      	blx	r3
    6622:	0001      	movs	r1, r0
				status_code =
    6624:	9b06      	ldr	r3, [sp, #24]
    6626:	9300      	str	r3, [sp, #0]
    6628:	9b07      	ldr	r3, [sp, #28]
    662a:	220e      	movs	r2, #14
    662c:	a806      	add	r0, sp, #24
    662e:	4684      	mov	ip, r0
    6630:	4462      	add	r2, ip
    6632:	0038      	movs	r0, r7
    6634:	4f29      	ldr	r7, [pc, #164]	; (66dc <usart_init+0x354>)
    6636:	47b8      	blx	r7
    6638:	e7ea      	b.n	6610 <usart_init+0x288>
		if(config->lin_slave_enable) {
    663a:	7ef3      	ldrb	r3, [r6, #27]
    663c:	2b00      	cmp	r3, #0
    663e:	d082      	beq.n	6546 <usart_init+0x1be>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    6640:	2380      	movs	r3, #128	; 0x80
    6642:	04db      	lsls	r3, r3, #19
    6644:	431f      	orrs	r7, r3
    6646:	e77e      	b.n	6546 <usart_init+0x1be>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    6648:	0020      	movs	r0, r4
    664a:	4b25      	ldr	r3, [pc, #148]	; (66e0 <usart_init+0x358>)
    664c:	4798      	blx	r3
    664e:	e007      	b.n	6660 <usart_init+0x2d8>
    6650:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    6652:	2f04      	cmp	r7, #4
    6654:	d00d      	beq.n	6672 <usart_init+0x2ea>
    6656:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    6658:	00bb      	lsls	r3, r7, #2
    665a:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    665c:	2800      	cmp	r0, #0
    665e:	d0f3      	beq.n	6648 <usart_init+0x2c0>
		if (current_pinmux != PINMUX_UNUSED) {
    6660:	1c43      	adds	r3, r0, #1
    6662:	d0f5      	beq.n	6650 <usart_init+0x2c8>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    6664:	a90e      	add	r1, sp, #56	; 0x38
    6666:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    6668:	0c00      	lsrs	r0, r0, #16
    666a:	b2c0      	uxtb	r0, r0
    666c:	4b1d      	ldr	r3, [pc, #116]	; (66e4 <usart_init+0x35c>)
    666e:	4798      	blx	r3
    6670:	e7ee      	b.n	6650 <usart_init+0x2c8>
		module->callback[i]            = NULL;
    6672:	2300      	movs	r3, #0
    6674:	60eb      	str	r3, [r5, #12]
    6676:	612b      	str	r3, [r5, #16]
    6678:	616b      	str	r3, [r5, #20]
    667a:	61ab      	str	r3, [r5, #24]
    667c:	61eb      	str	r3, [r5, #28]
    667e:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    6680:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    6682:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    6684:	2200      	movs	r2, #0
    6686:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    6688:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    668a:	3330      	adds	r3, #48	; 0x30
    668c:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    668e:	3301      	adds	r3, #1
    6690:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    6692:	3301      	adds	r3, #1
    6694:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    6696:	3301      	adds	r3, #1
    6698:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    669a:	6828      	ldr	r0, [r5, #0]
    669c:	4b07      	ldr	r3, [pc, #28]	; (66bc <usart_init+0x334>)
    669e:	4798      	blx	r3
    66a0:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    66a2:	4911      	ldr	r1, [pc, #68]	; (66e8 <usart_init+0x360>)
    66a4:	4b11      	ldr	r3, [pc, #68]	; (66ec <usart_init+0x364>)
    66a6:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    66a8:	00a4      	lsls	r4, r4, #2
    66aa:	4b11      	ldr	r3, [pc, #68]	; (66f0 <usart_init+0x368>)
    66ac:	50e5      	str	r5, [r4, r3]
	return status_code;
    66ae:	2000      	movs	r0, #0
    66b0:	e682      	b.n	63b8 <usart_init+0x30>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    66b2:	2310      	movs	r3, #16
    66b4:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    66b6:	2300      	movs	r3, #0
    66b8:	9307      	str	r3, [sp, #28]
    66ba:	e6ea      	b.n	6492 <usart_init+0x10a>
    66bc:	00005c3d 	.word	0x00005c3d
    66c0:	40000400 	.word	0x40000400
    66c4:	000070b1 	.word	0x000070b1
    66c8:	00007041 	.word	0x00007041
    66cc:	00005a95 	.word	0x00005a95
    66d0:	41002000 	.word	0x41002000
    66d4:	000070d5 	.word	0x000070d5
    66d8:	000059d7 	.word	0x000059d7
    66dc:	00005a01 	.word	0x00005a01
    66e0:	00005ae1 	.word	0x00005ae1
    66e4:	000071ad 	.word	0x000071ad
    66e8:	000068e9 	.word	0x000068e9
    66ec:	00005c79 	.word	0x00005c79
    66f0:	2000245c 	.word	0x2000245c

000066f4 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    66f4:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    66f6:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    66f8:	2a00      	cmp	r2, #0
    66fa:	d101      	bne.n	6700 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    66fc:	0018      	movs	r0, r3
    66fe:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    6700:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    6702:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    6704:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    6706:	2a00      	cmp	r2, #0
    6708:	d1f8      	bne.n	66fc <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    670a:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    670c:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    670e:	2a00      	cmp	r2, #0
    6710:	d1fc      	bne.n	670c <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    6712:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    6714:	2102      	movs	r1, #2
    6716:	7e1a      	ldrb	r2, [r3, #24]
    6718:	420a      	tst	r2, r1
    671a:	d0fc      	beq.n	6716 <usart_write_wait+0x22>
	return STATUS_OK;
    671c:	2300      	movs	r3, #0
    671e:	e7ed      	b.n	66fc <usart_write_wait+0x8>

00006720 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    6720:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    6722:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    6724:	2a00      	cmp	r2, #0
    6726:	d101      	bne.n	672c <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    6728:	0018      	movs	r0, r3
    672a:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    672c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    672e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    6730:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    6732:	2a00      	cmp	r2, #0
    6734:	d1f8      	bne.n	6728 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    6736:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    6738:	7e10      	ldrb	r0, [r2, #24]
    673a:	0740      	lsls	r0, r0, #29
    673c:	d5f4      	bpl.n	6728 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    673e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    6740:	2b00      	cmp	r3, #0
    6742:	d1fc      	bne.n	673e <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    6744:	8b53      	ldrh	r3, [r2, #26]
    6746:	b2db      	uxtb	r3, r3
	if (error_code) {
    6748:	0698      	lsls	r0, r3, #26
    674a:	d01d      	beq.n	6788 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    674c:	0798      	lsls	r0, r3, #30
    674e:	d503      	bpl.n	6758 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    6750:	2302      	movs	r3, #2
    6752:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    6754:	3318      	adds	r3, #24
    6756:	e7e7      	b.n	6728 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    6758:	0758      	lsls	r0, r3, #29
    675a:	d503      	bpl.n	6764 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    675c:	2304      	movs	r3, #4
    675e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    6760:	331a      	adds	r3, #26
    6762:	e7e1      	b.n	6728 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    6764:	07d8      	lsls	r0, r3, #31
    6766:	d503      	bpl.n	6770 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    6768:	2301      	movs	r3, #1
    676a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    676c:	3312      	adds	r3, #18
    676e:	e7db      	b.n	6728 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    6770:	06d8      	lsls	r0, r3, #27
    6772:	d503      	bpl.n	677c <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    6774:	2310      	movs	r3, #16
    6776:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    6778:	3332      	adds	r3, #50	; 0x32
    677a:	e7d5      	b.n	6728 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    677c:	069b      	lsls	r3, r3, #26
    677e:	d503      	bpl.n	6788 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    6780:	2320      	movs	r3, #32
    6782:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    6784:	3321      	adds	r3, #33	; 0x21
    6786:	e7cf      	b.n	6728 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    6788:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    678a:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    678c:	2300      	movs	r3, #0
    678e:	e7cb      	b.n	6728 <usart_read_wait+0x8>

00006790 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    6790:	b5f0      	push	{r4, r5, r6, r7, lr}
    6792:	46ce      	mov	lr, r9
    6794:	4647      	mov	r7, r8
    6796:	b580      	push	{r7, lr}
    6798:	b083      	sub	sp, #12
    679a:	0005      	movs	r5, r0
    679c:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    679e:	2017      	movs	r0, #23
	if (length == 0) {
    67a0:	2a00      	cmp	r2, #0
    67a2:	d104      	bne.n	67ae <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    67a4:	b003      	add	sp, #12
    67a6:	bc0c      	pop	{r2, r3}
    67a8:	4690      	mov	r8, r2
    67aa:	4699      	mov	r9, r3
    67ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
    67ae:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
    67b0:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
    67b2:	2b00      	cmp	r3, #0
    67b4:	d0f6      	beq.n	67a4 <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
    67b6:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    67b8:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    67ba:	2b00      	cmp	r3, #0
    67bc:	d1fc      	bne.n	67b8 <usart_write_buffer_wait+0x28>
	while (length--) {
    67be:	3a01      	subs	r2, #1
    67c0:	b293      	uxth	r3, r2
    67c2:	4699      	mov	r9, r3
    67c4:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    67c6:	2701      	movs	r7, #1
	while (length--) {
    67c8:	4b1f      	ldr	r3, [pc, #124]	; (6848 <usart_write_buffer_wait+0xb8>)
    67ca:	4698      	mov	r8, r3
    67cc:	e011      	b.n	67f2 <usart_write_buffer_wait+0x62>
		uint16_t data_to_send = tx_data[tx_pos++];
    67ce:	1c73      	adds	r3, r6, #1
    67d0:	b29b      	uxth	r3, r3
    67d2:	9a01      	ldr	r2, [sp, #4]
    67d4:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    67d6:	796a      	ldrb	r2, [r5, #5]
    67d8:	2a01      	cmp	r2, #1
    67da:	d017      	beq.n	680c <usart_write_buffer_wait+0x7c>
		uint16_t data_to_send = tx_data[tx_pos++];
    67dc:	b289      	uxth	r1, r1
    67de:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
    67e0:	0028      	movs	r0, r5
    67e2:	4b1a      	ldr	r3, [pc, #104]	; (684c <usart_write_buffer_wait+0xbc>)
    67e4:	4798      	blx	r3
	while (length--) {
    67e6:	464b      	mov	r3, r9
    67e8:	3b01      	subs	r3, #1
    67ea:	b29b      	uxth	r3, r3
    67ec:	4699      	mov	r9, r3
    67ee:	4543      	cmp	r3, r8
    67f0:	d013      	beq.n	681a <usart_write_buffer_wait+0x8a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    67f2:	7e23      	ldrb	r3, [r4, #24]
    67f4:	423b      	tst	r3, r7
    67f6:	d1ea      	bne.n	67ce <usart_write_buffer_wait+0x3e>
    67f8:	4b13      	ldr	r3, [pc, #76]	; (6848 <usart_write_buffer_wait+0xb8>)
    67fa:	7e22      	ldrb	r2, [r4, #24]
    67fc:	423a      	tst	r2, r7
    67fe:	d1e6      	bne.n	67ce <usart_write_buffer_wait+0x3e>
			} else if (i == USART_TIMEOUT) {
    6800:	2b01      	cmp	r3, #1
    6802:	d019      	beq.n	6838 <usart_write_buffer_wait+0xa8>
    6804:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    6806:	2b00      	cmp	r3, #0
    6808:	d1f7      	bne.n	67fa <usart_write_buffer_wait+0x6a>
    680a:	e7e0      	b.n	67ce <usart_write_buffer_wait+0x3e>
			data_to_send |= (tx_data[tx_pos++] << 8);
    680c:	3602      	adds	r6, #2
    680e:	b2b6      	uxth	r6, r6
    6810:	9a01      	ldr	r2, [sp, #4]
    6812:	5cd3      	ldrb	r3, [r2, r3]
    6814:	021b      	lsls	r3, r3, #8
    6816:	4319      	orrs	r1, r3
    6818:	e7e2      	b.n	67e0 <usart_write_buffer_wait+0x50>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    681a:	7e23      	ldrb	r3, [r4, #24]
    681c:	079b      	lsls	r3, r3, #30
    681e:	d40d      	bmi.n	683c <usart_write_buffer_wait+0xac>
    6820:	4b09      	ldr	r3, [pc, #36]	; (6848 <usart_write_buffer_wait+0xb8>)
    6822:	2102      	movs	r1, #2
    6824:	7e22      	ldrb	r2, [r4, #24]
    6826:	420a      	tst	r2, r1
    6828:	d10a      	bne.n	6840 <usart_write_buffer_wait+0xb0>
		} else if (i == USART_TIMEOUT) {
    682a:	2b01      	cmp	r3, #1
    682c:	d00a      	beq.n	6844 <usart_write_buffer_wait+0xb4>
    682e:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    6830:	2b00      	cmp	r3, #0
    6832:	d1f7      	bne.n	6824 <usart_write_buffer_wait+0x94>
	return STATUS_OK;
    6834:	2000      	movs	r0, #0
    6836:	e7b5      	b.n	67a4 <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
    6838:	2012      	movs	r0, #18
    683a:	e7b3      	b.n	67a4 <usart_write_buffer_wait+0x14>
	return STATUS_OK;
    683c:	2000      	movs	r0, #0
    683e:	e7b1      	b.n	67a4 <usart_write_buffer_wait+0x14>
    6840:	2000      	movs	r0, #0
    6842:	e7af      	b.n	67a4 <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
    6844:	2012      	movs	r0, #18
    6846:	e7ad      	b.n	67a4 <usart_write_buffer_wait+0x14>
    6848:	0000ffff 	.word	0x0000ffff
    684c:	000066f5 	.word	0x000066f5

00006850 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    6850:	b5f0      	push	{r4, r5, r6, r7, lr}
    6852:	46d6      	mov	lr, sl
    6854:	b500      	push	{lr}
    6856:	b084      	sub	sp, #16
    6858:	0004      	movs	r4, r0
    685a:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    685c:	2017      	movs	r0, #23
	if (length == 0) {
    685e:	2a00      	cmp	r2, #0
    6860:	d103      	bne.n	686a <usart_read_buffer_wait+0x1a>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    6862:	b004      	add	sp, #16
    6864:	bc04      	pop	{r2}
    6866:	4692      	mov	sl, r2
    6868:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    686a:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    686c:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    686e:	2b00      	cmp	r3, #0
    6870:	d0f7      	beq.n	6862 <usart_read_buffer_wait+0x12>
	SercomUsart *const usart_hw = &(module->hw->USART);
    6872:	6826      	ldr	r6, [r4, #0]
	while (length--) {
    6874:	3a01      	subs	r2, #1
    6876:	b293      	uxth	r3, r2
    6878:	469a      	mov	sl, r3
    687a:	2500      	movs	r5, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    687c:	2704      	movs	r7, #4
    687e:	e019      	b.n	68b4 <usart_read_buffer_wait+0x64>
		uint16_t received_data = 0;
    6880:	2300      	movs	r3, #0
    6882:	aa02      	add	r2, sp, #8
    6884:	80d3      	strh	r3, [r2, #6]
		retval = usart_read_wait(module, &received_data);
    6886:	1d91      	adds	r1, r2, #6
    6888:	0020      	movs	r0, r4
    688a:	4b15      	ldr	r3, [pc, #84]	; (68e0 <usart_read_buffer_wait+0x90>)
    688c:	4798      	blx	r3
		if (retval != STATUS_OK) {
    688e:	2800      	cmp	r0, #0
    6890:	d1e7      	bne.n	6862 <usart_read_buffer_wait+0x12>
		rx_data[rx_pos++] = received_data;
    6892:	1c69      	adds	r1, r5, #1
    6894:	b289      	uxth	r1, r1
    6896:	ab02      	add	r3, sp, #8
    6898:	88db      	ldrh	r3, [r3, #6]
    689a:	9a01      	ldr	r2, [sp, #4]
    689c:	5553      	strb	r3, [r2, r5]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    689e:	7962      	ldrb	r2, [r4, #5]
    68a0:	2a01      	cmp	r2, #1
    68a2:	d014      	beq.n	68ce <usart_read_buffer_wait+0x7e>
		rx_data[rx_pos++] = received_data;
    68a4:	000d      	movs	r5, r1
	while (length--) {
    68a6:	4653      	mov	r3, sl
    68a8:	3b01      	subs	r3, #1
    68aa:	b29b      	uxth	r3, r3
    68ac:	469a      	mov	sl, r3
    68ae:	4b0d      	ldr	r3, [pc, #52]	; (68e4 <usart_read_buffer_wait+0x94>)
    68b0:	459a      	cmp	sl, r3
    68b2:	d0d6      	beq.n	6862 <usart_read_buffer_wait+0x12>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    68b4:	7e33      	ldrb	r3, [r6, #24]
    68b6:	423b      	tst	r3, r7
    68b8:	d1e2      	bne.n	6880 <usart_read_buffer_wait+0x30>
    68ba:	4b0a      	ldr	r3, [pc, #40]	; (68e4 <usart_read_buffer_wait+0x94>)
    68bc:	7e32      	ldrb	r2, [r6, #24]
    68be:	423a      	tst	r2, r7
    68c0:	d1de      	bne.n	6880 <usart_read_buffer_wait+0x30>
			} else if (i == USART_TIMEOUT) {
    68c2:	2b01      	cmp	r3, #1
    68c4:	d009      	beq.n	68da <usart_read_buffer_wait+0x8a>
    68c6:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    68c8:	2b00      	cmp	r3, #0
    68ca:	d1f7      	bne.n	68bc <usart_read_buffer_wait+0x6c>
    68cc:	e7d8      	b.n	6880 <usart_read_buffer_wait+0x30>
			rx_data[rx_pos++] = (received_data >> 8);
    68ce:	3502      	adds	r5, #2
    68d0:	b2ad      	uxth	r5, r5
    68d2:	0a1b      	lsrs	r3, r3, #8
    68d4:	9a01      	ldr	r2, [sp, #4]
    68d6:	5453      	strb	r3, [r2, r1]
    68d8:	e7e5      	b.n	68a6 <usart_read_buffer_wait+0x56>
				return STATUS_ERR_TIMEOUT;
    68da:	2012      	movs	r0, #18
    68dc:	e7c1      	b.n	6862 <usart_read_buffer_wait+0x12>
    68de:	46c0      	nop			; (mov r8, r8)
    68e0:	00006721 	.word	0x00006721
    68e4:	0000ffff 	.word	0x0000ffff

000068e8 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    68e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    68ea:	0080      	lsls	r0, r0, #2
    68ec:	4b62      	ldr	r3, [pc, #392]	; (6a78 <_usart_interrupt_handler+0x190>)
    68ee:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    68f0:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    68f2:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    68f4:	2b00      	cmp	r3, #0
    68f6:	d1fc      	bne.n	68f2 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    68f8:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    68fa:	7da6      	ldrb	r6, [r4, #22]
    68fc:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    68fe:	2330      	movs	r3, #48	; 0x30
    6900:	5ceb      	ldrb	r3, [r5, r3]
    6902:	2231      	movs	r2, #49	; 0x31
    6904:	5caf      	ldrb	r7, [r5, r2]
    6906:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    6908:	07f3      	lsls	r3, r6, #31
    690a:	d522      	bpl.n	6952 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    690c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    690e:	b29b      	uxth	r3, r3
    6910:	2b00      	cmp	r3, #0
    6912:	d01c      	beq.n	694e <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    6914:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    6916:	7813      	ldrb	r3, [r2, #0]
    6918:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    691a:	1c51      	adds	r1, r2, #1
    691c:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    691e:	7969      	ldrb	r1, [r5, #5]
    6920:	2901      	cmp	r1, #1
    6922:	d00e      	beq.n	6942 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    6924:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    6926:	05db      	lsls	r3, r3, #23
    6928:	0ddb      	lsrs	r3, r3, #23
    692a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    692c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    692e:	3b01      	subs	r3, #1
    6930:	b29b      	uxth	r3, r3
    6932:	85eb      	strh	r3, [r5, #46]	; 0x2e
    6934:	2b00      	cmp	r3, #0
    6936:	d10c      	bne.n	6952 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    6938:	3301      	adds	r3, #1
    693a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    693c:	3301      	adds	r3, #1
    693e:	75a3      	strb	r3, [r4, #22]
    6940:	e007      	b.n	6952 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    6942:	7851      	ldrb	r1, [r2, #1]
    6944:	0209      	lsls	r1, r1, #8
    6946:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    6948:	3202      	adds	r2, #2
    694a:	62aa      	str	r2, [r5, #40]	; 0x28
    694c:	e7eb      	b.n	6926 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    694e:	2301      	movs	r3, #1
    6950:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    6952:	07b3      	lsls	r3, r6, #30
    6954:	d506      	bpl.n	6964 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    6956:	2302      	movs	r3, #2
    6958:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    695a:	2200      	movs	r2, #0
    695c:	3331      	adds	r3, #49	; 0x31
    695e:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    6960:	07fb      	lsls	r3, r7, #31
    6962:	d41a      	bmi.n	699a <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    6964:	0773      	lsls	r3, r6, #29
    6966:	d565      	bpl.n	6a34 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    6968:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    696a:	b29b      	uxth	r3, r3
    696c:	2b00      	cmp	r3, #0
    696e:	d05f      	beq.n	6a30 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    6970:	8b63      	ldrh	r3, [r4, #26]
    6972:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    6974:	071a      	lsls	r2, r3, #28
    6976:	d414      	bmi.n	69a2 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    6978:	223f      	movs	r2, #63	; 0x3f
    697a:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    697c:	2b00      	cmp	r3, #0
    697e:	d034      	beq.n	69ea <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    6980:	079a      	lsls	r2, r3, #30
    6982:	d511      	bpl.n	69a8 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    6984:	221a      	movs	r2, #26
    6986:	2332      	movs	r3, #50	; 0x32
    6988:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    698a:	3b30      	subs	r3, #48	; 0x30
    698c:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    698e:	077b      	lsls	r3, r7, #29
    6990:	d550      	bpl.n	6a34 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    6992:	0028      	movs	r0, r5
    6994:	696b      	ldr	r3, [r5, #20]
    6996:	4798      	blx	r3
    6998:	e04c      	b.n	6a34 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    699a:	0028      	movs	r0, r5
    699c:	68eb      	ldr	r3, [r5, #12]
    699e:	4798      	blx	r3
    69a0:	e7e0      	b.n	6964 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    69a2:	2237      	movs	r2, #55	; 0x37
    69a4:	4013      	ands	r3, r2
    69a6:	e7e9      	b.n	697c <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    69a8:	075a      	lsls	r2, r3, #29
    69aa:	d505      	bpl.n	69b8 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    69ac:	221e      	movs	r2, #30
    69ae:	2332      	movs	r3, #50	; 0x32
    69b0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    69b2:	3b2e      	subs	r3, #46	; 0x2e
    69b4:	8363      	strh	r3, [r4, #26]
    69b6:	e7ea      	b.n	698e <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    69b8:	07da      	lsls	r2, r3, #31
    69ba:	d505      	bpl.n	69c8 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    69bc:	2213      	movs	r2, #19
    69be:	2332      	movs	r3, #50	; 0x32
    69c0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    69c2:	3b31      	subs	r3, #49	; 0x31
    69c4:	8363      	strh	r3, [r4, #26]
    69c6:	e7e2      	b.n	698e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    69c8:	06da      	lsls	r2, r3, #27
    69ca:	d505      	bpl.n	69d8 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    69cc:	2242      	movs	r2, #66	; 0x42
    69ce:	2332      	movs	r3, #50	; 0x32
    69d0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    69d2:	3b22      	subs	r3, #34	; 0x22
    69d4:	8363      	strh	r3, [r4, #26]
    69d6:	e7da      	b.n	698e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    69d8:	2220      	movs	r2, #32
    69da:	421a      	tst	r2, r3
    69dc:	d0d7      	beq.n	698e <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    69de:	3221      	adds	r2, #33	; 0x21
    69e0:	2332      	movs	r3, #50	; 0x32
    69e2:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    69e4:	3b12      	subs	r3, #18
    69e6:	8363      	strh	r3, [r4, #26]
    69e8:	e7d1      	b.n	698e <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    69ea:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    69ec:	05db      	lsls	r3, r3, #23
    69ee:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    69f0:	b2da      	uxtb	r2, r3
    69f2:	6a69      	ldr	r1, [r5, #36]	; 0x24
    69f4:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    69f6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    69f8:	1c51      	adds	r1, r2, #1
    69fa:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    69fc:	7969      	ldrb	r1, [r5, #5]
    69fe:	2901      	cmp	r1, #1
    6a00:	d010      	beq.n	6a24 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    6a02:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    6a04:	3b01      	subs	r3, #1
    6a06:	b29b      	uxth	r3, r3
    6a08:	85ab      	strh	r3, [r5, #44]	; 0x2c
    6a0a:	2b00      	cmp	r3, #0
    6a0c:	d112      	bne.n	6a34 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    6a0e:	3304      	adds	r3, #4
    6a10:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    6a12:	2200      	movs	r2, #0
    6a14:	332e      	adds	r3, #46	; 0x2e
    6a16:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    6a18:	07bb      	lsls	r3, r7, #30
    6a1a:	d50b      	bpl.n	6a34 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    6a1c:	0028      	movs	r0, r5
    6a1e:	692b      	ldr	r3, [r5, #16]
    6a20:	4798      	blx	r3
    6a22:	e007      	b.n	6a34 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    6a24:	0a1b      	lsrs	r3, r3, #8
    6a26:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    6a28:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    6a2a:	3301      	adds	r3, #1
    6a2c:	626b      	str	r3, [r5, #36]	; 0x24
    6a2e:	e7e8      	b.n	6a02 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    6a30:	2304      	movs	r3, #4
    6a32:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    6a34:	06f3      	lsls	r3, r6, #27
    6a36:	d504      	bpl.n	6a42 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    6a38:	2310      	movs	r3, #16
    6a3a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    6a3c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    6a3e:	06fb      	lsls	r3, r7, #27
    6a40:	d40e      	bmi.n	6a60 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    6a42:	06b3      	lsls	r3, r6, #26
    6a44:	d504      	bpl.n	6a50 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    6a46:	2320      	movs	r3, #32
    6a48:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    6a4a:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    6a4c:	073b      	lsls	r3, r7, #28
    6a4e:	d40b      	bmi.n	6a68 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    6a50:	0733      	lsls	r3, r6, #28
    6a52:	d504      	bpl.n	6a5e <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    6a54:	2308      	movs	r3, #8
    6a56:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    6a58:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    6a5a:	06bb      	lsls	r3, r7, #26
    6a5c:	d408      	bmi.n	6a70 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    6a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    6a60:	0028      	movs	r0, r5
    6a62:	69eb      	ldr	r3, [r5, #28]
    6a64:	4798      	blx	r3
    6a66:	e7ec      	b.n	6a42 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    6a68:	0028      	movs	r0, r5
    6a6a:	69ab      	ldr	r3, [r5, #24]
    6a6c:	4798      	blx	r3
    6a6e:	e7ef      	b.n	6a50 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    6a70:	6a2b      	ldr	r3, [r5, #32]
    6a72:	0028      	movs	r0, r5
    6a74:	4798      	blx	r3
}
    6a76:	e7f2      	b.n	6a5e <_usart_interrupt_handler+0x176>
    6a78:	2000245c 	.word	0x2000245c

00006a7c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    6a7c:	b510      	push	{r4, lr}
	switch (clock_source) {
    6a7e:	2808      	cmp	r0, #8
    6a80:	d803      	bhi.n	6a8a <system_clock_source_get_hz+0xe>
    6a82:	0080      	lsls	r0, r0, #2
    6a84:	4b1c      	ldr	r3, [pc, #112]	; (6af8 <system_clock_source_get_hz+0x7c>)
    6a86:	581b      	ldr	r3, [r3, r0]
    6a88:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    6a8a:	2000      	movs	r0, #0
    6a8c:	e032      	b.n	6af4 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    6a8e:	4b1b      	ldr	r3, [pc, #108]	; (6afc <system_clock_source_get_hz+0x80>)
    6a90:	6918      	ldr	r0, [r3, #16]
    6a92:	e02f      	b.n	6af4 <system_clock_source_get_hz+0x78>
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    6a94:	4b1a      	ldr	r3, [pc, #104]	; (6b00 <system_clock_source_get_hz+0x84>)
    6a96:	7d18      	ldrb	r0, [r3, #20]
    6a98:	0700      	lsls	r0, r0, #28
    6a9a:	0f80      	lsrs	r0, r0, #30
    6a9c:	1c43      	adds	r3, r0, #1
    6a9e:	4819      	ldr	r0, [pc, #100]	; (6b04 <system_clock_source_get_hz+0x88>)
    6aa0:	4358      	muls	r0, r3
    6aa2:	e027      	b.n	6af4 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    6aa4:	4b15      	ldr	r3, [pc, #84]	; (6afc <system_clock_source_get_hz+0x80>)
    6aa6:	6958      	ldr	r0, [r3, #20]
    6aa8:	e024      	b.n	6af4 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    6aaa:	4b14      	ldr	r3, [pc, #80]	; (6afc <system_clock_source_get_hz+0x80>)
    6aac:	681b      	ldr	r3, [r3, #0]
			return 0;
    6aae:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    6ab0:	079b      	lsls	r3, r3, #30
    6ab2:	d51f      	bpl.n	6af4 <system_clock_source_get_hz+0x78>
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    6ab4:	4912      	ldr	r1, [pc, #72]	; (6b00 <system_clock_source_get_hz+0x84>)
    6ab6:	2280      	movs	r2, #128	; 0x80
    6ab8:	0052      	lsls	r2, r2, #1
    6aba:	68cb      	ldr	r3, [r1, #12]
    6abc:	4213      	tst	r3, r2
    6abe:	d0fc      	beq.n	6aba <system_clock_source_get_hz+0x3e>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
    6ac0:	4b0e      	ldr	r3, [pc, #56]	; (6afc <system_clock_source_get_hz+0x80>)
    6ac2:	681b      	ldr	r3, [r3, #0]
    6ac4:	075b      	lsls	r3, r3, #29
    6ac6:	d401      	bmi.n	6acc <system_clock_source_get_hz+0x50>
		return 48000000UL;
    6ac8:	480f      	ldr	r0, [pc, #60]	; (6b08 <system_clock_source_get_hz+0x8c>)
    6aca:	e013      	b.n	6af4 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    6acc:	2000      	movs	r0, #0
    6ace:	4b0f      	ldr	r3, [pc, #60]	; (6b0c <system_clock_source_get_hz+0x90>)
    6ad0:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    6ad2:	4b0a      	ldr	r3, [pc, #40]	; (6afc <system_clock_source_get_hz+0x80>)
    6ad4:	689b      	ldr	r3, [r3, #8]
    6ad6:	041b      	lsls	r3, r3, #16
    6ad8:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    6ada:	4358      	muls	r0, r3
    6adc:	e00a      	b.n	6af4 <system_clock_source_get_hz+0x78>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    6ade:	2328      	movs	r3, #40	; 0x28
    6ae0:	4a07      	ldr	r2, [pc, #28]	; (6b00 <system_clock_source_get_hz+0x84>)
    6ae2:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    6ae4:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    6ae6:	079b      	lsls	r3, r3, #30
    6ae8:	d504      	bpl.n	6af4 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    6aea:	4b04      	ldr	r3, [pc, #16]	; (6afc <system_clock_source_get_hz+0x80>)
    6aec:	68d8      	ldr	r0, [r3, #12]
    6aee:	e001      	b.n	6af4 <system_clock_source_get_hz+0x78>
		return 32768UL;
    6af0:	2080      	movs	r0, #128	; 0x80
    6af2:	0200      	lsls	r0, r0, #8
	}
}
    6af4:	bd10      	pop	{r4, pc}
    6af6:	46c0      	nop			; (mov r8, r8)
    6af8:	00019db4 	.word	0x00019db4
    6afc:	200002e4 	.word	0x200002e4
    6b00:	40000c00 	.word	0x40000c00
    6b04:	003d0900 	.word	0x003d0900
    6b08:	02dc6c00 	.word	0x02dc6c00
    6b0c:	000070d5 	.word	0x000070d5

00006b10 <system_clock_source_osc16m_set_config>:
 *
 * \param[in] config  OSC16M configuration structure containing the new config
 */
void system_clock_source_osc16m_set_config(
		struct system_clock_source_osc16m_config *const config)
{
    6b10:	b570      	push	{r4, r5, r6, lr}
	OSCCTRL_OSC16MCTRL_Type temp = OSCCTRL->OSC16MCTRL;
    6b12:	4c0b      	ldr	r4, [pc, #44]	; (6b40 <system_clock_source_osc16m_set_config+0x30>)
    6b14:	7d23      	ldrb	r3, [r4, #20]

	/* Use temporary struct to reduce register access */
	temp.bit.FSEL    = config->fsel;
	temp.bit.ONDEMAND = config->on_demand;
    6b16:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;
    6b18:	7846      	ldrb	r6, [r0, #1]

	OSCCTRL->OSC16MCTRL = temp;
    6b1a:	7802      	ldrb	r2, [r0, #0]
    6b1c:	2103      	movs	r1, #3
    6b1e:	4011      	ands	r1, r2
    6b20:	0089      	lsls	r1, r1, #2
    6b22:	220c      	movs	r2, #12
    6b24:	4393      	bics	r3, r2
    6b26:	430b      	orrs	r3, r1
    6b28:	3a0b      	subs	r2, #11
    6b2a:	4032      	ands	r2, r6
    6b2c:	0192      	lsls	r2, r2, #6
    6b2e:	2140      	movs	r1, #64	; 0x40
    6b30:	438b      	bics	r3, r1
    6b32:	4313      	orrs	r3, r2
    6b34:	01ed      	lsls	r5, r5, #7
    6b36:	227f      	movs	r2, #127	; 0x7f
    6b38:	4013      	ands	r3, r2
    6b3a:	432b      	orrs	r3, r5
    6b3c:	7523      	strb	r3, [r4, #20]
}
    6b3e:	bd70      	pop	{r4, r5, r6, pc}
    6b40:	40000c00 	.word	0x40000c00

00006b44 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    6b44:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b46:	46d6      	mov	lr, sl
    6b48:	464f      	mov	r7, r9
    6b4a:	4646      	mov	r6, r8
    6b4c:	b5c0      	push	{r6, r7, lr}
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
    6b4e:	4b20      	ldr	r3, [pc, #128]	; (6bd0 <system_clock_source_xosc32k_set_config+0x8c>)
    6b50:	469a      	mov	sl, r3
    6b52:	695b      	ldr	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    6b54:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    6b56:	7801      	ldrb	r1, [r0, #0]
    6b58:	424c      	negs	r4, r1
    6b5a:	414c      	adcs	r4, r1
    6b5c:	46a1      	mov	r9, r4
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
    6b5e:	7881      	ldrb	r1, [r0, #2]
    6b60:	468c      	mov	ip, r1
	temp.bit.EN32K = config->enable_32khz_output;
    6b62:	78c1      	ldrb	r1, [r0, #3]
    6b64:	4688      	mov	r8, r1

	temp.bit.ONDEMAND = config->on_demand;
    6b66:	7a46      	ldrb	r6, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    6b68:	7a07      	ldrb	r7, [r0, #8]
	temp.bit.WRTLOCK  = config->write_once;
    6b6a:	7a84      	ldrb	r4, [r0, #10]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    6b6c:	6840      	ldr	r0, [r0, #4]
    6b6e:	4919      	ldr	r1, [pc, #100]	; (6bd4 <system_clock_source_xosc32k_set_config+0x90>)
    6b70:	6148      	str	r0, [r1, #20]

	OSC32KCTRL->XOSC32K = temp;
    6b72:	2101      	movs	r1, #1
    6b74:	4648      	mov	r0, r9
    6b76:	0080      	lsls	r0, r0, #2
    6b78:	2204      	movs	r2, #4
    6b7a:	4393      	bics	r3, r2
    6b7c:	4303      	orrs	r3, r0
    6b7e:	4640      	mov	r0, r8
    6b80:	4008      	ands	r0, r1
    6b82:	00c0      	lsls	r0, r0, #3
    6b84:	3204      	adds	r2, #4
    6b86:	4393      	bics	r3, r2
    6b88:	4303      	orrs	r3, r0
    6b8a:	4660      	mov	r0, ip
    6b8c:	4008      	ands	r0, r1
    6b8e:	0100      	lsls	r0, r0, #4
    6b90:	3208      	adds	r2, #8
    6b92:	4393      	bics	r3, r2
    6b94:	4303      	orrs	r3, r0
    6b96:	400f      	ands	r7, r1
    6b98:	01bf      	lsls	r7, r7, #6
    6b9a:	2040      	movs	r0, #64	; 0x40
    6b9c:	4383      	bics	r3, r0
    6b9e:	433b      	orrs	r3, r7
    6ba0:	400e      	ands	r6, r1
    6ba2:	01f6      	lsls	r6, r6, #7
    6ba4:	3040      	adds	r0, #64	; 0x40
    6ba6:	4383      	bics	r3, r0
    6ba8:	4333      	orrs	r3, r6
    6baa:	3879      	subs	r0, #121	; 0x79
    6bac:	4005      	ands	r5, r0
    6bae:	022d      	lsls	r5, r5, #8
    6bb0:	4809      	ldr	r0, [pc, #36]	; (6bd8 <system_clock_source_xosc32k_set_config+0x94>)
    6bb2:	4003      	ands	r3, r0
    6bb4:	432b      	orrs	r3, r5
    6bb6:	4021      	ands	r1, r4
    6bb8:	0309      	lsls	r1, r1, #12
    6bba:	4808      	ldr	r0, [pc, #32]	; (6bdc <system_clock_source_xosc32k_set_config+0x98>)
    6bbc:	4003      	ands	r3, r0
    6bbe:	430b      	orrs	r3, r1
    6bc0:	4652      	mov	r2, sl
    6bc2:	6153      	str	r3, [r2, #20]
}
    6bc4:	bc1c      	pop	{r2, r3, r4}
    6bc6:	4690      	mov	r8, r2
    6bc8:	4699      	mov	r9, r3
    6bca:	46a2      	mov	sl, r4
    6bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6bce:	46c0      	nop			; (mov r8, r8)
    6bd0:	40001000 	.word	0x40001000
    6bd4:	200002e4 	.word	0x200002e4
    6bd8:	fffff8ff 	.word	0xfffff8ff
    6bdc:	ffffefff 	.word	0xffffefff

00006be0 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    6be0:	2808      	cmp	r0, #8
    6be2:	d803      	bhi.n	6bec <system_clock_source_enable+0xc>
    6be4:	0080      	lsls	r0, r0, #2
    6be6:	4b29      	ldr	r3, [pc, #164]	; (6c8c <system_clock_source_enable+0xac>)
    6be8:	581b      	ldr	r3, [r3, r0]
    6bea:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    6bec:	2017      	movs	r0, #23
    6bee:	e04b      	b.n	6c88 <system_clock_source_enable+0xa8>
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
    6bf0:	4a27      	ldr	r2, [pc, #156]	; (6c90 <system_clock_source_enable+0xb0>)
    6bf2:	7d13      	ldrb	r3, [r2, #20]
    6bf4:	2102      	movs	r1, #2
    6bf6:	430b      	orrs	r3, r1
    6bf8:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    6bfa:	2000      	movs	r0, #0
    6bfc:	e044      	b.n	6c88 <system_clock_source_enable+0xa8>
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    6bfe:	4a25      	ldr	r2, [pc, #148]	; (6c94 <system_clock_source_enable+0xb4>)
    6c00:	6993      	ldr	r3, [r2, #24]
    6c02:	2102      	movs	r1, #2
    6c04:	430b      	orrs	r3, r1
    6c06:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    6c08:	2000      	movs	r0, #0
		break;
    6c0a:	e03d      	b.n	6c88 <system_clock_source_enable+0xa8>
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    6c0c:	4a20      	ldr	r2, [pc, #128]	; (6c90 <system_clock_source_enable+0xb0>)
    6c0e:	8a13      	ldrh	r3, [r2, #16]
    6c10:	2102      	movs	r1, #2
    6c12:	430b      	orrs	r3, r1
    6c14:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    6c16:	2000      	movs	r0, #0
		break;
    6c18:	e036      	b.n	6c88 <system_clock_source_enable+0xa8>
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    6c1a:	4a1e      	ldr	r2, [pc, #120]	; (6c94 <system_clock_source_enable+0xb4>)
    6c1c:	6953      	ldr	r3, [r2, #20]
    6c1e:	2102      	movs	r1, #2
    6c20:	430b      	orrs	r3, r1
    6c22:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    6c24:	2000      	movs	r0, #0
		break;
    6c26:	e02f      	b.n	6c88 <system_clock_source_enable+0xa8>
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
    6c28:	491b      	ldr	r1, [pc, #108]	; (6c98 <system_clock_source_enable+0xb8>)
    6c2a:	680b      	ldr	r3, [r1, #0]
    6c2c:	2202      	movs	r2, #2
    6c2e:	4313      	orrs	r3, r2
    6c30:	600b      	str	r3, [r1, #0]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    6c32:	4b17      	ldr	r3, [pc, #92]	; (6c90 <system_clock_source_enable+0xb0>)
    6c34:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    6c36:	0019      	movs	r1, r3
    6c38:	32fe      	adds	r2, #254	; 0xfe
    6c3a:	68cb      	ldr	r3, [r1, #12]
    6c3c:	4213      	tst	r3, r2
    6c3e:	d0fc      	beq.n	6c3a <system_clock_source_enable+0x5a>
	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    6c40:	4a15      	ldr	r2, [pc, #84]	; (6c98 <system_clock_source_enable+0xb8>)
    6c42:	6891      	ldr	r1, [r2, #8]
    6c44:	4b12      	ldr	r3, [pc, #72]	; (6c90 <system_clock_source_enable+0xb0>)
    6c46:	6219      	str	r1, [r3, #32]
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    6c48:	6852      	ldr	r2, [r2, #4]
    6c4a:	61da      	str	r2, [r3, #28]
	OSCCTRL->DFLLCTRL.reg = 0;
    6c4c:	2200      	movs	r2, #0
    6c4e:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    6c50:	0019      	movs	r1, r3
    6c52:	3201      	adds	r2, #1
    6c54:	32ff      	adds	r2, #255	; 0xff
    6c56:	68cb      	ldr	r3, [r1, #12]
    6c58:	4213      	tst	r3, r2
    6c5a:	d0fc      	beq.n	6c56 <system_clock_source_enable+0x76>
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    6c5c:	4b0e      	ldr	r3, [pc, #56]	; (6c98 <system_clock_source_enable+0xb8>)
    6c5e:	681b      	ldr	r3, [r3, #0]
    6c60:	b29b      	uxth	r3, r3
    6c62:	4a0b      	ldr	r2, [pc, #44]	; (6c90 <system_clock_source_enable+0xb0>)
    6c64:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    6c66:	2000      	movs	r0, #0
    6c68:	e00e      	b.n	6c88 <system_clock_source_enable+0xa8>
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    6c6a:	4909      	ldr	r1, [pc, #36]	; (6c90 <system_clock_source_enable+0xb0>)
    6c6c:	2228      	movs	r2, #40	; 0x28
    6c6e:	5c8b      	ldrb	r3, [r1, r2]
    6c70:	2002      	movs	r0, #2
    6c72:	4303      	orrs	r3, r0
    6c74:	548b      	strb	r3, [r1, r2]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    6c76:	0008      	movs	r0, r1
    6c78:	2138      	movs	r1, #56	; 0x38
    6c7a:	3a26      	subs	r2, #38	; 0x26
    6c7c:	5c43      	ldrb	r3, [r0, r1]
    6c7e:	4213      	tst	r3, r2
    6c80:	d1fc      	bne.n	6c7c <system_clock_source_enable+0x9c>
	return STATUS_OK;
    6c82:	2000      	movs	r0, #0
    6c84:	e000      	b.n	6c88 <system_clock_source_enable+0xa8>
		return STATUS_OK;
    6c86:	2000      	movs	r0, #0
}
    6c88:	4770      	bx	lr
    6c8a:	46c0      	nop			; (mov r8, r8)
    6c8c:	00019dd8 	.word	0x00019dd8
    6c90:	40000c00 	.word	0x40000c00
    6c94:	40001000 	.word	0x40001000
    6c98:	200002e4 	.word	0x200002e4

00006c9c <system_clock_source_disable>:
 *                                 given
 */
enum status_code system_clock_source_disable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    6c9c:	2808      	cmp	r0, #8
    6c9e:	d832      	bhi.n	6d06 <system_clock_source_disable+0x6a>
    6ca0:	0080      	lsls	r0, r0, #2
    6ca2:	4b1a      	ldr	r3, [pc, #104]	; (6d0c <system_clock_source_disable+0x70>)
    6ca4:	581b      	ldr	r3, [r3, r0]
    6ca6:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
    6ca8:	4a19      	ldr	r2, [pc, #100]	; (6d10 <system_clock_source_disable+0x74>)
    6caa:	7d13      	ldrb	r3, [r2, #20]
    6cac:	2102      	movs	r1, #2
    6cae:	438b      	bics	r3, r1
    6cb0:	7513      	strb	r3, [r2, #20]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    6cb2:	2000      	movs	r0, #0
}
    6cb4:	4770      	bx	lr
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
    6cb6:	4a17      	ldr	r2, [pc, #92]	; (6d14 <system_clock_source_disable+0x78>)
    6cb8:	6993      	ldr	r3, [r2, #24]
    6cba:	2102      	movs	r1, #2
    6cbc:	438b      	bics	r3, r1
    6cbe:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
    6cc0:	2000      	movs	r0, #0
		break;
    6cc2:	e7f7      	b.n	6cb4 <system_clock_source_disable+0x18>
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
    6cc4:	4a12      	ldr	r2, [pc, #72]	; (6d10 <system_clock_source_disable+0x74>)
    6cc6:	8a13      	ldrh	r3, [r2, #16]
    6cc8:	2102      	movs	r1, #2
    6cca:	438b      	bics	r3, r1
    6ccc:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    6cce:	2000      	movs	r0, #0
		break;
    6cd0:	e7f0      	b.n	6cb4 <system_clock_source_disable+0x18>
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
    6cd2:	4a10      	ldr	r2, [pc, #64]	; (6d14 <system_clock_source_disable+0x78>)
    6cd4:	6953      	ldr	r3, [r2, #20]
    6cd6:	2102      	movs	r1, #2
    6cd8:	438b      	bics	r3, r1
    6cda:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    6cdc:	2000      	movs	r0, #0
		break;
    6cde:	e7e9      	b.n	6cb4 <system_clock_source_disable+0x18>
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
    6ce0:	4b0d      	ldr	r3, [pc, #52]	; (6d18 <system_clock_source_disable+0x7c>)
    6ce2:	681a      	ldr	r2, [r3, #0]
    6ce4:	2102      	movs	r1, #2
    6ce6:	438a      	bics	r2, r1
    6ce8:	601a      	str	r2, [r3, #0]
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    6cea:	681b      	ldr	r3, [r3, #0]
    6cec:	b29b      	uxth	r3, r3
    6cee:	4a08      	ldr	r2, [pc, #32]	; (6d10 <system_clock_source_disable+0x74>)
    6cf0:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    6cf2:	2000      	movs	r0, #0
		break;
    6cf4:	e7de      	b.n	6cb4 <system_clock_source_disable+0x18>
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
    6cf6:	4906      	ldr	r1, [pc, #24]	; (6d10 <system_clock_source_disable+0x74>)
    6cf8:	2228      	movs	r2, #40	; 0x28
    6cfa:	5c8b      	ldrb	r3, [r1, r2]
    6cfc:	2002      	movs	r0, #2
    6cfe:	4383      	bics	r3, r0
    6d00:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    6d02:	2000      	movs	r0, #0
		break;
    6d04:	e7d6      	b.n	6cb4 <system_clock_source_disable+0x18>
		return STATUS_ERR_INVALID_ARG;
    6d06:	2017      	movs	r0, #23
    6d08:	e7d4      	b.n	6cb4 <system_clock_source_disable+0x18>
    6d0a:	46c0      	nop			; (mov r8, r8)
    6d0c:	00019dfc 	.word	0x00019dfc
    6d10:	40000c00 	.word	0x40000c00
    6d14:	40001000 	.word	0x40001000
    6d18:	200002e4 	.word	0x200002e4

00006d1c <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    6d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d1e:	46d6      	mov	lr, sl
    6d20:	464f      	mov	r7, r9
    6d22:	4646      	mov	r6, r8
    6d24:	b5c0      	push	{r6, r7, lr}
    6d26:	b088      	sub	sp, #32
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    6d28:	2280      	movs	r2, #128	; 0x80
    6d2a:	0052      	lsls	r2, r2, #1
    6d2c:	4b56      	ldr	r3, [pc, #344]	; (6e88 <system_clock_init+0x16c>)
    6d2e:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    6d30:	3afd      	subs	r2, #253	; 0xfd
    6d32:	4b56      	ldr	r3, [pc, #344]	; (6e8c <system_clock_init+0x170>)
    6d34:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    6d36:	4a56      	ldr	r2, [pc, #344]	; (6e90 <system_clock_init+0x174>)
    6d38:	6853      	ldr	r3, [r2, #4]
    6d3a:	211e      	movs	r1, #30
    6d3c:	438b      	bics	r3, r1
    6d3e:	391a      	subs	r1, #26
    6d40:	430b      	orrs	r3, r1
    6d42:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    6d44:	2380      	movs	r3, #128	; 0x80
    6d46:	05db      	lsls	r3, r3, #23
    6d48:	789b      	ldrb	r3, [r3, #2]
    6d4a:	2b02      	cmp	r3, #2
    6d4c:	d00f      	beq.n	6d6e <system_clock_init+0x52>
		return STATUS_OK;
	}

#if SAML22 || SAML21XXXB || SAMR34J || SAMR35J || (WLR089U0)
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    6d4e:	2380      	movs	r3, #128	; 0x80
    6d50:	05db      	lsls	r3, r3, #23
    6d52:	789b      	ldrb	r3, [r3, #2]
    6d54:	b25b      	sxtb	r3, r3
    6d56:	2b00      	cmp	r3, #0
    6d58:	db09      	blt.n	6d6e <system_clock_init+0x52>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    6d5a:	2380      	movs	r3, #128	; 0x80
    6d5c:	05db      	lsls	r3, r3, #23
    6d5e:	2201      	movs	r2, #1
    6d60:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    6d62:	3201      	adds	r2, #1
    6d64:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    6d66:	001a      	movs	r2, r3
    6d68:	7993      	ldrb	r3, [r2, #6]
    6d6a:	2b00      	cmp	r3, #0
    6d6c:	d0fc      	beq.n	6d68 <system_clock_init+0x4c>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    6d6e:	a805      	add	r0, sp, #20
    6d70:	2300      	movs	r3, #0
    6d72:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    6d74:	2280      	movs	r2, #128	; 0x80
    6d76:	0212      	lsls	r2, r2, #8
    6d78:	6042      	str	r2, [r0, #4]
	config->enable_1khz_output  = false;
    6d7a:	7083      	strb	r3, [r0, #2]
	config->enable_32khz_output = true;
    6d7c:	2201      	movs	r2, #1
    6d7e:	70c2      	strb	r2, [r0, #3]
	config->run_in_standby      = false;
    6d80:	7203      	strb	r3, [r0, #8]
	config->write_once          = false;
    6d82:	7283      	strb	r3, [r0, #10]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    6d84:	3203      	adds	r2, #3
    6d86:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    6d88:	7243      	strb	r3, [r0, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    6d8a:	4b42      	ldr	r3, [pc, #264]	; (6e94 <system_clock_init+0x178>)
    6d8c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    6d8e:	2005      	movs	r0, #5
    6d90:	4b41      	ldr	r3, [pc, #260]	; (6e98 <system_clock_init+0x17c>)
    6d92:	4798      	blx	r3
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    6d94:	4941      	ldr	r1, [pc, #260]	; (6e9c <system_clock_init+0x180>)
    6d96:	2201      	movs	r2, #1
    6d98:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    6d9a:	421a      	tst	r2, r3
    6d9c:	d0fc      	beq.n	6d98 <system_clock_init+0x7c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		OSC32KCTRL->XOSC32K.bit.ONDEMAND = 1;
    6d9e:	4a3f      	ldr	r2, [pc, #252]	; (6e9c <system_clock_init+0x180>)
    6da0:	6953      	ldr	r3, [r2, #20]
    6da2:	2180      	movs	r1, #128	; 0x80
    6da4:	430b      	orrs	r3, r1
    6da6:	6153      	str	r3, [r2, #20]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    6da8:	a902      	add	r1, sp, #8
    6daa:	2501      	movs	r5, #1
    6dac:	604d      	str	r5, [r1, #4]
	config->high_when_disabled = false;
    6dae:	2400      	movs	r4, #0
    6db0:	704c      	strb	r4, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    6db2:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    6db4:	724c      	strb	r4, [r1, #9]
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_ULP32K;
    6db6:	2303      	movs	r3, #3
    6db8:	700b      	strb	r3, [r1, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    6dba:	2000      	movs	r0, #0
    6dbc:	4b38      	ldr	r3, [pc, #224]	; (6ea0 <system_clock_init+0x184>)
    6dbe:	4798      	blx	r3
	system_clock_source_disable(SYSTEM_CLOCK_SOURCE_OSC16M);
    6dc0:	2006      	movs	r0, #6
    6dc2:	4b38      	ldr	r3, [pc, #224]	; (6ea4 <system_clock_init+0x188>)
    6dc4:	4798      	blx	r3
	config->run_in_standby  = false;
    6dc6:	a801      	add	r0, sp, #4
    6dc8:	7044      	strb	r4, [r0, #1]
	osc16m_conf.fsel      		= CONF_CLOCK_OSC16M_FREQ_SEL;
    6dca:	7005      	strb	r5, [r0, #0]
	osc16m_conf.on_demand       = 0;
    6dcc:	7084      	strb	r4, [r0, #2]
	system_clock_source_osc16m_set_config(&osc16m_conf);
    6dce:	4b36      	ldr	r3, [pc, #216]	; (6ea8 <system_clock_init+0x18c>)
    6dd0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
    6dd2:	2006      	movs	r0, #6
    6dd4:	4b30      	ldr	r3, [pc, #192]	; (6e98 <system_clock_init+0x17c>)
    6dd6:	4798      	blx	r3
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    6dd8:	492b      	ldr	r1, [pc, #172]	; (6e88 <system_clock_init+0x16c>)
    6dda:	2210      	movs	r2, #16
    6ddc:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_OSC16M));
    6dde:	421a      	tst	r2, r3
    6de0:	d0fc      	beq.n	6ddc <system_clock_init+0xc0>
	config->division_factor    = 1;
    6de2:	ac02      	add	r4, sp, #8
    6de4:	2601      	movs	r6, #1
    6de6:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    6de8:	2500      	movs	r5, #0
    6dea:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    6dec:	2306      	movs	r3, #6
    6dee:	469a      	mov	sl, r3
    6df0:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    6df2:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    6df4:	7265      	strb	r5, [r4, #9]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    6df6:	0021      	movs	r1, r4
    6df8:	2000      	movs	r0, #0
    6dfa:	4b29      	ldr	r3, [pc, #164]	; (6ea0 <system_clock_init+0x184>)
    6dfc:	4698      	mov	r8, r3
    6dfe:	4798      	blx	r3
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    6e00:	4b2a      	ldr	r3, [pc, #168]	; (6eac <system_clock_init+0x190>)
    6e02:	4798      	blx	r3
	config->division_factor    = 1;
    6e04:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    6e06:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    6e08:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    6e0a:	2305      	movs	r3, #5
    6e0c:	7023      	strb	r3, [r4, #0]
    6e0e:	7226      	strb	r6, [r4, #8]
    6e10:	0021      	movs	r1, r4
    6e12:	2001      	movs	r0, #1
    6e14:	47c0      	blx	r8
    6e16:	2001      	movs	r0, #1
    6e18:	4b25      	ldr	r3, [pc, #148]	; (6eb0 <system_clock_init+0x194>)
    6e1a:	4699      	mov	r9, r3
    6e1c:	4798      	blx	r3
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    6e1e:	4f25      	ldr	r7, [pc, #148]	; (6eb4 <system_clock_init+0x198>)
    6e20:	71be      	strb	r6, [r7, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    6e22:	717e      	strb	r6, [r7, #5]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    6e24:	713e      	strb	r6, [r7, #4]
	config->division_factor    = 1;
    6e26:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    6e28:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    6e2a:	4653      	mov	r3, sl
    6e2c:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    6e2e:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    6e30:	7265      	strb	r5, [r4, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    6e32:	0021      	movs	r1, r4
    6e34:	2000      	movs	r0, #0
    6e36:	47c0      	blx	r8
    6e38:	2000      	movs	r0, #0
    6e3a:	47c8      	blx	r9
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    6e3c:	2000      	movs	r0, #0
    6e3e:	4b1e      	ldr	r3, [pc, #120]	; (6eb8 <system_clock_init+0x19c>)
    6e40:	4798      	blx	r3
    6e42:	7939      	ldrb	r1, [r7, #4]
    6e44:	b2c9      	uxtb	r1, r1
    6e46:	4b1d      	ldr	r3, [pc, #116]	; (6ebc <system_clock_init+0x1a0>)
    6e48:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
    6e4a:	4b1d      	ldr	r3, [pc, #116]	; (6ec0 <system_clock_init+0x1a4>)
    6e4c:	4298      	cmp	r0, r3
    6e4e:	d814      	bhi.n	6e7a <system_clock_init+0x15e>
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    6e50:	2380      	movs	r3, #128	; 0x80
    6e52:	05db      	lsls	r3, r3, #23
    6e54:	789b      	ldrb	r3, [r3, #2]
    6e56:	2b00      	cmp	r3, #0
    6e58:	d00f      	beq.n	6e7a <system_clock_init+0x15e>
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    6e5a:	2380      	movs	r3, #128	; 0x80
    6e5c:	05db      	lsls	r3, r3, #23
    6e5e:	789b      	ldrb	r3, [r3, #2]
    6e60:	b25b      	sxtb	r3, r3
    6e62:	2b00      	cmp	r3, #0
    6e64:	db09      	blt.n	6e7a <system_clock_init+0x15e>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    6e66:	2380      	movs	r3, #128	; 0x80
    6e68:	05db      	lsls	r3, r3, #23
    6e6a:	2201      	movs	r2, #1
    6e6c:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
    6e6e:	2200      	movs	r2, #0
    6e70:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg) {
    6e72:	001a      	movs	r2, r3
    6e74:	7993      	ldrb	r3, [r2, #6]
    6e76:	2b00      	cmp	r3, #0
    6e78:	d0fc      	beq.n	6e74 <system_clock_init+0x158>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    6e7a:	b008      	add	sp, #32
    6e7c:	bc1c      	pop	{r2, r3, r4}
    6e7e:	4690      	mov	r8, r2
    6e80:	4699      	mov	r9, r3
    6e82:	46a2      	mov	sl, r4
    6e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6e86:	46c0      	nop			; (mov r8, r8)
    6e88:	40000c00 	.word	0x40000c00
    6e8c:	40001400 	.word	0x40001400
    6e90:	41004000 	.word	0x41004000
    6e94:	00006b45 	.word	0x00006b45
    6e98:	00006be1 	.word	0x00006be1
    6e9c:	40001000 	.word	0x40001000
    6ea0:	00006ee9 	.word	0x00006ee9
    6ea4:	00006c9d 	.word	0x00006c9d
    6ea8:	00006b11 	.word	0x00006b11
    6eac:	00006ec5 	.word	0x00006ec5
    6eb0:	00006f95 	.word	0x00006f95
    6eb4:	40000400 	.word	0x40000400
    6eb8:	00006fd5 	.word	0x00006fd5
    6ebc:	000150f9 	.word	0x000150f9
    6ec0:	00b71b00 	.word	0x00b71b00

00006ec4 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    6ec4:	4a06      	ldr	r2, [pc, #24]	; (6ee0 <system_gclk_init+0x1c>)
    6ec6:	6953      	ldr	r3, [r2, #20]
    6ec8:	2140      	movs	r1, #64	; 0x40
    6eca:	430b      	orrs	r3, r1
    6ecc:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    6ece:	2201      	movs	r2, #1
    6ed0:	4b04      	ldr	r3, [pc, #16]	; (6ee4 <system_gclk_init+0x20>)
    6ed2:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    6ed4:	0019      	movs	r1, r3
    6ed6:	780b      	ldrb	r3, [r1, #0]
    6ed8:	4213      	tst	r3, r2
    6eda:	d1fc      	bne.n	6ed6 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    6edc:	4770      	bx	lr
    6ede:	46c0      	nop			; (mov r8, r8)
    6ee0:	40000400 	.word	0x40000400
    6ee4:	40001800 	.word	0x40001800

00006ee8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    6ee8:	b570      	push	{r4, r5, r6, lr}
    6eea:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    6eec:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    6eee:	784b      	ldrb	r3, [r1, #1]
    6ef0:	2b00      	cmp	r3, #0
    6ef2:	d002      	beq.n	6efa <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    6ef4:	2380      	movs	r3, #128	; 0x80
    6ef6:	00db      	lsls	r3, r3, #3
    6ef8:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    6efa:	7a4b      	ldrb	r3, [r1, #9]
    6efc:	2b00      	cmp	r3, #0
    6efe:	d002      	beq.n	6f06 <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    6f00:	2380      	movs	r3, #128	; 0x80
    6f02:	011b      	lsls	r3, r3, #4
    6f04:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    6f06:	6848      	ldr	r0, [r1, #4]
    6f08:	2801      	cmp	r0, #1
    6f0a:	d90f      	bls.n	6f2c <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    6f0c:	1e43      	subs	r3, r0, #1
    6f0e:	4218      	tst	r0, r3
    6f10:	d131      	bne.n	6f76 <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    6f12:	2802      	cmp	r0, #2
    6f14:	d92d      	bls.n	6f72 <system_gclk_gen_set_config+0x8a>
    6f16:	2302      	movs	r3, #2
    6f18:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    6f1a:	3201      	adds	r2, #1
						mask <<= 1) {
    6f1c:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    6f1e:	4298      	cmp	r0, r3
    6f20:	d8fb      	bhi.n	6f1a <system_gclk_gen_set_config+0x32>
    6f22:	2380      	movs	r3, #128	; 0x80
    6f24:	015b      	lsls	r3, r3, #5
    6f26:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    6f28:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    6f2a:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    6f2c:	7a0b      	ldrb	r3, [r1, #8]
    6f2e:	2b00      	cmp	r3, #0
    6f30:	d002      	beq.n	6f38 <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    6f32:	2380      	movs	r3, #128	; 0x80
    6f34:	019b      	lsls	r3, r3, #6
    6f36:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    6f38:	2604      	movs	r6, #4
    6f3a:	40a6      	lsls	r6, r4
    6f3c:	4911      	ldr	r1, [pc, #68]	; (6f84 <system_gclk_gen_set_config+0x9c>)
    6f3e:	4a12      	ldr	r2, [pc, #72]	; (6f88 <system_gclk_gen_set_config+0xa0>)
    6f40:	684b      	ldr	r3, [r1, #4]
    6f42:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    6f44:	421e      	tst	r6, r3
    6f46:	d1fb      	bne.n	6f40 <system_gclk_gen_set_config+0x58>
	cpu_irq_enter_critical();
    6f48:	4b10      	ldr	r3, [pc, #64]	; (6f8c <system_gclk_gen_set_config+0xa4>)
    6f4a:	4798      	blx	r3
    6f4c:	00a4      	lsls	r4, r4, #2
    6f4e:	4b0d      	ldr	r3, [pc, #52]	; (6f84 <system_gclk_gen_set_config+0x9c>)
    6f50:	469c      	mov	ip, r3
    6f52:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    6f54:	6a22      	ldr	r2, [r4, #32]
    6f56:	2380      	movs	r3, #128	; 0x80
    6f58:	005b      	lsls	r3, r3, #1
    6f5a:	401a      	ands	r2, r3
    6f5c:	432a      	orrs	r2, r5
    6f5e:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    6f60:	4661      	mov	r1, ip
    6f62:	4a09      	ldr	r2, [pc, #36]	; (6f88 <system_gclk_gen_set_config+0xa0>)
    6f64:	684b      	ldr	r3, [r1, #4]
    6f66:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    6f68:	421e      	tst	r6, r3
    6f6a:	d1fb      	bne.n	6f64 <system_gclk_gen_set_config+0x7c>
	cpu_irq_leave_critical();
    6f6c:	4b08      	ldr	r3, [pc, #32]	; (6f90 <system_gclk_gen_set_config+0xa8>)
    6f6e:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    6f70:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    6f72:	2200      	movs	r2, #0
    6f74:	e7d5      	b.n	6f22 <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    6f76:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    6f78:	2380      	movs	r3, #128	; 0x80
    6f7a:	009b      	lsls	r3, r3, #2
    6f7c:	4318      	orrs	r0, r3
    6f7e:	4305      	orrs	r5, r0
    6f80:	e7d4      	b.n	6f2c <system_gclk_gen_set_config+0x44>
    6f82:	46c0      	nop			; (mov r8, r8)
    6f84:	40001800 	.word	0x40001800
    6f88:	000007fc 	.word	0x000007fc
    6f8c:	00004aa1 	.word	0x00004aa1
    6f90:	00004ae1 	.word	0x00004ae1

00006f94 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    6f94:	b510      	push	{r4, lr}
    6f96:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    6f98:	2204      	movs	r2, #4
    6f9a:	4082      	lsls	r2, r0
    6f9c:	4809      	ldr	r0, [pc, #36]	; (6fc4 <system_gclk_gen_enable+0x30>)
    6f9e:	490a      	ldr	r1, [pc, #40]	; (6fc8 <system_gclk_gen_enable+0x34>)
    6fa0:	6843      	ldr	r3, [r0, #4]
    6fa2:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    6fa4:	421a      	tst	r2, r3
    6fa6:	d1fb      	bne.n	6fa0 <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    6fa8:	4b08      	ldr	r3, [pc, #32]	; (6fcc <system_gclk_gen_enable+0x38>)
    6faa:	4798      	blx	r3
    6fac:	00a4      	lsls	r4, r4, #2
    6fae:	4b05      	ldr	r3, [pc, #20]	; (6fc4 <system_gclk_gen_enable+0x30>)
    6fb0:	469c      	mov	ip, r3
    6fb2:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    6fb4:	6a22      	ldr	r2, [r4, #32]
    6fb6:	2380      	movs	r3, #128	; 0x80
    6fb8:	005b      	lsls	r3, r3, #1
    6fba:	4313      	orrs	r3, r2
    6fbc:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    6fbe:	4b04      	ldr	r3, [pc, #16]	; (6fd0 <system_gclk_gen_enable+0x3c>)
    6fc0:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    6fc2:	bd10      	pop	{r4, pc}
    6fc4:	40001800 	.word	0x40001800
    6fc8:	000007fc 	.word	0x000007fc
    6fcc:	00004aa1 	.word	0x00004aa1
    6fd0:	00004ae1 	.word	0x00004ae1

00006fd4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    6fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6fd6:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    6fd8:	2204      	movs	r2, #4
    6fda:	4082      	lsls	r2, r0
    6fdc:	4812      	ldr	r0, [pc, #72]	; (7028 <system_gclk_gen_get_hz+0x54>)
    6fde:	4913      	ldr	r1, [pc, #76]	; (702c <system_gclk_gen_get_hz+0x58>)
    6fe0:	6843      	ldr	r3, [r0, #4]
    6fe2:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    6fe4:	421a      	tst	r2, r3
    6fe6:	d1fb      	bne.n	6fe0 <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    6fe8:	4b11      	ldr	r3, [pc, #68]	; (7030 <system_gclk_gen_get_hz+0x5c>)
    6fea:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    6fec:	4f0e      	ldr	r7, [pc, #56]	; (7028 <system_gclk_gen_get_hz+0x54>)
    6fee:	3408      	adds	r4, #8
    6ff0:	00a4      	lsls	r4, r4, #2
    6ff2:	59e0      	ldr	r0, [r4, r7]
    6ff4:	0700      	lsls	r0, r0, #28
    6ff6:	0f00      	lsrs	r0, r0, #28
	uint32_t gen_input_hz = system_clock_source_get_hz(
    6ff8:	4b0e      	ldr	r3, [pc, #56]	; (7034 <system_gclk_gen_get_hz+0x60>)
    6ffa:	4798      	blx	r3
    6ffc:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    6ffe:	59e5      	ldr	r5, [r4, r7]
    7000:	04ed      	lsls	r5, r5, #19
    7002:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    7004:	59e4      	ldr	r4, [r4, r7]
    7006:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    7008:	4b0b      	ldr	r3, [pc, #44]	; (7038 <system_gclk_gen_get_hz+0x64>)
    700a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    700c:	2d00      	cmp	r5, #0
    700e:	d107      	bne.n	7020 <system_gclk_gen_get_hz+0x4c>
    7010:	2c01      	cmp	r4, #1
    7012:	d907      	bls.n	7024 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    7014:	0021      	movs	r1, r4
    7016:	0030      	movs	r0, r6
    7018:	4b08      	ldr	r3, [pc, #32]	; (703c <system_gclk_gen_get_hz+0x68>)
    701a:	4798      	blx	r3
    701c:	0006      	movs	r6, r0
    701e:	e001      	b.n	7024 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    7020:	3401      	adds	r4, #1
    7022:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    7024:	0030      	movs	r0, r6
    7026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7028:	40001800 	.word	0x40001800
    702c:	000007fc 	.word	0x000007fc
    7030:	00004aa1 	.word	0x00004aa1
    7034:	00006a7d 	.word	0x00006a7d
    7038:	00004ae1 	.word	0x00004ae1
    703c:	000150f9 	.word	0x000150f9

00007040 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    7040:	b510      	push	{r4, lr}
    7042:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    7044:	4b09      	ldr	r3, [pc, #36]	; (706c <system_gclk_chan_enable+0x2c>)
    7046:	4798      	blx	r3
    7048:	00a0      	lsls	r0, r4, #2
    704a:	4b09      	ldr	r3, [pc, #36]	; (7070 <system_gclk_chan_enable+0x30>)
    704c:	469c      	mov	ip, r3
    704e:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    7050:	2280      	movs	r2, #128	; 0x80
    7052:	5883      	ldr	r3, [r0, r2]
    7054:	2140      	movs	r1, #64	; 0x40
    7056:	430b      	orrs	r3, r1
    7058:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    705a:	3140      	adds	r1, #64	; 0x40
    705c:	3a40      	subs	r2, #64	; 0x40
    705e:	5843      	ldr	r3, [r0, r1]
    7060:	421a      	tst	r2, r3
    7062:	d0fc      	beq.n	705e <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    7064:	4b03      	ldr	r3, [pc, #12]	; (7074 <system_gclk_chan_enable+0x34>)
    7066:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    7068:	bd10      	pop	{r4, pc}
    706a:	46c0      	nop			; (mov r8, r8)
    706c:	00004aa1 	.word	0x00004aa1
    7070:	40001800 	.word	0x40001800
    7074:	00004ae1 	.word	0x00004ae1

00007078 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    7078:	b510      	push	{r4, lr}
    707a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    707c:	4b09      	ldr	r3, [pc, #36]	; (70a4 <system_gclk_chan_disable+0x2c>)
    707e:	4798      	blx	r3
    7080:	00a0      	lsls	r0, r4, #2
    7082:	4b09      	ldr	r3, [pc, #36]	; (70a8 <system_gclk_chan_disable+0x30>)
    7084:	469c      	mov	ip, r3
    7086:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    7088:	2280      	movs	r2, #128	; 0x80
    708a:	5883      	ldr	r3, [r0, r2]
    708c:	2140      	movs	r1, #64	; 0x40
    708e:	438b      	bics	r3, r1
    7090:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    7092:	3140      	adds	r1, #64	; 0x40
    7094:	3a40      	subs	r2, #64	; 0x40
    7096:	5843      	ldr	r3, [r0, r1]
    7098:	421a      	tst	r2, r3
    709a:	d1fc      	bne.n	7096 <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    709c:	4b03      	ldr	r3, [pc, #12]	; (70ac <system_gclk_chan_disable+0x34>)
    709e:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    70a0:	bd10      	pop	{r4, pc}
    70a2:	46c0      	nop			; (mov r8, r8)
    70a4:	00004aa1 	.word	0x00004aa1
    70a8:	40001800 	.word	0x40001800
    70ac:	00004ae1 	.word	0x00004ae1

000070b0 <system_gclk_chan_set_config>:
{
    70b0:	b570      	push	{r4, r5, r6, lr}
    70b2:	0004      	movs	r4, r0
    70b4:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    70b6:	4b05      	ldr	r3, [pc, #20]	; (70cc <system_gclk_chan_set_config+0x1c>)
    70b8:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    70ba:	782a      	ldrb	r2, [r5, #0]
    70bc:	230f      	movs	r3, #15
    70be:	4013      	ands	r3, r2
    70c0:	3420      	adds	r4, #32
    70c2:	00a4      	lsls	r4, r4, #2
    70c4:	4a02      	ldr	r2, [pc, #8]	; (70d0 <system_gclk_chan_set_config+0x20>)
    70c6:	50a3      	str	r3, [r4, r2]
}
    70c8:	bd70      	pop	{r4, r5, r6, pc}
    70ca:	46c0      	nop			; (mov r8, r8)
    70cc:	00007079 	.word	0x00007079
    70d0:	40001800 	.word	0x40001800

000070d4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    70d4:	b510      	push	{r4, lr}
    70d6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    70d8:	4b06      	ldr	r3, [pc, #24]	; (70f4 <system_gclk_chan_get_hz+0x20>)
    70da:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    70dc:	3420      	adds	r4, #32
    70de:	00a4      	lsls	r4, r4, #2
    70e0:	4b05      	ldr	r3, [pc, #20]	; (70f8 <system_gclk_chan_get_hz+0x24>)
    70e2:	58e4      	ldr	r4, [r4, r3]
    70e4:	0724      	lsls	r4, r4, #28
    70e6:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    70e8:	4b04      	ldr	r3, [pc, #16]	; (70fc <system_gclk_chan_get_hz+0x28>)
    70ea:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    70ec:	0020      	movs	r0, r4
    70ee:	4b04      	ldr	r3, [pc, #16]	; (7100 <system_gclk_chan_get_hz+0x2c>)
    70f0:	4798      	blx	r3
}
    70f2:	bd10      	pop	{r4, pc}
    70f4:	00004aa1 	.word	0x00004aa1
    70f8:	40001800 	.word	0x40001800
    70fc:	00004ae1 	.word	0x00004ae1
    7100:	00006fd5 	.word	0x00006fd5

00007104 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    7104:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    7106:	78d3      	ldrb	r3, [r2, #3]
    7108:	2b00      	cmp	r3, #0
    710a:	d135      	bne.n	7178 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    710c:	7813      	ldrb	r3, [r2, #0]
    710e:	2b80      	cmp	r3, #128	; 0x80
    7110:	d029      	beq.n	7166 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    7112:	061b      	lsls	r3, r3, #24
    7114:	2480      	movs	r4, #128	; 0x80
    7116:	0264      	lsls	r4, r4, #9
    7118:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    711a:	7854      	ldrb	r4, [r2, #1]
    711c:	2502      	movs	r5, #2
    711e:	43ac      	bics	r4, r5
    7120:	d106      	bne.n	7130 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    7122:	7894      	ldrb	r4, [r2, #2]
    7124:	2c00      	cmp	r4, #0
    7126:	d120      	bne.n	716a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    7128:	2480      	movs	r4, #128	; 0x80
    712a:	02a4      	lsls	r4, r4, #10
    712c:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    712e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    7130:	7854      	ldrb	r4, [r2, #1]
    7132:	3c01      	subs	r4, #1
    7134:	2c01      	cmp	r4, #1
    7136:	d91c      	bls.n	7172 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    7138:	040d      	lsls	r5, r1, #16
    713a:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    713c:	24a0      	movs	r4, #160	; 0xa0
    713e:	05e4      	lsls	r4, r4, #23
    7140:	432c      	orrs	r4, r5
    7142:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7144:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    7146:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    7148:	24d0      	movs	r4, #208	; 0xd0
    714a:	0624      	lsls	r4, r4, #24
    714c:	432c      	orrs	r4, r5
    714e:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7150:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    7152:	78d4      	ldrb	r4, [r2, #3]
    7154:	2c00      	cmp	r4, #0
    7156:	d122      	bne.n	719e <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    7158:	035b      	lsls	r3, r3, #13
    715a:	d51c      	bpl.n	7196 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    715c:	7893      	ldrb	r3, [r2, #2]
    715e:	2b01      	cmp	r3, #1
    7160:	d01e      	beq.n	71a0 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    7162:	6141      	str	r1, [r0, #20]
    7164:	e017      	b.n	7196 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    7166:	2300      	movs	r3, #0
    7168:	e7d7      	b.n	711a <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    716a:	24c0      	movs	r4, #192	; 0xc0
    716c:	02e4      	lsls	r4, r4, #11
    716e:	4323      	orrs	r3, r4
    7170:	e7dd      	b.n	712e <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    7172:	4c0d      	ldr	r4, [pc, #52]	; (71a8 <_system_pinmux_config+0xa4>)
    7174:	4023      	ands	r3, r4
    7176:	e7df      	b.n	7138 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    7178:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    717a:	040c      	lsls	r4, r1, #16
    717c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    717e:	23a0      	movs	r3, #160	; 0xa0
    7180:	05db      	lsls	r3, r3, #23
    7182:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7184:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    7186:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    7188:	23d0      	movs	r3, #208	; 0xd0
    718a:	061b      	lsls	r3, r3, #24
    718c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    718e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    7190:	78d3      	ldrb	r3, [r2, #3]
    7192:	2b00      	cmp	r3, #0
    7194:	d103      	bne.n	719e <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    7196:	7853      	ldrb	r3, [r2, #1]
    7198:	3b01      	subs	r3, #1
    719a:	2b01      	cmp	r3, #1
    719c:	d902      	bls.n	71a4 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    719e:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    71a0:	6181      	str	r1, [r0, #24]
    71a2:	e7f8      	b.n	7196 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    71a4:	6081      	str	r1, [r0, #8]
}
    71a6:	e7fa      	b.n	719e <_system_pinmux_config+0x9a>
    71a8:	fffbffff 	.word	0xfffbffff

000071ac <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    71ac:	b510      	push	{r4, lr}
    71ae:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    71b0:	09c1      	lsrs	r1, r0, #7
		return NULL;
    71b2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    71b4:	2900      	cmp	r1, #0
    71b6:	d104      	bne.n	71c2 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    71b8:	0943      	lsrs	r3, r0, #5
    71ba:	01db      	lsls	r3, r3, #7
    71bc:	4905      	ldr	r1, [pc, #20]	; (71d4 <system_pinmux_pin_set_config+0x28>)
    71be:	468c      	mov	ip, r1
    71c0:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    71c2:	241f      	movs	r4, #31
    71c4:	4020      	ands	r0, r4
    71c6:	2101      	movs	r1, #1
    71c8:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    71ca:	0018      	movs	r0, r3
    71cc:	4b02      	ldr	r3, [pc, #8]	; (71d8 <system_pinmux_pin_set_config+0x2c>)
    71ce:	4798      	blx	r3
}
    71d0:	bd10      	pop	{r4, pc}
    71d2:	46c0      	nop			; (mov r8, r8)
    71d4:	40002800 	.word	0x40002800
    71d8:	00007105 	.word	0x00007105

000071dc <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    71dc:	4770      	bx	lr
    71de:	Address 0x000071de is out of bounds.


000071e0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    71e0:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    71e2:	4b05      	ldr	r3, [pc, #20]	; (71f8 <system_init+0x18>)
    71e4:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    71e6:	4b05      	ldr	r3, [pc, #20]	; (71fc <system_init+0x1c>)
    71e8:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    71ea:	4b05      	ldr	r3, [pc, #20]	; (7200 <system_init+0x20>)
    71ec:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    71ee:	4b05      	ldr	r3, [pc, #20]	; (7204 <system_init+0x24>)
    71f0:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    71f2:	4b05      	ldr	r3, [pc, #20]	; (7208 <system_init+0x28>)
    71f4:	4798      	blx	r3
}
    71f6:	bd10      	pop	{r4, pc}
    71f8:	00006d1d 	.word	0x00006d1d
    71fc:	00004b11 	.word	0x00004b11
    7200:	000071dd 	.word	0x000071dd
    7204:	00004e5d 	.word	0x00004e5d
    7208:	000071dd 	.word	0x000071dd

0000720c <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    720c:	1c93      	adds	r3, r2, #2
    720e:	009b      	lsls	r3, r3, #2
    7210:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    7212:	2a02      	cmp	r2, #2
    7214:	d009      	beq.n	722a <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    7216:	2a03      	cmp	r2, #3
    7218:	d00c      	beq.n	7234 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    721a:	2301      	movs	r3, #1
    721c:	4093      	lsls	r3, r2
    721e:	001a      	movs	r2, r3
    7220:	7e03      	ldrb	r3, [r0, #24]
    7222:	4313      	orrs	r3, r2
    7224:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    7226:	2000      	movs	r0, #0
    7228:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    722a:	7e03      	ldrb	r3, [r0, #24]
    722c:	2210      	movs	r2, #16
    722e:	4313      	orrs	r3, r2
    7230:	7603      	strb	r3, [r0, #24]
    7232:	e7f8      	b.n	7226 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    7234:	7e03      	ldrb	r3, [r0, #24]
    7236:	2220      	movs	r2, #32
    7238:	4313      	orrs	r3, r2
    723a:	7603      	strb	r3, [r0, #24]
    723c:	e7f3      	b.n	7226 <tc_register_callback+0x1a>
    723e:	Address 0x0000723e is out of bounds.


00007240 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    7240:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    7242:	0080      	lsls	r0, r0, #2
    7244:	4b16      	ldr	r3, [pc, #88]	; (72a0 <_tc_interrupt_handler+0x60>)
    7246:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    7248:	6823      	ldr	r3, [r4, #0]
    724a:	7a9d      	ldrb	r5, [r3, #10]
    724c:	7e22      	ldrb	r2, [r4, #24]
    724e:	7e63      	ldrb	r3, [r4, #25]
    7250:	4013      	ands	r3, r2
    7252:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    7254:	07eb      	lsls	r3, r5, #31
    7256:	d406      	bmi.n	7266 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    7258:	07ab      	lsls	r3, r5, #30
    725a:	d40b      	bmi.n	7274 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    725c:	06eb      	lsls	r3, r5, #27
    725e:	d410      	bmi.n	7282 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    7260:	06ab      	lsls	r3, r5, #26
    7262:	d415      	bmi.n	7290 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    7264:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    7266:	0020      	movs	r0, r4
    7268:	68a3      	ldr	r3, [r4, #8]
    726a:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    726c:	2301      	movs	r3, #1
    726e:	6822      	ldr	r2, [r4, #0]
    7270:	7293      	strb	r3, [r2, #10]
    7272:	e7f1      	b.n	7258 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    7274:	0020      	movs	r0, r4
    7276:	68e3      	ldr	r3, [r4, #12]
    7278:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    727a:	2302      	movs	r3, #2
    727c:	6822      	ldr	r2, [r4, #0]
    727e:	7293      	strb	r3, [r2, #10]
    7280:	e7ec      	b.n	725c <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    7282:	0020      	movs	r0, r4
    7284:	6923      	ldr	r3, [r4, #16]
    7286:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    7288:	2310      	movs	r3, #16
    728a:	6822      	ldr	r2, [r4, #0]
    728c:	7293      	strb	r3, [r2, #10]
    728e:	e7e7      	b.n	7260 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    7290:	0020      	movs	r0, r4
    7292:	6963      	ldr	r3, [r4, #20]
    7294:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    7296:	6823      	ldr	r3, [r4, #0]
    7298:	2220      	movs	r2, #32
    729a:	729a      	strb	r2, [r3, #10]
}
    729c:	e7e2      	b.n	7264 <_tc_interrupt_handler+0x24>
    729e:	46c0      	nop			; (mov r8, r8)
    72a0:	20002474 	.word	0x20002474

000072a4 <TC0_Handler>:
	_TC_INTERRUPT_HANDLER(0,0)
    72a4:	b510      	push	{r4, lr}
    72a6:	2000      	movs	r0, #0
    72a8:	4b01      	ldr	r3, [pc, #4]	; (72b0 <TC0_Handler+0xc>)
    72aa:	4798      	blx	r3
    72ac:	bd10      	pop	{r4, pc}
    72ae:	46c0      	nop			; (mov r8, r8)
    72b0:	00007241 	.word	0x00007241

000072b4 <TC1_Handler>:
	_TC_INTERRUPT_HANDLER(1,1)
    72b4:	b510      	push	{r4, lr}
    72b6:	2001      	movs	r0, #1
    72b8:	4b01      	ldr	r3, [pc, #4]	; (72c0 <TC1_Handler+0xc>)
    72ba:	4798      	blx	r3
    72bc:	bd10      	pop	{r4, pc}
    72be:	46c0      	nop			; (mov r8, r8)
    72c0:	00007241 	.word	0x00007241

000072c4 <TC4_Handler>:
	_TC_INTERRUPT_HANDLER(4,2)
    72c4:	b510      	push	{r4, lr}
    72c6:	2002      	movs	r0, #2
    72c8:	4b01      	ldr	r3, [pc, #4]	; (72d0 <TC4_Handler+0xc>)
    72ca:	4798      	blx	r3
    72cc:	bd10      	pop	{r4, pc}
    72ce:	46c0      	nop			; (mov r8, r8)
    72d0:	00007241 	.word	0x00007241

000072d4 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    72d4:	b530      	push	{r4, r5, lr}
    72d6:	b087      	sub	sp, #28
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    72d8:	a901      	add	r1, sp, #4
    72da:	4b0c      	ldr	r3, [pc, #48]	; (730c <_tc_get_inst_index+0x38>)
    72dc:	000a      	movs	r2, r1
    72de:	cb32      	ldmia	r3!, {r1, r4, r5}
    72e0:	c232      	stmia	r2!, {r1, r4, r5}
    72e2:	cb12      	ldmia	r3!, {r1, r4}
    72e4:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    72e6:	9b01      	ldr	r3, [sp, #4]
    72e8:	4298      	cmp	r0, r3
    72ea:	d00b      	beq.n	7304 <_tc_get_inst_index+0x30>
    72ec:	2301      	movs	r3, #1
    72ee:	a901      	add	r1, sp, #4
    72f0:	009a      	lsls	r2, r3, #2
    72f2:	5852      	ldr	r2, [r2, r1]
    72f4:	4282      	cmp	r2, r0
    72f6:	d006      	beq.n	7306 <_tc_get_inst_index+0x32>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    72f8:	3301      	adds	r3, #1
    72fa:	2b05      	cmp	r3, #5
    72fc:	d1f8      	bne.n	72f0 <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    72fe:	2000      	movs	r0, #0
}
    7300:	b007      	add	sp, #28
    7302:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    7304:	2300      	movs	r3, #0
			return i;
    7306:	b2d8      	uxtb	r0, r3
    7308:	e7fa      	b.n	7300 <_tc_get_inst_index+0x2c>
    730a:	46c0      	nop			; (mov r8, r8)
    730c:	00019e48 	.word	0x00019e48

00007310 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    7310:	b5f0      	push	{r4, r5, r6, r7, lr}
    7312:	46c6      	mov	lr, r8
    7314:	b500      	push	{lr}
    7316:	b08e      	sub	sp, #56	; 0x38
    7318:	0004      	movs	r4, r0
    731a:	000d      	movs	r5, r1
    731c:	0016      	movs	r6, r2
	uint32_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    731e:	0008      	movs	r0, r1
    7320:	4bae      	ldr	r3, [pc, #696]	; (75dc <tc_init+0x2cc>)
    7322:	4798      	blx	r3
    7324:	4680      	mov	r8, r0
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC2,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC3,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC4};
#elif (SAML21J) || (SAMR34J) || (SAMR35J) || (WLR089U0)
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC2_GCLK_ID, TC3_GCLK_ID, TC4_GCLK_ID};
    7326:	ab0c      	add	r3, sp, #48	; 0x30
    7328:	221b      	movs	r2, #27
    732a:	701a      	strb	r2, [r3, #0]
    732c:	705a      	strb	r2, [r3, #1]
    732e:	3201      	adds	r2, #1
    7330:	709a      	strb	r2, [r3, #2]
    7332:	70da      	strb	r2, [r3, #3]
    7334:	3201      	adds	r2, #1
    7336:	711a      	strb	r2, [r3, #4]
	/* Array of MCLK APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
    7338:	a902      	add	r1, sp, #8
    733a:	4ba9      	ldr	r3, [pc, #676]	; (75e0 <tc_init+0x2d0>)
    733c:	3314      	adds	r3, #20
    733e:	000a      	movs	r2, r1
    7340:	cb83      	ldmia	r3!, {r0, r1, r7}
    7342:	c283      	stmia	r2!, {r0, r1, r7}
    7344:	cb83      	ldmia	r3!, {r0, r1, r7}
    7346:	c283      	stmia	r2!, {r0, r1, r7}
    7348:	cb83      	ldmia	r3!, {r0, r1, r7}
    734a:	c283      	stmia	r2!, {r0, r1, r7}
    734c:	681b      	ldr	r3, [r3, #0]
    734e:	6013      	str	r3, [r2, #0]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    7350:	2300      	movs	r3, #0
    7352:	60a3      	str	r3, [r4, #8]
    7354:	60e3      	str	r3, [r4, #12]
    7356:	6123      	str	r3, [r4, #16]
    7358:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    735a:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    735c:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    735e:	4643      	mov	r3, r8
    7360:	009a      	lsls	r2, r3, #2
    7362:	4ba0      	ldr	r3, [pc, #640]	; (75e4 <tc_init+0x2d4>)
    7364:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    7366:	6025      	str	r5, [r4, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    7368:	2334      	movs	r3, #52	; 0x34
    736a:	5cf3      	ldrb	r3, [r6, r3]
    736c:	76a3      	strb	r3, [r4, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    736e:	78f3      	ldrb	r3, [r6, #3]
    7370:	2b08      	cmp	r3, #8
    7372:	d008      	beq.n	7386 <tc_init+0x76>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    7374:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    7376:	682b      	ldr	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    7378:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    737a:	07db      	lsls	r3, r3, #31
    737c:	d508      	bpl.n	7390 <tc_init+0x80>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    737e:	b00e      	add	sp, #56	; 0x38
    7380:	bc04      	pop	{r2}
    7382:	4690      	mov	r8, r2
    7384:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    7386:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    7388:	4642      	mov	r2, r8
    738a:	07d2      	lsls	r2, r2, #31
    738c:	d4f7      	bmi.n	737e <tc_init+0x6e>
    738e:	e7f1      	b.n	7374 <tc_init+0x64>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    7390:	7aeb      	ldrb	r3, [r5, #11]
		return STATUS_ERR_DENIED;
    7392:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    7394:	079b      	lsls	r3, r3, #30
    7396:	d4f2      	bmi.n	737e <tc_init+0x6e>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    7398:	682b      	ldr	r3, [r5, #0]
    739a:	079b      	lsls	r3, r3, #30
    739c:	d4ef      	bmi.n	737e <tc_init+0x6e>
	if (config->pwm_channel[0].enabled) {
    739e:	7c33      	ldrb	r3, [r6, #16]
    73a0:	2b00      	cmp	r3, #0
    73a2:	d112      	bne.n	73ca <tc_init+0xba>
	if (config->pwm_channel[1].enabled) {
    73a4:	7f33      	ldrb	r3, [r6, #28]
    73a6:	2b00      	cmp	r3, #0
    73a8:	d11b      	bne.n	73e2 <tc_init+0xd2>
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
    73aa:	4643      	mov	r3, r8
    73ac:	005a      	lsls	r2, r3, #1
    73ae:	a902      	add	r1, sp, #8
    73b0:	1c53      	adds	r3, r2, #1
    73b2:	009b      	lsls	r3, r3, #2
    73b4:	5858      	ldr	r0, [r3, r1]
    73b6:	4643      	mov	r3, r8
    73b8:	00db      	lsls	r3, r3, #3
    73ba:	585b      	ldr	r3, [r3, r1]
	switch (bus) {
    73bc:	b2d9      	uxtb	r1, r3
    73be:	2904      	cmp	r1, #4
    73c0:	d823      	bhi.n	740a <tc_init+0xfa>
    73c2:	008b      	lsls	r3, r1, #2
    73c4:	4988      	ldr	r1, [pc, #544]	; (75e8 <tc_init+0x2d8>)
    73c6:	58cb      	ldr	r3, [r1, r3]
    73c8:	469f      	mov	pc, r3
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    73ca:	a901      	add	r1, sp, #4
    73cc:	2301      	movs	r3, #1
    73ce:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    73d0:	2200      	movs	r2, #0
    73d2:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    73d4:	7e32      	ldrb	r2, [r6, #24]
    73d6:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    73d8:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    73da:	7d30      	ldrb	r0, [r6, #20]
    73dc:	4b83      	ldr	r3, [pc, #524]	; (75ec <tc_init+0x2dc>)
    73de:	4798      	blx	r3
    73e0:	e7e0      	b.n	73a4 <tc_init+0x94>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    73e2:	a901      	add	r1, sp, #4
    73e4:	2301      	movs	r3, #1
    73e6:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    73e8:	2200      	movs	r2, #0
    73ea:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    73ec:	3224      	adds	r2, #36	; 0x24
    73ee:	18b2      	adds	r2, r6, r2
    73f0:	7812      	ldrb	r2, [r2, #0]
    73f2:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    73f4:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    73f6:	331f      	adds	r3, #31
    73f8:	18f3      	adds	r3, r6, r3
    73fa:	7818      	ldrb	r0, [r3, #0]
    73fc:	4b7b      	ldr	r3, [pc, #492]	; (75ec <tc_init+0x2dc>)
    73fe:	4798      	blx	r3
    7400:	e7d3      	b.n	73aa <tc_init+0x9a>
			MCLK->APBAMASK.reg |= mask;
    7402:	497b      	ldr	r1, [pc, #492]	; (75f0 <tc_init+0x2e0>)
    7404:	694b      	ldr	r3, [r1, #20]
    7406:	4318      	orrs	r0, r3
    7408:	6148      	str	r0, [r1, #20]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    740a:	78f3      	ldrb	r3, [r6, #3]
    740c:	2b08      	cmp	r3, #8
    740e:	d100      	bne.n	7412 <tc_init+0x102>
    7410:	e086      	b.n	7520 <tc_init+0x210>
	gclk_chan_config.source_generator = config->clock_source;
    7412:	7833      	ldrb	r3, [r6, #0]
    7414:	466a      	mov	r2, sp
    7416:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    7418:	ab0c      	add	r3, sp, #48	; 0x30
    741a:	4642      	mov	r2, r8
    741c:	5c9f      	ldrb	r7, [r3, r2]
    741e:	4669      	mov	r1, sp
    7420:	0038      	movs	r0, r7
    7422:	4b74      	ldr	r3, [pc, #464]	; (75f4 <tc_init+0x2e4>)
    7424:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    7426:	0038      	movs	r0, r7
    7428:	4b73      	ldr	r3, [pc, #460]	; (75f8 <tc_init+0x2e8>)
    742a:	4798      	blx	r3
			(uint32_t)config->counter_size |
    742c:	78f3      	ldrb	r3, [r6, #3]
    742e:	79f2      	ldrb	r2, [r6, #7]
    7430:	4313      	orrs	r3, r2
			(uint32_t)config->clock_prescaler;
    7432:	88b2      	ldrh	r2, [r6, #4]
	ctrla_tmp =
    7434:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    7436:	7a72      	ldrb	r2, [r6, #9]
    7438:	2a00      	cmp	r2, #0
    743a:	d002      	beq.n	7442 <tc_init+0x132>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    743c:	2280      	movs	r2, #128	; 0x80
    743e:	0252      	lsls	r2, r2, #9
    7440:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    7442:	7ab2      	ldrb	r2, [r6, #10]
    7444:	2a00      	cmp	r2, #0
    7446:	d002      	beq.n	744e <tc_init+0x13e>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    7448:	2280      	movs	r2, #128	; 0x80
    744a:	0292      	lsls	r2, r2, #10
    744c:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    744e:	7af2      	ldrb	r2, [r6, #11]
    7450:	2a00      	cmp	r2, #0
    7452:	d002      	beq.n	745a <tc_init+0x14a>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    7454:	2280      	movs	r2, #128	; 0x80
    7456:	0352      	lsls	r2, r2, #13
    7458:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    745a:	7b32      	ldrb	r2, [r6, #12]
    745c:	2a00      	cmp	r2, #0
    745e:	d002      	beq.n	7466 <tc_init+0x156>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    7460:	2280      	movs	r2, #128	; 0x80
    7462:	0392      	lsls	r2, r2, #14
    7464:	4313      	orrs	r3, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    7466:	7871      	ldrb	r1, [r6, #1]
    7468:	0189      	lsls	r1, r1, #6
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
    746a:	78b2      	ldrb	r2, [r6, #2]
    746c:	01d2      	lsls	r2, r2, #7
    746e:	4311      	orrs	r1, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    7470:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    7472:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	return (tc_module->SYNCBUSY.reg);
    7474:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    7476:	2b00      	cmp	r3, #0
    7478:	d1fc      	bne.n	7474 <tc_init+0x164>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    747a:	6029      	str	r1, [r5, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    747c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    747e:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    7480:	2b00      	cmp	r3, #0
    7482:	d1fc      	bne.n	747e <tc_init+0x16e>
	hw->COUNT8.WAVE.reg = config->wave_generation;
    7484:	79b3      	ldrb	r3, [r6, #6]
    7486:	732b      	strb	r3, [r5, #12]
	if (config->oneshot) {
    7488:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    748a:	1e4b      	subs	r3, r1, #1
    748c:	4199      	sbcs	r1, r3
    748e:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    7490:	7bb3      	ldrb	r3, [r6, #14]
    7492:	2b00      	cmp	r3, #0
    7494:	d001      	beq.n	749a <tc_init+0x18a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    7496:	2301      	movs	r3, #1
    7498:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    749a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    749c:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    749e:	2b00      	cmp	r3, #0
    74a0:	d1fc      	bne.n	749c <tc_init+0x18c>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    74a2:	33ff      	adds	r3, #255	; 0xff
    74a4:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    74a6:	2900      	cmp	r1, #0
    74a8:	d004      	beq.n	74b4 <tc_init+0x1a4>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    74aa:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    74ac:	6913      	ldr	r3, [r2, #16]
		while (tc_is_syncing(module_inst)) {
    74ae:	2b00      	cmp	r3, #0
    74b0:	d1fc      	bne.n	74ac <tc_init+0x19c>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    74b2:	7169      	strb	r1, [r5, #5]
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
    74b4:	7a33      	ldrb	r3, [r6, #8]
    74b6:	736b      	strb	r3, [r5, #13]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    74b8:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    74ba:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    74bc:	2b00      	cmp	r3, #0
    74be:	d1fc      	bne.n	74ba <tc_init+0x1aa>
	switch (module_inst->counter_size) {
    74c0:	7923      	ldrb	r3, [r4, #4]
    74c2:	2b04      	cmp	r3, #4
    74c4:	d059      	beq.n	757a <tc_init+0x26a>
    74c6:	2b08      	cmp	r3, #8
    74c8:	d074      	beq.n	75b4 <tc_init+0x2a4>
	return STATUS_ERR_INVALID_ARG;
    74ca:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    74cc:	2b00      	cmp	r3, #0
    74ce:	d000      	beq.n	74d2 <tc_init+0x1c2>
    74d0:	e755      	b.n	737e <tc_init+0x6e>
    74d2:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    74d4:	2b00      	cmp	r3, #0
    74d6:	d1fc      	bne.n	74d2 <tc_init+0x1c2>
				= config->counter_16_bit.value;
    74d8:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    74da:	82ab      	strh	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    74dc:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    74de:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    74e0:	2b00      	cmp	r3, #0
    74e2:	d1fc      	bne.n	74de <tc_init+0x1ce>
					config->counter_16_bit.compare_capture_channel[0];
    74e4:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    74e6:	83ab      	strh	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    74e8:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    74ea:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    74ec:	2b00      	cmp	r3, #0
    74ee:	d1fc      	bne.n	74ea <tc_init+0x1da>
					config->counter_16_bit.compare_capture_channel[1];
    74f0:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    74f2:	83eb      	strh	r3, [r5, #30]
			return STATUS_OK;
    74f4:	2000      	movs	r0, #0
    74f6:	e742      	b.n	737e <tc_init+0x6e>
			MCLK->APBBMASK.reg |= mask;
    74f8:	493d      	ldr	r1, [pc, #244]	; (75f0 <tc_init+0x2e0>)
    74fa:	698b      	ldr	r3, [r1, #24]
    74fc:	4318      	orrs	r0, r3
    74fe:	6188      	str	r0, [r1, #24]
    7500:	e783      	b.n	740a <tc_init+0xfa>
			MCLK->APBCMASK.reg |= mask;
    7502:	493b      	ldr	r1, [pc, #236]	; (75f0 <tc_init+0x2e0>)
    7504:	69cb      	ldr	r3, [r1, #28]
    7506:	4318      	orrs	r0, r3
    7508:	61c8      	str	r0, [r1, #28]
    750a:	e77e      	b.n	740a <tc_init+0xfa>
			MCLK->APBDMASK.reg |= mask;
    750c:	4938      	ldr	r1, [pc, #224]	; (75f0 <tc_init+0x2e0>)
    750e:	6a0b      	ldr	r3, [r1, #32]
    7510:	4318      	orrs	r0, r3
    7512:	6208      	str	r0, [r1, #32]
    7514:	e779      	b.n	740a <tc_init+0xfa>
			MCLK->APBEMASK.reg |= mask;
    7516:	4b36      	ldr	r3, [pc, #216]	; (75f0 <tc_init+0x2e0>)
    7518:	6a59      	ldr	r1, [r3, #36]	; 0x24
    751a:	4308      	orrs	r0, r1
    751c:	6258      	str	r0, [r3, #36]	; 0x24
    751e:	e774      	b.n	740a <tc_init+0xfa>
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    7520:	4643      	mov	r3, r8
    7522:	3301      	adds	r3, #1
    7524:	2b04      	cmp	r3, #4
    7526:	dd00      	ble.n	752a <tc_init+0x21a>
    7528:	e773      	b.n	7412 <tc_init+0x102>
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
    752a:	ab02      	add	r3, sp, #8
    752c:	1cd1      	adds	r1, r2, #3
    752e:	0089      	lsls	r1, r1, #2
    7530:	58c9      	ldr	r1, [r1, r3]
    7532:	3202      	adds	r2, #2
    7534:	0092      	lsls	r2, r2, #2
    7536:	58d3      	ldr	r3, [r2, r3]
	switch (bus) {
    7538:	b2da      	uxtb	r2, r3
    753a:	2a04      	cmp	r2, #4
    753c:	d900      	bls.n	7540 <tc_init+0x230>
    753e:	e768      	b.n	7412 <tc_init+0x102>
    7540:	0093      	lsls	r3, r2, #2
    7542:	4a2e      	ldr	r2, [pc, #184]	; (75fc <tc_init+0x2ec>)
    7544:	58d3      	ldr	r3, [r2, r3]
    7546:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    7548:	4a29      	ldr	r2, [pc, #164]	; (75f0 <tc_init+0x2e0>)
    754a:	6953      	ldr	r3, [r2, #20]
    754c:	4319      	orrs	r1, r3
    754e:	6151      	str	r1, [r2, #20]
    7550:	e75f      	b.n	7412 <tc_init+0x102>
			MCLK->APBBMASK.reg |= mask;
    7552:	4a27      	ldr	r2, [pc, #156]	; (75f0 <tc_init+0x2e0>)
    7554:	6993      	ldr	r3, [r2, #24]
    7556:	4319      	orrs	r1, r3
    7558:	6191      	str	r1, [r2, #24]
    755a:	e75a      	b.n	7412 <tc_init+0x102>
			MCLK->APBCMASK.reg |= mask;
    755c:	4a24      	ldr	r2, [pc, #144]	; (75f0 <tc_init+0x2e0>)
    755e:	69d3      	ldr	r3, [r2, #28]
    7560:	4319      	orrs	r1, r3
    7562:	61d1      	str	r1, [r2, #28]
    7564:	e755      	b.n	7412 <tc_init+0x102>
			MCLK->APBDMASK.reg |= mask;
    7566:	4a22      	ldr	r2, [pc, #136]	; (75f0 <tc_init+0x2e0>)
    7568:	6a13      	ldr	r3, [r2, #32]
    756a:	4319      	orrs	r1, r3
    756c:	6211      	str	r1, [r2, #32]
    756e:	e750      	b.n	7412 <tc_init+0x102>
			MCLK->APBEMASK.reg |= mask;
    7570:	4b1f      	ldr	r3, [pc, #124]	; (75f0 <tc_init+0x2e0>)
    7572:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    7574:	4311      	orrs	r1, r2
    7576:	6259      	str	r1, [r3, #36]	; 0x24
    7578:	e74b      	b.n	7412 <tc_init+0x102>
    757a:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    757c:	2b00      	cmp	r3, #0
    757e:	d1fc      	bne.n	757a <tc_init+0x26a>
					config->counter_8_bit.value;
    7580:	3328      	adds	r3, #40	; 0x28
    7582:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    7584:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    7586:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    7588:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    758a:	2b00      	cmp	r3, #0
    758c:	d1fc      	bne.n	7588 <tc_init+0x278>
					config->counter_8_bit.period;
    758e:	3329      	adds	r3, #41	; 0x29
    7590:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    7592:	76eb      	strb	r3, [r5, #27]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    7594:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    7596:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    7598:	2b00      	cmp	r3, #0
    759a:	d1fc      	bne.n	7596 <tc_init+0x286>
					config->counter_8_bit.compare_capture_channel[0];
    759c:	332a      	adds	r3, #42	; 0x2a
    759e:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    75a0:	772b      	strb	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    75a2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    75a4:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    75a6:	2b00      	cmp	r3, #0
    75a8:	d1fc      	bne.n	75a4 <tc_init+0x294>
					config->counter_8_bit.compare_capture_channel[1];
    75aa:	332b      	adds	r3, #43	; 0x2b
    75ac:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    75ae:	776b      	strb	r3, [r5, #29]
			return STATUS_OK;
    75b0:	2000      	movs	r0, #0
    75b2:	e6e4      	b.n	737e <tc_init+0x6e>
    75b4:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    75b6:	2b00      	cmp	r3, #0
    75b8:	d1fc      	bne.n	75b4 <tc_init+0x2a4>
				= config->counter_32_bit.value;
    75ba:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    75bc:	616b      	str	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    75be:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    75c0:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    75c2:	2b00      	cmp	r3, #0
    75c4:	d1fc      	bne.n	75c0 <tc_init+0x2b0>
			hw->COUNT32.CC[0].reg =
    75c6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    75c8:	61eb      	str	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    75ca:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    75cc:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    75ce:	2b00      	cmp	r3, #0
    75d0:	d1fc      	bne.n	75cc <tc_init+0x2bc>
					config->counter_32_bit.compare_capture_channel[1];
    75d2:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    75d4:	622b      	str	r3, [r5, #32]
			return STATUS_OK;
    75d6:	2000      	movs	r0, #0
    75d8:	e6d1      	b.n	737e <tc_init+0x6e>
    75da:	46c0      	nop			; (mov r8, r8)
    75dc:	000072d5 	.word	0x000072d5
    75e0:	00019e48 	.word	0x00019e48
    75e4:	20002474 	.word	0x20002474
    75e8:	00019e20 	.word	0x00019e20
    75ec:	000071ad 	.word	0x000071ad
    75f0:	40000400 	.word	0x40000400
    75f4:	000070b1 	.word	0x000070b1
    75f8:	00007041 	.word	0x00007041
    75fc:	00019e34 	.word	0x00019e34

00007600 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    7600:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    7602:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    7604:	2b00      	cmp	r3, #0
    7606:	d1fc      	bne.n	7602 <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    7608:	7113      	strb	r3, [r2, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    760a:	6801      	ldr	r1, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    760c:	690b      	ldr	r3, [r1, #16]

	while (tc_is_syncing(module_inst)) {
    760e:	2b00      	cmp	r3, #0
    7610:	d1fc      	bne.n	760c <tc_get_count_value+0xc>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_READSYNC_Val);
    7612:	3380      	adds	r3, #128	; 0x80
    7614:	7153      	strb	r3, [r2, #5]
#if (SAMC20) || (SAMC21) || (SAML21) || (SAML22) || (SAMR30) || (SAMR34) || (WLR089)
	/* wait for the CMD bits in CTRLBSET to be cleared, meaning the CMD has been executed */
	while(tc_module->CTRLBSET.reg & TC_CTRLBSET_CMD_READSYNC);	
    7616:	7953      	ldrb	r3, [r2, #5]
    7618:	b25b      	sxtb	r3, r3
    761a:	2b00      	cmp	r3, #0
    761c:	dbfb      	blt.n	7616 <tc_get_count_value+0x16>

	/* Read synchronization */
	tc_sync_read_count(module_inst);
	
	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    761e:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    7620:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    7622:	2b00      	cmp	r3, #0
    7624:	d1fc      	bne.n	7620 <tc_get_count_value+0x20>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    7626:	7903      	ldrb	r3, [r0, #4]
    7628:	2b04      	cmp	r3, #4
    762a:	d005      	beq.n	7638 <tc_get_count_value+0x38>
    762c:	2b08      	cmp	r3, #8
    762e:	d009      	beq.n	7644 <tc_get_count_value+0x44>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    7630:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    7632:	2b00      	cmp	r3, #0
    7634:	d003      	beq.n	763e <tc_get_count_value+0x3e>
}
    7636:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    7638:	7d10      	ldrb	r0, [r2, #20]
    763a:	b2c0      	uxtb	r0, r0
    763c:	e7fb      	b.n	7636 <tc_get_count_value+0x36>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    763e:	8a90      	ldrh	r0, [r2, #20]
    7640:	b280      	uxth	r0, r0
    7642:	e7f8      	b.n	7636 <tc_get_count_value+0x36>
			return tc_module->COUNT32.COUNT.reg;
    7644:	6950      	ldr	r0, [r2, #20]
    7646:	e7f6      	b.n	7636 <tc_get_count_value+0x36>

00007648 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    7648:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(compare);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    764a:	6804      	ldr	r4, [r0, #0]
    764c:	6923      	ldr	r3, [r4, #16]

	while (tc_is_syncing(module_inst)) {
    764e:	2b00      	cmp	r3, #0
    7650:	d1fc      	bne.n	764c <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    7652:	7903      	ldrb	r3, [r0, #4]
    7654:	2b04      	cmp	r3, #4
    7656:	d006      	beq.n	7666 <tc_set_compare_value+0x1e>
    7658:	2b08      	cmp	r3, #8
    765a:	d028      	beq.n	76ae <tc_set_compare_value+0x66>
    765c:	2b00      	cmp	r3, #0
    765e:	d013      	beq.n	7688 <tc_set_compare_value+0x40>
				}
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    7660:	2317      	movs	r3, #23
}
    7662:	0018      	movs	r0, r3
    7664:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    7666:	2317      	movs	r3, #23
			if (channel_index <
    7668:	2901      	cmp	r1, #1
    766a:	d8fa      	bhi.n	7662 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    766c:	7e83      	ldrb	r3, [r0, #26]
    766e:	2b00      	cmp	r3, #0
    7670:	d005      	beq.n	767e <tc_set_compare_value+0x36>
							(uint8_t)compare;
    7672:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CCBUF[channel_index].reg =
    7674:	1861      	adds	r1, r4, r1
    7676:	3130      	adds	r1, #48	; 0x30
    7678:	700a      	strb	r2, [r1, #0]
				return STATUS_OK;
    767a:	2300      	movs	r3, #0
    767c:	e7f1      	b.n	7662 <tc_set_compare_value+0x1a>
							(uint8_t)compare;
    767e:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CC[channel_index].reg  =
    7680:	1864      	adds	r4, r4, r1
    7682:	7722      	strb	r2, [r4, #28]
				return STATUS_OK;
    7684:	2300      	movs	r3, #0
    7686:	e7ec      	b.n	7662 <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    7688:	2317      	movs	r3, #23
			if (channel_index <
    768a:	2901      	cmp	r1, #1
    768c:	d8e9      	bhi.n	7662 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    768e:	7e83      	ldrb	r3, [r0, #26]
    7690:	2b00      	cmp	r3, #0
    7692:	d005      	beq.n	76a0 <tc_set_compare_value+0x58>
							(uint16_t)compare;
    7694:	b292      	uxth	r2, r2
					tc_module->COUNT16.CCBUF[channel_index].reg =
    7696:	3118      	adds	r1, #24
    7698:	0049      	lsls	r1, r1, #1
    769a:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    769c:	2300      	movs	r3, #0
    769e:	e7e0      	b.n	7662 <tc_set_compare_value+0x1a>
							(uint16_t)compare;
    76a0:	b292      	uxth	r2, r2
					tc_module->COUNT16.CC[channel_index].reg =
    76a2:	310c      	adds	r1, #12
    76a4:	0049      	lsls	r1, r1, #1
    76a6:	1864      	adds	r4, r4, r1
    76a8:	80a2      	strh	r2, [r4, #4]
				return STATUS_OK;
    76aa:	2300      	movs	r3, #0
    76ac:	e7d9      	b.n	7662 <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    76ae:	2317      	movs	r3, #23
			if (channel_index <
    76b0:	2901      	cmp	r1, #1
    76b2:	d8d6      	bhi.n	7662 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    76b4:	7e83      	ldrb	r3, [r0, #26]
    76b6:	2b00      	cmp	r3, #0
    76b8:	d105      	bne.n	76c6 <tc_set_compare_value+0x7e>
					tc_module->COUNT32.CC[channel_index].reg =
    76ba:	3106      	adds	r1, #6
    76bc:	0089      	lsls	r1, r1, #2
    76be:	1864      	adds	r4, r4, r1
    76c0:	6062      	str	r2, [r4, #4]
				return STATUS_OK;
    76c2:	2300      	movs	r3, #0
    76c4:	e7cd      	b.n	7662 <tc_set_compare_value+0x1a>
					tc_module->COUNT32.CCBUF[channel_index].reg =
    76c6:	310c      	adds	r1, #12
    76c8:	0089      	lsls	r1, r1, #2
    76ca:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    76cc:	2300      	movs	r3, #0
    76ce:	e7c8      	b.n	7662 <tc_set_compare_value+0x1a>

000076d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    76d0:	e7fe      	b.n	76d0 <Dummy_Handler>
    76d2:	Address 0x000076d2 is out of bounds.


000076d4 <Reset_Handler>:
{
    76d4:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    76d6:	4a1a      	ldr	r2, [pc, #104]	; (7740 <Reset_Handler+0x6c>)
    76d8:	4b1a      	ldr	r3, [pc, #104]	; (7744 <Reset_Handler+0x70>)
    76da:	429a      	cmp	r2, r3
    76dc:	d011      	beq.n	7702 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    76de:	001a      	movs	r2, r3
    76e0:	4b19      	ldr	r3, [pc, #100]	; (7748 <Reset_Handler+0x74>)
    76e2:	429a      	cmp	r2, r3
    76e4:	d20d      	bcs.n	7702 <Reset_Handler+0x2e>
    76e6:	4a19      	ldr	r2, [pc, #100]	; (774c <Reset_Handler+0x78>)
    76e8:	3303      	adds	r3, #3
    76ea:	1a9b      	subs	r3, r3, r2
    76ec:	089b      	lsrs	r3, r3, #2
    76ee:	3301      	adds	r3, #1
    76f0:	009b      	lsls	r3, r3, #2
    76f2:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    76f4:	4813      	ldr	r0, [pc, #76]	; (7744 <Reset_Handler+0x70>)
    76f6:	4912      	ldr	r1, [pc, #72]	; (7740 <Reset_Handler+0x6c>)
    76f8:	588c      	ldr	r4, [r1, r2]
    76fa:	5084      	str	r4, [r0, r2]
    76fc:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    76fe:	429a      	cmp	r2, r3
    7700:	d1fa      	bne.n	76f8 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    7702:	4a13      	ldr	r2, [pc, #76]	; (7750 <Reset_Handler+0x7c>)
    7704:	4b13      	ldr	r3, [pc, #76]	; (7754 <Reset_Handler+0x80>)
    7706:	429a      	cmp	r2, r3
    7708:	d20a      	bcs.n	7720 <Reset_Handler+0x4c>
    770a:	43d3      	mvns	r3, r2
    770c:	4911      	ldr	r1, [pc, #68]	; (7754 <Reset_Handler+0x80>)
    770e:	185b      	adds	r3, r3, r1
    7710:	2103      	movs	r1, #3
    7712:	438b      	bics	r3, r1
    7714:	3304      	adds	r3, #4
    7716:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    7718:	2100      	movs	r1, #0
    771a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    771c:	4293      	cmp	r3, r2
    771e:	d1fc      	bne.n	771a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    7720:	4a0d      	ldr	r2, [pc, #52]	; (7758 <Reset_Handler+0x84>)
    7722:	21ff      	movs	r1, #255	; 0xff
    7724:	4b0d      	ldr	r3, [pc, #52]	; (775c <Reset_Handler+0x88>)
    7726:	438b      	bics	r3, r1
    7728:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    772a:	4a0d      	ldr	r2, [pc, #52]	; (7760 <Reset_Handler+0x8c>)
    772c:	6853      	ldr	r3, [r2, #4]
    772e:	397f      	subs	r1, #127	; 0x7f
    7730:	430b      	orrs	r3, r1
    7732:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    7734:	4b0b      	ldr	r3, [pc, #44]	; (7764 <Reset_Handler+0x90>)
    7736:	4798      	blx	r3
        main();
    7738:	4b0b      	ldr	r3, [pc, #44]	; (7768 <Reset_Handler+0x94>)
    773a:	4798      	blx	r3
    773c:	e7fe      	b.n	773c <Reset_Handler+0x68>
    773e:	46c0      	nop			; (mov r8, r8)
    7740:	0001b258 	.word	0x0001b258
    7744:	20000000 	.word	0x20000000
    7748:	20000090 	.word	0x20000090
    774c:	20000004 	.word	0x20000004
    7750:	20000090 	.word	0x20000090
    7754:	200041f8 	.word	0x200041f8
    7758:	e000ed00 	.word	0xe000ed00
    775c:	00000000 	.word	0x00000000
    7760:	41004000 	.word	0x41004000
    7764:	000182f5 	.word	0x000182f5
    7768:	00009bc5 	.word	0x00009bc5

0000776c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    776c:	b5f0      	push	{r4, r5, r6, r7, lr}
    776e:	46c6      	mov	lr, r8
    7770:	b500      	push	{lr}
    7772:	000c      	movs	r4, r1
    7774:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    7776:	2800      	cmp	r0, #0
    7778:	d10f      	bne.n	779a <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    777a:	2a00      	cmp	r2, #0
    777c:	dd11      	ble.n	77a2 <_read+0x36>
    777e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    7780:	4e09      	ldr	r6, [pc, #36]	; (77a8 <_read+0x3c>)
    7782:	4d0a      	ldr	r5, [pc, #40]	; (77ac <_read+0x40>)
    7784:	6830      	ldr	r0, [r6, #0]
    7786:	0021      	movs	r1, r4
    7788:	682b      	ldr	r3, [r5, #0]
    778a:	4798      	blx	r3
		ptr++;
    778c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    778e:	42bc      	cmp	r4, r7
    7790:	d1f8      	bne.n	7784 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    7792:	4640      	mov	r0, r8
    7794:	bc04      	pop	{r2}
    7796:	4690      	mov	r8, r2
    7798:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    779a:	2301      	movs	r3, #1
    779c:	425b      	negs	r3, r3
    779e:	4698      	mov	r8, r3
    77a0:	e7f7      	b.n	7792 <_read+0x26>
	for (; len > 0; --len) {
    77a2:	4680      	mov	r8, r0
    77a4:	e7f5      	b.n	7792 <_read+0x26>
    77a6:	46c0      	nop			; (mov r8, r8)
    77a8:	20002490 	.word	0x20002490
    77ac:	20002488 	.word	0x20002488

000077b0 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    77b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    77b2:	46c6      	mov	lr, r8
    77b4:	b500      	push	{lr}
    77b6:	000e      	movs	r6, r1
    77b8:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    77ba:	3801      	subs	r0, #1
    77bc:	2802      	cmp	r0, #2
    77be:	d810      	bhi.n	77e2 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    77c0:	2a00      	cmp	r2, #0
    77c2:	d011      	beq.n	77e8 <_write+0x38>
    77c4:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    77c6:	4b0c      	ldr	r3, [pc, #48]	; (77f8 <_write+0x48>)
    77c8:	4698      	mov	r8, r3
    77ca:	4f0c      	ldr	r7, [pc, #48]	; (77fc <_write+0x4c>)
    77cc:	4643      	mov	r3, r8
    77ce:	6818      	ldr	r0, [r3, #0]
    77d0:	5d31      	ldrb	r1, [r6, r4]
    77d2:	683b      	ldr	r3, [r7, #0]
    77d4:	4798      	blx	r3
    77d6:	2800      	cmp	r0, #0
    77d8:	db08      	blt.n	77ec <_write+0x3c>
			return -1;
		}
		++nChars;
    77da:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    77dc:	42a5      	cmp	r5, r4
    77de:	d1f5      	bne.n	77cc <_write+0x1c>
    77e0:	e006      	b.n	77f0 <_write+0x40>
		return -1;
    77e2:	2401      	movs	r4, #1
    77e4:	4264      	negs	r4, r4
    77e6:	e003      	b.n	77f0 <_write+0x40>
	for (; len != 0; --len) {
    77e8:	0014      	movs	r4, r2
    77ea:	e001      	b.n	77f0 <_write+0x40>
			return -1;
    77ec:	2401      	movs	r4, #1
    77ee:	4264      	negs	r4, r4
	}
	return nChars;
}
    77f0:	0020      	movs	r0, r4
    77f2:	bc04      	pop	{r2}
    77f4:	4690      	mov	r8, r2
    77f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    77f8:	20002490 	.word	0x20002490
    77fc:	2000248c 	.word	0x2000248c

00007800 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    7800:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    7802:	4a06      	ldr	r2, [pc, #24]	; (781c <_sbrk+0x1c>)
    7804:	6812      	ldr	r2, [r2, #0]
    7806:	2a00      	cmp	r2, #0
    7808:	d004      	beq.n	7814 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    780a:	4a04      	ldr	r2, [pc, #16]	; (781c <_sbrk+0x1c>)
    780c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    780e:	18c3      	adds	r3, r0, r3
    7810:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    7812:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    7814:	4902      	ldr	r1, [pc, #8]	; (7820 <_sbrk+0x20>)
    7816:	4a01      	ldr	r2, [pc, #4]	; (781c <_sbrk+0x1c>)
    7818:	6011      	str	r1, [r2, #0]
    781a:	e7f6      	b.n	780a <_sbrk+0xa>
    781c:	200002fc 	.word	0x200002fc
    7820:	200061f8 	.word	0x200061f8

00007824 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    7824:	2001      	movs	r0, #1
    7826:	4240      	negs	r0, r0
    7828:	4770      	bx	lr

0000782a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    782a:	2380      	movs	r3, #128	; 0x80
    782c:	019b      	lsls	r3, r3, #6
    782e:	604b      	str	r3, [r1, #4]

	return 0;
}
    7830:	2000      	movs	r0, #0
    7832:	4770      	bx	lr

00007834 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    7834:	2001      	movs	r0, #1
    7836:	4770      	bx	lr

00007838 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    7838:	2000      	movs	r0, #0
    783a:	4770      	bx	lr

0000783c <_exit>:

extern void _exit(int status)
{
	asm("BKPT #0");
    783c:	be00      	bkpt	0x0000
    783e:	e7fe      	b.n	783e <_exit+0x2>

00007840 <_kill>:
}

extern void _kill(int pid, int sig)
{
	return;
}
    7840:	4770      	bx	lr

00007842 <_getpid>:

extern int _getpid(void)
{
	return -1;
}
    7842:	2001      	movs	r0, #1
    7844:	4240      	negs	r0, r0
    7846:	4770      	bx	lr

00007848 <sal_FillSubKey>:
		}
	}
}

static void sal_FillSubKey( uint8_t *source, uint8_t *key, uint8_t size)
{
    7848:	b530      	push	{r4, r5, lr}
	uint8_t i = 0;
	uint8_t carry = 0;

	i=size;

	while(i--)
    784a:	1e53      	subs	r3, r2, #1
    784c:	b2db      	uxtb	r3, r3
    784e:	2a00      	cmp	r2, #0
    7850:	d00b      	beq.n	786a <sal_FillSubKey+0x22>
    7852:	2400      	movs	r4, #0
	{
		key[i] = (source[i] << 1) | carry;
    7854:	18c5      	adds	r5, r0, r3
    7856:	782a      	ldrb	r2, [r5, #0]
    7858:	0052      	lsls	r2, r2, #1
    785a:	4322      	orrs	r2, r4
    785c:	54ca      	strb	r2, [r1, r3]
		carry = !!(source[i] & 0x80);
    785e:	782c      	ldrb	r4, [r5, #0]
    7860:	09e4      	lsrs	r4, r4, #7
	while(i--)
    7862:	3b01      	subs	r3, #1
    7864:	b2db      	uxtb	r3, r3
    7866:	2bff      	cmp	r3, #255	; 0xff
    7868:	d1f4      	bne.n	7854 <sal_FillSubKey+0xc>
	}
}
    786a:	bd30      	pop	{r4, r5, pc}

0000786c <SAL_AESEncode>:
{
    786c:	b510      	push	{r4, lr}
    786e:	b084      	sub	sp, #16
    7870:	0004      	movs	r4, r0
    7872:	0011      	movs	r1, r2
	memcpy(useKey, key, sizeof(useKey));
    7874:	2210      	movs	r2, #16
    7876:	4668      	mov	r0, sp
    7878:	4b04      	ldr	r3, [pc, #16]	; (788c <SAL_AESEncode+0x20>)
    787a:	4798      	blx	r3
	AESEncode(buffer, useKey);
    787c:	4669      	mov	r1, sp
    787e:	0020      	movs	r0, r4
    7880:	4b03      	ldr	r3, [pc, #12]	; (7890 <SAL_AESEncode+0x24>)
    7882:	4798      	blx	r3
}
    7884:	2000      	movs	r0, #0
    7886:	b004      	add	sp, #16
    7888:	bd10      	pop	{r4, pc}
    788a:	46c0      	nop			; (mov r8, r8)
    788c:	0001835b 	.word	0x0001835b
    7890:	00010585 	.word	0x00010585

00007894 <SAL_DeriveSessionKey>:
{
    7894:	b510      	push	{r4, lr}
	sal_status = SAL_AESEncode(block, src_key, key);
    7896:	4b01      	ldr	r3, [pc, #4]	; (789c <SAL_DeriveSessionKey+0x8>)
    7898:	4798      	blx	r3
}
    789a:	bd10      	pop	{r4, pc}
    789c:	0000786d 	.word	0x0000786d

000078a0 <SAL_Read>:
}
    78a0:	2000      	movs	r0, #0
    78a2:	4770      	bx	lr

000078a4 <SAL_AESCmac>:
{
    78a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    78a6:	46d6      	mov	lr, sl
    78a8:	464f      	mov	r7, r9
    78aa:	4646      	mov	r6, r8
    78ac:	b5c0      	push	{r6, r7, lr}
    78ae:	b0a4      	sub	sp, #144	; 0x90
    78b0:	9001      	str	r0, [sp, #4]
    78b2:	000f      	movs	r7, r1
    78b4:	9102      	str	r1, [sp, #8]
    78b6:	9203      	str	r2, [sp, #12]
    78b8:	469a      	mov	sl, r3
    78ba:	ab2c      	add	r3, sp, #176	; 0xb0
    78bc:	881c      	ldrh	r4, [r3, #0]
	uint8_t const_Rb[16] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    78be:	ae08      	add	r6, sp, #32
    78c0:	2210      	movs	r2, #16
    78c2:	2100      	movs	r1, #0
    78c4:	0030      	movs	r0, r6
    78c6:	4d64      	ldr	r5, [pc, #400]	; (7a58 <SAL_AESCmac+0x1b4>)
    78c8:	47a8      	blx	r5
    78ca:	2387      	movs	r3, #135	; 0x87
    78cc:	73f3      	strb	r3, [r6, #15]
	memset(l, 0, sizeof(l));
    78ce:	2210      	movs	r2, #16
    78d0:	2100      	movs	r1, #0
    78d2:	a804      	add	r0, sp, #16
    78d4:	47a8      	blx	r5
	SAL_AESEncode(l, key_type, key);
    78d6:	9a01      	ldr	r2, [sp, #4]
    78d8:	0039      	movs	r1, r7
    78da:	a804      	add	r0, sp, #16
    78dc:	4b5f      	ldr	r3, [pc, #380]	; (7a5c <SAL_AESCmac+0x1b8>)
    78de:	4798      	blx	r3
	if ( (l[0] & 0x80) == 0x00 )  // MSB( bufferLocal[0] ) is '0'
    78e0:	ab04      	add	r3, sp, #16
    78e2:	781b      	ldrb	r3, [r3, #0]
    78e4:	2b7f      	cmp	r3, #127	; 0x7f
    78e6:	d82d      	bhi.n	7944 <SAL_AESCmac+0xa0>
		sal_FillSubKey( l, k1, (sizeof(l) ) );
    78e8:	2210      	movs	r2, #16
    78ea:	a920      	add	r1, sp, #128	; 0x80
    78ec:	a804      	add	r0, sp, #16
    78ee:	4b5c      	ldr	r3, [pc, #368]	; (7a60 <SAL_AESCmac+0x1bc>)
    78f0:	4798      	blx	r3
	if ( (k1[0] & 0x80) == 0x00 )   // MSB( k1[0] ) is '0'
    78f2:	ab20      	add	r3, sp, #128	; 0x80
    78f4:	781b      	ldrb	r3, [r3, #0]
    78f6:	2b7f      	cmp	r3, #127	; 0x7f
    78f8:	d834      	bhi.n	7964 <SAL_AESCmac+0xc0>
		sal_FillSubKey( k1, k2, (sizeof(l)) );
    78fa:	2210      	movs	r2, #16
    78fc:	a91c      	add	r1, sp, #112	; 0x70
    78fe:	a820      	add	r0, sp, #128	; 0x80
    7900:	4b57      	ldr	r3, [pc, #348]	; (7a60 <SAL_AESCmac+0x1bc>)
    7902:	4798      	blx	r3
	n = (size + 15) >> 4;
    7904:	0023      	movs	r3, r4
    7906:	330f      	adds	r3, #15
    7908:	111d      	asrs	r5, r3, #4
    790a:	b2aa      	uxth	r2, r5
    790c:	4690      	mov	r8, r2
	if (n == 0)
    790e:	2a00      	cmp	r2, #0
    7910:	d038      	beq.n	7984 <SAL_AESCmac+0xe0>
	if ( flag == 1 )
    7912:	0722      	lsls	r2, r4, #28
    7914:	d138      	bne.n	7988 <SAL_AESCmac+0xe4>
		for (i=((n-1) << 4); i<(n << 4); i++)
    7916:	4642      	mov	r2, r8
    7918:	3a01      	subs	r2, #1
    791a:	0112      	lsls	r2, r2, #4
    791c:	b296      	uxth	r6, r2
    791e:	4f51      	ldr	r7, [pc, #324]	; (7a64 <SAL_AESCmac+0x1c0>)
    7920:	401f      	ands	r7, r3
    7922:	42be      	cmp	r6, r7
    7924:	da54      	bge.n	79d0 <SAL_AESCmac+0x12c>
    7926:	0033      	movs	r3, r6
			mLast[j] = input[i] ^ k1[j];
    7928:	a910      	add	r1, sp, #64	; 0x40
    792a:	aa20      	add	r2, sp, #128	; 0x80
    792c:	1b98      	subs	r0, r3, r6
    792e:	b280      	uxth	r0, r0
    7930:	4654      	mov	r4, sl
    7932:	5ce4      	ldrb	r4, [r4, r3]
    7934:	5c15      	ldrb	r5, [r2, r0]
    7936:	406c      	eors	r4, r5
    7938:	540c      	strb	r4, [r1, r0]
		for (i=((n-1) << 4); i<(n << 4); i++)
    793a:	3301      	adds	r3, #1
    793c:	b29b      	uxth	r3, r3
    793e:	42bb      	cmp	r3, r7
    7940:	dbf4      	blt.n	792c <SAL_AESCmac+0x88>
    7942:	e045      	b.n	79d0 <SAL_AESCmac+0x12c>
		sal_FillSubKey( l, k1, (sizeof(l) ) );
    7944:	2210      	movs	r2, #16
    7946:	a920      	add	r1, sp, #128	; 0x80
    7948:	a804      	add	r0, sp, #16
    794a:	4b45      	ldr	r3, [pc, #276]	; (7a60 <SAL_AESCmac+0x1bc>)
    794c:	4798      	blx	r3
    794e:	2300      	movs	r3, #0
			k1[i] ^= const_Rb[i];
    7950:	aa20      	add	r2, sp, #128	; 0x80
    7952:	a908      	add	r1, sp, #32
    7954:	5c98      	ldrb	r0, [r3, r2]
    7956:	5c5d      	ldrb	r5, [r3, r1]
    7958:	4068      	eors	r0, r5
    795a:	5498      	strb	r0, [r3, r2]
    795c:	3301      	adds	r3, #1
		for (i=0; i<sizeof(l); i++)
    795e:	2b10      	cmp	r3, #16
    7960:	d1f8      	bne.n	7954 <SAL_AESCmac+0xb0>
    7962:	e7c6      	b.n	78f2 <SAL_AESCmac+0x4e>
		sal_FillSubKey( k1, k2, (sizeof(l) ) );
    7964:	2210      	movs	r2, #16
    7966:	a91c      	add	r1, sp, #112	; 0x70
    7968:	a820      	add	r0, sp, #128	; 0x80
    796a:	4b3d      	ldr	r3, [pc, #244]	; (7a60 <SAL_AESCmac+0x1bc>)
    796c:	4798      	blx	r3
    796e:	2300      	movs	r3, #0
			k2[i] = k2[i] ^ const_Rb[i];
    7970:	aa1c      	add	r2, sp, #112	; 0x70
    7972:	a908      	add	r1, sp, #32
    7974:	5c98      	ldrb	r0, [r3, r2]
    7976:	5c5d      	ldrb	r5, [r3, r1]
    7978:	4068      	eors	r0, r5
    797a:	5498      	strb	r0, [r3, r2]
    797c:	3301      	adds	r3, #1
		for (i=0; i<sizeof(l); i++)
    797e:	2b10      	cmp	r3, #16
    7980:	d1f8      	bne.n	7974 <SAL_AESCmac+0xd0>
    7982:	e7bf      	b.n	7904 <SAL_AESCmac+0x60>
		n = 1;
    7984:	2301      	movs	r3, #1
    7986:	4698      	mov	r8, r3
		ptr = &input[size - (size%16)];
    7988:	230f      	movs	r3, #15
    798a:	0020      	movs	r0, r4
    798c:	4398      	bics	r0, r3
    798e:	2300      	movs	r3, #0
			if ( i < (size%16) )
    7990:	220f      	movs	r2, #15
    7992:	4014      	ands	r4, r2
					padded[i] = 0x00;
    7994:	a90c      	add	r1, sp, #48	; 0x30
    7996:	2700      	movs	r7, #0
					padded[i] = 0x80;
    7998:	2680      	movs	r6, #128	; 0x80
				padded[i] = ptr[i];
    799a:	4450      	add	r0, sl
    799c:	e005      	b.n	79aa <SAL_AESCmac+0x106>
				if ( i == (size%16) )
    799e:	4294      	cmp	r4, r2
    79a0:	d009      	beq.n	79b6 <SAL_AESCmac+0x112>
					padded[i] = 0x00;
    79a2:	545f      	strb	r7, [r3, r1]
    79a4:	3301      	adds	r3, #1
		for (i=0; i<16; i++)
    79a6:	2b10      	cmp	r3, #16
    79a8:	d007      	beq.n	79ba <SAL_AESCmac+0x116>
    79aa:	b29a      	uxth	r2, r3
			if ( i < (size%16) )
    79ac:	4294      	cmp	r4, r2
    79ae:	d9f6      	bls.n	799e <SAL_AESCmac+0xfa>
				padded[i] = ptr[i];
    79b0:	5cc2      	ldrb	r2, [r0, r3]
    79b2:	545a      	strb	r2, [r3, r1]
    79b4:	e7f6      	b.n	79a4 <SAL_AESCmac+0x100>
					padded[i] = 0x80;
    79b6:	545e      	strb	r6, [r3, r1]
    79b8:	e7f4      	b.n	79a4 <SAL_AESCmac+0x100>
    79ba:	2300      	movs	r3, #0
			mLast[i] = padded[i] ^ k2[i];
    79bc:	a810      	add	r0, sp, #64	; 0x40
    79be:	a90c      	add	r1, sp, #48	; 0x30
    79c0:	aa1c      	add	r2, sp, #112	; 0x70
    79c2:	5c5c      	ldrb	r4, [r3, r1]
    79c4:	5c9d      	ldrb	r5, [r3, r2]
    79c6:	406c      	eors	r4, r5
    79c8:	541c      	strb	r4, [r3, r0]
    79ca:	3301      	adds	r3, #1
		for (i=0; i<sizeof(mLast); i++)
    79cc:	2b10      	cmp	r3, #16
    79ce:	d1f8      	bne.n	79c2 <SAL_AESCmac+0x11e>
	memset(x, 0, sizeof(x));
    79d0:	2210      	movs	r2, #16
    79d2:	2100      	movs	r1, #0
    79d4:	a818      	add	r0, sp, #96	; 0x60
    79d6:	4b20      	ldr	r3, [pc, #128]	; (7a58 <SAL_AESCmac+0x1b4>)
    79d8:	4798      	blx	r3
	for (i=0; i<(n-1); i++)
    79da:	2301      	movs	r3, #1
    79dc:	425b      	negs	r3, r3
    79de:	4443      	add	r3, r8
    79e0:	4699      	mov	r9, r3
    79e2:	2000      	movs	r0, #0
    79e4:	2700      	movs	r7, #0
    79e6:	2b00      	cmp	r3, #0
    79e8:	dd1a      	ble.n	7a20 <SAL_AESCmac+0x17c>
			y[j] = x[j] ^ input[(i << 4)+j];
    79ea:	ad14      	add	r5, sp, #80	; 0x50
    79ec:	ac18      	add	r4, sp, #96	; 0x60
		memcpy(x, y, sizeof(y));
    79ee:	4e1e      	ldr	r6, [pc, #120]	; (7a68 <SAL_AESCmac+0x1c4>)
			y[j] = x[j] ^ input[(i << 4)+j];
    79f0:	0100      	lsls	r0, r0, #4
    79f2:	2300      	movs	r3, #0
    79f4:	4450      	add	r0, sl
    79f6:	5cc2      	ldrb	r2, [r0, r3]
    79f8:	5d19      	ldrb	r1, [r3, r4]
    79fa:	404a      	eors	r2, r1
    79fc:	555a      	strb	r2, [r3, r5]
    79fe:	3301      	adds	r3, #1
		for (j=0; j<16; j++)
    7a00:	2b10      	cmp	r3, #16
    7a02:	d1f8      	bne.n	79f6 <SAL_AESCmac+0x152>
		memcpy(x, y, sizeof(y));
    7a04:	2210      	movs	r2, #16
    7a06:	0029      	movs	r1, r5
    7a08:	0020      	movs	r0, r4
    7a0a:	47b0      	blx	r6
		SAL_AESEncode(x, key_type, key);
    7a0c:	9a01      	ldr	r2, [sp, #4]
    7a0e:	9902      	ldr	r1, [sp, #8]
    7a10:	0020      	movs	r0, r4
    7a12:	4b12      	ldr	r3, [pc, #72]	; (7a5c <SAL_AESCmac+0x1b8>)
    7a14:	4798      	blx	r3
	for (i=0; i<(n-1); i++)
    7a16:	3701      	adds	r7, #1
    7a18:	b2bf      	uxth	r7, r7
    7a1a:	0038      	movs	r0, r7
    7a1c:	454f      	cmp	r7, r9
    7a1e:	dbe7      	blt.n	79f0 <SAL_AESCmac+0x14c>
    7a20:	2300      	movs	r3, #0
		y[i] = x[i] ^ mLast[i];
    7a22:	ac14      	add	r4, sp, #80	; 0x50
    7a24:	a818      	add	r0, sp, #96	; 0x60
    7a26:	a910      	add	r1, sp, #64	; 0x40
    7a28:	5c1a      	ldrb	r2, [r3, r0]
    7a2a:	5c5d      	ldrb	r5, [r3, r1]
    7a2c:	406a      	eors	r2, r5
    7a2e:	551a      	strb	r2, [r3, r4]
    7a30:	3301      	adds	r3, #1
	for (i=0; i<sizeof(x); i++)
    7a32:	2b10      	cmp	r3, #16
    7a34:	d1f8      	bne.n	7a28 <SAL_AESCmac+0x184>
	SAL_AESEncode(y, key_type, key);
    7a36:	9a01      	ldr	r2, [sp, #4]
    7a38:	9902      	ldr	r1, [sp, #8]
    7a3a:	a814      	add	r0, sp, #80	; 0x50
    7a3c:	4b07      	ldr	r3, [pc, #28]	; (7a5c <SAL_AESCmac+0x1b8>)
    7a3e:	4798      	blx	r3
	memcpy(output, y, sizeof(y));
    7a40:	2210      	movs	r2, #16
    7a42:	a914      	add	r1, sp, #80	; 0x50
    7a44:	9803      	ldr	r0, [sp, #12]
    7a46:	4b08      	ldr	r3, [pc, #32]	; (7a68 <SAL_AESCmac+0x1c4>)
    7a48:	4798      	blx	r3
}
    7a4a:	2000      	movs	r0, #0
    7a4c:	b024      	add	sp, #144	; 0x90
    7a4e:	bc1c      	pop	{r2, r3, r4}
    7a50:	4690      	mov	r8, r2
    7a52:	4699      	mov	r9, r3
    7a54:	46a2      	mov	sl, r4
    7a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7a58:	0001836d 	.word	0x0001836d
    7a5c:	0000786d 	.word	0x0000786d
    7a60:	00007849 	.word	0x00007849
    7a64:	000ffff0 	.word	0x000ffff0
    7a68:	0001835b 	.word	0x0001835b

00007a6c <RADIO_GetAttr>:
\param attribute - The attribute to get.
\param value     - The pointer that is used to get the value.
\return          - The error condition for getting a given attribute.
*************************************************************************/
RadioError_t RADIO_GetAttr(RadioAttribute_t attribute, void *value)
{
    7a6c:	b510      	push	{r4, lr}
    7a6e:	000c      	movs	r4, r1
	switch (attribute)
    7a70:	281f      	cmp	r0, #31
    7a72:	d900      	bls.n	7a76 <RADIO_GetAttr+0xa>
    7a74:	e093      	b.n	7b9e <RADIO_GetAttr+0x132>
    7a76:	0080      	lsls	r0, r0, #2
    7a78:	4b4a      	ldr	r3, [pc, #296]	; (7ba4 <RADIO_GetAttr+0x138>)
    7a7a:	581b      	ldr	r3, [r3, r0]
    7a7c:	469f      	mov	pc, r3
		//UNKOWN ATTRIBUTE
		return ERR_OUT_OF_RANGE;
		}
	}

	return ERR_NONE;
    7a7e:	2000      	movs	r0, #0
}
    7a80:	bd10      	pop	{r4, pc}
			*(uint8_t *)value = radioConfiguration.syncWordLoRa;
    7a82:	4b49      	ldr	r3, [pc, #292]	; (7ba8 <RADIO_GetAttr+0x13c>)
    7a84:	7e1b      	ldrb	r3, [r3, #24]
    7a86:	700b      	strb	r3, [r1, #0]
	return ERR_NONE;
    7a88:	2000      	movs	r0, #0
		break;
    7a8a:	e7f9      	b.n	7a80 <RADIO_GetAttr+0x14>
			*(uint32_t *)value = radioConfiguration.frequency;
    7a8c:	4b46      	ldr	r3, [pc, #280]	; (7ba8 <RADIO_GetAttr+0x13c>)
    7a8e:	681b      	ldr	r3, [r3, #0]
    7a90:	600b      	str	r3, [r1, #0]
	return ERR_NONE;
    7a92:	2000      	movs	r0, #0
		break;
    7a94:	e7f4      	b.n	7a80 <RADIO_GetAttr+0x14>
			*(uint32_t *)value = radioConfiguration.frequencyDeviation;
    7a96:	4b44      	ldr	r3, [pc, #272]	; (7ba8 <RADIO_GetAttr+0x13c>)
    7a98:	685b      	ldr	r3, [r3, #4]
    7a9a:	600b      	str	r3, [r1, #0]
	return ERR_NONE;
    7a9c:	2000      	movs	r0, #0
		break;
    7a9e:	e7ef      	b.n	7a80 <RADIO_GetAttr+0x14>
			*(uint16_t *)value = radioConfiguration.preambleLen;
    7aa0:	4b41      	ldr	r3, [pc, #260]	; (7ba8 <RADIO_GetAttr+0x13c>)
    7aa2:	8a9b      	ldrh	r3, [r3, #20]
    7aa4:	800b      	strh	r3, [r1, #0]
	return ERR_NONE;
    7aa6:	2000      	movs	r0, #0
		break;
    7aa8:	e7ea      	b.n	7a80 <RADIO_GetAttr+0x14>
			*(uint8_t *)value = radioConfiguration.outputPower;
    7aaa:	2322      	movs	r3, #34	; 0x22
    7aac:	4a3e      	ldr	r2, [pc, #248]	; (7ba8 <RADIO_GetAttr+0x13c>)
    7aae:	5cd3      	ldrb	r3, [r2, r3]
    7ab0:	700b      	strb	r3, [r1, #0]
	return ERR_NONE;
    7ab2:	2000      	movs	r0, #0
		break;
    7ab4:	e7e4      	b.n	7a80 <RADIO_GetAttr+0x14>
			*(uint8_t *)value = radioConfiguration.crcOn;
    7ab6:	2323      	movs	r3, #35	; 0x23
    7ab8:	4a3b      	ldr	r2, [pc, #236]	; (7ba8 <RADIO_GetAttr+0x13c>)
    7aba:	5cd3      	ldrb	r3, [r2, r3]
    7abc:	700b      	strb	r3, [r1, #0]
	return ERR_NONE;
    7abe:	2000      	movs	r0, #0
		break;
    7ac0:	e7de      	b.n	7a80 <RADIO_GetAttr+0x14>
			*(uint8_t *)value = radioConfiguration.iqInverted;
    7ac2:	2325      	movs	r3, #37	; 0x25
    7ac4:	4a38      	ldr	r2, [pc, #224]	; (7ba8 <RADIO_GetAttr+0x13c>)
    7ac6:	5cd3      	ldrb	r3, [r2, r3]
    7ac8:	700b      	strb	r3, [r1, #0]
	return ERR_NONE;
    7aca:	2000      	movs	r0, #0
		break;
    7acc:	e7d8      	b.n	7a80 <RADIO_GetAttr+0x14>
			*(RadioLoRaBandWidth_t *)value = radioConfiguration.bandWidth;
    7ace:	2336      	movs	r3, #54	; 0x36
    7ad0:	4a35      	ldr	r2, [pc, #212]	; (7ba8 <RADIO_GetAttr+0x13c>)
    7ad2:	5cd3      	ldrb	r3, [r2, r3]
    7ad4:	700b      	strb	r3, [r1, #0]
	return ERR_NONE;
    7ad6:	2000      	movs	r0, #0
		break;
    7ad8:	e7d2      	b.n	7a80 <RADIO_GetAttr+0x14>
			*(uint8_t *)value = radioConfiguration.paBoost;
    7ada:	2324      	movs	r3, #36	; 0x24
    7adc:	4a32      	ldr	r2, [pc, #200]	; (7ba8 <RADIO_GetAttr+0x13c>)
    7ade:	5cd3      	ldrb	r3, [r2, r3]
    7ae0:	700b      	strb	r3, [r1, #0]
	return ERR_NONE;
    7ae2:	2000      	movs	r0, #0
		break;
    7ae4:	e7cc      	b.n	7a80 <RADIO_GetAttr+0x14>
			*(RadioModulation_t *)value = radioConfiguration.modulation;
    7ae6:	2334      	movs	r3, #52	; 0x34
    7ae8:	4a2f      	ldr	r2, [pc, #188]	; (7ba8 <RADIO_GetAttr+0x13c>)
    7aea:	5cd3      	ldrb	r3, [r2, r3]
    7aec:	700b      	strb	r3, [r1, #0]
	return ERR_NONE;
    7aee:	2000      	movs	r0, #0
		break;
    7af0:	e7c6      	b.n	7a80 <RADIO_GetAttr+0x14>
			*(uint16_t *)value = radioConfiguration.frequencyHopPeriod;
    7af2:	4b2d      	ldr	r3, [pc, #180]	; (7ba8 <RADIO_GetAttr+0x13c>)
    7af4:	8adb      	ldrh	r3, [r3, #22]
    7af6:	800b      	strh	r3, [r1, #0]
	return ERR_NONE;
    7af8:	2000      	movs	r0, #0
		break;
    7afa:	e7c1      	b.n	7a80 <RADIO_GetAttr+0x14>
			*(RadioErrorCodingRate_t *)value = radioConfiguration.errorCodingRate;
    7afc:	2333      	movs	r3, #51	; 0x33
    7afe:	4a2a      	ldr	r2, [pc, #168]	; (7ba8 <RADIO_GetAttr+0x13c>)
    7b00:	5cd3      	ldrb	r3, [r2, r3]
    7b02:	700b      	strb	r3, [r1, #0]
	return ERR_NONE;
    7b04:	2000      	movs	r0, #0
		break;
    7b06:	e7bb      	b.n	7a80 <RADIO_GetAttr+0x14>
			*(uint32_t *)value = radioConfiguration.watchdogTimerTimeout;
    7b08:	4b27      	ldr	r3, [pc, #156]	; (7ba8 <RADIO_GetAttr+0x13c>)
    7b0a:	68db      	ldr	r3, [r3, #12]
    7b0c:	600b      	str	r3, [r1, #0]
	return ERR_NONE;
    7b0e:	2000      	movs	r0, #0
		break;
    7b10:	e7b6      	b.n	7a80 <RADIO_GetAttr+0x14>
			*(uint32_t *)value = radioConfiguration.bitRate;
    7b12:	4b25      	ldr	r3, [pc, #148]	; (7ba8 <RADIO_GetAttr+0x13c>)
    7b14:	689b      	ldr	r3, [r3, #8]
    7b16:	600b      	str	r3, [r1, #0]
	return ERR_NONE;
    7b18:	2000      	movs	r0, #0
		break;
    7b1a:	e7b1      	b.n	7a80 <RADIO_GetAttr+0x14>
			*(RadioFSKShaping_t *)value = radioConfiguration.fskDataShaping;
    7b1c:	2337      	movs	r3, #55	; 0x37
    7b1e:	4a22      	ldr	r2, [pc, #136]	; (7ba8 <RADIO_GetAttr+0x13c>)
    7b20:	5cd3      	ldrb	r3, [r2, r3]
    7b22:	700b      	strb	r3, [r1, #0]
	return ERR_NONE;
    7b24:	2000      	movs	r0, #0
		break;
    7b26:	e7ab      	b.n	7a80 <RADIO_GetAttr+0x14>
			*(RadioFSKBandWidth_t *)value = radioConfiguration.rxBw;
    7b28:	2338      	movs	r3, #56	; 0x38
    7b2a:	4a1f      	ldr	r2, [pc, #124]	; (7ba8 <RADIO_GetAttr+0x13c>)
    7b2c:	5cd3      	ldrb	r3, [r2, r3]
    7b2e:	700b      	strb	r3, [r1, #0]
	return ERR_NONE;
    7b30:	2000      	movs	r0, #0
		break;
    7b32:	e7a5      	b.n	7a80 <RADIO_GetAttr+0x14>
			*(RadioFSKBandWidth_t *)value = radioConfiguration.afcBw;
    7b34:	2339      	movs	r3, #57	; 0x39
    7b36:	4a1c      	ldr	r2, [pc, #112]	; (7ba8 <RADIO_GetAttr+0x13c>)
    7b38:	5cd3      	ldrb	r3, [r2, r3]
    7b3a:	700b      	strb	r3, [r1, #0]
	return ERR_NONE;
    7b3c:	2000      	movs	r0, #0
		break;
    7b3e:	e79f      	b.n	7a80 <RADIO_GetAttr+0x14>
			memcpy((uint8_t *)value, radioConfiguration.syncWord, radioConfiguration.syncWordLen);
    7b40:	4919      	ldr	r1, [pc, #100]	; (7ba8 <RADIO_GetAttr+0x13c>)
    7b42:	2321      	movs	r3, #33	; 0x21
    7b44:	5cca      	ldrb	r2, [r1, r3]
    7b46:	3119      	adds	r1, #25
    7b48:	0020      	movs	r0, r4
    7b4a:	4b18      	ldr	r3, [pc, #96]	; (7bac <RADIO_GetAttr+0x140>)
    7b4c:	4798      	blx	r3
	return ERR_NONE;
    7b4e:	2000      	movs	r0, #0
		break;
    7b50:	e796      	b.n	7a80 <RADIO_GetAttr+0x14>
			*(uint8_t *)value = radioConfiguration.syncWordLen;
    7b52:	2321      	movs	r3, #33	; 0x21
    7b54:	4a14      	ldr	r2, [pc, #80]	; (7ba8 <RADIO_GetAttr+0x13c>)
    7b56:	5cd3      	ldrb	r3, [r2, r3]
    7b58:	700b      	strb	r3, [r1, #0]
	return ERR_NONE;
    7b5a:	2000      	movs	r0, #0
		break;
    7b5c:	e790      	b.n	7a80 <RADIO_GetAttr+0x14>
			*(int8_t *)value = radioConfiguration.packetSNR;
    7b5e:	2332      	movs	r3, #50	; 0x32
    7b60:	4a11      	ldr	r2, [pc, #68]	; (7ba8 <RADIO_GetAttr+0x13c>)
    7b62:	56d3      	ldrsb	r3, [r2, r3]
    7b64:	700b      	strb	r3, [r1, #0]
	return ERR_NONE;
    7b66:	2000      	movs	r0, #0
		break;
    7b68:	e78a      	b.n	7a80 <RADIO_GetAttr+0x14>
			*(RadioDataRate_t *)value = radioConfiguration.dataRate;
    7b6a:	2335      	movs	r3, #53	; 0x35
    7b6c:	4a0e      	ldr	r2, [pc, #56]	; (7ba8 <RADIO_GetAttr+0x13c>)
    7b6e:	5cd3      	ldrb	r3, [r2, r3]
    7b70:	700b      	strb	r3, [r1, #0]
	return ERR_NONE;
    7b72:	2000      	movs	r0, #0
		break;
    7b74:	e784      	b.n	7a80 <RADIO_GetAttr+0x14>
			*(RadioLBTParams_t *)value = radioConfiguration.lbt.params;
    7b76:	2206      	movs	r2, #6
    7b78:	490b      	ldr	r1, [pc, #44]	; (7ba8 <RADIO_GetAttr+0x13c>)
    7b7a:	313c      	adds	r1, #60	; 0x3c
    7b7c:	0020      	movs	r0, r4
    7b7e:	4b0b      	ldr	r3, [pc, #44]	; (7bac <RADIO_GetAttr+0x140>)
    7b80:	4798      	blx	r3
	return ERR_NONE;
    7b82:	2000      	movs	r0, #0
		break;
    7b84:	e77c      	b.n	7a80 <RADIO_GetAttr+0x14>
			*(uint8_t *)value = radioConfiguration.clockStabilizationDelay;
    7b86:	2354      	movs	r3, #84	; 0x54
    7b88:	4a07      	ldr	r2, [pc, #28]	; (7ba8 <RADIO_GetAttr+0x13c>)
    7b8a:	5cd3      	ldrb	r3, [r2, r3]
    7b8c:	700b      	strb	r3, [r1, #0]
	return ERR_NONE;
    7b8e:	2000      	movs	r0, #0
		break;
    7b90:	e776      	b.n	7a80 <RADIO_GetAttr+0x14>
	 		*(int16_t *)value = radioConfiguration.packetRSSI;
    7b92:	2356      	movs	r3, #86	; 0x56
    7b94:	4a04      	ldr	r2, [pc, #16]	; (7ba8 <RADIO_GetAttr+0x13c>)
    7b96:	5ed3      	ldrsh	r3, [r2, r3]
    7b98:	800b      	strh	r3, [r1, #0]
	return ERR_NONE;
    7b9a:	2000      	movs	r0, #0
		break;
    7b9c:	e770      	b.n	7a80 <RADIO_GetAttr+0x14>
		return ERR_OUT_OF_RANGE;
    7b9e:	2005      	movs	r0, #5
    7ba0:	e76e      	b.n	7a80 <RADIO_GetAttr+0x14>
    7ba2:	46c0      	nop			; (mov r8, r8)
    7ba4:	00019e84 	.word	0x00019e84
    7ba8:	20003ba8 	.word	0x20003ba8
    7bac:	0001835b 	.word	0x0001835b

00007bb0 <RADIO_SetAttr>:
\param attribute - The attribute to set.
\param value     - The pointer that is used to set the value.
\return          - The error condition for setting a given attribute.
*************************************************************************/
RadioError_t RADIO_SetAttr(RadioAttribute_t attribute, void *value)
{
    7bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    7bb2:	46c6      	mov	lr, r8
    7bb4:	b500      	push	{lr}
    7bb6:	0004      	movs	r4, r0
    7bb8:	000d      	movs	r5, r1
	if (!(RADIO_STATE_IDLE == RADIO_GetState()))
    7bba:	4b7b      	ldr	r3, [pc, #492]	; (7da8 <RADIO_SetAttr+0x1f8>)
    7bbc:	4798      	blx	r3
	{
		return ERR_RADIO_BUSY;
    7bbe:	2304      	movs	r3, #4
	if (!(RADIO_STATE_IDLE == RADIO_GetState()))
    7bc0:	2801      	cmp	r0, #1
    7bc2:	d003      	beq.n	7bcc <RADIO_SetAttr+0x1c>
			return ERR_OUT_OF_RANGE;
		}
	}

	return ERR_NONE;
}
    7bc4:	0018      	movs	r0, r3
    7bc6:	bc04      	pop	{r2}
    7bc8:	4690      	mov	r8, r2
    7bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (attribute)
    7bcc:	2c1d      	cmp	r4, #29
    7bce:	d900      	bls.n	7bd2 <RADIO_SetAttr+0x22>
    7bd0:	e0e5      	b.n	7d9e <RADIO_SetAttr+0x1ee>
    7bd2:	00a4      	lsls	r4, r4, #2
    7bd4:	4b75      	ldr	r3, [pc, #468]	; (7dac <RADIO_SetAttr+0x1fc>)
    7bd6:	591b      	ldr	r3, [r3, r4]
    7bd8:	469f      	mov	pc, r3
			if (value)
    7bda:	2d00      	cmp	r5, #0
    7bdc:	d100      	bne.n	7be0 <RADIO_SetAttr+0x30>
    7bde:	e0e0      	b.n	7da2 <RADIO_SetAttr+0x1f2>
				radioConfiguration.radioCallback = (RadioCallback_t)value;
    7be0:	4b73      	ldr	r3, [pc, #460]	; (7db0 <RADIO_SetAttr+0x200>)
    7be2:	611d      	str	r5, [r3, #16]
	return ERR_NONE;
    7be4:	2300      	movs	r3, #0
		break;
    7be6:	e7ed      	b.n	7bc4 <RADIO_SetAttr+0x14>
			RadioLBTParams_t params = *(RadioLBTParams_t *)value;
    7be8:	796c      	ldrb	r4, [r5, #5]
			if (false == params.lbtTransmitOn)
    7bea:	2c00      	cmp	r4, #0
    7bec:	d01e      	beq.n	7c2c <RADIO_SetAttr+0x7c>
			RadioLBTParams_t params = *(RadioLBTParams_t *)value;
    7bee:	882e      	ldrh	r6, [r5, #0]
    7bf0:	2303      	movs	r3, #3
				if (0 == params.lbtScanPeriod)
    7bf2:	2e00      	cmp	r6, #0
    7bf4:	d0e6      	beq.n	7bc4 <RADIO_SetAttr+0x14>
			RadioLBTParams_t params = *(RadioLBTParams_t *)value;
    7bf6:	792f      	ldrb	r7, [r5, #4]
				else if (0 == params.lbtNumOfSamples)
    7bf8:	2f00      	cmp	r7, #0
    7bfa:	d0e3      	beq.n	7bc4 <RADIO_SetAttr+0x14>
			RadioLBTParams_t params = *(RadioLBTParams_t *)value;
    7bfc:	2202      	movs	r2, #2
    7bfe:	5eab      	ldrsh	r3, [r5, r2]
    7c00:	4698      	mov	r8, r3
					radioConfiguration.lbt.lbtScanTimeout = (uint32_t)localScanTimeout;
    7c02:	4d6b      	ldr	r5, [pc, #428]	; (7db0 <RADIO_SetAttr+0x200>)
					float localScanTimeout = (MS_TO_US((params.lbtScanPeriod))/params.lbtNumOfSamples);
    7c04:	20fa      	movs	r0, #250	; 0xfa
    7c06:	0080      	lsls	r0, r0, #2
    7c08:	4370      	muls	r0, r6
    7c0a:	0039      	movs	r1, r7
    7c0c:	4b69      	ldr	r3, [pc, #420]	; (7db4 <RADIO_SetAttr+0x204>)
    7c0e:	4798      	blx	r3
    7c10:	4b69      	ldr	r3, [pc, #420]	; (7db8 <RADIO_SetAttr+0x208>)
    7c12:	4798      	blx	r3
					radioConfiguration.lbt.lbtScanTimeout = (uint32_t)localScanTimeout;
    7c14:	4b69      	ldr	r3, [pc, #420]	; (7dbc <RADIO_SetAttr+0x20c>)
    7c16:	4798      	blx	r3
    7c18:	64a8      	str	r0, [r5, #72]	; 0x48
					radioConfiguration.lbt.params = params;
    7c1a:	87ae      	strh	r6, [r5, #60]	; 0x3c
    7c1c:	4643      	mov	r3, r8
    7c1e:	87eb      	strh	r3, [r5, #62]	; 0x3e
    7c20:	2340      	movs	r3, #64	; 0x40
    7c22:	54ef      	strb	r7, [r5, r3]
    7c24:	3301      	adds	r3, #1
    7c26:	54ec      	strb	r4, [r5, r3]
	return ERR_NONE;
    7c28:	2300      	movs	r3, #0
    7c2a:	e7cb      	b.n	7bc4 <RADIO_SetAttr+0x14>
				radioConfiguration.lbt.lbtScanTimeout = 0;
    7c2c:	4b60      	ldr	r3, [pc, #384]	; (7db0 <RADIO_SetAttr+0x200>)
    7c2e:	2200      	movs	r2, #0
    7c30:	649a      	str	r2, [r3, #72]	; 0x48
				radioConfiguration.lbt.params = local;
    7c32:	879a      	strh	r2, [r3, #60]	; 0x3c
    7c34:	87da      	strh	r2, [r3, #62]	; 0x3e
    7c36:	3240      	adds	r2, #64	; 0x40
    7c38:	2100      	movs	r1, #0
    7c3a:	5499      	strb	r1, [r3, r2]
    7c3c:	3201      	adds	r2, #1
    7c3e:	549c      	strb	r4, [r3, r2]
	return ERR_NONE;
    7c40:	2300      	movs	r3, #0
    7c42:	e7bf      	b.n	7bc4 <RADIO_SetAttr+0x14>
			radioConfiguration.syncWordLoRa = *(uint8_t *)value;
    7c44:	782a      	ldrb	r2, [r5, #0]
    7c46:	4b5a      	ldr	r3, [pc, #360]	; (7db0 <RADIO_SetAttr+0x200>)
    7c48:	761a      	strb	r2, [r3, #24]
	return ERR_NONE;
    7c4a:	2300      	movs	r3, #0
		break;
    7c4c:	e7ba      	b.n	7bc4 <RADIO_SetAttr+0x14>
			freq = *(uint32_t *)value;
    7c4e:	682a      	ldr	r2, [r5, #0]
			if ( ((freq >= FREQ_137000KHZ) && (freq <= FREQ_175000KHZ)) ||
    7c50:	4b5b      	ldr	r3, [pc, #364]	; (7dc0 <RADIO_SetAttr+0x210>)
    7c52:	18d1      	adds	r1, r2, r3
    7c54:	4b5b      	ldr	r3, [pc, #364]	; (7dc4 <RADIO_SetAttr+0x214>)
    7c56:	4299      	cmp	r1, r3
    7c58:	d90a      	bls.n	7c70 <RADIO_SetAttr+0xc0>
    7c5a:	495b      	ldr	r1, [pc, #364]	; (7dc8 <RADIO_SetAttr+0x218>)
    7c5c:	4b5b      	ldr	r3, [pc, #364]	; (7dcc <RADIO_SetAttr+0x21c>)
    7c5e:	18d3      	adds	r3, r2, r3
    7c60:	428b      	cmp	r3, r1
    7c62:	d905      	bls.n	7c70 <RADIO_SetAttr+0xc0>
			((freq >= FREQ_410000KHZ) && (freq <= FREQ_525000KHZ)) ||
    7c64:	485a      	ldr	r0, [pc, #360]	; (7dd0 <RADIO_SetAttr+0x220>)
				return ERR_OUT_OF_RANGE;
    7c66:	2305      	movs	r3, #5
			((freq >= FREQ_410000KHZ) && (freq <= FREQ_525000KHZ)) ||
    7c68:	495a      	ldr	r1, [pc, #360]	; (7dd4 <RADIO_SetAttr+0x224>)
    7c6a:	1851      	adds	r1, r2, r1
    7c6c:	4281      	cmp	r1, r0
    7c6e:	d8a9      	bhi.n	7bc4 <RADIO_SetAttr+0x14>
				radioConfiguration.frequency = freq;
    7c70:	4b4f      	ldr	r3, [pc, #316]	; (7db0 <RADIO_SetAttr+0x200>)
    7c72:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    7c74:	2300      	movs	r3, #0
		break;
    7c76:	e7a5      	b.n	7bc4 <RADIO_SetAttr+0x14>
			radioConfiguration.frequencyDeviation = *(uint32_t *)value;
    7c78:	682a      	ldr	r2, [r5, #0]
    7c7a:	4b4d      	ldr	r3, [pc, #308]	; (7db0 <RADIO_SetAttr+0x200>)
    7c7c:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    7c7e:	2300      	movs	r3, #0
		break;
    7c80:	e7a0      	b.n	7bc4 <RADIO_SetAttr+0x14>
			radioConfiguration.preambleLen = *(uint16_t *)value;
    7c82:	882a      	ldrh	r2, [r5, #0]
    7c84:	4b4a      	ldr	r3, [pc, #296]	; (7db0 <RADIO_SetAttr+0x200>)
    7c86:	829a      	strh	r2, [r3, #20]
	return ERR_NONE;
    7c88:	2300      	movs	r3, #0
		break;
    7c8a:	e79b      	b.n	7bc4 <RADIO_SetAttr+0x14>
			radioConfiguration.outputPower = *(uint8_t *)value;
    7c8c:	7829      	ldrb	r1, [r5, #0]
    7c8e:	2322      	movs	r3, #34	; 0x22
    7c90:	4a47      	ldr	r2, [pc, #284]	; (7db0 <RADIO_SetAttr+0x200>)
    7c92:	54d1      	strb	r1, [r2, r3]
	return ERR_NONE;
    7c94:	2300      	movs	r3, #0
		break;
    7c96:	e795      	b.n	7bc4 <RADIO_SetAttr+0x14>
			crcOn = *(uint8_t *)value;
    7c98:	782a      	ldrb	r2, [r5, #0]
				return ERR_OUT_OF_RANGE;
    7c9a:	2305      	movs	r3, #5
			if((crcOn != ENABLED) && (crcOn != DISABLED))
    7c9c:	2a01      	cmp	r2, #1
    7c9e:	d900      	bls.n	7ca2 <RADIO_SetAttr+0xf2>
    7ca0:	e790      	b.n	7bc4 <RADIO_SetAttr+0x14>
			radioConfiguration.crcOn = crcOn;
    7ca2:	331e      	adds	r3, #30
    7ca4:	4942      	ldr	r1, [pc, #264]	; (7db0 <RADIO_SetAttr+0x200>)
    7ca6:	54ca      	strb	r2, [r1, r3]
	return ERR_NONE;
    7ca8:	2300      	movs	r3, #0
		break;
    7caa:	e78b      	b.n	7bc4 <RADIO_SetAttr+0x14>
			iqInv = *(uint8_t *)value;
    7cac:	782a      	ldrb	r2, [r5, #0]
				return ERR_OUT_OF_RANGE;
    7cae:	2305      	movs	r3, #5
			if((iqInv != ENABLED) && (iqInv != DISABLED))
    7cb0:	2a01      	cmp	r2, #1
    7cb2:	d900      	bls.n	7cb6 <RADIO_SetAttr+0x106>
    7cb4:	e786      	b.n	7bc4 <RADIO_SetAttr+0x14>
			radioConfiguration.iqInverted =  iqInv;
    7cb6:	3320      	adds	r3, #32
    7cb8:	493d      	ldr	r1, [pc, #244]	; (7db0 <RADIO_SetAttr+0x200>)
    7cba:	54ca      	strb	r2, [r1, r3]
	return ERR_NONE;
    7cbc:	2300      	movs	r3, #0
		break;
    7cbe:	e781      	b.n	7bc4 <RADIO_SetAttr+0x14>
			bw = *(RadioLoRaBandWidth_t *)value;
    7cc0:	782a      	ldrb	r2, [r5, #0]
			if((bw < BW_125KHZ) || (bw > BW_500KHZ))
    7cc2:	1fd1      	subs	r1, r2, #7
				return ERR_OUT_OF_RANGE;
    7cc4:	2305      	movs	r3, #5
			if((bw < BW_125KHZ) || (bw > BW_500KHZ))
    7cc6:	2902      	cmp	r1, #2
    7cc8:	d900      	bls.n	7ccc <RADIO_SetAttr+0x11c>
    7cca:	e77b      	b.n	7bc4 <RADIO_SetAttr+0x14>
			radioConfiguration.bandWidth =  bw;
    7ccc:	3331      	adds	r3, #49	; 0x31
    7cce:	4938      	ldr	r1, [pc, #224]	; (7db0 <RADIO_SetAttr+0x200>)
    7cd0:	54ca      	strb	r2, [r1, r3]
	return ERR_NONE;
    7cd2:	2300      	movs	r3, #0
		break;
    7cd4:	e776      	b.n	7bc4 <RADIO_SetAttr+0x14>
			radioConfiguration.paBoost = *(uint8_t *)value;
    7cd6:	7829      	ldrb	r1, [r5, #0]
    7cd8:	2324      	movs	r3, #36	; 0x24
    7cda:	4a35      	ldr	r2, [pc, #212]	; (7db0 <RADIO_SetAttr+0x200>)
    7cdc:	54d1      	strb	r1, [r2, r3]
	return ERR_NONE;
    7cde:	2300      	movs	r3, #0
		break;
    7ce0:	e770      	b.n	7bc4 <RADIO_SetAttr+0x14>
			mod =  *(RadioModulation_t *)value;
    7ce2:	782a      	ldrb	r2, [r5, #0]
				return ERR_OUT_OF_RANGE;
    7ce4:	2305      	movs	r3, #5
			if((mod > MODULATION_LORA))
    7ce6:	2a01      	cmp	r2, #1
    7ce8:	d900      	bls.n	7cec <RADIO_SetAttr+0x13c>
    7cea:	e76b      	b.n	7bc4 <RADIO_SetAttr+0x14>
			radioConfiguration.modulation = mod;
    7cec:	332f      	adds	r3, #47	; 0x2f
    7cee:	4930      	ldr	r1, [pc, #192]	; (7db0 <RADIO_SetAttr+0x200>)
    7cf0:	54ca      	strb	r2, [r1, r3]
	return ERR_NONE;
    7cf2:	2300      	movs	r3, #0
		break;
    7cf4:	e766      	b.n	7bc4 <RADIO_SetAttr+0x14>
			radioConfiguration.frequencyHopPeriod = *(uint16_t *)value;
    7cf6:	882a      	ldrh	r2, [r5, #0]
    7cf8:	4b2d      	ldr	r3, [pc, #180]	; (7db0 <RADIO_SetAttr+0x200>)
    7cfa:	82da      	strh	r2, [r3, #22]
	return ERR_NONE;
    7cfc:	2300      	movs	r3, #0
		break;
    7cfe:	e761      	b.n	7bc4 <RADIO_SetAttr+0x14>
			ecr =  *(RadioErrorCodingRate_t *)value;
    7d00:	782a      	ldrb	r2, [r5, #0]
			if((ecr < CR_4_5) || (ecr > CR_4_8))
    7d02:	1e51      	subs	r1, r2, #1
				return ERR_OUT_OF_RANGE;
    7d04:	2305      	movs	r3, #5
			if((ecr < CR_4_5) || (ecr > CR_4_8))
    7d06:	2903      	cmp	r1, #3
    7d08:	d900      	bls.n	7d0c <RADIO_SetAttr+0x15c>
    7d0a:	e75b      	b.n	7bc4 <RADIO_SetAttr+0x14>
			radioConfiguration.errorCodingRate = ecr;
    7d0c:	332e      	adds	r3, #46	; 0x2e
    7d0e:	4928      	ldr	r1, [pc, #160]	; (7db0 <RADIO_SetAttr+0x200>)
    7d10:	54ca      	strb	r2, [r1, r3]
	return ERR_NONE;
    7d12:	2300      	movs	r3, #0
		break;
    7d14:	e756      	b.n	7bc4 <RADIO_SetAttr+0x14>
			radioConfiguration.watchdogTimerTimeout = *(uint32_t *)value;
    7d16:	4b26      	ldr	r3, [pc, #152]	; (7db0 <RADIO_SetAttr+0x200>)
    7d18:	682a      	ldr	r2, [r5, #0]
    7d1a:	60da      	str	r2, [r3, #12]
			radioConfiguration.bitRate = *(uint32_t *)value;
    7d1c:	682a      	ldr	r2, [r5, #0]
    7d1e:	4b24      	ldr	r3, [pc, #144]	; (7db0 <RADIO_SetAttr+0x200>)
    7d20:	609a      	str	r2, [r3, #8]
	return ERR_NONE;
    7d22:	2300      	movs	r3, #0
		break;
    7d24:	e74e      	b.n	7bc4 <RADIO_SetAttr+0x14>
			dataShaping =  *(RadioFSKShaping_t *)value;
    7d26:	782a      	ldrb	r2, [r5, #0]
				return ERR_OUT_OF_RANGE;
    7d28:	2305      	movs	r3, #5
			if((dataShaping > FSK_SHAPING_GAUSS_BT_0_3))
    7d2a:	2a03      	cmp	r2, #3
    7d2c:	d900      	bls.n	7d30 <RADIO_SetAttr+0x180>
    7d2e:	e749      	b.n	7bc4 <RADIO_SetAttr+0x14>
			radioConfiguration.fskDataShaping = dataShaping;
    7d30:	3332      	adds	r3, #50	; 0x32
    7d32:	491f      	ldr	r1, [pc, #124]	; (7db0 <RADIO_SetAttr+0x200>)
    7d34:	54ca      	strb	r2, [r1, r3]
	return ERR_NONE;
    7d36:	2300      	movs	r3, #0
		break;
    7d38:	e744      	b.n	7bc4 <RADIO_SetAttr+0x14>
			bw = *(RadioFSKBandWidth_t *)value;
    7d3a:	782a      	ldrb	r2, [r5, #0]
			if((bw < FSKBW_250_0KHZ)||(bw > FSKBW_2_6KHZ))
    7d3c:	1e51      	subs	r1, r2, #1
				return ERR_OUT_OF_RANGE;
    7d3e:	2305      	movs	r3, #5
			if((bw < FSKBW_250_0KHZ)||(bw > FSKBW_2_6KHZ))
    7d40:	2916      	cmp	r1, #22
    7d42:	d900      	bls.n	7d46 <RADIO_SetAttr+0x196>
    7d44:	e73e      	b.n	7bc4 <RADIO_SetAttr+0x14>
			radioConfiguration.rxBw = bw;
    7d46:	3333      	adds	r3, #51	; 0x33
    7d48:	4919      	ldr	r1, [pc, #100]	; (7db0 <RADIO_SetAttr+0x200>)
    7d4a:	54ca      	strb	r2, [r1, r3]
	return ERR_NONE;
    7d4c:	2300      	movs	r3, #0
		break;
    7d4e:	e739      	b.n	7bc4 <RADIO_SetAttr+0x14>
			bw = *(RadioFSKBandWidth_t *)value;
    7d50:	782a      	ldrb	r2, [r5, #0]
			if((bw < FSKBW_250_0KHZ)||(bw > FSKBW_2_6KHZ))
    7d52:	1e51      	subs	r1, r2, #1
				return ERR_OUT_OF_RANGE;
    7d54:	2305      	movs	r3, #5
			if((bw < FSKBW_250_0KHZ)||(bw > FSKBW_2_6KHZ))
    7d56:	2916      	cmp	r1, #22
    7d58:	d900      	bls.n	7d5c <RADIO_SetAttr+0x1ac>
    7d5a:	e733      	b.n	7bc4 <RADIO_SetAttr+0x14>
			radioConfiguration.afcBw = bw;
    7d5c:	3334      	adds	r3, #52	; 0x34
    7d5e:	4914      	ldr	r1, [pc, #80]	; (7db0 <RADIO_SetAttr+0x200>)
    7d60:	54ca      	strb	r2, [r1, r3]
	return ERR_NONE;
    7d62:	2300      	movs	r3, #0
		break;
    7d64:	e72e      	b.n	7bc4 <RADIO_SetAttr+0x14>
			memcpy(radioConfiguration.syncWord,(uint8_t *)value, radioConfiguration.syncWordLen);
    7d66:	481c      	ldr	r0, [pc, #112]	; (7dd8 <RADIO_SetAttr+0x228>)
    7d68:	7a02      	ldrb	r2, [r0, #8]
    7d6a:	0029      	movs	r1, r5
    7d6c:	4b1b      	ldr	r3, [pc, #108]	; (7ddc <RADIO_SetAttr+0x22c>)
    7d6e:	4798      	blx	r3
	return ERR_NONE;
    7d70:	2300      	movs	r3, #0
		break;
    7d72:	e727      	b.n	7bc4 <RADIO_SetAttr+0x14>
			syncWordLen = *(uint8_t *)value;
    7d74:	782b      	ldrb	r3, [r5, #0]
			radioConfiguration.syncWordLen = syncWordLen;
    7d76:	1c1a      	adds	r2, r3, #0
    7d78:	2b08      	cmp	r3, #8
    7d7a:	d900      	bls.n	7d7e <RADIO_SetAttr+0x1ce>
    7d7c:	2208      	movs	r2, #8
    7d7e:	2321      	movs	r3, #33	; 0x21
    7d80:	490b      	ldr	r1, [pc, #44]	; (7db0 <RADIO_SetAttr+0x200>)
    7d82:	54ca      	strb	r2, [r1, r3]
	return ERR_NONE;
    7d84:	2300      	movs	r3, #0
		break;
    7d86:	e71d      	b.n	7bc4 <RADIO_SetAttr+0x14>
			sf = *(RadioDataRate_t *)value;
    7d88:	782a      	ldrb	r2, [r5, #0]
			if((sf < SF_7)||(sf > SF_12))
    7d8a:	1fd1      	subs	r1, r2, #7
				return ERR_OUT_OF_RANGE;
    7d8c:	2305      	movs	r3, #5
			if((sf < SF_7)||(sf > SF_12))
    7d8e:	2905      	cmp	r1, #5
    7d90:	d900      	bls.n	7d94 <RADIO_SetAttr+0x1e4>
    7d92:	e717      	b.n	7bc4 <RADIO_SetAttr+0x14>
			radioConfiguration.dataRate = sf;
    7d94:	3330      	adds	r3, #48	; 0x30
    7d96:	4906      	ldr	r1, [pc, #24]	; (7db0 <RADIO_SetAttr+0x200>)
    7d98:	54ca      	strb	r2, [r1, r3]
	return ERR_NONE;
    7d9a:	2300      	movs	r3, #0
		break;
    7d9c:	e712      	b.n	7bc4 <RADIO_SetAttr+0x14>
			return ERR_OUT_OF_RANGE;
    7d9e:	2305      	movs	r3, #5
    7da0:	e710      	b.n	7bc4 <RADIO_SetAttr+0x14>
				return ERR_INVALID_REQ;
    7da2:	2303      	movs	r3, #3
    7da4:	e70e      	b.n	7bc4 <RADIO_SetAttr+0x14>
    7da6:	46c0      	nop			; (mov r8, r8)
    7da8:	0000877d 	.word	0x0000877d
    7dac:	00019f04 	.word	0x00019f04
    7db0:	20003ba8 	.word	0x20003ba8
    7db4:	0001520d 	.word	0x0001520d
    7db8:	00016451 	.word	0x00016451
    7dbc:	00015569 	.word	0x00015569
    7dc0:	f7d58bc0 	.word	0xf7d58bc0
    7dc4:	0243d580 	.word	0x0243d580
    7dc8:	06dac2c0 	.word	0x06dac2c0
    7dcc:	e78fe580 	.word	0xe78fe580
    7dd0:	096ae380 	.word	0x096ae380
    7dd4:	cc9eec80 	.word	0xcc9eec80
    7dd8:	20003bc1 	.word	0x20003bc1
    7ddc:	0001835b 	.word	0x0001835b

00007de0 <RADIO_Init>:

/*********************************************************************//**
\brief The Radio Init initializes the transceiver
*************************************************************************/
void RADIO_Init(void)
{
    7de0:	b510      	push	{r4, lr}
    RADIO_InitDefaultAttributes();
    7de2:	4b0c      	ldr	r3, [pc, #48]	; (7e14 <RADIO_Init+0x34>)
    7de4:	4798      	blx	r3
    RADIO_SetCallbackBitmask(RADIO_DEFAULT_CALLBACK_MASK);
    7de6:	201f      	movs	r0, #31
    7de8:	4b0b      	ldr	r3, [pc, #44]	; (7e18 <RADIO_Init+0x38>)
    7dea:	4798      	blx	r3

    HAL_RegisterDioInterruptHandler(DIO0, RADIO_DIO0);
    7dec:	490b      	ldr	r1, [pc, #44]	; (7e1c <RADIO_Init+0x3c>)
    7dee:	2001      	movs	r0, #1
    7df0:	4c0b      	ldr	r4, [pc, #44]	; (7e20 <RADIO_Init+0x40>)
    7df2:	47a0      	blx	r4
    HAL_RegisterDioInterruptHandler(DIO1, RADIO_DIO1);
    7df4:	490b      	ldr	r1, [pc, #44]	; (7e24 <RADIO_Init+0x44>)
    7df6:	2002      	movs	r0, #2
    7df8:	47a0      	blx	r4
    HAL_RegisterDioInterruptHandler(DIO2, RADIO_DIO2);
    7dfa:	490b      	ldr	r1, [pc, #44]	; (7e28 <RADIO_Init+0x48>)
    7dfc:	2004      	movs	r0, #4
    7dfe:	47a0      	blx	r4
    HAL_RegisterDioInterruptHandler(DIO3, RADIO_DIO3);
    7e00:	490a      	ldr	r1, [pc, #40]	; (7e2c <RADIO_Init+0x4c>)
    7e02:	2008      	movs	r0, #8
    7e04:	47a0      	blx	r4
    HAL_RegisterDioInterruptHandler(DIO4, RADIO_DIO4);
    7e06:	490a      	ldr	r1, [pc, #40]	; (7e30 <RADIO_Init+0x50>)
    7e08:	2010      	movs	r0, #16
    7e0a:	47a0      	blx	r4
	HAL_RegisterDioInterruptHandler(DIO5, RADIO_DIO5);
    7e0c:	4909      	ldr	r1, [pc, #36]	; (7e34 <RADIO_Init+0x54>)
    7e0e:	2020      	movs	r0, #32
    7e10:	47a0      	blx	r4
	
}
    7e12:	bd10      	pop	{r4, pc}
    7e14:	00008f55 	.word	0x00008f55
    7e18:	00008789 	.word	0x00008789
    7e1c:	000082dd 	.word	0x000082dd
    7e20:	0000fe85 	.word	0x0000fe85
    7e24:	0000836d 	.word	0x0000836d
    7e28:	000083f5 	.word	0x000083f5
    7e2c:	0000845d 	.word	0x0000845d
    7e30:	0000848d 	.word	0x0000848d
    7e34:	000084bd 	.word	0x000084bd

00007e38 <Radio_WriteFrequency>:

\param frequency	- Sets the transmit radio frequency.
\return				- none.
*************************************************************************/
void Radio_WriteFrequency(uint32_t frequency)
{
    7e38:	b570      	push	{r4, r5, r6, lr}
    7e3a:	0006      	movs	r6, r0
    // We take advantage of the fact that 32MHz = 15625Hz * 2^11
    // This simplifies our formula to Frf = (15625Hz * num) / 2^8
    // Thus, num = (Frf * 2^8) / 15625Hz

    // First, do the division, since Frf * 2^8 does not fit in 32 bits
    num = frequency / 15625;
    7e3c:	4d0c      	ldr	r5, [pc, #48]	; (7e70 <Radio_WriteFrequency+0x38>)
    7e3e:	490d      	ldr	r1, [pc, #52]	; (7e74 <Radio_WriteFrequency+0x3c>)
    7e40:	47a8      	blx	r5
    7e42:	0004      	movs	r4, r0
    num_mod = frequency % 15625;
    7e44:	490b      	ldr	r1, [pc, #44]	; (7e74 <Radio_WriteFrequency+0x3c>)
    7e46:	0030      	movs	r0, r6
    7e48:	4b0b      	ldr	r3, [pc, #44]	; (7e78 <Radio_WriteFrequency+0x40>)
    7e4a:	4798      	blx	r3

    // Now do multiplication as well, both for the quotient as well as for
    // the remainder
    num <<= SHIFT8;
    7e4c:	0224      	lsls	r4, r4, #8
    num_mod <<= SHIFT8;
    7e4e:	0208      	lsls	r0, r1, #8

    // Try to correct for the remainder. After the multiplication we can still
    // recover some accuracy
    num_mod = num_mod / 15625;
    7e50:	4908      	ldr	r1, [pc, #32]	; (7e74 <Radio_WriteFrequency+0x3c>)
    7e52:	47a8      	blx	r5
    num += num_mod;
    7e54:	1904      	adds	r4, r0, r4

    // Now variable num holds the representation of the frequency that needs to
    // be loaded into the radio chip
    RADIO_RegisterWrite(REG_FRFMSB, (num >> SHIFT16) & 0xFF);
    7e56:	0c21      	lsrs	r1, r4, #16
    7e58:	b2c9      	uxtb	r1, r1
    7e5a:	2006      	movs	r0, #6
    7e5c:	4d07      	ldr	r5, [pc, #28]	; (7e7c <Radio_WriteFrequency+0x44>)
    7e5e:	47a8      	blx	r5
    RADIO_RegisterWrite(REG_FRFMID, (num >> SHIFT8) & 0xFF);
    7e60:	0a21      	lsrs	r1, r4, #8
    7e62:	b2c9      	uxtb	r1, r1
    7e64:	2007      	movs	r0, #7
    7e66:	47a8      	blx	r5
    RADIO_RegisterWrite(REG_FRFLSB, num & 0xFF);
    7e68:	b2e1      	uxtb	r1, r4
    7e6a:	2008      	movs	r0, #8
    7e6c:	47a8      	blx	r5
}
    7e6e:	bd70      	pop	{r4, r5, r6, pc}
    7e70:	000150f9 	.word	0x000150f9
    7e74:	00003d09 	.word	0x00003d09
    7e78:	00015205 	.word	0x00015205
    7e7c:	0000fd51 	.word	0x0000fd51

00007e80 <Radio_WriteConfiguration>:

\param symbolTimeout	- Sets the symbolTimeout parameter.
\return					- none.
*************************************************************************/
void Radio_WriteConfiguration(uint16_t symbolTimeout)
{
    7e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7e82:	0005      	movs	r5, r0
    uint32_t tempValue;
    uint8_t regValue;
    uint8_t i;

    // Load configuration from RadioConfiguration_t structure into radio
    Radio_WriteMode(MODE_SLEEP, radioConfiguration.modulation, 0);
    7e84:	4cd2      	ldr	r4, [pc, #840]	; (81d0 <Radio_WriteConfiguration+0x350>)
    7e86:	2334      	movs	r3, #52	; 0x34
    7e88:	5ce1      	ldrb	r1, [r4, r3]
    7e8a:	2200      	movs	r2, #0
    7e8c:	2000      	movs	r0, #0
    7e8e:	4bd1      	ldr	r3, [pc, #836]	; (81d4 <Radio_WriteConfiguration+0x354>)
    7e90:	4798      	blx	r3
    Radio_WriteFrequency(radioConfiguration.frequency);
    7e92:	6820      	ldr	r0, [r4, #0]
    7e94:	4bd0      	ldr	r3, [pc, #832]	; (81d8 <Radio_WriteConfiguration+0x358>)
    7e96:	4798      	blx	r3
    Radio_WritePower(radioConfiguration.outputPower);
    7e98:	2322      	movs	r3, #34	; 0x22
    7e9a:	56e3      	ldrsb	r3, [r4, r3]
    if (radioConfiguration.paBoost == 0)
    7e9c:	2224      	movs	r2, #36	; 0x24
    7e9e:	5ca2      	ldrb	r2, [r4, r2]
    7ea0:	2a00      	cmp	r2, #0
    7ea2:	d125      	bne.n	7ef0 <Radio_WriteConfiguration+0x70>
    7ea4:	1c1a      	adds	r2, r3, #0
    7ea6:	3303      	adds	r3, #3
    7ea8:	da01      	bge.n	7eae <Radio_WriteConfiguration+0x2e>
    7eaa:	4bcc      	ldr	r3, [pc, #816]	; (81dc <Radio_WriteConfiguration+0x35c>)
    7eac:	781a      	ldrb	r2, [r3, #0]
    7eae:	1c14      	adds	r4, r2, #0
    7eb0:	b252      	sxtb	r2, r2
    7eb2:	2a0f      	cmp	r2, #15
    7eb4:	dd00      	ble.n	7eb8 <Radio_WriteConfiguration+0x38>
    7eb6:	240f      	movs	r4, #15
    7eb8:	b266      	sxtb	r6, r4
        paDac = RADIO_RegisterRead(REG_PADAC);
    7eba:	204d      	movs	r0, #77	; 0x4d
    7ebc:	4bc8      	ldr	r3, [pc, #800]	; (81e0 <Radio_WriteConfiguration+0x360>)
    7ebe:	4798      	blx	r3
        paDac &= ~(0x07);
    7ec0:	21f8      	movs	r1, #248	; 0xf8
    7ec2:	4001      	ands	r1, r0
        paDac |= 0x04;
    7ec4:	2004      	movs	r0, #4
        RADIO_RegisterWrite(REG_PADAC, paDac);
    7ec6:	4301      	orrs	r1, r0
    7ec8:	3049      	adds	r0, #73	; 0x49
    7eca:	4bc6      	ldr	r3, [pc, #792]	; (81e4 <Radio_WriteConfiguration+0x364>)
    7ecc:	4798      	blx	r3
        if (power < 0)
    7ece:	2e00      	cmp	r6, #0
    7ed0:	db06      	blt.n	7ee0 <Radio_WriteConfiguration+0x60>
            RADIO_RegisterWrite(REG_PACONFIG, 0x70 | power);
    7ed2:	2170      	movs	r1, #112	; 0x70
    7ed4:	4331      	orrs	r1, r6
    7ed6:	b2c9      	uxtb	r1, r1
    7ed8:	2009      	movs	r0, #9
    7eda:	4bc2      	ldr	r3, [pc, #776]	; (81e4 <Radio_WriteConfiguration+0x364>)
    7edc:	4798      	blx	r3
    7ede:	e02f      	b.n	7f40 <Radio_WriteConfiguration+0xc0>
            power += 3;
    7ee0:	3403      	adds	r4, #3
    7ee2:	b2e1      	uxtb	r1, r4
            RADIO_RegisterWrite(REG_PACONFIG, 0x20 | power);
    7ee4:	2420      	movs	r4, #32
    7ee6:	4321      	orrs	r1, r4
    7ee8:	2009      	movs	r0, #9
    7eea:	4bbe      	ldr	r3, [pc, #760]	; (81e4 <Radio_WriteConfiguration+0x364>)
    7eec:	4798      	blx	r3
    7eee:	e027      	b.n	7f40 <Radio_WriteConfiguration+0xc0>
    7ef0:	1c1c      	adds	r4, r3, #0
    7ef2:	2b01      	cmp	r3, #1
    7ef4:	dc00      	bgt.n	7ef8 <Radio_WriteConfiguration+0x78>
    7ef6:	e08e      	b.n	8016 <Radio_WriteConfiguration+0x196>
    7ef8:	b263      	sxtb	r3, r4
        if (power >= 20)
    7efa:	2b13      	cmp	r3, #19
    7efc:	dd00      	ble.n	7f00 <Radio_WriteConfiguration+0x80>
    7efe:	e1aa      	b.n	8256 <Radio_WriteConfiguration+0x3d6>
        ocp = RADIO_RegisterRead(REG_OCP);
    7f00:	200b      	movs	r0, #11
    7f02:	4fb7      	ldr	r7, [pc, #732]	; (81e0 <Radio_WriteConfiguration+0x360>)
    7f04:	47b8      	blx	r7
    7f06:	0006      	movs	r6, r0
        paDac = RADIO_RegisterRead(REG_PADAC);
    7f08:	204d      	movs	r0, #77	; 0x4d
    7f0a:	47b8      	blx	r7
        paDac &= ~(0x07);
    7f0c:	21f8      	movs	r1, #248	; 0xf8
    7f0e:	4001      	ands	r1, r0
            paDac |= 0x04;
    7f10:	2004      	movs	r0, #4
    7f12:	4301      	orrs	r1, r0
            power -= 2;
    7f14:	1c27      	adds	r7, r4, #0
    7f16:	b264      	sxtb	r4, r4
    7f18:	2c11      	cmp	r4, #17
    7f1a:	dd00      	ble.n	7f1e <Radio_WriteConfiguration+0x9e>
    7f1c:	2711      	movs	r7, #17
    7f1e:	3f02      	subs	r7, #2
    7f20:	b27f      	sxtb	r7, r7
            ocp |= 0x20;
    7f22:	2420      	movs	r4, #32
    7f24:	4334      	orrs	r4, r6
    7f26:	b2e4      	uxtb	r4, r4
        RADIO_RegisterWrite(REG_PADAC, paDac);
    7f28:	204d      	movs	r0, #77	; 0x4d
    7f2a:	4eae      	ldr	r6, [pc, #696]	; (81e4 <Radio_WriteConfiguration+0x364>)
    7f2c:	47b0      	blx	r6
        RADIO_RegisterWrite(REG_PACONFIG, 0x80 | power);
    7f2e:	2180      	movs	r1, #128	; 0x80
    7f30:	4249      	negs	r1, r1
    7f32:	4339      	orrs	r1, r7
    7f34:	b2c9      	uxtb	r1, r1
    7f36:	2009      	movs	r0, #9
    7f38:	47b0      	blx	r6
        RADIO_RegisterWrite(REG_OCP, ocp);
    7f3a:	0021      	movs	r1, r4
    7f3c:	200b      	movs	r0, #11
    7f3e:	47b0      	blx	r6

    if (MODULATION_LORA == radioConfiguration.modulation)
    7f40:	2334      	movs	r3, #52	; 0x34
    7f42:	4aa3      	ldr	r2, [pc, #652]	; (81d0 <Radio_WriteConfiguration+0x350>)
    7f44:	5cd3      	ldrb	r3, [r2, r3]
    7f46:	2b01      	cmp	r3, #1
    7f48:	d067      	beq.n	801a <Radio_WriteConfiguration+0x19a>
        RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 0xFF);
    }
    else
    {
        // FSK modulation
        Radio_WriteFSKFrequencyDeviation(radioConfiguration.frequencyDeviation);
    7f4a:	4da1      	ldr	r5, [pc, #644]	; (81d0 <Radio_WriteConfiguration+0x350>)
    num <<= SHIFT8;     // Multiply by 2^8
    7f4c:	686b      	ldr	r3, [r5, #4]
    7f4e:	0218      	lsls	r0, r3, #8
    num /= 15625;       // divide by 15625
    7f50:	4fa5      	ldr	r7, [pc, #660]	; (81e8 <Radio_WriteConfiguration+0x368>)
    7f52:	49a6      	ldr	r1, [pc, #664]	; (81ec <Radio_WriteConfiguration+0x36c>)
    7f54:	47b8      	blx	r7
    7f56:	0006      	movs	r6, r0
    RADIO_RegisterWrite(REG_FSK_FDEVMSB, (num >> SHIFT8) & 0xFF);
    7f58:	0a01      	lsrs	r1, r0, #8
    7f5a:	b2c9      	uxtb	r1, r1
    7f5c:	2004      	movs	r0, #4
    7f5e:	4ca1      	ldr	r4, [pc, #644]	; (81e4 <Radio_WriteConfiguration+0x364>)
    7f60:	47a0      	blx	r4
    RADIO_RegisterWrite(REG_FSK_FDEVLSB, num & 0xFF);
    7f62:	b2f1      	uxtb	r1, r6
    7f64:	2005      	movs	r0, #5
    7f66:	47a0      	blx	r4
    num /= bitRate;
    7f68:	68a9      	ldr	r1, [r5, #8]
    7f6a:	48a1      	ldr	r0, [pc, #644]	; (81f0 <Radio_WriteConfiguration+0x370>)
    7f6c:	47b8      	blx	r7
    7f6e:	0006      	movs	r6, r0
    RADIO_RegisterWrite(REG_FSK_BITRATEMSB, (num >> SHIFT8) & 0xFF);
    7f70:	0a01      	lsrs	r1, r0, #8
    7f72:	b2c9      	uxtb	r1, r1
    7f74:	2002      	movs	r0, #2
    7f76:	47a0      	blx	r4
    RADIO_RegisterWrite(REG_FSK_BITRATELSB, num & 0xFF);
    7f78:	b2f1      	uxtb	r1, r6
    7f7a:	2003      	movs	r0, #3
    7f7c:	47a0      	blx	r4
    RADIO_RegisterWrite(REG_FSK_BITRATEFRAC, 0x00);
    7f7e:	2100      	movs	r1, #0
    7f80:	205d      	movs	r0, #93	; 0x5d
    7f82:	47a0      	blx	r4
        Radio_WriteFSKBitRate(radioConfiguration.bitRate);

        RADIO_RegisterWrite(REG_FSK_PREAMBLEMSB, radioConfiguration.preambleLen >> SHIFT8);
    7f84:	8aa9      	ldrh	r1, [r5, #20]
    7f86:	0a09      	lsrs	r1, r1, #8
    7f88:	2025      	movs	r0, #37	; 0x25
    7f8a:	47a0      	blx	r4
        RADIO_RegisterWrite(REG_FSK_PREAMBLELSB, radioConfiguration.preambleLen & 0xFF);
    7f8c:	7d29      	ldrb	r1, [r5, #20]
    7f8e:	2026      	movs	r0, #38	; 0x26
    7f90:	47a0      	blx	r4
		
		// Triggering event: PreambleDetect does AfcAutoOn, AgcAutoOn
		// Also sets RestartRxOnCollision bit
		RADIO_RegisterWrite(REG_FSK_RXCONFIG, 0x9E);
    7f92:	219e      	movs	r1, #158	; 0x9e
    7f94:	200d      	movs	r0, #13
    7f96:	47a0      	blx	r4
		
		// Transmission starts as soon as there is a byte in the FIFO. FifoLevel
		// interrupt is generated whenever there are at least RADIO_RX_FIFO_LEVEL bytes in FIFO.
		RADIO_RegisterWrite(REG_FSK_FIFOTHRESH, (0x80 | RADIO_RX_FIFO_LEVEL));
    7f98:	21bf      	movs	r1, #191	; 0xbf
    7f9a:	2035      	movs	r0, #53	; 0x35
    7f9c:	47a0      	blx	r4

        // Configure PaRamp
        regValue = RADIO_RegisterRead(REG_PARAMP);
    7f9e:	200a      	movs	r0, #10
    7fa0:	4b8f      	ldr	r3, [pc, #572]	; (81e0 <Radio_WriteConfiguration+0x360>)
    7fa2:	4798      	blx	r3
        regValue &= ~0x60;    // Clear shaping bits
        regValue |= radioConfiguration.fskDataShaping << SHIFT5;
    7fa4:	2337      	movs	r3, #55	; 0x37
    7fa6:	5ce9      	ldrb	r1, [r5, r3]
    7fa8:	0149      	lsls	r1, r1, #5
        regValue &= ~0x60;    // Clear shaping bits
    7faa:	3329      	adds	r3, #41	; 0x29
    7fac:	4398      	bics	r0, r3
        regValue |= radioConfiguration.fskDataShaping << SHIFT5;
    7fae:	4301      	orrs	r1, r0
        RADIO_RegisterWrite(REG_PARAMP, regValue);
    7fb0:	b2c9      	uxtb	r1, r1
    7fb2:	200a      	movs	r0, #10
    7fb4:	47a0      	blx	r4

        // Variable length packets, whitening, Clear FIFO when CRC fails
        // no address filtering, CCITT CRC and whitening
        regValue = 0xC0;
        if (radioConfiguration.crcOn)
    7fb6:	2323      	movs	r3, #35	; 0x23
    7fb8:	5ceb      	ldrb	r3, [r5, r3]
        regValue = 0xC0;
    7fba:	21c0      	movs	r1, #192	; 0xc0
        if (radioConfiguration.crcOn)
    7fbc:	2b00      	cmp	r3, #0
    7fbe:	d000      	beq.n	7fc2 <Radio_WriteConfiguration+0x142>
        {
            regValue |= 0x10;   // Enable CRC
    7fc0:	3110      	adds	r1, #16
        }
        RADIO_RegisterWrite(REG_FSK_PACKETCONFIG1, regValue);
    7fc2:	2030      	movs	r0, #48	; 0x30
    7fc4:	4b87      	ldr	r3, [pc, #540]	; (81e4 <Radio_WriteConfiguration+0x364>)
    7fc6:	4798      	blx	r3

        // Syncword value
        for (i = 0; i < radioConfiguration.syncWordLen; i++)
    7fc8:	2321      	movs	r3, #33	; 0x21
    7fca:	4a81      	ldr	r2, [pc, #516]	; (81d0 <Radio_WriteConfiguration+0x350>)
    7fcc:	5cd3      	ldrb	r3, [r2, r3]
    7fce:	2b00      	cmp	r3, #0
    7fd0:	d100      	bne.n	7fd4 <Radio_WriteConfiguration+0x154>
    7fd2:	e13b      	b.n	824c <Radio_WriteConfiguration+0x3cc>
    7fd4:	2400      	movs	r4, #0
        {
            // Take advantage of the fact that the SYNCVALUE registers are
            // placed at sequential addresses
            RADIO_RegisterWrite(REG_FSK_SYNCVALUE1 + i, radioConfiguration.syncWord[i]);
    7fd6:	0015      	movs	r5, r2
    7fd8:	4f82      	ldr	r7, [pc, #520]	; (81e4 <Radio_WriteConfiguration+0x364>)
        for (i = 0; i < radioConfiguration.syncWordLen; i++)
    7fda:	2621      	movs	r6, #33	; 0x21
            RADIO_RegisterWrite(REG_FSK_SYNCVALUE1 + i, radioConfiguration.syncWord[i]);
    7fdc:	192b      	adds	r3, r5, r4
    7fde:	7e59      	ldrb	r1, [r3, #25]
    7fe0:	0020      	movs	r0, r4
    7fe2:	3028      	adds	r0, #40	; 0x28
    7fe4:	b2c0      	uxtb	r0, r0
    7fe6:	47b8      	blx	r7
        for (i = 0; i < radioConfiguration.syncWordLen; i++)
    7fe8:	3401      	adds	r4, #1
    7fea:	b2e4      	uxtb	r4, r4
    7fec:	5da9      	ldrb	r1, [r5, r6]
    7fee:	42a1      	cmp	r1, r4
    7ff0:	d8f4      	bhi.n	7fdc <Radio_WriteConfiguration+0x15c>
        }

        // Enable sync word generation/detection if needed, Syncword size = syncWordLen + 1 bytes
        if (radioConfiguration.syncWordLen != 0)
    7ff2:	2900      	cmp	r1, #0
    7ff4:	d100      	bne.n	7ff8 <Radio_WriteConfiguration+0x178>
    7ff6:	e129      	b.n	824c <Radio_WriteConfiguration+0x3cc>
        {
            RADIO_RegisterWrite(REG_FSK_SYNCCONFIG, 0x10 | (radioConfiguration.syncWordLen - 1));
    7ff8:	3901      	subs	r1, #1
    7ffa:	2310      	movs	r3, #16
    7ffc:	4319      	orrs	r1, r3
    7ffe:	b2c9      	uxtb	r1, r1
    8000:	2027      	movs	r0, #39	; 0x27
    8002:	4b78      	ldr	r3, [pc, #480]	; (81e4 <Radio_WriteConfiguration+0x364>)
    8004:	4798      	blx	r3
        {
            RADIO_RegisterWrite(REG_FSK_SYNCCONFIG, 0x00);
        }

        // Clear all FSK interrupts (just in case)
        RADIO_RegisterWrite(REG_FSK_IRQFLAGS1, 0xFF);
    8006:	21ff      	movs	r1, #255	; 0xff
    8008:	203e      	movs	r0, #62	; 0x3e
    800a:	4c76      	ldr	r4, [pc, #472]	; (81e4 <Radio_WriteConfiguration+0x364>)
    800c:	47a0      	blx	r4
        RADIO_RegisterWrite(REG_FSK_IRQFLAGS2, 0xFF);
    800e:	21ff      	movs	r1, #255	; 0xff
    8010:	203f      	movs	r0, #63	; 0x3f
    8012:	47a0      	blx	r4
    }
}
    8014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8016:	2402      	movs	r4, #2
    8018:	e76e      	b.n	7ef8 <Radio_WriteConfiguration+0x78>
        RADIO_RegisterWrite(0x39, radioConfiguration.syncWordLoRa);
    801a:	0014      	movs	r4, r2
    801c:	7e11      	ldrb	r1, [r2, #24]
    801e:	2039      	movs	r0, #57	; 0x39
    8020:	4e70      	ldr	r6, [pc, #448]	; (81e4 <Radio_WriteConfiguration+0x364>)
    8022:	47b0      	blx	r6
                            (radioConfiguration.bandWidth << SHIFT4) |
    8024:	2336      	movs	r3, #54	; 0x36
    8026:	5ce1      	ldrb	r1, [r4, r3]
    8028:	0109      	lsls	r1, r1, #4
                            (radioConfiguration.errorCodingRate << SHIFT1) |
    802a:	3b03      	subs	r3, #3
    802c:	5ce3      	ldrb	r3, [r4, r3]
    802e:	005b      	lsls	r3, r3, #1
                            (radioConfiguration.bandWidth << SHIFT4) |
    8030:	4319      	orrs	r1, r3
                            (radioConfiguration.implicitHeaderMode & 0x01));
    8032:	2326      	movs	r3, #38	; 0x26
    8034:	5ce2      	ldrb	r2, [r4, r3]
    8036:	3b25      	subs	r3, #37	; 0x25
    8038:	4013      	ands	r3, r2
                            (radioConfiguration.errorCodingRate << SHIFT1) |
    803a:	4319      	orrs	r1, r3
        RADIO_RegisterWrite(REG_LORA_MODEMCONFIG1,
    803c:	b2c9      	uxtb	r1, r1
    803e:	201d      	movs	r0, #29
    8040:	47b0      	blx	r6
                            ((radioConfiguration.crcOn & 0x01) << SHIFT2) |
    8042:	2323      	movs	r3, #35	; 0x23
    8044:	5ce3      	ldrb	r3, [r4, r3]
    8046:	009b      	lsls	r3, r3, #2
    8048:	2104      	movs	r1, #4
    804a:	4019      	ands	r1, r3
                            (radioConfiguration.dataRate << SHIFT4) |
    804c:	2335      	movs	r3, #53	; 0x35
    804e:	5ce3      	ldrb	r3, [r4, r3]
    8050:	011b      	lsls	r3, r3, #4
    8052:	4319      	orrs	r1, r3
                            ((symbolTimeout & 0x0300) >> SHIFT8));
    8054:	05ab      	lsls	r3, r5, #22
    8056:	0f9b      	lsrs	r3, r3, #30
                            ((radioConfiguration.crcOn & 0x01) << SHIFT2) |
    8058:	4319      	orrs	r1, r3
        RADIO_RegisterWrite(REG_LORA_MODEMCONFIG2,
    805a:	b2c9      	uxtb	r1, r1
    805c:	201e      	movs	r0, #30
    805e:	47b0      	blx	r6
        if (0 != radioConfiguration.frequencyHopPeriod)
    8060:	8ae2      	ldrh	r2, [r4, #22]
            tempValue = 0;
    8062:	2100      	movs	r1, #0
        if (0 != radioConfiguration.frequencyHopPeriod)
    8064:	2a00      	cmp	r2, #0
    8066:	d00d      	beq.n	8084 <Radio_WriteConfiguration+0x204>
            switch (radioConfiguration.bandWidth)
    8068:	2336      	movs	r3, #54	; 0x36
    806a:	4959      	ldr	r1, [pc, #356]	; (81d0 <Radio_WriteConfiguration+0x350>)
    806c:	5ccb      	ldrb	r3, [r1, r3]
    806e:	2b08      	cmp	r3, #8
    8070:	d064      	beq.n	813c <Radio_WriteConfiguration+0x2bc>
    8072:	2b09      	cmp	r3, #9
    8074:	d065      	beq.n	8142 <Radio_WriteConfiguration+0x2c2>
                    tempValue = 0;
    8076:	2100      	movs	r1, #0
            switch (radioConfiguration.bandWidth)
    8078:	2b07      	cmp	r3, #7
    807a:	d05a      	beq.n	8132 <Radio_WriteConfiguration+0x2b2>
            tempValue >>= radioConfiguration.dataRate;
    807c:	2335      	movs	r3, #53	; 0x35
    807e:	4a54      	ldr	r2, [pc, #336]	; (81d0 <Radio_WriteConfiguration+0x350>)
    8080:	5cd3      	ldrb	r3, [r2, r3]
    8082:	40d9      	lsrs	r1, r3
        RADIO_RegisterWrite(REG_LORA_HOPPERIOD, (uint8_t) tempValue);
    8084:	b2c9      	uxtb	r1, r1
    8086:	2024      	movs	r0, #36	; 0x24
    8088:	4c56      	ldr	r4, [pc, #344]	; (81e4 <Radio_WriteConfiguration+0x364>)
    808a:	47a0      	blx	r4
        RADIO_RegisterWrite(REG_LORA_SYMBTIMEOUTLSB, (symbolTimeout & 0xFF));
    808c:	b2e9      	uxtb	r1, r5
    808e:	201f      	movs	r0, #31
    8090:	47a0      	blx	r4
        regValue = RADIO_RegisterRead(REG_LORA_MODEMCONFIG3);
    8092:	2026      	movs	r0, #38	; 0x26
    8094:	4b52      	ldr	r3, [pc, #328]	; (81e0 <Radio_WriteConfiguration+0x360>)
    8096:	4798      	blx	r3
            (SF_12 == radioConfiguration.dataRate) &&
    8098:	2335      	movs	r3, #53	; 0x35
        if (
    809a:	4a4d      	ldr	r2, [pc, #308]	; (81d0 <Radio_WriteConfiguration+0x350>)
    809c:	5cd3      	ldrb	r3, [r2, r3]
    809e:	2b0c      	cmp	r3, #12
    80a0:	d053      	beq.n	814a <Radio_WriteConfiguration+0x2ca>
            (SF_11 == radioConfiguration.dataRate) &&
    80a2:	4b4b      	ldr	r3, [pc, #300]	; (81d0 <Radio_WriteConfiguration+0x350>)
    80a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    80a6:	4a53      	ldr	r2, [pc, #332]	; (81f4 <Radio_WriteConfiguration+0x374>)
    80a8:	4013      	ands	r3, r2
            ) ||
    80aa:	4a53      	ldr	r2, [pc, #332]	; (81f8 <Radio_WriteConfiguration+0x378>)
    80ac:	4293      	cmp	r3, r2
    80ae:	d051      	beq.n	8154 <Radio_WriteConfiguration+0x2d4>
            regValue &= ~(1 << SHIFT3);    // Clear LowDataRateOptimize
    80b0:	21f7      	movs	r1, #247	; 0xf7
    80b2:	4001      	ands	r1, r0
        regValue |= 1 << SHIFT2;         // LNA gain set by internal AGC loop
    80b4:	2004      	movs	r0, #4
        RADIO_RegisterWrite(REG_LORA_MODEMCONFIG3, regValue);
    80b6:	4301      	orrs	r1, r0
    80b8:	3022      	adds	r0, #34	; 0x22
    80ba:	4c4a      	ldr	r4, [pc, #296]	; (81e4 <Radio_WriteConfiguration+0x364>)
    80bc:	47a0      	blx	r4
        regValue = RADIO_RegisterRead(REG_LORA_DETECTOPTIMIZE);
    80be:	2031      	movs	r0, #49	; 0x31
    80c0:	4b47      	ldr	r3, [pc, #284]	; (81e0 <Radio_WriteConfiguration+0x360>)
    80c2:	4798      	blx	r3
        regValue &= ~(0x07);        // Clear DetectOptimize bits
    80c4:	21f8      	movs	r1, #248	; 0xf8
    80c6:	4001      	ands	r1, r0
        regValue |= 0x03;           // Set value for SF7 - SF12
    80c8:	2003      	movs	r0, #3
        RADIO_RegisterWrite(REG_LORA_DETECTOPTIMIZE, regValue);
    80ca:	4301      	orrs	r1, r0
    80cc:	302e      	adds	r0, #46	; 0x2e
    80ce:	47a0      	blx	r4
        RADIO_RegisterWrite(REG_LORA_DETECTIONTHRESHOLD, 0x0A);
    80d0:	210a      	movs	r1, #10
    80d2:	2037      	movs	r0, #55	; 0x37
    80d4:	47a0      	blx	r4
        if (0x12 == radioConfiguration.regVersion)
    80d6:	2331      	movs	r3, #49	; 0x31
    80d8:	4a3d      	ldr	r2, [pc, #244]	; (81d0 <Radio_WriteConfiguration+0x350>)
    80da:	5cd3      	ldrb	r3, [r2, r3]
    80dc:	2b12      	cmp	r3, #18
    80de:	d03d      	beq.n	815c <Radio_WriteConfiguration+0x2dc>
        regValue = RADIO_RegisterRead(REG_LORA_INVERTIQ);
    80e0:	2033      	movs	r0, #51	; 0x33
    80e2:	4b3f      	ldr	r3, [pc, #252]	; (81e0 <Radio_WriteConfiguration+0x360>)
    80e4:	4798      	blx	r3
        regValue |= (radioConfiguration.iqInverted & 0x01) << SHIFT6;    // Set InvertIQ bit if needed
    80e6:	4d3a      	ldr	r5, [pc, #232]	; (81d0 <Radio_WriteConfiguration+0x350>)
    80e8:	2325      	movs	r3, #37	; 0x25
    80ea:	5ceb      	ldrb	r3, [r5, r3]
    80ec:	019b      	lsls	r3, r3, #6
    80ee:	2140      	movs	r1, #64	; 0x40
    80f0:	4019      	ands	r1, r3
        regValue &= ~(1 << 6);                                        // Clear InvertIQ bit
    80f2:	2340      	movs	r3, #64	; 0x40
    80f4:	4398      	bics	r0, r3
        regValue |= (radioConfiguration.iqInverted & 0x01) << SHIFT6;    // Set InvertIQ bit if needed
    80f6:	4301      	orrs	r1, r0
        RADIO_RegisterWrite(REG_LORA_INVERTIQ, regValue);
    80f8:	b2c9      	uxtb	r1, r1
    80fa:	2033      	movs	r0, #51	; 0x33
    80fc:	4c39      	ldr	r4, [pc, #228]	; (81e4 <Radio_WriteConfiguration+0x364>)
    80fe:	47a0      	blx	r4
        RADIO_RegisterWrite(REG_LORA_PREAMBLEMSB, radioConfiguration.preambleLen >> SHIFT8);
    8100:	8aa9      	ldrh	r1, [r5, #20]
    8102:	0a09      	lsrs	r1, r1, #8
    8104:	2020      	movs	r0, #32
    8106:	47a0      	blx	r4
        RADIO_RegisterWrite(REG_LORA_PREAMBLELSB, radioConfiguration.preambleLen & 0xFF);
    8108:	7d29      	ldrb	r1, [r5, #20]
    810a:	2021      	movs	r0, #33	; 0x21
    810c:	47a0      	blx	r4
        RADIO_RegisterWrite(REG_LORA_FIFOADDRPTR, 0x00);
    810e:	2100      	movs	r1, #0
    8110:	200d      	movs	r0, #13
    8112:	47a0      	blx	r4
        RADIO_RegisterWrite(REG_LORA_FIFOTXBASEADDR, 0x00);
    8114:	2100      	movs	r1, #0
    8116:	200e      	movs	r0, #14
    8118:	47a0      	blx	r4
        RADIO_RegisterWrite(REG_LORA_FIFORXBASEADDR, 0x00);
    811a:	2100      	movs	r1, #0
    811c:	200f      	movs	r0, #15
    811e:	47a0      	blx	r4
        if (0x12 == radioConfiguration.regVersion)
    8120:	2331      	movs	r3, #49	; 0x31
    8122:	5ceb      	ldrb	r3, [r5, r3]
    8124:	2b12      	cmp	r3, #18
    8126:	d03d      	beq.n	81a4 <Radio_WriteConfiguration+0x324>
        RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 0xFF);
    8128:	21ff      	movs	r1, #255	; 0xff
    812a:	2012      	movs	r0, #18
    812c:	4b2d      	ldr	r3, [pc, #180]	; (81e4 <Radio_WriteConfiguration+0x364>)
    812e:	4798      	blx	r3
    8130:	e770      	b.n	8014 <Radio_WriteConfiguration+0x194>
                    tempValue *= 125;
    8132:	0151      	lsls	r1, r2, #5
    8134:	1a89      	subs	r1, r1, r2
    8136:	0089      	lsls	r1, r1, #2
    8138:	1889      	adds	r1, r1, r2
                    break;
    813a:	e79f      	b.n	807c <Radio_WriteConfiguration+0x1fc>
                    tempValue *= 250;
    813c:	21fa      	movs	r1, #250	; 0xfa
    813e:	4351      	muls	r1, r2
                    break;
    8140:	e79c      	b.n	807c <Radio_WriteConfiguration+0x1fc>
                    tempValue *= 500;
    8142:	21fa      	movs	r1, #250	; 0xfa
    8144:	0049      	lsls	r1, r1, #1
    8146:	4351      	muls	r1, r2
                    break;
    8148:	e798      	b.n	807c <Radio_WriteConfiguration+0x1fc>
            ((BW_125KHZ == radioConfiguration.bandWidth) || (BW_250KHZ == radioConfiguration.bandWidth))
    814a:	332a      	adds	r3, #42	; 0x2a
    814c:	5cd3      	ldrb	r3, [r2, r3]
            (SF_12 == radioConfiguration.dataRate) &&
    814e:	3b07      	subs	r3, #7
    8150:	2b01      	cmp	r3, #1
    8152:	d8a6      	bhi.n	80a2 <Radio_WriteConfiguration+0x222>
            regValue |= 1 << SHIFT3;     // Set LowDataRateOptimize
    8154:	2108      	movs	r1, #8
    8156:	4301      	orrs	r1, r0
    8158:	b2c9      	uxtb	r1, r1
    815a:	e7ab      	b.n	80b4 <Radio_WriteConfiguration+0x234>
            if ( (BW_125KHZ == radioConfiguration.bandWidth) ||
    815c:	3324      	adds	r3, #36	; 0x24
    815e:	5cd3      	ldrb	r3, [r2, r3]
    8160:	3b07      	subs	r3, #7
    8162:	2b01      	cmp	r3, #1
    8164:	d90f      	bls.n	8186 <Radio_WriteConfiguration+0x306>
            if (BW_500KHZ == radioConfiguration.bandWidth)
    8166:	2336      	movs	r3, #54	; 0x36
    8168:	4a19      	ldr	r2, [pc, #100]	; (81d0 <Radio_WriteConfiguration+0x350>)
    816a:	5cd3      	ldrb	r3, [r2, r3]
    816c:	2b09      	cmp	r3, #9
    816e:	d1b7      	bne.n	80e0 <Radio_WriteConfiguration+0x260>
                regValue = RADIO_RegisterRead(0x31);
    8170:	2031      	movs	r0, #49	; 0x31
    8172:	4b1b      	ldr	r3, [pc, #108]	; (81e0 <Radio_WriteConfiguration+0x360>)
    8174:	4798      	blx	r3
                regValue |= 0x80;                                   // Set bit 7
    8176:	2180      	movs	r1, #128	; 0x80
    8178:	4249      	negs	r1, r1
    817a:	4301      	orrs	r1, r0
                RADIO_RegisterWrite(0x31, regValue);
    817c:	b2c9      	uxtb	r1, r1
    817e:	2031      	movs	r0, #49	; 0x31
    8180:	4b18      	ldr	r3, [pc, #96]	; (81e4 <Radio_WriteConfiguration+0x364>)
    8182:	4798      	blx	r3
    8184:	e7ac      	b.n	80e0 <Radio_WriteConfiguration+0x260>
                regValue = RADIO_RegisterRead(0x31);
    8186:	2031      	movs	r0, #49	; 0x31
    8188:	4b15      	ldr	r3, [pc, #84]	; (81e0 <Radio_WriteConfiguration+0x360>)
    818a:	4798      	blx	r3
                RADIO_RegisterWrite(0x31, regValue);
    818c:	217f      	movs	r1, #127	; 0x7f
    818e:	4001      	ands	r1, r0
    8190:	2031      	movs	r0, #49	; 0x31
    8192:	4c14      	ldr	r4, [pc, #80]	; (81e4 <Radio_WriteConfiguration+0x364>)
    8194:	47a0      	blx	r4
                RADIO_RegisterWrite(0x2F, 0x40);
    8196:	2140      	movs	r1, #64	; 0x40
    8198:	202f      	movs	r0, #47	; 0x2f
    819a:	47a0      	blx	r4
                RADIO_RegisterWrite(0x30, 0x00);
    819c:	2100      	movs	r1, #0
    819e:	2030      	movs	r0, #48	; 0x30
    81a0:	47a0      	blx	r4
    81a2:	e7e0      	b.n	8166 <Radio_WriteConfiguration+0x2e6>
            if ( (BW_500KHZ == radioConfiguration.bandWidth) &&
    81a4:	3324      	adds	r3, #36	; 0x24
    81a6:	4a0a      	ldr	r2, [pc, #40]	; (81d0 <Radio_WriteConfiguration+0x350>)
    81a8:	5cd3      	ldrb	r3, [r2, r3]
    81aa:	2b09      	cmp	r3, #9
    81ac:	d026      	beq.n	81fc <Radio_WriteConfiguration+0x37c>
                RADIO_RegisterWrite(0x36, 0x03);
    81ae:	2103      	movs	r1, #3
    81b0:	2036      	movs	r0, #54	; 0x36
    81b2:	4b0c      	ldr	r3, [pc, #48]	; (81e4 <Radio_WriteConfiguration+0x364>)
    81b4:	4798      	blx	r3
            if ((BW_500KHZ == radioConfiguration.bandWidth) && (1 == radioConfiguration.iqInverted))
    81b6:	2336      	movs	r3, #54	; 0x36
    81b8:	4a05      	ldr	r2, [pc, #20]	; (81d0 <Radio_WriteConfiguration+0x350>)
    81ba:	5cd3      	ldrb	r3, [r2, r3]
    81bc:	2b09      	cmp	r3, #9
    81be:	d039      	beq.n	8234 <Radio_WriteConfiguration+0x3b4>
                RADIO_RegisterWrite(0x3A, 0x65);     // Freq to time drift
    81c0:	2165      	movs	r1, #101	; 0x65
    81c2:	203a      	movs	r0, #58	; 0x3a
    81c4:	4c07      	ldr	r4, [pc, #28]	; (81e4 <Radio_WriteConfiguration+0x364>)
    81c6:	47a0      	blx	r4
                RADIO_RegisterWrite(0x3B, 29);       // Freq to time invert = 0d29 (default)
    81c8:	211d      	movs	r1, #29
    81ca:	203b      	movs	r0, #59	; 0x3b
    81cc:	47a0      	blx	r4
    81ce:	e7ab      	b.n	8128 <Radio_WriteConfiguration+0x2a8>
    81d0:	20003ba8 	.word	0x20003ba8
    81d4:	00010fd9 	.word	0x00010fd9
    81d8:	00007e39 	.word	0x00007e39
    81dc:	00019f7c 	.word	0x00019f7c
    81e0:	0000fd79 	.word	0x0000fd79
    81e4:	0000fd51 	.word	0x0000fd51
    81e8:	000150f9 	.word	0x000150f9
    81ec:	00003d09 	.word	0x00003d09
    81f0:	01e84800 	.word	0x01e84800
    81f4:	00ffff00 	.word	0x00ffff00
    81f8:	00070b00 	.word	0x00070b00
                (radioConfiguration.frequency >= FREQ_862000KHZ) &&
    81fc:	6813      	ldr	r3, [r2, #0]
            if ( (BW_500KHZ == radioConfiguration.bandWidth) &&
    81fe:	4a1d      	ldr	r2, [pc, #116]	; (8274 <Radio_WriteConfiguration+0x3f4>)
    8200:	1899      	adds	r1, r3, r2
    8202:	4a1d      	ldr	r2, [pc, #116]	; (8278 <Radio_WriteConfiguration+0x3f8>)
    8204:	4291      	cmp	r1, r2
    8206:	d807      	bhi.n	8218 <Radio_WriteConfiguration+0x398>
                RADIO_RegisterWrite(0x36, 0x02);
    8208:	2102      	movs	r1, #2
    820a:	2036      	movs	r0, #54	; 0x36
    820c:	4c1b      	ldr	r4, [pc, #108]	; (827c <Radio_WriteConfiguration+0x3fc>)
    820e:	47a0      	blx	r4
                RADIO_RegisterWrite(0x3a, 0x64);
    8210:	2164      	movs	r1, #100	; 0x64
    8212:	203a      	movs	r0, #58	; 0x3a
    8214:	47a0      	blx	r4
    8216:	e7ce      	b.n	81b6 <Radio_WriteConfiguration+0x336>
            else if ( (BW_500KHZ == radioConfiguration.bandWidth) &&
    8218:	4a19      	ldr	r2, [pc, #100]	; (8280 <Radio_WriteConfiguration+0x400>)
    821a:	4694      	mov	ip, r2
    821c:	4463      	add	r3, ip
    821e:	4a19      	ldr	r2, [pc, #100]	; (8284 <Radio_WriteConfiguration+0x404>)
    8220:	4293      	cmp	r3, r2
    8222:	d8c4      	bhi.n	81ae <Radio_WriteConfiguration+0x32e>
                RADIO_RegisterWrite(0x36, 0x02);
    8224:	2102      	movs	r1, #2
    8226:	2036      	movs	r0, #54	; 0x36
    8228:	4c14      	ldr	r4, [pc, #80]	; (827c <Radio_WriteConfiguration+0x3fc>)
    822a:	47a0      	blx	r4
                RADIO_RegisterWrite(0x3a, 0x7F);
    822c:	217f      	movs	r1, #127	; 0x7f
    822e:	203a      	movs	r0, #58	; 0x3a
    8230:	47a0      	blx	r4
    8232:	e7c0      	b.n	81b6 <Radio_WriteConfiguration+0x336>
            if ((BW_500KHZ == radioConfiguration.bandWidth) && (1 == radioConfiguration.iqInverted))
    8234:	331c      	adds	r3, #28
    8236:	5cd3      	ldrb	r3, [r2, r3]
    8238:	2b01      	cmp	r3, #1
    823a:	d1c1      	bne.n	81c0 <Radio_WriteConfiguration+0x340>
                RADIO_RegisterWrite(0x3A, 0x65);     // Freq to time drift
    823c:	2165      	movs	r1, #101	; 0x65
    823e:	203a      	movs	r0, #58	; 0x3a
    8240:	4c0e      	ldr	r4, [pc, #56]	; (827c <Radio_WriteConfiguration+0x3fc>)
    8242:	47a0      	blx	r4
                RADIO_RegisterWrite(0x3B, 25);       // Freq to time invert = 0d25
    8244:	2119      	movs	r1, #25
    8246:	203b      	movs	r0, #59	; 0x3b
    8248:	47a0      	blx	r4
    824a:	e76d      	b.n	8128 <Radio_WriteConfiguration+0x2a8>
            RADIO_RegisterWrite(REG_FSK_SYNCCONFIG, 0x00);
    824c:	2100      	movs	r1, #0
    824e:	2027      	movs	r0, #39	; 0x27
    8250:	4b0a      	ldr	r3, [pc, #40]	; (827c <Radio_WriteConfiguration+0x3fc>)
    8252:	4798      	blx	r3
    8254:	e6d7      	b.n	8006 <Radio_WriteConfiguration+0x186>
        ocp = RADIO_RegisterRead(REG_OCP);
    8256:	200b      	movs	r0, #11
    8258:	4e0b      	ldr	r6, [pc, #44]	; (8288 <Radio_WriteConfiguration+0x408>)
    825a:	47b0      	blx	r6
    825c:	0004      	movs	r4, r0
        paDac = RADIO_RegisterRead(REG_PADAC);
    825e:	204d      	movs	r0, #77	; 0x4d
    8260:	47b0      	blx	r6
        paDac &= ~(0x07);
    8262:	21f8      	movs	r1, #248	; 0xf8
    8264:	4001      	ands	r1, r0
            paDac |= 0x07;
    8266:	2007      	movs	r0, #7
    8268:	4301      	orrs	r1, r0
            ocp &= ~(0x20);
    826a:	23df      	movs	r3, #223	; 0xdf
    826c:	401c      	ands	r4, r3
            power = 15;
    826e:	270f      	movs	r7, #15
    8270:	e65a      	b.n	7f28 <Radio_WriteConfiguration+0xa8>
    8272:	46c0      	nop			; (mov r8, r8)
    8274:	cc9eec80 	.word	0xcc9eec80
    8278:	096ae380 	.word	0x096ae380
    827c:	0000fd51 	.word	0x0000fd51
    8280:	e78fe580 	.word	0xe78fe580
    8284:	06dac2c0 	.word	0x06dac2c0
    8288:	0000fd79 	.word	0x0000fd79

0000828c <RADIO_getMappingAndOpmode>:

\param modulation	- modulation when this function is called.
\return				- none.
*************************************************************************/
static void RADIO_getMappingAndOpmode(uint8_t *dioMapping, uint8_t *opMode, uint8_t mask, uint8_t shift)
{
    828c:	b5f0      	push	{r4, r5, r6, r7, lr}
    828e:	46c6      	mov	lr, r8
    8290:	b500      	push	{lr}
    8292:	0007      	movs	r7, r0
    8294:	000e      	movs	r6, r1
    8296:	0014      	movs	r4, r2
    8298:	4698      	mov	r8, r3
#ifndef UT
    *dioMapping = (RADIO_RegisterRead(REG_DIOMAPPING1) & mask) >> shift;
    829a:	2040      	movs	r0, #64	; 0x40
    829c:	4d05      	ldr	r5, [pc, #20]	; (82b4 <RADIO_getMappingAndOpmode+0x28>)
    829e:	47a8      	blx	r5
    82a0:	4004      	ands	r4, r0
    82a2:	4643      	mov	r3, r8
    82a4:	411c      	asrs	r4, r3
    82a6:	703c      	strb	r4, [r7, #0]
    *opMode = RADIO_RegisterRead(REG_OPMODE);
    82a8:	2001      	movs	r0, #1
    82aa:	47a8      	blx	r5
    82ac:	7030      	strb	r0, [r6, #0]
#endif
}
    82ae:	bc04      	pop	{r2}
    82b0:	4690      	mov	r8, r2
    82b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    82b4:	0000fd79 	.word	0x0000fd79

000082b8 <RADIO_UnhandledInterrupt>:
{
    82b8:	b510      	push	{r4, lr}
    if (MODULATION_LORA == modulation)
    82ba:	2801      	cmp	r0, #1
    82bc:	d007      	beq.n	82ce <RADIO_UnhandledInterrupt+0x16>
        RADIO_RegisterWrite(REG_FSK_IRQFLAGS1, 0xFF);
    82be:	21ff      	movs	r1, #255	; 0xff
    82c0:	203e      	movs	r0, #62	; 0x3e
    82c2:	4c05      	ldr	r4, [pc, #20]	; (82d8 <RADIO_UnhandledInterrupt+0x20>)
    82c4:	47a0      	blx	r4
        RADIO_RegisterWrite(REG_FSK_IRQFLAGS2, 0xFF);
    82c6:	21ff      	movs	r1, #255	; 0xff
    82c8:	203f      	movs	r0, #63	; 0x3f
    82ca:	47a0      	blx	r4
}
    82cc:	bd10      	pop	{r4, pc}
        RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 0xFF);
    82ce:	21ff      	movs	r1, #255	; 0xff
    82d0:	3011      	adds	r0, #17
    82d2:	4b01      	ldr	r3, [pc, #4]	; (82d8 <RADIO_UnhandledInterrupt+0x20>)
    82d4:	4798      	blx	r3
    82d6:	e7f9      	b.n	82cc <RADIO_UnhandledInterrupt+0x14>
    82d8:	0000fd51 	.word	0x0000fd51

000082dc <RADIO_DIO0>:
{
    82dc:	b530      	push	{r4, r5, lr}
    82de:	b083      	sub	sp, #12
    RADIO_getMappingAndOpmode(&dioMapping, &opMode, 0xC0, SHIFT6);
    82e0:	466b      	mov	r3, sp
    82e2:	1d9c      	adds	r4, r3, #6
    82e4:	2306      	movs	r3, #6
    82e6:	22c0      	movs	r2, #192	; 0xc0
    82e8:	0021      	movs	r1, r4
    82ea:	4668      	mov	r0, sp
    82ec:	3007      	adds	r0, #7
    82ee:	4d19      	ldr	r5, [pc, #100]	; (8354 <RADIO_DIO0+0x78>)
    82f0:	47a8      	blx	r5
    if ((opMode & 0x80) != 0)
    82f2:	7822      	ldrb	r2, [r4, #0]
    82f4:	b253      	sxtb	r3, r2
    82f6:	2b00      	cmp	r3, #0
    82f8:	db11      	blt.n	831e <RADIO_DIO0+0x42>
        switch (dioMapping)
    82fa:	466b      	mov	r3, sp
    82fc:	3307      	adds	r3, #7
    82fe:	781b      	ldrb	r3, [r3, #0]
    8300:	2b00      	cmp	r3, #0
    8302:	d123      	bne.n	834c <RADIO_DIO0+0x70>
                opMode &= RADIO_OPMODE_MASK;
    8304:	3307      	adds	r3, #7
    8306:	4013      	ands	r3, r2
    8308:	466a      	mov	r2, sp
    830a:	7193      	strb	r3, [r2, #6]
                if (MODE_TX == opMode)
    830c:	2b03      	cmp	r3, #3
    830e:	d017      	beq.n	8340 <RADIO_DIO0+0x64>
                else if (MODE_RXCONT == opMode)
    8310:	2b05      	cmp	r3, #5
    8312:	d018      	beq.n	8346 <RADIO_DIO0+0x6a>
                    RADIO_UnhandledInterrupt(MODULATION_FSK);
    8314:	2000      	movs	r0, #0
    8316:	4b10      	ldr	r3, [pc, #64]	; (8358 <RADIO_DIO0+0x7c>)
    8318:	4798      	blx	r3
}
    831a:	b003      	add	sp, #12
    831c:	bd30      	pop	{r4, r5, pc}
        switch (dioMapping)
    831e:	466b      	mov	r3, sp
    8320:	3307      	adds	r3, #7
    8322:	781b      	ldrb	r3, [r3, #0]
    8324:	2b00      	cmp	r3, #0
    8326:	d005      	beq.n	8334 <RADIO_DIO0+0x58>
    8328:	2b01      	cmp	r3, #1
    832a:	d006      	beq.n	833a <RADIO_DIO0+0x5e>
                RADIO_UnhandledInterrupt(MODULATION_LORA);
    832c:	2001      	movs	r0, #1
    832e:	4b0a      	ldr	r3, [pc, #40]	; (8358 <RADIO_DIO0+0x7c>)
    8330:	4798      	blx	r3
                break;
    8332:	e7f2      	b.n	831a <RADIO_DIO0+0x3e>
                RADIO_RxDone();
    8334:	4b09      	ldr	r3, [pc, #36]	; (835c <RADIO_DIO0+0x80>)
    8336:	4798      	blx	r3
                break;
    8338:	e7ef      	b.n	831a <RADIO_DIO0+0x3e>
                RADIO_TxDone();
    833a:	4b09      	ldr	r3, [pc, #36]	; (8360 <RADIO_DIO0+0x84>)
    833c:	4798      	blx	r3
                break;
    833e:	e7ec      	b.n	831a <RADIO_DIO0+0x3e>
                    RADIO_FSKPacketSent();
    8340:	4b08      	ldr	r3, [pc, #32]	; (8364 <RADIO_DIO0+0x88>)
    8342:	4798      	blx	r3
    8344:	e7e9      	b.n	831a <RADIO_DIO0+0x3e>
                    RADIO_FSKPayloadReady();
    8346:	4b08      	ldr	r3, [pc, #32]	; (8368 <RADIO_DIO0+0x8c>)
    8348:	4798      	blx	r3
    834a:	e7e6      	b.n	831a <RADIO_DIO0+0x3e>
                RADIO_UnhandledInterrupt(MODULATION_FSK);
    834c:	2000      	movs	r0, #0
    834e:	4b02      	ldr	r3, [pc, #8]	; (8358 <RADIO_DIO0+0x7c>)
    8350:	4798      	blx	r3
}
    8352:	e7e2      	b.n	831a <RADIO_DIO0+0x3e>
    8354:	0000828d 	.word	0x0000828d
    8358:	000082b9 	.word	0x000082b9
    835c:	00008c09 	.word	0x00008c09
    8360:	00008b05 	.word	0x00008b05
    8364:	00008b85 	.word	0x00008b85
    8368:	00008c8d 	.word	0x00008c8d

0000836c <RADIO_DIO1>:
{
    836c:	b530      	push	{r4, r5, lr}
    836e:	b083      	sub	sp, #12
    RADIO_getMappingAndOpmode(&dioMapping, &opMode, 0x30, SHIFT4);
    8370:	466b      	mov	r3, sp
    8372:	1d9c      	adds	r4, r3, #6
    8374:	2304      	movs	r3, #4
    8376:	2230      	movs	r2, #48	; 0x30
    8378:	0021      	movs	r1, r4
    837a:	4668      	mov	r0, sp
    837c:	3007      	adds	r0, #7
    837e:	4d17      	ldr	r5, [pc, #92]	; (83dc <RADIO_DIO1+0x70>)
    8380:	47a8      	blx	r5
    if ((opMode & 0x80) != 0)
    8382:	7822      	ldrb	r2, [r4, #0]
    8384:	b253      	sxtb	r3, r2
    8386:	2b00      	cmp	r3, #0
    8388:	db0c      	blt.n	83a4 <RADIO_DIO1+0x38>
		opMode &= RADIO_OPMODE_MASK;
    838a:	2307      	movs	r3, #7
    838c:	4013      	ands	r3, r2
    838e:	466a      	mov	r2, sp
    8390:	7193      	strb	r3, [r2, #6]
        switch (dioMapping)
    8392:	466a      	mov	r2, sp
    8394:	3207      	adds	r2, #7
    8396:	7812      	ldrb	r2, [r2, #0]
    8398:	2a00      	cmp	r2, #0
    839a:	d014      	beq.n	83c6 <RADIO_DIO1+0x5a>
    839c:	2a01      	cmp	r2, #1
    839e:	d017      	beq.n	83d0 <RADIO_DIO1+0x64>
}
    83a0:	b003      	add	sp, #12
    83a2:	bd30      	pop	{r4, r5, pc}
        switch (dioMapping)
    83a4:	466b      	mov	r3, sp
    83a6:	3307      	adds	r3, #7
    83a8:	781b      	ldrb	r3, [r3, #0]
    83aa:	2b00      	cmp	r3, #0
    83ac:	d005      	beq.n	83ba <RADIO_DIO1+0x4e>
    83ae:	2b01      	cmp	r3, #1
    83b0:	d006      	beq.n	83c0 <RADIO_DIO1+0x54>
                RADIO_UnhandledInterrupt(MODULATION_LORA);
    83b2:	2001      	movs	r0, #1
    83b4:	4b0a      	ldr	r3, [pc, #40]	; (83e0 <RADIO_DIO1+0x74>)
    83b6:	4798      	blx	r3
                break;
    83b8:	e7f2      	b.n	83a0 <RADIO_DIO1+0x34>
                RADIO_RxTimeout();
    83ba:	4b0a      	ldr	r3, [pc, #40]	; (83e4 <RADIO_DIO1+0x78>)
    83bc:	4798      	blx	r3
                break;
    83be:	e7ef      	b.n	83a0 <RADIO_DIO1+0x34>
                RADIO_FHSSChangeChannel();
    83c0:	4b09      	ldr	r3, [pc, #36]	; (83e8 <RADIO_DIO1+0x7c>)
    83c2:	4798      	blx	r3
                break;
    83c4:	e7ec      	b.n	83a0 <RADIO_DIO1+0x34>
				 if (MODE_RXCONT == opMode)
    83c6:	2b05      	cmp	r3, #5
    83c8:	d1ea      	bne.n	83a0 <RADIO_DIO1+0x34>
					RADIO_FSKFifoLevel();
    83ca:	4b08      	ldr	r3, [pc, #32]	; (83ec <RADIO_DIO1+0x80>)
    83cc:	4798      	blx	r3
    83ce:	e7e7      	b.n	83a0 <RADIO_DIO1+0x34>
				if (MODE_TX == opMode)
    83d0:	2b03      	cmp	r3, #3
    83d2:	d1e5      	bne.n	83a0 <RADIO_DIO1+0x34>
					RADIO_FSKFifoEmpty();
    83d4:	4b06      	ldr	r3, [pc, #24]	; (83f0 <RADIO_DIO1+0x84>)
    83d6:	4798      	blx	r3
}
    83d8:	e7e2      	b.n	83a0 <RADIO_DIO1+0x34>
    83da:	46c0      	nop			; (mov r8, r8)
    83dc:	0000828d 	.word	0x0000828d
    83e0:	000082b9 	.word	0x000082b9
    83e4:	00008a89 	.word	0x00008a89
    83e8:	000110bd 	.word	0x000110bd
    83ec:	000088d5 	.word	0x000088d5
    83f0:	00008995 	.word	0x00008995

000083f4 <RADIO_DIO2>:
{
    83f4:	b530      	push	{r4, r5, lr}
    83f6:	b083      	sub	sp, #12
    RADIO_getMappingAndOpmode(&dioMapping, &opMode, 0x0C, SHIFT2);
    83f8:	466b      	mov	r3, sp
    83fa:	1d9c      	adds	r4, r3, #6
    83fc:	2302      	movs	r3, #2
    83fe:	220c      	movs	r2, #12
    8400:	0021      	movs	r1, r4
    8402:	4668      	mov	r0, sp
    8404:	3007      	adds	r0, #7
    8406:	4d11      	ldr	r5, [pc, #68]	; (844c <RADIO_DIO2+0x58>)
    8408:	47a8      	blx	r5
    if ((opMode & 0x80) != 0)
    840a:	7822      	ldrb	r2, [r4, #0]
    840c:	b253      	sxtb	r3, r2
    840e:	2b00      	cmp	r3, #0
    8410:	db0c      	blt.n	842c <RADIO_DIO2+0x38>
        opMode &= RADIO_OPMODE_MASK;
    8412:	2307      	movs	r3, #7
    8414:	4013      	ands	r3, r2
    8416:	466a      	mov	r2, sp
    8418:	7193      	strb	r3, [r2, #6]
        switch (dioMapping)
    841a:	466a      	mov	r2, sp
    841c:	3207      	adds	r2, #7
    841e:	7812      	ldrb	r2, [r2, #0]
    8420:	2a03      	cmp	r2, #3
    8422:	d101      	bne.n	8428 <RADIO_DIO2+0x34>
	        if (MODE_RXCONT == opMode)
    8424:	2b05      	cmp	r3, #5
    8426:	d00d      	beq.n	8444 <RADIO_DIO2+0x50>
}
    8428:	b003      	add	sp, #12
    842a:	bd30      	pop	{r4, r5, pc}
        switch (dioMapping)
    842c:	466b      	mov	r3, sp
    842e:	3307      	adds	r3, #7
    8430:	781b      	ldrb	r3, [r3, #0]
    8432:	2b02      	cmp	r3, #2
    8434:	d802      	bhi.n	843c <RADIO_DIO2+0x48>
				RADIO_FHSSChangeChannel();
    8436:	4b06      	ldr	r3, [pc, #24]	; (8450 <RADIO_DIO2+0x5c>)
    8438:	4798      	blx	r3
                break;
    843a:	e7f5      	b.n	8428 <RADIO_DIO2+0x34>
                RADIO_UnhandledInterrupt(MODULATION_LORA);
    843c:	2001      	movs	r0, #1
    843e:	4b05      	ldr	r3, [pc, #20]	; (8454 <RADIO_DIO2+0x60>)
    8440:	4798      	blx	r3
                break;
    8442:	e7f1      	b.n	8428 <RADIO_DIO2+0x34>
		        RADIO_FSKSyncAddr();
    8444:	4b04      	ldr	r3, [pc, #16]	; (8458 <RADIO_DIO2+0x64>)
    8446:	4798      	blx	r3
}
    8448:	e7ee      	b.n	8428 <RADIO_DIO2+0x34>
    844a:	46c0      	nop			; (mov r8, r8)
    844c:	0000828d 	.word	0x0000828d
    8450:	000110bd 	.word	0x000110bd
    8454:	000082b9 	.word	0x000082b9
    8458:	000088a5 	.word	0x000088a5

0000845c <RADIO_DIO3>:
{
    845c:	b530      	push	{r4, r5, lr}
    845e:	b083      	sub	sp, #12
    RADIO_getMappingAndOpmode(&dioMapping, &opMode, 0x03, 0);
    8460:	466b      	mov	r3, sp
    8462:	1d9c      	adds	r4, r3, #6
    8464:	2300      	movs	r3, #0
    8466:	2203      	movs	r2, #3
    8468:	0021      	movs	r1, r4
    846a:	4668      	mov	r0, sp
    846c:	3007      	adds	r0, #7
    846e:	4d05      	ldr	r5, [pc, #20]	; (8484 <RADIO_DIO3+0x28>)
    8470:	47a8      	blx	r5
    if ((opMode & 0x80) != 0)
    8472:	7823      	ldrb	r3, [r4, #0]
    8474:	2b7f      	cmp	r3, #127	; 0x7f
    8476:	d801      	bhi.n	847c <RADIO_DIO3+0x20>
}
    8478:	b003      	add	sp, #12
    847a:	bd30      	pop	{r4, r5, pc}
                RADIO_UnhandledInterrupt(MODULATION_LORA);
    847c:	2001      	movs	r0, #1
    847e:	4b02      	ldr	r3, [pc, #8]	; (8488 <RADIO_DIO3+0x2c>)
    8480:	4798      	blx	r3
}
    8482:	e7f9      	b.n	8478 <RADIO_DIO3+0x1c>
    8484:	0000828d 	.word	0x0000828d
    8488:	000082b9 	.word	0x000082b9

0000848c <RADIO_DIO4>:
{
    848c:	b530      	push	{r4, r5, lr}
    848e:	b083      	sub	sp, #12
    RADIO_getMappingAndOpmode(&dioMapping, &opMode,  0xC0, SHIFT6);
    8490:	466b      	mov	r3, sp
    8492:	1d9c      	adds	r4, r3, #6
    8494:	2306      	movs	r3, #6
    8496:	22c0      	movs	r2, #192	; 0xc0
    8498:	0021      	movs	r1, r4
    849a:	4668      	mov	r0, sp
    849c:	3007      	adds	r0, #7
    849e:	4d05      	ldr	r5, [pc, #20]	; (84b4 <RADIO_DIO4+0x28>)
    84a0:	47a8      	blx	r5
    if ((opMode & 0x80) != 0)
    84a2:	7823      	ldrb	r3, [r4, #0]
    84a4:	2b7f      	cmp	r3, #127	; 0x7f
    84a6:	d801      	bhi.n	84ac <RADIO_DIO4+0x20>
}
    84a8:	b003      	add	sp, #12
    84aa:	bd30      	pop	{r4, r5, pc}
                RADIO_UnhandledInterrupt(MODULATION_LORA);
    84ac:	2001      	movs	r0, #1
    84ae:	4b02      	ldr	r3, [pc, #8]	; (84b8 <RADIO_DIO4+0x2c>)
    84b0:	4798      	blx	r3
}
    84b2:	e7f9      	b.n	84a8 <RADIO_DIO4+0x1c>
    84b4:	0000828d 	.word	0x0000828d
    84b8:	000082b9 	.word	0x000082b9

000084bc <RADIO_DIO5>:
{
    84bc:	b530      	push	{r4, r5, lr}
    84be:	b083      	sub	sp, #12
    RADIO_getMappingAndOpmode(&dioMapping, &opMode, 0x30, SHIFT4);
    84c0:	466b      	mov	r3, sp
    84c2:	1d9c      	adds	r4, r3, #6
    84c4:	2304      	movs	r3, #4
    84c6:	2230      	movs	r2, #48	; 0x30
    84c8:	0021      	movs	r1, r4
    84ca:	4668      	mov	r0, sp
    84cc:	3007      	adds	r0, #7
    84ce:	4d05      	ldr	r5, [pc, #20]	; (84e4 <RADIO_DIO5+0x28>)
    84d0:	47a8      	blx	r5
    if ((opMode & 0x80) != 0)
    84d2:	7823      	ldrb	r3, [r4, #0]
    84d4:	2b7f      	cmp	r3, #127	; 0x7f
    84d6:	d801      	bhi.n	84dc <RADIO_DIO5+0x20>
}
    84d8:	b003      	add	sp, #12
    84da:	bd30      	pop	{r4, r5, pc}
                RADIO_UnhandledInterrupt(MODULATION_LORA);
    84dc:	2001      	movs	r0, #1
    84de:	4b02      	ldr	r3, [pc, #8]	; (84e8 <RADIO_DIO5+0x2c>)
    84e0:	4798      	blx	r3
}
    84e2:	e7f9      	b.n	84d8 <RADIO_DIO5+0x1c>
    84e4:	0000828d 	.word	0x0000828d
    84e8:	000082b9 	.word	0x000082b9

000084ec <Radio_LBTScanTimeout>:

\param time - not used.
\return     - none
*************************************************************************/
void Radio_LBTScanTimeout(uint8_t time)
{
    84ec:	b510      	push	{r4, lr}
    84ee:	b084      	sub	sp, #16
printf("\n Starting Radio_LBTScanTimeout() \n");
#endif // UT_D
	
	(void)time;
	int16_t tempRssi;
	radioConfiguration.lbt.lbtRssiSamplesCount++;
    84f0:	4b1d      	ldr	r3, [pc, #116]	; (8568 <Radio_LBTScanTimeout+0x7c>)
    84f2:	224f      	movs	r2, #79	; 0x4f
    84f4:	5c99      	ldrb	r1, [r3, r2]
    84f6:	3101      	adds	r1, #1
    84f8:	b2c9      	uxtb	r1, r1
    84fa:	5499      	strb	r1, [r3, r2]
	if (radioConfiguration.lbt.lbtRssiSamplesCount <= radioConfiguration.lbt.params.lbtNumOfSamples)
    84fc:	3a0f      	subs	r2, #15
    84fe:	5c9b      	ldrb	r3, [r3, r2]
    8500:	428b      	cmp	r3, r1
    8502:	d218      	bcs.n	8536 <Radio_LBTScanTimeout+0x4a>
		radioConfiguration.lbt.lbtRssiSamples += (tempRssi * radioConfiguration.lbt.lbtRssiSamplesCount);
		SwTimerStart(radioConfiguration.lbt.lbtScanTimerId, radioConfiguration.lbt.lbtScanTimeout, SW_TIMEOUT_RELATIVE, (void *)Radio_LBTScanTimeout, NULL);
	}
	else
	{
		radioEvents.LbtScanDoneEvent = 1;
    8504:	4a19      	ldr	r2, [pc, #100]	; (856c <Radio_LBTScanTimeout+0x80>)
    8506:	8810      	ldrh	r0, [r2, #0]
    8508:	2380      	movs	r3, #128	; 0x80
    850a:	009b      	lsls	r3, r3, #2
    850c:	4303      	orrs	r3, r0
    850e:	8013      	strh	r3, [r2, #0]
		// Since the weights increment linearly like 1, 2, 3 and so on we can use the sum of n natural numbers formula n=(n*(n+1))/2 to calculate the total weights added.
		// Here n is radioConfiguration.lbt.lbtRssiSamplesCount and since it is pre incremented in line #264 we use n=(n*(n-1))/2.
		// So radioConfiguration.lbt.lbtRssiSamples/(((radioConfiguration.lbt.lbtRssiSamplesCount*(radioConfiguration.lbt.lbtRssiSamplesCount-1)))/2) is
		// (radioConfiguration.lbt.lbtRssiSamples*2)/((radioConfiguration.lbt.lbtRssiSamplesCount*(radioConfiguration.lbt.lbtRssiSamplesCount-1)))
		// optimizing to (radioConfiguration.lbt.lbtRssiSamples<<1)/((radioConfiguration.lbt.lbtRssiSamplesCount*(radioConfiguration.lbt.lbtRssiSamplesCount-1)))
		radioConfiguration.lbt.lbtChannelRSSI = (radioConfiguration.lbt.lbtRssiSamples<<1)/((uint16_t)(radioConfiguration.lbt.lbtRssiSamplesCount*(radioConfiguration.lbt.lbtRssiSamplesCount-1)));
    8510:	4c15      	ldr	r4, [pc, #84]	; (8568 <Radio_LBTScanTimeout+0x7c>)
    8512:	6c63      	ldr	r3, [r4, #68]	; 0x44
    8514:	0058      	lsls	r0, r3, #1
    8516:	1e4b      	subs	r3, r1, #1
    8518:	4359      	muls	r1, r3
    851a:	b289      	uxth	r1, r1
    851c:	4b14      	ldr	r3, [pc, #80]	; (8570 <Radio_LBTScanTimeout+0x84>)
    851e:	4798      	blx	r3
    8520:	234c      	movs	r3, #76	; 0x4c
    8522:	52e0      	strh	r0, [r4, r3]
		radioConfiguration.lbt.lbtRssiSamplesCount = 0;
    8524:	2300      	movs	r3, #0
    8526:	224f      	movs	r2, #79	; 0x4f
    8528:	54a3      	strb	r3, [r4, r2]
		radioConfiguration.lbt.lbtRssiSamples = 0;
    852a:	6463      	str	r3, [r4, #68]	; 0x44
		radioPostTask(RADIO_TX_DONE_TASK_ID);
    852c:	2001      	movs	r0, #1
    852e:	4b11      	ldr	r3, [pc, #68]	; (8574 <Radio_LBTScanTimeout+0x88>)
    8530:	4798      	blx	r3
		
#ifdef UT_D
printf("\n Exiting Radio_LBTScanTimeout() \n");
#endif // UT_D
	}
}
    8532:	b004      	add	sp, #16
    8534:	bd10      	pop	{r4, pc}
		Radio_ReadFSKRssi(&tempRssi);
    8536:	240e      	movs	r4, #14
    8538:	446c      	add	r4, sp
    853a:	0020      	movs	r0, r4
    853c:	4b0e      	ldr	r3, [pc, #56]	; (8578 <Radio_LBTScanTimeout+0x8c>)
    853e:	4798      	blx	r3
		radioConfiguration.lbt.lbtRssiSamples += (tempRssi * radioConfiguration.lbt.lbtRssiSamplesCount);
    8540:	4b09      	ldr	r3, [pc, #36]	; (8568 <Radio_LBTScanTimeout+0x7c>)
    8542:	2200      	movs	r2, #0
    8544:	5ea1      	ldrsh	r1, [r4, r2]
    8546:	224f      	movs	r2, #79	; 0x4f
    8548:	5c9a      	ldrb	r2, [r3, r2]
    854a:	434a      	muls	r2, r1
    854c:	6c59      	ldr	r1, [r3, #68]	; 0x44
    854e:	468c      	mov	ip, r1
    8550:	4462      	add	r2, ip
    8552:	645a      	str	r2, [r3, #68]	; 0x44
		SwTimerStart(radioConfiguration.lbt.lbtScanTimerId, radioConfiguration.lbt.lbtScanTimeout, SW_TIMEOUT_RELATIVE, (void *)Radio_LBTScanTimeout, NULL);
    8554:	6c99      	ldr	r1, [r3, #72]	; 0x48
    8556:	2250      	movs	r2, #80	; 0x50
    8558:	5c98      	ldrb	r0, [r3, r2]
    855a:	2300      	movs	r3, #0
    855c:	9300      	str	r3, [sp, #0]
    855e:	4b07      	ldr	r3, [pc, #28]	; (857c <Radio_LBTScanTimeout+0x90>)
    8560:	2200      	movs	r2, #0
    8562:	4c07      	ldr	r4, [pc, #28]	; (8580 <Radio_LBTScanTimeout+0x94>)
    8564:	47a0      	blx	r4
    8566:	e7e4      	b.n	8532 <Radio_LBTScanTimeout+0x46>
    8568:	20003ba8 	.word	0x20003ba8
    856c:	200025a4 	.word	0x200025a4
    8570:	0001520d 	.word	0x0001520d
    8574:	000086ad 	.word	0x000086ad
    8578:	000111f5 	.word	0x000111f5
    857c:	000084ed 	.word	0x000084ed
    8580:	0001099d 	.word	0x0001099d

00008584 <RADIO_ScanHandler>:
{
    8584:	b570      	push	{r4, r5, r6, lr}
    8586:	b082      	sub	sp, #8
    Radio_SetClockInput();
    8588:	4b14      	ldr	r3, [pc, #80]	; (85dc <RADIO_ScanHandler+0x58>)
    858a:	4798      	blx	r3
	Radio_EnableRfControl(RADIO_RFCTRL_RX);
    858c:	2000      	movs	r0, #0
    858e:	4b14      	ldr	r3, [pc, #80]	; (85e0 <RADIO_ScanHandler+0x5c>)
    8590:	4798      	blx	r3
	Radio_WriteFrequency(radioConfiguration.frequency);
    8592:	4c14      	ldr	r4, [pc, #80]	; (85e4 <RADIO_ScanHandler+0x60>)
    8594:	6820      	ldr	r0, [r4, #0]
    8596:	4b14      	ldr	r3, [pc, #80]	; (85e8 <RADIO_ScanHandler+0x64>)
    8598:	4798      	blx	r3
	radioConfiguration.lbt.lbtChannelRSSI = 0;
    859a:	2500      	movs	r5, #0
    859c:	234c      	movs	r3, #76	; 0x4c
    859e:	52e5      	strh	r5, [r4, r3]
	Radio_WriteMode(MODE_SLEEP, MODULATION_FSK, 1);
    85a0:	2201      	movs	r2, #1
    85a2:	2100      	movs	r1, #0
    85a4:	2000      	movs	r0, #0
    85a6:	4e11      	ldr	r6, [pc, #68]	; (85ec <RADIO_ScanHandler+0x68>)
    85a8:	47b0      	blx	r6
	HAL_DisbleDIO0Interrupt();
    85aa:	4b11      	ldr	r3, [pc, #68]	; (85f0 <RADIO_ScanHandler+0x6c>)
    85ac:	4798      	blx	r3
	HAL_DisbleDIO1Interrupt();
    85ae:	4b11      	ldr	r3, [pc, #68]	; (85f4 <RADIO_ScanHandler+0x70>)
    85b0:	4798      	blx	r3
	HAL_DisbleDIO2Interrupt();
    85b2:	4b11      	ldr	r3, [pc, #68]	; (85f8 <RADIO_ScanHandler+0x74>)
    85b4:	4798      	blx	r3
	RADIO_RegisterWrite(REG_FSK_RXBW, FSKBW_200_0KHZ);
    85b6:	2109      	movs	r1, #9
    85b8:	2012      	movs	r0, #18
    85ba:	4b10      	ldr	r3, [pc, #64]	; (85fc <RADIO_ScanHandler+0x78>)
    85bc:	4798      	blx	r3
	Radio_WriteMode(MODE_RXCONT, MODULATION_FSK, 0);
    85be:	2200      	movs	r2, #0
    85c0:	2100      	movs	r1, #0
    85c2:	2005      	movs	r0, #5
    85c4:	47b0      	blx	r6
	SwTimerStart(radioConfiguration.lbt.lbtScanTimerId, local, SW_TIMEOUT_RELATIVE, (void *)Radio_LBTScanTimeout, NULL);
    85c6:	2350      	movs	r3, #80	; 0x50
    85c8:	5ce0      	ldrb	r0, [r4, r3]
    85ca:	9500      	str	r5, [sp, #0]
    85cc:	4b0c      	ldr	r3, [pc, #48]	; (8600 <RADIO_ScanHandler+0x7c>)
    85ce:	2200      	movs	r2, #0
    85d0:	490c      	ldr	r1, [pc, #48]	; (8604 <RADIO_ScanHandler+0x80>)
    85d2:	4c0d      	ldr	r4, [pc, #52]	; (8608 <RADIO_ScanHandler+0x84>)
    85d4:	47a0      	blx	r4
}
    85d6:	2000      	movs	r0, #0
    85d8:	b002      	add	sp, #8
    85da:	bd70      	pop	{r4, r5, r6, pc}
    85dc:	00008de1 	.word	0x00008de1
    85e0:	000089c5 	.word	0x000089c5
    85e4:	20003ba8 	.word	0x20003ba8
    85e8:	00007e39 	.word	0x00007e39
    85ec:	00010fd9 	.word	0x00010fd9
    85f0:	0000fe35 	.word	0x0000fe35
    85f4:	0000fe55 	.word	0x0000fe55
    85f8:	0000fe75 	.word	0x0000fe75
    85fc:	0000fd51 	.word	0x0000fd51
    8600:	000084ed 	.word	0x000084ed
    8604:	00002328 	.word	0x00002328
    8608:	0001099d 	.word	0x0001099d

0000860c <radioScanDoneHandler>:
{
    860c:	b500      	push	{lr}
    860e:	b085      	sub	sp, #20
	radioEvents.LbtScanDoneEvent = 0;
    8610:	4a1a      	ldr	r2, [pc, #104]	; (867c <radioScanDoneHandler+0x70>)
    8612:	8813      	ldrh	r3, [r2, #0]
    8614:	491a      	ldr	r1, [pc, #104]	; (8680 <radioScanDoneHandler+0x74>)
    8616:	400b      	ands	r3, r1
    8618:	8013      	strh	r3, [r2, #0]
	Radio_WriteMode(MODE_SLEEP, MODULATION_FSK, 0);
    861a:	2200      	movs	r2, #0
    861c:	2100      	movs	r1, #0
    861e:	2000      	movs	r0, #0
    8620:	4b18      	ldr	r3, [pc, #96]	; (8684 <radioScanDoneHandler+0x78>)
    8622:	4798      	blx	r3
	HAL_EnableDIO0Interrupt();
    8624:	4b18      	ldr	r3, [pc, #96]	; (8688 <radioScanDoneHandler+0x7c>)
    8626:	4798      	blx	r3
	HAL_EnableDIO1Interrupt();
    8628:	4b18      	ldr	r3, [pc, #96]	; (868c <radioScanDoneHandler+0x80>)
    862a:	4798      	blx	r3
	HAL_EnableDIO2Interrupt();
    862c:	4b18      	ldr	r3, [pc, #96]	; (8690 <radioScanDoneHandler+0x84>)
    862e:	4798      	blx	r3
	Radio_DisableRfControl(RADIO_RFCTRL_RX);
    8630:	2000      	movs	r0, #0
    8632:	4b18      	ldr	r3, [pc, #96]	; (8694 <radioScanDoneHandler+0x88>)
    8634:	4798      	blx	r3
	Radio_ResetClockInput();
    8636:	4b18      	ldr	r3, [pc, #96]	; (8698 <radioScanDoneHandler+0x8c>)
    8638:	4798      	blx	r3
	if (radioConfiguration.lbt.lbtChannelRSSI < radioConfiguration.lbt.params.lbtThreshold)
    863a:	4b18      	ldr	r3, [pc, #96]	; (869c <radioScanDoneHandler+0x90>)
    863c:	224c      	movs	r2, #76	; 0x4c
    863e:	5e9a      	ldrsh	r2, [r3, r2]
    8640:	213e      	movs	r1, #62	; 0x3e
    8642:	5e5b      	ldrsh	r3, [r3, r1]
    8644:	429a      	cmp	r2, r3
    8646:	db11      	blt.n	866c <radioScanDoneHandler+0x60>
		RadioCallbackParam.status = ERR_CHANNEL_BUSY;
    8648:	2207      	movs	r2, #7
    864a:	ab01      	add	r3, sp, #4
    864c:	701a      	strb	r2, [r3, #0]
		RadioSetState(RADIO_STATE_IDLE);
    864e:	2001      	movs	r0, #1
    8650:	4b13      	ldr	r3, [pc, #76]	; (86a0 <radioScanDoneHandler+0x94>)
    8652:	4798      	blx	r3
		if (1 == radioCallbackMask.BitMask.radioTxDoneCallback)
    8654:	4b13      	ldr	r3, [pc, #76]	; (86a4 <radioScanDoneHandler+0x98>)
    8656:	781b      	ldrb	r3, [r3, #0]
    8658:	079b      	lsls	r3, r3, #30
    865a:	d50c      	bpl.n	8676 <radioScanDoneHandler+0x6a>
			if (radioConfiguration.radioCallback)
    865c:	4b0f      	ldr	r3, [pc, #60]	; (869c <radioScanDoneHandler+0x90>)
    865e:	691b      	ldr	r3, [r3, #16]
    8660:	2b00      	cmp	r3, #0
    8662:	d008      	beq.n	8676 <radioScanDoneHandler+0x6a>
				radioConfiguration.radioCallback(RADIO_TX_DONE_CALLBACK, (void *) &(RadioCallbackParam));
    8664:	a901      	add	r1, sp, #4
    8666:	2002      	movs	r0, #2
    8668:	4798      	blx	r3
    866a:	e004      	b.n	8676 <radioScanDoneHandler+0x6a>
		RadioSetState(RADIO_STATE_TX);
    866c:	2002      	movs	r0, #2
    866e:	4b0c      	ldr	r3, [pc, #48]	; (86a0 <radioScanDoneHandler+0x94>)
    8670:	4798      	blx	r3
		RADIO_TxHandler();
    8672:	4b0d      	ldr	r3, [pc, #52]	; (86a8 <radioScanDoneHandler+0x9c>)
    8674:	4798      	blx	r3
}
    8676:	2000      	movs	r0, #0
    8678:	b005      	add	sp, #20
    867a:	bd00      	pop	{pc}
    867c:	200025a4 	.word	0x200025a4
    8680:	fffffdff 	.word	0xfffffdff
    8684:	00010fd9 	.word	0x00010fd9
    8688:	0000fe25 	.word	0x0000fe25
    868c:	0000fe45 	.word	0x0000fe45
    8690:	0000fe65 	.word	0x0000fe65
    8694:	000089fd 	.word	0x000089fd
    8698:	00008f39 	.word	0x00008f39
    869c:	20003ba8 	.word	0x20003ba8
    86a0:	00008771 	.word	0x00008771
    86a4:	200025a8 	.word	0x200025a8
    86a8:	00009201 	.word	0x00009201

000086ac <radioPostTask>:
\brief Set task for RADIO task manager.

\param[in] id - a single value from the type RadioTaskIds_t
******************************************************************************/
void radioPostTask(RadioTaskIds_t id)
{
    86ac:	b510      	push	{r4, lr}
    86ae:	0004      	movs	r4, r0
    ATOMIC_SECTION_ENTER
    86b0:	4b05      	ldr	r3, [pc, #20]	; (86c8 <radioPostTask+0x1c>)
    86b2:	4798      	blx	r3
    radioTaskFlags |= id;
    86b4:	4b05      	ldr	r3, [pc, #20]	; (86cc <radioPostTask+0x20>)
    86b6:	8818      	ldrh	r0, [r3, #0]
    86b8:	4320      	orrs	r0, r4
    86ba:	8018      	strh	r0, [r3, #0]
    ATOMIC_SECTION_EXIT
    86bc:	4b04      	ldr	r3, [pc, #16]	; (86d0 <radioPostTask+0x24>)
    86be:	4798      	blx	r3

    /* Also post a RADIO task to the system */
    SYSTEM_PostTask(RADIO_TASK_ID);
    86c0:	2002      	movs	r0, #2
    86c2:	4b04      	ldr	r3, [pc, #16]	; (86d4 <radioPostTask+0x28>)
    86c4:	4798      	blx	r3
}
    86c6:	bd10      	pop	{r4, pc}
    86c8:	0000ff69 	.word	0x0000ff69
    86cc:	20000300 	.word	0x20000300
    86d0:	0000ff75 	.word	0x0000ff75
    86d4:	00010fb5 	.word	0x00010fb5

000086d8 <radioClearTask>:
\brief Clear task for RADIO task manager.

\param[in] id - a single value from the type RadioTaskIds_t
******************************************************************************/
void radioClearTask(RadioTaskIds_t id)
{
    86d8:	b510      	push	{r4, lr}
    86da:	0004      	movs	r4, r0
    ATOMIC_SECTION_ENTER
    86dc:	4b04      	ldr	r3, [pc, #16]	; (86f0 <radioClearTask+0x18>)
    86de:	4798      	blx	r3
    radioTaskFlags &= ~id;
    86e0:	4a04      	ldr	r2, [pc, #16]	; (86f4 <radioClearTask+0x1c>)
    86e2:	8813      	ldrh	r3, [r2, #0]
    86e4:	43a3      	bics	r3, r4
    86e6:	8013      	strh	r3, [r2, #0]
    ATOMIC_SECTION_EXIT
    86e8:	4b03      	ldr	r3, [pc, #12]	; (86f8 <radioClearTask+0x20>)
    86ea:	4798      	blx	r3
}
    86ec:	bd10      	pop	{r4, pc}
    86ee:	46c0      	nop			; (mov r8, r8)
    86f0:	0000ff69 	.word	0x0000ff69
    86f4:	20000300 	.word	0x20000300
    86f8:	0000ff75 	.word	0x0000ff75

000086fc <RADIO_TaskHandler>:

/**************************************************************************//**
\brief RADIO task handler.
******************************************************************************/
SYSTEM_TaskStatus_t RADIO_TaskHandler(void)
{
    86fc:	b570      	push	{r4, r5, r6, lr}
#ifdef UT_D
    printf("\n Starting RADIO_TaskHandler() \n");
#endif

    if (radioTaskFlags)
    86fe:	4b17      	ldr	r3, [pc, #92]	; (875c <RADIO_TaskHandler+0x60>)
    8700:	881b      	ldrh	r3, [r3, #0]
    8702:	b29b      	uxth	r3, r3
    8704:	2b00      	cmp	r3, #0
    8706:	d00f      	beq.n	8728 <RADIO_TaskHandler+0x2c>
    {
        for (uint16_t taskId = 0; taskId < RADIO_TASKS_COUNT; taskId++)
        {
            if ((1 << taskId) & (radioTaskFlags))
    8708:	4b14      	ldr	r3, [pc, #80]	; (875c <RADIO_TaskHandler+0x60>)
    870a:	881b      	ldrh	r3, [r3, #0]
    870c:	07db      	lsls	r3, r3, #31
    870e:	d40d      	bmi.n	872c <RADIO_TaskHandler+0x30>
    8710:	2201      	movs	r2, #1
    8712:	4812      	ldr	r0, [pc, #72]	; (875c <RADIO_TaskHandler+0x60>)
    8714:	2101      	movs	r1, #1
    8716:	8803      	ldrh	r3, [r0, #0]
    8718:	b29b      	uxth	r3, r3
    871a:	0014      	movs	r4, r2
    871c:	4113      	asrs	r3, r2
    871e:	4219      	tst	r1, r3
    8720:	d105      	bne.n	872e <RADIO_TaskHandler+0x32>
    8722:	3201      	adds	r2, #1
        for (uint16_t taskId = 0; taskId < RADIO_TASKS_COUNT; taskId++)
    8724:	2a05      	cmp	r2, #5
    8726:	d1f6      	bne.n	8716 <RADIO_TaskHandler+0x1a>
       * SYSTEM_PostTask(RADIO_TASK_ID);
     * }
     */

    return SYSTEM_TASK_SUCCESS;
}
    8728:	2000      	movs	r0, #0
    872a:	bd70      	pop	{r4, r5, r6, pc}
            if ((1 << taskId) & (radioTaskFlags))
    872c:	2400      	movs	r4, #0
                ATOMIC_SECTION_ENTER
    872e:	4b0c      	ldr	r3, [pc, #48]	; (8760 <RADIO_TaskHandler+0x64>)
    8730:	4798      	blx	r3
                radioTaskFlags &= ~(1 << taskId);
    8732:	4d0a      	ldr	r5, [pc, #40]	; (875c <RADIO_TaskHandler+0x60>)
    8734:	882b      	ldrh	r3, [r5, #0]
    8736:	2201      	movs	r2, #1
    8738:	40a2      	lsls	r2, r4
    873a:	4393      	bics	r3, r2
    873c:	802b      	strh	r3, [r5, #0]
                ATOMIC_SECTION_EXIT
    873e:	4b09      	ldr	r3, [pc, #36]	; (8764 <RADIO_TaskHandler+0x68>)
    8740:	4798      	blx	r3
                radioTaskHandlers[taskId]();
    8742:	00a4      	lsls	r4, r4, #2
    8744:	4b08      	ldr	r3, [pc, #32]	; (8768 <RADIO_TaskHandler+0x6c>)
    8746:	58e3      	ldr	r3, [r4, r3]
    8748:	4798      	blx	r3
                if (radioTaskFlags)
    874a:	882b      	ldrh	r3, [r5, #0]
    874c:	b29b      	uxth	r3, r3
    874e:	2b00      	cmp	r3, #0
    8750:	d0ea      	beq.n	8728 <RADIO_TaskHandler+0x2c>
                    SYSTEM_PostTask(RADIO_TASK_ID);
    8752:	2002      	movs	r0, #2
    8754:	4b05      	ldr	r3, [pc, #20]	; (876c <RADIO_TaskHandler+0x70>)
    8756:	4798      	blx	r3
    8758:	e7e6      	b.n	8728 <RADIO_TaskHandler+0x2c>
    875a:	46c0      	nop			; (mov r8, r8)
    875c:	20000300 	.word	0x20000300
    8760:	0000ff69 	.word	0x0000ff69
    8764:	0000ff75 	.word	0x0000ff75
    8768:	00019f80 	.word	0x00019f80
    876c:	00010fb5 	.word	0x00010fb5

00008770 <RadioSetState>:

\param state - The state of the radio to be set to.
*************************************************************************/
void RadioSetState(RadioState_t state)
{
	radioState = state;
    8770:	4b01      	ldr	r3, [pc, #4]	; (8778 <RadioSetState+0x8>)
    8772:	7018      	strb	r0, [r3, #0]
}
    8774:	4770      	bx	lr
    8776:	46c0      	nop			; (mov r8, r8)
    8778:	200025a9 	.word	0x200025a9

0000877c <RADIO_GetState>:

\return - The current state of the radio.
*************************************************************************/
RadioState_t RADIO_GetState(void)
{
	return radioState;
    877c:	4b01      	ldr	r3, [pc, #4]	; (8784 <RADIO_GetState+0x8>)
    877e:	7818      	ldrb	r0, [r3, #0]
    8780:	b2c0      	uxtb	r0, r0
}
    8782:	4770      	bx	lr
    8784:	200025a9 	.word	0x200025a9

00008788 <RADIO_SetCallbackBitmask>:

\param bitmask - The bitmask for enabling callbacks.
*************************************************************************/
void RADIO_SetCallbackBitmask(uint8_t bitmask)
{
  radioCallbackMask.callbackMask |= bitmask;
    8788:	4a02      	ldr	r2, [pc, #8]	; (8794 <RADIO_SetCallbackBitmask+0xc>)
    878a:	7813      	ldrb	r3, [r2, #0]
    878c:	4318      	orrs	r0, r3
    878e:	7010      	strb	r0, [r2, #0]
}
    8790:	4770      	bx	lr
    8792:	46c0      	nop			; (mov r8, r8)
    8794:	200025a8 	.word	0x200025a8

00008798 <RADIO_Transmit>:

\param param 	- Stores the transmission parameters.
\return			- The error condition for the transmit operation.
*************************************************************************/
RadioError_t RADIO_Transmit(RadioTransmitParam_t *param)
{
    8798:	b570      	push	{r4, r5, r6, lr}
    879a:	0004      	movs	r4, r0
	return radioState;
    879c:	4b0f      	ldr	r3, [pc, #60]	; (87dc <RADIO_Transmit+0x44>)
    879e:	781b      	ldrb	r3, [r3, #0]
	/*          current behavior of the code because timers are not			*/
	/*          separated for Rx and Tx, they are reused.					*/
	/************************************************************************/
    if (RADIO_STATE_IDLE != RADIO_GetState())
    {
        return ERR_RADIO_BUSY;
    87a0:	2004      	movs	r0, #4
    if (RADIO_STATE_IDLE != RADIO_GetState())
    87a2:	2b01      	cmp	r3, #1
    87a4:	d000      	beq.n	87a8 <RADIO_Transmit+0x10>
	#ifdef UT_D
	printf("\n Done RADIO_Transmit() \n");
	#endif

	return ERR_NONE;
}
    87a6:	bd70      	pop	{r4, r5, r6, pc}
	SwTimerStop(radioConfiguration.watchdogTimerId);
    87a8:	4d0d      	ldr	r5, [pc, #52]	; (87e0 <RADIO_Transmit+0x48>)
    87aa:	332e      	adds	r3, #46	; 0x2e
    87ac:	5ce8      	ldrb	r0, [r5, r3]
    87ae:	4b0d      	ldr	r3, [pc, #52]	; (87e4 <RADIO_Transmit+0x4c>)
    87b0:	4798      	blx	r3
    txBufferLen = param->bufferLen;
    87b2:	7823      	ldrb	r3, [r4, #0]
    87b4:	4a0c      	ldr	r2, [pc, #48]	; (87e8 <RADIO_Transmit+0x50>)
    87b6:	7013      	strb	r3, [r2, #0]
    transmitBufferPtr = (param->bufferPtr);
    87b8:	6861      	ldr	r1, [r4, #4]
    87ba:	4a0c      	ldr	r2, [pc, #48]	; (87ec <RADIO_Transmit+0x54>)
    87bc:	6011      	str	r1, [r2, #0]
	if ((radioConfiguration.modulation == MODULATION_FSK) && (txBufferLen  > RADIO_TX_FIFO_LEVEL))
    87be:	2234      	movs	r2, #52	; 0x34
    87c0:	5caa      	ldrb	r2, [r5, r2]
    87c2:	2a00      	cmp	r2, #0
    87c4:	d102      	bne.n	87cc <RADIO_Transmit+0x34>
		return ERR_DATA_SIZE;
    87c6:	2002      	movs	r0, #2
	if ((radioConfiguration.modulation == MODULATION_FSK) && (txBufferLen  > RADIO_TX_FIFO_LEVEL))
    87c8:	2b3f      	cmp	r3, #63	; 0x3f
    87ca:	d8ec      	bhi.n	87a6 <RADIO_Transmit+0xe>
	radioState = state;
    87cc:	2202      	movs	r2, #2
    87ce:	4b03      	ldr	r3, [pc, #12]	; (87dc <RADIO_Transmit+0x44>)
    87d0:	701a      	strb	r2, [r3, #0]
		radioPostTask(RADIO_TX_TASK_ID);
    87d2:	2004      	movs	r0, #4
    87d4:	4b06      	ldr	r3, [pc, #24]	; (87f0 <RADIO_Transmit+0x58>)
    87d6:	4798      	blx	r3
	return ERR_NONE;
    87d8:	2000      	movs	r0, #0
    87da:	e7e4      	b.n	87a6 <RADIO_Transmit+0xe>
    87dc:	200025a9 	.word	0x200025a9
    87e0:	20003ba8 	.word	0x20003ba8
    87e4:	00010cb5 	.word	0x00010cb5
    87e8:	20000314 	.word	0x20000314
    87ec:	20000310 	.word	0x20000310
    87f0:	000086ad 	.word	0x000086ad

000087f4 <Radio_FSKTxPayloadHandler>:
\param[in] buffer Pointer to the data to be written into the frame buffer
\param[in] bufferLen Length of the data to be written
\return     - none
*************************************************************************/
void Radio_FSKTxPayloadHandler(uint8_t *buffer, uint8_t bufferLen)
{
    87f4:	b570      	push	{r4, r5, r6, lr}
    87f6:	000c      	movs	r4, r1
#ifndef UT
	cpu_irq_enter_critical();
    87f8:	4b25      	ldr	r3, [pc, #148]	; (8890 <Radio_FSKTxPayloadHandler+0x9c>)
    87fa:	4798      	blx	r3
	if (radioConfiguration.fskPayloadIndex == 0)
    87fc:	2358      	movs	r3, #88	; 0x58
    87fe:	4a25      	ldr	r2, [pc, #148]	; (8894 <Radio_FSKTxPayloadHandler+0xa0>)
    8800:	5cd3      	ldrb	r3, [r2, r3]
    8802:	2b00      	cmp	r3, #0
    8804:	d118      	bne.n	8838 <Radio_FSKTxPayloadHandler+0x44>
	{
		if (bufferLen != 0)
    8806:	2c00      	cmp	r4, #0
    8808:	d030      	beq.n	886c <Radio_FSKTxPayloadHandler+0x78>
		{
			if (bufferLen < RADIO_TX_FIFO_LEVEL)
    880a:	2c3e      	cmp	r4, #62	; 0x3e
    880c:	d809      	bhi.n	8822 <Radio_FSKTxPayloadHandler+0x2e>
			{
				RADIO_FrameWrite(REG_FIFO_ADDRESS, transmitBufferPtr, bufferLen);
    880e:	4b22      	ldr	r3, [pc, #136]	; (8898 <Radio_FSKTxPayloadHandler+0xa4>)
    8810:	6819      	ldr	r1, [r3, #0]
    8812:	0022      	movs	r2, r4
    8814:	2000      	movs	r0, #0
    8816:	4b21      	ldr	r3, [pc, #132]	; (889c <Radio_FSKTxPayloadHandler+0xa8>)
    8818:	4798      	blx	r3
				radioConfiguration.fskPayloadIndex = bufferLen;
    881a:	2358      	movs	r3, #88	; 0x58
    881c:	4a1d      	ldr	r2, [pc, #116]	; (8894 <Radio_FSKTxPayloadHandler+0xa0>)
    881e:	54d4      	strb	r4, [r2, r3]
    8820:	e024      	b.n	886c <Radio_FSKTxPayloadHandler+0x78>
			}
			else
			{
				RADIO_FrameWrite(REG_FIFO_ADDRESS, transmitBufferPtr, RADIO_TX_FIFO_LEVEL);
    8822:	4b1d      	ldr	r3, [pc, #116]	; (8898 <Radio_FSKTxPayloadHandler+0xa4>)
    8824:	6819      	ldr	r1, [r3, #0]
    8826:	223f      	movs	r2, #63	; 0x3f
    8828:	2000      	movs	r0, #0
    882a:	4b1c      	ldr	r3, [pc, #112]	; (889c <Radio_FSKTxPayloadHandler+0xa8>)
    882c:	4798      	blx	r3
				radioConfiguration.fskPayloadIndex = RADIO_TX_FIFO_LEVEL;
    882e:	213f      	movs	r1, #63	; 0x3f
    8830:	2358      	movs	r3, #88	; 0x58
    8832:	4a18      	ldr	r2, [pc, #96]	; (8894 <Radio_FSKTxPayloadHandler+0xa0>)
    8834:	54d1      	strb	r1, [r2, r3]
    8836:	e019      	b.n	886c <Radio_FSKTxPayloadHandler+0x78>
			}
		}
	} 
	else
	{
		if ((bufferLen - radioConfiguration.fskPayloadIndex) != 0)
    8838:	2358      	movs	r3, #88	; 0x58
    883a:	4a16      	ldr	r2, [pc, #88]	; (8894 <Radio_FSKTxPayloadHandler+0xa0>)
    883c:	5cd3      	ldrb	r3, [r2, r3]
    883e:	b2db      	uxtb	r3, r3
    8840:	429c      	cmp	r4, r3
    8842:	d013      	beq.n	886c <Radio_FSKTxPayloadHandler+0x78>
		{
			if ((uint8_t)(bufferLen - radioConfiguration.fskPayloadIndex) <= RADIO_TX_FIFO_LEVEL)
    8844:	2358      	movs	r3, #88	; 0x58
    8846:	5cd3      	ldrb	r3, [r2, r3]
    8848:	1ae3      	subs	r3, r4, r3
    884a:	b2db      	uxtb	r3, r3
    884c:	2b3f      	cmp	r3, #63	; 0x3f
    884e:	d910      	bls.n	8872 <Radio_FSKTxPayloadHandler+0x7e>
				RADIO_FrameWrite(REG_FIFO_ADDRESS, transmitBufferPtr + radioConfiguration.fskPayloadIndex, (bufferLen - radioConfiguration.fskPayloadIndex));
				radioConfiguration.fskPayloadIndex = bufferLen;
			}
			else
			{
				RADIO_FrameWrite(REG_FIFO_ADDRESS, transmitBufferPtr + radioConfiguration.fskPayloadIndex, RADIO_TX_FIFO_LEVEL);
    8850:	4d10      	ldr	r5, [pc, #64]	; (8894 <Radio_FSKTxPayloadHandler+0xa0>)
    8852:	2458      	movs	r4, #88	; 0x58
    8854:	5d2b      	ldrb	r3, [r5, r4]
    8856:	4a10      	ldr	r2, [pc, #64]	; (8898 <Radio_FSKTxPayloadHandler+0xa4>)
    8858:	6811      	ldr	r1, [r2, #0]
    885a:	18c9      	adds	r1, r1, r3
    885c:	223f      	movs	r2, #63	; 0x3f
    885e:	2000      	movs	r0, #0
    8860:	4b0e      	ldr	r3, [pc, #56]	; (889c <Radio_FSKTxPayloadHandler+0xa8>)
    8862:	4798      	blx	r3
				radioConfiguration.fskPayloadIndex += RADIO_TX_FIFO_LEVEL;
    8864:	5d2b      	ldrb	r3, [r5, r4]
    8866:	333f      	adds	r3, #63	; 0x3f
    8868:	b2db      	uxtb	r3, r3
    886a:	552b      	strb	r3, [r5, r4]
			}
		}
	}
	cpu_irq_leave_critical();
    886c:	4b0c      	ldr	r3, [pc, #48]	; (88a0 <Radio_FSKTxPayloadHandler+0xac>)
    886e:	4798      	blx	r3
#endif //UT_D	
}
    8870:	bd70      	pop	{r4, r5, r6, pc}
				RADIO_FrameWrite(REG_FIFO_ADDRESS, transmitBufferPtr + radioConfiguration.fskPayloadIndex, (bufferLen - radioConfiguration.fskPayloadIndex));
    8872:	0016      	movs	r6, r2
    8874:	2558      	movs	r5, #88	; 0x58
    8876:	5d53      	ldrb	r3, [r2, r5]
    8878:	5d52      	ldrb	r2, [r2, r5]
    887a:	1aa2      	subs	r2, r4, r2
    887c:	b2d2      	uxtb	r2, r2
    887e:	4906      	ldr	r1, [pc, #24]	; (8898 <Radio_FSKTxPayloadHandler+0xa4>)
    8880:	6809      	ldr	r1, [r1, #0]
    8882:	18c9      	adds	r1, r1, r3
    8884:	2000      	movs	r0, #0
    8886:	4b05      	ldr	r3, [pc, #20]	; (889c <Radio_FSKTxPayloadHandler+0xa8>)
    8888:	4798      	blx	r3
				radioConfiguration.fskPayloadIndex = bufferLen;
    888a:	5574      	strb	r4, [r6, r5]
    888c:	e7ee      	b.n	886c <Radio_FSKTxPayloadHandler+0x78>
    888e:	46c0      	nop			; (mov r8, r8)
    8890:	00004aa1 	.word	0x00004aa1
    8894:	20003ba8 	.word	0x20003ba8
    8898:	20000310 	.word	0x20000310
    889c:	0000fda5 	.word	0x0000fda5
    88a0:	00004ae1 	.word	0x00004ae1

000088a4 <RADIO_FSKSyncAddr>:

\param		- none	
\return		- none.
*************************************************************************/
void RADIO_FSKSyncAddr(void)
{
    88a4:	b510      	push	{r4, lr}
#ifndef UT
	cpu_irq_enter_critical();
    88a6:	4b08      	ldr	r3, [pc, #32]	; (88c8 <RADIO_FSKSyncAddr+0x24>)
    88a8:	4798      	blx	r3
	if (MODULATION_FSK == radioConfiguration.modulation)
    88aa:	2334      	movs	r3, #52	; 0x34
    88ac:	4a07      	ldr	r2, [pc, #28]	; (88cc <RADIO_FSKSyncAddr+0x28>)
    88ae:	5cd3      	ldrb	r3, [r2, r3]
    88b0:	2b00      	cmp	r3, #0
    88b2:	d105      	bne.n	88c0 <RADIO_FSKSyncAddr+0x1c>
	{
		//Clear the FSK length and index variables
		radioConfiguration.dataBufferLen = 0;
    88b4:	0013      	movs	r3, r2
    88b6:	2200      	movs	r2, #0
    88b8:	212c      	movs	r1, #44	; 0x2c
    88ba:	545a      	strb	r2, [r3, r1]
		radioConfiguration.fskPayloadIndex = 0;
    88bc:	312c      	adds	r1, #44	; 0x2c
    88be:	545a      	strb	r2, [r3, r1]
	}
	cpu_irq_leave_critical();
    88c0:	4b03      	ldr	r3, [pc, #12]	; (88d0 <RADIO_FSKSyncAddr+0x2c>)
    88c2:	4798      	blx	r3
#endif //UT
}
    88c4:	bd10      	pop	{r4, pc}
    88c6:	46c0      	nop			; (mov r8, r8)
    88c8:	00004aa1 	.word	0x00004aa1
    88cc:	20003ba8 	.word	0x20003ba8
    88d0:	00004ae1 	.word	0x00004ae1

000088d4 <RADIO_FSKFifoLevel>:

\param  - none
\return - none
*************************************************************************/
void RADIO_FSKFifoLevel(void)
{
    88d4:	b570      	push	{r4, r5, r6, lr}
#ifndef UT
	cpu_irq_enter_critical();
    88d6:	4b2a      	ldr	r3, [pc, #168]	; (8980 <RADIO_FSKFifoLevel+0xac>)
    88d8:	4798      	blx	r3
	// The following code will be executed if radioConfiguration.dataBufferLen, radioConfiguration.fskPayloadIndex are not zero and if they are not equal
	if (!((radioConfiguration.dataBufferLen == radioConfiguration.fskPayloadIndex) && (radioConfiguration.dataBufferLen != 0) && (radioConfiguration.fskPayloadIndex != 0)))
    88da:	4a2a      	ldr	r2, [pc, #168]	; (8984 <RADIO_FSKFifoLevel+0xb0>)
    88dc:	232c      	movs	r3, #44	; 0x2c
    88de:	5cd3      	ldrb	r3, [r2, r3]
    88e0:	2158      	movs	r1, #88	; 0x58
    88e2:	5c52      	ldrb	r2, [r2, r1]
    88e4:	b2db      	uxtb	r3, r3
    88e6:	4293      	cmp	r3, r2
    88e8:	d019      	beq.n	891e <RADIO_FSKFifoLevel+0x4a>
	{
		if (radioConfiguration.dataBufferLen == 0)
    88ea:	232c      	movs	r3, #44	; 0x2c
    88ec:	4a25      	ldr	r2, [pc, #148]	; (8984 <RADIO_FSKFifoLevel+0xb0>)
    88ee:	5cd3      	ldrb	r3, [r2, r3]
    88f0:	2b00      	cmp	r3, #0
    88f2:	d01e      	beq.n	8932 <RADIO_FSKFifoLevel+0x5e>
		{
			RADIO_FrameRead(REG_FIFO_ADDRESS,(uint8_t *)&radioConfiguration.dataBufferLen, 1);
		}
		if ((uint8_t)(radioConfiguration.dataBufferLen - radioConfiguration.fskPayloadIndex) < RADIO_RX_FIFO_LEVEL)
    88f4:	4a23      	ldr	r2, [pc, #140]	; (8984 <RADIO_FSKFifoLevel+0xb0>)
    88f6:	232c      	movs	r3, #44	; 0x2c
    88f8:	5cd3      	ldrb	r3, [r2, r3]
    88fa:	2158      	movs	r1, #88	; 0x58
    88fc:	5c52      	ldrb	r2, [r2, r1]
    88fe:	1a9b      	subs	r3, r3, r2
    8900:	b2db      	uxtb	r3, r3
    8902:	2b3e      	cmp	r3, #62	; 0x3e
    8904:	d91b      	bls.n	893e <RADIO_FSKFifoLevel+0x6a>
		{
			RADIO_FrameRead(REG_FIFO_ADDRESS, radioConfiguration.dataBuffer + radioConfiguration.fskPayloadIndex, radioConfiguration.dataBufferLen - radioConfiguration.fskPayloadIndex);
			radioConfiguration.fskPayloadIndex = radioConfiguration.dataBufferLen;
		}
		else if ((uint8_t)(radioConfiguration.dataBufferLen - radioConfiguration.fskPayloadIndex) > RADIO_RX_FIFO_LEVEL)
    8906:	4a1f      	ldr	r2, [pc, #124]	; (8984 <RADIO_FSKFifoLevel+0xb0>)
    8908:	232c      	movs	r3, #44	; 0x2c
    890a:	5cd3      	ldrb	r3, [r2, r3]
    890c:	2158      	movs	r1, #88	; 0x58
    890e:	5c52      	ldrb	r2, [r2, r1]
    8910:	1a9b      	subs	r3, r3, r2
    8912:	b2db      	uxtb	r3, r3
    8914:	2b3f      	cmp	r3, #63	; 0x3f
    8916:	d824      	bhi.n	8962 <RADIO_FSKFifoLevel+0x8e>
		}
		// intentionally omitted handling the condition "if(radioConfiguration.dataBufferLen == RADIO_RX_FIFO_LEVEL) and 
		// if(radioConfiguration.dataBufferLen - radioConfiguration.fskPayloadIndex == RADIO_RX_FIFO_LEVEL)"
		// because emptying the frame buffer here will prevent "Payload ready" interrupt from being fired.
	}
	cpu_irq_leave_critical();
    8918:	4b1b      	ldr	r3, [pc, #108]	; (8988 <RADIO_FSKFifoLevel+0xb4>)
    891a:	4798      	blx	r3
#endif //UT
}
    891c:	bd70      	pop	{r4, r5, r6, pc}
	if (!((radioConfiguration.dataBufferLen == radioConfiguration.fskPayloadIndex) && (radioConfiguration.dataBufferLen != 0) && (radioConfiguration.fskPayloadIndex != 0)))
    891e:	232c      	movs	r3, #44	; 0x2c
    8920:	4a18      	ldr	r2, [pc, #96]	; (8984 <RADIO_FSKFifoLevel+0xb0>)
    8922:	5cd3      	ldrb	r3, [r2, r3]
    8924:	2b00      	cmp	r3, #0
    8926:	d0e0      	beq.n	88ea <RADIO_FSKFifoLevel+0x16>
    8928:	2358      	movs	r3, #88	; 0x58
    892a:	5cd3      	ldrb	r3, [r2, r3]
    892c:	2b00      	cmp	r3, #0
    892e:	d0dc      	beq.n	88ea <RADIO_FSKFifoLevel+0x16>
    8930:	e7f2      	b.n	8918 <RADIO_FSKFifoLevel+0x44>
			RADIO_FrameRead(REG_FIFO_ADDRESS,(uint8_t *)&radioConfiguration.dataBufferLen, 1);
    8932:	2201      	movs	r2, #1
    8934:	4915      	ldr	r1, [pc, #84]	; (898c <RADIO_FSKFifoLevel+0xb8>)
    8936:	2000      	movs	r0, #0
    8938:	4b15      	ldr	r3, [pc, #84]	; (8990 <RADIO_FSKFifoLevel+0xbc>)
    893a:	4798      	blx	r3
    893c:	e7da      	b.n	88f4 <RADIO_FSKFifoLevel+0x20>
			RADIO_FrameRead(REG_FIFO_ADDRESS, radioConfiguration.dataBuffer + radioConfiguration.fskPayloadIndex, radioConfiguration.dataBufferLen - radioConfiguration.fskPayloadIndex);
    893e:	4c11      	ldr	r4, [pc, #68]	; (8984 <RADIO_FSKFifoLevel+0xb0>)
    8940:	2558      	movs	r5, #88	; 0x58
    8942:	5d61      	ldrb	r1, [r4, r5]
    8944:	262c      	movs	r6, #44	; 0x2c
    8946:	5da2      	ldrb	r2, [r4, r6]
    8948:	5d63      	ldrb	r3, [r4, r5]
    894a:	1ad2      	subs	r2, r2, r3
    894c:	b2d2      	uxtb	r2, r2
    894e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    8950:	469c      	mov	ip, r3
    8952:	4461      	add	r1, ip
    8954:	2000      	movs	r0, #0
    8956:	4b0e      	ldr	r3, [pc, #56]	; (8990 <RADIO_FSKFifoLevel+0xbc>)
    8958:	4798      	blx	r3
			radioConfiguration.fskPayloadIndex = radioConfiguration.dataBufferLen;
    895a:	5da3      	ldrb	r3, [r4, r6]
    895c:	b2db      	uxtb	r3, r3
    895e:	5563      	strb	r3, [r4, r5]
    8960:	e7da      	b.n	8918 <RADIO_FSKFifoLevel+0x44>
			RADIO_FrameRead(REG_FIFO_ADDRESS, radioConfiguration.dataBuffer + radioConfiguration.fskPayloadIndex, RADIO_RX_FIFO_LEVEL);
    8962:	4c08      	ldr	r4, [pc, #32]	; (8984 <RADIO_FSKFifoLevel+0xb0>)
    8964:	2558      	movs	r5, #88	; 0x58
    8966:	5d61      	ldrb	r1, [r4, r5]
    8968:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    896a:	469c      	mov	ip, r3
    896c:	4461      	add	r1, ip
    896e:	223f      	movs	r2, #63	; 0x3f
    8970:	2000      	movs	r0, #0
    8972:	4b07      	ldr	r3, [pc, #28]	; (8990 <RADIO_FSKFifoLevel+0xbc>)
    8974:	4798      	blx	r3
			radioConfiguration.fskPayloadIndex += RADIO_RX_FIFO_LEVEL;
    8976:	5d63      	ldrb	r3, [r4, r5]
    8978:	333f      	adds	r3, #63	; 0x3f
    897a:	b2db      	uxtb	r3, r3
    897c:	5563      	strb	r3, [r4, r5]
    897e:	e7cb      	b.n	8918 <RADIO_FSKFifoLevel+0x44>
    8980:	00004aa1 	.word	0x00004aa1
    8984:	20003ba8 	.word	0x20003ba8
    8988:	00004ae1 	.word	0x00004ae1
    898c:	20003bd4 	.word	0x20003bd4
    8990:	0000fde5 	.word	0x0000fde5

00008994 <RADIO_FSKFifoEmpty>:

\param  - none
\return - none
*************************************************************************/
void RADIO_FSKFifoEmpty(void)
{
    8994:	b510      	push	{r4, lr}
    Radio_FSKTxPayloadHandler(transmitBufferPtr, txBufferLen);
    8996:	4b03      	ldr	r3, [pc, #12]	; (89a4 <RADIO_FSKFifoEmpty+0x10>)
    8998:	7819      	ldrb	r1, [r3, #0]
    899a:	4b03      	ldr	r3, [pc, #12]	; (89a8 <RADIO_FSKFifoEmpty+0x14>)
    899c:	6818      	ldr	r0, [r3, #0]
    899e:	4b03      	ldr	r3, [pc, #12]	; (89ac <RADIO_FSKFifoEmpty+0x18>)
    89a0:	4798      	blx	r3
}
    89a2:	bd10      	pop	{r4, pc}
    89a4:	20000314 	.word	0x20000314
    89a8:	20000310 	.word	0x20000310
    89ac:	000087f5 	.word	0x000087f5

000089b0 <RADIO_GetData>:
\param   - place holder for data pointer, length
\return  - ERR_NONE. Other types are not used now.
*************************************************************************/
RadioError_t RADIO_GetData(uint8_t **data, uint16_t *dataLen)
{
	*data = radioConfiguration.dataBuffer;
    89b0:	4b03      	ldr	r3, [pc, #12]	; (89c0 <RADIO_GetData+0x10>)
    89b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    89b4:	6002      	str	r2, [r0, #0]
	*dataLen = radioConfiguration.dataBufferLen;
    89b6:	222c      	movs	r2, #44	; 0x2c
    89b8:	5c9b      	ldrb	r3, [r3, r2]
    89ba:	800b      	strh	r3, [r1, #0]

	return ERR_NONE;
}
    89bc:	2000      	movs	r0, #0
    89be:	4770      	bx	lr
    89c0:	20003ba8 	.word	0x20003ba8

000089c4 <Radio_EnableRfControl>:
\brief This function is to set RF front End Control.

\param state - The state of the radio to be set to.
*************************************************************************/
void Radio_EnableRfControl(bool type)
{
    89c4:	b510      	push	{r4, lr}
    89c6:	0001      	movs	r1, r0
#ifndef UT
	RFCtrl1_t RFCtrl1 = 0;
	RFCtrl2_t RFCtrl2 = (RFCtrl2_t)type;
	if ( (radioConfiguration.frequency >= FREQ_410000KHZ) && (radioConfiguration.frequency <= FREQ_525000KHZ))
    89c8:	4b08      	ldr	r3, [pc, #32]	; (89ec <Radio_EnableRfControl+0x28>)
    89ca:	681b      	ldr	r3, [r3, #0]
    89cc:	4a08      	ldr	r2, [pc, #32]	; (89f0 <Radio_EnableRfControl+0x2c>)
    89ce:	4694      	mov	ip, r2
    89d0:	4463      	add	r3, ip
    89d2:	4a08      	ldr	r2, [pc, #32]	; (89f4 <Radio_EnableRfControl+0x30>)
	{
		RFCtrl1 = RFO_LF;
    89d4:	2000      	movs	r0, #0
	if ( (radioConfiguration.frequency >= FREQ_410000KHZ) && (radioConfiguration.frequency <= FREQ_525000KHZ))
    89d6:	4293      	cmp	r3, r2
    89d8:	d805      	bhi.n	89e6 <Radio_EnableRfControl+0x22>
	}
	else if ((radioConfiguration.frequency >= FREQ_862000KHZ) && (radioConfiguration.frequency <= FREQ_1020000KHZ))
	{
		if(!radioConfiguration.paBoost)
    89da:	2324      	movs	r3, #36	; 0x24
    89dc:	4a03      	ldr	r2, [pc, #12]	; (89ec <Radio_EnableRfControl+0x28>)
    89de:	5cd3      	ldrb	r3, [r2, r3]
		{
			RFCtrl1 = RFO_HF;
		}
		else
		{
			RFCtrl1 = PA_BOOST;
    89e0:	1e58      	subs	r0, r3, #1
    89e2:	4183      	sbcs	r3, r0
    89e4:	1c58      	adds	r0, r3, #1
		}
	}
	HAL_EnableRFCtrl(RFCtrl1,RFCtrl2);	
    89e6:	4b04      	ldr	r3, [pc, #16]	; (89f8 <Radio_EnableRfControl+0x34>)
    89e8:	4798      	blx	r3
#endif // UT
}
    89ea:	bd10      	pop	{r4, pc}
    89ec:	20003ba8 	.word	0x20003ba8
    89f0:	cc9eec80 	.word	0xcc9eec80
    89f4:	096ae380 	.word	0x096ae380
    89f8:	0000feb1 	.word	0x0000feb1

000089fc <Radio_DisableRfControl>:
\brief This function is to disable the RF front End Control.

\param state - The state of the radio to be set to.
*************************************************************************/
void Radio_DisableRfControl(bool type)
{
    89fc:	b510      	push	{r4, lr}
    89fe:	0001      	movs	r1, r0
#ifndef UT
	RFCtrl1_t RFCtrl1 = 0;
	RFCtrl2_t RFCtrl2 = (RFCtrl2_t)type;	
	if ( (radioConfiguration.frequency >= FREQ_410000KHZ) && (radioConfiguration.frequency <= FREQ_525000KHZ))
    8a00:	4b08      	ldr	r3, [pc, #32]	; (8a24 <Radio_DisableRfControl+0x28>)
    8a02:	681b      	ldr	r3, [r3, #0]
    8a04:	4a08      	ldr	r2, [pc, #32]	; (8a28 <Radio_DisableRfControl+0x2c>)
    8a06:	4694      	mov	ip, r2
    8a08:	4463      	add	r3, ip
    8a0a:	4a08      	ldr	r2, [pc, #32]	; (8a2c <Radio_DisableRfControl+0x30>)
	{
		RFCtrl1 = RFO_LF;
    8a0c:	2000      	movs	r0, #0
	if ( (radioConfiguration.frequency >= FREQ_410000KHZ) && (radioConfiguration.frequency <= FREQ_525000KHZ))
    8a0e:	4293      	cmp	r3, r2
    8a10:	d805      	bhi.n	8a1e <Radio_DisableRfControl+0x22>
	}
	else if ((radioConfiguration.frequency >= FREQ_862000KHZ) && (radioConfiguration.frequency <= FREQ_1020000KHZ))
	{
		if(!radioConfiguration.paBoost)
    8a12:	2324      	movs	r3, #36	; 0x24
    8a14:	4a03      	ldr	r2, [pc, #12]	; (8a24 <Radio_DisableRfControl+0x28>)
    8a16:	5cd3      	ldrb	r3, [r2, r3]
		{
			RFCtrl1 = RFO_HF;
		}
		else
		{
			RFCtrl1 = PA_BOOST;
    8a18:	1e58      	subs	r0, r3, #1
    8a1a:	4183      	sbcs	r3, r0
    8a1c:	1c58      	adds	r0, r3, #1
		}
	}
	HAL_DisableRFCtrl(RFCtrl1,RFCtrl2);
    8a1e:	4b04      	ldr	r3, [pc, #16]	; (8a30 <Radio_DisableRfControl+0x34>)
    8a20:	4798      	blx	r3
#endif // UT
}
    8a22:	bd10      	pop	{r4, pc}
    8a24:	20003ba8 	.word	0x20003ba8
    8a28:	cc9eec80 	.word	0xcc9eec80
    8a2c:	096ae380 	.word	0x096ae380
    8a30:	0000fed9 	.word	0x0000fed9

00008a34 <Radio_WatchdogTimeout>:
{
    8a34:	b510      	push	{r4, lr}
	return radioState;
    8a36:	4b10      	ldr	r3, [pc, #64]	; (8a78 <Radio_WatchdogTimeout+0x44>)
    8a38:	781b      	ldrb	r3, [r3, #0]
    if (RADIO_STATE_RX == RADIO_GetState())
    8a3a:	2b04      	cmp	r3, #4
    8a3c:	d004      	beq.n	8a48 <Radio_WatchdogTimeout+0x14>
	return radioState;
    8a3e:	4b0e      	ldr	r3, [pc, #56]	; (8a78 <Radio_WatchdogTimeout+0x44>)
    8a40:	781b      	ldrb	r3, [r3, #0]
    } else if (RADIO_STATE_TX == RADIO_GetState())
    8a42:	2b02      	cmp	r3, #2
    8a44:	d00c      	beq.n	8a60 <Radio_WatchdogTimeout+0x2c>
}
    8a46:	bd10      	pop	{r4, pc}
        radioEvents.RxWatchdogTimoutEvent = 1;
    8a48:	4a0c      	ldr	r2, [pc, #48]	; (8a7c <Radio_WatchdogTimeout+0x48>)
    8a4a:	8813      	ldrh	r3, [r2, #0]
    8a4c:	2120      	movs	r1, #32
    8a4e:	430b      	orrs	r3, r1
    8a50:	8013      	strh	r3, [r2, #0]
		Radio_DisableRfControl(RADIO_RFCTRL_RX);
    8a52:	2000      	movs	r0, #0
    8a54:	4b0a      	ldr	r3, [pc, #40]	; (8a80 <Radio_WatchdogTimeout+0x4c>)
    8a56:	4798      	blx	r3
        radioPostTask(RADIO_RX_DONE_TASK_ID);
    8a58:	2002      	movs	r0, #2
    8a5a:	4b0a      	ldr	r3, [pc, #40]	; (8a84 <Radio_WatchdogTimeout+0x50>)
    8a5c:	4798      	blx	r3
    8a5e:	e7f2      	b.n	8a46 <Radio_WatchdogTimeout+0x12>
        radioEvents.TxWatchdogTimoutEvent = 1;
    8a60:	4a06      	ldr	r2, [pc, #24]	; (8a7c <Radio_WatchdogTimeout+0x48>)
    8a62:	8813      	ldrh	r3, [r2, #0]
    8a64:	2110      	movs	r1, #16
    8a66:	430b      	orrs	r3, r1
    8a68:	8013      	strh	r3, [r2, #0]
		Radio_DisableRfControl(RADIO_RFCTRL_TX);
    8a6a:	2001      	movs	r0, #1
    8a6c:	4b04      	ldr	r3, [pc, #16]	; (8a80 <Radio_WatchdogTimeout+0x4c>)
    8a6e:	4798      	blx	r3
        radioPostTask(RADIO_TX_DONE_TASK_ID);
    8a70:	2001      	movs	r0, #1
    8a72:	4b04      	ldr	r3, [pc, #16]	; (8a84 <Radio_WatchdogTimeout+0x50>)
    8a74:	4798      	blx	r3
}
    8a76:	e7e6      	b.n	8a46 <Radio_WatchdogTimeout+0x12>
    8a78:	200025a9 	.word	0x200025a9
    8a7c:	200025a4 	.word	0x200025a4
    8a80:	000089fd 	.word	0x000089fd
    8a84:	000086ad 	.word	0x000086ad

00008a88 <RADIO_RxTimeout>:
{
    8a88:	b510      	push	{r4, lr}
    SwTimerStop(radioConfiguration.watchdogTimerId);
    8a8a:	232f      	movs	r3, #47	; 0x2f
    8a8c:	4a09      	ldr	r2, [pc, #36]	; (8ab4 <RADIO_RxTimeout+0x2c>)
    8a8e:	5cd0      	ldrb	r0, [r2, r3]
    8a90:	4b09      	ldr	r3, [pc, #36]	; (8ab8 <RADIO_RxTimeout+0x30>)
    8a92:	4798      	blx	r3
	Radio_DisableRfControl(RADIO_RFCTRL_RX);
    8a94:	2000      	movs	r0, #0
    8a96:	4b09      	ldr	r3, [pc, #36]	; (8abc <RADIO_RxTimeout+0x34>)
    8a98:	4798      	blx	r3
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 1 << SHIFT7);
    8a9a:	2180      	movs	r1, #128	; 0x80
    8a9c:	2012      	movs	r0, #18
    8a9e:	4b08      	ldr	r3, [pc, #32]	; (8ac0 <RADIO_RxTimeout+0x38>)
    8aa0:	4798      	blx	r3
    radioEvents.LoraRxTimoutEvent = 1;
    8aa2:	4a08      	ldr	r2, [pc, #32]	; (8ac4 <RADIO_RxTimeout+0x3c>)
    8aa4:	8813      	ldrh	r3, [r2, #0]
    8aa6:	2140      	movs	r1, #64	; 0x40
    8aa8:	430b      	orrs	r3, r1
    8aaa:	8013      	strh	r3, [r2, #0]
    radioPostTask(RADIO_RX_DONE_TASK_ID);
    8aac:	2002      	movs	r0, #2
    8aae:	4b06      	ldr	r3, [pc, #24]	; (8ac8 <RADIO_RxTimeout+0x40>)
    8ab0:	4798      	blx	r3
}
    8ab2:	bd10      	pop	{r4, pc}
    8ab4:	20003ba8 	.word	0x20003ba8
    8ab8:	00010cb5 	.word	0x00010cb5
    8abc:	000089fd 	.word	0x000089fd
    8ac0:	0000fd51 	.word	0x0000fd51
    8ac4:	200025a4 	.word	0x200025a4
    8ac8:	000086ad 	.word	0x000086ad

00008acc <Radio_RxFSKTimeout>:
{
    8acc:	b510      	push	{r4, lr}
    SwTimerStop(radioConfiguration.watchdogTimerId);
    8ace:	232f      	movs	r3, #47	; 0x2f
    8ad0:	4a07      	ldr	r2, [pc, #28]	; (8af0 <Radio_RxFSKTimeout+0x24>)
    8ad2:	5cd0      	ldrb	r0, [r2, r3]
    8ad4:	4b07      	ldr	r3, [pc, #28]	; (8af4 <Radio_RxFSKTimeout+0x28>)
    8ad6:	4798      	blx	r3
	Radio_DisableRfControl(RADIO_RFCTRL_RX);
    8ad8:	2000      	movs	r0, #0
    8ada:	4b07      	ldr	r3, [pc, #28]	; (8af8 <Radio_RxFSKTimeout+0x2c>)
    8adc:	4798      	blx	r3
    radioEvents.FskRxTimoutEvent = 1;
    8ade:	4a07      	ldr	r2, [pc, #28]	; (8afc <Radio_RxFSKTimeout+0x30>)
    8ae0:	8813      	ldrh	r3, [r2, #0]
    8ae2:	2180      	movs	r1, #128	; 0x80
    8ae4:	430b      	orrs	r3, r1
    8ae6:	8013      	strh	r3, [r2, #0]
    radioPostTask(RADIO_RX_DONE_TASK_ID);
    8ae8:	2002      	movs	r0, #2
    8aea:	4b05      	ldr	r3, [pc, #20]	; (8b00 <Radio_RxFSKTimeout+0x34>)
    8aec:	4798      	blx	r3
}
    8aee:	bd10      	pop	{r4, pc}
    8af0:	20003ba8 	.word	0x20003ba8
    8af4:	00010cb5 	.word	0x00010cb5
    8af8:	000089fd 	.word	0x000089fd
    8afc:	200025a4 	.word	0x200025a4
    8b00:	000086ad 	.word	0x000086ad

00008b04 <RADIO_TxDone>:
{
    8b04:	b570      	push	{r4, r5, r6, lr}
    SwTimerStop(radioConfiguration.watchdogTimerId);
    8b06:	232f      	movs	r3, #47	; 0x2f
    8b08:	4a14      	ldr	r2, [pc, #80]	; (8b5c <RADIO_TxDone+0x58>)
    8b0a:	5cd0      	ldrb	r0, [r2, r3]
    8b0c:	4b14      	ldr	r3, [pc, #80]	; (8b60 <RADIO_TxDone+0x5c>)
    8b0e:	4798      	blx	r3
	Radio_DisableRfControl(RADIO_RFCTRL_TX);
    8b10:	2001      	movs	r0, #1
    8b12:	4b14      	ldr	r3, [pc, #80]	; (8b64 <RADIO_TxDone+0x60>)
    8b14:	4798      	blx	r3
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 1 << SHIFT3);
    8b16:	2108      	movs	r1, #8
    8b18:	2012      	movs	r0, #18
    8b1a:	4b13      	ldr	r3, [pc, #76]	; (8b68 <RADIO_TxDone+0x64>)
    8b1c:	4798      	blx	r3
	return radioState;
    8b1e:	4b13      	ldr	r3, [pc, #76]	; (8b6c <RADIO_TxDone+0x68>)
    8b20:	781b      	ldrb	r3, [r3, #0]
    if ((RADIO_GetState() == RADIO_STATE_TX) || (0 == radioEvents.RxWatchdogTimoutEvent))
    8b22:	2b02      	cmp	r3, #2
    8b24:	d003      	beq.n	8b2e <RADIO_TxDone+0x2a>
    8b26:	4b12      	ldr	r3, [pc, #72]	; (8b70 <RADIO_TxDone+0x6c>)
    8b28:	881b      	ldrh	r3, [r3, #0]
    8b2a:	069b      	lsls	r3, r3, #26
    8b2c:	d415      	bmi.n	8b5a <RADIO_TxDone+0x56>
        radioEvents.LoraTxDoneEvent = 1;
    8b2e:	4a10      	ldr	r2, [pc, #64]	; (8b70 <RADIO_TxDone+0x6c>)
    8b30:	8813      	ldrh	r3, [r2, #0]
    8b32:	2101      	movs	r1, #1
    8b34:	430b      	orrs	r3, r1
    8b36:	8013      	strh	r3, [r2, #0]
        radioPostTask(RADIO_TX_DONE_TASK_ID);
    8b38:	2001      	movs	r0, #1
    8b3a:	4b0e      	ldr	r3, [pc, #56]	; (8b74 <RADIO_TxDone+0x70>)
    8b3c:	4798      	blx	r3
        timeOnAir = US_TO_MS(SwTimerGetTime() - timeOnAir);
    8b3e:	4b0e      	ldr	r3, [pc, #56]	; (8b78 <RADIO_TxDone+0x74>)
    8b40:	4798      	blx	r3
    8b42:	4c0e      	ldr	r4, [pc, #56]	; (8b7c <RADIO_TxDone+0x78>)
    8b44:	6822      	ldr	r2, [r4, #0]
    8b46:	6863      	ldr	r3, [r4, #4]
    8b48:	1a80      	subs	r0, r0, r2
    8b4a:	4199      	sbcs	r1, r3
    8b4c:	22fa      	movs	r2, #250	; 0xfa
    8b4e:	0092      	lsls	r2, r2, #2
    8b50:	2300      	movs	r3, #0
    8b52:	4d0b      	ldr	r5, [pc, #44]	; (8b80 <RADIO_TxDone+0x7c>)
    8b54:	47a8      	blx	r5
    8b56:	6020      	str	r0, [r4, #0]
    8b58:	6061      	str	r1, [r4, #4]
}
    8b5a:	bd70      	pop	{r4, r5, r6, pc}
    8b5c:	20003ba8 	.word	0x20003ba8
    8b60:	00010cb5 	.word	0x00010cb5
    8b64:	000089fd 	.word	0x000089fd
    8b68:	0000fd51 	.word	0x0000fd51
    8b6c:	200025a9 	.word	0x200025a9
    8b70:	200025a4 	.word	0x200025a4
    8b74:	000086ad 	.word	0x000086ad
    8b78:	00010945 	.word	0x00010945
    8b7c:	20000308 	.word	0x20000308
    8b80:	000154d5 	.word	0x000154d5

00008b84 <RADIO_FSKPacketSent>:
{
    8b84:	b570      	push	{r4, r5, r6, lr}
    irqFlags = RADIO_RegisterRead(REG_FSK_IRQFLAGS2);
    8b86:	203f      	movs	r0, #63	; 0x3f
    8b88:	4b15      	ldr	r3, [pc, #84]	; (8be0 <RADIO_FSKPacketSent+0x5c>)
    8b8a:	4798      	blx	r3
    if ((1 << SHIFT3) == (irqFlags & (1 << SHIFT3)))
    8b8c:	0703      	lsls	r3, r0, #28
    8b8e:	d400      	bmi.n	8b92 <RADIO_FSKPacketSent+0xe>
}
    8b90:	bd70      	pop	{r4, r5, r6, pc}
        SwTimerStop(radioConfiguration.watchdogTimerId);
    8b92:	232f      	movs	r3, #47	; 0x2f
    8b94:	4a13      	ldr	r2, [pc, #76]	; (8be4 <RADIO_FSKPacketSent+0x60>)
    8b96:	5cd0      	ldrb	r0, [r2, r3]
    8b98:	4b13      	ldr	r3, [pc, #76]	; (8be8 <RADIO_FSKPacketSent+0x64>)
    8b9a:	4798      	blx	r3
		Radio_DisableRfControl(RADIO_RFCTRL_TX);
    8b9c:	2001      	movs	r0, #1
    8b9e:	4b13      	ldr	r3, [pc, #76]	; (8bec <RADIO_FSKPacketSent+0x68>)
    8ba0:	4798      	blx	r3
	return radioState;
    8ba2:	4b13      	ldr	r3, [pc, #76]	; (8bf0 <RADIO_FSKPacketSent+0x6c>)
    8ba4:	781b      	ldrb	r3, [r3, #0]
        if ((RADIO_GetState() == RADIO_STATE_TX) || (0 == radioEvents.RxWatchdogTimoutEvent))
    8ba6:	2b02      	cmp	r3, #2
    8ba8:	d003      	beq.n	8bb2 <RADIO_FSKPacketSent+0x2e>
    8baa:	4b12      	ldr	r3, [pc, #72]	; (8bf4 <RADIO_FSKPacketSent+0x70>)
    8bac:	881b      	ldrh	r3, [r3, #0]
    8bae:	069b      	lsls	r3, r3, #26
    8bb0:	d4ee      	bmi.n	8b90 <RADIO_FSKPacketSent+0xc>
			timeOnAir =  US_TO_MS(SwTimerGetTime() - timeOnAir);
    8bb2:	4b11      	ldr	r3, [pc, #68]	; (8bf8 <RADIO_FSKPacketSent+0x74>)
    8bb4:	4798      	blx	r3
    8bb6:	4c11      	ldr	r4, [pc, #68]	; (8bfc <RADIO_FSKPacketSent+0x78>)
    8bb8:	6822      	ldr	r2, [r4, #0]
    8bba:	6863      	ldr	r3, [r4, #4]
    8bbc:	1a80      	subs	r0, r0, r2
    8bbe:	4199      	sbcs	r1, r3
    8bc0:	22fa      	movs	r2, #250	; 0xfa
    8bc2:	0092      	lsls	r2, r2, #2
    8bc4:	2300      	movs	r3, #0
    8bc6:	4d0e      	ldr	r5, [pc, #56]	; (8c00 <RADIO_FSKPacketSent+0x7c>)
    8bc8:	47a8      	blx	r5
    8bca:	6020      	str	r0, [r4, #0]
    8bcc:	6061      	str	r1, [r4, #4]
			radioPostTask(RADIO_TX_DONE_TASK_ID);
    8bce:	2001      	movs	r0, #1
    8bd0:	4b0c      	ldr	r3, [pc, #48]	; (8c04 <RADIO_FSKPacketSent+0x80>)
    8bd2:	4798      	blx	r3
            radioEvents.FskTxDoneEvent = 1;
    8bd4:	4a07      	ldr	r2, [pc, #28]	; (8bf4 <RADIO_FSKPacketSent+0x70>)
    8bd6:	8813      	ldrh	r3, [r2, #0]
    8bd8:	2104      	movs	r1, #4
    8bda:	430b      	orrs	r3, r1
    8bdc:	8013      	strh	r3, [r2, #0]
}
    8bde:	e7d7      	b.n	8b90 <RADIO_FSKPacketSent+0xc>
    8be0:	0000fd79 	.word	0x0000fd79
    8be4:	20003ba8 	.word	0x20003ba8
    8be8:	00010cb5 	.word	0x00010cb5
    8bec:	000089fd 	.word	0x000089fd
    8bf0:	200025a9 	.word	0x200025a9
    8bf4:	200025a4 	.word	0x200025a4
    8bf8:	00010945 	.word	0x00010945
    8bfc:	20000308 	.word	0x20000308
    8c00:	000154d5 	.word	0x000154d5
    8c04:	000086ad 	.word	0x000086ad

00008c08 <RADIO_RxDone>:
{
    8c08:	b570      	push	{r4, r5, r6, lr}
    irqFlags = RADIO_RegisterRead(REG_LORA_IRQFLAGS);
    8c0a:	2012      	movs	r0, #18
    8c0c:	4b18      	ldr	r3, [pc, #96]	; (8c70 <RADIO_RxDone+0x68>)
    8c0e:	4798      	blx	r3
    8c10:	0004      	movs	r4, r0
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, (1 << SHIFT6) | (1 << SHIFT5) | (1 << SHIFT4));
    8c12:	2170      	movs	r1, #112	; 0x70
    8c14:	2012      	movs	r0, #18
    8c16:	4b17      	ldr	r3, [pc, #92]	; (8c74 <RADIO_RxDone+0x6c>)
    8c18:	4798      	blx	r3
    if (((1 << SHIFT6) | (1 << SHIFT4)) == (irqFlags & ((1 << SHIFT6) | (1 << SHIFT4))))
    8c1a:	2350      	movs	r3, #80	; 0x50
    8c1c:	4023      	ands	r3, r4
    8c1e:	2b50      	cmp	r3, #80	; 0x50
    8c20:	d000      	beq.n	8c24 <RADIO_RxDone+0x1c>
}
    8c22:	bd70      	pop	{r4, r5, r6, pc}
        SwTimerStop(radioConfiguration.watchdogTimerId);
    8c24:	4d14      	ldr	r5, [pc, #80]	; (8c78 <RADIO_RxDone+0x70>)
    8c26:	3b21      	subs	r3, #33	; 0x21
    8c28:	5ce8      	ldrb	r0, [r5, r3]
    8c2a:	4b14      	ldr	r3, [pc, #80]	; (8c7c <RADIO_RxDone+0x74>)
    8c2c:	4798      	blx	r3
		Radio_DisableRfControl(RADIO_RFCTRL_RX);
    8c2e:	2000      	movs	r0, #0
    8c30:	4b13      	ldr	r3, [pc, #76]	; (8c80 <RADIO_RxDone+0x78>)
    8c32:	4798      	blx	r3
        crc = RADIO_RegisterRead(REG_LORA_HOPCHANNEL);
    8c34:	201c      	movs	r0, #28
    8c36:	4b0e      	ldr	r3, [pc, #56]	; (8c70 <RADIO_RxDone+0x68>)
    8c38:	4798      	blx	r3
        if ((0 == radioConfiguration.crcOn) || ((0 == (irqFlags & (1 << SHIFT5))) && (0 != (crc & (1 << SHIFT6)))))
    8c3a:	2323      	movs	r3, #35	; 0x23
    8c3c:	5ceb      	ldrb	r3, [r5, r3]
    8c3e:	2b00      	cmp	r3, #0
    8c40:	d00d      	beq.n	8c5e <RADIO_RxDone+0x56>
    8c42:	06a3      	lsls	r3, r4, #26
    8c44:	d401      	bmi.n	8c4a <RADIO_RxDone+0x42>
    8c46:	0643      	lsls	r3, r0, #25
    8c48:	d409      	bmi.n	8c5e <RADIO_RxDone+0x56>
            radioEvents.RxError = 1;
    8c4a:	4a0e      	ldr	r2, [pc, #56]	; (8c84 <RADIO_RxDone+0x7c>)
    8c4c:	8811      	ldrh	r1, [r2, #0]
    8c4e:	2380      	movs	r3, #128	; 0x80
    8c50:	005b      	lsls	r3, r3, #1
    8c52:	430b      	orrs	r3, r1
    8c54:	8013      	strh	r3, [r2, #0]
            radioPostTask(RADIO_RX_DONE_TASK_ID);
    8c56:	2002      	movs	r0, #2
    8c58:	4b0b      	ldr	r3, [pc, #44]	; (8c88 <RADIO_RxDone+0x80>)
    8c5a:	4798      	blx	r3
}
    8c5c:	e7e1      	b.n	8c22 <RADIO_RxDone+0x1a>
            radioEvents.LoraRxDoneEvent = 1;
    8c5e:	4a09      	ldr	r2, [pc, #36]	; (8c84 <RADIO_RxDone+0x7c>)
    8c60:	8813      	ldrh	r3, [r2, #0]
    8c62:	2102      	movs	r1, #2
    8c64:	430b      	orrs	r3, r1
    8c66:	8013      	strh	r3, [r2, #0]
            radioPostTask(RADIO_RX_DONE_TASK_ID);
    8c68:	2002      	movs	r0, #2
    8c6a:	4b07      	ldr	r3, [pc, #28]	; (8c88 <RADIO_RxDone+0x80>)
    8c6c:	4798      	blx	r3
    8c6e:	e7d8      	b.n	8c22 <RADIO_RxDone+0x1a>
    8c70:	0000fd79 	.word	0x0000fd79
    8c74:	0000fd51 	.word	0x0000fd51
    8c78:	20003ba8 	.word	0x20003ba8
    8c7c:	00010cb5 	.word	0x00010cb5
    8c80:	000089fd 	.word	0x000089fd
    8c84:	200025a4 	.word	0x200025a4
    8c88:	000086ad 	.word	0x000086ad

00008c8c <RADIO_FSKPayloadReady>:
{
    8c8c:	b570      	push	{r4, r5, r6, lr}
    irqFlags = RADIO_RegisterRead(REG_FSK_IRQFLAGS2);
    8c8e:	203f      	movs	r0, #63	; 0x3f
    8c90:	4b49      	ldr	r3, [pc, #292]	; (8db8 <RADIO_FSKPayloadReady+0x12c>)
    8c92:	4798      	blx	r3
    if ((1 << SHIFT2) == (irqFlags & (1 << SHIFT2)))
    8c94:	0743      	lsls	r3, r0, #29
    8c96:	d523      	bpl.n	8ce0 <RADIO_FSKPayloadReady+0x54>
        if (1 == radioConfiguration.crcOn)
    8c98:	2323      	movs	r3, #35	; 0x23
    8c9a:	4a48      	ldr	r2, [pc, #288]	; (8dbc <RADIO_FSKPayloadReady+0x130>)
    8c9c:	5cd3      	ldrb	r3, [r2, r3]
    8c9e:	2b01      	cmp	r3, #1
    8ca0:	d01f      	beq.n	8ce2 <RADIO_FSKPayloadReady+0x56>
            SwTimerStop(radioConfiguration.watchdogTimerId);
    8ca2:	4c46      	ldr	r4, [pc, #280]	; (8dbc <RADIO_FSKPayloadReady+0x130>)
    8ca4:	232f      	movs	r3, #47	; 0x2f
    8ca6:	5ce0      	ldrb	r0, [r4, r3]
    8ca8:	4d45      	ldr	r5, [pc, #276]	; (8dc0 <RADIO_FSKPayloadReady+0x134>)
    8caa:	47a8      	blx	r5
            SwTimerStop(radioConfiguration.fskRxWindowTimerId);
    8cac:	232e      	movs	r3, #46	; 0x2e
    8cae:	5ce0      	ldrb	r0, [r4, r3]
    8cb0:	47a8      	blx	r5
			RADIO_FrameRead(REG_FIFO_ADDRESS,(uint8_t *)&radioConfiguration.dataBufferLen, 1);
    8cb2:	0021      	movs	r1, r4
    8cb4:	312c      	adds	r1, #44	; 0x2c
    8cb6:	2201      	movs	r2, #1
    8cb8:	2000      	movs	r0, #0
    8cba:	4d42      	ldr	r5, [pc, #264]	; (8dc4 <RADIO_FSKPayloadReady+0x138>)
    8cbc:	47a8      	blx	r5
			RADIO_FrameRead(REG_FIFO_ADDRESS,radioConfiguration.dataBuffer,radioConfiguration.dataBufferLen);
    8cbe:	232c      	movs	r3, #44	; 0x2c
    8cc0:	5ce2      	ldrb	r2, [r4, r3]
    8cc2:	b2d2      	uxtb	r2, r2
    8cc4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    8cc6:	2000      	movs	r0, #0
    8cc8:	47a8      	blx	r5
			Radio_DisableRfControl(RADIO_RFCTRL_RX);
    8cca:	2000      	movs	r0, #0
    8ccc:	4b3e      	ldr	r3, [pc, #248]	; (8dc8 <RADIO_FSKPayloadReady+0x13c>)
    8cce:	4798      	blx	r3
            radioEvents.FskRxDoneEvent = 1;
    8cd0:	4a3e      	ldr	r2, [pc, #248]	; (8dcc <RADIO_FSKPayloadReady+0x140>)
    8cd2:	8813      	ldrh	r3, [r2, #0]
    8cd4:	2108      	movs	r1, #8
    8cd6:	430b      	orrs	r3, r1
    8cd8:	8013      	strh	r3, [r2, #0]
            radioPostTask(RADIO_RX_DONE_TASK_ID);
    8cda:	2002      	movs	r0, #2
    8cdc:	4b3c      	ldr	r3, [pc, #240]	; (8dd0 <RADIO_FSKPayloadReady+0x144>)
    8cde:	4798      	blx	r3
}
    8ce0:	bd70      	pop	{r4, r5, r6, pc}
            if ((1 << SHIFT1) == (irqFlags & (1 << SHIFT1)))
    8ce2:	0783      	lsls	r3, r0, #30
    8ce4:	d55e      	bpl.n	8da4 <RADIO_FSKPayloadReady+0x118>
                SwTimerStop(radioConfiguration.watchdogTimerId);
    8ce6:	0014      	movs	r4, r2
    8ce8:	232f      	movs	r3, #47	; 0x2f
    8cea:	5cd0      	ldrb	r0, [r2, r3]
    8cec:	4d34      	ldr	r5, [pc, #208]	; (8dc0 <RADIO_FSKPayloadReady+0x134>)
    8cee:	47a8      	blx	r5
                SwTimerStop(radioConfiguration.fskRxWindowTimerId);
    8cf0:	232e      	movs	r3, #46	; 0x2e
    8cf2:	5ce0      	ldrb	r0, [r4, r3]
    8cf4:	47a8      	blx	r5
				cpu_irq_enter_critical();
    8cf6:	4b37      	ldr	r3, [pc, #220]	; (8dd4 <RADIO_FSKPayloadReady+0x148>)
    8cf8:	4798      	blx	r3
				if (!( (radioConfiguration.dataBufferLen == radioConfiguration.fskPayloadIndex) && (radioConfiguration.dataBufferLen != 0) && (radioConfiguration.fskPayloadIndex != 0) ))
    8cfa:	232c      	movs	r3, #44	; 0x2c
    8cfc:	5ce3      	ldrb	r3, [r4, r3]
    8cfe:	2258      	movs	r2, #88	; 0x58
    8d00:	5ca2      	ldrb	r2, [r4, r2]
    8d02:	b2db      	uxtb	r3, r3
    8d04:	4293      	cmp	r3, r2
    8d06:	d030      	beq.n	8d6a <RADIO_FSKPayloadReady+0xde>
					if (radioConfiguration.dataBufferLen == 0)
    8d08:	232c      	movs	r3, #44	; 0x2c
    8d0a:	4a2c      	ldr	r2, [pc, #176]	; (8dbc <RADIO_FSKPayloadReady+0x130>)
    8d0c:	5cd3      	ldrb	r3, [r2, r3]
    8d0e:	2b00      	cmp	r3, #0
    8d10:	d035      	beq.n	8d7e <RADIO_FSKPayloadReady+0xf2>
					if (radioConfiguration.fskPayloadIndex == 0)
    8d12:	2358      	movs	r3, #88	; 0x58
    8d14:	4a29      	ldr	r2, [pc, #164]	; (8dbc <RADIO_FSKPayloadReady+0x130>)
    8d16:	5cd3      	ldrb	r3, [r2, r3]
    8d18:	2b00      	cmp	r3, #0
    8d1a:	d036      	beq.n	8d8a <RADIO_FSKPayloadReady+0xfe>
					else if ((radioConfiguration.dataBufferLen - radioConfiguration.fskPayloadIndex) > 0)
    8d1c:	4a27      	ldr	r2, [pc, #156]	; (8dbc <RADIO_FSKPayloadReady+0x130>)
    8d1e:	232c      	movs	r3, #44	; 0x2c
    8d20:	5cd3      	ldrb	r3, [r2, r3]
    8d22:	2158      	movs	r1, #88	; 0x58
    8d24:	5c52      	ldrb	r2, [r2, r1]
    8d26:	1a9b      	subs	r3, r3, r2
    8d28:	2b00      	cmp	r3, #0
    8d2a:	dd10      	ble.n	8d4e <RADIO_FSKPayloadReady+0xc2>
						RADIO_FrameRead(REG_FIFO_ADDRESS,radioConfiguration.dataBuffer+radioConfiguration.fskPayloadIndex,radioConfiguration.dataBufferLen-radioConfiguration.fskPayloadIndex);
    8d2c:	4c23      	ldr	r4, [pc, #140]	; (8dbc <RADIO_FSKPayloadReady+0x130>)
    8d2e:	2558      	movs	r5, #88	; 0x58
    8d30:	5d61      	ldrb	r1, [r4, r5]
    8d32:	262c      	movs	r6, #44	; 0x2c
    8d34:	5da2      	ldrb	r2, [r4, r6]
    8d36:	5d63      	ldrb	r3, [r4, r5]
    8d38:	1ad2      	subs	r2, r2, r3
    8d3a:	b2d2      	uxtb	r2, r2
    8d3c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    8d3e:	469c      	mov	ip, r3
    8d40:	4461      	add	r1, ip
    8d42:	2000      	movs	r0, #0
    8d44:	4b1f      	ldr	r3, [pc, #124]	; (8dc4 <RADIO_FSKPayloadReady+0x138>)
    8d46:	4798      	blx	r3
						radioConfiguration.fskPayloadIndex = radioConfiguration.dataBufferLen;
    8d48:	5da3      	ldrb	r3, [r4, r6]
    8d4a:	b2db      	uxtb	r3, r3
    8d4c:	5563      	strb	r3, [r4, r5]
				cpu_irq_leave_critical();			
    8d4e:	4b22      	ldr	r3, [pc, #136]	; (8dd8 <RADIO_FSKPayloadReady+0x14c>)
    8d50:	4798      	blx	r3
				Radio_DisableRfControl(RADIO_RFCTRL_RX);
    8d52:	2000      	movs	r0, #0
    8d54:	4b1c      	ldr	r3, [pc, #112]	; (8dc8 <RADIO_FSKPayloadReady+0x13c>)
    8d56:	4798      	blx	r3
                radioEvents.FskRxDoneEvent = 1;
    8d58:	4a1c      	ldr	r2, [pc, #112]	; (8dcc <RADIO_FSKPayloadReady+0x140>)
    8d5a:	8813      	ldrh	r3, [r2, #0]
    8d5c:	2108      	movs	r1, #8
    8d5e:	430b      	orrs	r3, r1
    8d60:	8013      	strh	r3, [r2, #0]
                radioPostTask(RADIO_RX_DONE_TASK_ID);
    8d62:	2002      	movs	r0, #2
    8d64:	4b1a      	ldr	r3, [pc, #104]	; (8dd0 <RADIO_FSKPayloadReady+0x144>)
    8d66:	4798      	blx	r3
    8d68:	e7ba      	b.n	8ce0 <RADIO_FSKPayloadReady+0x54>
				if (!( (radioConfiguration.dataBufferLen == radioConfiguration.fskPayloadIndex) && (radioConfiguration.dataBufferLen != 0) && (radioConfiguration.fskPayloadIndex != 0) ))
    8d6a:	232c      	movs	r3, #44	; 0x2c
    8d6c:	4a13      	ldr	r2, [pc, #76]	; (8dbc <RADIO_FSKPayloadReady+0x130>)
    8d6e:	5cd3      	ldrb	r3, [r2, r3]
    8d70:	2b00      	cmp	r3, #0
    8d72:	d0c9      	beq.n	8d08 <RADIO_FSKPayloadReady+0x7c>
    8d74:	2358      	movs	r3, #88	; 0x58
    8d76:	5cd3      	ldrb	r3, [r2, r3]
    8d78:	2b00      	cmp	r3, #0
    8d7a:	d0c5      	beq.n	8d08 <RADIO_FSKPayloadReady+0x7c>
    8d7c:	e7e7      	b.n	8d4e <RADIO_FSKPayloadReady+0xc2>
						RADIO_FrameRead(REG_FIFO_ADDRESS,(uint8_t *)&radioConfiguration.dataBufferLen, 1);
    8d7e:	2201      	movs	r2, #1
    8d80:	4916      	ldr	r1, [pc, #88]	; (8ddc <RADIO_FSKPayloadReady+0x150>)
    8d82:	2000      	movs	r0, #0
    8d84:	4b0f      	ldr	r3, [pc, #60]	; (8dc4 <RADIO_FSKPayloadReady+0x138>)
    8d86:	4798      	blx	r3
    8d88:	e7c3      	b.n	8d12 <RADIO_FSKPayloadReady+0x86>
						RADIO_FrameRead(REG_FIFO_ADDRESS,radioConfiguration.dataBuffer,radioConfiguration.dataBufferLen);
    8d8a:	0014      	movs	r4, r2
    8d8c:	252c      	movs	r5, #44	; 0x2c
    8d8e:	5d52      	ldrb	r2, [r2, r5]
    8d90:	b2d2      	uxtb	r2, r2
    8d92:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    8d94:	2000      	movs	r0, #0
    8d96:	4b0b      	ldr	r3, [pc, #44]	; (8dc4 <RADIO_FSKPayloadReady+0x138>)
    8d98:	4798      	blx	r3
						radioConfiguration.fskPayloadIndex = radioConfiguration.dataBufferLen;
    8d9a:	5d63      	ldrb	r3, [r4, r5]
    8d9c:	b2db      	uxtb	r3, r3
    8d9e:	2258      	movs	r2, #88	; 0x58
    8da0:	54a3      	strb	r3, [r4, r2]
    8da2:	e7d4      	b.n	8d4e <RADIO_FSKPayloadReady+0xc2>
                radioEvents.RxError = 1;
    8da4:	4a09      	ldr	r2, [pc, #36]	; (8dcc <RADIO_FSKPayloadReady+0x140>)
    8da6:	8811      	ldrh	r1, [r2, #0]
    8da8:	2380      	movs	r3, #128	; 0x80
    8daa:	005b      	lsls	r3, r3, #1
    8dac:	430b      	orrs	r3, r1
    8dae:	8013      	strh	r3, [r2, #0]
                radioPostTask(RADIO_RX_DONE_TASK_ID);
    8db0:	2002      	movs	r0, #2
    8db2:	4b07      	ldr	r3, [pc, #28]	; (8dd0 <RADIO_FSKPayloadReady+0x144>)
    8db4:	4798      	blx	r3
    8db6:	e793      	b.n	8ce0 <RADIO_FSKPayloadReady+0x54>
    8db8:	0000fd79 	.word	0x0000fd79
    8dbc:	20003ba8 	.word	0x20003ba8
    8dc0:	00010cb5 	.word	0x00010cb5
    8dc4:	0000fde5 	.word	0x0000fde5
    8dc8:	000089fd 	.word	0x000089fd
    8dcc:	200025a4 	.word	0x200025a4
    8dd0:	000086ad 	.word	0x000086ad
    8dd4:	00004aa1 	.word	0x00004aa1
    8dd8:	00004ae1 	.word	0x00004ae1
    8ddc:	20003bd4 	.word	0x20003bd4

00008de0 <Radio_SetClockInput>:
/*********************************************************************//**
\brief	This function sets the clock input to Radio.
		It will inform the radio from which clock it is sourced
*************************************************************************/
void Radio_SetClockInput(void)
{
    8de0:	b510      	push	{r4, lr}
#ifndef UT
	uint8_t tcxoOn;
	if (TCXO == radioConfiguration.clockSource)
    8de2:	2355      	movs	r3, #85	; 0x55
    8de4:	4a08      	ldr	r2, [pc, #32]	; (8e08 <Radio_SetClockInput+0x28>)
    8de6:	5cd3      	ldrb	r3, [r2, r3]
    8de8:	2b00      	cmp	r3, #0
    8dea:	d000      	beq.n	8dee <Radio_SetClockInput+0xe>
		RADIO_RegisterWrite(REG_TCXO, tcxoOn | (1 << SHIFT4));
		HAL_TCXOPowerOn();
	}
    //else if XTAL is a source it will be powered on by default
#endif
}
    8dec:	bd10      	pop	{r4, pc}
		tcxoOn = RADIO_RegisterRead(REG_TCXO);
    8dee:	204b      	movs	r0, #75	; 0x4b
    8df0:	4b06      	ldr	r3, [pc, #24]	; (8e0c <Radio_SetClockInput+0x2c>)
    8df2:	4798      	blx	r3
		RADIO_RegisterWrite(REG_TCXO, tcxoOn | (1 << SHIFT4));
    8df4:	2110      	movs	r1, #16
    8df6:	4301      	orrs	r1, r0
    8df8:	b2c9      	uxtb	r1, r1
    8dfa:	204b      	movs	r0, #75	; 0x4b
    8dfc:	4b04      	ldr	r3, [pc, #16]	; (8e10 <Radio_SetClockInput+0x30>)
    8dfe:	4798      	blx	r3
		HAL_TCXOPowerOn();
    8e00:	4b04      	ldr	r3, [pc, #16]	; (8e14 <Radio_SetClockInput+0x34>)
    8e02:	4798      	blx	r3
}
    8e04:	e7f2      	b.n	8dec <Radio_SetClockInput+0xc>
    8e06:	46c0      	nop			; (mov r8, r8)
    8e08:	20003ba8 	.word	0x20003ba8
    8e0c:	0000fd79 	.word	0x0000fd79
    8e10:	0000fd51 	.word	0x0000fd51
    8e14:	0000fef9 	.word	0x0000fef9

00008e18 <RADIO_RxHandler>:
{
    8e18:	b530      	push	{r4, r5, lr}
    8e1a:	b083      	sub	sp, #12
	Radio_SetClockInput();
    8e1c:	4b3c      	ldr	r3, [pc, #240]	; (8f10 <RADIO_RxHandler+0xf8>)
    8e1e:	4798      	blx	r3
	Radio_EnableRfControl(RADIO_RFCTRL_RX); 
    8e20:	2000      	movs	r0, #0
    8e22:	4b3c      	ldr	r3, [pc, #240]	; (8f14 <RADIO_RxHandler+0xfc>)
    8e24:	4798      	blx	r3
    if (0 == rxWindowSize)
    8e26:	4b3c      	ldr	r3, [pc, #240]	; (8f18 <RADIO_RxHandler+0x100>)
    8e28:	8818      	ldrh	r0, [r3, #0]
    8e2a:	2800      	cmp	r0, #0
    8e2c:	d146      	bne.n	8ebc <RADIO_RxHandler+0xa4>
        Radio_WriteConfiguration(4);
    8e2e:	3004      	adds	r0, #4
    8e30:	4b3a      	ldr	r3, [pc, #232]	; (8f1c <RADIO_RxHandler+0x104>)
    8e32:	4798      	blx	r3
    if (MODULATION_LORA == radioConfiguration.modulation)
    8e34:	2334      	movs	r3, #52	; 0x34
    8e36:	4a3a      	ldr	r2, [pc, #232]	; (8f20 <RADIO_RxHandler+0x108>)
    8e38:	5cd3      	ldrb	r3, [r2, r3]
    8e3a:	2b01      	cmp	r3, #1
    8e3c:	d041      	beq.n	8ec2 <RADIO_RxHandler+0xaa>
        RADIO_RegisterWrite(REG_FSK_RXBW, radioConfiguration.rxBw);
    8e3e:	4c38      	ldr	r4, [pc, #224]	; (8f20 <RADIO_RxHandler+0x108>)
    8e40:	2338      	movs	r3, #56	; 0x38
    8e42:	5ce1      	ldrb	r1, [r4, r3]
    8e44:	2012      	movs	r0, #18
    8e46:	4d37      	ldr	r5, [pc, #220]	; (8f24 <RADIO_RxHandler+0x10c>)
    8e48:	47a8      	blx	r5
        RADIO_RegisterWrite(REG_FSK_AFCBW, radioConfiguration.afcBw);
    8e4a:	2339      	movs	r3, #57	; 0x39
    8e4c:	5ce1      	ldrb	r1, [r4, r3]
    8e4e:	2013      	movs	r0, #19
    8e50:	47a8      	blx	r5
        RADIO_RegisterWrite(REG_DIOMAPPING1, 0x00 | 0x0c);
    8e52:	210c      	movs	r1, #12
    8e54:	2040      	movs	r0, #64	; 0x40
    8e56:	47a8      	blx	r5
        RADIO_RegisterWrite(REG_DIOMAPPING2, 0x00);
    8e58:	2100      	movs	r1, #0
    8e5a:	2041      	movs	r0, #65	; 0x41
    8e5c:	47a8      	blx	r5
		radioConfiguration.packetRSSI = 0;
    8e5e:	2300      	movs	r3, #0
    8e60:	2100      	movs	r1, #0
    8e62:	2256      	movs	r2, #86	; 0x56
    8e64:	52a1      	strh	r1, [r4, r2]
		radioConfiguration.dataBufferLen = 0;
    8e66:	3a2a      	subs	r2, #42	; 0x2a
    8e68:	54a3      	strb	r3, [r4, r2]
		radioConfiguration.fskPayloadIndex = 0;
    8e6a:	322c      	adds	r2, #44	; 0x2c
    8e6c:	54a3      	strb	r3, [r4, r2]
    if (0 == rxWindowSize)
    8e6e:	4b2a      	ldr	r3, [pc, #168]	; (8f18 <RADIO_RxHandler+0x100>)
    8e70:	881b      	ldrh	r3, [r3, #0]
    8e72:	2b00      	cmp	r3, #0
    8e74:	d030      	beq.n	8ed8 <RADIO_RxHandler+0xc0>
        if (MODULATION_LORA == radioConfiguration.modulation)
    8e76:	2334      	movs	r3, #52	; 0x34
    8e78:	4a29      	ldr	r2, [pc, #164]	; (8f20 <RADIO_RxHandler+0x108>)
    8e7a:	5cd3      	ldrb	r3, [r2, r3]
    8e7c:	2b01      	cmp	r3, #1
    8e7e:	d033      	beq.n	8ee8 <RADIO_RxHandler+0xd0>
            Radio_WriteMode(MODE_RXCONT, MODULATION_FSK, 0);
    8e80:	2200      	movs	r2, #0
    8e82:	2100      	movs	r1, #0
    8e84:	2005      	movs	r0, #5
    8e86:	4b28      	ldr	r3, [pc, #160]	; (8f28 <RADIO_RxHandler+0x110>)
    8e88:	4798      	blx	r3
            SwTimerStart(radioConfiguration.fskRxWindowTimerId, MS_TO_US(rxWindowSize), SW_TIMEOUT_RELATIVE, (void *)Radio_RxFSKTimeout, NULL);
    8e8a:	4b23      	ldr	r3, [pc, #140]	; (8f18 <RADIO_RxHandler+0x100>)
    8e8c:	881b      	ldrh	r3, [r3, #0]
    8e8e:	21fa      	movs	r1, #250	; 0xfa
    8e90:	0089      	lsls	r1, r1, #2
    8e92:	4359      	muls	r1, r3
    8e94:	232e      	movs	r3, #46	; 0x2e
    8e96:	4a22      	ldr	r2, [pc, #136]	; (8f20 <RADIO_RxHandler+0x108>)
    8e98:	5cd0      	ldrb	r0, [r2, r3]
    8e9a:	2300      	movs	r3, #0
    8e9c:	9300      	str	r3, [sp, #0]
    8e9e:	4b23      	ldr	r3, [pc, #140]	; (8f2c <RADIO_RxHandler+0x114>)
    8ea0:	2200      	movs	r2, #0
    8ea2:	4c23      	ldr	r4, [pc, #140]	; (8f30 <RADIO_RxHandler+0x118>)
    8ea4:	47a0      	blx	r4
    if ((0 != radioConfiguration.watchdogTimerTimeout) && (0 != rxWindowSize))
    8ea6:	4b1e      	ldr	r3, [pc, #120]	; (8f20 <RADIO_RxHandler+0x108>)
    8ea8:	68d9      	ldr	r1, [r3, #12]
    8eaa:	2900      	cmp	r1, #0
    8eac:	d003      	beq.n	8eb6 <RADIO_RxHandler+0x9e>
    8eae:	4b1a      	ldr	r3, [pc, #104]	; (8f18 <RADIO_RxHandler+0x100>)
    8eb0:	881b      	ldrh	r3, [r3, #0]
    8eb2:	2b00      	cmp	r3, #0
    8eb4:	d11e      	bne.n	8ef4 <RADIO_RxHandler+0xdc>
}
    8eb6:	2000      	movs	r0, #0
    8eb8:	b003      	add	sp, #12
    8eba:	bd30      	pop	{r4, r5, pc}
        Radio_WriteConfiguration(rxWindowSize);
    8ebc:	4b17      	ldr	r3, [pc, #92]	; (8f1c <RADIO_RxHandler+0x104>)
    8ebe:	4798      	blx	r3
    8ec0:	e7b8      	b.n	8e34 <RADIO_RxHandler+0x1c>
        RADIO_RegisterWrite(REG_LORA_PAYLOADLENGTH, 0x01);
    8ec2:	2101      	movs	r1, #1
    8ec4:	2022      	movs	r0, #34	; 0x22
    8ec6:	4c17      	ldr	r4, [pc, #92]	; (8f24 <RADIO_RxHandler+0x10c>)
    8ec8:	47a0      	blx	r4
        RADIO_RegisterWrite(REG_DIOMAPPING1, 0x00);
    8eca:	2100      	movs	r1, #0
    8ecc:	2040      	movs	r0, #64	; 0x40
    8ece:	47a0      	blx	r4
        RADIO_RegisterWrite(REG_DIOMAPPING2, 0x00);
    8ed0:	2100      	movs	r1, #0
    8ed2:	2041      	movs	r0, #65	; 0x41
    8ed4:	47a0      	blx	r4
    8ed6:	e7ca      	b.n	8e6e <RADIO_RxHandler+0x56>
        Radio_WriteMode(MODE_RXCONT, radioConfiguration.modulation, 0);
    8ed8:	3334      	adds	r3, #52	; 0x34
    8eda:	4a11      	ldr	r2, [pc, #68]	; (8f20 <RADIO_RxHandler+0x108>)
    8edc:	5cd1      	ldrb	r1, [r2, r3]
    8ede:	2200      	movs	r2, #0
    8ee0:	2005      	movs	r0, #5
    8ee2:	4b11      	ldr	r3, [pc, #68]	; (8f28 <RADIO_RxHandler+0x110>)
    8ee4:	4798      	blx	r3
    8ee6:	e7de      	b.n	8ea6 <RADIO_RxHandler+0x8e>
            Radio_WriteMode(MODE_RXSINGLE, MODULATION_LORA, 0);
    8ee8:	2200      	movs	r2, #0
    8eea:	2101      	movs	r1, #1
    8eec:	2006      	movs	r0, #6
    8eee:	4b0e      	ldr	r3, [pc, #56]	; (8f28 <RADIO_RxHandler+0x110>)
    8ef0:	4798      	blx	r3
    8ef2:	e7d8      	b.n	8ea6 <RADIO_RxHandler+0x8e>
         SwTimerStart(radioConfiguration.watchdogTimerId, MS_TO_US(radioConfiguration.watchdogTimerTimeout), SW_TIMEOUT_RELATIVE, (void *)Radio_WatchdogTimeout, NULL);
    8ef4:	23fa      	movs	r3, #250	; 0xfa
    8ef6:	009b      	lsls	r3, r3, #2
    8ef8:	4359      	muls	r1, r3
    8efa:	232f      	movs	r3, #47	; 0x2f
    8efc:	4a08      	ldr	r2, [pc, #32]	; (8f20 <RADIO_RxHandler+0x108>)
    8efe:	5cd0      	ldrb	r0, [r2, r3]
    8f00:	2300      	movs	r3, #0
    8f02:	9300      	str	r3, [sp, #0]
    8f04:	4b0b      	ldr	r3, [pc, #44]	; (8f34 <RADIO_RxHandler+0x11c>)
    8f06:	2200      	movs	r2, #0
    8f08:	4c09      	ldr	r4, [pc, #36]	; (8f30 <RADIO_RxHandler+0x118>)
    8f0a:	47a0      	blx	r4
    8f0c:	e7d3      	b.n	8eb6 <RADIO_RxHandler+0x9e>
    8f0e:	46c0      	nop			; (mov r8, r8)
    8f10:	00008de1 	.word	0x00008de1
    8f14:	000089c5 	.word	0x000089c5
    8f18:	20000304 	.word	0x20000304
    8f1c:	00007e81 	.word	0x00007e81
    8f20:	20003ba8 	.word	0x20003ba8
    8f24:	0000fd51 	.word	0x0000fd51
    8f28:	00010fd9 	.word	0x00010fd9
    8f2c:	00008acd 	.word	0x00008acd
    8f30:	0001099d 	.word	0x0001099d
    8f34:	00008a35 	.word	0x00008a35

00008f38 <Radio_ResetClockInput>:

/*********************************************************************//**
\brief	This function power off the clock source of Radio
*************************************************************************/
void Radio_ResetClockInput(void)
{
    8f38:	b510      	push	{r4, lr}
#ifndef UT

	if (TCXO == radioConfiguration.clockSource)
    8f3a:	2355      	movs	r3, #85	; 0x55
    8f3c:	4a03      	ldr	r2, [pc, #12]	; (8f4c <Radio_ResetClockInput+0x14>)
    8f3e:	5cd3      	ldrb	r3, [r2, r3]
    8f40:	2b00      	cmp	r3, #0
    8f42:	d000      	beq.n	8f46 <Radio_ResetClockInput+0xe>
	{
		HAL_TCXOPowerOff();
	}
#endif
}
    8f44:	bd10      	pop	{r4, pc}
		HAL_TCXOPowerOff();
    8f46:	4b02      	ldr	r3, [pc, #8]	; (8f50 <Radio_ResetClockInput+0x18>)
    8f48:	4798      	blx	r3
}
    8f4a:	e7fb      	b.n	8f44 <Radio_ResetClockInput+0xc>
    8f4c:	20003ba8 	.word	0x20003ba8
    8f50:	0000ff15 	.word	0x0000ff15

00008f54 <RADIO_InitDefaultAttributes>:
{
    8f54:	b570      	push	{r4, r5, r6, lr}
	radioState = state;
    8f56:	2001      	movs	r0, #1
    8f58:	4b5f      	ldr	r3, [pc, #380]	; (90d8 <RADIO_InitDefaultAttributes+0x184>)
    8f5a:	7018      	strb	r0, [r3, #0]
    radioConfiguration.frequency = RADIO_DEFAULT_FREQ;
    8f5c:	4b5f      	ldr	r3, [pc, #380]	; (90dc <RADIO_InitDefaultAttributes+0x188>)
    8f5e:	4a60      	ldr	r2, [pc, #384]	; (90e0 <RADIO_InitDefaultAttributes+0x18c>)
    8f60:	601a      	str	r2, [r3, #0]
    radioConfiguration.frequencyDeviation = 25000;
    8f62:	4a60      	ldr	r2, [pc, #384]	; (90e4 <RADIO_InitDefaultAttributes+0x190>)
    8f64:	605a      	str	r2, [r3, #4]
    radioConfiguration.bitRate = 50000;
    8f66:	4a60      	ldr	r2, [pc, #384]	; (90e8 <RADIO_InitDefaultAttributes+0x194>)
    8f68:	609a      	str	r2, [r3, #8]
    radioConfiguration.modulation = MODULATION_LORA;
    8f6a:	2134      	movs	r1, #52	; 0x34
    8f6c:	5458      	strb	r0, [r3, r1]
    radioConfiguration.bandWidth = BW_125KHZ;
    8f6e:	2407      	movs	r4, #7
    8f70:	2236      	movs	r2, #54	; 0x36
    8f72:	549c      	strb	r4, [r3, r2]
    radioConfiguration.outputPower = 1;
    8f74:	3a14      	subs	r2, #20
    8f76:	5498      	strb	r0, [r3, r2]
    radioConfiguration.errorCodingRate = CR_4_5;
    8f78:	3211      	adds	r2, #17
    8f7a:	5498      	strb	r0, [r3, r2]
    radioConfiguration.implicitHeaderMode = 0;
    8f7c:	2200      	movs	r2, #0
    8f7e:	2526      	movs	r5, #38	; 0x26
    8f80:	555a      	strb	r2, [r3, r5]
    radioConfiguration.preambleLen = RADIO_PHY_PREAMBLE_LENGTH;
    8f82:	3d1e      	subs	r5, #30
    8f84:	829d      	strh	r5, [r3, #20]
    radioConfiguration.dataRate = SF_7;
    8f86:	352d      	adds	r5, #45	; 0x2d
    8f88:	555c      	strb	r4, [r3, r5]
    radioConfiguration.crcOn = 1;
    8f8a:	341c      	adds	r4, #28
    8f8c:	5518      	strb	r0, [r3, r4]
    radioConfiguration.paBoost = 0;
    8f8e:	3401      	adds	r4, #1
    8f90:	551a      	strb	r2, [r3, r4]
    radioConfiguration.iqInverted = 0;
    8f92:	3401      	adds	r4, #1
    8f94:	551a      	strb	r2, [r3, r4]
    radioConfiguration.syncWord[0] = 0xC1;
    8f96:	349c      	adds	r4, #156	; 0x9c
    8f98:	765c      	strb	r4, [r3, #25]
    radioConfiguration.syncWord[1] = 0x94;
    8f9a:	355f      	adds	r5, #95	; 0x5f
    8f9c:	769d      	strb	r5, [r3, #26]
    radioConfiguration.syncWord[2] = 0xC1;
    8f9e:	76dc      	strb	r4, [r3, #27]
    radioConfiguration.syncWordLen = 3;
    8fa0:	3d91      	subs	r5, #145	; 0x91
    8fa2:	3ca0      	subs	r4, #160	; 0xa0
    8fa4:	551d      	strb	r5, [r3, r4]
    radioConfiguration.syncWordLoRa = 0x34;
    8fa6:	7619      	strb	r1, [r3, #24]
    radioConfiguration.frequencyHopPeriod = 0;
    8fa8:	2100      	movs	r1, #0
    8faa:	82da      	strh	r2, [r3, #22]
    radioConfiguration.packetSNR = -128;
    8fac:	357d      	adds	r5, #125	; 0x7d
    8fae:	3411      	adds	r4, #17
    8fb0:	551d      	strb	r5, [r3, r4]
    radioConfiguration.watchdogTimerTimeout = RADIO_WATCHDOG_TIMEOUT;
    8fb2:	4c4e      	ldr	r4, [pc, #312]	; (90ec <RADIO_InitDefaultAttributes+0x198>)
    8fb4:	60dc      	str	r4, [r3, #12]
    radioConfiguration.fskDataShaping = FSK_SHAPING_GAUSS_BT_0_5;
    8fb6:	3d7e      	subs	r5, #126	; 0x7e
    8fb8:	2437      	movs	r4, #55	; 0x37
    8fba:	551d      	strb	r5, [r3, r4]
    radioConfiguration.rxBw = FSKBW_50_0KHZ;
    8fbc:	3509      	adds	r5, #9
    8fbe:	3401      	adds	r4, #1
    8fc0:	551d      	strb	r5, [r3, r4]
    radioConfiguration.afcBw = FSKBW_83_3KHZ;
    8fc2:	3507      	adds	r5, #7
    8fc4:	3401      	adds	r4, #1
    8fc6:	551d      	strb	r5, [r3, r4]
    radioConfiguration.dataBufferLen = 0;
    8fc8:	3c0d      	subs	r4, #13
    8fca:	5519      	strb	r1, [r3, r4]
    radioConfiguration.dataBuffer = &radioBuffer[16];
    8fcc:	4c48      	ldr	r4, [pc, #288]	; (90f0 <RADIO_InitDefaultAttributes+0x19c>)
    8fce:	629c      	str	r4, [r3, #40]	; 0x28
	radioConfiguration.lbt.lbtChannelRSSI = 0;
    8fd0:	244c      	movs	r4, #76	; 0x4c
    8fd2:	531a      	strh	r2, [r3, r4]
	radioConfiguration.lbt.lbtIrqFlagsBackup = 0;
    8fd4:	3402      	adds	r4, #2
    8fd6:	5519      	strb	r1, [r3, r4]
	radioConfiguration.lbt.lbtRssiSamples = 0;
    8fd8:	645a      	str	r2, [r3, #68]	; 0x44
	radioConfiguration.lbt.lbtRssiSamplesCount = 0;
    8fda:	3401      	adds	r4, #1
    8fdc:	5519      	strb	r1, [r3, r4]
	radioConfiguration.lbt.lbtScanTimeout = 0;
    8fde:	649a      	str	r2, [r3, #72]	; 0x48
	radioConfiguration.lbt.params.lbtNumOfSamples = 0;
    8fe0:	3c0f      	subs	r4, #15
    8fe2:	5519      	strb	r1, [r3, r4]
	radioConfiguration.lbt.params.lbtScanPeriod = 0;
    8fe4:	879a      	strh	r2, [r3, #60]	; 0x3c
	radioConfiguration.lbt.params.lbtThreshold = 0;
    8fe6:	87da      	strh	r2, [r3, #62]	; 0x3e
	radioConfiguration.lbt.params.lbtTransmitOn = false;
    8fe8:	3241      	adds	r2, #65	; 0x41
    8fea:	5499      	strb	r1, [r3, r2]
	radioConfiguration.clockStabilizationDelay = 0;
    8fec:	3213      	adds	r2, #19
    8fee:	5499      	strb	r1, [r3, r2]
	radioConfiguration.clockSource             = XTAL;
    8ff0:	3201      	adds	r2, #1
    8ff2:	5498      	strb	r0, [r3, r2]
	radioConfiguration.fskPayloadIndex = 0;
    8ff4:	3203      	adds	r2, #3
    8ff6:	5499      	strb	r1, [r3, r2]
    if (0 == radioConfiguration.initialized)
    8ff8:	3a28      	subs	r2, #40	; 0x28
    8ffa:	5c9b      	ldrb	r3, [r3, r2]
    8ffc:	2b00      	cmp	r3, #0
    8ffe:	d11b      	bne.n	9038 <RADIO_InitDefaultAttributes+0xe4>
			retVal = SwTimerCreate(&radioConfiguration.timeOnAirTimerId);
    9000:	483c      	ldr	r0, [pc, #240]	; (90f4 <RADIO_InitDefaultAttributes+0x1a0>)
    9002:	4b3d      	ldr	r3, [pc, #244]	; (90f8 <RADIO_InitDefaultAttributes+0x1a4>)
    9004:	4798      	blx	r3
        if (LORAWAN_SUCCESS == retVal)
    9006:	2808      	cmp	r0, #8
    9008:	d002      	beq.n	9010 <RADIO_InitDefaultAttributes+0xbc>
			SwTimerReset();
    900a:	4b3c      	ldr	r3, [pc, #240]	; (90fc <RADIO_InitDefaultAttributes+0x1a8>)
    900c:	4798      	blx	r3
    900e:	e021      	b.n	9054 <RADIO_InitDefaultAttributes+0x100>
			retVal = SwTimerCreate(&radioConfiguration.fskRxWindowTimerId);
    9010:	483b      	ldr	r0, [pc, #236]	; (9100 <RADIO_InitDefaultAttributes+0x1ac>)
    9012:	4b39      	ldr	r3, [pc, #228]	; (90f8 <RADIO_InitDefaultAttributes+0x1a4>)
    9014:	4798      	blx	r3
        if (LORAWAN_SUCCESS == retVal)
    9016:	2808      	cmp	r0, #8
    9018:	d1f7      	bne.n	900a <RADIO_InitDefaultAttributes+0xb6>
			retVal = SwTimerCreate(&radioConfiguration.watchdogTimerId);
    901a:	483a      	ldr	r0, [pc, #232]	; (9104 <RADIO_InitDefaultAttributes+0x1b0>)
    901c:	4b36      	ldr	r3, [pc, #216]	; (90f8 <RADIO_InitDefaultAttributes+0x1a4>)
    901e:	4798      	blx	r3
        if (LORAWAN_SUCCESS == retVal)
    9020:	2808      	cmp	r0, #8
    9022:	d1f2      	bne.n	900a <RADIO_InitDefaultAttributes+0xb6>
			retVal = SwTimerCreate(&radioConfiguration.lbt.lbtScanTimerId);
    9024:	4838      	ldr	r0, [pc, #224]	; (9108 <RADIO_InitDefaultAttributes+0x1b4>)
    9026:	4b34      	ldr	r3, [pc, #208]	; (90f8 <RADIO_InitDefaultAttributes+0x1a4>)
    9028:	4798      	blx	r3
        if (LORAWAN_SUCCESS == retVal)
    902a:	2808      	cmp	r0, #8
    902c:	d1ed      	bne.n	900a <RADIO_InitDefaultAttributes+0xb6>
			radioConfiguration.initialized = 1;
    902e:	2101      	movs	r1, #1
    9030:	2330      	movs	r3, #48	; 0x30
    9032:	4a2a      	ldr	r2, [pc, #168]	; (90dc <RADIO_InitDefaultAttributes+0x188>)
    9034:	54d1      	strb	r1, [r2, r3]
    9036:	e00d      	b.n	9054 <RADIO_InitDefaultAttributes+0x100>
        SwTimerStop(radioConfiguration.timeOnAirTimerId);
    9038:	4d28      	ldr	r5, [pc, #160]	; (90dc <RADIO_InitDefaultAttributes+0x188>)
    903a:	232d      	movs	r3, #45	; 0x2d
    903c:	5ce8      	ldrb	r0, [r5, r3]
    903e:	4c33      	ldr	r4, [pc, #204]	; (910c <RADIO_InitDefaultAttributes+0x1b8>)
    9040:	47a0      	blx	r4
        SwTimerStop(radioConfiguration.fskRxWindowTimerId);
    9042:	232e      	movs	r3, #46	; 0x2e
    9044:	5ce8      	ldrb	r0, [r5, r3]
    9046:	47a0      	blx	r4
        SwTimerStop(radioConfiguration.watchdogTimerId);
    9048:	232f      	movs	r3, #47	; 0x2f
    904a:	5ce8      	ldrb	r0, [r5, r3]
    904c:	47a0      	blx	r4
		SwTimerStop(radioConfiguration.lbt.lbtScanTimerId);
    904e:	2350      	movs	r3, #80	; 0x50
    9050:	5ce8      	ldrb	r0, [r5, r3]
    9052:	47a0      	blx	r4
    RADIO_Reset();
    9054:	4b2e      	ldr	r3, [pc, #184]	; (9110 <RADIO_InitDefaultAttributes+0x1bc>)
    9056:	4798      	blx	r3
	if (TCXO == HAL_GetRadioClkSrc())
    9058:	4b2e      	ldr	r3, [pc, #184]	; (9114 <RADIO_InitDefaultAttributes+0x1c0>)
    905a:	4798      	blx	r3
    905c:	2800      	cmp	r0, #0
    905e:	d032      	beq.n	90c6 <RADIO_InitDefaultAttributes+0x172>
    Radio_SetClockInput();
    9060:	4b2d      	ldr	r3, [pc, #180]	; (9118 <RADIO_InitDefaultAttributes+0x1c4>)
    9062:	4798      	blx	r3
    Radio_WriteMode(MODE_STANDBY, MODULATION_FSK, 1);
    9064:	2201      	movs	r2, #1
    9066:	2100      	movs	r1, #0
    9068:	2001      	movs	r0, #1
    906a:	4b2c      	ldr	r3, [pc, #176]	; (911c <RADIO_InitDefaultAttributes+0x1c8>)
    906c:	4798      	blx	r3
    Radio_WriteFrequency(radioConfiguration.frequency);
    906e:	4b1b      	ldr	r3, [pc, #108]	; (90dc <RADIO_InitDefaultAttributes+0x188>)
    9070:	6818      	ldr	r0, [r3, #0]
    9072:	4b2b      	ldr	r3, [pc, #172]	; (9120 <RADIO_InitDefaultAttributes+0x1cc>)
    9074:	4798      	blx	r3
    RADIO_RegisterWrite(REG_FSK_IMAGECAL, 0x42);
    9076:	2142      	movs	r1, #66	; 0x42
    9078:	203b      	movs	r0, #59	; 0x3b
    907a:	4b2a      	ldr	r3, [pc, #168]	; (9124 <RADIO_InitDefaultAttributes+0x1d0>)
    907c:	4798      	blx	r3
    while ((RADIO_RegisterRead(REG_FSK_IMAGECAL) & 0x20) != 0)
    907e:	4d2a      	ldr	r5, [pc, #168]	; (9128 <RADIO_InitDefaultAttributes+0x1d4>)
    9080:	2420      	movs	r4, #32
    9082:	203b      	movs	r0, #59	; 0x3b
    9084:	47a8      	blx	r5
    9086:	4204      	tst	r4, r0
    9088:	d1fb      	bne.n	9082 <RADIO_InitDefaultAttributes+0x12e>
    RADIO_RegisterWrite(REG_LNA, 0x23);
    908a:	2123      	movs	r1, #35	; 0x23
    908c:	200c      	movs	r0, #12
    908e:	4c25      	ldr	r4, [pc, #148]	; (9124 <RADIO_InitDefaultAttributes+0x1d0>)
    9090:	47a0      	blx	r4
    RADIO_RegisterWrite(REG_FSK_PREAMBLEDETECT, 0xAA);
    9092:	21aa      	movs	r1, #170	; 0xaa
    9094:	201f      	movs	r0, #31
    9096:	47a0      	blx	r4
    RADIO_RegisterWrite(REG_FSK_PAYLOADLENGTH, 0xFF);
    9098:	21ff      	movs	r1, #255	; 0xff
    909a:	2032      	movs	r0, #50	; 0x32
    909c:	47a0      	blx	r4
    RADIO_RegisterWrite(REG_FSK_PACKETCONFIG2, 1 << SHIFT6);
    909e:	2140      	movs	r1, #64	; 0x40
    90a0:	2031      	movs	r0, #49	; 0x31
    90a2:	47a0      	blx	r4
    Radio_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
    90a4:	2201      	movs	r2, #1
    90a6:	2101      	movs	r1, #1
    90a8:	2000      	movs	r0, #0
    90aa:	4b1c      	ldr	r3, [pc, #112]	; (911c <RADIO_InitDefaultAttributes+0x1c8>)
    90ac:	4798      	blx	r3
    RADIO_RegisterWrite(REG_LORA_PAYLOADMAXLENGTH, 0xFF);
    90ae:	21ff      	movs	r1, #255	; 0xff
    90b0:	2023      	movs	r0, #35	; 0x23
    90b2:	47a0      	blx	r4
    radioConfiguration.regVersion = RADIO_RegisterRead(REG_VERSION);
    90b4:	2042      	movs	r0, #66	; 0x42
    90b6:	4b1c      	ldr	r3, [pc, #112]	; (9128 <RADIO_InitDefaultAttributes+0x1d4>)
    90b8:	4798      	blx	r3
    90ba:	2331      	movs	r3, #49	; 0x31
    90bc:	4a07      	ldr	r2, [pc, #28]	; (90dc <RADIO_InitDefaultAttributes+0x188>)
    90be:	54d0      	strb	r0, [r2, r3]
	Radio_ResetClockInput();
    90c0:	4b1a      	ldr	r3, [pc, #104]	; (912c <RADIO_InitDefaultAttributes+0x1d8>)
    90c2:	4798      	blx	r3
}
    90c4:	bd70      	pop	{r4, r5, r6, pc}
		radioConfiguration.clockSource             = TCXO;
    90c6:	4c05      	ldr	r4, [pc, #20]	; (90dc <RADIO_InitDefaultAttributes+0x188>)
    90c8:	2200      	movs	r2, #0
    90ca:	2355      	movs	r3, #85	; 0x55
    90cc:	54e2      	strb	r2, [r4, r3]
		radioConfiguration.clockStabilizationDelay = HAL_GetRadioClkStabilizationDelay();
    90ce:	4b18      	ldr	r3, [pc, #96]	; (9130 <RADIO_InitDefaultAttributes+0x1dc>)
    90d0:	4798      	blx	r3
    90d2:	2354      	movs	r3, #84	; 0x54
    90d4:	54e0      	strb	r0, [r4, r3]
    90d6:	e7c3      	b.n	9060 <RADIO_InitDefaultAttributes+0x10c>
    90d8:	200025a9 	.word	0x200025a9
    90dc:	20003ba8 	.word	0x20003ba8
    90e0:	33be27a0 	.word	0x33be27a0
    90e4:	000061a8 	.word	0x000061a8
    90e8:	0000c350 	.word	0x0000c350
    90ec:	00003a98 	.word	0x00003a98
    90f0:	200024a4 	.word	0x200024a4
    90f4:	20003bd5 	.word	0x20003bd5
    90f8:	00010969 	.word	0x00010969
    90fc:	000108ad 	.word	0x000108ad
    9100:	20003bd6 	.word	0x20003bd6
    9104:	20003bd7 	.word	0x20003bd7
    9108:	20003bf8 	.word	0x20003bf8
    910c:	00010cb5 	.word	0x00010cb5
    9110:	0000fd11 	.word	0x0000fd11
    9114:	0000fef5 	.word	0x0000fef5
    9118:	00008de1 	.word	0x00008de1
    911c:	00010fd9 	.word	0x00010fd9
    9120:	00007e39 	.word	0x00007e39
    9124:	0000fd51 	.word	0x0000fd51
    9128:	0000fd79 	.word	0x0000fd79
    912c:	00008f39 	.word	0x00008f39
    9130:	0000fef1 	.word	0x0000fef1

00009134 <RADIO_Receive>:
{
    9134:	b570      	push	{r4, r5, r6, lr}
    9136:	0004      	movs	r4, r0
    if (RECEIVE_START == param->action)
    9138:	7803      	ldrb	r3, [r0, #0]
    913a:	2b00      	cmp	r3, #0
    913c:	d121      	bne.n	9182 <RADIO_Receive+0x4e>
	return radioState;
    913e:	4b27      	ldr	r3, [pc, #156]	; (91dc <RADIO_Receive+0xa8>)
    9140:	781b      	ldrb	r3, [r3, #0]
            return ERR_RADIO_BUSY;
    9142:	2004      	movs	r0, #4
        if (RADIO_STATE_IDLE != RADIO_GetState())
    9144:	2b01      	cmp	r3, #1
    9146:	d000      	beq.n	914a <RADIO_Receive+0x16>
}
    9148:	bd70      	pop	{r4, r5, r6, pc}
		SwTimerStop(radioConfiguration.watchdogTimerId);
    914a:	4d25      	ldr	r5, [pc, #148]	; (91e0 <RADIO_Receive+0xac>)
    914c:	332e      	adds	r3, #46	; 0x2e
    914e:	5ce8      	ldrb	r0, [r5, r3]
    9150:	4b24      	ldr	r3, [pc, #144]	; (91e4 <RADIO_Receive+0xb0>)
    9152:	4798      	blx	r3
		if (MODULATION_FSK == radioConfiguration.modulation)
    9154:	2334      	movs	r3, #52	; 0x34
    9156:	5ceb      	ldrb	r3, [r5, r3]
    9158:	2b00      	cmp	r3, #0
    915a:	d00c      	beq.n	9176 <RADIO_Receive+0x42>
        rxWindowSize = param->rxWindowSize;
    915c:	8862      	ldrh	r2, [r4, #2]
    915e:	4b22      	ldr	r3, [pc, #136]	; (91e8 <RADIO_Receive+0xb4>)
    9160:	801a      	strh	r2, [r3, #0]
	radioState = state;
    9162:	2204      	movs	r2, #4
    9164:	4b1d      	ldr	r3, [pc, #116]	; (91dc <RADIO_Receive+0xa8>)
    9166:	701a      	strb	r2, [r3, #0]
        radioPostTask(RADIO_RX_TASK_ID);
    9168:	2008      	movs	r0, #8
    916a:	4b20      	ldr	r3, [pc, #128]	; (91ec <RADIO_Receive+0xb8>)
    916c:	4798      	blx	r3
		Radio_SetClockInput();
    916e:	4b20      	ldr	r3, [pc, #128]	; (91f0 <RADIO_Receive+0xbc>)
    9170:	4798      	blx	r3
        return ERR_NONE;
    9172:	2000      	movs	r0, #0
    9174:	e7e8      	b.n	9148 <RADIO_Receive+0x14>
			SwTimerStop(radioConfiguration.fskRxWindowTimerId);
    9176:	332e      	adds	r3, #46	; 0x2e
    9178:	4a19      	ldr	r2, [pc, #100]	; (91e0 <RADIO_Receive+0xac>)
    917a:	5cd0      	ldrb	r0, [r2, r3]
    917c:	4b19      	ldr	r3, [pc, #100]	; (91e4 <RADIO_Receive+0xb0>)
    917e:	4798      	blx	r3
    9180:	e7ec      	b.n	915c <RADIO_Receive+0x28>
	return radioState;
    9182:	4b16      	ldr	r3, [pc, #88]	; (91dc <RADIO_Receive+0xa8>)
    9184:	781b      	ldrb	r3, [r3, #0]
			return ERR_NONE;
    9186:	2000      	movs	r0, #0
		if (RADIO_STATE_IDLE == RADIO_GetState())
    9188:	2b01      	cmp	r3, #1
    918a:	d0dd      	beq.n	9148 <RADIO_Receive+0x14>
	return radioState;
    918c:	4b13      	ldr	r3, [pc, #76]	; (91dc <RADIO_Receive+0xa8>)
    918e:	781b      	ldrb	r3, [r3, #0]
            return ERR_INVALID_REQ;
    9190:	3003      	adds	r0, #3
        else if (RADIO_STATE_RX != RADIO_GetState())
    9192:	2b04      	cmp	r3, #4
    9194:	d1d8      	bne.n	9148 <RADIO_Receive+0x14>
        SwTimerStop(radioConfiguration.watchdogTimerId);
    9196:	4c12      	ldr	r4, [pc, #72]	; (91e0 <RADIO_Receive+0xac>)
    9198:	332b      	adds	r3, #43	; 0x2b
    919a:	5ce0      	ldrb	r0, [r4, r3]
    919c:	4b11      	ldr	r3, [pc, #68]	; (91e4 <RADIO_Receive+0xb0>)
    919e:	4798      	blx	r3
        if (MODULATION_FSK == radioConfiguration.modulation)
    91a0:	2334      	movs	r3, #52	; 0x34
    91a2:	5ce3      	ldrb	r3, [r4, r3]
    91a4:	2b00      	cmp	r3, #0
    91a6:	d012      	beq.n	91ce <RADIO_Receive+0x9a>
        Radio_WriteMode(MODE_SLEEP, radioConfiguration.modulation, 0);
    91a8:	2334      	movs	r3, #52	; 0x34
    91aa:	4a0d      	ldr	r2, [pc, #52]	; (91e0 <RADIO_Receive+0xac>)
    91ac:	5cd1      	ldrb	r1, [r2, r3]
    91ae:	2200      	movs	r2, #0
    91b0:	2000      	movs	r0, #0
    91b2:	4b10      	ldr	r3, [pc, #64]	; (91f4 <RADIO_Receive+0xc0>)
    91b4:	4798      	blx	r3
		Radio_ResetClockInput();
    91b6:	4b10      	ldr	r3, [pc, #64]	; (91f8 <RADIO_Receive+0xc4>)
    91b8:	4798      	blx	r3
	radioState = state;
    91ba:	2201      	movs	r2, #1
    91bc:	4b07      	ldr	r3, [pc, #28]	; (91dc <RADIO_Receive+0xa8>)
    91be:	701a      	strb	r2, [r3, #0]
        radioClearTask(RADIO_RX_TASK_ID);
    91c0:	2008      	movs	r0, #8
    91c2:	4c0e      	ldr	r4, [pc, #56]	; (91fc <RADIO_Receive+0xc8>)
    91c4:	47a0      	blx	r4
        radioClearTask(RADIO_RX_DONE_TASK_ID);
    91c6:	2002      	movs	r0, #2
    91c8:	47a0      	blx	r4
    return ERR_NONE;
    91ca:	2000      	movs	r0, #0
    91cc:	e7bc      	b.n	9148 <RADIO_Receive+0x14>
            SwTimerStop(radioConfiguration.fskRxWindowTimerId);
    91ce:	332e      	adds	r3, #46	; 0x2e
    91d0:	4a03      	ldr	r2, [pc, #12]	; (91e0 <RADIO_Receive+0xac>)
    91d2:	5cd0      	ldrb	r0, [r2, r3]
    91d4:	4b03      	ldr	r3, [pc, #12]	; (91e4 <RADIO_Receive+0xb0>)
    91d6:	4798      	blx	r3
    91d8:	e7e6      	b.n	91a8 <RADIO_Receive+0x74>
    91da:	46c0      	nop			; (mov r8, r8)
    91dc:	200025a9 	.word	0x200025a9
    91e0:	20003ba8 	.word	0x20003ba8
    91e4:	00010cb5 	.word	0x00010cb5
    91e8:	20000304 	.word	0x20000304
    91ec:	000086ad 	.word	0x000086ad
    91f0:	00008de1 	.word	0x00008de1
    91f4:	00010fd9 	.word	0x00010fd9
    91f8:	00008f39 	.word	0x00008f39
    91fc:	000086d9 	.word	0x000086d9

00009200 <RADIO_TxHandler>:
{
    9200:	b5f0      	push	{r4, r5, r6, r7, lr}
    9202:	b087      	sub	sp, #28
	RadioCallbackParam.status = ERR_NONE;
    9204:	2200      	movs	r2, #0
    9206:	ab03      	add	r3, sp, #12
    9208:	701a      	strb	r2, [r3, #0]
	Radio_SetClockInput();
    920a:	4b69      	ldr	r3, [pc, #420]	; (93b0 <RADIO_TxHandler+0x1b0>)
    920c:	4798      	blx	r3
    SwTimerStop(radioConfiguration.timeOnAirTimerId);
    920e:	4c69      	ldr	r4, [pc, #420]	; (93b4 <RADIO_TxHandler+0x1b4>)
    9210:	232d      	movs	r3, #45	; 0x2d
    9212:	5ce0      	ldrb	r0, [r4, r3]
    9214:	4b68      	ldr	r3, [pc, #416]	; (93b8 <RADIO_TxHandler+0x1b8>)
    9216:	4798      	blx	r3
	if (true == radioConfiguration.lbt.params.lbtTransmitOn)
    9218:	2341      	movs	r3, #65	; 0x41
    921a:	5ce3      	ldrb	r3, [r4, r3]
    921c:	2b00      	cmp	r3, #0
    921e:	d136      	bne.n	928e <RADIO_TxHandler+0x8e>
  if(RadioCallbackParam.status != ERR_CHANNEL_BUSY)
    9220:	ab03      	add	r3, sp, #12
    9222:	781b      	ldrb	r3, [r3, #0]
    9224:	2b07      	cmp	r3, #7
    9226:	d02f      	beq.n	9288 <RADIO_TxHandler+0x88>
	Radio_EnableRfControl(RADIO_RFCTRL_TX);
    9228:	2001      	movs	r0, #1
    922a:	4b64      	ldr	r3, [pc, #400]	; (93bc <RADIO_TxHandler+0x1bc>)
    922c:	4798      	blx	r3
	Radio_WriteConfiguration(4);
    922e:	2004      	movs	r0, #4
    9230:	4b63      	ldr	r3, [pc, #396]	; (93c0 <RADIO_TxHandler+0x1c0>)
    9232:	4798      	blx	r3
	if (MODULATION_LORA == radioConfiguration.modulation)
    9234:	2334      	movs	r3, #52	; 0x34
    9236:	4a5f      	ldr	r2, [pc, #380]	; (93b4 <RADIO_TxHandler+0x1b4>)
    9238:	5cd3      	ldrb	r3, [r2, r3]
    923a:	2b01      	cmp	r3, #1
    923c:	d100      	bne.n	9240 <RADIO_TxHandler+0x40>
    923e:	e088      	b.n	9352 <RADIO_TxHandler+0x152>
		RADIO_RegisterWrite(REG_DIOMAPPING1, 0x00);
    9240:	2100      	movs	r1, #0
    9242:	2040      	movs	r0, #64	; 0x40
    9244:	4c5f      	ldr	r4, [pc, #380]	; (93c4 <RADIO_TxHandler+0x1c4>)
    9246:	47a0      	blx	r4
		RADIO_RegisterWrite(REG_DIOMAPPING2, 0x00);
    9248:	2100      	movs	r1, #0
    924a:	2041      	movs	r0, #65	; 0x41
    924c:	47a0      	blx	r4
		radioConfiguration.fskPayloadIndex = 0;
    924e:	2100      	movs	r1, #0
    9250:	2358      	movs	r3, #88	; 0x58
    9252:	4a58      	ldr	r2, [pc, #352]	; (93b4 <RADIO_TxHandler+0x1b4>)
    9254:	54d1      	strb	r1, [r2, r3]
		RADIO_RegisterWrite(REG_FIFO, txBufferLen);
    9256:	4d5c      	ldr	r5, [pc, #368]	; (93c8 <RADIO_TxHandler+0x1c8>)
    9258:	7829      	ldrb	r1, [r5, #0]
    925a:	2000      	movs	r0, #0
    925c:	47a0      	blx	r4
		Radio_FSKTxPayloadHandler(transmitBufferPtr, txBufferLen);
    925e:	7829      	ldrb	r1, [r5, #0]
    9260:	4b5a      	ldr	r3, [pc, #360]	; (93cc <RADIO_TxHandler+0x1cc>)
    9262:	6818      	ldr	r0, [r3, #0]
    9264:	4b5a      	ldr	r3, [pc, #360]	; (93d0 <RADIO_TxHandler+0x1d0>)
    9266:	4798      	blx	r3
	Radio_WriteMode(MODE_TX, radioConfiguration.modulation, 0);
    9268:	4c52      	ldr	r4, [pc, #328]	; (93b4 <RADIO_TxHandler+0x1b4>)
    926a:	2334      	movs	r3, #52	; 0x34
    926c:	5ce1      	ldrb	r1, [r4, r3]
    926e:	2200      	movs	r2, #0
    9270:	2003      	movs	r0, #3
    9272:	4b58      	ldr	r3, [pc, #352]	; (93d4 <RADIO_TxHandler+0x1d4>)
    9274:	4798      	blx	r3
    timeOnAir = SwTimerGetTime();
    9276:	4b58      	ldr	r3, [pc, #352]	; (93d8 <RADIO_TxHandler+0x1d8>)
    9278:	4798      	blx	r3
    927a:	4b58      	ldr	r3, [pc, #352]	; (93dc <RADIO_TxHandler+0x1dc>)
    927c:	6018      	str	r0, [r3, #0]
    927e:	6059      	str	r1, [r3, #4]
	if (0 != radioConfiguration.watchdogTimerTimeout)
    9280:	68e1      	ldr	r1, [r4, #12]
    9282:	2900      	cmp	r1, #0
    9284:	d000      	beq.n	9288 <RADIO_TxHandler+0x88>
    9286:	e086      	b.n	9396 <RADIO_TxHandler+0x196>
}
    9288:	2000      	movs	r0, #0
    928a:	b007      	add	sp, #28
    928c:	bdf0      	pop	{r4, r5, r6, r7, pc}
static bool Radio_IsChannelFree(void)
{
	uint16_t lbtScanPeriod = radioConfiguration.lbt.params.lbtScanPeriod;
	
	//50uS for reading a single RSSI sample
	radioConfiguration.lbt.params.lbtNumOfSamples = MS_TO_US(lbtScanPeriod) / 50;
    928e:	4c49      	ldr	r4, [pc, #292]	; (93b4 <RADIO_TxHandler+0x1b4>)
    9290:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
    9292:	20fa      	movs	r0, #250	; 0xfa
    9294:	0080      	lsls	r0, r0, #2
    9296:	4358      	muls	r0, r3
    9298:	2132      	movs	r1, #50	; 0x32
    929a:	4b51      	ldr	r3, [pc, #324]	; (93e0 <RADIO_TxHandler+0x1e0>)
    929c:	4798      	blx	r3
    929e:	2540      	movs	r5, #64	; 0x40
    92a0:	5560      	strb	r0, [r4, r5]

	//Power on the Oscillator before putting the radio to receive state
	Radio_SetClockInput();
    92a2:	4b43      	ldr	r3, [pc, #268]	; (93b0 <RADIO_TxHandler+0x1b0>)
    92a4:	4798      	blx	r3
	
	// Turn on the RF switch.
	Radio_EnableRfControl(RADIO_RFCTRL_RX);
    92a6:	2000      	movs	r0, #0
    92a8:	4b44      	ldr	r3, [pc, #272]	; (93bc <RADIO_TxHandler+0x1bc>)
    92aa:	4798      	blx	r3

	//Write the center frequency of the channel to be check for RSSI
	Radio_WriteFrequency(radioConfiguration.frequency);
    92ac:	6820      	ldr	r0, [r4, #0]
    92ae:	4b4d      	ldr	r3, [pc, #308]	; (93e4 <RADIO_TxHandler+0x1e4>)
    92b0:	4798      	blx	r3
	radioConfiguration.lbt.lbtChannelRSSI = 0;
    92b2:	2200      	movs	r2, #0
    92b4:	234c      	movs	r3, #76	; 0x4c
    92b6:	52e2      	strh	r2, [r4, r3]
	
	Radio_WriteMode(MODE_SLEEP, MODULATION_FSK, BLOCKING_REQ);
    92b8:	3201      	adds	r2, #1
    92ba:	2100      	movs	r1, #0
    92bc:	2000      	movs	r0, #0
    92be:	4e45      	ldr	r6, [pc, #276]	; (93d4 <RADIO_TxHandler+0x1d4>)
    92c0:	47b0      	blx	r6
*************************************************************************/
static void Radio_DisableInterruptLines(void)
{
	// Mask all interrupts
#ifdef ENABLE_DIO0
	HAL_DisbleDIO0Interrupt();
    92c2:	4b49      	ldr	r3, [pc, #292]	; (93e8 <RADIO_TxHandler+0x1e8>)
    92c4:	4798      	blx	r3
#endif /* ENABLE_DIO0 */
#ifdef ENABLE_DIO1
	HAL_DisbleDIO1Interrupt();
    92c6:	4b49      	ldr	r3, [pc, #292]	; (93ec <RADIO_TxHandler+0x1ec>)
    92c8:	4798      	blx	r3
#endif /* ENABLE_DIO1 */
#ifdef ENABLE_DIO2
	HAL_DisbleDIO2Interrupt();
    92ca:	4b49      	ldr	r3, [pc, #292]	; (93f0 <RADIO_TxHandler+0x1f0>)
    92cc:	4798      	blx	r3
	RADIO_RegisterWrite(REG_FSK_RXBW, FSKBW_200_0KHZ);
    92ce:	2109      	movs	r1, #9
    92d0:	2012      	movs	r0, #18
    92d2:	4b3c      	ldr	r3, [pc, #240]	; (93c4 <RADIO_TxHandler+0x1c4>)
    92d4:	4798      	blx	r3
	Radio_WriteMode(MODE_RXCONT, MODULATION_FSK, BLOCKING_REQ);
    92d6:	2201      	movs	r2, #1
    92d8:	2100      	movs	r1, #0
    92da:	2005      	movs	r0, #5
    92dc:	47b0      	blx	r6
	for(uint8_t i = 0; i < radioConfiguration.lbt.params.lbtNumOfSamples; i++) 
    92de:	5d63      	ldrb	r3, [r4, r5]
    92e0:	2b00      	cmp	r3, #0
    92e2:	d012      	beq.n	930a <RADIO_TxHandler+0x10a>
    92e4:	2400      	movs	r4, #0
		 Radio_ReadFSKRssi(&instRSSI );		 
    92e6:	4d43      	ldr	r5, [pc, #268]	; (93f4 <RADIO_TxHandler+0x1f4>)
    92e8:	4f43      	ldr	r7, [pc, #268]	; (93f8 <RADIO_TxHandler+0x1f8>)
		 if (instRSSI > radioConfiguration.lbt.params.lbtThreshold)
    92ea:	4e32      	ldr	r6, [pc, #200]	; (93b4 <RADIO_TxHandler+0x1b4>)
		 Radio_ReadFSKRssi(&instRSSI );		 
    92ec:	0028      	movs	r0, r5
    92ee:	47b8      	blx	r7
		 if (instRSSI > radioConfiguration.lbt.params.lbtThreshold)
    92f0:	233e      	movs	r3, #62	; 0x3e
    92f2:	5ef2      	ldrsh	r2, [r6, r3]
    92f4:	2100      	movs	r1, #0
    92f6:	5e6b      	ldrsh	r3, [r5, r1]
    92f8:	429a      	cmp	r2, r3
    92fa:	db0d      	blt.n	9318 <RADIO_TxHandler+0x118>
	for(uint8_t i = 0; i < radioConfiguration.lbt.params.lbtNumOfSamples; i++) 
    92fc:	3401      	adds	r4, #1
    92fe:	b2e4      	uxtb	r4, r4
    9300:	2340      	movs	r3, #64	; 0x40
    9302:	4a2c      	ldr	r2, [pc, #176]	; (93b4 <RADIO_TxHandler+0x1b4>)
    9304:	5cd3      	ldrb	r3, [r2, r3]
    9306:	42a3      	cmp	r3, r4
    9308:	d8f0      	bhi.n	92ec <RADIO_TxHandler+0xec>
	HAL_EnableDIO0Interrupt();
    930a:	4b3c      	ldr	r3, [pc, #240]	; (93fc <RADIO_TxHandler+0x1fc>)
    930c:	4798      	blx	r3
	HAL_EnableDIO1Interrupt();
    930e:	4b3c      	ldr	r3, [pc, #240]	; (9400 <RADIO_TxHandler+0x200>)
    9310:	4798      	blx	r3
	HAL_EnableDIO2Interrupt();
    9312:	4b3c      	ldr	r3, [pc, #240]	; (9404 <RADIO_TxHandler+0x204>)
    9314:	4798      	blx	r3
    9316:	e783      	b.n	9220 <RADIO_TxHandler+0x20>
	HAL_EnableDIO0Interrupt();
    9318:	4b38      	ldr	r3, [pc, #224]	; (93fc <RADIO_TxHandler+0x1fc>)
    931a:	4798      	blx	r3
	HAL_EnableDIO1Interrupt();
    931c:	4b38      	ldr	r3, [pc, #224]	; (9400 <RADIO_TxHandler+0x200>)
    931e:	4798      	blx	r3
	HAL_EnableDIO2Interrupt();
    9320:	4b38      	ldr	r3, [pc, #224]	; (9404 <RADIO_TxHandler+0x204>)
    9322:	4798      	blx	r3
			Radio_DisableRfControl(RADIO_RFCTRL_RX);
    9324:	2000      	movs	r0, #0
    9326:	4b38      	ldr	r3, [pc, #224]	; (9408 <RADIO_TxHandler+0x208>)
    9328:	4798      	blx	r3
			Radio_ResetClockInput();
    932a:	4b38      	ldr	r3, [pc, #224]	; (940c <RADIO_TxHandler+0x20c>)
    932c:	4798      	blx	r3
			RadioCallbackParam.status = ERR_CHANNEL_BUSY;
    932e:	2207      	movs	r2, #7
    9330:	ab03      	add	r3, sp, #12
    9332:	701a      	strb	r2, [r3, #0]
	radioState = state;
    9334:	3a06      	subs	r2, #6
    9336:	4b36      	ldr	r3, [pc, #216]	; (9410 <RADIO_TxHandler+0x210>)
    9338:	701a      	strb	r2, [r3, #0]
			if (1 == radioCallbackMask.BitMask.radioTxDoneCallback)
    933a:	4b36      	ldr	r3, [pc, #216]	; (9414 <RADIO_TxHandler+0x214>)
    933c:	781b      	ldrb	r3, [r3, #0]
    933e:	079b      	lsls	r3, r3, #30
    9340:	d5a2      	bpl.n	9288 <RADIO_TxHandler+0x88>
				if (radioConfiguration.radioCallback)
    9342:	4b1c      	ldr	r3, [pc, #112]	; (93b4 <RADIO_TxHandler+0x1b4>)
    9344:	691b      	ldr	r3, [r3, #16]
    9346:	2b00      	cmp	r3, #0
    9348:	d09e      	beq.n	9288 <RADIO_TxHandler+0x88>
					radioConfiguration.radioCallback(RADIO_TX_DONE_CALLBACK, (void *) &(RadioCallbackParam));
    934a:	a903      	add	r1, sp, #12
    934c:	2002      	movs	r0, #2
    934e:	4798      	blx	r3
    9350:	e766      	b.n	9220 <RADIO_TxHandler+0x20>
		RADIO_RegisterWrite(REG_LORA_PAYLOADLENGTH, txBufferLen);
    9352:	4d1d      	ldr	r5, [pc, #116]	; (93c8 <RADIO_TxHandler+0x1c8>)
    9354:	7829      	ldrb	r1, [r5, #0]
    9356:	2022      	movs	r0, #34	; 0x22
    9358:	4c1a      	ldr	r4, [pc, #104]	; (93c4 <RADIO_TxHandler+0x1c4>)
    935a:	47a0      	blx	r4
		regValue = RADIO_RegisterRead(REG_PARAMP);
    935c:	200a      	movs	r0, #10
    935e:	4b2e      	ldr	r3, [pc, #184]	; (9418 <RADIO_TxHandler+0x218>)
    9360:	4798      	blx	r3
		regValue &= ~0x0F;    // Clear lower 4 bits
    9362:	21f0      	movs	r1, #240	; 0xf0
    9364:	4001      	ands	r1, r0
		regValue |= 0x08;     // 50us PA Ramp-up time
    9366:	2008      	movs	r0, #8
		RADIO_RegisterWrite(REG_PARAMP, regValue);
    9368:	4301      	orrs	r1, r0
    936a:	3002      	adds	r0, #2
    936c:	47a0      	blx	r4
		RADIO_RegisterWrite(REG_DIOMAPPING1, 0x40);
    936e:	2140      	movs	r1, #64	; 0x40
    9370:	2040      	movs	r0, #64	; 0x40
    9372:	47a0      	blx	r4
		RADIO_RegisterWrite(REG_DIOMAPPING2, 0x00);
    9374:	2100      	movs	r1, #0
    9376:	2041      	movs	r0, #65	; 0x41
    9378:	47a0      	blx	r4
		Radio_WriteMode(MODE_STANDBY, radioConfiguration.modulation, 1);
    937a:	2334      	movs	r3, #52	; 0x34
    937c:	4a0d      	ldr	r2, [pc, #52]	; (93b4 <RADIO_TxHandler+0x1b4>)
    937e:	5cd1      	ldrb	r1, [r2, r3]
    9380:	2201      	movs	r2, #1
    9382:	2001      	movs	r0, #1
    9384:	4b13      	ldr	r3, [pc, #76]	; (93d4 <RADIO_TxHandler+0x1d4>)
    9386:	4798      	blx	r3
		RADIO_FrameWrite(REG_FIFO_ADDRESS, transmitBufferPtr, txBufferLen);
    9388:	782a      	ldrb	r2, [r5, #0]
    938a:	4b10      	ldr	r3, [pc, #64]	; (93cc <RADIO_TxHandler+0x1cc>)
    938c:	6819      	ldr	r1, [r3, #0]
    938e:	2000      	movs	r0, #0
    9390:	4b22      	ldr	r3, [pc, #136]	; (941c <RADIO_TxHandler+0x21c>)
    9392:	4798      	blx	r3
    9394:	e768      	b.n	9268 <RADIO_TxHandler+0x68>
		SwTimerStart(radioConfiguration.watchdogTimerId, MS_TO_US(radioConfiguration.watchdogTimerTimeout), SW_TIMEOUT_RELATIVE, (void *)Radio_WatchdogTimeout, NULL);
    9396:	23fa      	movs	r3, #250	; 0xfa
    9398:	009b      	lsls	r3, r3, #2
    939a:	4359      	muls	r1, r3
    939c:	232f      	movs	r3, #47	; 0x2f
    939e:	4a05      	ldr	r2, [pc, #20]	; (93b4 <RADIO_TxHandler+0x1b4>)
    93a0:	5cd0      	ldrb	r0, [r2, r3]
    93a2:	2300      	movs	r3, #0
    93a4:	9300      	str	r3, [sp, #0]
    93a6:	4b1e      	ldr	r3, [pc, #120]	; (9420 <RADIO_TxHandler+0x220>)
    93a8:	2200      	movs	r2, #0
    93aa:	4c1e      	ldr	r4, [pc, #120]	; (9424 <RADIO_TxHandler+0x224>)
    93ac:	47a0      	blx	r4
    93ae:	e76b      	b.n	9288 <RADIO_TxHandler+0x88>
    93b0:	00008de1 	.word	0x00008de1
    93b4:	20003ba8 	.word	0x20003ba8
    93b8:	00010cb5 	.word	0x00010cb5
    93bc:	000089c5 	.word	0x000089c5
    93c0:	00007e81 	.word	0x00007e81
    93c4:	0000fd51 	.word	0x0000fd51
    93c8:	20000314 	.word	0x20000314
    93cc:	20000310 	.word	0x20000310
    93d0:	000087f5 	.word	0x000087f5
    93d4:	00010fd9 	.word	0x00010fd9
    93d8:	00010945 	.word	0x00010945
    93dc:	20000308 	.word	0x20000308
    93e0:	0001520d 	.word	0x0001520d
    93e4:	00007e39 	.word	0x00007e39
    93e8:	0000fe35 	.word	0x0000fe35
    93ec:	0000fe55 	.word	0x0000fe55
    93f0:	0000fe75 	.word	0x0000fe75
    93f4:	20000302 	.word	0x20000302
    93f8:	000111f5 	.word	0x000111f5
    93fc:	0000fe25 	.word	0x0000fe25
    9400:	0000fe45 	.word	0x0000fe45
    9404:	0000fe65 	.word	0x0000fe65
    9408:	000089fd 	.word	0x000089fd
    940c:	00008f39 	.word	0x00008f39
    9410:	200025a9 	.word	0x200025a9
    9414:	200025a8 	.word	0x200025a8
    9418:	0000fd79 	.word	0x0000fd79
    941c:	0000fda5 	.word	0x0000fda5
    9420:	00008a35 	.word	0x00008a35
    9424:	0001099d 	.word	0x0001099d

00009428 <RADIO_TxDoneHandler>:
{
    9428:	b5f0      	push	{r4, r5, r6, r7, lr}
    942a:	b085      	sub	sp, #20
    if (1 == radioEvents.TxWatchdogTimoutEvent)
    942c:	4b34      	ldr	r3, [pc, #208]	; (9500 <RADIO_TxDoneHandler+0xd8>)
    942e:	881b      	ldrh	r3, [r3, #0]
    9430:	06db      	lsls	r3, r3, #27
    9432:	d40e      	bmi.n	9452 <RADIO_TxDoneHandler+0x2a>
    else if ((1 == radioEvents.LoraTxDoneEvent) || (1 == radioEvents.FskTxDoneEvent))
    9434:	4b32      	ldr	r3, [pc, #200]	; (9500 <RADIO_TxDoneHandler+0xd8>)
    9436:	881b      	ldrh	r3, [r3, #0]
    9438:	07db      	lsls	r3, r3, #31
    943a:	d435      	bmi.n	94a8 <RADIO_TxDoneHandler+0x80>
    943c:	4b30      	ldr	r3, [pc, #192]	; (9500 <RADIO_TxDoneHandler+0xd8>)
    943e:	881b      	ldrh	r3, [r3, #0]
    9440:	075b      	lsls	r3, r3, #29
    9442:	d431      	bmi.n	94a8 <RADIO_TxDoneHandler+0x80>
	else if (1 == radioEvents.LbtScanDoneEvent)
    9444:	4b2e      	ldr	r3, [pc, #184]	; (9500 <RADIO_TxDoneHandler+0xd8>)
    9446:	881b      	ldrh	r3, [r3, #0]
    9448:	059b      	lsls	r3, r3, #22
    944a:	d455      	bmi.n	94f8 <RADIO_TxDoneHandler+0xd0>
}
    944c:	2000      	movs	r0, #0
    944e:	b005      	add	sp, #20
    9450:	bdf0      	pop	{r4, r5, r6, r7, pc}
        radioEvents.TxWatchdogTimoutEvent = 0;
    9452:	4a2b      	ldr	r2, [pc, #172]	; (9500 <RADIO_TxDoneHandler+0xd8>)
    9454:	8813      	ldrh	r3, [r2, #0]
    9456:	2110      	movs	r1, #16
    9458:	438b      	bics	r3, r1
    945a:	8013      	strh	r3, [r2, #0]
        Radio_WriteMode(MODE_STANDBY, radioConfiguration.modulation, 1);
    945c:	4c29      	ldr	r4, [pc, #164]	; (9504 <RADIO_TxDoneHandler+0xdc>)
    945e:	2734      	movs	r7, #52	; 0x34
    9460:	5de1      	ldrb	r1, [r4, r7]
    9462:	2201      	movs	r2, #1
    9464:	2001      	movs	r0, #1
    9466:	4e28      	ldr	r6, [pc, #160]	; (9508 <RADIO_TxDoneHandler+0xe0>)
    9468:	47b0      	blx	r6
        RadioCallbackParam.TX.timeOnAir = radioConfiguration.watchdogTimerTimeout;
    946a:	ab01      	add	r3, sp, #4
    946c:	68e2      	ldr	r2, [r4, #12]
    946e:	9202      	str	r2, [sp, #8]
		RadioCallbackParam.status = ERR_NONE;
    9470:	2500      	movs	r5, #0
    9472:	701d      	strb	r5, [r3, #0]
        Radio_WriteMode(MODE_SLEEP, radioConfiguration.modulation, 0);
    9474:	5de1      	ldrb	r1, [r4, r7]
    9476:	2200      	movs	r2, #0
    9478:	2000      	movs	r0, #0
    947a:	47b0      	blx	r6
	radioState = state;
    947c:	2201      	movs	r2, #1
    947e:	4b23      	ldr	r3, [pc, #140]	; (950c <RADIO_TxDoneHandler+0xe4>)
    9480:	701a      	strb	r2, [r3, #0]
		radioConfiguration.fskPayloadIndex = 0;
    9482:	2358      	movs	r3, #88	; 0x58
    9484:	54e5      	strb	r5, [r4, r3]
        if (1 == radioCallbackMask.BitMask.radioTxTimeoutCallback)
    9486:	4b22      	ldr	r3, [pc, #136]	; (9510 <RADIO_TxDoneHandler+0xe8>)
    9488:	781b      	ldrb	r3, [r3, #0]
    948a:	075b      	lsls	r3, r3, #29
    948c:	d404      	bmi.n	9498 <RADIO_TxDoneHandler+0x70>
		RADIO_Reset();
    948e:	4b21      	ldr	r3, [pc, #132]	; (9514 <RADIO_TxDoneHandler+0xec>)
    9490:	4798      	blx	r3
		RADIO_InitDefaultAttributes();
    9492:	4b21      	ldr	r3, [pc, #132]	; (9518 <RADIO_TxDoneHandler+0xf0>)
    9494:	4798      	blx	r3
    9496:	e7d9      	b.n	944c <RADIO_TxDoneHandler+0x24>
			if (radioConfiguration.radioCallback)
    9498:	4b1a      	ldr	r3, [pc, #104]	; (9504 <RADIO_TxDoneHandler+0xdc>)
    949a:	691b      	ldr	r3, [r3, #16]
    949c:	2b00      	cmp	r3, #0
    949e:	d0f6      	beq.n	948e <RADIO_TxDoneHandler+0x66>
				radioConfiguration.radioCallback(RADIO_TX_TIMEOUT_CALLBACK, (void *) &(RadioCallbackParam));
    94a0:	a901      	add	r1, sp, #4
    94a2:	2004      	movs	r0, #4
    94a4:	4798      	blx	r3
    94a6:	e7f2      	b.n	948e <RADIO_TxDoneHandler+0x66>
        radioEvents.LoraTxDoneEvent = 0;
    94a8:	4b15      	ldr	r3, [pc, #84]	; (9500 <RADIO_TxDoneHandler+0xd8>)
    94aa:	881a      	ldrh	r2, [r3, #0]
    94ac:	2601      	movs	r6, #1
    94ae:	43b2      	bics	r2, r6
    94b0:	801a      	strh	r2, [r3, #0]
        radioEvents.FskTxDoneEvent = 0;
    94b2:	881a      	ldrh	r2, [r3, #0]
    94b4:	2104      	movs	r1, #4
    94b6:	438a      	bics	r2, r1
    94b8:	801a      	strh	r2, [r3, #0]
        RadioCallbackParam.TX.timeOnAir = (uint32_t) timeOnAir;
    94ba:	ab01      	add	r3, sp, #4
    94bc:	4a17      	ldr	r2, [pc, #92]	; (951c <RADIO_TxDoneHandler+0xf4>)
    94be:	6812      	ldr	r2, [r2, #0]
    94c0:	9202      	str	r2, [sp, #8]
		RadioCallbackParam.status = ERR_NONE;
    94c2:	2500      	movs	r5, #0
    94c4:	701d      	strb	r5, [r3, #0]
        Radio_WriteMode(MODE_SLEEP, radioConfiguration.modulation, 0);
    94c6:	4c0f      	ldr	r4, [pc, #60]	; (9504 <RADIO_TxDoneHandler+0xdc>)
    94c8:	2334      	movs	r3, #52	; 0x34
    94ca:	5ce1      	ldrb	r1, [r4, r3]
    94cc:	2200      	movs	r2, #0
    94ce:	2000      	movs	r0, #0
    94d0:	4b0d      	ldr	r3, [pc, #52]	; (9508 <RADIO_TxDoneHandler+0xe0>)
    94d2:	4798      	blx	r3
		Radio_ResetClockInput();
    94d4:	4b12      	ldr	r3, [pc, #72]	; (9520 <RADIO_TxDoneHandler+0xf8>)
    94d6:	4798      	blx	r3
	radioState = state;
    94d8:	4b0c      	ldr	r3, [pc, #48]	; (950c <RADIO_TxDoneHandler+0xe4>)
    94da:	701e      	strb	r6, [r3, #0]
		radioConfiguration.fskPayloadIndex = 0;
    94dc:	2358      	movs	r3, #88	; 0x58
    94de:	54e5      	strb	r5, [r4, r3]
        if (1 == radioCallbackMask.BitMask.radioTxDoneCallback)
    94e0:	4b0b      	ldr	r3, [pc, #44]	; (9510 <RADIO_TxDoneHandler+0xe8>)
    94e2:	781b      	ldrb	r3, [r3, #0]
    94e4:	079b      	lsls	r3, r3, #30
    94e6:	d5b1      	bpl.n	944c <RADIO_TxDoneHandler+0x24>
			if (radioConfiguration.radioCallback)
    94e8:	4b06      	ldr	r3, [pc, #24]	; (9504 <RADIO_TxDoneHandler+0xdc>)
    94ea:	691b      	ldr	r3, [r3, #16]
    94ec:	2b00      	cmp	r3, #0
    94ee:	d0ad      	beq.n	944c <RADIO_TxDoneHandler+0x24>
				radioConfiguration.radioCallback(RADIO_TX_DONE_CALLBACK, (void *) &(RadioCallbackParam));
    94f0:	a901      	add	r1, sp, #4
    94f2:	2002      	movs	r0, #2
    94f4:	4798      	blx	r3
    94f6:	e7a9      	b.n	944c <RADIO_TxDoneHandler+0x24>
		radioScanDoneHandler();		
    94f8:	4b0a      	ldr	r3, [pc, #40]	; (9524 <RADIO_TxDoneHandler+0xfc>)
    94fa:	4798      	blx	r3
    94fc:	e7a6      	b.n	944c <RADIO_TxDoneHandler+0x24>
    94fe:	46c0      	nop			; (mov r8, r8)
    9500:	200025a4 	.word	0x200025a4
    9504:	20003ba8 	.word	0x20003ba8
    9508:	00010fd9 	.word	0x00010fd9
    950c:	200025a9 	.word	0x200025a9
    9510:	200025a8 	.word	0x200025a8
    9514:	0000fd11 	.word	0x0000fd11
    9518:	00008f55 	.word	0x00008f55
    951c:	20000308 	.word	0x20000308
    9520:	00008f39 	.word	0x00008f39
    9524:	0000860d 	.word	0x0000860d

00009528 <RADIO_RxDoneHandler>:
{
    9528:	b570      	push	{r4, r5, r6, lr}
    952a:	b084      	sub	sp, #16
    if ((1 == radioEvents.RxWatchdogTimoutEvent))
    952c:	4ba7      	ldr	r3, [pc, #668]	; (97cc <RADIO_RxDoneHandler+0x2a4>)
    952e:	881b      	ldrh	r3, [r3, #0]
    9530:	069b      	lsls	r3, r3, #26
    9532:	d418      	bmi.n	9566 <RADIO_RxDoneHandler+0x3e>
    else if ((1 == radioEvents.LoraRxTimoutEvent) || (1 == radioEvents.FskRxTimoutEvent))
    9534:	4ba5      	ldr	r3, [pc, #660]	; (97cc <RADIO_RxDoneHandler+0x2a4>)
    9536:	881b      	ldrh	r3, [r3, #0]
    9538:	065b      	lsls	r3, r3, #25
    953a:	d43c      	bmi.n	95b6 <RADIO_RxDoneHandler+0x8e>
    953c:	4ba3      	ldr	r3, [pc, #652]	; (97cc <RADIO_RxDoneHandler+0x2a4>)
    953e:	881b      	ldrh	r3, [r3, #0]
    9540:	061b      	lsls	r3, r3, #24
    9542:	d438      	bmi.n	95b6 <RADIO_RxDoneHandler+0x8e>
    else if (1 == radioEvents.LoraRxDoneEvent)
    9544:	4ba1      	ldr	r3, [pc, #644]	; (97cc <RADIO_RxDoneHandler+0x2a4>)
    9546:	881b      	ldrh	r3, [r3, #0]
    9548:	079b      	lsls	r3, r3, #30
    954a:	d45c      	bmi.n	9606 <RADIO_RxDoneHandler+0xde>
    else if (1 == radioEvents.FskRxDoneEvent)
    954c:	4b9f      	ldr	r3, [pc, #636]	; (97cc <RADIO_RxDoneHandler+0x2a4>)
    954e:	881b      	ldrh	r3, [r3, #0]
    9550:	071b      	lsls	r3, r3, #28
    9552:	d500      	bpl.n	9556 <RADIO_RxDoneHandler+0x2e>
    9554:	e0df      	b.n	9716 <RADIO_RxDoneHandler+0x1ee>
    else if (1 == radioEvents.RxError)
    9556:	4b9d      	ldr	r3, [pc, #628]	; (97cc <RADIO_RxDoneHandler+0x2a4>)
    9558:	881b      	ldrh	r3, [r3, #0]
    955a:	05db      	lsls	r3, r3, #23
    955c:	d500      	bpl.n	9560 <RADIO_RxDoneHandler+0x38>
    955e:	e106      	b.n	976e <RADIO_RxDoneHandler+0x246>
}
    9560:	2000      	movs	r0, #0
    9562:	b004      	add	sp, #16
    9564:	bd70      	pop	{r4, r5, r6, pc}
        radioEvents.RxWatchdogTimoutEvent = 0;
    9566:	4a99      	ldr	r2, [pc, #612]	; (97cc <RADIO_RxDoneHandler+0x2a4>)
    9568:	8813      	ldrh	r3, [r2, #0]
    956a:	2120      	movs	r1, #32
    956c:	438b      	bics	r3, r1
    956e:	8013      	strh	r3, [r2, #0]
        Radio_WriteMode(MODE_STANDBY, radioConfiguration.modulation, 1);
    9570:	4c97      	ldr	r4, [pc, #604]	; (97d0 <RADIO_RxDoneHandler+0x2a8>)
    9572:	2634      	movs	r6, #52	; 0x34
    9574:	5da1      	ldrb	r1, [r4, r6]
    9576:	2201      	movs	r2, #1
    9578:	2001      	movs	r0, #1
    957a:	4d96      	ldr	r5, [pc, #600]	; (97d4 <RADIO_RxDoneHandler+0x2ac>)
    957c:	47a8      	blx	r5
        Radio_WriteMode(MODE_SLEEP, radioConfiguration.modulation, 0);
    957e:	5da1      	ldrb	r1, [r4, r6]
    9580:	2200      	movs	r2, #0
    9582:	2000      	movs	r0, #0
    9584:	47a8      	blx	r5
		Radio_ResetClockInput();
    9586:	4b94      	ldr	r3, [pc, #592]	; (97d8 <RADIO_RxDoneHandler+0x2b0>)
    9588:	4798      	blx	r3
	radioState = state;
    958a:	2201      	movs	r2, #1
    958c:	4b93      	ldr	r3, [pc, #588]	; (97dc <RADIO_RxDoneHandler+0x2b4>)
    958e:	701a      	strb	r2, [r3, #0]
		RadioCallbackParam.status = ERR_NONE;
    9590:	2300      	movs	r3, #0
    9592:	aa01      	add	r2, sp, #4
    9594:	7013      	strb	r3, [r2, #0]
		radioConfiguration.dataBufferLen = 0;
    9596:	222c      	movs	r2, #44	; 0x2c
    9598:	54a3      	strb	r3, [r4, r2]
		radioConfiguration.fskPayloadIndex = 0;
    959a:	322c      	adds	r2, #44	; 0x2c
    959c:	54a3      	strb	r3, [r4, r2]
        if (1 == radioCallbackMask.BitMask.radioRxTimeoutCallback)
    959e:	4b90      	ldr	r3, [pc, #576]	; (97e0 <RADIO_RxDoneHandler+0x2b8>)
    95a0:	781b      	ldrb	r3, [r3, #0]
    95a2:	071b      	lsls	r3, r3, #28
    95a4:	d5dc      	bpl.n	9560 <RADIO_RxDoneHandler+0x38>
			if (radioConfiguration.radioCallback)
    95a6:	4b8a      	ldr	r3, [pc, #552]	; (97d0 <RADIO_RxDoneHandler+0x2a8>)
    95a8:	691b      	ldr	r3, [r3, #16]
    95aa:	2b00      	cmp	r3, #0
    95ac:	d0d8      	beq.n	9560 <RADIO_RxDoneHandler+0x38>
				radioConfiguration.radioCallback(RADIO_RX_TIMEOUT_CALLBACK, (void *) &(RadioCallbackParam));
    95ae:	a901      	add	r1, sp, #4
    95b0:	2008      	movs	r0, #8
    95b2:	4798      	blx	r3
    95b4:	e7d4      	b.n	9560 <RADIO_RxDoneHandler+0x38>
        radioEvents.LoraRxTimoutEvent = 0;
    95b6:	4b85      	ldr	r3, [pc, #532]	; (97cc <RADIO_RxDoneHandler+0x2a4>)
    95b8:	881a      	ldrh	r2, [r3, #0]
    95ba:	2140      	movs	r1, #64	; 0x40
    95bc:	438a      	bics	r2, r1
    95be:	801a      	strh	r2, [r3, #0]
        radioEvents.FskRxTimoutEvent = 0;
    95c0:	881a      	ldrh	r2, [r3, #0]
    95c2:	3140      	adds	r1, #64	; 0x40
    95c4:	438a      	bics	r2, r1
    95c6:	801a      	strh	r2, [r3, #0]
        Radio_WriteMode(MODE_SLEEP, radioConfiguration.modulation, 0);
    95c8:	4c81      	ldr	r4, [pc, #516]	; (97d0 <RADIO_RxDoneHandler+0x2a8>)
    95ca:	2334      	movs	r3, #52	; 0x34
    95cc:	5ce1      	ldrb	r1, [r4, r3]
    95ce:	2200      	movs	r2, #0
    95d0:	2000      	movs	r0, #0
    95d2:	4b80      	ldr	r3, [pc, #512]	; (97d4 <RADIO_RxDoneHandler+0x2ac>)
    95d4:	4798      	blx	r3
		Radio_ResetClockInput();
    95d6:	4b80      	ldr	r3, [pc, #512]	; (97d8 <RADIO_RxDoneHandler+0x2b0>)
    95d8:	4798      	blx	r3
	radioState = state;
    95da:	2201      	movs	r2, #1
    95dc:	4b7f      	ldr	r3, [pc, #508]	; (97dc <RADIO_RxDoneHandler+0x2b4>)
    95de:	701a      	strb	r2, [r3, #0]
		RadioCallbackParam.status = ERR_NONE;
    95e0:	2300      	movs	r3, #0
    95e2:	aa01      	add	r2, sp, #4
    95e4:	7013      	strb	r3, [r2, #0]
		radioConfiguration.dataBufferLen = 0;
    95e6:	222c      	movs	r2, #44	; 0x2c
    95e8:	54a3      	strb	r3, [r4, r2]
		radioConfiguration.fskPayloadIndex = 0;
    95ea:	322c      	adds	r2, #44	; 0x2c
    95ec:	54a3      	strb	r3, [r4, r2]
        if (1 == radioCallbackMask.BitMask.radioRxTimeoutCallback)
    95ee:	4b7c      	ldr	r3, [pc, #496]	; (97e0 <RADIO_RxDoneHandler+0x2b8>)
    95f0:	781b      	ldrb	r3, [r3, #0]
    95f2:	071b      	lsls	r3, r3, #28
    95f4:	d5b4      	bpl.n	9560 <RADIO_RxDoneHandler+0x38>
			if (radioConfiguration.radioCallback)
    95f6:	4b76      	ldr	r3, [pc, #472]	; (97d0 <RADIO_RxDoneHandler+0x2a8>)
    95f8:	691b      	ldr	r3, [r3, #16]
    95fa:	2b00      	cmp	r3, #0
    95fc:	d0b0      	beq.n	9560 <RADIO_RxDoneHandler+0x38>
				radioConfiguration.radioCallback(RADIO_RX_TIMEOUT_CALLBACK, (void *) &(RadioCallbackParam));
    95fe:	a901      	add	r1, sp, #4
    9600:	2008      	movs	r0, #8
    9602:	4798      	blx	r3
    9604:	e7ac      	b.n	9560 <RADIO_RxDoneHandler+0x38>
        radioEvents.LoraRxDoneEvent = 0;
    9606:	4a71      	ldr	r2, [pc, #452]	; (97cc <RADIO_RxDoneHandler+0x2a4>)
    9608:	8813      	ldrh	r3, [r2, #0]
    960a:	2102      	movs	r1, #2
    960c:	438b      	bics	r3, r1
    960e:	8013      	strh	r3, [r2, #0]
        radioConfiguration.dataBufferLen = RADIO_RegisterRead(REG_LORA_RXNBBYTES);
    9610:	2013      	movs	r0, #19
    9612:	4e74      	ldr	r6, [pc, #464]	; (97e4 <RADIO_RxDoneHandler+0x2bc>)
    9614:	47b0      	blx	r6
    9616:	4c6e      	ldr	r4, [pc, #440]	; (97d0 <RADIO_RxDoneHandler+0x2a8>)
    9618:	252c      	movs	r5, #44	; 0x2c
    961a:	5560      	strb	r0, [r4, r5]
        RADIO_RegisterWrite(REG_LORA_FIFOADDRPTR, 0x00);
    961c:	2100      	movs	r1, #0
    961e:	200d      	movs	r0, #13
    9620:	4b71      	ldr	r3, [pc, #452]	; (97e8 <RADIO_RxDoneHandler+0x2c0>)
    9622:	4798      	blx	r3
        RADIO_FrameRead(REG_FIFO_ADDRESS,radioConfiguration.dataBuffer,radioConfiguration.dataBufferLen);
    9624:	5d62      	ldrb	r2, [r4, r5]
    9626:	b2d2      	uxtb	r2, r2
    9628:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    962a:	2000      	movs	r0, #0
    962c:	4b6f      	ldr	r3, [pc, #444]	; (97ec <RADIO_RxDoneHandler+0x2c4>)
    962e:	4798      	blx	r3
	radioConfiguration.packetSNR = RADIO_RegisterRead(REG_LORA_PKTSNRVALUE);
    9630:	2019      	movs	r0, #25
    9632:	47b0      	blx	r6
    9634:	b240      	sxtb	r0, r0
	if (radioConfiguration.packetSNR & 0x80)
    9636:	2800      	cmp	r0, #0
    9638:	db21      	blt.n	967e <RADIO_RxDoneHandler+0x156>
		radioConfiguration.packetSNR = (radioConfiguration.packetSNR & 0xFF) >> 2;
    963a:	0600      	lsls	r0, r0, #24
    963c:	0e80      	lsrs	r0, r0, #26
    963e:	2332      	movs	r3, #50	; 0x32
    9640:	4a63      	ldr	r2, [pc, #396]	; (97d0 <RADIO_RxDoneHandler+0x2a8>)
    9642:	54d0      	strb	r0, [r2, r3]
	int16_t pktrssi = RADIO_RegisterRead(REG_LORA_PKTRSSIVALUE);
    9644:	201a      	movs	r0, #26
    9646:	4b67      	ldr	r3, [pc, #412]	; (97e4 <RADIO_RxDoneHandler+0x2bc>)
    9648:	4798      	blx	r3
    964a:	b202      	sxth	r2, r0
	if (radioConfiguration.packetSNR < 0)
    964c:	2332      	movs	r3, #50	; 0x32
    964e:	4960      	ldr	r1, [pc, #384]	; (97d0 <RADIO_RxDoneHandler+0x2a8>)
    9650:	56cb      	ldrsb	r3, [r1, r3]
    9652:	2b00      	cmp	r3, #0
    9654:	db1b      	blt.n	968e <RADIO_RxDoneHandler+0x166>
		if ((radioConfiguration.frequency >= FREQ_862000KHZ) && (radioConfiguration.frequency <= FREQ_1020000KHZ))
    9656:	4b5e      	ldr	r3, [pc, #376]	; (97d0 <RADIO_RxDoneHandler+0x2a8>)
    9658:	681b      	ldr	r3, [r3, #0]
    965a:	4965      	ldr	r1, [pc, #404]	; (97f0 <RADIO_RxDoneHandler+0x2c8>)
    965c:	185c      	adds	r4, r3, r1
    965e:	4965      	ldr	r1, [pc, #404]	; (97f4 <RADIO_RxDoneHandler+0x2cc>)
    9660:	428c      	cmp	r4, r1
    9662:	d930      	bls.n	96c6 <RADIO_RxDoneHandler+0x19e>
		else if ( (radioConfiguration.frequency >= FREQ_410000KHZ) && (radioConfiguration.frequency <= FREQ_525000KHZ))
    9664:	4964      	ldr	r1, [pc, #400]	; (97f8 <RADIO_RxDoneHandler+0x2d0>)
    9666:	468c      	mov	ip, r1
    9668:	4463      	add	r3, ip
    966a:	4964      	ldr	r1, [pc, #400]	; (97fc <RADIO_RxDoneHandler+0x2d4>)
    966c:	428b      	cmp	r3, r1
    966e:	d830      	bhi.n	96d2 <RADIO_RxDoneHandler+0x1aa>
			radioConfiguration.packetRSSI = RSSI_LF_OFFSET + pktrssi + (pktrssi >> 4) ;
    9670:	38a4      	subs	r0, #164	; 0xa4
    9672:	1112      	asrs	r2, r2, #4
    9674:	1880      	adds	r0, r0, r2
    9676:	2356      	movs	r3, #86	; 0x56
    9678:	4a55      	ldr	r2, [pc, #340]	; (97d0 <RADIO_RxDoneHandler+0x2a8>)
    967a:	52d0      	strh	r0, [r2, r3]
    967c:	e029      	b.n	96d2 <RADIO_RxDoneHandler+0x1aa>
		radioConfiguration.packetSNR = ((~ radioConfiguration.packetSNR + 1) & 0xFF) >> 2;
    967e:	4243      	negs	r3, r0
    9680:	061b      	lsls	r3, r3, #24
    9682:	0e9b      	lsrs	r3, r3, #26
		radioConfiguration.packetSNR = -radioConfiguration.packetSNR;
    9684:	425b      	negs	r3, r3
    9686:	2232      	movs	r2, #50	; 0x32
    9688:	4951      	ldr	r1, [pc, #324]	; (97d0 <RADIO_RxDoneHandler+0x2a8>)
    968a:	548b      	strb	r3, [r1, r2]
    968c:	e7da      	b.n	9644 <RADIO_RxDoneHandler+0x11c>
		if ((radioConfiguration.frequency >= FREQ_862000KHZ) && (radioConfiguration.frequency <= FREQ_1020000KHZ))
    968e:	6809      	ldr	r1, [r1, #0]
    9690:	4c57      	ldr	r4, [pc, #348]	; (97f0 <RADIO_RxDoneHandler+0x2c8>)
    9692:	190d      	adds	r5, r1, r4
    9694:	4c57      	ldr	r4, [pc, #348]	; (97f4 <RADIO_RxDoneHandler+0x2cc>)
    9696:	42a5      	cmp	r5, r4
    9698:	d90d      	bls.n	96b6 <RADIO_RxDoneHandler+0x18e>
		else if ( (radioConfiguration.frequency >= FREQ_410000KHZ) && (radioConfiguration.frequency <= FREQ_525000KHZ))
    969a:	4c57      	ldr	r4, [pc, #348]	; (97f8 <RADIO_RxDoneHandler+0x2d0>)
    969c:	46a4      	mov	ip, r4
    969e:	4461      	add	r1, ip
    96a0:	4c56      	ldr	r4, [pc, #344]	; (97fc <RADIO_RxDoneHandler+0x2d4>)
    96a2:	42a1      	cmp	r1, r4
    96a4:	d815      	bhi.n	96d2 <RADIO_RxDoneHandler+0x1aa>
			radioConfiguration.packetRSSI = RSSI_LF_OFFSET + pktrssi + (pktrssi >> 4) + radioConfiguration.packetSNR;
    96a6:	3ba4      	subs	r3, #164	; 0xa4
    96a8:	181b      	adds	r3, r3, r0
    96aa:	1110      	asrs	r0, r2, #4
    96ac:	1818      	adds	r0, r3, r0
    96ae:	2356      	movs	r3, #86	; 0x56
    96b0:	4a47      	ldr	r2, [pc, #284]	; (97d0 <RADIO_RxDoneHandler+0x2a8>)
    96b2:	52d0      	strh	r0, [r2, r3]
    96b4:	e00d      	b.n	96d2 <RADIO_RxDoneHandler+0x1aa>
			radioConfiguration.packetRSSI = RSSI_HF_OFFSET + pktrssi + (pktrssi >> 4) + radioConfiguration.packetSNR;
    96b6:	3b9d      	subs	r3, #157	; 0x9d
    96b8:	1818      	adds	r0, r3, r0
    96ba:	1112      	asrs	r2, r2, #4
    96bc:	1880      	adds	r0, r0, r2
    96be:	2356      	movs	r3, #86	; 0x56
    96c0:	4a43      	ldr	r2, [pc, #268]	; (97d0 <RADIO_RxDoneHandler+0x2a8>)
    96c2:	52d0      	strh	r0, [r2, r3]
    96c4:	e005      	b.n	96d2 <RADIO_RxDoneHandler+0x1aa>
			radioConfiguration.packetRSSI = RSSI_HF_OFFSET + pktrssi + (pktrssi >> 4);
    96c6:	389d      	subs	r0, #157	; 0x9d
    96c8:	1112      	asrs	r2, r2, #4
    96ca:	1880      	adds	r0, r0, r2
    96cc:	2356      	movs	r3, #86	; 0x56
    96ce:	4a40      	ldr	r2, [pc, #256]	; (97d0 <RADIO_RxDoneHandler+0x2a8>)
    96d0:	52d0      	strh	r0, [r2, r3]
        Radio_WriteMode(MODE_SLEEP, radioConfiguration.modulation, 0);
    96d2:	4c3f      	ldr	r4, [pc, #252]	; (97d0 <RADIO_RxDoneHandler+0x2a8>)
    96d4:	2334      	movs	r3, #52	; 0x34
    96d6:	5ce1      	ldrb	r1, [r4, r3]
    96d8:	2200      	movs	r2, #0
    96da:	2000      	movs	r0, #0
    96dc:	4b3d      	ldr	r3, [pc, #244]	; (97d4 <RADIO_RxDoneHandler+0x2ac>)
    96de:	4798      	blx	r3
		Radio_ResetClockInput();
    96e0:	4b3d      	ldr	r3, [pc, #244]	; (97d8 <RADIO_RxDoneHandler+0x2b0>)
    96e2:	4798      	blx	r3
        RadioCallbackParam.RX.buffer = radioConfiguration.dataBuffer;
    96e4:	ab01      	add	r3, sp, #4
    96e6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    96e8:	9202      	str	r2, [sp, #8]
        RadioCallbackParam.RX.bufferLength = radioConfiguration.dataBufferLen;
    96ea:	222c      	movs	r2, #44	; 0x2c
    96ec:	5ca2      	ldrb	r2, [r4, r2]
    96ee:	721a      	strb	r2, [r3, #8]
		RadioCallbackParam.status = ERR_NONE;
    96f0:	2200      	movs	r2, #0
    96f2:	701a      	strb	r2, [r3, #0]
	radioState = state;
    96f4:	3201      	adds	r2, #1
    96f6:	4b39      	ldr	r3, [pc, #228]	; (97dc <RADIO_RxDoneHandler+0x2b4>)
    96f8:	701a      	strb	r2, [r3, #0]
        if (1 == radioCallbackMask.BitMask.radioRxDoneCallback)
    96fa:	4b39      	ldr	r3, [pc, #228]	; (97e0 <RADIO_RxDoneHandler+0x2b8>)
    96fc:	781b      	ldrb	r3, [r3, #0]
    96fe:	07db      	lsls	r3, r3, #31
    9700:	d400      	bmi.n	9704 <RADIO_RxDoneHandler+0x1dc>
    9702:	e72d      	b.n	9560 <RADIO_RxDoneHandler+0x38>
			if (radioConfiguration.radioCallback)
    9704:	4b32      	ldr	r3, [pc, #200]	; (97d0 <RADIO_RxDoneHandler+0x2a8>)
    9706:	691b      	ldr	r3, [r3, #16]
    9708:	2b00      	cmp	r3, #0
    970a:	d100      	bne.n	970e <RADIO_RxDoneHandler+0x1e6>
    970c:	e728      	b.n	9560 <RADIO_RxDoneHandler+0x38>
				radioConfiguration.radioCallback(RADIO_RX_DONE_CALLBACK, (void *) &(RadioCallbackParam));
    970e:	a901      	add	r1, sp, #4
    9710:	2001      	movs	r0, #1
    9712:	4798      	blx	r3
    9714:	e724      	b.n	9560 <RADIO_RxDoneHandler+0x38>
        radioEvents.FskRxDoneEvent = 0;
    9716:	4a2d      	ldr	r2, [pc, #180]	; (97cc <RADIO_RxDoneHandler+0x2a4>)
    9718:	8813      	ldrh	r3, [r2, #0]
    971a:	2108      	movs	r1, #8
    971c:	438b      	bics	r3, r1
    971e:	8013      	strh	r3, [r2, #0]
        radioConfiguration.packetSNR = -128;
    9720:	4c2b      	ldr	r4, [pc, #172]	; (97d0 <RADIO_RxDoneHandler+0x2a8>)
    9722:	2280      	movs	r2, #128	; 0x80
    9724:	2332      	movs	r3, #50	; 0x32
    9726:	54e2      	strb	r2, [r4, r3]
        Radio_WriteMode(MODE_SLEEP, radioConfiguration.modulation, 0);
    9728:	3302      	adds	r3, #2
    972a:	5ce1      	ldrb	r1, [r4, r3]
    972c:	2200      	movs	r2, #0
    972e:	2000      	movs	r0, #0
    9730:	4b28      	ldr	r3, [pc, #160]	; (97d4 <RADIO_RxDoneHandler+0x2ac>)
    9732:	4798      	blx	r3
		Radio_ResetClockInput();
    9734:	4b28      	ldr	r3, [pc, #160]	; (97d8 <RADIO_RxDoneHandler+0x2b0>)
    9736:	4798      	blx	r3
        RadioCallbackParam.RX.buffer = radioConfiguration.dataBuffer;
    9738:	ab01      	add	r3, sp, #4
    973a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    973c:	9202      	str	r2, [sp, #8]
        RadioCallbackParam.RX.bufferLength = radioConfiguration.dataBufferLen;
    973e:	222c      	movs	r2, #44	; 0x2c
    9740:	5ca2      	ldrb	r2, [r4, r2]
    9742:	721a      	strb	r2, [r3, #8]
		radioConfiguration.fskPayloadIndex = 0;
    9744:	2200      	movs	r2, #0
    9746:	2158      	movs	r1, #88	; 0x58
    9748:	5462      	strb	r2, [r4, r1]
		RadioCallbackParam.status = ERR_NONE;
    974a:	701a      	strb	r2, [r3, #0]
	radioState = state;
    974c:	3201      	adds	r2, #1
    974e:	4b23      	ldr	r3, [pc, #140]	; (97dc <RADIO_RxDoneHandler+0x2b4>)
    9750:	701a      	strb	r2, [r3, #0]
        if (1 == radioCallbackMask.BitMask.radioRxDoneCallback)
    9752:	4b23      	ldr	r3, [pc, #140]	; (97e0 <RADIO_RxDoneHandler+0x2b8>)
    9754:	781b      	ldrb	r3, [r3, #0]
    9756:	07db      	lsls	r3, r3, #31
    9758:	d400      	bmi.n	975c <RADIO_RxDoneHandler+0x234>
    975a:	e701      	b.n	9560 <RADIO_RxDoneHandler+0x38>
			if (radioConfiguration.radioCallback)
    975c:	4b1c      	ldr	r3, [pc, #112]	; (97d0 <RADIO_RxDoneHandler+0x2a8>)
    975e:	691b      	ldr	r3, [r3, #16]
    9760:	2b00      	cmp	r3, #0
    9762:	d100      	bne.n	9766 <RADIO_RxDoneHandler+0x23e>
    9764:	e6fc      	b.n	9560 <RADIO_RxDoneHandler+0x38>
				radioConfiguration.radioCallback(RADIO_RX_DONE_CALLBACK, (void *) &(RadioCallbackParam));
    9766:	a901      	add	r1, sp, #4
    9768:	2001      	movs	r0, #1
    976a:	4798      	blx	r3
    976c:	e6f8      	b.n	9560 <RADIO_RxDoneHandler+0x38>
        radioEvents.RxError = 0;
    976e:	4a17      	ldr	r2, [pc, #92]	; (97cc <RADIO_RxDoneHandler+0x2a4>)
    9770:	8813      	ldrh	r3, [r2, #0]
    9772:	4923      	ldr	r1, [pc, #140]	; (9800 <RADIO_RxDoneHandler+0x2d8>)
    9774:	400b      	ands	r3, r1
    9776:	8013      	strh	r3, [r2, #0]
        RADIO_FrameRead(REG_FIFO_ADDRESS,radioConfiguration.dataBuffer,radioConfiguration.dataBufferLen);
    9778:	4c15      	ldr	r4, [pc, #84]	; (97d0 <RADIO_RxDoneHandler+0x2a8>)
    977a:	252c      	movs	r5, #44	; 0x2c
    977c:	5d62      	ldrb	r2, [r4, r5]
    977e:	b2d2      	uxtb	r2, r2
    9780:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    9782:	2000      	movs	r0, #0
    9784:	4b19      	ldr	r3, [pc, #100]	; (97ec <RADIO_RxDoneHandler+0x2c4>)
    9786:	4798      	blx	r3
        Radio_WriteMode(MODE_SLEEP, radioConfiguration.modulation, 0);
    9788:	2334      	movs	r3, #52	; 0x34
    978a:	5ce1      	ldrb	r1, [r4, r3]
    978c:	2200      	movs	r2, #0
    978e:	2000      	movs	r0, #0
    9790:	4b10      	ldr	r3, [pc, #64]	; (97d4 <RADIO_RxDoneHandler+0x2ac>)
    9792:	4798      	blx	r3
		Radio_ResetClockInput();
    9794:	4b10      	ldr	r3, [pc, #64]	; (97d8 <RADIO_RxDoneHandler+0x2b0>)
    9796:	4798      	blx	r3
        RadioCallbackParam.RX.buffer = radioConfiguration.dataBuffer;
    9798:	ab01      	add	r3, sp, #4
    979a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    979c:	9202      	str	r2, [sp, #8]
        RadioCallbackParam.RX.bufferLength = radioConfiguration.dataBufferLen;
    979e:	5d62      	ldrb	r2, [r4, r5]
    97a0:	721a      	strb	r2, [r3, #8]
		radioConfiguration.fskPayloadIndex = 0;
    97a2:	2200      	movs	r2, #0
    97a4:	2158      	movs	r1, #88	; 0x58
    97a6:	5462      	strb	r2, [r4, r1]
		RadioCallbackParam.status = ERR_NONE;
    97a8:	701a      	strb	r2, [r3, #0]
	radioState = state;
    97aa:	3201      	adds	r2, #1
    97ac:	4b0b      	ldr	r3, [pc, #44]	; (97dc <RADIO_RxDoneHandler+0x2b4>)
    97ae:	701a      	strb	r2, [r3, #0]
        if (1 == radioCallbackMask.BitMask.radioRxErrorCallback)
    97b0:	4b0b      	ldr	r3, [pc, #44]	; (97e0 <RADIO_RxDoneHandler+0x2b8>)
    97b2:	781b      	ldrb	r3, [r3, #0]
    97b4:	06db      	lsls	r3, r3, #27
    97b6:	d400      	bmi.n	97ba <RADIO_RxDoneHandler+0x292>
    97b8:	e6d2      	b.n	9560 <RADIO_RxDoneHandler+0x38>
			if (radioConfiguration.radioCallback)
    97ba:	4b05      	ldr	r3, [pc, #20]	; (97d0 <RADIO_RxDoneHandler+0x2a8>)
    97bc:	691b      	ldr	r3, [r3, #16]
    97be:	2b00      	cmp	r3, #0
    97c0:	d100      	bne.n	97c4 <RADIO_RxDoneHandler+0x29c>
    97c2:	e6cd      	b.n	9560 <RADIO_RxDoneHandler+0x38>
				radioConfiguration.radioCallback(RADIO_RX_ERROR_CALLBACK, (void *) &(RadioCallbackParam));
    97c4:	a901      	add	r1, sp, #4
    97c6:	2010      	movs	r0, #16
    97c8:	4798      	blx	r3
    97ca:	e6c9      	b.n	9560 <RADIO_RxDoneHandler+0x38>
    97cc:	200025a4 	.word	0x200025a4
    97d0:	20003ba8 	.word	0x20003ba8
    97d4:	00010fd9 	.word	0x00010fd9
    97d8:	00008f39 	.word	0x00008f39
    97dc:	200025a9 	.word	0x200025a9
    97e0:	200025a8 	.word	0x200025a8
    97e4:	0000fd79 	.word	0x0000fd79
    97e8:	0000fd51 	.word	0x0000fd51
    97ec:	0000fde5 	.word	0x0000fde5
    97f0:	cc9eec80 	.word	0xcc9eec80
    97f4:	096ae380 	.word	0x096ae380
    97f8:	e78fe580 	.word	0xe78fe580
    97fc:	06dac2c0 	.word	0x06dac2c0
    9800:	fffffeff 	.word	0xfffffeff

00009804 <DemoOutput_Greeting>:

bool PUSH_BUTTON_pressed;
MIWI_TICK PUSH_BUTTON_press_time;

void DemoOutput_Greeting(void)
{    
    9804:	b510      	push	{r4, lr}
#if defined (ENABLE_LCD)
	#if defined(PROTOCOL_STAR)
		LCDDisplay((char *)"Simple LoRa STAR Demo on \n SAMR34 Node ", 0, true);
    9806:	2201      	movs	r2, #1
    9808:	2100      	movs	r1, #0
    980a:	4810      	ldr	r0, [pc, #64]	; (984c <DemoOutput_Greeting+0x48>)
    980c:	4b10      	ldr	r3, [pc, #64]	; (9850 <DemoOutput_Greeting+0x4c>)
    980e:	4798      	blx	r3
	#endif
#endif
    #if defined (ENABLE_CONSOLE)
        #if defined(PROTOCOL_STAR)
			printf("\n\r-----------------------------------------------------\n\r-----------------------------------------------------");
    9810:	4810      	ldr	r0, [pc, #64]	; (9854 <DemoOutput_Greeting+0x50>)
    9812:	4c11      	ldr	r4, [pc, #68]	; (9858 <DemoOutput_Greeting+0x54>)
    9814:	47a0      	blx	r4
            printf("\r\nStarting Node 1 of Simple Demo for LoRa Star Stack ...");  
    9816:	4811      	ldr	r0, [pc, #68]	; (985c <DemoOutput_Greeting+0x58>)
    9818:	47a0      	blx	r4
        #endif
		#if defined(ENABLE_SLEEP_FEATURE)
			printf("\r\nReduced Function Device (RFD) operations") ;
		#else
			printf("\r\nFull Function Device (FFD) operations") ;
    981a:	4811      	ldr	r0, [pc, #68]	; (9860 <DemoOutput_Greeting+0x5c>)
    981c:	47a0      	blx	r4
		#endif
        printf("\r\n     RF Transceiver: SX_1276");
    981e:	4811      	ldr	r0, [pc, #68]	; (9864 <DemoOutput_Greeting+0x60>)
    9820:	47a0      	blx	r4
        printf("\r\n     Demo Instruction:");
    9822:	4811      	ldr	r0, [pc, #68]	; (9868 <DemoOutput_Greeting+0x64>)
    9824:	47a0      	blx	r4
        printf("\r\n                     Power on the board until LED 1 lights up");
    9826:	4811      	ldr	r0, [pc, #68]	; (986c <DemoOutput_Greeting+0x68>)
    9828:	47a0      	blx	r4
        printf("\r\n                     to indicate connecting with peer.");
    982a:	4811      	ldr	r0, [pc, #68]	; (9870 <DemoOutput_Greeting+0x6c>)
    982c:	47a0      	blx	r4
        printf("\r\n                     Push Button 1 to broadcast message.");
    982e:	4811      	ldr	r0, [pc, #68]	; (9874 <DemoOutput_Greeting+0x70>)
    9830:	47a0      	blx	r4
        printf("\r\n                     LED 1 will be toggled upon receiving messages. ");
    9832:	4811      	ldr	r0, [pc, #68]	; (9878 <DemoOutput_Greeting+0x74>)
    9834:	47a0      	blx	r4
        printf("\r\n\r\n");		
    9836:	4811      	ldr	r0, [pc, #68]	; (987c <DemoOutput_Greeting+0x78>)
    9838:	4c11      	ldr	r4, [pc, #68]	; (9880 <DemoOutput_Greeting+0x7c>)
    983a:	47a0      	blx	r4
		#ifdef PERIODIC_TX
			printf("Periodic Transmission = Enable\r\n") ;
    983c:	4811      	ldr	r0, [pc, #68]	; (9884 <DemoOutput_Greeting+0x80>)
    983e:	47a0      	blx	r4
			printf("Periodic Transmission = Disable\r\n") ;
		#endif
		#ifdef DUTY_CYCLING
			printf("Duty Cycling support = Enable\r\n") ;
		#else
			printf("Duty Cycling support = Disable\r\n") ;
    9840:	4811      	ldr	r0, [pc, #68]	; (9888 <DemoOutput_Greeting+0x84>)
    9842:	47a0      	blx	r4
		#endif
		#ifdef LBT_SUPPORT_ENABLED
			printf("LBT support = Enable\r\n") ;
		#else
			printf("LBT support = Disable\r\n") ;
    9844:	4811      	ldr	r0, [pc, #68]	; (988c <DemoOutput_Greeting+0x88>)
    9846:	47a0      	blx	r4
		#endif
    #endif 
}        
    9848:	bd10      	pop	{r4, pc}
    984a:	46c0      	nop			; (mov r8, r8)
    984c:	0001a088 	.word	0x0001a088
    9850:	0000a941 	.word	0x0000a941
    9854:	0001a0b0 	.word	0x0001a0b0
    9858:	00018915 	.word	0x00018915
    985c:	0001a120 	.word	0x0001a120
    9860:	0001a15c 	.word	0x0001a15c
    9864:	0001a184 	.word	0x0001a184
    9868:	0001a1a4 	.word	0x0001a1a4
    986c:	0001a1c0 	.word	0x0001a1c0
    9870:	0001a200 	.word	0x0001a200
    9874:	0001a23c 	.word	0x0001a23c
    9878:	0001a278 	.word	0x0001a278
    987c:	0001a2c0 	.word	0x0001a2c0
    9880:	00018a31 	.word	0x00018a31
    9884:	0001a2c4 	.word	0x0001a2c4
    9888:	0001a2e4 	.word	0x0001a2e4
    988c:	0001a304 	.word	0x0001a304

00009890 <DemoOutput_Channel>:
	LCDDisplay((char *)"SW: Use Nwk Freezer \nPress in 5 sec", 0, false);	
	delay_ms(1000);
#endif
}
void DemoOutput_Channel(uint8_t channel, uint8_t Step)
{
    9890:	b570      	push	{r4, r5, r6, lr}
    9892:	0004      	movs	r4, r0
    if( Step == 0 )
    9894:	2900      	cmp	r1, #0
    9896:	d00e      	beq.n	98b6 <DemoOutput_Channel+0x26>
#endif
    }
    else
    { 
#if defined (ENABLE_LCD)
        LCDDisplay((char *)"Connected Peer on \n Channel ", channel, true);
    9898:	2201      	movs	r2, #1
    989a:	0001      	movs	r1, r0
    989c:	480d      	ldr	r0, [pc, #52]	; (98d4 <DemoOutput_Channel+0x44>)
    989e:	4b0e      	ldr	r3, [pc, #56]	; (98d8 <DemoOutput_Channel+0x48>)
    98a0:	4798      	blx	r3
#endif
#if defined (ENABLE_CONSOLE)
        #if !defined(MIWIKIT)
        printf("\r\nConnected Peer on Channel ");
    98a2:	480e      	ldr	r0, [pc, #56]	; (98dc <DemoOutput_Channel+0x4c>)
    98a4:	4d0e      	ldr	r5, [pc, #56]	; (98e0 <DemoOutput_Channel+0x50>)
    98a6:	47a8      	blx	r5
        printf("%d",channel);
    98a8:	0021      	movs	r1, r4
    98aa:	480e      	ldr	r0, [pc, #56]	; (98e4 <DemoOutput_Channel+0x54>)
    98ac:	47a8      	blx	r5
        printf("\r\n");
    98ae:	480e      	ldr	r0, [pc, #56]	; (98e8 <DemoOutput_Channel+0x58>)
    98b0:	4b0e      	ldr	r3, [pc, #56]	; (98ec <DemoOutput_Channel+0x5c>)
    98b2:	4798      	blx	r3
        #endif
#endif
    }
}    
    98b4:	bd70      	pop	{r4, r5, r6, pc}
        LCDDisplay((char *)"Connecting Peer on \n Channel ", channel, true);
    98b6:	2201      	movs	r2, #1
    98b8:	0001      	movs	r1, r0
    98ba:	480d      	ldr	r0, [pc, #52]	; (98f0 <DemoOutput_Channel+0x60>)
    98bc:	4b06      	ldr	r3, [pc, #24]	; (98d8 <DemoOutput_Channel+0x48>)
    98be:	4798      	blx	r3
        printf("\r\nConnecting Peer on Channel ");
    98c0:	480c      	ldr	r0, [pc, #48]	; (98f4 <DemoOutput_Channel+0x64>)
    98c2:	4d07      	ldr	r5, [pc, #28]	; (98e0 <DemoOutput_Channel+0x50>)
    98c4:	47a8      	blx	r5
        printf("%d",channel);
    98c6:	0021      	movs	r1, r4
    98c8:	4806      	ldr	r0, [pc, #24]	; (98e4 <DemoOutput_Channel+0x54>)
    98ca:	47a8      	blx	r5
        printf("\r\n");
    98cc:	4806      	ldr	r0, [pc, #24]	; (98e8 <DemoOutput_Channel+0x58>)
    98ce:	4b07      	ldr	r3, [pc, #28]	; (98ec <DemoOutput_Channel+0x5c>)
    98d0:	4798      	blx	r3
    98d2:	e7ef      	b.n	98b4 <DemoOutput_Channel+0x24>
    98d4:	0001a000 	.word	0x0001a000
    98d8:	0000a941 	.word	0x0000a941
    98dc:	0001a020 	.word	0x0001a020
    98e0:	00018915 	.word	0x00018915
    98e4:	00019ffc 	.word	0x00019ffc
    98e8:	0001ad48 	.word	0x0001ad48
    98ec:	00018a31 	.word	0x00018a31
    98f0:	00019fbc 	.word	0x00019fbc
    98f4:	00019fdc 	.word	0x00019fdc

000098f8 <DemoOutput_HandleMessage>:
#endif
}


void DemoOutput_HandleMessage(void)
{
    98f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	uint8_t startPayloadIndex = 0;
	
    if( rxMessage.flags.bits.secEn )
    98fa:	4b2f      	ldr	r3, [pc, #188]	; (99b8 <DemoOutput_HandleMessage+0xc0>)
    98fc:	781b      	ldrb	r3, [r3, #0]
    98fe:	071b      	lsls	r3, r3, #28
    9900:	d42a      	bmi.n	9958 <DemoOutput_HandleMessage+0x60>
    {
        sio2host_tx((uint8_t *)"Secured ", sizeof("Secured "));
    }

    if( rxMessage.flags.bits.broadcast )
    9902:	4b2d      	ldr	r3, [pc, #180]	; (99b8 <DemoOutput_HandleMessage+0xc0>)
    9904:	781b      	ldrb	r3, [r3, #0]
    9906:	079b      	lsls	r3, r3, #30
    9908:	d02b      	beq.n	9962 <DemoOutput_HandleMessage+0x6a>
    {
        sio2host_tx((uint8_t *)"Broadcast Packet with RSSI ", sizeof("Broadcast Packet with RSSI "));
    990a:	211c      	movs	r1, #28
    990c:	482b      	ldr	r0, [pc, #172]	; (99bc <DemoOutput_HandleMessage+0xc4>)
    990e:	4b2c      	ldr	r3, [pc, #176]	; (99c0 <DemoOutput_HandleMessage+0xc8>)
    9910:	4798      	blx	r3
    }
    else
    {
        sio2host_tx((uint8_t *)"Unicast Packet with RSSI ",sizeof("Unicast Packet with RSSI "));
    }
    printf("%02x", rxMessage.PacketRSSI);
    9912:	4c29      	ldr	r4, [pc, #164]	; (99b8 <DemoOutput_HandleMessage+0xc0>)
    9914:	7b61      	ldrb	r1, [r4, #13]
    9916:	482b      	ldr	r0, [pc, #172]	; (99c4 <DemoOutput_HandleMessage+0xcc>)
    9918:	4b2b      	ldr	r3, [pc, #172]	; (99c8 <DemoOutput_HandleMessage+0xd0>)
    991a:	4798      	blx	r3
    if( rxMessage.flags.bits.srcPrsnt )
    991c:	7823      	ldrb	r3, [r4, #0]
    991e:	065b      	lsls	r3, r3, #25
    9920:	d424      	bmi.n	996c <DemoOutput_HandleMessage+0x74>
            {
                printf("%x", rxMessage.SourceAddress[MY_ADDRESS_LENGTH-1-i]);
            }    
        }
    }
    sio2host_tx((uint8_t *)": ",sizeof(": "));
    9922:	2103      	movs	r1, #3
    9924:	4829      	ldr	r0, [pc, #164]	; (99cc <DemoOutput_HandleMessage+0xd4>)
    9926:	4b26      	ldr	r3, [pc, #152]	; (99c0 <DemoOutput_HandleMessage+0xc8>)
    9928:	4798      	blx	r3
    
#if defined(PROTOCOL_STAR)
	/* If the role is not PAN Coordinator and receiving a unicast
	then first three bytes are source end device info, so skip this*/
	if (END_DEVICE == role && !rxMessage.flags.bits.broadcast)
    992a:	4b29      	ldr	r3, [pc, #164]	; (99d0 <DemoOutput_HandleMessage+0xd8>)
    992c:	781b      	ldrb	r3, [r3, #0]
	uint8_t startPayloadIndex = 0;
    992e:	2400      	movs	r4, #0
	if (END_DEVICE == role && !rxMessage.flags.bits.broadcast)
    9930:	2b02      	cmp	r3, #2
    9932:	d03a      	beq.n	99aa <DemoOutput_HandleMessage+0xb2>
	{
	    startPayloadIndex = 3;
	}
#endif

    for(i = startPayloadIndex; i < rxMessage.PayloadSize; i++)
    9934:	4b20      	ldr	r3, [pc, #128]	; (99b8 <DemoOutput_HandleMessage+0xc0>)
    9936:	7b1b      	ldrb	r3, [r3, #12]
    9938:	42a3      	cmp	r3, r4
    993a:	d909      	bls.n	9950 <DemoOutput_HandleMessage+0x58>
    {
        sio2host_putchar(rxMessage.Payload[i]);
    993c:	4d1e      	ldr	r5, [pc, #120]	; (99b8 <DemoOutput_HandleMessage+0xc0>)
    993e:	4e25      	ldr	r6, [pc, #148]	; (99d4 <DemoOutput_HandleMessage+0xdc>)
    9940:	68ab      	ldr	r3, [r5, #8]
    9942:	5d18      	ldrb	r0, [r3, r4]
    9944:	47b0      	blx	r6
    for(i = startPayloadIndex; i < rxMessage.PayloadSize; i++)
    9946:	3401      	adds	r4, #1
    9948:	b2e4      	uxtb	r4, r4
    994a:	7b2b      	ldrb	r3, [r5, #12]
    994c:	42a3      	cmp	r3, r4
    994e:	d8f7      	bhi.n	9940 <DemoOutput_HandleMessage+0x48>
    }   
	printf("\r\n");    
    9950:	4821      	ldr	r0, [pc, #132]	; (99d8 <DemoOutput_HandleMessage+0xe0>)
    9952:	4b22      	ldr	r3, [pc, #136]	; (99dc <DemoOutput_HandleMessage+0xe4>)
    9954:	4798      	blx	r3
} 
    9956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        sio2host_tx((uint8_t *)"Secured ", sizeof("Secured "));
    9958:	2109      	movs	r1, #9
    995a:	4821      	ldr	r0, [pc, #132]	; (99e0 <DemoOutput_HandleMessage+0xe8>)
    995c:	4b18      	ldr	r3, [pc, #96]	; (99c0 <DemoOutput_HandleMessage+0xc8>)
    995e:	4798      	blx	r3
    9960:	e7cf      	b.n	9902 <DemoOutput_HandleMessage+0xa>
        sio2host_tx((uint8_t *)"Unicast Packet with RSSI ",sizeof("Unicast Packet with RSSI "));
    9962:	211a      	movs	r1, #26
    9964:	481f      	ldr	r0, [pc, #124]	; (99e4 <DemoOutput_HandleMessage+0xec>)
    9966:	4b16      	ldr	r3, [pc, #88]	; (99c0 <DemoOutput_HandleMessage+0xc8>)
    9968:	4798      	blx	r3
    996a:	e7d2      	b.n	9912 <DemoOutput_HandleMessage+0x1a>
        sio2host_tx((uint8_t *)" from ", sizeof(" from "));
    996c:	2107      	movs	r1, #7
    996e:	481e      	ldr	r0, [pc, #120]	; (99e8 <DemoOutput_HandleMessage+0xf0>)
    9970:	4b13      	ldr	r3, [pc, #76]	; (99c0 <DemoOutput_HandleMessage+0xc8>)
    9972:	4798      	blx	r3
        if( rxMessage.flags.bits.altSrcAddr )
    9974:	4b10      	ldr	r3, [pc, #64]	; (99b8 <DemoOutput_HandleMessage+0xc0>)
    9976:	781b      	ldrb	r3, [r3, #0]
    9978:	2407      	movs	r4, #7
    997a:	2b7f      	cmp	r3, #127	; 0x7f
    997c:	d809      	bhi.n	9992 <DemoOutput_HandleMessage+0x9a>
                printf("%x", rxMessage.SourceAddress[MY_ADDRESS_LENGTH-1-i]);
    997e:	4f0e      	ldr	r7, [pc, #56]	; (99b8 <DemoOutput_HandleMessage+0xc0>)
    9980:	4e1a      	ldr	r6, [pc, #104]	; (99ec <DemoOutput_HandleMessage+0xf4>)
    9982:	4d11      	ldr	r5, [pc, #68]	; (99c8 <DemoOutput_HandleMessage+0xd0>)
    9984:	687b      	ldr	r3, [r7, #4]
    9986:	5d19      	ldrb	r1, [r3, r4]
    9988:	0030      	movs	r0, r6
    998a:	47a8      	blx	r5
            for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    998c:	3c01      	subs	r4, #1
    998e:	d2f9      	bcs.n	9984 <DemoOutput_HandleMessage+0x8c>
    9990:	e7c7      	b.n	9922 <DemoOutput_HandleMessage+0x2a>
            printf( "%x", rxMessage.SourceAddress[1]);
    9992:	4e09      	ldr	r6, [pc, #36]	; (99b8 <DemoOutput_HandleMessage+0xc0>)
    9994:	6873      	ldr	r3, [r6, #4]
    9996:	7859      	ldrb	r1, [r3, #1]
    9998:	4d14      	ldr	r5, [pc, #80]	; (99ec <DemoOutput_HandleMessage+0xf4>)
    999a:	0028      	movs	r0, r5
    999c:	4c0a      	ldr	r4, [pc, #40]	; (99c8 <DemoOutput_HandleMessage+0xd0>)
    999e:	47a0      	blx	r4
            printf( "%x", rxMessage.SourceAddress[0]);
    99a0:	6873      	ldr	r3, [r6, #4]
    99a2:	7819      	ldrb	r1, [r3, #0]
    99a4:	0028      	movs	r0, r5
    99a6:	47a0      	blx	r4
    99a8:	e7bb      	b.n	9922 <DemoOutput_HandleMessage+0x2a>
	if (END_DEVICE == role && !rxMessage.flags.bits.broadcast)
    99aa:	4b03      	ldr	r3, [pc, #12]	; (99b8 <DemoOutput_HandleMessage+0xc0>)
    99ac:	781b      	ldrb	r3, [r3, #0]
    99ae:	079b      	lsls	r3, r3, #30
    99b0:	d1c0      	bne.n	9934 <DemoOutput_HandleMessage+0x3c>
	    startPayloadIndex = 3;
    99b2:	3403      	adds	r4, #3
    99b4:	e7be      	b.n	9934 <DemoOutput_HandleMessage+0x3c>
    99b6:	46c0      	nop			; (mov r8, r8)
    99b8:	2000377c 	.word	0x2000377c
    99bc:	0001a328 	.word	0x0001a328
    99c0:	0000f951 	.word	0x0000f951
    99c4:	0001a360 	.word	0x0001a360
    99c8:	00018915 	.word	0x00018915
    99cc:	0001a374 	.word	0x0001a374
    99d0:	2000376c 	.word	0x2000376c
    99d4:	0000fa31 	.word	0x0000fa31
    99d8:	0001ad48 	.word	0x0001ad48
    99dc:	00018a31 	.word	0x00018a31
    99e0:	0001a31c 	.word	0x0001a31c
    99e4:	0001a344 	.word	0x0001a344
    99e8:	0001a368 	.word	0x0001a368
    99ec:	0001a370 	.word	0x0001a370

000099f0 <DemoOutput_UpdateTxRx>:

void DemoOutput_UpdateTxRx(uint8_t TxNum, uint8_t RxNum)
{
    99f0:	b510      	push	{r4, lr}
#if defined (ENABLE_LCD)
    LCDTRXCount(TxNum, RxNum);  
    99f2:	4b01      	ldr	r3, [pc, #4]	; (99f8 <DemoOutput_UpdateTxRx+0x8>)
    99f4:	4798      	blx	r3
#endif
}
    99f6:	bd10      	pop	{r4, pc}
    99f8:	0000a8e5 	.word	0x0000a8e5

000099fc <DemoOutput_ChannelError>:

void DemoOutput_ChannelError(uint8_t channel)
{
    99fc:	b570      	push	{r4, r5, r6, lr}
    99fe:	0005      	movs	r5, r0
    #if defined (ENABLE_CONSOLE)
        printf("\r\nSelection of channel ");
    9a00:	4804      	ldr	r0, [pc, #16]	; (9a14 <DemoOutput_ChannelError+0x18>)
    9a02:	4c05      	ldr	r4, [pc, #20]	; (9a18 <DemoOutput_ChannelError+0x1c>)
    9a04:	47a0      	blx	r4
        printf("%d", channel);
    9a06:	0029      	movs	r1, r5
    9a08:	4804      	ldr	r0, [pc, #16]	; (9a1c <DemoOutput_ChannelError+0x20>)
    9a0a:	47a0      	blx	r4
        printf(" is not supported in current configuration.\r\n");
    9a0c:	4804      	ldr	r0, [pc, #16]	; (9a20 <DemoOutput_ChannelError+0x24>)
    9a0e:	4b05      	ldr	r3, [pc, #20]	; (9a24 <DemoOutput_ChannelError+0x28>)
    9a10:	4798      	blx	r3
    #endif
}
    9a12:	bd70      	pop	{r4, r5, r6, pc}
    9a14:	0001a040 	.word	0x0001a040
    9a18:	00018915 	.word	0x00018915
    9a1c:	00019ffc 	.word	0x00019ffc
    9a20:	0001a058 	.word	0x0001a058
    9a24:	00018a31 	.word	0x00018a31

00009a28 <DemoOutput_UnicastFail>:

void DemoOutput_UnicastFail(void)
{
    9a28:	b510      	push	{r4, lr}
    #if defined (ENABLE_CONSOLE)
        printf("\r\nUnicast Failed\r\n");
    9a2a:	4804      	ldr	r0, [pc, #16]	; (9a3c <DemoOutput_UnicastFail+0x14>)
    9a2c:	4b04      	ldr	r3, [pc, #16]	; (9a40 <DemoOutput_UnicastFail+0x18>)
    9a2e:	4798      	blx	r3
    #endif
#if defined (ENABLE_LCD)
    LCDDisplay((char *)" Unicast Failed", 0, true);
    9a30:	2201      	movs	r2, #1
    9a32:	2100      	movs	r1, #0
    9a34:	4803      	ldr	r0, [pc, #12]	; (9a44 <DemoOutput_UnicastFail+0x1c>)
    9a36:	4b04      	ldr	r3, [pc, #16]	; (9a48 <DemoOutput_UnicastFail+0x20>)
    9a38:	4798      	blx	r3
#endif
}    
    9a3a:	bd10      	pop	{r4, pc}
    9a3c:	0001a378 	.word	0x0001a378
    9a40:	00018a31 	.word	0x00018a31
    9a44:	0001a38c 	.word	0x0001a38c
    9a48:	0000a941 	.word	0x0000a941

00009a4c <DemoOutput_BroadcastFail>:

void DemoOutput_BroadcastFail(void)
{
    9a4c:	b510      	push	{r4, lr}
	#if defined (ENABLE_CONSOLE)
	printf("\r\nBroadcast Failed\r\n");
    9a4e:	4804      	ldr	r0, [pc, #16]	; (9a60 <DemoOutput_BroadcastFail+0x14>)
    9a50:	4b04      	ldr	r3, [pc, #16]	; (9a64 <DemoOutput_BroadcastFail+0x18>)
    9a52:	4798      	blx	r3
	#endif
	#if defined (ENABLE_LCD)
	LCDDisplay((char *)" Broadcast Failed", 0, true);
    9a54:	2201      	movs	r2, #1
    9a56:	2100      	movs	r1, #0
    9a58:	4803      	ldr	r0, [pc, #12]	; (9a68 <DemoOutput_BroadcastFail+0x1c>)
    9a5a:	4b04      	ldr	r3, [pc, #16]	; (9a6c <DemoOutput_BroadcastFail+0x20>)
    9a5c:	4798      	blx	r3
	#endif
}    
    9a5e:	bd10      	pop	{r4, pc}
    9a60:	00019f94 	.word	0x00019f94
    9a64:	00018a31 	.word	0x00018a31
    9a68:	00019fa8 	.word	0x00019fa8
    9a6c:	0000a941 	.word	0x0000a941

00009a70 <Source_END_DEVICE_INFO>:

#if defined(PROTOCOL_STAR)
void Source_END_DEVICE_INFO(uint8_t *SrAddr)
{
    9a70:	b510      	push	{r4, lr}
    9a72:	b082      	sub	sp, #8
    9a74:	0004      	movs	r4, r0
	#if defined (ENABLE_LCD)
	LCD_Erase();
    9a76:	4b0a      	ldr	r3, [pc, #40]	; (9aa0 <Source_END_DEVICE_INFO+0x30>)
    9a78:	4798      	blx	r3
	snprintf(LCDText, sizeof(LCDText), "Data Packet from\n Address:%02x%02x%02x", SrAddr[0],SrAddr[1],SrAddr[2]);
    9a7a:	7823      	ldrb	r3, [r4, #0]
    9a7c:	78a2      	ldrb	r2, [r4, #2]
    9a7e:	9201      	str	r2, [sp, #4]
    9a80:	7862      	ldrb	r2, [r4, #1]
    9a82:	9200      	str	r2, [sp, #0]
    9a84:	4a07      	ldr	r2, [pc, #28]	; (9aa4 <Source_END_DEVICE_INFO+0x34>)
    9a86:	2141      	movs	r1, #65	; 0x41
    9a88:	4807      	ldr	r0, [pc, #28]	; (9aa8 <Source_END_DEVICE_INFO+0x38>)
    9a8a:	4c08      	ldr	r4, [pc, #32]	; (9aac <Source_END_DEVICE_INFO+0x3c>)
    9a8c:	47a0      	blx	r4
	LCD_Update();
    9a8e:	4b08      	ldr	r3, [pc, #32]	; (9ab0 <Source_END_DEVICE_INFO+0x40>)
    9a90:	4798      	blx	r3
	#endif
	delay_ms(1200);
    9a92:	2096      	movs	r0, #150	; 0x96
    9a94:	00c0      	lsls	r0, r0, #3
    9a96:	4b07      	ldr	r3, [pc, #28]	; (9ab4 <Source_END_DEVICE_INFO+0x44>)
    9a98:	4798      	blx	r3
}
    9a9a:	b002      	add	sp, #8
    9a9c:	bd10      	pop	{r4, pc}
    9a9e:	46c0      	nop			; (mov r8, r8)
    9aa0:	0000a8ad 	.word	0x0000a8ad
    9aa4:	0001a3d8 	.word	0x0001a3d8
    9aa8:	200025c8 	.word	0x200025c8
    9aac:	00018c85 	.word	0x00018c85
    9ab0:	0000a8c9 	.word	0x0000a8c9
    9ab4:	00004719 	.word	0x00004719

00009ab8 <STAR_DEMO_OPTIONS_MESSAGE>:

void STAR_DEMO_OPTIONS_MESSAGE(DeviceRole_t deviceRole)
{
    9ab8:	b510      	push	{r4, lr}
	#if defined (ENABLE_LCD)
	if (deviceRole == PAN_COORD)
    9aba:	2801      	cmp	r0, #1
    9abc:	d005      	beq.n	9aca <STAR_DEMO_OPTIONS_MESSAGE+0x12>
		#endif
	}
	else
	{
		#if (defined EXT_BOARD_OLED1_XPLAINED_PRO)
		LCDDisplay((char *)"SW0:  Unicast \nBUTTON1: Next Node", 0, false);
    9abe:	2200      	movs	r2, #0
    9ac0:	2100      	movs	r1, #0
    9ac2:	4805      	ldr	r0, [pc, #20]	; (9ad8 <STAR_DEMO_OPTIONS_MESSAGE+0x20>)
    9ac4:	4b05      	ldr	r3, [pc, #20]	; (9adc <STAR_DEMO_OPTIONS_MESSAGE+0x24>)
    9ac6:	4798      	blx	r3
		#endif
	}
	#endif
}
    9ac8:	bd10      	pop	{r4, pc}
		LCDDisplay((char *)"PC :SW0 to Broadcast", 0, false);
    9aca:	2200      	movs	r2, #0
    9acc:	2100      	movs	r1, #0
    9ace:	4804      	ldr	r0, [pc, #16]	; (9ae0 <STAR_DEMO_OPTIONS_MESSAGE+0x28>)
    9ad0:	4b02      	ldr	r3, [pc, #8]	; (9adc <STAR_DEMO_OPTIONS_MESSAGE+0x24>)
    9ad2:	4798      	blx	r3
    9ad4:	e7f8      	b.n	9ac8 <STAR_DEMO_OPTIONS_MESSAGE+0x10>
    9ad6:	46c0      	nop			; (mov r8, r8)
    9ad8:	0001a3b4 	.word	0x0001a3b4
    9adc:	0000a941 	.word	0x0000a941
    9ae0:	0001a39c 	.word	0x0001a39c

00009ae4 <ButtonPressed>:
 *
 * Note:
 ********************************************************************/

uint8_t ButtonPressed(void)
{
    9ae4:	b510      	push	{r4, lr}
	return (port_base->IN.reg & pin_mask);
    9ae6:	4b19      	ldr	r3, [pc, #100]	; (9b4c <ButtonPressed+0x68>)
    9ae8:	6a1b      	ldr	r3, [r3, #32]
    MIWI_TICK tickDifference;
    if(!port_pin_get_input_level(BUTTON_0_PIN))
    9aea:	00db      	lsls	r3, r3, #3
    9aec:	d40e      	bmi.n	9b0c <ButtonPressed+0x28>
    {
        //if the button was previously not pressed
        if(PUSH_BUTTON_pressed == false)
    9aee:	4b18      	ldr	r3, [pc, #96]	; (9b50 <ButtonPressed+0x6c>)
    9af0:	781b      	ldrb	r3, [r3, #0]
        if(tickDifference.Val > DEBOUNCE_TIME)
        {
            PUSH_BUTTON_pressed = false;
        }
    }
    return 0;
    9af2:	2000      	movs	r0, #0
        if(PUSH_BUTTON_pressed == false)
    9af4:	2b00      	cmp	r3, #0
    9af6:	d000      	beq.n	9afa <ButtonPressed+0x16>
}
    9af8:	bd10      	pop	{r4, pc}
            PUSH_BUTTON_pressed = true;
    9afa:	2201      	movs	r2, #1
    9afc:	4b14      	ldr	r3, [pc, #80]	; (9b50 <ButtonPressed+0x6c>)
    9afe:	701a      	strb	r2, [r3, #0]
            PUSH_BUTTON_press_time.Val = MiWi_TickGet();
    9b00:	4b14      	ldr	r3, [pc, #80]	; (9b54 <ButtonPressed+0x70>)
    9b02:	4798      	blx	r3
    9b04:	4b14      	ldr	r3, [pc, #80]	; (9b58 <ButtonPressed+0x74>)
    9b06:	6018      	str	r0, [r3, #0]
            return 1;
    9b08:	2001      	movs	r0, #1
    9b0a:	e7f5      	b.n	9af8 <ButtonPressed+0x14>
    9b0c:	4b0f      	ldr	r3, [pc, #60]	; (9b4c <ButtonPressed+0x68>)
    9b0e:	6a1b      	ldr	r3, [r3, #32]
    else if(!port_pin_get_input_level(WING_BUTTON_1))
    9b10:	025b      	lsls	r3, r3, #9
    9b12:	d40d      	bmi.n	9b30 <ButtonPressed+0x4c>
	    if(PUSH_BUTTON_pressed == false)
    9b14:	4b0e      	ldr	r3, [pc, #56]	; (9b50 <ButtonPressed+0x6c>)
    9b16:	781b      	ldrb	r3, [r3, #0]
    return 0;
    9b18:	2000      	movs	r0, #0
	    if(PUSH_BUTTON_pressed == false)
    9b1a:	2b00      	cmp	r3, #0
    9b1c:	d1ec      	bne.n	9af8 <ButtonPressed+0x14>
		    PUSH_BUTTON_pressed = true;
    9b1e:	2201      	movs	r2, #1
    9b20:	4b0b      	ldr	r3, [pc, #44]	; (9b50 <ButtonPressed+0x6c>)
    9b22:	701a      	strb	r2, [r3, #0]
		    PUSH_BUTTON_press_time.Val = MiWi_TickGet();
    9b24:	4b0b      	ldr	r3, [pc, #44]	; (9b54 <ButtonPressed+0x70>)
    9b26:	4798      	blx	r3
    9b28:	4b0b      	ldr	r3, [pc, #44]	; (9b58 <ButtonPressed+0x74>)
    9b2a:	6018      	str	r0, [r3, #0]
		    return 2;
    9b2c:	2002      	movs	r0, #2
    9b2e:	e7e3      	b.n	9af8 <ButtonPressed+0x14>
		t.Val = MiWi_TickGet();
    9b30:	4b08      	ldr	r3, [pc, #32]	; (9b54 <ButtonPressed+0x70>)
    9b32:	4798      	blx	r3
        tickDifference.Val = MiWi_TickGetDiff(t,PUSH_BUTTON_press_time);
    9b34:	4b08      	ldr	r3, [pc, #32]	; (9b58 <ButtonPressed+0x74>)
    9b36:	6819      	ldr	r1, [r3, #0]
    9b38:	4b08      	ldr	r3, [pc, #32]	; (9b5c <ButtonPressed+0x78>)
    9b3a:	4798      	blx	r3
        if(tickDifference.Val > DEBOUNCE_TIME)
    9b3c:	4b08      	ldr	r3, [pc, #32]	; (9b60 <ButtonPressed+0x7c>)
    9b3e:	4298      	cmp	r0, r3
    9b40:	d902      	bls.n	9b48 <ButtonPressed+0x64>
            PUSH_BUTTON_pressed = false;
    9b42:	2200      	movs	r2, #0
    9b44:	4b02      	ldr	r3, [pc, #8]	; (9b50 <ButtonPressed+0x6c>)
    9b46:	701a      	strb	r2, [r3, #0]
    return 0;
    9b48:	2000      	movs	r0, #0
    9b4a:	e7d5      	b.n	9af8 <ButtonPressed+0x14>
    9b4c:	40002800 	.word	0x40002800
    9b50:	200025ac 	.word	0x200025ac
    9b54:	0000f6f1 	.word	0x0000f6f1
    9b58:	200025b0 	.word	0x200025b0
    9b5c:	0000f751 	.word	0x0000f751
    9b60:	00003fff 	.word	0x00003fff

00009b64 <Buttons_init>:
#if (defined EXT_BOARD_OLED1_XPLAINED_PRO)
/**
 * \brief Configures buttons
 */
void Buttons_init(void)
{
    9b64:	b530      	push	{r4, r5, lr}
    9b66:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    9b68:	ac01      	add	r4, sp, #4
    9b6a:	2300      	movs	r3, #0
    9b6c:	7023      	strb	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    9b6e:	2201      	movs	r2, #1
    9b70:	7062      	strb	r2, [r4, #1]
	config->powersave  = false;
    9b72:	70a3      	strb	r3, [r4, #2]

	conf.direction = PORT_PIN_DIR_INPUT;
	conf.input_pull = PORT_PIN_PULL_UP;

	/* Configure all three buttons as inputs */
	port_pin_set_config(WING_BUTTON_1, &conf);
    9b74:	0021      	movs	r1, r4
    9b76:	2016      	movs	r0, #22
    9b78:	4d04      	ldr	r5, [pc, #16]	; (9b8c <Buttons_init+0x28>)
    9b7a:	47a8      	blx	r5
	port_pin_set_config(WING_BUTTON_2, &conf);
    9b7c:	0021      	movs	r1, r4
    9b7e:	2006      	movs	r0, #6
    9b80:	47a8      	blx	r5
	port_pin_set_config(WING_BUTTON_3, &conf);
    9b82:	0021      	movs	r1, r4
    9b84:	2007      	movs	r0, #7
    9b86:	47a8      	blx	r5
}
    9b88:	b003      	add	sp, #12
    9b8a:	bd30      	pop	{r4, r5, pc}
    9b8c:	00005171 	.word	0x00005171

00009b90 <APP_TaskHandler>:

/*********************************************************************//*
 \brief      Application Task Handler
 ************************************************************************/
SYSTEM_TaskStatus_t APP_TaskHandler(void)
{
    9b90:	b510      	push	{r4, lr}
    Run_Demo();
    9b92:	4b02      	ldr	r3, [pc, #8]	; (9b9c <APP_TaskHandler+0xc>)
    9b94:	4798      	blx	r3
    return SYSTEM_TASK_SUCCESS;
}
    9b96:	2000      	movs	r0, #0
    9b98:	bd10      	pop	{r4, pc}
    9b9a:	46c0      	nop			; (mov r8, r8)
    9b9c:	0000a88d 	.word	0x0000a88d

00009ba0 <ReadMacAddress>:
* Overview:		    Uses the MAC Address for addressing
*
* Note:			    
**********************************************************************/
void ReadMacAddress(void)
{
    9ba0:	b510      	push	{r4, lr}
#if (BOARD == SAMR34_XPLAINED_PRO && defined(__SAMR34J18B__))
	// only applicable for SAM R34 Xpro with EDBG on-board
	uint8_t* peui64 = edbg_eui_read_eui64() ;
    9ba2:	4b06      	ldr	r3, [pc, #24]	; (9bbc <ReadMacAddress+0x1c>)
    9ba4:	4798      	blx	r3
    9ba6:	1dc3      	adds	r3, r0, #7
    9ba8:	4a05      	ldr	r2, [pc, #20]	; (9bc0 <ReadMacAddress+0x20>)
    9baa:	3801      	subs	r0, #1
	for (uint8_t i = 0; i < MY_ADDRESS_LENGTH; i++)
	{
		myLongAddress[i] = peui64[MY_ADDRESS_LENGTH-i-1] ;
    9bac:	7819      	ldrb	r1, [r3, #0]
    9bae:	7011      	strb	r1, [r2, #0]
    9bb0:	3b01      	subs	r3, #1
    9bb2:	3201      	adds	r2, #1
	for (uint8_t i = 0; i < MY_ADDRESS_LENGTH; i++)
    9bb4:	4283      	cmp	r3, r0
    9bb6:	d1f9      	bne.n	9bac <ReadMacAddress+0xc>
	for (i= 0; i < MY_ADDRESS_LENGTH; i++)
	{
		myLongAddress[i] = peui64[MY_ADDRESS_LENGTH-i-1] ;
	}
#endif
}
    9bb8:	bd10      	pop	{r4, pc}
    9bba:	46c0      	nop			; (mov r8, r8)
    9bbc:	00011449 	.word	0x00011449
    9bc0:	20000020 	.word	0x20000020

00009bc4 <main>:
{   
    9bc4:	b570      	push	{r4, r5, r6, lr}
	system_init();
    9bc6:	4b11      	ldr	r3, [pc, #68]	; (9c0c <main+0x48>)
    9bc8:	4798      	blx	r3
	delay_init();
    9bca:	4b11      	ldr	r3, [pc, #68]	; (9c10 <main+0x4c>)
    9bcc:	4798      	blx	r3
	cpu_irq_enable();
    9bce:	2201      	movs	r2, #1
    9bd0:	4b10      	ldr	r3, [pc, #64]	; (9c14 <main+0x50>)
    9bd2:	701a      	strb	r2, [r3, #0]
    9bd4:	f3bf 8f5f 	dmb	sy
    9bd8:	b662      	cpsie	i
	LCD_Initialize();
    9bda:	4b0f      	ldr	r3, [pc, #60]	; (9c18 <main+0x54>)
    9bdc:	4798      	blx	r3
	sio2host_init();
    9bde:	4b0f      	ldr	r3, [pc, #60]	; (9c1c <main+0x58>)
    9be0:	4798      	blx	r3
	ReadMacAddress(); 
    9be2:	4b0f      	ldr	r3, [pc, #60]	; (9c20 <main+0x5c>)
    9be4:	4798      	blx	r3
	SystemTimerInit();
    9be6:	4b0f      	ldr	r3, [pc, #60]	; (9c24 <main+0x60>)
    9be8:	4798      	blx	r3
    DemoOutput_Greeting();	
    9bea:	4b0f      	ldr	r3, [pc, #60]	; (9c28 <main+0x64>)
    9bec:	4798      	blx	r3
    Buttons_init();
    9bee:	4b0f      	ldr	r3, [pc, #60]	; (9c2c <main+0x68>)
    9bf0:	4798      	blx	r3
    Initialize_Demo(freezer_enable);
    9bf2:	2000      	movs	r0, #0
    9bf4:	4b0e      	ldr	r3, [pc, #56]	; (9c30 <main+0x6c>)
    9bf6:	4798      	blx	r3
    Stack_Init();
    9bf8:	4b0e      	ldr	r3, [pc, #56]	; (9c34 <main+0x70>)
    9bfa:	4798      	blx	r3
		SYSTEM_RunTasks();
    9bfc:	4e0e      	ldr	r6, [pc, #56]	; (9c38 <main+0x74>)
		Run_Demo();
    9bfe:	4d0f      	ldr	r5, [pc, #60]	; (9c3c <main+0x78>)
	   messi();
    9c00:	4c0f      	ldr	r4, [pc, #60]	; (9c40 <main+0x7c>)
		SYSTEM_RunTasks();
    9c02:	47b0      	blx	r6
		Run_Demo();
    9c04:	47a8      	blx	r5
	   messi();
    9c06:	47a0      	blx	r4
    9c08:	e7fb      	b.n	9c02 <main+0x3e>
    9c0a:	46c0      	nop			; (mov r8, r8)
    9c0c:	000071e1 	.word	0x000071e1
    9c10:	000046ad 	.word	0x000046ad
    9c14:	20000014 	.word	0x20000014
    9c18:	0000a8a1 	.word	0x0000a8a1
    9c1c:	0000f805 	.word	0x0000f805
    9c20:	00009ba1 	.word	0x00009ba1
    9c24:	00010901 	.word	0x00010901
    9c28:	00009805 	.word	0x00009805
    9c2c:	00009b65 	.word	0x00009b65
    9c30:	0000a5e1 	.word	0x0000a5e1
    9c34:	00010f39 	.word	0x00010f39
    9c38:	00010f49 	.word	0x00010f49
    9c3c:	0000a88d 	.word	0x0000a88d
    9c40:	0000a29d 	.word	0x0000a29d

00009c44 <TxToutCallback>:
}
#endif //#ifdef PERIODIC_UPLINK

// Transmission time-out callback
void TxToutCallback(void)
{
    9c44:	b510      	push	{r4, lr}
#if defined(ENABLE_SLEEP_FEATURE)
	send_data = 0;
#endif // #if defined(ENABLE_SLEEP_FEATURE)
	/* That bring the node back to continuous transaction cycle */
	PHY_DataConf(TRANSACTION_EXPIRED);
    9c46:	2005      	movs	r0, #5
    9c48:	4b03      	ldr	r3, [pc, #12]	; (9c58 <TxToutCallback+0x14>)
    9c4a:	4798      	blx	r3
	SwTimerStop(TxTimerId);
    9c4c:	4b03      	ldr	r3, [pc, #12]	; (9c5c <TxToutCallback+0x18>)
    9c4e:	7818      	ldrb	r0, [r3, #0]
    9c50:	4b03      	ldr	r3, [pc, #12]	; (9c60 <TxToutCallback+0x1c>)
    9c52:	4798      	blx	r3
}
    9c54:	bd10      	pop	{r4, pc}
    9c56:	46c0      	nop			; (mov r8, r8)
    9c58:	0000c6a9 	.word	0x0000c6a9
    9c5c:	20000631 	.word	0x20000631
    9c60:	00010cb5 	.word	0x00010cb5

00009c64 <dataConfcb>:

// Transmission callback
void dataConfcb(uint8_t handle, miwi_status_t status, uint8_t* msgPointer)
{
    9c64:	b510      	push	{r4, lr}
    9c66:	000a      	movs	r2, r1
#if defined (ENABLE_CONSOLE)
	printf("\nData Confirm: Handle: %d status:%d \r\n", handle, status);
    9c68:	0001      	movs	r1, r0
    9c6a:	480a      	ldr	r0, [pc, #40]	; (9c94 <dataConfcb+0x30>)
    9c6c:	4b0a      	ldr	r3, [pc, #40]	; (9c98 <dataConfcb+0x34>)
    9c6e:	4798      	blx	r3
#endif // #if defined (ENABLE_CONSOLE)
#if defined(ENABLE_SLEEP_FEATURE)
	send_data = 0;
#endif // #if defined(ENABLE_SLEEP_FEATURE)
#if defined(PROTOCOL_STAR)
    SendData = false;
    9c70:	2200      	movs	r2, #0
    9c72:	4b0a      	ldr	r3, [pc, #40]	; (9c9c <dataConfcb+0x38>)
    9c74:	701a      	strb	r2, [r3, #0]
	if(indirect_Packet)
    9c76:	4b0a      	ldr	r3, [pc, #40]	; (9ca0 <dataConfcb+0x3c>)
    9c78:	781b      	ldrb	r3, [r3, #0]
    9c7a:	2b00      	cmp	r3, #0
    9c7c:	d004      	beq.n	9c88 <dataConfcb+0x24>
		--indirect_Packet;
    9c7e:	4a08      	ldr	r2, [pc, #32]	; (9ca0 <dataConfcb+0x3c>)
    9c80:	7813      	ldrb	r3, [r2, #0]
    9c82:	3b01      	subs	r3, #1
    9c84:	b2db      	uxtb	r3, r3
    9c86:	7013      	strb	r3, [r2, #0]
#endif
	 /* Stop transmission timeout timer */
		SwTimerStop(TxTimerId);
    9c88:	4b06      	ldr	r3, [pc, #24]	; (9ca4 <dataConfcb+0x40>)
    9c8a:	7818      	ldrb	r0, [r3, #0]
    9c8c:	4b06      	ldr	r3, [pc, #24]	; (9ca8 <dataConfcb+0x44>)
    9c8e:	4798      	blx	r3
	SwTimerStart (DutyCyclingTimerId, MS_TO_US(dutyCyclingDurationMilliSec) , 0/*SW_TIMEOUT_RELATIVE*/, (void *)dutyCyclingCallback, NULL) ;
	#if defined (ENABLE_CONSOLE)
	printf("Send next data after: %ld ms\r\n", dutyCyclingDurationMilliSec) ;
	#endif
#endif // #ifdef DUTY_CYCLING
}
    9c90:	bd10      	pop	{r4, pc}
    9c92:	46c0      	nop			; (mov r8, r8)
    9c94:	0001a434 	.word	0x0001a434
    9c98:	00018915 	.word	0x00018915
    9c9c:	200007cd 	.word	0x200007cd
    9ca0:	200007d7 	.word	0x200007d7
    9ca4:	20000631 	.word	0x20000631
    9ca8:	00010cb5 	.word	0x00010cb5

00009cac <run_star_demo>:

void run_star_demo(void)
{
    9cac:	b5f0      	push	{r4, r5, r6, r7, lr}
    9cae:	46ce      	mov	lr, r9
    9cb0:	4647      	mov	r7, r8
    9cb2:	b580      	push	{r7, lr}
    9cb4:	b087      	sub	sp, #28
#if defined(PROTOCOL_STAR)
  t1.Val = MiWi_TickGet ();
    9cb6:	4ba6      	ldr	r3, [pc, #664]	; (9f50 <run_star_demo+0x2a4>)
    9cb8:	4798      	blx	r3
    9cba:	4ba6      	ldr	r3, [pc, #664]	; (9f54 <run_star_demo+0x2a8>)
    9cbc:	6018      	str	r0, [r3, #0]
  display_connections = true;
    9cbe:	2201      	movs	r2, #1
    9cc0:	4ba5      	ldr	r3, [pc, #660]	; (9f58 <run_star_demo+0x2ac>)
    9cc2:	701a      	strb	r2, [r3, #0]
								break;
							} // if(switch_val == 1)
							else if(switch_val == 2)
							{
#if defined(PROTOCOL_STAR)
								if (select_ed > end_nodes-1)  /* Reset Peer Device Info */
    9cc4:	4ea5      	ldr	r6, [pc, #660]	; (9f5c <run_star_demo+0x2b0>)
    9cc6:	4da6      	ldr	r5, [pc, #664]	; (9f60 <run_star_demo+0x2b4>)
    9cc8:	e105      	b.n	9ed6 <run_star_demo+0x22a>
			if (role == PAN_COORD)
    9cca:	4ba6      	ldr	r3, [pc, #664]	; (9f64 <run_star_demo+0x2b8>)
    9ccc:	781b      	ldrb	r3, [r3, #0]
    9cce:	2b01      	cmp	r3, #1
    9cd0:	d00b      	beq.n	9cea <run_star_demo+0x3e>
					chk_sel_status = true;
    9cd2:	2301      	movs	r3, #1
    9cd4:	4aa4      	ldr	r2, [pc, #656]	; (9f68 <run_star_demo+0x2bc>)
    9cd6:	7013      	strb	r3, [r2, #0]
					select_ed = 0;
    9cd8:	2100      	movs	r1, #0
    9cda:	4aa0      	ldr	r2, [pc, #640]	; (9f5c <run_star_demo+0x2b0>)
    9cdc:	7011      	strb	r1, [r2, #0]
					update_ed = true;
    9cde:	4aa3      	ldr	r2, [pc, #652]	; (9f6c <run_star_demo+0x2c0>)
    9ce0:	7013      	strb	r3, [r2, #0]
					while(update_ed == true)
    9ce2:	0017      	movs	r7, r2
						LCD_Erase();
    9ce4:	4ba2      	ldr	r3, [pc, #648]	; (9f70 <run_star_demo+0x2c4>)
    9ce6:	4698      	mov	r8, r3
					while(update_ed == true)
    9ce8:	e0b1      	b.n	9e4e <run_star_demo+0x1a2>
				uint16_t broadcastAddress = 0xFFFF;
    9cea:	2201      	movs	r2, #1
    9cec:	4252      	negs	r2, r2
    9cee:	3315      	adds	r3, #21
    9cf0:	446b      	add	r3, sp
    9cf2:	801a      	strh	r2, [r3, #0]
				dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(MAX_SEC_BCAST_PAYLOAD)); 
    9cf4:	20e0      	movs	r0, #224	; 0xe0
    9cf6:	4b9f      	ldr	r3, [pc, #636]	; (9f74 <run_star_demo+0x2c8>)
    9cf8:	4798      	blx	r3
    9cfa:	1e03      	subs	r3, r0, #0
				if (NULL == dataPtr)
    9cfc:	d100      	bne.n	9d00 <run_star_demo+0x54>
    9cfe:	e122      	b.n	9f46 <run_star_demo+0x29a>
				for(i = 0; i < MAX_SEC_BCAST_PAYLOAD; i++) 
    9d00:	2100      	movs	r1, #0
    9d02:	4a9d      	ldr	r2, [pc, #628]	; (9f78 <run_star_demo+0x2cc>)
    9d04:	7011      	strb	r1, [r2, #0]
    9d06:	2400      	movs	r4, #0
					dataPtr[dataLen++] = 0x42;	// 'B'
    9d08:	2042      	movs	r0, #66	; 0x42
				for(i = 0; i < MAX_SEC_BCAST_PAYLOAD; i++) 
    9d0a:	0017      	movs	r7, r2
					dataPtr[dataLen++] = 0x42;	// 'B'
    9d0c:	1c62      	adds	r2, r4, #1
    9d0e:	b2d2      	uxtb	r2, r2
    9d10:	5518      	strb	r0, [r3, r4]
				for(i = 0; i < MAX_SEC_BCAST_PAYLOAD; i++) 
    9d12:	7839      	ldrb	r1, [r7, #0]
    9d14:	3101      	adds	r1, #1
    9d16:	b2c9      	uxtb	r1, r1
    9d18:	7039      	strb	r1, [r7, #0]
					dataPtr[dataLen++] = 0x42;	// 'B'
    9d1a:	0014      	movs	r4, r2
				for(i = 0; i < MAX_SEC_BCAST_PAYLOAD; i++) 
    9d1c:	29d9      	cmp	r1, #217	; 0xd9
    9d1e:	d9f5      	bls.n	9d0c <run_star_demo+0x60>
					if(MiApp_SendData(SHORT_ADDR_LEN, (uint8_t *)&broadcastAddress, dataLen, dataPtr, ++msghandledemo, true, dataConfcb)== false)
    9d20:	4896      	ldr	r0, [pc, #600]	; (9f7c <run_star_demo+0x2d0>)
    9d22:	7801      	ldrb	r1, [r0, #0]
    9d24:	3101      	adds	r1, #1
    9d26:	b2c9      	uxtb	r1, r1
    9d28:	7001      	strb	r1, [r0, #0]
    9d2a:	4895      	ldr	r0, [pc, #596]	; (9f80 <run_star_demo+0x2d4>)
    9d2c:	9002      	str	r0, [sp, #8]
    9d2e:	2001      	movs	r0, #1
    9d30:	9001      	str	r0, [sp, #4]
    9d32:	9100      	str	r1, [sp, #0]
    9d34:	2116      	movs	r1, #22
    9d36:	4469      	add	r1, sp
    9d38:	3001      	adds	r0, #1
    9d3a:	4c92      	ldr	r4, [pc, #584]	; (9f84 <run_star_demo+0x2d8>)
    9d3c:	47a0      	blx	r4
    9d3e:	2800      	cmp	r0, #0
    9d40:	d000      	beq.n	9d44 <run_star_demo+0x98>
    9d42:	e0d3      	b.n	9eec <run_star_demo+0x240>
						DemoOutput_BroadcastFail();
    9d44:	4b90      	ldr	r3, [pc, #576]	; (9f88 <run_star_demo+0x2dc>)
    9d46:	4798      	blx	r3
    9d48:	e0d0      	b.n	9eec <run_star_demo+0x240>
							snprintf(LCDText, sizeof(LCDText), "SW0:%02d-%02x%02x%02x-me \nBUTTON1: Change node", END_DEVICES_Short_Address[select_ed].connection_slot,END_DEVICES_Short_Address[select_ed].Address[0],
    9d4a:	4890      	ldr	r0, [pc, #576]	; (9f8c <run_star_demo+0x2e0>)
    9d4c:	009a      	lsls	r2, r3, #2
    9d4e:	1881      	adds	r1, r0, r2
    9d50:	78cb      	ldrb	r3, [r1, #3]
    9d52:	788c      	ldrb	r4, [r1, #2]
    9d54:	9402      	str	r4, [sp, #8]
    9d56:	7849      	ldrb	r1, [r1, #1]
    9d58:	9101      	str	r1, [sp, #4]
    9d5a:	5c12      	ldrb	r2, [r2, r0]
    9d5c:	9200      	str	r2, [sp, #0]
    9d5e:	4a8c      	ldr	r2, [pc, #560]	; (9f90 <run_star_demo+0x2e4>)
    9d60:	2141      	movs	r1, #65	; 0x41
    9d62:	488c      	ldr	r0, [pc, #560]	; (9f94 <run_star_demo+0x2e8>)
    9d64:	4c8c      	ldr	r4, [pc, #560]	; (9f98 <run_star_demo+0x2ec>)
    9d66:	47a0      	blx	r4
							LCD_Update();
    9d68:	4b8c      	ldr	r3, [pc, #560]	; (9f9c <run_star_demo+0x2f0>)
    9d6a:	4798      	blx	r3
    9d6c:	e08b      	b.n	9e86 <run_star_demo+0x1da>
								update_ed = false;
    9d6e:	2300      	movs	r3, #0
    9d70:	4a7e      	ldr	r2, [pc, #504]	; (9f6c <run_star_demo+0x2c0>)
    9d72:	7013      	strb	r3, [r2, #0]
								chk_sel_status = false;
    9d74:	4a7c      	ldr	r2, [pc, #496]	; (9f68 <run_star_demo+0x2bc>)
    9d76:	7013      	strb	r3, [r2, #0]
								CanSendData = CanTransmitData();
    9d78:	4b89      	ldr	r3, [pc, #548]	; (9fa0 <run_star_demo+0x2f4>)
    9d7a:	4798      	blx	r3
								if(CanSendData)
    9d7c:	2800      	cmp	r0, #0
    9d7e:	d109      	bne.n	9d94 <run_star_demo+0xe8>
					                 if (myConnectionIndex_in_PanCo == select_ed)
    9d80:	4b88      	ldr	r3, [pc, #544]	; (9fa4 <run_star_demo+0x2f8>)
    9d82:	781a      	ldrb	r2, [r3, #0]
    9d84:	4b75      	ldr	r3, [pc, #468]	; (9f5c <run_star_demo+0x2b0>)
    9d86:	781b      	ldrb	r3, [r3, #0]
    9d88:	429a      	cmp	r2, r3
    9d8a:	d15d      	bne.n	9e48 <run_star_demo+0x19c>
												printf("\nPrevious Transaction is ongoing\n\r");
    9d8c:	4886      	ldr	r0, [pc, #536]	; (9fa8 <run_star_demo+0x2fc>)
    9d8e:	4b87      	ldr	r3, [pc, #540]	; (9fac <run_star_demo+0x300>)
    9d90:	4798      	blx	r3
    9d92:	e05c      	b.n	9e4e <run_star_demo+0x1a2>
								dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(MAX_SEC_UCAST_PAYLOAD));
    9d94:	20e0      	movs	r0, #224	; 0xe0
    9d96:	4b77      	ldr	r3, [pc, #476]	; (9f74 <run_star_demo+0x2c8>)
    9d98:	4798      	blx	r3
    9d9a:	1e03      	subs	r3, r0, #0
								if (NULL == dataPtr)
    9d9c:	d100      	bne.n	9da0 <run_star_demo+0xf4>
    9d9e:	e0d2      	b.n	9f46 <run_star_demo+0x29a>
								for(i = 0; i < MAX_SEC_UCAST_PAYLOAD; i++)        
    9da0:	2100      	movs	r1, #0
    9da2:	4a75      	ldr	r2, [pc, #468]	; (9f78 <run_star_demo+0x2cc>)
    9da4:	7011      	strb	r1, [r2, #0]
    9da6:	2400      	movs	r4, #0
									dataPtr[dataLen++] = 0x55;	// 'U'
    9da8:	2255      	movs	r2, #85	; 0x55
    9daa:	4694      	mov	ip, r2
								for(i = 0; i < MAX_SEC_UCAST_PAYLOAD; i++)        
    9dac:	4872      	ldr	r0, [pc, #456]	; (9f78 <run_star_demo+0x2cc>)
									dataPtr[dataLen++] = 0x55;	// 'U'
    9dae:	1c62      	adds	r2, r4, #1
    9db0:	b2d2      	uxtb	r2, r2
    9db2:	4661      	mov	r1, ip
    9db4:	5519      	strb	r1, [r3, r4]
								for(i = 0; i < MAX_SEC_UCAST_PAYLOAD; i++)        
    9db6:	7801      	ldrb	r1, [r0, #0]
    9db8:	3101      	adds	r1, #1
    9dba:	b2c9      	uxtb	r1, r1
    9dbc:	7001      	strb	r1, [r0, #0]
									dataPtr[dataLen++] = 0x55;	// 'U'
    9dbe:	0014      	movs	r4, r2
								for(i = 0; i < MAX_SEC_UCAST_PAYLOAD; i++)        
    9dc0:	29d9      	cmp	r1, #217	; 0xd9
    9dc2:	d9f4      	bls.n	9dae <run_star_demo+0x102>
					                 if (myConnectionIndex_in_PanCo == select_ed)
    9dc4:	4965      	ldr	r1, [pc, #404]	; (9f5c <run_star_demo+0x2b0>)
    9dc6:	7809      	ldrb	r1, [r1, #0]
    9dc8:	4876      	ldr	r0, [pc, #472]	; (9fa4 <run_star_demo+0x2f8>)
    9dca:	7800      	ldrb	r0, [r0, #0]
    9dcc:	4288      	cmp	r0, r1
    9dce:	d016      	beq.n	9dfe <run_star_demo+0x152>
						                       if(MiApp_SendData(3, END_DEVICES_Short_Address[select_ed].Address,dataLen, dataPtr, ++msghandledemo, true, dataConfcb)==false)
    9dd0:	4c6a      	ldr	r4, [pc, #424]	; (9f7c <run_star_demo+0x2d0>)
    9dd2:	7820      	ldrb	r0, [r4, #0]
    9dd4:	3001      	adds	r0, #1
    9dd6:	b2c0      	uxtb	r0, r0
    9dd8:	7020      	strb	r0, [r4, #0]
    9dda:	0089      	lsls	r1, r1, #2
    9ddc:	4c6b      	ldr	r4, [pc, #428]	; (9f8c <run_star_demo+0x2e0>)
    9dde:	1909      	adds	r1, r1, r4
    9de0:	4c67      	ldr	r4, [pc, #412]	; (9f80 <run_star_demo+0x2d4>)
    9de2:	9402      	str	r4, [sp, #8]
    9de4:	2401      	movs	r4, #1
    9de6:	9401      	str	r4, [sp, #4]
    9de8:	9000      	str	r0, [sp, #0]
    9dea:	2003      	movs	r0, #3
    9dec:	4c65      	ldr	r4, [pc, #404]	; (9f84 <run_star_demo+0x2d8>)
    9dee:	47a0      	blx	r4
    9df0:	2800      	cmp	r0, #0
    9df2:	d021      	beq.n	9e38 <run_star_demo+0x18c>
							                       TxNum++;
    9df4:	4a6e      	ldr	r2, [pc, #440]	; (9fb0 <run_star_demo+0x304>)
    9df6:	7813      	ldrb	r3, [r2, #0]
    9df8:	3301      	adds	r3, #1
    9dfa:	7013      	strb	r3, [r2, #0]
    9dfc:	e027      	b.n	9e4e <run_star_demo+0x1a2>
					                                  if (MiApp_SendData(LONG_ADDR_LEN, ConnectionTable[0].Address, dataLen, dataPtr, ++msghandledemo, true, dataConfcb)== false)
    9dfe:	485f      	ldr	r0, [pc, #380]	; (9f7c <run_star_demo+0x2d0>)
    9e00:	7801      	ldrb	r1, [r0, #0]
    9e02:	3101      	adds	r1, #1
    9e04:	b2c9      	uxtb	r1, r1
    9e06:	7001      	strb	r1, [r0, #0]
    9e08:	485d      	ldr	r0, [pc, #372]	; (9f80 <run_star_demo+0x2d4>)
    9e0a:	9002      	str	r0, [sp, #8]
    9e0c:	2001      	movs	r0, #1
    9e0e:	9001      	str	r0, [sp, #4]
    9e10:	9100      	str	r1, [sp, #0]
    9e12:	4968      	ldr	r1, [pc, #416]	; (9fb4 <run_star_demo+0x308>)
    9e14:	3007      	adds	r0, #7
    9e16:	4c5b      	ldr	r4, [pc, #364]	; (9f84 <run_star_demo+0x2d8>)
    9e18:	47a0      	blx	r4
    9e1a:	2800      	cmp	r0, #0
    9e1c:	d004      	beq.n	9e28 <run_star_demo+0x17c>
											         	TxNum++;
    9e1e:	4a64      	ldr	r2, [pc, #400]	; (9fb0 <run_star_demo+0x304>)
    9e20:	7813      	ldrb	r3, [r2, #0]
    9e22:	3301      	adds	r3, #1
    9e24:	7013      	strb	r3, [r2, #0]
    9e26:	e012      	b.n	9e4e <run_star_demo+0x1a2>
						         						 --msghandledemo;
    9e28:	4a54      	ldr	r2, [pc, #336]	; (9f7c <run_star_demo+0x2d0>)
    9e2a:	7813      	ldrb	r3, [r2, #0]
    9e2c:	3b01      	subs	r3, #1
    9e2e:	7013      	strb	r3, [r2, #0]
						         	                     printf("\nPrevious Transaction is ongoing\n\r");
    9e30:	485d      	ldr	r0, [pc, #372]	; (9fa8 <run_star_demo+0x2fc>)
    9e32:	4b5e      	ldr	r3, [pc, #376]	; (9fac <run_star_demo+0x300>)
    9e34:	4798      	blx	r3
    9e36:	e00a      	b.n	9e4e <run_star_demo+0x1a2>
							                       --msghandledemo;
    9e38:	4a50      	ldr	r2, [pc, #320]	; (9f7c <run_star_demo+0x2d0>)
    9e3a:	7813      	ldrb	r3, [r2, #0]
    9e3c:	3b01      	subs	r3, #1
    9e3e:	7013      	strb	r3, [r2, #0]
							                       printf("\nPrevious Transaction is ongoing\n\r");
    9e40:	4859      	ldr	r0, [pc, #356]	; (9fa8 <run_star_demo+0x2fc>)
    9e42:	4b5a      	ldr	r3, [pc, #360]	; (9fac <run_star_demo+0x300>)
    9e44:	4798      	blx	r3
    9e46:	e002      	b.n	9e4e <run_star_demo+0x1a2>
											 printf("\nPrevious Transaction is ongoing\n\r");
    9e48:	4857      	ldr	r0, [pc, #348]	; (9fa8 <run_star_demo+0x2fc>)
    9e4a:	4b58      	ldr	r3, [pc, #352]	; (9fac <run_star_demo+0x300>)
    9e4c:	4798      	blx	r3
					while(update_ed == true)
    9e4e:	783b      	ldrb	r3, [r7, #0]
    9e50:	2b00      	cmp	r3, #0
    9e52:	d04b      	beq.n	9eec <run_star_demo+0x240>
						LCD_Erase();
    9e54:	47c0      	blx	r8
						if (myConnectionIndex_in_PanCo  == select_ed)
    9e56:	4b41      	ldr	r3, [pc, #260]	; (9f5c <run_star_demo+0x2b0>)
    9e58:	781b      	ldrb	r3, [r3, #0]
    9e5a:	4a52      	ldr	r2, [pc, #328]	; (9fa4 <run_star_demo+0x2f8>)
    9e5c:	7812      	ldrb	r2, [r2, #0]
    9e5e:	429a      	cmp	r2, r3
    9e60:	d100      	bne.n	9e64 <run_star_demo+0x1b8>
    9e62:	e772      	b.n	9d4a <run_star_demo+0x9e>
							snprintf(LCDText, sizeof(LCDText), "SW0:%02d-%02x%02x%02x \nBUTTON1: Change node", END_DEVICES_Short_Address[select_ed].connection_slot,END_DEVICES_Short_Address[select_ed].Address[0],
    9e64:	4849      	ldr	r0, [pc, #292]	; (9f8c <run_star_demo+0x2e0>)
    9e66:	009a      	lsls	r2, r3, #2
    9e68:	1881      	adds	r1, r0, r2
    9e6a:	78cb      	ldrb	r3, [r1, #3]
    9e6c:	788c      	ldrb	r4, [r1, #2]
    9e6e:	9402      	str	r4, [sp, #8]
    9e70:	7849      	ldrb	r1, [r1, #1]
    9e72:	9101      	str	r1, [sp, #4]
    9e74:	5c12      	ldrb	r2, [r2, r0]
    9e76:	9200      	str	r2, [sp, #0]
    9e78:	4a4f      	ldr	r2, [pc, #316]	; (9fb8 <run_star_demo+0x30c>)
    9e7a:	2141      	movs	r1, #65	; 0x41
    9e7c:	4845      	ldr	r0, [pc, #276]	; (9f94 <run_star_demo+0x2e8>)
    9e7e:	4c46      	ldr	r4, [pc, #280]	; (9f98 <run_star_demo+0x2ec>)
    9e80:	47a0      	blx	r4
							LCD_Update();
    9e82:	4b46      	ldr	r3, [pc, #280]	; (9f9c <run_star_demo+0x2f0>)
    9e84:	4798      	blx	r3
						LCD_Update();
    9e86:	4b45      	ldr	r3, [pc, #276]	; (9f9c <run_star_demo+0x2f0>)
    9e88:	4798      	blx	r3
						chk_sel_status = true;
    9e8a:	2201      	movs	r2, #1
    9e8c:	4b36      	ldr	r3, [pc, #216]	; (9f68 <run_star_demo+0x2bc>)
    9e8e:	701a      	strb	r2, [r3, #0]
							uint8_t switch_val = ButtonPressed();
    9e90:	4c4a      	ldr	r4, [pc, #296]	; (9fbc <run_star_demo+0x310>)
    9e92:	e00d      	b.n	9eb0 <run_star_demo+0x204>
								}
#endif
								else
								{
									// Update the Display
									select_ed = select_ed+1;
    9e94:	3201      	adds	r2, #1
    9e96:	4b31      	ldr	r3, [pc, #196]	; (9f5c <run_star_demo+0x2b0>)
    9e98:	701a      	strb	r2, [r3, #0]
								}
								chk_sel_status = false;
    9e9a:	2200      	movs	r2, #0
    9e9c:	4b32      	ldr	r3, [pc, #200]	; (9f68 <run_star_demo+0x2bc>)
    9e9e:	701a      	strb	r2, [r3, #0]
							} // else if(switch_val == 2)
							/* While waiting in TX , RX will process if any message was available */
							P2PTasks ();
    9ea0:	4b47      	ldr	r3, [pc, #284]	; (9fc0 <run_star_demo+0x314>)
    9ea2:	4798      	blx	r3
							SYSTEM_RunTasks();
    9ea4:	4b47      	ldr	r3, [pc, #284]	; (9fc4 <run_star_demo+0x318>)
    9ea6:	4798      	blx	r3
						while(chk_sel_status)
    9ea8:	4b2f      	ldr	r3, [pc, #188]	; (9f68 <run_star_demo+0x2bc>)
    9eaa:	781b      	ldrb	r3, [r3, #0]
    9eac:	2b00      	cmp	r3, #0
    9eae:	d0ce      	beq.n	9e4e <run_star_demo+0x1a2>
							uint8_t switch_val = ButtonPressed();
    9eb0:	47a0      	blx	r4
							if(switch_val == 1)
    9eb2:	2801      	cmp	r0, #1
    9eb4:	d100      	bne.n	9eb8 <run_star_demo+0x20c>
    9eb6:	e75a      	b.n	9d6e <run_star_demo+0xc2>
							else if(switch_val == 2)
    9eb8:	2802      	cmp	r0, #2
    9eba:	d1f1      	bne.n	9ea0 <run_star_demo+0x1f4>
								if (select_ed > end_nodes-1)  /* Reset Peer Device Info */
    9ebc:	7832      	ldrb	r2, [r6, #0]
    9ebe:	782b      	ldrb	r3, [r5, #0]
    9ec0:	3b01      	subs	r3, #1
    9ec2:	429a      	cmp	r2, r3
    9ec4:	dde6      	ble.n	9e94 <run_star_demo+0x1e8>
								 select_ed = 0;
    9ec6:	2200      	movs	r2, #0
    9ec8:	4b24      	ldr	r3, [pc, #144]	; (9f5c <run_star_demo+0x2b0>)
    9eca:	701a      	strb	r2, [r3, #0]
    9ecc:	e7e5      	b.n	9e9a <run_star_demo+0x1ee>
  while(display_connections)
    9ece:	4b22      	ldr	r3, [pc, #136]	; (9f58 <run_star_demo+0x2ac>)
    9ed0:	781b      	ldrb	r3, [r3, #0]
    9ed2:	2b00      	cmp	r3, #0
    9ed4:	d037      	beq.n	9f46 <run_star_demo+0x29a>
	  P2PTasks();
    9ed6:	4b3a      	ldr	r3, [pc, #232]	; (9fc0 <run_star_demo+0x314>)
    9ed8:	4798      	blx	r3
	  SYSTEM_RunTasks();
    9eda:	4b3a      	ldr	r3, [pc, #232]	; (9fc4 <run_star_demo+0x318>)
    9edc:	4798      	blx	r3
		uint8_t PressedButton = ButtonPressed();
    9ede:	4b37      	ldr	r3, [pc, #220]	; (9fbc <run_star_demo+0x310>)
    9ee0:	4798      	blx	r3
		if ( PressedButton == 1 || PressedButton == 2)
    9ee2:	3801      	subs	r0, #1
    9ee4:	b2c0      	uxtb	r0, r0
    9ee6:	2801      	cmp	r0, #1
    9ee8:	d800      	bhi.n	9eec <run_star_demo+0x240>
    9eea:	e6ee      	b.n	9cca <run_star_demo+0x1e>
				default:
				break;
#endif
			}
#if defined(PROTOCOL_STAR)
        t2.Val = MiWi_TickGet ();
    9eec:	4b18      	ldr	r3, [pc, #96]	; (9f50 <run_star_demo+0x2a4>)
    9eee:	4798      	blx	r3
    9ef0:	4b35      	ldr	r3, [pc, #212]	; (9fc8 <run_star_demo+0x31c>)
    9ef2:	6018      	str	r0, [r3, #0]
        /* Display the no of End devices in Network */
        if( MiWi_TickGetDiff(t2, t1) > (60 * ONE_SECOND))
    9ef4:	4b17      	ldr	r3, [pc, #92]	; (9f54 <run_star_demo+0x2a8>)
    9ef6:	6819      	ldr	r1, [r3, #0]
    9ef8:	4b34      	ldr	r3, [pc, #208]	; (9fcc <run_star_demo+0x320>)
    9efa:	4798      	blx	r3
    9efc:	4b34      	ldr	r3, [pc, #208]	; (9fd0 <run_star_demo+0x324>)
    9efe:	4298      	cmp	r0, r3
    9f00:	d9e5      	bls.n	9ece <run_star_demo+0x222>
        {
			if((role == PAN_COORD))
    9f02:	4b18      	ldr	r3, [pc, #96]	; (9f64 <run_star_demo+0x2b8>)
    9f04:	781b      	ldrb	r3, [r3, #0]
    9f06:	2b01      	cmp	r3, #1
    9f08:	d1e1      	bne.n	9ece <run_star_demo+0x222>
			{
	        #if defined (ENABLE_LCD)
	        LCD_Erase();
    9f0a:	4b19      	ldr	r3, [pc, #100]	; (9f70 <run_star_demo+0x2c4>)
    9f0c:	4798      	blx	r3
			snprintf(LCDText,sizeof(LCDText), "Role:%02d",role);
    9f0e:	4c15      	ldr	r4, [pc, #84]	; (9f64 <run_star_demo+0x2b8>)
    9f10:	7823      	ldrb	r3, [r4, #0]
    9f12:	4a30      	ldr	r2, [pc, #192]	; (9fd4 <run_star_demo+0x328>)
    9f14:	2141      	movs	r1, #65	; 0x41
    9f16:	481f      	ldr	r0, [pc, #124]	; (9f94 <run_star_demo+0x2e8>)
    9f18:	4f1f      	ldr	r7, [pc, #124]	; (9f98 <run_star_demo+0x2ec>)
    9f1a:	46b9      	mov	r9, r7
    9f1c:	47b8      	blx	r7
			LCD_Update();
    9f1e:	4f1f      	ldr	r7, [pc, #124]	; (9f9c <run_star_demo+0x2f0>)
    9f20:	47b8      	blx	r7
	        snprintf(LCDText, sizeof(LCDText), "\nEND_DEVICES :%02d",conn_size);
    9f22:	4b2d      	ldr	r3, [pc, #180]	; (9fd8 <run_star_demo+0x32c>)
    9f24:	781b      	ldrb	r3, [r3, #0]
    9f26:	4a2d      	ldr	r2, [pc, #180]	; (9fdc <run_star_demo+0x330>)
    9f28:	2141      	movs	r1, #65	; 0x41
    9f2a:	481a      	ldr	r0, [pc, #104]	; (9f94 <run_star_demo+0x2e8>)
    9f2c:	47c8      	blx	r9
	        LCD_Update();
    9f2e:	47b8      	blx	r7
	        #endif
	        delay_ms(500);
    9f30:	20fa      	movs	r0, #250	; 0xfa
    9f32:	0040      	lsls	r0, r0, #1
    9f34:	4b2a      	ldr	r3, [pc, #168]	; (9fe0 <run_star_demo+0x334>)
    9f36:	4798      	blx	r3
	        display_connections = false;
    9f38:	2200      	movs	r2, #0
    9f3a:	4b07      	ldr	r3, [pc, #28]	; (9f58 <run_star_demo+0x2ac>)
    9f3c:	701a      	strb	r2, [r3, #0]
	        STAR_DEMO_OPTIONS_MESSAGE (role);
    9f3e:	7820      	ldrb	r0, [r4, #0]
    9f40:	4b28      	ldr	r3, [pc, #160]	; (9fe4 <run_star_demo+0x338>)
    9f42:	4798      	blx	r3
    9f44:	e7c3      	b.n	9ece <run_star_demo+0x222>
  }
 #if defined(PROTOCOL_STAR)
	//P2PTasks ();
	//SYSTEM_RunTasks();
 #endif
}
    9f46:	b007      	add	sp, #28
    9f48:	bc0c      	pop	{r2, r3}
    9f4a:	4690      	mov	r8, r2
    9f4c:	4699      	mov	r9, r3
    9f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9f50:	0000f6f1 	.word	0x0000f6f1
    9f54:	200025c0 	.word	0x200025c0
    9f58:	200025c4 	.word	0x200025c4
    9f5c:	200025bc 	.word	0x200025bc
    9f60:	200007d5 	.word	0x200007d5
    9f64:	2000376c 	.word	0x2000376c
    9f68:	20000015 	.word	0x20000015
    9f6c:	200025b4 	.word	0x200025b4
    9f70:	0000a8ad 	.word	0x0000a8ad
    9f74:	0000f4b1 	.word	0x0000f4b1
    9f78:	200025bd 	.word	0x200025bd
    9f7c:	2000062f 	.word	0x2000062f
    9f80:	00009c65 	.word	0x00009c65
    9f84:	0000da91 	.word	0x0000da91
    9f88:	00009a4d 	.word	0x00009a4d
    9f8c:	2000371c 	.word	0x2000371c
    9f90:	0001a5ac 	.word	0x0001a5ac
    9f94:	200025c8 	.word	0x200025c8
    9f98:	00018c85 	.word	0x00018c85
    9f9c:	0000a8c9 	.word	0x0000a8c9
    9fa0:	0000f449 	.word	0x0000f449
    9fa4:	20003470 	.word	0x20003470
    9fa8:	0001a608 	.word	0x0001a608
    9fac:	00018915 	.word	0x00018915
    9fb0:	20000418 	.word	0x20000418
    9fb4:	2000331c 	.word	0x2000331c
    9fb8:	0001a5dc 	.word	0x0001a5dc
    9fbc:	00009ae5 	.word	0x00009ae5
    9fc0:	0000e485 	.word	0x0000e485
    9fc4:	00010f49 	.word	0x00010f49
    9fc8:	200025b8 	.word	0x200025b8
    9fcc:	0000f751 	.word	0x0000f751
    9fd0:	03938700 	.word	0x03938700
    9fd4:	0001a62c 	.word	0x0001a62c
    9fd8:	20003481 	.word	0x20003481
    9fdc:	0001a638 	.word	0x0001a638
    9fe0:	00004719 	.word	0x00004719
    9fe4:	00009ab9 	.word	0x00009ab9

00009fe8 <ReceivedDataIndication>:

void ReceivedDataIndication (RECEIVED_MESSAGE *ind)
{
    9fe8:	b510      	push	{r4, lr}
    /*******************************************************************/
    // If a packet has been received, handle the information available
    // in rxMessage.
    /*******************************************************************/
	if ((myPANID.v[1] == ind->SourcePANID.v[1]) && (myPANID.v[0] == ind->SourcePANID.v[0]))
    9fea:	4b18      	ldr	r3, [pc, #96]	; (a04c <ReceivedDataIndication+0x64>)
    9fec:	881a      	ldrh	r2, [r3, #0]
    9fee:	8843      	ldrh	r3, [r0, #2]
    9ff0:	429a      	cmp	r2, r3
    9ff2:	d00d      	beq.n	a010 <ReceivedDataIndication+0x28>
		DemoOutput_Instruction();
#endif
	}
	else
	{
		printf("Packet received from other Source PAN ID : 0x%x%x\r\n",ind->SourcePANID.v[1],ind->SourcePANID.v[0]);
    9ff4:	7882      	ldrb	r2, [r0, #2]
    9ff6:	78c1      	ldrb	r1, [r0, #3]
    9ff8:	4815      	ldr	r0, [pc, #84]	; (a050 <ReceivedDataIndication+0x68>)
    9ffa:	4b16      	ldr	r3, [pc, #88]	; (a054 <ReceivedDataIndication+0x6c>)
    9ffc:	4798      	blx	r3
#if defined(PROTOCOL_STAR)
		

	    /* Display the Source End Device Info on reception msg, Do not display if it is
       a PAN CO or if the message received was a broadcast packet */
    if ((role == END_DEVICE) && !rxMessage.flags.bits.broadcast)
    9ffe:	4b16      	ldr	r3, [pc, #88]	; (a058 <ReceivedDataIndication+0x70>)
    a000:	781b      	ldrb	r3, [r3, #0]
    a002:	2b02      	cmp	r3, #2
    a004:	d018      	beq.n	a038 <ReceivedDataIndication+0x50>
    {
        Source_END_DEVICE_INFO(rxMessage.Payload);
    }
    /* Display the Instructions message */
    STAR_DEMO_OPTIONS_MESSAGE (role);
    a006:	4b14      	ldr	r3, [pc, #80]	; (a058 <ReceivedDataIndication+0x70>)
    a008:	7818      	ldrb	r0, [r3, #0]
    a00a:	4b14      	ldr	r3, [pc, #80]	; (a05c <ReceivedDataIndication+0x74>)
    a00c:	4798      	blx	r3
#endif
/*****************************************************************************************/
}
    a00e:	bd10      	pop	{r4, pc}
		DemoOutput_HandleMessage();
    a010:	4b13      	ldr	r3, [pc, #76]	; (a060 <ReceivedDataIndication+0x78>)
    a012:	4798      	blx	r3
		delay_ms(500);
    a014:	20fa      	movs	r0, #250	; 0xfa
    a016:	0040      	lsls	r0, r0, #1
    a018:	4b12      	ldr	r3, [pc, #72]	; (a064 <ReceivedDataIndication+0x7c>)
    a01a:	4798      	blx	r3
		DemoOutput_UpdateTxRx(TxNum, ++RxNum);
    a01c:	4b12      	ldr	r3, [pc, #72]	; (a068 <ReceivedDataIndication+0x80>)
    a01e:	7818      	ldrb	r0, [r3, #0]
    a020:	4b12      	ldr	r3, [pc, #72]	; (a06c <ReceivedDataIndication+0x84>)
    a022:	7819      	ldrb	r1, [r3, #0]
    a024:	3101      	adds	r1, #1
    a026:	b2c9      	uxtb	r1, r1
    a028:	7019      	strb	r1, [r3, #0]
    a02a:	4b11      	ldr	r3, [pc, #68]	; (a070 <ReceivedDataIndication+0x88>)
    a02c:	4798      	blx	r3
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    a02e:	2280      	movs	r2, #128	; 0x80
    a030:	0312      	lsls	r2, r2, #12
    a032:	4b10      	ldr	r3, [pc, #64]	; (a074 <ReceivedDataIndication+0x8c>)
    a034:	61da      	str	r2, [r3, #28]
    a036:	e7e2      	b.n	9ffe <ReceivedDataIndication+0x16>
    if ((role == END_DEVICE) && !rxMessage.flags.bits.broadcast)
    a038:	4b0f      	ldr	r3, [pc, #60]	; (a078 <ReceivedDataIndication+0x90>)
    a03a:	781b      	ldrb	r3, [r3, #0]
    a03c:	079b      	lsls	r3, r3, #30
    a03e:	d1e2      	bne.n	a006 <ReceivedDataIndication+0x1e>
        Source_END_DEVICE_INFO(rxMessage.Payload);
    a040:	4b0d      	ldr	r3, [pc, #52]	; (a078 <ReceivedDataIndication+0x90>)
    a042:	6898      	ldr	r0, [r3, #8]
    a044:	4b0d      	ldr	r3, [pc, #52]	; (a07c <ReceivedDataIndication+0x94>)
    a046:	4798      	blx	r3
    a048:	e7dd      	b.n	a006 <ReceivedDataIndication+0x1e>
    a04a:	46c0      	nop			; (mov r8, r8)
    a04c:	20003478 	.word	0x20003478
    a050:	0001a400 	.word	0x0001a400
    a054:	00018915 	.word	0x00018915
    a058:	2000376c 	.word	0x2000376c
    a05c:	00009ab9 	.word	0x00009ab9
    a060:	000098f9 	.word	0x000098f9
    a064:	00004719 	.word	0x00004719
    a068:	20000418 	.word	0x20000418
    a06c:	20000417 	.word	0x20000417
    a070:	000099f1 	.word	0x000099f1
    a074:	40002800 	.word	0x40002800
    a078:	2000377c 	.word	0x2000377c
    a07c:	00009a71 	.word	0x00009a71

0000a080 <p2p_demo_send_data>:
// uint8_t msgType - BROADCAST or UNICAST
// uint8_t targetAddr - target address for unicast message
// uint8_t* data - data buffer
// uint8_t len - data length
void p2p_demo_send_data(uint8_t msgType, uint8_t targetAddr, uint8_t *data, uint8_t len)
{
    a080:	b5f0      	push	{r4, r5, r6, r7, lr}
    a082:	46c6      	mov	lr, r8
    a084:	b500      	push	{lr}
    a086:	b088      	sub	sp, #32
    a088:	4680      	mov	r8, r0
    a08a:	9105      	str	r1, [sp, #20]
    a08c:	0015      	movs	r5, r2
    a08e:	001e      	movs	r6, r3
	}
#endif // #ifdef DUTY_CYCLING
	
	uint8_t* dataPtr = NULL ;
	uint8_t dataLen = 0 ;
	uint16_t broadcastAddress = 0xFFFF ;
    a090:	2201      	movs	r2, #1
    a092:	4252      	negs	r2, r2
    a094:	2316      	movs	r3, #22
    a096:	a902      	add	r1, sp, #8
    a098:	468c      	mov	ip, r1
    a09a:	4463      	add	r3, ip
    a09c:	801a      	strh	r2, [r3, #0]
	bool sendData_status ;	
	dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(len)) ;
    a09e:	2010      	movs	r0, #16
    a0a0:	2e0f      	cmp	r6, #15
    a0a2:	d905      	bls.n	a0b0 <p2p_demo_send_data+0x30>
    a0a4:	0733      	lsls	r3, r6, #28
    a0a6:	d049      	beq.n	a13c <p2p_demo_send_data+0xbc>
    a0a8:	0930      	lsrs	r0, r6, #4
    a0aa:	3001      	adds	r0, #1
    a0ac:	0100      	lsls	r0, r0, #4
    a0ae:	b2c0      	uxtb	r0, r0
    a0b0:	4b3e      	ldr	r3, [pc, #248]	; (a1ac <p2p_demo_send_data+0x12c>)
    a0b2:	4798      	blx	r3
    a0b4:	1e07      	subs	r7, r0, #0
	   if (NULL == dataPtr)
    a0b6:	d03d      	beq.n	a134 <p2p_demo_send_data+0xb4>
	   	return ;
	   
	   for (i = 0; i < len; i++)
    a0b8:	2200      	movs	r2, #0
    a0ba:	4b3d      	ldr	r3, [pc, #244]	; (a1b0 <p2p_demo_send_data+0x130>)
    a0bc:	701a      	strb	r2, [r3, #0]
    a0be:	2e00      	cmp	r6, #0
    a0c0:	d040      	beq.n	a144 <p2p_demo_send_data+0xc4>
    a0c2:	2300      	movs	r3, #0
    a0c4:	493a      	ldr	r1, [pc, #232]	; (a1b0 <p2p_demo_send_data+0x130>)
	   {
	   	 dataPtr[dataLen++] = data[i] ;
    a0c6:	1c54      	adds	r4, r2, #1
    a0c8:	b2e4      	uxtb	r4, r4
    a0ca:	5ceb      	ldrb	r3, [r5, r3]
    a0cc:	54bb      	strb	r3, [r7, r2]
	   for (i = 0; i < len; i++)
    a0ce:	780b      	ldrb	r3, [r1, #0]
    a0d0:	3301      	adds	r3, #1
    a0d2:	b2db      	uxtb	r3, r3
    a0d4:	700b      	strb	r3, [r1, #0]
	   	 dataPtr[dataLen++] = data[i] ;
    a0d6:	0022      	movs	r2, r4
	   for (i = 0; i < len; i++)
    a0d8:	429e      	cmp	r6, r3
    a0da:	d8f4      	bhi.n	a0c6 <p2p_demo_send_data+0x46>
	// to not enter to the sleep loop until data has been sent
	send_data = 1;
#endif // #if defined(ENABLE_SLEEP_FEATURE)

#if defined (ENABLE_CONSOLE)
	if (msgType == UNICAST)
    a0dc:	4643      	mov	r3, r8
    a0de:	2b01      	cmp	r3, #1
    a0e0:	d032      	beq.n	a148 <p2p_demo_send_data+0xc8>
		     printf("\r\nSending unicast message to %02d-%02x%02x%02x\r\n", targetAddr,ConnectionTable[targetAddr].Address[0], ConnectionTable[targetAddr].Address[1], ConnectionTable[targetAddr].Address[2]) ;	
		#endif
	}
	else
	{
		printf("\r\nSending broadcast message\r\n") ;
    a0e2:	4834      	ldr	r0, [pc, #208]	; (a1b4 <p2p_demo_send_data+0x134>)
    a0e4:	4b34      	ldr	r3, [pc, #208]	; (a1b8 <p2p_demo_send_data+0x138>)
    a0e6:	4798      	blx	r3
		sendData_status = MiApp_SendData(LONG_ADDR_LEN, ConnectionTable[targetAddr].Address, dataLen, dataPtr, ++msghandledemo, 1, dataConfcb) ;
	}
	else
	{
		// broadcast message
		sendData_status = MiApp_SendData(SHORT_ADDR_LEN, (uint8_t *)&broadcastAddress, dataLen, dataPtr, ++msghandledemo, true, dataConfcb) ;
    a0e8:	4a34      	ldr	r2, [pc, #208]	; (a1bc <p2p_demo_send_data+0x13c>)
    a0ea:	7813      	ldrb	r3, [r2, #0]
    a0ec:	3301      	adds	r3, #1
    a0ee:	b2db      	uxtb	r3, r3
    a0f0:	7013      	strb	r3, [r2, #0]
    a0f2:	4a33      	ldr	r2, [pc, #204]	; (a1c0 <p2p_demo_send_data+0x140>)
    a0f4:	9202      	str	r2, [sp, #8]
    a0f6:	2201      	movs	r2, #1
    a0f8:	9201      	str	r2, [sp, #4]
    a0fa:	9300      	str	r3, [sp, #0]
    a0fc:	003b      	movs	r3, r7
    a0fe:	0022      	movs	r2, r4
    a100:	2116      	movs	r1, #22
    a102:	a802      	add	r0, sp, #8
    a104:	4684      	mov	ip, r0
    a106:	4461      	add	r1, ip
    a108:	2002      	movs	r0, #2
    a10a:	4c2e      	ldr	r4, [pc, #184]	; (a1c4 <p2p_demo_send_data+0x144>)
    a10c:	47a0      	blx	r4
    a10e:	0004      	movs	r4, r0
	}
	#if defined(PROTOCOL_STAR)
	MiMem_Free(dataPtr);
    a110:	0038      	movs	r0, r7
    a112:	4b2d      	ldr	r3, [pc, #180]	; (a1c8 <p2p_demo_send_data+0x148>)
    a114:	4798      	blx	r3
    #endif
	if (sendData_status == false)
    a116:	2c00      	cmp	r4, #0
    a118:	d139      	bne.n	a18e <p2p_demo_send_data+0x10e>
		PHY_DataConf(FAILURE);
#endif // #if defined(ENABLE_SLEEP_FEATURE)
		if (msgType == UNICAST)
			DemoOutput_UnicastFail();
		else
			DemoOutput_BroadcastFail() ;
    a11a:	4b2c      	ldr	r3, [pc, #176]	; (a1cc <p2p_demo_send_data+0x14c>)
    a11c:	4798      	blx	r3
		// Successful Transmission
		TxNum++ ;
		SwTimerStart (TxTimerId, MS_TO_US(10000), 0/*SW_TIMEOUT_RELATIVE*/, (void *)TxToutCallback, NULL) ;
	}
	// Update the LCD
	DemoOutput_UpdateTxRx(TxNum, RxNum);
    a11e:	4d2c      	ldr	r5, [pc, #176]	; (a1d0 <p2p_demo_send_data+0x150>)
    a120:	7829      	ldrb	r1, [r5, #0]
    a122:	4c2c      	ldr	r4, [pc, #176]	; (a1d4 <p2p_demo_send_data+0x154>)
    a124:	7820      	ldrb	r0, [r4, #0]
    a126:	4b2c      	ldr	r3, [pc, #176]	; (a1d8 <p2p_demo_send_data+0x158>)
    a128:	4798      	blx	r3
#if !defined(PROTOCOL_STAR)
	DemoOutput_Instruction();
#endif
	printf("Tx Messages: %d - Rx Messages: %d\r\n", TxNum, RxNum) ;	
    a12a:	782a      	ldrb	r2, [r5, #0]
    a12c:	7821      	ldrb	r1, [r4, #0]
    a12e:	482b      	ldr	r0, [pc, #172]	; (a1dc <p2p_demo_send_data+0x15c>)
    a130:	4b2b      	ldr	r3, [pc, #172]	; (a1e0 <p2p_demo_send_data+0x160>)
    a132:	4798      	blx	r3
}
    a134:	b008      	add	sp, #32
    a136:	bc04      	pop	{r2}
    a138:	4690      	mov	r8, r2
    a13a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(len)) ;
    a13c:	230f      	movs	r3, #15
    a13e:	0030      	movs	r0, r6
    a140:	4398      	bics	r0, r3
    a142:	e7b5      	b.n	a0b0 <p2p_demo_send_data+0x30>
	uint8_t dataLen = 0 ;
    a144:	0034      	movs	r4, r6
    a146:	e7c9      	b.n	a0dc <p2p_demo_send_data+0x5c>
		      printf("\r\nSending unicast message to PAN-%02x%02x%02x\r\n", ConnectionTable[0].Address[2], ConnectionTable[0].Address[1], ConnectionTable[0].Address[0]) ;	
    a148:	4e26      	ldr	r6, [pc, #152]	; (a1e4 <p2p_demo_send_data+0x164>)
    a14a:	7933      	ldrb	r3, [r6, #4]
    a14c:	7972      	ldrb	r2, [r6, #5]
    a14e:	79b1      	ldrb	r1, [r6, #6]
    a150:	4825      	ldr	r0, [pc, #148]	; (a1e8 <p2p_demo_send_data+0x168>)
    a152:	4d23      	ldr	r5, [pc, #140]	; (a1e0 <p2p_demo_send_data+0x160>)
    a154:	47a8      	blx	r5
		sendData_status = MiApp_SendData(LONG_ADDR_LEN, ConnectionTable[targetAddr].Address, dataLen, dataPtr, ++msghandledemo, 1, dataConfcb) ;
    a156:	4a19      	ldr	r2, [pc, #100]	; (a1bc <p2p_demo_send_data+0x13c>)
    a158:	7813      	ldrb	r3, [r2, #0]
    a15a:	3301      	adds	r3, #1
    a15c:	b2db      	uxtb	r3, r3
    a15e:	7013      	strb	r3, [r2, #0]
    a160:	9a05      	ldr	r2, [sp, #20]
    a162:	0115      	lsls	r5, r2, #4
    a164:	1d29      	adds	r1, r5, #4
    a166:	1989      	adds	r1, r1, r6
    a168:	4a15      	ldr	r2, [pc, #84]	; (a1c0 <p2p_demo_send_data+0x140>)
    a16a:	9202      	str	r2, [sp, #8]
    a16c:	2201      	movs	r2, #1
    a16e:	9201      	str	r2, [sp, #4]
    a170:	9300      	str	r3, [sp, #0]
    a172:	003b      	movs	r3, r7
    a174:	0022      	movs	r2, r4
    a176:	2008      	movs	r0, #8
    a178:	4c12      	ldr	r4, [pc, #72]	; (a1c4 <p2p_demo_send_data+0x144>)
    a17a:	47a0      	blx	r4
    a17c:	0004      	movs	r4, r0
	MiMem_Free(dataPtr);
    a17e:	0038      	movs	r0, r7
    a180:	4b11      	ldr	r3, [pc, #68]	; (a1c8 <p2p_demo_send_data+0x148>)
    a182:	4798      	blx	r3
	if (sendData_status == false)
    a184:	2c00      	cmp	r4, #0
    a186:	d102      	bne.n	a18e <p2p_demo_send_data+0x10e>
			DemoOutput_UnicastFail();
    a188:	4b18      	ldr	r3, [pc, #96]	; (a1ec <p2p_demo_send_data+0x16c>)
    a18a:	4798      	blx	r3
    a18c:	e7c7      	b.n	a11e <p2p_demo_send_data+0x9e>
		TxNum++ ;
    a18e:	4a11      	ldr	r2, [pc, #68]	; (a1d4 <p2p_demo_send_data+0x154>)
    a190:	7813      	ldrb	r3, [r2, #0]
    a192:	3301      	adds	r3, #1
    a194:	7013      	strb	r3, [r2, #0]
		SwTimerStart (TxTimerId, MS_TO_US(10000), 0/*SW_TIMEOUT_RELATIVE*/, (void *)TxToutCallback, NULL) ;
    a196:	4b16      	ldr	r3, [pc, #88]	; (a1f0 <p2p_demo_send_data+0x170>)
    a198:	7818      	ldrb	r0, [r3, #0]
    a19a:	2300      	movs	r3, #0
    a19c:	9300      	str	r3, [sp, #0]
    a19e:	4b15      	ldr	r3, [pc, #84]	; (a1f4 <p2p_demo_send_data+0x174>)
    a1a0:	2200      	movs	r2, #0
    a1a2:	4915      	ldr	r1, [pc, #84]	; (a1f8 <p2p_demo_send_data+0x178>)
    a1a4:	4c15      	ldr	r4, [pc, #84]	; (a1fc <p2p_demo_send_data+0x17c>)
    a1a6:	47a0      	blx	r4
    a1a8:	e7b9      	b.n	a11e <p2p_demo_send_data+0x9e>
    a1aa:	46c0      	nop			; (mov r8, r8)
    a1ac:	0000f4b1 	.word	0x0000f4b1
    a1b0:	200025bd 	.word	0x200025bd
    a1b4:	0001a50c 	.word	0x0001a50c
    a1b8:	00018a31 	.word	0x00018a31
    a1bc:	2000062f 	.word	0x2000062f
    a1c0:	00009c65 	.word	0x00009c65
    a1c4:	0000da91 	.word	0x0000da91
    a1c8:	0000f56d 	.word	0x0000f56d
    a1cc:	00009a4d 	.word	0x00009a4d
    a1d0:	20000417 	.word	0x20000417
    a1d4:	20000418 	.word	0x20000418
    a1d8:	000099f1 	.word	0x000099f1
    a1dc:	0001a52c 	.word	0x0001a52c
    a1e0:	00018915 	.word	0x00018915
    a1e4:	20003318 	.word	0x20003318
    a1e8:	0001a4dc 	.word	0x0001a4dc
    a1ec:	00009a29 	.word	0x00009a29
    a1f0:	20000631 	.word	0x20000631
    a1f4:	00009c45 	.word	0x00009c45
    a1f8:	00989680 	.word	0x00989680
    a1fc:	0001099d 	.word	0x0001099d

0000a200 <periodicTxCallback>:
{
    a200:	b510      	push	{r4, lr}
    a202:	b082      	sub	sp, #8
	if(CanTransmitData())
    a204:	4b11      	ldr	r3, [pc, #68]	; (a24c <periodicTxCallback+0x4c>)
    a206:	4798      	blx	r3
    a208:	2800      	cmp	r0, #0
    a20a:	d10a      	bne.n	a222 <periodicTxCallback+0x22>
		SwTimerStart (PeriodicTxTimerId, MS_TO_US(10000) , 0/*SW_TIMEOUT_RELATIVE*/, (void *)periodicTxCallback, NULL) ;
    a20c:	4b10      	ldr	r3, [pc, #64]	; (a250 <periodicTxCallback+0x50>)
    a20e:	7818      	ldrb	r0, [r3, #0]
    a210:	2300      	movs	r3, #0
    a212:	9300      	str	r3, [sp, #0]
    a214:	4b0f      	ldr	r3, [pc, #60]	; (a254 <periodicTxCallback+0x54>)
    a216:	2200      	movs	r2, #0
    a218:	490f      	ldr	r1, [pc, #60]	; (a258 <periodicTxCallback+0x58>)
    a21a:	4c10      	ldr	r4, [pc, #64]	; (a25c <periodicTxCallback+0x5c>)
    a21c:	47a0      	blx	r4
}
    a21e:	b002      	add	sp, #8
    a220:	bd10      	pop	{r4, pc}
	   p2p_demo_send_data(UNICAST, 0, PAYLOAD, PAYLOAD_SIZE) ;
    a222:	2328      	movs	r3, #40	; 0x28
    a224:	4a0e      	ldr	r2, [pc, #56]	; (a260 <periodicTxCallback+0x60>)
    a226:	2100      	movs	r1, #0
    a228:	2001      	movs	r0, #1
    a22a:	4c0e      	ldr	r4, [pc, #56]	; (a264 <periodicTxCallback+0x64>)
    a22c:	47a0      	blx	r4
	   	   printf("Periodic transmission timer reloaded to %d ms\r\n", DATA_SENDING_INTERVAL_MS) ;
    a22e:	490e      	ldr	r1, [pc, #56]	; (a268 <periodicTxCallback+0x68>)
    a230:	480e      	ldr	r0, [pc, #56]	; (a26c <periodicTxCallback+0x6c>)
    a232:	4b0f      	ldr	r3, [pc, #60]	; (a270 <periodicTxCallback+0x70>)
    a234:	4798      	blx	r3
	   	   SwTimerStart (PeriodicTxTimerId, MS_TO_US(DATA_SENDING_INTERVAL_MS) , 0/*SW_TIMEOUT_RELATIVE*/, (void *)periodicTxCallback, NULL) ;
    a236:	4b06      	ldr	r3, [pc, #24]	; (a250 <periodicTxCallback+0x50>)
    a238:	7818      	ldrb	r0, [r3, #0]
    a23a:	2300      	movs	r3, #0
    a23c:	9300      	str	r3, [sp, #0]
    a23e:	4b05      	ldr	r3, [pc, #20]	; (a254 <periodicTxCallback+0x54>)
    a240:	2200      	movs	r2, #0
    a242:	490c      	ldr	r1, [pc, #48]	; (a274 <periodicTxCallback+0x74>)
    a244:	4c05      	ldr	r4, [pc, #20]	; (a25c <periodicTxCallback+0x5c>)
    a246:	47a0      	blx	r4
    a248:	e7e9      	b.n	a21e <periodicTxCallback+0x1e>
    a24a:	46c0      	nop			; (mov r8, r8)
    a24c:	0000f449 	.word	0x0000f449
    a250:	20000019 	.word	0x20000019
    a254:	0000a201 	.word	0x0000a201
    a258:	00989680 	.word	0x00989680
    a25c:	0001099d 	.word	0x0001099d
    a260:	0001a550 	.word	0x0001a550
    a264:	0000a081 	.word	0x0000a081
    a268:	000061a8 	.word	0x000061a8
    a26c:	0001a57c 	.word	0x0001a57c
    a270:	00018915 	.word	0x00018915
    a274:	017d7840 	.word	0x017d7840

0000a278 <calculate_checksum>:
	printf("Tx Messages: %d - Rx Messages: %d\r\n", TxNum, RxNum) ;	
}

#endif // #if defined(PROTOCOL_P2P)

uint8_t calculate_checksum(const uint8_t *ptrMensaje, const uint16_t tamanio) {
    a278:	b510      	push	{r4, lr}
	uint16_t suma_mensaje = 0;
	uint8_t i, checksum;
	
	for(i = 3; i < (tamanio + 3); i++) {
    a27a:	3103      	adds	r1, #3
    a27c:	2903      	cmp	r1, #3
    a27e:	dd0b      	ble.n	a298 <calculate_checksum+0x20>
    a280:	2303      	movs	r3, #3
    a282:	2200      	movs	r2, #0
		suma_mensaje = suma_mensaje + ptrMensaje[i];
    a284:	5cc4      	ldrb	r4, [r0, r3]
    a286:	1912      	adds	r2, r2, r4
    a288:	b292      	uxth	r2, r2
	for(i = 3; i < (tamanio + 3); i++) {
    a28a:	3301      	adds	r3, #1
    a28c:	b2db      	uxtb	r3, r3
    a28e:	428b      	cmp	r3, r1
    a290:	dbf8      	blt.n	a284 <calculate_checksum+0xc>
	}
	checksum = (uint8_t)suma_mensaje;
	checksum = 0xFF - checksum;
    a292:	43d0      	mvns	r0, r2
	return checksum;
    a294:	b2c0      	uxtb	r0, r0
}
    a296:	bd10      	pop	{r4, pc}
	uint16_t suma_mensaje = 0;
    a298:	2200      	movs	r2, #0
    a29a:	e7fa      	b.n	a292 <calculate_checksum+0x1a>

0000a29c <messi>:

void messi (void)
{
    a29c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a29e:	46c6      	mov	lr, r8
    a2a0:	b500      	push	{lr}
    a2a2:	b084      	sub	sp, #16
	if(mensaje[0] == 0X00) {										//Mientras que mensaje[0] sea diferente de 0X7E intento cachar el inicio de un mensaje
    a2a4:	4b79      	ldr	r3, [pc, #484]	; (a48c <messi+0x1f0>)
    a2a6:	781b      	ldrb	r3, [r3, #0]
    a2a8:	2b00      	cmp	r3, #0
    a2aa:	d027      	beq.n	a2fc <messi+0x60>
		cont_char = sio2host_rx(mensaje, IN_CONTENIDO);
		} else if(mensaje[0] == 0X7E) {								//Pero si mensaje[0] es igual a 0X7E entonces entro a esperar el resto de caracteres
    a2ac:	2b7e      	cmp	r3, #126	; 0x7e
    a2ae:	d02c      	beq.n	a30a <messi+0x6e>
			send_msj = 0;
			cont_char = 0;
			for(ic = 0; ic < MAX_BYTES_MS; ic++) mensaje[ic] = NULL;
		}
	}
	if(send_msj == 1) {
    a2b0:	4b77      	ldr	r3, [pc, #476]	; (a490 <messi+0x1f4>)
    a2b2:	781b      	ldrb	r3, [r3, #0]
    a2b4:	2b00      	cmp	r3, #0
    a2b6:	d100      	bne.n	a2ba <messi+0x1e>
    a2b8:	e0e4      	b.n	a484 <messi+0x1e8>
		MAC[7] = mensaje[5];
    a2ba:	4b76      	ldr	r3, [pc, #472]	; (a494 <messi+0x1f8>)
    a2bc:	4a73      	ldr	r2, [pc, #460]	; (a48c <messi+0x1f0>)
    a2be:	7951      	ldrb	r1, [r2, #5]
    a2c0:	71d9      	strb	r1, [r3, #7]
		MAC[6] = mensaje[6];
    a2c2:	7991      	ldrb	r1, [r2, #6]
    a2c4:	7199      	strb	r1, [r3, #6]
		MAC[5] = mensaje[7];
    a2c6:	79d1      	ldrb	r1, [r2, #7]
    a2c8:	7159      	strb	r1, [r3, #5]
		MAC[4] = mensaje[8];
    a2ca:	7a11      	ldrb	r1, [r2, #8]
    a2cc:	7119      	strb	r1, [r3, #4]
		MAC[3] = mensaje[9];
    a2ce:	7a51      	ldrb	r1, [r2, #9]
    a2d0:	70d9      	strb	r1, [r3, #3]
		MAC[2] = mensaje[10];
    a2d2:	7a91      	ldrb	r1, [r2, #10]
    a2d4:	7099      	strb	r1, [r3, #2]
		MAC[1] = mensaje[11];
    a2d6:	7ad1      	ldrb	r1, [r2, #11]
    a2d8:	7059      	strb	r1, [r3, #1]
		MAC[0] = mensaje[12];
    a2da:	7b12      	ldrb	r2, [r2, #12]
    a2dc:	701a      	strb	r2, [r3, #0]
		for(ic = 0; ic < (longitud_msj - BYTES_DESECHABLES + 1); ic++) {
    a2de:	2200      	movs	r2, #0
    a2e0:	4b6d      	ldr	r3, [pc, #436]	; (a498 <messi+0x1fc>)
    a2e2:	801a      	strh	r2, [r3, #0]
    a2e4:	4b6d      	ldr	r3, [pc, #436]	; (a49c <messi+0x200>)
    a2e6:	881a      	ldrh	r2, [r3, #0]
    a2e8:	0014      	movs	r4, r2
    a2ea:	3c0a      	subs	r4, #10
    a2ec:	2c00      	cmp	r4, #0
    a2ee:	dc00      	bgt.n	a2f2 <messi+0x56>
    a2f0:	e09b      	b.n	a42a <messi+0x18e>
    a2f2:	2301      	movs	r3, #1
    a2f4:	2000      	movs	r0, #0
			contenido[ic] = mensaje[IN_CONTENIDO + ic];
    a2f6:	4e6a      	ldr	r6, [pc, #424]	; (a4a0 <messi+0x204>)
    a2f8:	4d64      	ldr	r5, [pc, #400]	; (a48c <messi+0x1f0>)
    a2fa:	e08c      	b.n	a416 <messi+0x17a>
		cont_char = sio2host_rx(mensaje, IN_CONTENIDO);
    a2fc:	210e      	movs	r1, #14
    a2fe:	4863      	ldr	r0, [pc, #396]	; (a48c <messi+0x1f0>)
    a300:	4b68      	ldr	r3, [pc, #416]	; (a4a4 <messi+0x208>)
    a302:	4798      	blx	r3
    a304:	4b68      	ldr	r3, [pc, #416]	; (a4a8 <messi+0x20c>)
    a306:	8018      	strh	r0, [r3, #0]
    a308:	e7d2      	b.n	a2b0 <messi+0x14>
		if(cont_char < 2) {											//Si aun no se recibio los byte del largo del mensaje los espera
    a30a:	4b67      	ldr	r3, [pc, #412]	; (a4a8 <messi+0x20c>)
    a30c:	881b      	ldrh	r3, [r3, #0]
    a30e:	2b01      	cmp	r3, #1
    a310:	d968      	bls.n	a3e4 <messi+0x148>
			} else if(cont_char < 3) {
    a312:	2b02      	cmp	r3, #2
    a314:	d971      	bls.n	a3fa <messi+0x15e>
		longitud_msj = mensaje[1];
    a316:	495d      	ldr	r1, [pc, #372]	; (a48c <messi+0x1f0>)
		longitud_msj = (longitud_msj << 8) | mensaje[2];
    a318:	784a      	ldrb	r2, [r1, #1]
    a31a:	0212      	lsls	r2, r2, #8
    a31c:	788b      	ldrb	r3, [r1, #2]
    a31e:	4313      	orrs	r3, r2
    a320:	b21b      	sxth	r3, r3
    a322:	4a5e      	ldr	r2, [pc, #376]	; (a49c <messi+0x200>)
    a324:	8013      	strh	r3, [r2, #0]
		c_faltantes = longitud_msj - (cont_char - 3);				//Usando cont_char obtengo el numero de caracteres que me falta por recibir
    a326:	4a60      	ldr	r2, [pc, #384]	; (a4a8 <messi+0x20c>)
    a328:	8812      	ldrh	r2, [r2, #0]
    a32a:	1a9b      	subs	r3, r3, r2
    a32c:	3303      	adds	r3, #3
    a32e:	b2db      	uxtb	r3, r3
    a330:	4a5e      	ldr	r2, [pc, #376]	; (a4ac <messi+0x210>)
    a332:	7013      	strb	r3, [r2, #0]
		for(ic = 0; ic < (c_faltantes + 1); ic++) {						//Espero a que lleguen al puerto serie el total de caracteres faltantes
    a334:	2200      	movs	r2, #0
    a336:	4b58      	ldr	r3, [pc, #352]	; (a498 <messi+0x1fc>)
    a338:	801a      	strh	r2, [r3, #0]
    a33a:	2300      	movs	r3, #0
			mensaje[cont_char + ic] = sio2host_getchar();
    a33c:	4e5a      	ldr	r6, [pc, #360]	; (a4a8 <messi+0x20c>)
    a33e:	4d5c      	ldr	r5, [pc, #368]	; (a4b0 <messi+0x214>)
    a340:	000c      	movs	r4, r1
    a342:	8837      	ldrh	r7, [r6, #0]
    a344:	18ff      	adds	r7, r7, r3
    a346:	47a8      	blx	r5
    a348:	55e0      	strb	r0, [r4, r7]
		for(ic = 0; ic < (c_faltantes + 1); ic++) {						//Espero a que lleguen al puerto serie el total de caracteres faltantes
    a34a:	4a53      	ldr	r2, [pc, #332]	; (a498 <messi+0x1fc>)
    a34c:	8813      	ldrh	r3, [r2, #0]
    a34e:	3301      	adds	r3, #1
    a350:	b29b      	uxth	r3, r3
    a352:	8013      	strh	r3, [r2, #0]
    a354:	4a55      	ldr	r2, [pc, #340]	; (a4ac <messi+0x210>)
    a356:	7812      	ldrb	r2, [r2, #0]
    a358:	3201      	adds	r2, #1
    a35a:	4293      	cmp	r3, r2
    a35c:	dbf1      	blt.n	a342 <messi+0xa6>
		checksum = calculate_checksum(mensaje, longitud_msj);
    a35e:	4b4f      	ldr	r3, [pc, #316]	; (a49c <messi+0x200>)
    a360:	8819      	ldrh	r1, [r3, #0]
    a362:	484a      	ldr	r0, [pc, #296]	; (a48c <messi+0x1f0>)
    a364:	4b53      	ldr	r3, [pc, #332]	; (a4b4 <messi+0x218>)
    a366:	4798      	blx	r3
    a368:	4b53      	ldr	r3, [pc, #332]	; (a4b8 <messi+0x21c>)
    a36a:	7018      	strb	r0, [r3, #0]
		for(ic = 0; ic < (longitud_msj + 3 + 1); ic++) {				//Imprimo los caracteres que llegaron
    a36c:	2200      	movs	r2, #0
    a36e:	4b4a      	ldr	r3, [pc, #296]	; (a498 <messi+0x1fc>)
    a370:	801a      	strh	r2, [r3, #0]
    a372:	2300      	movs	r3, #0
			printf("%02X", mensaje[ic]);
    a374:	4e45      	ldr	r6, [pc, #276]	; (a48c <messi+0x1f0>)
    a376:	4c51      	ldr	r4, [pc, #324]	; (a4bc <messi+0x220>)
    a378:	4d51      	ldr	r5, [pc, #324]	; (a4c0 <messi+0x224>)
    a37a:	5cf1      	ldrb	r1, [r6, r3]
    a37c:	0020      	movs	r0, r4
    a37e:	47a8      	blx	r5
		for(ic = 0; ic < (longitud_msj + 3 + 1); ic++) {				//Imprimo los caracteres que llegaron
    a380:	4a45      	ldr	r2, [pc, #276]	; (a498 <messi+0x1fc>)
    a382:	8813      	ldrh	r3, [r2, #0]
    a384:	3301      	adds	r3, #1
    a386:	b29b      	uxth	r3, r3
    a388:	8013      	strh	r3, [r2, #0]
    a38a:	4a44      	ldr	r2, [pc, #272]	; (a49c <messi+0x200>)
    a38c:	8812      	ldrh	r2, [r2, #0]
    a38e:	1d11      	adds	r1, r2, #4
    a390:	428b      	cmp	r3, r1
    a392:	dbf2      	blt.n	a37a <messi+0xde>
		printf(" Datos cachados por interupcion: %03d, Datos del mensaje: %03d, ", cont_char, (longitud_msj - BYTES_DESECHABLES + 1));
    a394:	3a0a      	subs	r2, #10
    a396:	4f44      	ldr	r7, [pc, #272]	; (a4a8 <messi+0x20c>)
    a398:	8839      	ldrh	r1, [r7, #0]
    a39a:	484a      	ldr	r0, [pc, #296]	; (a4c4 <messi+0x228>)
    a39c:	4b48      	ldr	r3, [pc, #288]	; (a4c0 <messi+0x224>)
    a39e:	4698      	mov	r8, r3
    a3a0:	4798      	blx	r3
		printf("checksum calculado: %02X, checksum en msj: %02X\r\n", checksum, (mensaje[longitud_msj + 3]));
    a3a2:	4c3a      	ldr	r4, [pc, #232]	; (a48c <messi+0x1f0>)
    a3a4:	4e3d      	ldr	r6, [pc, #244]	; (a49c <messi+0x200>)
    a3a6:	8833      	ldrh	r3, [r6, #0]
    a3a8:	18e3      	adds	r3, r4, r3
    a3aa:	78da      	ldrb	r2, [r3, #3]
    a3ac:	4d42      	ldr	r5, [pc, #264]	; (a4b8 <messi+0x21c>)
    a3ae:	7829      	ldrb	r1, [r5, #0]
    a3b0:	4845      	ldr	r0, [pc, #276]	; (a4c8 <messi+0x22c>)
    a3b2:	47c0      	blx	r8
		cont_char = 0;
    a3b4:	2300      	movs	r3, #0
    a3b6:	803b      	strh	r3, [r7, #0]
		if (mensaje[longitud_msj + 3] == checksum) {
    a3b8:	8833      	ldrh	r3, [r6, #0]
    a3ba:	18e4      	adds	r4, r4, r3
    a3bc:	78e2      	ldrb	r2, [r4, #3]
    a3be:	782b      	ldrb	r3, [r5, #0]
    a3c0:	429a      	cmp	r2, r3
    a3c2:	d023      	beq.n	a40c <messi+0x170>
			send_msj = 0;
    a3c4:	2200      	movs	r2, #0
    a3c6:	4b32      	ldr	r3, [pc, #200]	; (a490 <messi+0x1f4>)
    a3c8:	701a      	strb	r2, [r3, #0]
    a3ca:	4b30      	ldr	r3, [pc, #192]	; (a48c <messi+0x1f0>)
    a3cc:	0019      	movs	r1, r3
    a3ce:	310c      	adds	r1, #12
    a3d0:	31ff      	adds	r1, #255	; 0xff
			for(ic = 0; ic < MAX_BYTES_MS; ic++) mensaje[ic] = NULL;
    a3d2:	701a      	strb	r2, [r3, #0]
    a3d4:	3301      	adds	r3, #1
    a3d6:	4299      	cmp	r1, r3
    a3d8:	d1fb      	bne.n	a3d2 <messi+0x136>
    a3da:	220c      	movs	r2, #12
    a3dc:	32ff      	adds	r2, #255	; 0xff
    a3de:	4b2e      	ldr	r3, [pc, #184]	; (a498 <messi+0x1fc>)
    a3e0:	801a      	strh	r2, [r3, #0]
    a3e2:	e04f      	b.n	a484 <messi+0x1e8>
			mensaje[1] = sio2host_getchar(); //estos indican el largo del mensaje
    a3e4:	4d32      	ldr	r5, [pc, #200]	; (a4b0 <messi+0x214>)
    a3e6:	47a8      	blx	r5
    a3e8:	4c28      	ldr	r4, [pc, #160]	; (a48c <messi+0x1f0>)
    a3ea:	7060      	strb	r0, [r4, #1]
			mensaje[2] = sio2host_getchar();
    a3ec:	47a8      	blx	r5
    a3ee:	70a0      	strb	r0, [r4, #2]
			cont_char = cont_char + 2;
    a3f0:	4a2d      	ldr	r2, [pc, #180]	; (a4a8 <messi+0x20c>)
    a3f2:	8813      	ldrh	r3, [r2, #0]
    a3f4:	3302      	adds	r3, #2
    a3f6:	8013      	strh	r3, [r2, #0]
    a3f8:	e78d      	b.n	a316 <messi+0x7a>
			mensaje[2] = sio2host_getchar();//sio2host  espera un caracter
    a3fa:	4b2d      	ldr	r3, [pc, #180]	; (a4b0 <messi+0x214>)
    a3fc:	4798      	blx	r3
    a3fe:	4b23      	ldr	r3, [pc, #140]	; (a48c <messi+0x1f0>)
    a400:	7098      	strb	r0, [r3, #2]
			cont_char++;
    a402:	4a29      	ldr	r2, [pc, #164]	; (a4a8 <messi+0x20c>)
    a404:	8813      	ldrh	r3, [r2, #0]
    a406:	3301      	adds	r3, #1
    a408:	8013      	strh	r3, [r2, #0]
    a40a:	e784      	b.n	a316 <messi+0x7a>
			send_msj = 1;
    a40c:	2201      	movs	r2, #1
    a40e:	4b20      	ldr	r3, [pc, #128]	; (a490 <messi+0x1f4>)
    a410:	701a      	strb	r2, [r3, #0]
    a412:	e752      	b.n	a2ba <messi+0x1e>
    a414:	000b      	movs	r3, r1
			contenido[ic] = mensaje[IN_CONTENIDO + ic];
    a416:	1829      	adds	r1, r5, r0
    a418:	7b89      	ldrb	r1, [r1, #14]
    a41a:	5431      	strb	r1, [r6, r0]
		for(ic = 0; ic < (longitud_msj - BYTES_DESECHABLES + 1); ic++) {
    a41c:	0018      	movs	r0, r3
    a41e:	1c59      	adds	r1, r3, #1
    a420:	b289      	uxth	r1, r1
    a422:	42a3      	cmp	r3, r4
    a424:	dbf6      	blt.n	a414 <messi+0x178>
    a426:	491c      	ldr	r1, [pc, #112]	; (a498 <messi+0x1fc>)
    a428:	800b      	strh	r3, [r1, #0]
		}
		if (MiApp_SendData(LONG_ADDR_LEN, MAC, (longitud_msj - BYTES_DESECHABLES + 1), contenido, msghandledemo++, 1, dataConfcb) == false)
    a42a:	4928      	ldr	r1, [pc, #160]	; (a4cc <messi+0x230>)
    a42c:	780b      	ldrb	r3, [r1, #0]
    a42e:	1c58      	adds	r0, r3, #1
    a430:	7008      	strb	r0, [r1, #0]
    a432:	3a0a      	subs	r2, #10
    a434:	b2d2      	uxtb	r2, r2
    a436:	4926      	ldr	r1, [pc, #152]	; (a4d0 <messi+0x234>)
    a438:	9102      	str	r1, [sp, #8]
    a43a:	2101      	movs	r1, #1
    a43c:	9101      	str	r1, [sp, #4]
    a43e:	9300      	str	r3, [sp, #0]
    a440:	4b17      	ldr	r3, [pc, #92]	; (a4a0 <messi+0x204>)
    a442:	4914      	ldr	r1, [pc, #80]	; (a494 <messi+0x1f8>)
    a444:	2008      	movs	r0, #8
    a446:	4c23      	ldr	r4, [pc, #140]	; (a4d4 <messi+0x238>)
    a448:	47a0      	blx	r4
    a44a:	2800      	cmp	r0, #0
    a44c:	d01a      	beq.n	a484 <messi+0x1e8>
    a44e:	4b0f      	ldr	r3, [pc, #60]	; (a48c <messi+0x1f0>)
    a450:	0019      	movs	r1, r3
    a452:	310c      	adds	r1, #12
    a454:	31ff      	adds	r1, #255	; 0xff
			/* That bring the node back to continuous transaction cycle */
			//DemoOutput_UnicastFail();
		}
		else
		{
			for(ic = 0; ic < MAX_BYTES_MS; ic++) mensaje[ic] = NULL;
    a456:	2200      	movs	r2, #0
    a458:	701a      	strb	r2, [r3, #0]
    a45a:	3301      	adds	r3, #1
    a45c:	428b      	cmp	r3, r1
    a45e:	d1fb      	bne.n	a458 <messi+0x1bc>
    a460:	220c      	movs	r2, #12
    a462:	32ff      	adds	r2, #255	; 0xff
    a464:	4b0c      	ldr	r3, [pc, #48]	; (a498 <messi+0x1fc>)
    a466:	801a      	strh	r2, [r3, #0]
			send_msj = 0;
    a468:	2200      	movs	r2, #0
    a46a:	4b09      	ldr	r3, [pc, #36]	; (a490 <messi+0x1f4>)
    a46c:	701a      	strb	r2, [r3, #0]
			// Successful Transmission
			TxNum++;
    a46e:	491a      	ldr	r1, [pc, #104]	; (a4d8 <messi+0x23c>)
    a470:	780b      	ldrb	r3, [r1, #0]
    a472:	3301      	adds	r3, #1
    a474:	700b      	strb	r3, [r1, #0]
			/* Start timer for transmission timeout */
			SwTimerStart (TxTimerId, MS_TO_US(5000), 0/*SW_TIMEOUT_RELATIVE*/, (void *)TxToutCallback, NULL);
    a476:	4b19      	ldr	r3, [pc, #100]	; (a4dc <messi+0x240>)
    a478:	7818      	ldrb	r0, [r3, #0]
    a47a:	9200      	str	r2, [sp, #0]
    a47c:	4b18      	ldr	r3, [pc, #96]	; (a4e0 <messi+0x244>)
    a47e:	4919      	ldr	r1, [pc, #100]	; (a4e4 <messi+0x248>)
    a480:	4c19      	ldr	r4, [pc, #100]	; (a4e8 <messi+0x24c>)
    a482:	47a0      	blx	r4
		}
	}
	
    a484:	b004      	add	sp, #16
    a486:	bc04      	pop	{r2}
    a488:	4690      	mov	r8, r2
    a48a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a48c:	20000524 	.word	0x20000524
    a490:	20000630 	.word	0x20000630
    a494:	20000318 	.word	0x20000318
    a498:	20000520 	.word	0x20000520
    a49c:	20000522 	.word	0x20000522
    a4a0:	20000420 	.word	0x20000420
    a4a4:	0000f97d 	.word	0x0000f97d
    a4a8:	2000041c 	.word	0x2000041c
    a4ac:	20000419 	.word	0x20000419
    a4b0:	0000fa11 	.word	0x0000fa11
    a4b4:	0000a279 	.word	0x0000a279
    a4b8:	2000041a 	.word	0x2000041a
    a4bc:	0001a45c 	.word	0x0001a45c
    a4c0:	00018915 	.word	0x00018915
    a4c4:	0001a464 	.word	0x0001a464
    a4c8:	0001a4a8 	.word	0x0001a4a8
    a4cc:	2000062f 	.word	0x2000062f
    a4d0:	00009c65 	.word	0x00009c65
    a4d4:	0000da91 	.word	0x0000da91
    a4d8:	20000418 	.word	0x20000418
    a4dc:	20000631 	.word	0x20000631
    a4e0:	00009c45 	.word	0x00009c45
    a4e4:	004c4b40 	.word	0x004c4b40
    a4e8:	0001099d 	.word	0x0001099d

0000a4ec <EstablishConfirm>:
* Overview: callback function called upon MiAPP_EstConnection
            when connection is lost
* Parameter: status of the completed operation
********************************************************************/
static void EstablishConfirm(miwi_status_t status)
{
    a4ec:	b510      	push	{r4, lr}
    a4ee:	b082      	sub	sp, #8
    if ((SUCCESS == status) || (ALREADY_EXISTS == status))
    a4f0:	2800      	cmp	r0, #0
    a4f2:	d001      	beq.n	a4f8 <EstablishConfirm+0xc>
    a4f4:	2806      	cmp	r0, #6
    a4f6:	d102      	bne.n	a4fe <EstablishConfirm+0x12>
    {
        printf("Reconnected\n\r");
    a4f8:	4806      	ldr	r0, [pc, #24]	; (a514 <EstablishConfirm+0x28>)
    a4fa:	4b07      	ldr	r3, [pc, #28]	; (a518 <EstablishConfirm+0x2c>)
    a4fc:	4798      	blx	r3
    }
	#ifdef PERIODIC_TX
	SwTimerStart (PeriodicTxTimerId, MS_TO_US(INITIAL_DATA_SENDING_INTERVAL_MS), 0/*SW_TIMEOUT_RELATIVE*/, (void *)periodicTxCallback, NULL) ;
    a4fe:	4b07      	ldr	r3, [pc, #28]	; (a51c <EstablishConfirm+0x30>)
    a500:	7818      	ldrb	r0, [r3, #0]
    a502:	2300      	movs	r3, #0
    a504:	9300      	str	r3, [sp, #0]
    a506:	4b06      	ldr	r3, [pc, #24]	; (a520 <EstablishConfirm+0x34>)
    a508:	2200      	movs	r2, #0
    a50a:	4906      	ldr	r1, [pc, #24]	; (a524 <EstablishConfirm+0x38>)
    a50c:	4c06      	ldr	r4, [pc, #24]	; (a528 <EstablishConfirm+0x3c>)
    a50e:	47a0      	blx	r4
	#endif
}
    a510:	b002      	add	sp, #8
    a512:	bd10      	pop	{r4, pc}
    a514:	0001a6a0 	.word	0x0001a6a0
    a518:	00018915 	.word	0x00018915
    a51c:	20000019 	.word	0x20000019
    a520:	0000a201 	.word	0x0000a201
    a524:	001e8480 	.word	0x001e8480
    a528:	0001099d 	.word	0x0001099d

0000a52c <Connection_Confirm>:
{
    a52c:	b510      	push	{r4, lr}
    a52e:	0004      	movs	r4, r0
	printf("\r\nConnect Operation Status: %d\n", status) ;
    a530:	0001      	movs	r1, r0
    a532:	4811      	ldr	r0, [pc, #68]	; (a578 <Connection_Confirm+0x4c>)
    a534:	4b11      	ldr	r3, [pc, #68]	; (a57c <Connection_Confirm+0x50>)
    a536:	4798      	blx	r3
    if ((SUCCESS == status) || (ALREADY_EXISTS == status))
    a538:	2c00      	cmp	r4, #0
    a53a:	d001      	beq.n	a540 <Connection_Confirm+0x14>
    a53c:	2c06      	cmp	r4, #6
    a53e:	d113      	bne.n	a568 <Connection_Confirm+0x3c>
		port_base->OUTCLR.reg = pin_mask;
    a540:	2280      	movs	r2, #128	; 0x80
    a542:	0312      	lsls	r2, r2, #12
    a544:	4b0e      	ldr	r3, [pc, #56]	; (a580 <Connection_Confirm+0x54>)
    a546:	615a      	str	r2, [r3, #20]
		if(role == PAN_COORD)
    a548:	4b0e      	ldr	r3, [pc, #56]	; (a584 <Connection_Confirm+0x58>)
    a54a:	781b      	ldrb	r3, [r3, #0]
    a54c:	2b01      	cmp	r3, #1
    a54e:	d00c      	beq.n	a56a <Connection_Confirm+0x3e>
			DemoOutput_Channel(myChannel, 1);
    a550:	4b0d      	ldr	r3, [pc, #52]	; (a588 <Connection_Confirm+0x5c>)
    a552:	7818      	ldrb	r0, [r3, #0]
    a554:	2101      	movs	r1, #1
    a556:	4b0d      	ldr	r3, [pc, #52]	; (a58c <Connection_Confirm+0x60>)
    a558:	4798      	blx	r3
		DumpConnection(0xFF);
    a55a:	20ff      	movs	r0, #255	; 0xff
    a55c:	4b0c      	ldr	r3, [pc, #48]	; (a590 <Connection_Confirm+0x64>)
    a55e:	4798      	blx	r3
		STAR_DEMO_OPTIONS_MESSAGE (role);
    a560:	4b08      	ldr	r3, [pc, #32]	; (a584 <Connection_Confirm+0x58>)
    a562:	7818      	ldrb	r0, [r3, #0]
    a564:	4b0b      	ldr	r3, [pc, #44]	; (a594 <Connection_Confirm+0x68>)
    a566:	4798      	blx	r3
}
    a568:	bd10      	pop	{r4, pc}
		printf("\r\nStarted Wireless Communication on Channel %u\r\n", currentChannel) ;
    a56a:	4b0b      	ldr	r3, [pc, #44]	; (a598 <Connection_Confirm+0x6c>)
    a56c:	7819      	ldrb	r1, [r3, #0]
    a56e:	480b      	ldr	r0, [pc, #44]	; (a59c <Connection_Confirm+0x70>)
    a570:	4b02      	ldr	r3, [pc, #8]	; (a57c <Connection_Confirm+0x50>)
    a572:	4798      	blx	r3
    a574:	e7f1      	b.n	a55a <Connection_Confirm+0x2e>
    a576:	46c0      	nop			; (mov r8, r8)
    a578:	0001a64c 	.word	0x0001a64c
    a57c:	00018915 	.word	0x00018915
    a580:	40002800 	.word	0x40002800
    a584:	2000376c 	.word	0x2000376c
    a588:	2000001a 	.word	0x2000001a
    a58c:	00009891 	.word	0x00009891
    a590:	0000dcf9 	.word	0x0000dcf9
    a594:	00009ab9 	.word	0x00009ab9
    a598:	2000001e 	.word	0x2000001e
    a59c:	0001a66c 	.word	0x0001a66c

0000a5a0 <appLinkFailureCallback>:
* Function: static void appLinkFailureCallback(void)
*
* Overview: callback function called upon when connection is lost
********************************************************************/
static void appLinkFailureCallback(void)
{
    a5a0:	b510      	push	{r4, lr}
    a5a2:	b084      	sub	sp, #16
	#ifdef PERIODIC_TX
	SwTimerStop(PeriodicTxTimerId);
    a5a4:	4b09      	ldr	r3, [pc, #36]	; (a5cc <appLinkFailureCallback+0x2c>)
    a5a6:	7818      	ldrb	r0, [r3, #0]
    a5a8:	4b09      	ldr	r3, [pc, #36]	; (a5d0 <appLinkFailureCallback+0x30>)
    a5aa:	4798      	blx	r3
	#endif
	
	//printf("\nLink Failure- send connection request\n\r");
    uint16_t broadcastAddr = 0xFFFF;
    a5ac:	220e      	movs	r2, #14
    a5ae:	446a      	add	r2, sp
    a5b0:	2301      	movs	r3, #1
    a5b2:	425b      	negs	r3, r3
    a5b4:	8013      	strh	r3, [r2, #0]
    MiApp_EstablishConnection(myChannel, 0, (uint8_t*)&broadcastAddr, 0, EstablishConfirm);
    a5b6:	4b07      	ldr	r3, [pc, #28]	; (a5d4 <appLinkFailureCallback+0x34>)
    a5b8:	7818      	ldrb	r0, [r3, #0]
    a5ba:	4b07      	ldr	r3, [pc, #28]	; (a5d8 <appLinkFailureCallback+0x38>)
    a5bc:	9300      	str	r3, [sp, #0]
    a5be:	2300      	movs	r3, #0
    a5c0:	2100      	movs	r1, #0
    a5c2:	4c06      	ldr	r4, [pc, #24]	; (a5dc <appLinkFailureCallback+0x3c>)
    a5c4:	47a0      	blx	r4
}
    a5c6:	b004      	add	sp, #16
    a5c8:	bd10      	pop	{r4, pc}
    a5ca:	46c0      	nop			; (mov r8, r8)
    a5cc:	20000019 	.word	0x20000019
    a5d0:	00010cb5 	.word	0x00010cb5
    a5d4:	2000001a 	.word	0x2000001a
    a5d8:	0000a4ed 	.word	0x0000a4ed
    a5dc:	0000f2d9 	.word	0x0000f2d9

0000a5e0 <Initialize_Demo>:
*
* Overview: Initializes the demo by initializing protocol, required
            components and initiates connection
********************************************************************/
bool Initialize_Demo(bool freezer_enable)
{
    a5e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a5e2:	46ce      	mov	lr, r9
    a5e4:	b500      	push	{lr}
    a5e6:	b086      	sub	sp, #24
    a5e8:	0004      	movs	r4, r0
    uint8_t i;

	bool invalidIEEEAddrFlag = false;
	uint64_t invalidIEEEAddr;

    MiApp_SubscribeDataIndicationCallback(ReceivedDataIndication);
    a5ea:	4880      	ldr	r0, [pc, #512]	; (a7ec <Initialize_Demo+0x20c>)
    a5ec:	4b80      	ldr	r3, [pc, #512]	; (a7f0 <Initialize_Demo+0x210>)
    a5ee:	4798      	blx	r3
#if defined(PROTOCOL_STAR)
#ifdef ENABLE_LINK_STATUS
	MiApp_SubscribeLinkFailureCallback(appLinkFailureCallback);
    a5f0:	4880      	ldr	r0, [pc, #512]	; (a7f4 <Initialize_Demo+0x214>)
    a5f2:	4b81      	ldr	r3, [pc, #516]	; (a7f8 <Initialize_Demo+0x218>)
    a5f4:	4798      	blx	r3

#ifdef ENABLE_SLEEP_FEATURE
	sm_init();
#endif

    if (freezer_enable)
    a5f6:	2c00      	cmp	r4, #0
    a5f8:	d05b      	beq.n	a6b2 <Initialize_Demo+0xd2>
    {
        MiApp_ProtocolInit(NULL, NULL);
    a5fa:	2100      	movs	r1, #0
    a5fc:	2000      	movs	r0, #0
    a5fe:	4b7f      	ldr	r3, [pc, #508]	; (a7fc <Initialize_Demo+0x21c>)
    a600:	4798      	blx	r3
		srand(PHY_RandomReq());
    a602:	4b7f      	ldr	r3, [pc, #508]	; (a800 <Initialize_Demo+0x220>)
    a604:	4798      	blx	r3
    a606:	4b7f      	ldr	r3, [pc, #508]	; (a804 <Initialize_Demo+0x224>)
    a608:	4798      	blx	r3
		/* Check if a valid IEEE address is available.
		0x0000000000000000 and 0xFFFFFFFFFFFFFFFF is presumed to be invalid */
		/* Check if IEEE address is 0x0000000000000000 */
		memset((uint8_t *)&invalidIEEEAddr, 0x00, LONG_ADDR_LEN);
    a60a:	2200      	movs	r2, #0
    a60c:	2300      	movs	r3, #0
    a60e:	9204      	str	r2, [sp, #16]
    a610:	9305      	str	r3, [sp, #20]
		if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    a612:	4e7d      	ldr	r6, [pc, #500]	; (a808 <Initialize_Demo+0x228>)
    a614:	3208      	adds	r2, #8
    a616:	0031      	movs	r1, r6
    a618:	a804      	add	r0, sp, #16
    a61a:	4d7c      	ldr	r5, [pc, #496]	; (a80c <Initialize_Demo+0x22c>)
    a61c:	47a8      	blx	r5
    a61e:	0004      	movs	r4, r0
		{
			invalidIEEEAddrFlag = true;
		}

		/* Check if IEEE address is 0xFFFFFFFFFFFFFFFF */
		memset((uint8_t *)&invalidIEEEAddr, 0xFF, LONG_ADDR_LEN);
    a620:	2201      	movs	r2, #1
    a622:	4252      	negs	r2, r2
    a624:	17d3      	asrs	r3, r2, #31
    a626:	9204      	str	r2, [sp, #16]
    a628:	9305      	str	r3, [sp, #20]
		if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    a62a:	3209      	adds	r2, #9
    a62c:	0031      	movs	r1, r6
    a62e:	a804      	add	r0, sp, #16
    a630:	47a8      	blx	r5
    a632:	2800      	cmp	r0, #0
    a634:	d026      	beq.n	a684 <Initialize_Demo+0xa4>
		{
			invalidIEEEAddrFlag = true;
		}
		
		if (invalidIEEEAddrFlag)
    a636:	2c00      	cmp	r4, #0
    a638:	d024      	beq.n	a684 <Initialize_Demo+0xa4>
			for(i = 0; i<MY_ADDRESS_LENGTH; i++)
			{
				*peui64++ = (uint8_t)rand();
			}
		}
		PHY_SetIEEEAddr((uint8_t *)&myLongAddress);
    a63a:	4873      	ldr	r0, [pc, #460]	; (a808 <Initialize_Demo+0x228>)
    a63c:	4b74      	ldr	r3, [pc, #464]	; (a810 <Initialize_Demo+0x230>)
    a63e:	4798      	blx	r3
#if ! defined(PROTOCOL_STAR)
		DemoOutput_Instruction();
#else
		
		if(END_DEVICE == role)
    a640:	4b74      	ldr	r3, [pc, #464]	; (a814 <Initialize_Demo+0x234>)
    a642:	781b      	ldrb	r3, [r3, #0]
    a644:	2b02      	cmp	r3, #2
    a646:	d027      	beq.n	a698 <Initialize_Demo+0xb8>
			startLinkStatusTimer();

		STAR_DEMO_OPTIONS_MESSAGE (role);
    a648:	4c72      	ldr	r4, [pc, #456]	; (a814 <Initialize_Demo+0x234>)
    a64a:	7820      	ldrb	r0, [r4, #0]
    a64c:	4b72      	ldr	r3, [pc, #456]	; (a818 <Initialize_Demo+0x238>)
    a64e:	4798      	blx	r3
#endif

#ifdef PERIODIC_TX
		SwTimerCreate(&PeriodicTxTimerId) ;
    a650:	4872      	ldr	r0, [pc, #456]	; (a81c <Initialize_Demo+0x23c>)
    a652:	4b73      	ldr	r3, [pc, #460]	; (a820 <Initialize_Demo+0x240>)
    a654:	4798      	blx	r3
		#if !defined(ENABLE_SLEEP_FEATURE)
		#if defined(PROTOCOL_STAR)
		if(role == END_DEVICE)
    a656:	7823      	ldrb	r3, [r4, #0]
    a658:	2b02      	cmp	r3, #2
    a65a:	d020      	beq.n	a69e <Initialize_Demo+0xbe>
    }

/*********************************/
//STAR SUPPORT CODE
#if defined(PROTOCOL_STAR)
	if(role == PAN_COORD)
    a65c:	4b6d      	ldr	r3, [pc, #436]	; (a814 <Initialize_Demo+0x234>)
    a65e:	781b      	ldrb	r3, [r3, #0]
    a660:	2b01      	cmp	r3, #1
    a662:	d100      	bne.n	a666 <Initialize_Demo+0x86>
    a664:	e0b4      	b.n	a7d0 <Initialize_Demo+0x1f0>
#endif
/********************************/


	/* Create SW timer for transmission timeout */
	SwTimerCreate(&TxTimerId) ;
    a666:	486f      	ldr	r0, [pc, #444]	; (a824 <Initialize_Demo+0x244>)
    a668:	4c6d      	ldr	r4, [pc, #436]	; (a820 <Initialize_Demo+0x240>)
    a66a:	47a0      	blx	r4
	#if defined(PROTOCOL_STAR)
	#ifdef PERIODIC_TX
	SwTimerCreate(&PeriodicTxTimerId) ;
    a66c:	486b      	ldr	r0, [pc, #428]	; (a81c <Initialize_Demo+0x23c>)
    a66e:	47a0      	blx	r4
	#if !defined(ENABLE_SLEEP_FEATURE)
	if(role == END_DEVICE)
    a670:	4b68      	ldr	r3, [pc, #416]	; (a814 <Initialize_Demo+0x234>)
    a672:	781b      	ldrb	r3, [r3, #0]
    a674:	2b02      	cmp	r3, #2
    a676:	d100      	bne.n	a67a <Initialize_Demo+0x9a>
    a678:	e0ae      	b.n	a7d8 <Initialize_Demo+0x1f8>
	#endif
	#endif // #ifdef PERIODIC_TX
	#endif
	
	return true;
}
    a67a:	2001      	movs	r0, #1
    a67c:	b006      	add	sp, #24
    a67e:	bc04      	pop	{r2}
    a680:	4691      	mov	r9, r2
    a682:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a684:	4c60      	ldr	r4, [pc, #384]	; (a808 <Initialize_Demo+0x228>)
    a686:	0026      	movs	r6, r4
    a688:	3608      	adds	r6, #8
				*peui64++ = (uint8_t)rand();
    a68a:	4d67      	ldr	r5, [pc, #412]	; (a828 <Initialize_Demo+0x248>)
    a68c:	47a8      	blx	r5
    a68e:	7020      	strb	r0, [r4, #0]
    a690:	3401      	adds	r4, #1
			for(i = 0; i<MY_ADDRESS_LENGTH; i++)
    a692:	42b4      	cmp	r4, r6
    a694:	d1fa      	bne.n	a68c <Initialize_Demo+0xac>
    a696:	e7d0      	b.n	a63a <Initialize_Demo+0x5a>
			startLinkStatusTimer();
    a698:	4b64      	ldr	r3, [pc, #400]	; (a82c <Initialize_Demo+0x24c>)
    a69a:	4798      	blx	r3
    a69c:	e7d4      	b.n	a648 <Initialize_Demo+0x68>
		SwTimerStart (PeriodicTxTimerId, MS_TO_US(INITIAL_DATA_SENDING_INTERVAL_MS), 0/*SW_TIMEOUT_RELATIVE*/, (void *)periodicTxCallback, NULL) ;
    a69e:	4b5f      	ldr	r3, [pc, #380]	; (a81c <Initialize_Demo+0x23c>)
    a6a0:	7818      	ldrb	r0, [r3, #0]
    a6a2:	2300      	movs	r3, #0
    a6a4:	9300      	str	r3, [sp, #0]
    a6a6:	4b62      	ldr	r3, [pc, #392]	; (a830 <Initialize_Demo+0x250>)
    a6a8:	2200      	movs	r2, #0
    a6aa:	4962      	ldr	r1, [pc, #392]	; (a834 <Initialize_Demo+0x254>)
    a6ac:	4c62      	ldr	r4, [pc, #392]	; (a838 <Initialize_Demo+0x258>)
    a6ae:	47a0      	blx	r4
    a6b0:	e7d4      	b.n	a65c <Initialize_Demo+0x7c>
		port_base->OUTSET.reg = pin_mask;
    a6b2:	2280      	movs	r2, #128	; 0x80
    a6b4:	0312      	lsls	r2, r2, #12
    a6b6:	4b61      	ldr	r3, [pc, #388]	; (a83c <Initialize_Demo+0x25c>)
    a6b8:	619a      	str	r2, [r3, #24]
        MiApp_ProtocolInit(NULL, NULL);
    a6ba:	2100      	movs	r1, #0
    a6bc:	2000      	movs	r0, #0
    a6be:	4b4f      	ldr	r3, [pc, #316]	; (a7fc <Initialize_Demo+0x21c>)
    a6c0:	4798      	blx	r3
		uint8_t txPower = 0x1F ;
    a6c2:	240a      	movs	r4, #10
    a6c4:	446c      	add	r4, sp
    a6c6:	231f      	movs	r3, #31
    a6c8:	7023      	strb	r3, [r4, #0]
		RADIO_GetAttr(OUTPUT_POWER, (void *)&txPower) ;
    a6ca:	0021      	movs	r1, r4
    a6cc:	2004      	movs	r0, #4
    a6ce:	4d5c      	ldr	r5, [pc, #368]	; (a840 <Initialize_Demo+0x260>)
    a6d0:	47a8      	blx	r5
		uint8_t paBoost = 255 ;
    a6d2:	260b      	movs	r6, #11
    a6d4:	446e      	add	r6, sp
    a6d6:	23ff      	movs	r3, #255	; 0xff
    a6d8:	7033      	strb	r3, [r6, #0]
		RADIO_GetAttr(PABOOST, (void *)&paBoost) ;
    a6da:	0031      	movs	r1, r6
    a6dc:	2008      	movs	r0, #8
    a6de:	47a8      	blx	r5
		RadioDataRate_t sf = 33 ;
    a6e0:	ad03      	add	r5, sp, #12
    a6e2:	2321      	movs	r3, #33	; 0x21
    a6e4:	702b      	strb	r3, [r5, #0]
		PHY_GetAttribute(SPREADING_FACTOR, (void *)&sf) ;
    a6e6:	0029      	movs	r1, r5
    a6e8:	2016      	movs	r0, #22
    a6ea:	4f56      	ldr	r7, [pc, #344]	; (a844 <Initialize_Demo+0x264>)
    a6ec:	47b8      	blx	r7
		PHY_GetAttribute(BANDWIDTH, (void *)&bw) ;
    a6ee:	230d      	movs	r3, #13
    a6f0:	446b      	add	r3, sp
    a6f2:	4699      	mov	r9, r3
    a6f4:	0019      	movs	r1, r3
    a6f6:	2007      	movs	r0, #7
    a6f8:	47b8      	blx	r7
		printf("\r\n-----------------------------------------------------\r\n") ;
    a6fa:	4853      	ldr	r0, [pc, #332]	; (a848 <Initialize_Demo+0x268>)
    a6fc:	4f53      	ldr	r7, [pc, #332]	; (a84c <Initialize_Demo+0x26c>)
    a6fe:	47b8      	blx	r7
		printf("RF Parameters\r\n") ;
    a700:	4853      	ldr	r0, [pc, #332]	; (a850 <Initialize_Demo+0x270>)
    a702:	47b8      	blx	r7
		printf(" - Tx output power: %d\r\n", txPower) ;
    a704:	7821      	ldrb	r1, [r4, #0]
    a706:	4853      	ldr	r0, [pc, #332]	; (a854 <Initialize_Demo+0x274>)
    a708:	4c53      	ldr	r4, [pc, #332]	; (a858 <Initialize_Demo+0x278>)
    a70a:	47a0      	blx	r4
		printf(" - PA boost: %d\r\n", paBoost) ;
    a70c:	7831      	ldrb	r1, [r6, #0]
    a70e:	4853      	ldr	r0, [pc, #332]	; (a85c <Initialize_Demo+0x27c>)
    a710:	47a0      	blx	r4
		printf(" - Spreading factor: SF%d\r\n", sf) ;
    a712:	7829      	ldrb	r1, [r5, #0]
    a714:	4852      	ldr	r0, [pc, #328]	; (a860 <Initialize_Demo+0x280>)
    a716:	47a0      	blx	r4
		printf(" - Bandwidth (125kHz=7, 250kHz=8, 500kHz=9): %d", bw) ;
    a718:	464b      	mov	r3, r9
    a71a:	7819      	ldrb	r1, [r3, #0]
    a71c:	4851      	ldr	r0, [pc, #324]	; (a864 <Initialize_Demo+0x284>)
    a71e:	47a0      	blx	r4
		printf("\r\n-----------------------------------------------------\r\n") ;
    a720:	4849      	ldr	r0, [pc, #292]	; (a848 <Initialize_Demo+0x268>)
    a722:	47b8      	blx	r7
		srand(PHY_RandomReq());
    a724:	4b36      	ldr	r3, [pc, #216]	; (a800 <Initialize_Demo+0x220>)
    a726:	4798      	blx	r3
    a728:	4b36      	ldr	r3, [pc, #216]	; (a804 <Initialize_Demo+0x224>)
    a72a:	4798      	blx	r3
		memset((uint8_t *)&invalidIEEEAddr, 0x00, LONG_ADDR_LEN);
    a72c:	2200      	movs	r2, #0
    a72e:	2300      	movs	r3, #0
    a730:	9204      	str	r2, [sp, #16]
    a732:	9305      	str	r3, [sp, #20]
		if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    a734:	4e34      	ldr	r6, [pc, #208]	; (a808 <Initialize_Demo+0x228>)
    a736:	3208      	adds	r2, #8
    a738:	0031      	movs	r1, r6
    a73a:	a804      	add	r0, sp, #16
    a73c:	4d33      	ldr	r5, [pc, #204]	; (a80c <Initialize_Demo+0x22c>)
    a73e:	47a8      	blx	r5
    a740:	0004      	movs	r4, r0
		memset((uint8_t *)&invalidIEEEAddr, 0xFF, LONG_ADDR_LEN);
    a742:	2201      	movs	r2, #1
    a744:	4252      	negs	r2, r2
    a746:	17d3      	asrs	r3, r2, #31
    a748:	9204      	str	r2, [sp, #16]
    a74a:	9305      	str	r3, [sp, #20]
		if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    a74c:	3209      	adds	r2, #9
    a74e:	0031      	movs	r1, r6
    a750:	a804      	add	r0, sp, #16
    a752:	47a8      	blx	r5
    a754:	2800      	cmp	r0, #0
    a756:	d02c      	beq.n	a7b2 <Initialize_Demo+0x1d2>
		if (invalidIEEEAddrFlag)
    a758:	2c00      	cmp	r4, #0
    a75a:	d02a      	beq.n	a7b2 <Initialize_Demo+0x1d2>
		PHY_SetIEEEAddr((uint8_t *)&myLongAddress);
    a75c:	482a      	ldr	r0, [pc, #168]	; (a808 <Initialize_Demo+0x228>)
    a75e:	4b2c      	ldr	r3, [pc, #176]	; (a810 <Initialize_Demo+0x230>)
    a760:	4798      	blx	r3
        MiApp_ConnectionMode(ENABLE_ALL_CONN);
    a762:	2000      	movs	r0, #0
    a764:	4b40      	ldr	r3, [pc, #256]	; (a868 <Initialize_Demo+0x288>)
    a766:	4798      	blx	r3
        DemoOutput_Channel(myChannel, 0);
    a768:	4c40      	ldr	r4, [pc, #256]	; (a86c <Initialize_Demo+0x28c>)
    a76a:	7820      	ldrb	r0, [r4, #0]
    a76c:	2100      	movs	r1, #0
    a76e:	4b40      	ldr	r3, [pc, #256]	; (a870 <Initialize_Demo+0x290>)
    a770:	4798      	blx	r3
        if( MiApp_Set(CHANNEL, &myChannel) == false )
    a772:	0021      	movs	r1, r4
    a774:	2000      	movs	r0, #0
    a776:	4b3f      	ldr	r3, [pc, #252]	; (a874 <Initialize_Demo+0x294>)
    a778:	4798      	blx	r3
    a77a:	2800      	cmp	r0, #0
    a77c:	d023      	beq.n	a7c6 <Initialize_Demo+0x1e6>
		uint16_t broadcastAddress = 0xFFFF;
    a77e:	220e      	movs	r2, #14
    a780:	446a      	add	r2, sp
    a782:	2301      	movs	r3, #1
    a784:	425b      	negs	r3, r3
    a786:	8013      	strh	r3, [r2, #0]
		i = MiApp_EstablishConnection(myChannel, 0, (uint8_t*)&broadcastAddress, 0, Connection_Confirm);
    a788:	4b38      	ldr	r3, [pc, #224]	; (a86c <Initialize_Demo+0x28c>)
    a78a:	7818      	ldrb	r0, [r3, #0]
    a78c:	4b3a      	ldr	r3, [pc, #232]	; (a878 <Initialize_Demo+0x298>)
    a78e:	9300      	str	r3, [sp, #0]
    a790:	2300      	movs	r3, #0
    a792:	2100      	movs	r1, #0
    a794:	4c39      	ldr	r4, [pc, #228]	; (a87c <Initialize_Demo+0x29c>)
    a796:	47a0      	blx	r4
		if( i == 0xFF )
    a798:	28ff      	cmp	r0, #255	; 0xff
    a79a:	d000      	beq.n	a79e <Initialize_Demo+0x1be>
    a79c:	e75e      	b.n	a65c <Initialize_Demo+0x7c>
            MiApp_StartConnection(START_CONN_DIRECT, 10, (1L << myChannel), Connection_Confirm);
    a79e:	4b33      	ldr	r3, [pc, #204]	; (a86c <Initialize_Demo+0x28c>)
    a7a0:	781b      	ldrb	r3, [r3, #0]
    a7a2:	2201      	movs	r2, #1
    a7a4:	409a      	lsls	r2, r3
    a7a6:	4b34      	ldr	r3, [pc, #208]	; (a878 <Initialize_Demo+0x298>)
    a7a8:	210a      	movs	r1, #10
    a7aa:	2000      	movs	r0, #0
    a7ac:	4c34      	ldr	r4, [pc, #208]	; (a880 <Initialize_Demo+0x2a0>)
    a7ae:	47a0      	blx	r4
    a7b0:	e754      	b.n	a65c <Initialize_Demo+0x7c>
    a7b2:	4c15      	ldr	r4, [pc, #84]	; (a808 <Initialize_Demo+0x228>)
    a7b4:	0026      	movs	r6, r4
    a7b6:	3608      	adds	r6, #8
				*peui64++ = (uint8_t)rand();
    a7b8:	4d1b      	ldr	r5, [pc, #108]	; (a828 <Initialize_Demo+0x248>)
    a7ba:	47a8      	blx	r5
    a7bc:	7020      	strb	r0, [r4, #0]
    a7be:	3401      	adds	r4, #1
			for(i = 0; i<MY_ADDRESS_LENGTH; i++)
    a7c0:	42b4      	cmp	r4, r6
    a7c2:	d1fa      	bne.n	a7ba <Initialize_Demo+0x1da>
    a7c4:	e7ca      	b.n	a75c <Initialize_Demo+0x17c>
            DemoOutput_ChannelError(myChannel);
    a7c6:	4b29      	ldr	r3, [pc, #164]	; (a86c <Initialize_Demo+0x28c>)
    a7c8:	7818      	ldrb	r0, [r3, #0]
    a7ca:	4b2e      	ldr	r3, [pc, #184]	; (a884 <Initialize_Demo+0x2a4>)
    a7cc:	4798      	blx	r3
    a7ce:	e7d6      	b.n	a77e <Initialize_Demo+0x19e>
	startCompleteProcedure(true);
    a7d0:	2001      	movs	r0, #1
    a7d2:	4b2d      	ldr	r3, [pc, #180]	; (a888 <Initialize_Demo+0x2a8>)
    a7d4:	4798      	blx	r3
    a7d6:	e746      	b.n	a666 <Initialize_Demo+0x86>
	SwTimerStart (PeriodicTxTimerId, MS_TO_US(INITIAL_DATA_SENDING_INTERVAL_MS), 0/*SW_TIMEOUT_RELATIVE*/, (void *)periodicTxCallback, NULL) ;
    a7d8:	4b10      	ldr	r3, [pc, #64]	; (a81c <Initialize_Demo+0x23c>)
    a7da:	7818      	ldrb	r0, [r3, #0]
    a7dc:	2300      	movs	r3, #0
    a7de:	9300      	str	r3, [sp, #0]
    a7e0:	4b13      	ldr	r3, [pc, #76]	; (a830 <Initialize_Demo+0x250>)
    a7e2:	2200      	movs	r2, #0
    a7e4:	4913      	ldr	r1, [pc, #76]	; (a834 <Initialize_Demo+0x254>)
    a7e6:	4c14      	ldr	r4, [pc, #80]	; (a838 <Initialize_Demo+0x258>)
    a7e8:	47a0      	blx	r4
    a7ea:	e746      	b.n	a67a <Initialize_Demo+0x9a>
    a7ec:	00009fe9 	.word	0x00009fe9
    a7f0:	0000e1e9 	.word	0x0000e1e9
    a7f4:	0000a5a1 	.word	0x0000a5a1
    a7f8:	0000e35d 	.word	0x0000e35d
    a7fc:	0000dc49 	.word	0x0000dc49
    a800:	0000d2e5 	.word	0x0000d2e5
    a804:	00018a45 	.word	0x00018a45
    a808:	20000020 	.word	0x20000020
    a80c:	0001833d 	.word	0x0001833d
    a810:	0000d309 	.word	0x0000d309
    a814:	2000376c 	.word	0x2000376c
    a818:	00009ab9 	.word	0x00009ab9
    a81c:	20000019 	.word	0x20000019
    a820:	00010969 	.word	0x00010969
    a824:	20000631 	.word	0x20000631
    a828:	00018aa1 	.word	0x00018aa1
    a82c:	0000e465 	.word	0x0000e465
    a830:	0000a201 	.word	0x0000a201
    a834:	001e8480 	.word	0x001e8480
    a838:	0001099d 	.word	0x0001099d
    a83c:	40002800 	.word	0x40002800
    a840:	00007a6d 	.word	0x00007a6d
    a844:	0000d1e1 	.word	0x0000d1e1
    a848:	0001a6b0 	.word	0x0001a6b0
    a84c:	00018a31 	.word	0x00018a31
    a850:	0001a6ec 	.word	0x0001a6ec
    a854:	0001a6fc 	.word	0x0001a6fc
    a858:	00018915 	.word	0x00018915
    a85c:	0001a718 	.word	0x0001a718
    a860:	0001a72c 	.word	0x0001a72c
    a864:	0001a748 	.word	0x0001a748
    a868:	0000e1c9 	.word	0x0000e1c9
    a86c:	2000001a 	.word	0x2000001a
    a870:	00009891 	.word	0x00009891
    a874:	0000dc25 	.word	0x0000dc25
    a878:	0000a52d 	.word	0x0000a52d
    a87c:	0000f2d9 	.word	0x0000f2d9
    a880:	0000e3bd 	.word	0x0000e3bd
    a884:	000099fd 	.word	0x000099fd
    a888:	0000e371 	.word	0x0000e371

0000a88c <Run_Demo>:

void Run_Demo(void)
{
    a88c:	b510      	push	{r4, lr}
    P2PTasks();
    a88e:	4b02      	ldr	r3, [pc, #8]	; (a898 <Run_Demo+0xc>)
    a890:	4798      	blx	r3
    run_star_demo();   
    a892:	4b02      	ldr	r3, [pc, #8]	; (a89c <Run_Demo+0x10>)
    a894:	4798      	blx	r3
    a896:	bd10      	pop	{r4, pc}
    a898:	0000e485 	.word	0x0000e485
    a89c:	00009cad 	.word	0x00009cad

0000a8a0 <LCD_Initialize>:
* Overview:         Configure the LCD
*
* Note:             None
********************************************************************/
void LCD_Initialize(void)
{
    a8a0:	b510      	push	{r4, lr}
	gfx_mono_init();
    a8a2:	4b01      	ldr	r3, [pc, #4]	; (a8a8 <LCD_Initialize+0x8>)
    a8a4:	4798      	blx	r3
}    
    a8a6:	bd10      	pop	{r4, pc}
    a8a8:	000049e1 	.word	0x000049e1

0000a8ac <LCD_Erase>:
* Overview:         Clears LCD display
*
* Note:             None
********************************************************************/
void LCD_Erase(void)
{
    a8ac:	b510      	push	{r4, lr}
    a8ae:	b082      	sub	sp, #8
    /* Clear screen */
	gfx_mono_draw_filled_rect(0, 0, GFX_MONO_LCD_WIDTH, GFX_MONO_LCD_HEIGHT,
    a8b0:	2300      	movs	r3, #0
    a8b2:	9300      	str	r3, [sp, #0]
    a8b4:	3320      	adds	r3, #32
    a8b6:	2280      	movs	r2, #128	; 0x80
    a8b8:	2100      	movs	r1, #0
    a8ba:	2000      	movs	r0, #0
    a8bc:	4c01      	ldr	r4, [pc, #4]	; (a8c4 <LCD_Erase+0x18>)
    a8be:	47a0      	blx	r4
	GFX_PIXEL_CLR);
}
    a8c0:	b002      	add	sp, #8
    a8c2:	bd10      	pop	{r4, pc}
    a8c4:	00004839 	.word	0x00004839

0000a8c8 <LCD_Update>:
* Overview:         LCD displays message
*
* Note:             None
********************************************************************/
void LCD_Update(void)
{
    a8c8:	b510      	push	{r4, lr}
	gfx_mono_draw_string(LCDText, 0, 0, &sysfont);
    a8ca:	4b03      	ldr	r3, [pc, #12]	; (a8d8 <LCD_Update+0x10>)
    a8cc:	2200      	movs	r2, #0
    a8ce:	2100      	movs	r1, #0
    a8d0:	4802      	ldr	r0, [pc, #8]	; (a8dc <LCD_Update+0x14>)
    a8d2:	4c03      	ldr	r4, [pc, #12]	; (a8e0 <LCD_Update+0x18>)
    a8d4:	47a0      	blx	r4
}
    a8d6:	bd10      	pop	{r4, pc}
    a8d8:	20000008 	.word	0x20000008
    a8dc:	200025c8 	.word	0x200025c8
    a8e0:	0000493d 	.word	0x0000493d

0000a8e4 <LCDTRXCount>:
 *
 * Note:            This routine is only effective if Explorer16 or
 *                  PIC18 Explorer demo boards are used
 ********************************************************************/
void LCDTRXCount(uint8_t txCount, uint8_t rxCount)
{
    a8e4:	b570      	push	{r4, r5, r6, lr}
    a8e6:	b082      	sub	sp, #8
    a8e8:	0005      	movs	r5, r0
    a8ea:	000e      	movs	r6, r1
	/* Clear screen */
	gfx_mono_draw_filled_rect(0, 0, GFX_MONO_LCD_WIDTH, GFX_MONO_LCD_HEIGHT/2, 
    a8ec:	2300      	movs	r3, #0
    a8ee:	9300      	str	r3, [sp, #0]
    a8f0:	3310      	adds	r3, #16
    a8f2:	2280      	movs	r2, #128	; 0x80
    a8f4:	2100      	movs	r1, #0
    a8f6:	2000      	movs	r0, #0
    a8f8:	4c0a      	ldr	r4, [pc, #40]	; (a924 <LCDTRXCount+0x40>)
    a8fa:	47a0      	blx	r4
	GFX_PIXEL_CLR);
    snprintf(LCDText, sizeof(LCDText), "TX Messages: %d \nRX Messages: %d", txCount, rxCount);
    a8fc:	4c0a      	ldr	r4, [pc, #40]	; (a928 <LCDTRXCount+0x44>)
    a8fe:	9600      	str	r6, [sp, #0]
    a900:	002b      	movs	r3, r5
    a902:	4a0a      	ldr	r2, [pc, #40]	; (a92c <LCDTRXCount+0x48>)
    a904:	2141      	movs	r1, #65	; 0x41
    a906:	0020      	movs	r0, r4
    a908:	4d09      	ldr	r5, [pc, #36]	; (a930 <LCDTRXCount+0x4c>)
    a90a:	47a8      	blx	r5
    gfx_mono_draw_string(LCDText, 0, 0, &sysfont); 
    a90c:	4b09      	ldr	r3, [pc, #36]	; (a934 <LCDTRXCount+0x50>)
    a90e:	2200      	movs	r2, #0
    a910:	2100      	movs	r1, #0
    a912:	0020      	movs	r0, r4
    a914:	4c08      	ldr	r4, [pc, #32]	; (a938 <LCDTRXCount+0x54>)
    a916:	47a0      	blx	r4
	delay_ms(200);
    a918:	20c8      	movs	r0, #200	; 0xc8
    a91a:	4b08      	ldr	r3, [pc, #32]	; (a93c <LCDTRXCount+0x58>)
    a91c:	4798      	blx	r3
}
    a91e:	b002      	add	sp, #8
    a920:	bd70      	pop	{r4, r5, r6, pc}
    a922:	46c0      	nop			; (mov r8, r8)
    a924:	00004839 	.word	0x00004839
    a928:	200025c8 	.word	0x200025c8
    a92c:	0001a778 	.word	0x0001a778
    a930:	00018c85 	.word	0x00018c85
    a934:	20000008 	.word	0x20000008
    a938:	0000493d 	.word	0x0000493d
    a93c:	00004719 	.word	0x00004719

0000a940 <LCDDisplay>:
 *
 * Note:            This routine is only effective if Explorer16 or
 *                  PIC18 Explorer demo boards are used
 ********************************************************************/
void LCDDisplay(char *text, uint8_t value, bool delay)
{
    a940:	b5f0      	push	{r4, r5, r6, r7, lr}
    a942:	b083      	sub	sp, #12
    a944:	0005      	movs	r5, r0
    a946:	000c      	movs	r4, r1
    a948:	0016      	movs	r6, r2
	/* Clear screen */	
	gfx_mono_draw_filled_rect(0, 0, GFX_MONO_LCD_WIDTH, GFX_MONO_LCD_HEIGHT,
    a94a:	2300      	movs	r3, #0
    a94c:	9300      	str	r3, [sp, #0]
    a94e:	3320      	adds	r3, #32
    a950:	2280      	movs	r2, #128	; 0x80
    a952:	2100      	movs	r1, #0
    a954:	2000      	movs	r0, #0
    a956:	4f13      	ldr	r7, [pc, #76]	; (a9a4 <LCDDisplay+0x64>)
    a958:	47b8      	blx	r7
			GFX_PIXEL_CLR);    

    snprintf(LCDText, sizeof(LCDText), text);
    a95a:	002a      	movs	r2, r5
    a95c:	2141      	movs	r1, #65	; 0x41
    a95e:	4812      	ldr	r0, [pc, #72]	; (a9a8 <LCDDisplay+0x68>)
    a960:	4b12      	ldr	r3, [pc, #72]	; (a9ac <LCDDisplay+0x6c>)
    a962:	4798      	blx	r3

    if (value)
    a964:	2c00      	cmp	r4, #0
    a966:	d00d      	beq.n	a984 <LCDDisplay+0x44>
    a968:	2000      	movs	r0, #0
    {
		uint8_t char_count = 0;
		do {
           ++char_count;
    a96a:	3001      	adds	r0, #1
    a96c:	b2c0      	uxtb	r0, r0
		} while (*(++text));
    a96e:	3501      	adds	r5, #1
    a970:	782b      	ldrb	r3, [r5, #0]
    a972:	2b00      	cmp	r3, #0
    a974:	d1f9      	bne.n	a96a <LCDDisplay+0x2a>
		
	    snprintf(LCDText+char_count, sizeof(LCDText), "%d", value);
    a976:	4b0c      	ldr	r3, [pc, #48]	; (a9a8 <LCDDisplay+0x68>)
    a978:	18c0      	adds	r0, r0, r3
    a97a:	0023      	movs	r3, r4
    a97c:	4a0c      	ldr	r2, [pc, #48]	; (a9b0 <LCDDisplay+0x70>)
    a97e:	2141      	movs	r1, #65	; 0x41
    a980:	4c0a      	ldr	r4, [pc, #40]	; (a9ac <LCDDisplay+0x6c>)
    a982:	47a0      	blx	r4
	}
	    
	gfx_mono_draw_string(LCDText, 0, 0, &sysfont);
    a984:	4b0b      	ldr	r3, [pc, #44]	; (a9b4 <LCDDisplay+0x74>)
    a986:	2200      	movs	r2, #0
    a988:	2100      	movs	r1, #0
    a98a:	4807      	ldr	r0, [pc, #28]	; (a9a8 <LCDDisplay+0x68>)
    a98c:	4c0a      	ldr	r4, [pc, #40]	; (a9b8 <LCDDisplay+0x78>)
    a98e:	47a0      	blx	r4
	
	if(delay)
    a990:	2e00      	cmp	r6, #0
    a992:	d101      	bne.n	a998 <LCDDisplay+0x58>
	{
	  delay_s(2);
	}
}
    a994:	b003      	add	sp, #12
    a996:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  delay_s(2);
    a998:	20fa      	movs	r0, #250	; 0xfa
    a99a:	00c0      	lsls	r0, r0, #3
    a99c:	4b07      	ldr	r3, [pc, #28]	; (a9bc <LCDDisplay+0x7c>)
    a99e:	4798      	blx	r3
}
    a9a0:	e7f8      	b.n	a994 <LCDDisplay+0x54>
    a9a2:	46c0      	nop			; (mov r8, r8)
    a9a4:	00004839 	.word	0x00004839
    a9a8:	200025c8 	.word	0x200025c8
    a9ac:	00018c85 	.word	0x00018c85
    a9b0:	00019ffc 	.word	0x00019ffc
    a9b4:	20000008 	.word	0x20000008
    a9b8:	0000493d 	.word	0x0000493d
    a9bc:	00004719 	.word	0x00004719

0000a9c0 <CompareData>:
     Otherwise it is the start address of the buffer that contains the data to compare with
    \param numberOfBytes The number of bytes to compare
    \note offset+numberOfBytes must be <= D_NV_SECTOR_SIZE (meaning sector crossing is not permitted)
*/
static bool CompareData(uint8_t sector, uint16_t offset, uint8_t *pBuffer, D_Nv_Size_t numberOfBytes)
{
    a9c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a9c2:	46c6      	mov	lr, r8
    a9c4:	b500      	push	{lr}
    a9c6:	b084      	sub	sp, #16
    a9c8:	0014      	movs	r4, r2
    a9ca:	001f      	movs	r7, r3
  uint32_t address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE + offset;
    a9cc:	4b29      	ldr	r3, [pc, #164]	; (aa74 <CompareData+0xb4>)
    a9ce:	18cb      	adds	r3, r1, r3
    a9d0:	0340      	lsls	r0, r0, #13
    a9d2:	181d      	adds	r5, r3, r0
  uint8_t  buffer[16U];

  assert(numberOfBytes);
    a9d4:	2f00      	cmp	r7, #0
    a9d6:	d01a      	beq.n	aa0e <CompareData+0x4e>
  assert(address <= D_NV_MEMORY_END);
    a9d8:	4b27      	ldr	r3, [pc, #156]	; (aa78 <CompareData+0xb8>)
    a9da:	1e5a      	subs	r2, r3, #1
    a9dc:	4295      	cmp	r5, r2
    a9de:	d81c      	bhi.n	aa1a <CompareData+0x5a>
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    a9e0:	197a      	adds	r2, r7, r5
    a9e2:	4293      	cmp	r3, r2
    a9e4:	d31f      	bcc.n	aa26 <CompareData+0x66>
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    a9e6:	19c9      	adds	r1, r1, r7
    a9e8:	2380      	movs	r3, #128	; 0x80
    a9ea:	019b      	lsls	r3, r3, #6
    a9ec:	4299      	cmp	r1, r3
    a9ee:	d820      	bhi.n	aa32 <CompareData+0x72>

  while(numberOfBytes)
  {
    uint16_t bytesToRead = MIN(sizeof(buffer), numberOfBytes);

    memcpy(buffer, (uint8_t FLASH_PTR *)address, bytesToRead);
    a9f0:	4b22      	ldr	r3, [pc, #136]	; (aa7c <CompareData+0xbc>)
    a9f2:	4698      	mov	r8, r3
    uint16_t bytesToRead = MIN(sizeof(buffer), numberOfBytes);
    a9f4:	1c3e      	adds	r6, r7, #0
    a9f6:	2f10      	cmp	r7, #16
    a9f8:	d900      	bls.n	a9fc <CompareData+0x3c>
    a9fa:	2610      	movs	r6, #16
    a9fc:	b2b6      	uxth	r6, r6
    memcpy(buffer, (uint8_t FLASH_PTR *)address, bytesToRead);
    a9fe:	0032      	movs	r2, r6
    aa00:	0029      	movs	r1, r5
    aa02:	4668      	mov	r0, sp
    aa04:	47c0      	blx	r8
    for (uint8_t i = 0U; i < bytesToRead; i++)
    aa06:	2e00      	cmp	r6, #0
    aa08:	d028      	beq.n	aa5c <CompareData+0x9c>
    aa0a:	2300      	movs	r3, #0
    aa0c:	e01f      	b.n	aa4e <CompareData+0x8e>
  assert(numberOfBytes);
    aa0e:	4b1c      	ldr	r3, [pc, #112]	; (aa80 <CompareData+0xc0>)
    aa10:	4a1c      	ldr	r2, [pc, #112]	; (aa84 <CompareData+0xc4>)
    aa12:	21d9      	movs	r1, #217	; 0xd9
    aa14:	481c      	ldr	r0, [pc, #112]	; (aa88 <CompareData+0xc8>)
    aa16:	4c1d      	ldr	r4, [pc, #116]	; (aa8c <CompareData+0xcc>)
    aa18:	47a0      	blx	r4
  assert(address <= D_NV_MEMORY_END);
    aa1a:	4b1d      	ldr	r3, [pc, #116]	; (aa90 <CompareData+0xd0>)
    aa1c:	4a19      	ldr	r2, [pc, #100]	; (aa84 <CompareData+0xc4>)
    aa1e:	21da      	movs	r1, #218	; 0xda
    aa20:	4819      	ldr	r0, [pc, #100]	; (aa88 <CompareData+0xc8>)
    aa22:	4c1a      	ldr	r4, [pc, #104]	; (aa8c <CompareData+0xcc>)
    aa24:	47a0      	blx	r4
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    aa26:	4b1b      	ldr	r3, [pc, #108]	; (aa94 <CompareData+0xd4>)
    aa28:	4a16      	ldr	r2, [pc, #88]	; (aa84 <CompareData+0xc4>)
    aa2a:	21db      	movs	r1, #219	; 0xdb
    aa2c:	4816      	ldr	r0, [pc, #88]	; (aa88 <CompareData+0xc8>)
    aa2e:	4c17      	ldr	r4, [pc, #92]	; (aa8c <CompareData+0xcc>)
    aa30:	47a0      	blx	r4
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    aa32:	4b19      	ldr	r3, [pc, #100]	; (aa98 <CompareData+0xd8>)
    aa34:	4a13      	ldr	r2, [pc, #76]	; (aa84 <CompareData+0xc4>)
    aa36:	21dc      	movs	r1, #220	; 0xdc
    aa38:	4813      	ldr	r0, [pc, #76]	; (aa88 <CompareData+0xc8>)
    aa3a:	4c14      	ldr	r4, [pc, #80]	; (aa8c <CompareData+0xcc>)
    aa3c:	47a0      	blx	r4
      if (buffer[i] != ((pBuffer != NULL) ? *(pBuffer++) : 0xFF))
    aa3e:	21ff      	movs	r1, #255	; 0xff
    aa40:	4291      	cmp	r1, r2
    aa42:	d112      	bne.n	aa6a <CompareData+0xaa>
    for (uint8_t i = 0U; i < bytesToRead; i++)
    aa44:	3301      	adds	r3, #1
    aa46:	b2db      	uxtb	r3, r3
    aa48:	b29a      	uxth	r2, r3
    aa4a:	4296      	cmp	r6, r2
    aa4c:	d906      	bls.n	aa5c <CompareData+0x9c>
      if (buffer[i] != ((pBuffer != NULL) ? *(pBuffer++) : 0xFF))
    aa4e:	466a      	mov	r2, sp
    aa50:	5cd2      	ldrb	r2, [r2, r3]
    aa52:	2c00      	cmp	r4, #0
    aa54:	d0f3      	beq.n	aa3e <CompareData+0x7e>
    aa56:	7821      	ldrb	r1, [r4, #0]
    aa58:	3401      	adds	r4, #1
    aa5a:	e7f1      	b.n	aa40 <CompareData+0x80>
        return false;

    numberOfBytes -= bytesToRead;
    aa5c:	1bbf      	subs	r7, r7, r6
    aa5e:	b2bf      	uxth	r7, r7
    address += bytesToRead;
    aa60:	19ad      	adds	r5, r5, r6
  while(numberOfBytes)
    aa62:	2f00      	cmp	r7, #0
    aa64:	d1c6      	bne.n	a9f4 <CompareData+0x34>
  }

  return true;
    aa66:	2001      	movs	r0, #1
    aa68:	e000      	b.n	aa6c <CompareData+0xac>
        return false;
    aa6a:	2000      	movs	r0, #0
}
    aa6c:	b004      	add	sp, #16
    aa6e:	bc04      	pop	{r2}
    aa70:	4690      	mov	r8, r2
    aa72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    aa74:	00000400 	.word	0x00000400
    aa78:	00004400 	.word	0x00004400
    aa7c:	0001835b 	.word	0x0001835b
    aa80:	0001a79c 	.word	0x0001a79c
    aa84:	0001a8a8 	.word	0x0001a8a8
    aa88:	0001a7ac 	.word	0x0001a7ac
    aa8c:	00018299 	.word	0x00018299
    aa90:	0001a7f0 	.word	0x0001a7f0
    aa94:	0001a80c 	.word	0x0001a80c
    aa98:	0001a840 	.word	0x0001a840

0000aa9c <D_Nv_Read_Impl>:
{
    aa9c:	b570      	push	{r4, r5, r6, lr}
    aa9e:	0015      	movs	r5, r2
  uint32_t address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE + offset;
    aaa0:	0344      	lsls	r4, r0, #13
    aaa2:	4813      	ldr	r0, [pc, #76]	; (aaf0 <D_Nv_Read_Impl+0x54>)
    aaa4:	1808      	adds	r0, r1, r0
    aaa6:	1824      	adds	r4, r4, r0
  assert(address <= D_NV_MEMORY_END);
    aaa8:	4a12      	ldr	r2, [pc, #72]	; (aaf4 <D_Nv_Read_Impl+0x58>)
    aaaa:	1e50      	subs	r0, r2, #1
    aaac:	4284      	cmp	r4, r0
    aaae:	d80d      	bhi.n	aacc <D_Nv_Read_Impl+0x30>
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    aab0:	18e0      	adds	r0, r4, r3
    aab2:	4282      	cmp	r2, r0
    aab4:	d310      	bcc.n	aad8 <D_Nv_Read_Impl+0x3c>
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    aab6:	18c9      	adds	r1, r1, r3
    aab8:	2280      	movs	r2, #128	; 0x80
    aaba:	0192      	lsls	r2, r2, #6
    aabc:	4291      	cmp	r1, r2
    aabe:	d811      	bhi.n	aae4 <D_Nv_Read_Impl+0x48>
  memcpy(pBuffer, (uint8_t FLASH_PTR *)address, numberOfBytes);
    aac0:	001a      	movs	r2, r3
    aac2:	0021      	movs	r1, r4
    aac4:	0028      	movs	r0, r5
    aac6:	4b0c      	ldr	r3, [pc, #48]	; (aaf8 <D_Nv_Read_Impl+0x5c>)
    aac8:	4798      	blx	r3
}
    aaca:	bd70      	pop	{r4, r5, r6, pc}
  assert(address <= D_NV_MEMORY_END);
    aacc:	4b0b      	ldr	r3, [pc, #44]	; (aafc <D_Nv_Read_Impl+0x60>)
    aace:	4a0c      	ldr	r2, [pc, #48]	; (ab00 <D_Nv_Read_Impl+0x64>)
    aad0:	2172      	movs	r1, #114	; 0x72
    aad2:	480c      	ldr	r0, [pc, #48]	; (ab04 <D_Nv_Read_Impl+0x68>)
    aad4:	4c0c      	ldr	r4, [pc, #48]	; (ab08 <D_Nv_Read_Impl+0x6c>)
    aad6:	47a0      	blx	r4
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    aad8:	4b0c      	ldr	r3, [pc, #48]	; (ab0c <D_Nv_Read_Impl+0x70>)
    aada:	4a09      	ldr	r2, [pc, #36]	; (ab00 <D_Nv_Read_Impl+0x64>)
    aadc:	2173      	movs	r1, #115	; 0x73
    aade:	4809      	ldr	r0, [pc, #36]	; (ab04 <D_Nv_Read_Impl+0x68>)
    aae0:	4c09      	ldr	r4, [pc, #36]	; (ab08 <D_Nv_Read_Impl+0x6c>)
    aae2:	47a0      	blx	r4
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    aae4:	4b0a      	ldr	r3, [pc, #40]	; (ab10 <D_Nv_Read_Impl+0x74>)
    aae6:	4a06      	ldr	r2, [pc, #24]	; (ab00 <D_Nv_Read_Impl+0x64>)
    aae8:	2174      	movs	r1, #116	; 0x74
    aaea:	4806      	ldr	r0, [pc, #24]	; (ab04 <D_Nv_Read_Impl+0x68>)
    aaec:	4c06      	ldr	r4, [pc, #24]	; (ab08 <D_Nv_Read_Impl+0x6c>)
    aaee:	47a0      	blx	r4
    aaf0:	00000400 	.word	0x00000400
    aaf4:	00004400 	.word	0x00004400
    aaf8:	0001835b 	.word	0x0001835b
    aafc:	0001a7f0 	.word	0x0001a7f0
    ab00:	0001a870 	.word	0x0001a870
    ab04:	0001a7ac 	.word	0x0001a7ac
    ab08:	00018299 	.word	0x00018299
    ab0c:	0001a80c 	.word	0x0001a80c
    ab10:	0001a840 	.word	0x0001a840

0000ab14 <D_Nv_Write_Impl>:
{
    ab14:	b5f0      	push	{r4, r5, r6, r7, lr}
    ab16:	46de      	mov	lr, fp
    ab18:	4657      	mov	r7, sl
    ab1a:	464e      	mov	r6, r9
    ab1c:	4645      	mov	r5, r8
    ab1e:	b5e0      	push	{r5, r6, r7, lr}
    ab20:	b093      	sub	sp, #76	; 0x4c
    ab22:	9201      	str	r2, [sp, #4]
    ab24:	469a      	mov	sl, r3
  uint32_t  address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE + offset;
    ab26:	4c46      	ldr	r4, [pc, #280]	; (ac40 <D_Nv_Write_Impl+0x12c>)
    ab28:	190c      	adds	r4, r1, r4
    ab2a:	0340      	lsls	r0, r0, #13
    ab2c:	1825      	adds	r5, r4, r0
  assert(numberOfBytes);
    ab2e:	2b00      	cmp	r3, #0
    ab30:	d047      	beq.n	abc2 <D_Nv_Write_Impl+0xae>
  assert(address <= D_NV_MEMORY_END);
    ab32:	4b44      	ldr	r3, [pc, #272]	; (ac44 <D_Nv_Write_Impl+0x130>)
    ab34:	1e5a      	subs	r2, r3, #1
    ab36:	4295      	cmp	r5, r2
    ab38:	d849      	bhi.n	abce <D_Nv_Write_Impl+0xba>
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    ab3a:	4652      	mov	r2, sl
    ab3c:	1952      	adds	r2, r2, r5
    ab3e:	4293      	cmp	r3, r2
    ab40:	d34b      	bcc.n	abda <D_Nv_Write_Impl+0xc6>
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    ab42:	46d3      	mov	fp, sl
    ab44:	4451      	add	r1, sl
    ab46:	2380      	movs	r3, #128	; 0x80
    ab48:	019b      	lsls	r3, r3, #6
    ab4a:	4299      	cmp	r1, r3
    ab4c:	d84b      	bhi.n	abe6 <D_Nv_Write_Impl+0xd2>
  if (s_pfSystemCheckCallback != NULL)
    ab4e:	4b3e      	ldr	r3, [pc, #248]	; (ac48 <D_Nv_Write_Impl+0x134>)
    ab50:	681b      	ldr	r3, [r3, #0]
    ab52:	2b00      	cmp	r3, #0
    ab54:	d000      	beq.n	ab58 <D_Nv_Write_Impl+0x44>
    s_pfSystemCheckCallback();
    ab56:	4798      	blx	r3
  pageOffset = address % NVMCTRL_PAGE_SIZE;
    ab58:	273f      	movs	r7, #63	; 0x3f
    ab5a:	402f      	ands	r7, r5
  pageStart = address - pageOffset;
    ab5c:	1bec      	subs	r4, r5, r7
  numberOfPageBytes = MIN((NVMCTRL_PAGE_SIZE - pageOffset), numberOfBytes);
    ab5e:	2640      	movs	r6, #64	; 0x40
    ab60:	1bf6      	subs	r6, r6, r7
    ab62:	455e      	cmp	r6, fp
    ab64:	dd00      	ble.n	ab68 <D_Nv_Write_Impl+0x54>
    ab66:	4656      	mov	r6, sl
    ab68:	b2b3      	uxth	r3, r6
    ab6a:	469b      	mov	fp, r3
  memset (page_buf, 0xFF, NVMCTRL_PAGE_SIZE);
    ab6c:	2240      	movs	r2, #64	; 0x40
    ab6e:	21ff      	movs	r1, #255	; 0xff
    ab70:	a802      	add	r0, sp, #8
    ab72:	4b36      	ldr	r3, [pc, #216]	; (ac4c <D_Nv_Write_Impl+0x138>)
    ab74:	4798      	blx	r3
  memcpy (&page_buf[pageOffset], pBuffer, numberOfPageBytes);
    ab76:	003b      	movs	r3, r7
    ab78:	aa02      	add	r2, sp, #8
    ab7a:	4694      	mov	ip, r2
    ab7c:	4463      	add	r3, ip
    ab7e:	9300      	str	r3, [sp, #0]
    ab80:	0436      	lsls	r6, r6, #16
    ab82:	0c37      	lsrs	r7, r6, #16
    ab84:	003a      	movs	r2, r7
    ab86:	9901      	ldr	r1, [sp, #4]
    ab88:	0018      	movs	r0, r3
    ab8a:	4b31      	ldr	r3, [pc, #196]	; (ac50 <D_Nv_Write_Impl+0x13c>)
    ab8c:	4798      	blx	r3
	cpu_irq_enter_critical();
    ab8e:	4b31      	ldr	r3, [pc, #196]	; (ac54 <D_Nv_Write_Impl+0x140>)
    ab90:	4798      	blx	r3
    error_code = nvm_write_buffer(pageStart, page_buf, NVMCTRL_PAGE_SIZE);
    ab92:	4e31      	ldr	r6, [pc, #196]	; (ac58 <D_Nv_Write_Impl+0x144>)
    ab94:	2240      	movs	r2, #64	; 0x40
    ab96:	a902      	add	r1, sp, #8
    ab98:	0020      	movs	r0, r4
    ab9a:	47b0      	blx	r6
  } while (error_code == STATUS_BUSY);
    ab9c:	2805      	cmp	r0, #5
    ab9e:	d0f9      	beq.n	ab94 <D_Nv_Write_Impl+0x80>
	cpu_irq_leave_critical();
    aba0:	4b2e      	ldr	r3, [pc, #184]	; (ac5c <D_Nv_Write_Impl+0x148>)
    aba2:	4798      	blx	r3
  numberOfBytes -= numberOfPageBytes;
    aba4:	4653      	mov	r3, sl
    aba6:	465a      	mov	r2, fp
    aba8:	1a9e      	subs	r6, r3, r2
    abaa:	b2b6      	uxth	r6, r6
  address += numberOfPageBytes;
    abac:	19ec      	adds	r4, r5, r7
  pBuffer += numberOfPageBytes;
    abae:	9b01      	ldr	r3, [sp, #4]
    abb0:	4699      	mov	r9, r3
    abb2:	44b9      	add	r9, r7
  while (0U < numberOfBytes)
    abb4:	2e00      	cmp	r6, #0
    abb6:	d03b      	beq.n	ac30 <D_Nv_Write_Impl+0x11c>
    memset (page_buf, 0xFF, NVMCTRL_PAGE_SIZE);
    abb8:	4b24      	ldr	r3, [pc, #144]	; (ac4c <D_Nv_Write_Impl+0x138>)
    abba:	469b      	mov	fp, r3
    memcpy (&page_buf[pageOffset], pBuffer, numberOfPageBytes);
    abbc:	4b24      	ldr	r3, [pc, #144]	; (ac50 <D_Nv_Write_Impl+0x13c>)
    abbe:	4698      	mov	r8, r3
    abc0:	e031      	b.n	ac26 <D_Nv_Write_Impl+0x112>
  assert(numberOfBytes);
    abc2:	4b27      	ldr	r3, [pc, #156]	; (ac60 <D_Nv_Write_Impl+0x14c>)
    abc4:	4a27      	ldr	r2, [pc, #156]	; (ac64 <D_Nv_Write_Impl+0x150>)
    abc6:	218a      	movs	r1, #138	; 0x8a
    abc8:	4827      	ldr	r0, [pc, #156]	; (ac68 <D_Nv_Write_Impl+0x154>)
    abca:	4c28      	ldr	r4, [pc, #160]	; (ac6c <D_Nv_Write_Impl+0x158>)
    abcc:	47a0      	blx	r4
  assert(address <= D_NV_MEMORY_END);
    abce:	4b28      	ldr	r3, [pc, #160]	; (ac70 <D_Nv_Write_Impl+0x15c>)
    abd0:	4a24      	ldr	r2, [pc, #144]	; (ac64 <D_Nv_Write_Impl+0x150>)
    abd2:	218b      	movs	r1, #139	; 0x8b
    abd4:	4824      	ldr	r0, [pc, #144]	; (ac68 <D_Nv_Write_Impl+0x154>)
    abd6:	4c25      	ldr	r4, [pc, #148]	; (ac6c <D_Nv_Write_Impl+0x158>)
    abd8:	47a0      	blx	r4
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    abda:	4b26      	ldr	r3, [pc, #152]	; (ac74 <D_Nv_Write_Impl+0x160>)
    abdc:	4a21      	ldr	r2, [pc, #132]	; (ac64 <D_Nv_Write_Impl+0x150>)
    abde:	218c      	movs	r1, #140	; 0x8c
    abe0:	4821      	ldr	r0, [pc, #132]	; (ac68 <D_Nv_Write_Impl+0x154>)
    abe2:	4c22      	ldr	r4, [pc, #136]	; (ac6c <D_Nv_Write_Impl+0x158>)
    abe4:	47a0      	blx	r4
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    abe6:	4b24      	ldr	r3, [pc, #144]	; (ac78 <D_Nv_Write_Impl+0x164>)
    abe8:	4a1e      	ldr	r2, [pc, #120]	; (ac64 <D_Nv_Write_Impl+0x150>)
    abea:	218d      	movs	r1, #141	; 0x8d
    abec:	481e      	ldr	r0, [pc, #120]	; (ac68 <D_Nv_Write_Impl+0x154>)
    abee:	4c1f      	ldr	r4, [pc, #124]	; (ac6c <D_Nv_Write_Impl+0x158>)
    abf0:	47a0      	blx	r4
    numberOfPageBytes = MIN(NVMCTRL_PAGE_SIZE, numberOfBytes);
    abf2:	b29f      	uxth	r7, r3
    memset (page_buf, 0xFF, NVMCTRL_PAGE_SIZE);
    abf4:	2240      	movs	r2, #64	; 0x40
    abf6:	21ff      	movs	r1, #255	; 0xff
    abf8:	a802      	add	r0, sp, #8
    abfa:	47d8      	blx	fp
    memcpy (&page_buf[pageOffset], pBuffer, numberOfPageBytes);
    abfc:	003a      	movs	r2, r7
    abfe:	4649      	mov	r1, r9
    ac00:	9800      	ldr	r0, [sp, #0]
    ac02:	47c0      	blx	r8
	cpu_irq_enter_critical();
    ac04:	4b13      	ldr	r3, [pc, #76]	; (ac54 <D_Nv_Write_Impl+0x140>)
    ac06:	4798      	blx	r3
      error_code = nvm_write_buffer(address, page_buf, NVMCTRL_PAGE_SIZE);
    ac08:	4d13      	ldr	r5, [pc, #76]	; (ac58 <D_Nv_Write_Impl+0x144>)
    ac0a:	2240      	movs	r2, #64	; 0x40
    ac0c:	a902      	add	r1, sp, #8
    ac0e:	0020      	movs	r0, r4
    ac10:	47a8      	blx	r5
    } while (error_code == STATUS_BUSY);
    ac12:	2805      	cmp	r0, #5
    ac14:	d0f9      	beq.n	ac0a <D_Nv_Write_Impl+0xf6>
	cpu_irq_leave_critical();
    ac16:	4b11      	ldr	r3, [pc, #68]	; (ac5c <D_Nv_Write_Impl+0x148>)
    ac18:	4798      	blx	r3
    numberOfBytes -= numberOfPageBytes;
    ac1a:	1bf6      	subs	r6, r6, r7
    ac1c:	b2b6      	uxth	r6, r6
    address += numberOfPageBytes;
    ac1e:	19e4      	adds	r4, r4, r7
    pBuffer += numberOfPageBytes;
    ac20:	44b9      	add	r9, r7
  while (0U < numberOfBytes)
    ac22:	2e00      	cmp	r6, #0
    ac24:	d004      	beq.n	ac30 <D_Nv_Write_Impl+0x11c>
    numberOfPageBytes = MIN(NVMCTRL_PAGE_SIZE, numberOfBytes);
    ac26:	1c33      	adds	r3, r6, #0
    ac28:	2e40      	cmp	r6, #64	; 0x40
    ac2a:	d9e2      	bls.n	abf2 <D_Nv_Write_Impl+0xde>
    ac2c:	2340      	movs	r3, #64	; 0x40
    ac2e:	e7e0      	b.n	abf2 <D_Nv_Write_Impl+0xde>
}
    ac30:	b013      	add	sp, #76	; 0x4c
    ac32:	bc3c      	pop	{r2, r3, r4, r5}
    ac34:	4690      	mov	r8, r2
    ac36:	4699      	mov	r9, r3
    ac38:	46a2      	mov	sl, r4
    ac3a:	46ab      	mov	fp, r5
    ac3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ac3e:	46c0      	nop			; (mov r8, r8)
    ac40:	00000400 	.word	0x00000400
    ac44:	00004400 	.word	0x00004400
    ac48:	20000634 	.word	0x20000634
    ac4c:	0001836d 	.word	0x0001836d
    ac50:	0001835b 	.word	0x0001835b
    ac54:	00004aa1 	.word	0x00004aa1
    ac58:	00005011 	.word	0x00005011
    ac5c:	00004ae1 	.word	0x00004ae1
    ac60:	0001a79c 	.word	0x0001a79c
    ac64:	0001a880 	.word	0x0001a880
    ac68:	0001a7ac 	.word	0x0001a7ac
    ac6c:	00018299 	.word	0x00018299
    ac70:	0001a7f0 	.word	0x0001a7f0
    ac74:	0001a80c 	.word	0x0001a80c
    ac78:	0001a840 	.word	0x0001a840

0000ac7c <D_Nv_EraseSector_Impl>:
{
    ac7c:	b570      	push	{r4, r5, r6, lr}
  uint32_t address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE;
    ac7e:	0344      	lsls	r4, r0, #13
    ac80:	480c      	ldr	r0, [pc, #48]	; (acb4 <D_Nv_EraseSector_Impl+0x38>)
    ac82:	1824      	adds	r4, r4, r0
  address &= ~(NVMCTRL_ROW_SIZE - 1);
    ac84:	23ff      	movs	r3, #255	; 0xff
    ac86:	439c      	bics	r4, r3
  assert(address <= D_NV_MEMORY_END);
    ac88:	4b0b      	ldr	r3, [pc, #44]	; (acb8 <D_Nv_EraseSector_Impl+0x3c>)
    ac8a:	3b01      	subs	r3, #1
    ac8c:	2280      	movs	r2, #128	; 0x80
    ac8e:	0192      	lsls	r2, r2, #6
    ac90:	18a6      	adds	r6, r4, r2
    ac92:	429c      	cmp	r4, r3
    ac94:	d807      	bhi.n	aca6 <D_Nv_EraseSector_Impl+0x2a>
    nvm_erase_row (address);
    ac96:	4d09      	ldr	r5, [pc, #36]	; (acbc <D_Nv_EraseSector_Impl+0x40>)
    ac98:	0020      	movs	r0, r4
    ac9a:	47a8      	blx	r5
    address += NVMCTRL_ROW_SIZE;
    ac9c:	3401      	adds	r4, #1
    ac9e:	34ff      	adds	r4, #255	; 0xff
  for (uint8_t i = 0U; i < (D_NV_SECTOR_SIZE / NVMCTRL_ROW_SIZE); i++)
    aca0:	42b4      	cmp	r4, r6
    aca2:	d1f9      	bne.n	ac98 <D_Nv_EraseSector_Impl+0x1c>
}
    aca4:	bd70      	pop	{r4, r5, r6, pc}
  assert(address <= D_NV_MEMORY_END);
    aca6:	4b06      	ldr	r3, [pc, #24]	; (acc0 <D_Nv_EraseSector_Impl+0x44>)
    aca8:	4a06      	ldr	r2, [pc, #24]	; (acc4 <D_Nv_EraseSector_Impl+0x48>)
    acaa:	21c2      	movs	r1, #194	; 0xc2
    acac:	4806      	ldr	r0, [pc, #24]	; (acc8 <D_Nv_EraseSector_Impl+0x4c>)
    acae:	4c07      	ldr	r4, [pc, #28]	; (accc <D_Nv_EraseSector_Impl+0x50>)
    acb0:	47a0      	blx	r4
    acb2:	46c0      	nop			; (mov r8, r8)
    acb4:	00000400 	.word	0x00000400
    acb8:	00004400 	.word	0x00004400
    acbc:	000050e9 	.word	0x000050e9
    acc0:	0001a7f0 	.word	0x0001a7f0
    acc4:	0001a890 	.word	0x0001a890
    acc8:	0001a7ac 	.word	0x0001a7ac
    accc:	00018299 	.word	0x00018299

0000acd0 <D_Nv_IsEmpty_Impl>:
    \param numberOfBytes The number of bytes to check
    \returns true if the range is empty, FALSE otherwise.
    \note Sector crossing is not permitted
*/
bool D_Nv_IsEmpty(uint8_t sector, uint16_t offset, D_Nv_Size_t numberOfBytes)
{
    acd0:	b510      	push	{r4, lr}
    acd2:	0013      	movs	r3, r2
  return CompareData(sector, offset, NULL, numberOfBytes);
    acd4:	2200      	movs	r2, #0
    acd6:	4c01      	ldr	r4, [pc, #4]	; (acdc <D_Nv_IsEmpty_Impl+0xc>)
    acd8:	47a0      	blx	r4
}
    acda:	bd10      	pop	{r4, pc}
    acdc:	0000a9c1 	.word	0x0000a9c1

0000ace0 <D_Nv_IsEqual_Impl>:
    \param[in] pBuffer The start address of the buffer that contains the data to compare with
    \param numberOfBytes The number of bytes to compare
    \note offset+numberOfBytes must be <= D_NV_SECTOR_SIZE (meaning sector crossing is not permitted)
*/
bool D_Nv_IsEqual(uint8_t sector, uint16_t offset, uint8_t *pBuffer, D_Nv_Size_t numberOfBytes)
{
    ace0:	b510      	push	{r4, lr}
  return CompareData(sector, offset, pBuffer, numberOfBytes);
    ace2:	4c01      	ldr	r4, [pc, #4]	; (ace8 <D_Nv_IsEqual_Impl+0x8>)
    ace4:	47a0      	blx	r4
}
    ace6:	bd10      	pop	{r4, pc}
    ace8:	0000a9c1 	.word	0x0000a9c1

0000acec <PowerSupplyTooLow>:
/** Check the power supply.
    \returns TRUE if the power supply is too low, FALSE when the the power
             supply is OK or when there is no callback installed.
*/
static bool PowerSupplyTooLow()
{
    acec:	b510      	push	{r4, lr}
    bool result = false;
    if ( s_powerSupplyCheckingFunction != NULL )
    acee:	4b05      	ldr	r3, [pc, #20]	; (ad04 <PowerSupplyTooLow+0x18>)
    acf0:	681b      	ldr	r3, [r3, #0]
    acf2:	2b00      	cmp	r3, #0
    acf4:	d004      	beq.n	ad00 <PowerSupplyTooLow+0x14>
    {
        if ( !s_powerSupplyCheckingFunction() )
    acf6:	4798      	blx	r3
    acf8:	2301      	movs	r3, #1
    acfa:	4058      	eors	r0, r3
    acfc:	b2c0      	uxtb	r0, r0
        {
            result = true;
        }
    }
    return result;
}
    acfe:	bd10      	pop	{r4, pc}
    bool result = false;
    ad00:	2000      	movs	r0, #0
    ad02:	e7fc      	b.n	acfe <PowerSupplyTooLow+0x12>
    ad04:	200007a8 	.word	0x200007a8

0000ad08 <UpdateSectorHead>:
*/

static void UpdateSectorHead(uint16_t increment, ItemAlignment_t itemAlignment )
{
    // Adjust the sector head according to the increment and alignment given
    switch(itemAlignment)
    ad08:	2901      	cmp	r1, #1
    ad0a:	d009      	beq.n	ad20 <UpdateSectorHead+0x18>
    ad0c:	2900      	cmp	r1, #0
    ad0e:	d002      	beq.n	ad16 <UpdateSectorHead+0xe>
    ad10:	2902      	cmp	r1, #2
    ad12:	d00d      	beq.n	ad30 <UpdateSectorHead+0x28>
           s_sectorHead = (s_sectorHead + increment + 0x003Fu) & 0xFFC0u;
           break;
        default:
           break;
    }
}
    ad14:	4770      	bx	lr
           s_sectorHead = (s_sectorHead + increment);
    ad16:	4b0a      	ldr	r3, [pc, #40]	; (ad40 <UpdateSectorHead+0x38>)
    ad18:	881a      	ldrh	r2, [r3, #0]
    ad1a:	1880      	adds	r0, r0, r2
    ad1c:	8018      	strh	r0, [r3, #0]
           break;
    ad1e:	e7f9      	b.n	ad14 <UpdateSectorHead+0xc>
           s_sectorHead = (s_sectorHead + increment + 0x000Fu) & 0xFFF0u;
    ad20:	4a07      	ldr	r2, [pc, #28]	; (ad40 <UpdateSectorHead+0x38>)
    ad22:	8813      	ldrh	r3, [r2, #0]
    ad24:	330f      	adds	r3, #15
    ad26:	18c0      	adds	r0, r0, r3
    ad28:	230f      	movs	r3, #15
    ad2a:	4398      	bics	r0, r3
    ad2c:	8010      	strh	r0, [r2, #0]
           break;
    ad2e:	e7f1      	b.n	ad14 <UpdateSectorHead+0xc>
           s_sectorHead = (s_sectorHead + increment + 0x003Fu) & 0xFFC0u;
    ad30:	4a03      	ldr	r2, [pc, #12]	; (ad40 <UpdateSectorHead+0x38>)
    ad32:	8813      	ldrh	r3, [r2, #0]
    ad34:	333f      	adds	r3, #63	; 0x3f
    ad36:	18c0      	adds	r0, r0, r3
    ad38:	233f      	movs	r3, #63	; 0x3f
    ad3a:	4398      	bics	r0, r3
    ad3c:	8010      	strh	r0, [r2, #0]
}
    ad3e:	e7e9      	b.n	ad14 <UpdateSectorHead+0xc>
    ad40:	200007ae 	.word	0x200007ae

0000ad44 <ComputeCrc>:
    // item not found
    return 0x0000u;
}

static uint16_t ComputeCrc(uint8_t* pData, uint16_t length, uint16_t crc)
{
    ad44:	b530      	push	{r4, r5, lr}
    for ( /* empty */ ; length != 0u; length-- )
    ad46:	2900      	cmp	r1, #0
    ad48:	d019      	beq.n	ad7e <ComputeCrc+0x3a>
    {
        uint8_t x;
        uint8_t data;

        if (pData == NULL)
            data = 0xFF;
    ad4a:	24ff      	movs	r4, #255	; 0xff
    ad4c:	e013      	b.n	ad76 <ComputeCrc+0x32>
    ad4e:	0023      	movs	r3, r4
        else
            data = *pData;

        x = (uint8_t) ((crc >> 8) ^ data);
    ad50:	0a15      	lsrs	r5, r2, #8
    ad52:	406b      	eors	r3, r5
        x = x ^ (x >> 4);
    ad54:	091d      	lsrs	r5, r3, #4
    ad56:	406b      	eors	r3, r5
        crc = (crc << 8) ^ ((uint16_t) x << 12) ^ ((uint16_t) x << 5) ^ (uint16_t) x;
    ad58:	0212      	lsls	r2, r2, #8
    ad5a:	405a      	eors	r2, r3
    ad5c:	031d      	lsls	r5, r3, #12
    ad5e:	406a      	eors	r2, r5
    ad60:	015b      	lsls	r3, r3, #5
    ad62:	405a      	eors	r2, r3
    ad64:	b292      	uxth	r2, r2

        if ( pData != NULL )
          pData++;
    ad66:	0003      	movs	r3, r0
    ad68:	1e5d      	subs	r5, r3, #1
    ad6a:	41ab      	sbcs	r3, r5
    ad6c:	18c0      	adds	r0, r0, r3
    for ( /* empty */ ; length != 0u; length-- )
    ad6e:	3901      	subs	r1, #1
    ad70:	b289      	uxth	r1, r1
    ad72:	2900      	cmp	r1, #0
    ad74:	d003      	beq.n	ad7e <ComputeCrc+0x3a>
        if (pData == NULL)
    ad76:	2800      	cmp	r0, #0
    ad78:	d0e9      	beq.n	ad4e <ComputeCrc+0xa>
            data = *pData;
    ad7a:	7803      	ldrb	r3, [r0, #0]
    ad7c:	e7e8      	b.n	ad50 <ComputeCrc+0xc>
    }

    return crc;
}
    ad7e:	0010      	movs	r0, r2
    ad80:	bd30      	pop	{r4, r5, pc}
    ad82:	Address 0x0000ad82 is out of bounds.


0000ad84 <GatherData>:
       be copied to the flash memory \ref s_sectorHead in sector \ref s_sector.

*/

static bool GatherData(uint8_t sourceSector, uint16_t lastBlockPointer, uint16_t offset, uint16_t length, void* pData)
{
    ad84:	b5f0      	push	{r4, r5, r6, r7, lr}
    ad86:	46de      	mov	lr, fp
    ad88:	4657      	mov	r7, sl
    ad8a:	b580      	push	{r7, lr}
    ad8c:	b089      	sub	sp, #36	; 0x24
    ad8e:	9001      	str	r0, [sp, #4]
    ad90:	9102      	str	r1, [sp, #8]
    ad92:	4693      	mov	fp, r2
    uint16_t blockStart;
    uint16_t blockEnd;
    uint16_t count;

    // prepare the correct pointer
    if ( pData != NULL )
    ad94:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ad96:	2a00      	cmp	r2, #0
    ad98:	d00d      	beq.n	adb6 <GatherData+0x32>
    {
        pDestination = (uint8_t*) pData + length;
    ad9a:	4692      	mov	sl, r2
    ad9c:	449a      	add	sl, r3

    // [readStart, readEnd> is the range of data that can be read during the current
    // pass over the blocks (the range includes readStart, but not readEnd).
    // it is initialized with the requested range
    uint16_t readStart = offset;
    uint16_t readEnd = offset + length;
    ad9e:	445b      	add	r3, fp
    ada0:	b29d      	uxth	r5, r3

    // continue until we have all the data that was requested
    while ( readStart != readEnd )
    ada2:	465e      	mov	r6, fp
    ada4:	9c02      	ldr	r4, [sp, #8]
            sourcePointer -= count;
            pDestination -= count;
            D_Nv_Read(sourceSector, sourcePointer, (uint8_t*)pDestination, count);
        }
    }
    return true;
    ada6:	2001      	movs	r0, #1
    while ( readStart != readEnd )
    ada8:	45ab      	cmp	fp, r5
    adaa:	d03e      	beq.n	ae2a <GatherData+0xa6>
            D_Nv_Read(sourceSector, currentBlockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    adac:	4f22      	ldr	r7, [pc, #136]	; (ae38 <GatherData+0xb4>)
            if ( currentBlockPointer == 0x0000u )
    adae:	2c00      	cmp	r4, #0
    adb0:	d108      	bne.n	adc4 <GatherData+0x40>
                return false;
    adb2:	2000      	movs	r0, #0
    adb4:	e039      	b.n	ae2a <GatherData+0xa6>
    uint8_t* pDestination = NULL;
    adb6:	2200      	movs	r2, #0
    adb8:	4692      	mov	sl, r2
    adba:	e7f0      	b.n	ad9e <GatherData+0x1a>
            currentBlockPointer = blockHeader.previousBlock;
    adbc:	ab04      	add	r3, sp, #16
    adbe:	895c      	ldrh	r4, [r3, #10]
            if ( currentBlockPointer == 0x0000u )
    adc0:	2c00      	cmp	r4, #0
    adc2:	d031      	beq.n	ae28 <GatherData+0xa4>
            D_Nv_Read(sourceSector, currentBlockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    adc4:	2310      	movs	r3, #16
    adc6:	aa04      	add	r2, sp, #16
    adc8:	0021      	movs	r1, r4
    adca:	9801      	ldr	r0, [sp, #4]
    adcc:	47b8      	blx	r7
            blockStart = blockHeader.blockOffset;
    adce:	ab04      	add	r3, sp, #16
    add0:	889a      	ldrh	r2, [r3, #4]
            if ( (readEnd <= blockStart) || (readStart >= blockEnd) )
    add2:	42aa      	cmp	r2, r5
    add4:	d2f2      	bcs.n	adbc <GatherData+0x38>
            blockEnd = blockHeader.blockOffset + blockHeader.blockLength;
    add6:	88db      	ldrh	r3, [r3, #6]
    add8:	18d3      	adds	r3, r2, r3
    adda:	b29b      	uxth	r3, r3
            if ( (readEnd <= blockStart) || (readStart >= blockEnd) )
    addc:	42b3      	cmp	r3, r6
    adde:	d9ed      	bls.n	adbc <GatherData+0x38>
            else if ( readEnd > blockEnd )
    ade0:	42ab      	cmp	r3, r5
    ade2:	d201      	bcs.n	ade8 <GatherData+0x64>
                readStart = blockEnd;
    ade4:	001e      	movs	r6, r3
    ade6:	e7e9      	b.n	adbc <GatherData+0x38>
        uint16_t sourcePointer = (currentBlockPointer + BLOCK_HEADER_SIZE) + (readEnd - blockStart);
    ade8:	1aa9      	subs	r1, r5, r2
    adea:	b289      	uxth	r1, r1
        if ( readStart < blockStart )
    adec:	42b2      	cmp	r2, r6
    adee:	d915      	bls.n	ae1c <GatherData+0x98>
            currentBlockPointer = blockHeader.previousBlock;
    adf0:	ab04      	add	r3, sp, #16
    adf2:	895b      	ldrh	r3, [r3, #10]
    adf4:	9303      	str	r3, [sp, #12]
            count = readEnd - blockStart;
    adf6:	000b      	movs	r3, r1
        readEnd -= count;
    adf8:	1aed      	subs	r5, r5, r3
    adfa:	b2ad      	uxth	r5, r5
        if ( pDestination != NULL)
    adfc:	4652      	mov	r2, sl
    adfe:	2a00      	cmp	r2, #0
    ae00:	d008      	beq.n	ae14 <GatherData+0x90>
        uint16_t sourcePointer = (currentBlockPointer + BLOCK_HEADER_SIZE) + (readEnd - blockStart);
    ae02:	3410      	adds	r4, #16
    ae04:	1909      	adds	r1, r1, r4
            pDestination -= count;
    ae06:	1ad2      	subs	r2, r2, r3
    ae08:	4692      	mov	sl, r2
            sourcePointer -= count;
    ae0a:	1ac9      	subs	r1, r1, r3
            D_Nv_Read(sourceSector, sourcePointer, (uint8_t*)pDestination, count);
    ae0c:	b289      	uxth	r1, r1
    ae0e:	9801      	ldr	r0, [sp, #4]
    ae10:	4c09      	ldr	r4, [pc, #36]	; (ae38 <GatherData+0xb4>)
    ae12:	47a0      	blx	r4
    while ( readStart != readEnd )
    ae14:	42ae      	cmp	r6, r5
    ae16:	d00d      	beq.n	ae34 <GatherData+0xb0>
    ae18:	9c03      	ldr	r4, [sp, #12]
    ae1a:	e7c8      	b.n	adae <GatherData+0x2a>
            count = readEnd - readStart;
    ae1c:	1bab      	subs	r3, r5, r6
    ae1e:	b29b      	uxth	r3, r3
            readStart = offset;
    ae20:	465e      	mov	r6, fp
            currentBlockPointer = lastBlockPointer;
    ae22:	9a02      	ldr	r2, [sp, #8]
    ae24:	9203      	str	r2, [sp, #12]
    ae26:	e7e7      	b.n	adf8 <GatherData+0x74>
                return false;
    ae28:	2000      	movs	r0, #0
}
    ae2a:	b009      	add	sp, #36	; 0x24
    ae2c:	bc0c      	pop	{r2, r3}
    ae2e:	4692      	mov	sl, r2
    ae30:	469b      	mov	fp, r3
    ae32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return true;
    ae34:	2001      	movs	r0, #1
    ae36:	e7f8      	b.n	ae2a <GatherData+0xa6>
    ae38:	0000aa9d 	.word	0x0000aa9d

0000ae3c <ComputeDataCrc>:
{
    ae3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ae3e:	46de      	mov	lr, fp
    ae40:	4647      	mov	r7, r8
    ae42:	b580      	push	{r7, lr}
    ae44:	b087      	sub	sp, #28
    ae46:	9004      	str	r0, [sp, #16]
    ae48:	9105      	str	r1, [sp, #20]
    length = pBlockHeader->blockLength;
    ae4a:	7995      	ldrb	r5, [r2, #6]
    ae4c:	79d3      	ldrb	r3, [r2, #7]
    ae4e:	021b      	lsls	r3, r3, #8
    ae50:	431d      	orrs	r5, r3
    offset = pBlockHeader->blockOffset;
    ae52:	7917      	ldrb	r7, [r2, #4]
    ae54:	7953      	ldrb	r3, [r2, #5]
    ae56:	021b      	lsls	r3, r3, #8
    ae58:	431f      	orrs	r7, r3
    for(int8_t i= (length/sizeof(dataBlock)); i>=0; i--)
    ae5a:	0a2c      	lsrs	r4, r5, #8
    ae5c:	b264      	sxtb	r4, r4
    ae5e:	2c00      	cmp	r4, #0
    ae60:	db2f      	blt.n	aec2 <ComputeDataCrc+0x86>
    ae62:	4b1c      	ldr	r3, [pc, #112]	; (aed4 <ComputeDataCrc+0x98>)
    ae64:	9303      	str	r3, [sp, #12]
            crc = ComputeCrc(((uint8_t*) &dataBlock), dataLength, crc);
    ae66:	4b1c      	ldr	r3, [pc, #112]	; (aed8 <ComputeDataCrc+0x9c>)
    ae68:	4698      	mov	r8, r3
    ae6a:	e011      	b.n	ae90 <ComputeDataCrc+0x54>
        if (dataLength == 0)
    ae6c:	2d00      	cmp	r5, #0
    ae6e:	d02a      	beq.n	aec6 <ComputeDataCrc+0x8a>
        if (GatherData(sourceSector, blockPointer, offset, dataLength, dataBlock))
    ae70:	4b1a      	ldr	r3, [pc, #104]	; (aedc <ComputeDataCrc+0xa0>)
    ae72:	9300      	str	r3, [sp, #0]
    ae74:	002b      	movs	r3, r5
    ae76:	003a      	movs	r2, r7
    ae78:	9905      	ldr	r1, [sp, #20]
    ae7a:	9804      	ldr	r0, [sp, #16]
    ae7c:	4e18      	ldr	r6, [pc, #96]	; (aee0 <ComputeDataCrc+0xa4>)
    ae7e:	47b0      	blx	r6
    ae80:	2800      	cmp	r0, #0
    ae82:	d020      	beq.n	aec6 <ComputeDataCrc+0x8a>
    ae84:	0029      	movs	r1, r5
    ae86:	e015      	b.n	aeb4 <ComputeDataCrc+0x78>
    ae88:	3c01      	subs	r4, #1
    ae8a:	b264      	sxtb	r4, r4
    for(int8_t i= (length/sizeof(dataBlock)); i>=0; i--)
    ae8c:	1c63      	adds	r3, r4, #1
    ae8e:	d01a      	beq.n	aec6 <ComputeDataCrc+0x8a>
        if (i)
    ae90:	2c00      	cmp	r4, #0
    ae92:	d0eb      	beq.n	ae6c <ComputeDataCrc+0x30>
            length = length - sizeof(dataBlock);
    ae94:	3d01      	subs	r5, #1
    ae96:	3dff      	subs	r5, #255	; 0xff
    ae98:	b2ad      	uxth	r5, r5
        if (GatherData(sourceSector, blockPointer, offset, dataLength, dataBlock))
    ae9a:	4b10      	ldr	r3, [pc, #64]	; (aedc <ComputeDataCrc+0xa0>)
    ae9c:	9300      	str	r3, [sp, #0]
    ae9e:	2380      	movs	r3, #128	; 0x80
    aea0:	005b      	lsls	r3, r3, #1
    aea2:	003a      	movs	r2, r7
    aea4:	9905      	ldr	r1, [sp, #20]
    aea6:	9804      	ldr	r0, [sp, #16]
    aea8:	4e0d      	ldr	r6, [pc, #52]	; (aee0 <ComputeDataCrc+0xa4>)
    aeaa:	47b0      	blx	r6
    aeac:	2800      	cmp	r0, #0
    aeae:	d0eb      	beq.n	ae88 <ComputeDataCrc+0x4c>
            dataLength = sizeof(dataBlock);
    aeb0:	2180      	movs	r1, #128	; 0x80
    aeb2:	0049      	lsls	r1, r1, #1
            offset = offset+dataLength;
    aeb4:	187f      	adds	r7, r7, r1
    aeb6:	b2bf      	uxth	r7, r7
            crc = ComputeCrc(((uint8_t*) &dataBlock), dataLength, crc);
    aeb8:	9a03      	ldr	r2, [sp, #12]
    aeba:	4808      	ldr	r0, [pc, #32]	; (aedc <ComputeDataCrc+0xa0>)
    aebc:	47c0      	blx	r8
    aebe:	9003      	str	r0, [sp, #12]
    aec0:	e7e2      	b.n	ae88 <ComputeDataCrc+0x4c>
    uint16_t crc = 0xFFFFu;
    aec2:	4b04      	ldr	r3, [pc, #16]	; (aed4 <ComputeDataCrc+0x98>)
    aec4:	9303      	str	r3, [sp, #12]
}
    aec6:	9803      	ldr	r0, [sp, #12]
    aec8:	b007      	add	sp, #28
    aeca:	bc0c      	pop	{r2, r3}
    aecc:	4690      	mov	r8, r2
    aece:	469b      	mov	fp, r3
    aed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    aed2:	46c0      	nop			; (mov r8, r8)
    aed4:	0000ffff 	.word	0x0000ffff
    aed8:	0000ad45 	.word	0x0000ad45
    aedc:	20000668 	.word	0x20000668
    aee0:	0000ad85 	.word	0x0000ad85

0000aee4 <FindItemCache>:
{
    aee4:	b570      	push	{r4, r5, r6, lr}
    for ( uint8_t cacheIndex = 0u; cacheIndex < s_itemCount; cacheIndex++ )
    aee6:	4b16      	ldr	r3, [pc, #88]	; (af40 <FindItemCache+0x5c>)
    aee8:	781c      	ldrb	r4, [r3, #0]
    aeea:	2c00      	cmp	r4, #0
    aeec:	d026      	beq.n	af3c <FindItemCache+0x58>
        if ( cache->id == id )
    aeee:	4b15      	ldr	r3, [pc, #84]	; (af44 <FindItemCache+0x60>)
    aef0:	881b      	ldrh	r3, [r3, #0]
    aef2:	4283      	cmp	r3, r0
    aef4:	d016      	beq.n	af24 <FindItemCache+0x40>
    aef6:	2301      	movs	r3, #1
    aef8:	4e12      	ldr	r6, [pc, #72]	; (af44 <FindItemCache+0x60>)
    for ( uint8_t cacheIndex = 0u; cacheIndex < s_itemCount; cacheIndex++ )
    aefa:	b2da      	uxtb	r2, r3
    aefc:	4294      	cmp	r4, r2
    aefe:	d91b      	bls.n	af38 <FindItemCache+0x54>
        Item_t *cache = &s_itemCache[cacheIndex];
    af00:	001d      	movs	r5, r3
        if ( cache->id == id )
    af02:	1c59      	adds	r1, r3, #1
    af04:	009a      	lsls	r2, r3, #2
    af06:	5ab2      	ldrh	r2, [r6, r2]
    af08:	4282      	cmp	r2, r0
    af0a:	d001      	beq.n	af10 <FindItemCache+0x2c>
    af0c:	000b      	movs	r3, r1
    af0e:	e7f4      	b.n	aefa <FindItemCache+0x16>
        Item_t *cache = &s_itemCache[cacheIndex];
    af10:	009b      	lsls	r3, r3, #2
    af12:	480c      	ldr	r0, [pc, #48]	; (af44 <FindItemCache+0x60>)
    af14:	18c0      	adds	r0, r0, r3
            assert(cache->lastBlock != 0x0000);
    af16:	00ad      	lsls	r5, r5, #2
    af18:	4b0a      	ldr	r3, [pc, #40]	; (af44 <FindItemCache+0x60>)
    af1a:	195d      	adds	r5, r3, r5
    af1c:	886b      	ldrh	r3, [r5, #2]
    af1e:	2b00      	cmp	r3, #0
    af20:	d003      	beq.n	af2a <FindItemCache+0x46>
}
    af22:	bd70      	pop	{r4, r5, r6, pc}
        Item_t *cache = &s_itemCache[cacheIndex];
    af24:	4807      	ldr	r0, [pc, #28]	; (af44 <FindItemCache+0x60>)
    af26:	2500      	movs	r5, #0
    af28:	e7f5      	b.n	af16 <FindItemCache+0x32>
            assert(cache->lastBlock != 0x0000);
    af2a:	4b07      	ldr	r3, [pc, #28]	; (af48 <FindItemCache+0x64>)
    af2c:	4a07      	ldr	r2, [pc, #28]	; (af4c <FindItemCache+0x68>)
    af2e:	218c      	movs	r1, #140	; 0x8c
    af30:	31ff      	adds	r1, #255	; 0xff
    af32:	4807      	ldr	r0, [pc, #28]	; (af50 <FindItemCache+0x6c>)
    af34:	4c07      	ldr	r4, [pc, #28]	; (af54 <FindItemCache+0x70>)
    af36:	47a0      	blx	r4
    return NULL;
    af38:	2000      	movs	r0, #0
    af3a:	e7f2      	b.n	af22 <FindItemCache+0x3e>
    af3c:	2000      	movs	r0, #0
    af3e:	e7f0      	b.n	af22 <FindItemCache+0x3e>
    af40:	200007a4 	.word	0x200007a4
    af44:	20000780 	.word	0x20000780
    af48:	0001a908 	.word	0x0001a908
    af4c:	0001a9f4 	.word	0x0001a9f4
    af50:	0001a924 	.word	0x0001a924
    af54:	00018299 	.word	0x00018299

0000af58 <FindItem>:
{
    af58:	b510      	push	{r4, lr}
    Item_t *cache = FindItemCache(id);
    af5a:	4b05      	ldr	r3, [pc, #20]	; (af70 <FindItem+0x18>)
    af5c:	4798      	blx	r3
    if (cache)
    af5e:	2800      	cmp	r0, #0
    af60:	d004      	beq.n	af6c <FindItem+0x14>
        return cache->lastBlock;
    af62:	7883      	ldrb	r3, [r0, #2]
    af64:	78c0      	ldrb	r0, [r0, #3]
    af66:	0200      	lsls	r0, r0, #8
    af68:	4318      	orrs	r0, r3
}
    af6a:	bd10      	pop	{r4, pc}
    return 0x0000u;
    af6c:	2000      	movs	r0, #0
    af6e:	e7fc      	b.n	af6a <FindItem+0x12>
    af70:	0000aee5 	.word	0x0000aee5

0000af74 <CreateItemCache>:
{
    af74:	b510      	push	{r4, lr}
    af76:	0004      	movs	r4, r0
    assert(FindItemCache(id) == NULL);
    af78:	4b0e      	ldr	r3, [pc, #56]	; (afb4 <CreateItemCache+0x40>)
    af7a:	4798      	blx	r3
    af7c:	2800      	cmp	r0, #0
    af7e:	d10b      	bne.n	af98 <CreateItemCache+0x24>
    assert(s_itemCount < MAX_ITEM_COUNT);
    af80:	4b0d      	ldr	r3, [pc, #52]	; (afb8 <CreateItemCache+0x44>)
    af82:	781b      	ldrb	r3, [r3, #0]
    af84:	2b08      	cmp	r3, #8
    af86:	d80e      	bhi.n	afa6 <CreateItemCache+0x32>
    Item_t *cache = &s_itemCache[s_itemCount++];
    af88:	1c59      	adds	r1, r3, #1
    af8a:	4a0b      	ldr	r2, [pc, #44]	; (afb8 <CreateItemCache+0x44>)
    af8c:	7011      	strb	r1, [r2, #0]
    cache->id = id;
    af8e:	480b      	ldr	r0, [pc, #44]	; (afbc <CreateItemCache+0x48>)
    af90:	009b      	lsls	r3, r3, #2
    af92:	521c      	strh	r4, [r3, r0]
    Item_t *cache = &s_itemCache[s_itemCount++];
    af94:	18c0      	adds	r0, r0, r3
}
    af96:	bd10      	pop	{r4, pc}
    assert(FindItemCache(id) == NULL);
    af98:	4b09      	ldr	r3, [pc, #36]	; (afc0 <CreateItemCache+0x4c>)
    af9a:	4a0a      	ldr	r2, [pc, #40]	; (afc4 <CreateItemCache+0x50>)
    af9c:	21cc      	movs	r1, #204	; 0xcc
    af9e:	0049      	lsls	r1, r1, #1
    afa0:	4809      	ldr	r0, [pc, #36]	; (afc8 <CreateItemCache+0x54>)
    afa2:	4c0a      	ldr	r4, [pc, #40]	; (afcc <CreateItemCache+0x58>)
    afa4:	47a0      	blx	r4
    assert(s_itemCount < MAX_ITEM_COUNT);
    afa6:	4b0a      	ldr	r3, [pc, #40]	; (afd0 <CreateItemCache+0x5c>)
    afa8:	4a06      	ldr	r2, [pc, #24]	; (afc4 <CreateItemCache+0x50>)
    afaa:	219a      	movs	r1, #154	; 0x9a
    afac:	31ff      	adds	r1, #255	; 0xff
    afae:	4806      	ldr	r0, [pc, #24]	; (afc8 <CreateItemCache+0x54>)
    afb0:	4c06      	ldr	r4, [pc, #24]	; (afcc <CreateItemCache+0x58>)
    afb2:	47a0      	blx	r4
    afb4:	0000aee5 	.word	0x0000aee5
    afb8:	200007a4 	.word	0x200007a4
    afbc:	20000780 	.word	0x20000780
    afc0:	0001a8cc 	.word	0x0001a8cc
    afc4:	0001aa04 	.word	0x0001aa04
    afc8:	0001a924 	.word	0x0001a924
    afcc:	00018299 	.word	0x00018299
    afd0:	0001a8e8 	.word	0x0001a8e8

0000afd4 <EraseSector>:

static bool EraseSector(void)
{
    afd4:	b510      	push	{r4, lr}
    // Erase the sector
    D_Nv_EraseSector(s_sector);
    afd6:	4c08      	ldr	r4, [pc, #32]	; (aff8 <EraseSector+0x24>)
    afd8:	7820      	ldrb	r0, [r4, #0]
    afda:	4b08      	ldr	r3, [pc, #32]	; (affc <EraseSector+0x28>)
    afdc:	4798      	blx	r3
    // check if the erase succeeded
    if ( !D_Nv_IsEmpty(s_sector, 0u, SECTOR_SIZE) )
    afde:	7820      	ldrb	r0, [r4, #0]
    afe0:	2280      	movs	r2, #128	; 0x80
    afe2:	0192      	lsls	r2, r2, #6
    afe4:	2100      	movs	r1, #0
    afe6:	4b06      	ldr	r3, [pc, #24]	; (b000 <EraseSector+0x2c>)
    afe8:	4798      	blx	r3
    afea:	2800      	cmp	r0, #0
    afec:	d003      	beq.n	aff6 <EraseSector+0x22>
    {
        return false;
    }
    s_sectorHead =  ITEMS_AREA_START_ADDRESS;
    afee:	2280      	movs	r2, #128	; 0x80
    aff0:	0052      	lsls	r2, r2, #1
    aff2:	4b04      	ldr	r3, [pc, #16]	; (b004 <EraseSector+0x30>)
    aff4:	801a      	strh	r2, [r3, #0]

    return true;
}
    aff6:	bd10      	pop	{r4, pc}
    aff8:	200007ac 	.word	0x200007ac
    affc:	0000ac7d 	.word	0x0000ac7d
    b000:	0000acd1 	.word	0x0000acd1
    b004:	200007ae 	.word	0x200007ae

0000b008 <WriteAndCheck>:
{
    b008:	b5f0      	push	{r4, r5, r6, r7, lr}
    b00a:	b083      	sub	sp, #12
    b00c:	9001      	str	r0, [sp, #4]
    b00e:	000d      	movs	r5, r1
    b010:	0016      	movs	r6, r2
    D_Nv_Write(s_sector, offset, pData, length);
    b012:	4f07      	ldr	r7, [pc, #28]	; (b030 <WriteAndCheck+0x28>)
    b014:	7838      	ldrb	r0, [r7, #0]
    b016:	0013      	movs	r3, r2
    b018:	000a      	movs	r2, r1
    b01a:	9901      	ldr	r1, [sp, #4]
    b01c:	4c05      	ldr	r4, [pc, #20]	; (b034 <WriteAndCheck+0x2c>)
    b01e:	47a0      	blx	r4
    return D_Nv_IsEqual(s_sector, offset, pData, length);
    b020:	7838      	ldrb	r0, [r7, #0]
    b022:	0033      	movs	r3, r6
    b024:	002a      	movs	r2, r5
    b026:	9901      	ldr	r1, [sp, #4]
    b028:	4c03      	ldr	r4, [pc, #12]	; (b038 <WriteAndCheck+0x30>)
    b02a:	47a0      	blx	r4
}
    b02c:	b003      	add	sp, #12
    b02e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b030:	200007ac 	.word	0x200007ac
    b034:	0000ab15 	.word	0x0000ab15
    b038:	0000ace1 	.word	0x0000ace1

0000b03c <WriteSectorHeader>:

static bool WriteSectorHeader(uint32_t sequenceNumber)
{
    b03c:	b510      	push	{r4, lr}
    b03e:	b086      	sub	sp, #24
    // write sector header
    SectorHeader_t sectorHeader;
    sectorHeader.signature[0] = (uint8_t) 'A';
    b040:	ac01      	add	r4, sp, #4
    b042:	2341      	movs	r3, #65	; 0x41
    b044:	70a3      	strb	r3, [r4, #2]
    sectorHeader.signature[1] = (uint8_t) 'T';
    b046:	3313      	adds	r3, #19
    b048:	70e3      	strb	r3, [r4, #3]
    sectorHeader.signature[2] = (uint8_t) 'S';
    b04a:	3b01      	subs	r3, #1
    b04c:	7123      	strb	r3, [r4, #4]
    sectorHeader.signature[3] = (uint8_t) 'N';
    b04e:	3b05      	subs	r3, #5
    b050:	7163      	strb	r3, [r4, #5]
    sectorHeader.signature[4] = (uint8_t) 'v';
    b052:	3328      	adds	r3, #40	; 0x28
    b054:	71a3      	strb	r3, [r4, #6]
    sectorHeader.signature[5] = (uint8_t) '2';
    b056:	3b44      	subs	r3, #68	; 0x44
    b058:	71e3      	strb	r3, [r4, #7]
    sectorHeader.sequenceNumber = sequenceNumber;
    b05a:	9003      	str	r0, [sp, #12]
    sectorHeader.sequenceParity = sequenceNumber ^ 0xFFFFFFFFuL;
    b05c:	43c0      	mvns	r0, r0
    b05e:	9004      	str	r0, [sp, #16]
    sectorHeader.nextPageAddressAfterCompact = s_nextPageAddressAfterCompact;
    b060:	4b08      	ldr	r3, [pc, #32]	; (b084 <WriteSectorHeader+0x48>)
    b062:	881b      	ldrh	r3, [r3, #0]
    b064:	8223      	strh	r3, [r4, #16]
    return ComputeCrc(((uint8_t*) pSectorHeader) + sizeof(pSectorHeader->headerCrc), (sizeof(SectorHeader_t)- sizeof(pSectorHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    b066:	4a08      	ldr	r2, [pc, #32]	; (b088 <WriteSectorHeader+0x4c>)
    b068:	2110      	movs	r1, #16
    b06a:	466b      	mov	r3, sp
    b06c:	1d98      	adds	r0, r3, #6
    b06e:	4b07      	ldr	r3, [pc, #28]	; (b08c <WriteSectorHeader+0x50>)
    b070:	4798      	blx	r3
    sectorHeader.headerCrc = ComputeSectorHeaderCrc(&sectorHeader);
    b072:	8020      	strh	r0, [r4, #0]
    if ( !WriteAndCheck(0u, (uint8_t*) &sectorHeader, SECTOR_HEADER_SIZE) )
    b074:	2212      	movs	r2, #18
    b076:	0021      	movs	r1, r4
    b078:	2000      	movs	r0, #0
    b07a:	4b05      	ldr	r3, [pc, #20]	; (b090 <WriteSectorHeader+0x54>)
    b07c:	4798      	blx	r3
    {
        return false;
    }
    return true;
}
    b07e:	b006      	add	sp, #24
    b080:	bd10      	pop	{r4, pc}
    b082:	46c0      	nop			; (mov r8, r8)
    b084:	200007a6 	.word	0x200007a6
    b088:	0000ffff 	.word	0x0000ffff
    b08c:	0000ad45 	.word	0x0000ad45
    b090:	0000b009 	.word	0x0000b009

0000b094 <SmartCompacting>:
 * without following any alignements as normal item updates.Items are filled into
  256 byte buffer(= row size), committed in shot which takes 4 page writs maximum
 */

static bool SmartCompacting(uint8_t* compactBlock, uint16_t curItemLength)
{
    b094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b096:	0004      	movs	r4, r0
    b098:	000d      	movs	r5, r1
    //manupulate the current compact length
    currentCompactLength += curItemLength;
    b09a:	4a21      	ldr	r2, [pc, #132]	; (b120 <SmartCompacting+0x8c>)
    b09c:	8813      	ldrh	r3, [r2, #0]
    b09e:	18cb      	adds	r3, r1, r3
    b0a0:	b29b      	uxth	r3, r3
    b0a2:	8013      	strh	r3, [r2, #0]

    // if the complete buffer cannot be filled with the current item
    if ( currentCompactLength < ROW_SIZE)
    b0a4:	2bff      	cmp	r3, #255	; 0xff
    b0a6:	d92e      	bls.n	b106 <SmartCompacting+0x72>
    else  //(currentCompactLength >= ROW_SIZE) cases
    {
        uint16_t dataBlockOffset = 0;


        memcpy(compactBlock + compactBlockOffset, dataBlock, (ROW_SIZE - compactBlockOffset));
    b0a8:	4b1e      	ldr	r3, [pc, #120]	; (b124 <SmartCompacting+0x90>)
    b0aa:	881a      	ldrh	r2, [r3, #0]
    b0ac:	1880      	adds	r0, r0, r2
    b0ae:	2580      	movs	r5, #128	; 0x80
    b0b0:	006d      	lsls	r5, r5, #1
    b0b2:	1aaa      	subs	r2, r5, r2
    b0b4:	491c      	ldr	r1, [pc, #112]	; (b128 <SmartCompacting+0x94>)
    b0b6:	4b1d      	ldr	r3, [pc, #116]	; (b12c <SmartCompacting+0x98>)
    b0b8:	4798      	blx	r3
        if ( !WriteAndCheck(s_sectorHead, compactBlock, ROW_SIZE ))
    b0ba:	4b1d      	ldr	r3, [pc, #116]	; (b130 <SmartCompacting+0x9c>)
    b0bc:	8818      	ldrh	r0, [r3, #0]
    b0be:	002a      	movs	r2, r5
    b0c0:	0021      	movs	r1, r4
    b0c2:	4b1c      	ldr	r3, [pc, #112]	; (b134 <SmartCompacting+0xa0>)
    b0c4:	4798      	blx	r3
    b0c6:	1e05      	subs	r5, r0, #0
    b0c8:	d027      	beq.n	b11a <SmartCompacting+0x86>
        {
            return false;
        }
        UpdateSectorHead(ROW_SIZE, ITEM_NO_ALIGNMENT);
    b0ca:	2100      	movs	r1, #0
    b0cc:	2080      	movs	r0, #128	; 0x80
    b0ce:	0040      	lsls	r0, r0, #1
    b0d0:	4b19      	ldr	r3, [pc, #100]	; (b138 <SmartCompacting+0xa4>)
    b0d2:	4798      	blx	r3
        dataBlockOffset += (ROW_SIZE - compactBlockOffset);
    b0d4:	4b13      	ldr	r3, [pc, #76]	; (b124 <SmartCompacting+0x90>)
    b0d6:	8818      	ldrh	r0, [r3, #0]
        compactBlockOffset = 0;
    b0d8:	2200      	movs	r2, #0
    b0da:	801a      	strh	r2, [r3, #0]
        currentCompactLength -= ROW_SIZE;
    b0dc:	4b10      	ldr	r3, [pc, #64]	; (b120 <SmartCompacting+0x8c>)
    b0de:	881e      	ldrh	r6, [r3, #0]
    b0e0:	3e01      	subs	r6, #1
    b0e2:	3eff      	subs	r6, #255	; 0xff
    b0e4:	b2b6      	uxth	r6, r6
    b0e6:	801e      	strh	r6, [r3, #0]
        if (currentCompactLength)
    b0e8:	2e00      	cmp	r6, #0
    b0ea:	d016      	beq.n	b11a <SmartCompacting+0x86>
        dataBlockOffset += (ROW_SIZE - compactBlockOffset);
    b0ec:	2180      	movs	r1, #128	; 0x80
    b0ee:	0049      	lsls	r1, r1, #1
    b0f0:	1a09      	subs	r1, r1, r0
        {
            memcpy(compactBlock, dataBlock + dataBlockOffset, currentCompactLength);
    b0f2:	b289      	uxth	r1, r1
    b0f4:	4b0c      	ldr	r3, [pc, #48]	; (b128 <SmartCompacting+0x94>)
    b0f6:	1859      	adds	r1, r3, r1
    b0f8:	0032      	movs	r2, r6
    b0fa:	0020      	movs	r0, r4
    b0fc:	4b0b      	ldr	r3, [pc, #44]	; (b12c <SmartCompacting+0x98>)
    b0fe:	4798      	blx	r3
            compactBlockOffset = currentCompactLength;
    b100:	4b08      	ldr	r3, [pc, #32]	; (b124 <SmartCompacting+0x90>)
    b102:	801e      	strh	r6, [r3, #0]
    b104:	e009      	b.n	b11a <SmartCompacting+0x86>
        memcpy(compactBlock + compactBlockOffset, dataBlock, curItemLength);
    b106:	4e07      	ldr	r6, [pc, #28]	; (b124 <SmartCompacting+0x90>)
    b108:	8837      	ldrh	r7, [r6, #0]
    b10a:	19c0      	adds	r0, r0, r7
    b10c:	000a      	movs	r2, r1
    b10e:	4906      	ldr	r1, [pc, #24]	; (b128 <SmartCompacting+0x94>)
    b110:	4b06      	ldr	r3, [pc, #24]	; (b12c <SmartCompacting+0x98>)
    b112:	4798      	blx	r3
        compactBlockOffset += curItemLength;
    b114:	19ed      	adds	r5, r5, r7
    b116:	8035      	strh	r5, [r6, #0]
        return true;
    b118:	2501      	movs	r5, #1
        }
    }

    return true;

}
    b11a:	0028      	movs	r0, r5
    b11c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b11e:	46c0      	nop			; (mov r8, r8)
    b120:	20000664 	.word	0x20000664
    b124:	20000638 	.word	0x20000638
    b128:	20000668 	.word	0x20000668
    b12c:	0001835b 	.word	0x0001835b
    b130:	200007ae 	.word	0x200007ae
    b134:	0000b009 	.word	0x0000b009
    b138:	0000ad09 	.word	0x0000ad09

0000b13c <CompactSector>:
 * This is because the itemCache, sector head and sector selector will
 * be messed up.
 */

static bool CompactSector(void)
{
    b13c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b13e:	46de      	mov	lr, fp
    b140:	4657      	mov	r7, sl
    b142:	464e      	mov	r6, r9
    b144:	4645      	mov	r5, r8
    b146:	b5e0      	push	{r5, r6, r7, lr}
    b148:	b0d5      	sub	sp, #340	; 0x154
    PRINTA(("CompactSector(s=%X)", s_sector));
#endif
    uint8_t compactBlock[ROW_SIZE];

    // stop timer for preemptive compact sector as this will not be needed any more
    SYS_TimerStop(&compactSectorTimer);
    b14a:	487b      	ldr	r0, [pc, #492]	; (b338 <CompactSector+0x1fc>)
    b14c:	4b7b      	ldr	r3, [pc, #492]	; (b33c <CompactSector+0x200>)
    b14e:	4798      	blx	r3

    // stop the compact item as a compact sector will compact all items
    s_compactItemId = 0u;
    b150:	2300      	movs	r3, #0
    b152:	4a7b      	ldr	r2, [pc, #492]	; (b340 <CompactSector+0x204>)
    b154:	8013      	strh	r3, [r2, #0]
    s_compactItemLength = 0u;
    b156:	4a7b      	ldr	r2, [pc, #492]	; (b344 <CompactSector+0x208>)
    b158:	8013      	strh	r3, [r2, #0]

    compactBlockOffset = 0;
    b15a:	4a7b      	ldr	r2, [pc, #492]	; (b348 <CompactSector+0x20c>)
    b15c:	8013      	strh	r3, [r2, #0]
    currentCompactLength = 0;
    b15e:	4a7b      	ldr	r2, [pc, #492]	; (b34c <CompactSector+0x210>)
    b160:	8013      	strh	r3, [r2, #0]

    uint8_t sourceSector = s_sector;
    b162:	4b7b      	ldr	r3, [pc, #492]	; (b350 <CompactSector+0x214>)
    b164:	781b      	ldrb	r3, [r3, #0]
    b166:	001f      	movs	r7, r3
    b168:	9303      	str	r3, [sp, #12]

    // get the sector header for the source sector
    SectorHeader_t sectorHeader;
    D_Nv_Read(sourceSector, 0u, (uint8_t*) &sectorHeader, SECTOR_HEADER_SIZE);
    b16a:	2312      	movs	r3, #18
    b16c:	aa0f      	add	r2, sp, #60	; 0x3c
    b16e:	2100      	movs	r1, #0
    b170:	0038      	movs	r0, r7
    b172:	4c78      	ldr	r4, [pc, #480]	; (b354 <CompactSector+0x218>)
    b174:	47a0      	blx	r4

    uint32_t nextSequenceNumber = sectorHeader.sequenceNumber - 1uL;
    b176:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b178:	9309      	str	r3, [sp, #36]	; 0x24

    // find and prepare a destination sector
    do
    {
        s_sector++;
    b17a:	4c75      	ldr	r4, [pc, #468]	; (b350 <CompactSector+0x214>)
        if ( s_sector >= (FIRST_SECTOR + SECTOR_COUNT) )
        {
            s_sector = FIRST_SECTOR;
    b17c:	0025      	movs	r5, r4
        s_sector++;
    b17e:	0026      	movs	r6, r4
    b180:	e008      	b.n	b194 <CompactSector+0x58>
    b182:	7033      	strb	r3, [r6, #0]
        }

        if ( s_sector == sourceSector )
    b184:	4b72      	ldr	r3, [pc, #456]	; (b350 <CompactSector+0x214>)
    b186:	781b      	ldrb	r3, [r3, #0]
    b188:	42bb      	cmp	r3, r7
    b18a:	d00b      	beq.n	b1a4 <CompactSector+0x68>
        {
            // all sector failed to initialize
            assert(false);
        }
    }
    while ( !EraseSector());
    b18c:	4b72      	ldr	r3, [pc, #456]	; (b358 <CompactSector+0x21c>)
    b18e:	4798      	blx	r3
    b190:	2800      	cmp	r0, #0
    b192:	d10d      	bne.n	b1b0 <CompactSector+0x74>
        s_sector++;
    b194:	7823      	ldrb	r3, [r4, #0]
    b196:	3301      	adds	r3, #1
    b198:	b2db      	uxtb	r3, r3
        if ( s_sector >= (FIRST_SECTOR + SECTOR_COUNT) )
    b19a:	2b01      	cmp	r3, #1
    b19c:	d9f1      	bls.n	b182 <CompactSector+0x46>
            s_sector = FIRST_SECTOR;
    b19e:	2300      	movs	r3, #0
    b1a0:	702b      	strb	r3, [r5, #0]
    b1a2:	e7ef      	b.n	b184 <CompactSector+0x48>
            assert(false);
    b1a4:	4b6d      	ldr	r3, [pc, #436]	; (b35c <CompactSector+0x220>)
    b1a6:	4a6e      	ldr	r2, [pc, #440]	; (b360 <CompactSector+0x224>)
    b1a8:	496e      	ldr	r1, [pc, #440]	; (b364 <CompactSector+0x228>)
    b1aa:	486f      	ldr	r0, [pc, #444]	; (b368 <CompactSector+0x22c>)
    b1ac:	4c6f      	ldr	r4, [pc, #444]	; (b36c <CompactSector+0x230>)
    b1ae:	47a0      	blx	r4

    // Traverse the item cache, writing all items to the new sector
    for (uint8_t cacheIndex = 0; cacheIndex < s_itemCount; cacheIndex++) {
    b1b0:	4b6f      	ldr	r3, [pc, #444]	; (b370 <CompactSector+0x234>)
    b1b2:	781b      	ldrb	r3, [r3, #0]
    b1b4:	2b00      	cmp	r3, #0
    b1b6:	d06a      	beq.n	b28e <CompactSector+0x152>
    b1b8:	2300      	movs	r3, #0
    b1ba:	9306      	str	r3, [sp, #24]

        blockHeader.dataCrc =  ComputeDataCrc(sourceSector, lastBlockPointer, &blockHeader);

        blockHeader.headerCrc = ComputeHeaderCrc(&blockHeader);

        memset(dataBlock, 0xFF, sizeof(dataBlock));
    b1bc:	3301      	adds	r3, #1
    b1be:	33ff      	adds	r3, #255	; 0xff
    b1c0:	4699      	mov	r9, r3
            uint16_t bytesToGather;
            uint16_t inDataOffset = 0;

            do
            {
              bytesToGather =  (currLength > ROW_SIZE) ? ROW_SIZE : currLength; 
    b1c2:	466a      	mov	r2, sp
    b1c4:	82d3      	strh	r3, [r2, #22]
            if (!GatherData(sourceSector, lastBlockPointer, 0u, blockHeader.itemLength, (dataBlock + BLOCK_HEADER_SIZE )))
    b1c6:	4b6b      	ldr	r3, [pc, #428]	; (b374 <CompactSector+0x238>)
    b1c8:	3310      	adds	r3, #16
    b1ca:	9308      	str	r3, [sp, #32]
        Item_t *cache = &s_itemCache[cacheIndex];
    b1cc:	9b06      	ldr	r3, [sp, #24]
    b1ce:	9307      	str	r3, [sp, #28]
        uint16_t lastBlockPointer = cache->lastBlock;
    b1d0:	009f      	lsls	r7, r3, #2
    b1d2:	4b69      	ldr	r3, [pc, #420]	; (b378 <CompactSector+0x23c>)
    b1d4:	469c      	mov	ip, r3
    b1d6:	4467      	add	r7, ip
    b1d8:	887b      	ldrh	r3, [r7, #2]
    b1da:	001d      	movs	r5, r3
    b1dc:	9304      	str	r3, [sp, #16]
        D_Nv_Read(sourceSector, lastBlockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    b1de:	2310      	movs	r3, #16
    b1e0:	aa0b      	add	r2, sp, #44	; 0x2c
    b1e2:	0029      	movs	r1, r5
    b1e4:	9803      	ldr	r0, [sp, #12]
    b1e6:	4680      	mov	r8, r0
    b1e8:	4c5a      	ldr	r4, [pc, #360]	; (b354 <CompactSector+0x218>)
    b1ea:	47a0      	blx	r4
        blockHeader.blockOffset = 0x0000u;
    b1ec:	ae0b      	add	r6, sp, #44	; 0x2c
    b1ee:	2300      	movs	r3, #0
    b1f0:	80b3      	strh	r3, [r6, #4]
        blockHeader.blockLength = blockHeader.itemLength;
    b1f2:	8934      	ldrh	r4, [r6, #8]
    b1f4:	80f4      	strh	r4, [r6, #6]
        blockHeader.previousBlock = 0x0000u;
    b1f6:	8173      	strh	r3, [r6, #10]
        blockHeader.writeCount = 0u;
    b1f8:	81b3      	strh	r3, [r6, #12]
        uint16_t currLength = BLOCK_HEADER_SIZE + blockHeader.itemLength;
    b1fa:	3410      	adds	r4, #16
    b1fc:	b2a4      	uxth	r4, r4
        blockHeader.dataCrc =  ComputeDataCrc(sourceSector, lastBlockPointer, &blockHeader);
    b1fe:	0032      	movs	r2, r6
    b200:	0029      	movs	r1, r5
    b202:	4640      	mov	r0, r8
    b204:	4b5d      	ldr	r3, [pc, #372]	; (b37c <CompactSector+0x240>)
    b206:	4798      	blx	r3
    b208:	8030      	strh	r0, [r6, #0]
    return ComputeCrc(((uint8_t*) pBlockHeader), (sizeof(BlockHeader_t) - sizeof(pBlockHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    b20a:	4a5d      	ldr	r2, [pc, #372]	; (b380 <CompactSector+0x244>)
    b20c:	210e      	movs	r1, #14
    b20e:	a80b      	add	r0, sp, #44	; 0x2c
    b210:	4b5c      	ldr	r3, [pc, #368]	; (b384 <CompactSector+0x248>)
    b212:	4798      	blx	r3
        blockHeader.headerCrc = ComputeHeaderCrc(&blockHeader);
    b214:	81f0      	strh	r0, [r6, #14]
        memset(dataBlock, 0xFF, sizeof(dataBlock));
    b216:	4d57      	ldr	r5, [pc, #348]	; (b374 <CompactSector+0x238>)
    b218:	464a      	mov	r2, r9
    b21a:	21ff      	movs	r1, #255	; 0xff
    b21c:	0028      	movs	r0, r5
    b21e:	4b5a      	ldr	r3, [pc, #360]	; (b388 <CompactSector+0x24c>)
    b220:	4798      	blx	r3
        memcpy(dataBlock, &blockHeader, BLOCK_HEADER_SIZE);
    b222:	002b      	movs	r3, r5
    b224:	ce07      	ldmia	r6!, {r0, r1, r2}
    b226:	c307      	stmia	r3!, {r0, r1, r2}
    b228:	6832      	ldr	r2, [r6, #0]
    b22a:	601a      	str	r2, [r3, #0]
        cache->lastBlock = s_sectorHead  + compactBlockOffset;
    b22c:	4b57      	ldr	r3, [pc, #348]	; (b38c <CompactSector+0x250>)
    b22e:	881b      	ldrh	r3, [r3, #0]
    b230:	4a45      	ldr	r2, [pc, #276]	; (b348 <CompactSector+0x20c>)
    b232:	8812      	ldrh	r2, [r2, #0]
    b234:	189b      	adds	r3, r3, r2
    b236:	807b      	strh	r3, [r7, #2]
        if (currLength <= ROW_SIZE)
    b238:	454c      	cmp	r4, r9
    b23a:	d904      	bls.n	b246 <CompactSector+0x10a>
    b23c:	2600      	movs	r6, #0
    b23e:	2310      	movs	r3, #16
              
              if (!GatherData(sourceSector, lastBlockPointer, inDataOffset, (bytesToGather - dataBlockOffset) , (dataBlock + dataBlockOffset)))
    b240:	4a4c      	ldr	r2, [pc, #304]	; (b374 <CompactSector+0x238>)
    b242:	4690      	mov	r8, r2
    b244:	e068      	b.n	b318 <CompactSector+0x1dc>
            if (!GatherData(sourceSector, lastBlockPointer, 0u, blockHeader.itemLength, (dataBlock + BLOCK_HEADER_SIZE )))
    b246:	ab0b      	add	r3, sp, #44	; 0x2c
    b248:	891b      	ldrh	r3, [r3, #8]
    b24a:	9a08      	ldr	r2, [sp, #32]
    b24c:	9200      	str	r2, [sp, #0]
    b24e:	2200      	movs	r2, #0
    b250:	9904      	ldr	r1, [sp, #16]
    b252:	9803      	ldr	r0, [sp, #12]
    b254:	4e4e      	ldr	r6, [pc, #312]	; (b390 <CompactSector+0x254>)
    b256:	47b0      	blx	r6
    b258:	2800      	cmp	r0, #0
    b25a:	d063      	beq.n	b324 <CompactSector+0x1e8>
            cache->lastBlock = s_sectorHead  + compactBlockOffset;
    b25c:	9b07      	ldr	r3, [sp, #28]
    b25e:	009d      	lsls	r5, r3, #2
    b260:	4b45      	ldr	r3, [pc, #276]	; (b378 <CompactSector+0x23c>)
    b262:	195d      	adds	r5, r3, r5
    b264:	4b49      	ldr	r3, [pc, #292]	; (b38c <CompactSector+0x250>)
    b266:	881b      	ldrh	r3, [r3, #0]
    b268:	4a37      	ldr	r2, [pc, #220]	; (b348 <CompactSector+0x20c>)
    b26a:	8812      	ldrh	r2, [r2, #0]
    b26c:	189b      	adds	r3, r3, r2
    b26e:	806b      	strh	r3, [r5, #2]
            if (!SmartCompacting(compactBlock, currLength))
    b270:	0021      	movs	r1, r4
    b272:	a814      	add	r0, sp, #80	; 0x50
    b274:	4b47      	ldr	r3, [pc, #284]	; (b394 <CompactSector+0x258>)
    b276:	4798      	blx	r3
    b278:	2800      	cmp	r0, #0
    b27a:	d053      	beq.n	b324 <CompactSector+0x1e8>
    for (uint8_t cacheIndex = 0; cacheIndex < s_itemCount; cacheIndex++) {
    b27c:	9b06      	ldr	r3, [sp, #24]
    b27e:	3301      	adds	r3, #1
    b280:	b2db      	uxtb	r3, r3
    b282:	001a      	movs	r2, r3
    b284:	9306      	str	r3, [sp, #24]
    b286:	4b3a      	ldr	r3, [pc, #232]	; (b370 <CompactSector+0x234>)
    b288:	781b      	ldrb	r3, [r3, #0]
    b28a:	4293      	cmp	r3, r2
    b28c:	d89e      	bhi.n	b1cc <CompactSector+0x90>

            } while(currLength > 0);
        }
    }
    // if some uncommitted data avaialble, committ it
    if ( currentCompactLength)
    b28e:	4b2f      	ldr	r3, [pc, #188]	; (b34c <CompactSector+0x210>)
    b290:	881a      	ldrh	r2, [r3, #0]
    b292:	2a00      	cmp	r2, #0
    b294:	d006      	beq.n	b2a4 <CompactSector+0x168>
    {
        if ( !WriteAndCheck(s_sectorHead, compactBlock, currentCompactLength) )
    b296:	4b3d      	ldr	r3, [pc, #244]	; (b38c <CompactSector+0x250>)
    b298:	8818      	ldrh	r0, [r3, #0]
    b29a:	a914      	add	r1, sp, #80	; 0x50
    b29c:	4b3e      	ldr	r3, [pc, #248]	; (b398 <CompactSector+0x25c>)
    b29e:	4798      	blx	r3
    b2a0:	1e04      	subs	r4, r0, #0
    b2a2:	d040      	beq.n	b326 <CompactSector+0x1ea>
        {
            return false;
        }
    }
    // Just update sector header as per the the length of the data committed, no alignments
    UpdateSectorHead(currentCompactLength, ITEM_NO_ALIGNMENT);
    b2a4:	4b29      	ldr	r3, [pc, #164]	; (b34c <CompactSector+0x210>)
    b2a6:	8818      	ldrh	r0, [r3, #0]
    b2a8:	2100      	movs	r1, #0
    b2aa:	4b3c      	ldr	r3, [pc, #240]	; (b39c <CompactSector+0x260>)
    b2ac:	4798      	blx	r3

    s_nextPageAddressAfterCompact = s_sectorHead;
    b2ae:	4b37      	ldr	r3, [pc, #220]	; (b38c <CompactSector+0x250>)
    b2b0:	881a      	ldrh	r2, [r3, #0]
    b2b2:	4b3b      	ldr	r3, [pc, #236]	; (b3a0 <CompactSector+0x264>)
    b2b4:	801a      	strh	r2, [r3, #0]
    uint32_t nextSequenceNumber = sectorHeader.sequenceNumber - 1uL;
    b2b6:	9809      	ldr	r0, [sp, #36]	; 0x24
    b2b8:	3801      	subs	r0, #1
    //SYS_PostEvent(BC_EVENT_UPGRADE_STRUCT_CHANGED_ITEMS, 0U);

    // update nextPageAddressAfterCompact in the sector header
    // All items moved, so now we just need to Write the Sector Header with 
    // nextPageAddressAfterCompact at the end of compact sector operation
    if ( !WriteSectorHeader(nextSequenceNumber))
    b2ba:	4b3a      	ldr	r3, [pc, #232]	; (b3a4 <CompactSector+0x268>)
    b2bc:	4798      	blx	r3
    b2be:	1e04      	subs	r4, r0, #0
    b2c0:	d031      	beq.n	b326 <CompactSector+0x1ea>
    {
        return false;
    }
    // Done with compact sector opration, Set the Sector Head to next page address for normal item update 
    UpdateSectorHead(0, ITEM_64BYTE_ALIGNMENT);
    b2c2:	2102      	movs	r1, #2
    b2c4:	2000      	movs	r0, #0
    b2c6:	4b35      	ldr	r3, [pc, #212]	; (b39c <CompactSector+0x260>)
    b2c8:	4798      	blx	r3

    // schedule an erase of the source sector,Restart the timer if it is already running.
    s_sectorToErase = sourceSector;
    b2ca:	4b37      	ldr	r3, [pc, #220]	; (b3a8 <CompactSector+0x26c>)
    b2cc:	466a      	mov	r2, sp
    b2ce:	7b12      	ldrb	r2, [r2, #12]
    b2d0:	701a      	strb	r2, [r3, #0]
    SYS_TimerStop(&eraseSectorTimer);
    b2d2:	4d36      	ldr	r5, [pc, #216]	; (b3ac <CompactSector+0x270>)
    b2d4:	0028      	movs	r0, r5
    b2d6:	4b19      	ldr	r3, [pc, #100]	; (b33c <CompactSector+0x200>)
    b2d8:	4798      	blx	r3
    SYS_TimerStart(&eraseSectorTimer);
    b2da:	0028      	movs	r0, r5
    b2dc:	4b34      	ldr	r3, [pc, #208]	; (b3b0 <CompactSector+0x274>)
    b2de:	4798      	blx	r3

    return true;
    b2e0:	e021      	b.n	b326 <CompactSector+0x1ea>
              bytesToGather =  (currLength > ROW_SIZE) ? ROW_SIZE : currLength; 
    b2e2:	b2ad      	uxth	r5, r5
              if (!GatherData(sourceSector, lastBlockPointer, inDataOffset, (bytesToGather - dataBlockOffset) , (dataBlock + dataBlockOffset)))
    b2e4:	1aef      	subs	r7, r5, r3
    b2e6:	b2ba      	uxth	r2, r7
    b2e8:	4693      	mov	fp, r2
    b2ea:	4443      	add	r3, r8
    b2ec:	9300      	str	r3, [sp, #0]
    b2ee:	0013      	movs	r3, r2
    b2f0:	0032      	movs	r2, r6
    b2f2:	9904      	ldr	r1, [sp, #16]
    b2f4:	9803      	ldr	r0, [sp, #12]
    b2f6:	4f26      	ldr	r7, [pc, #152]	; (b390 <CompactSector+0x254>)
    b2f8:	47b8      	blx	r7
    b2fa:	2800      	cmp	r0, #0
    b2fc:	d012      	beq.n	b324 <CompactSector+0x1e8>
              if (!SmartCompacting(compactBlock, bytesToGather))
    b2fe:	0029      	movs	r1, r5
    b300:	a814      	add	r0, sp, #80	; 0x50
    b302:	4b24      	ldr	r3, [pc, #144]	; (b394 <CompactSector+0x258>)
    b304:	4798      	blx	r3
    b306:	2800      	cmp	r0, #0
    b308:	d00c      	beq.n	b324 <CompactSector+0x1e8>
              currLength -= bytesToGather;
    b30a:	1b64      	subs	r4, r4, r5
    b30c:	b2a4      	uxth	r4, r4
              inDataOffset += (bytesToGather - dataBlockOffset);
    b30e:	445e      	add	r6, fp
    b310:	b2b6      	uxth	r6, r6
              dataBlockOffset = 0;
    b312:	2300      	movs	r3, #0
            } while(currLength > 0);
    b314:	2c00      	cmp	r4, #0
    b316:	d0b1      	beq.n	b27c <CompactSector+0x140>
              bytesToGather =  (currLength > ROW_SIZE) ? ROW_SIZE : currLength; 
    b318:	1c25      	adds	r5, r4, #0
    b31a:	454c      	cmp	r4, r9
    b31c:	d9e1      	bls.n	b2e2 <CompactSector+0x1a6>
    b31e:	466a      	mov	r2, sp
    b320:	8ad5      	ldrh	r5, [r2, #22]
    b322:	e7de      	b.n	b2e2 <CompactSector+0x1a6>
                return false;
    b324:	2400      	movs	r4, #0
}
    b326:	0020      	movs	r0, r4
    b328:	b055      	add	sp, #340	; 0x154
    b32a:	bc3c      	pop	{r2, r3, r4, r5}
    b32c:	4690      	mov	r8, r2
    b32e:	4699      	mov	r9, r3
    b330:	46a2      	mov	sl, r4
    b332:	46ab      	mov	fp, r5
    b334:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b336:	46c0      	nop			; (mov r8, r8)
    b338:	20000650 	.word	0x20000650
    b33c:	0000f665 	.word	0x0000f665
    b340:	2000077c 	.word	0x2000077c
    b344:	2000077e 	.word	0x2000077e
    b348:	20000638 	.word	0x20000638
    b34c:	20000664 	.word	0x20000664
    b350:	200007ac 	.word	0x200007ac
    b354:	0000aa9d 	.word	0x0000aa9d
    b358:	0000afd5 	.word	0x0000afd5
    b35c:	0001a8c4 	.word	0x0001a8c4
    b360:	0001aa14 	.word	0x0001aa14
    b364:	000003d5 	.word	0x000003d5
    b368:	0001a924 	.word	0x0001a924
    b36c:	00018299 	.word	0x00018299
    b370:	200007a4 	.word	0x200007a4
    b374:	20000668 	.word	0x20000668
    b378:	20000780 	.word	0x20000780
    b37c:	0000ae3d 	.word	0x0000ae3d
    b380:	0000ffff 	.word	0x0000ffff
    b384:	0000ad45 	.word	0x0000ad45
    b388:	0001836d 	.word	0x0001836d
    b38c:	200007ae 	.word	0x200007ae
    b390:	0000ad85 	.word	0x0000ad85
    b394:	0000b095 	.word	0x0000b095
    b398:	0000b009 	.word	0x0000b009
    b39c:	0000ad09 	.word	0x0000ad09
    b3a0:	200007a6 	.word	0x200007a6
    b3a4:	0000b03d 	.word	0x0000b03d
    b3a8:	2000001b 	.word	0x2000001b
    b3ac:	20000768 	.word	0x20000768
    b3b0:	0000f6d1 	.word	0x0000f6d1

0000b3b4 <compactSectorTimerFired>:
{
    b3b4:	b510      	push	{r4, lr}
    if (!PowerSupplyTooLow()) {
    b3b6:	4b07      	ldr	r3, [pc, #28]	; (b3d4 <compactSectorTimerFired+0x20>)
    b3b8:	4798      	blx	r3
    b3ba:	2800      	cmp	r0, #0
    b3bc:	d000      	beq.n	b3c0 <compactSectorTimerFired+0xc>
}
    b3be:	bd10      	pop	{r4, pc}
      status = CompactSector();
    b3c0:	4b05      	ldr	r3, [pc, #20]	; (b3d8 <compactSectorTimerFired+0x24>)
    b3c2:	4798      	blx	r3
      assert(false);
    b3c4:	4b05      	ldr	r3, [pc, #20]	; (b3dc <compactSectorTimerFired+0x28>)
    b3c6:	4a06      	ldr	r2, [pc, #24]	; (b3e0 <compactSectorTimerFired+0x2c>)
    b3c8:	212c      	movs	r1, #44	; 0x2c
    b3ca:	31ff      	adds	r1, #255	; 0xff
    b3cc:	4805      	ldr	r0, [pc, #20]	; (b3e4 <compactSectorTimerFired+0x30>)
    b3ce:	4c06      	ldr	r4, [pc, #24]	; (b3e8 <compactSectorTimerFired+0x34>)
    b3d0:	47a0      	blx	r4
    b3d2:	46c0      	nop			; (mov r8, r8)
    b3d4:	0000aced 	.word	0x0000aced
    b3d8:	0000b13d 	.word	0x0000b13d
    b3dc:	0001a8c4 	.word	0x0001a8c4
    b3e0:	0001a9dc 	.word	0x0001a9dc
    b3e4:	0001a924 	.word	0x0001a924
    b3e8:	00018299 	.word	0x00018299

0000b3ec <CompactSectorIfNeeded>:

static void CompactSectorIfNeeded(uint16_t immediateThreshold)
{
    b3ec:	b510      	push	{r4, lr}
    uint16_t freeSpace = SECTOR_SIZE - s_sectorHead;
    b3ee:	4b12      	ldr	r3, [pc, #72]	; (b438 <CompactSectorIfNeeded+0x4c>)
    b3f0:	881a      	ldrh	r2, [r3, #0]
    b3f2:	2380      	movs	r3, #128	; 0x80
    b3f4:	019b      	lsls	r3, r3, #6
    b3f6:	1a9b      	subs	r3, r3, r2
    b3f8:	b29b      	uxth	r3, r3

    if ( freeSpace < immediateThreshold )
    b3fa:	4283      	cmp	r3, r0
    b3fc:	d303      	bcc.n	b406 <CompactSectorIfNeeded+0x1a>
        {
            assert(false);
        }
        return;
    }
    if ( freeSpace < PREEMPTIVE_COMPACT_SECTOR_THRESHOLD )
    b3fe:	4a0f      	ldr	r2, [pc, #60]	; (b43c <CompactSectorIfNeeded+0x50>)
    b400:	4293      	cmp	r3, r2
    b402:	d90a      	bls.n	b41a <CompactSectorIfNeeded+0x2e>
        compactSectorTimer.mode = SYS_TIMER_INTERVAL_MODE;
        //TODO: check timer to be started or not
        //SYS_StartTimer(&compactSectorTimer);
        }
    }
}
    b404:	bd10      	pop	{r4, pc}
        if ( !CompactSector() )
    b406:	4b0e      	ldr	r3, [pc, #56]	; (b440 <CompactSectorIfNeeded+0x54>)
    b408:	4798      	blx	r3
    b40a:	2800      	cmp	r0, #0
    b40c:	d1fa      	bne.n	b404 <CompactSectorIfNeeded+0x18>
            assert(false);
    b40e:	4b0d      	ldr	r3, [pc, #52]	; (b444 <CompactSectorIfNeeded+0x58>)
    b410:	4a0d      	ldr	r2, [pc, #52]	; (b448 <CompactSectorIfNeeded+0x5c>)
    b412:	490e      	ldr	r1, [pc, #56]	; (b44c <CompactSectorIfNeeded+0x60>)
    b414:	480e      	ldr	r0, [pc, #56]	; (b450 <CompactSectorIfNeeded+0x64>)
    b416:	4c0f      	ldr	r4, [pc, #60]	; (b454 <CompactSectorIfNeeded+0x68>)
    b418:	47a0      	blx	r4
        if (!SYS_TimerStarted(&compactSectorTimer))
    b41a:	480f      	ldr	r0, [pc, #60]	; (b458 <CompactSectorIfNeeded+0x6c>)
    b41c:	4b0f      	ldr	r3, [pc, #60]	; (b45c <CompactSectorIfNeeded+0x70>)
    b41e:	4798      	blx	r3
    b420:	2800      	cmp	r0, #0
    b422:	d1ef      	bne.n	b404 <CompactSectorIfNeeded+0x18>
        compactSectorTimer.handler = compactSectorTimerFired;
    b424:	4b0c      	ldr	r3, [pc, #48]	; (b458 <CompactSectorIfNeeded+0x6c>)
    b426:	4a0e      	ldr	r2, [pc, #56]	; (b460 <CompactSectorIfNeeded+0x74>)
    b428:	611a      	str	r2, [r3, #16]
        compactSectorTimer.timeout = COMPACT_SECTOR_DELAY_MS;
    b42a:	4a0e      	ldr	r2, [pc, #56]	; (b464 <CompactSectorIfNeeded+0x78>)
    b42c:	605a      	str	r2, [r3, #4]
        compactSectorTimer.interval = COMPACT_SECTOR_DELAY_MS;
    b42e:	609a      	str	r2, [r3, #8]
        compactSectorTimer.mode = SYS_TIMER_INTERVAL_MODE;
    b430:	2200      	movs	r2, #0
    b432:	731a      	strb	r2, [r3, #12]
    b434:	e7e6      	b.n	b404 <CompactSectorIfNeeded+0x18>
    b436:	46c0      	nop			; (mov r8, r8)
    b438:	200007ae 	.word	0x200007ae
    b43c:	0000080f 	.word	0x0000080f
    b440:	0000b13d 	.word	0x0000b13d
    b444:	0001a8c4 	.word	0x0001a8c4
    b448:	0001aa24 	.word	0x0001aa24
    b44c:	0000044e 	.word	0x0000044e
    b450:	0001a924 	.word	0x0001a924
    b454:	00018299 	.word	0x00018299
    b458:	20000650 	.word	0x20000650
    b45c:	0000f6a5 	.word	0x0000f6a5
    b460:	0000b3b5 	.word	0x0000b3b5
    b464:	00002710 	.word	0x00002710

0000b468 <CompactItem>:

static S_Nv_ReturnValue_t CompactItem(void)
{
    b468:	b5f0      	push	{r4, r5, r6, r7, lr}
    b46a:	46de      	mov	lr, fp
    b46c:	4657      	mov	r7, sl
    b46e:	464e      	mov	r6, r9
    b470:	4645      	mov	r5, r8
    b472:	b5e0      	push	{r5, r6, r7, lr}
    b474:	b08b      	sub	sp, #44	; 0x2c
#if defined(ENABLE_NV_COMPACT_LOGGING)
    PRINTA(("CompactItem(id=%X)", s_compactItemId));
#endif

    if ( PowerSupplyTooLow() )
    b476:	4b77      	ldr	r3, [pc, #476]	; (b654 <CompactItem+0x1ec>)
    b478:	4798      	blx	r3
    {
        return S_Nv_ReturnValue_PowerSupplyTooLow;
    b47a:	2305      	movs	r3, #5
    if ( PowerSupplyTooLow() )
    b47c:	2800      	cmp	r0, #0
    b47e:	d007      	beq.n	b490 <CompactItem+0x28>
    s_compactItemLength = 0u;

    cache->lastBlock = lastBlock;

    return S_Nv_ReturnValue_Ok;
}
    b480:	0018      	movs	r0, r3
    b482:	b00b      	add	sp, #44	; 0x2c
    b484:	bc3c      	pop	{r2, r3, r4, r5}
    b486:	4690      	mov	r8, r2
    b488:	4699      	mov	r9, r3
    b48a:	46a2      	mov	sl, r4
    b48c:	46ab      	mov	fp, r5
    b48e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ( (s_compactItemLength == 0u) && ( s_compactItemId == 0u ) )
    b490:	4b71      	ldr	r3, [pc, #452]	; (b658 <CompactItem+0x1f0>)
    b492:	8818      	ldrh	r0, [r3, #0]
    b494:	2800      	cmp	r0, #0
    b496:	d146      	bne.n	b526 <CompactItem+0xbe>
    b498:	4b70      	ldr	r3, [pc, #448]	; (b65c <CompactItem+0x1f4>)
    b49a:	881b      	ldrh	r3, [r3, #0]
    b49c:	2b00      	cmp	r3, #0
    b49e:	d100      	bne.n	b4a2 <CompactItem+0x3a>
    b4a0:	e0d0      	b.n	b644 <CompactItem+0x1dc>
    Item_t *cache = FindItemCache(s_compactItemId);
    b4a2:	4b6e      	ldr	r3, [pc, #440]	; (b65c <CompactItem+0x1f4>)
    b4a4:	8818      	ldrh	r0, [r3, #0]
    b4a6:	4b6e      	ldr	r3, [pc, #440]	; (b660 <CompactItem+0x1f8>)
    b4a8:	4798      	blx	r3
    b4aa:	4683      	mov	fp, r0
    if ( cache == NULL )
    b4ac:	2800      	cmp	r0, #0
    b4ae:	d100      	bne.n	b4b2 <CompactItem+0x4a>
    b4b0:	e0ca      	b.n	b648 <CompactItem+0x1e0>
    uint16_t blockPointer = cache->lastBlock;
    b4b2:	7882      	ldrb	r2, [r0, #2]
    b4b4:	78c3      	ldrb	r3, [r0, #3]
    b4b6:	021b      	lsls	r3, r3, #8
    b4b8:	4313      	orrs	r3, r2
    b4ba:	0019      	movs	r1, r3
    b4bc:	9303      	str	r3, [sp, #12]
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    b4be:	4b69      	ldr	r3, [pc, #420]	; (b664 <CompactItem+0x1fc>)
    b4c0:	7818      	ldrb	r0, [r3, #0]
    b4c2:	2310      	movs	r3, #16
    b4c4:	aa06      	add	r2, sp, #24
    b4c6:	4c68      	ldr	r4, [pc, #416]	; (b668 <CompactItem+0x200>)
    b4c8:	47a0      	blx	r4
    if (s_compactItemLength == 0)
    b4ca:	4b63      	ldr	r3, [pc, #396]	; (b658 <CompactItem+0x1f0>)
    b4cc:	881a      	ldrh	r2, [r3, #0]
    b4ce:	2a00      	cmp	r2, #0
    b4d0:	d02e      	beq.n	b530 <CompactItem+0xc8>
    uint16_t lastBlock = s_sectorHead;
    b4d2:	4b66      	ldr	r3, [pc, #408]	; (b66c <CompactItem+0x204>)
    b4d4:	881b      	ldrh	r3, [r3, #0]
    b4d6:	9305      	str	r3, [sp, #20]
    uint16_t bytesToGather = blockHeader.itemLength;
    b4d8:	ab06      	add	r3, sp, #24
    b4da:	891b      	ldrh	r3, [r3, #8]
        blockHeader.itemLength = s_compactItemLength;
    b4dc:	a906      	add	r1, sp, #24
    b4de:	810a      	strh	r2, [r1, #8]
    b4e0:	1c19      	adds	r1, r3, #0
    b4e2:	4293      	cmp	r3, r2
    b4e4:	d900      	bls.n	b4e8 <CompactItem+0x80>
    b4e6:	1c11      	adds	r1, r2, #0
    b4e8:	b28b      	uxth	r3, r1
    blockHeader.blockOffset = 0u;
    b4ea:	aa06      	add	r2, sp, #24
    b4ec:	2100      	movs	r1, #0
    b4ee:	8091      	strh	r1, [r2, #4]
    blockHeader.blockLength = blockHeader.itemLength;
    b4f0:	8910      	ldrh	r0, [r2, #8]
    b4f2:	80d0      	strh	r0, [r2, #6]
    blockHeader.previousBlock = 0x0000u;
    b4f4:	8151      	strh	r1, [r2, #10]
    blockHeader.writeCount = 0u;
    b4f6:	8191      	strh	r1, [r2, #12]
    uint16_t currLength = BLOCK_HEADER_SIZE + bytesToGather;
    b4f8:	001c      	movs	r4, r3
    b4fa:	3410      	adds	r4, #16
    b4fc:	b2a4      	uxth	r4, r4
    memcpy(dataBlock, &blockHeader, BLOCK_HEADER_SIZE);
    b4fe:	495c      	ldr	r1, [pc, #368]	; (b670 <CompactItem+0x208>)
    b500:	ca61      	ldmia	r2!, {r0, r5, r6}
    b502:	c161      	stmia	r1!, {r0, r5, r6}
    b504:	6812      	ldr	r2, [r2, #0]
    b506:	600a      	str	r2, [r1, #0]
    if (currLength <= ROW_SIZE)
    b508:	2280      	movs	r2, #128	; 0x80
    b50a:	0052      	lsls	r2, r2, #1
    b50c:	4294      	cmp	r4, r2
    b50e:	d939      	bls.n	b584 <CompactItem+0x11c>
    b510:	2600      	movs	r6, #0
    b512:	2310      	movs	r3, #16
            bytesToGatherAndCommit = (currLength > ROW_SIZE) ? ROW_SIZE : currLength;
    b514:	2280      	movs	r2, #128	; 0x80
    b516:	0052      	lsls	r2, r2, #1
    b518:	4691      	mov	r9, r2
    b51a:	4669      	mov	r1, sp
    b51c:	824a      	strh	r2, [r1, #18]
            if (!GatherData(s_sector, blockPointer, inDataOffset, bytesToGatherAndCommit - dataBlockOffset , (dataBlock + dataBlockOffset)))
    b51e:	4a51      	ldr	r2, [pc, #324]	; (b664 <CompactItem+0x1fc>)
    b520:	4692      	mov	sl, r2
    b522:	001a      	movs	r2, r3
    b524:	e088      	b.n	b638 <CompactItem+0x1d0>
        CompactSectorIfNeeded(s_compactItemLength + BLOCK_HEADER_SIZE);
    b526:	3010      	adds	r0, #16
    b528:	b280      	uxth	r0, r0
    b52a:	4b52      	ldr	r3, [pc, #328]	; (b674 <CompactItem+0x20c>)
    b52c:	4798      	blx	r3
    b52e:	e7b8      	b.n	b4a2 <CompactItem+0x3a>
        CompactSectorIfNeeded(blockHeader.itemLength + BLOCK_HEADER_SIZE);
    b530:	ab06      	add	r3, sp, #24
    b532:	8918      	ldrh	r0, [r3, #8]
    b534:	3010      	adds	r0, #16
    b536:	b280      	uxth	r0, r0
    b538:	4b4e      	ldr	r3, [pc, #312]	; (b674 <CompactItem+0x20c>)
    b53a:	4798      	blx	r3
        cache = FindItemCache(s_compactItemId);
    b53c:	4b47      	ldr	r3, [pc, #284]	; (b65c <CompactItem+0x1f4>)
    b53e:	8818      	ldrh	r0, [r3, #0]
    b540:	4b47      	ldr	r3, [pc, #284]	; (b660 <CompactItem+0x1f8>)
    b542:	4798      	blx	r3
    b544:	4683      	mov	fp, r0
        assert(cache != NULL);
    b546:	2800      	cmp	r0, #0
    b548:	d015      	beq.n	b576 <CompactItem+0x10e>
        blockPointer = cache->lastBlock;
    b54a:	7882      	ldrb	r2, [r0, #2]
    b54c:	78c3      	ldrb	r3, [r0, #3]
    b54e:	021b      	lsls	r3, r3, #8
    b550:	4313      	orrs	r3, r2
    b552:	0019      	movs	r1, r3
    b554:	9303      	str	r3, [sp, #12]
        D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    b556:	ac06      	add	r4, sp, #24
    b558:	4b42      	ldr	r3, [pc, #264]	; (b664 <CompactItem+0x1fc>)
    b55a:	7818      	ldrb	r0, [r3, #0]
    b55c:	2310      	movs	r3, #16
    b55e:	0022      	movs	r2, r4
    b560:	4d41      	ldr	r5, [pc, #260]	; (b668 <CompactItem+0x200>)
    b562:	47a8      	blx	r5
    uint16_t lastBlock = s_sectorHead;
    b564:	4b41      	ldr	r3, [pc, #260]	; (b66c <CompactItem+0x204>)
    b566:	881b      	ldrh	r3, [r3, #0]
    b568:	9305      	str	r3, [sp, #20]
    uint16_t bytesToGather = blockHeader.itemLength;
    b56a:	8923      	ldrh	r3, [r4, #8]
    if ( s_compactItemLength != 0u )
    b56c:	4a3a      	ldr	r2, [pc, #232]	; (b658 <CompactItem+0x1f0>)
    b56e:	8812      	ldrh	r2, [r2, #0]
    b570:	2a00      	cmp	r2, #0
    b572:	d0ba      	beq.n	b4ea <CompactItem+0x82>
    b574:	e7b2      	b.n	b4dc <CompactItem+0x74>
        assert(cache != NULL);
    b576:	4b40      	ldr	r3, [pc, #256]	; (b678 <CompactItem+0x210>)
    b578:	4a40      	ldr	r2, [pc, #256]	; (b67c <CompactItem+0x214>)
    b57a:	2191      	movs	r1, #145	; 0x91
    b57c:	00c9      	lsls	r1, r1, #3
    b57e:	4840      	ldr	r0, [pc, #256]	; (b680 <CompactItem+0x218>)
    b580:	4c40      	ldr	r4, [pc, #256]	; (b684 <CompactItem+0x21c>)
    b582:	47a0      	blx	r4
        if (!GatherData(s_sector, blockPointer, 0u, bytesToGather, (dataBlock + BLOCK_HEADER_SIZE )))
    b584:	4a37      	ldr	r2, [pc, #220]	; (b664 <CompactItem+0x1fc>)
    b586:	7810      	ldrb	r0, [r2, #0]
    b588:	4a39      	ldr	r2, [pc, #228]	; (b670 <CompactItem+0x208>)
    b58a:	3210      	adds	r2, #16
    b58c:	9200      	str	r2, [sp, #0]
    b58e:	2200      	movs	r2, #0
    b590:	9903      	ldr	r1, [sp, #12]
    b592:	4c3d      	ldr	r4, [pc, #244]	; (b688 <CompactItem+0x220>)
    b594:	47a0      	blx	r4
            return S_Nv_ReturnValue_Failure;
    b596:	2301      	movs	r3, #1
        if (!GatherData(s_sector, blockPointer, 0u, bytesToGather, (dataBlock + BLOCK_HEADER_SIZE )))
    b598:	2800      	cmp	r0, #0
    b59a:	d100      	bne.n	b59e <CompactItem+0x136>
    b59c:	e770      	b.n	b480 <CompactItem+0x18>
        memcpy(dataBlock, &blockHeader, BLOCK_HEADER_SIZE);
    b59e:	4934      	ldr	r1, [pc, #208]	; (b670 <CompactItem+0x208>)
    b5a0:	ab06      	add	r3, sp, #24
    b5a2:	000a      	movs	r2, r1
    b5a4:	0018      	movs	r0, r3
    b5a6:	c870      	ldmia	r0!, {r4, r5, r6}
    b5a8:	c270      	stmia	r2!, {r4, r5, r6}
    b5aa:	6800      	ldr	r0, [r0, #0]
    b5ac:	6010      	str	r0, [r2, #0]
        if ( !WriteAndCheck(s_sectorHead, dataBlock, blockHeader.blockLength + BLOCK_HEADER_SIZE) )
    b5ae:	88da      	ldrh	r2, [r3, #6]
    b5b0:	3210      	adds	r2, #16
    b5b2:	b292      	uxth	r2, r2
    b5b4:	4b2d      	ldr	r3, [pc, #180]	; (b66c <CompactItem+0x204>)
    b5b6:	8818      	ldrh	r0, [r3, #0]
    b5b8:	4b34      	ldr	r3, [pc, #208]	; (b68c <CompactItem+0x224>)
    b5ba:	4798      	blx	r3
            return false;
    b5bc:	2300      	movs	r3, #0
        if ( !WriteAndCheck(s_sectorHead, dataBlock, blockHeader.blockLength + BLOCK_HEADER_SIZE) )
    b5be:	2800      	cmp	r0, #0
    b5c0:	d100      	bne.n	b5c4 <CompactItem+0x15c>
    b5c2:	e75d      	b.n	b480 <CompactItem+0x18>
        UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), ITEM_64BYTE_ALIGNMENT);
    b5c4:	ab06      	add	r3, sp, #24
    b5c6:	88d8      	ldrh	r0, [r3, #6]
    b5c8:	3010      	adds	r0, #16
    b5ca:	b280      	uxth	r0, r0
    b5cc:	2102      	movs	r1, #2
    b5ce:	4b30      	ldr	r3, [pc, #192]	; (b690 <CompactItem+0x228>)
    b5d0:	4798      	blx	r3
    s_compactItemId = 0u;
    b5d2:	2300      	movs	r3, #0
    b5d4:	4a21      	ldr	r2, [pc, #132]	; (b65c <CompactItem+0x1f4>)
    b5d6:	8013      	strh	r3, [r2, #0]
    s_compactItemLength = 0u;
    b5d8:	4a1f      	ldr	r2, [pc, #124]	; (b658 <CompactItem+0x1f0>)
    b5da:	8013      	strh	r3, [r2, #0]
    cache->lastBlock = lastBlock;
    b5dc:	465b      	mov	r3, fp
    b5de:	9905      	ldr	r1, [sp, #20]
    b5e0:	7099      	strb	r1, [r3, #2]
    b5e2:	0a0b      	lsrs	r3, r1, #8
    b5e4:	465a      	mov	r2, fp
    b5e6:	70d3      	strb	r3, [r2, #3]
    return S_Nv_ReturnValue_Ok;
    b5e8:	2300      	movs	r3, #0
    b5ea:	e749      	b.n	b480 <CompactItem+0x18>
            bytesToGatherAndCommit = (currLength > ROW_SIZE) ? ROW_SIZE : currLength;
    b5ec:	b2ad      	uxth	r5, r5
            if (!GatherData(s_sector, blockPointer, inDataOffset, bytesToGatherAndCommit - dataBlockOffset , (dataBlock + dataBlockOffset)))
    b5ee:	1aaf      	subs	r7, r5, r2
    b5f0:	b2bb      	uxth	r3, r7
    b5f2:	0019      	movs	r1, r3
    b5f4:	4653      	mov	r3, sl
    b5f6:	7818      	ldrb	r0, [r3, #0]
    b5f8:	4b1d      	ldr	r3, [pc, #116]	; (b670 <CompactItem+0x208>)
    b5fa:	189b      	adds	r3, r3, r2
    b5fc:	9300      	str	r3, [sp, #0]
    b5fe:	9102      	str	r1, [sp, #8]
    b600:	000b      	movs	r3, r1
    b602:	0032      	movs	r2, r6
    b604:	9903      	ldr	r1, [sp, #12]
    b606:	4f20      	ldr	r7, [pc, #128]	; (b688 <CompactItem+0x220>)
    b608:	47b8      	blx	r7
    b60a:	2800      	cmp	r0, #0
    b60c:	d01e      	beq.n	b64c <CompactItem+0x1e4>
            if ( !WriteAndCheck(s_sectorHead, dataBlock, bytesToGatherAndCommit) )
    b60e:	4b17      	ldr	r3, [pc, #92]	; (b66c <CompactItem+0x204>)
    b610:	8818      	ldrh	r0, [r3, #0]
    b612:	002a      	movs	r2, r5
    b614:	4916      	ldr	r1, [pc, #88]	; (b670 <CompactItem+0x208>)
    b616:	4b1d      	ldr	r3, [pc, #116]	; (b68c <CompactItem+0x224>)
    b618:	4798      	blx	r3
    b61a:	2800      	cmp	r0, #0
    b61c:	d018      	beq.n	b650 <CompactItem+0x1e8>
            UpdateSectorHead(bytesToGatherAndCommit, ITEM_64BYTE_ALIGNMENT);
    b61e:	2102      	movs	r1, #2
    b620:	0028      	movs	r0, r5
    b622:	4b1b      	ldr	r3, [pc, #108]	; (b690 <CompactItem+0x228>)
    b624:	4798      	blx	r3
            currLength -= bytesToGatherAndCommit;
    b626:	1b64      	subs	r4, r4, r5
    b628:	b2a4      	uxth	r4, r4
            inDataOffset += (bytesToGatherAndCommit - dataBlockOffset);
    b62a:	9902      	ldr	r1, [sp, #8]
    b62c:	468c      	mov	ip, r1
    b62e:	4466      	add	r6, ip
    b630:	b2b6      	uxth	r6, r6
            dataBlockOffset = 0;
    b632:	2200      	movs	r2, #0
        } while(currLength > 0);
    b634:	2c00      	cmp	r4, #0
    b636:	d0cc      	beq.n	b5d2 <CompactItem+0x16a>
            bytesToGatherAndCommit = (currLength > ROW_SIZE) ? ROW_SIZE : currLength;
    b638:	1c25      	adds	r5, r4, #0
    b63a:	454c      	cmp	r4, r9
    b63c:	d9d6      	bls.n	b5ec <CompactItem+0x184>
    b63e:	466b      	mov	r3, sp
    b640:	8a5d      	ldrh	r5, [r3, #18]
    b642:	e7d3      	b.n	b5ec <CompactItem+0x184>
        return S_Nv_ReturnValue_Ok;
    b644:	2300      	movs	r3, #0
    b646:	e71b      	b.n	b480 <CompactItem+0x18>
        return S_Nv_ReturnValue_Ok;
    b648:	2300      	movs	r3, #0
    b64a:	e719      	b.n	b480 <CompactItem+0x18>
                return S_Nv_ReturnValue_Failure;
    b64c:	2301      	movs	r3, #1
    b64e:	e717      	b.n	b480 <CompactItem+0x18>
                return false;
    b650:	2300      	movs	r3, #0
    b652:	e715      	b.n	b480 <CompactItem+0x18>
    b654:	0000aced 	.word	0x0000aced
    b658:	2000077e 	.word	0x2000077e
    b65c:	2000077c 	.word	0x2000077c
    b660:	0000aee5 	.word	0x0000aee5
    b664:	200007ac 	.word	0x200007ac
    b668:	0000aa9d 	.word	0x0000aa9d
    b66c:	200007ae 	.word	0x200007ae
    b670:	20000668 	.word	0x20000668
    b674:	0000b3ed 	.word	0x0000b3ed
    b678:	0001a8b4 	.word	0x0001a8b4
    b67c:	0001aa3c 	.word	0x0001aa3c
    b680:	0001a924 	.word	0x0001a924
    b684:	00018299 	.word	0x00018299
    b688:	0000ad85 	.word	0x0000ad85
    b68c:	0000b009 	.word	0x0000b009
    b690:	0000ad09 	.word	0x0000ad09

0000b694 <compactItemTimerFired>:
{
    b694:	b510      	push	{r4, lr}
    (void)CompactItem();
    b696:	4b01      	ldr	r3, [pc, #4]	; (b69c <compactItemTimerFired+0x8>)
    b698:	4798      	blx	r3
}
    b69a:	bd10      	pop	{r4, pc}
    b69c:	0000b469 	.word	0x0000b469

0000b6a0 <WriteDataBlockAndHeader>:
{
    b6a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    b6a2:	46de      	mov	lr, fp
    b6a4:	4657      	mov	r7, sl
    b6a6:	464e      	mov	r6, r9
    b6a8:	4645      	mov	r5, r8
    b6aa:	b5e0      	push	{r5, r6, r7, lr}
    b6ac:	b083      	sub	sp, #12
    b6ae:	0004      	movs	r4, r0
    b6b0:	468a      	mov	sl, r1
    memset(dataBlock, 0xFF, sizeof(dataBlock));
    b6b2:	4d46      	ldr	r5, [pc, #280]	; (b7cc <WriteDataBlockAndHeader+0x12c>)
    b6b4:	2280      	movs	r2, #128	; 0x80
    b6b6:	0052      	lsls	r2, r2, #1
    b6b8:	21ff      	movs	r1, #255	; 0xff
    b6ba:	0028      	movs	r0, r5
    b6bc:	4b44      	ldr	r3, [pc, #272]	; (b7d0 <WriteDataBlockAndHeader+0x130>)
    b6be:	4798      	blx	r3
    pBlockHeader->dataCrc = ComputeCrc(pData, pBlockHeader->blockLength, 0xFFFF);
    b6c0:	4e44      	ldr	r6, [pc, #272]	; (b7d4 <WriteDataBlockAndHeader+0x134>)
    b6c2:	79a3      	ldrb	r3, [r4, #6]
    b6c4:	79e1      	ldrb	r1, [r4, #7]
    b6c6:	0209      	lsls	r1, r1, #8
    b6c8:	4319      	orrs	r1, r3
    b6ca:	0032      	movs	r2, r6
    b6cc:	4650      	mov	r0, sl
    b6ce:	4f42      	ldr	r7, [pc, #264]	; (b7d8 <WriteDataBlockAndHeader+0x138>)
    b6d0:	47b8      	blx	r7
    b6d2:	7020      	strb	r0, [r4, #0]
    b6d4:	0a00      	lsrs	r0, r0, #8
    b6d6:	7060      	strb	r0, [r4, #1]
    return ComputeCrc(((uint8_t*) pBlockHeader), (sizeof(BlockHeader_t) - sizeof(pBlockHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    b6d8:	0032      	movs	r2, r6
    b6da:	210e      	movs	r1, #14
    b6dc:	0020      	movs	r0, r4
    b6de:	47b8      	blx	r7
    pBlockHeader->headerCrc = ComputeHeaderCrc(pBlockHeader);
    b6e0:	73a0      	strb	r0, [r4, #14]
    b6e2:	0a00      	lsrs	r0, r0, #8
    b6e4:	73e0      	strb	r0, [r4, #15]
    memcpy(dataBlock, pBlockHeader, BLOCK_HEADER_SIZE);
    b6e6:	2210      	movs	r2, #16
    b6e8:	0021      	movs	r1, r4
    b6ea:	0028      	movs	r0, r5
    b6ec:	4b3b      	ldr	r3, [pc, #236]	; (b7dc <WriteDataBlockAndHeader+0x13c>)
    b6ee:	4798      	blx	r3
    currentLength = pBlockHeader->blockLength + BLOCK_HEADER_SIZE;
    b6f0:	79a3      	ldrb	r3, [r4, #6]
    b6f2:	79e2      	ldrb	r2, [r4, #7]
    b6f4:	0212      	lsls	r2, r2, #8
    b6f6:	431a      	orrs	r2, r3
    b6f8:	0015      	movs	r5, r2
    b6fa:	3510      	adds	r5, #16
    b6fc:	b2ad      	uxth	r5, r5
    if (pData != NULL )
    b6fe:	4653      	mov	r3, sl
    b700:	2b00      	cmp	r3, #0
    b702:	d012      	beq.n	b72a <WriteDataBlockAndHeader+0x8a>
        if(currentLength <= ROW_SIZE)
    b704:	2380      	movs	r3, #128	; 0x80
    b706:	005b      	lsls	r3, r3, #1
    b708:	429d      	cmp	r5, r3
    b70a:	d909      	bls.n	b720 <WriteDataBlockAndHeader+0x80>
    b70c:	2600      	movs	r6, #0
    b70e:	2710      	movs	r7, #16
                bytesToCommit = (currentLength > ROW_SIZE) ? ROW_SIZE : currentLength;
    b710:	2380      	movs	r3, #128	; 0x80
    b712:	005b      	lsls	r3, r3, #1
    b714:	469b      	mov	fp, r3
    b716:	466a      	mov	r2, sp
    b718:	80d3      	strh	r3, [r2, #6]
                memcpy(dataBlock + dataBlockOffset, pData + inDataOffset, bytesToCommit - dataBlockOffset);
    b71a:	4b2c      	ldr	r3, [pc, #176]	; (b7cc <WriteDataBlockAndHeader+0x12c>)
    b71c:	4699      	mov	r9, r3
    b71e:	e045      	b.n	b7ac <WriteDataBlockAndHeader+0x10c>
            memcpy(dataBlock + BLOCK_HEADER_SIZE , pData, pBlockHeader->blockLength);
    b720:	4651      	mov	r1, sl
    b722:	482a      	ldr	r0, [pc, #168]	; (b7cc <WriteDataBlockAndHeader+0x12c>)
    b724:	3010      	adds	r0, #16
    b726:	4b2d      	ldr	r3, [pc, #180]	; (b7dc <WriteDataBlockAndHeader+0x13c>)
    b728:	4798      	blx	r3
    if ( !WriteAndCheck(s_sectorHead, dataBlock, MIN((BLOCK_HEADER_SIZE + pBlockHeader->blockLength), ROW_SIZE)) )
    b72a:	79a3      	ldrb	r3, [r4, #6]
    b72c:	79e2      	ldrb	r2, [r4, #7]
    b72e:	0212      	lsls	r2, r2, #8
    b730:	431a      	orrs	r2, r3
    b732:	3210      	adds	r2, #16
    b734:	2380      	movs	r3, #128	; 0x80
    b736:	005b      	lsls	r3, r3, #1
    b738:	429a      	cmp	r2, r3
    b73a:	dd00      	ble.n	b73e <WriteDataBlockAndHeader+0x9e>
    b73c:	001a      	movs	r2, r3
    b73e:	b292      	uxth	r2, r2
    b740:	4b27      	ldr	r3, [pc, #156]	; (b7e0 <WriteDataBlockAndHeader+0x140>)
    b742:	8818      	ldrh	r0, [r3, #0]
    b744:	4921      	ldr	r1, [pc, #132]	; (b7cc <WriteDataBlockAndHeader+0x12c>)
    b746:	4b27      	ldr	r3, [pc, #156]	; (b7e4 <WriteDataBlockAndHeader+0x144>)
    b748:	4798      	blx	r3
    b74a:	4680      	mov	r8, r0
    b74c:	2800      	cmp	r0, #0
    b74e:	d033      	beq.n	b7b8 <WriteDataBlockAndHeader+0x118>
    UpdateSectorHead((pBlockHeader->blockLength + BLOCK_HEADER_SIZE), ITEM_64BYTE_ALIGNMENT );
    b750:	79a3      	ldrb	r3, [r4, #6]
    b752:	79e0      	ldrb	r0, [r4, #7]
    b754:	0200      	lsls	r0, r0, #8
    b756:	4318      	orrs	r0, r3
    b758:	3010      	adds	r0, #16
    b75a:	b280      	uxth	r0, r0
    b75c:	2102      	movs	r1, #2
    b75e:	4b22      	ldr	r3, [pc, #136]	; (b7e8 <WriteDataBlockAndHeader+0x148>)
    b760:	4798      	blx	r3
}
    b762:	4640      	mov	r0, r8
    b764:	b003      	add	sp, #12
    b766:	bc3c      	pop	{r2, r3, r4, r5}
    b768:	4690      	mov	r8, r2
    b76a:	4699      	mov	r9, r3
    b76c:	46a2      	mov	sl, r4
    b76e:	46ab      	mov	fp, r5
    b770:	bdf0      	pop	{r4, r5, r6, r7, pc}
                bytesToCommit = (currentLength > ROW_SIZE) ? ROW_SIZE : currentLength;
    b772:	b2a4      	uxth	r4, r4
                memcpy(dataBlock + dataBlockOffset, pData + inDataOffset, bytesToCommit - dataBlockOffset);
    b774:	464b      	mov	r3, r9
    b776:	19d8      	adds	r0, r3, r7
    b778:	1be2      	subs	r2, r4, r7
    b77a:	4653      	mov	r3, sl
    b77c:	1999      	adds	r1, r3, r6
    b77e:	4b17      	ldr	r3, [pc, #92]	; (b7dc <WriteDataBlockAndHeader+0x13c>)
    b780:	4798      	blx	r3
                if ( !WriteAndCheck(s_sectorHead, dataBlock, bytesToCommit))
    b782:	4b17      	ldr	r3, [pc, #92]	; (b7e0 <WriteDataBlockAndHeader+0x140>)
    b784:	8818      	ldrh	r0, [r3, #0]
    b786:	0022      	movs	r2, r4
    b788:	4649      	mov	r1, r9
    b78a:	4b16      	ldr	r3, [pc, #88]	; (b7e4 <WriteDataBlockAndHeader+0x144>)
    b78c:	4798      	blx	r3
    b78e:	4680      	mov	r8, r0
    b790:	2800      	cmp	r0, #0
    b792:	d0e6      	beq.n	b762 <WriteDataBlockAndHeader+0xc2>
                UpdateSectorHead(bytesToCommit, ITEM_64BYTE_ALIGNMENT);
    b794:	2102      	movs	r1, #2
    b796:	0020      	movs	r0, r4
    b798:	4b13      	ldr	r3, [pc, #76]	; (b7e8 <WriteDataBlockAndHeader+0x148>)
    b79a:	4798      	blx	r3
                currentLength -= bytesToCommit;
    b79c:	1b2d      	subs	r5, r5, r4
    b79e:	b2ad      	uxth	r5, r5
                inDataOffset += (bytesToCommit - dataBlockOffset);
    b7a0:	1be4      	subs	r4, r4, r7
    b7a2:	1936      	adds	r6, r6, r4
    b7a4:	b2b6      	uxth	r6, r6
                dataBlockOffset = 0;
    b7a6:	2700      	movs	r7, #0
            } while(currentLength > 0);
    b7a8:	2d00      	cmp	r5, #0
    b7aa:	d0da      	beq.n	b762 <WriteDataBlockAndHeader+0xc2>
                bytesToCommit = (currentLength > ROW_SIZE) ? ROW_SIZE : currentLength;
    b7ac:	1c2c      	adds	r4, r5, #0
    b7ae:	455d      	cmp	r5, fp
    b7b0:	d9df      	bls.n	b772 <WriteDataBlockAndHeader+0xd2>
    b7b2:	466b      	mov	r3, sp
    b7b4:	88dc      	ldrh	r4, [r3, #6]
    b7b6:	e7dc      	b.n	b772 <WriteDataBlockAndHeader+0xd2>
        UpdateSectorHead((pBlockHeader->blockLength + BLOCK_HEADER_SIZE), ITEM_64BYTE_ALIGNMENT);
    b7b8:	79a3      	ldrb	r3, [r4, #6]
    b7ba:	79e0      	ldrb	r0, [r4, #7]
    b7bc:	0200      	lsls	r0, r0, #8
    b7be:	4318      	orrs	r0, r3
    b7c0:	3010      	adds	r0, #16
    b7c2:	b280      	uxth	r0, r0
    b7c4:	2102      	movs	r1, #2
    b7c6:	4b08      	ldr	r3, [pc, #32]	; (b7e8 <WriteDataBlockAndHeader+0x148>)
    b7c8:	4798      	blx	r3
        return false;
    b7ca:	e7ca      	b.n	b762 <WriteDataBlockAndHeader+0xc2>
    b7cc:	20000668 	.word	0x20000668
    b7d0:	0001836d 	.word	0x0001836d
    b7d4:	0000ffff 	.word	0x0000ffff
    b7d8:	0000ad45 	.word	0x0000ad45
    b7dc:	0001835b 	.word	0x0001835b
    b7e0:	200007ae 	.word	0x200007ae
    b7e4:	0000b009 	.word	0x0000b009
    b7e8:	0000ad09 	.word	0x0000ad09

0000b7ec <S_Nv_Write_Impl>:
#if defined(S_XNV_LOGGING)
static S_Nv_ReturnValue_t S_Nv_Write_Original(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#else
S_Nv_ReturnValue_t S_Nv_Write_Impl(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#endif
{
    b7ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    b7ee:	46ce      	mov	lr, r9
    b7f0:	4647      	mov	r7, r8
    b7f2:	b580      	push	{r7, lr}
    b7f4:	b087      	sub	sp, #28
    b7f6:	0004      	movs	r4, r0
    b7f8:	9101      	str	r1, [sp, #4]
    b7fa:	0015      	movs	r5, r2
    b7fc:	001f      	movs	r7, r3
    assert((id != 0u) && (pData != NULL));
    b7fe:	2800      	cmp	r0, #0
    b800:	d00c      	beq.n	b81c <S_Nv_Write_Impl+0x30>
    b802:	2b00      	cmp	r3, #0
    b804:	d00a      	beq.n	b81c <S_Nv_Write_Impl+0x30>

    if ( PowerSupplyTooLow() )
    b806:	4b35      	ldr	r3, [pc, #212]	; (b8dc <S_Nv_Write_Impl+0xf0>)
    b808:	4798      	blx	r3
    {
        return S_Nv_ReturnValue_PowerSupplyTooLow;
    b80a:	2305      	movs	r3, #5
    if ( PowerSupplyTooLow() )
    b80c:	2800      	cmp	r0, #0
    b80e:	d00b      	beq.n	b828 <S_Nv_Write_Impl+0x3c>
        //SYS_StartTimer(&compactItemTimer);
        }
    }

    return S_Nv_ReturnValue_Ok;
}
    b810:	0018      	movs	r0, r3
    b812:	b007      	add	sp, #28
    b814:	bc0c      	pop	{r2, r3}
    b816:	4690      	mov	r8, r2
    b818:	4699      	mov	r9, r3
    b81a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert((id != 0u) && (pData != NULL));
    b81c:	4b30      	ldr	r3, [pc, #192]	; (b8e0 <S_Nv_Write_Impl+0xf4>)
    b81e:	4a31      	ldr	r2, [pc, #196]	; (b8e4 <S_Nv_Write_Impl+0xf8>)
    b820:	4931      	ldr	r1, [pc, #196]	; (b8e8 <S_Nv_Write_Impl+0xfc>)
    b822:	4832      	ldr	r0, [pc, #200]	; (b8ec <S_Nv_Write_Impl+0x100>)
    b824:	4c32      	ldr	r4, [pc, #200]	; (b8f0 <S_Nv_Write_Impl+0x104>)
    b826:	47a0      	blx	r4
    CompactSectorIfNeeded(BLOCK_HEADER_SIZE + dataLength);
    b828:	0028      	movs	r0, r5
    b82a:	3010      	adds	r0, #16
    b82c:	b280      	uxth	r0, r0
    b82e:	4b31      	ldr	r3, [pc, #196]	; (b8f4 <S_Nv_Write_Impl+0x108>)
    b830:	4798      	blx	r3
    Item_t *cache = FindItemCache(id);
    b832:	0020      	movs	r0, r4
    b834:	4b30      	ldr	r3, [pc, #192]	; (b8f8 <S_Nv_Write_Impl+0x10c>)
    b836:	4798      	blx	r3
    b838:	0006      	movs	r6, r0
        return S_Nv_ReturnValue_DoesNotExist;
    b83a:	2303      	movs	r3, #3
    if ( cache == NULL )
    b83c:	2800      	cmp	r0, #0
    b83e:	d0e7      	beq.n	b810 <S_Nv_Write_Impl+0x24>
    uint16_t blockPointer = cache->lastBlock;
    b840:	7883      	ldrb	r3, [r0, #2]
    b842:	78c4      	ldrb	r4, [r0, #3]
    b844:	0224      	lsls	r4, r4, #8
    b846:	431c      	orrs	r4, r3
    b848:	46a0      	mov	r8, r4
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    b84a:	4b2c      	ldr	r3, [pc, #176]	; (b8fc <S_Nv_Write_Impl+0x110>)
    b84c:	7818      	ldrb	r0, [r3, #0]
    b84e:	2310      	movs	r3, #16
    b850:	aa02      	add	r2, sp, #8
    b852:	0021      	movs	r1, r4
    b854:	4c2a      	ldr	r4, [pc, #168]	; (b900 <S_Nv_Write_Impl+0x114>)
    b856:	47a0      	blx	r4
    if ( ((uint32_t) offset + (uint32_t) dataLength) > (uint32_t) blockHeader.itemLength )
    b858:	ab02      	add	r3, sp, #8
    b85a:	8919      	ldrh	r1, [r3, #8]
    b85c:	9b01      	ldr	r3, [sp, #4]
    b85e:	195a      	adds	r2, r3, r5
        return S_Nv_ReturnValue_BeyondEnd;
    b860:	2304      	movs	r3, #4
    if ( ((uint32_t) offset + (uint32_t) dataLength) > (uint32_t) blockHeader.itemLength )
    b862:	428a      	cmp	r2, r1
    b864:	d8d4      	bhi.n	b810 <S_Nv_Write_Impl+0x24>
    blockHeader.blockOffset = offset;
    b866:	ab02      	add	r3, sp, #8
    b868:	466a      	mov	r2, sp
    b86a:	8892      	ldrh	r2, [r2, #4]
    b86c:	809a      	strh	r2, [r3, #4]
    blockHeader.blockLength = dataLength;
    b86e:	80dd      	strh	r5, [r3, #6]
    blockHeader.previousBlock = blockPointer;
    b870:	4642      	mov	r2, r8
    b872:	815a      	strh	r2, [r3, #10]
    if ( blockHeader.blockLength == blockHeader.itemLength )
    b874:	428d      	cmp	r5, r1
    b876:	d02c      	beq.n	b8d2 <S_Nv_Write_Impl+0xe6>
        blockHeader.writeCount++;
    b878:	ab02      	add	r3, sp, #8
    b87a:	899b      	ldrh	r3, [r3, #12]
    b87c:	3301      	adds	r3, #1
    b87e:	aa02      	add	r2, sp, #8
    b880:	8193      	strh	r3, [r2, #12]
    uint16_t newBlockPointer = s_sectorHead;
    b882:	4b20      	ldr	r3, [pc, #128]	; (b904 <S_Nv_Write_Impl+0x118>)
    b884:	881c      	ldrh	r4, [r3, #0]
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pData) )
    b886:	0039      	movs	r1, r7
    b888:	a802      	add	r0, sp, #8
    b88a:	4b1f      	ldr	r3, [pc, #124]	; (b908 <S_Nv_Write_Impl+0x11c>)
    b88c:	4798      	blx	r3
        return S_Nv_ReturnValue_Failure;
    b88e:	2301      	movs	r3, #1
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pData) )
    b890:	2800      	cmp	r0, #0
    b892:	d0bd      	beq.n	b810 <S_Nv_Write_Impl+0x24>
    cache->lastBlock = newBlockPointer;
    b894:	70b4      	strb	r4, [r6, #2]
    b896:	0a24      	lsrs	r4, r4, #8
    b898:	70f4      	strb	r4, [r6, #3]
    if ( blockHeader.writeCount > COMPACT_ITEM_THRESHOLD )
    b89a:	ab02      	add	r3, sp, #8
    b89c:	899a      	ldrh	r2, [r3, #12]
    return S_Nv_ReturnValue_Ok;
    b89e:	2300      	movs	r3, #0
    if ( blockHeader.writeCount > COMPACT_ITEM_THRESHOLD )
    b8a0:	2a64      	cmp	r2, #100	; 0x64
    b8a2:	d9b5      	bls.n	b810 <S_Nv_Write_Impl+0x24>
        s_compactItemId = blockHeader.id;
    b8a4:	ab02      	add	r3, sp, #8
    b8a6:	885a      	ldrh	r2, [r3, #2]
    b8a8:	4b18      	ldr	r3, [pc, #96]	; (b90c <S_Nv_Write_Impl+0x120>)
    b8aa:	801a      	strh	r2, [r3, #0]
        s_compactItemLength = 0u;           // no need to resize this item here
    b8ac:	2200      	movs	r2, #0
    b8ae:	4b18      	ldr	r3, [pc, #96]	; (b910 <S_Nv_Write_Impl+0x124>)
    b8b0:	801a      	strh	r2, [r3, #0]
        if (!SYS_TimerStarted(&compactItemTimer))
    b8b2:	4818      	ldr	r0, [pc, #96]	; (b914 <S_Nv_Write_Impl+0x128>)
    b8b4:	4b18      	ldr	r3, [pc, #96]	; (b918 <S_Nv_Write_Impl+0x12c>)
    b8b6:	4798      	blx	r3
    return S_Nv_ReturnValue_Ok;
    b8b8:	2300      	movs	r3, #0
        if (!SYS_TimerStarted(&compactItemTimer))
    b8ba:	2800      	cmp	r0, #0
    b8bc:	d1a8      	bne.n	b810 <S_Nv_Write_Impl+0x24>
        compactItemTimer.handler = compactItemTimerFired;
    b8be:	4b15      	ldr	r3, [pc, #84]	; (b914 <S_Nv_Write_Impl+0x128>)
    b8c0:	4a16      	ldr	r2, [pc, #88]	; (b91c <S_Nv_Write_Impl+0x130>)
    b8c2:	611a      	str	r2, [r3, #16]
        compactItemTimer.timeout = COMPACT_ITEM_DELAY_MS;
    b8c4:	4a16      	ldr	r2, [pc, #88]	; (b920 <S_Nv_Write_Impl+0x134>)
    b8c6:	605a      	str	r2, [r3, #4]
        compactItemTimer.interval = COMPACT_ITEM_DELAY_MS;
    b8c8:	609a      	str	r2, [r3, #8]
        compactItemTimer.mode = SYS_TIMER_INTERVAL_MODE;
    b8ca:	2200      	movs	r2, #0
    b8cc:	731a      	strb	r2, [r3, #12]
    return S_Nv_ReturnValue_Ok;
    b8ce:	2300      	movs	r3, #0
    b8d0:	e79e      	b.n	b810 <S_Nv_Write_Impl+0x24>
        blockHeader.writeCount = 0u;
    b8d2:	2300      	movs	r3, #0
    b8d4:	aa02      	add	r2, sp, #8
    b8d6:	8193      	strh	r3, [r2, #12]
    b8d8:	e7d3      	b.n	b882 <S_Nv_Write_Impl+0x96>
    b8da:	46c0      	nop			; (mov r8, r8)
    b8dc:	0000aced 	.word	0x0000aced
    b8e0:	0001a9bc 	.word	0x0001a9bc
    b8e4:	0001aa5c 	.word	0x0001aa5c
    b8e8:	00000596 	.word	0x00000596
    b8ec:	0001a924 	.word	0x0001a924
    b8f0:	00018299 	.word	0x00018299
    b8f4:	0000b3ed 	.word	0x0000b3ed
    b8f8:	0000aee5 	.word	0x0000aee5
    b8fc:	200007ac 	.word	0x200007ac
    b900:	0000aa9d 	.word	0x0000aa9d
    b904:	200007ae 	.word	0x200007ae
    b908:	0000b6a1 	.word	0x0000b6a1
    b90c:	2000077c 	.word	0x2000077c
    b910:	2000077e 	.word	0x2000077e
    b914:	2000063c 	.word	0x2000063c
    b918:	0000f6a5 	.word	0x0000f6a5
    b91c:	0000b695 	.word	0x0000b695
    b920:	00000bb8 	.word	0x00000bb8

0000b924 <S_Nv_Read_Impl>:
#if defined(S_XNV_LOGGING)
static S_Nv_ReturnValue_t S_Nv_Read_Original(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#else
S_Nv_ReturnValue_t S_Nv_Read_Impl(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#endif
{
    b924:	b5f0      	push	{r4, r5, r6, r7, lr}
    b926:	b083      	sub	sp, #12
    b928:	000c      	movs	r4, r1
    b92a:	0015      	movs	r5, r2
    b92c:	001e      	movs	r6, r3
    assert((id != 0u) && (pData != NULL));
    b92e:	2800      	cmp	r0, #0
    b930:	d009      	beq.n	b946 <S_Nv_Read_Impl+0x22>
    b932:	2b00      	cmp	r3, #0
    b934:	d007      	beq.n	b946 <S_Nv_Read_Impl+0x22>

    // get the pointer to the last written block for the item
    uint16_t lastBlockPointer = FindItem(id);
    b936:	4b10      	ldr	r3, [pc, #64]	; (b978 <S_Nv_Read_Impl+0x54>)
    b938:	4798      	blx	r3
    if ( lastBlockPointer == 0x0000u )
    {
        // item does not exist
        return S_Nv_ReturnValue_DoesNotExist;
    b93a:	2303      	movs	r3, #3
    if ( lastBlockPointer == 0x0000u )
    b93c:	2800      	cmp	r0, #0
    b93e:	d108      	bne.n	b952 <S_Nv_Read_Impl+0x2e>
    {
        return S_Nv_ReturnValue_BeyondEnd;
    }

    return S_Nv_ReturnValue_Ok;
}
    b940:	0018      	movs	r0, r3
    b942:	b003      	add	sp, #12
    b944:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert((id != 0u) && (pData != NULL));
    b946:	4b0d      	ldr	r3, [pc, #52]	; (b97c <S_Nv_Read_Impl+0x58>)
    b948:	4a0d      	ldr	r2, [pc, #52]	; (b980 <S_Nv_Read_Impl+0x5c>)
    b94a:	490e      	ldr	r1, [pc, #56]	; (b984 <S_Nv_Read_Impl+0x60>)
    b94c:	480e      	ldr	r0, [pc, #56]	; (b988 <S_Nv_Read_Impl+0x64>)
    b94e:	4c0f      	ldr	r4, [pc, #60]	; (b98c <S_Nv_Read_Impl+0x68>)
    b950:	47a0      	blx	r4
    if ( ((uint32_t) offset + (uint32_t) dataLength) >= 0x10000uL )
    b952:	1962      	adds	r2, r4, r5
    b954:	490e      	ldr	r1, [pc, #56]	; (b990 <S_Nv_Read_Impl+0x6c>)
        return S_Nv_ReturnValue_BeyondEnd;
    b956:	3301      	adds	r3, #1
    if ( ((uint32_t) offset + (uint32_t) dataLength) >= 0x10000uL )
    b958:	428a      	cmp	r2, r1
    b95a:	d8f1      	bhi.n	b940 <S_Nv_Read_Impl+0x1c>
    if ( !GatherData(s_sector, lastBlockPointer, offset, dataLength, pData ))
    b95c:	4b0d      	ldr	r3, [pc, #52]	; (b994 <S_Nv_Read_Impl+0x70>)
    b95e:	781f      	ldrb	r7, [r3, #0]
    b960:	9600      	str	r6, [sp, #0]
    b962:	002b      	movs	r3, r5
    b964:	0022      	movs	r2, r4
    b966:	0001      	movs	r1, r0
    b968:	0038      	movs	r0, r7
    b96a:	4c0b      	ldr	r4, [pc, #44]	; (b998 <S_Nv_Read_Impl+0x74>)
    b96c:	47a0      	blx	r4
    return S_Nv_ReturnValue_Ok;
    b96e:	4243      	negs	r3, r0
    b970:	4143      	adcs	r3, r0
    b972:	009b      	lsls	r3, r3, #2
    b974:	e7e4      	b.n	b940 <S_Nv_Read_Impl+0x1c>
    b976:	46c0      	nop			; (mov r8, r8)
    b978:	0000af59 	.word	0x0000af59
    b97c:	0001a9bc 	.word	0x0001a9bc
    b980:	0001aa6c 	.word	0x0001aa6c
    b984:	000005ee 	.word	0x000005ee
    b988:	0001a924 	.word	0x0001a924
    b98c:	00018299 	.word	0x00018299
    b990:	0000ffff 	.word	0x0000ffff
    b994:	200007ac 	.word	0x200007ac
    b998:	0000ad85 	.word	0x0000ad85

0000b99c <S_Nv_ItemLength_Impl>:

/** Interface function, see \ref S_Nv_ItemLength. */
uint16_t S_Nv_ItemLength_Impl(S_Nv_ItemId_t id)
{
    b99c:	b510      	push	{r4, lr}
    b99e:	b084      	sub	sp, #16
    assert(id != 0u);
    b9a0:	2800      	cmp	r0, #0
    b9a2:	d005      	beq.n	b9b0 <S_Nv_ItemLength_Impl+0x14>

    uint16_t blockPointer = FindItem(id);
    b9a4:	4b0a      	ldr	r3, [pc, #40]	; (b9d0 <S_Nv_ItemLength_Impl+0x34>)
    b9a6:	4798      	blx	r3
    b9a8:	1e01      	subs	r1, r0, #0
    if ( blockPointer == 0x0000u )
    b9aa:	d107      	bne.n	b9bc <S_Nv_ItemLength_Impl+0x20>

    // read last written item block header
    BlockHeader_t blockHeader;
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    return blockHeader.itemLength;
}
    b9ac:	b004      	add	sp, #16
    b9ae:	bd10      	pop	{r4, pc}
    assert(id != 0u);
    b9b0:	4b08      	ldr	r3, [pc, #32]	; (b9d4 <S_Nv_ItemLength_Impl+0x38>)
    b9b2:	4a09      	ldr	r2, [pc, #36]	; (b9d8 <S_Nv_ItemLength_Impl+0x3c>)
    b9b4:	4909      	ldr	r1, [pc, #36]	; (b9dc <S_Nv_ItemLength_Impl+0x40>)
    b9b6:	480a      	ldr	r0, [pc, #40]	; (b9e0 <S_Nv_ItemLength_Impl+0x44>)
    b9b8:	4c0a      	ldr	r4, [pc, #40]	; (b9e4 <S_Nv_ItemLength_Impl+0x48>)
    b9ba:	47a0      	blx	r4
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    b9bc:	4b0a      	ldr	r3, [pc, #40]	; (b9e8 <S_Nv_ItemLength_Impl+0x4c>)
    b9be:	7818      	ldrb	r0, [r3, #0]
    b9c0:	2310      	movs	r3, #16
    b9c2:	466a      	mov	r2, sp
    b9c4:	4c09      	ldr	r4, [pc, #36]	; (b9ec <S_Nv_ItemLength_Impl+0x50>)
    b9c6:	47a0      	blx	r4
    return blockHeader.itemLength;
    b9c8:	466b      	mov	r3, sp
    b9ca:	8918      	ldrh	r0, [r3, #8]
    b9cc:	e7ee      	b.n	b9ac <S_Nv_ItemLength_Impl+0x10>
    b9ce:	46c0      	nop			; (mov r8, r8)
    b9d0:	0000af59 	.word	0x0000af59
    b9d4:	0001a9b0 	.word	0x0001a9b0
    b9d8:	0001aa7c 	.word	0x0001aa7c
    b9dc:	0000060b 	.word	0x0000060b
    b9e0:	0001a924 	.word	0x0001a924
    b9e4:	00018299 	.word	0x00018299
    b9e8:	200007ac 	.word	0x200007ac
    b9ec:	0000aa9d 	.word	0x0000aa9d

0000b9f0 <S_Nv_ItemInit_Impl>:
{
    b9f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    b9f2:	b085      	sub	sp, #20
    b9f4:	0004      	movs	r4, r0
    b9f6:	000e      	movs	r6, r1
    b9f8:	0015      	movs	r5, r2
    assert((id != 0u) && (id < 0xF000u) && (itemLength <= MAX_ITEM_LENGTH));
    b9fa:	1e43      	subs	r3, r0, #1
    b9fc:	b29b      	uxth	r3, r3
    b9fe:	4a2e      	ldr	r2, [pc, #184]	; (bab8 <S_Nv_ItemInit_Impl+0xc8>)
    ba00:	4293      	cmp	r3, r2
    ba02:	d81e      	bhi.n	ba42 <S_Nv_ItemInit_Impl+0x52>
    ba04:	2380      	movs	r3, #128	; 0x80
    ba06:	011b      	lsls	r3, r3, #4
    ba08:	4299      	cmp	r1, r3
    ba0a:	d81a      	bhi.n	ba42 <S_Nv_ItemInit_Impl+0x52>
    if ( FindItem(id) != 0x0000u )
    ba0c:	4b2b      	ldr	r3, [pc, #172]	; (babc <S_Nv_ItemInit_Impl+0xcc>)
    ba0e:	4798      	blx	r3
    ba10:	2800      	cmp	r0, #0
    ba12:	d01d      	beq.n	ba50 <S_Nv_ItemInit_Impl+0x60>
        uint16_t oldItemLength = S_Nv_ItemLength(id);
    ba14:	0020      	movs	r0, r4
    ba16:	4b2a      	ldr	r3, [pc, #168]	; (bac0 <S_Nv_ItemInit_Impl+0xd0>)
    ba18:	4798      	blx	r3
        if ( oldItemLength != itemLength )
    ba1a:	4286      	cmp	r6, r0
    ba1c:	d007      	beq.n	ba2e <S_Nv_ItemInit_Impl+0x3e>
            s_compactItemId = id;
    ba1e:	4b29      	ldr	r3, [pc, #164]	; (bac4 <S_Nv_ItemInit_Impl+0xd4>)
    ba20:	801c      	strh	r4, [r3, #0]
            s_compactItemLength = itemLength;
    ba22:	4b29      	ldr	r3, [pc, #164]	; (bac8 <S_Nv_ItemInit_Impl+0xd8>)
    ba24:	801e      	strh	r6, [r3, #0]
            S_Nv_ReturnValue_t resizeResult = CompactItem();
    ba26:	4b29      	ldr	r3, [pc, #164]	; (bacc <S_Nv_ItemInit_Impl+0xdc>)
    ba28:	4798      	blx	r3
    ba2a:	1e03      	subs	r3, r0, #0
            if ( resizeResult != S_Nv_ReturnValue_Ok )
    ba2c:	d115      	bne.n	ba5a <S_Nv_ItemInit_Impl+0x6a>
        if (pDefaultData != NULL)
    ba2e:	2d00      	cmp	r5, #0
    ba30:	d040      	beq.n	bab4 <S_Nv_ItemInit_Impl+0xc4>
            return S_Nv_Read(id, 0u, itemLength, pDefaultData);
    ba32:	002b      	movs	r3, r5
    ba34:	0032      	movs	r2, r6
    ba36:	2100      	movs	r1, #0
    ba38:	0020      	movs	r0, r4
    ba3a:	4c25      	ldr	r4, [pc, #148]	; (bad0 <S_Nv_ItemInit_Impl+0xe0>)
    ba3c:	47a0      	blx	r4
    ba3e:	0003      	movs	r3, r0
    ba40:	e00b      	b.n	ba5a <S_Nv_ItemInit_Impl+0x6a>
    assert((id != 0u) && (id < 0xF000u) && (itemLength <= MAX_ITEM_LENGTH));
    ba42:	4b24      	ldr	r3, [pc, #144]	; (bad4 <S_Nv_ItemInit_Impl+0xe4>)
    ba44:	4a24      	ldr	r2, [pc, #144]	; (bad8 <S_Nv_ItemInit_Impl+0xe8>)
    ba46:	21aa      	movs	r1, #170	; 0xaa
    ba48:	00c9      	lsls	r1, r1, #3
    ba4a:	4824      	ldr	r0, [pc, #144]	; (badc <S_Nv_ItemInit_Impl+0xec>)
    ba4c:	4c24      	ldr	r4, [pc, #144]	; (bae0 <S_Nv_ItemInit_Impl+0xf0>)
    ba4e:	47a0      	blx	r4
    if ( PowerSupplyTooLow() )
    ba50:	4b24      	ldr	r3, [pc, #144]	; (bae4 <S_Nv_ItemInit_Impl+0xf4>)
    ba52:	4798      	blx	r3
        return S_Nv_ReturnValue_PowerSupplyTooLow;
    ba54:	2305      	movs	r3, #5
    if ( PowerSupplyTooLow() )
    ba56:	2800      	cmp	r0, #0
    ba58:	d002      	beq.n	ba60 <S_Nv_ItemInit_Impl+0x70>
}
    ba5a:	0018      	movs	r0, r3
    ba5c:	b005      	add	sp, #20
    ba5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    CompactSectorIfNeeded(BLOCK_HEADER_SIZE + itemLength);
    ba60:	0030      	movs	r0, r6
    ba62:	3010      	adds	r0, #16
    ba64:	b280      	uxth	r0, r0
    ba66:	4b20      	ldr	r3, [pc, #128]	; (bae8 <S_Nv_ItemInit_Impl+0xf8>)
    ba68:	4798      	blx	r3
    assert(s_itemCount < MAX_ITEM_COUNT);
    ba6a:	4b20      	ldr	r3, [pc, #128]	; (baec <S_Nv_ItemInit_Impl+0xfc>)
    ba6c:	781b      	ldrb	r3, [r3, #0]
    ba6e:	2b08      	cmp	r3, #8
    ba70:	d819      	bhi.n	baa6 <S_Nv_ItemInit_Impl+0xb6>
    uint16_t newItemPointer = s_sectorHead;
    ba72:	4b1f      	ldr	r3, [pc, #124]	; (baf0 <S_Nv_ItemInit_Impl+0x100>)
    ba74:	881f      	ldrh	r7, [r3, #0]
    blockHeader.id = newItemId;
    ba76:	466b      	mov	r3, sp
    ba78:	805c      	strh	r4, [r3, #2]
    blockHeader.blockOffset = 0x0000u;
    ba7a:	2300      	movs	r3, #0
    ba7c:	466a      	mov	r2, sp
    ba7e:	8093      	strh	r3, [r2, #4]
    blockHeader.blockLength = itemLength;
    ba80:	80d6      	strh	r6, [r2, #6]
    blockHeader.itemLength = itemLength;
    ba82:	8116      	strh	r6, [r2, #8]
    blockHeader.previousBlock = 0x0000u;
    ba84:	8153      	strh	r3, [r2, #10]
    blockHeader.writeCount = 0u;
    ba86:	8193      	strh	r3, [r2, #12]
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pDefaultData) )
    ba88:	0029      	movs	r1, r5
    ba8a:	4668      	mov	r0, sp
    ba8c:	4b19      	ldr	r3, [pc, #100]	; (baf4 <S_Nv_ItemInit_Impl+0x104>)
    ba8e:	4798      	blx	r3
        return S_Nv_ReturnValue_Failure;
    ba90:	2301      	movs	r3, #1
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pDefaultData) )
    ba92:	2800      	cmp	r0, #0
    ba94:	d0e1      	beq.n	ba5a <S_Nv_ItemInit_Impl+0x6a>
    Item_t *newItemCache = CreateItemCache(newItemId);
    ba96:	0020      	movs	r0, r4
    ba98:	4b17      	ldr	r3, [pc, #92]	; (baf8 <S_Nv_ItemInit_Impl+0x108>)
    ba9a:	4798      	blx	r3
    newItemCache->lastBlock = newItemPointer;
    ba9c:	7087      	strb	r7, [r0, #2]
    ba9e:	0a3f      	lsrs	r7, r7, #8
    baa0:	70c7      	strb	r7, [r0, #3]
    return S_Nv_ReturnValue_DidNotExist;
    baa2:	2302      	movs	r3, #2
    baa4:	e7d9      	b.n	ba5a <S_Nv_ItemInit_Impl+0x6a>
    assert(s_itemCount < MAX_ITEM_COUNT);
    baa6:	4b15      	ldr	r3, [pc, #84]	; (bafc <S_Nv_ItemInit_Impl+0x10c>)
    baa8:	4a0b      	ldr	r2, [pc, #44]	; (bad8 <S_Nv_ItemInit_Impl+0xe8>)
    baaa:	21af      	movs	r1, #175	; 0xaf
    baac:	00c9      	lsls	r1, r1, #3
    baae:	480b      	ldr	r0, [pc, #44]	; (badc <S_Nv_ItemInit_Impl+0xec>)
    bab0:	4c0b      	ldr	r4, [pc, #44]	; (bae0 <S_Nv_ItemInit_Impl+0xf0>)
    bab2:	47a0      	blx	r4
            return S_Nv_ReturnValue_Ok;
    bab4:	2300      	movs	r3, #0
    bab6:	e7d0      	b.n	ba5a <S_Nv_ItemInit_Impl+0x6a>
    bab8:	0000effe 	.word	0x0000effe
    babc:	0000af59 	.word	0x0000af59
    bac0:	0000b99d 	.word	0x0000b99d
    bac4:	2000077c 	.word	0x2000077c
    bac8:	2000077e 	.word	0x2000077e
    bacc:	0000b469 	.word	0x0000b469
    bad0:	0000b925 	.word	0x0000b925
    bad4:	0001a970 	.word	0x0001a970
    bad8:	0001aa48 	.word	0x0001aa48
    badc:	0001a924 	.word	0x0001a924
    bae0:	00018299 	.word	0x00018299
    bae4:	0000aced 	.word	0x0000aced
    bae8:	0000b3ed 	.word	0x0000b3ed
    baec:	200007a4 	.word	0x200007a4
    baf0:	200007ae 	.word	0x200007ae
    baf4:	0000b6a1 	.word	0x0000b6a1
    baf8:	0000af75 	.word	0x0000af75
    bafc:	0001a8e8 	.word	0x0001a8e8

0000bb00 <S_Nv_IsItemAvailable_Impl>:
/** Interface function, see \ref S_Nv_IsItemAvailable.
 *
 * Important: This will check whether the item is found in the storage area
 */
bool S_Nv_IsItemAvailable_Impl(S_Nv_ItemId_t id)
{
    bb00:	b510      	push	{r4, lr}
  return ( FindItem(id) != 0x0000u );
    bb02:	4b03      	ldr	r3, [pc, #12]	; (bb10 <S_Nv_IsItemAvailable_Impl+0x10>)
    bb04:	4798      	blx	r3
    bb06:	1e43      	subs	r3, r0, #1
    bb08:	4198      	sbcs	r0, r3
    bb0a:	b2c0      	uxtb	r0, r0
}
    bb0c:	bd10      	pop	{r4, pc}
    bb0e:	46c0      	nop			; (mov r8, r8)
    bb10:	0000af59 	.word	0x0000af59

0000bb14 <pdsInitItemMask>:
\param[in] itemMask - itemMask to be initialized

\return true itemMask is initialized, false otherwise
******************************************************************************/
static bool pdsInitItemMask(S_Nv_ItemId_t memoryId, uint8_t *itemMask)
{
    bb14:	b5f0      	push	{r4, r5, r6, r7, lr}
    bb16:	46d6      	mov	lr, sl
    bb18:	4647      	mov	r7, r8
    bb1a:	b580      	push	{r7, lr}
    bb1c:	b087      	sub	sp, #28
    bb1e:	000f      	movs	r7, r1
  if (PDS_ALL_EXISTENT_MEMORY == memoryId)
    bb20:	4b24      	ldr	r3, [pc, #144]	; (bbb4 <pdsInitItemMask+0xa0>)
    bb22:	4298      	cmp	r0, r3
    bb24:	d012      	beq.n	bb4c <pdsInitItemMask+0x38>
  {
    memset(itemMask, 0xFFU, PDS_ITEM_MASK_SIZE);
    itemMask[0] &= 0xFEU;
  }
  else if (PDS_DIRECTORY_MASK & memoryId)
    bb26:	0443      	lsls	r3, r0, #17
    bb28:	d41c      	bmi.n	bb64 <pdsInitItemMask+0x50>
    else
      return false;
  }
  else
  {
    itemMask[memoryId / 8] |= 1 << (memoryId % 8);
    bb2a:	08c3      	lsrs	r3, r0, #3
    bb2c:	18cf      	adds	r7, r1, r3
    bb2e:	2307      	movs	r3, #7
    bb30:	4018      	ands	r0, r3
    bb32:	3b06      	subs	r3, #6
    bb34:	4083      	lsls	r3, r0
    bb36:	783a      	ldrb	r2, [r7, #0]
    bb38:	4313      	orrs	r3, r2
    bb3a:	703b      	strb	r3, [r7, #0]
  }

  return true;
    bb3c:	2301      	movs	r3, #1
    bb3e:	9301      	str	r3, [sp, #4]
}
    bb40:	9801      	ldr	r0, [sp, #4]
    bb42:	b007      	add	sp, #28
    bb44:	bc0c      	pop	{r2, r3}
    bb46:	4690      	mov	r8, r2
    bb48:	469a      	mov	sl, r3
    bb4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memset(itemMask, 0xFFU, PDS_ITEM_MASK_SIZE);
    bb4c:	2202      	movs	r2, #2
    bb4e:	21ff      	movs	r1, #255	; 0xff
    bb50:	0038      	movs	r0, r7
    bb52:	4b19      	ldr	r3, [pc, #100]	; (bbb8 <pdsInitItemMask+0xa4>)
    bb54:	4798      	blx	r3
    itemMask[0] &= 0xFEU;
    bb56:	783b      	ldrb	r3, [r7, #0]
    bb58:	2201      	movs	r2, #1
    bb5a:	4393      	bics	r3, r2
    bb5c:	703b      	strb	r3, [r7, #0]
  return true;
    bb5e:	2301      	movs	r3, #1
    bb60:	9301      	str	r3, [sp, #4]
    bb62:	e7ed      	b.n	bb40 <pdsInitItemMask+0x2c>
    if (pdsGetDirDescr(memoryId, &dirDescr))
    bb64:	a904      	add	r1, sp, #16
    bb66:	4b15      	ldr	r3, [pc, #84]	; (bbbc <pdsInitItemMask+0xa8>)
    bb68:	4798      	blx	r3
    bb6a:	9001      	str	r0, [sp, #4]
    bb6c:	2800      	cmp	r0, #0
    bb6e:	d0e7      	beq.n	bb40 <pdsInitItemMask+0x2c>
      for (uint8_t index=0U; index < dirDescr.filesCount; index++)
    bb70:	ab04      	add	r3, sp, #16
    bb72:	889b      	ldrh	r3, [r3, #4]
    bb74:	4698      	mov	r8, r3
    bb76:	2b00      	cmp	r3, #0
    bb78:	d0e2      	beq.n	bb40 <pdsInitItemMask+0x2c>
    bb7a:	2400      	movs	r4, #0
        memcpy(&memId, (void const FLASH_PTR*)(dirDescr.list + index), sizeof(uint16_t));
    bb7c:	ab02      	add	r3, sp, #8
    bb7e:	1d9d      	adds	r5, r3, #6
    bb80:	4b0f      	ldr	r3, [pc, #60]	; (bbc0 <pdsInitItemMask+0xac>)
    bb82:	469a      	mov	sl, r3
        itemMask[memId / 8U] |= 1U << (memId % 8U);
    bb84:	2607      	movs	r6, #7
        memcpy(&memId, (void const FLASH_PTR*)(dirDescr.list + index), sizeof(uint16_t));
    bb86:	0061      	lsls	r1, r4, #1
    bb88:	9b04      	ldr	r3, [sp, #16]
    bb8a:	469c      	mov	ip, r3
    bb8c:	4461      	add	r1, ip
    bb8e:	2202      	movs	r2, #2
    bb90:	0028      	movs	r0, r5
    bb92:	47d0      	blx	sl
        itemMask[memId / 8U] |= 1U << (memId % 8U);
    bb94:	8829      	ldrh	r1, [r5, #0]
    bb96:	08ca      	lsrs	r2, r1, #3
    bb98:	18ba      	adds	r2, r7, r2
    bb9a:	4031      	ands	r1, r6
    bb9c:	2301      	movs	r3, #1
    bb9e:	408b      	lsls	r3, r1
    bba0:	7811      	ldrb	r1, [r2, #0]
    bba2:	430b      	orrs	r3, r1
    bba4:	7013      	strb	r3, [r2, #0]
      for (uint8_t index=0U; index < dirDescr.filesCount; index++)
    bba6:	3401      	adds	r4, #1
    bba8:	b2e4      	uxtb	r4, r4
    bbaa:	b2a3      	uxth	r3, r4
    bbac:	4543      	cmp	r3, r8
    bbae:	d3ea      	bcc.n	bb86 <pdsInitItemMask+0x72>
    bbb0:	e7c6      	b.n	bb40 <pdsInitItemMask+0x2c>
    bbb2:	46c0      	nop			; (mov r8, r8)
    bbb4:	00004002 	.word	0x00004002
    bbb8:	0001836d 	.word	0x0001836d
    bbbc:	0000be2d 	.word	0x0000be2d
    bbc0:	0001835b 	.word	0x0001835b

0000bbc4 <PDS_Store>:
{
    bbc4:	b510      	push	{r4, lr}
  if (!pdsInitItemMask(memoryId, itemsToStore))
    bbc6:	4905      	ldr	r1, [pc, #20]	; (bbdc <PDS_Store+0x18>)
    bbc8:	4b05      	ldr	r3, [pc, #20]	; (bbe0 <PDS_Store+0x1c>)
    bbca:	4798      	blx	r3
    bbcc:	1e04      	subs	r4, r0, #0
    bbce:	d101      	bne.n	bbd4 <PDS_Store+0x10>
}
    bbd0:	0020      	movs	r0, r4
    bbd2:	bd10      	pop	{r4, pc}
  pdsPostTask(PDS_STORE_ITEM_TASK_ID);
    bbd4:	2000      	movs	r0, #0
    bbd6:	4b03      	ldr	r3, [pc, #12]	; (bbe4 <PDS_Store+0x20>)
    bbd8:	4798      	blx	r3
  return true;
    bbda:	e7f9      	b.n	bbd0 <PDS_Store+0xc>
    bbdc:	200007b4 	.word	0x200007b4
    bbe0:	0000bb15 	.word	0x0000bb15
    bbe4:	0000bd79 	.word	0x0000bd79

0000bbe8 <pdsStoreItemTaskHandler>:
{
    bbe8:	b5f0      	push	{r4, r5, r6, r7, lr}
    bbea:	46de      	mov	lr, fp
    bbec:	4657      	mov	r7, sl
    bbee:	464e      	mov	r6, r9
    bbf0:	4645      	mov	r5, r8
    bbf2:	b5e0      	push	{r5, r6, r7, lr}
    bbf4:	b089      	sub	sp, #36	; 0x24
  for (i = 0U, byte_index = i_found + 1; i < PDS_ITEM_MASK_SIZE; i++, byte_index++)
    bbf6:	4b51      	ldr	r3, [pc, #324]	; (bd3c <pdsStoreItemTaskHandler+0x154>)
    bbf8:	7818      	ldrb	r0, [r3, #0]
    bbfa:	3001      	adds	r0, #1
    bbfc:	b2c0      	uxtb	r0, r0
    for (j = 0U, bit_index = j_found + 1; j < 8U; j++, bit_index++) {
    bbfe:	4b50      	ldr	r3, [pc, #320]	; (bd40 <pdsStoreItemTaskHandler+0x158>)
    bc00:	781b      	ldrb	r3, [r3, #0]
    bc02:	3301      	adds	r3, #1
      bit_index %= 8;
    bc04:	2207      	movs	r2, #7
    bc06:	4013      	ands	r3, r2
    bc08:	4698      	mov	r8, r3
    bc0a:	2301      	movs	r3, #1
    bc0c:	4642      	mov	r2, r8
    bc0e:	4093      	lsls	r3, r2
    bc10:	469a      	mov	sl, r3
    for (j = 0U, bit_index = j_found + 1; j < 8U; j++, bit_index++) {
    bc12:	2302      	movs	r3, #2
    bc14:	469c      	mov	ip, r3
    byte_index %= PDS_ITEM_MASK_SIZE;
    bc16:	2401      	movs	r4, #1
      if (itemsToStore[byte_index] & (1U << bit_index))
    bc18:	4b4a      	ldr	r3, [pc, #296]	; (bd44 <pdsStoreItemTaskHandler+0x15c>)
    bc1a:	469b      	mov	fp, r3
    bc1c:	4643      	mov	r3, r8
    bc1e:	3301      	adds	r3, #1
    bc20:	9302      	str	r3, [sp, #8]
    bc22:	2507      	movs	r5, #7
    bc24:	4667      	mov	r7, ip
    bc26:	e035      	b.n	bc94 <pdsStoreItemTaskHandler+0xac>
    bc28:	464f      	mov	r7, r9
        itemsToStore[byte_index] &= ~(1U << bit_index);
    bc2a:	2201      	movs	r2, #1
    bc2c:	9901      	ldr	r1, [sp, #4]
    bc2e:	408a      	lsls	r2, r1
    bc30:	4397      	bics	r7, r2
    bc32:	4944      	ldr	r1, [pc, #272]	; (bd44 <pdsStoreItemTaskHandler+0x15c>)
    bc34:	9c03      	ldr	r4, [sp, #12]
    bc36:	550f      	strb	r7, [r1, r4]
        i_found = byte_index;
    bc38:	4a40      	ldr	r2, [pc, #256]	; (bd3c <pdsStoreItemTaskHandler+0x154>)
    bc3a:	7010      	strb	r0, [r2, #0]
        j_found = bit_index;
    bc3c:	4a40      	ldr	r2, [pc, #256]	; (bd40 <pdsStoreItemTaskHandler+0x158>)
    bc3e:	7013      	strb	r3, [r2, #0]
  if (!S_Nv_IsItemAvailable(((S_Nv_ItemId_t)byte_index << 3U) + bit_index))
    bc40:	00c0      	lsls	r0, r0, #3
    bc42:	18c4      	adds	r4, r0, r3
    bc44:	0020      	movs	r0, r4
    bc46:	4b40      	ldr	r3, [pc, #256]	; (bd48 <pdsStoreItemTaskHandler+0x160>)
    bc48:	4798      	blx	r3
    bc4a:	2800      	cmp	r0, #0
    bc4c:	d13a      	bne.n	bcc4 <pdsStoreItemTaskHandler+0xdc>
    if(pdsGetItemDescr(((S_Nv_ItemId_t)byte_index << 3U) + bit_index, &itemDescr))
    bc4e:	a904      	add	r1, sp, #16
    bc50:	0020      	movs	r0, r4
    bc52:	4b3e      	ldr	r3, [pc, #248]	; (bd4c <pdsStoreItemTaskHandler+0x164>)
    bc54:	4798      	blx	r3
    bc56:	2800      	cmp	r0, #0
    bc58:	d04e      	beq.n	bcf8 <pdsStoreItemTaskHandler+0x110>
      if (itemDescr.filler)
    bc5a:	9b06      	ldr	r3, [sp, #24]
    bc5c:	2b00      	cmp	r3, #0
    bc5e:	d000      	beq.n	bc62 <pdsStoreItemTaskHandler+0x7a>
        itemDescr.filler();
    bc60:	4798      	blx	r3
      ret = S_Nv_ItemInit(((S_Nv_ItemId_t)byte_index << 3U) + bit_index, itemDescr.itemSize, itemDescr.itemData);
    bc62:	9a05      	ldr	r2, [sp, #20]
    bc64:	ab04      	add	r3, sp, #16
    bc66:	8859      	ldrh	r1, [r3, #2]
    bc68:	0020      	movs	r0, r4
    bc6a:	4b39      	ldr	r3, [pc, #228]	; (bd50 <pdsStoreItemTaskHandler+0x168>)
    bc6c:	4798      	blx	r3
      assert((S_Nv_ReturnValue_DidNotExist == ret) || (S_Nv_ReturnValue_Ok == ret));
    bc6e:	23fd      	movs	r3, #253	; 0xfd
    bc70:	4218      	tst	r0, r3
    bc72:	d041      	beq.n	bcf8 <pdsStoreItemTaskHandler+0x110>
    bc74:	4b37      	ldr	r3, [pc, #220]	; (bd54 <pdsStoreItemTaskHandler+0x16c>)
    bc76:	4a38      	ldr	r2, [pc, #224]	; (bd58 <pdsStoreItemTaskHandler+0x170>)
    bc78:	21ea      	movs	r1, #234	; 0xea
    bc7a:	4838      	ldr	r0, [pc, #224]	; (bd5c <pdsStoreItemTaskHandler+0x174>)
    bc7c:	4c38      	ldr	r4, [pc, #224]	; (bd60 <pdsStoreItemTaskHandler+0x178>)
    bc7e:	47a0      	blx	r4
    bc80:	464f      	mov	r7, r9
      if (itemsToStore[byte_index] & (1U << bit_index))
    bc82:	4643      	mov	r3, r8
    bc84:	9301      	str	r3, [sp, #4]
    bc86:	e7d0      	b.n	bc2a <pdsStoreItemTaskHandler+0x42>
  for (i = 0U, byte_index = i_found + 1; i < PDS_ITEM_MASK_SIZE; i++, byte_index++)
    bc88:	3001      	adds	r0, #1
    bc8a:	b2c0      	uxtb	r0, r0
    bc8c:	3f01      	subs	r7, #1
    bc8e:	b2ff      	uxtb	r7, r7
    bc90:	2f00      	cmp	r7, #0
    bc92:	d0d5      	beq.n	bc40 <pdsStoreItemTaskHandler+0x58>
    byte_index %= PDS_ITEM_MASK_SIZE;
    bc94:	4020      	ands	r0, r4
      if (itemsToStore[byte_index] & (1U << bit_index))
    bc96:	9003      	str	r0, [sp, #12]
    bc98:	465b      	mov	r3, fp
    bc9a:	5c1b      	ldrb	r3, [r3, r0]
    bc9c:	4699      	mov	r9, r3
    bc9e:	001e      	movs	r6, r3
    bca0:	4653      	mov	r3, sl
    bca2:	4233      	tst	r3, r6
    bca4:	d1ec      	bne.n	bc80 <pdsStoreItemTaskHandler+0x98>
    bca6:	9b02      	ldr	r3, [sp, #8]
    bca8:	002a      	movs	r2, r5
      bit_index %= 8;
    bcaa:	402b      	ands	r3, r5
      if (itemsToStore[byte_index] & (1U << bit_index))
    bcac:	9301      	str	r3, [sp, #4]
    bcae:	0031      	movs	r1, r6
    bcb0:	40d9      	lsrs	r1, r3
    bcb2:	420c      	tst	r4, r1
    bcb4:	d1b8      	bne.n	bc28 <pdsStoreItemTaskHandler+0x40>
    for (j = 0U, bit_index = j_found + 1; j < 8U; j++, bit_index++) {
    bcb6:	3301      	adds	r3, #1
    bcb8:	b2db      	uxtb	r3, r3
    bcba:	3a01      	subs	r2, #1
    bcbc:	b2d2      	uxtb	r2, r2
    bcbe:	2a00      	cmp	r2, #0
    bcc0:	d1f3      	bne.n	bcaa <pdsStoreItemTaskHandler+0xc2>
    bcc2:	e7e1      	b.n	bc88 <pdsStoreItemTaskHandler+0xa0>
  if (pdsGetItemDescr(id, &itemDescr))
    bcc4:	a904      	add	r1, sp, #16
    bcc6:	0020      	movs	r0, r4
    bcc8:	4b20      	ldr	r3, [pc, #128]	; (bd4c <pdsStoreItemTaskHandler+0x164>)
    bcca:	4798      	blx	r3
    bccc:	2800      	cmp	r0, #0
    bcce:	d013      	beq.n	bcf8 <pdsStoreItemTaskHandler+0x110>
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    bcd0:	ab04      	add	r3, sp, #16
    bcd2:	885b      	ldrh	r3, [r3, #2]
    bcd4:	2b00      	cmp	r3, #0
    bcd6:	d01e      	beq.n	bd16 <pdsStoreItemTaskHandler+0x12e>
    bcd8:	9b05      	ldr	r3, [sp, #20]
    bcda:	2b00      	cmp	r3, #0
    bcdc:	d01b      	beq.n	bd16 <pdsStoreItemTaskHandler+0x12e>
    if (itemDescr.filler)
    bcde:	9b06      	ldr	r3, [sp, #24]
    bce0:	2b00      	cmp	r3, #0
    bce2:	d000      	beq.n	bce6 <pdsStoreItemTaskHandler+0xfe>
      itemDescr.filler();
    bce4:	4798      	blx	r3
      ret = S_Nv_Write(id, 0U, itemDescr.itemSize, itemDescr.itemData);
    bce6:	9b05      	ldr	r3, [sp, #20]
    bce8:	aa04      	add	r2, sp, #16
    bcea:	8852      	ldrh	r2, [r2, #2]
    bcec:	2100      	movs	r1, #0
    bcee:	0020      	movs	r0, r4
    bcf0:	4c1c      	ldr	r4, [pc, #112]	; (bd64 <pdsStoreItemTaskHandler+0x17c>)
    bcf2:	47a0      	blx	r4
      assert(ret == S_Nv_ReturnValue_Ok);
    bcf4:	2800      	cmp	r0, #0
    bcf6:	d115      	bne.n	bd24 <pdsStoreItemTaskHandler+0x13c>
    if (itemsToStore[i])
    bcf8:	4b12      	ldr	r3, [pc, #72]	; (bd44 <pdsStoreItemTaskHandler+0x15c>)
    bcfa:	781b      	ldrb	r3, [r3, #0]
    bcfc:	2b00      	cmp	r3, #0
    bcfe:	d118      	bne.n	bd32 <pdsStoreItemTaskHandler+0x14a>
    bd00:	4b10      	ldr	r3, [pc, #64]	; (bd44 <pdsStoreItemTaskHandler+0x15c>)
    bd02:	785b      	ldrb	r3, [r3, #1]
    bd04:	2b00      	cmp	r3, #0
    bd06:	d114      	bne.n	bd32 <pdsStoreItemTaskHandler+0x14a>
}
    bd08:	b009      	add	sp, #36	; 0x24
    bd0a:	bc3c      	pop	{r2, r3, r4, r5}
    bd0c:	4690      	mov	r8, r2
    bd0e:	4699      	mov	r9, r3
    bd10:	46a2      	mov	sl, r4
    bd12:	46ab      	mov	fp, r5
    bd14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    bd16:	4b14      	ldr	r3, [pc, #80]	; (bd68 <pdsStoreItemTaskHandler+0x180>)
    bd18:	4a14      	ldr	r2, [pc, #80]	; (bd6c <pdsStoreItemTaskHandler+0x184>)
    bd1a:	2134      	movs	r1, #52	; 0x34
    bd1c:	31ff      	adds	r1, #255	; 0xff
    bd1e:	480f      	ldr	r0, [pc, #60]	; (bd5c <pdsStoreItemTaskHandler+0x174>)
    bd20:	4c0f      	ldr	r4, [pc, #60]	; (bd60 <pdsStoreItemTaskHandler+0x178>)
    bd22:	47a0      	blx	r4
      assert(ret == S_Nv_ReturnValue_Ok);
    bd24:	4b12      	ldr	r3, [pc, #72]	; (bd70 <pdsStoreItemTaskHandler+0x188>)
    bd26:	4a11      	ldr	r2, [pc, #68]	; (bd6c <pdsStoreItemTaskHandler+0x184>)
    bd28:	2142      	movs	r1, #66	; 0x42
    bd2a:	31ff      	adds	r1, #255	; 0xff
    bd2c:	480b      	ldr	r0, [pc, #44]	; (bd5c <pdsStoreItemTaskHandler+0x174>)
    bd2e:	4c0c      	ldr	r4, [pc, #48]	; (bd60 <pdsStoreItemTaskHandler+0x178>)
    bd30:	47a0      	blx	r4
      pdsPostTask(PDS_STORE_ITEM_TASK_ID);
    bd32:	2000      	movs	r0, #0
    bd34:	4b0f      	ldr	r3, [pc, #60]	; (bd74 <pdsStoreItemTaskHandler+0x18c>)
    bd36:	4798      	blx	r3
}
    bd38:	e7e6      	b.n	bd08 <pdsStoreItemTaskHandler+0x120>
    bd3a:	46c0      	nop			; (mov r8, r8)
    bd3c:	200007b0 	.word	0x200007b0
    bd40:	200007b6 	.word	0x200007b6
    bd44:	200007b4 	.word	0x200007b4
    bd48:	0000bb01 	.word	0x0000bb01
    bd4c:	0000bdcd 	.word	0x0000bdcd
    bd50:	0000b9f1 	.word	0x0000b9f1
    bd54:	0001ab20 	.word	0x0001ab20
    bd58:	0001ab68 	.word	0x0001ab68
    bd5c:	0001aad0 	.word	0x0001aad0
    bd60:	00018299 	.word	0x00018299
    bd64:	0000b7ed 	.word	0x0000b7ed
    bd68:	0001aa94 	.word	0x0001aa94
    bd6c:	0001ab80 	.word	0x0001ab80
    bd70:	0001ab90 	.word	0x0001ab90
    bd74:	0000bd79 	.word	0x0000bd79

0000bd78 <pdsPostTask>:
\param[in] taskId - id of a task
******************************************************************************/

void pdsPostTask(PdsTaskId_t taskId)
{
  pendingTasks |= (1U << taskId);
    bd78:	4a03      	ldr	r2, [pc, #12]	; (bd88 <pdsPostTask+0x10>)
    bd7a:	2301      	movs	r3, #1
    bd7c:	4083      	lsls	r3, r0
    bd7e:	7811      	ldrb	r1, [r2, #0]
    bd80:	430b      	orrs	r3, r1
    bd82:	7013      	strb	r3, [r2, #0]
//  SYS_PostTask(PDS_TASK_ID);
}
    bd84:	4770      	bx	lr
    bd86:	46c0      	nop			; (mov r8, r8)
    bd88:	200007b7 	.word	0x200007b7

0000bd8c <PDS_TaskHandler>:

/******************************************************************************
\brief General PDS task handler
******************************************************************************/
void PDS_TaskHandler(void)
{
    bd8c:	b570      	push	{r4, r5, r6, lr}
  if (pendingTasks)
    bd8e:	4b0d      	ldr	r3, [pc, #52]	; (bdc4 <PDS_TaskHandler+0x38>)
    bd90:	781d      	ldrb	r5, [r3, #0]
    bd92:	2d00      	cmp	r5, #0
    bd94:	d012      	beq.n	bdbc <PDS_TaskHandler+0x30>
  {
    uint8_t taskId = 0U;

    while (!(pendingTasks & (1U << taskId)))
    bd96:	0028      	movs	r0, r5
    bd98:	07eb      	lsls	r3, r5, #31
    bd9a:	d410      	bmi.n	bdbe <PDS_TaskHandler+0x32>
    bd9c:	2300      	movs	r3, #0
    bd9e:	2401      	movs	r4, #1
      taskId++;
    bda0:	3301      	adds	r3, #1
    bda2:	b2db      	uxtb	r3, r3
    while (!(pendingTasks & (1U << taskId)))
    bda4:	0019      	movs	r1, r3
    bda6:	0002      	movs	r2, r0
    bda8:	40da      	lsrs	r2, r3
    bdaa:	4214      	tst	r4, r2
    bdac:	d0f8      	beq.n	bda0 <PDS_TaskHandler+0x14>

    pendingTasks ^= (1U << taskId);
    bdae:	2301      	movs	r3, #1
    bdb0:	408b      	lsls	r3, r1
    bdb2:	405d      	eors	r5, r3
    bdb4:	4b03      	ldr	r3, [pc, #12]	; (bdc4 <PDS_TaskHandler+0x38>)
    bdb6:	701d      	strb	r5, [r3, #0]
    pdsTaskHandlers[taskId]();
    bdb8:	4b03      	ldr	r3, [pc, #12]	; (bdc8 <PDS_TaskHandler+0x3c>)
    bdba:	4798      	blx	r3
   
  }
}
    bdbc:	bd70      	pop	{r4, r5, r6, pc}
    while (!(pendingTasks & (1U << taskId)))
    bdbe:	2100      	movs	r1, #0
    bdc0:	e7f5      	b.n	bdae <PDS_TaskHandler+0x22>
    bdc2:	46c0      	nop			; (mov r8, r8)
    bdc4:	200007b7 	.word	0x200007b7
    bdc8:	0000bbe9 	.word	0x0000bbe9

0000bdcc <pdsGetItemDescr>:
\param[in] itemDescrToGet    - pointer to item descriptor to be loaded;

returns true if descriptor is found out for the given item ID, false - otherwise
******************************************************************************/
bool pdsGetItemDescr(S_Nv_ItemId_t itemId, ItemIdToMemoryMapping_t *itemDescrToGet )
{
    bdcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    bdce:	b087      	sub	sp, #28
    bdd0:	9101      	str	r1, [sp, #4]
  /* Calculate raw data size */
  for (uint8_t fileIdx = 0; fileIdx < PDS_ITEM_AMOUNT; fileIdx++)
  {
    ItemIdToMemoryMapping_t itemDescr;

    memcpy(&itemDescr, (void const *)itemDescrPtr, sizeof(ItemIdToMemoryMapping_t));
    bdd2:	aa02      	add	r2, sp, #8
    bdd4:	4b11      	ldr	r3, [pc, #68]	; (be1c <pdsGetItemDescr+0x50>)
    bdd6:	0011      	movs	r1, r2
    bdd8:	cb70      	ldmia	r3!, {r4, r5, r6}
    bdda:	c170      	stmia	r1!, {r4, r5, r6}
    bddc:	681b      	ldr	r3, [r3, #0]
    bdde:	600b      	str	r3, [r1, #0]

    if(itemDescr.itemId == itemId)
    bde0:	8813      	ldrh	r3, [r2, #0]
    bde2:	4283      	cmp	r3, r0
    bde4:	d012      	beq.n	be0c <pdsGetItemDescr+0x40>
    {
      memcpy(itemDescrToGet, &itemDescr, sizeof(ItemIdToMemoryMapping_t));
      return true;
    }
    itemDescrPtr++;
    bde6:	4b0e      	ldr	r3, [pc, #56]	; (be20 <pdsGetItemDescr+0x54>)
    memcpy(&itemDescr, (void const *)itemDescrPtr, sizeof(ItemIdToMemoryMapping_t));
    bde8:	aa02      	add	r2, sp, #8
  for (uint8_t fileIdx = 0; fileIdx < PDS_ITEM_AMOUNT; fileIdx++)
    bdea:	490e      	ldr	r1, [pc, #56]	; (be24 <pdsGetItemDescr+0x58>)
    bdec:	468c      	mov	ip, r1
    memcpy(&itemDescr, (void const *)itemDescrPtr, sizeof(ItemIdToMemoryMapping_t));
    bdee:	0011      	movs	r1, r2
    bdf0:	001c      	movs	r4, r3
    bdf2:	cce0      	ldmia	r4!, {r5, r6, r7}
    bdf4:	c1e0      	stmia	r1!, {r5, r6, r7}
    bdf6:	6824      	ldr	r4, [r4, #0]
    bdf8:	600c      	str	r4, [r1, #0]
    if(itemDescr.itemId == itemId)
    bdfa:	8811      	ldrh	r1, [r2, #0]
    bdfc:	4281      	cmp	r1, r0
    bdfe:	d005      	beq.n	be0c <pdsGetItemDescr+0x40>
    itemDescrPtr++;
    be00:	3310      	adds	r3, #16
  for (uint8_t fileIdx = 0; fileIdx < PDS_ITEM_AMOUNT; fileIdx++)
    be02:	4563      	cmp	r3, ip
    be04:	d1f3      	bne.n	bdee <pdsGetItemDescr+0x22>

  }
  return false;
    be06:	2000      	movs	r0, #0
}
    be08:	b007      	add	sp, #28
    be0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      memcpy(itemDescrToGet, &itemDescr, sizeof(ItemIdToMemoryMapping_t));
    be0c:	2210      	movs	r2, #16
    be0e:	a902      	add	r1, sp, #8
    be10:	9801      	ldr	r0, [sp, #4]
    be12:	4b05      	ldr	r3, [pc, #20]	; (be28 <pdsGetItemDescr+0x5c>)
    be14:	4798      	blx	r3
      return true;
    be16:	2001      	movs	r0, #1
    be18:	e7f6      	b.n	be08 <pdsGetItemDescr+0x3c>
    be1a:	46c0      	nop			; (mov r8, r8)
    be1c:	00004400 	.word	0x00004400
    be20:	00004410 	.word	0x00004410
    be24:	00004490 	.word	0x00004490
    be28:	0001835b 	.word	0x0001835b

0000be2c <pdsGetDirDescr>:
\param[in] dirDescrToGet    - pointer to dir descriptor to be loaded;

returns true if descriptor is found out for the given dir ID, false - otherwise
******************************************************************************/
bool pdsGetDirDescr(S_Nv_ItemId_t itemId, PDS_DirDescr_t *dirDescrToGet )
{
    be2c:	b570      	push	{r4, r5, r6, lr}
    be2e:	b082      	sub	sp, #8
    be30:	000c      	movs	r4, r1
  /* Calculate raw data size */
  for (uint8_t fileIdx = 0; fileIdx < PDS_DIRECTORIES_AMOUNT; fileIdx++)
  {
    PDS_DirDescr_t dirDescr;

    memcpy(&dirDescr, (void const *)dirDescrPtr, sizeof(PDS_DirDescr_t));
    be32:	466b      	mov	r3, sp
    be34:	4a08      	ldr	r2, [pc, #32]	; (be58 <pdsGetDirDescr+0x2c>)
    be36:	4669      	mov	r1, sp
    be38:	ca60      	ldmia	r2!, {r5, r6}
    be3a:	c160      	stmia	r1!, {r5, r6}
    if(dirDescr.memoryId == itemId)
    be3c:	88da      	ldrh	r2, [r3, #6]
      memcpy(dirDescrToGet, &dirDescr, sizeof(PDS_DirDescr_t));
      return true;
    }
    dirDescrPtr++;
  }
  return false;
    be3e:	2300      	movs	r3, #0
    if(dirDescr.memoryId == itemId)
    be40:	4282      	cmp	r2, r0
    be42:	d002      	beq.n	be4a <pdsGetDirDescr+0x1e>
}
    be44:	0018      	movs	r0, r3
    be46:	b002      	add	sp, #8
    be48:	bd70      	pop	{r4, r5, r6, pc}
      memcpy(dirDescrToGet, &dirDescr, sizeof(PDS_DirDescr_t));
    be4a:	2208      	movs	r2, #8
    be4c:	4669      	mov	r1, sp
    be4e:	0020      	movs	r0, r4
    be50:	4b02      	ldr	r3, [pc, #8]	; (be5c <pdsGetDirDescr+0x30>)
    be52:	4798      	blx	r3
      return true;
    be54:	2301      	movs	r3, #1
    be56:	e7f5      	b.n	be44 <pdsGetDirDescr+0x18>
    be58:	00004400 	.word	0x00004400
    be5c:	0001835b 	.word	0x0001835b

0000be60 <MiMAC_SetAltAddress>:
 *      None
 *
 *****************************************************************************************/

bool MiMAC_SetAltAddress( uint8_t *Address,  uint8_t *PanId)
{
    be60:	b510      	push	{r4, lr}
	myNetworkAddress.v[0] = Address[0];
    be62:	7802      	ldrb	r2, [r0, #0]
    be64:	4b08      	ldr	r3, [pc, #32]	; (be88 <MiMAC_SetAltAddress+0x28>)
    be66:	701a      	strb	r2, [r3, #0]
	myNetworkAddress.v[1] = Address[1];
    be68:	7842      	ldrb	r2, [r0, #1]
    be6a:	705a      	strb	r2, [r3, #1]
	MAC_PANID.v[0] = PanId[0];
    be6c:	780a      	ldrb	r2, [r1, #0]
    be6e:	4c07      	ldr	r4, [pc, #28]	; (be8c <MiMAC_SetAltAddress+0x2c>)
    be70:	7022      	strb	r2, [r4, #0]
	MAC_PANID.v[1] = PanId[1];
    be72:	784a      	ldrb	r2, [r1, #1]
    be74:	7062      	strb	r2, [r4, #1]
	PHY_SetShortAddr(myNetworkAddress.Val);
    be76:	8818      	ldrh	r0, [r3, #0]
    be78:	4b05      	ldr	r3, [pc, #20]	; (be90 <MiMAC_SetAltAddress+0x30>)
    be7a:	4798      	blx	r3
	PHY_SetPanId(MAC_PANID.Val);
    be7c:	8820      	ldrh	r0, [r4, #0]
    be7e:	4b05      	ldr	r3, [pc, #20]	; (be94 <MiMAC_SetAltAddress+0x34>)
    be80:	4798      	blx	r3
	return true;
}
    be82:	2001      	movs	r0, #1
    be84:	bd10      	pop	{r4, pc}
    be86:	46c0      	nop			; (mov r8, r8)
    be88:	20002710 	.word	0x20002710
    be8c:	20002784 	.word	0x20002784
    be90:	0000d1cd 	.word	0x0000d1cd
    be94:	0000d1b9 	.word	0x0000d1b9

0000be98 <mic_generator>:

#if defined (ENABLE_SECURITY)
uint8_t addr[8] = {0xda , 0x98 , 0x22 , 0xfe , 0xff , 0xa3 , 0x04 , 0x00};
void mic_generator (uint8_t *Payloadinfo, uint8_t len , uint8_t frame_control ,  API_UINT32_UNION FrameCounter ,  uint8_t *SourceIEEEAddress)
{
    be98:	b5f0      	push	{r4, r5, r6, r7, lr}
    be9a:	46c6      	mov	lr, r8
    be9c:	b500      	push	{lr}
    be9e:	b0c6      	sub	sp, #280	; 0x118
    bea0:	0006      	movs	r6, r0
    bea2:	000c      	movs	r4, r1
    bea4:	469c      	mov	ip, r3
    bea6:	994c      	ldr	r1, [sp, #304]	; 0x130
	uint16_t i ;										
	uint8_t j , iterations  , copy_packet1[255] , cbc_header_with_padding[16];
	// Calculating No of blocks in the packet (1 block = 16 bytes of data)
	iterations = len/16;
    bea8:	0925      	lsrs	r5, r4, #4
	if (len % 16 != 0) iterations++;
    beaa:	0723      	lsls	r3, r4, #28
    beac:	d000      	beq.n	beb0 <mic_generator+0x18>
    beae:	3501      	adds	r5, #1
	InitVect_in[0] = 0x49;//frame_control;
    beb0:	2049      	movs	r0, #73	; 0x49
    beb2:	4b40      	ldr	r3, [pc, #256]	; (bfb4 <mic_generator+0x11c>)
    beb4:	7018      	strb	r0, [r3, #0]
	cbc_header_with_padding[0] = 0x00;  // l(a)
    beb6:	2300      	movs	r3, #0
    beb8:	a802      	add	r0, sp, #8
    beba:	7003      	strb	r3, [r0, #0]
	cbc_header_with_padding[1] = 0x0d;  // l(a)Header Length
    bebc:	330d      	adds	r3, #13
    bebe:	7043      	strb	r3, [r0, #1]
	cbc_header_with_padding[2] = frame_control;  //frame_control;  //byte 1
    bec0:	7082      	strb	r2, [r0, #2]
    bec2:	2200      	movs	r2, #0
	for (i=0;i<8;i++)
	{
		InitVect_in[i+1] =  SourceIEEEAddress[i];
    bec4:	4b3b      	ldr	r3, [pc, #236]	; (bfb4 <mic_generator+0x11c>)
    bec6:	5c8f      	ldrb	r7, [r1, r2]
    bec8:	18d0      	adds	r0, r2, r3
    beca:	7047      	strb	r7, [r0, #1]
		cbc_header_with_padding[i+7] = SourceIEEEAddress[i];
    becc:	0010      	movs	r0, r2
    bece:	af02      	add	r7, sp, #8
    bed0:	46b8      	mov	r8, r7
    bed2:	4440      	add	r0, r8
    bed4:	5c8f      	ldrb	r7, [r1, r2]
    bed6:	71c7      	strb	r7, [r0, #7]
    bed8:	3201      	adds	r2, #1
	for (i=0;i<8;i++)
    beda:	2a08      	cmp	r2, #8
    bedc:	d1f3      	bne.n	bec6 <mic_generator+0x2e>
	}
	for (i=0;i<4;i++)
	{
		InitVect_in[i+9] = FrameCounter.v[i];
    bede:	4663      	mov	r3, ip
    bee0:	466a      	mov	r2, sp
    bee2:	71d3      	strb	r3, [r2, #7]
    bee4:	79d3      	ldrb	r3, [r2, #7]
    bee6:	4833      	ldr	r0, [pc, #204]	; (bfb4 <mic_generator+0x11c>)
    bee8:	7243      	strb	r3, [r0, #9]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    beea:	4642      	mov	r2, r8
    beec:	70d3      	strb	r3, [r2, #3]
		InitVect_in[i+9] = FrameCounter.v[i];
    beee:	4663      	mov	r3, ip
    bef0:	041b      	lsls	r3, r3, #16
    bef2:	0e1b      	lsrs	r3, r3, #24
    bef4:	7283      	strb	r3, [r0, #10]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    bef6:	7113      	strb	r3, [r2, #4]
		InitVect_in[i+9] = FrameCounter.v[i];
    bef8:	4663      	mov	r3, ip
    befa:	021b      	lsls	r3, r3, #8
    befc:	0e1b      	lsrs	r3, r3, #24
    befe:	72c3      	strb	r3, [r0, #11]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    bf00:	7153      	strb	r3, [r2, #5]
		InitVect_in[i+9] = FrameCounter.v[i];
    bf02:	4663      	mov	r3, ip
    bf04:	0e1b      	lsrs	r3, r3, #24
    bf06:	7303      	strb	r3, [r0, #12]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    bf08:	7193      	strb	r3, [r2, #6]
	}
	//cbc_header_with_padding[14] = 0x00;  // Padding
	cbc_header_with_padding[15] = 0x00;   // Padding
    bf0a:	2300      	movs	r3, #0
    bf0c:	73d3      	strb	r3, [r2, #15]
	InitVect_in[13] = SECURITY_LEVEL; //Security Mode // 0x04 --> CCM-32
    bf0e:	2204      	movs	r2, #4
    bf10:	7342      	strb	r2, [r0, #13]
	InitVect_in[14] = 0x00; // 15 th byte padded to zero
    bf12:	7383      	strb	r3, [r0, #14]
	InitVect_in[15] = len; // For MIC calculation All preceding blocks will be incremented by 1
    bf14:	73c4      	strb	r4, [r0, #15]
	PHY_EncryptReq(&InitVect_in[0], (uint8_t *)mySecurityKey);
    bf16:	4928      	ldr	r1, [pc, #160]	; (bfb8 <mic_generator+0x120>)
    bf18:	4b28      	ldr	r3, [pc, #160]	; (bfbc <mic_generator+0x124>)
    bf1a:	4798      	blx	r3
    bf1c:	2300      	movs	r3, #0
	for (i=0;i<16;i++)
	{
		copy_packet1[i] = cbc_header_with_padding[i];
    bf1e:	a906      	add	r1, sp, #24
    bf20:	aa02      	add	r2, sp, #8
    bf22:	5c9a      	ldrb	r2, [r3, r2]
    bf24:	545a      	strb	r2, [r3, r1]
    bf26:	3301      	adds	r3, #1
	for (i=0;i<16;i++)
    bf28:	2b10      	cmp	r3, #16
    bf2a:	d1f9      	bne.n	bf20 <mic_generator+0x88>
	}
	// Copy the Payload and Do the padding
	for (i=16;i<len+16;i++)
    bf2c:	0027      	movs	r7, r4
    bf2e:	3710      	adds	r7, #16
    bf30:	2f10      	cmp	r7, #16
    bf32:	dd0a      	ble.n	bf4a <mic_generator+0xb2>
    bf34:	2010      	movs	r0, #16
	{
		copy_packet1[i]	= Payloadinfo[i-16];  // Copying the Payload
    bf36:	a906      	add	r1, sp, #24
    bf38:	18f2      	adds	r2, r6, r3
    bf3a:	3a10      	subs	r2, #16
    bf3c:	7812      	ldrb	r2, [r2, #0]
    bf3e:	540a      	strb	r2, [r1, r0]
	for (i=16;i<len+16;i++)
    bf40:	3301      	adds	r3, #1
    bf42:	b29b      	uxth	r3, r3
    bf44:	0018      	movs	r0, r3
    bf46:	42bb      	cmp	r3, r7
    bf48:	dbf6      	blt.n	bf38 <mic_generator+0xa0>
	}
	for (i=len+16;i<(iterations *16) + 16 ; i++ )
    bf4a:	0023      	movs	r3, r4
    bf4c:	3310      	adds	r3, #16
    bf4e:	001a      	movs	r2, r3
    bf50:	3501      	adds	r5, #1
    bf52:	0129      	lsls	r1, r5, #4
    bf54:	428b      	cmp	r3, r1
    bf56:	da07      	bge.n	bf68 <mic_generator+0xd0>
	{
		copy_packet1[i] = 0; // Padding
    bf58:	ac06      	add	r4, sp, #24
    bf5a:	2000      	movs	r0, #0
    bf5c:	54a0      	strb	r0, [r4, r2]
	for (i=len+16;i<(iterations *16) + 16 ; i++ )
    bf5e:	3301      	adds	r3, #1
    bf60:	b29b      	uxth	r3, r3
    bf62:	001a      	movs	r2, r3
    bf64:	428b      	cmp	r3, r1
    bf66:	dbf9      	blt.n	bf5c <mic_generator+0xc4>
	}
	for (i=0;i<iterations+1;i++)
    bf68:	2200      	movs	r2, #0
    bf6a:	2700      	movs	r7, #0
    bf6c:	2d00      	cmp	r5, #0
    bf6e:	dd15      	ble.n	bf9c <mic_generator+0x104>
	{
		for (j=0;j<16;j++)
		{
			InitVect_in[j]	= InitVect_in[j] ^ copy_packet1[j+(i*16)];
    bf70:	4e10      	ldr	r6, [pc, #64]	; (bfb4 <mic_generator+0x11c>)
    bf72:	0112      	lsls	r2, r2, #4
    bf74:	2300      	movs	r3, #0
    bf76:	a906      	add	r1, sp, #24
    bf78:	188c      	adds	r4, r1, r2
    bf7a:	1999      	adds	r1, r3, r6
    bf7c:	5ce2      	ldrb	r2, [r4, r3]
    bf7e:	7808      	ldrb	r0, [r1, #0]
    bf80:	4042      	eors	r2, r0
    bf82:	700a      	strb	r2, [r1, #0]
    bf84:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    bf86:	2b10      	cmp	r3, #16
    bf88:	d1f7      	bne.n	bf7a <mic_generator+0xe2>
		}
		PHY_EncryptReq(&InitVect_in[0], (uint8_t *)mySecurityKey);
    bf8a:	490b      	ldr	r1, [pc, #44]	; (bfb8 <mic_generator+0x120>)
    bf8c:	4809      	ldr	r0, [pc, #36]	; (bfb4 <mic_generator+0x11c>)
    bf8e:	4b0b      	ldr	r3, [pc, #44]	; (bfbc <mic_generator+0x124>)
    bf90:	4798      	blx	r3
	for (i=0;i<iterations+1;i++)
    bf92:	3701      	adds	r7, #1
    bf94:	b2bf      	uxth	r7, r7
    bf96:	003a      	movs	r2, r7
    bf98:	42af      	cmp	r7, r5
    bf9a:	dbea      	blt.n	bf72 <mic_generator+0xda>
    bf9c:	2300      	movs	r3, #0
	}
	for (i=0;i<16;i++)
	{
		CBC_mic[i] = InitVect_in[i];
    bf9e:	4808      	ldr	r0, [pc, #32]	; (bfc0 <mic_generator+0x128>)
    bfa0:	4904      	ldr	r1, [pc, #16]	; (bfb4 <mic_generator+0x11c>)
    bfa2:	5cca      	ldrb	r2, [r1, r3]
    bfa4:	54c2      	strb	r2, [r0, r3]
    bfa6:	3301      	adds	r3, #1
	for (i=0;i<16;i++)
    bfa8:	2b10      	cmp	r3, #16
    bfaa:	d1fa      	bne.n	bfa2 <mic_generator+0x10a>
	}

}
    bfac:	b046      	add	sp, #280	; 0x118
    bfae:	bc04      	pop	{r2}
    bfb0:	4690      	mov	r8, r2
    bfb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bfb4:	20002720 	.word	0x20002720
    bfb8:	0001abac 	.word	0x0001abac
    bfbc:	0000d2fd 	.word	0x0000d2fd
    bfc0:	20002764 	.word	0x20002764

0000bfc4 <DataEncrypt>:
 *
 *****************************************************************************************/

bool DataEncrypt(uint8_t *Payloadinfo, uint8_t *Payload_len, API_UINT32_UNION FrameCounter,
uint8_t FrameControl)
{
    bfc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    bfc6:	46de      	mov	lr, fp
    bfc8:	4657      	mov	r7, sl
    bfca:	464e      	mov	r6, r9
    bfcc:	4645      	mov	r5, r8
    bfce:	b5e0      	push	{r5, r6, r7, lr}
    bfd0:	b08d      	sub	sp, #52	; 0x34
    bfd2:	4680      	mov	r8, r0
    bfd4:	000e      	movs	r6, r1
    bfd6:	0014      	movs	r4, r2
    bfd8:	001a      	movs	r2, r3
	uint16_t i ;
	uint8_t iterations , block[16] , j , CTR_Nonce_and_Counter[16];
	// Calculating No of blocks in the packet (1 block = 16 bytes of data)
	iterations = *Payload_len/16;
    bfda:	7809      	ldrb	r1, [r1, #0]
    bfdc:	090d      	lsrs	r5, r1, #4
	if (*Payload_len % 16 != 0) iterations++;
    bfde:	070b      	lsls	r3, r1, #28
    bfe0:	d000      	beq.n	bfe4 <DataEncrypt+0x20>
    bfe2:	3501      	adds	r5, #1

	mic_generator(&Payloadinfo[0] , *Payload_len, FrameControl  , FrameCounter ,  MACInitParams.PAddress);
    bfe4:	4b37      	ldr	r3, [pc, #220]	; (c0c4 <DataEncrypt+0x100>)
    bfe6:	685b      	ldr	r3, [r3, #4]
    bfe8:	9300      	str	r3, [sp, #0]
    bfea:	0023      	movs	r3, r4
    bfec:	4640      	mov	r0, r8
    bfee:	4f36      	ldr	r7, [pc, #216]	; (c0c8 <DataEncrypt+0x104>)
    bff0:	47b8      	blx	r7

	for (i=*Payload_len;i<iterations *16 ; i++ )
    bff2:	7831      	ldrb	r1, [r6, #0]
    bff4:	b28b      	uxth	r3, r1
    bff6:	002e      	movs	r6, r5
    bff8:	012d      	lsls	r5, r5, #4
    bffa:	42a9      	cmp	r1, r5
    bffc:	da07      	bge.n	c00e <DataEncrypt+0x4a>
	{
		Payloadinfo[i] = 0; // Padding
    bffe:	2100      	movs	r1, #0
    c000:	4642      	mov	r2, r8
    c002:	54d1      	strb	r1, [r2, r3]
	for (i=*Payload_len;i<iterations *16 ; i++ )
    c004:	3301      	adds	r3, #1
    c006:	b29b      	uxth	r3, r3
    c008:	42ab      	cmp	r3, r5
    c00a:	dbfa      	blt.n	c002 <DataEncrypt+0x3e>
    c00c:	4690      	mov	r8, r2
	}
	CTR_Nonce_and_Counter[0] = 0x01;  // L
    c00e:	2201      	movs	r2, #1
    c010:	ab04      	add	r3, sp, #16
    c012:	701a      	strb	r2, [r3, #0]
	for (i=0;i<8;i++)
	{
		CTR_Nonce_and_Counter[i+1] = MACInitParams.PAddress[i];
    c014:	4b2b      	ldr	r3, [pc, #172]	; (c0c4 <DataEncrypt+0x100>)
    c016:	6858      	ldr	r0, [r3, #4]
    c018:	2300      	movs	r3, #0
    c01a:	aa04      	add	r2, sp, #16
    c01c:	18d2      	adds	r2, r2, r3
    c01e:	5cc1      	ldrb	r1, [r0, r3]
    c020:	7051      	strb	r1, [r2, #1]
    c022:	3301      	adds	r3, #1
	for (i=0;i<8;i++)
    c024:	2b08      	cmp	r3, #8
    c026:	d1f8      	bne.n	c01a <DataEncrypt+0x56>
	}
	for (i=0;i<4;i++)
	{
		CTR_Nonce_and_Counter[i+9] = FrameCounter.v[i];
    c028:	ab04      	add	r3, sp, #16
    c02a:	725c      	strb	r4, [r3, #9]
    c02c:	0a22      	lsrs	r2, r4, #8
    c02e:	729a      	strb	r2, [r3, #10]
    c030:	0c22      	lsrs	r2, r4, #16
    c032:	72da      	strb	r2, [r3, #11]
    c034:	0e24      	lsrs	r4, r4, #24
    c036:	731c      	strb	r4, [r3, #12]
	}
	CTR_Nonce_and_Counter[13] = SECURITY_LEVEL; //Security Mode // 0x04 --> CCM-32
    c038:	2204      	movs	r2, #4
    c03a:	735a      	strb	r2, [r3, #13]
	CTR_Nonce_and_Counter[14] = 0x00; // 15 th byte padded to zero
    c03c:	2200      	movs	r2, #0
    c03e:	739a      	strb	r2, [r3, #14]
	CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1
    c040:	73da      	strb	r2, [r3, #15]

	for (i=0;i<iterations+1;i++)
    c042:	1c73      	adds	r3, r6, #1
    c044:	4699      	mov	r9, r3
    c046:	2300      	movs	r3, #0
    c048:	469b      	mov	fp, r3
    c04a:	9303      	str	r3, [sp, #12]
    c04c:	464b      	mov	r3, r9
    c04e:	2b00      	cmp	r3, #0
    c050:	dd2f      	ble.n	c0b2 <DataEncrypt+0xee>
	{
		for (j=0;j<16;j++)
		{
			block[j] = CTR_Nonce_and_Counter[j];
    c052:	ac08      	add	r4, sp, #32
    c054:	ad04      	add	r5, sp, #16
		}
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    c056:	4b1d      	ldr	r3, [pc, #116]	; (c0cc <DataEncrypt+0x108>)
    c058:	469a      	mov	sl, r3
		for (j=0;j<16;j++)
		{
			if (CTR_Nonce_and_Counter[15] == 0)
			{
				final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    c05a:	4e1d      	ldr	r6, [pc, #116]	; (c0d0 <DataEncrypt+0x10c>)
    c05c:	e017      	b.n	c08e <DataEncrypt+0xca>
			}
			else
			{
				Payloadinfo[j+(i-1)*16] = block[j] ^ Payloadinfo[j+(i-1)*16];
    c05e:	5d1a      	ldrb	r2, [r3, r4]
    c060:	5ccf      	ldrb	r7, [r1, r3]
    c062:	407a      	eors	r2, r7
    c064:	54ca      	strb	r2, [r1, r3]
    c066:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    c068:	2b10      	cmp	r3, #16
    c06a:	d007      	beq.n	c07c <DataEncrypt+0xb8>
			if (CTR_Nonce_and_Counter[15] == 0)
    c06c:	2800      	cmp	r0, #0
    c06e:	d1f6      	bne.n	c05e <DataEncrypt+0x9a>
				final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    c070:	5d1a      	ldrb	r2, [r3, r4]
    c072:	4667      	mov	r7, ip
    c074:	5cff      	ldrb	r7, [r7, r3]
    c076:	407a      	eors	r2, r7
    c078:	54f2      	strb	r2, [r6, r3]
    c07a:	e7f4      	b.n	c066 <DataEncrypt+0xa2>
			}
		}
		CTR_Nonce_and_Counter[15]++; // Increment Counter for next operation
    c07c:	3001      	adds	r0, #1
    c07e:	73e8      	strb	r0, [r5, #15]
	for (i=0;i<iterations+1;i++)
    c080:	9f03      	ldr	r7, [sp, #12]
    c082:	3701      	adds	r7, #1
    c084:	b2bb      	uxth	r3, r7
    c086:	9303      	str	r3, [sp, #12]
    c088:	469b      	mov	fp, r3
    c08a:	454b      	cmp	r3, r9
    c08c:	da11      	bge.n	c0b2 <DataEncrypt+0xee>
		CTR_Nonce_and_Counter[i+1] = MACInitParams.PAddress[i];
    c08e:	2300      	movs	r3, #0
			block[j] = CTR_Nonce_and_Counter[j];
    c090:	5d5a      	ldrb	r2, [r3, r5]
    c092:	551a      	strb	r2, [r3, r4]
    c094:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    c096:	2b10      	cmp	r3, #16
    c098:	d1fa      	bne.n	c090 <DataEncrypt+0xcc>
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    c09a:	490e      	ldr	r1, [pc, #56]	; (c0d4 <DataEncrypt+0x110>)
    c09c:	0020      	movs	r0, r4
    c09e:	47d0      	blx	sl
			if (CTR_Nonce_and_Counter[15] == 0)
    c0a0:	7be8      	ldrb	r0, [r5, #15]
				Payloadinfo[j+(i-1)*16] = block[j] ^ Payloadinfo[j+(i-1)*16];
    c0a2:	4659      	mov	r1, fp
    c0a4:	3901      	subs	r1, #1
    c0a6:	0109      	lsls	r1, r1, #4
    c0a8:	2300      	movs	r3, #0
    c0aa:	4441      	add	r1, r8
				final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    c0ac:	4a0a      	ldr	r2, [pc, #40]	; (c0d8 <DataEncrypt+0x114>)
    c0ae:	4694      	mov	ip, r2
    c0b0:	e7dc      	b.n	c06c <DataEncrypt+0xa8>
	}
	return true;

}
    c0b2:	2001      	movs	r0, #1
    c0b4:	b00d      	add	sp, #52	; 0x34
    c0b6:	bc3c      	pop	{r2, r3, r4, r5}
    c0b8:	4690      	mov	r8, r2
    c0ba:	4699      	mov	r9, r3
    c0bc:	46a2      	mov	sl, r4
    c0be:	46ab      	mov	fp, r5
    c0c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c0c2:	46c0      	nop			; (mov r8, r8)
    c0c4:	20002718 	.word	0x20002718
    c0c8:	0000be99 	.word	0x0000be99
    c0cc:	0000d2fd 	.word	0x0000d2fd
    c0d0:	2000274c 	.word	0x2000274c
    c0d4:	0001abac 	.word	0x0001abac
    c0d8:	20002764 	.word	0x20002764

0000c0dc <validate_mic>:
// Validates the Received mic with the mic computed from data packet decryption.
bool validate_mic(void)
{
	/*************************************************************/
	//SECURITY PATCH UPDATE
	if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1] || final_mic_value[2] != received_mic_values[2] || final_mic_value[3] != received_mic_values[3])
    c0dc:	4b0e      	ldr	r3, [pc, #56]	; (c118 <validate_mic+0x3c>)
    c0de:	781a      	ldrb	r2, [r3, #0]
    c0e0:	4b0e      	ldr	r3, [pc, #56]	; (c11c <validate_mic+0x40>)
    c0e2:	781b      	ldrb	r3, [r3, #0]
	/*************************************************************/
	{
		return false;
    c0e4:	2000      	movs	r0, #0
	if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1] || final_mic_value[2] != received_mic_values[2] || final_mic_value[3] != received_mic_values[3])
    c0e6:	429a      	cmp	r2, r3
    c0e8:	d000      	beq.n	c0ec <validate_mic+0x10>
	}
	else
	{
		return true;
	}
}
    c0ea:	4770      	bx	lr
	if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1] || final_mic_value[2] != received_mic_values[2] || final_mic_value[3] != received_mic_values[3])
    c0ec:	4b0a      	ldr	r3, [pc, #40]	; (c118 <validate_mic+0x3c>)
    c0ee:	785a      	ldrb	r2, [r3, #1]
    c0f0:	4b0a      	ldr	r3, [pc, #40]	; (c11c <validate_mic+0x40>)
    c0f2:	785b      	ldrb	r3, [r3, #1]
    c0f4:	429a      	cmp	r2, r3
    c0f6:	d1f8      	bne.n	c0ea <validate_mic+0xe>
    c0f8:	4b07      	ldr	r3, [pc, #28]	; (c118 <validate_mic+0x3c>)
    c0fa:	789a      	ldrb	r2, [r3, #2]
    c0fc:	4b07      	ldr	r3, [pc, #28]	; (c11c <validate_mic+0x40>)
    c0fe:	789b      	ldrb	r3, [r3, #2]
    c100:	429a      	cmp	r2, r3
    c102:	d1f2      	bne.n	c0ea <validate_mic+0xe>
    c104:	4b04      	ldr	r3, [pc, #16]	; (c118 <validate_mic+0x3c>)
    c106:	78d8      	ldrb	r0, [r3, #3]
    c108:	4b04      	ldr	r3, [pc, #16]	; (c11c <validate_mic+0x40>)
    c10a:	78db      	ldrb	r3, [r3, #3]
    c10c:	1ac0      	subs	r0, r0, r3
    c10e:	4243      	negs	r3, r0
    c110:	4158      	adcs	r0, r3
    c112:	b2c0      	uxtb	r0, r0
    c114:	e7e9      	b.n	c0ea <validate_mic+0xe>
    c116:	46c0      	nop			; (mov r8, r8)
    c118:	2000274c 	.word	0x2000274c
    c11c:	20002774 	.word	0x20002774

0000c120 <DataDecrypt>:
 *      None
 *
 *****************************************************************************************/
bool DataDecrypt(uint8_t *Payload, uint8_t *PayloadLen, uint8_t *SourceIEEEAddress,
API_UINT32_UNION FrameCounter, uint8_t FrameControl)
{
    c120:	b5f0      	push	{r4, r5, r6, r7, lr}
    c122:	46de      	mov	lr, fp
    c124:	4657      	mov	r7, sl
    c126:	464e      	mov	r6, r9
    c128:	4645      	mov	r5, r8
    c12a:	b5e0      	push	{r5, r6, r7, lr}
    c12c:	b091      	sub	sp, #68	; 0x44
    c12e:	4681      	mov	r9, r0
    c130:	9106      	str	r1, [sp, #24]
    c132:	9204      	str	r2, [sp, #16]
    c134:	9305      	str	r3, [sp, #20]
    c136:	ab1a      	add	r3, sp, #104	; 0x68
    c138:	781b      	ldrb	r3, [r3, #0]
    c13a:	9307      	str	r3, [sp, #28]
	uint16_t i ;
	uint8_t iterations , block[16] , j , CTR_Nonce_and_Counter[16];
	// Calculating No of blocks in the packet (1 block = 16 bytes of data)
	iterations = *PayloadLen/16;
    c13c:	7809      	ldrb	r1, [r1, #0]
    c13e:	090a      	lsrs	r2, r1, #4
	if (*PayloadLen % 16 != 0) iterations++;
    c140:	070b      	lsls	r3, r1, #28
    c142:	d000      	beq.n	c146 <DataDecrypt+0x26>
    c144:	3201      	adds	r2, #1

	//mic_generator(&Payloadinfo[0] , *Payload_len);

	for (i=*PayloadLen;i<iterations *16 ; i++ )
    c146:	b28b      	uxth	r3, r1
    c148:	0010      	movs	r0, r2
    c14a:	0112      	lsls	r2, r2, #4
    c14c:	4291      	cmp	r1, r2
    c14e:	da07      	bge.n	c160 <DataDecrypt+0x40>
	{
		Payload[i] = 0; // Padding
    c150:	2100      	movs	r1, #0
    c152:	464c      	mov	r4, r9
    c154:	54e1      	strb	r1, [r4, r3]
	for (i=*PayloadLen;i<iterations *16 ; i++ )
    c156:	3301      	adds	r3, #1
    c158:	b29b      	uxth	r3, r3
    c15a:	4293      	cmp	r3, r2
    c15c:	dbfa      	blt.n	c154 <DataDecrypt+0x34>
    c15e:	46a1      	mov	r9, r4
	}
	CTR_Nonce_and_Counter[0] = 0x01;  // L
    c160:	2201      	movs	r2, #1
    c162:	ab08      	add	r3, sp, #32
    c164:	701a      	strb	r2, [r3, #0]
    c166:	2300      	movs	r3, #0
	for (i=0;i<8;i++)
	{
		CTR_Nonce_and_Counter[i+1] = SourceIEEEAddress[i];
    c168:	9c04      	ldr	r4, [sp, #16]
    c16a:	aa08      	add	r2, sp, #32
    c16c:	18d2      	adds	r2, r2, r3
    c16e:	5ce1      	ldrb	r1, [r4, r3]
    c170:	7051      	strb	r1, [r2, #1]
    c172:	3301      	adds	r3, #1
	for (i=0;i<8;i++)
    c174:	2b08      	cmp	r3, #8
    c176:	d1f8      	bne.n	c16a <DataDecrypt+0x4a>
	}
	for (i=0;i<4;i++)
	{
		CTR_Nonce_and_Counter[i+9] = FrameCounter.v[i];
    c178:	ab08      	add	r3, sp, #32
    c17a:	9905      	ldr	r1, [sp, #20]
    c17c:	7259      	strb	r1, [r3, #9]
    c17e:	0a0a      	lsrs	r2, r1, #8
    c180:	729a      	strb	r2, [r3, #10]
    c182:	0c0a      	lsrs	r2, r1, #16
    c184:	72da      	strb	r2, [r3, #11]
    c186:	0e0a      	lsrs	r2, r1, #24
    c188:	731a      	strb	r2, [r3, #12]
	}
	CTR_Nonce_and_Counter[13] = SECURITY_LEVEL; //Security Mode
    c18a:	2204      	movs	r2, #4
    c18c:	735a      	strb	r2, [r3, #13]
	CTR_Nonce_and_Counter[14] = 0x00; // 15 th byte padded to zero
    c18e:	2200      	movs	r2, #0
    c190:	739a      	strb	r2, [r3, #14]
	CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1
    c192:	73da      	strb	r2, [r3, #15]


	for (i=0;i<iterations+1;i++)
    c194:	1c43      	adds	r3, r0, #1
    c196:	469a      	mov	sl, r3
    c198:	2500      	movs	r5, #0
    c19a:	2300      	movs	r3, #0
    c19c:	4698      	mov	r8, r3
    c19e:	4653      	mov	r3, sl
    c1a0:	2b00      	cmp	r3, #0
    c1a2:	dd2e      	ble.n	c202 <DataDecrypt+0xe2>
	{
		for (j=0;j<16;j++)
		{
			block[j] = CTR_Nonce_and_Counter[j];
    c1a4:	ac0c      	add	r4, sp, #48	; 0x30
    c1a6:	ae08      	add	r6, sp, #32
		}
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    c1a8:	4b26      	ldr	r3, [pc, #152]	; (c244 <DataDecrypt+0x124>)
    c1aa:	469b      	mov	fp, r3
		for (j=0;j<16;j++)
		{
			if (CTR_Nonce_and_Counter[15] == 0)
			{
				CTR_mic[j] = block[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    c1ac:	4f26      	ldr	r7, [pc, #152]	; (c248 <DataDecrypt+0x128>)
    c1ae:	4643      	mov	r3, r8
    c1b0:	9303      	str	r3, [sp, #12]
    c1b2:	46a8      	mov	r8, r5
    c1b4:	e014      	b.n	c1e0 <DataDecrypt+0xc0>
			}
			else
			{
				Payload[j+(i-1)*16] = block[j] ^ Payload[j+(i-1)*16];
    c1b6:	5d1a      	ldrb	r2, [r3, r4]
    c1b8:	5ce9      	ldrb	r1, [r5, r3]
    c1ba:	404a      	eors	r2, r1
    c1bc:	54ea      	strb	r2, [r5, r3]
    c1be:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    c1c0:	2b10      	cmp	r3, #16
    c1c2:	d004      	beq.n	c1ce <DataDecrypt+0xae>
			if (CTR_Nonce_and_Counter[15] == 0)
    c1c4:	2800      	cmp	r0, #0
    c1c6:	d1f6      	bne.n	c1b6 <DataDecrypt+0x96>
				CTR_mic[j] = block[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    c1c8:	5d1a      	ldrb	r2, [r3, r4]
    c1ca:	54fa      	strb	r2, [r7, r3]
    c1cc:	e7f7      	b.n	c1be <DataDecrypt+0x9e>
			}
		}
		CTR_Nonce_and_Counter[15]++; // Increment Counter for next opration
    c1ce:	3001      	adds	r0, #1
    c1d0:	73f0      	strb	r0, [r6, #15]
	for (i=0;i<iterations+1;i++)
    c1d2:	9d03      	ldr	r5, [sp, #12]
    c1d4:	3501      	adds	r5, #1
    c1d6:	b2ab      	uxth	r3, r5
    c1d8:	9303      	str	r3, [sp, #12]
    c1da:	4698      	mov	r8, r3
    c1dc:	4553      	cmp	r3, sl
    c1de:	da10      	bge.n	c202 <DataDecrypt+0xe2>
	CTR_Nonce_and_Counter[0] = 0x01;  // L
    c1e0:	2300      	movs	r3, #0
			block[j] = CTR_Nonce_and_Counter[j];
    c1e2:	5d9a      	ldrb	r2, [r3, r6]
    c1e4:	551a      	strb	r2, [r3, r4]
    c1e6:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    c1e8:	2b10      	cmp	r3, #16
    c1ea:	d1fa      	bne.n	c1e2 <DataDecrypt+0xc2>
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    c1ec:	4917      	ldr	r1, [pc, #92]	; (c24c <DataDecrypt+0x12c>)
    c1ee:	0020      	movs	r0, r4
    c1f0:	47d8      	blx	fp
			if (CTR_Nonce_and_Counter[15] == 0)
    c1f2:	7bf0      	ldrb	r0, [r6, #15]
				Payload[j+(i-1)*16] = block[j] ^ Payload[j+(i-1)*16];
    c1f4:	4642      	mov	r2, r8
    c1f6:	3a01      	subs	r2, #1
    c1f8:	0112      	lsls	r2, r2, #4
    c1fa:	2300      	movs	r3, #0
    c1fc:	444a      	add	r2, r9
    c1fe:	0015      	movs	r5, r2
    c200:	e7e0      	b.n	c1c4 <DataDecrypt+0xa4>
	}
	*PayloadLen = *PayloadLen-4;
    c202:	9b06      	ldr	r3, [sp, #24]
    c204:	7819      	ldrb	r1, [r3, #0]
    c206:	3904      	subs	r1, #4
    c208:	b2c9      	uxtb	r1, r1
    c20a:	7019      	strb	r1, [r3, #0]
	mic_generator(&Payload[0] , *PayloadLen , FrameControl  , FrameCounter , SourceIEEEAddress);
    c20c:	9b04      	ldr	r3, [sp, #16]
    c20e:	9300      	str	r3, [sp, #0]
    c210:	9b05      	ldr	r3, [sp, #20]
    c212:	9a07      	ldr	r2, [sp, #28]
    c214:	4648      	mov	r0, r9
    c216:	4c0e      	ldr	r4, [pc, #56]	; (c250 <DataDecrypt+0x130>)
    c218:	47a0      	blx	r4
    c21a:	2300      	movs	r3, #0
	for (i=0;i<16;i++)
	{
		final_mic_value[i] = CTR_mic[i] ^ CBC_mic[i];
    c21c:	4d0d      	ldr	r5, [pc, #52]	; (c254 <DataDecrypt+0x134>)
    c21e:	4c0a      	ldr	r4, [pc, #40]	; (c248 <DataDecrypt+0x128>)
    c220:	480d      	ldr	r0, [pc, #52]	; (c258 <DataDecrypt+0x138>)
    c222:	5ce2      	ldrb	r2, [r4, r3]
    c224:	5cc1      	ldrb	r1, [r0, r3]
    c226:	404a      	eors	r2, r1
    c228:	54ea      	strb	r2, [r5, r3]
    c22a:	3301      	adds	r3, #1
	for (i=0;i<16;i++)
    c22c:	2b10      	cmp	r3, #16
    c22e:	d1f8      	bne.n	c222 <DataDecrypt+0x102>
	}
	return validate_mic();
    c230:	4b0a      	ldr	r3, [pc, #40]	; (c25c <DataDecrypt+0x13c>)
    c232:	4798      	blx	r3

}
    c234:	b011      	add	sp, #68	; 0x44
    c236:	bc3c      	pop	{r2, r3, r4, r5}
    c238:	4690      	mov	r8, r2
    c23a:	4699      	mov	r9, r3
    c23c:	46a2      	mov	sl, r4
    c23e:	46ab      	mov	fp, r5
    c240:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c242:	46c0      	nop			; (mov r8, r8)
    c244:	0000d2fd 	.word	0x0000d2fd
    c248:	2000273c 	.word	0x2000273c
    c24c:	0001abac 	.word	0x0001abac
    c250:	0000be99 	.word	0x0000be99
    c254:	2000274c 	.word	0x2000274c
    c258:	20002764 	.word	0x20002764
    c25c:	0000c0dd 	.word	0x0000c0dd

0000c260 <MiMAC_Set>:
     * Remarks:
     *      None
     *
     *****************************************************************************************/
bool MiMAC_Set(mac_set_params_t id, uint8_t *value)
{
    c260:	b510      	push	{r4, lr}
    switch(id)
    c262:	2800      	cmp	r0, #0
    c264:	d109      	bne.n	c27a <MiMAC_Set+0x1a>
    {
      case MAC_CHANNEL:
      {
         if(*value > LAST_CHANNEL_NUM) //26 // TODO: this check is necessary here? as we may connect a sub-gig or a 2.4gig?
    c266:	780b      	ldrb	r3, [r1, #0]
    c268:	2b19      	cmp	r3, #25
    c26a:	d807      	bhi.n	c27c <MiMAC_Set+0x1c>
         {
           return false;
         }
          MACCurrentChannel = *value;
    c26c:	4a04      	ldr	r2, [pc, #16]	; (c280 <MiMAC_Set+0x20>)
    c26e:	7013      	strb	r3, [r2, #0]
          PHY_SetChannel(MACCurrentChannel);
    c270:	0018      	movs	r0, r3
    c272:	4b04      	ldr	r3, [pc, #16]	; (c284 <MiMAC_Set+0x24>)
    c274:	4798      	blx	r3
          return true;
    c276:	2001      	movs	r0, #1
    c278:	e000      	b.n	c27c <MiMAC_Set+0x1c>
      break;

     default:
     break;
    }
    return false;
    c27a:	2000      	movs	r0, #0
}
    c27c:	bd10      	pop	{r4, pc}
    c27e:	46c0      	nop			; (mov r8, r8)
    c280:	20002786 	.word	0x20002786
    c284:	0000d249 	.word	0x0000d249

0000c288 <MiMAC_Init>:
 * Remarks:
 *      None
 *
 *****************************************************************************************/
bool MiMAC_Init(MACINIT_PARAM initValue)
{
    c288:	b530      	push	{r4, r5, lr}
    c28a:	b083      	sub	sp, #12
    c28c:	466c      	mov	r4, sp
    c28e:	9000      	str	r0, [sp, #0]
    c290:	9101      	str	r1, [sp, #4]
	uint8_t i;

	PHY_Init();
    c292:	4b10      	ldr	r3, [pc, #64]	; (c2d4 <MiMAC_Init+0x4c>)
    c294:	4798      	blx	r3
	MACInitParams = initValue;
    c296:	4d10      	ldr	r5, [pc, #64]	; (c2d8 <MiMAC_Init+0x50>)
    c298:	002b      	movs	r3, r5
    c29a:	cc06      	ldmia	r4!, {r1, r2}
    c29c:	c306      	stmia	r3!, {r1, r2}
	uint16_t x =  PHY_RandomReq();
    c29e:	4b0f      	ldr	r3, [pc, #60]	; (c2dc <MiMAC_Init+0x54>)
    c2a0:	4798      	blx	r3
    c2a2:	0004      	movs	r4, r0
	// Set RF mode
	PHY_SetRxState(true);
    c2a4:	2001      	movs	r0, #1
    c2a6:	4b0e      	ldr	r3, [pc, #56]	; (c2e0 <MiMAC_Init+0x58>)
    c2a8:	4798      	blx	r3
	IEEESeqNum =   x & 0xff;
    c2aa:	4b0e      	ldr	r3, [pc, #56]	; (c2e4 <MiMAC_Init+0x5c>)
    c2ac:	701c      	strb	r4, [r3, #0]

	// Set Node Address
	PHY_SetIEEEAddr(MACInitParams.PAddress);
    c2ae:	6868      	ldr	r0, [r5, #4]
    c2b0:	4b0d      	ldr	r3, [pc, #52]	; (c2e8 <MiMAC_Init+0x60>)
    c2b2:	4798      	blx	r3

	for (i = 0; i < BANK_SIZE; i++)
	{
		RxBuffer[i].PayloadLen = 0;
    c2b4:	4b0d      	ldr	r3, [pc, #52]	; (c2ec <MiMAC_Init+0x64>)
    c2b6:	2200      	movs	r2, #0
    c2b8:	701a      	strb	r2, [r3, #0]
    c2ba:	2102      	movs	r1, #2
    c2bc:	31ff      	adds	r1, #255	; 0xff
    c2be:	545a      	strb	r2, [r3, r1]
    c2c0:	490b      	ldr	r1, [pc, #44]	; (c2f0 <MiMAC_Init+0x68>)
    c2c2:	545a      	strb	r2, [r3, r1]
    c2c4:	490b      	ldr	r1, [pc, #44]	; (c2f4 <MiMAC_Init+0x6c>)
    c2c6:	545a      	strb	r2, [r3, r1]
				OutgoingFrameCounter.Val = 0;
				PDS_Store(PDS_OUTGOING_FRAME_COUNTER_ID);
				OutgoingFrameCounter.Val = 1;
			}
		#else
			OutgoingFrameCounter.Val = 1;
    c2c8:	3201      	adds	r2, #1
    c2ca:	4b0b      	ldr	r3, [pc, #44]	; (c2f8 <MiMAC_Init+0x70>)
    c2cc:	601a      	str	r2, [r3, #0]
		#endif
	#endif

	return true;
}
    c2ce:	2001      	movs	r0, #1
    c2d0:	b003      	add	sp, #12
    c2d2:	bd30      	pop	{r4, r5, pc}
    c2d4:	0000d179 	.word	0x0000d179
    c2d8:	20002718 	.word	0x20002718
    c2dc:	0000d2e5 	.word	0x0000d2e5
    c2e0:	0000d1ad 	.word	0x0000d1ad
    c2e4:	2000260d 	.word	0x2000260d
    c2e8:	0000d309 	.word	0x0000d309
    c2ec:	20002890 	.word	0x20002890
    c2f0:	00000202 	.word	0x00000202
    c2f4:	00000303 	.word	0x00000303
    c2f8:	20002760 	.word	0x20002760

0000c2fc <MiMAC_SendPacket>:

bool MiMAC_SendPacket( MAC_TRANS_PARAM transParam,
         uint8_t *MACPayload,
         uint8_t MACPayloadLen, uint8_t msghandle,
         DataConf_callback_t ConfCallback)
{
    c2fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    c2fe:	46de      	mov	lr, fp
    c300:	4657      	mov	r7, sl
    c302:	464e      	mov	r6, r9
    c304:	4645      	mov	r5, r8
    c306:	b5e0      	push	{r5, r6, r7, lr}
    c308:	b087      	sub	sp, #28
    c30a:	af03      	add	r7, sp, #12
    c30c:	1c04      	adds	r4, r0, #0
    c30e:	9003      	str	r0, [sp, #12]
    c310:	0008      	movs	r0, r1
    c312:	9104      	str	r1, [sp, #16]
    c314:	0015      	movs	r5, r2
    c316:	0a2d      	lsrs	r5, r5, #8
    c318:	9205      	str	r2, [sp, #20]
    c31a:	9300      	str	r3, [sp, #0]
    c31c:	ab11      	add	r3, sp, #68	; 0x44
    c31e:	781b      	ldrb	r3, [r3, #0]
    c320:	469a      	mov	sl, r3
    c322:	b2e4      	uxtb	r4, r4
    c324:	06a6      	lsls	r6, r4, #26
    c326:	0ff6      	lsrs	r6, r6, #31
    c328:	9002      	str	r0, [sp, #8]
    c32a:	b2d3      	uxtb	r3, r2
    c32c:	469c      	mov	ip, r3
    c32e:	b2ed      	uxtb	r5, r5
    uint8_t headerLength;
    uint8_t loc = 0;
    uint8_t i = 0;

	uint8_t frameControl = 0;
	dataConfAvailable = false;
    c330:	2200      	movs	r2, #0
    c332:	4bc4      	ldr	r3, [pc, #784]	; (c644 <MiMAC_SendPacket+0x348>)
    c334:	701a      	strb	r2, [r3, #0]
	#ifndef TARGET_SMALL
		bool IntraPAN;
	#endif
	
	MACdatatransParam = transParam;
    c336:	4bc4      	ldr	r3, [pc, #784]	; (c648 <MiMAC_SendPacket+0x34c>)
    c338:	cf07      	ldmia	r7!, {r0, r1, r2}
    c33a:	c307      	stmia	r3!, {r0, r1, r2}

    if (transParam.flags.bits.broadcast)
    c33c:	0763      	lsls	r3, r4, #29
    c33e:	d501      	bpl.n	c344 <MiMAC_SendPacket+0x48>
    {
        transParam.altDestAddr = true;
    c340:	2301      	movs	r3, #1
    c342:	469c      	mov	ip, r3
    }

    if (transParam.flags.bits.secEn)
    c344:	2308      	movs	r3, #8
    c346:	4023      	ands	r3, r4
    c348:	001a      	movs	r2, r3
    {
        transParam.altSrcAddr = false;
    c34a:	4253      	negs	r3, r2
    c34c:	4153      	adcs	r3, r2
    c34e:	425b      	negs	r3, r3
    c350:	401d      	ands	r5, r3
    }

    // set the frame control in variable i
    if (transParam.flags.bits.packetType == PACKET_TYPE_COMMAND)
    c352:	2303      	movs	r3, #3
    c354:	4023      	ands	r3, r4
    c356:	2b01      	cmp	r3, #1
    c358:	d04d      	beq.n	c3f6 <MiMAC_SendPacket+0xfa>
    {
        frameControl = 0x03;
    } else if (transParam.flags.bits.packetType == PACKET_TYPE_DATA)
    {
        frameControl = 0x01;
    c35a:	2201      	movs	r2, #1
    c35c:	4691      	mov	r9, r2
    } else if (transParam.flags.bits.packetType == PACKET_TYPE_DATA)
    c35e:	2b00      	cmp	r3, #0
    c360:	d004      	beq.n	c36c <MiMAC_SendPacket+0x70>
    }
	else if (transParam.flags.bits.packetType == PACKET_TYPE_ACK)
    {
        frameControl = 0x02;
    c362:	1e9a      	subs	r2, r3, #2
    c364:	4251      	negs	r1, r2
    c366:	4151      	adcs	r1, r2
    c368:	004a      	lsls	r2, r1, #1
    c36a:	4691      	mov	r9, r2
    }
    // decide the header length for different addressing mode
#ifndef TARGET_SMALL
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    c36c:	aa03      	add	r2, sp, #12
    c36e:	8952      	ldrh	r2, [r2, #10]
    c370:	48b6      	ldr	r0, [pc, #728]	; (c64c <MiMAC_SendPacket+0x350>)
    c372:	8800      	ldrh	r0, [r0, #0]
    c374:	4290      	cmp	r0, r2
    c376:	d041      	beq.n	c3fc <MiMAC_SendPacket+0x100>
    }
#ifndef TARGET_SMALL
    else
    {
        headerLength = 7;
        IntraPAN = false;
    c378:	2200      	movs	r2, #0
    c37a:	4693      	mov	fp, r2
        headerLength = 7;
    c37c:	3207      	adds	r2, #7
    }
#endif

    if (transParam.altDestAddr)
    c37e:	46e0      	mov	r8, ip
    {
        headerLength += 2;
    } else
    {
        headerLength += 8;
    c380:	0017      	movs	r7, r2
    c382:	3708      	adds	r7, #8
    if (transParam.altDestAddr)
    c384:	4661      	mov	r1, ip
    c386:	2900      	cmp	r1, #0
    c388:	d000      	beq.n	c38c <MiMAC_SendPacket+0x90>
        headerLength += 2;
    c38a:	1c97      	adds	r7, r2, #2
    }

    if (transParam.altSrcAddr)
    c38c:	2d00      	cmp	r5, #0
    c38e:	d044      	beq.n	c41a <MiMAC_SendPacket+0x11e>
    {
        headerLength += 2;
    c390:	3702      	adds	r7, #2
    c392:	b2fa      	uxtb	r2, r7
    c394:	9201      	str	r2, [sp, #4]
    } else
    {
        headerLength += 8;
    }

    if (transParam.flags.bits.ackReq && transParam.flags.bits.broadcast == false)
    c396:	2224      	movs	r2, #36	; 0x24
    c398:	4014      	ands	r4, r2
    c39a:	2c20      	cmp	r4, #32
    c39c:	d041      	beq.n	c422 <MiMAC_SendPacket+0x126>
    {
        frameControl |= 0x20;
    }

    // use PACKET_TYPE_RESERVE to represent beacon. Fixed format for beacon packet
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
    c39e:	2b03      	cmp	r3, #3
    c3a0:	d044      	beq.n	c42c <MiMAC_SendPacket+0x130>
#endif
        transParam.altSrcAddr = true;
        transParam.flags.bits.ackReq = false;
    }
//#if ! defined(PROTOCOL_STAR)
	if (transParam.flags.bits.packetType == PACKET_TYPE_COMMAND) 
    c3a2:	aa03      	add	r2, sp, #12
    c3a4:	0171      	lsls	r1, r6, #5
    c3a6:	7813      	ldrb	r3, [r2, #0]
    c3a8:	2020      	movs	r0, #32
    c3aa:	4383      	bics	r3, r0
    c3ac:	430b      	orrs	r3, r1
    c3ae:	7013      	strb	r3, [r2, #0]
    c3b0:	2203      	movs	r2, #3
    c3b2:	4013      	ands	r3, r2
    c3b4:	2b01      	cmp	r3, #1
    c3b6:	d041      	beq.n	c43c <MiMAC_SendPacket+0x140>
        transParam.flags.bits.ackReq = false;
    }
//#endif

#ifdef ENABLE_SECURITY
    if (transParam.flags.bits.secEn)
    c3b8:	ab03      	add	r3, sp, #12
    c3ba:	0172      	lsls	r2, r6, #5
    c3bc:	781c      	ldrb	r4, [r3, #0]
    c3be:	2120      	movs	r1, #32
    c3c0:	438c      	bics	r4, r1
    c3c2:	4314      	orrs	r4, r2
    c3c4:	701c      	strb	r4, [r3, #0]
    c3c6:	b2e4      	uxtb	r4, r4
    c3c8:	0723      	lsls	r3, r4, #28
    c3ca:	d439      	bmi.n	c440 <MiMAC_SendPacket+0x144>
		// 4 byte mic and 5 byte outgoing frame counter
		packet[loc++] = MACPayloadLen+headerLength+9;
    } else
#endif
    {
		packet[loc++] = MACPayloadLen+headerLength;
    c3cc:	ab10      	add	r3, sp, #64	; 0x40
    c3ce:	781b      	ldrb	r3, [r3, #0]
    c3d0:	9a01      	ldr	r2, [sp, #4]
    c3d2:	18d7      	adds	r7, r2, r3
    c3d4:	4b9e      	ldr	r3, [pc, #632]	; (c650 <MiMAC_SendPacket+0x354>)
    c3d6:	701f      	strb	r7, [r3, #0]
    }

    // set frame control LSB
	packet[loc++] = frameControl;
    c3d8:	4b9d      	ldr	r3, [pc, #628]	; (c650 <MiMAC_SendPacket+0x354>)
    c3da:	464a      	mov	r2, r9
    c3dc:	705a      	strb	r2, [r3, #1]

    // set frame control MSB
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
    c3de:	43e3      	mvns	r3, r4
    c3e0:	079b      	lsls	r3, r3, #30
    c3e2:	d040      	beq.n	c466 <MiMAC_SendPacket+0x16a>
		packet[loc++] = 0x80;
        // sequence number
		packet[loc++] = IEEESeqNum++;
    } else
    {
        if (transParam.altDestAddr && transParam.altSrcAddr)
    c3e4:	4643      	mov	r3, r8
    c3e6:	2b00      	cmp	r3, #0
    c3e8:	d05f      	beq.n	c4aa <MiMAC_SendPacket+0x1ae>
    c3ea:	2d00      	cmp	r5, #0
    c3ec:	d045      	beq.n	c47a <MiMAC_SendPacket+0x17e>
        {
			packet[loc++] = 0x88;
    c3ee:	2288      	movs	r2, #136	; 0x88
    c3f0:	4b97      	ldr	r3, [pc, #604]	; (c650 <MiMAC_SendPacket+0x354>)
    c3f2:	709a      	strb	r2, [r3, #2]
    c3f4:	e044      	b.n	c480 <MiMAC_SendPacket+0x184>
        frameControl = 0x03;
    c3f6:	2203      	movs	r2, #3
    c3f8:	4691      	mov	r9, r2
    c3fa:	e7b7      	b.n	c36c <MiMAC_SendPacket+0x70>
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    c3fc:	4895      	ldr	r0, [pc, #596]	; (c654 <MiMAC_SendPacket+0x358>)
    c3fe:	4282      	cmp	r2, r0
    c400:	d007      	beq.n	c412 <MiMAC_SendPacket+0x116>
        frameControl |= 0x40;
    c402:	2240      	movs	r2, #64	; 0x40
    c404:	4649      	mov	r1, r9
    c406:	4311      	orrs	r1, r2
    c408:	4689      	mov	r9, r1
        IntraPAN = true;
    c40a:	3a3f      	subs	r2, #63	; 0x3f
    c40c:	4693      	mov	fp, r2
        headerLength = 5;
    c40e:	3204      	adds	r2, #4
        IntraPAN = true;
    c410:	e7b5      	b.n	c37e <MiMAC_SendPacket+0x82>
        IntraPAN = false;
    c412:	2200      	movs	r2, #0
    c414:	4693      	mov	fp, r2
        headerLength = 7;
    c416:	3207      	adds	r2, #7
    c418:	e7b1      	b.n	c37e <MiMAC_SendPacket+0x82>
        headerLength += 8;
    c41a:	3708      	adds	r7, #8
    c41c:	b2fa      	uxtb	r2, r7
    c41e:	9201      	str	r2, [sp, #4]
    c420:	e7b9      	b.n	c396 <MiMAC_SendPacket+0x9a>
        frameControl |= 0x20;
    c422:	3a04      	subs	r2, #4
    c424:	4649      	mov	r1, r9
    c426:	4311      	orrs	r1, r2
    c428:	4689      	mov	r9, r1
    c42a:	e7b8      	b.n	c39e <MiMAC_SendPacket+0xa2>
        transParam.altSrcAddr = true;
    c42c:	2501      	movs	r5, #1
        transParam.flags.bits.ackReq = false;
    c42e:	2600      	movs	r6, #0
        IntraPAN = false;
    c430:	2300      	movs	r3, #0
    c432:	469b      	mov	fp, r3
        frameControl = 0x00;
    c434:	4699      	mov	r9, r3
        headerLength = 7;
    c436:	3307      	adds	r3, #7
    c438:	9301      	str	r3, [sp, #4]
    c43a:	e7b2      	b.n	c3a2 <MiMAC_SendPacket+0xa6>
        transParam.flags.bits.ackReq = false;
    c43c:	2600      	movs	r6, #0
    c43e:	e7bb      	b.n	c3b8 <MiMAC_SendPacket+0xbc>
        frameControl |= 0x08;
    c440:	2308      	movs	r3, #8
    c442:	464a      	mov	r2, r9
    c444:	431a      	orrs	r2, r3
    c446:	4691      	mov	r9, r2
		DataEncrypt(MACPayload, &MACPayloadLen, OutgoingFrameCounter, frameControl);
    c448:	4b83      	ldr	r3, [pc, #524]	; (c658 <MiMAC_SendPacket+0x35c>)
    c44a:	681a      	ldr	r2, [r3, #0]
    c44c:	464b      	mov	r3, r9
    c44e:	a910      	add	r1, sp, #64	; 0x40
    c450:	9800      	ldr	r0, [sp, #0]
    c452:	4f82      	ldr	r7, [pc, #520]	; (c65c <MiMAC_SendPacket+0x360>)
    c454:	47b8      	blx	r7
		packet[loc++] = MACPayloadLen+headerLength+9;
    c456:	ab10      	add	r3, sp, #64	; 0x40
    c458:	781b      	ldrb	r3, [r3, #0]
    c45a:	3309      	adds	r3, #9
    c45c:	9a01      	ldr	r2, [sp, #4]
    c45e:	18d7      	adds	r7, r2, r3
    c460:	4b7b      	ldr	r3, [pc, #492]	; (c650 <MiMAC_SendPacket+0x354>)
    c462:	701f      	strb	r7, [r3, #0]
    c464:	e7b8      	b.n	c3d8 <MiMAC_SendPacket+0xdc>
		packet[loc++] = 0x80;
    c466:	4b7a      	ldr	r3, [pc, #488]	; (c650 <MiMAC_SendPacket+0x354>)
    c468:	2280      	movs	r2, #128	; 0x80
    c46a:	709a      	strb	r2, [r3, #2]
		packet[loc++] = IEEESeqNum++;
    c46c:	497c      	ldr	r1, [pc, #496]	; (c660 <MiMAC_SendPacket+0x364>)
    c46e:	780a      	ldrb	r2, [r1, #0]
    c470:	1c50      	adds	r0, r2, #1
    c472:	7008      	strb	r0, [r1, #0]
    c474:	70da      	strb	r2, [r3, #3]
    c476:	2204      	movs	r2, #4
    c478:	e03e      	b.n	c4f8 <MiMAC_SendPacket+0x1fc>

        } else if (transParam.altDestAddr && transParam.altSrcAddr == 0)
        {
			packet[loc++] = 0xC8;
    c47a:	22c8      	movs	r2, #200	; 0xc8
    c47c:	4b74      	ldr	r3, [pc, #464]	; (c650 <MiMAC_SendPacket+0x354>)
    c47e:	709a      	strb	r2, [r3, #2]
        {
			packet[loc++] = 0xCC;
        }

        // sequence number
		packet[loc++] = IEEESeqNum++;
    c480:	4b77      	ldr	r3, [pc, #476]	; (c660 <MiMAC_SendPacket+0x364>)
    c482:	781a      	ldrb	r2, [r3, #0]
    c484:	1c51      	adds	r1, r2, #1
    c486:	7019      	strb	r1, [r3, #0]
    c488:	4b71      	ldr	r3, [pc, #452]	; (c650 <MiMAC_SendPacket+0x354>)
    c48a:	70da      	strb	r2, [r3, #3]
        // destination PANID
		packet[loc++] = transParam.DestPANID.v[0];
    c48c:	aa03      	add	r2, sp, #12
    c48e:	7a91      	ldrb	r1, [r2, #10]
    c490:	7119      	strb	r1, [r3, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    c492:	7ad2      	ldrb	r2, [r2, #11]
    c494:	715a      	strb	r2, [r3, #5]

        // destination address
        if (transParam.flags.bits.broadcast)
    c496:	0763      	lsls	r3, r4, #29
    c498:	d429      	bmi.n	c4ee <MiMAC_SendPacket+0x1f2>
			packet[loc++] = 0xFF;
        } else
        {
            if (transParam.altDestAddr)
            {
				packet[loc++] = transParam.DestAddress[0];
    c49a:	9902      	ldr	r1, [sp, #8]
    c49c:	780a      	ldrb	r2, [r1, #0]
    c49e:	4b6c      	ldr	r3, [pc, #432]	; (c650 <MiMAC_SendPacket+0x354>)
    c4a0:	719a      	strb	r2, [r3, #6]
				packet[loc++] = transParam.DestAddress[1];
    c4a2:	784a      	ldrb	r2, [r1, #1]
    c4a4:	71da      	strb	r2, [r3, #7]
    c4a6:	2208      	movs	r2, #8
    c4a8:	e026      	b.n	c4f8 <MiMAC_SendPacket+0x1fc>
        } else if (transParam.altDestAddr == 0 && transParam.altSrcAddr == 1)
    c4aa:	2d00      	cmp	r5, #0
    c4ac:	d00f      	beq.n	c4ce <MiMAC_SendPacket+0x1d2>
			packet[loc++] = 0x8C;
    c4ae:	4b68      	ldr	r3, [pc, #416]	; (c650 <MiMAC_SendPacket+0x354>)
    c4b0:	228c      	movs	r2, #140	; 0x8c
    c4b2:	709a      	strb	r2, [r3, #2]
		packet[loc++] = IEEESeqNum++;
    c4b4:	496a      	ldr	r1, [pc, #424]	; (c660 <MiMAC_SendPacket+0x364>)
    c4b6:	780a      	ldrb	r2, [r1, #0]
    c4b8:	1c50      	adds	r0, r2, #1
    c4ba:	7008      	strb	r0, [r1, #0]
    c4bc:	70da      	strb	r2, [r3, #3]
		packet[loc++] = transParam.DestPANID.v[0];
    c4be:	aa03      	add	r2, sp, #12
    c4c0:	7a91      	ldrb	r1, [r2, #10]
    c4c2:	7119      	strb	r1, [r3, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    c4c4:	7ad2      	ldrb	r2, [r2, #11]
    c4c6:	715a      	strb	r2, [r3, #5]
        if (transParam.flags.bits.broadcast)
    c4c8:	0763      	lsls	r3, r4, #29
    c4ca:	d410      	bmi.n	c4ee <MiMAC_SendPacket+0x1f2>
    c4cc:	e099      	b.n	c602 <MiMAC_SendPacket+0x306>
			packet[loc++] = 0xCC;
    c4ce:	4b60      	ldr	r3, [pc, #384]	; (c650 <MiMAC_SendPacket+0x354>)
    c4d0:	22cc      	movs	r2, #204	; 0xcc
    c4d2:	709a      	strb	r2, [r3, #2]
		packet[loc++] = IEEESeqNum++;
    c4d4:	4962      	ldr	r1, [pc, #392]	; (c660 <MiMAC_SendPacket+0x364>)
    c4d6:	780a      	ldrb	r2, [r1, #0]
    c4d8:	1c50      	adds	r0, r2, #1
    c4da:	7008      	strb	r0, [r1, #0]
    c4dc:	70da      	strb	r2, [r3, #3]
		packet[loc++] = transParam.DestPANID.v[0];
    c4de:	aa03      	add	r2, sp, #12
    c4e0:	7a91      	ldrb	r1, [r2, #10]
    c4e2:	7119      	strb	r1, [r3, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    c4e4:	7ad2      	ldrb	r2, [r2, #11]
    c4e6:	715a      	strb	r2, [r3, #5]
        if (transParam.flags.bits.broadcast)
    c4e8:	0763      	lsls	r3, r4, #29
    c4ea:	d400      	bmi.n	c4ee <MiMAC_SendPacket+0x1f2>
    c4ec:	e085      	b.n	c5fa <MiMAC_SendPacket+0x2fe>
			packet[loc++] = 0xFF;
    c4ee:	4b58      	ldr	r3, [pc, #352]	; (c650 <MiMAC_SendPacket+0x354>)
    c4f0:	22ff      	movs	r2, #255	; 0xff
    c4f2:	719a      	strb	r2, [r3, #6]
			packet[loc++] = 0xFF;
    c4f4:	71da      	strb	r2, [r3, #7]
    c4f6:	3af7      	subs	r2, #247	; 0xf7
                }
            }
        }
    }
	
	if(transParam.flags.bits.ackReq)
    c4f8:	a903      	add	r1, sp, #12
    c4fa:	0170      	lsls	r0, r6, #5
    c4fc:	780b      	ldrb	r3, [r1, #0]
    c4fe:	2420      	movs	r4, #32
    c500:	43a3      	bics	r3, r4
    c502:	4303      	orrs	r3, r0
    c504:	700b      	strb	r3, [r1, #0]
    c506:	069b      	lsls	r3, r3, #26
    c508:	d400      	bmi.n	c50c <MiMAC_SendPacket+0x210>
    c50a:	e085      	b.n	c618 <MiMAC_SendPacket+0x31c>
	{
	 	AckSeqNum = IEEESeqNum-1;
    c50c:	4b54      	ldr	r3, [pc, #336]	; (c660 <MiMAC_SendPacket+0x364>)
    c50e:	781b      	ldrb	r3, [r3, #0]
    c510:	3b01      	subs	r3, #1
    c512:	4954      	ldr	r1, [pc, #336]	; (c664 <MiMAC_SendPacket+0x368>)
    c514:	700b      	strb	r3, [r1, #0]
		 AckReqData = 1;
    c516:	2101      	movs	r1, #1
    c518:	4b53      	ldr	r3, [pc, #332]	; (c668 <MiMAC_SendPacket+0x36c>)
    c51a:	7019      	strb	r1, [r3, #0]
	{
		AckReqData = 0;
	}
#ifndef TARGET_SMALL
    // source PANID if necessary
    if (IntraPAN == false)
    c51c:	465b      	mov	r3, fp
    c51e:	2b00      	cmp	r3, #0
    c520:	d109      	bne.n	c536 <MiMAC_SendPacket+0x23a>
    {
		packet[loc++] = MAC_PANID.v[0];
    c522:	1c53      	adds	r3, r2, #1
    c524:	b2db      	uxtb	r3, r3
    c526:	494a      	ldr	r1, [pc, #296]	; (c650 <MiMAC_SendPacket+0x354>)
    c528:	4848      	ldr	r0, [pc, #288]	; (c64c <MiMAC_SendPacket+0x350>)
    c52a:	7804      	ldrb	r4, [r0, #0]
    c52c:	548c      	strb	r4, [r1, r2]
		packet[loc++] = MAC_PANID.v[1];
    c52e:	3202      	adds	r2, #2
    c530:	b2d2      	uxtb	r2, r2
    c532:	7840      	ldrb	r0, [r0, #1]
    c534:	54c8      	strb	r0, [r1, r3]
    }
#endif

    // source address
    if (transParam.altSrcAddr)
    c536:	2d00      	cmp	r5, #0
    c538:	d100      	bne.n	c53c <MiMAC_SendPacket+0x240>
    c53a:	e071      	b.n	c620 <MiMAC_SendPacket+0x324>
    {
		packet[loc++] = myNetworkAddress.v[0];
    c53c:	4944      	ldr	r1, [pc, #272]	; (c650 <MiMAC_SendPacket+0x354>)
    c53e:	484b      	ldr	r0, [pc, #300]	; (c66c <MiMAC_SendPacket+0x370>)
    c540:	7803      	ldrb	r3, [r0, #0]
    c542:	548b      	strb	r3, [r1, r2]
		packet[loc++] = myNetworkAddress.v[1];
    c544:	1c93      	adds	r3, r2, #2
    c546:	b2db      	uxtb	r3, r3
		packet[loc++] = myNetworkAddress.v[0];
    c548:	3201      	adds	r2, #1
		packet[loc++] = myNetworkAddress.v[1];
    c54a:	b2d2      	uxtb	r2, r2
    c54c:	7840      	ldrb	r0, [r0, #1]
    c54e:	5488      	strb	r0, [r1, r2]
        {
			packet[loc++] = MACInitParams.PAddress[i];
        }
    }
#ifdef ENABLE_SECURITY
if (transParam.flags.bits.secEn)
    c550:	aa03      	add	r2, sp, #12
    c552:	0171      	lsls	r1, r6, #5
    c554:	7816      	ldrb	r6, [r2, #0]
    c556:	2020      	movs	r0, #32
    c558:	4386      	bics	r6, r0
    c55a:	430e      	orrs	r6, r1
    c55c:	7016      	strb	r6, [r2, #0]
    c55e:	0732      	lsls	r2, r6, #28
    c560:	d515      	bpl.n	c58e <MiMAC_SendPacket+0x292>
    c562:	0019      	movs	r1, r3
    c564:	2200      	movs	r2, #0
{
	// fill the additional security aux header
	for (i = 0; i < 4; i++)
	{
		packet[loc++] = OutgoingFrameCounter.v[i];
    c566:	4e3a      	ldr	r6, [pc, #232]	; (c650 <MiMAC_SendPacket+0x354>)
    c568:	4d3b      	ldr	r5, [pc, #236]	; (c658 <MiMAC_SendPacket+0x35c>)
    c56a:	1c48      	adds	r0, r1, #1
    c56c:	5cac      	ldrb	r4, [r5, r2]
    c56e:	5474      	strb	r4, [r6, r1]
    c570:	3201      	adds	r2, #1
    c572:	b2c1      	uxtb	r1, r0
	for (i = 0; i < 4; i++)
    c574:	2a04      	cmp	r2, #4
    c576:	d1f8      	bne.n	c56a <MiMAC_SendPacket+0x26e>
    c578:	1d1a      	adds	r2, r3, #4
    c57a:	b2d2      	uxtb	r2, r2
	}
	OutgoingFrameCounter.Val++;
    c57c:	4836      	ldr	r0, [pc, #216]	; (c658 <MiMAC_SendPacket+0x35c>)
    c57e:	6801      	ldr	r1, [r0, #0]
    c580:	3101      	adds	r1, #1
    c582:	6001      	str	r1, [r0, #0]
	{
		PDS_Store(PDS_OUTGOING_FRAME_COUNTER_ID);
	}
	#endif
	//copy myKeySequenceNumber
	packet[loc++] = myKeySequenceNumber;
    c584:	3305      	adds	r3, #5
    c586:	b2db      	uxtb	r3, r3
    c588:	2000      	movs	r0, #0
    c58a:	4931      	ldr	r1, [pc, #196]	; (c650 <MiMAC_SendPacket+0x354>)
    c58c:	5488      	strb	r0, [r1, r2]
    {
		packet[loc++] = MACPayload[i];
    }
#else
    // write the payload
    for (i = 0; i < MACPayloadLen; i++) // MIC added
    c58e:	aa10      	add	r2, sp, #64	; 0x40
    c590:	7816      	ldrb	r6, [r2, #0]
    c592:	2e00      	cmp	r6, #0
    c594:	d053      	beq.n	c63e <MiMAC_SendPacket+0x342>
    c596:	9a00      	ldr	r2, [sp, #0]
    c598:	18f1      	adds	r1, r6, r3
    c59a:	b2c9      	uxtb	r1, r1
    {
	    packet[loc++] = MACPayload[i];
    c59c:	4d2c      	ldr	r5, [pc, #176]	; (c650 <MiMAC_SendPacket+0x354>)
    c59e:	1c58      	adds	r0, r3, #1
    c5a0:	7814      	ldrb	r4, [r2, #0]
    c5a2:	54ec      	strb	r4, [r5, r3]
    c5a4:	3201      	adds	r2, #1
    c5a6:	b2c3      	uxtb	r3, r0
    for (i = 0; i < MACPayloadLen; i++) // MIC added
    c5a8:	428b      	cmp	r3, r1
    c5aa:	d1f8      	bne.n	c59e <MiMAC_SendPacket+0x2a2>
    }
	packet[loc++] = final_mic_value[0];
    c5ac:	4828      	ldr	r0, [pc, #160]	; (c650 <MiMAC_SendPacket+0x354>)
    c5ae:	4b30      	ldr	r3, [pc, #192]	; (c670 <MiMAC_SendPacket+0x374>)
    c5b0:	781a      	ldrb	r2, [r3, #0]
    c5b2:	5442      	strb	r2, [r0, r1]
    c5b4:	1c4a      	adds	r2, r1, #1
	packet[loc++] = final_mic_value[1];
    c5b6:	b2d2      	uxtb	r2, r2
    c5b8:	785c      	ldrb	r4, [r3, #1]
    c5ba:	5484      	strb	r4, [r0, r2]
    c5bc:	1c8a      	adds	r2, r1, #2
	packet[loc++] = final_mic_value[2];
    c5be:	b2d2      	uxtb	r2, r2
    c5c0:	789c      	ldrb	r4, [r3, #2]
    c5c2:	5484      	strb	r4, [r0, r2]
    c5c4:	3103      	adds	r1, #3
	packet[loc++] = final_mic_value[3];
    c5c6:	b2c9      	uxtb	r1, r1
    c5c8:	78db      	ldrb	r3, [r3, #3]
    c5ca:	5443      	strb	r3, [r0, r1]
    } else
    {
        i = 0x01;
    }

    dataPointer = MACPayload;
    c5cc:	4b29      	ldr	r3, [pc, #164]	; (c674 <MiMAC_SendPacket+0x378>)
    c5ce:	9a00      	ldr	r2, [sp, #0]
    c5d0:	601a      	str	r2, [r3, #0]
	dataConfCallback = ConfCallback;
    c5d2:	4b29      	ldr	r3, [pc, #164]	; (c678 <MiMAC_SendPacket+0x37c>)
    c5d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
    c5d6:	601a      	str	r2, [r3, #0]
    dataHandle = msghandle;
    c5d8:	4b28      	ldr	r3, [pc, #160]	; (c67c <MiMAC_SendPacket+0x380>)
    c5da:	4652      	mov	r2, sl
    c5dc:	701a      	strb	r2, [r3, #0]
	MACdataPayloadLen = MACPayloadLen;
    c5de:	4b28      	ldr	r3, [pc, #160]	; (c680 <MiMAC_SendPacket+0x384>)
    c5e0:	701e      	strb	r6, [r3, #0]
	//DataRetryCount = 0;

    // Now Trigger the Transmission of packet
    return PHY_DataReq(packet);					
    c5e2:	4b28      	ldr	r3, [pc, #160]	; (c684 <MiMAC_SendPacket+0x388>)
    c5e4:	4798      	blx	r3
    c5e6:	1e43      	subs	r3, r0, #1
    c5e8:	4198      	sbcs	r0, r3
    c5ea:	b2c0      	uxtb	r0, r0
}
    c5ec:	b007      	add	sp, #28
    c5ee:	bc3c      	pop	{r2, r3, r4, r5}
    c5f0:	4690      	mov	r8, r2
    c5f2:	4699      	mov	r9, r3
    c5f4:	46a2      	mov	sl, r4
    c5f6:	46ab      	mov	fp, r5
    c5f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (transParam.altDestAddr)
    c5fa:	4643      	mov	r3, r8
    c5fc:	2b00      	cmp	r3, #0
    c5fe:	d000      	beq.n	c602 <MiMAC_SendPacket+0x306>
    c600:	e74b      	b.n	c49a <MiMAC_SendPacket+0x19e>
        transParam.flags.bits.ackReq = false;
    c602:	2300      	movs	r3, #0
					packet[loc++] = transParam.DestAddress[i];
    c604:	4812      	ldr	r0, [pc, #72]	; (c650 <MiMAC_SendPacket+0x354>)
    c606:	9c02      	ldr	r4, [sp, #8]
    c608:	5ce1      	ldrb	r1, [r4, r3]
    c60a:	181a      	adds	r2, r3, r0
    c60c:	7191      	strb	r1, [r2, #6]
    c60e:	3301      	adds	r3, #1
                for (i = 0; i < 8; i++)
    c610:	2b08      	cmp	r3, #8
    c612:	d1f9      	bne.n	c608 <MiMAC_SendPacket+0x30c>
					packet[loc++] = transParam.DestAddress[i];
    c614:	220e      	movs	r2, #14
    c616:	e76f      	b.n	c4f8 <MiMAC_SendPacket+0x1fc>
		AckReqData = 0;
    c618:	2100      	movs	r1, #0
    c61a:	4b13      	ldr	r3, [pc, #76]	; (c668 <MiMAC_SendPacket+0x36c>)
    c61c:	7019      	strb	r1, [r3, #0]
    c61e:	e77d      	b.n	c51c <MiMAC_SendPacket+0x220>
			packet[loc++] = MACInitParams.PAddress[i];
    c620:	4b19      	ldr	r3, [pc, #100]	; (c688 <MiMAC_SendPacket+0x38c>)
    c622:	6859      	ldr	r1, [r3, #4]
    c624:	0014      	movs	r4, r2
    c626:	3408      	adds	r4, #8
    c628:	b2e4      	uxtb	r4, r4
    c62a:	4d09      	ldr	r5, [pc, #36]	; (c650 <MiMAC_SendPacket+0x354>)
    c62c:	1c53      	adds	r3, r2, #1
    c62e:	b2db      	uxtb	r3, r3
    c630:	7808      	ldrb	r0, [r1, #0]
    c632:	54a8      	strb	r0, [r5, r2]
    c634:	3101      	adds	r1, #1
    c636:	001a      	movs	r2, r3
        for (i = 0; i < 8; i++)
    c638:	429c      	cmp	r4, r3
    c63a:	d1f7      	bne.n	c62c <MiMAC_SendPacket+0x330>
    c63c:	e788      	b.n	c550 <MiMAC_SendPacket+0x254>
    for (i = 0; i < MACPayloadLen; i++) // MIC added
    c63e:	0019      	movs	r1, r3
    c640:	e7b4      	b.n	c5ac <MiMAC_SendPacket+0x2b0>
    c642:	46c0      	nop			; (mov r8, r8)
    c644:	200007bb 	.word	0x200007bb
    c648:	20002730 	.word	0x20002730
    c64c:	20002784 	.word	0x20002784
    c650:	20002610 	.word	0x20002610
    c654:	0000ffff 	.word	0x0000ffff
    c658:	20002760 	.word	0x20002760
    c65c:	0000bfc5 	.word	0x0000bfc5
    c660:	2000260d 	.word	0x2000260d
    c664:	2000260c 	.word	0x2000260c
    c668:	200007b8 	.word	0x200007b8
    c66c:	20002710 	.word	0x20002710
    c670:	2000274c 	.word	0x2000274c
    c674:	200007c4 	.word	0x200007c4
    c678:	200007bc 	.word	0x200007bc
    c67c:	200007c0 	.word	0x200007c0
    c680:	200007ba 	.word	0x200007ba
    c684:	0000d275 	.word	0x0000d275
    c688:	20002718 	.word	0x20002718

0000c68c <MiMAC_DiscardPacket>:
 *
 *****************************************************************************************/
void MiMAC_DiscardPacket(void)
{
	//re-enable buffer for next packets
	if (BankIndex < BANK_SIZE)
    c68c:	4b04      	ldr	r3, [pc, #16]	; (c6a0 <MiMAC_DiscardPacket+0x14>)
    c68e:	781b      	ldrb	r3, [r3, #0]
    c690:	2b03      	cmp	r3, #3
    c692:	d804      	bhi.n	c69e <MiMAC_DiscardPacket+0x12>
	{
		RxBuffer[BankIndex].PayloadLen = 0;
    c694:	021a      	lsls	r2, r3, #8
    c696:	18d3      	adds	r3, r2, r3
    c698:	2100      	movs	r1, #0
    c69a:	4a02      	ldr	r2, [pc, #8]	; (c6a4 <MiMAC_DiscardPacket+0x18>)
    c69c:	5499      	strb	r1, [r3, r2]
	}
}
    c69e:	4770      	bx	lr
    c6a0:	2000001c 	.word	0x2000001c
    c6a4:	20002890 	.word	0x20002890

0000c6a8 <PHY_DataConf>:
 *      None
 *
 *****************************************************************************************/
void PHY_DataConf(uint8_t status)
{
	DataRetryCount = 0;
    c6a8:	2200      	movs	r2, #0
    c6aa:	4b04      	ldr	r3, [pc, #16]	; (c6bc <PHY_DataConf+0x14>)
    c6ac:	701a      	strb	r2, [r3, #0]
	dataStatus = (miwi_status_t)status;
    c6ae:	4b04      	ldr	r3, [pc, #16]	; (c6c0 <PHY_DataConf+0x18>)
    c6b0:	7018      	strb	r0, [r3, #0]
	dataConfAvailable = true;
    c6b2:	3201      	adds	r2, #1
    c6b4:	4b03      	ldr	r3, [pc, #12]	; (c6c4 <PHY_DataConf+0x1c>)
    c6b6:	701a      	strb	r2, [r3, #0]
}
    c6b8:	4770      	bx	lr
    c6ba:	46c0      	nop			; (mov r8, r8)
    c6bc:	200007b9 	.word	0x200007b9
    c6c0:	2000275c 	.word	0x2000275c
    c6c4:	200007bb 	.word	0x200007bb

0000c6c8 <MiMAC_RetryPacket>:
{
    c6c8:	b510      	push	{r4, lr}
	DataRetryCount++;
    c6ca:	4a0b      	ldr	r2, [pc, #44]	; (c6f8 <MiMAC_RetryPacket+0x30>)
    c6cc:	7813      	ldrb	r3, [r2, #0]
    c6ce:	3301      	adds	r3, #1
    c6d0:	b2db      	uxtb	r3, r3
    c6d2:	7013      	strb	r3, [r2, #0]
	if (DataRetryCount < DATA_RETRY_ATTEMPT)
    c6d4:	2b02      	cmp	r3, #2
    c6d6:	d904      	bls.n	c6e2 <MiMAC_RetryPacket+0x1a>
		PHY_DataConf(NO_ACK); // No Ack response
    c6d8:	2003      	movs	r0, #3
    c6da:	4b08      	ldr	r3, [pc, #32]	; (c6fc <MiMAC_RetryPacket+0x34>)
    c6dc:	4798      	blx	r3
	bool status = false;
    c6de:	2000      	movs	r0, #0
}
    c6e0:	bd10      	pop	{r4, pc}
		AckReqData = 1;
    c6e2:	2201      	movs	r2, #1
    c6e4:	4b06      	ldr	r3, [pc, #24]	; (c700 <MiMAC_RetryPacket+0x38>)
    c6e6:	701a      	strb	r2, [r3, #0]
		status = PHY_DataReq(packet);
    c6e8:	4806      	ldr	r0, [pc, #24]	; (c704 <MiMAC_RetryPacket+0x3c>)
    c6ea:	4b07      	ldr	r3, [pc, #28]	; (c708 <MiMAC_RetryPacket+0x40>)
    c6ec:	4798      	blx	r3
    c6ee:	1e43      	subs	r3, r0, #1
    c6f0:	4198      	sbcs	r0, r3
    c6f2:	b2c0      	uxtb	r0, r0
    c6f4:	e7f4      	b.n	c6e0 <MiMAC_RetryPacket+0x18>
    c6f6:	46c0      	nop			; (mov r8, r8)
    c6f8:	200007b9 	.word	0x200007b9
    c6fc:	0000c6a9 	.word	0x0000c6a9
    c700:	200007b8 	.word	0x200007b8
    c704:	20002610 	.word	0x20002610
    c708:	0000d275 	.word	0x0000d275

0000c70c <MiMAC_Task>:

void MiMAC_Task(void)
{
    c70c:	b510      	push	{r4, lr}
  PHY_TaskHandler();
    c70e:	4b0b      	ldr	r3, [pc, #44]	; (c73c <MiMAC_Task+0x30>)
    c710:	4798      	blx	r3
  if(dataConfCallback && dataConfAvailable)
    c712:	4b0b      	ldr	r3, [pc, #44]	; (c740 <MiMAC_Task+0x34>)
    c714:	681b      	ldr	r3, [r3, #0]
    c716:	2b00      	cmp	r3, #0
    c718:	d003      	beq.n	c722 <MiMAC_Task+0x16>
    c71a:	4a0a      	ldr	r2, [pc, #40]	; (c744 <MiMAC_Task+0x38>)
    c71c:	7812      	ldrb	r2, [r2, #0]
    c71e:	2a00      	cmp	r2, #0
    c720:	d100      	bne.n	c724 <MiMAC_Task+0x18>
  {
	  dataConfAvailable = false;
	  dataConfCallback(dataHandle, dataStatus, dataPointer);
  }
}
    c722:	bd10      	pop	{r4, pc}
	  dataConfAvailable = false;
    c724:	2100      	movs	r1, #0
    c726:	4a07      	ldr	r2, [pc, #28]	; (c744 <MiMAC_Task+0x38>)
    c728:	7011      	strb	r1, [r2, #0]
	  dataConfCallback(dataHandle, dataStatus, dataPointer);
    c72a:	4a07      	ldr	r2, [pc, #28]	; (c748 <MiMAC_Task+0x3c>)
    c72c:	6812      	ldr	r2, [r2, #0]
    c72e:	4907      	ldr	r1, [pc, #28]	; (c74c <MiMAC_Task+0x40>)
    c730:	7809      	ldrb	r1, [r1, #0]
    c732:	4807      	ldr	r0, [pc, #28]	; (c750 <MiMAC_Task+0x44>)
    c734:	7800      	ldrb	r0, [r0, #0]
    c736:	4798      	blx	r3
}
    c738:	e7f3      	b.n	c722 <MiMAC_Task+0x16>
    c73a:	46c0      	nop			; (mov r8, r8)
    c73c:	0000d31d 	.word	0x0000d31d
    c740:	200007bc 	.word	0x200007bc
    c744:	200007bb 	.word	0x200007bb
    c748:	200007c4 	.word	0x200007c4
    c74c:	2000275c 	.word	0x2000275c
    c750:	200007c0 	.word	0x200007c0

0000c754 <MiMAC_ReceivedPacket>:
{
    c754:	b5f0      	push	{r4, r5, r6, r7, lr}
    c756:	46ce      	mov	lr, r9
    c758:	4647      	mov	r7, r8
    c75a:	b580      	push	{r7, lr}
    c75c:	b089      	sub	sp, #36	; 0x24
	BankIndex = 0xFF;
    c75e:	22ff      	movs	r2, #255	; 0xff
    c760:	4bc0      	ldr	r3, [pc, #768]	; (ca64 <MiMAC_ReceivedPacket+0x310>)
    c762:	701a      	strb	r2, [r3, #0]
    c764:	4ac0      	ldr	r2, [pc, #768]	; (ca68 <MiMAC_ReceivedPacket+0x314>)
	for (i = 0; i < BANK_SIZE; i++)
    c766:	2300      	movs	r3, #0
		if(((AckReqData) || (FW_Stat))  && (RxBuffer[i].PayloadLen > 0))
    c768:	48c0      	ldr	r0, [pc, #768]	; (ca6c <MiMAC_ReceivedPacket+0x318>)
			if(((RxBuffer[i].Payload[0] & 0x07) == PACKET_TYPE_ACK))
    c76a:	2407      	movs	r4, #7
    c76c:	e00c      	b.n	c788 <MiMAC_ReceivedPacket+0x34>
		if(((AckReqData) || (FW_Stat))  && (RxBuffer[i].PayloadLen > 0))
    c76e:	7811      	ldrb	r1, [r2, #0]
    c770:	2900      	cmp	r1, #0
    c772:	d003      	beq.n	c77c <MiMAC_ReceivedPacket+0x28>
			if(((RxBuffer[i].Payload[0] & 0x07) == PACKET_TYPE_ACK))
    c774:	7891      	ldrb	r1, [r2, #2]
    c776:	4021      	ands	r1, r4
    c778:	2902      	cmp	r1, #2
    c77a:	d00d      	beq.n	c798 <MiMAC_ReceivedPacket+0x44>
	for (i = 0; i < BANK_SIZE; i++)
    c77c:	3301      	adds	r3, #1
    c77e:	b2db      	uxtb	r3, r3
    c780:	3202      	adds	r2, #2
    c782:	32ff      	adds	r2, #255	; 0xff
    c784:	2b04      	cmp	r3, #4
    c786:	d040      	beq.n	c80a <MiMAC_ReceivedPacket+0xb6>
		if(((AckReqData) || (FW_Stat))  && (RxBuffer[i].PayloadLen > 0))
    c788:	7801      	ldrb	r1, [r0, #0]
    c78a:	2900      	cmp	r1, #0
    c78c:	d1ef      	bne.n	c76e <MiMAC_ReceivedPacket+0x1a>
    c78e:	49b8      	ldr	r1, [pc, #736]	; (ca70 <MiMAC_ReceivedPacket+0x31c>)
    c790:	7809      	ldrb	r1, [r1, #0]
    c792:	2900      	cmp	r1, #0
    c794:	d0f2      	beq.n	c77c <MiMAC_ReceivedPacket+0x28>
    c796:	e7ea      	b.n	c76e <MiMAC_ReceivedPacket+0x1a>
				BankIndex = i;
    c798:	4ab2      	ldr	r2, [pc, #712]	; (ca64 <MiMAC_ReceivedPacket+0x310>)
    c79a:	7013      	strb	r3, [r2, #0]
	if(BankIndex == 0xFF)
    c79c:	2bff      	cmp	r3, #255	; 0xff
    c79e:	d034      	beq.n	c80a <MiMAC_ReceivedPacket+0xb6>
	if (BankIndex < BANK_SIZE)
    c7a0:	4bb0      	ldr	r3, [pc, #704]	; (ca64 <MiMAC_ReceivedPacket+0x310>)
    c7a2:	781b      	ldrb	r3, [r3, #0]
    c7a4:	2b03      	cmp	r3, #3
    c7a6:	d900      	bls.n	c7aa <MiMAC_ReceivedPacket+0x56>
    c7a8:	e351      	b.n	ce4e <MiMAC_ReceivedPacket+0x6fa>
		if ((RxBuffer[BankIndex].Payload[0] & 0x40) == 0)
    c7aa:	0219      	lsls	r1, r3, #8
    c7ac:	18c9      	adds	r1, r1, r3
    c7ae:	4aae      	ldr	r2, [pc, #696]	; (ca68 <MiMAC_ReceivedPacket+0x314>)
    c7b0:	1852      	adds	r2, r2, r1
    c7b2:	7894      	ldrb	r4, [r2, #2]
    c7b4:	2040      	movs	r0, #64	; 0x40
    c7b6:	4004      	ands	r4, r0
		MACRxPacket.flags.Val = 0;
    c7b8:	49ae      	ldr	r1, [pc, #696]	; (ca74 <MiMAC_ReceivedPacket+0x320>)
    c7ba:	2000      	movs	r0, #0
    c7bc:	7008      	strb	r0, [r1, #0]
		MACRxPacket.altSourceAddress = false;
    c7be:	73c8      	strb	r0, [r1, #15]
		addrMode = RxBuffer[BankIndex].Payload[1] & 0xCC;
    c7c0:	78d2      	ldrb	r2, [r2, #3]
    c7c2:	2133      	movs	r1, #51	; 0x33
    c7c4:	438a      	bics	r2, r1
		switch (addrMode)
    c7c6:	b2d1      	uxtb	r1, r2
    c7c8:	2988      	cmp	r1, #136	; 0x88
    c7ca:	d100      	bne.n	c7ce <MiMAC_ReceivedPacket+0x7a>
    c7cc:	e164      	b.n	ca98 <MiMAC_ReceivedPacket+0x344>
    c7ce:	d936      	bls.n	c83e <MiMAC_ReceivedPacket+0xea>
    c7d0:	b2d1      	uxtb	r1, r2
    c7d2:	29c8      	cmp	r1, #200	; 0xc8
    c7d4:	d100      	bne.n	c7d8 <MiMAC_ReceivedPacket+0x84>
    c7d6:	e085      	b.n	c8e4 <MiMAC_ReceivedPacket+0x190>
    c7d8:	29cc      	cmp	r1, #204	; 0xcc
    c7da:	d100      	bne.n	c7de <MiMAC_ReceivedPacket+0x8a>
    c7dc:	e0ce      	b.n	c97c <MiMAC_ReceivedPacket+0x228>
    c7de:	298c      	cmp	r1, #140	; 0x8c
    c7e0:	d100      	bne.n	c7e4 <MiMAC_ReceivedPacket+0x90>
    c7e2:	e1c6      	b.n	cb72 <MiMAC_ReceivedPacket+0x41e>
			MiMAC_DiscardPacket();
    c7e4:	4ba4      	ldr	r3, [pc, #656]	; (ca78 <MiMAC_ReceivedPacket+0x324>)
    c7e6:	4798      	blx	r3
			if(RxBuffer[BankIndex].Payload[0] & 0x20)
    c7e8:	4b9e      	ldr	r3, [pc, #632]	; (ca64 <MiMAC_ReceivedPacket+0x310>)
    c7ea:	781a      	ldrb	r2, [r3, #0]
    c7ec:	0213      	lsls	r3, r2, #8
    c7ee:	189a      	adds	r2, r3, r2
    c7f0:	4b9d      	ldr	r3, [pc, #628]	; (ca68 <MiMAC_ReceivedPacket+0x314>)
    c7f2:	189b      	adds	r3, r3, r2
    c7f4:	789b      	ldrb	r3, [r3, #2]
			return false;
    c7f6:	2400      	movs	r4, #0
			if(RxBuffer[BankIndex].Payload[0] & 0x20)
    c7f8:	069b      	lsls	r3, r3, #26
    c7fa:	d51a      	bpl.n	c832 <MiMAC_ReceivedPacket+0xde>
				MiRadioReceiveParam.action = RECEIVE_START;					
    c7fc:	a807      	add	r0, sp, #28
    c7fe:	2300      	movs	r3, #0
    c800:	7003      	strb	r3, [r0, #0]
				MiRadioReceiveParam.rxWindowSize = 0;
    c802:	8043      	strh	r3, [r0, #2]
				RADIO_Receive(&MiRadioReceiveParam);
    c804:	4b9d      	ldr	r3, [pc, #628]	; (ca7c <MiMAC_ReceivedPacket+0x328>)
    c806:	4798      	blx	r3
    c808:	e013      	b.n	c832 <MiMAC_ReceivedPacket+0xde>
	for (i = 0; i < BANK_SIZE; i++)
    c80a:	2300      	movs	r3, #0
			if ((RxBuffer[i].PayloadLen > 0) && (!FW_Stat))
    c80c:	4996      	ldr	r1, [pc, #600]	; (ca68 <MiMAC_ReceivedPacket+0x314>)
		for (i = 0; i < BANK_SIZE; i++)
    c80e:	489c      	ldr	r0, [pc, #624]	; (ca80 <MiMAC_ReceivedPacket+0x32c>)
    c810:	e003      	b.n	c81a <MiMAC_ReceivedPacket+0xc6>
    c812:	3302      	adds	r3, #2
    c814:	33ff      	adds	r3, #255	; 0xff
    c816:	4283      	cmp	r3, r0
    c818:	d00a      	beq.n	c830 <MiMAC_ReceivedPacket+0xdc>
    c81a:	b2dc      	uxtb	r4, r3
			if ((RxBuffer[i].PayloadLen > 0) && (!FW_Stat))
    c81c:	5cca      	ldrb	r2, [r1, r3]
    c81e:	2a00      	cmp	r2, #0
    c820:	d0f7      	beq.n	c812 <MiMAC_ReceivedPacket+0xbe>
    c822:	4a93      	ldr	r2, [pc, #588]	; (ca70 <MiMAC_ReceivedPacket+0x31c>)
    c824:	7812      	ldrb	r2, [r2, #0]
    c826:	2a00      	cmp	r2, #0
    c828:	d1f3      	bne.n	c812 <MiMAC_ReceivedPacket+0xbe>
				BankIndex = i;
    c82a:	4b8e      	ldr	r3, [pc, #568]	; (ca64 <MiMAC_ReceivedPacket+0x310>)
    c82c:	701c      	strb	r4, [r3, #0]
				break;
    c82e:	e7b7      	b.n	c7a0 <MiMAC_ReceivedPacket+0x4c>
	return false;
    c830:	2400      	movs	r4, #0
}
    c832:	0020      	movs	r0, r4
    c834:	b009      	add	sp, #36	; 0x24
    c836:	bc0c      	pop	{r2, r3}
    c838:	4690      	mov	r8, r2
    c83a:	4699      	mov	r9, r3
    c83c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (addrMode)
    c83e:	2a08      	cmp	r2, #8
    c840:	d100      	bne.n	c844 <MiMAC_ReceivedPacket+0xf0>
    c842:	e1e4      	b.n	cc0e <MiMAC_ReceivedPacket+0x4ba>
    c844:	2980      	cmp	r1, #128	; 0x80
    c846:	d1cd      	bne.n	c7e4 <MiMAC_ReceivedPacket+0x90>
				MACRxPacket.flags.bits.broadcast = 1;
    c848:	4a8a      	ldr	r2, [pc, #552]	; (ca74 <MiMAC_ReceivedPacket+0x320>)
    c84a:	7811      	ldrb	r1, [r2, #0]
    c84c:	2004      	movs	r0, #4
    c84e:	4301      	orrs	r1, r0
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    c850:	2080      	movs	r0, #128	; 0x80
    c852:	4240      	negs	r0, r0
    c854:	4301      	orrs	r1, r0
    c856:	7011      	strb	r1, [r2, #0]
				MACRxPacket.altSourceAddress = true;
    c858:	2101      	movs	r1, #1
    c85a:	73d1      	strb	r1, [r2, #15]
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    c85c:	4882      	ldr	r0, [pc, #520]	; (ca68 <MiMAC_ReceivedPacket+0x314>)
    c85e:	021c      	lsls	r4, r3, #8
    c860:	18e4      	adds	r4, r4, r3
    c862:	1901      	adds	r1, r0, r4
    c864:	794d      	ldrb	r5, [r1, #5]
    c866:	7415      	strb	r5, [r2, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    c868:	7989      	ldrb	r1, [r1, #6]
    c86a:	7451      	strb	r1, [r2, #17]
    c86c:	0023      	movs	r3, r4
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[5]);
    c86e:	1de1      	adds	r1, r4, #7
    c870:	1809      	adds	r1, r1, r0
    c872:	6051      	str	r1, [r2, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 11;
    c874:	5c21      	ldrb	r1, [r4, r0]
    c876:	390b      	subs	r1, #11
    c878:	7311      	strb	r1, [r2, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    c87a:	3309      	adds	r3, #9
    c87c:	181b      	adds	r3, r3, r0
    c87e:	6093      	str	r3, [r2, #8]
		if (RxBuffer[BankIndex].Payload[0] & 0x08)
    c880:	4b78      	ldr	r3, [pc, #480]	; (ca64 <MiMAC_ReceivedPacket+0x310>)
    c882:	781a      	ldrb	r2, [r3, #0]
    c884:	0213      	lsls	r3, r2, #8
    c886:	189a      	adds	r2, r3, r2
    c888:	4b77      	ldr	r3, [pc, #476]	; (ca68 <MiMAC_ReceivedPacket+0x314>)
    c88a:	189b      	adds	r3, r3, r2
    c88c:	789b      	ldrb	r3, [r3, #2]
    c88e:	071b      	lsls	r3, r3, #28
    c890:	d500      	bpl.n	c894 <MiMAC_ReceivedPacket+0x140>
    c892:	e1dd      	b.n	cc50 <MiMAC_ReceivedPacket+0x4fc>
		switch (RxBuffer[BankIndex].Payload[0] & 0x07) // check frame type
    c894:	4b73      	ldr	r3, [pc, #460]	; (ca64 <MiMAC_ReceivedPacket+0x310>)
    c896:	7818      	ldrb	r0, [r3, #0]
    c898:	0202      	lsls	r2, r0, #8
    c89a:	1812      	adds	r2, r2, r0
    c89c:	4b72      	ldr	r3, [pc, #456]	; (ca68 <MiMAC_ReceivedPacket+0x314>)
    c89e:	189b      	adds	r3, r3, r2
    c8a0:	7899      	ldrb	r1, [r3, #2]
    c8a2:	2307      	movs	r3, #7
    c8a4:	400b      	ands	r3, r1
    c8a6:	2b01      	cmp	r3, #1
    c8a8:	d100      	bne.n	c8ac <MiMAC_ReceivedPacket+0x158>
    c8aa:	e251      	b.n	cd50 <MiMAC_ReceivedPacket+0x5fc>
    c8ac:	2b00      	cmp	r3, #0
    c8ae:	d100      	bne.n	c8b2 <MiMAC_ReceivedPacket+0x15e>
    c8b0:	e286      	b.n	cdc0 <MiMAC_ReceivedPacket+0x66c>
    c8b2:	2b02      	cmp	r3, #2
    c8b4:	d100      	bne.n	c8b8 <MiMAC_ReceivedPacket+0x164>
    c8b6:	e289      	b.n	cdcc <MiMAC_ReceivedPacket+0x678>
    c8b8:	2b03      	cmp	r3, #3
    c8ba:	d100      	bne.n	c8be <MiMAC_ReceivedPacket+0x16a>
    c8bc:	e278      	b.n	cdb0 <MiMAC_ReceivedPacket+0x65c>
			MiMAC_DiscardPacket();
    c8be:	4b6e      	ldr	r3, [pc, #440]	; (ca78 <MiMAC_ReceivedPacket+0x324>)
    c8c0:	4798      	blx	r3
			if(RxBuffer[BankIndex].Payload[0] & 0x20)
    c8c2:	4b68      	ldr	r3, [pc, #416]	; (ca64 <MiMAC_ReceivedPacket+0x310>)
    c8c4:	781a      	ldrb	r2, [r3, #0]
    c8c6:	0213      	lsls	r3, r2, #8
    c8c8:	189a      	adds	r2, r3, r2
    c8ca:	4b67      	ldr	r3, [pc, #412]	; (ca68 <MiMAC_ReceivedPacket+0x314>)
    c8cc:	189b      	adds	r3, r3, r2
    c8ce:	789b      	ldrb	r3, [r3, #2]
			return false;
    c8d0:	2400      	movs	r4, #0
			if(RxBuffer[BankIndex].Payload[0] & 0x20)
    c8d2:	069b      	lsls	r3, r3, #26
    c8d4:	d5ad      	bpl.n	c832 <MiMAC_ReceivedPacket+0xde>
				MiRadioReceiveParam.action = RECEIVE_START;	
    c8d6:	a807      	add	r0, sp, #28
    c8d8:	2300      	movs	r3, #0
    c8da:	7003      	strb	r3, [r0, #0]
				MiRadioReceiveParam.rxWindowSize = 0;
    c8dc:	8043      	strh	r3, [r0, #2]
				RADIO_Receive(&MiRadioReceiveParam);
    c8de:	4b67      	ldr	r3, [pc, #412]	; (ca7c <MiMAC_ReceivedPacket+0x328>)
    c8e0:	4798      	blx	r3
    c8e2:	e7a6      	b.n	c832 <MiMAC_ReceivedPacket+0xde>
			if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    c8e4:	0219      	lsls	r1, r3, #8
    c8e6:	18c9      	adds	r1, r1, r3
    c8e8:	4a5f      	ldr	r2, [pc, #380]	; (ca68 <MiMAC_ReceivedPacket+0x314>)
    c8ea:	1852      	adds	r2, r2, r1
    c8ec:	79d0      	ldrb	r0, [r2, #7]
    c8ee:	28ff      	cmp	r0, #255	; 0xff
    c8f0:	d01d      	beq.n	c92e <MiMAC_ReceivedPacket+0x1da>
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    c8f2:	4960      	ldr	r1, [pc, #384]	; (ca74 <MiMAC_ReceivedPacket+0x320>)
    c8f4:	780d      	ldrb	r5, [r1, #0]
    c8f6:	2280      	movs	r2, #128	; 0x80
    c8f8:	4252      	negs	r2, r2
    c8fa:	432a      	orrs	r2, r5
    c8fc:	700a      	strb	r2, [r1, #0]
			if (bIntraPAN) // check if it is intraPAN
    c8fe:	2c00      	cmp	r4, #0
    c900:	d000      	beq.n	c904 <MiMAC_ReceivedPacket+0x1b0>
    c902:	e2a6      	b.n	ce52 <MiMAC_ReceivedPacket+0x6fe>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    c904:	495b      	ldr	r1, [pc, #364]	; (ca74 <MiMAC_ReceivedPacket+0x320>)
    c906:	4858      	ldr	r0, [pc, #352]	; (ca68 <MiMAC_ReceivedPacket+0x314>)
    c908:	021c      	lsls	r4, r3, #8
    c90a:	18e4      	adds	r4, r4, r3
    c90c:	1902      	adds	r2, r0, r4
    c90e:	7a55      	ldrb	r5, [r2, #9]
    c910:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    c912:	7a92      	ldrb	r2, [r2, #10]
    c914:	744a      	strb	r2, [r1, #17]
    c916:	0023      	movs	r3, r4
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    c918:	0022      	movs	r2, r4
    c91a:	320b      	adds	r2, #11
    c91c:	1812      	adds	r2, r2, r0
    c91e:	604a      	str	r2, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    c920:	5c22      	ldrb	r2, [r4, r0]
    c922:	3a15      	subs	r2, #21
    c924:	730a      	strb	r2, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    c926:	3313      	adds	r3, #19
    c928:	181b      	adds	r3, r3, r0
    c92a:	608b      	str	r3, [r1, #8]
    c92c:	e042      	b.n	c9b4 <MiMAC_ReceivedPacket+0x260>
			if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    c92e:	0219      	lsls	r1, r3, #8
    c930:	18c9      	adds	r1, r1, r3
    c932:	4a4d      	ldr	r2, [pc, #308]	; (ca68 <MiMAC_ReceivedPacket+0x314>)
    c934:	1852      	adds	r2, r2, r1
    c936:	7a12      	ldrb	r2, [r2, #8]
    c938:	2aff      	cmp	r2, #255	; 0xff
    c93a:	d1da      	bne.n	c8f2 <MiMAC_ReceivedPacket+0x19e>
				MACRxPacket.flags.bits.broadcast = 1;
    c93c:	494d      	ldr	r1, [pc, #308]	; (ca74 <MiMAC_ReceivedPacket+0x320>)
    c93e:	780a      	ldrb	r2, [r1, #0]
    c940:	2004      	movs	r0, #4
    c942:	4302      	orrs	r2, r0
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    c944:	2080      	movs	r0, #128	; 0x80
    c946:	4240      	negs	r0, r0
    c948:	4302      	orrs	r2, r0
    c94a:	700a      	strb	r2, [r1, #0]
			if (bIntraPAN) // check if it is intraPAN
    c94c:	2c00      	cmp	r4, #0
    c94e:	d000      	beq.n	c952 <MiMAC_ReceivedPacket+0x1fe>
    c950:	e28e      	b.n	ce70 <MiMAC_ReceivedPacket+0x71c>
    c952:	e7d7      	b.n	c904 <MiMAC_ReceivedPacket+0x1b0>
					MiMAC_DiscardPacket();
    c954:	4b48      	ldr	r3, [pc, #288]	; (ca78 <MiMAC_ReceivedPacket+0x324>)
    c956:	4798      	blx	r3
					if(RxBuffer[BankIndex].Payload[0] & 0x20)
    c958:	4b42      	ldr	r3, [pc, #264]	; (ca64 <MiMAC_ReceivedPacket+0x310>)
    c95a:	781a      	ldrb	r2, [r3, #0]
    c95c:	0213      	lsls	r3, r2, #8
    c95e:	189a      	adds	r2, r3, r2
    c960:	4b41      	ldr	r3, [pc, #260]	; (ca68 <MiMAC_ReceivedPacket+0x314>)
    c962:	189b      	adds	r3, r3, r2
    c964:	789b      	ldrb	r3, [r3, #2]
					return false;
    c966:	2400      	movs	r4, #0
					if(RxBuffer[BankIndex].Payload[0] & 0x20)
    c968:	069b      	lsls	r3, r3, #26
    c96a:	d400      	bmi.n	c96e <MiMAC_ReceivedPacket+0x21a>
    c96c:	e761      	b.n	c832 <MiMAC_ReceivedPacket+0xde>
						MiRadioReceiveParam.action = RECEIVE_START;					
    c96e:	a807      	add	r0, sp, #28
    c970:	2300      	movs	r3, #0
    c972:	7003      	strb	r3, [r0, #0]
						MiRadioReceiveParam.rxWindowSize = 0;
    c974:	8043      	strh	r3, [r0, #2]
						RADIO_Receive(&MiRadioReceiveParam);
    c976:	4b41      	ldr	r3, [pc, #260]	; (ca7c <MiMAC_ReceivedPacket+0x328>)
    c978:	4798      	blx	r3
    c97a:	e75a      	b.n	c832 <MiMAC_ReceivedPacket+0xde>
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    c97c:	493d      	ldr	r1, [pc, #244]	; (ca74 <MiMAC_ReceivedPacket+0x320>)
    c97e:	7808      	ldrb	r0, [r1, #0]
    c980:	2280      	movs	r2, #128	; 0x80
    c982:	4252      	negs	r2, r2
    c984:	4302      	orrs	r2, r0
    c986:	700a      	strb	r2, [r1, #0]
			if (bIntraPAN) // check if it is intraPAN
    c988:	2c00      	cmp	r4, #0
    c98a:	d137      	bne.n	c9fc <MiMAC_ReceivedPacket+0x2a8>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[13];
    c98c:	4939      	ldr	r1, [pc, #228]	; (ca74 <MiMAC_ReceivedPacket+0x320>)
    c98e:	4836      	ldr	r0, [pc, #216]	; (ca68 <MiMAC_ReceivedPacket+0x314>)
    c990:	021c      	lsls	r4, r3, #8
    c992:	18e4      	adds	r4, r4, r3
    c994:	1902      	adds	r2, r0, r4
    c996:	7bd5      	ldrb	r5, [r2, #15]
    c998:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[14];
    c99a:	7c12      	ldrb	r2, [r2, #16]
    c99c:	744a      	strb	r2, [r1, #17]
    c99e:	0023      	movs	r3, r4
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[15]);
    c9a0:	0022      	movs	r2, r4
    c9a2:	3211      	adds	r2, #17
    c9a4:	1812      	adds	r2, r2, r0
    c9a6:	604a      	str	r2, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 27;
    c9a8:	5c22      	ldrb	r2, [r4, r0]
    c9aa:	3a1b      	subs	r2, #27
    c9ac:	730a      	strb	r2, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[23]);
    c9ae:	3319      	adds	r3, #25
    c9b0:	181b      	adds	r3, r3, r0
    c9b2:	608b      	str	r3, [r1, #8]
		if (RxBuffer[BankIndex].Payload[0] & 0x08)
    c9b4:	4b2b      	ldr	r3, [pc, #172]	; (ca64 <MiMAC_ReceivedPacket+0x310>)
    c9b6:	781a      	ldrb	r2, [r3, #0]
    c9b8:	0213      	lsls	r3, r2, #8
    c9ba:	189a      	adds	r2, r3, r2
    c9bc:	4b2a      	ldr	r3, [pc, #168]	; (ca68 <MiMAC_ReceivedPacket+0x314>)
    c9be:	189b      	adds	r3, r3, r2
    c9c0:	789b      	ldrb	r3, [r3, #2]
    c9c2:	071b      	lsls	r3, r3, #28
    c9c4:	d400      	bmi.n	c9c8 <MiMAC_ReceivedPacket+0x274>
    c9c6:	e765      	b.n	c894 <MiMAC_ReceivedPacket+0x140>
			FrameCounter.v[0] = MACRxPacket.Payload[0];
    c9c8:	4b2a      	ldr	r3, [pc, #168]	; (ca74 <MiMAC_ReceivedPacket+0x320>)
    c9ca:	689b      	ldr	r3, [r3, #8]
			FrameCounter.v[1] = MACRxPacket.Payload[1];
    c9cc:	785a      	ldrb	r2, [r3, #1]
    c9ce:	0212      	lsls	r2, r2, #8
    c9d0:	7819      	ldrb	r1, [r3, #0]
    c9d2:	4311      	orrs	r1, r2
    c9d4:	4689      	mov	r9, r1
			FrameCounter.v[2] = MACRxPacket.Payload[2];
    c9d6:	789a      	ldrb	r2, [r3, #2]
    c9d8:	0412      	lsls	r2, r2, #16
    c9da:	492a      	ldr	r1, [pc, #168]	; (ca84 <MiMAC_ReceivedPacket+0x330>)
    c9dc:	4648      	mov	r0, r9
    c9de:	4001      	ands	r1, r0
    c9e0:	4311      	orrs	r1, r2
			FrameCounter.v[3] = MACRxPacket.Payload[3];
    c9e2:	78db      	ldrb	r3, [r3, #3]
    c9e4:	061b      	lsls	r3, r3, #24
    c9e6:	020a      	lsls	r2, r1, #8
    c9e8:	0a12      	lsrs	r2, r2, #8
    c9ea:	431a      	orrs	r2, r3
    c9ec:	4691      	mov	r9, r2
    c9ee:	4f26      	ldr	r7, [pc, #152]	; (ca88 <MiMAC_ReceivedPacket+0x334>)
    c9f0:	2500      	movs	r5, #0
			for (i = 0; i < CONNECTION_SIZE; i++)
    c9f2:	2400      	movs	r4, #0
				if ((ConnectionTable[i].status.bits.isValid) &&
    c9f4:	4e25      	ldr	r6, [pc, #148]	; (ca8c <MiMAC_ReceivedPacket+0x338>)
				isSameAddress(ConnectionTable[i].Address, MACRxPacket.SourceAddress))
    c9f6:	4b1f      	ldr	r3, [pc, #124]	; (ca74 <MiMAC_ReceivedPacket+0x320>)
    c9f8:	4698      	mov	r8, r3
    c9fa:	e143      	b.n	cc84 <MiMAC_ReceivedPacket+0x530>
				if(!(isSameAddress((uint8_t *)&DevIEEEaddr, &RxBuffer[BankIndex].Payload[5])))
    c9fc:	0219      	lsls	r1, r3, #8
    c9fe:	18c9      	adds	r1, r1, r3
    ca00:	3107      	adds	r1, #7
    ca02:	4b19      	ldr	r3, [pc, #100]	; (ca68 <MiMAC_ReceivedPacket+0x314>)
    ca04:	18c9      	adds	r1, r1, r3
    ca06:	4822      	ldr	r0, [pc, #136]	; (ca90 <MiMAC_ReceivedPacket+0x33c>)
    ca08:	4b22      	ldr	r3, [pc, #136]	; (ca94 <MiMAC_ReceivedPacket+0x340>)
    ca0a:	4798      	blx	r3
    ca0c:	1e04      	subs	r4, r0, #0
    ca0e:	d015      	beq.n	ca3c <MiMAC_ReceivedPacket+0x2e8>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    ca10:	4b14      	ldr	r3, [pc, #80]	; (ca64 <MiMAC_ReceivedPacket+0x310>)
    ca12:	7818      	ldrb	r0, [r3, #0]
    ca14:	4a17      	ldr	r2, [pc, #92]	; (ca74 <MiMAC_ReceivedPacket+0x320>)
    ca16:	4914      	ldr	r1, [pc, #80]	; (ca68 <MiMAC_ReceivedPacket+0x314>)
    ca18:	0203      	lsls	r3, r0, #8
    ca1a:	181b      	adds	r3, r3, r0
    ca1c:	18c8      	adds	r0, r1, r3
    ca1e:	7944      	ldrb	r4, [r0, #5]
    ca20:	7414      	strb	r4, [r2, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    ca22:	7980      	ldrb	r0, [r0, #6]
    ca24:	7450      	strb	r0, [r2, #17]
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[13]);
    ca26:	0018      	movs	r0, r3
    ca28:	300f      	adds	r0, #15
    ca2a:	1840      	adds	r0, r0, r1
    ca2c:	6050      	str	r0, [r2, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 25;
    ca2e:	5c58      	ldrb	r0, [r3, r1]
    ca30:	3819      	subs	r0, #25
    ca32:	7310      	strb	r0, [r2, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[21]);
    ca34:	3317      	adds	r3, #23
    ca36:	185b      	adds	r3, r3, r1
    ca38:	6093      	str	r3, [r2, #8]
    ca3a:	e7bb      	b.n	c9b4 <MiMAC_ReceivedPacket+0x260>
					MiMAC_DiscardPacket();
    ca3c:	4b0e      	ldr	r3, [pc, #56]	; (ca78 <MiMAC_ReceivedPacket+0x324>)
    ca3e:	4798      	blx	r3
					if(RxBuffer[BankIndex].Payload[0] & 0x20)
    ca40:	4b08      	ldr	r3, [pc, #32]	; (ca64 <MiMAC_ReceivedPacket+0x310>)
    ca42:	781a      	ldrb	r2, [r3, #0]
    ca44:	0213      	lsls	r3, r2, #8
    ca46:	189a      	adds	r2, r3, r2
    ca48:	4b07      	ldr	r3, [pc, #28]	; (ca68 <MiMAC_ReceivedPacket+0x314>)
    ca4a:	189b      	adds	r3, r3, r2
    ca4c:	789b      	ldrb	r3, [r3, #2]
    ca4e:	069b      	lsls	r3, r3, #26
    ca50:	d400      	bmi.n	ca54 <MiMAC_ReceivedPacket+0x300>
    ca52:	e6ee      	b.n	c832 <MiMAC_ReceivedPacket+0xde>
						MiRadioReceiveParam.action = RECEIVE_START;					
    ca54:	a807      	add	r0, sp, #28
    ca56:	2300      	movs	r3, #0
    ca58:	7003      	strb	r3, [r0, #0]
						MiRadioReceiveParam.rxWindowSize = 0;
    ca5a:	8043      	strh	r3, [r0, #2]
						RADIO_Receive(&MiRadioReceiveParam);
    ca5c:	4b07      	ldr	r3, [pc, #28]	; (ca7c <MiMAC_ReceivedPacket+0x328>)
    ca5e:	4798      	blx	r3
    ca60:	e6e7      	b.n	c832 <MiMAC_ReceivedPacket+0xde>
    ca62:	46c0      	nop			; (mov r8, r8)
    ca64:	2000001c 	.word	0x2000001c
    ca68:	20002890 	.word	0x20002890
    ca6c:	200007b8 	.word	0x200007b8
    ca70:	200007cb 	.word	0x200007cb
    ca74:	2000345c 	.word	0x2000345c
    ca78:	0000c68d 	.word	0x0000c68d
    ca7c:	00009135 	.word	0x00009135
    ca80:	00000404 	.word	0x00000404
    ca84:	ff00ffff 	.word	0xff00ffff
    ca88:	2000331c 	.word	0x2000331c
    ca8c:	20003318 	.word	0x20003318
    ca90:	20002888 	.word	0x20002888
    ca94:	0000da69 	.word	0x0000da69
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    ca98:	0219      	lsls	r1, r3, #8
    ca9a:	18c9      	adds	r1, r1, r3
    ca9c:	4ad4      	ldr	r2, [pc, #848]	; (cdf0 <MiMAC_ReceivedPacket+0x69c>)
    ca9e:	1852      	adds	r2, r2, r1
    caa0:	79d0      	ldrb	r0, [r2, #7]
    caa2:	28ff      	cmp	r0, #255	; 0xff
    caa4:	d01e      	beq.n	cae4 <MiMAC_ReceivedPacket+0x390>
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    caa6:	4ad3      	ldr	r2, [pc, #844]	; (cdf4 <MiMAC_ReceivedPacket+0x6a0>)
    caa8:	7815      	ldrb	r5, [r2, #0]
    caaa:	2180      	movs	r1, #128	; 0x80
    caac:	4249      	negs	r1, r1
    caae:	4329      	orrs	r1, r5
    cab0:	7011      	strb	r1, [r2, #0]
				MACRxPacket.altSourceAddress = true;
    cab2:	2101      	movs	r1, #1
    cab4:	73d1      	strb	r1, [r2, #15]
				if (bIntraPAN == false)
    cab6:	2c00      	cmp	r4, #0
    cab8:	d121      	bne.n	cafe <MiMAC_ReceivedPacket+0x3aa>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    caba:	0011      	movs	r1, r2
    cabc:	48cc      	ldr	r0, [pc, #816]	; (cdf0 <MiMAC_ReceivedPacket+0x69c>)
    cabe:	021c      	lsls	r4, r3, #8
    cac0:	18e4      	adds	r4, r4, r3
    cac2:	1902      	adds	r2, r0, r4
    cac4:	7a55      	ldrb	r5, [r2, #9]
    cac6:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    cac8:	7a92      	ldrb	r2, [r2, #10]
    caca:	744a      	strb	r2, [r1, #17]
    cacc:	0023      	movs	r3, r4
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    cace:	0022      	movs	r2, r4
    cad0:	320b      	adds	r2, #11
    cad2:	1812      	adds	r2, r2, r0
    cad4:	604a      	str	r2, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 15;
    cad6:	5c22      	ldrb	r2, [r4, r0]
    cad8:	3a0f      	subs	r2, #15
    cada:	730a      	strb	r2, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[11]);
    cadc:	330d      	adds	r3, #13
    cade:	181b      	adds	r3, r3, r0
    cae0:	608b      	str	r3, [r1, #8]
    cae2:	e6cd      	b.n	c880 <MiMAC_ReceivedPacket+0x12c>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    cae4:	0219      	lsls	r1, r3, #8
    cae6:	18c9      	adds	r1, r1, r3
    cae8:	4ac1      	ldr	r2, [pc, #772]	; (cdf0 <MiMAC_ReceivedPacket+0x69c>)
    caea:	1852      	adds	r2, r2, r1
    caec:	7a12      	ldrb	r2, [r2, #8]
    caee:	2aff      	cmp	r2, #255	; 0xff
    caf0:	d1d9      	bne.n	caa6 <MiMAC_ReceivedPacket+0x352>
					MACRxPacket.flags.bits.broadcast = 1;
    caf2:	49c0      	ldr	r1, [pc, #768]	; (cdf4 <MiMAC_ReceivedPacket+0x6a0>)
    caf4:	780a      	ldrb	r2, [r1, #0]
    caf6:	2504      	movs	r5, #4
    caf8:	432a      	orrs	r2, r5
    cafa:	700a      	strb	r2, [r1, #0]
    cafc:	e7d3      	b.n	caa6 <MiMAC_ReceivedPacket+0x352>
					if (!(((RxBuffer[BankIndex].Payload[5] == 0xFF) & (RxBuffer[BankIndex].Payload[6] == 0xFF)) ||((RxBuffer[BankIndex].Payload[5] == DevShortAddress[0]) & (RxBuffer[BankIndex].Payload[6] == DevShortAddress[1]))) )
    cafe:	0219      	lsls	r1, r3, #8
    cb00:	18c9      	adds	r1, r1, r3
    cb02:	4abb      	ldr	r2, [pc, #748]	; (cdf0 <MiMAC_ReceivedPacket+0x69c>)
    cb04:	1852      	adds	r2, r2, r1
    cb06:	7a12      	ldrb	r2, [r2, #8]
    cb08:	28ff      	cmp	r0, #255	; 0xff
    cb0a:	d116      	bne.n	cb3a <MiMAC_ReceivedPacket+0x3e6>
    cb0c:	2aff      	cmp	r2, #255	; 0xff
    cb0e:	d114      	bne.n	cb3a <MiMAC_ReceivedPacket+0x3e6>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    cb10:	49b8      	ldr	r1, [pc, #736]	; (cdf4 <MiMAC_ReceivedPacket+0x6a0>)
    cb12:	48b7      	ldr	r0, [pc, #732]	; (cdf0 <MiMAC_ReceivedPacket+0x69c>)
    cb14:	021c      	lsls	r4, r3, #8
    cb16:	18e4      	adds	r4, r4, r3
    cb18:	1902      	adds	r2, r0, r4
    cb1a:	7955      	ldrb	r5, [r2, #5]
    cb1c:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    cb1e:	7992      	ldrb	r2, [r2, #6]
    cb20:	744a      	strb	r2, [r1, #17]
    cb22:	0023      	movs	r3, r4
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    cb24:	0022      	movs	r2, r4
    cb26:	3209      	adds	r2, #9
    cb28:	1812      	adds	r2, r2, r0
    cb2a:	604a      	str	r2, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 13;
    cb2c:	5c22      	ldrb	r2, [r4, r0]
    cb2e:	3a0d      	subs	r2, #13
    cb30:	730a      	strb	r2, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[9]);
    cb32:	330b      	adds	r3, #11
    cb34:	181b      	adds	r3, r3, r0
    cb36:	608b      	str	r3, [r1, #8]
    cb38:	e6a2      	b.n	c880 <MiMAC_ReceivedPacket+0x12c>
					if (!(((RxBuffer[BankIndex].Payload[5] == 0xFF) & (RxBuffer[BankIndex].Payload[6] == 0xFF)) ||((RxBuffer[BankIndex].Payload[5] == DevShortAddress[0]) & (RxBuffer[BankIndex].Payload[6] == DevShortAddress[1]))) )
    cb3a:	49af      	ldr	r1, [pc, #700]	; (cdf8 <MiMAC_ReceivedPacket+0x6a4>)
    cb3c:	7809      	ldrb	r1, [r1, #0]
    cb3e:	4281      	cmp	r1, r0
    cb40:	d103      	bne.n	cb4a <MiMAC_ReceivedPacket+0x3f6>
    cb42:	49ad      	ldr	r1, [pc, #692]	; (cdf8 <MiMAC_ReceivedPacket+0x6a4>)
    cb44:	7849      	ldrb	r1, [r1, #1]
    cb46:	4291      	cmp	r1, r2
    cb48:	d0e2      	beq.n	cb10 <MiMAC_ReceivedPacket+0x3bc>
						MiMAC_DiscardPacket();
    cb4a:	4bac      	ldr	r3, [pc, #688]	; (cdfc <MiMAC_ReceivedPacket+0x6a8>)
    cb4c:	4798      	blx	r3
						if(RxBuffer[BankIndex].Payload[0] & 0x20)
    cb4e:	4bac      	ldr	r3, [pc, #688]	; (ce00 <MiMAC_ReceivedPacket+0x6ac>)
    cb50:	781a      	ldrb	r2, [r3, #0]
    cb52:	0213      	lsls	r3, r2, #8
    cb54:	189a      	adds	r2, r3, r2
    cb56:	4ba6      	ldr	r3, [pc, #664]	; (cdf0 <MiMAC_ReceivedPacket+0x69c>)
    cb58:	189b      	adds	r3, r3, r2
    cb5a:	789b      	ldrb	r3, [r3, #2]
						return false;
    cb5c:	2400      	movs	r4, #0
						if(RxBuffer[BankIndex].Payload[0] & 0x20)
    cb5e:	069b      	lsls	r3, r3, #26
    cb60:	d400      	bmi.n	cb64 <MiMAC_ReceivedPacket+0x410>
    cb62:	e666      	b.n	c832 <MiMAC_ReceivedPacket+0xde>
							MiRadioReceiveParam.action = RECEIVE_START;	
    cb64:	a807      	add	r0, sp, #28
    cb66:	2300      	movs	r3, #0
    cb68:	7003      	strb	r3, [r0, #0]
							MiRadioReceiveParam.rxWindowSize = 0;
    cb6a:	8043      	strh	r3, [r0, #2]
							RADIO_Receive(&MiRadioReceiveParam);
    cb6c:	4ba5      	ldr	r3, [pc, #660]	; (ce04 <MiMAC_ReceivedPacket+0x6b0>)
    cb6e:	4798      	blx	r3
    cb70:	e65f      	b.n	c832 <MiMAC_ReceivedPacket+0xde>
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    cb72:	4aa0      	ldr	r2, [pc, #640]	; (cdf4 <MiMAC_ReceivedPacket+0x6a0>)
    cb74:	7810      	ldrb	r0, [r2, #0]
    cb76:	2180      	movs	r1, #128	; 0x80
    cb78:	4249      	negs	r1, r1
    cb7a:	4301      	orrs	r1, r0
    cb7c:	7011      	strb	r1, [r2, #0]
				MACRxPacket.altSourceAddress = true;
    cb7e:	2101      	movs	r1, #1
    cb80:	73d1      	strb	r1, [r2, #15]
				if (bIntraPAN) // check if it is intraPAN
    cb82:	2c00      	cmp	r4, #0
    cb84:	d114      	bne.n	cbb0 <MiMAC_ReceivedPacket+0x45c>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[12];
    cb86:	499b      	ldr	r1, [pc, #620]	; (cdf4 <MiMAC_ReceivedPacket+0x6a0>)
    cb88:	4899      	ldr	r0, [pc, #612]	; (cdf0 <MiMAC_ReceivedPacket+0x69c>)
    cb8a:	021c      	lsls	r4, r3, #8
    cb8c:	18e4      	adds	r4, r4, r3
    cb8e:	1902      	adds	r2, r0, r4
    cb90:	7b95      	ldrb	r5, [r2, #14]
    cb92:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[13];
    cb94:	7bd2      	ldrb	r2, [r2, #15]
    cb96:	744a      	strb	r2, [r1, #17]
    cb98:	0023      	movs	r3, r4
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[14]);
    cb9a:	0022      	movs	r2, r4
    cb9c:	3210      	adds	r2, #16
    cb9e:	1812      	adds	r2, r2, r0
    cba0:	604a      	str	r2, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    cba2:	5c22      	ldrb	r2, [r4, r0]
    cba4:	3a15      	subs	r2, #21
    cba6:	730a      	strb	r2, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    cba8:	3313      	adds	r3, #19
    cbaa:	181b      	adds	r3, r3, r0
    cbac:	608b      	str	r3, [r1, #8]
    cbae:	e667      	b.n	c880 <MiMAC_ReceivedPacket+0x12c>
					if(!(isSameAddress((uint8_t *)&DevIEEEaddr, &RxBuffer[BankIndex].Payload[5])))
    cbb0:	0219      	lsls	r1, r3, #8
    cbb2:	18c9      	adds	r1, r1, r3
    cbb4:	3107      	adds	r1, #7
    cbb6:	4b8e      	ldr	r3, [pc, #568]	; (cdf0 <MiMAC_ReceivedPacket+0x69c>)
    cbb8:	18c9      	adds	r1, r1, r3
    cbba:	4893      	ldr	r0, [pc, #588]	; (ce08 <MiMAC_ReceivedPacket+0x6b4>)
    cbbc:	4b93      	ldr	r3, [pc, #588]	; (ce0c <MiMAC_ReceivedPacket+0x6b8>)
    cbbe:	4798      	blx	r3
    cbc0:	1e04      	subs	r4, r0, #0
    cbc2:	d011      	beq.n	cbe8 <MiMAC_ReceivedPacket+0x494>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    cbc4:	4b8e      	ldr	r3, [pc, #568]	; (ce00 <MiMAC_ReceivedPacket+0x6ac>)
    cbc6:	7818      	ldrb	r0, [r3, #0]
    cbc8:	4a8a      	ldr	r2, [pc, #552]	; (cdf4 <MiMAC_ReceivedPacket+0x6a0>)
    cbca:	4989      	ldr	r1, [pc, #548]	; (cdf0 <MiMAC_ReceivedPacket+0x69c>)
    cbcc:	0203      	lsls	r3, r0, #8
    cbce:	181b      	adds	r3, r3, r0
    cbd0:	18c8      	adds	r0, r1, r3
    cbd2:	7944      	ldrb	r4, [r0, #5]
    cbd4:	7414      	strb	r4, [r2, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    cbd6:	7980      	ldrb	r0, [r0, #6]
    cbd8:	7450      	strb	r0, [r2, #17]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    cbda:	5c58      	ldrb	r0, [r3, r1]
    cbdc:	3813      	subs	r0, #19
    cbde:	7310      	strb	r0, [r2, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    cbe0:	3311      	adds	r3, #17
    cbe2:	185b      	adds	r3, r3, r1
    cbe4:	6093      	str	r3, [r2, #8]
    cbe6:	e64b      	b.n	c880 <MiMAC_ReceivedPacket+0x12c>
						MiMAC_DiscardPacket();
    cbe8:	4b84      	ldr	r3, [pc, #528]	; (cdfc <MiMAC_ReceivedPacket+0x6a8>)
    cbea:	4798      	blx	r3
						if(RxBuffer[BankIndex].Payload[0] & 0x20)
    cbec:	4b84      	ldr	r3, [pc, #528]	; (ce00 <MiMAC_ReceivedPacket+0x6ac>)
    cbee:	781a      	ldrb	r2, [r3, #0]
    cbf0:	0213      	lsls	r3, r2, #8
    cbf2:	189a      	adds	r2, r3, r2
    cbf4:	4b7e      	ldr	r3, [pc, #504]	; (cdf0 <MiMAC_ReceivedPacket+0x69c>)
    cbf6:	189b      	adds	r3, r3, r2
    cbf8:	789b      	ldrb	r3, [r3, #2]
    cbfa:	069b      	lsls	r3, r3, #26
    cbfc:	d400      	bmi.n	cc00 <MiMAC_ReceivedPacket+0x4ac>
    cbfe:	e618      	b.n	c832 <MiMAC_ReceivedPacket+0xde>
							MiRadioReceiveParam.action = RECEIVE_START;	
    cc00:	a807      	add	r0, sp, #28
    cc02:	2300      	movs	r3, #0
    cc04:	7003      	strb	r3, [r0, #0]
							MiRadioReceiveParam.rxWindowSize = 0;
    cc06:	8043      	strh	r3, [r0, #2]
							RADIO_Receive(&MiRadioReceiveParam);
    cc08:	4b7e      	ldr	r3, [pc, #504]	; (ce04 <MiMAC_ReceivedPacket+0x6b0>)
    cc0a:	4798      	blx	r3
    cc0c:	e611      	b.n	c832 <MiMAC_ReceivedPacket+0xde>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    cc0e:	0219      	lsls	r1, r3, #8
    cc10:	18c9      	adds	r1, r1, r3
    cc12:	4a77      	ldr	r2, [pc, #476]	; (cdf0 <MiMAC_ReceivedPacket+0x69c>)
    cc14:	1852      	adds	r2, r2, r1
    cc16:	79d2      	ldrb	r2, [r2, #7]
    cc18:	2aff      	cmp	r2, #255	; 0xff
    cc1a:	d00c      	beq.n	cc36 <MiMAC_ReceivedPacket+0x4e2>
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 10;
    cc1c:	4975      	ldr	r1, [pc, #468]	; (cdf4 <MiMAC_ReceivedPacket+0x6a0>)
    cc1e:	4874      	ldr	r0, [pc, #464]	; (cdf0 <MiMAC_ReceivedPacket+0x69c>)
    cc20:	021a      	lsls	r2, r3, #8
    cc22:	18d2      	adds	r2, r2, r3
    cc24:	5c12      	ldrb	r2, [r2, r0]
    cc26:	3a0a      	subs	r2, #10
    cc28:	730a      	strb	r2, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    cc2a:	021a      	lsls	r2, r3, #8
    cc2c:	18d3      	adds	r3, r2, r3
    cc2e:	3309      	adds	r3, #9
    cc30:	181b      	adds	r3, r3, r0
    cc32:	608b      	str	r3, [r1, #8]
			break;
    cc34:	e624      	b.n	c880 <MiMAC_ReceivedPacket+0x12c>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    cc36:	0219      	lsls	r1, r3, #8
    cc38:	18c9      	adds	r1, r1, r3
    cc3a:	4a6d      	ldr	r2, [pc, #436]	; (cdf0 <MiMAC_ReceivedPacket+0x69c>)
    cc3c:	1852      	adds	r2, r2, r1
    cc3e:	7a12      	ldrb	r2, [r2, #8]
    cc40:	2aff      	cmp	r2, #255	; 0xff
    cc42:	d1eb      	bne.n	cc1c <MiMAC_ReceivedPacket+0x4c8>
					MACRxPacket.flags.bits.broadcast = 1;
    cc44:	496b      	ldr	r1, [pc, #428]	; (cdf4 <MiMAC_ReceivedPacket+0x6a0>)
    cc46:	780a      	ldrb	r2, [r1, #0]
    cc48:	2004      	movs	r0, #4
    cc4a:	4302      	orrs	r2, r0
    cc4c:	700a      	strb	r2, [r1, #0]
    cc4e:	e7e5      	b.n	cc1c <MiMAC_ReceivedPacket+0x4c8>
				MiMAC_DiscardPacket();
    cc50:	4b6a      	ldr	r3, [pc, #424]	; (cdfc <MiMAC_ReceivedPacket+0x6a8>)
    cc52:	4798      	blx	r3
				if(RxBuffer[BankIndex].Payload[0] & 0x20)
    cc54:	4b6a      	ldr	r3, [pc, #424]	; (ce00 <MiMAC_ReceivedPacket+0x6ac>)
    cc56:	781a      	ldrb	r2, [r3, #0]
    cc58:	0213      	lsls	r3, r2, #8
    cc5a:	189a      	adds	r2, r3, r2
    cc5c:	4b64      	ldr	r3, [pc, #400]	; (cdf0 <MiMAC_ReceivedPacket+0x69c>)
    cc5e:	189b      	adds	r3, r3, r2
    cc60:	789b      	ldrb	r3, [r3, #2]
    cc62:	069b      	lsls	r3, r3, #26
    cc64:	d401      	bmi.n	cc6a <MiMAC_ReceivedPacket+0x516>
				return false;
    cc66:	2400      	movs	r4, #0
    cc68:	e5e3      	b.n	c832 <MiMAC_ReceivedPacket+0xde>
					MiRadioReceiveParam.action = RECEIVE_START;					
    cc6a:	a807      	add	r0, sp, #28
    cc6c:	2300      	movs	r3, #0
    cc6e:	7003      	strb	r3, [r0, #0]
					MiRadioReceiveParam.rxWindowSize = 0;
    cc70:	8043      	strh	r3, [r0, #2]
					RADIO_Receive(&MiRadioReceiveParam);
    cc72:	4b64      	ldr	r3, [pc, #400]	; (ce04 <MiMAC_ReceivedPacket+0x6b0>)
    cc74:	4798      	blx	r3
    cc76:	e7f6      	b.n	cc66 <MiMAC_ReceivedPacket+0x512>
			for (i = 0; i < CONNECTION_SIZE; i++)
    cc78:	3401      	adds	r4, #1
    cc7a:	b2e4      	uxtb	r4, r4
    cc7c:	3501      	adds	r5, #1
    cc7e:	3710      	adds	r7, #16
    cc80:	2c14      	cmp	r4, #20
    cc82:	d012      	beq.n	ccaa <MiMAC_ReceivedPacket+0x556>
				if ((ConnectionTable[i].status.bits.isValid) &&
    cc84:	012b      	lsls	r3, r5, #4
    cc86:	18f3      	adds	r3, r6, r3
    cc88:	7b1b      	ldrb	r3, [r3, #12]
    cc8a:	09db      	lsrs	r3, r3, #7
    cc8c:	d0f4      	beq.n	cc78 <MiMAC_ReceivedPacket+0x524>
				isSameAddress(ConnectionTable[i].Address, MACRxPacket.SourceAddress))
    cc8e:	4643      	mov	r3, r8
    cc90:	6859      	ldr	r1, [r3, #4]
    cc92:	0038      	movs	r0, r7
    cc94:	4b5d      	ldr	r3, [pc, #372]	; (ce0c <MiMAC_ReceivedPacket+0x6b8>)
    cc96:	4798      	blx	r3
				if ((ConnectionTable[i].status.bits.isValid) &&
    cc98:	2800      	cmp	r0, #0
    cc9a:	d0ed      	beq.n	cc78 <MiMAC_ReceivedPacket+0x524>
			if (i < CONNECTION_SIZE)
    cc9c:	2c13      	cmp	r4, #19
    cc9e:	d804      	bhi.n	ccaa <MiMAC_ReceivedPacket+0x556>
				if (IncomingFrameCounter[i].Val >= FrameCounter.Val)	// drop the packet if saved frame counter (IncomingFrameCounter) is equal or greater than the lastest received packet (FrameCounter.Val)
    cca0:	00a3      	lsls	r3, r4, #2
    cca2:	4a5b      	ldr	r2, [pc, #364]	; (ce10 <MiMAC_ReceivedPacket+0x6bc>)
    cca4:	589b      	ldr	r3, [r3, r2]
    cca6:	454b      	cmp	r3, r9
    cca8:	d22e      	bcs.n	cd08 <MiMAC_ReceivedPacket+0x5b4>
			MACRxPacket.PayloadLen -= 5;  // used to 5 for frame counter now -4 also added for MIC integrity
    ccaa:	4952      	ldr	r1, [pc, #328]	; (cdf4 <MiMAC_ReceivedPacket+0x6a0>)
    ccac:	7b0b      	ldrb	r3, [r1, #12]
    ccae:	3b05      	subs	r3, #5
    ccb0:	b2db      	uxtb	r3, r3
    ccb2:	730b      	strb	r3, [r1, #12]
			received_mic_values[0] = MACRxPacket.Payload[MACRxPacket.PayloadLen+1];
    ccb4:	6888      	ldr	r0, [r1, #8]
    ccb6:	18c3      	adds	r3, r0, r3
    ccb8:	785d      	ldrb	r5, [r3, #1]
    ccba:	4a56      	ldr	r2, [pc, #344]	; (ce14 <MiMAC_ReceivedPacket+0x6c0>)
    ccbc:	7015      	strb	r5, [r2, #0]
			received_mic_values[1] = MACRxPacket.Payload[MACRxPacket.PayloadLen+2];
    ccbe:	789d      	ldrb	r5, [r3, #2]
    ccc0:	7055      	strb	r5, [r2, #1]
			received_mic_values[2] = MACRxPacket.Payload[MACRxPacket.PayloadLen+3];
    ccc2:	78dd      	ldrb	r5, [r3, #3]
    ccc4:	7095      	strb	r5, [r2, #2]
			received_mic_values[3] = MACRxPacket.Payload[MACRxPacket.PayloadLen+4];
    ccc6:	791b      	ldrb	r3, [r3, #4]
    ccc8:	70d3      	strb	r3, [r2, #3]
			if (false == DataDecrypt(&(MACRxPacket.Payload[5]), &(MACRxPacket.PayloadLen), MACRxPacket.SourceAddress, FrameCounter, RxBuffer[BankIndex].Payload[0]))
    ccca:	684a      	ldr	r2, [r1, #4]
    cccc:	310c      	adds	r1, #12
    ccce:	3005      	adds	r0, #5
    ccd0:	4b4b      	ldr	r3, [pc, #300]	; (ce00 <MiMAC_ReceivedPacket+0x6ac>)
    ccd2:	781d      	ldrb	r5, [r3, #0]
    ccd4:	022b      	lsls	r3, r5, #8
    ccd6:	195d      	adds	r5, r3, r5
    ccd8:	4b45      	ldr	r3, [pc, #276]	; (cdf0 <MiMAC_ReceivedPacket+0x69c>)
    ccda:	195b      	adds	r3, r3, r5
    ccdc:	789b      	ldrb	r3, [r3, #2]
    ccde:	9300      	str	r3, [sp, #0]
    cce0:	464b      	mov	r3, r9
    cce2:	4d4d      	ldr	r5, [pc, #308]	; (ce18 <MiMAC_ReceivedPacket+0x6c4>)
    cce4:	47a8      	blx	r5
    cce6:	2800      	cmp	r0, #0
    cce8:	d020      	beq.n	cd2c <MiMAC_ReceivedPacket+0x5d8>
			 if (i < CONNECTION_SIZE) 
    ccea:	2c13      	cmp	r4, #19
    ccec:	d803      	bhi.n	ccf6 <MiMAC_ReceivedPacket+0x5a2>
			    IncomingFrameCounter[i].Val = FrameCounter.Val;
    ccee:	00a4      	lsls	r4, r4, #2
    ccf0:	4b47      	ldr	r3, [pc, #284]	; (ce10 <MiMAC_ReceivedPacket+0x6bc>)
    ccf2:	464a      	mov	r2, r9
    ccf4:	50e2      	str	r2, [r4, r3]
			MACRxPacket.Payload = &(MACRxPacket.Payload[5]);
    ccf6:	4b3f      	ldr	r3, [pc, #252]	; (cdf4 <MiMAC_ReceivedPacket+0x6a0>)
    ccf8:	689a      	ldr	r2, [r3, #8]
    ccfa:	3205      	adds	r2, #5
    ccfc:	609a      	str	r2, [r3, #8]
			MACRxPacket.flags.bits.secEn = 1;
    ccfe:	781a      	ldrb	r2, [r3, #0]
    cd00:	2108      	movs	r1, #8
    cd02:	430a      	orrs	r2, r1
    cd04:	701a      	strb	r2, [r3, #0]
    cd06:	e5c5      	b.n	c894 <MiMAC_ReceivedPacket+0x140>
					MiMAC_DiscardPacket();
    cd08:	4b3c      	ldr	r3, [pc, #240]	; (cdfc <MiMAC_ReceivedPacket+0x6a8>)
    cd0a:	4798      	blx	r3
					if(RxBuffer[BankIndex].Payload[0] & 0x20)
    cd0c:	4b3c      	ldr	r3, [pc, #240]	; (ce00 <MiMAC_ReceivedPacket+0x6ac>)
    cd0e:	781a      	ldrb	r2, [r3, #0]
    cd10:	0213      	lsls	r3, r2, #8
    cd12:	189a      	adds	r2, r3, r2
    cd14:	4b36      	ldr	r3, [pc, #216]	; (cdf0 <MiMAC_ReceivedPacket+0x69c>)
    cd16:	189b      	adds	r3, r3, r2
    cd18:	789b      	ldrb	r3, [r3, #2]
    cd1a:	069b      	lsls	r3, r3, #26
    cd1c:	d5a3      	bpl.n	cc66 <MiMAC_ReceivedPacket+0x512>
						MiRadioReceiveParam.action = RECEIVE_START;					
    cd1e:	a807      	add	r0, sp, #28
    cd20:	2300      	movs	r3, #0
    cd22:	7003      	strb	r3, [r0, #0]
						MiRadioReceiveParam.rxWindowSize = 0;
    cd24:	8043      	strh	r3, [r0, #2]
						RADIO_Receive(&MiRadioReceiveParam);
    cd26:	4b37      	ldr	r3, [pc, #220]	; (ce04 <MiMAC_ReceivedPacket+0x6b0>)
    cd28:	4798      	blx	r3
    cd2a:	e79c      	b.n	cc66 <MiMAC_ReceivedPacket+0x512>
				MiMAC_DiscardPacket();
    cd2c:	4b33      	ldr	r3, [pc, #204]	; (cdfc <MiMAC_ReceivedPacket+0x6a8>)
    cd2e:	4798      	blx	r3
				if(RxBuffer[BankIndex].Payload[0] & 0x20)
    cd30:	4b33      	ldr	r3, [pc, #204]	; (ce00 <MiMAC_ReceivedPacket+0x6ac>)
    cd32:	781a      	ldrb	r2, [r3, #0]
    cd34:	0213      	lsls	r3, r2, #8
    cd36:	189a      	adds	r2, r3, r2
    cd38:	4b2d      	ldr	r3, [pc, #180]	; (cdf0 <MiMAC_ReceivedPacket+0x69c>)
    cd3a:	189b      	adds	r3, r3, r2
    cd3c:	789b      	ldrb	r3, [r3, #2]
    cd3e:	069b      	lsls	r3, r3, #26
    cd40:	d591      	bpl.n	cc66 <MiMAC_ReceivedPacket+0x512>
					MiRadioReceiveParam.action = RECEIVE_START;					
    cd42:	a807      	add	r0, sp, #28
    cd44:	2300      	movs	r3, #0
    cd46:	7003      	strb	r3, [r0, #0]
					MiRadioReceiveParam.rxWindowSize = 0;
    cd48:	8043      	strh	r3, [r0, #2]
					RADIO_Receive(&MiRadioReceiveParam);
    cd4a:	4b2e      	ldr	r3, [pc, #184]	; (ce04 <MiMAC_ReceivedPacket+0x6b0>)
    cd4c:	4798      	blx	r3
    cd4e:	e78a      	b.n	cc66 <MiMAC_ReceivedPacket+0x512>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_DATA;
    cd50:	4a28      	ldr	r2, [pc, #160]	; (cdf4 <MiMAC_ReceivedPacket+0x6a0>)
    cd52:	7813      	ldrb	r3, [r2, #0]
    cd54:	2403      	movs	r4, #3
    cd56:	43a3      	bics	r3, r4
    cd58:	7013      	strb	r3, [r2, #0]
		MACRxPacket.LQIValue = RxBuffer[BankIndex].Payload[RxBuffer[BankIndex].PayloadLen - 2];
    cd5a:	4c26      	ldr	r4, [pc, #152]	; (cdf4 <MiMAC_ReceivedPacket+0x6a0>)
    cd5c:	4b24      	ldr	r3, [pc, #144]	; (cdf0 <MiMAC_ReceivedPacket+0x69c>)
    cd5e:	0202      	lsls	r2, r0, #8
    cd60:	1812      	adds	r2, r2, r0
    cd62:	5cd5      	ldrb	r5, [r2, r3]
    cd64:	189b      	adds	r3, r3, r2
    cd66:	5d5a      	ldrb	r2, [r3, r5]
    cd68:	73a2      	strb	r2, [r4, #14]
		MACRxPacket.RSSIValue = RxBuffer[BankIndex].radioRSSI;				
    cd6a:	785b      	ldrb	r3, [r3, #1]
    cd6c:	7363      	strb	r3, [r4, #13]
		return true;
    cd6e:	2401      	movs	r4, #1
		if((RxBuffer[BankIndex].Payload[0] & 0x20))
    cd70:	068b      	lsls	r3, r1, #26
    cd72:	d400      	bmi.n	cd76 <MiMAC_ReceivedPacket+0x622>
    cd74:	e55d      	b.n	c832 <MiMAC_ReceivedPacket+0xde>
			    tParamAck.flags.Val = 0;
    cd76:	aa04      	add	r2, sp, #16
    cd78:	2400      	movs	r4, #0
			    tParamAck.altSrcAddr = 0;
    cd7a:	7254      	strb	r4, [r2, #9]
			    tParamAck.altDestAddr = false;
    cd7c:	7214      	strb	r4, [r2, #8]
 			    tParamAck.flags.bits.sourcePrsnt = 1;
    cd7e:	233e      	movs	r3, #62	; 0x3e
    cd80:	425b      	negs	r3, r3
    cd82:	7013      	strb	r3, [r2, #0]
			    tParamAck.DestAddress = MACRxPacket.SourceAddress;
    cd84:	4b1b      	ldr	r3, [pc, #108]	; (cdf4 <MiMAC_ReceivedPacket+0x6a0>)
    cd86:	6859      	ldr	r1, [r3, #4]
    cd88:	9105      	str	r1, [sp, #20]
			    tParamAck.DestPANID.Val = MACRxPacket.SourcePANID.Val;
    cd8a:	8a1b      	ldrh	r3, [r3, #16]
    cd8c:	8153      	strh	r3, [r2, #10]
			AckBuffer[0] = RxBuffer[BankIndex].Payload[2];	
    cd8e:	4b23      	ldr	r3, [pc, #140]	; (ce1c <MiMAC_ReceivedPacket+0x6c8>)
    cd90:	0205      	lsls	r5, r0, #8
    cd92:	182d      	adds	r5, r5, r0
    cd94:	4816      	ldr	r0, [pc, #88]	; (cdf0 <MiMAC_ReceivedPacket+0x69c>)
    cd96:	1940      	adds	r0, r0, r5
    cd98:	7900      	ldrb	r0, [r0, #4]
    cd9a:	7018      	strb	r0, [r3, #0]
			MiMAC_SendPacket(tParamAck, AckBuffer, 1, 0, NULL);
    cd9c:	9402      	str	r4, [sp, #8]
    cd9e:	9401      	str	r4, [sp, #4]
    cda0:	2001      	movs	r0, #1
    cda2:	9000      	str	r0, [sp, #0]
    cda4:	9804      	ldr	r0, [sp, #16]
    cda6:	9a06      	ldr	r2, [sp, #24]
    cda8:	4c1d      	ldr	r4, [pc, #116]	; (ce20 <MiMAC_ReceivedPacket+0x6cc>)
    cdaa:	47a0      	blx	r4
		return true;
    cdac:	2401      	movs	r4, #1
    cdae:	e540      	b.n	c832 <MiMAC_ReceivedPacket+0xde>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_COMMAND;
    cdb0:	4a10      	ldr	r2, [pc, #64]	; (cdf4 <MiMAC_ReceivedPacket+0x6a0>)
    cdb2:	7813      	ldrb	r3, [r2, #0]
    cdb4:	2403      	movs	r4, #3
    cdb6:	43a3      	bics	r3, r4
    cdb8:	2401      	movs	r4, #1
    cdba:	4323      	orrs	r3, r4
    cdbc:	7013      	strb	r3, [r2, #0]
			break;
    cdbe:	e7cc      	b.n	cd5a <MiMAC_ReceivedPacket+0x606>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_RESERVE;
    cdc0:	4a0c      	ldr	r2, [pc, #48]	; (cdf4 <MiMAC_ReceivedPacket+0x6a0>)
    cdc2:	7813      	ldrb	r3, [r2, #0]
    cdc4:	2403      	movs	r4, #3
    cdc6:	4323      	orrs	r3, r4
    cdc8:	7013      	strb	r3, [r2, #0]
			break;
    cdca:	e7c6      	b.n	cd5a <MiMAC_ReceivedPacket+0x606>
				MACRxPacket.flags.bits.packetType = PACKET_TYPE_ACK;
    cdcc:	4a09      	ldr	r2, [pc, #36]	; (cdf4 <MiMAC_ReceivedPacket+0x6a0>)
    cdce:	7813      	ldrb	r3, [r2, #0]
    cdd0:	2103      	movs	r1, #3
    cdd2:	438b      	bics	r3, r1
    cdd4:	2102      	movs	r1, #2
    cdd6:	430b      	orrs	r3, r1
    cdd8:	7013      	strb	r3, [r2, #0]
				if((AckSeqNum == *(MACRxPacket.Payload))&& (AckReqData))
    cdda:	6893      	ldr	r3, [r2, #8]
    cddc:	781a      	ldrb	r2, [r3, #0]
    cdde:	4b11      	ldr	r3, [pc, #68]	; (ce24 <MiMAC_ReceivedPacket+0x6d0>)
    cde0:	781b      	ldrb	r3, [r3, #0]
    cde2:	429a      	cmp	r2, r3
    cde4:	d020      	beq.n	ce28 <MiMAC_ReceivedPacket+0x6d4>
				MiMAC_DiscardPacket();
    cde6:	4b05      	ldr	r3, [pc, #20]	; (cdfc <MiMAC_ReceivedPacket+0x6a8>)
    cde8:	4798      	blx	r3
				return false;
    cdea:	2400      	movs	r4, #0
    cdec:	e521      	b.n	c832 <MiMAC_ReceivedPacket+0xde>
    cdee:	46c0      	nop			; (mov r8, r8)
    cdf0:	20002890 	.word	0x20002890
    cdf4:	2000345c 	.word	0x2000345c
    cdf8:	20002c98 	.word	0x20002c98
    cdfc:	0000c68d 	.word	0x0000c68d
    ce00:	2000001c 	.word	0x2000001c
    ce04:	00009135 	.word	0x00009135
    ce08:	20002888 	.word	0x20002888
    ce0c:	0000da69 	.word	0x0000da69
    ce10:	20003484 	.word	0x20003484
    ce14:	20002774 	.word	0x20002774
    ce18:	0000c121 	.word	0x0000c121
    ce1c:	20002778 	.word	0x20002778
    ce20:	0000c2fd 	.word	0x0000c2fd
    ce24:	2000260c 	.word	0x2000260c
				if((AckSeqNum == *(MACRxPacket.Payload))&& (AckReqData))
    ce28:	4b1c      	ldr	r3, [pc, #112]	; (ce9c <MiMAC_ReceivedPacket+0x748>)
    ce2a:	781b      	ldrb	r3, [r3, #0]
    ce2c:	2b00      	cmp	r3, #0
    ce2e:	d0da      	beq.n	cde6 <MiMAC_ReceivedPacket+0x692>
					DataTxAckTimer.Val = 0;
    ce30:	2400      	movs	r4, #0
    ce32:	4b1b      	ldr	r3, [pc, #108]	; (cea0 <MiMAC_ReceivedPacket+0x74c>)
    ce34:	601c      	str	r4, [r3, #0]
					PHY_DataConf(SUCCESS); 
    ce36:	2000      	movs	r0, #0
    ce38:	4b1a      	ldr	r3, [pc, #104]	; (cea4 <MiMAC_ReceivedPacket+0x750>)
    ce3a:	4798      	blx	r3
					AckReqData = 0;
    ce3c:	4b17      	ldr	r3, [pc, #92]	; (ce9c <MiMAC_ReceivedPacket+0x748>)
    ce3e:	701c      	strb	r4, [r3, #0]
					if((FW_Stat)){
    ce40:	4b19      	ldr	r3, [pc, #100]	; (cea8 <MiMAC_ReceivedPacket+0x754>)
    ce42:	781b      	ldrb	r3, [r3, #0]
    ce44:	2b00      	cmp	r3, #0
    ce46:	d0ce      	beq.n	cde6 <MiMAC_ReceivedPacket+0x692>
					 MiMAC_Task();
    ce48:	4b18      	ldr	r3, [pc, #96]	; (ceac <MiMAC_ReceivedPacket+0x758>)
    ce4a:	4798      	blx	r3
    ce4c:	e7cb      	b.n	cde6 <MiMAC_ReceivedPacket+0x692>
	return false;
    ce4e:	2400      	movs	r4, #0
    ce50:	e4ef      	b.n	c832 <MiMAC_ReceivedPacket+0xde>
				if (!(((RxBuffer[BankIndex].Payload[5] == 0xFF) & (RxBuffer[BankIndex].Payload[6] == 0xFF)) ||((RxBuffer[BankIndex].Payload[5] == DevShortAddress[0]) & (RxBuffer[BankIndex].Payload[6] == DevShortAddress[1]))) )
    ce52:	0219      	lsls	r1, r3, #8
    ce54:	18c9      	adds	r1, r1, r3
    ce56:	4a16      	ldr	r2, [pc, #88]	; (ceb0 <MiMAC_ReceivedPacket+0x75c>)
    ce58:	1852      	adds	r2, r2, r1
    ce5a:	7a11      	ldrb	r1, [r2, #8]
    ce5c:	4a15      	ldr	r2, [pc, #84]	; (ceb4 <MiMAC_ReceivedPacket+0x760>)
    ce5e:	7852      	ldrb	r2, [r2, #1]
    ce60:	4291      	cmp	r1, r2
    ce62:	d000      	beq.n	ce66 <MiMAC_ReceivedPacket+0x712>
    ce64:	e576      	b.n	c954 <MiMAC_ReceivedPacket+0x200>
    ce66:	4a13      	ldr	r2, [pc, #76]	; (ceb4 <MiMAC_ReceivedPacket+0x760>)
    ce68:	7812      	ldrb	r2, [r2, #0]
    ce6a:	4282      	cmp	r2, r0
    ce6c:	d000      	beq.n	ce70 <MiMAC_ReceivedPacket+0x71c>
    ce6e:	e571      	b.n	c954 <MiMAC_ReceivedPacket+0x200>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    ce70:	4911      	ldr	r1, [pc, #68]	; (ceb8 <MiMAC_ReceivedPacket+0x764>)
    ce72:	480f      	ldr	r0, [pc, #60]	; (ceb0 <MiMAC_ReceivedPacket+0x75c>)
    ce74:	021c      	lsls	r4, r3, #8
    ce76:	18e4      	adds	r4, r4, r3
    ce78:	1902      	adds	r2, r0, r4
    ce7a:	7955      	ldrb	r5, [r2, #5]
    ce7c:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    ce7e:	7992      	ldrb	r2, [r2, #6]
    ce80:	744a      	strb	r2, [r1, #17]
    ce82:	0023      	movs	r3, r4
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    ce84:	0022      	movs	r2, r4
    ce86:	3209      	adds	r2, #9
    ce88:	1812      	adds	r2, r2, r0
    ce8a:	604a      	str	r2, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    ce8c:	5c22      	ldrb	r2, [r4, r0]
    ce8e:	3a13      	subs	r2, #19
    ce90:	730a      	strb	r2, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    ce92:	3311      	adds	r3, #17
    ce94:	181b      	adds	r3, r3, r0
    ce96:	608b      	str	r3, [r1, #8]
    ce98:	e58c      	b.n	c9b4 <MiMAC_ReceivedPacket+0x260>
    ce9a:	46c0      	nop			; (mov r8, r8)
    ce9c:	200007b8 	.word	0x200007b8
    cea0:	2000378c 	.word	0x2000378c
    cea4:	0000c6a9 	.word	0x0000c6a9
    cea8:	200007cb 	.word	0x200007cb
    ceac:	0000c70d 	.word	0x0000c70d
    ceb0:	20002890 	.word	0x20002890
    ceb4:	20002c98 	.word	0x20002c98
    ceb8:	2000345c 	.word	0x2000345c

0000cebc <checkRxDataBuffer>:
bool checkRxDataBuffer(void)
{
	uint8_t rxBank = 0xFF;
	for (uint8_t i = 0; i < BANK_SIZE; i++)
	{
		if (RxBuffer[i].PayloadLen > 0)
    cebc:	4b10      	ldr	r3, [pc, #64]	; (cf00 <checkRxDataBuffer+0x44>)
    cebe:	781b      	ldrb	r3, [r3, #0]
    cec0:	2b00      	cmp	r3, #0
    cec2:	d11a      	bne.n	cefa <checkRxDataBuffer+0x3e>
    cec4:	2302      	movs	r3, #2
    cec6:	33ff      	adds	r3, #255	; 0xff
    cec8:	4a0d      	ldr	r2, [pc, #52]	; (cf00 <checkRxDataBuffer+0x44>)
    ceca:	5cd3      	ldrb	r3, [r2, r3]
    cecc:	2b00      	cmp	r3, #0
    cece:	d110      	bne.n	cef2 <checkRxDataBuffer+0x36>
    ced0:	4b0c      	ldr	r3, [pc, #48]	; (cf04 <checkRxDataBuffer+0x48>)
    ced2:	5cd3      	ldrb	r3, [r2, r3]
    ced4:	2b00      	cmp	r3, #0
    ced6:	d10e      	bne.n	cef6 <checkRxDataBuffer+0x3a>
    ced8:	4b0b      	ldr	r3, [pc, #44]	; (cf08 <checkRxDataBuffer+0x4c>)
    ceda:	5cd3      	ldrb	r3, [r2, r3]
	uint8_t rxBank = 0xFF;
    cedc:	22ff      	movs	r2, #255	; 0xff
		if (RxBuffer[i].PayloadLen > 0)
    cede:	2b00      	cmp	r3, #0
    cee0:	d105      	bne.n	ceee <checkRxDataBuffer+0x32>
			rxBank = i;
			break;
		}
	}
	
	if(rxBank < BANK_SIZE)
    cee2:	2000      	movs	r0, #0
    cee4:	2303      	movs	r3, #3
    cee6:	4293      	cmp	r3, r2
    cee8:	4140      	adcs	r0, r0
    ceea:	b2c0      	uxtb	r0, r0
	{
		return true;
	}
	
	return false;
}
    ceec:	4770      	bx	lr
	for (uint8_t i = 0; i < BANK_SIZE; i++)
    ceee:	3afc      	subs	r2, #252	; 0xfc
    cef0:	e7f7      	b.n	cee2 <checkRxDataBuffer+0x26>
    cef2:	2201      	movs	r2, #1
    cef4:	e7f5      	b.n	cee2 <checkRxDataBuffer+0x26>
    cef6:	2202      	movs	r2, #2
    cef8:	e7f3      	b.n	cee2 <checkRxDataBuffer+0x26>
    cefa:	2200      	movs	r2, #0
    cefc:	e7f1      	b.n	cee2 <checkRxDataBuffer+0x26>
    cefe:	46c0      	nop			; (mov r8, r8)
    cf00:	20002890 	.word	0x20002890
    cf04:	00000202 	.word	0x00000202
    cf08:	00000303 	.word	0x00000303

0000cf0c <phySetChannel>:
}

/*************************************************************************//**
*****************************************************************************/
static void phySetChannel(void)
{
    cf0c:	b500      	push	{lr}
    cf0e:	b083      	sub	sp, #12
	uint32_t frequncy_set;
	if(phyChannel) // Based on channel we need to set frequency 
    cf10:	4b2f      	ldr	r3, [pc, #188]	; (cfd0 <phySetChannel+0xc4>)
    cf12:	781b      	ldrb	r3, [r3, #0]
    cf14:	2b00      	cmp	r3, #0
    cf16:	d007      	beq.n	cf28 <phySetChannel+0x1c>
	{
		switch(phyChannel)
    cf18:	2b19      	cmp	r3, #25
    cf1a:	d856      	bhi.n	cfca <phySetChannel+0xbe>
    cf1c:	009b      	lsls	r3, r3, #2
    cf1e:	4a2d      	ldr	r2, [pc, #180]	; (cfd4 <phySetChannel+0xc8>)
    cf20:	58d3      	ldr	r3, [r2, r3]
    cf22:	469f      	mov	pc, r3
				//break;
			//case 8:
				//frequncy_set = FREQ_786000KHZ;
				//break;
			case 0:
				frequncy_set = FREQ_862000KHZ;
    cf24:	4b2c      	ldr	r3, [pc, #176]	; (cfd8 <phySetChannel+0xcc>)
    cf26:	9301      	str	r3, [sp, #4]
				break;				
																									
		}
	}
		
	if(RADIO_SetAttr(CHANNEL_FREQUENCY,(void *)&frequncy_set) == 0)  
    cf28:	a901      	add	r1, sp, #4
    cf2a:	2001      	movs	r0, #1
    cf2c:	4b2b      	ldr	r3, [pc, #172]	; (cfdc <phySetChannel+0xd0>)
    cf2e:	4798      	blx	r3
	{
	}
}
    cf30:	b003      	add	sp, #12
    cf32:	bd00      	pop	{pc}
				frequncy_set = FREQ_863000KHZ;
    cf34:	4b2a      	ldr	r3, [pc, #168]	; (cfe0 <phySetChannel+0xd4>)
    cf36:	9301      	str	r3, [sp, #4]
				break;
    cf38:	e7f6      	b.n	cf28 <phySetChannel+0x1c>
				frequncy_set = FREQ_865000KHZ;
    cf3a:	4b2a      	ldr	r3, [pc, #168]	; (cfe4 <phySetChannel+0xd8>)
    cf3c:	9301      	str	r3, [sp, #4]
				break;
    cf3e:	e7f3      	b.n	cf28 <phySetChannel+0x1c>
				frequncy_set = FREQ_866550KHZ;
    cf40:	4b29      	ldr	r3, [pc, #164]	; (cfe8 <phySetChannel+0xdc>)
    cf42:	9301      	str	r3, [sp, #4]
				break;
    cf44:	e7f0      	b.n	cf28 <phySetChannel+0x1c>
				frequncy_set = FREQ_867000KHZ;
    cf46:	4b29      	ldr	r3, [pc, #164]	; (cfec <phySetChannel+0xe0>)
    cf48:	9301      	str	r3, [sp, #4]
				break;			
    cf4a:	e7ed      	b.n	cf28 <phySetChannel+0x1c>
				frequncy_set = FREQ_868100KHZ;
    cf4c:	4b28      	ldr	r3, [pc, #160]	; (cff0 <phySetChannel+0xe4>)
    cf4e:	9301      	str	r3, [sp, #4]
				break;
    cf50:	e7ea      	b.n	cf28 <phySetChannel+0x1c>
				frequncy_set = FREQ_869525KHZ;
    cf52:	4b28      	ldr	r3, [pc, #160]	; (cff4 <phySetChannel+0xe8>)
    cf54:	9301      	str	r3, [sp, #4]
				break;			
    cf56:	e7e7      	b.n	cf28 <phySetChannel+0x1c>
				frequncy_set = FREQ_870000KHZ;
    cf58:	4b27      	ldr	r3, [pc, #156]	; (cff8 <phySetChannel+0xec>)
    cf5a:	9301      	str	r3, [sp, #4]
				break;
    cf5c:	e7e4      	b.n	cf28 <phySetChannel+0x1c>
				frequncy_set = FREQ_902300KHZ;
    cf5e:	4b27      	ldr	r3, [pc, #156]	; (cffc <phySetChannel+0xf0>)
    cf60:	9301      	str	r3, [sp, #4]
				break;
    cf62:	e7e1      	b.n	cf28 <phySetChannel+0x1c>
				frequncy_set = FREQ_903000KHZ;
    cf64:	4b26      	ldr	r3, [pc, #152]	; (d000 <phySetChannel+0xf4>)
    cf66:	9301      	str	r3, [sp, #4]
				break;
    cf68:	e7de      	b.n	cf28 <phySetChannel+0x1c>
				frequncy_set = FREQ_915000KHZ;
    cf6a:	4b26      	ldr	r3, [pc, #152]	; (d004 <phySetChannel+0xf8>)
    cf6c:	9301      	str	r3, [sp, #4]
				break;
    cf6e:	e7db      	b.n	cf28 <phySetChannel+0x1c>
				frequncy_set = FREQ_915200KHZ;
    cf70:	4b25      	ldr	r3, [pc, #148]	; (d008 <phySetChannel+0xfc>)
    cf72:	9301      	str	r3, [sp, #4]
				break;
    cf74:	e7d8      	b.n	cf28 <phySetChannel+0x1c>
				frequncy_set = FREQ_915900KHZ;
    cf76:	4b25      	ldr	r3, [pc, #148]	; (d00c <phySetChannel+0x100>)
    cf78:	9301      	str	r3, [sp, #4]
				break;
    cf7a:	e7d5      	b.n	cf28 <phySetChannel+0x1c>
				frequncy_set = FREQ_920000KHZ;
    cf7c:	4b24      	ldr	r3, [pc, #144]	; (d010 <phySetChannel+0x104>)
    cf7e:	9301      	str	r3, [sp, #4]
				break;
    cf80:	e7d2      	b.n	cf28 <phySetChannel+0x1c>
				frequncy_set = FREQ_920900KHZ;
    cf82:	4b24      	ldr	r3, [pc, #144]	; (d014 <phySetChannel+0x108>)
    cf84:	9301      	str	r3, [sp, #4]
				break;
    cf86:	e7cf      	b.n	cf28 <phySetChannel+0x1c>
				frequncy_set = FREQ_921900KHZ;
    cf88:	4b23      	ldr	r3, [pc, #140]	; (d018 <phySetChannel+0x10c>)
    cf8a:	9301      	str	r3, [sp, #4]
				break;
    cf8c:	e7cc      	b.n	cf28 <phySetChannel+0x1c>
				frequncy_set = FREQ_922000KHZ;
    cf8e:	4b23      	ldr	r3, [pc, #140]	; (d01c <phySetChannel+0x110>)
    cf90:	9301      	str	r3, [sp, #4]
				break;
    cf92:	e7c9      	b.n	cf28 <phySetChannel+0x1c>
				frequncy_set = FREQ_922100KHZ;
    cf94:	4b22      	ldr	r3, [pc, #136]	; (d020 <phySetChannel+0x114>)
    cf96:	9301      	str	r3, [sp, #4]
				break;
    cf98:	e7c6      	b.n	cf28 <phySetChannel+0x1c>
				frequncy_set = FREQ_923000KHZ;
    cf9a:	4b22      	ldr	r3, [pc, #136]	; (d024 <phySetChannel+0x118>)
    cf9c:	9301      	str	r3, [sp, #4]
				break;
    cf9e:	e7c3      	b.n	cf28 <phySetChannel+0x1c>
				frequncy_set = FREQ_923200KHZ;
    cfa0:	4b21      	ldr	r3, [pc, #132]	; (d028 <phySetChannel+0x11c>)
    cfa2:	9301      	str	r3, [sp, #4]
				break;
    cfa4:	e7c0      	b.n	cf28 <phySetChannel+0x1c>
				frequncy_set = FREQ_923300KHZ;
    cfa6:	4b21      	ldr	r3, [pc, #132]	; (d02c <phySetChannel+0x120>)
    cfa8:	9301      	str	r3, [sp, #4]
				break;
    cfaa:	e7bd      	b.n	cf28 <phySetChannel+0x1c>
				frequncy_set = FREQ_925000KHZ;
    cfac:	4b20      	ldr	r3, [pc, #128]	; (d030 <phySetChannel+0x124>)
    cfae:	9301      	str	r3, [sp, #4]
				break;		
    cfb0:	e7ba      	b.n	cf28 <phySetChannel+0x1c>
				frequncy_set = FREQ_927500KHZ;
    cfb2:	4b20      	ldr	r3, [pc, #128]	; (d034 <phySetChannel+0x128>)
    cfb4:	9301      	str	r3, [sp, #4]
				break;
    cfb6:	e7b7      	b.n	cf28 <phySetChannel+0x1c>
				frequncy_set = FREQ_928000KHZ;
    cfb8:	4b1f      	ldr	r3, [pc, #124]	; (d038 <phySetChannel+0x12c>)
    cfba:	9301      	str	r3, [sp, #4]
				break;
    cfbc:	e7b4      	b.n	cf28 <phySetChannel+0x1c>
				frequncy_set = FREQ_928500KHZ;
    cfbe:	4b1f      	ldr	r3, [pc, #124]	; (d03c <phySetChannel+0x130>)
    cfc0:	9301      	str	r3, [sp, #4]
				break;
    cfc2:	e7b1      	b.n	cf28 <phySetChannel+0x1c>
				frequncy_set = FREQ_1020000KHZ;
    cfc4:	4b1e      	ldr	r3, [pc, #120]	; (d040 <phySetChannel+0x134>)
    cfc6:	9301      	str	r3, [sp, #4]
				break;
    cfc8:	e7ae      	b.n	cf28 <phySetChannel+0x1c>
				frequncy_set = FREQ_868100KHZ;
    cfca:	4b09      	ldr	r3, [pc, #36]	; (cff0 <phySetChannel+0xe4>)
    cfcc:	9301      	str	r3, [sp, #4]
				break;				
    cfce:	e7ab      	b.n	cf28 <phySetChannel+0x1c>
    cfd0:	200007c8 	.word	0x200007c8
    cfd4:	0001abbc 	.word	0x0001abbc
    cfd8:	33611380 	.word	0x33611380
    cfdc:	00007bb1 	.word	0x00007bb1
    cfe0:	337055c0 	.word	0x337055c0
    cfe4:	338eda40 	.word	0x338eda40
    cfe8:	33a680f0 	.word	0x33a680f0
    cfec:	33ad5ec0 	.word	0x33ad5ec0
    cff0:	33be27a0 	.word	0x33be27a0
    cff4:	33d3e608 	.word	0x33d3e608
    cff8:	33db2580 	.word	0x33db2580
    cffc:	35c80160 	.word	0x35c80160
    d000:	35d2afc0 	.word	0x35d2afc0
    d004:	3689cac0 	.word	0x3689cac0
    d008:	368cd800 	.word	0x368cd800
    d00c:	36978660 	.word	0x36978660
    d010:	36d61600 	.word	0x36d61600
    d014:	36e3d1a0 	.word	0x36e3d1a0
    d018:	36f313e0 	.word	0x36f313e0
    d01c:	36f49a80 	.word	0x36f49a80
    d020:	36f62120 	.word	0x36f62120
    d024:	3703dcc0 	.word	0x3703dcc0
    d028:	3706ea00 	.word	0x3706ea00
    d02c:	370870a0 	.word	0x370870a0
    d030:	37226140 	.word	0x37226140
    d034:	374886e0 	.word	0x374886e0
    d038:	37502800 	.word	0x37502800
    d03c:	3757c920 	.word	0x3757c920
    d040:	3ccbf700 	.word	0x3ccbf700

0000d044 <radioCallback>:
{
    d044:	b570      	push	{r4, r5, r6, lr}
    d046:	b082      	sub	sp, #8
    d048:	0004      	movs	r4, r0
    d04a:	000d      	movs	r5, r1
	callbackBackup = callback;
    d04c:	4b3e      	ldr	r3, [pc, #248]	; (d148 <radioCallback+0x104>)
    d04e:	7018      	strb	r0, [r3, #0]
	int16_t rssi_readVal=0;
    d050:	466b      	mov	r3, sp
    d052:	1c98      	adds	r0, r3, #2
    d054:	2300      	movs	r3, #0
    d056:	8003      	strh	r3, [r0, #0]
	Radio_ReadRssi(&rssi_readVal);
    d058:	4b3c      	ldr	r3, [pc, #240]	; (d14c <radioCallback+0x108>)
    d05a:	4798      	blx	r3
	switch (callback)
    d05c:	2c10      	cmp	r4, #16
    d05e:	d853      	bhi.n	d108 <radioCallback+0xc4>
    d060:	00a4      	lsls	r4, r4, #2
    d062:	4b3b      	ldr	r3, [pc, #236]	; (d150 <radioCallback+0x10c>)
    d064:	591b      	ldr	r3, [r3, r4]
    d066:	469f      	mov	pc, r3
					if (RxBuffer[i].PayloadLen == 0)
    d068:	4b3a      	ldr	r3, [pc, #232]	; (d154 <radioCallback+0x110>)
    d06a:	781a      	ldrb	r2, [r3, #0]
    d06c:	2a00      	cmp	r2, #0
    d06e:	d00e      	beq.n	d08e <radioCallback+0x4a>
    d070:	2302      	movs	r3, #2
    d072:	33ff      	adds	r3, #255	; 0xff
    d074:	4a37      	ldr	r2, [pc, #220]	; (d154 <radioCallback+0x110>)
    d076:	5cd3      	ldrb	r3, [r2, r3]
    d078:	2b00      	cmp	r3, #0
    d07a:	d04e      	beq.n	d11a <radioCallback+0xd6>
    d07c:	4b36      	ldr	r3, [pc, #216]	; (d158 <radioCallback+0x114>)
    d07e:	5cd3      	ldrb	r3, [r2, r3]
    d080:	2b00      	cmp	r3, #0
    d082:	d04c      	beq.n	d11e <radioCallback+0xda>
    d084:	4b35      	ldr	r3, [pc, #212]	; (d15c <radioCallback+0x118>)
    d086:	5cd3      	ldrb	r3, [r2, r3]
	uint8_t i,RxBank=0xFF;
    d088:	22ff      	movs	r2, #255	; 0xff
					if (RxBuffer[i].PayloadLen == 0)
    d08a:	2b00      	cmp	r3, #0
    d08c:	d043      	beq.n	d116 <radioCallback+0xd2>
				RxBuffer[RxBank].PayloadLen = callbackRx->RX.bufferLength;
    d08e:	0016      	movs	r6, r2
    d090:	7a2c      	ldrb	r4, [r5, #8]
    d092:	0213      	lsls	r3, r2, #8
    d094:	189a      	adds	r2, r3, r2
    d096:	4b2f      	ldr	r3, [pc, #188]	; (d154 <radioCallback+0x110>)
    d098:	54d4      	strb	r4, [r2, r3]
				if (RxBuffer[RxBank].PayloadLen < (RX_PACKET_SIZE - 4))			
    d09a:	2cfa      	cmp	r4, #250	; 0xfa
    d09c:	d80d      	bhi.n	d0ba <radioCallback+0x76>
    d09e:	2300      	movs	r3, #0
						RxBuffer[RxBank].Payload[i] = callbackRx->RX.buffer[i];
    d0a0:	0232      	lsls	r2, r6, #8
    d0a2:	1992      	adds	r2, r2, r6
    d0a4:	482b      	ldr	r0, [pc, #172]	; (d154 <radioCallback+0x110>)
    d0a6:	1880      	adds	r0, r0, r2
    d0a8:	686a      	ldr	r2, [r5, #4]
    d0aa:	5cd1      	ldrb	r1, [r2, r3]
    d0ac:	18c2      	adds	r2, r0, r3
    d0ae:	7091      	strb	r1, [r2, #2]
					for (i = 0; i <= callbackRx->RX.bufferLength; i++)
    d0b0:	3301      	adds	r3, #1
    d0b2:	b2db      	uxtb	r3, r3
    d0b4:	7a2a      	ldrb	r2, [r5, #8]
    d0b6:	429a      	cmp	r2, r3
    d0b8:	d2f6      	bcs.n	d0a8 <radioCallback+0x64>
				RxBuffer[RxBank].PayloadLen +=4;
    d0ba:	4b26      	ldr	r3, [pc, #152]	; (d154 <radioCallback+0x110>)
    d0bc:	0232      	lsls	r2, r6, #8
    d0be:	1992      	adds	r2, r2, r6
    d0c0:	3404      	adds	r4, #4
    d0c2:	54d4      	strb	r4, [r2, r3]
				rssi_readVal = radioConfiguration.packetRSSI;
    d0c4:	2156      	movs	r1, #86	; 0x56
    d0c6:	4826      	ldr	r0, [pc, #152]	; (d160 <radioCallback+0x11c>)
    d0c8:	5e41      	ldrsh	r1, [r0, r1]
    d0ca:	4668      	mov	r0, sp
    d0cc:	8041      	strh	r1, [r0, #2]
				RxBuffer[RxBank].radioRSSI = rssi_readVal;						
    d0ce:	189b      	adds	r3, r3, r2
    d0d0:	7059      	strb	r1, [r3, #1]
				if(RxBuffer[RxBank].Payload[0] & 0x20)
    d0d2:	789b      	ldrb	r3, [r3, #2]
    d0d4:	069b      	lsls	r3, r3, #26
    d0d6:	d524      	bpl.n	d122 <radioCallback+0xde>
					RadioReceiveParam.action = RECEIVE_STOP;					
    d0d8:	a801      	add	r0, sp, #4
    d0da:	2301      	movs	r3, #1
    d0dc:	7003      	strb	r3, [r0, #0]
					RadioReceiveParam.rxWindowSize = 0;
    d0de:	2300      	movs	r3, #0
    d0e0:	8043      	strh	r3, [r0, #2]
					RADIO_Receive(&RadioReceiveParam);
    d0e2:	4b20      	ldr	r3, [pc, #128]	; (d164 <radioCallback+0x120>)
    d0e4:	4798      	blx	r3
    d0e6:	e00f      	b.n	d108 <radioCallback+0xc4>
			if((!AckReqData)||(callbackRx->status != ERR_NONE))
    d0e8:	4b1f      	ldr	r3, [pc, #124]	; (d168 <radioCallback+0x124>)
    d0ea:	781b      	ldrb	r3, [r3, #0]
    d0ec:	2b00      	cmp	r3, #0
    d0ee:	d002      	beq.n	d0f6 <radioCallback+0xb2>
    d0f0:	782b      	ldrb	r3, [r5, #0]
    d0f2:	2b00      	cmp	r3, #0
    d0f4:	d00a      	beq.n	d10c <radioCallback+0xc8>
				PHY_DataConf(callbackRx->status); // Need to convert LoRa status to MiWi status
    d0f6:	7828      	ldrb	r0, [r5, #0]
    d0f8:	4b1c      	ldr	r3, [pc, #112]	; (d16c <radioCallback+0x128>)
    d0fa:	4798      	blx	r3
			RadioReceiveParam.action = RECEIVE_START;
    d0fc:	a801      	add	r0, sp, #4
    d0fe:	2300      	movs	r3, #0
    d100:	7003      	strb	r3, [r0, #0]
			RadioReceiveParam.rxWindowSize = 0;
    d102:	8043      	strh	r3, [r0, #2]
			RADIO_Receive(&RadioReceiveParam);
    d104:	4b17      	ldr	r3, [pc, #92]	; (d164 <radioCallback+0x120>)
    d106:	4798      	blx	r3
}
    d108:	b002      	add	sp, #8
    d10a:	bd70      	pop	{r4, r5, r6, pc}
				DataTxAckTimer.Val = MiWi_TickGet();
    d10c:	4b18      	ldr	r3, [pc, #96]	; (d170 <radioCallback+0x12c>)
    d10e:	4798      	blx	r3
    d110:	4b18      	ldr	r3, [pc, #96]	; (d174 <radioCallback+0x130>)
    d112:	6018      	str	r0, [r3, #0]
    d114:	e7f2      	b.n	d0fc <radioCallback+0xb8>
				for (i = 0; i < BANK_SIZE; i++)
    d116:	3afc      	subs	r2, #252	; 0xfc
    d118:	e7b9      	b.n	d08e <radioCallback+0x4a>
    d11a:	2201      	movs	r2, #1
    d11c:	e7b7      	b.n	d08e <radioCallback+0x4a>
    d11e:	2202      	movs	r2, #2
    d120:	e7b5      	b.n	d08e <radioCallback+0x4a>
					RadioReceiveParam.action = RECEIVE_START;
    d122:	a801      	add	r0, sp, #4
    d124:	2300      	movs	r3, #0
    d126:	7003      	strb	r3, [r0, #0]
					RadioReceiveParam.rxWindowSize = 0;
    d128:	8043      	strh	r3, [r0, #2]
					RADIO_Receive(&RadioReceiveParam);	
    d12a:	4b0e      	ldr	r3, [pc, #56]	; (d164 <radioCallback+0x120>)
    d12c:	4798      	blx	r3
    d12e:	e7eb      	b.n	d108 <radioCallback+0xc4>
				RadioReceiveParam.action = RECEIVE_START;
    d130:	ac01      	add	r4, sp, #4
    d132:	2300      	movs	r3, #0
    d134:	7023      	strb	r3, [r4, #0]
				RadioReceiveParam.rxWindowSize = 0;
    d136:	8063      	strh	r3, [r4, #2]
				PHY_DataConf(FAILURE);											
    d138:	2001      	movs	r0, #1
    d13a:	4b0c      	ldr	r3, [pc, #48]	; (d16c <radioCallback+0x128>)
    d13c:	4798      	blx	r3
				RADIO_Receive(&RadioReceiveParam);
    d13e:	0020      	movs	r0, r4
    d140:	4b08      	ldr	r3, [pc, #32]	; (d164 <radioCallback+0x120>)
    d142:	4798      	blx	r3
}
    d144:	e7e0      	b.n	d108 <radioCallback+0xc4>
    d146:	46c0      	nop			; (mov r8, r8)
    d148:	20002887 	.word	0x20002887
    d14c:	0001119d 	.word	0x0001119d
    d150:	0001ac24 	.word	0x0001ac24
    d154:	20002890 	.word	0x20002890
    d158:	00000202 	.word	0x00000202
    d15c:	00000303 	.word	0x00000303
    d160:	20003ba8 	.word	0x20003ba8
    d164:	00009135 	.word	0x00009135
    d168:	200007b8 	.word	0x200007b8
    d16c:	0000c6a9 	.word	0x0000c6a9
    d170:	0000f6f1 	.word	0x0000f6f1
    d174:	2000378c 	.word	0x2000378c

0000d178 <PHY_Init>:
{
    d178:	b510      	push	{r4, lr}
    HAL_RadioInit();
    d17a:	4b06      	ldr	r3, [pc, #24]	; (d194 <PHY_Init+0x1c>)
    d17c:	4798      	blx	r3
    AESInit();	
    d17e:	4b06      	ldr	r3, [pc, #24]	; (d198 <PHY_Init+0x20>)
    d180:	4798      	blx	r3
	RADIO_Init();
    d182:	4b06      	ldr	r3, [pc, #24]	; (d19c <PHY_Init+0x24>)
    d184:	4798      	blx	r3
	RADIO_SetAttr(RADIO_CALLBACK, (void *)&radioCallback);
    d186:	4906      	ldr	r1, [pc, #24]	; (d1a0 <PHY_Init+0x28>)
    d188:	201a      	movs	r0, #26
    d18a:	4b06      	ldr	r3, [pc, #24]	; (d1a4 <PHY_Init+0x2c>)
    d18c:	4798      	blx	r3
   RADIO_InitDefaultAttributes();				
    d18e:	4b06      	ldr	r3, [pc, #24]	; (d1a8 <PHY_Init+0x30>)
    d190:	4798      	blx	r3
}
    d192:	bd10      	pop	{r4, pc}
    d194:	0000fb59 	.word	0x0000fb59
    d198:	00010661 	.word	0x00010661
    d19c:	00007de1 	.word	0x00007de1
    d1a0:	0000d045 	.word	0x0000d045
    d1a4:	00007bb1 	.word	0x00007bb1
    d1a8:	00008f55 	.word	0x00008f55

0000d1ac <PHY_SetRxState>:
{
    d1ac:	b510      	push	{r4, lr}

/*************************************************************************//**
*****************************************************************************/
static void phySetRxState(void)
{
	RADIO_RxHandler();
    d1ae:	4b01      	ldr	r3, [pc, #4]	; (d1b4 <PHY_SetRxState+0x8>)
    d1b0:	4798      	blx	r3
}
    d1b2:	bd10      	pop	{r4, pc}
    d1b4:	00008e19 	.word	0x00008e19

0000d1b8 <PHY_SetPanId>:
{
    d1b8:	b082      	sub	sp, #8
	DevPanId[0]=d[0];
    d1ba:	b2c2      	uxtb	r2, r0
    d1bc:	4b02      	ldr	r3, [pc, #8]	; (d1c8 <PHY_SetPanId+0x10>)
    d1be:	701a      	strb	r2, [r3, #0]
	DevPanId[1]=d[1];
    d1c0:	0a00      	lsrs	r0, r0, #8
    d1c2:	7058      	strb	r0, [r3, #1]
}
    d1c4:	b002      	add	sp, #8
    d1c6:	4770      	bx	lr
    d1c8:	20002c94 	.word	0x20002c94

0000d1cc <PHY_SetShortAddr>:
{
    d1cc:	b082      	sub	sp, #8
	DevShortAddress[0]=d[0];
    d1ce:	b2c2      	uxtb	r2, r0
    d1d0:	4b02      	ldr	r3, [pc, #8]	; (d1dc <PHY_SetShortAddr+0x10>)
    d1d2:	701a      	strb	r2, [r3, #0]
	DevShortAddress[1]=d[1];
    d1d4:	0a00      	lsrs	r0, r0, #8
    d1d6:	7058      	strb	r0, [r3, #1]
}
    d1d8:	b002      	add	sp, #8
    d1da:	4770      	bx	lr
    d1dc:	20002c98 	.word	0x20002c98

0000d1e0 <PHY_GetAttribute>:
{
    d1e0:	b510      	push	{r4, lr}
	switch(RadioAttr)
    d1e2:	2807      	cmp	r0, #7
    d1e4:	d003      	beq.n	d1ee <PHY_GetAttribute+0xe>
    d1e6:	2816      	cmp	r0, #22
    d1e8:	d001      	beq.n	d1ee <PHY_GetAttribute+0xe>
			Status = ERR_INVALID_REQ;
    d1ea:	2003      	movs	r0, #3
}
    d1ec:	bd10      	pop	{r4, pc}
			Status = RADIO_GetAttr(RadioAttr,AttrVal);
    d1ee:	4b01      	ldr	r3, [pc, #4]	; (d1f4 <PHY_GetAttribute+0x14>)
    d1f0:	4798      	blx	r3
			break;
    d1f2:	e7fb      	b.n	d1ec <PHY_GetAttribute+0xc>
    d1f4:	00007a6d 	.word	0x00007a6d

0000d1f8 <PHY_Wakeup>:
{
    d1f8:	b510      	push	{r4, lr}
	if (PHY_STATE_SLEEP == phyState)
    d1fa:	4b0c      	ldr	r3, [pc, #48]	; (d22c <PHY_Wakeup+0x34>)
    d1fc:	781b      	ldrb	r3, [r3, #0]
    d1fe:	2b02      	cmp	r3, #2
    d200:	d000      	beq.n	d204 <PHY_Wakeup+0xc>
}
    d202:	bd10      	pop	{r4, pc}
		HAL_TCXOPowerOn();
    d204:	4b0a      	ldr	r3, [pc, #40]	; (d230 <PHY_Wakeup+0x38>)
    d206:	4798      	blx	r3
		HAL_RadioInit();
    d208:	4b0a      	ldr	r3, [pc, #40]	; (d234 <PHY_Wakeup+0x3c>)
    d20a:	4798      	blx	r3
		RADIO_Reset();
    d20c:	4b0a      	ldr	r3, [pc, #40]	; (d238 <PHY_Wakeup+0x40>)
    d20e:	4798      	blx	r3
		Radio_WriteMode(MODE_STANDBY, radioConfiguration.modulation, 0);
    d210:	2334      	movs	r3, #52	; 0x34
    d212:	4a0a      	ldr	r2, [pc, #40]	; (d23c <PHY_Wakeup+0x44>)
    d214:	5cd1      	ldrb	r1, [r2, r3]
    d216:	2200      	movs	r2, #0
    d218:	2001      	movs	r0, #1
    d21a:	4b09      	ldr	r3, [pc, #36]	; (d240 <PHY_Wakeup+0x48>)
    d21c:	4798      	blx	r3
	RADIO_RxHandler();
    d21e:	4b09      	ldr	r3, [pc, #36]	; (d244 <PHY_Wakeup+0x4c>)
    d220:	4798      	blx	r3
	 	phyState = PHY_STATE_IDLE;
    d222:	2201      	movs	r2, #1
    d224:	4b01      	ldr	r3, [pc, #4]	; (d22c <PHY_Wakeup+0x34>)
    d226:	701a      	strb	r2, [r3, #0]
}
    d228:	e7eb      	b.n	d202 <PHY_Wakeup+0xa>
    d22a:	46c0      	nop			; (mov r8, r8)
    d22c:	200007c9 	.word	0x200007c9
    d230:	0000fef9 	.word	0x0000fef9
    d234:	0000fb59 	.word	0x0000fb59
    d238:	0000fd11 	.word	0x0000fd11
    d23c:	20003ba8 	.word	0x20003ba8
    d240:	00010fd9 	.word	0x00010fd9
    d244:	00008e19 	.word	0x00008e19

0000d248 <PHY_SetChannel>:
{
    d248:	b510      	push	{r4, lr}
	phyChannel = channel;
    d24a:	4b06      	ldr	r3, [pc, #24]	; (d264 <PHY_SetChannel+0x1c>)
    d24c:	7018      	strb	r0, [r3, #0]
	if (PHY_STATE_SLEEP == phyState)
    d24e:	4b06      	ldr	r3, [pc, #24]	; (d268 <PHY_SetChannel+0x20>)
    d250:	781b      	ldrb	r3, [r3, #0]
    d252:	2b02      	cmp	r3, #2
    d254:	d002      	beq.n	d25c <PHY_SetChannel+0x14>
	phySetChannel();
    d256:	4b05      	ldr	r3, [pc, #20]	; (d26c <PHY_SetChannel+0x24>)
    d258:	4798      	blx	r3
}
    d25a:	bd10      	pop	{r4, pc}
		PHY_Wakeup();
    d25c:	4b04      	ldr	r3, [pc, #16]	; (d270 <PHY_SetChannel+0x28>)
    d25e:	4798      	blx	r3
    d260:	e7f9      	b.n	d256 <PHY_SetChannel+0xe>
    d262:	46c0      	nop			; (mov r8, r8)
    d264:	200007c8 	.word	0x200007c8
    d268:	200007c9 	.word	0x200007c9
    d26c:	0000cf0d 	.word	0x0000cf0d
    d270:	0000d1f9 	.word	0x0000d1f9

0000d274 <PHY_DataReq>:
{
    d274:	b500      	push	{lr}
    d276:	b085      	sub	sp, #20
		RadioTransmitParam.bufferLen = data[0];
    d278:	7803      	ldrb	r3, [r0, #0]
    d27a:	aa02      	add	r2, sp, #8
    d27c:	7013      	strb	r3, [r2, #0]
		for (count = 0; count < data[0]; count++)
    d27e:	2b00      	cmp	r3, #0
    d280:	d009      	beq.n	d296 <PHY_DataReq+0x22>
    d282:	2300      	movs	r3, #0
			DataRequestBuffer[count] = data[1+count];
    d284:	4912      	ldr	r1, [pc, #72]	; (d2d0 <PHY_DataReq+0x5c>)
    d286:	18c2      	adds	r2, r0, r3
    d288:	7852      	ldrb	r2, [r2, #1]
    d28a:	54ca      	strb	r2, [r1, r3]
		for (count = 0; count < data[0]; count++)
    d28c:	3301      	adds	r3, #1
    d28e:	b2db      	uxtb	r3, r3
    d290:	7802      	ldrb	r2, [r0, #0]
    d292:	429a      	cmp	r2, r3
    d294:	d8f7      	bhi.n	d286 <PHY_DataReq+0x12>
		RadioTransmitParam.bufferPtr = (uint8_t *)&DataRequestBuffer;
    d296:	4b0e      	ldr	r3, [pc, #56]	; (d2d0 <PHY_DataReq+0x5c>)
    d298:	9303      	str	r3, [sp, #12]
		RadioSetState(RADIO_STATE_IDLE);
    d29a:	2001      	movs	r0, #1
    d29c:	4b0d      	ldr	r3, [pc, #52]	; (d2d4 <PHY_DataReq+0x60>)
    d29e:	4798      	blx	r3
		phySetChannel();
    d2a0:	4b0d      	ldr	r3, [pc, #52]	; (d2d8 <PHY_DataReq+0x64>)
    d2a2:	4798      	blx	r3
		localRadioLBTParams.lbtScanPeriod   = 10;
    d2a4:	230a      	movs	r3, #10
    d2a6:	466a      	mov	r2, sp
    d2a8:	8013      	strh	r3, [r2, #0]
		localRadioLBTParams.lbtThreshold	= -90;
    d2aa:	3b64      	subs	r3, #100	; 0x64
    d2ac:	8053      	strh	r3, [r2, #2]
		localRadioLBTParams.lbtNumOfSamples = 9;
    d2ae:	3363      	adds	r3, #99	; 0x63
    d2b0:	7113      	strb	r3, [r2, #4]
		localRadioLBTParams.lbtTransmitOn = 0;
    d2b2:	2300      	movs	r3, #0
    d2b4:	7153      	strb	r3, [r2, #5]
		status = RADIO_SetAttr(RADIO_LBT_PARAMS, &localRadioLBTParams);
    d2b6:	4669      	mov	r1, sp
    d2b8:	201d      	movs	r0, #29
    d2ba:	4b08      	ldr	r3, [pc, #32]	; (d2dc <PHY_DataReq+0x68>)
    d2bc:	4798      	blx	r3
		status = RADIO_Transmit (&RadioTransmitParam);
    d2be:	a802      	add	r0, sp, #8
    d2c0:	4b07      	ldr	r3, [pc, #28]	; (d2e0 <PHY_DataReq+0x6c>)
    d2c2:	4798      	blx	r3
		return (!status);							
    d2c4:	4243      	negs	r3, r0
    d2c6:	4158      	adcs	r0, r3
    d2c8:	b2c0      	uxtb	r0, r0
}
    d2ca:	b005      	add	sp, #20
    d2cc:	bd00      	pop	{pc}
    d2ce:	46c0      	nop			; (mov r8, r8)
    d2d0:	20002788 	.word	0x20002788
    d2d4:	00008771 	.word	0x00008771
    d2d8:	0000cf0d 	.word	0x0000cf0d
    d2dc:	00007bb1 	.word	0x00007bb1
    d2e0:	00008799 	.word	0x00008799

0000d2e4 <PHY_RandomReq>:
{
    d2e4:	b510      	push	{r4, lr}
	rnd = RADIO_ReadRandom();
    d2e6:	4b03      	ldr	r3, [pc, #12]	; (d2f4 <PHY_RandomReq+0x10>)
    d2e8:	4798      	blx	r3
    d2ea:	0004      	movs	r4, r0
	RADIO_RxHandler();
    d2ec:	4b02      	ldr	r3, [pc, #8]	; (d2f8 <PHY_RandomReq+0x14>)
    d2ee:	4798      	blx	r3
}
    d2f0:	0020      	movs	r0, r4
    d2f2:	bd10      	pop	{r4, pc}
    d2f4:	0001110d 	.word	0x0001110d
    d2f8:	00008e19 	.word	0x00008e19

0000d2fc <PHY_EncryptReq>:
{	
    d2fc:	b510      	push	{r4, lr}
	AESEncode(text,key);
    d2fe:	4b01      	ldr	r3, [pc, #4]	; (d304 <PHY_EncryptReq+0x8>)
    d300:	4798      	blx	r3
}
    d302:	bd10      	pop	{r4, pc}
    d304:	00010585 	.word	0x00010585

0000d308 <PHY_SetIEEEAddr>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_SetIEEEAddr(uint8_t *ieee_addr)
{
    d308:	2300      	movs	r3, #0
	uint8_t *ptr_to_reg = ieee_addr;

	for (uint8_t i = 0; i < 8; i++)
	{
		DevIEEEaddr[i] = ptr_to_reg[i];
    d30a:	4903      	ldr	r1, [pc, #12]	; (d318 <PHY_SetIEEEAddr+0x10>)
    d30c:	5cc2      	ldrb	r2, [r0, r3]
    d30e:	54ca      	strb	r2, [r1, r3]
    d310:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < 8; i++)
    d312:	2b08      	cmp	r3, #8
    d314:	d1fa      	bne.n	d30c <PHY_SetIEEEAddr+0x4>
	}
}
    d316:	4770      	bx	lr
    d318:	20002888 	.word	0x20002888

0000d31c <PHY_TaskHandler>:
    if (PHY_STATE_SLEEP == phyState)
    {
        return;
    }
	// Handled in DIO interrupts 
}
    d31c:	4770      	bx	lr
    d31e:	Address 0x0000d31e is out of bounds.


0000d320 <CommandConfCallback>:
		
	//printf("Memory_Available Percentage:%d\n\r",MiMem_PercentageOfFreeBuffers());
/****************************************************************/	
//STAR SUPPORT CODE
#if defined(PROTOCOL_STAR)
	if(ConnectionTableBroadcast)
    d320:	4b03      	ldr	r3, [pc, #12]	; (d330 <CommandConfCallback+0x10>)
    d322:	781b      	ldrb	r3, [r3, #0]
    d324:	2b00      	cmp	r3, #0
    d326:	d002      	beq.n	d32e <CommandConfCallback+0xe>
		ConnectionTableBroadcast = false;
    d328:	2200      	movs	r2, #0
    d32a:	4b01      	ldr	r3, [pc, #4]	; (d330 <CommandConfCallback+0x10>)
    d32c:	701a      	strb	r2, [r3, #0]
	
	 //printf("Fw_stat:%d Ack:%d ConnectionTableBroadcast:%d\n\r",FW_Stat,AckReqData,ConnectionTableBroadcast);
#endif
/****************************************************************/
}
    d32e:	4770      	bx	lr
    d330:	200007ca 	.word	0x200007ca

0000d334 <ForwardmessageConfCallback>:
void ForwardmessageConfCallback(uint8_t msgConfHandle, miwi_status_t status, uint8_t* msgPointer)
{
	#if defined (ENABLE_CONSOLE)
	//printf("\r\nForward Conf : Handle %d & Status %02X  ",msgConfHandle , status );
	#endif
	if(FW_Stat)
    d334:	4b04      	ldr	r3, [pc, #16]	; (d348 <ForwardmessageConfCallback+0x14>)
    d336:	781b      	ldrb	r3, [r3, #0]
    d338:	2b00      	cmp	r3, #0
    d33a:	d004      	beq.n	d346 <ForwardmessageConfCallback+0x12>
	{
	-- FW_Stat;
    d33c:	4a02      	ldr	r2, [pc, #8]	; (d348 <ForwardmessageConfCallback+0x14>)
    d33e:	7813      	ldrb	r3, [r2, #0]
    d340:	3b01      	subs	r3, #1
    d342:	b2db      	uxtb	r3, r3
    d344:	7013      	strb	r3, [r2, #0]
	//printf("\n\rFw stat:%d Ack Req state:%d\n\r",FW_Stat,AckReqData);
	}
	//MiMem_Free(msgPointer);
	//return;
	
}
    d346:	4770      	bx	lr
    d348:	200007cb 	.word	0x200007cb

0000d34c <linkStatusConfCallback>:
	}
	return false;
}

void linkStatusConfCallback(uint8_t msgConfHandle, miwi_status_t status, uint8_t* msgPointer)
{
    d34c:	b510      	push	{r4, lr}
	//MiMem_Free(msgPointer);
	
	//#if defined(ENABLE_SLEEP_FEATURE)
	//#endif
	if ((SUCCESS != status) && (LinkStatus == true))
    d34e:	2900      	cmp	r1, #0
    d350:	d018      	beq.n	d384 <linkStatusConfCallback+0x38>
    d352:	4b10      	ldr	r3, [pc, #64]	; (d394 <linkStatusConfCallback+0x48>)
    d354:	781b      	ldrb	r3, [r3, #0]
    d356:	2b00      	cmp	r3, #0
    d358:	d014      	beq.n	d384 <linkStatusConfCallback+0x38>
	{
		//printf("\n\rstatus Failed\n\r");
		if (linkStatusFailureCount >= MAX_LINK_STATUS_FAILURES)
    d35a:	4b0f      	ldr	r3, [pc, #60]	; (d398 <linkStatusConfCallback+0x4c>)
    d35c:	781b      	ldrb	r3, [r3, #0]
    d35e:	2b04      	cmp	r3, #4
    d360:	d90b      	bls.n	d37a <linkStatusConfCallback+0x2e>
		{
			//printf("\n\rStopping the timer\n\r\n");
			/* Stop Timers */
			linkStatusTimerSet = false;
    d362:	2300      	movs	r3, #0
    d364:	4a0d      	ldr	r2, [pc, #52]	; (d39c <linkStatusConfCallback+0x50>)
    d366:	7013      	strb	r3, [r2, #0]
			linkStatusFailureCount = 0;
    d368:	4a0b      	ldr	r2, [pc, #44]	; (d398 <linkStatusConfCallback+0x4c>)
    d36a:	7013      	strb	r3, [r2, #0]
			#ifdef ENABLE_SLEEP_FEATURE
			 linkStatusTimerTick.Val = 0;
			#endif
			LinkStatus = false;
    d36c:	4a09      	ldr	r2, [pc, #36]	; (d394 <linkStatusConfCallback+0x48>)
    d36e:	7013      	strb	r3, [r2, #0]
			if ((NULL != linkFailureCallback))
    d370:	4b0b      	ldr	r3, [pc, #44]	; (d3a0 <linkStatusConfCallback+0x54>)
    d372:	681b      	ldr	r3, [r3, #0]
    d374:	2b00      	cmp	r3, #0
    d376:	d000      	beq.n	d37a <linkStatusConfCallback+0x2e>
			{
				#if defined(ENABLE_DEBUG_LOG)
				printf("\n\nLink status failure-1\n\r");
				#endif
				linkFailureCallback();
    d378:	4798      	blx	r3
			}
			//p2pStarCurrentState = DISCONNECTED;
		}
		++linkStatusFailureCount;
    d37a:	4a07      	ldr	r2, [pc, #28]	; (d398 <linkStatusConfCallback+0x4c>)
    d37c:	7813      	ldrb	r3, [r2, #0]
    d37e:	3301      	adds	r3, #1
    d380:	7013      	strb	r3, [r2, #0]
    d382:	e002      	b.n	d38a <linkStatusConfCallback+0x3e>
	}
	else
	{
		linkStatusFailureCount = 0;
    d384:	2200      	movs	r2, #0
    d386:	4b04      	ldr	r3, [pc, #16]	; (d398 <linkStatusConfCallback+0x4c>)
    d388:	701a      	strb	r2, [r3, #0]
	}
	LinkStatus = false;
    d38a:	2200      	movs	r2, #0
    d38c:	4b01      	ldr	r3, [pc, #4]	; (d394 <linkStatusConfCallback+0x48>)
    d38e:	701a      	strb	r2, [r3, #0]
	#if defined(ENABLE_DEBUG_LOG)
	printf("Link status conf callback status:%d FailureCount:%d SwAck:%d AckReq:%d LinkStatus:%d \n\r",status,linkStatusFailureCount,SwAckReq,AckReqData,LinkStatus);
	#endif
}
    d390:	bd10      	pop	{r4, pc}
    d392:	46c0      	nop			; (mov r8, r8)
    d394:	200007cc 	.word	0x200007cc
    d398:	200007d8 	.word	0x200007d8
    d39c:	200007d9 	.word	0x200007d9
    d3a0:	20003778 	.word	0x20003778

0000d3a4 <Find_Index>:

/* All connections (FFD || RFD)are stored in Connection Table of PAN Coordinator
    Each Connection is identified by its index no. In case of Data TX , EDx --> PAN CO --> EDy
    PAN Coordinator will forward the data to EDy , In order to know */
static uint8_t Find_Index (uint8_t *DestAddr)
{
    d3a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    d3a6:	b083      	sub	sp, #12
    d3a8:	0006      	movs	r6, r0
    uint8_t i;
    uint8_t return_val;
    for (i = 0;i < conn_size; i++)
    d3aa:	4b15      	ldr	r3, [pc, #84]	; (d400 <Find_Index+0x5c>)
    d3ac:	781c      	ldrb	r4, [r3, #0]
    d3ae:	2c00      	cmp	r4, #0
    d3b0:	d024      	beq.n	d3fc <Find_Index+0x58>
    d3b2:	4a14      	ldr	r2, [pc, #80]	; (d404 <Find_Index+0x60>)
    d3b4:	2100      	movs	r1, #0
    d3b6:	2000      	movs	r0, #0
    {
        if (ConnectionTable[i].status.bits.isValid)
    d3b8:	4d13      	ldr	r5, [pc, #76]	; (d408 <Find_Index+0x64>)
    d3ba:	e005      	b.n	d3c8 <Find_Index+0x24>
    for (i = 0;i < conn_size; i++)
    d3bc:	3001      	adds	r0, #1
    d3be:	b2c0      	uxtb	r0, r0
    d3c0:	3101      	adds	r1, #1
    d3c2:	3210      	adds	r2, #16
    d3c4:	42a0      	cmp	r0, r4
    d3c6:	d016      	beq.n	d3f6 <Find_Index+0x52>
        if (ConnectionTable[i].status.bits.isValid)
    d3c8:	010b      	lsls	r3, r1, #4
    d3ca:	18eb      	adds	r3, r5, r3
    d3cc:	7b1b      	ldrb	r3, [r3, #12]
    d3ce:	09db      	lsrs	r3, r3, #7
    d3d0:	d0f4      	beq.n	d3bc <Find_Index+0x18>
    d3d2:	9201      	str	r2, [sp, #4]
        {
            if (DestAddr[0] == ConnectionTable[i].Address[0] && DestAddr[1] == ConnectionTable[i].Address[1] && DestAddr[2] == ConnectionTable[i].Address[2] )
    d3d4:	7837      	ldrb	r7, [r6, #0]
    d3d6:	7813      	ldrb	r3, [r2, #0]
    d3d8:	429f      	cmp	r7, r3
    d3da:	d1ef      	bne.n	d3bc <Find_Index+0x18>
    d3dc:	7877      	ldrb	r7, [r6, #1]
    d3de:	7853      	ldrb	r3, [r2, #1]
    d3e0:	429f      	cmp	r7, r3
    d3e2:	d1eb      	bne.n	d3bc <Find_Index+0x18>
    d3e4:	78b3      	ldrb	r3, [r6, #2]
    d3e6:	469c      	mov	ip, r3
    d3e8:	7893      	ldrb	r3, [r2, #2]
    d3ea:	459c      	cmp	ip, r3
    d3ec:	d1e6      	bne.n	d3bc <Find_Index+0x18>
                break;
            }

        }
    }
    if (i == conn_size)
    d3ee:	4284      	cmp	r4, r0
    d3f0:	d102      	bne.n	d3f8 <Find_Index+0x54>
    {
        return_val = 0xff;
    d3f2:	20ff      	movs	r0, #255	; 0xff
    d3f4:	e000      	b.n	d3f8 <Find_Index+0x54>
    d3f6:	20ff      	movs	r0, #255	; 0xff
    }
    return return_val;
}
    d3f8:	b003      	add	sp, #12
    d3fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return_val = 0xff;
    d3fc:	20ff      	movs	r0, #255	; 0xff
    d3fe:	e7fb      	b.n	d3f8 <Find_Index+0x54>
    d400:	20003481 	.word	0x20003481
    d404:	2000331c 	.word	0x2000331c
    d408:	20003318 	.word	0x20003318

0000d40c <Total_Connections>:
{
    d40c:	b510      	push	{r4, lr}
    d40e:	4b0b      	ldr	r3, [pc, #44]	; (d43c <Total_Connections+0x30>)
    d410:	001c      	movs	r4, r3
    d412:	3441      	adds	r4, #65	; 0x41
    d414:	34ff      	adds	r4, #255	; 0xff
    uint8_t count=0 , i;
    d416:	2000      	movs	r0, #0
    d418:	e004      	b.n	d424 <Total_Connections+0x18>
			count++;
    d41a:	3001      	adds	r0, #1
    d41c:	b2c0      	uxtb	r0, r0
    d41e:	3310      	adds	r3, #16
    for (i=0;i<CONNECTION_SIZE;i++)
    d420:	42a3      	cmp	r3, r4
    d422:	d009      	beq.n	d438 <Total_Connections+0x2c>
		if (ConnectionTable[i].Address[0] != 0x00 || ConnectionTable[i].Address[1] != 0x00 || ConnectionTable[i].Address[2] != 0x00)
    d424:	781a      	ldrb	r2, [r3, #0]
    d426:	2a00      	cmp	r2, #0
    d428:	d1f7      	bne.n	d41a <Total_Connections+0xe>
    d42a:	785a      	ldrb	r2, [r3, #1]
    d42c:	2a00      	cmp	r2, #0
    d42e:	d1f4      	bne.n	d41a <Total_Connections+0xe>
    d430:	789a      	ldrb	r2, [r3, #2]
    d432:	2a00      	cmp	r2, #0
    d434:	d0f3      	beq.n	d41e <Total_Connections+0x12>
    d436:	e7f0      	b.n	d41a <Total_Connections+0xe>
}
    d438:	bd10      	pop	{r4, pc}
    d43a:	46c0      	nop			; (mov r8, r8)
    d43c:	2000331c 	.word	0x2000331c

0000d440 <IndirectPacket>:
    { 
    d440:	b5f0      	push	{r4, r5, r6, r7, lr}
    d442:	46de      	mov	lr, fp
    d444:	4657      	mov	r7, sl
    d446:	464e      	mov	r6, r9
    d448:	4645      	mov	r5, r8
    d44a:	b5e0      	push	{r5, r6, r7, lr}
    d44c:	b083      	sub	sp, #12
    d44e:	466c      	mov	r4, sp
    d450:	8061      	strh	r1, [r4, #2]
    d452:	ac0c      	add	r4, sp, #48	; 0x30
    d454:	7827      	ldrb	r7, [r4, #0]
    d456:	ac0d      	add	r4, sp, #52	; 0x34
    d458:	7826      	ldrb	r6, [r4, #0]
    d45a:	ac0f      	add	r4, sp, #60	; 0x3c
    d45c:	7825      	ldrb	r5, [r4, #0]
    d45e:	ac10      	add	r4, sp, #64	; 0x40
    d460:	7821      	ldrb	r1, [r4, #0]
    d462:	4688      	mov	r8, r1
            if( Broadcast )
    d464:	2800      	cmp	r0, #0
    d466:	d000      	beq.n	d46a <IndirectPacket+0x2a>
    d468:	e080      	b.n	d56c <IndirectPacket+0x12c>
            if( indirectMessages[i].flags.bits.isValid == 0 )
    d46a:	4c41      	ldr	r4, [pc, #260]	; (d570 <IndirectPacket+0x130>)
    d46c:	7ea4      	ldrb	r4, [r4, #26]
    d46e:	07e1      	lsls	r1, r4, #31
    d470:	d400      	bmi.n	d474 <IndirectPacket+0x34>
    d472:	e079      	b.n	d568 <IndirectPacket+0x128>
    d474:	249d      	movs	r4, #157	; 0x9d
    d476:	0064      	lsls	r4, r4, #1
    d478:	493d      	ldr	r1, [pc, #244]	; (d570 <IndirectPacket+0x130>)
    d47a:	5d0c      	ldrb	r4, [r1, r4]
    d47c:	07e1      	lsls	r1, r4, #31
    d47e:	d506      	bpl.n	d48e <IndirectPacket+0x4e>
    }
    d480:	b003      	add	sp, #12
    d482:	bc3c      	pop	{r2, r3, r4, r5}
    d484:	4690      	mov	r8, r2
    d486:	4699      	mov	r9, r3
    d488:	46a2      	mov	sl, r4
    d48a:	46ab      	mov	fp, r5
    d48c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( indirectMessages[i].flags.bits.isValid == 0 )
    d48e:	2401      	movs	r4, #1
                indirectMessages[i].flags.bits.isValid          = true;
    d490:	00e0      	lsls	r0, r4, #3
    d492:	1900      	adds	r0, r0, r4
    d494:	0140      	lsls	r0, r0, #5
    d496:	4936      	ldr	r1, [pc, #216]	; (d570 <IndirectPacket+0x130>)
    d498:	468c      	mov	ip, r1
    d49a:	4484      	add	ip, r0
    d49c:	2118      	movs	r1, #24
    d49e:	4461      	add	r1, ip
    d4a0:	4689      	mov	r9, r1
    d4a2:	7889      	ldrb	r1, [r1, #2]
    d4a4:	2001      	movs	r0, #1
    d4a6:	4301      	orrs	r1, r0
    d4a8:	468a      	mov	sl, r1
                indirectMessages[i].flags.bits.isCommand        = isCommand;
    d4aa:	2001      	movs	r0, #1
    d4ac:	4003      	ands	r3, r0
    d4ae:	0099      	lsls	r1, r3, #2
    d4b0:	9101      	str	r1, [sp, #4]
    d4b2:	21fd      	movs	r1, #253	; 0xfd
    d4b4:	468b      	mov	fp, r1
    d4b6:	4651      	mov	r1, sl
    d4b8:	465b      	mov	r3, fp
    d4ba:	4019      	ands	r1, r3
    d4bc:	3bf9      	subs	r3, #249	; 0xf9
    d4be:	4399      	bics	r1, r3
                indirectMessages[i].flags.bits.isSecured        = SecurityEnabled;
    d4c0:	4007      	ands	r7, r0
    d4c2:	00ff      	lsls	r7, r7, #3
    d4c4:	000b      	movs	r3, r1
    d4c6:	9901      	ldr	r1, [sp, #4]
    d4c8:	4319      	orrs	r1, r3
    d4ca:	000b      	movs	r3, r1
    d4cc:	2108      	movs	r1, #8
    d4ce:	438b      	bics	r3, r1
				indirectMessages[i].flags.bits.ackReq           = ackReq;
    d4d0:	4641      	mov	r1, r8
    d4d2:	4008      	ands	r0, r1
    d4d4:	0101      	lsls	r1, r0, #4
    d4d6:	433b      	orrs	r3, r7
    d4d8:	0018      	movs	r0, r3
    d4da:	2310      	movs	r3, #16
    d4dc:	4398      	bics	r0, r3
    d4de:	4308      	orrs	r0, r1
    d4e0:	464b      	mov	r3, r9
    d4e2:	7098      	strb	r0, [r3, #2]
                    indirectMessages[i].DestPANID.Val           = DestinationPANID.Val;
    d4e4:	4663      	mov	r3, ip
    d4e6:	4669      	mov	r1, sp
    d4e8:	8849      	ldrh	r1, [r1, #2]
    d4ea:	8099      	strh	r1, [r3, #4]
                if( DestinationAddress != NULL )
    d4ec:	2a00      	cmp	r2, #0
    d4ee:	d00d      	beq.n	d50c <IndirectPacket+0xcc>
    d4f0:	0013      	movs	r3, r2
    d4f2:	00e1      	lsls	r1, r4, #3
    d4f4:	1909      	adds	r1, r1, r4
    d4f6:	0149      	lsls	r1, r1, #5
    d4f8:	3106      	adds	r1, #6
    d4fa:	481d      	ldr	r0, [pc, #116]	; (d570 <IndirectPacket+0x130>)
    d4fc:	1809      	adds	r1, r1, r0
    d4fe:	3208      	adds	r2, #8
                        indirectMessages[i].DestAddress.DestLongAddress[j] = DestinationAddress[j];
    d500:	7818      	ldrb	r0, [r3, #0]
    d502:	7008      	strb	r0, [r1, #0]
    d504:	3301      	adds	r3, #1
    d506:	3101      	adds	r1, #1
                    for(j = 0; j < MY_ADDRESS_LENGTH; j++)
    d508:	4293      	cmp	r3, r2
    d50a:	d1f9      	bne.n	d500 <IndirectPacket+0xc0>
                indirectMessages[i].PayLoadSize = msgLen;
    d50c:	00e3      	lsls	r3, r4, #3
    d50e:	191b      	adds	r3, r3, r4
    d510:	015b      	lsls	r3, r3, #5
    d512:	4a17      	ldr	r2, [pc, #92]	; (d570 <IndirectPacket+0x130>)
    d514:	18d3      	adds	r3, r2, r3
    d516:	76de      	strb	r6, [r3, #27]
                for(j = 0; j < msgLen; j++)
    d518:	2e00      	cmp	r6, #0
    d51a:	d011      	beq.n	d540 <IndirectPacket+0x100>
    d51c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d51e:	00e2      	lsls	r2, r4, #3
    d520:	1912      	adds	r2, r2, r4
    d522:	0152      	lsls	r2, r2, #5
    d524:	321c      	adds	r2, #28
    d526:	4912      	ldr	r1, [pc, #72]	; (d570 <IndirectPacket+0x130>)
    d528:	1852      	adds	r2, r2, r1
    d52a:	3e01      	subs	r6, #1
    d52c:	b2f0      	uxtb	r0, r6
    d52e:	3001      	adds	r0, #1
    d530:	469c      	mov	ip, r3
    d532:	4460      	add	r0, ip
                    indirectMessages[i].PayLoad[j] = msgPtr[j];
    d534:	7819      	ldrb	r1, [r3, #0]
    d536:	7011      	strb	r1, [r2, #0]
    d538:	3301      	adds	r3, #1
    d53a:	3201      	adds	r2, #1
                for(j = 0; j < msgLen; j++)
    d53c:	4283      	cmp	r3, r0
    d53e:	d1f9      	bne.n	d534 <IndirectPacket+0xf4>
                indirectMessages[i].indirectDataHandle = msghandle;
    d540:	4f0b      	ldr	r7, [pc, #44]	; (d570 <IndirectPacket+0x130>)
    d542:	00e6      	lsls	r6, r4, #3
    d544:	1933      	adds	r3, r6, r4
    d546:	015b      	lsls	r3, r3, #5
    d548:	18fb      	adds	r3, r7, r3
    d54a:	001a      	movs	r2, r3
    d54c:	321c      	adds	r2, #28
    d54e:	32ff      	adds	r2, #255	; 0xff
    d550:	7015      	strb	r5, [r2, #0]
				indirectMessages[i].indirectConfCallback = ConfCallback;
    d552:	331d      	adds	r3, #29
    d554:	33ff      	adds	r3, #255	; 0xff
    d556:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d558:	601a      	str	r2, [r3, #0]
				indirectMessages[i].TickStart.Val = MiWi_TickGet();
    d55a:	4b06      	ldr	r3, [pc, #24]	; (d574 <IndirectPacket+0x134>)
    d55c:	4798      	blx	r3
    d55e:	1936      	adds	r6, r6, r4
    d560:	0176      	lsls	r6, r6, #5
    d562:	51f0      	str	r0, [r6, r7]
                return true;
    d564:	2001      	movs	r0, #1
    d566:	e78b      	b.n	d480 <IndirectPacket+0x40>
            if( indirectMessages[i].flags.bits.isValid == 0 )
    d568:	2400      	movs	r4, #0
    d56a:	e791      	b.n	d490 <IndirectPacket+0x50>
                return false;
    d56c:	2000      	movs	r0, #0
    d56e:	e787      	b.n	d480 <IndirectPacket+0x40>
    d570:	200034dc 	.word	0x200034dc
    d574:	0000f6f1 	.word	0x0000f6f1

0000d578 <SendPacket>:
{ 
    d578:	b5f0      	push	{r4, r5, r6, r7, lr}
    d57a:	46ce      	mov	lr, r9
    d57c:	4647      	mov	r7, r8
    d57e:	b580      	push	{r7, lr}
    d580:	b08b      	sub	sp, #44	; 0x2c
    d582:	0005      	movs	r5, r0
    d584:	468c      	mov	ip, r1
    d586:	9205      	str	r2, [sp, #20]
    d588:	a812      	add	r0, sp, #72	; 0x48
    d58a:	7800      	ldrb	r0, [r0, #0]
    d58c:	ac13      	add	r4, sp, #76	; 0x4c
    d58e:	7826      	ldrb	r6, [r4, #0]
    d590:	ac15      	add	r4, sp, #84	; 0x54
    d592:	7827      	ldrb	r7, [r4, #0]
    d594:	ac16      	add	r4, sp, #88	; 0x58
    d596:	7822      	ldrb	r2, [r4, #0]
    tParam.flags.Val = 0;
    d598:	2400      	movs	r4, #0
    d59a:	46a0      	mov	r8, r4
    d59c:	ac07      	add	r4, sp, #28
    d59e:	4641      	mov	r1, r8
    d5a0:	7021      	strb	r1, [r4, #0]
	if(isCommand)
    d5a2:	2b00      	cmp	r3, #0
    d5a4:	d043      	beq.n	d62e <SendPacket+0xb6>
		tParam.flags.bits.packetType = PACKET_TYPE_COMMAND;
    d5a6:	0023      	movs	r3, r4
    d5a8:	b2cc      	uxtb	r4, r1
    d5aa:	2103      	movs	r1, #3
    d5ac:	438c      	bics	r4, r1
    d5ae:	2101      	movs	r1, #1
    d5b0:	4688      	mov	r8, r1
    d5b2:	4641      	mov	r1, r8
    d5b4:	430c      	orrs	r4, r1
    d5b6:	701c      	strb	r4, [r3, #0]
   if(Broadcast)
    d5b8:	2d00      	cmp	r5, #0
    d5ba:	d13e      	bne.n	d63a <SendPacket+0xc2>
	   tParam.flags.bits.ackReq = ackReq;
    d5bc:	ac07      	add	r4, sp, #28
    d5be:	2301      	movs	r3, #1
    d5c0:	4013      	ands	r3, r2
    d5c2:	015a      	lsls	r2, r3, #5
    d5c4:	7823      	ldrb	r3, [r4, #0]
    d5c6:	2120      	movs	r1, #32
    d5c8:	438b      	bics	r3, r1
    d5ca:	4313      	orrs	r3, r2
    d5cc:	7023      	strb	r3, [r4, #0]
    tParam.flags.bits.broadcast = Broadcast;
    d5ce:	ac07      	add	r4, sp, #28
    d5d0:	2201      	movs	r2, #1
    d5d2:	0013      	movs	r3, r2
    d5d4:	402b      	ands	r3, r5
    d5d6:	009b      	lsls	r3, r3, #2
    d5d8:	4698      	mov	r8, r3
    d5da:	7823      	ldrb	r3, [r4, #0]
    d5dc:	2104      	movs	r1, #4
    d5de:	438b      	bics	r3, r1
    tParam.flags.bits.secEn = SecurityEnabled;
    d5e0:	4010      	ands	r0, r2
    d5e2:	00c0      	lsls	r0, r0, #3
    d5e4:	4641      	mov	r1, r8
    d5e6:	430b      	orrs	r3, r1
    d5e8:	2108      	movs	r1, #8
    d5ea:	438b      	bics	r3, r1
        tParam.altSrcAddr = 0;
    d5ec:	2100      	movs	r1, #0
    d5ee:	7261      	strb	r1, [r4, #9]
        tParam.altDestAddr = (Broadcast) ? true : false;
    d5f0:	7225      	strb	r5, [r4, #8]
        tParam.flags.bits.destPrsnt = (Broadcast) ? 0:1;
    d5f2:	2101      	movs	r1, #1
    d5f4:	4688      	mov	r8, r1
    d5f6:	4641      	mov	r1, r8
    d5f8:	404d      	eors	r5, r1
    d5fa:	4015      	ands	r5, r2
    d5fc:	01ad      	lsls	r5, r5, #6
    d5fe:	4318      	orrs	r0, r3
    d600:	2340      	movs	r3, #64	; 0x40
    d602:	4398      	bics	r0, r3
        tParam.flags.bits.sourcePrsnt = 1;
    d604:	4328      	orrs	r0, r5
    d606:	3bc0      	subs	r3, #192	; 0xc0
    d608:	4318      	orrs	r0, r3
    d60a:	7020      	strb	r0, [r4, #0]
        tParam.DestPANID.Val = DestinationPANID.Val;
    d60c:	4663      	mov	r3, ip
    d60e:	8163      	strh	r3, [r4, #10]
    status = MiMAC_SendPacket(tParam, msgPtr, msgLen, msghandle, ConfCallback);
    d610:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    d612:	9302      	str	r3, [sp, #8]
    d614:	9701      	str	r7, [sp, #4]
    d616:	9600      	str	r6, [sp, #0]
    d618:	9b14      	ldr	r3, [sp, #80]	; 0x50
    d61a:	9807      	ldr	r0, [sp, #28]
    d61c:	9905      	ldr	r1, [sp, #20]
    d61e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d620:	4c09      	ldr	r4, [pc, #36]	; (d648 <SendPacket+0xd0>)
    d622:	47a0      	blx	r4
}
    d624:	b00b      	add	sp, #44	; 0x2c
    d626:	bc0c      	pop	{r2, r3}
    d628:	4690      	mov	r8, r2
    d62a:	4699      	mov	r9, r3
    d62c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tParam.flags.bits.packetType = PACKET_TYPE_DATA;
    d62e:	ab07      	add	r3, sp, #28
    d630:	781c      	ldrb	r4, [r3, #0]
    d632:	2103      	movs	r1, #3
    d634:	438c      	bics	r4, r1
    d636:	701c      	strb	r4, [r3, #0]
    d638:	e7be      	b.n	d5b8 <SendPacket+0x40>
	tParam.flags.bits.ackReq = 0;
    d63a:	ac07      	add	r4, sp, #28
    d63c:	7823      	ldrb	r3, [r4, #0]
    d63e:	2220      	movs	r2, #32
    d640:	4393      	bics	r3, r2
    d642:	7023      	strb	r3, [r4, #0]
    d644:	e7c3      	b.n	d5ce <SendPacket+0x56>
    d646:	46c0      	nop			; (mov r8, r8)
    d648:	0000c2fd 	.word	0x0000c2fd

0000d64c <MiApp_BroadcastConnectionTable>:
{
    d64c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d64e:	46de      	mov	lr, fp
    d650:	4657      	mov	r7, sl
    d652:	464e      	mov	r6, r9
    d654:	4645      	mov	r5, r8
    d656:	b5e0      	push	{r5, r6, r7, lr}
    d658:	b08d      	sub	sp, #52	; 0x34
	uint16_t broadcastAddress = 0xFFFF;
    d65a:	2201      	movs	r2, #1
    d65c:	4252      	negs	r2, r2
    d65e:	231e      	movs	r3, #30
    d660:	a904      	add	r1, sp, #16
    d662:	468c      	mov	ip, r1
    d664:	4463      	add	r3, ip
    d666:	801a      	strh	r2, [r3, #0]
    if ((conn_size  * 4 ) + 4 < TX_BUFFER_SIZE)
    d668:	4b61      	ldr	r3, [pc, #388]	; (d7f0 <MiApp_BroadcastConnectionTable+0x1a4>)
    d66a:	781c      	ldrb	r4, [r3, #0]
    d66c:	3401      	adds	r4, #1
    d66e:	00a4      	lsls	r4, r4, #2
    d670:	2cd9      	cmp	r4, #217	; 0xd9
    d672:	dd1a      	ble.n	d6aa <MiApp_BroadcastConnectionTable+0x5e>
        broadcast_count = ((conn_size * 4) + 4 )/ TX_BUFFER_SIZE;
    d674:	21da      	movs	r1, #218	; 0xda
    d676:	0020      	movs	r0, r4
    d678:	4b5e      	ldr	r3, [pc, #376]	; (d7f4 <MiApp_BroadcastConnectionTable+0x1a8>)
    d67a:	4798      	blx	r3
    d67c:	b2c3      	uxtb	r3, r0
    d67e:	001d      	movs	r5, r3
    d680:	9309      	str	r3, [sp, #36]	; 0x24
        if ((conn_size *4) + 4 % TX_BUFFER_SIZE != 0)
    d682:	2c00      	cmp	r4, #0
    d684:	d007      	beq.n	d696 <MiApp_BroadcastConnectionTable+0x4a>
            broadcast_count = broadcast_count + ((conn_size *4) + 4 )% TX_BUFFER_SIZE;
    d686:	21da      	movs	r1, #218	; 0xda
    d688:	0020      	movs	r0, r4
    d68a:	4b5b      	ldr	r3, [pc, #364]	; (d7f8 <MiApp_BroadcastConnectionTable+0x1ac>)
    d68c:	4798      	blx	r3
    d68e:	46ac      	mov	ip, r5
    d690:	4461      	add	r1, ip
    d692:	b2cb      	uxtb	r3, r1
    d694:	9309      	str	r3, [sp, #36]	; 0x24
    for (i = 0 ; i < broadcast_count ; i++)
    d696:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d698:	2b00      	cmp	r3, #0
    d69a:	d108      	bne.n	d6ae <MiApp_BroadcastConnectionTable+0x62>
}
    d69c:	b00d      	add	sp, #52	; 0x34
    d69e:	bc3c      	pop	{r2, r3, r4, r5}
    d6a0:	4690      	mov	r8, r2
    d6a2:	4699      	mov	r9, r3
    d6a4:	46a2      	mov	sl, r4
    d6a6:	46ab      	mov	fp, r5
    d6a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        broadcast_count = 1;
    d6aa:	2301      	movs	r3, #1
    d6ac:	9309      	str	r3, [sp, #36]	; 0x24
    d6ae:	2300      	movs	r3, #0
    d6b0:	4698      	mov	r8, r3
    d6b2:	3335      	adds	r3, #53	; 0x35
    d6b4:	469a      	mov	sl, r3
    d6b6:	2700      	movs	r7, #0
                    dataPtr[dataLen++] = (ConnectionTable[j].Address[0]);
    d6b8:	4652      	mov	r2, sl
    d6ba:	9207      	str	r2, [sp, #28]
    d6bc:	46c2      	mov	sl, r8
    d6be:	e068      	b.n	d792 <MiApp_BroadcastConnectionTable+0x146>
                    dataPtr[dataLen++] = 0xff;
    d6c0:	4661      	mov	r1, ip
    d6c2:	54a1      	strb	r1, [r4, r2]
    d6c4:	1c51      	adds	r1, r2, #1
                    dataPtr[dataLen++] = 0xff;
    d6c6:	b2c9      	uxtb	r1, r1
    d6c8:	4666      	mov	r6, ip
    d6ca:	5466      	strb	r6, [r4, r1]
                    dataPtr[dataLen++] = 0xff;
    d6cc:	1cd1      	adds	r1, r2, #3
    d6ce:	b2c9      	uxtb	r1, r1
                    dataPtr[dataLen++] = 0xff;
    d6d0:	1c96      	adds	r6, r2, #2
                    dataPtr[dataLen++] = 0xff;
    d6d2:	b2f6      	uxtb	r6, r6
    d6d4:	4667      	mov	r7, ip
    d6d6:	55a7      	strb	r7, [r4, r6]
                    dataPtr[dataLen++] = j;
    d6d8:	3204      	adds	r2, #4
    d6da:	b2d2      	uxtb	r2, r2
    d6dc:	5463      	strb	r3, [r4, r1]
                count = count + 4;
    d6de:	3004      	adds	r0, #4
    d6e0:	b2c0      	uxtb	r0, r0
        for (j= ((TX_BUFFER_SIZE-4)/4)*i ;j<((TX_BUFFER_SIZE-4)/4)*(i+1);j++)
    d6e2:	3301      	adds	r3, #1
    d6e4:	b2db      	uxtb	r3, r3
    d6e6:	0019      	movs	r1, r3
    d6e8:	42ab      	cmp	r3, r5
    d6ea:	da20      	bge.n	d72e <MiApp_BroadcastConnectionTable+0xe2>
            if (j < conn_size)
    d6ec:	465e      	mov	r6, fp
    d6ee:	7836      	ldrb	r6, [r6, #0]
    d6f0:	429e      	cmp	r6, r3
    d6f2:	d9f6      	bls.n	d6e2 <MiApp_BroadcastConnectionTable+0x96>
                if (ConnectionTable[j].status.bits.isValid)
    d6f4:	010e      	lsls	r6, r1, #4
    d6f6:	4f41      	ldr	r7, [pc, #260]	; (d7fc <MiApp_BroadcastConnectionTable+0x1b0>)
    d6f8:	46b9      	mov	r9, r7
    d6fa:	444e      	add	r6, r9
    d6fc:	7b36      	ldrb	r6, [r6, #12]
    d6fe:	09f6      	lsrs	r6, r6, #7
    d700:	d0de      	beq.n	d6c0 <MiApp_BroadcastConnectionTable+0x74>
                    dataPtr[dataLen++] = (ConnectionTable[j].Address[0]);
    d702:	0109      	lsls	r1, r1, #4
    d704:	4449      	add	r1, r9
    d706:	790e      	ldrb	r6, [r1, #4]
    d708:	54a6      	strb	r6, [r4, r2]
                    dataPtr[dataLen++] = (ConnectionTable[j].Address[1]);
    d70a:	794e      	ldrb	r6, [r1, #5]
    d70c:	46b1      	mov	r9, r6
                    dataPtr[dataLen++] = (ConnectionTable[j].Address[0]);
    d70e:	1c56      	adds	r6, r2, #1
                    dataPtr[dataLen++] = (ConnectionTable[j].Address[1]);
    d710:	b2f6      	uxtb	r6, r6
    d712:	464f      	mov	r7, r9
    d714:	55a7      	strb	r7, [r4, r6]
                    dataPtr[dataLen++] = (ConnectionTable[j].Address[2]);
    d716:	1cd6      	adds	r6, r2, #3
    d718:	b2f6      	uxtb	r6, r6
    d71a:	7989      	ldrb	r1, [r1, #6]
    d71c:	4689      	mov	r9, r1
                    dataPtr[dataLen++] = (ConnectionTable[j].Address[1]);
    d71e:	1c91      	adds	r1, r2, #2
                    dataPtr[dataLen++] = (ConnectionTable[j].Address[2]);
    d720:	b2c9      	uxtb	r1, r1
    d722:	464f      	mov	r7, r9
    d724:	5467      	strb	r7, [r4, r1]
                    dataPtr[dataLen++] = j;
    d726:	3204      	adds	r2, #4
    d728:	b2d2      	uxtb	r2, r2
    d72a:	55a3      	strb	r3, [r4, r6]
    d72c:	e7d7      	b.n	d6de <MiApp_BroadcastConnectionTable+0x92>
        for (k=count;k<TX_BUFFER_SIZE;k++)
    d72e:	28d9      	cmp	r0, #217	; 0xd9
    d730:	d85b      	bhi.n	d7ea <MiApp_BroadcastConnectionTable+0x19e>
        count = 4;
    d732:	0011      	movs	r1, r2
            dataPtr[dataLen++] = 0xFF;   // Garbage Value
    d734:	26ff      	movs	r6, #255	; 0xff
    d736:	1a82      	subs	r2, r0, r2
    d738:	b2d2      	uxtb	r2, r2
    d73a:	1c4f      	adds	r7, r1, #1
    d73c:	b2ff      	uxtb	r7, r7
    d73e:	5466      	strb	r6, [r4, r1]
    d740:	0039      	movs	r1, r7
        for (k=count;k<TX_BUFFER_SIZE;k++)
    d742:	19d3      	adds	r3, r2, r7
    d744:	b2db      	uxtb	r3, r3
    d746:	2bd9      	cmp	r3, #217	; 0xd9
    d748:	d9f7      	bls.n	d73a <MiApp_BroadcastConnectionTable+0xee>
        SendPacket(true, myPANID,(uint8_t*)&broadcastAddress, true, false, dataLen, dataPtr,0, true, CommandConfCallback);
    d74a:	4b2d      	ldr	r3, [pc, #180]	; (d800 <MiApp_BroadcastConnectionTable+0x1b4>)
    d74c:	8819      	ldrh	r1, [r3, #0]
    d74e:	4b2d      	ldr	r3, [pc, #180]	; (d804 <MiApp_BroadcastConnectionTable+0x1b8>)
    d750:	9305      	str	r3, [sp, #20]
    d752:	2301      	movs	r3, #1
    d754:	9304      	str	r3, [sp, #16]
    d756:	2300      	movs	r3, #0
    d758:	9303      	str	r3, [sp, #12]
    d75a:	9402      	str	r4, [sp, #8]
    d75c:	9701      	str	r7, [sp, #4]
    d75e:	9300      	str	r3, [sp, #0]
    d760:	3301      	adds	r3, #1
    d762:	221e      	movs	r2, #30
    d764:	a804      	add	r0, sp, #16
    d766:	4684      	mov	ip, r0
    d768:	4462      	add	r2, ip
    d76a:	2001      	movs	r0, #1
    d76c:	4d26      	ldr	r5, [pc, #152]	; (d808 <MiApp_BroadcastConnectionTable+0x1bc>)
    d76e:	47a8      	blx	r5
		MiMem_Free(dataPtr);
    d770:	0020      	movs	r0, r4
    d772:	4b26      	ldr	r3, [pc, #152]	; (d80c <MiApp_BroadcastConnectionTable+0x1c0>)
    d774:	4798      	blx	r3
    for (i = 0 ; i < broadcast_count ; i++)
    d776:	4646      	mov	r6, r8
    d778:	3601      	adds	r6, #1
    d77a:	b2f3      	uxtb	r3, r6
    d77c:	4698      	mov	r8, r3
    d77e:	9b07      	ldr	r3, [sp, #28]
    d780:	3335      	adds	r3, #53	; 0x35
    d782:	9307      	str	r3, [sp, #28]
    d784:	2335      	movs	r3, #53	; 0x35
    d786:	469c      	mov	ip, r3
    d788:	44e2      	add	sl, ip
    d78a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d78c:	4598      	cmp	r8, r3
    d78e:	d300      	bcc.n	d792 <MiApp_BroadcastConnectionTable+0x146>
    d790:	e784      	b.n	d69c <MiApp_BroadcastConnectionTable+0x50>
        dataPtr = MiMem_Alloc(TX_BUFFER_SIZE);
    d792:	20da      	movs	r0, #218	; 0xda
    d794:	4b1e      	ldr	r3, [pc, #120]	; (d810 <MiApp_BroadcastConnectionTable+0x1c4>)
    d796:	4798      	blx	r3
    d798:	1e04      	subs	r4, r0, #0
        if (NULL == dataPtr)
    d79a:	d100      	bne.n	d79e <MiApp_BroadcastConnectionTable+0x152>
    d79c:	e77e      	b.n	d69c <MiApp_BroadcastConnectionTable+0x50>
        dataPtr[dataLen++] = CMD_SHARE_CONNECTION_TABLE;
    d79e:	2377      	movs	r3, #119	; 0x77
    d7a0:	55c3      	strb	r3, [r0, r7]
        dataPtr[dataLen++] = conn_size; // No of end devices in network
    d7a2:	4b13      	ldr	r3, [pc, #76]	; (d7f0 <MiApp_BroadcastConnectionTable+0x1a4>)
    d7a4:	781a      	ldrb	r2, [r3, #0]
        dataPtr[dataLen++] = CMD_SHARE_CONNECTION_TABLE;
    d7a6:	1c7b      	adds	r3, r7, #1
        dataPtr[dataLen++] = conn_size; // No of end devices in network
    d7a8:	b2db      	uxtb	r3, r3
    d7aa:	54c2      	strb	r2, [r0, r3]
        dataPtr[dataLen++] = (((TX_BUFFER_SIZE-4)/4)*i);
    d7ac:	4653      	mov	r3, sl
    d7ae:	466a      	mov	r2, sp
    d7b0:	2123      	movs	r1, #35	; 0x23
    d7b2:	1852      	adds	r2, r2, r1
    d7b4:	7013      	strb	r3, [r2, #0]
    d7b6:	466b      	mov	r3, sp
    d7b8:	2223      	movs	r2, #35	; 0x23
    d7ba:	189b      	adds	r3, r3, r2
    d7bc:	781b      	ldrb	r3, [r3, #0]
        dataPtr[dataLen++] = conn_size; // No of end devices in network
    d7be:	1cba      	adds	r2, r7, #2
        dataPtr[dataLen++] = (((TX_BUFFER_SIZE-4)/4)*i);
    d7c0:	b2d2      	uxtb	r2, r2
    d7c2:	5483      	strb	r3, [r0, r2]
        dataPtr[dataLen++] = (((TX_BUFFER_SIZE-4)/4)*(i+1));
    d7c4:	1d3a      	adds	r2, r7, #4
    d7c6:	b2d2      	uxtb	r2, r2
        dataPtr[dataLen++] = (((TX_BUFFER_SIZE-4)/4)*i);
    d7c8:	3703      	adds	r7, #3
        dataPtr[dataLen++] = (((TX_BUFFER_SIZE-4)/4)*(i+1));
    d7ca:	b2f9      	uxtb	r1, r7
    d7cc:	9d07      	ldr	r5, [sp, #28]
    d7ce:	5465      	strb	r5, [r4, r1]
        for (j= ((TX_BUFFER_SIZE-4)/4)*i ;j<((TX_BUFFER_SIZE-4)/4)*(i+1);j++)
    d7d0:	21ff      	movs	r1, #255	; 0xff
    d7d2:	4650      	mov	r0, sl
    d7d4:	4001      	ands	r1, r0
    d7d6:	42a9      	cmp	r1, r5
    d7d8:	da05      	bge.n	d7e6 <MiApp_BroadcastConnectionTable+0x19a>
    d7da:	2004      	movs	r0, #4
            if (j < conn_size)
    d7dc:	4e04      	ldr	r6, [pc, #16]	; (d7f0 <MiApp_BroadcastConnectionTable+0x1a4>)
    d7de:	46b3      	mov	fp, r6
                    dataPtr[dataLen++] = 0xff;
    d7e0:	26ff      	movs	r6, #255	; 0xff
    d7e2:	46b4      	mov	ip, r6
    d7e4:	e782      	b.n	d6ec <MiApp_BroadcastConnectionTable+0xa0>
        count = 4;
    d7e6:	2004      	movs	r0, #4
    d7e8:	e7a3      	b.n	d732 <MiApp_BroadcastConnectionTable+0xe6>
        for (k=count;k<TX_BUFFER_SIZE;k++)
    d7ea:	0017      	movs	r7, r2
    d7ec:	e7ad      	b.n	d74a <MiApp_BroadcastConnectionTable+0xfe>
    d7ee:	46c0      	nop			; (mov r8, r8)
    d7f0:	20003481 	.word	0x20003481
    d7f4:	0001520d 	.word	0x0001520d
    d7f8:	000153d9 	.word	0x000153d9
    d7fc:	20003318 	.word	0x20003318
    d800:	20003478 	.word	0x20003478
    d804:	0000d321 	.word	0x0000d321
    d808:	0000d579 	.word	0x0000d579
    d80c:	0000f56d 	.word	0x0000f56d
    d810:	0000f4b1 	.word	0x0000f4b1

0000d814 <connectionRespConfCallback>:

static void connectionRespConfCallback(uint8_t msgConfHandle, miwi_status_t status, uint8_t* msgPointer)
{
    d814:	b510      	push	{r4, lr}
	#ifdef ENABLE_PERIODIC_CONNECTIONTABLE_SHARE
		#if defined(ENABLE_DEBUG_LOG)
		//printf("\n\rBroadcasting connection table...\n\r");
		#endif
		/* Broadcast connection table upon a device join */
		MiApp_BroadcastConnectionTable();
    d816:	4b07      	ldr	r3, [pc, #28]	; (d834 <connectionRespConfCallback+0x20>)
    d818:	4798      	blx	r3
		if(!sheerPeerDevInfoTimerSet)
    d81a:	4b07      	ldr	r3, [pc, #28]	; (d838 <connectionRespConfCallback+0x24>)
    d81c:	781b      	ldrb	r3, [r3, #0]
    d81e:	2b00      	cmp	r3, #0
    d820:	d000      	beq.n	d824 <connectionRespConfCallback+0x10>
		   sheerPeerDevInfoTimerSet = true;
		}

	#endif
	#endif
}
    d822:	bd10      	pop	{r4, pc}
		   sharePeerDevInfoTimerTick.Val = MiWi_TickGet();
    d824:	4b05      	ldr	r3, [pc, #20]	; (d83c <connectionRespConfCallback+0x28>)
    d826:	4798      	blx	r3
    d828:	4b05      	ldr	r3, [pc, #20]	; (d840 <connectionRespConfCallback+0x2c>)
    d82a:	6018      	str	r0, [r3, #0]
		   sheerPeerDevInfoTimerSet = true;
    d82c:	2201      	movs	r2, #1
    d82e:	4b02      	ldr	r3, [pc, #8]	; (d838 <connectionRespConfCallback+0x24>)
    d830:	701a      	strb	r2, [r3, #0]
}
    d832:	e7f6      	b.n	d822 <connectionRespConfCallback+0xe>
    d834:	0000d64d 	.word	0x0000d64d
    d838:	200007e0 	.word	0x200007e0
    d83c:	0000f6f1 	.word	0x0000f6f1
    d840:	20003790 	.word	0x20003790

0000d844 <appAckWaitDataCallback>:
{
    d844:	b5f0      	push	{r4, r5, r6, r7, lr}
    d846:	b087      	sub	sp, #28
    d848:	0006      	movs	r6, r0
    d84a:	000c      	movs	r4, r1
	if (PAN_COORD == role)
    d84c:	4b73      	ldr	r3, [pc, #460]	; (da1c <appAckWaitDataCallback+0x1d8>)
    d84e:	781b      	ldrb	r3, [r3, #0]
    d850:	2b01      	cmp	r3, #1
    d852:	d004      	beq.n	d85e <appAckWaitDataCallback+0x1a>
	else if (role == END_DEVICE)
    d854:	2b02      	cmp	r3, #2
    d856:	d100      	bne.n	d85a <appAckWaitDataCallback+0x16>
    d858:	e0a0      	b.n	d99c <appAckWaitDataCallback+0x158>
}
    d85a:	b007      	add	sp, #28
    d85c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d85e:	4b70      	ldr	r3, [pc, #448]	; (da20 <appAckWaitDataCallback+0x1dc>)
	if (PAN_COORD == role)
    d860:	2100      	movs	r1, #0
    d862:	e078      	b.n	d956 <appAckWaitDataCallback+0x112>
								uint8_t ed_index = Find_Index(forwardMessages[loopIndex].msg);
    d864:	4b6f      	ldr	r3, [pc, #444]	; (da24 <appAckWaitDataCallback+0x1e0>)
    d866:	4798      	blx	r3
    d868:	0005      	movs	r5, r0
								if (0xFF != ed_index)
    d86a:	28ff      	cmp	r0, #255	; 0xff
    d86c:	d01a      	beq.n	d8a4 <appAckWaitDataCallback+0x60>
									dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_CMD_DATA_TO_ENDDEV_SUCCESS));
    d86e:	2010      	movs	r0, #16
    d870:	4b6d      	ldr	r3, [pc, #436]	; (da28 <appAckWaitDataCallback+0x1e4>)
    d872:	4798      	blx	r3
    d874:	1e07      	subs	r7, r0, #0
									if (NULL == dataPtr)
    d876:	d0f0      	beq.n	d85a <appAckWaitDataCallback+0x16>
									dataPtr[0] = CMD_DATA_TO_ENDDEV_SUCCESS;
    d878:	23da      	movs	r3, #218	; 0xda
    d87a:	7003      	strb	r3, [r0, #0]
									SendPacket(false, myPANID, ConnectionTable[ed_index].Address, true, true, 1, dataPtr, 0, true, ForwardmessageConfCallback);
    d87c:	012d      	lsls	r5, r5, #4
    d87e:	1d2a      	adds	r2, r5, #4
    d880:	4b6a      	ldr	r3, [pc, #424]	; (da2c <appAckWaitDataCallback+0x1e8>)
    d882:	18d2      	adds	r2, r2, r3
    d884:	4b6a      	ldr	r3, [pc, #424]	; (da30 <appAckWaitDataCallback+0x1ec>)
    d886:	8819      	ldrh	r1, [r3, #0]
    d888:	4b6a      	ldr	r3, [pc, #424]	; (da34 <appAckWaitDataCallback+0x1f0>)
    d88a:	9305      	str	r3, [sp, #20]
    d88c:	2301      	movs	r3, #1
    d88e:	9304      	str	r3, [sp, #16]
    d890:	2000      	movs	r0, #0
    d892:	9003      	str	r0, [sp, #12]
    d894:	9702      	str	r7, [sp, #8]
    d896:	9301      	str	r3, [sp, #4]
    d898:	9300      	str	r3, [sp, #0]
    d89a:	4d67      	ldr	r5, [pc, #412]	; (da38 <appAckWaitDataCallback+0x1f4>)
    d89c:	47a8      	blx	r5
									MiMem_Free(dataPtr);
    d89e:	0038      	movs	r0, r7
    d8a0:	4b66      	ldr	r3, [pc, #408]	; (da3c <appAckWaitDataCallback+0x1f8>)
    d8a2:	4798      	blx	r3
				 if(indirectMessages[loopIndex].indirectDataHandle == handle)
    d8a4:	231c      	movs	r3, #28
    d8a6:	33ff      	adds	r3, #255	; 0xff
    d8a8:	4a65      	ldr	r2, [pc, #404]	; (da40 <appAckWaitDataCallback+0x1fc>)
    d8aa:	5cd3      	ldrb	r3, [r2, r3]
    d8ac:	42b3      	cmp	r3, r6
    d8ae:	d132      	bne.n	d916 <appAckWaitDataCallback+0xd2>
						 uint8_t ed_index = Find_Index(indirectMessages[loopIndex].PayLoad);
    d8b0:	4864      	ldr	r0, [pc, #400]	; (da44 <appAckWaitDataCallback+0x200>)
    d8b2:	4b5c      	ldr	r3, [pc, #368]	; (da24 <appAckWaitDataCallback+0x1e0>)
    d8b4:	4798      	blx	r3
    d8b6:	0004      	movs	r4, r0
						 if (0xFF != ed_index)
    d8b8:	28ff      	cmp	r0, #255	; 0xff
    d8ba:	d10a      	bne.n	d8d2 <appAckWaitDataCallback+0x8e>
				 if(indirectMessages[loopIndex].indirectDataHandle == handle)
    d8bc:	4b62      	ldr	r3, [pc, #392]	; (da48 <appAckWaitDataCallback+0x204>)
    d8be:	4a60      	ldr	r2, [pc, #384]	; (da40 <appAckWaitDataCallback+0x1fc>)
    d8c0:	5cd3      	ldrb	r3, [r2, r3]
    d8c2:	42b3      	cmp	r3, r6
    d8c4:	d1c9      	bne.n	d85a <appAckWaitDataCallback+0x16>
						 uint8_t ed_index = Find_Index(indirectMessages[loopIndex].PayLoad);
    d8c6:	4861      	ldr	r0, [pc, #388]	; (da4c <appAckWaitDataCallback+0x208>)
    d8c8:	4b56      	ldr	r3, [pc, #344]	; (da24 <appAckWaitDataCallback+0x1e0>)
    d8ca:	4798      	blx	r3
    d8cc:	0004      	movs	r4, r0
						 if (0xFF != ed_index)
    d8ce:	28ff      	cmp	r0, #255	; 0xff
    d8d0:	d0c3      	beq.n	d85a <appAckWaitDataCallback+0x16>
							 dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_CMD_DATA_TO_ENDDEV_SUCCESS));
    d8d2:	2010      	movs	r0, #16
    d8d4:	4b54      	ldr	r3, [pc, #336]	; (da28 <appAckWaitDataCallback+0x1e4>)
    d8d6:	4798      	blx	r3
    d8d8:	1e05      	subs	r5, r0, #0
							 if (NULL == dataPtr)
    d8da:	d0be      	beq.n	d85a <appAckWaitDataCallback+0x16>
							 dataPtr[0] = CMD_DATA_TO_ENDDEV_SUCCESS;
    d8dc:	23da      	movs	r3, #218	; 0xda
    d8de:	7003      	strb	r3, [r0, #0]
							 SendPacket(false, myPANID, ConnectionTable[ed_index].Address, true, true, 1, dataPtr, 0, true, ForwardmessageConfCallback);
    d8e0:	0122      	lsls	r2, r4, #4
    d8e2:	3204      	adds	r2, #4
    d8e4:	4b51      	ldr	r3, [pc, #324]	; (da2c <appAckWaitDataCallback+0x1e8>)
    d8e6:	18d2      	adds	r2, r2, r3
    d8e8:	4b51      	ldr	r3, [pc, #324]	; (da30 <appAckWaitDataCallback+0x1ec>)
    d8ea:	8819      	ldrh	r1, [r3, #0]
    d8ec:	4b51      	ldr	r3, [pc, #324]	; (da34 <appAckWaitDataCallback+0x1f0>)
    d8ee:	9305      	str	r3, [sp, #20]
    d8f0:	2301      	movs	r3, #1
    d8f2:	9304      	str	r3, [sp, #16]
    d8f4:	2000      	movs	r0, #0
    d8f6:	9003      	str	r0, [sp, #12]
    d8f8:	9502      	str	r5, [sp, #8]
    d8fa:	9301      	str	r3, [sp, #4]
    d8fc:	9300      	str	r3, [sp, #0]
    d8fe:	4c4e      	ldr	r4, [pc, #312]	; (da38 <appAckWaitDataCallback+0x1f4>)
    d900:	47a0      	blx	r4
							 MiMem_Free(dataPtr);
    d902:	0028      	movs	r0, r5
    d904:	4b4d      	ldr	r3, [pc, #308]	; (da3c <appAckWaitDataCallback+0x1f8>)
    d906:	4798      	blx	r3
							 break;
    d908:	e7a7      	b.n	d85a <appAckWaitDataCallback+0x16>
				 if(indirectMessages[loopIndex].indirectDataHandle == handle)
    d90a:	231c      	movs	r3, #28
    d90c:	33ff      	adds	r3, #255	; 0xff
    d90e:	4a4c      	ldr	r2, [pc, #304]	; (da40 <appAckWaitDataCallback+0x1fc>)
    d910:	5cd3      	ldrb	r3, [r2, r3]
    d912:	42b3      	cmp	r3, r6
    d914:	d00c      	beq.n	d930 <appAckWaitDataCallback+0xec>
    d916:	4b4c      	ldr	r3, [pc, #304]	; (da48 <appAckWaitDataCallback+0x204>)
    d918:	4a49      	ldr	r2, [pc, #292]	; (da40 <appAckWaitDataCallback+0x1fc>)
    d91a:	5cd3      	ldrb	r3, [r2, r3]
    d91c:	42b3      	cmp	r3, r6
    d91e:	d19c      	bne.n	d85a <appAckWaitDataCallback+0x16>
					 if(status == SUCCESS)
    d920:	2c00      	cmp	r4, #0
    d922:	d0d0      	beq.n	d8c6 <appAckWaitDataCallback+0x82>
						 --indirect_Packet;
    d924:	4a4a      	ldr	r2, [pc, #296]	; (da50 <appAckWaitDataCallback+0x20c>)
    d926:	7813      	ldrb	r3, [r2, #0]
    d928:	3b01      	subs	r3, #1
    d92a:	b2db      	uxtb	r3, r3
    d92c:	7013      	strb	r3, [r2, #0]
    d92e:	e794      	b.n	d85a <appAckWaitDataCallback+0x16>
					 if(status == SUCCESS)
    d930:	2c00      	cmp	r4, #0
    d932:	d0bd      	beq.n	d8b0 <appAckWaitDataCallback+0x6c>
						 --indirect_Packet;
    d934:	4a46      	ldr	r2, [pc, #280]	; (da50 <appAckWaitDataCallback+0x20c>)
    d936:	7813      	ldrb	r3, [r2, #0]
    d938:	3b01      	subs	r3, #1
    d93a:	b2db      	uxtb	r3, r3
    d93c:	7013      	strb	r3, [r2, #0]
				 if(indirectMessages[loopIndex].indirectDataHandle == handle)
    d93e:	4b42      	ldr	r3, [pc, #264]	; (da48 <appAckWaitDataCallback+0x204>)
    d940:	4a3f      	ldr	r2, [pc, #252]	; (da40 <appAckWaitDataCallback+0x1fc>)
    d942:	5cd3      	ldrb	r3, [r2, r3]
    d944:	42b3      	cmp	r3, r6
    d946:	d000      	beq.n	d94a <appAckWaitDataCallback+0x106>
    d948:	e787      	b.n	d85a <appAckWaitDataCallback+0x16>
    d94a:	e7eb      	b.n	d924 <appAckWaitDataCallback+0xe0>
    d94c:	3101      	adds	r1, #1
    d94e:	3315      	adds	r3, #21
    d950:	33ff      	adds	r3, #255	; 0xff
			for (loopIndex = 0; loopIndex < FORWARD_PACKET_BANK_SIZE; loopIndex++)
    d952:	2906      	cmp	r1, #6
    d954:	d0d9      	beq.n	d90a <appAckWaitDataCallback+0xc6>
					if(forwardMessages[loopIndex].fromEDToED)
    d956:	000f      	movs	r7, r1
    d958:	0018      	movs	r0, r3
    d95a:	1edd      	subs	r5, r3, #3
    d95c:	782d      	ldrb	r5, [r5, #0]
    d95e:	2d00      	cmp	r5, #0
    d960:	d0f4      	beq.n	d94c <appAckWaitDataCallback+0x108>
						if(msgPointer == (uint8_t*)&(forwardMessages[loopIndex].msg))
    d962:	429a      	cmp	r2, r3
    d964:	d1f2      	bne.n	d94c <appAckWaitDataCallback+0x108>
							forwardMessages[loopIndex].fromEDToED = 0;
    d966:	4a3b      	ldr	r2, [pc, #236]	; (da54 <appAckWaitDataCallback+0x210>)
    d968:	238a      	movs	r3, #138	; 0x8a
    d96a:	005b      	lsls	r3, r3, #1
    d96c:	435f      	muls	r7, r3
    d96e:	19d1      	adds	r1, r2, r7
    d970:	2300      	movs	r3, #0
    d972:	748b      	strb	r3, [r1, #18]
							forwardMessages[loopIndex].confCallback = NULL;
    d974:	50bb      	str	r3, [r7, r2]
							if (SUCCESS == status)
    d976:	2c00      	cmp	r4, #0
    d978:	d100      	bne.n	d97c <appAckWaitDataCallback+0x138>
    d97a:	e773      	b.n	d864 <appAckWaitDataCallback+0x20>
								if(FW_Stat)
    d97c:	4b36      	ldr	r3, [pc, #216]	; (da58 <appAckWaitDataCallback+0x214>)
    d97e:	781b      	ldrb	r3, [r3, #0]
    d980:	2b00      	cmp	r3, #0
    d982:	d004      	beq.n	d98e <appAckWaitDataCallback+0x14a>
								  --FW_Stat;
    d984:	4a34      	ldr	r2, [pc, #208]	; (da58 <appAckWaitDataCallback+0x214>)
    d986:	7813      	ldrb	r3, [r2, #0]
    d988:	3b01      	subs	r3, #1
    d98a:	b2db      	uxtb	r3, r3
    d98c:	7013      	strb	r3, [r2, #0]
				 if(indirectMessages[loopIndex].indirectDataHandle == handle)
    d98e:	231c      	movs	r3, #28
    d990:	33ff      	adds	r3, #255	; 0xff
    d992:	4a2b      	ldr	r2, [pc, #172]	; (da40 <appAckWaitDataCallback+0x1fc>)
    d994:	5cd3      	ldrb	r3, [r2, r3]
    d996:	42b3      	cmp	r3, r6
    d998:	d1bd      	bne.n	d916 <appAckWaitDataCallback+0xd2>
    d99a:	e7cb      	b.n	d934 <appAckWaitDataCallback+0xf0>
    d99c:	4b20      	ldr	r3, [pc, #128]	; (da20 <appAckWaitDataCallback+0x1dc>)
	else if (role == END_DEVICE)
    d99e:	2100      	movs	r1, #0
    d9a0:	e011      	b.n	d9c6 <appAckWaitDataCallback+0x182>
							forwardMessages[loopIndex].confCallback = NULL;
    d9a2:	228a      	movs	r2, #138	; 0x8a
    d9a4:	0052      	lsls	r2, r2, #1
    d9a6:	4355      	muls	r5, r2
    d9a8:	2200      	movs	r2, #0
    d9aa:	492a      	ldr	r1, [pc, #168]	; (da54 <appAckWaitDataCallback+0x210>)
    d9ac:	506a      	str	r2, [r5, r1]
							SwAckReq = false;
    d9ae:	492b      	ldr	r1, [pc, #172]	; (da5c <appAckWaitDataCallback+0x218>)
    d9b0:	700a      	strb	r2, [r1, #0]
							callback(forwardMessages[loopIndex].msghandle, status, NULL);
    d9b2:	0021      	movs	r1, r4
    d9b4:	0030      	movs	r0, r6
    d9b6:	4798      	blx	r3
    d9b8:	e74f      	b.n	d85a <appAckWaitDataCallback+0x16>
    d9ba:	3101      	adds	r1, #1
    d9bc:	3315      	adds	r3, #21
    d9be:	33ff      	adds	r3, #255	; 0xff
		for (loopIndex = 0; loopIndex < FORWARD_PACKET_BANK_SIZE; loopIndex++)
    d9c0:	2906      	cmp	r1, #6
    d9c2:	d100      	bne.n	d9c6 <appAckWaitDataCallback+0x182>
    d9c4:	e749      	b.n	d85a <appAckWaitDataCallback+0x16>
			if((handle == forwardMessages[loopIndex].msghandle) && (msgPointer == (uint8_t*)&(forwardMessages[loopIndex].msg)))
    d9c6:	000d      	movs	r5, r1
    d9c8:	1e98      	subs	r0, r3, #2
    d9ca:	7800      	ldrb	r0, [r0, #0]
    d9cc:	42b0      	cmp	r0, r6
    d9ce:	d1f4      	bne.n	d9ba <appAckWaitDataCallback+0x176>
    d9d0:	429a      	cmp	r2, r3
    d9d2:	d1f2      	bne.n	d9ba <appAckWaitDataCallback+0x176>
				DataConf_callback_t callback = forwardMessages[loopIndex].confCallback;
    d9d4:	238a      	movs	r3, #138	; 0x8a
    d9d6:	005b      	lsls	r3, r3, #1
    d9d8:	434b      	muls	r3, r1
    d9da:	4a1e      	ldr	r2, [pc, #120]	; (da54 <appAckWaitDataCallback+0x210>)
    d9dc:	589b      	ldr	r3, [r3, r2]
				if (NULL != callback)
    d9de:	2b00      	cmp	r3, #0
    d9e0:	d100      	bne.n	d9e4 <appAckWaitDataCallback+0x1a0>
    d9e2:	e73a      	b.n	d85a <appAckWaitDataCallback+0x16>
					if(!SwAckReq && SendData)
    d9e4:	4a1d      	ldr	r2, [pc, #116]	; (da5c <appAckWaitDataCallback+0x218>)
    d9e6:	7812      	ldrb	r2, [r2, #0]
    d9e8:	2a00      	cmp	r2, #0
    d9ea:	d000      	beq.n	d9ee <appAckWaitDataCallback+0x1aa>
    d9ec:	e735      	b.n	d85a <appAckWaitDataCallback+0x16>
    d9ee:	4a1c      	ldr	r2, [pc, #112]	; (da60 <appAckWaitDataCallback+0x21c>)
    d9f0:	7812      	ldrb	r2, [r2, #0]
    d9f2:	2a00      	cmp	r2, #0
    d9f4:	d100      	bne.n	d9f8 <appAckWaitDataCallback+0x1b4>
    d9f6:	e730      	b.n	d85a <appAckWaitDataCallback+0x16>
						SendData = false;
    d9f8:	2100      	movs	r1, #0
    d9fa:	4a19      	ldr	r2, [pc, #100]	; (da60 <appAckWaitDataCallback+0x21c>)
    d9fc:	7011      	strb	r1, [r2, #0]
						if(status == SUCCESS)
    d9fe:	2c00      	cmp	r4, #0
    da00:	d1cf      	bne.n	d9a2 <appAckWaitDataCallback+0x15e>
						  SwAckReq = true;	
    da02:	2201      	movs	r2, #1
    da04:	4b15      	ldr	r3, [pc, #84]	; (da5c <appAckWaitDataCallback+0x218>)
    da06:	701a      	strb	r2, [r3, #0]
						  forwardMessages[loopIndex].TickStart.Val = MiWi_TickGet();
    da08:	4b16      	ldr	r3, [pc, #88]	; (da64 <appAckWaitDataCallback+0x220>)
    da0a:	4798      	blx	r3
    da0c:	238a      	movs	r3, #138	; 0x8a
    da0e:	005b      	lsls	r3, r3, #1
    da10:	436b      	muls	r3, r5
    da12:	4d10      	ldr	r5, [pc, #64]	; (da54 <appAckWaitDataCallback+0x210>)
    da14:	18ed      	adds	r5, r5, r3
    da16:	60e8      	str	r0, [r5, #12]
    da18:	e71f      	b.n	d85a <appAckWaitDataCallback+0x16>
    da1a:	46c0      	nop			; (mov r8, r8)
    da1c:	2000376c 	.word	0x2000376c
    da20:	20002cb1 	.word	0x20002cb1
    da24:	0000d3a5 	.word	0x0000d3a5
    da28:	0000f4b1 	.word	0x0000f4b1
    da2c:	20003318 	.word	0x20003318
    da30:	20003478 	.word	0x20003478
    da34:	0000d335 	.word	0x0000d335
    da38:	0000d579 	.word	0x0000d579
    da3c:	0000f56d 	.word	0x0000f56d
    da40:	200034dc 	.word	0x200034dc
    da44:	200034f8 	.word	0x200034f8
    da48:	0000023b 	.word	0x0000023b
    da4c:	20003618 	.word	0x20003618
    da50:	200007d7 	.word	0x200007d7
    da54:	20002c9c 	.word	0x20002c9c
    da58:	200007cb 	.word	0x200007cb
    da5c:	200007ce 	.word	0x200007ce
    da60:	200007cd 	.word	0x200007cd
    da64:	0000f6f1 	.word	0x0000f6f1

0000da68 <isSameAddress>:
{
    da68:	b510      	push	{r4, lr}
        if( Address1[i] != Address2[i] )
    da6a:	7802      	ldrb	r2, [r0, #0]
    da6c:	780b      	ldrb	r3, [r1, #0]
    da6e:	429a      	cmp	r2, r3
    da70:	d109      	bne.n	da86 <isSameAddress+0x1e>
    da72:	2301      	movs	r3, #1
    da74:	5cc4      	ldrb	r4, [r0, r3]
    da76:	5cca      	ldrb	r2, [r1, r3]
    da78:	4294      	cmp	r4, r2
    da7a:	d106      	bne.n	da8a <isSameAddress+0x22>
    da7c:	3301      	adds	r3, #1
    for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    da7e:	2b08      	cmp	r3, #8
    da80:	d1f8      	bne.n	da74 <isSameAddress+0xc>
    return true;
    da82:	2001      	movs	r0, #1
}
    da84:	bd10      	pop	{r4, pc}
            return false;
    da86:	2000      	movs	r0, #0
    da88:	e7fc      	b.n	da84 <isSameAddress+0x1c>
    da8a:	2000      	movs	r0, #0
    da8c:	e7fa      	b.n	da84 <isSameAddress+0x1c>
    da8e:	Address 0x0000da8e is out of bounds.


0000da90 <MiApp_SendData>:
    {
    da90:	b5f0      	push	{r4, r5, r6, r7, lr}
    da92:	46d6      	mov	lr, sl
    da94:	464f      	mov	r7, r9
    da96:	b580      	push	{r7, lr}
    da98:	b089      	sub	sp, #36	; 0x24
    da9a:	000d      	movs	r5, r1
    da9c:	0017      	movs	r7, r2
    da9e:	9307      	str	r3, [sp, #28]
    daa0:	ab10      	add	r3, sp, #64	; 0x40
    daa2:	781e      	ldrb	r6, [r3, #0]
    daa4:	ab11      	add	r3, sp, #68	; 0x44
    daa6:	781b      	ldrb	r3, [r3, #0]
    daa8:	4699      	mov	r9, r3
	    if(addr_len == 2 && (DestinationAddress16 == 0xFFFF))
    daaa:	2802      	cmp	r0, #2
    daac:	d01d      	beq.n	daea <MiApp_SendData+0x5a>
	    if (END_DEVICE == role)
    daae:	4b50      	ldr	r3, [pc, #320]	; (dbf0 <MiApp_SendData+0x160>)
    dab0:	781b      	ldrb	r3, [r3, #0]
	    bool broadcast = false;
    dab2:	2400      	movs	r4, #0
	    if (END_DEVICE == role)
    dab4:	2b02      	cmp	r3, #2
    dab6:	d028      	beq.n	db0a <MiApp_SendData+0x7a>
		    SendPacket(broadcast, myPANID, addr, false, false, msglen, msgpointer, msghandle, ackReq, ConfCallback);
    dab8:	4b4e      	ldr	r3, [pc, #312]	; (dbf4 <MiApp_SendData+0x164>)
    daba:	8819      	ldrh	r1, [r3, #0]
    dabc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    dabe:	9305      	str	r3, [sp, #20]
    dac0:	464b      	mov	r3, r9
    dac2:	9304      	str	r3, [sp, #16]
    dac4:	9603      	str	r6, [sp, #12]
    dac6:	9e07      	ldr	r6, [sp, #28]
    dac8:	9602      	str	r6, [sp, #8]
    daca:	9701      	str	r7, [sp, #4]
    dacc:	2300      	movs	r3, #0
    dace:	9300      	str	r3, [sp, #0]
    dad0:	002a      	movs	r2, r5
    dad2:	0020      	movs	r0, r4
    dad4:	4c48      	ldr	r4, [pc, #288]	; (dbf8 <MiApp_SendData+0x168>)
    dad6:	47a0      	blx	r4
			MiMem_Free(msgpointer);
    dad8:	0030      	movs	r0, r6
    dada:	4b48      	ldr	r3, [pc, #288]	; (dbfc <MiApp_SendData+0x16c>)
    dadc:	4798      	blx	r3
    }
    dade:	2001      	movs	r0, #1
    dae0:	b009      	add	sp, #36	; 0x24
    dae2:	bc0c      	pop	{r2, r3}
    dae4:	4691      	mov	r9, r2
    dae6:	469a      	mov	sl, r3
    dae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    uint16_t DestinationAddress16 = ((addr[1] << 8) + addr[0]);
    daea:	784b      	ldrb	r3, [r1, #1]
    daec:	021b      	lsls	r3, r3, #8
    daee:	780c      	ldrb	r4, [r1, #0]
    daf0:	18e4      	adds	r4, r4, r3
	    if(addr_len == 2 && (DestinationAddress16 == 0xFFFF))
    daf2:	b2a4      	uxth	r4, r4
    daf4:	4b42      	ldr	r3, [pc, #264]	; (dc00 <MiApp_SendData+0x170>)
    daf6:	469c      	mov	ip, r3
    daf8:	4464      	add	r4, ip
    dafa:	4260      	negs	r0, r4
    dafc:	4144      	adcs	r4, r0
    dafe:	b2e4      	uxtb	r4, r4
	    if (END_DEVICE == role)
    db00:	4b3b      	ldr	r3, [pc, #236]	; (dbf0 <MiApp_SendData+0x160>)
    db02:	781b      	ldrb	r3, [r3, #0]
    db04:	2b02      	cmp	r3, #2
    db06:	d1d7      	bne.n	dab8 <MiApp_SendData+0x28>
    db08:	e001      	b.n	db0e <MiApp_SendData+0x7e>
		    if (MY_ADDRESS_LENGTH == addr_len && isSameAddress(addr, ConnectionTable[0].Address))
    db0a:	2808      	cmp	r0, #8
    db0c:	d03f      	beq.n	db8e <MiApp_SendData+0xfe>
				    if(forwardMessages[i].fromEDToED == 0)
    db0e:	4b3d      	ldr	r3, [pc, #244]	; (dc04 <MiApp_SendData+0x174>)
    db10:	7c9b      	ldrb	r3, [r3, #18]
    db12:	2b00      	cmp	r3, #0
    db14:	d1e3      	bne.n	dade <MiApp_SendData+0x4e>
					    forwardMessages[i].msg[0] = CMD_FORWRD_PACKET;
    db16:	4b3b      	ldr	r3, [pc, #236]	; (dc04 <MiApp_SendData+0x174>)
    db18:	469a      	mov	sl, r3
    db1a:	23cc      	movs	r3, #204	; 0xcc
    db1c:	4652      	mov	r2, sl
    db1e:	7553      	strb	r3, [r2, #21]
					    forwardMessages[i].msg[1] = addr[0];
    db20:	782b      	ldrb	r3, [r5, #0]
    db22:	7593      	strb	r3, [r2, #22]
					    forwardMessages[i].msg[2] = addr[1];
    db24:	786b      	ldrb	r3, [r5, #1]
    db26:	75d3      	strb	r3, [r2, #23]
					    forwardMessages[i].msg[3] = addr[2];
    db28:	78ab      	ldrb	r3, [r5, #2]
    db2a:	7613      	strb	r3, [r2, #24]
					    memcpy(&(forwardMessages[i].msg[4]), msgpointer, msglen);
    db2c:	4650      	mov	r0, sl
    db2e:	3019      	adds	r0, #25
    db30:	003a      	movs	r2, r7
    db32:	9907      	ldr	r1, [sp, #28]
    db34:	4b34      	ldr	r3, [pc, #208]	; (dc08 <MiApp_SendData+0x178>)
    db36:	4798      	blx	r3
					    forwardMessages[i].msgLength = msglen + 4;
    db38:	3704      	adds	r7, #4
    db3a:	4653      	mov	r3, sl
    db3c:	751f      	strb	r7, [r3, #20]
					    forwardMessages[i].msghandle = msghandle;
    db3e:	74de      	strb	r6, [r3, #19]
					    forwardMessages[i].fromEDToED = 1;
    db40:	2301      	movs	r3, #1
    db42:	4652      	mov	r2, sl
    db44:	7493      	strb	r3, [r2, #18]
					    forwardMessages[i].confCallback = ConfCallback;
    db46:	9912      	ldr	r1, [sp, #72]	; 0x48
    db48:	6011      	str	r1, [r2, #0]
						SendData = true;
    db4a:	4a30      	ldr	r2, [pc, #192]	; (dc0c <MiApp_SendData+0x17c>)
    db4c:	7013      	strb	r3, [r2, #0]
					    MiMem_Free(addr);
    db4e:	0028      	movs	r0, r5
    db50:	4d2a      	ldr	r5, [pc, #168]	; (dbfc <MiApp_SendData+0x16c>)
    db52:	47a8      	blx	r5
						MiMem_Free(msgpointer);
    db54:	9807      	ldr	r0, [sp, #28]
    db56:	47a8      	blx	r5
					    if (ackReq)
    db58:	464b      	mov	r3, r9
    db5a:	2b00      	cmp	r3, #0
    db5c:	d034      	beq.n	dbc8 <MiApp_SendData+0x138>
						    forwardMessages[i].TickStart.Val = MiWi_TickGet();
    db5e:	4b2c      	ldr	r3, [pc, #176]	; (dc10 <MiApp_SendData+0x180>)
    db60:	4798      	blx	r3
    db62:	4b28      	ldr	r3, [pc, #160]	; (dc04 <MiApp_SendData+0x174>)
    db64:	60d8      	str	r0, [r3, #12]
						    SendPacket(broadcast, myPANID, ConnectionTable[0].Address, true, false, forwardMessages[i].msgLength, forwardMessages[i].msg, msghandle, ackReq, appAckWaitDataCallback);
    db66:	4a23      	ldr	r2, [pc, #140]	; (dbf4 <MiApp_SendData+0x164>)
    db68:	8811      	ldrh	r1, [r2, #0]
    db6a:	4a2a      	ldr	r2, [pc, #168]	; (dc14 <MiApp_SendData+0x184>)
    db6c:	9205      	str	r2, [sp, #20]
    db6e:	2201      	movs	r2, #1
    db70:	9204      	str	r2, [sp, #16]
    db72:	9603      	str	r6, [sp, #12]
    db74:	001a      	movs	r2, r3
    db76:	3215      	adds	r2, #21
    db78:	9202      	str	r2, [sp, #8]
    db7a:	7d1b      	ldrb	r3, [r3, #20]
    db7c:	9301      	str	r3, [sp, #4]
    db7e:	2300      	movs	r3, #0
    db80:	9300      	str	r3, [sp, #0]
    db82:	3301      	adds	r3, #1
    db84:	4a24      	ldr	r2, [pc, #144]	; (dc18 <MiApp_SendData+0x188>)
    db86:	0020      	movs	r0, r4
    db88:	4c1b      	ldr	r4, [pc, #108]	; (dbf8 <MiApp_SendData+0x168>)
    db8a:	47a0      	blx	r4
    db8c:	e7a7      	b.n	dade <MiApp_SendData+0x4e>
		    if (MY_ADDRESS_LENGTH == addr_len && isSameAddress(addr, ConnectionTable[0].Address))
    db8e:	4922      	ldr	r1, [pc, #136]	; (dc18 <MiApp_SendData+0x188>)
    db90:	0028      	movs	r0, r5
    db92:	4b22      	ldr	r3, [pc, #136]	; (dc1c <MiApp_SendData+0x18c>)
    db94:	4798      	blx	r3
    db96:	1e04      	subs	r4, r0, #0
    db98:	d0b9      	beq.n	db0e <MiApp_SendData+0x7e>
			    SendPacket(broadcast, myPANID, addr, false, false, msglen, msgpointer, msghandle, ackReq, ConfCallback);
    db9a:	4b16      	ldr	r3, [pc, #88]	; (dbf4 <MiApp_SendData+0x164>)
    db9c:	8819      	ldrh	r1, [r3, #0]
    db9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    dba0:	9305      	str	r3, [sp, #20]
    dba2:	464b      	mov	r3, r9
    dba4:	9304      	str	r3, [sp, #16]
    dba6:	9603      	str	r6, [sp, #12]
    dba8:	9e07      	ldr	r6, [sp, #28]
    dbaa:	9602      	str	r6, [sp, #8]
    dbac:	9701      	str	r7, [sp, #4]
    dbae:	2300      	movs	r3, #0
    dbb0:	9300      	str	r3, [sp, #0]
    dbb2:	002a      	movs	r2, r5
    dbb4:	2000      	movs	r0, #0
    dbb6:	4c10      	ldr	r4, [pc, #64]	; (dbf8 <MiApp_SendData+0x168>)
    dbb8:	47a0      	blx	r4
				MiMem_Free(msgpointer);
    dbba:	0030      	movs	r0, r6
    dbbc:	4b0f      	ldr	r3, [pc, #60]	; (dbfc <MiApp_SendData+0x16c>)
    dbbe:	4798      	blx	r3
				SendData = true;
    dbc0:	2201      	movs	r2, #1
    dbc2:	4b12      	ldr	r3, [pc, #72]	; (dc0c <MiApp_SendData+0x17c>)
    dbc4:	701a      	strb	r2, [r3, #0]
			    return true;
    dbc6:	e78a      	b.n	dade <MiApp_SendData+0x4e>
						    SendPacket(broadcast, myPANID, ConnectionTable[0].Address, true, false, forwardMessages[i].msgLength, forwardMessages[i].msg, msghandle, ackReq, appAckWaitDataCallback);
    dbc8:	4b0a      	ldr	r3, [pc, #40]	; (dbf4 <MiApp_SendData+0x164>)
    dbca:	8819      	ldrh	r1, [r3, #0]
    dbcc:	4b11      	ldr	r3, [pc, #68]	; (dc14 <MiApp_SendData+0x184>)
    dbce:	9305      	str	r3, [sp, #20]
    dbd0:	2200      	movs	r2, #0
    dbd2:	9204      	str	r2, [sp, #16]
    dbd4:	9603      	str	r6, [sp, #12]
    dbd6:	4b12      	ldr	r3, [pc, #72]	; (dc20 <MiApp_SendData+0x190>)
    dbd8:	9302      	str	r3, [sp, #8]
    dbda:	3b15      	subs	r3, #21
    dbdc:	7d1b      	ldrb	r3, [r3, #20]
    dbde:	9301      	str	r3, [sp, #4]
    dbe0:	9200      	str	r2, [sp, #0]
    dbe2:	2301      	movs	r3, #1
    dbe4:	4a0c      	ldr	r2, [pc, #48]	; (dc18 <MiApp_SendData+0x188>)
    dbe6:	0020      	movs	r0, r4
    dbe8:	4c03      	ldr	r4, [pc, #12]	; (dbf8 <MiApp_SendData+0x168>)
    dbea:	47a0      	blx	r4
    dbec:	e777      	b.n	dade <MiApp_SendData+0x4e>
    dbee:	46c0      	nop			; (mov r8, r8)
    dbf0:	2000376c 	.word	0x2000376c
    dbf4:	20003478 	.word	0x20003478
    dbf8:	0000d579 	.word	0x0000d579
    dbfc:	0000f56d 	.word	0x0000f56d
    dc00:	ffff0001 	.word	0xffff0001
    dc04:	20002c9c 	.word	0x20002c9c
    dc08:	0001835b 	.word	0x0001835b
    dc0c:	200007cd 	.word	0x200007cd
    dc10:	0000f6f1 	.word	0x0000f6f1
    dc14:	0000d845 	.word	0x0000d845
    dc18:	2000331c 	.word	0x2000331c
    dc1c:	0000da69 	.word	0x0000da69
    dc20:	20002cb1 	.word	0x20002cb1

0000dc24 <MiApp_Set>:
{
    dc24:	b510      	push	{r4, lr}
    dc26:	000c      	movs	r4, r1
    switch(id)
    dc28:	2800      	cmp	r0, #0
    dc2a:	d001      	beq.n	dc30 <MiApp_Set+0xc>
    return false;
    dc2c:	2000      	movs	r0, #0
}
    dc2e:	bd10      	pop	{r4, pc}
        if( MiMAC_Set(MAC_CHANNEL, value))
    dc30:	4b03      	ldr	r3, [pc, #12]	; (dc40 <MiApp_Set+0x1c>)
    dc32:	4798      	blx	r3
    dc34:	2800      	cmp	r0, #0
    dc36:	d0fa      	beq.n	dc2e <MiApp_Set+0xa>
          currentChannel = *value;
    dc38:	7822      	ldrb	r2, [r4, #0]
    dc3a:	4b02      	ldr	r3, [pc, #8]	; (dc44 <MiApp_Set+0x20>)
    dc3c:	701a      	strb	r2, [r3, #0]
          return true;
    dc3e:	e7f6      	b.n	dc2e <MiApp_Set+0xa>
    dc40:	0000c261 	.word	0x0000c261
    dc44:	2000001e 	.word	0x2000001e

0000dc48 <MiApp_ProtocolInit>:
{
    dc48:	b500      	push	{lr}
    dc4a:	b085      	sub	sp, #20
    P2PStatus.Val = 0;
    dc4c:	2300      	movs	r3, #0
    dc4e:	4a1e      	ldr	r2, [pc, #120]	; (dcc8 <MiApp_ProtocolInit+0x80>)
    dc50:	7013      	strb	r3, [r2, #0]
            indirectMessages[i].flags.Val = 0;
    dc52:	4a1e      	ldr	r2, [pc, #120]	; (dccc <MiApp_ProtocolInit+0x84>)
    dc54:	7693      	strb	r3, [r2, #26]
    dc56:	219d      	movs	r1, #157	; 0x9d
    dc58:	0049      	lsls	r1, r1, #1
    dc5a:	5453      	strb	r3, [r2, r1]
    dc5c:	4b1c      	ldr	r3, [pc, #112]	; (dcd0 <MiApp_ProtocolInit+0x88>)
    dc5e:	0019      	movs	r1, r3
    dc60:	3150      	adds	r1, #80	; 0x50
            IncomingFrameCounter[i].Val = 0;
    dc62:	2200      	movs	r2, #0
    dc64:	c304      	stmia	r3!, {r2}
        for(i = 0; i < CONNECTION_SIZE; i++)
    dc66:	4299      	cmp	r1, r3
    dc68:	d1fc      	bne.n	dc64 <MiApp_ProtocolInit+0x1c>
            myPANID.Val = MY_PAN_ID; 
    dc6a:	4a1a      	ldr	r2, [pc, #104]	; (dcd4 <MiApp_ProtocolInit+0x8c>)
    dc6c:	4b1a      	ldr	r3, [pc, #104]	; (dcd8 <MiApp_ProtocolInit+0x90>)
    dc6e:	801a      	strh	r2, [r3, #0]
    initValue.PAddress = myLongAddress;
    dc70:	a902      	add	r1, sp, #8
    initValue.actionFlags.bits.CCAEnable = 1;
    dc72:	780b      	ldrb	r3, [r1, #0]
    dc74:	2202      	movs	r2, #2
    dc76:	4313      	orrs	r3, r2
    initValue.actionFlags.bits.PAddrLength = MY_ADDRESS_LENGTH;
    dc78:	2287      	movs	r2, #135	; 0x87
    dc7a:	4013      	ands	r3, r2
    dc7c:	2240      	movs	r2, #64	; 0x40
    dc7e:	4313      	orrs	r3, r2
    initValue.actionFlags.bits.RepeaterMode = 0;
    dc80:	22c3      	movs	r2, #195	; 0xc3
    dc82:	4013      	ands	r3, r2
    dc84:	3ac2      	subs	r2, #194	; 0xc2
    dc86:	4393      	bics	r3, r2
    dc88:	700b      	strb	r3, [r1, #0]
    MiMAC_Init(initValue);
    dc8a:	9802      	ldr	r0, [sp, #8]
    dc8c:	4913      	ldr	r1, [pc, #76]	; (dcdc <MiApp_ProtocolInit+0x94>)
    dc8e:	4b14      	ldr	r3, [pc, #80]	; (dce0 <MiApp_ProtocolInit+0x98>)
    dc90:	4798      	blx	r3
    if (currentChannel != 0xFF)
    dc92:	4b14      	ldr	r3, [pc, #80]	; (dce4 <MiApp_ProtocolInit+0x9c>)
    dc94:	781b      	ldrb	r3, [r3, #0]
    dc96:	2bff      	cmp	r3, #255	; 0xff
    dc98:	d003      	beq.n	dca2 <MiApp_ProtocolInit+0x5a>
	    MiApp_Set(CHANNEL, &currentChannel);
    dc9a:	4912      	ldr	r1, [pc, #72]	; (dce4 <MiApp_ProtocolInit+0x9c>)
    dc9c:	2000      	movs	r0, #0
    dc9e:	4b12      	ldr	r3, [pc, #72]	; (dce8 <MiApp_ProtocolInit+0xa0>)
    dca0:	4798      	blx	r3
            uint16_t tmp = 0xFFFF;
    dca2:	466b      	mov	r3, sp
    dca4:	1d98      	adds	r0, r3, #6
    dca6:	2301      	movs	r3, #1
    dca8:	425b      	negs	r3, r3
    dcaa:	8003      	strh	r3, [r0, #0]
            MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
    dcac:	490a      	ldr	r1, [pc, #40]	; (dcd8 <MiApp_ProtocolInit+0x90>)
    dcae:	4b0f      	ldr	r3, [pc, #60]	; (dcec <MiApp_ProtocolInit+0xa4>)
    dcb0:	4798      	blx	r3
    P2PCapacityInfo |= (ConnMode << 4);
    dcb2:	4b0f      	ldr	r3, [pc, #60]	; (dcf0 <MiApp_ProtocolInit+0xa8>)
    dcb4:	781b      	ldrb	r3, [r3, #0]
    dcb6:	011b      	lsls	r3, r3, #4
    dcb8:	2209      	movs	r2, #9
    dcba:	4313      	orrs	r3, r2
    dcbc:	4a0d      	ldr	r2, [pc, #52]	; (dcf4 <MiApp_ProtocolInit+0xac>)
    dcbe:	7013      	strb	r3, [r2, #0]
}
    dcc0:	2000      	movs	r0, #0
    dcc2:	b005      	add	sp, #20
    dcc4:	bd00      	pop	{pc}
    dcc6:	46c0      	nop			; (mov r8, r8)
    dcc8:	200034d8 	.word	0x200034d8
    dccc:	200034dc 	.word	0x200034dc
    dcd0:	20003484 	.word	0x20003484
    dcd4:	00001234 	.word	0x00001234
    dcd8:	20003478 	.word	0x20003478
    dcdc:	20000020 	.word	0x20000020
    dce0:	0000c289 	.word	0x0000c289
    dce4:	2000001e 	.word	0x2000001e
    dce8:	0000dc25 	.word	0x0000dc25
    dcec:	0000be61 	.word	0x0000be61
    dcf0:	2000001d 	.word	0x2000001d
    dcf4:	20003471 	.word	0x20003471

0000dcf8 <DumpConnection>:
    {
    dcf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    dcfa:	46de      	mov	lr, fp
    dcfc:	4657      	mov	r7, sl
    dcfe:	464e      	mov	r6, r9
    dd00:	b5c0      	push	{r6, r7, lr}
    dd02:	b082      	sub	sp, #8
    dd04:	0005      	movs	r5, r0
        if( index > CONNECTION_SIZE )
    dd06:	2814      	cmp	r0, #20
    dd08:	d810      	bhi.n	dd2c <DumpConnection+0x34>
        if( index < CONNECTION_SIZE )
    dd0a:	2d13      	cmp	r5, #19
    dd0c:	d856      	bhi.n	ddbc <DumpConnection+0xc4>
            printf("\r\nConnection \tPeerLongAddress \tPeerInfo \tRxOnStatus1\r\n");  
    dd0e:	484a      	ldr	r0, [pc, #296]	; (de38 <DumpConnection+0x140>)
    dd10:	4b4a      	ldr	r3, [pc, #296]	; (de3c <DumpConnection+0x144>)
    dd12:	4798      	blx	r3
            if( ConnectionTable[index].status.bits.isValid )
    dd14:	012a      	lsls	r2, r5, #4
    dd16:	4b4a      	ldr	r3, [pc, #296]	; (de40 <DumpConnection+0x148>)
    dd18:	189b      	adds	r3, r3, r2
    dd1a:	7b1b      	ldrb	r3, [r3, #12]
    dd1c:	09db      	lsrs	r3, r3, #7
    dd1e:	d124      	bne.n	dd6a <DumpConnection+0x72>
    }
    dd20:	b002      	add	sp, #8
    dd22:	bc1c      	pop	{r2, r3, r4}
    dd24:	4691      	mov	r9, r2
    dd26:	469a      	mov	sl, r3
    dd28:	46a3      	mov	fp, r4
    dd2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            printf("\r\n\r\nMy Address: 0x");
    dd2c:	4845      	ldr	r0, [pc, #276]	; (de44 <DumpConnection+0x14c>)
    dd2e:	4b46      	ldr	r3, [pc, #280]	; (de48 <DumpConnection+0x150>)
    dd30:	4798      	blx	r3
    dd32:	4c46      	ldr	r4, [pc, #280]	; (de4c <DumpConnection+0x154>)
    dd34:	0026      	movs	r6, r4
    dd36:	3e08      	subs	r6, #8
				printf("%02x",myLongAddress[MY_ADDRESS_LENGTH-1-i]);
    dd38:	4f43      	ldr	r7, [pc, #268]	; (de48 <DumpConnection+0x150>)
    dd3a:	79e1      	ldrb	r1, [r4, #7]
    dd3c:	4844      	ldr	r0, [pc, #272]	; (de50 <DumpConnection+0x158>)
    dd3e:	47b8      	blx	r7
    dd40:	3c01      	subs	r4, #1
            for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    dd42:	42b4      	cmp	r4, r6
    dd44:	d1f9      	bne.n	dd3a <DumpConnection+0x42>
                printf("  PANID: 0x");
    dd46:	4843      	ldr	r0, [pc, #268]	; (de54 <DumpConnection+0x15c>)
    dd48:	4c3f      	ldr	r4, [pc, #252]	; (de48 <DumpConnection+0x150>)
    dd4a:	47a0      	blx	r4
                printf("%x",myPANID.v[1]);
    dd4c:	4f42      	ldr	r7, [pc, #264]	; (de58 <DumpConnection+0x160>)
    dd4e:	7879      	ldrb	r1, [r7, #1]
    dd50:	4e42      	ldr	r6, [pc, #264]	; (de5c <DumpConnection+0x164>)
    dd52:	0030      	movs	r0, r6
    dd54:	47a0      	blx	r4
                printf("%x",myPANID.v[0]);
    dd56:	7839      	ldrb	r1, [r7, #0]
    dd58:	0030      	movs	r0, r6
    dd5a:	47a0      	blx	r4
            printf("  Channel: ");
    dd5c:	4840      	ldr	r0, [pc, #256]	; (de60 <DumpConnection+0x168>)
    dd5e:	47a0      	blx	r4
            printf("%d",currentChannel);
    dd60:	4b40      	ldr	r3, [pc, #256]	; (de64 <DumpConnection+0x16c>)
    dd62:	7819      	ldrb	r1, [r3, #0]
    dd64:	4840      	ldr	r0, [pc, #256]	; (de68 <DumpConnection+0x170>)
    dd66:	47a0      	blx	r4
    dd68:	e7cf      	b.n	dd0a <DumpConnection+0x12>
                printf("%02x",index);
    dd6a:	0029      	movs	r1, r5
    dd6c:	4838      	ldr	r0, [pc, #224]	; (de50 <DumpConnection+0x158>)
    dd6e:	4c36      	ldr	r4, [pc, #216]	; (de48 <DumpConnection+0x150>)
    dd70:	47a0      	blx	r4
                printf("\t\t\t");
    dd72:	483e      	ldr	r0, [pc, #248]	; (de6c <DumpConnection+0x174>)
    dd74:	47a0      	blx	r4
    dd76:	012f      	lsls	r7, r5, #4
    dd78:	003c      	movs	r4, r7
    dd7a:	340b      	adds	r4, #11
    dd7c:	4b30      	ldr	r3, [pc, #192]	; (de40 <DumpConnection+0x148>)
    dd7e:	18e4      	adds	r4, r4, r3
    dd80:	3703      	adds	r7, #3
    dd82:	18ff      	adds	r7, r7, r3
                        printf("%02x", ConnectionTable[index].Address[MY_ADDRESS_LENGTH-1-i] );
    dd84:	4e30      	ldr	r6, [pc, #192]	; (de48 <DumpConnection+0x150>)
    dd86:	7821      	ldrb	r1, [r4, #0]
    dd88:	4831      	ldr	r0, [pc, #196]	; (de50 <DumpConnection+0x158>)
    dd8a:	47b0      	blx	r6
    dd8c:	3c01      	subs	r4, #1
                for(i = 0; i < 8; i++)
    dd8e:	42bc      	cmp	r4, r7
    dd90:	d1f9      	bne.n	dd86 <DumpConnection+0x8e>
                printf("/t");
    dd92:	4837      	ldr	r0, [pc, #220]	; (de70 <DumpConnection+0x178>)
    dd94:	4c2c      	ldr	r4, [pc, #176]	; (de48 <DumpConnection+0x150>)
    dd96:	47a0      	blx	r4
                        printf("%02x", ConnectionTable[index].PeerInfo[i] );
    dd98:	012d      	lsls	r5, r5, #4
    dd9a:	4b29      	ldr	r3, [pc, #164]	; (de40 <DumpConnection+0x148>)
    dd9c:	195d      	adds	r5, r3, r5
    dd9e:	7b69      	ldrb	r1, [r5, #13]
    dda0:	482b      	ldr	r0, [pc, #172]	; (de50 <DumpConnection+0x158>)
    dda2:	47a0      	blx	r4
				printf("\t");
    dda4:	2009      	movs	r0, #9
    dda6:	4e33      	ldr	r6, [pc, #204]	; (de74 <DumpConnection+0x17c>)
    dda8:	47b0      	blx	r6
				printf("\t");
    ddaa:	2009      	movs	r0, #9
    ddac:	47b0      	blx	r6
				printf("%d", ConnectionTable[index].status.Val );
    ddae:	7b29      	ldrb	r1, [r5, #12]
    ddb0:	482d      	ldr	r0, [pc, #180]	; (de68 <DumpConnection+0x170>)
    ddb2:	47a0      	blx	r4
                printf("\r\n");
    ddb4:	4830      	ldr	r0, [pc, #192]	; (de78 <DumpConnection+0x180>)
    ddb6:	4b21      	ldr	r3, [pc, #132]	; (de3c <DumpConnection+0x144>)
    ddb8:	4798      	blx	r3
    ddba:	e7b1      	b.n	dd20 <DumpConnection+0x28>
            printf("\r\n\r\nConnection     PeerLongAddress     PeerInfo\tRxOnStatus\r\n");  
    ddbc:	482f      	ldr	r0, [pc, #188]	; (de7c <DumpConnection+0x184>)
    ddbe:	4b1f      	ldr	r3, [pc, #124]	; (de3c <DumpConnection+0x144>)
    ddc0:	4798      	blx	r3
    ddc2:	4e2f      	ldr	r6, [pc, #188]	; (de80 <DumpConnection+0x188>)
    ddc4:	2500      	movs	r5, #0
                if( ConnectionTable[i].status.bits.isValid )
    ddc6:	4b1e      	ldr	r3, [pc, #120]	; (de40 <DumpConnection+0x148>)
    ddc8:	4699      	mov	r9, r3
                    printf("%02x",i);
    ddca:	4b1f      	ldr	r3, [pc, #124]	; (de48 <DumpConnection+0x150>)
    ddcc:	469a      	mov	sl, r3
    ddce:	e01b      	b.n	de08 <DumpConnection+0x110>
                    printf("    ");
    ddd0:	482c      	ldr	r0, [pc, #176]	; (de84 <DumpConnection+0x18c>)
    ddd2:	4f1d      	ldr	r7, [pc, #116]	; (de48 <DumpConnection+0x150>)
    ddd4:	47b8      	blx	r7
                            printf("%02x", ConnectionTable[i].PeerInfo[j] );
    ddd6:	78b1      	ldrb	r1, [r6, #2]
    ddd8:	481d      	ldr	r0, [pc, #116]	; (de50 <DumpConnection+0x158>)
    ddda:	47b8      	blx	r7
					printf("\t");
    dddc:	2009      	movs	r0, #9
    ddde:	4c25      	ldr	r4, [pc, #148]	; (de74 <DumpConnection+0x17c>)
    dde0:	47a0      	blx	r4
					printf("\t");
    dde2:	2009      	movs	r0, #9
    dde4:	47a0      	blx	r4
					printf("%02x", ConnectionTable[i].status.bits.RXOnWhenIdle );					
    dde6:	9b01      	ldr	r3, [sp, #4]
    dde8:	011b      	lsls	r3, r3, #4
    ddea:	4a15      	ldr	r2, [pc, #84]	; (de40 <DumpConnection+0x148>)
    ddec:	18d3      	adds	r3, r2, r3
    ddee:	7b19      	ldrb	r1, [r3, #12]
    ddf0:	07c9      	lsls	r1, r1, #31
    ddf2:	0fc9      	lsrs	r1, r1, #31
    ddf4:	4816      	ldr	r0, [pc, #88]	; (de50 <DumpConnection+0x158>)
    ddf6:	47b8      	blx	r7
                    printf("\r\n");
    ddf8:	481f      	ldr	r0, [pc, #124]	; (de78 <DumpConnection+0x180>)
    ddfa:	4b10      	ldr	r3, [pc, #64]	; (de3c <DumpConnection+0x144>)
    ddfc:	4798      	blx	r3
    ddfe:	3501      	adds	r5, #1
    de00:	3610      	adds	r6, #16
            for(i = 0; i < CONNECTION_SIZE; i++)
    de02:	2d14      	cmp	r5, #20
    de04:	d100      	bne.n	de08 <DumpConnection+0x110>
    de06:	e78b      	b.n	dd20 <DumpConnection+0x28>
                if( ConnectionTable[i].status.bits.isValid )
    de08:	9501      	str	r5, [sp, #4]
    de0a:	012b      	lsls	r3, r5, #4
    de0c:	444b      	add	r3, r9
    de0e:	7b1b      	ldrb	r3, [r3, #12]
    de10:	09db      	lsrs	r3, r3, #7
    de12:	d0f4      	beq.n	ddfe <DumpConnection+0x106>
                    printf("%02x",i);
    de14:	0029      	movs	r1, r5
    de16:	480e      	ldr	r0, [pc, #56]	; (de50 <DumpConnection+0x158>)
    de18:	47d0      	blx	sl
                    printf("             ");
    de1a:	481b      	ldr	r0, [pc, #108]	; (de88 <DumpConnection+0x190>)
    de1c:	47d0      	blx	sl
    de1e:	2308      	movs	r3, #8
    de20:	425b      	negs	r3, r3
    de22:	469b      	mov	fp, r3
    de24:	44b3      	add	fp, r6
    de26:	0034      	movs	r4, r6
                            printf("%02x", ConnectionTable[i].Address[MY_ADDRESS_LENGTH-1-j] );
    de28:	4f07      	ldr	r7, [pc, #28]	; (de48 <DumpConnection+0x150>)
    de2a:	7821      	ldrb	r1, [r4, #0]
    de2c:	4808      	ldr	r0, [pc, #32]	; (de50 <DumpConnection+0x158>)
    de2e:	47b8      	blx	r7
    de30:	3c01      	subs	r4, #1
                    for(j = 0; j < 8; j++)
    de32:	455c      	cmp	r4, fp
    de34:	d1f9      	bne.n	de2a <DumpConnection+0x132>
    de36:	e7cb      	b.n	ddd0 <DumpConnection+0xd8>
    de38:	0001ac94 	.word	0x0001ac94
    de3c:	00018a31 	.word	0x00018a31
    de40:	20003318 	.word	0x20003318
    de44:	0001ac68 	.word	0x0001ac68
    de48:	00018915 	.word	0x00018915
    de4c:	20000020 	.word	0x20000020
    de50:	0001a360 	.word	0x0001a360
    de54:	0001ac7c 	.word	0x0001ac7c
    de58:	20003478 	.word	0x20003478
    de5c:	0001a370 	.word	0x0001a370
    de60:	0001ac88 	.word	0x0001ac88
    de64:	2000001e 	.word	0x2000001e
    de68:	00019ffc 	.word	0x00019ffc
    de6c:	0001accc 	.word	0x0001accc
    de70:	0001acd0 	.word	0x0001acd0
    de74:	00018949 	.word	0x00018949
    de78:	0001ad48 	.word	0x0001ad48
    de7c:	0001acd4 	.word	0x0001acd4
    de80:	20003323 	.word	0x20003323
    de84:	0001ad20 	.word	0x0001ad20
    de88:	0001ad10 	.word	0x0001ad10

0000de8c <display_connection_table>:
{
    de8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    de8e:	46de      	mov	lr, fp
    de90:	4657      	mov	r7, sl
    de92:	464e      	mov	r6, r9
    de94:	b5c0      	push	{r6, r7, lr}
	if(conn_size > 0)
    de96:	4b30      	ldr	r3, [pc, #192]	; (df58 <display_connection_table+0xcc>)
    de98:	781b      	ldrb	r3, [r3, #0]
    de9a:	2b00      	cmp	r3, #0
    de9c:	d104      	bne.n	dea8 <display_connection_table+0x1c>
}
    de9e:	bc1c      	pop	{r2, r3, r4}
    dea0:	4691      	mov	r9, r2
    dea2:	469a      	mov	sl, r3
    dea4:	46a3      	mov	fp, r4
    dea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printf("\r\n\r\nMy Address: 0x");
    dea8:	482c      	ldr	r0, [pc, #176]	; (df5c <display_connection_table+0xd0>)
    deaa:	4b2d      	ldr	r3, [pc, #180]	; (df60 <display_connection_table+0xd4>)
    deac:	4798      	blx	r3
    deae:	4c2d      	ldr	r4, [pc, #180]	; (df64 <display_connection_table+0xd8>)
    deb0:	0027      	movs	r7, r4
    deb2:	3f08      	subs	r7, #8
			printf("%02x",myLongAddress[MY_ADDRESS_LENGTH-1-k]);
    deb4:	4e2c      	ldr	r6, [pc, #176]	; (df68 <display_connection_table+0xdc>)
    deb6:	4d2a      	ldr	r5, [pc, #168]	; (df60 <display_connection_table+0xd4>)
    deb8:	79e1      	ldrb	r1, [r4, #7]
    deba:	0030      	movs	r0, r6
    debc:	47a8      	blx	r5
    debe:	3c01      	subs	r4, #1
		for(uint8_t k = 0; k < MY_ADDRESS_LENGTH; k++)
    dec0:	42bc      	cmp	r4, r7
    dec2:	d1f9      	bne.n	deb8 <display_connection_table+0x2c>
		printf("\n------------------------------------------------\n\r            Connection table\n------------------------------------------------\n\r");
    dec4:	4829      	ldr	r0, [pc, #164]	; (df6c <display_connection_table+0xe0>)
    dec6:	4b26      	ldr	r3, [pc, #152]	; (df60 <display_connection_table+0xd4>)
    dec8:	4798      	blx	r3
		printf("\nID\tDevice Address \t\tstatus \tPAN ID \n");
    deca:	4829      	ldr	r0, [pc, #164]	; (df70 <display_connection_table+0xe4>)
    decc:	4b29      	ldr	r3, [pc, #164]	; (df74 <display_connection_table+0xe8>)
    dece:	4798      	blx	r3
		for(uint8_t i =0; i <= conn_size-1; i++ )
    ded0:	4b21      	ldr	r3, [pc, #132]	; (df58 <display_connection_table+0xcc>)
    ded2:	781b      	ldrb	r3, [r3, #0]
    ded4:	2b01      	cmp	r3, #1
    ded6:	d43a      	bmi.n	df4e <display_connection_table+0xc2>
    ded8:	2700      	movs	r7, #0
    deda:	2300      	movs	r3, #0
    dedc:	4699      	mov	r9, r3
			printf("%02x",i+1);
    dede:	4b20      	ldr	r3, [pc, #128]	; (df60 <display_connection_table+0xd4>)
    dee0:	469b      	mov	fp, r3
			printf("\t");
    dee2:	4b25      	ldr	r3, [pc, #148]	; (df78 <display_connection_table+0xec>)
    dee4:	469a      	mov	sl, r3
    dee6:	e01e      	b.n	df26 <display_connection_table+0x9a>
			printf("\t");
    dee8:	2009      	movs	r0, #9
    deea:	4c23      	ldr	r4, [pc, #140]	; (df78 <display_connection_table+0xec>)
    deec:	47a0      	blx	r4
			printf("%d",(ConnectionTable[i].status.bits.isValid));
    deee:	4d23      	ldr	r5, [pc, #140]	; (df7c <display_connection_table+0xf0>)
    def0:	013e      	lsls	r6, r7, #4
    def2:	19ab      	adds	r3, r5, r6
    def4:	7b19      	ldrb	r1, [r3, #12]
    def6:	09c9      	lsrs	r1, r1, #7
    def8:	4821      	ldr	r0, [pc, #132]	; (df80 <display_connection_table+0xf4>)
    defa:	4f19      	ldr	r7, [pc, #100]	; (df60 <display_connection_table+0xd4>)
    defc:	47b8      	blx	r7
			printf("\t");
    defe:	2009      	movs	r0, #9
    df00:	47a0      	blx	r4
			printf("%02x",(ConnectionTable[i].PANID.Val));
    df02:	5b71      	ldrh	r1, [r6, r5]
    df04:	4818      	ldr	r0, [pc, #96]	; (df68 <display_connection_table+0xdc>)
    df06:	47b8      	blx	r7
			printf("\t");
    df08:	2009      	movs	r0, #9
    df0a:	47a0      	blx	r4
			printf("\r\n\n");
    df0c:	481d      	ldr	r0, [pc, #116]	; (df84 <display_connection_table+0xf8>)
    df0e:	4b19      	ldr	r3, [pc, #100]	; (df74 <display_connection_table+0xe8>)
    df10:	4798      	blx	r3
		for(uint8_t i =0; i <= conn_size-1; i++ )
    df12:	464b      	mov	r3, r9
    df14:	3301      	adds	r3, #1
    df16:	b2db      	uxtb	r3, r3
    df18:	4699      	mov	r9, r3
    df1a:	001f      	movs	r7, r3
    df1c:	4b0e      	ldr	r3, [pc, #56]	; (df58 <display_connection_table+0xcc>)
    df1e:	781b      	ldrb	r3, [r3, #0]
    df20:	3b01      	subs	r3, #1
    df22:	4599      	cmp	r9, r3
    df24:	dc13      	bgt.n	df4e <display_connection_table+0xc2>
			printf("%02x",i+1);
    df26:	1c79      	adds	r1, r7, #1
    df28:	480f      	ldr	r0, [pc, #60]	; (df68 <display_connection_table+0xdc>)
    df2a:	47d8      	blx	fp
			printf("\t");
    df2c:	2009      	movs	r0, #9
    df2e:	47d0      	blx	sl
    df30:	013d      	lsls	r5, r7, #4
    df32:	002c      	movs	r4, r5
    df34:	340b      	adds	r4, #11
    df36:	4b11      	ldr	r3, [pc, #68]	; (df7c <display_connection_table+0xf0>)
    df38:	18e4      	adds	r4, r4, r3
    df3a:	3503      	adds	r5, #3
    df3c:	18ed      	adds	r5, r5, r3
					printf("%02x",ConnectionTable[i].Address[MY_ADDRESS_LENGTH-1-j] );
    df3e:	4e08      	ldr	r6, [pc, #32]	; (df60 <display_connection_table+0xd4>)
    df40:	7821      	ldrb	r1, [r4, #0]
    df42:	4809      	ldr	r0, [pc, #36]	; (df68 <display_connection_table+0xdc>)
    df44:	47b0      	blx	r6
    df46:	3c01      	subs	r4, #1
			for(uint8_t j = 0; j < 8; j++)
    df48:	42ac      	cmp	r4, r5
    df4a:	d1f9      	bne.n	df40 <display_connection_table+0xb4>
    df4c:	e7cc      	b.n	dee8 <display_connection_table+0x5c>
		printf("------------------------------------------------\n\r");
    df4e:	480e      	ldr	r0, [pc, #56]	; (df88 <display_connection_table+0xfc>)
    df50:	4b03      	ldr	r3, [pc, #12]	; (df60 <display_connection_table+0xd4>)
    df52:	4798      	blx	r3
}
    df54:	e7a3      	b.n	de9e <display_connection_table+0x12>
    df56:	46c0      	nop			; (mov r8, r8)
    df58:	20003481 	.word	0x20003481
    df5c:	0001ac68 	.word	0x0001ac68
    df60:	00018915 	.word	0x00018915
    df64:	20000020 	.word	0x20000020
    df68:	0001a360 	.word	0x0001a360
    df6c:	0001adbc 	.word	0x0001adbc
    df70:	0001ae40 	.word	0x0001ae40
    df74:	00018a31 	.word	0x00018a31
    df78:	00018949 	.word	0x00018949
    df7c:	20003318 	.word	0x20003318
    df80:	00019ffc 	.word	0x00019ffc
    df84:	0001a458 	.word	0x0001a458
    df88:	0001ae0c 	.word	0x0001ae0c

0000df8c <AddConnection>:
    {
    df8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    df8e:	46d6      	mov	lr, sl
    df90:	4647      	mov	r7, r8
    df92:	b580      	push	{r7, lr}
    df94:	b083      	sub	sp, #12
                if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    df96:	4b39      	ldr	r3, [pc, #228]	; (e07c <AddConnection+0xf0>)
    df98:	685b      	ldr	r3, [r3, #4]
    df9a:	9301      	str	r3, [sp, #4]
    df9c:	4d38      	ldr	r5, [pc, #224]	; (e080 <AddConnection+0xf4>)
    df9e:	2400      	movs	r4, #0
        uint8_t connectionSlot = 0xFF;
    dfa0:	26ff      	movs	r6, #255	; 0xff
            if( ConnectionTable[i].status.bits.isValid )
    dfa2:	4b38      	ldr	r3, [pc, #224]	; (e084 <AddConnection+0xf8>)
    dfa4:	4698      	mov	r8, r3
                if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    dfa6:	4b38      	ldr	r3, [pc, #224]	; (e088 <AddConnection+0xfc>)
    dfa8:	469a      	mov	sl, r3
    dfaa:	e005      	b.n	dfb8 <AddConnection+0x2c>
            else if( connectionSlot == 0xFF )
    dfac:	2eff      	cmp	r6, #255	; 0xff
    dfae:	d011      	beq.n	dfd4 <AddConnection+0x48>
    dfb0:	3401      	adds	r4, #1
    dfb2:	3510      	adds	r5, #16
        for(i = 0; i < CONNECTION_SIZE; i++)
    dfb4:	2c14      	cmp	r4, #20
    dfb6:	d00f      	beq.n	dfd8 <AddConnection+0x4c>
    dfb8:	b2e7      	uxtb	r7, r4
            if( ConnectionTable[i].status.bits.isValid )
    dfba:	0123      	lsls	r3, r4, #4
    dfbc:	4443      	add	r3, r8
    dfbe:	7b1b      	ldrb	r3, [r3, #12]
    dfc0:	09db      	lsrs	r3, r3, #7
    dfc2:	d0f3      	beq.n	dfac <AddConnection+0x20>
                if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    dfc4:	0029      	movs	r1, r5
    dfc6:	9801      	ldr	r0, [sp, #4]
    dfc8:	47d0      	blx	sl
    dfca:	2800      	cmp	r0, #0
    dfcc:	d0f0      	beq.n	dfb0 <AddConnection+0x24>
    dfce:	003e      	movs	r6, r7
                    status = STATUS_EXISTS;
    dfd0:	2401      	movs	r4, #1
    dfd2:	e002      	b.n	dfda <AddConnection+0x4e>
            else if( connectionSlot == 0xFF )
    dfd4:	003e      	movs	r6, r7
    dfd6:	e7eb      	b.n	dfb0 <AddConnection+0x24>
        uint8_t status = STATUS_SUCCESS;
    dfd8:	2400      	movs	r4, #0
        if( connectionSlot == 0xFF )
    dfda:	2eff      	cmp	r6, #255	; 0xff
    dfdc:	d046      	beq.n	e06c <AddConnection+0xe0>
            if( ConnMode >= ENABLE_PREV_CONN )
    dfde:	4b2b      	ldr	r3, [pc, #172]	; (e08c <AddConnection+0x100>)
    dfe0:	781b      	ldrb	r3, [r3, #0]
    dfe2:	2b00      	cmp	r3, #0
    dfe4:	d143      	bne.n	e06e <AddConnection+0xe2>
            MyindexinPC = connectionSlot; 
    dfe6:	4b2a      	ldr	r3, [pc, #168]	; (e090 <AddConnection+0x104>)
    dfe8:	701e      	strb	r6, [r3, #0]
    dfea:	9d01      	ldr	r5, [sp, #4]
    dfec:	002b      	movs	r3, r5
    dfee:	0132      	lsls	r2, r6, #4
    dff0:	3204      	adds	r2, #4
    dff2:	4924      	ldr	r1, [pc, #144]	; (e084 <AddConnection+0xf8>)
    dff4:	1852      	adds	r2, r2, r1
    dff6:	3508      	adds	r5, #8
				ConnectionTable[connectionSlot].Address[i] = rxMessage.SourceAddress[i];
    dff8:	0030      	movs	r0, r6
    dffa:	7819      	ldrb	r1, [r3, #0]
    dffc:	7011      	strb	r1, [r2, #0]
    dffe:	3301      	adds	r3, #1
    e000:	3201      	adds	r2, #1
			for(i = 0; i < 8; i++)
    e002:	429d      	cmp	r5, r3
    e004:	d1f9      	bne.n	dffa <AddConnection+0x6e>
			ConnectionTable[connectionSlot].status.bits.isValid = 1;
    e006:	0102      	lsls	r2, r0, #4
    e008:	4b1e      	ldr	r3, [pc, #120]	; (e084 <AddConnection+0xf8>)
    e00a:	189b      	adds	r3, r3, r2
    e00c:	7b19      	ldrb	r1, [r3, #12]
    e00e:	2280      	movs	r2, #128	; 0x80
    e010:	4252      	negs	r2, r2
    e012:	430a      	orrs	r2, r1
    e014:	731a      	strb	r2, [r3, #12]
			if(rxMessage.Payload[2] & 0x01)
    e016:	4b19      	ldr	r3, [pc, #100]	; (e07c <AddConnection+0xf0>)
    e018:	689a      	ldr	r2, [r3, #8]
    e01a:	7893      	ldrb	r3, [r2, #2]
    e01c:	07db      	lsls	r3, r3, #31
    e01e:	d51d      	bpl.n	e05c <AddConnection+0xd0>
					ConnectionTable[connectionSlot].status.bits.RXOnWhenIdle = 1;
    e020:	0101      	lsls	r1, r0, #4
    e022:	4b18      	ldr	r3, [pc, #96]	; (e084 <AddConnection+0xf8>)
    e024:	185b      	adds	r3, r3, r1
    e026:	7b19      	ldrb	r1, [r3, #12]
    e028:	2501      	movs	r5, #1
    e02a:	4329      	orrs	r1, r5
    e02c:	7319      	strb	r1, [r3, #12]
                    ConnectionTable[connectionSlot].PeerInfo[i] = rxMessage.Payload[3+i];
    e02e:	78d2      	ldrb	r2, [r2, #3]
    e030:	0101      	lsls	r1, r0, #4
    e032:	4b14      	ldr	r3, [pc, #80]	; (e084 <AddConnection+0xf8>)
    e034:	185b      	adds	r3, r3, r1
    e036:	735a      	strb	r2, [r3, #13]
                IncomingFrameCounter[connectionSlot].Val = 0;
    e038:	0080      	lsls	r0, r0, #2
    e03a:	2200      	movs	r2, #0
    e03c:	4b15      	ldr	r3, [pc, #84]	; (e094 <AddConnection+0x108>)
    e03e:	50c2      	str	r2, [r0, r3]
            LatestConnection = connectionSlot;
    e040:	4b15      	ldr	r3, [pc, #84]	; (e098 <AddConnection+0x10c>)
    e042:	701e      	strb	r6, [r3, #0]
            P2PStatus.bits.SearchConnection = 0;   
    e044:	4a15      	ldr	r2, [pc, #84]	; (e09c <AddConnection+0x110>)
    e046:	7813      	ldrb	r3, [r2, #0]
    e048:	2110      	movs	r1, #16
    e04a:	438b      	bics	r3, r1
    e04c:	7013      	strb	r3, [r2, #0]
        conn_size = Total_Connections();
    e04e:	4b14      	ldr	r3, [pc, #80]	; (e0a0 <AddConnection+0x114>)
    e050:	4798      	blx	r3
    e052:	4b14      	ldr	r3, [pc, #80]	; (e0a4 <AddConnection+0x118>)
    e054:	7018      	strb	r0, [r3, #0]
		    display_connection_table();
    e056:	4b14      	ldr	r3, [pc, #80]	; (e0a8 <AddConnection+0x11c>)
    e058:	4798      	blx	r3
        return status;
    e05a:	e008      	b.n	e06e <AddConnection+0xe2>
					ConnectionTable[connectionSlot].status.bits.RXOnWhenIdle = 0;
    e05c:	0101      	lsls	r1, r0, #4
    e05e:	4b09      	ldr	r3, [pc, #36]	; (e084 <AddConnection+0xf8>)
    e060:	185b      	adds	r3, r3, r1
    e062:	7b19      	ldrb	r1, [r3, #12]
    e064:	2501      	movs	r5, #1
    e066:	43a9      	bics	r1, r5
    e068:	7319      	strb	r1, [r3, #12]
    e06a:	e7e0      	b.n	e02e <AddConnection+0xa2>
            return STATUS_NOT_ENOUGH_SPACE;
    e06c:	24f1      	movs	r4, #241	; 0xf1
    }
    e06e:	0020      	movs	r0, r4
    e070:	b003      	add	sp, #12
    e072:	bc0c      	pop	{r2, r3}
    e074:	4690      	mov	r8, r2
    e076:	469a      	mov	sl, r3
    e078:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e07a:	46c0      	nop			; (mov r8, r8)
    e07c:	2000377c 	.word	0x2000377c
    e080:	2000331c 	.word	0x2000331c
    e084:	20003318 	.word	0x20003318
    e088:	0000da69 	.word	0x0000da69
    e08c:	2000001d 	.word	0x2000001d
    e090:	200034d4 	.word	0x200034d4
    e094:	20003484 	.word	0x20003484
    e098:	20003314 	.word	0x20003314
    e09c:	200034d8 	.word	0x200034d8
    e0a0:	0000d40d 	.word	0x0000d40d
    e0a4:	20003481 	.word	0x20003481
    e0a8:	0000de8d 	.word	0x0000de8d

0000e0ac <MiApp_RemoveConnection>:
    {   
    e0ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    e0ae:	46d6      	mov	lr, sl
    e0b0:	464f      	mov	r7, r9
    e0b2:	4646      	mov	r6, r8
    e0b4:	b5c0      	push	{r6, r7, lr}
    e0b6:	b086      	sub	sp, #24
    e0b8:	0004      	movs	r4, r0
        if( ConnectionIndex == 0xFF )
    e0ba:	28ff      	cmp	r0, #255	; 0xff
    e0bc:	d00f      	beq.n	e0de <MiApp_RemoveConnection+0x32>
        else if( ConnectionTable[ConnectionIndex].status.bits.isValid )
    e0be:	0102      	lsls	r2, r0, #4
    e0c0:	4b35      	ldr	r3, [pc, #212]	; (e198 <MiApp_RemoveConnection+0xec>)
    e0c2:	189b      	adds	r3, r3, r2
    e0c4:	7b1b      	ldrb	r3, [r3, #12]
    e0c6:	09db      	lsrs	r3, r3, #7
    e0c8:	d13d      	bne.n	e146 <MiApp_RemoveConnection+0x9a>
		conn_size = Total_Connections();
    e0ca:	4b34      	ldr	r3, [pc, #208]	; (e19c <MiApp_RemoveConnection+0xf0>)
    e0cc:	4798      	blx	r3
    e0ce:	4b34      	ldr	r3, [pc, #208]	; (e1a0 <MiApp_RemoveConnection+0xf4>)
    e0d0:	7018      	strb	r0, [r3, #0]
    }
    e0d2:	b006      	add	sp, #24
    e0d4:	bc1c      	pop	{r2, r3, r4}
    e0d6:	4690      	mov	r8, r2
    e0d8:	4699      	mov	r9, r3
    e0da:	46a2      	mov	sl, r4
    e0dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e0de:	4d31      	ldr	r5, [pc, #196]	; (e1a4 <MiApp_RemoveConnection+0xf8>)
        if( ConnectionIndex == 0xFF )
    e0e0:	2400      	movs	r4, #0
                if( ConnectionTable[i].status.bits.isValid )
    e0e2:	4b2d      	ldr	r3, [pc, #180]	; (e198 <MiApp_RemoveConnection+0xec>)
    e0e4:	469a      	mov	sl, r3
					printf("P2P_CONNECTION_REMOVAL_REQUEST1\n\r");
    e0e6:	4b30      	ldr	r3, [pc, #192]	; (e1a8 <MiApp_RemoveConnection+0xfc>)
    e0e8:	4698      	mov	r8, r3
    e0ea:	e005      	b.n	e0f8 <MiApp_RemoveConnection+0x4c>
                ConnectionTable[i].status.Val = 0;
    e0ec:	2300      	movs	r3, #0
    e0ee:	722b      	strb	r3, [r5, #8]
    e0f0:	3401      	adds	r4, #1
    e0f2:	3510      	adds	r5, #16
            for(i = 0; i < CONNECTION_SIZE; i++)
    e0f4:	2c14      	cmp	r4, #20
    e0f6:	d0e8      	beq.n	e0ca <MiApp_RemoveConnection+0x1e>
                if( ConnectionTable[i].status.bits.isValid )
    e0f8:	0123      	lsls	r3, r4, #4
    e0fa:	4453      	add	r3, sl
    e0fc:	7b1b      	ldrb	r3, [r3, #12]
    e0fe:	09db      	lsrs	r3, r3, #7
    e100:	d0f4      	beq.n	e0ec <MiApp_RemoveConnection+0x40>
					printf("P2P_CONNECTION_REMOVAL_REQUEST1\n\r");
    e102:	482a      	ldr	r0, [pc, #168]	; (e1ac <MiApp_RemoveConnection+0x100>)
    e104:	47c0      	blx	r8
                    dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_P2P_CONNECTION_REMOVAL_REQUEST));
    e106:	2010      	movs	r0, #16
    e108:	4b29      	ldr	r3, [pc, #164]	; (e1b0 <MiApp_RemoveConnection+0x104>)
    e10a:	4798      	blx	r3
    e10c:	1e07      	subs	r7, r0, #0
                    if (NULL == dataPtr)
    e10e:	d0e0      	beq.n	e0d2 <MiApp_RemoveConnection+0x26>
                    dataPtr[dataLen++] = CMD_P2P_CONNECTION_REMOVAL_REQUEST;
    e110:	2382      	movs	r3, #130	; 0x82
    e112:	7003      	strb	r3, [r0, #0]
                        SendPacket(false, myPANID, ConnectionTable[i].Address, true, false, dataLen, dataPtr,0, true, CommandConfCallback);
    e114:	4b27      	ldr	r3, [pc, #156]	; (e1b4 <MiApp_RemoveConnection+0x108>)
    e116:	8819      	ldrh	r1, [r3, #0]
    e118:	4b27      	ldr	r3, [pc, #156]	; (e1b8 <MiApp_RemoveConnection+0x10c>)
    e11a:	9305      	str	r3, [sp, #20]
    e11c:	2201      	movs	r2, #1
    e11e:	9204      	str	r2, [sp, #16]
    e120:	2300      	movs	r3, #0
    e122:	9303      	str	r3, [sp, #12]
    e124:	9002      	str	r0, [sp, #8]
    e126:	9201      	str	r2, [sp, #4]
    e128:	9300      	str	r3, [sp, #0]
    e12a:	3301      	adds	r3, #1
    e12c:	002a      	movs	r2, r5
    e12e:	2000      	movs	r0, #0
    e130:	4e22      	ldr	r6, [pc, #136]	; (e1bc <MiApp_RemoveConnection+0x110>)
    e132:	47b0      	blx	r6
					MiMem_Free(dataPtr);
    e134:	0038      	movs	r0, r7
    e136:	4b22      	ldr	r3, [pc, #136]	; (e1c0 <MiApp_RemoveConnection+0x114>)
    e138:	4798      	blx	r3
    e13a:	4b22      	ldr	r3, [pc, #136]	; (e1c4 <MiApp_RemoveConnection+0x118>)
    e13c:	3b01      	subs	r3, #1
    e13e:	b29b      	uxth	r3, r3
                    for(j = 0; j < 0xFFF; j++) {}   // delay
    e140:	2b00      	cmp	r3, #0
    e142:	d1fb      	bne.n	e13c <MiApp_RemoveConnection+0x90>
    e144:	e7d2      	b.n	e0ec <MiApp_RemoveConnection+0x40>
            dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_P2P_CONNECTION_REMOVAL_REQUEST));
    e146:	2010      	movs	r0, #16
    e148:	4b19      	ldr	r3, [pc, #100]	; (e1b0 <MiApp_RemoveConnection+0x104>)
    e14a:	4798      	blx	r3
    e14c:	1e05      	subs	r5, r0, #0
            if (NULL == dataPtr)
    e14e:	d0c0      	beq.n	e0d2 <MiApp_RemoveConnection+0x26>
            dataPtr[dataLen++] = CMD_P2P_CONNECTION_REMOVAL_REQUEST;
    e150:	2382      	movs	r3, #130	; 0x82
    e152:	7003      	strb	r3, [r0, #0]
                SendPacket(false, myPANID, ConnectionTable[ConnectionIndex].Address, true, false, 
    e154:	0122      	lsls	r2, r4, #4
    e156:	3204      	adds	r2, #4
    e158:	4b0f      	ldr	r3, [pc, #60]	; (e198 <MiApp_RemoveConnection+0xec>)
    e15a:	18d2      	adds	r2, r2, r3
    e15c:	4b15      	ldr	r3, [pc, #84]	; (e1b4 <MiApp_RemoveConnection+0x108>)
    e15e:	8819      	ldrh	r1, [r3, #0]
    e160:	4b15      	ldr	r3, [pc, #84]	; (e1b8 <MiApp_RemoveConnection+0x10c>)
    e162:	9305      	str	r3, [sp, #20]
    e164:	2001      	movs	r0, #1
    e166:	9004      	str	r0, [sp, #16]
    e168:	2300      	movs	r3, #0
    e16a:	9303      	str	r3, [sp, #12]
    e16c:	9502      	str	r5, [sp, #8]
    e16e:	9001      	str	r0, [sp, #4]
    e170:	9300      	str	r3, [sp, #0]
    e172:	3301      	adds	r3, #1
    e174:	2000      	movs	r0, #0
    e176:	4e11      	ldr	r6, [pc, #68]	; (e1bc <MiApp_RemoveConnection+0x110>)
    e178:	47b0      	blx	r6
			MiMem_Free(dataPtr);
    e17a:	0028      	movs	r0, r5
    e17c:	4b10      	ldr	r3, [pc, #64]	; (e1c0 <MiApp_RemoveConnection+0x114>)
    e17e:	4798      	blx	r3
    e180:	4b10      	ldr	r3, [pc, #64]	; (e1c4 <MiApp_RemoveConnection+0x118>)
    e182:	3b01      	subs	r3, #1
    e184:	b29b      	uxth	r3, r3
            for(j = 0; j < 0xFFF; j++) {}   // delay
    e186:	2b00      	cmp	r3, #0
    e188:	d1fb      	bne.n	e182 <MiApp_RemoveConnection+0xd6>
            ConnectionTable[ConnectionIndex].status.Val = 0; 
    e18a:	0124      	lsls	r4, r4, #4
    e18c:	4b02      	ldr	r3, [pc, #8]	; (e198 <MiApp_RemoveConnection+0xec>)
    e18e:	191c      	adds	r4, r3, r4
    e190:	2300      	movs	r3, #0
    e192:	7323      	strb	r3, [r4, #12]
    e194:	e799      	b.n	e0ca <MiApp_RemoveConnection+0x1e>
    e196:	46c0      	nop			; (mov r8, r8)
    e198:	20003318 	.word	0x20003318
    e19c:	0000d40d 	.word	0x0000d40d
    e1a0:	20003481 	.word	0x20003481
    e1a4:	2000331c 	.word	0x2000331c
    e1a8:	00018915 	.word	0x00018915
    e1ac:	0001ad28 	.word	0x0001ad28
    e1b0:	0000f4b1 	.word	0x0000f4b1
    e1b4:	20003478 	.word	0x20003478
    e1b8:	0000d321 	.word	0x0000d321
    e1bc:	0000d579 	.word	0x0000d579
    e1c0:	0000f56d 	.word	0x0000f56d
    e1c4:	00000fff 	.word	0x00000fff

0000e1c8 <MiApp_ConnectionMode>:
    if( Mode > 3 )
    e1c8:	2803      	cmp	r0, #3
    e1ca:	d808      	bhi.n	e1de <MiApp_ConnectionMode+0x16>
    ConnMode = Mode;
    e1cc:	4b04      	ldr	r3, [pc, #16]	; (e1e0 <MiApp_ConnectionMode+0x18>)
    e1ce:	7018      	strb	r0, [r3, #0]
    P2PCapacityInfo = (P2PCapacityInfo & 0x0F) | (ConnMode << 4);
    e1d0:	4a04      	ldr	r2, [pc, #16]	; (e1e4 <MiApp_ConnectionMode+0x1c>)
    e1d2:	7811      	ldrb	r1, [r2, #0]
    e1d4:	230f      	movs	r3, #15
    e1d6:	400b      	ands	r3, r1
    e1d8:	0100      	lsls	r0, r0, #4
    e1da:	4318      	orrs	r0, r3
    e1dc:	7010      	strb	r0, [r2, #0]
}
    e1de:	4770      	bx	lr
    e1e0:	2000001d 	.word	0x2000001d
    e1e4:	20003471 	.word	0x20003471

0000e1e8 <MiApp_SubscribeDataIndicationCallback>:
    if (NULL != callback)
    e1e8:	2800      	cmp	r0, #0
    e1ea:	d003      	beq.n	e1f4 <MiApp_SubscribeDataIndicationCallback+0xc>
        pktRxcallback = callback;
    e1ec:	4b02      	ldr	r3, [pc, #8]	; (e1f8 <MiApp_SubscribeDataIndicationCallback+0x10>)
    e1ee:	6018      	str	r0, [r3, #0]
        return true;
    e1f0:	2001      	movs	r0, #1
}
    e1f2:	4770      	bx	lr
    return false;
    e1f4:	2000      	movs	r0, #0
    e1f6:	e7fc      	b.n	e1f2 <MiApp_SubscribeDataIndicationCallback+0xa>
    e1f8:	200007dc 	.word	0x200007dc

0000e1fc <calculate_ToA>:
{
    e1fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    e1fe:	46ce      	mov	lr, r9
    e200:	4647      	mov	r7, r8
    e202:	b580      	push	{r7, lr}
    e204:	b087      	sub	sp, #28
    e206:	4680      	mov	r8, r0
	    uint8_t spreadFactor = 0;
    e208:	ab04      	add	r3, sp, #16
    e20a:	1dde      	adds	r6, r3, #7
    e20c:	2300      	movs	r3, #0
    e20e:	7033      	strb	r3, [r6, #0]
	    uint8_t codingRate = 0;
    e210:	aa04      	add	r2, sp, #16
    e212:	1d97      	adds	r7, r2, #6
    e214:	7193      	strb	r3, [r2, #6]
	    uint16_t programmedPreambleLength = 0;
    e216:	ad05      	add	r5, sp, #20
    e218:	802b      	strh	r3, [r5, #0]
	    bool crcEnable = 0; //CRC
    e21a:	3303      	adds	r3, #3
    e21c:	4694      	mov	ip, r2
    e21e:	4463      	add	r3, ip
    e220:	4699      	mov	r9, r3
    e222:	2300      	movs	r3, #0
    e224:	464a      	mov	r2, r9
    e226:	7013      	strb	r3, [r2, #0]
	    RADIO_GetAttr(SPREADING_FACTOR,(void *)&spreadFactor);
    e228:	0031      	movs	r1, r6
    e22a:	2016      	movs	r0, #22
    e22c:	4c39      	ldr	r4, [pc, #228]	; (e314 <calculate_ToA+0x118>)
    e22e:	47a0      	blx	r4
	    RADIO_GetAttr(PREAMBLE_LEN,(void *)&programmedPreambleLength);
    e230:	0029      	movs	r1, r5
    e232:	2003      	movs	r0, #3
    e234:	47a0      	blx	r4
	    RADIO_GetAttr(CRC_ON,(void *)&crcEnable);
    e236:	4649      	mov	r1, r9
    e238:	2014      	movs	r0, #20
    e23a:	47a0      	blx	r4
	    RADIO_GetAttr(ERROR_CODING_RATE,(void *)&codingRate);
    e23c:	0039      	movs	r1, r7
    e23e:	200b      	movs	r0, #11
    e240:	47a0      	blx	r4
	    symbolRate = (bandWidth * 1000) /  ((float)(1 << spreadFactor));
    e242:	7836      	ldrb	r6, [r6, #0]
    e244:	2001      	movs	r0, #1
    e246:	40b0      	lsls	r0, r6
    e248:	4b33      	ldr	r3, [pc, #204]	; (e318 <calculate_ToA+0x11c>)
    e24a:	4798      	blx	r3
    e24c:	1c01      	adds	r1, r0, #0
    e24e:	4c33      	ldr	r4, [pc, #204]	; (e31c <calculate_ToA+0x120>)
    e250:	4833      	ldr	r0, [pc, #204]	; (e320 <calculate_ToA+0x124>)
    e252:	47a0      	blx	r4
    e254:	1c01      	adds	r1, r0, #0
	    symbolTime = 1000 / (symbolRate);
    e256:	4833      	ldr	r0, [pc, #204]	; (e324 <calculate_ToA+0x128>)
    e258:	47a0      	blx	r4
    e25a:	1c04      	adds	r4, r0, #0
	    preambleDuration = (programmedPreambleLength + 4.25) * symbolTime;
    e25c:	8828      	ldrh	r0, [r5, #0]
    e25e:	4b32      	ldr	r3, [pc, #200]	; (e328 <calculate_ToA+0x12c>)
    e260:	4798      	blx	r3
    e262:	2200      	movs	r2, #0
    e264:	4b31      	ldr	r3, [pc, #196]	; (e32c <calculate_ToA+0x130>)
    e266:	4d32      	ldr	r5, [pc, #200]	; (e330 <calculate_ToA+0x134>)
    e268:	47a8      	blx	r5
    e26a:	9000      	str	r0, [sp, #0]
    e26c:	9101      	str	r1, [sp, #4]
    e26e:	1c20      	adds	r0, r4, #0
    e270:	4b30      	ldr	r3, [pc, #192]	; (e334 <calculate_ToA+0x138>)
    e272:	4798      	blx	r3
    e274:	0002      	movs	r2, r0
    e276:	000b      	movs	r3, r1
    e278:	9800      	ldr	r0, [sp, #0]
    e27a:	9901      	ldr	r1, [sp, #4]
    e27c:	4d2e      	ldr	r5, [pc, #184]	; (e338 <calculate_ToA+0x13c>)
    e27e:	47a8      	blx	r5
    e280:	4b2e      	ldr	r3, [pc, #184]	; (e33c <calculate_ToA+0x140>)
    e282:	4798      	blx	r3
    e284:	9000      	str	r0, [sp, #0]
	    if ( ((spreadFactor == 12) && ((bandWidth == 125) || (bandWidth == 250))) || ((spreadFactor == 11) && (bandWidth == 125)))
    e286:	2e0c      	cmp	r6, #12
    e288:	d040      	beq.n	e30c <calculate_ToA+0x110>
    e28a:	0033      	movs	r3, r6
    e28c:	3b0b      	subs	r3, #11
    e28e:	425a      	negs	r2, r3
    e290:	4153      	adcs	r3, r2
    e292:	b2db      	uxtb	r3, r3
	    ceilValueDenominator= (4 * (spreadFactor - 2 * ldro));
    e294:	005b      	lsls	r3, r3, #1
    e296:	1af3      	subs	r3, r6, r3
    e298:	009b      	lsls	r3, r3, #2
	    ceilValue = (ceilValueNumerator + ceilValueDenominator - 1.0) / ceilValueDenominator;
    e29a:	b2df      	uxtb	r7, r3
	    ceilValueNumerator = (8 * payload_length - 4 * spreadFactor + 28 + 16 * crcEnable - 20 * implicitHeaderMode);
    e29c:	4643      	mov	r3, r8
    e29e:	0058      	lsls	r0, r3, #1
    e2a0:	1b80      	subs	r0, r0, r6
    e2a2:	3007      	adds	r0, #7
    e2a4:	ab04      	add	r3, sp, #16
    e2a6:	3303      	adds	r3, #3
    e2a8:	781b      	ldrb	r3, [r3, #0]
    e2aa:	009b      	lsls	r3, r3, #2
    e2ac:	18c0      	adds	r0, r0, r3
    e2ae:	0080      	lsls	r0, r0, #2
	    ceilValue = (ceilValueNumerator + ceilValueDenominator - 1.0) / ceilValueDenominator;
    e2b0:	b280      	uxth	r0, r0
    e2b2:	19c0      	adds	r0, r0, r7
    e2b4:	4d1c      	ldr	r5, [pc, #112]	; (e328 <calculate_ToA+0x12c>)
    e2b6:	47a8      	blx	r5
    e2b8:	2200      	movs	r2, #0
    e2ba:	4b21      	ldr	r3, [pc, #132]	; (e340 <calculate_ToA+0x144>)
    e2bc:	4e21      	ldr	r6, [pc, #132]	; (e344 <calculate_ToA+0x148>)
    e2be:	47b0      	blx	r6
    e2c0:	9002      	str	r0, [sp, #8]
    e2c2:	9103      	str	r1, [sp, #12]
    e2c4:	0038      	movs	r0, r7
    e2c6:	47a8      	blx	r5
    e2c8:	0002      	movs	r2, r0
    e2ca:	000b      	movs	r3, r1
    e2cc:	9802      	ldr	r0, [sp, #8]
    e2ce:	9903      	ldr	r1, [sp, #12]
    e2d0:	4e1d      	ldr	r6, [pc, #116]	; (e348 <calculate_ToA+0x14c>)
    e2d2:	47b0      	blx	r6
    e2d4:	4b1d      	ldr	r3, [pc, #116]	; (e34c <calculate_ToA+0x150>)
    e2d6:	4798      	blx	r3
	    if ((ceilValue * (codingRate + 4)) > 0)
    e2d8:	b282      	uxth	r2, r0
    e2da:	ab04      	add	r3, sp, #16
    e2dc:	7998      	ldrb	r0, [r3, #6]
    e2de:	3004      	adds	r0, #4
    e2e0:	4350      	muls	r0, r2
    e2e2:	2800      	cmp	r0, #0
    e2e4:	dd14      	ble.n	e310 <calculate_ToA+0x114>
		    maxCeilValue = ceilValue * (codingRate + 4);
    e2e6:	4b0c      	ldr	r3, [pc, #48]	; (e318 <calculate_ToA+0x11c>)
    e2e8:	4798      	blx	r3
	    numberOfPayloadSymbols = 8 + maxCeilValue;
    e2ea:	4e19      	ldr	r6, [pc, #100]	; (e350 <calculate_ToA+0x154>)
    e2ec:	2182      	movs	r1, #130	; 0x82
    e2ee:	05c9      	lsls	r1, r1, #23
    e2f0:	47b0      	blx	r6
	    payloadDuration = numberOfPayloadSymbols * symbolTime;
    e2f2:	1c21      	adds	r1, r4, #0
    e2f4:	4b17      	ldr	r3, [pc, #92]	; (e354 <calculate_ToA+0x158>)
    e2f6:	4798      	blx	r3
	    totalTimeOnAir = preambleDuration + payloadDuration;
    e2f8:	9900      	ldr	r1, [sp, #0]
    e2fa:	47b0      	blx	r6
		return ((uint16_t)totalTimeOnAir) ;
    e2fc:	4b16      	ldr	r3, [pc, #88]	; (e358 <calculate_ToA+0x15c>)
    e2fe:	4798      	blx	r3
    e300:	b280      	uxth	r0, r0
}
    e302:	b007      	add	sp, #28
    e304:	bc0c      	pop	{r2, r3}
    e306:	4690      	mov	r8, r2
    e308:	4699      	mov	r9, r3
    e30a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		    ldro =  true;
    e30c:	2301      	movs	r3, #1
    e30e:	e7c1      	b.n	e294 <calculate_ToA+0x98>
		    maxCeilValue = 0;
    e310:	2000      	movs	r0, #0
    e312:	e7ea      	b.n	e2ea <calculate_ToA+0xee>
    e314:	00007a6d 	.word	0x00007a6d
    e318:	00016451 	.word	0x00016451
    e31c:	00015ab9 	.word	0x00015ab9
    e320:	47f42400 	.word	0x47f42400
    e324:	447a0000 	.word	0x447a0000
    e328:	00017f99 	.word	0x00017f99
    e32c:	40110000 	.word	0x40110000
    e330:	0001657d 	.word	0x0001657d
    e334:	0001808d 	.word	0x0001808d
    e338:	00017405 	.word	0x00017405
    e33c:	00018131 	.word	0x00018131
    e340:	3ff00000 	.word	0x3ff00000
    e344:	00017905 	.word	0x00017905
    e348:	00016b9d 	.word	0x00016b9d
    e34c:	00015599 	.word	0x00015599
    e350:	00015795 	.word	0x00015795
    e354:	00015e99 	.word	0x00015e99
    e358:	00015569 	.word	0x00015569

0000e35c <MiApp_SubscribeLinkFailureCallback>:
	if (NULL != callback)
    e35c:	2800      	cmp	r0, #0
    e35e:	d003      	beq.n	e368 <MiApp_SubscribeLinkFailureCallback+0xc>
		linkFailureCallback = callback;
    e360:	4b02      	ldr	r3, [pc, #8]	; (e36c <MiApp_SubscribeLinkFailureCallback+0x10>)
    e362:	6018      	str	r0, [r3, #0]
		return true;
    e364:	2001      	movs	r0, #1
}
    e366:	4770      	bx	lr
	return false;
    e368:	2000      	movs	r0, #0
    e36a:	e7fc      	b.n	e366 <MiApp_SubscribeLinkFailureCallback+0xa>
    e36c:	20003778 	.word	0x20003778

0000e370 <startCompleteProcedure>:
{
    e370:	b510      	push	{r4, lr}
    if (false == timeronly)
    e372:	2800      	cmp	r0, #0
    e374:	d102      	bne.n	e37c <startCompleteProcedure+0xc>
        role = PAN_COORD;
    e376:	2201      	movs	r2, #1
    e378:	4b0a      	ldr	r3, [pc, #40]	; (e3a4 <startCompleteProcedure+0x34>)
    e37a:	701a      	strb	r2, [r3, #0]
		inActiveDeviceCheckTimerSet = true;
    e37c:	2201      	movs	r2, #1
    e37e:	4b0a      	ldr	r3, [pc, #40]	; (e3a8 <startCompleteProcedure+0x38>)
    e380:	701a      	strb	r2, [r3, #0]
		inActiveDeviceCheckTimerTick.Val = MiWi_TickGet();
    e382:	4b0a      	ldr	r3, [pc, #40]	; (e3ac <startCompleteProcedure+0x3c>)
    e384:	4798      	blx	r3
    e386:	4b0a      	ldr	r3, [pc, #40]	; (e3b0 <startCompleteProcedure+0x40>)
    e388:	6018      	str	r0, [r3, #0]
		if(!sheerPeerDevInfoTimerSet)
    e38a:	4b0a      	ldr	r3, [pc, #40]	; (e3b4 <startCompleteProcedure+0x44>)
    e38c:	781b      	ldrb	r3, [r3, #0]
    e38e:	2b00      	cmp	r3, #0
    e390:	d000      	beq.n	e394 <startCompleteProcedure+0x24>
}
    e392:	bd10      	pop	{r4, pc}
			sheerPeerDevInfoTimerSet = true;
    e394:	2201      	movs	r2, #1
    e396:	4b07      	ldr	r3, [pc, #28]	; (e3b4 <startCompleteProcedure+0x44>)
    e398:	701a      	strb	r2, [r3, #0]
			sharePeerDevInfoTimerTick.Val = MiWi_TickGet();
    e39a:	4b04      	ldr	r3, [pc, #16]	; (e3ac <startCompleteProcedure+0x3c>)
    e39c:	4798      	blx	r3
    e39e:	4b06      	ldr	r3, [pc, #24]	; (e3b8 <startCompleteProcedure+0x48>)
    e3a0:	6018      	str	r0, [r3, #0]
}
    e3a2:	e7f6      	b.n	e392 <startCompleteProcedure+0x22>
    e3a4:	2000376c 	.word	0x2000376c
    e3a8:	200007d6 	.word	0x200007d6
    e3ac:	0000f6f1 	.word	0x0000f6f1
    e3b0:	20003474 	.word	0x20003474
    e3b4:	200007e0 	.word	0x200007e0
    e3b8:	20003790 	.word	0x20003790

0000e3bc <MiApp_StartConnection>:
    {
    e3bc:	b530      	push	{r4, r5, lr}
    e3be:	b083      	sub	sp, #12
    e3c0:	0014      	movs	r4, r2
    e3c2:	001d      	movs	r5, r3
        switch(Mode)
    e3c4:	2801      	cmp	r0, #1
    e3c6:	d035      	beq.n	e434 <MiApp_StartConnection+0x78>
    e3c8:	2800      	cmp	r0, #0
    e3ca:	d005      	beq.n	e3d8 <MiApp_StartConnection+0x1c>
    e3cc:	2802      	cmp	r0, #2
    e3ce:	d035      	beq.n	e43c <MiApp_StartConnection+0x80>
        ConfCallback(FAILURE);
    e3d0:	2001      	movs	r0, #1
    e3d2:	4798      	blx	r3
        return false;
    e3d4:	2000      	movs	r0, #0
    e3d6:	e02b      	b.n	e430 <MiApp_StartConnection+0x74>
                uint8_t channel = 0;
    e3d8:	2200      	movs	r2, #0
    e3da:	466b      	mov	r3, sp
    e3dc:	715a      	strb	r2, [r3, #5]
                        myPANID.Val = MY_PAN_ID;
    e3de:	4919      	ldr	r1, [pc, #100]	; (e444 <MiApp_StartConnection+0x88>)
    e3e0:	4b19      	ldr	r3, [pc, #100]	; (e448 <MiApp_StartConnection+0x8c>)
    e3e2:	800b      	strh	r3, [r1, #0]
                        uint16_t tmp = 0xFFFF;
    e3e4:	466b      	mov	r3, sp
    e3e6:	1d98      	adds	r0, r3, #6
    e3e8:	2301      	movs	r3, #1
    e3ea:	425b      	negs	r3, r3
    e3ec:	8003      	strh	r3, [r0, #0]
                        MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
    e3ee:	4b17      	ldr	r3, [pc, #92]	; (e44c <MiApp_StartConnection+0x90>)
    e3f0:	4798      	blx	r3
				while (!(index & ChannelMap))
    e3f2:	07e3      	lsls	r3, r4, #31
    e3f4:	d40a      	bmi.n	e40c <MiApp_StartConnection+0x50>
    e3f6:	466b      	mov	r3, sp
    e3f8:	3305      	adds	r3, #5
    e3fa:	781b      	ldrb	r3, [r3, #0]
    e3fc:	2201      	movs	r2, #1
				index = index << 1;
    e3fe:	0052      	lsls	r2, r2, #1
				++channel;
    e400:	3301      	adds	r3, #1
    e402:	b2db      	uxtb	r3, r3
				while (!(index & ChannelMap))
    e404:	4222      	tst	r2, r4
    e406:	d0fa      	beq.n	e3fe <MiApp_StartConnection+0x42>
    e408:	466a      	mov	r2, sp
    e40a:	7153      	strb	r3, [r2, #5]
				MiApp_Set(CHANNEL, &channel);
    e40c:	466b      	mov	r3, sp
    e40e:	1d59      	adds	r1, r3, #5
    e410:	2000      	movs	r0, #0
    e412:	4b0f      	ldr	r3, [pc, #60]	; (e450 <MiApp_StartConnection+0x94>)
    e414:	4798      	blx	r3
					startCompleteProcedure(false);
    e416:	2000      	movs	r0, #0
    e418:	4b0e      	ldr	r3, [pc, #56]	; (e454 <MiApp_StartConnection+0x98>)
    e41a:	4798      	blx	r3
                tick1.Val = MiWi_TickGet();
    e41c:	4c0e      	ldr	r4, [pc, #56]	; (e458 <MiApp_StartConnection+0x9c>)
    e41e:	47a0      	blx	r4
    e420:	4b0e      	ldr	r3, [pc, #56]	; (e45c <MiApp_StartConnection+0xa0>)
    e422:	6018      	str	r0, [r3, #0]
                tick4.Val = MiWi_TickGet();
    e424:	47a0      	blx	r4
    e426:	4b0e      	ldr	r3, [pc, #56]	; (e460 <MiApp_StartConnection+0xa4>)
    e428:	6018      	str	r0, [r3, #0]
				ConfCallback(SUCCESS);
    e42a:	2000      	movs	r0, #0
    e42c:	47a8      	blx	r5
                return true;
    e42e:	2001      	movs	r0, #1
    }
    e430:	b003      	add	sp, #12
    e432:	bd30      	pop	{r4, r5, pc}
                    ConfCallback(FAILURE);
    e434:	2001      	movs	r0, #1
    e436:	4798      	blx	r3
                    return false;
    e438:	2000      	movs	r0, #0
    e43a:	e7f9      	b.n	e430 <MiApp_StartConnection+0x74>
                ConfCallback(FAILURE);
    e43c:	2001      	movs	r0, #1
    e43e:	4798      	blx	r3
                return false;
    e440:	2000      	movs	r0, #0
    e442:	e7f5      	b.n	e430 <MiApp_StartConnection+0x74>
    e444:	20003478 	.word	0x20003478
    e448:	00001234 	.word	0x00001234
    e44c:	0000be61 	.word	0x0000be61
    e450:	0000dc25 	.word	0x0000dc25
    e454:	0000e371 	.word	0x0000e371
    e458:	0000f6f1 	.word	0x0000f6f1
    e45c:	20003770 	.word	0x20003770
    e460:	20003458 	.word	0x20003458

0000e464 <startLinkStatusTimer>:
{
    e464:	b510      	push	{r4, lr}
	linkStatusTimerTick.Val = MiWi_TickGet();
    e466:	4b04      	ldr	r3, [pc, #16]	; (e478 <startLinkStatusTimer+0x14>)
    e468:	4798      	blx	r3
    e46a:	4b04      	ldr	r3, [pc, #16]	; (e47c <startLinkStatusTimer+0x18>)
    e46c:	6018      	str	r0, [r3, #0]
	linkStatusTimerSet = true;
    e46e:	2201      	movs	r2, #1
    e470:	4b03      	ldr	r3, [pc, #12]	; (e480 <startLinkStatusTimer+0x1c>)
    e472:	701a      	strb	r2, [r3, #0]
}
    e474:	bd10      	pop	{r4, pc}
    e476:	46c0      	nop			; (mov r8, r8)
    e478:	0000f6f1 	.word	0x0000f6f1
    e47c:	20003774 	.word	0x20003774
    e480:	200007d9 	.word	0x200007d9

0000e484 <P2PTasks>:
{
    e484:	b5f0      	push	{r4, r5, r6, r7, lr}
    e486:	46d6      	mov	lr, sl
    e488:	464f      	mov	r7, r9
    e48a:	4646      	mov	r6, r8
    e48c:	b5c0      	push	{r6, r7, lr}
    e48e:	b08a      	sub	sp, #40	; 0x28
    MiMAC_Task();
    e490:	4bc7      	ldr	r3, [pc, #796]	; (e7b0 <P2PTasks+0x32c>)
    e492:	4798      	blx	r3
            if( indirectMessages[i].flags.bits.isValid )
    e494:	4bc7      	ldr	r3, [pc, #796]	; (e7b4 <P2PTasks+0x330>)
    e496:	7e9b      	ldrb	r3, [r3, #26]
    e498:	07db      	lsls	r3, r3, #31
    e49a:	d458      	bmi.n	e54e <P2PTasks+0xca>
    e49c:	239d      	movs	r3, #157	; 0x9d
    e49e:	005b      	lsls	r3, r3, #1
    e4a0:	4ac4      	ldr	r2, [pc, #784]	; (e7b4 <P2PTasks+0x330>)
    e4a2:	5cd3      	ldrb	r3, [r2, r3]
    e4a4:	07db      	lsls	r3, r3, #31
    e4a6:	d469      	bmi.n	e57c <P2PTasks+0xf8>
	if(ConnectionTableBroadcast)
    e4a8:	4bc3      	ldr	r3, [pc, #780]	; (e7b8 <P2PTasks+0x334>)
    e4aa:	781b      	ldrb	r3, [r3, #0]
    e4ac:	2b00      	cmp	r3, #0
    e4ae:	d000      	beq.n	e4b2 <P2PTasks+0x2e>
    e4b0:	e07f      	b.n	e5b2 <P2PTasks+0x12e>
	 if(LinkStatus)
    e4b2:	4bc2      	ldr	r3, [pc, #776]	; (e7bc <P2PTasks+0x338>)
    e4b4:	781b      	ldrb	r3, [r3, #0]
    e4b6:	2b00      	cmp	r3, #0
    e4b8:	d000      	beq.n	e4bc <P2PTasks+0x38>
    e4ba:	e08f      	b.n	e5dc <P2PTasks+0x158>
	ack_timeout_variable = calculate_ToA(PACKETLEN_ACK);
    e4bc:	2016      	movs	r0, #22
    e4be:	4bc0      	ldr	r3, [pc, #768]	; (e7c0 <P2PTasks+0x33c>)
    e4c0:	4798      	blx	r3
	ack_timeout_variable = (ack_timeout_variable + TOTAL_ACK_PROCESSING_DELAY) * 1000;
    e4c2:	23fa      	movs	r3, #250	; 0xfa
    e4c4:	009b      	lsls	r3, r3, #2
    e4c6:	4358      	muls	r0, r3
    e4c8:	4bbe      	ldr	r3, [pc, #760]	; (e7c4 <P2PTasks+0x340>)
    e4ca:	469c      	mov	ip, r3
    e4cc:	4460      	add	r0, ip
    e4ce:	4bbe      	ldr	r3, [pc, #760]	; (e7c8 <P2PTasks+0x344>)
    e4d0:	6018      	str	r0, [r3, #0]
	if((AckReqData) && (DataTxAckTimer.Val)) // AckReqData
    e4d2:	4bbe      	ldr	r3, [pc, #760]	; (e7cc <P2PTasks+0x348>)
    e4d4:	781b      	ldrb	r3, [r3, #0]
    e4d6:	2b00      	cmp	r3, #0
    e4d8:	d004      	beq.n	e4e4 <P2PTasks+0x60>
    e4da:	4bbd      	ldr	r3, [pc, #756]	; (e7d0 <P2PTasks+0x34c>)
    e4dc:	681b      	ldr	r3, [r3, #0]
    e4de:	2b00      	cmp	r3, #0
    e4e0:	d000      	beq.n	e4e4 <P2PTasks+0x60>
    e4e2:	e095      	b.n	e610 <P2PTasks+0x18c>
	sw_timeout_variable = calculate_ToA(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_CMD_DATA_TO_ENDDEV_SUCCESS));
    e4e4:	2010      	movs	r0, #16
    e4e6:	4bb6      	ldr	r3, [pc, #728]	; (e7c0 <P2PTasks+0x33c>)
    e4e8:	4798      	blx	r3
	sw_timeout_variable = (sw_timeout_variable + FORWARD_PACKET_PROCESSING_DELAY)*1000;
    e4ea:	23fa      	movs	r3, #250	; 0xfa
    e4ec:	009b      	lsls	r3, r3, #2
    e4ee:	4358      	muls	r0, r3
    e4f0:	4bb8      	ldr	r3, [pc, #736]	; (e7d4 <P2PTasks+0x350>)
    e4f2:	469c      	mov	ip, r3
    e4f4:	4460      	add	r0, ip
    e4f6:	4bb8      	ldr	r3, [pc, #736]	; (e7d8 <P2PTasks+0x354>)
    e4f8:	6018      	str	r0, [r3, #0]
	if(role == END_DEVICE)
    e4fa:	4bb8      	ldr	r3, [pc, #736]	; (e7dc <P2PTasks+0x358>)
    e4fc:	781b      	ldrb	r3, [r3, #0]
    e4fe:	2b02      	cmp	r3, #2
    e500:	d100      	bne.n	e504 <P2PTasks+0x80>
    e502:	e09d      	b.n	e640 <P2PTasks+0x1bc>
    if( P2PStatus.bits.RxHasUserData == 0 && MiMAC_ReceivedPacket())
    e504:	4bb6      	ldr	r3, [pc, #728]	; (e7e0 <P2PTasks+0x35c>)
    e506:	781b      	ldrb	r3, [r3, #0]
    e508:	071b      	lsls	r3, r3, #28
    e50a:	d400      	bmi.n	e50e <P2PTasks+0x8a>
    e50c:	e0c3      	b.n	e696 <P2PTasks+0x212>
		if((sheerPeerDevInfoTimerSet) && (role == PAN_COORD) && !checkRxDataBuffer())
    e50e:	4bb5      	ldr	r3, [pc, #724]	; (e7e4 <P2PTasks+0x360>)
    e510:	781b      	ldrb	r3, [r3, #0]
    e512:	2b00      	cmp	r3, #0
    e514:	d101      	bne.n	e51a <P2PTasks+0x96>
    e516:	f000 fde1 	bl	f0dc <P2PTasks+0xc58>
    e51a:	4bb0      	ldr	r3, [pc, #704]	; (e7dc <P2PTasks+0x358>)
    e51c:	781b      	ldrb	r3, [r3, #0]
    e51e:	2b01      	cmp	r3, #1
    e520:	d101      	bne.n	e526 <P2PTasks+0xa2>
    e522:	f000 fdc7 	bl	f0b4 <P2PTasks+0xc30>
		if((linkStatusTimerSet))
    e526:	4bb0      	ldr	r3, [pc, #704]	; (e7e8 <P2PTasks+0x364>)
    e528:	781b      	ldrb	r3, [r3, #0]
    e52a:	2b00      	cmp	r3, #0
    e52c:	d009      	beq.n	e542 <P2PTasks+0xbe>
			if((!AckReqData && !SwAckReq && !checkRxDataBuffer() && !SendData))
    e52e:	4ba7      	ldr	r3, [pc, #668]	; (e7cc <P2PTasks+0x348>)
    e530:	781b      	ldrb	r3, [r3, #0]
    e532:	2b00      	cmp	r3, #0
    e534:	d105      	bne.n	e542 <P2PTasks+0xbe>
    e536:	4bad      	ldr	r3, [pc, #692]	; (e7ec <P2PTasks+0x368>)
    e538:	781b      	ldrb	r3, [r3, #0]
    e53a:	2b00      	cmp	r3, #0
    e53c:	d101      	bne.n	e542 <P2PTasks+0xbe>
    e53e:	f000 fe35 	bl	f1ac <P2PTasks+0xd28>
}
    e542:	b00a      	add	sp, #40	; 0x28
    e544:	bc1c      	pop	{r2, r3, r4}
    e546:	4690      	mov	r8, r2
    e548:	4699      	mov	r9, r3
    e54a:	46a2      	mov	sl, r4
    e54c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                tmpTick.Val = MiWi_TickGet();
    e54e:	4ba8      	ldr	r3, [pc, #672]	; (e7f0 <P2PTasks+0x36c>)
    e550:	4798      	blx	r3
                if( MiWi_TickGetDiff(tmpTick, indirectMessages[i].TickStart) > INDIRECT_MESSAGE_TIMEOUT )
    e552:	4b98      	ldr	r3, [pc, #608]	; (e7b4 <P2PTasks+0x330>)
    e554:	6819      	ldr	r1, [r3, #0]
    e556:	4ba7      	ldr	r3, [pc, #668]	; (e7f4 <P2PTasks+0x370>)
    e558:	4798      	blx	r3
    e55a:	4ba7      	ldr	r3, [pc, #668]	; (e7f8 <P2PTasks+0x374>)
    e55c:	4298      	cmp	r0, r3
    e55e:	d99d      	bls.n	e49c <P2PTasks+0x18>
                    indirectMessages[i].flags.Val = 0x00;   
    e560:	4b94      	ldr	r3, [pc, #592]	; (e7b4 <P2PTasks+0x330>)
    e562:	2200      	movs	r2, #0
    e564:	769a      	strb	r2, [r3, #26]
                    indirectMessages[i].indirectConfCallback(indirectMessages[i].indirectDataHandle, TRANSACTION_EXPIRED, indirectMessages[i].PayLoad);
    e566:	001a      	movs	r2, r3
    e568:	321c      	adds	r2, #28
    e56a:	211c      	movs	r1, #28
    e56c:	31ff      	adds	r1, #255	; 0xff
    e56e:	5c58      	ldrb	r0, [r3, r1]
    e570:	3101      	adds	r1, #1
    e572:	585b      	ldr	r3, [r3, r1]
    e574:	3918      	subs	r1, #24
    e576:	39ff      	subs	r1, #255	; 0xff
    e578:	4798      	blx	r3
    e57a:	e78f      	b.n	e49c <P2PTasks+0x18>
                tmpTick.Val = MiWi_TickGet();
    e57c:	4b9c      	ldr	r3, [pc, #624]	; (e7f0 <P2PTasks+0x36c>)
    e57e:	4798      	blx	r3
                if( MiWi_TickGetDiff(tmpTick, indirectMessages[i].TickStart) > INDIRECT_MESSAGE_TIMEOUT )
    e580:	2390      	movs	r3, #144	; 0x90
    e582:	005b      	lsls	r3, r3, #1
    e584:	4a8b      	ldr	r2, [pc, #556]	; (e7b4 <P2PTasks+0x330>)
    e586:	58d1      	ldr	r1, [r2, r3]
    e588:	4b9a      	ldr	r3, [pc, #616]	; (e7f4 <P2PTasks+0x370>)
    e58a:	4798      	blx	r3
    e58c:	4b9a      	ldr	r3, [pc, #616]	; (e7f8 <P2PTasks+0x374>)
    e58e:	4298      	cmp	r0, r3
    e590:	d800      	bhi.n	e594 <P2PTasks+0x110>
    e592:	e789      	b.n	e4a8 <P2PTasks+0x24>
                    indirectMessages[i].flags.Val = 0x00;   
    e594:	4b87      	ldr	r3, [pc, #540]	; (e7b4 <P2PTasks+0x330>)
    e596:	2100      	movs	r1, #0
    e598:	229d      	movs	r2, #157	; 0x9d
    e59a:	0052      	lsls	r2, r2, #1
    e59c:	5499      	strb	r1, [r3, r2]
                    indirectMessages[i].indirectConfCallback(indirectMessages[i].indirectDataHandle, TRANSACTION_EXPIRED, indirectMessages[i].PayLoad);
    e59e:	001a      	movs	r2, r3
    e5a0:	323d      	adds	r2, #61	; 0x3d
    e5a2:	32ff      	adds	r2, #255	; 0xff
    e5a4:	4995      	ldr	r1, [pc, #596]	; (e7fc <P2PTasks+0x378>)
    e5a6:	5c58      	ldrb	r0, [r3, r1]
    e5a8:	3101      	adds	r1, #1
    e5aa:	585b      	ldr	r3, [r3, r1]
    e5ac:	2105      	movs	r1, #5
    e5ae:	4798      	blx	r3
    e5b0:	e77a      	b.n	e4a8 <P2PTasks+0x24>
		 tmpTick1.Val = MiWi_TickGet();
    e5b2:	4b8f      	ldr	r3, [pc, #572]	; (e7f0 <P2PTasks+0x36c>)
    e5b4:	4798      	blx	r3
		 if( MiWi_TickGetDiff(tmpTick1, sharePeerDevInfoTimerTick) > 2*(ONE_SECOND))
    e5b6:	4b92      	ldr	r3, [pc, #584]	; (e800 <P2PTasks+0x37c>)
    e5b8:	6819      	ldr	r1, [r3, #0]
    e5ba:	4b8e      	ldr	r3, [pc, #568]	; (e7f4 <P2PTasks+0x370>)
    e5bc:	4798      	blx	r3
    e5be:	4b91      	ldr	r3, [pc, #580]	; (e804 <P2PTasks+0x380>)
    e5c0:	4298      	cmp	r0, r3
    e5c2:	d800      	bhi.n	e5c6 <P2PTasks+0x142>
    e5c4:	e775      	b.n	e4b2 <P2PTasks+0x2e>
			 PHY_DataConf(FAILURE);
    e5c6:	2001      	movs	r0, #1
    e5c8:	4b8f      	ldr	r3, [pc, #572]	; (e808 <P2PTasks+0x384>)
    e5ca:	4798      	blx	r3
			 ConnectionTableBroadcast = false;
    e5cc:	2200      	movs	r2, #0
    e5ce:	4b7a      	ldr	r3, [pc, #488]	; (e7b8 <P2PTasks+0x334>)
    e5d0:	701a      	strb	r2, [r3, #0]
			 sharePeerDevInfoTimerTick.Val = MiWi_TickGet();
    e5d2:	4b87      	ldr	r3, [pc, #540]	; (e7f0 <P2PTasks+0x36c>)
    e5d4:	4798      	blx	r3
    e5d6:	4b8a      	ldr	r3, [pc, #552]	; (e800 <P2PTasks+0x37c>)
    e5d8:	6018      	str	r0, [r3, #0]
    e5da:	e76a      	b.n	e4b2 <P2PTasks+0x2e>
		 tmpTick.Val = MiWi_TickGet();
    e5dc:	4b84      	ldr	r3, [pc, #528]	; (e7f0 <P2PTasks+0x36c>)
    e5de:	4798      	blx	r3
		 if( MiWi_TickGetDiff(tmpTick, linkStatusTimerTick) > 2.5*(ONE_SECOND) )
    e5e0:	4b8a      	ldr	r3, [pc, #552]	; (e80c <P2PTasks+0x388>)
    e5e2:	6819      	ldr	r1, [r3, #0]
    e5e4:	4b83      	ldr	r3, [pc, #524]	; (e7f4 <P2PTasks+0x370>)
    e5e6:	4798      	blx	r3
    e5e8:	4b89      	ldr	r3, [pc, #548]	; (e810 <P2PTasks+0x38c>)
    e5ea:	4798      	blx	r3
    e5ec:	2200      	movs	r2, #0
    e5ee:	4b89      	ldr	r3, [pc, #548]	; (e814 <P2PTasks+0x390>)
    e5f0:	4c89      	ldr	r4, [pc, #548]	; (e818 <P2PTasks+0x394>)
    e5f2:	47a0      	blx	r4
    e5f4:	2800      	cmp	r0, #0
    e5f6:	d100      	bne.n	e5fa <P2PTasks+0x176>
    e5f8:	e760      	b.n	e4bc <P2PTasks+0x38>
			 PHY_DataConf(FAILURE);
    e5fa:	2001      	movs	r0, #1
    e5fc:	4b82      	ldr	r3, [pc, #520]	; (e808 <P2PTasks+0x384>)
    e5fe:	4798      	blx	r3
			 linkStatusTimerTick.Val = MiWi_TickGet();
    e600:	4b7b      	ldr	r3, [pc, #492]	; (e7f0 <P2PTasks+0x36c>)
    e602:	4798      	blx	r3
    e604:	4b81      	ldr	r3, [pc, #516]	; (e80c <P2PTasks+0x388>)
    e606:	6018      	str	r0, [r3, #0]
			 LinkStatus = false;
    e608:	2200      	movs	r2, #0
    e60a:	4b6c      	ldr	r3, [pc, #432]	; (e7bc <P2PTasks+0x338>)
    e60c:	701a      	strb	r2, [r3, #0]
    e60e:	e755      	b.n	e4bc <P2PTasks+0x38>
		tmpTick.Val = MiWi_TickGet();
    e610:	4b77      	ldr	r3, [pc, #476]	; (e7f0 <P2PTasks+0x36c>)
    e612:	4798      	blx	r3
		if( MiWi_TickGetDiff(tmpTick, DataTxAckTimer) > ((ack_timeout_variable) * ACK_TIMEOUT_INTERVAL))
    e614:	4b6e      	ldr	r3, [pc, #440]	; (e7d0 <P2PTasks+0x34c>)
    e616:	6819      	ldr	r1, [r3, #0]
    e618:	4b76      	ldr	r3, [pc, #472]	; (e7f4 <P2PTasks+0x370>)
    e61a:	4798      	blx	r3
    e61c:	4b6a      	ldr	r3, [pc, #424]	; (e7c8 <P2PTasks+0x344>)
    e61e:	681a      	ldr	r2, [r3, #0]
    e620:	0053      	lsls	r3, r2, #1
    e622:	189b      	adds	r3, r3, r2
    e624:	4298      	cmp	r0, r3
    e626:	d800      	bhi.n	e62a <P2PTasks+0x1a6>
    e628:	e75c      	b.n	e4e4 <P2PTasks+0x60>
			DataTxAckTimer.Val =0;
    e62a:	2300      	movs	r3, #0
    e62c:	4a68      	ldr	r2, [pc, #416]	; (e7d0 <P2PTasks+0x34c>)
    e62e:	6013      	str	r3, [r2, #0]
			AckReqData = 0;
    e630:	4a66      	ldr	r2, [pc, #408]	; (e7cc <P2PTasks+0x348>)
    e632:	7013      	strb	r3, [r2, #0]
			MiMAC_RetryPacket();
    e634:	4b79      	ldr	r3, [pc, #484]	; (e81c <P2PTasks+0x398>)
    e636:	4798      	blx	r3
			printf("\r\n Ack Timeout\r\n");
    e638:	4879      	ldr	r0, [pc, #484]	; (e820 <P2PTasks+0x39c>)
    e63a:	4b7a      	ldr	r3, [pc, #488]	; (e824 <P2PTasks+0x3a0>)
    e63c:	4798      	blx	r3
    e63e:	e751      	b.n	e4e4 <P2PTasks+0x60>
		if((SwAckReq))
    e640:	4b6a      	ldr	r3, [pc, #424]	; (e7ec <P2PTasks+0x368>)
    e642:	781b      	ldrb	r3, [r3, #0]
    e644:	2b00      	cmp	r3, #0
    e646:	d100      	bne.n	e64a <P2PTasks+0x1c6>
    e648:	e75c      	b.n	e504 <P2PTasks+0x80>
    e64a:	4c77      	ldr	r4, [pc, #476]	; (e828 <P2PTasks+0x3a4>)
    e64c:	2500      	movs	r5, #0
    e64e:	e005      	b.n	e65c <P2PTasks+0x1d8>
    e650:	3501      	adds	r5, #1
    e652:	3415      	adds	r4, #21
    e654:	34ff      	adds	r4, #255	; 0xff
			for(i = 0; i < FORWARD_PACKET_BANK_SIZE; i++)
    e656:	2d06      	cmp	r5, #6
    e658:	d100      	bne.n	e65c <P2PTasks+0x1d8>
    e65a:	e753      	b.n	e504 <P2PTasks+0x80>
				if( forwardMessages[i].fromEDToED)
    e65c:	7ca3      	ldrb	r3, [r4, #18]
    e65e:	2b00      	cmp	r3, #0
    e660:	d0f6      	beq.n	e650 <P2PTasks+0x1cc>
					tmpTick.Val = MiWi_TickGet();
    e662:	4b63      	ldr	r3, [pc, #396]	; (e7f0 <P2PTasks+0x36c>)
    e664:	4798      	blx	r3
					if( (MiWi_TickGetDiff(tmpTick, forwardMessages[i].TickStart)) > ((sw_timeout_variable) * SW_ACK_TIMEOUT))
    e666:	238a      	movs	r3, #138	; 0x8a
    e668:	005b      	lsls	r3, r3, #1
    e66a:	436b      	muls	r3, r5
    e66c:	4a6e      	ldr	r2, [pc, #440]	; (e828 <P2PTasks+0x3a4>)
    e66e:	4694      	mov	ip, r2
    e670:	4463      	add	r3, ip
    e672:	68d9      	ldr	r1, [r3, #12]
    e674:	4b5f      	ldr	r3, [pc, #380]	; (e7f4 <P2PTasks+0x370>)
    e676:	4798      	blx	r3
    e678:	4b57      	ldr	r3, [pc, #348]	; (e7d8 <P2PTasks+0x354>)
    e67a:	681b      	ldr	r3, [r3, #0]
    e67c:	009b      	lsls	r3, r3, #2
    e67e:	4298      	cmp	r0, r3
    e680:	d9e6      	bls.n	e650 <P2PTasks+0x1cc>
						forwardMessages[i].fromEDToED = 0;
    e682:	2300      	movs	r3, #0
    e684:	74a3      	strb	r3, [r4, #18]
						SwAckReq = false;
    e686:	4a59      	ldr	r2, [pc, #356]	; (e7ec <P2PTasks+0x368>)
    e688:	7013      	strb	r3, [r2, #0]
						forwardMessages[i].confCallback(forwardMessages[i].msghandle, NO_ACK, NULL);
    e68a:	7ce0      	ldrb	r0, [r4, #19]
    e68c:	6823      	ldr	r3, [r4, #0]
    e68e:	2200      	movs	r2, #0
    e690:	2103      	movs	r1, #3
    e692:	4798      	blx	r3
    e694:	e7dc      	b.n	e650 <P2PTasks+0x1cc>
    if( P2PStatus.bits.RxHasUserData == 0 && MiMAC_ReceivedPacket())
    e696:	4b65      	ldr	r3, [pc, #404]	; (e82c <P2PTasks+0x3a8>)
    e698:	4798      	blx	r3
    e69a:	2800      	cmp	r0, #0
    e69c:	d100      	bne.n	e6a0 <P2PTasks+0x21c>
    e69e:	e736      	b.n	e50e <P2PTasks+0x8a>
            temp_bit = MACRxPacket.flags.bits.broadcast;
    e6a0:	4b63      	ldr	r3, [pc, #396]	; (e830 <P2PTasks+0x3ac>)
    e6a2:	7819      	ldrb	r1, [r3, #0]
    e6a4:	074b      	lsls	r3, r1, #29
    e6a6:	0fdb      	lsrs	r3, r3, #31
    e6a8:	4a62      	ldr	r2, [pc, #392]	; (e834 <P2PTasks+0x3b0>)
    e6aa:	7013      	strb	r3, [r2, #0]
            rxMessage.flags.bits.broadcast = temp_bit;
    e6ac:	2203      	movs	r2, #3
        rxMessage.flags.bits.secEn = MACRxPacket.flags.bits.secEn;
    e6ae:	08cd      	lsrs	r5, r1, #3
    e6b0:	2401      	movs	r4, #1
    e6b2:	4025      	ands	r5, r4
    e6b4:	00ed      	lsls	r5, r5, #3
    e6b6:	4013      	ands	r3, r2
        rxMessage.flags.bits.command = (MACRxPacket.flags.bits.packetType == PACKET_TYPE_COMMAND) ? 1:0;
    e6b8:	400a      	ands	r2, r1
    e6ba:	3a01      	subs	r2, #1
    e6bc:	4257      	negs	r7, r2
    e6be:	4157      	adcs	r7, r2
    e6c0:	003a      	movs	r2, r7
    e6c2:	4022      	ands	r2, r4
    e6c4:	0152      	lsls	r2, r2, #5
    e6c6:	432b      	orrs	r3, r5
        rxMessage.flags.bits.srcPrsnt = MACRxPacket.flags.bits.sourcePrsnt;
    e6c8:	09cd      	lsrs	r5, r1, #7
    e6ca:	402c      	ands	r4, r5
    e6cc:	01a4      	lsls	r4, r4, #6
    e6ce:	4313      	orrs	r3, r2
    e6d0:	4323      	orrs	r3, r4
    e6d2:	4a59      	ldr	r2, [pc, #356]	; (e838 <P2PTasks+0x3b4>)
    e6d4:	7013      	strb	r3, [r2, #0]
        if( MACRxPacket.flags.bits.sourcePrsnt )
    e6d6:	b249      	sxtb	r1, r1
    e6d8:	2900      	cmp	r1, #0
    e6da:	db37      	blt.n	e74c <P2PTasks+0x2c8>
            rxMessage.SourcePANID.Val = MACRxPacket.SourcePANID.Val;
    e6dc:	4a54      	ldr	r2, [pc, #336]	; (e830 <P2PTasks+0x3ac>)
    e6de:	8a14      	ldrh	r4, [r2, #16]
    e6e0:	4b55      	ldr	r3, [pc, #340]	; (e838 <P2PTasks+0x3b4>)
    e6e2:	805c      	strh	r4, [r3, #2]
        rxMessage.PayloadSize = MACRxPacket.PayloadLen;
    e6e4:	7b15      	ldrb	r5, [r2, #12]
    e6e6:	731d      	strb	r5, [r3, #12]
        rxMessage.Payload = MACRxPacket.Payload;
    e6e8:	6891      	ldr	r1, [r2, #8]
    e6ea:	6099      	str	r1, [r3, #8]
            rxMessage.PacketLQI = MACRxPacket.LQIValue;
    e6ec:	7b96      	ldrb	r6, [r2, #14]
    e6ee:	739e      	strb	r6, [r3, #14]
            rxMessage.PacketRSSI = MACRxPacket.RSSIValue;
    e6f0:	7b52      	ldrb	r2, [r2, #13]
    e6f2:	735a      	strb	r2, [r3, #13]
        if( rxMessage.flags.bits.command )
    e6f4:	781b      	ldrb	r3, [r3, #0]
    e6f6:	069b      	lsls	r3, r3, #26
    e6f8:	d401      	bmi.n	e6fe <P2PTasks+0x27a>
    e6fa:	f000 fcb5 	bl	f068 <P2PTasks+0xbe4>
            switch( rxMessage.Payload[0] )
    e6fe:	780b      	ldrb	r3, [r1, #0]
    e700:	b2da      	uxtb	r2, r3
    e702:	2a83      	cmp	r2, #131	; 0x83
    e704:	d100      	bne.n	e708 <P2PTasks+0x284>
    e706:	e3e1      	b.n	eecc <P2PTasks+0xa48>
    e708:	d925      	bls.n	e756 <P2PTasks+0x2d2>
    e70a:	b2da      	uxtb	r2, r3
    e70c:	2a92      	cmp	r2, #146	; 0x92
    e70e:	d100      	bne.n	e712 <P2PTasks+0x28e>
    e710:	e3b9      	b.n	ee86 <P2PTasks+0xa02>
    e712:	d800      	bhi.n	e716 <P2PTasks+0x292>
    e714:	e09e      	b.n	e854 <P2PTasks+0x3d0>
    e716:	b2da      	uxtb	r2, r3
    e718:	2acc      	cmp	r2, #204	; 0xcc
    e71a:	d100      	bne.n	e71e <P2PTasks+0x29a>
    e71c:	e2e5      	b.n	ecea <P2PTasks+0x866>
    e71e:	2ada      	cmp	r2, #218	; 0xda
    e720:	d100      	bne.n	e724 <P2PTasks+0x2a0>
    e722:	e2c9      	b.n	ecb8 <P2PTasks+0x834>
    e724:	2a97      	cmp	r2, #151	; 0x97
    e726:	d100      	bne.n	e72a <P2PTasks+0x2a6>
    e728:	e1fd      	b.n	eb26 <P2PTasks+0x6a2>
                    P2PStatus.bits.RxHasUserData = 1;
    e72a:	4c2d      	ldr	r4, [pc, #180]	; (e7e0 <P2PTasks+0x35c>)
    e72c:	7823      	ldrb	r3, [r4, #0]
    e72e:	2208      	movs	r2, #8
    e730:	4313      	orrs	r3, r2
    e732:	7023      	strb	r3, [r4, #0]
					pktRxcallback(&rxMessage);
    e734:	4b41      	ldr	r3, [pc, #260]	; (e83c <P2PTasks+0x3b8>)
    e736:	681b      	ldr	r3, [r3, #0]
    e738:	483f      	ldr	r0, [pc, #252]	; (e838 <P2PTasks+0x3b4>)
    e73a:	4798      	blx	r3
					P2PStatus.bits.RxHasUserData = 0;
    e73c:	7823      	ldrb	r3, [r4, #0]
    e73e:	2208      	movs	r2, #8
    e740:	4393      	bics	r3, r2
    e742:	7023      	strb	r3, [r4, #0]
					MiMAC_DiscardPacket();
    e744:	4b3e      	ldr	r3, [pc, #248]	; (e840 <P2PTasks+0x3bc>)
    e746:	4798      	blx	r3
                    break;
    e748:	f000 fc9d 	bl	f086 <P2PTasks+0xc02>
            rxMessage.SourceAddress = MACRxPacket.SourceAddress;
    e74c:	4b38      	ldr	r3, [pc, #224]	; (e830 <P2PTasks+0x3ac>)
    e74e:	685a      	ldr	r2, [r3, #4]
    e750:	4b39      	ldr	r3, [pc, #228]	; (e838 <P2PTasks+0x3b4>)
    e752:	605a      	str	r2, [r3, #4]
    e754:	e7c2      	b.n	e6dc <P2PTasks+0x258>
            switch( rxMessage.Payload[0] )
    e756:	2b7a      	cmp	r3, #122	; 0x7a
    e758:	d100      	bne.n	e75c <P2PTasks+0x2d8>
    e75a:	e371      	b.n	ee40 <P2PTasks+0x9bc>
    e75c:	2a7a      	cmp	r2, #122	; 0x7a
    e75e:	d918      	bls.n	e792 <P2PTasks+0x30e>
    e760:	b2da      	uxtb	r2, r3
    e762:	2a81      	cmp	r2, #129	; 0x81
    e764:	d100      	bne.n	e768 <P2PTasks+0x2e4>
    e766:	e0a3      	b.n	e8b0 <P2PTasks+0x42c>
    e768:	2a82      	cmp	r2, #130	; 0x82
    e76a:	d1de      	bne.n	e72a <P2PTasks+0x2a6>
                            dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_P2P_CONNECTION_REMOVAL_RESPONSE));
    e76c:	2010      	movs	r0, #16
    e76e:	4b35      	ldr	r3, [pc, #212]	; (e844 <P2PTasks+0x3c0>)
    e770:	4798      	blx	r3
    e772:	4681      	mov	r9, r0
                            if (NULL == dataPtr)
    e774:	2800      	cmp	r0, #0
    e776:	d100      	bne.n	e77a <P2PTasks+0x2f6>
    e778:	e6e3      	b.n	e542 <P2PTasks+0xbe>
                            dataPtr[dataLen++] = CMD_P2P_CONNECTION_REMOVAL_RESPONSE;
    e77a:	2392      	movs	r3, #146	; 0x92
    e77c:	7003      	strb	r3, [r0, #0]
                                    if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    e77e:	4b2e      	ldr	r3, [pc, #184]	; (e838 <P2PTasks+0x3b4>)
    e780:	685b      	ldr	r3, [r3, #4]
    e782:	9307      	str	r3, [sp, #28]
    e784:	4e30      	ldr	r6, [pc, #192]	; (e848 <P2PTasks+0x3c4>)
    e786:	2500      	movs	r5, #0
                            for(i = 0; i < CONNECTION_SIZE; i++)
    e788:	2400      	movs	r4, #0
                                if( ConnectionTable[i].status.bits.isValid )
    e78a:	4f30      	ldr	r7, [pc, #192]	; (e84c <P2PTasks+0x3c8>)
                                    if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    e78c:	4b30      	ldr	r3, [pc, #192]	; (e850 <P2PTasks+0x3cc>)
    e78e:	4698      	mov	r8, r3
    e790:	e178      	b.n	ea84 <P2PTasks+0x600>
            switch( rxMessage.Payload[0] )
    e792:	2b04      	cmp	r3, #4
    e794:	d100      	bne.n	e798 <P2PTasks+0x314>
    e796:	e399      	b.n	eecc <P2PTasks+0xa48>
    e798:	2b77      	cmp	r3, #119	; 0x77
    e79a:	d1c6      	bne.n	e72a <P2PTasks+0x2a6>
					if (END_DEVICE == role)
    e79c:	4b0f      	ldr	r3, [pc, #60]	; (e7dc <P2PTasks+0x358>)
    e79e:	781b      	ldrb	r3, [r3, #0]
    e7a0:	2b02      	cmp	r3, #2
    e7a2:	d100      	bne.n	e7a6 <P2PTasks+0x322>
    e7a4:	e1cb      	b.n	eb3e <P2PTasks+0x6ba>
					MiMAC_DiscardPacket();
    e7a6:	4b26      	ldr	r3, [pc, #152]	; (e840 <P2PTasks+0x3bc>)
    e7a8:	4798      	blx	r3
				break;
    e7aa:	f000 fc6c 	bl	f086 <P2PTasks+0xc02>
    e7ae:	46c0      	nop			; (mov r8, r8)
    e7b0:	0000c70d 	.word	0x0000c70d
    e7b4:	200034dc 	.word	0x200034dc
    e7b8:	200007ca 	.word	0x200007ca
    e7bc:	200007cc 	.word	0x200007cc
    e7c0:	0000e1fd 	.word	0x0000e1fd
    e7c4:	000f2eb8 	.word	0x000f2eb8
    e7c8:	200007d0 	.word	0x200007d0
    e7cc:	200007b8 	.word	0x200007b8
    e7d0:	2000378c 	.word	0x2000378c
    e7d4:	005b8d80 	.word	0x005b8d80
    e7d8:	200007e4 	.word	0x200007e4
    e7dc:	2000376c 	.word	0x2000376c
    e7e0:	200034d8 	.word	0x200034d8
    e7e4:	200007e0 	.word	0x200007e0
    e7e8:	200007d9 	.word	0x200007d9
    e7ec:	200007ce 	.word	0x200007ce
    e7f0:	0000f6f1 	.word	0x0000f6f1
    e7f4:	0000f751 	.word	0x0000f751
    e7f8:	016e3600 	.word	0x016e3600
    e7fc:	0000023b 	.word	0x0000023b
    e800:	20003790 	.word	0x20003790
    e804:	001e8480 	.word	0x001e8480
    e808:	0000c6a9 	.word	0x0000c6a9
    e80c:	20003774 	.word	0x20003774
    e810:	0001801d 	.word	0x0001801d
    e814:	414312d0 	.word	0x414312d0
    e818:	00015439 	.word	0x00015439
    e81c:	0000c6c9 	.word	0x0000c6c9
    e820:	0001ad4c 	.word	0x0001ad4c
    e824:	00018a31 	.word	0x00018a31
    e828:	20002c9c 	.word	0x20002c9c
    e82c:	0000c755 	.word	0x0000c755
    e830:	2000345c 	.word	0x2000345c
    e834:	20003480 	.word	0x20003480
    e838:	2000377c 	.word	0x2000377c
    e83c:	200007dc 	.word	0x200007dc
    e840:	0000c68d 	.word	0x0000c68d
    e844:	0000f4b1 	.word	0x0000f4b1
    e848:	2000331c 	.word	0x2000331c
    e84c:	20003318 	.word	0x20003318
    e850:	0000da69 	.word	0x0000da69
            switch( rxMessage.Payload[0] )
    e854:	2a87      	cmp	r2, #135	; 0x87
    e856:	d100      	bne.n	e85a <P2PTasks+0x3d6>
    e858:	e0c9      	b.n	e9ee <P2PTasks+0x56a>
    e85a:	2a91      	cmp	r2, #145	; 0x91
    e85c:	d000      	beq.n	e860 <P2PTasks+0x3dc>
    e85e:	e764      	b.n	e72a <P2PTasks+0x2a6>
                            switch( rxMessage.Payload[1] )
    e860:	784b      	ldrb	r3, [r1, #1]
    e862:	2b00      	cmp	r3, #0
    e864:	d100      	bne.n	e868 <P2PTasks+0x3e4>
    e866:	e13f      	b.n	eae8 <P2PTasks+0x664>
    e868:	2b01      	cmp	r3, #1
    e86a:	d11d      	bne.n	e8a8 <P2PTasks+0x424>
                                    if (EstConfCallback)
    e86c:	4bce      	ldr	r3, [pc, #824]	; (eba8 <P2PTasks+0x724>)
    e86e:	681b      	ldr	r3, [r3, #0]
    e870:	2b00      	cmp	r3, #0
    e872:	d004      	beq.n	e87e <P2PTasks+0x3fa>
                                        EstConfCallback(ALREADY_EXISTS);
    e874:	2006      	movs	r0, #6
    e876:	4798      	blx	r3
                                        EstConfCallback = NULL;
    e878:	2200      	movs	r2, #0
    e87a:	4bcb      	ldr	r3, [pc, #812]	; (eba8 <P2PTasks+0x724>)
    e87c:	601a      	str	r2, [r3, #0]
                                        if( myPANID.Val == 0xFFFF )
    e87e:	4bcb      	ldr	r3, [pc, #812]	; (ebac <P2PTasks+0x728>)
    e880:	881a      	ldrh	r2, [r3, #0]
    e882:	4bcb      	ldr	r3, [pc, #812]	; (ebb0 <P2PTasks+0x72c>)
    e884:	429a      	cmp	r2, r3
    e886:	d100      	bne.n	e88a <P2PTasks+0x406>
    e888:	e139      	b.n	eafe <P2PTasks+0x67a>
									P2PStatus.bits.SearchConnection = false;
    e88a:	4aca      	ldr	r2, [pc, #808]	; (ebb4 <P2PTasks+0x730>)
    e88c:	7813      	ldrb	r3, [r2, #0]
    e88e:	2110      	movs	r1, #16
    e890:	438b      	bics	r3, r1
    e892:	7013      	strb	r3, [r2, #0]
                                    uint8_t status = AddConnection();
    e894:	4bc8      	ldr	r3, [pc, #800]	; (ebb8 <P2PTasks+0x734>)
    e896:	4798      	blx	r3
									  if ((status == STATUS_SUCCESS) || (status == STATUS_EXISTS))
    e898:	2801      	cmp	r0, #1
    e89a:	d800      	bhi.n	e89e <P2PTasks+0x41a>
    e89c:	e13d      	b.n	eb1a <P2PTasks+0x696>
									  myConnectionIndex_in_PanCo = rxMessage.Payload[2];
    e89e:	4bc7      	ldr	r3, [pc, #796]	; (ebbc <P2PTasks+0x738>)
    e8a0:	689b      	ldr	r3, [r3, #8]
    e8a2:	789a      	ldrb	r2, [r3, #2]
    e8a4:	4bc6      	ldr	r3, [pc, #792]	; (ebc0 <P2PTasks+0x73c>)
    e8a6:	701a      	strb	r2, [r3, #0]
                        MiMAC_DiscardPacket();
    e8a8:	4bc6      	ldr	r3, [pc, #792]	; (ebc4 <P2PTasks+0x740>)
    e8aa:	4798      	blx	r3
                        break; 
    e8ac:	f000 fbeb 	bl	f086 <P2PTasks+0xc02>
							if(PAN_COORD != role)
    e8b0:	4bc5      	ldr	r3, [pc, #788]	; (ebc8 <P2PTasks+0x744>)
    e8b2:	781b      	ldrb	r3, [r3, #0]
    e8b4:	2b01      	cmp	r3, #1
    e8b6:	d005      	beq.n	e8c4 <P2PTasks+0x440>
								printf("esta en mode pan coordinator");
    e8b8:	48c4      	ldr	r0, [pc, #784]	; (ebcc <P2PTasks+0x748>)
    e8ba:	4bc5      	ldr	r3, [pc, #788]	; (ebd0 <P2PTasks+0x74c>)
    e8bc:	4798      	blx	r3
								MiMAC_DiscardPacket();
    e8be:	4bc1      	ldr	r3, [pc, #772]	; (ebc4 <P2PTasks+0x740>)
    e8c0:	4798      	blx	r3
								break;
    e8c2:	e3e0      	b.n	f086 <P2PTasks+0xc02>
                                if( currentChannel != rxMessage.Payload[1] )
    e8c4:	784a      	ldrb	r2, [r1, #1]
    e8c6:	4bc3      	ldr	r3, [pc, #780]	; (ebd4 <P2PTasks+0x750>)
    e8c8:	781b      	ldrb	r3, [r3, #0]
    e8ca:	429a      	cmp	r2, r3
    e8cc:	d002      	beq.n	e8d4 <P2PTasks+0x450>
                                    MiMAC_DiscardPacket();
    e8ce:	4bbd      	ldr	r3, [pc, #756]	; (ebc4 <P2PTasks+0x740>)
    e8d0:	4798      	blx	r3
                                    break;
    e8d2:	e3d8      	b.n	f086 <P2PTasks+0xc02>
                                if( ConnMode == DISABLE_ALL_CONN )
    e8d4:	4bc0      	ldr	r3, [pc, #768]	; (ebd8 <P2PTasks+0x754>)
    e8d6:	781b      	ldrb	r3, [r3, #0]
    e8d8:	2b03      	cmp	r3, #3
    e8da:	d052      	beq.n	e982 <P2PTasks+0x4fe>
                                    if( rxMessage.SourcePANID.Val != 0xFFFF &&
    e8dc:	4bb4      	ldr	r3, [pc, #720]	; (ebb0 <P2PTasks+0x72c>)
    e8de:	429c      	cmp	r4, r3
    e8e0:	d006      	beq.n	e8f0 <P2PTasks+0x46c>
                                        rxMessage.SourcePANID.Val != myPANID.Val &&
    e8e2:	4bb2      	ldr	r3, [pc, #712]	; (ebac <P2PTasks+0x728>)
                                    if( rxMessage.SourcePANID.Val != 0xFFFF &&
    e8e4:	881b      	ldrh	r3, [r3, #0]
    e8e6:	42a3      	cmp	r3, r4
    e8e8:	d002      	beq.n	e8f0 <P2PTasks+0x46c>
                                        status = STATUS_NOT_SAME_PAN;
    e8ea:	26f2      	movs	r6, #242	; 0xf2
                                        rxMessage.SourcePANID.Val != myPANID.Val &&
    e8ec:	2d02      	cmp	r5, #2
    e8ee:	d802      	bhi.n	e8f6 <P2PTasks+0x472>
                                    status = AddConnection();
    e8f0:	4bb1      	ldr	r3, [pc, #708]	; (ebb8 <P2PTasks+0x734>)
    e8f2:	4798      	blx	r3
    e8f4:	0006      	movs	r6, r0
									if (rxMessage.Payload[3] == 0xAA)
    e8f6:	4bb1      	ldr	r3, [pc, #708]	; (ebbc <P2PTasks+0x738>)
    e8f8:	689b      	ldr	r3, [r3, #8]
    e8fa:	78db      	ldrb	r3, [r3, #3]
    e8fc:	2baa      	cmp	r3, #170	; 0xaa
    e8fe:	d043      	beq.n	e988 <P2PTasks+0x504>
                                if( (ConnMode == ENABLE_PREV_CONN) && (status != STATUS_EXISTS && status != STATUS_ACTIVE_SCAN) )
    e900:	4bb5      	ldr	r3, [pc, #724]	; (ebd8 <P2PTasks+0x754>)
    e902:	781b      	ldrb	r3, [r3, #0]
    e904:	2b01      	cmp	r3, #1
    e906:	d053      	beq.n	e9b0 <P2PTasks+0x52c>
                                dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(TX_BUFFER_SIZE));
    e908:	20e0      	movs	r0, #224	; 0xe0
    e90a:	4bb4      	ldr	r3, [pc, #720]	; (ebdc <P2PTasks+0x758>)
    e90c:	4798      	blx	r3
    e90e:	1e04      	subs	r4, r0, #0
                                if (NULL == dataPtr)
    e910:	d100      	bne.n	e914 <P2PTasks+0x490>
    e912:	e616      	b.n	e542 <P2PTasks+0xbe>
                                dataPtr[dataLen++] = CMD_P2P_CONNECTION_RESPONSE;
    e914:	2391      	movs	r3, #145	; 0x91
    e916:	7003      	strb	r3, [r0, #0]
                                dataPtr[dataLen++] = status;
    e918:	7046      	strb	r6, [r0, #1]
                                dataPtr[dataLen++] = MyindexinPC;
    e91a:	4bb1      	ldr	r3, [pc, #708]	; (ebe0 <P2PTasks+0x75c>)
    e91c:	781b      	ldrb	r3, [r3, #0]
    e91e:	7083      	strb	r3, [r0, #2]
    e920:	2703      	movs	r7, #3
                                if( status == STATUS_SUCCESS ||
    e922:	2e01      	cmp	r6, #1
    e924:	d957      	bls.n	e9d6 <P2PTasks+0x552>
                                MiMAC_DiscardPacket();
    e926:	4ba7      	ldr	r3, [pc, #668]	; (ebc4 <P2PTasks+0x740>)
    e928:	4798      	blx	r3
                                i = PHY_RandomReq();
    e92a:	4bae      	ldr	r3, [pc, #696]	; (ebe4 <P2PTasks+0x760>)
    e92c:	4798      	blx	r3
    e92e:	b2c5      	uxtb	r5, r0
                                delay_s(i % (CONNECTION_INTERVAL-1));
    e930:	2103      	movs	r1, #3
    e932:	0028      	movs	r0, r5
    e934:	4bac      	ldr	r3, [pc, #688]	; (ebe8 <P2PTasks+0x764>)
    e936:	4798      	blx	r3
    e938:	b2c9      	uxtb	r1, r1
    e93a:	2900      	cmp	r1, #0
    e93c:	d053      	beq.n	e9e6 <P2PTasks+0x562>
    e93e:	20fa      	movs	r0, #250	; 0xfa
    e940:	0080      	lsls	r0, r0, #2
    e942:	4368      	muls	r0, r5
    e944:	2103      	movs	r1, #3
    e946:	4ba9      	ldr	r3, [pc, #676]	; (ebec <P2PTasks+0x768>)
    e948:	4798      	blx	r3
    e94a:	0008      	movs	r0, r1
    e94c:	4ba8      	ldr	r3, [pc, #672]	; (ebf0 <P2PTasks+0x76c>)
    e94e:	4798      	blx	r3
                                        SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn, 
    e950:	4b9a      	ldr	r3, [pc, #616]	; (ebbc <P2PTasks+0x738>)
    e952:	685a      	ldr	r2, [r3, #4]
    e954:	8859      	ldrh	r1, [r3, #2]
    e956:	48a7      	ldr	r0, [pc, #668]	; (ebf4 <P2PTasks+0x770>)
    e958:	9005      	str	r0, [sp, #20]
    e95a:	2001      	movs	r0, #1
    e95c:	9004      	str	r0, [sp, #16]
    e95e:	2000      	movs	r0, #0
    e960:	9003      	str	r0, [sp, #12]
    e962:	9402      	str	r4, [sp, #8]
    e964:	9701      	str	r7, [sp, #4]
    e966:	781b      	ldrb	r3, [r3, #0]
    e968:	071b      	lsls	r3, r3, #28
    e96a:	0fdb      	lsrs	r3, r3, #31
    e96c:	9300      	str	r3, [sp, #0]
    e96e:	2301      	movs	r3, #1
    e970:	4da1      	ldr	r5, [pc, #644]	; (ebf8 <P2PTasks+0x774>)
    e972:	47a8      	blx	r5
								MiMem_Free(dataPtr);
    e974:	0020      	movs	r0, r4
    e976:	4ba1      	ldr	r3, [pc, #644]	; (ebfc <P2PTasks+0x778>)
    e978:	4798      	blx	r3
								delay_ms (100);
    e97a:	2064      	movs	r0, #100	; 0x64
    e97c:	4b9c      	ldr	r3, [pc, #624]	; (ebf0 <P2PTasks+0x76c>)
    e97e:	4798      	blx	r3
                        break; 
    e980:	e381      	b.n	f086 <P2PTasks+0xc02>
                                    MiMAC_DiscardPacket();
    e982:	4b90      	ldr	r3, [pc, #576]	; (ebc4 <P2PTasks+0x740>)
    e984:	4798      	blx	r3
                                    break;
    e986:	e37e      	b.n	f086 <P2PTasks+0xc02>
											if (isSameAddress(rxMessage.SourceAddress, ConnectionTable[p].Address) )
    e988:	4b8c      	ldr	r3, [pc, #560]	; (ebbc <P2PTasks+0x738>)
    e98a:	685b      	ldr	r3, [r3, #4]
    e98c:	9306      	str	r3, [sp, #24]
    e98e:	4c9c      	ldr	r4, [pc, #624]	; (ec00 <P2PTasks+0x77c>)
    e990:	4d9c      	ldr	r5, [pc, #624]	; (ec04 <P2PTasks+0x780>)
    e992:	4f9d      	ldr	r7, [pc, #628]	; (ec08 <P2PTasks+0x784>)
												ConnectionTable[p].permanent_connections = 0xFF;
    e994:	23ff      	movs	r3, #255	; 0xff
    e996:	4699      	mov	r9, r3
    e998:	e002      	b.n	e9a0 <P2PTasks+0x51c>
    e99a:	3410      	adds	r4, #16
										for (uint8_t p = 0 ;p <CONNECTION_SIZE;p++)
    e99c:	42ac      	cmp	r4, r5
    e99e:	d0af      	beq.n	e900 <P2PTasks+0x47c>
											if (isSameAddress(rxMessage.SourceAddress, ConnectionTable[p].Address) )
    e9a0:	0021      	movs	r1, r4
    e9a2:	9806      	ldr	r0, [sp, #24]
    e9a4:	47b8      	blx	r7
    e9a6:	2800      	cmp	r0, #0
    e9a8:	d0f7      	beq.n	e99a <P2PTasks+0x516>
												ConnectionTable[p].permanent_connections = 0xFF;
    e9aa:	464b      	mov	r3, r9
    e9ac:	72e3      	strb	r3, [r4, #11]
    e9ae:	e7f4      	b.n	e99a <P2PTasks+0x516>
                                if( (ConnMode == ENABLE_PREV_CONN) && (status != STATUS_EXISTS && status != STATUS_ACTIVE_SCAN) )
    e9b0:	1e73      	subs	r3, r6, #1
    e9b2:	b2db      	uxtb	r3, r3
    e9b4:	2b01      	cmp	r3, #1
    e9b6:	d9a7      	bls.n	e908 <P2PTasks+0x484>
                                dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(TX_BUFFER_SIZE));
    e9b8:	20e0      	movs	r0, #224	; 0xe0
    e9ba:	4b88      	ldr	r3, [pc, #544]	; (ebdc <P2PTasks+0x758>)
    e9bc:	4798      	blx	r3
    e9be:	1e04      	subs	r4, r0, #0
                                if (NULL == dataPtr)
    e9c0:	d100      	bne.n	e9c4 <P2PTasks+0x540>
    e9c2:	e5be      	b.n	e542 <P2PTasks+0xbe>
                                dataPtr[dataLen++] = CMD_P2P_CONNECTION_RESPONSE;
    e9c4:	2391      	movs	r3, #145	; 0x91
    e9c6:	7023      	strb	r3, [r4, #0]
                                dataPtr[dataLen++] = status;
    e9c8:	3362      	adds	r3, #98	; 0x62
    e9ca:	7063      	strb	r3, [r4, #1]
                                dataPtr[dataLen++] = MyindexinPC;
    e9cc:	4b84      	ldr	r3, [pc, #528]	; (ebe0 <P2PTasks+0x75c>)
    e9ce:	781b      	ldrb	r3, [r3, #0]
    e9d0:	70a3      	strb	r3, [r4, #2]
    e9d2:	2703      	movs	r7, #3
    e9d4:	e7a7      	b.n	e926 <P2PTasks+0x4a2>
                                    dataPtr[dataLen++] = P2PCapacityInfo;
    e9d6:	4b8d      	ldr	r3, [pc, #564]	; (ec0c <P2PTasks+0x788>)
    e9d8:	781b      	ldrb	r3, [r3, #0]
    e9da:	70c3      	strb	r3, [r0, #3]
                                            dataPtr[dataLen++] = AdditionalNodeID[i];
    e9dc:	4b8c      	ldr	r3, [pc, #560]	; (ec10 <P2PTasks+0x78c>)
    e9de:	781b      	ldrb	r3, [r3, #0]
    e9e0:	7103      	strb	r3, [r0, #4]
    e9e2:	3702      	adds	r7, #2
    e9e4:	e79f      	b.n	e926 <P2PTasks+0x4a2>
                                delay_s(i % (CONNECTION_INTERVAL-1));
    e9e6:	2001      	movs	r0, #1
    e9e8:	4b8a      	ldr	r3, [pc, #552]	; (ec14 <P2PTasks+0x790>)
    e9ea:	4798      	blx	r3
    e9ec:	e7b0      	b.n	e950 <P2PTasks+0x4cc>
                        if(ConnMode > ENABLE_ACTIVE_SCAN_RSP)
    e9ee:	4b7a      	ldr	r3, [pc, #488]	; (ebd8 <P2PTasks+0x754>)
    e9f0:	781b      	ldrb	r3, [r3, #0]
    e9f2:	2b02      	cmp	r3, #2
    e9f4:	d807      	bhi.n	ea06 <P2PTasks+0x582>
                            if( currentChannel != rxMessage.Payload[1] )
    e9f6:	784a      	ldrb	r2, [r1, #1]
    e9f8:	4b76      	ldr	r3, [pc, #472]	; (ebd4 <P2PTasks+0x750>)
    e9fa:	781b      	ldrb	r3, [r3, #0]
    e9fc:	429a      	cmp	r2, r3
    e9fe:	d005      	beq.n	ea0c <P2PTasks+0x588>
                                MiMAC_DiscardPacket();
    ea00:	4b70      	ldr	r3, [pc, #448]	; (ebc4 <P2PTasks+0x740>)
    ea02:	4798      	blx	r3
                                break;
    ea04:	e33f      	b.n	f086 <P2PTasks+0xc02>
                                MiMAC_DiscardPacket();
    ea06:	4b6f      	ldr	r3, [pc, #444]	; (ebc4 <P2PTasks+0x740>)
    ea08:	4798      	blx	r3
                                break;
    ea0a:	e33c      	b.n	f086 <P2PTasks+0xc02>
                            dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_P2P_ACTIVE_SCAN_RESPONSE));
    ea0c:	2010      	movs	r0, #16
    ea0e:	4b73      	ldr	r3, [pc, #460]	; (ebdc <P2PTasks+0x758>)
    ea10:	4798      	blx	r3
    ea12:	1e04      	subs	r4, r0, #0
                            if (NULL == dataPtr)
    ea14:	d100      	bne.n	ea18 <P2PTasks+0x594>
    ea16:	e594      	b.n	e542 <P2PTasks+0xbe>
                            dataPtr[dataLen++] = CMD_P2P_ACTIVE_SCAN_RESPONSE;
    ea18:	2397      	movs	r3, #151	; 0x97
    ea1a:	7003      	strb	r3, [r0, #0]
                            dataPtr[dataLen++] = P2PCapacityInfo;
    ea1c:	4b7b      	ldr	r3, [pc, #492]	; (ec0c <P2PTasks+0x788>)
    ea1e:	781b      	ldrb	r3, [r3, #0]
    ea20:	7043      	strb	r3, [r0, #1]
                                    dataPtr[dataLen++] = (AdditionalNodeID[i]);
    ea22:	4b7b      	ldr	r3, [pc, #492]	; (ec10 <P2PTasks+0x78c>)
    ea24:	781b      	ldrb	r3, [r3, #0]
    ea26:	7083      	strb	r3, [r0, #2]
                            MiMAC_DiscardPacket();
    ea28:	4b66      	ldr	r3, [pc, #408]	; (ebc4 <P2PTasks+0x740>)
    ea2a:	4798      	blx	r3
							i = PHY_RandomReq();
    ea2c:	4b6d      	ldr	r3, [pc, #436]	; (ebe4 <P2PTasks+0x760>)
    ea2e:	4798      	blx	r3
							delay_ms(i*100);
    ea30:	b2c3      	uxtb	r3, r0
    ea32:	2064      	movs	r0, #100	; 0x64
    ea34:	4358      	muls	r0, r3
    ea36:	2800      	cmp	r0, #0
    ea38:	d019      	beq.n	ea6e <P2PTasks+0x5ea>
    ea3a:	4b6d      	ldr	r3, [pc, #436]	; (ebf0 <P2PTasks+0x76c>)
    ea3c:	4798      	blx	r3
                                    SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn, 
    ea3e:	4b5f      	ldr	r3, [pc, #380]	; (ebbc <P2PTasks+0x738>)
    ea40:	685a      	ldr	r2, [r3, #4]
    ea42:	8859      	ldrh	r1, [r3, #2]
    ea44:	4874      	ldr	r0, [pc, #464]	; (ec18 <P2PTasks+0x794>)
    ea46:	9005      	str	r0, [sp, #20]
    ea48:	2001      	movs	r0, #1
    ea4a:	9004      	str	r0, [sp, #16]
    ea4c:	2000      	movs	r0, #0
    ea4e:	9003      	str	r0, [sp, #12]
    ea50:	9402      	str	r4, [sp, #8]
    ea52:	3003      	adds	r0, #3
    ea54:	9001      	str	r0, [sp, #4]
    ea56:	781b      	ldrb	r3, [r3, #0]
    ea58:	071b      	lsls	r3, r3, #28
    ea5a:	0fdb      	lsrs	r3, r3, #31
    ea5c:	9300      	str	r3, [sp, #0]
    ea5e:	2301      	movs	r3, #1
    ea60:	2000      	movs	r0, #0
    ea62:	4d65      	ldr	r5, [pc, #404]	; (ebf8 <P2PTasks+0x774>)
    ea64:	47a8      	blx	r5
							MiMem_Free(dataPtr);
    ea66:	0020      	movs	r0, r4
    ea68:	4b64      	ldr	r3, [pc, #400]	; (ebfc <P2PTasks+0x778>)
    ea6a:	4798      	blx	r3
                        break;
    ea6c:	e30b      	b.n	f086 <P2PTasks+0xc02>
							delay_ms(i*100);
    ea6e:	2001      	movs	r0, #1
    ea70:	4b68      	ldr	r3, [pc, #416]	; (ec14 <P2PTasks+0x790>)
    ea72:	4798      	blx	r3
    ea74:	e7e3      	b.n	ea3e <P2PTasks+0x5ba>
                            for(i = 0; i < CONNECTION_SIZE; i++)
    ea76:	3401      	adds	r4, #1
    ea78:	b2e4      	uxtb	r4, r4
    ea7a:	3501      	adds	r5, #1
    ea7c:	3610      	adds	r6, #16
    ea7e:	2c14      	cmp	r4, #20
    ea80:	d100      	bne.n	ea84 <P2PTasks+0x600>
    ea82:	e3dc      	b.n	f23e <P2PTasks+0xdba>
                                if( ConnectionTable[i].status.bits.isValid )
    ea84:	9506      	str	r5, [sp, #24]
    ea86:	012b      	lsls	r3, r5, #4
    ea88:	18fb      	adds	r3, r7, r3
    ea8a:	7b1b      	ldrb	r3, [r3, #12]
    ea8c:	09db      	lsrs	r3, r3, #7
    ea8e:	d0f2      	beq.n	ea76 <P2PTasks+0x5f2>
                                    if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    ea90:	0031      	movs	r1, r6
    ea92:	9807      	ldr	r0, [sp, #28]
    ea94:	47c0      	blx	r8
    ea96:	2800      	cmp	r0, #0
    ea98:	d0ed      	beq.n	ea76 <P2PTasks+0x5f2>
                                        ConnectionTable[i].status.Val = 0;
    ea9a:	9b06      	ldr	r3, [sp, #24]
    ea9c:	011e      	lsls	r6, r3, #4
    ea9e:	4b5f      	ldr	r3, [pc, #380]	; (ec1c <P2PTasks+0x798>)
    eaa0:	199e      	adds	r6, r3, r6
    eaa2:	2300      	movs	r3, #0
    eaa4:	7333      	strb	r3, [r6, #12]
                                        dataPtr[dataLen++] = STATUS_SUCCESS;
    eaa6:	464a      	mov	r2, r9
    eaa8:	7053      	strb	r3, [r2, #1]
                            MiMAC_DiscardPacket();
    eaaa:	4b46      	ldr	r3, [pc, #280]	; (ebc4 <P2PTasks+0x740>)
    eaac:	4798      	blx	r3
                            if( i == CONNECTION_SIZE ) 
    eaae:	2c14      	cmp	r4, #20
    eab0:	d018      	beq.n	eae4 <P2PTasks+0x660>
                                        dataPtr[dataLen++] = STATUS_SUCCESS;
    eab2:	2002      	movs	r0, #2
                                    SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn, 
    eab4:	4b41      	ldr	r3, [pc, #260]	; (ebbc <P2PTasks+0x738>)
    eab6:	685a      	ldr	r2, [r3, #4]
    eab8:	8859      	ldrh	r1, [r3, #2]
    eaba:	4c57      	ldr	r4, [pc, #348]	; (ec18 <P2PTasks+0x794>)
    eabc:	9405      	str	r4, [sp, #20]
    eabe:	2401      	movs	r4, #1
    eac0:	9404      	str	r4, [sp, #16]
    eac2:	2400      	movs	r4, #0
    eac4:	9403      	str	r4, [sp, #12]
    eac6:	464c      	mov	r4, r9
    eac8:	9402      	str	r4, [sp, #8]
    eaca:	9001      	str	r0, [sp, #4]
    eacc:	781b      	ldrb	r3, [r3, #0]
    eace:	071b      	lsls	r3, r3, #28
    ead0:	0fdb      	lsrs	r3, r3, #31
    ead2:	9300      	str	r3, [sp, #0]
    ead4:	2301      	movs	r3, #1
    ead6:	2000      	movs	r0, #0
    ead8:	4c47      	ldr	r4, [pc, #284]	; (ebf8 <P2PTasks+0x774>)
    eada:	47a0      	blx	r4
							MiMem_Free(dataPtr);
    eadc:	4648      	mov	r0, r9
    eade:	4b47      	ldr	r3, [pc, #284]	; (ebfc <P2PTasks+0x778>)
    eae0:	4798      	blx	r3
                            break;
    eae2:	e2d0      	b.n	f086 <P2PTasks+0xc02>
                                        dataPtr[dataLen++] = STATUS_SUCCESS;
    eae4:	2302      	movs	r3, #2
    eae6:	e3ad      	b.n	f244 <P2PTasks+0xdc0>
                                    if (EstConfCallback)
    eae8:	4b2f      	ldr	r3, [pc, #188]	; (eba8 <P2PTasks+0x724>)
    eaea:	681b      	ldr	r3, [r3, #0]
    eaec:	2b00      	cmp	r3, #0
    eaee:	d100      	bne.n	eaf2 <P2PTasks+0x66e>
    eaf0:	e6c5      	b.n	e87e <P2PTasks+0x3fa>
                                        EstConfCallback(SUCCESS);
    eaf2:	2000      	movs	r0, #0
    eaf4:	4798      	blx	r3
                                        EstConfCallback = NULL;
    eaf6:	2200      	movs	r2, #0
    eaf8:	4b2b      	ldr	r3, [pc, #172]	; (eba8 <P2PTasks+0x724>)
    eafa:	601a      	str	r2, [r3, #0]
    eafc:	e6bf      	b.n	e87e <P2PTasks+0x3fa>
                                            myPANID.Val = rxMessage.SourcePANID.Val;
    eafe:	492b      	ldr	r1, [pc, #172]	; (ebac <P2PTasks+0x728>)
    eb00:	4b2e      	ldr	r3, [pc, #184]	; (ebbc <P2PTasks+0x738>)
    eb02:	885b      	ldrh	r3, [r3, #2]
    eb04:	800b      	strh	r3, [r1, #0]
                                                uint16_t tmp = 0xFFFF;
    eb06:	201e      	movs	r0, #30
    eb08:	ab02      	add	r3, sp, #8
    eb0a:	469c      	mov	ip, r3
    eb0c:	4460      	add	r0, ip
    eb0e:	2301      	movs	r3, #1
    eb10:	425b      	negs	r3, r3
    eb12:	8003      	strh	r3, [r0, #0]
                                                MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
    eb14:	4b42      	ldr	r3, [pc, #264]	; (ec20 <P2PTasks+0x79c>)
    eb16:	4798      	blx	r3
    eb18:	e6b7      	b.n	e88a <P2PTasks+0x406>
											 role = END_DEVICE;
    eb1a:	2202      	movs	r2, #2
    eb1c:	4b2a      	ldr	r3, [pc, #168]	; (ebc8 <P2PTasks+0x744>)
    eb1e:	701a      	strb	r2, [r3, #0]
											   startLinkStatusTimer();
    eb20:	4b40      	ldr	r3, [pc, #256]	; (ec24 <P2PTasks+0x7a0>)
    eb22:	4798      	blx	r3
    eb24:	e6bb      	b.n	e89e <P2PTasks+0x41a>
                            if( P2PStatus.bits.Resync )
    eb26:	4b23      	ldr	r3, [pc, #140]	; (ebb4 <P2PTasks+0x730>)
    eb28:	781b      	ldrb	r3, [r3, #0]
    eb2a:	069b      	lsls	r3, r3, #26
    eb2c:	d504      	bpl.n	eb38 <P2PTasks+0x6b4>
                                P2PStatus.bits.Resync = 0;   
    eb2e:	4a21      	ldr	r2, [pc, #132]	; (ebb4 <P2PTasks+0x730>)
    eb30:	7813      	ldrb	r3, [r2, #0]
    eb32:	2120      	movs	r1, #32
    eb34:	438b      	bics	r3, r1
    eb36:	7013      	strb	r3, [r2, #0]
                            MiMAC_DiscardPacket(); 
    eb38:	4b22      	ldr	r3, [pc, #136]	; (ebc4 <P2PTasks+0x740>)
    eb3a:	4798      	blx	r3
                        break;                
    eb3c:	e2a3      	b.n	f086 <P2PTasks+0xc02>
						end_nodes = rxMessage.Payload[1];
    eb3e:	784b      	ldrb	r3, [r1, #1]
    eb40:	469a      	mov	sl, r3
    eb42:	4b39      	ldr	r3, [pc, #228]	; (ec28 <P2PTasks+0x7a4>)
    eb44:	4652      	mov	r2, sl
    eb46:	701a      	strb	r2, [r3, #0]
    eb48:	1d0b      	adds	r3, r1, #4
    eb4a:	22dc      	movs	r2, #220	; 0xdc
    eb4c:	4691      	mov	r9, r2
    eb4e:	4489      	add	r9, r1
    uint8_t i , j , nodeCounter = 0;
    eb50:	2400      	movs	r4, #0
            END_DEVICES_Short_Address[j].connection_slot = j;
    eb52:	4a36      	ldr	r2, [pc, #216]	; (ec2c <P2PTasks+0x7a8>)
    eb54:	4690      	mov	r8, r2
    eb56:	e002      	b.n	eb5e <P2PTasks+0x6da>
    eb58:	3304      	adds	r3, #4
    for (i = 4; i < RX_BUFFER_SIZE; i+=4)
    eb5a:	454b      	cmp	r3, r9
    eb5c:	d014      	beq.n	eb88 <P2PTasks+0x704>
        j = payload[i+3];
    eb5e:	78da      	ldrb	r2, [r3, #3]
        if ((0xFF != j) && (nodeCounter < end_nodes))
    eb60:	2aff      	cmp	r2, #255	; 0xff
    eb62:	d0f9      	beq.n	eb58 <P2PTasks+0x6d4>
    eb64:	45a2      	cmp	sl, r4
    eb66:	d9f7      	bls.n	eb58 <P2PTasks+0x6d4>
            END_DEVICES_Short_Address[j].connection_slot = j;
    eb68:	0097      	lsls	r7, r2, #2
    eb6a:	46bc      	mov	ip, r7
    eb6c:	4647      	mov	r7, r8
    eb6e:	4467      	add	r7, ip
    eb70:	70fa      	strb	r2, [r7, #3]
            END_DEVICES_Short_Address[j].Address[0] = payload[i];
    eb72:	781a      	ldrb	r2, [r3, #0]
    eb74:	4646      	mov	r6, r8
    eb76:	4661      	mov	r1, ip
    eb78:	558a      	strb	r2, [r1, r6]
            END_DEVICES_Short_Address[j].Address[1] = payload[i+1];
    eb7a:	785a      	ldrb	r2, [r3, #1]
    eb7c:	707a      	strb	r2, [r7, #1]
            END_DEVICES_Short_Address[j].Address[2] = payload[i+2];
    eb7e:	789a      	ldrb	r2, [r3, #2]
    eb80:	70ba      	strb	r2, [r7, #2]
			nodeCounter ++;       
    eb82:	3401      	adds	r4, #1
    eb84:	b2e4      	uxtb	r4, r4
    eb86:	e7e7      	b.n	eb58 <P2PTasks+0x6d4>
		for (i = 0; i < end_nodes; i++)
    eb88:	4653      	mov	r3, sl
    eb8a:	2b00      	cmp	r3, #0
    eb8c:	d060      	beq.n	ec50 <P2PTasks+0x7cc>
			if (myLongAddress[0] == END_DEVICES_Short_Address[i].Address[0] && myLongAddress[1] == END_DEVICES_Short_Address[i].Address[1])
    eb8e:	4b28      	ldr	r3, [pc, #160]	; (ec30 <P2PTasks+0x7ac>)
    eb90:	781d      	ldrb	r5, [r3, #0]
    eb92:	785c      	ldrb	r4, [r3, #1]
    eb94:	4a25      	ldr	r2, [pc, #148]	; (ec2c <P2PTasks+0x7a8>)
    eb96:	4653      	mov	r3, sl
    eb98:	3b01      	subs	r3, #1
    eb9a:	b2db      	uxtb	r3, r3
    eb9c:	3301      	adds	r3, #1
    eb9e:	009b      	lsls	r3, r3, #2
    eba0:	189b      	adds	r3, r3, r2
    eba2:	2100      	movs	r1, #0
    eba4:	e049      	b.n	ec3a <P2PTasks+0x7b6>
    eba6:	46c0      	nop			; (mov r8, r8)
    eba8:	2000347c 	.word	0x2000347c
    ebac:	20003478 	.word	0x20003478
    ebb0:	0000ffff 	.word	0x0000ffff
    ebb4:	200034d8 	.word	0x200034d8
    ebb8:	0000df8d 	.word	0x0000df8d
    ebbc:	2000377c 	.word	0x2000377c
    ebc0:	20003470 	.word	0x20003470
    ebc4:	0000c68d 	.word	0x0000c68d
    ebc8:	2000376c 	.word	0x2000376c
    ebcc:	0001ad5c 	.word	0x0001ad5c
    ebd0:	00018915 	.word	0x00018915
    ebd4:	2000001e 	.word	0x2000001e
    ebd8:	2000001d 	.word	0x2000001d
    ebdc:	0000f4b1 	.word	0x0000f4b1
    ebe0:	200034d4 	.word	0x200034d4
    ebe4:	0000d2e5 	.word	0x0000d2e5
    ebe8:	00015205 	.word	0x00015205
    ebec:	000153d9 	.word	0x000153d9
    ebf0:	00004719 	.word	0x00004719
    ebf4:	0000d815 	.word	0x0000d815
    ebf8:	0000d579 	.word	0x0000d579
    ebfc:	0000f56d 	.word	0x0000f56d
    ec00:	2000331c 	.word	0x2000331c
    ec04:	2000345c 	.word	0x2000345c
    ec08:	0000da69 	.word	0x0000da69
    ec0c:	20003471 	.word	0x20003471
    ec10:	20000018 	.word	0x20000018
    ec14:	000046ed 	.word	0x000046ed
    ec18:	0000d321 	.word	0x0000d321
    ec1c:	20003318 	.word	0x20003318
    ec20:	0000be61 	.word	0x0000be61
    ec24:	0000e465 	.word	0x0000e465
    ec28:	200007d5 	.word	0x200007d5
    ec2c:	2000371c 	.word	0x2000371c
    ec30:	20000020 	.word	0x20000020
    ec34:	3204      	adds	r2, #4
		for (i = 0; i < end_nodes; i++)
    ec36:	429a      	cmp	r2, r3
    ec38:	d007      	beq.n	ec4a <P2PTasks+0x7c6>
			if (myLongAddress[0] == END_DEVICES_Short_Address[i].Address[0] && myLongAddress[1] == END_DEVICES_Short_Address[i].Address[1])
    ec3a:	7816      	ldrb	r6, [r2, #0]
    ec3c:	42ae      	cmp	r6, r5
    ec3e:	d1f9      	bne.n	ec34 <P2PTasks+0x7b0>
    ec40:	7856      	ldrb	r6, [r2, #1]
    ec42:	42a6      	cmp	r6, r4
    ec44:	d1f6      	bne.n	ec34 <P2PTasks+0x7b0>
				stat = true;
    ec46:	0001      	movs	r1, r0
    ec48:	e7f4      	b.n	ec34 <P2PTasks+0x7b0>
		if (!stat)
    ec4a:	2900      	cmp	r1, #0
    ec4c:	d000      	beq.n	ec50 <P2PTasks+0x7cc>
    ec4e:	e5aa      	b.n	e7a6 <P2PTasks+0x322>
			linkStatusTimerTick.Val = 0;
    ec50:	2300      	movs	r3, #0
    ec52:	4acd      	ldr	r2, [pc, #820]	; (ef88 <P2PTasks+0xb04>)
    ec54:	6013      	str	r3, [r2, #0]
			linkStatusTimerSet = false;
    ec56:	4acd      	ldr	r2, [pc, #820]	; (ef8c <P2PTasks+0xb08>)
    ec58:	7013      	strb	r3, [r2, #0]
			if ((NULL != linkFailureCallback))
    ec5a:	4bcd      	ldr	r3, [pc, #820]	; (ef90 <P2PTasks+0xb0c>)
    ec5c:	681b      	ldr	r3, [r3, #0]
    ec5e:	2b00      	cmp	r3, #0
    ec60:	d100      	bne.n	ec64 <P2PTasks+0x7e0>
    ec62:	e5a0      	b.n	e7a6 <P2PTasks+0x322>
				MiMAC_DiscardPacket();
    ec64:	4bcb      	ldr	r3, [pc, #812]	; (ef94 <P2PTasks+0xb10>)
    ec66:	4798      	blx	r3
	if(SendData)
    ec68:	4bcb      	ldr	r3, [pc, #812]	; (ef98 <P2PTasks+0xb14>)
    ec6a:	781b      	ldrb	r3, [r3, #0]
    ec6c:	2b00      	cmp	r3, #0
    ec6e:	d108      	bne.n	ec82 <P2PTasks+0x7fe>
	if(SwAckReq)
    ec70:	4bca      	ldr	r3, [pc, #808]	; (ef9c <P2PTasks+0xb18>)
    ec72:	781b      	ldrb	r3, [r3, #0]
    ec74:	2b00      	cmp	r3, #0
    ec76:	d01b      	beq.n	ecb0 <P2PTasks+0x82c>
    ec78:	4cc9      	ldr	r4, [pc, #804]	; (efa0 <P2PTasks+0xb1c>)
    ec7a:	4fca      	ldr	r7, [pc, #808]	; (efa4 <P2PTasks+0xb20>)
					forwardMessages[i].fromEDToED = 0;
    ec7c:	2500      	movs	r5, #0
					forwardMessages[i].confCallback(forwardMessages[i].msghandle, TRANSACTION_EXPIRED, NULL);
    ec7e:	2605      	movs	r6, #5
    ec80:	e00a      	b.n	ec98 <P2PTasks+0x814>
	  SendData = false;
    ec82:	2200      	movs	r2, #0
    ec84:	4bc4      	ldr	r3, [pc, #784]	; (ef98 <P2PTasks+0xb14>)
    ec86:	701a      	strb	r2, [r3, #0]
	  PHY_DataConf(TRANSACTION_EXPIRED);
    ec88:	2005      	movs	r0, #5
    ec8a:	4bc7      	ldr	r3, [pc, #796]	; (efa8 <P2PTasks+0xb24>)
    ec8c:	4798      	blx	r3
    ec8e:	e7ef      	b.n	ec70 <P2PTasks+0x7ec>
    ec90:	3415      	adds	r4, #21
    ec92:	34ff      	adds	r4, #255	; 0xff
		for(uint8_t i = 0; i < FORWARD_PACKET_BANK_SIZE; i++)
    ec94:	42bc      	cmp	r4, r7
    ec96:	d00b      	beq.n	ecb0 <P2PTasks+0x82c>
			if( forwardMessages[i].fromEDToED)
    ec98:	7ca3      	ldrb	r3, [r4, #18]
    ec9a:	2b00      	cmp	r3, #0
    ec9c:	d0f8      	beq.n	ec90 <P2PTasks+0x80c>
					forwardMessages[i].fromEDToED = 0;
    ec9e:	74a5      	strb	r5, [r4, #18]
					SwAckReq = false;
    eca0:	4bbe      	ldr	r3, [pc, #760]	; (ef9c <P2PTasks+0xb18>)
    eca2:	701d      	strb	r5, [r3, #0]
					forwardMessages[i].confCallback(forwardMessages[i].msghandle, TRANSACTION_EXPIRED, NULL);
    eca4:	7ce0      	ldrb	r0, [r4, #19]
    eca6:	002a      	movs	r2, r5
    eca8:	0031      	movs	r1, r6
    ecaa:	6823      	ldr	r3, [r4, #0]
    ecac:	4798      	blx	r3
    ecae:	e7ef      	b.n	ec90 <P2PTasks+0x80c>
				linkFailureCallback();
    ecb0:	4bb7      	ldr	r3, [pc, #732]	; (ef90 <P2PTasks+0xb0c>)
    ecb2:	681b      	ldr	r3, [r3, #0]
    ecb4:	4798      	blx	r3
    ecb6:	e576      	b.n	e7a6 <P2PTasks+0x322>
						if((forwardMessages[i].fromEDToED == 1) && (SwAckReq))
    ecb8:	4bb9      	ldr	r3, [pc, #740]	; (efa0 <P2PTasks+0xb1c>)
    ecba:	7c9b      	ldrb	r3, [r3, #18]
    ecbc:	2b01      	cmp	r3, #1
    ecbe:	d002      	beq.n	ecc6 <P2PTasks+0x842>
					MiMAC_DiscardPacket();
    ecc0:	4bb4      	ldr	r3, [pc, #720]	; (ef94 <P2PTasks+0xb10>)
    ecc2:	4798      	blx	r3
				break;
    ecc4:	e1df      	b.n	f086 <P2PTasks+0xc02>
						if((forwardMessages[i].fromEDToED == 1) && (SwAckReq))
    ecc6:	4bb5      	ldr	r3, [pc, #724]	; (ef9c <P2PTasks+0xb18>)
    ecc8:	781b      	ldrb	r3, [r3, #0]
    ecca:	2b00      	cmp	r3, #0
    eccc:	d0f8      	beq.n	ecc0 <P2PTasks+0x83c>
							DataConf_callback_t callback = forwardMessages[i].confCallback;
    ecce:	49b4      	ldr	r1, [pc, #720]	; (efa0 <P2PTasks+0xb1c>)
    ecd0:	680b      	ldr	r3, [r1, #0]
							forwardMessages[i].fromEDToED = 0;
    ecd2:	2200      	movs	r2, #0
    ecd4:	748a      	strb	r2, [r1, #18]
							SwAckReq = false;
    ecd6:	49b1      	ldr	r1, [pc, #708]	; (ef9c <P2PTasks+0xb18>)
    ecd8:	700a      	strb	r2, [r1, #0]
							if (NULL != callback)
    ecda:	2b00      	cmp	r3, #0
    ecdc:	d0f0      	beq.n	ecc0 <P2PTasks+0x83c>
								callback(forwardMessages[i].msghandle, SUCCESS , NULL);
    ecde:	4ab0      	ldr	r2, [pc, #704]	; (efa0 <P2PTasks+0xb1c>)
    ece0:	7cd0      	ldrb	r0, [r2, #19]
    ece2:	2200      	movs	r2, #0
    ece4:	2100      	movs	r1, #0
    ece6:	4798      	blx	r3
    ece8:	e7ea      	b.n	ecc0 <P2PTasks+0x83c>
					if (PAN_COORD == role)
    ecea:	4bb0      	ldr	r3, [pc, #704]	; (efac <P2PTasks+0xb28>)
    ecec:	781b      	ldrb	r3, [r3, #0]
    ecee:	2b01      	cmp	r3, #1
    ecf0:	d002      	beq.n	ecf8 <P2PTasks+0x874>
				MiMAC_DiscardPacket();
    ecf2:	4ba8      	ldr	r3, [pc, #672]	; (ef94 <P2PTasks+0xb10>)
    ecf4:	4798      	blx	r3
				break;
    ecf6:	e1c6      	b.n	f086 <P2PTasks+0xc02>
						printf("\nReceived forward Packet request\n\r");
    ecf8:	48ad      	ldr	r0, [pc, #692]	; (efb0 <P2PTasks+0xb2c>)
    ecfa:	4bae      	ldr	r3, [pc, #696]	; (efb4 <P2PTasks+0xb30>)
    ecfc:	4798      	blx	r3
						uint8_t ed_index = Find_Index(&(rxMessage.Payload[1]));
    ecfe:	4bae      	ldr	r3, [pc, #696]	; (efb8 <P2PTasks+0xb34>)
    ed00:	689b      	ldr	r3, [r3, #8]
    ed02:	4699      	mov	r9, r3
    ed04:	1c58      	adds	r0, r3, #1
    ed06:	4bad      	ldr	r3, [pc, #692]	; (efbc <P2PTasks+0xb38>)
    ed08:	4798      	blx	r3
    ed0a:	0007      	movs	r7, r0
						if (0xFF != ed_index)
    ed0c:	28ff      	cmp	r0, #255	; 0xff
    ed0e:	d0f0      	beq.n	ecf2 <P2PTasks+0x86e>
								if(forwardMessages[i].fromEDToED == 0)
    ed10:	4ba3      	ldr	r3, [pc, #652]	; (efa0 <P2PTasks+0xb1c>)
    ed12:	7c9b      	ldrb	r3, [r3, #18]
    ed14:	2b00      	cmp	r3, #0
    ed16:	d00b      	beq.n	ed30 <P2PTasks+0x8ac>
    ed18:	4aa9      	ldr	r2, [pc, #676]	; (efc0 <P2PTasks+0xb3c>)
    ed1a:	2301      	movs	r3, #1
    ed1c:	4698      	mov	r8, r3
    ed1e:	7811      	ldrb	r1, [r2, #0]
    ed20:	2900      	cmp	r1, #0
    ed22:	d007      	beq.n	ed34 <P2PTasks+0x8b0>
    ed24:	3301      	adds	r3, #1
    ed26:	3215      	adds	r2, #21
    ed28:	32ff      	adds	r2, #255	; 0xff
							for(i=0; i<FORWARD_PACKET_BANK_SIZE; i++)
    ed2a:	2b06      	cmp	r3, #6
    ed2c:	d1f6      	bne.n	ed1c <P2PTasks+0x898>
    ed2e:	e7e0      	b.n	ecf2 <P2PTasks+0x86e>
								if(forwardMessages[i].fromEDToED == 0)
    ed30:	2300      	movs	r3, #0
    ed32:	4698      	mov	r8, r3
    ed34:	248a      	movs	r4, #138	; 0x8a
    ed36:	0064      	lsls	r4, r4, #1
    ed38:	4643      	mov	r3, r8
    ed3a:	435c      	muls	r4, r3
									memcpy(forwardMessages[i].destAddress, ConnectionTable[ed_index].Address, LONG_ADDR_LEN);
    ed3c:	1d26      	adds	r6, r4, #4
    ed3e:	4b98      	ldr	r3, [pc, #608]	; (efa0 <P2PTasks+0xb1c>)
    ed40:	469a      	mov	sl, r3
    ed42:	0033      	movs	r3, r6
    ed44:	4453      	add	r3, sl
    ed46:	0018      	movs	r0, r3
    ed48:	9306      	str	r3, [sp, #24]
    ed4a:	013d      	lsls	r5, r7, #4
    ed4c:	3504      	adds	r5, #4
    ed4e:	4b9d      	ldr	r3, [pc, #628]	; (efc4 <P2PTasks+0xb40>)
    ed50:	18ed      	adds	r5, r5, r3
    ed52:	2208      	movs	r2, #8
    ed54:	0029      	movs	r1, r5
    ed56:	4b9c      	ldr	r3, [pc, #624]	; (efc8 <P2PTasks+0xb44>)
    ed58:	4798      	blx	r3
									forwardMessages[i].msg[dataLen++] = rxMessage.SourceAddress[0];    // Unique address of EDy (DEST ED)
    ed5a:	4997      	ldr	r1, [pc, #604]	; (efb8 <P2PTasks+0xb34>)
    ed5c:	684a      	ldr	r2, [r1, #4]
    ed5e:	7810      	ldrb	r0, [r2, #0]
    ed60:	4653      	mov	r3, sl
    ed62:	191b      	adds	r3, r3, r4
    ed64:	7558      	strb	r0, [r3, #21]
									forwardMessages[i].msg[dataLen++] = rxMessage.SourceAddress[1];    // Unique address of EDy (DEST ED)
    ed66:	7850      	ldrb	r0, [r2, #1]
    ed68:	7598      	strb	r0, [r3, #22]
									forwardMessages[i].msg[dataLen++] = rxMessage.SourceAddress[2];    // Unique address of EDy (DEST ED)
    ed6a:	7892      	ldrb	r2, [r2, #2]
    ed6c:	75da      	strb	r2, [r3, #23]
									for(uint8_t j = 4; j < rxMessage.PayloadSize; j++)
    ed6e:	7b0b      	ldrb	r3, [r1, #12]
    ed70:	2b04      	cmp	r3, #4
    ed72:	d945      	bls.n	ee00 <P2PTasks+0x97c>
    ed74:	464a      	mov	r2, r9
    ed76:	1d10      	adds	r0, r2, #4
    ed78:	0021      	movs	r1, r4
    ed7a:	3118      	adds	r1, #24
    ed7c:	4a88      	ldr	r2, [pc, #544]	; (efa0 <P2PTasks+0xb1c>)
    ed7e:	188a      	adds	r2, r1, r2
    ed80:	1f59      	subs	r1, r3, #5
    ed82:	b2c9      	uxtb	r1, r1
    ed84:	3105      	adds	r1, #5
    ed86:	4449      	add	r1, r9
										forwardMessages[i].msg[dataLen++] = rxMessage.Payload[j];
    ed88:	7806      	ldrb	r6, [r0, #0]
    ed8a:	7016      	strb	r6, [r2, #0]
    ed8c:	3001      	adds	r0, #1
    ed8e:	3201      	adds	r2, #1
									for(uint8_t j = 4; j < rxMessage.PayloadSize; j++)
    ed90:	4288      	cmp	r0, r1
    ed92:	d1f9      	bne.n	ed88 <P2PTasks+0x904>
    ed94:	3b01      	subs	r3, #1
    ed96:	b2db      	uxtb	r3, r3
									forwardMessages[i].msgLength = dataLen;
    ed98:	218a      	movs	r1, #138	; 0x8a
    ed9a:	0049      	lsls	r1, r1, #1
    ed9c:	4642      	mov	r2, r8
    ed9e:	4351      	muls	r1, r2
    eda0:	4a7f      	ldr	r2, [pc, #508]	; (efa0 <P2PTasks+0xb1c>)
    eda2:	1852      	adds	r2, r2, r1
    eda4:	7513      	strb	r3, [r2, #20]
									if((ConnectionTable[ed_index].status.bits.isValid) && (ConnectionTable[ed_index].status.bits.RXOnWhenIdle == 0))
    eda6:	0139      	lsls	r1, r7, #4
    eda8:	4a86      	ldr	r2, [pc, #536]	; (efc4 <P2PTasks+0xb40>)
    edaa:	1852      	adds	r2, r2, r1
    edac:	7b12      	ldrb	r2, [r2, #12]
    edae:	09d2      	lsrs	r2, r2, #7
    edb0:	d028      	beq.n	ee04 <P2PTasks+0x980>
    edb2:	4a84      	ldr	r2, [pc, #528]	; (efc4 <P2PTasks+0xb40>)
    edb4:	1857      	adds	r7, r2, r1
    edb6:	7b3a      	ldrb	r2, [r7, #12]
    edb8:	07d2      	lsls	r2, r2, #31
    edba:	d423      	bmi.n	ee04 <P2PTasks+0x980>
										forwardMessages[i].confCallback = NULL;
    edbc:	4f78      	ldr	r7, [pc, #480]	; (efa0 <P2PTasks+0xb1c>)
    edbe:	258a      	movs	r5, #138	; 0x8a
    edc0:	006d      	lsls	r5, r5, #1
    edc2:	4643      	mov	r3, r8
    edc4:	435d      	muls	r5, r3
    edc6:	2600      	movs	r6, #0
    edc8:	51ee      	str	r6, [r5, r7]
										forwardMessages[i].ackReq = true;
    edca:	197d      	adds	r5, r7, r5
    edcc:	2301      	movs	r3, #1
    edce:	4699      	mov	r9, r3
    edd0:	742b      	strb	r3, [r5, #16]
										printf("Indirect message Queued\n\r");
    edd2:	487e      	ldr	r0, [pc, #504]	; (efcc <P2PTasks+0xb48>)
    edd4:	4b77      	ldr	r3, [pc, #476]	; (efb4 <P2PTasks+0xb30>)
    edd6:	4798      	blx	r3
										IndirectPacket(false, myPANID, forwardMessages[i].destAddress, false, false, forwardMessages[i].msgLength, forwardMessages[i].msg, 10, true, appAckWaitDataCallback);
    edd8:	4b7d      	ldr	r3, [pc, #500]	; (efd0 <P2PTasks+0xb4c>)
    edda:	9305      	str	r3, [sp, #20]
    eddc:	464b      	mov	r3, r9
    edde:	9304      	str	r3, [sp, #16]
    ede0:	3309      	adds	r3, #9
    ede2:	9303      	str	r3, [sp, #12]
    ede4:	3415      	adds	r4, #21
    ede6:	19e4      	adds	r4, r4, r7
    ede8:	9402      	str	r4, [sp, #8]
    edea:	7d2b      	ldrb	r3, [r5, #20]
    edec:	9301      	str	r3, [sp, #4]
    edee:	9600      	str	r6, [sp, #0]
    edf0:	0033      	movs	r3, r6
    edf2:	9a06      	ldr	r2, [sp, #24]
    edf4:	4977      	ldr	r1, [pc, #476]	; (efd4 <P2PTasks+0xb50>)
    edf6:	8809      	ldrh	r1, [r1, #0]
    edf8:	0030      	movs	r0, r6
    edfa:	4c77      	ldr	r4, [pc, #476]	; (efd8 <P2PTasks+0xb54>)
    edfc:	47a0      	blx	r4
    edfe:	e778      	b.n	ecf2 <P2PTasks+0x86e>
									forwardMessages[i].msg[dataLen++] = rxMessage.SourceAddress[2];    // Unique address of EDy (DEST ED)
    ee00:	2303      	movs	r3, #3
    ee02:	e7c9      	b.n	ed98 <P2PTasks+0x914>
										forwardMessages[i].fromEDToED = 1;
    ee04:	4866      	ldr	r0, [pc, #408]	; (efa0 <P2PTasks+0xb1c>)
    ee06:	228a      	movs	r2, #138	; 0x8a
    ee08:	0052      	lsls	r2, r2, #1
    ee0a:	4641      	mov	r1, r8
    ee0c:	434a      	muls	r2, r1
    ee0e:	1882      	adds	r2, r0, r2
    ee10:	2101      	movs	r1, #1
    ee12:	7491      	strb	r1, [r2, #18]
										SendPacket(false, myPANID, ConnectionTable[ed_index].Address, false, false, forwardMessages[i].msgLength, forwardMessages[i].msg, 1, true, appAckWaitDataCallback);
    ee14:	4a6e      	ldr	r2, [pc, #440]	; (efd0 <P2PTasks+0xb4c>)
    ee16:	9205      	str	r2, [sp, #20]
    ee18:	9104      	str	r1, [sp, #16]
    ee1a:	9103      	str	r1, [sp, #12]
    ee1c:	3415      	adds	r4, #21
    ee1e:	1824      	adds	r4, r4, r0
    ee20:	9402      	str	r4, [sp, #8]
    ee22:	9301      	str	r3, [sp, #4]
    ee24:	2000      	movs	r0, #0
    ee26:	9000      	str	r0, [sp, #0]
    ee28:	0003      	movs	r3, r0
    ee2a:	002a      	movs	r2, r5
    ee2c:	4969      	ldr	r1, [pc, #420]	; (efd4 <P2PTasks+0xb50>)
    ee2e:	8809      	ldrh	r1, [r1, #0]
    ee30:	4c6a      	ldr	r4, [pc, #424]	; (efdc <P2PTasks+0xb58>)
    ee32:	47a0      	blx	r4
										++FW_Stat;
    ee34:	4a6a      	ldr	r2, [pc, #424]	; (efe0 <P2PTasks+0xb5c>)
    ee36:	7813      	ldrb	r3, [r2, #0]
    ee38:	3301      	adds	r3, #1
    ee3a:	b2db      	uxtb	r3, r3
    ee3c:	7013      	strb	r3, [r2, #0]
    ee3e:	e758      	b.n	ecf2 <P2PTasks+0x86e>
					if (PAN_COORD == role)
    ee40:	4b5a      	ldr	r3, [pc, #360]	; (efac <P2PTasks+0xb28>)
    ee42:	781b      	ldrb	r3, [r3, #0]
    ee44:	2b01      	cmp	r3, #1
    ee46:	d002      	beq.n	ee4e <P2PTasks+0x9ca>
				MiMAC_DiscardPacket();
    ee48:	4b52      	ldr	r3, [pc, #328]	; (ef94 <P2PTasks+0xb10>)
    ee4a:	4798      	blx	r3
				break;
    ee4c:	e11b      	b.n	f086 <P2PTasks+0xc02>
							if (ConnectionTable[p].Address[0] == rxMessage.SourceAddress[0] && ConnectionTable[p].Address[1] == rxMessage.SourceAddress[1]
    ee4e:	4b5a      	ldr	r3, [pc, #360]	; (efb8 <P2PTasks+0xb34>)
    ee50:	685f      	ldr	r7, [r3, #4]
    ee52:	783c      	ldrb	r4, [r7, #0]
    ee54:	4b63      	ldr	r3, [pc, #396]	; (efe4 <P2PTasks+0xb60>)
    ee56:	2200      	movs	r2, #0
    ee58:	e003      	b.n	ee62 <P2PTasks+0x9de>
    ee5a:	3201      	adds	r2, #1
    ee5c:	3310      	adds	r3, #16
						for (p=0  ; p < CONNECTION_SIZE ; p++)
    ee5e:	2a14      	cmp	r2, #20
    ee60:	d0f2      	beq.n	ee48 <P2PTasks+0x9c4>
							if (ConnectionTable[p].Address[0] == rxMessage.SourceAddress[0] && ConnectionTable[p].Address[1] == rxMessage.SourceAddress[1]
    ee62:	7819      	ldrb	r1, [r3, #0]
    ee64:	42a1      	cmp	r1, r4
    ee66:	d1f8      	bne.n	ee5a <P2PTasks+0x9d6>
    ee68:	785e      	ldrb	r6, [r3, #1]
    ee6a:	7879      	ldrb	r1, [r7, #1]
    ee6c:	428e      	cmp	r6, r1
    ee6e:	d1f4      	bne.n	ee5a <P2PTasks+0x9d6>
							&& ConnectionTable[p].Address[2] == rxMessage.SourceAddress[2])
    ee70:	789d      	ldrb	r5, [r3, #2]
    ee72:	78b9      	ldrb	r1, [r7, #2]
    ee74:	428d      	cmp	r5, r1
    ee76:	d1f0      	bne.n	ee5a <P2PTasks+0x9d6>
								ConnectionTable[p].link_status++;
    ee78:	0110      	lsls	r0, r2, #4
    ee7a:	4b52      	ldr	r3, [pc, #328]	; (efc4 <P2PTasks+0xb40>)
    ee7c:	1818      	adds	r0, r3, r0
    ee7e:	7b83      	ldrb	r3, [r0, #14]
    ee80:	3301      	adds	r3, #1
    ee82:	7383      	strb	r3, [r0, #14]
								break;
    ee84:	e7e0      	b.n	ee48 <P2PTasks+0x9c4>
                            if( rxMessage.Payload[1] == STATUS_SUCCESS )
    ee86:	784b      	ldrb	r3, [r1, #1]
    ee88:	2b00      	cmp	r3, #0
    ee8a:	d11c      	bne.n	eec6 <P2PTasks+0xa42>
                                        if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    ee8c:	4b4a      	ldr	r3, [pc, #296]	; (efb8 <P2PTasks+0xb34>)
    ee8e:	685b      	ldr	r3, [r3, #4]
    ee90:	9307      	str	r3, [sp, #28]
    ee92:	4f54      	ldr	r7, [pc, #336]	; (efe4 <P2PTasks+0xb60>)
    ee94:	2400      	movs	r4, #0
                                    if( ConnectionTable[i].status.bits.isValid )
    ee96:	4d4b      	ldr	r5, [pc, #300]	; (efc4 <P2PTasks+0xb40>)
                                        if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    ee98:	4e53      	ldr	r6, [pc, #332]	; (efe8 <P2PTasks+0xb64>)
    ee9a:	e003      	b.n	eea4 <P2PTasks+0xa20>
    ee9c:	3401      	adds	r4, #1
    ee9e:	3710      	adds	r7, #16
                                for(i = 0; i < CONNECTION_SIZE; i++)
    eea0:	2c14      	cmp	r4, #20
    eea2:	d010      	beq.n	eec6 <P2PTasks+0xa42>
                                    if( ConnectionTable[i].status.bits.isValid )
    eea4:	9406      	str	r4, [sp, #24]
    eea6:	0123      	lsls	r3, r4, #4
    eea8:	18eb      	adds	r3, r5, r3
    eeaa:	7b1b      	ldrb	r3, [r3, #12]
    eeac:	09db      	lsrs	r3, r3, #7
    eeae:	d0f5      	beq.n	ee9c <P2PTasks+0xa18>
                                        if( isSameAddress(rxMessage.SourceAddress, ConnectionTable[i].Address) )
    eeb0:	0039      	movs	r1, r7
    eeb2:	9807      	ldr	r0, [sp, #28]
    eeb4:	47b0      	blx	r6
    eeb6:	2800      	cmp	r0, #0
    eeb8:	d0f0      	beq.n	ee9c <P2PTasks+0xa18>
                                            ConnectionTable[i].status.Val = 0;
    eeba:	9b06      	ldr	r3, [sp, #24]
    eebc:	011d      	lsls	r5, r3, #4
    eebe:	4b41      	ldr	r3, [pc, #260]	; (efc4 <P2PTasks+0xb40>)
    eec0:	195d      	adds	r5, r3, r5
    eec2:	2300      	movs	r3, #0
    eec4:	732b      	strb	r3, [r5, #12]
                        MiMAC_DiscardPacket();
    eec6:	4b33      	ldr	r3, [pc, #204]	; (ef94 <P2PTasks+0xb10>)
    eec8:	4798      	blx	r3
                        break;
    eeca:	e0dc      	b.n	f086 <P2PTasks+0xc02>
                            if(role != PAN_COORD)
    eecc:	4b37      	ldr	r3, [pc, #220]	; (efac <P2PTasks+0xb28>)
    eece:	781b      	ldrb	r3, [r3, #0]
    eed0:	2b01      	cmp	r3, #1
    eed2:	d002      	beq.n	eeda <P2PTasks+0xa56>
								MiMAC_DiscardPacket();
    eed4:	4b2f      	ldr	r3, [pc, #188]	; (ef94 <P2PTasks+0xb10>)
    eed6:	4798      	blx	r3
								break;
    eed8:	e0d5      	b.n	f086 <P2PTasks+0xc02>
							if(FW_Stat || ConnectionTableBroadcast || indirect_Packet)
    eeda:	4b41      	ldr	r3, [pc, #260]	; (efe0 <P2PTasks+0xb5c>)
    eedc:	781b      	ldrb	r3, [r3, #0]
    eede:	2b00      	cmp	r3, #0
    eee0:	d107      	bne.n	eef2 <P2PTasks+0xa6e>
    eee2:	4b42      	ldr	r3, [pc, #264]	; (efec <P2PTasks+0xb68>)
    eee4:	781b      	ldrb	r3, [r3, #0]
    eee6:	2b00      	cmp	r3, #0
    eee8:	d103      	bne.n	eef2 <P2PTasks+0xa6e>
    eeea:	4b41      	ldr	r3, [pc, #260]	; (eff0 <P2PTasks+0xb6c>)
    eeec:	781b      	ldrb	r3, [r3, #0]
    eeee:	2b00      	cmp	r3, #0
    eef0:	d002      	beq.n	eef8 <P2PTasks+0xa74>
								MiMAC_DiscardPacket();
    eef2:	4b28      	ldr	r3, [pc, #160]	; (ef94 <P2PTasks+0xb10>)
    eef4:	4798      	blx	r3
								break;
    eef6:	e0c6      	b.n	f086 <P2PTasks+0xc02>
                            dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_TIME_SYNC_DATA_PACKET));
    eef8:	20e0      	movs	r0, #224	; 0xe0
    eefa:	4b3e      	ldr	r3, [pc, #248]	; (eff4 <P2PTasks+0xb70>)
    eefc:	4798      	blx	r3
    eefe:	1e05      	subs	r5, r0, #0
                            if (NULL == dataPtr)
    ef00:	d101      	bne.n	ef06 <P2PTasks+0xa82>
    ef02:	f7ff fb1e 	bl	e542 <P2PTasks+0xbe>
                                    if( isSameAddress(indirectMessages[i].DestAddress.DestLongAddress, rxMessage.SourceAddress) )
    ef06:	4b2c      	ldr	r3, [pc, #176]	; (efb8 <P2PTasks+0xb34>)
    ef08:	685c      	ldr	r4, [r3, #4]
                                if( indirectMessages[i].flags.bits.isValid )
    ef0a:	4b3b      	ldr	r3, [pc, #236]	; (eff8 <P2PTasks+0xb74>)
    ef0c:	7e9b      	ldrb	r3, [r3, #26]
    ef0e:	07db      	lsls	r3, r3, #31
    ef10:	d505      	bpl.n	ef1e <P2PTasks+0xa9a>
                                    if( isSameAddress(indirectMessages[i].DestAddress.DestLongAddress, rxMessage.SourceAddress) )
    ef12:	0021      	movs	r1, r4
    ef14:	4839      	ldr	r0, [pc, #228]	; (effc <P2PTasks+0xb78>)
    ef16:	4b34      	ldr	r3, [pc, #208]	; (efe8 <P2PTasks+0xb64>)
    ef18:	4798      	blx	r3
    ef1a:	2800      	cmp	r0, #0
    ef1c:	d126      	bne.n	ef6c <P2PTasks+0xae8>
                                if( indirectMessages[i].flags.bits.isValid )
    ef1e:	239d      	movs	r3, #157	; 0x9d
    ef20:	005b      	lsls	r3, r3, #1
    ef22:	4a35      	ldr	r2, [pc, #212]	; (eff8 <P2PTasks+0xb74>)
    ef24:	5cd3      	ldrb	r3, [r2, r3]
    ef26:	07db      	lsls	r3, r3, #31
    ef28:	d507      	bpl.n	ef3a <P2PTasks+0xab6>
                                    if( isSameAddress(indirectMessages[i].DestAddress.DestLongAddress, rxMessage.SourceAddress) )
    ef2a:	0021      	movs	r1, r4
    ef2c:	4834      	ldr	r0, [pc, #208]	; (f000 <P2PTasks+0xb7c>)
    ef2e:	4b2e      	ldr	r3, [pc, #184]	; (efe8 <P2PTasks+0xb64>)
    ef30:	4798      	blx	r3
    ef32:	4a33      	ldr	r2, [pc, #204]	; (f000 <P2PTasks+0xb7c>)
                                if( indirectMessages[i].flags.bits.isValid )
    ef34:	2601      	movs	r6, #1
                                    if( isSameAddress(indirectMessages[i].DestAddress.DestLongAddress, rxMessage.SourceAddress) )
    ef36:	2800      	cmp	r0, #0
    ef38:	d11a      	bne.n	ef70 <P2PTasks+0xaec>
                                        SendPacket(false, rxMessage.SourcePANID, rxMessage.SourceAddress, isCommand, false, 
    ef3a:	4b32      	ldr	r3, [pc, #200]	; (f004 <P2PTasks+0xb80>)
    ef3c:	9305      	str	r3, [sp, #20]
    ef3e:	2000      	movs	r0, #0
    ef40:	9004      	str	r0, [sp, #16]
    ef42:	9003      	str	r0, [sp, #12]
    ef44:	9502      	str	r5, [sp, #8]
    ef46:	9001      	str	r0, [sp, #4]
    ef48:	9000      	str	r0, [sp, #0]
    ef4a:	0003      	movs	r3, r0
    ef4c:	0022      	movs	r2, r4
    ef4e:	491a      	ldr	r1, [pc, #104]	; (efb8 <P2PTasks+0xb34>)
    ef50:	8849      	ldrh	r1, [r1, #2]
    ef52:	4c22      	ldr	r4, [pc, #136]	; (efdc <P2PTasks+0xb58>)
    ef54:	47a0      	blx	r4
								++indirect_Packet;
    ef56:	4a26      	ldr	r2, [pc, #152]	; (eff0 <P2PTasks+0xb6c>)
    ef58:	7813      	ldrb	r3, [r2, #0]
    ef5a:	3301      	adds	r3, #1
    ef5c:	b2db      	uxtb	r3, r3
    ef5e:	7013      	strb	r3, [r2, #0]
								MiMem_Free(dataPtr);
    ef60:	0028      	movs	r0, r5
    ef62:	4b29      	ldr	r3, [pc, #164]	; (f008 <P2PTasks+0xb84>)
    ef64:	4798      	blx	r3
                            MiMAC_DiscardPacket();
    ef66:	4b0b      	ldr	r3, [pc, #44]	; (ef94 <P2PTasks+0xb10>)
    ef68:	4798      	blx	r3
                        break;
    ef6a:	e08c      	b.n	f086 <P2PTasks+0xc02>
                                    if( isSameAddress(indirectMessages[i].DestAddress.DestLongAddress, rxMessage.SourceAddress) )
    ef6c:	4a23      	ldr	r2, [pc, #140]	; (effc <P2PTasks+0xb78>)
                                if( indirectMessages[i].flags.bits.isValid )
    ef6e:	2600      	movs	r6, #0
    ef70:	2000      	movs	r0, #0
                                        for(j = 0; j < indirectMessages[i].PayLoadSize; j++)
    ef72:	2190      	movs	r1, #144	; 0x90
    ef74:	0049      	lsls	r1, r1, #1
    ef76:	4371      	muls	r1, r6
    ef78:	4b1f      	ldr	r3, [pc, #124]	; (eff8 <P2PTasks+0xb74>)
    ef7a:	185b      	adds	r3, r3, r1
    ef7c:	331b      	adds	r3, #27
                                            dataPtr[dataLen++] =indirectMessages[i].PayLoad[j];
    ef7e:	4c1e      	ldr	r4, [pc, #120]	; (eff8 <P2PTasks+0xb74>)
    ef80:	46a4      	mov	ip, r4
    ef82:	4461      	add	r1, ip
    ef84:	e047      	b.n	f016 <P2PTasks+0xb92>
    ef86:	46c0      	nop			; (mov r8, r8)
    ef88:	20003774 	.word	0x20003774
    ef8c:	200007d9 	.word	0x200007d9
    ef90:	20003778 	.word	0x20003778
    ef94:	0000c68d 	.word	0x0000c68d
    ef98:	200007cd 	.word	0x200007cd
    ef9c:	200007ce 	.word	0x200007ce
    efa0:	20002c9c 	.word	0x20002c9c
    efa4:	20003314 	.word	0x20003314
    efa8:	0000c6a9 	.word	0x0000c6a9
    efac:	2000376c 	.word	0x2000376c
    efb0:	0001ad7c 	.word	0x0001ad7c
    efb4:	00018915 	.word	0x00018915
    efb8:	2000377c 	.word	0x2000377c
    efbc:	0000d3a5 	.word	0x0000d3a5
    efc0:	20002dc2 	.word	0x20002dc2
    efc4:	20003318 	.word	0x20003318
    efc8:	0001835b 	.word	0x0001835b
    efcc:	0001ada0 	.word	0x0001ada0
    efd0:	0000d845 	.word	0x0000d845
    efd4:	20003478 	.word	0x20003478
    efd8:	0000d441 	.word	0x0000d441
    efdc:	0000d579 	.word	0x0000d579
    efe0:	200007cb 	.word	0x200007cb
    efe4:	2000331c 	.word	0x2000331c
    efe8:	0000da69 	.word	0x0000da69
    efec:	200007ca 	.word	0x200007ca
    eff0:	200007d7 	.word	0x200007d7
    eff4:	0000f4b1 	.word	0x0000f4b1
    eff8:	200034dc 	.word	0x200034dc
    effc:	200034e2 	.word	0x200034e2
    f000:	20003602 	.word	0x20003602
    f004:	00009c65 	.word	0x00009c65
    f008:	0000f56d 	.word	0x0000f56d
    f00c:	1c44      	adds	r4, r0, #1
    f00e:	180f      	adds	r7, r1, r0
    f010:	7f3f      	ldrb	r7, [r7, #28]
    f012:	542f      	strb	r7, [r5, r0]
    f014:	b2e0      	uxtb	r0, r4
                                        for(j = 0; j < indirectMessages[i].PayLoadSize; j++)
    f016:	781c      	ldrb	r4, [r3, #0]
    f018:	4284      	cmp	r4, r0
    f01a:	d8f7      	bhi.n	f00c <P2PTasks+0xb88>
                                            SendPacket(false, indirectMessages[i].DestPANID, indirectMessages[i].DestAddress.DestLongAddress, isCommand, (bool)indirectMessages[i].flags.bits.isSecured,
    f01c:	2490      	movs	r4, #144	; 0x90
    f01e:	0064      	lsls	r4, r4, #1
    f020:	4366      	muls	r6, r4
    f022:	4c8b      	ldr	r4, [pc, #556]	; (f250 <P2PTasks+0xdcc>)
    f024:	19a4      	adds	r4, r4, r6
    f026:	0023      	movs	r3, r4
    f028:	331d      	adds	r3, #29
    f02a:	33ff      	adds	r3, #255	; 0xff
    f02c:	681b      	ldr	r3, [r3, #0]
    f02e:	9305      	str	r3, [sp, #20]
    f030:	2600      	movs	r6, #0
    f032:	9604      	str	r6, [sp, #16]
    f034:	0023      	movs	r3, r4
    f036:	331c      	adds	r3, #28
    f038:	33ff      	adds	r3, #255	; 0xff
    f03a:	781b      	ldrb	r3, [r3, #0]
    f03c:	9303      	str	r3, [sp, #12]
    f03e:	9502      	str	r5, [sp, #8]
    f040:	9001      	str	r0, [sp, #4]
    f042:	7ea3      	ldrb	r3, [r4, #26]
    f044:	071b      	lsls	r3, r3, #28
    f046:	0fdb      	lsrs	r3, r3, #31
    f048:	9300      	str	r3, [sp, #0]
    f04a:	0033      	movs	r3, r6
    f04c:	88a1      	ldrh	r1, [r4, #4]
    f04e:	0030      	movs	r0, r6
    f050:	4f80      	ldr	r7, [pc, #512]	; (f254 <P2PTasks+0xdd0>)
    f052:	47b8      	blx	r7
										  ++FW_Stat;
    f054:	4a80      	ldr	r2, [pc, #512]	; (f258 <P2PTasks+0xdd4>)
    f056:	7813      	ldrb	r3, [r2, #0]
    f058:	3301      	adds	r3, #1
    f05a:	b2db      	uxtb	r3, r3
    f05c:	7013      	strb	r3, [r2, #0]
										  MiMem_Free(dataPtr);
    f05e:	0028      	movs	r0, r5
    f060:	4b7e      	ldr	r3, [pc, #504]	; (f25c <P2PTasks+0xdd8>)
    f062:	4798      	blx	r3
                                        indirectMessages[i].flags.Val = 0;   
    f064:	76a6      	strb	r6, [r4, #26]
                                        goto END_OF_SENDING_INDIRECT_MESSAGE;    
    f066:	e77e      	b.n	ef66 <P2PTasks+0xae2>
            P2PStatus.bits.RxHasUserData = 1;
    f068:	4c7d      	ldr	r4, [pc, #500]	; (f260 <P2PTasks+0xddc>)
    f06a:	7823      	ldrb	r3, [r4, #0]
    f06c:	2208      	movs	r2, #8
    f06e:	4313      	orrs	r3, r2
    f070:	7023      	strb	r3, [r4, #0]
			pktRxcallback(&rxMessage);
    f072:	4b7c      	ldr	r3, [pc, #496]	; (f264 <P2PTasks+0xde0>)
    f074:	681b      	ldr	r3, [r3, #0]
    f076:	487c      	ldr	r0, [pc, #496]	; (f268 <P2PTasks+0xde4>)
    f078:	4798      	blx	r3
			P2PStatus.bits.RxHasUserData = 0;
    f07a:	7823      	ldrb	r3, [r4, #0]
    f07c:	2208      	movs	r2, #8
    f07e:	4393      	bics	r3, r2
    f080:	7023      	strb	r3, [r4, #0]
			MiMAC_DiscardPacket();
    f082:	4b7a      	ldr	r3, [pc, #488]	; (f26c <P2PTasks+0xde8>)
    f084:	4798      	blx	r3
        if( rxMessage.PayloadSize == 0  || P2PStatus.bits.SearchConnection || P2PStatus.bits.Resync )
    f086:	4b78      	ldr	r3, [pc, #480]	; (f268 <P2PTasks+0xde4>)
    f088:	7b1b      	ldrb	r3, [r3, #12]
    f08a:	2b00      	cmp	r3, #0
    f08c:	d009      	beq.n	f0a2 <P2PTasks+0xc1e>
    f08e:	4b74      	ldr	r3, [pc, #464]	; (f260 <P2PTasks+0xddc>)
    f090:	781b      	ldrb	r3, [r3, #0]
    f092:	06db      	lsls	r3, r3, #27
    f094:	d405      	bmi.n	f0a2 <P2PTasks+0xc1e>
    f096:	4b72      	ldr	r3, [pc, #456]	; (f260 <P2PTasks+0xddc>)
    f098:	781b      	ldrb	r3, [r3, #0]
    f09a:	069b      	lsls	r3, r3, #26
    f09c:	d401      	bmi.n	f0a2 <P2PTasks+0xc1e>
    f09e:	f7ff fa36 	bl	e50e <P2PTasks+0x8a>
            P2PStatus.bits.RxHasUserData = 0;
    f0a2:	4a6f      	ldr	r2, [pc, #444]	; (f260 <P2PTasks+0xddc>)
    f0a4:	7813      	ldrb	r3, [r2, #0]
    f0a6:	2108      	movs	r1, #8
    f0a8:	438b      	bics	r3, r1
    f0aa:	7013      	strb	r3, [r2, #0]
            MiMAC_DiscardPacket();
    f0ac:	4b6f      	ldr	r3, [pc, #444]	; (f26c <P2PTasks+0xde8>)
    f0ae:	4798      	blx	r3
    f0b0:	f7ff fa2d 	bl	e50e <P2PTasks+0x8a>
		if((sheerPeerDevInfoTimerSet) && (role == PAN_COORD) && !checkRxDataBuffer())
    f0b4:	4b6e      	ldr	r3, [pc, #440]	; (f270 <P2PTasks+0xdec>)
    f0b6:	4798      	blx	r3
    f0b8:	2800      	cmp	r0, #0
    f0ba:	d10f      	bne.n	f0dc <P2PTasks+0xc58>
			if((!FW_Stat) && (!AckReqData) && (!indirect_Packet) && (!ConnectionTableBroadcast))
    f0bc:	4b66      	ldr	r3, [pc, #408]	; (f258 <P2PTasks+0xdd4>)
    f0be:	781b      	ldrb	r3, [r3, #0]
    f0c0:	2b00      	cmp	r3, #0
    f0c2:	d10b      	bne.n	f0dc <P2PTasks+0xc58>
    f0c4:	4b6b      	ldr	r3, [pc, #428]	; (f274 <P2PTasks+0xdf0>)
    f0c6:	781b      	ldrb	r3, [r3, #0]
    f0c8:	2b00      	cmp	r3, #0
    f0ca:	d107      	bne.n	f0dc <P2PTasks+0xc58>
    f0cc:	4b6a      	ldr	r3, [pc, #424]	; (f278 <P2PTasks+0xdf4>)
    f0ce:	781b      	ldrb	r3, [r3, #0]
    f0d0:	2b00      	cmp	r3, #0
    f0d2:	d103      	bne.n	f0dc <P2PTasks+0xc58>
    f0d4:	4b69      	ldr	r3, [pc, #420]	; (f27c <P2PTasks+0xdf8>)
    f0d6:	781b      	ldrb	r3, [r3, #0]
    f0d8:	2b00      	cmp	r3, #0
    f0da:	d03d      	beq.n	f158 <P2PTasks+0xcd4>
		if((inActiveDeviceCheckTimerSet) && (role == PAN_COORD) && !checkRxDataBuffer())
    f0dc:	4b68      	ldr	r3, [pc, #416]	; (f280 <P2PTasks+0xdfc>)
    f0de:	781b      	ldrb	r3, [r3, #0]
    f0e0:	2b00      	cmp	r3, #0
    f0e2:	d101      	bne.n	f0e8 <P2PTasks+0xc64>
    f0e4:	f7ff fa1f 	bl	e526 <P2PTasks+0xa2>
    f0e8:	4b66      	ldr	r3, [pc, #408]	; (f284 <P2PTasks+0xe00>)
    f0ea:	781b      	ldrb	r3, [r3, #0]
    f0ec:	2b01      	cmp	r3, #1
    f0ee:	d001      	beq.n	f0f4 <P2PTasks+0xc70>
    f0f0:	f7ff fa19 	bl	e526 <P2PTasks+0xa2>
    f0f4:	4b5e      	ldr	r3, [pc, #376]	; (f270 <P2PTasks+0xdec>)
    f0f6:	4798      	blx	r3
    f0f8:	2800      	cmp	r0, #0
    f0fa:	d001      	beq.n	f100 <P2PTasks+0xc7c>
    f0fc:	f7ff fa13 	bl	e526 <P2PTasks+0xa2>
			if((!AckReqData) && (!FW_Stat) && (!ConnectionTableBroadcast)  && (!indirect_Packet))
    f100:	4b5c      	ldr	r3, [pc, #368]	; (f274 <P2PTasks+0xdf0>)
    f102:	781b      	ldrb	r3, [r3, #0]
    f104:	2b00      	cmp	r3, #0
    f106:	d001      	beq.n	f10c <P2PTasks+0xc88>
    f108:	f7ff fa0d 	bl	e526 <P2PTasks+0xa2>
    f10c:	4b52      	ldr	r3, [pc, #328]	; (f258 <P2PTasks+0xdd4>)
    f10e:	781b      	ldrb	r3, [r3, #0]
    f110:	2b00      	cmp	r3, #0
    f112:	d001      	beq.n	f118 <P2PTasks+0xc94>
    f114:	f7ff fa07 	bl	e526 <P2PTasks+0xa2>
    f118:	4b58      	ldr	r3, [pc, #352]	; (f27c <P2PTasks+0xdf8>)
    f11a:	781b      	ldrb	r3, [r3, #0]
    f11c:	2b00      	cmp	r3, #0
    f11e:	d001      	beq.n	f124 <P2PTasks+0xca0>
    f120:	f7ff fa01 	bl	e526 <P2PTasks+0xa2>
    f124:	4b54      	ldr	r3, [pc, #336]	; (f278 <P2PTasks+0xdf4>)
    f126:	781b      	ldrb	r3, [r3, #0]
    f128:	2b00      	cmp	r3, #0
    f12a:	d001      	beq.n	f130 <P2PTasks+0xcac>
    f12c:	f7ff f9fb 	bl	e526 <P2PTasks+0xa2>
				tmpTick.Val = MiWi_TickGet();
    f130:	4b55      	ldr	r3, [pc, #340]	; (f288 <P2PTasks+0xe04>)
    f132:	4798      	blx	r3
				if( MiWi_TickGetDiff(tmpTick, inActiveDeviceCheckTimerTick) > FIND_INACTIVE_DEVICE_TIMEOUT )
    f134:	4b55      	ldr	r3, [pc, #340]	; (f28c <P2PTasks+0xe08>)
    f136:	6819      	ldr	r1, [r3, #0]
    f138:	4b55      	ldr	r3, [pc, #340]	; (f290 <P2PTasks+0xe0c>)
    f13a:	4798      	blx	r3
    f13c:	4b55      	ldr	r3, [pc, #340]	; (f294 <P2PTasks+0xe10>)
    f13e:	4298      	cmp	r0, r3
    f140:	d801      	bhi.n	f146 <P2PTasks+0xcc2>
    f142:	f7ff f9f0 	bl	e526 <P2PTasks+0xa2>
					inActiveDeviceCheckTimerTick.Val = MiWi_TickGet();
    f146:	4b50      	ldr	r3, [pc, #320]	; (f288 <P2PTasks+0xe04>)
    f148:	4798      	blx	r3
    f14a:	4b50      	ldr	r3, [pc, #320]	; (f28c <P2PTasks+0xe08>)
    f14c:	6018      	str	r0, [r3, #0]
    f14e:	4d52      	ldr	r5, [pc, #328]	; (f298 <P2PTasks+0xe14>)
    f150:	2400      	movs	r4, #0
		if (ConnectionTable[i].status.bits.isValid)
    f152:	4e52      	ldr	r6, [pc, #328]	; (f29c <P2PTasks+0xe18>)
				ConnectionTable[i].link_status = 0;
    f154:	0027      	movs	r7, r4
    f156:	e019      	b.n	f18c <P2PTasks+0xd08>
				tmpTick.Val = MiWi_TickGet();
    f158:	4b4b      	ldr	r3, [pc, #300]	; (f288 <P2PTasks+0xe04>)
    f15a:	4798      	blx	r3
				if( MiWi_TickGetDiff(tmpTick, sharePeerDevInfoTimerTick) > SHARE_PEER_DEVICE_INFO_TIMEOUT )
    f15c:	4b50      	ldr	r3, [pc, #320]	; (f2a0 <P2PTasks+0xe1c>)
    f15e:	6819      	ldr	r1, [r3, #0]
    f160:	4b4b      	ldr	r3, [pc, #300]	; (f290 <P2PTasks+0xe0c>)
    f162:	4798      	blx	r3
    f164:	4b4f      	ldr	r3, [pc, #316]	; (f2a4 <P2PTasks+0xe20>)
    f166:	4298      	cmp	r0, r3
    f168:	d9b8      	bls.n	f0dc <P2PTasks+0xc58>
					sharePeerDevInfoTimerTick.Val = MiWi_TickGet();
    f16a:	4b47      	ldr	r3, [pc, #284]	; (f288 <P2PTasks+0xe04>)
    f16c:	4798      	blx	r3
    f16e:	4b4c      	ldr	r3, [pc, #304]	; (f2a0 <P2PTasks+0xe1c>)
    f170:	6018      	str	r0, [r3, #0]
					ConnectionTableBroadcast = true;
    f172:	2201      	movs	r2, #1
    f174:	4b41      	ldr	r3, [pc, #260]	; (f27c <P2PTasks+0xdf8>)
    f176:	701a      	strb	r2, [r3, #0]
					MiApp_BroadcastConnectionTable();
    f178:	4b4b      	ldr	r3, [pc, #300]	; (f2a8 <P2PTasks+0xe24>)
    f17a:	4798      	blx	r3
    f17c:	e7ae      	b.n	f0dc <P2PTasks+0xc58>
				ConnectionTable[i].link_status = 0;
    f17e:	701f      	strb	r7, [r3, #0]
    f180:	3401      	adds	r4, #1
    f182:	3510      	adds	r5, #16
	for (i = 0;i < CONNECTION_SIZE; i++)
    f184:	2c14      	cmp	r4, #20
    f186:	d101      	bne.n	f18c <P2PTasks+0xd08>
    f188:	f7ff f9cd 	bl	e526 <P2PTasks+0xa2>
    f18c:	b2e0      	uxtb	r0, r4
		if (ConnectionTable[i].status.bits.isValid)
    f18e:	0123      	lsls	r3, r4, #4
    f190:	18f3      	adds	r3, r6, r3
    f192:	7b1b      	ldrb	r3, [r3, #12]
    f194:	09db      	lsrs	r3, r3, #7
    f196:	d0f3      	beq.n	f180 <P2PTasks+0xcfc>
    f198:	002b      	movs	r3, r5
			if (ConnectionTable[i].link_status == 0 && ConnectionTable[i].permanent_connections != 0xFF)
    f19a:	782a      	ldrb	r2, [r5, #0]
    f19c:	2a00      	cmp	r2, #0
    f19e:	d1ee      	bne.n	f17e <P2PTasks+0xcfa>
    f1a0:	786a      	ldrb	r2, [r5, #1]
    f1a2:	2aff      	cmp	r2, #255	; 0xff
    f1a4:	d0eb      	beq.n	f17e <P2PTasks+0xcfa>
				MiApp_RemoveConnection(i);
    f1a6:	4b41      	ldr	r3, [pc, #260]	; (f2ac <P2PTasks+0xe28>)
    f1a8:	4798      	blx	r3
    f1aa:	e7e9      	b.n	f180 <P2PTasks+0xcfc>
			if((!AckReqData && !SwAckReq && !checkRxDataBuffer() && !SendData))
    f1ac:	4b30      	ldr	r3, [pc, #192]	; (f270 <P2PTasks+0xdec>)
    f1ae:	4798      	blx	r3
    f1b0:	2800      	cmp	r0, #0
    f1b2:	d001      	beq.n	f1b8 <P2PTasks+0xd34>
    f1b4:	f7ff f9c5 	bl	e542 <P2PTasks+0xbe>
    f1b8:	4b3d      	ldr	r3, [pc, #244]	; (f2b0 <P2PTasks+0xe2c>)
    f1ba:	781b      	ldrb	r3, [r3, #0]
    f1bc:	2b00      	cmp	r3, #0
    f1be:	d001      	beq.n	f1c4 <P2PTasks+0xd40>
    f1c0:	f7ff f9bf 	bl	e542 <P2PTasks+0xbe>
				tmpTick.Val = MiWi_TickGet();
    f1c4:	4b30      	ldr	r3, [pc, #192]	; (f288 <P2PTasks+0xe04>)
    f1c6:	4798      	blx	r3
				if( MiWi_TickGetDiff(tmpTick, linkStatusTimerTick) > LINK_STATUS_TIMEOUT )
    f1c8:	4b3a      	ldr	r3, [pc, #232]	; (f2b4 <P2PTasks+0xe30>)
    f1ca:	6819      	ldr	r1, [r3, #0]
    f1cc:	4b30      	ldr	r3, [pc, #192]	; (f290 <P2PTasks+0xe0c>)
    f1ce:	4798      	blx	r3
    f1d0:	4b34      	ldr	r3, [pc, #208]	; (f2a4 <P2PTasks+0xe20>)
    f1d2:	4298      	cmp	r0, r3
    f1d4:	d801      	bhi.n	f1da <P2PTasks+0xd56>
    f1d6:	f7ff f9b4 	bl	e542 <P2PTasks+0xbe>
					linkStatusTimerTick.Val = MiWi_TickGet();
    f1da:	4b2b      	ldr	r3, [pc, #172]	; (f288 <P2PTasks+0xe04>)
    f1dc:	4798      	blx	r3
    f1de:	4b35      	ldr	r3, [pc, #212]	; (f2b4 <P2PTasks+0xe30>)
    f1e0:	6018      	str	r0, [r3, #0]
					LinkStatus = true;
    f1e2:	2201      	movs	r2, #1
    f1e4:	4b34      	ldr	r3, [pc, #208]	; (f2b8 <P2PTasks+0xe34>)
    f1e6:	701a      	strb	r2, [r3, #0]
	dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_CMD_IAM_ALIVE));
    f1e8:	2010      	movs	r0, #16
    f1ea:	4b34      	ldr	r3, [pc, #208]	; (f2bc <P2PTasks+0xe38>)
    f1ec:	4798      	blx	r3
    f1ee:	1e04      	subs	r4, r0, #0
	if (NULL == dataPtr)
    f1f0:	d101      	bne.n	f1f6 <P2PTasks+0xd72>
    f1f2:	f7ff f9a6 	bl	e542 <P2PTasks+0xbe>
	dataPtr[dataLen++] = CMD_IAM_ALIVE;
    f1f6:	237a      	movs	r3, #122	; 0x7a
    f1f8:	7003      	strb	r3, [r0, #0]
	uint8_t i = PHY_RandomReq();
    f1fa:	4b31      	ldr	r3, [pc, #196]	; (f2c0 <P2PTasks+0xe3c>)
    f1fc:	4798      	blx	r3
	delay_ms(i*10);
    f1fe:	b2c3      	uxtb	r3, r0
    f200:	0098      	lsls	r0, r3, #2
    f202:	18c0      	adds	r0, r0, r3
    f204:	0040      	lsls	r0, r0, #1
    f206:	d016      	beq.n	f236 <P2PTasks+0xdb2>
    f208:	4b2e      	ldr	r3, [pc, #184]	; (f2c4 <P2PTasks+0xe40>)
    f20a:	4798      	blx	r3
	SendPacket(false, myPANID, ConnectionTable[0].Address, true, false,
    f20c:	4b2e      	ldr	r3, [pc, #184]	; (f2c8 <P2PTasks+0xe44>)
    f20e:	8819      	ldrh	r1, [r3, #0]
    f210:	4b2e      	ldr	r3, [pc, #184]	; (f2cc <P2PTasks+0xe48>)
    f212:	9305      	str	r3, [sp, #20]
    f214:	2201      	movs	r2, #1
    f216:	9204      	str	r2, [sp, #16]
    f218:	2300      	movs	r3, #0
    f21a:	9303      	str	r3, [sp, #12]
    f21c:	9402      	str	r4, [sp, #8]
    f21e:	9201      	str	r2, [sp, #4]
    f220:	9300      	str	r3, [sp, #0]
    f222:	3301      	adds	r3, #1
    f224:	4a2a      	ldr	r2, [pc, #168]	; (f2d0 <P2PTasks+0xe4c>)
    f226:	2000      	movs	r0, #0
    f228:	4d0a      	ldr	r5, [pc, #40]	; (f254 <P2PTasks+0xdd0>)
    f22a:	47a8      	blx	r5
	MiMem_Free(dataPtr);
    f22c:	0020      	movs	r0, r4
    f22e:	4b0b      	ldr	r3, [pc, #44]	; (f25c <P2PTasks+0xdd8>)
    f230:	4798      	blx	r3
    f232:	f7ff f986 	bl	e542 <P2PTasks+0xbe>
	delay_ms(i*10);
    f236:	2001      	movs	r0, #1
    f238:	4b26      	ldr	r3, [pc, #152]	; (f2d4 <P2PTasks+0xe50>)
    f23a:	4798      	blx	r3
    f23c:	e7e6      	b.n	f20c <P2PTasks+0xd88>
                            MiMAC_DiscardPacket();
    f23e:	4b0b      	ldr	r3, [pc, #44]	; (f26c <P2PTasks+0xde8>)
    f240:	4798      	blx	r3
                            dataPtr[dataLen++] = CMD_P2P_CONNECTION_REMOVAL_RESPONSE;
    f242:	2301      	movs	r3, #1
                                dataPtr[dataLen++] = STATUS_ENTRY_NOT_EXIST;
    f244:	1c58      	adds	r0, r3, #1
    f246:	22f0      	movs	r2, #240	; 0xf0
    f248:	4649      	mov	r1, r9
    f24a:	54ca      	strb	r2, [r1, r3]
    f24c:	e432      	b.n	eab4 <P2PTasks+0x630>
    f24e:	46c0      	nop			; (mov r8, r8)
    f250:	200034dc 	.word	0x200034dc
    f254:	0000d579 	.word	0x0000d579
    f258:	200007cb 	.word	0x200007cb
    f25c:	0000f56d 	.word	0x0000f56d
    f260:	200034d8 	.word	0x200034d8
    f264:	200007dc 	.word	0x200007dc
    f268:	2000377c 	.word	0x2000377c
    f26c:	0000c68d 	.word	0x0000c68d
    f270:	0000cebd 	.word	0x0000cebd
    f274:	200007b8 	.word	0x200007b8
    f278:	200007d7 	.word	0x200007d7
    f27c:	200007ca 	.word	0x200007ca
    f280:	200007d6 	.word	0x200007d6
    f284:	2000376c 	.word	0x2000376c
    f288:	0000f6f1 	.word	0x0000f6f1
    f28c:	20003474 	.word	0x20003474
    f290:	0000f751 	.word	0x0000f751
    f294:	07270e00 	.word	0x07270e00
    f298:	20003326 	.word	0x20003326
    f29c:	20003318 	.word	0x20003318
    f2a0:	20003790 	.word	0x20003790
    f2a4:	00e4e1c0 	.word	0x00e4e1c0
    f2a8:	0000d64d 	.word	0x0000d64d
    f2ac:	0000e0ad 	.word	0x0000e0ad
    f2b0:	200007cd 	.word	0x200007cd
    f2b4:	20003774 	.word	0x20003774
    f2b8:	200007cc 	.word	0x200007cc
    f2bc:	0000f4b1 	.word	0x0000f4b1
    f2c0:	0000d2e5 	.word	0x0000d2e5
    f2c4:	00004719 	.word	0x00004719
    f2c8:	20003478 	.word	0x20003478
    f2cc:	0000d34d 	.word	0x0000d34d
    f2d0:	2000331c 	.word	0x2000331c
    f2d4:	000046ed 	.word	0x000046ed

0000f2d8 <MiApp_EstablishConnection>:
    {
    f2d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    f2da:	46de      	mov	lr, fp
    f2dc:	464f      	mov	r7, r9
    f2de:	4646      	mov	r6, r8
    f2e0:	b5c0      	push	{r6, r7, lr}
    f2e2:	b08a      	sub	sp, #40	; 0x28
    f2e4:	231f      	movs	r3, #31
    f2e6:	aa02      	add	r2, sp, #8
    f2e8:	4694      	mov	ip, r2
    f2ea:	4463      	add	r3, ip
    f2ec:	7018      	strb	r0, [r3, #0]
        uint8_t    tmpConnectionMode = ConnMode;
    f2ee:	4c41      	ldr	r4, [pc, #260]	; (f3f4 <MiApp_EstablishConnection+0x11c>)
    f2f0:	7823      	ldrb	r3, [r4, #0]
    f2f2:	4698      	mov	r8, r3
        tick1.Val = MiWi_TickGet();
    f2f4:	4d40      	ldr	r5, [pc, #256]	; (f3f8 <MiApp_EstablishConnection+0x120>)
    f2f6:	47a8      	blx	r5
    f2f8:	4b40      	ldr	r3, [pc, #256]	; (f3fc <MiApp_EstablishConnection+0x124>)
    f2fa:	6018      	str	r0, [r3, #0]
        t1.Val = MiWi_TickGet();
    f2fc:	47a8      	blx	r5
        t1.Val -= ONE_SECOND;
    f2fe:	0003      	movs	r3, r0
    f300:	4a3f      	ldr	r2, [pc, #252]	; (f400 <MiApp_EstablishConnection+0x128>)
    f302:	4694      	mov	ip, r2
    f304:	4463      	add	r3, ip
    f306:	9307      	str	r3, [sp, #28]
        ConnMode = ENABLE_ALL_CONN;
    f308:	2300      	movs	r3, #0
    f30a:	7023      	strb	r3, [r4, #0]
        P2PStatus.bits.SearchConnection = 1;
    f30c:	4a3d      	ldr	r2, [pc, #244]	; (f404 <MiApp_EstablishConnection+0x12c>)
    f30e:	7813      	ldrb	r3, [r2, #0]
    f310:	2110      	movs	r1, #16
    f312:	430b      	orrs	r3, r1
    f314:	7013      	strb	r3, [r2, #0]
        EstConfCallback = ConfCallback;
    f316:	4b3c      	ldr	r3, [pc, #240]	; (f408 <MiApp_EstablishConnection+0x130>)
    f318:	9a12      	ldr	r2, [sp, #72]	; 0x48
    f31a:	601a      	str	r2, [r3, #0]
        uint8_t    connectionInterval = 0;
    f31c:	2400      	movs	r4, #0
        uint8_t    retry = CONNECTION_RETRY_TIMES;
    f31e:	2604      	movs	r6, #4
        while( P2PStatus.bits.SearchConnection )
    f320:	4b38      	ldr	r3, [pc, #224]	; (f404 <MiApp_EstablishConnection+0x12c>)
    f322:	4699      	mov	r9, r3
            t2.Val = MiWi_TickGet();
    f324:	4b34      	ldr	r3, [pc, #208]	; (f3f8 <MiApp_EstablishConnection+0x120>)
    f326:	469b      	mov	fp, r3
            if(( MiWi_TickGetDiff(t2, t1) > (ONE_SECOND)) || connectionReqStatus == false)
    f328:	4d38      	ldr	r5, [pc, #224]	; (f40c <MiApp_EstablishConnection+0x134>)
        while( P2PStatus.bits.SearchConnection )
    f32a:	e039      	b.n	f3a0 <MiApp_EstablishConnection+0xc8>
                if( retry-- == 0 )
    f32c:	1e77      	subs	r7, r6, #1
    f32e:	b2ff      	uxtb	r7, r7
    f330:	2e00      	cmp	r6, #0
    f332:	d04b      	beq.n	f3cc <MiApp_EstablishConnection+0xf4>
                MiApp_Set(CHANNEL, &Channel);
    f334:	211f      	movs	r1, #31
    f336:	ab02      	add	r3, sp, #8
    f338:	469c      	mov	ip, r3
    f33a:	4461      	add	r1, ip
    f33c:	2000      	movs	r0, #0
    f33e:	4b34      	ldr	r3, [pc, #208]	; (f410 <MiApp_EstablishConnection+0x138>)
    f340:	4798      	blx	r3
				connectionReqStatus = true;
    f342:	2201      	movs	r2, #1
    f344:	4b33      	ldr	r3, [pc, #204]	; (f414 <MiApp_EstablishConnection+0x13c>)
    f346:	701a      	strb	r2, [r3, #0]
                dataPtr = MiMem_Alloc(CALC_SEC_PAYLOAD_SIZE(PACKETLEN_P2P_CONNECTION_REQUEST));
    f348:	2010      	movs	r0, #16
    f34a:	4b33      	ldr	r3, [pc, #204]	; (f418 <MiApp_EstablishConnection+0x140>)
    f34c:	4798      	blx	r3
    f34e:	1e06      	subs	r6, r0, #0
                if (NULL == dataPtr)
    f350:	d048      	beq.n	f3e4 <MiApp_EstablishConnection+0x10c>
                dataPtr[dataLen++] = CMD_P2P_CONNECTION_REQUEST;
    f352:	2381      	movs	r3, #129	; 0x81
    f354:	7003      	strb	r3, [r0, #0]
                dataPtr[dataLen++] = currentChannel;
    f356:	4b31      	ldr	r3, [pc, #196]	; (f41c <MiApp_EstablishConnection+0x144>)
    f358:	781b      	ldrb	r3, [r3, #0]
    f35a:	7043      	strb	r3, [r0, #1]
                dataPtr[dataLen++] = P2PCapacityInfo;
    f35c:	4b30      	ldr	r3, [pc, #192]	; (f420 <MiApp_EstablishConnection+0x148>)
    f35e:	781b      	ldrb	r3, [r3, #0]
    f360:	7083      	strb	r3, [r0, #2]
                            dataPtr[dataLen++] = AdditionalNodeID[i];
    f362:	4b30      	ldr	r3, [pc, #192]	; (f424 <MiApp_EstablishConnection+0x14c>)
    f364:	781b      	ldrb	r3, [r3, #0]
    f366:	70c3      	strb	r3, [r0, #3]
                        SendPacket(true, myPANID, NULL, true, false, dataLen, dataPtr,0, true, CommandConfCallback);
    f368:	4b2f      	ldr	r3, [pc, #188]	; (f428 <MiApp_EstablishConnection+0x150>)
    f36a:	8819      	ldrh	r1, [r3, #0]
    f36c:	4b2f      	ldr	r3, [pc, #188]	; (f42c <MiApp_EstablishConnection+0x154>)
    f36e:	9305      	str	r3, [sp, #20]
    f370:	2301      	movs	r3, #1
    f372:	9304      	str	r3, [sp, #16]
    f374:	2300      	movs	r3, #0
    f376:	9303      	str	r3, [sp, #12]
    f378:	9002      	str	r0, [sp, #8]
    f37a:	2204      	movs	r2, #4
    f37c:	9201      	str	r2, [sp, #4]
    f37e:	9300      	str	r3, [sp, #0]
    f380:	3301      	adds	r3, #1
    f382:	2200      	movs	r2, #0
    f384:	2001      	movs	r0, #1
    f386:	4c2a      	ldr	r4, [pc, #168]	; (f430 <MiApp_EstablishConnection+0x158>)
    f388:	47a0      	blx	r4
						MiMem_Free(dataPtr);
    f38a:	0030      	movs	r0, r6
    f38c:	4b29      	ldr	r3, [pc, #164]	; (f434 <MiApp_EstablishConnection+0x15c>)
    f38e:	4798      	blx	r3
                t1.Val = t2.Val;
    f390:	9b08      	ldr	r3, [sp, #32]
    f392:	9307      	str	r3, [sp, #28]
                if( retry-- == 0 )
    f394:	003e      	movs	r6, r7
                connectionInterval = CONNECTION_INTERVAL-1;
    f396:	2403      	movs	r4, #3
			P2PTasks();
    f398:	4b27      	ldr	r3, [pc, #156]	; (f438 <MiApp_EstablishConnection+0x160>)
    f39a:	4798      	blx	r3
			SYSTEM_RunTasks();
    f39c:	4b27      	ldr	r3, [pc, #156]	; (f43c <MiApp_EstablishConnection+0x164>)
    f39e:	4798      	blx	r3
        while( P2PStatus.bits.SearchConnection )
    f3a0:	464b      	mov	r3, r9
    f3a2:	781b      	ldrb	r3, [r3, #0]
    f3a4:	06db      	lsls	r3, r3, #27
    f3a6:	d518      	bpl.n	f3da <MiApp_EstablishConnection+0x102>
            t2.Val = MiWi_TickGet();
    f3a8:	47d8      	blx	fp
    f3aa:	9008      	str	r0, [sp, #32]
            if(( MiWi_TickGetDiff(t2, t1) > (ONE_SECOND)) || connectionReqStatus == false)
    f3ac:	9907      	ldr	r1, [sp, #28]
    f3ae:	47a8      	blx	r5
    f3b0:	4b23      	ldr	r3, [pc, #140]	; (f440 <MiApp_EstablishConnection+0x168>)
    f3b2:	4298      	cmp	r0, r3
    f3b4:	d803      	bhi.n	f3be <MiApp_EstablishConnection+0xe6>
    f3b6:	4b17      	ldr	r3, [pc, #92]	; (f414 <MiApp_EstablishConnection+0x13c>)
    f3b8:	781b      	ldrb	r3, [r3, #0]
    f3ba:	2b00      	cmp	r3, #0
    f3bc:	d1ec      	bne.n	f398 <MiApp_EstablishConnection+0xc0>
                if( connectionInterval-- > 0 )
    f3be:	2c00      	cmp	r4, #0
    f3c0:	d0b4      	beq.n	f32c <MiApp_EstablishConnection+0x54>
    f3c2:	3c01      	subs	r4, #1
    f3c4:	b2e4      	uxtb	r4, r4
                t1.Val = t2.Val;
    f3c6:	9b08      	ldr	r3, [sp, #32]
    f3c8:	9307      	str	r3, [sp, #28]
    f3ca:	e7e9      	b.n	f3a0 <MiApp_EstablishConnection+0xc8>
                    P2PStatus.bits.SearchConnection = 0;
    f3cc:	4a0d      	ldr	r2, [pc, #52]	; (f404 <MiApp_EstablishConnection+0x12c>)
    f3ce:	7813      	ldrb	r3, [r2, #0]
    f3d0:	2110      	movs	r1, #16
    f3d2:	438b      	bics	r3, r1
    f3d4:	7013      	strb	r3, [r2, #0]
                    return 0xFF;
    f3d6:	24ff      	movs	r4, #255	; 0xff
    f3d8:	e004      	b.n	f3e4 <MiApp_EstablishConnection+0x10c>
        ConnMode = tmpConnectionMode;
    f3da:	4b06      	ldr	r3, [pc, #24]	; (f3f4 <MiApp_EstablishConnection+0x11c>)
    f3dc:	4642      	mov	r2, r8
    f3de:	701a      	strb	r2, [r3, #0]
        return LatestConnection;
    f3e0:	4b18      	ldr	r3, [pc, #96]	; (f444 <MiApp_EstablishConnection+0x16c>)
    f3e2:	781c      	ldrb	r4, [r3, #0]
    }
    f3e4:	0020      	movs	r0, r4
    f3e6:	b00a      	add	sp, #40	; 0x28
    f3e8:	bc1c      	pop	{r2, r3, r4}
    f3ea:	4690      	mov	r8, r2
    f3ec:	4699      	mov	r9, r3
    f3ee:	46a3      	mov	fp, r4
    f3f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f3f2:	46c0      	nop			; (mov r8, r8)
    f3f4:	2000001d 	.word	0x2000001d
    f3f8:	0000f6f1 	.word	0x0000f6f1
    f3fc:	20003770 	.word	0x20003770
    f400:	fff0bdc0 	.word	0xfff0bdc0
    f404:	200034d8 	.word	0x200034d8
    f408:	2000347c 	.word	0x2000347c
    f40c:	0000f751 	.word	0x0000f751
    f410:	0000dc25 	.word	0x0000dc25
    f414:	200007d4 	.word	0x200007d4
    f418:	0000f4b1 	.word	0x0000f4b1
    f41c:	2000001e 	.word	0x2000001e
    f420:	20003471 	.word	0x20003471
    f424:	20000018 	.word	0x20000018
    f428:	20003478 	.word	0x20003478
    f42c:	0000d321 	.word	0x0000d321
    f430:	0000d579 	.word	0x0000d579
    f434:	0000f56d 	.word	0x0000f56d
    f438:	0000e485 	.word	0x0000e485
    f43c:	00010f49 	.word	0x00010f49
    f440:	000f4240 	.word	0x000f4240
    f444:	20003314 	.word	0x20003314

0000f448 <CanTransmitData>:

bool CanTransmitData(void)
{
	if(role == END_DEVICE)
    f448:	4b07      	ldr	r3, [pc, #28]	; (f468 <CanTransmitData+0x20>)
    f44a:	781b      	ldrb	r3, [r3, #0]
	  if(SwAckReq || SendData)
	  {
		  return false;
	  }
	}
	return true;
    f44c:	2001      	movs	r0, #1
	if(role == END_DEVICE)
    f44e:	2b02      	cmp	r3, #2
    f450:	d000      	beq.n	f454 <CanTransmitData+0xc>
}
    f452:	4770      	bx	lr
	  if(SwAckReq || SendData)
    f454:	4b05      	ldr	r3, [pc, #20]	; (f46c <CanTransmitData+0x24>)
    f456:	781b      	ldrb	r3, [r3, #0]
		  return false;
    f458:	2000      	movs	r0, #0
	  if(SwAckReq || SendData)
    f45a:	2b00      	cmp	r3, #0
    f45c:	d1f9      	bne.n	f452 <CanTransmitData+0xa>
    f45e:	4b04      	ldr	r3, [pc, #16]	; (f470 <CanTransmitData+0x28>)
    f460:	7818      	ldrb	r0, [r3, #0]
    f462:	2301      	movs	r3, #1
    f464:	4058      	eors	r0, r3
    f466:	e7f4      	b.n	f452 <CanTransmitData+0xa>
    f468:	2000376c 	.word	0x2000376c
    f46c:	200007ce 	.word	0x200007ce
    f470:	200007cd 	.word	0x200007cd

0000f474 <MiMem_Init>:
* Output:		    none
*
* Overview:		    This function will initialize the Mimem buffers
********************************************************************/
void MiMem_Init(void)
{
    f474:	b510      	push	{r4, lr}
	size_t startAddress =  ALIGN((size_t)heapMem);
    f476:	4a0b      	ldr	r2, [pc, #44]	; (f4a4 <MiMem_Init+0x30>)
    f478:	1e50      	subs	r0, r2, #1
    f47a:	2403      	movs	r4, #3
    f47c:	43a0      	bics	r0, r4
    f47e:	1d01      	adds	r1, r0, #4

	/*Aligned heap is the base */
	base = (Block_t*) startAddress;
    f480:	4b09      	ldr	r3, [pc, #36]	; (f4a8 <MiMem_Init+0x34>)
    f482:	6019      	str	r1, [r3, #0]
	base->size = totalFreeBytesRemaining = HEAP_SIZE - (startAddress - (size_t)heapMem);
    f484:	4253      	negs	r3, r2
    f486:	43a3      	bics	r3, r4
    f488:	24c0      	movs	r4, #192	; 0xc0
    f48a:	0164      	lsls	r4, r4, #5
    f48c:	46a4      	mov	ip, r4
    f48e:	4462      	add	r2, ip
    f490:	189b      	adds	r3, r3, r2
    f492:	4a06      	ldr	r2, [pc, #24]	; (f4ac <MiMem_Init+0x38>)
    f494:	6013      	str	r3, [r2, #0]
    f496:	60c3      	str	r3, [r0, #12]
	base->free = true;
    f498:	2301      	movs	r3, #1
    f49a:	7403      	strb	r3, [r0, #16]
	base->next = NULL;
    f49c:	2300      	movs	r3, #0
    f49e:	6043      	str	r3, [r0, #4]
	base->prev = NULL;
    f4a0:	6083      	str	r3, [r0, #8]
}
    f4a2:	bd10      	pop	{r4, pc}
    f4a4:	200007ec 	.word	0x200007ec
    f4a8:	200007e8 	.word	0x200007e8
    f4ac:	20001fec 	.word	0x20001fec

0000f4b0 <MiMem_Alloc>:
*  or returns NULL if no memory available
*
* Note:			    none
********************************************************************/
void* MiMem_Alloc(uint8_t size)
{
    f4b0:	b570      	push	{r4, r5, r6, lr}
    f4b2:	0005      	movs	r5, r0
	size_t requestedSize = 0U;
	void* requestedMemPtr = NULL;

	/* Initialize the Heap */
	if (!base)
    f4b4:	4b29      	ldr	r3, [pc, #164]	; (f55c <MiMem_Alloc+0xac>)
    f4b6:	681b      	ldr	r3, [r3, #0]
    f4b8:	2b00      	cmp	r3, #0
    f4ba:	d012      	beq.n	f4e2 <MiMem_Alloc+0x32>
	{
		MiMem_Init();
	}
	/* if requested size is of non zero */
	if (size)
    f4bc:	2d00      	cmp	r5, #0
    f4be:	d047      	beq.n	f550 <MiMem_Alloc+0xa0>
	{
		requestedSize =  size + blockMetaDataSize;
		requestedSize = ALIGN(requestedSize);
    f4c0:	0029      	movs	r1, r5
    f4c2:	310f      	adds	r1, #15
    f4c4:	2303      	movs	r3, #3
    f4c6:	4399      	bics	r1, r3
    f4c8:	3104      	adds	r1, #4
		if (requestedSize <= totalFreeBytesRemaining)
    f4ca:	4b25      	ldr	r3, [pc, #148]	; (f560 <MiMem_Alloc+0xb0>)
    f4cc:	6818      	ldr	r0, [r3, #0]
    f4ce:	4281      	cmp	r1, r0
    f4d0:	d840      	bhi.n	f554 <MiMem_Alloc+0xa4>
		{
			size_t receivedSize = (size_t)~0U;
			Block_t *requestedBlock = NULL;
			Block_t *blockPtr = base;
    f4d2:	4b22      	ldr	r3, [pc, #136]	; (f55c <MiMem_Alloc+0xac>)
    f4d4:	681b      	ldr	r3, [r3, #0]

			/* Find best fit free Block */
			while (blockPtr)
    f4d6:	2b00      	cmp	r3, #0
    f4d8:	d03e      	beq.n	f558 <MiMem_Alloc+0xa8>
    f4da:	2600      	movs	r6, #0
    f4dc:	2401      	movs	r4, #1
    f4de:	4264      	negs	r4, r4
    f4e0:	e005      	b.n	f4ee <MiMem_Alloc+0x3e>
		MiMem_Init();
    f4e2:	4b20      	ldr	r3, [pc, #128]	; (f564 <MiMem_Alloc+0xb4>)
    f4e4:	4798      	blx	r3
    f4e6:	e7e9      	b.n	f4bc <MiMem_Alloc+0xc>
				if ((blockPtr->free) && (blockPtr->size >= requestedSize) && (blockPtr->size < receivedSize))
				{
					receivedSize = blockPtr->size;
					requestedBlock = blockPtr;
				}
				blockPtr = blockPtr->next;
    f4e8:	681b      	ldr	r3, [r3, #0]
			while (blockPtr)
    f4ea:	2b00      	cmp	r3, #0
    f4ec:	d00a      	beq.n	f504 <MiMem_Alloc+0x54>
				if ((blockPtr->free) && (blockPtr->size >= requestedSize) && (blockPtr->size < receivedSize))
    f4ee:	7b1a      	ldrb	r2, [r3, #12]
    f4f0:	2a00      	cmp	r2, #0
    f4f2:	d0f9      	beq.n	f4e8 <MiMem_Alloc+0x38>
    f4f4:	689a      	ldr	r2, [r3, #8]
    f4f6:	4291      	cmp	r1, r2
    f4f8:	d8f6      	bhi.n	f4e8 <MiMem_Alloc+0x38>
    f4fa:	42a2      	cmp	r2, r4
    f4fc:	d2f4      	bcs.n	f4e8 <MiMem_Alloc+0x38>
    f4fe:	001e      	movs	r6, r3
					receivedSize = blockPtr->size;
    f500:	0014      	movs	r4, r2
    f502:	e7f1      	b.n	f4e8 <MiMem_Alloc+0x38>
    f504:	2400      	movs	r4, #0
			}

			if (requestedBlock)
    f506:	2e00      	cmp	r6, #0
    f508:	d012      	beq.n	f530 <MiMem_Alloc+0x80>
			{
				if ((requestedBlock->size - requestedSize) > HEAP_MINIMUM_BLOCK_SIZE)
    f50a:	68b3      	ldr	r3, [r6, #8]
    f50c:	1a5b      	subs	r3, r3, r1
    f50e:	2b14      	cmp	r3, #20
    f510:	d810      	bhi.n	f534 <MiMem_Alloc+0x84>
				splitBlock (requestedBlock, requestedSize);
				requestedBlock->free = false;
    f512:	2300      	movs	r3, #0
    f514:	7333      	strb	r3, [r6, #12]
				totalFreeBytesRemaining -= requestedBlock->size;
    f516:	68b3      	ldr	r3, [r6, #8]
    f518:	1ac0      	subs	r0, r0, r3
    f51a:	4b11      	ldr	r3, [pc, #68]	; (f560 <MiMem_Alloc+0xb0>)
    f51c:	6018      	str	r0, [r3, #0]
				requestedMemPtr = ( void* )(((uint8_t*)requestedBlock) + blockMetaDataSize);
    f51e:	0034      	movs	r4, r6
    f520:	3410      	adds	r4, #16
			}
		}
	}
	if (NULL != requestedMemPtr)
    f522:	2c00      	cmp	r4, #0
    f524:	d004      	beq.n	f530 <MiMem_Alloc+0x80>
	{
		memset(requestedMemPtr, 0, size);
    f526:	002a      	movs	r2, r5
    f528:	2100      	movs	r1, #0
    f52a:	0020      	movs	r0, r4
    f52c:	4b0e      	ldr	r3, [pc, #56]	; (f568 <MiMem_Alloc+0xb8>)
    f52e:	4798      	blx	r3
	}
	return requestedMemPtr;
}
    f530:	0020      	movs	r0, r4
    f532:	bd70      	pop	{r4, r5, r6, pc}
  \param[in] size size of the memory chunk requested
  \return None.
 ******************************************************************************/
static void splitBlock(Block_t* blockTobeSplitted, size_t size)
{
	uint8_t* ptr = (uint8_t*)blockTobeSplitted + size;
    f534:	1872      	adds	r2, r6, r1
	Block_t* newBlock = (Block_t*)ptr;

	newBlock->size = blockTobeSplitted->size - size;
    f536:	6093      	str	r3, [r2, #8]

	if (blockTobeSplitted->next)
    f538:	6833      	ldr	r3, [r6, #0]
    f53a:	2b00      	cmp	r3, #0
    f53c:	d000      	beq.n	f540 <MiMem_Alloc+0x90>
		blockTobeSplitted->next->prev = newBlock;
    f53e:	605a      	str	r2, [r3, #4]

	newBlock->next = blockTobeSplitted->next;
    f540:	6833      	ldr	r3, [r6, #0]
    f542:	6013      	str	r3, [r2, #0]
	newBlock->prev = blockTobeSplitted;
    f544:	6056      	str	r6, [r2, #4]
	newBlock->free = true;
    f546:	2301      	movs	r3, #1
    f548:	7313      	strb	r3, [r2, #12]

	blockTobeSplitted->next = newBlock;
    f54a:	6032      	str	r2, [r6, #0]
	blockTobeSplitted->size = size;
    f54c:	60b1      	str	r1, [r6, #8]
    f54e:	e7e0      	b.n	f512 <MiMem_Alloc+0x62>
    f550:	2400      	movs	r4, #0
    f552:	e7ed      	b.n	f530 <MiMem_Alloc+0x80>
    f554:	2400      	movs	r4, #0
    f556:	e7eb      	b.n	f530 <MiMem_Alloc+0x80>
			while (blockPtr)
    f558:	2400      	movs	r4, #0
    f55a:	e7e9      	b.n	f530 <MiMem_Alloc+0x80>
    f55c:	200007e8 	.word	0x200007e8
    f560:	20001fec 	.word	0x20001fec
    f564:	0000f475 	.word	0x0000f475
    f568:	0001836d 	.word	0x0001836d

0000f56c <MiMem_Free>:
	Block_t* blockPtr = base;
    f56c:	4b1c      	ldr	r3, [pc, #112]	; (f5e0 <MiMem_Free+0x74>)
    f56e:	681b      	ldr	r3, [r3, #0]
	Block_t* freeBlockPtr = (Block_t*)((uint8_t*)ptr - (uint8_t*)blockMetaDataSize);
    f570:	3810      	subs	r0, #16
	for(; ((blockPtr != NULL) && (blockPtr != freeBlockPtr)); blockPtr = blockPtr->next);
    f572:	2b00      	cmp	r3, #0
    f574:	d030      	beq.n	f5d8 <MiMem_Free+0x6c>
    f576:	4283      	cmp	r3, r0
    f578:	d02f      	beq.n	f5da <MiMem_Free+0x6e>
    f57a:	681b      	ldr	r3, [r3, #0]
    f57c:	2b00      	cmp	r3, #0
    f57e:	d02b      	beq.n	f5d8 <MiMem_Free+0x6c>
    f580:	4298      	cmp	r0, r3
    f582:	d1fa      	bne.n	f57a <MiMem_Free+0xe>
		blockPtr->free = true;
    f584:	2301      	movs	r3, #1
    f586:	7303      	strb	r3, [r0, #12]
		totalFreeBytesRemaining += blockPtr->size;
    f588:	6881      	ldr	r1, [r0, #8]
    f58a:	4a16      	ldr	r2, [pc, #88]	; (f5e4 <MiMem_Free+0x78>)
    f58c:	6813      	ldr	r3, [r2, #0]
    f58e:	185b      	adds	r3, r3, r1
    f590:	6013      	str	r3, [r2, #0]
		if (blockPtr->prev && blockPtr->prev->free)
    f592:	6843      	ldr	r3, [r0, #4]
    f594:	2b00      	cmp	r3, #0
    f596:	d00f      	beq.n	f5b8 <MiMem_Free+0x4c>
    f598:	7b1a      	ldrb	r2, [r3, #12]
    f59a:	2a00      	cmp	r2, #0
    f59c:	d00c      	beq.n	f5b8 <MiMem_Free+0x4c>
			blockPtr->prev->size += blockPtr->size;
    f59e:	689a      	ldr	r2, [r3, #8]
    f5a0:	4694      	mov	ip, r2
    f5a2:	4461      	add	r1, ip
    f5a4:	6099      	str	r1, [r3, #8]
			if (blockPtr->next)
    f5a6:	6803      	ldr	r3, [r0, #0]
    f5a8:	2b00      	cmp	r3, #0
    f5aa:	d001      	beq.n	f5b0 <MiMem_Free+0x44>
			blockPtr->next->prev = blockPtr->prev;
    f5ac:	6842      	ldr	r2, [r0, #4]
    f5ae:	605a      	str	r2, [r3, #4]
			blockPtr->prev->next = blockPtr->next;
    f5b0:	6843      	ldr	r3, [r0, #4]
    f5b2:	6802      	ldr	r2, [r0, #0]
    f5b4:	601a      	str	r2, [r3, #0]
			blockPtr = blockPtr->prev;
    f5b6:	6840      	ldr	r0, [r0, #4]
		if (blockPtr->next && blockPtr->next->free)
    f5b8:	6803      	ldr	r3, [r0, #0]
    f5ba:	2b00      	cmp	r3, #0
    f5bc:	d00c      	beq.n	f5d8 <MiMem_Free+0x6c>
    f5be:	7b1a      	ldrb	r2, [r3, #12]
    f5c0:	2a00      	cmp	r2, #0
    f5c2:	d009      	beq.n	f5d8 <MiMem_Free+0x6c>
			blockPtr->size += blockPtr->next->size ;
    f5c4:	6882      	ldr	r2, [r0, #8]
    f5c6:	6899      	ldr	r1, [r3, #8]
    f5c8:	468c      	mov	ip, r1
    f5ca:	4462      	add	r2, ip
    f5cc:	6082      	str	r2, [r0, #8]
			blockPtr->next = blockPtr->next->next;
    f5ce:	681b      	ldr	r3, [r3, #0]
    f5d0:	6003      	str	r3, [r0, #0]
			if (blockPtr->next)
    f5d2:	2b00      	cmp	r3, #0
    f5d4:	d000      	beq.n	f5d8 <MiMem_Free+0x6c>
			blockPtr->next->prev = blockPtr;
    f5d6:	6058      	str	r0, [r3, #4]
}
    f5d8:	4770      	bx	lr
	Block_t* blockPtr = base;
    f5da:	0018      	movs	r0, r3
    f5dc:	e7d2      	b.n	f584 <MiMem_Free+0x18>
    f5de:	46c0      	nop			; (mov r8, r8)
    f5e0:	200007e8 	.word	0x200007e8
    f5e4:	20001fec 	.word	0x20001fec

0000f5e8 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    f5e8:	b530      	push	{r4, r5, lr}
	if (timers) {
    f5ea:	4b14      	ldr	r3, [pc, #80]	; (f63c <placeTimer+0x54>)
    f5ec:	681d      	ldr	r5, [r3, #0]
    f5ee:	2d00      	cmp	r5, #0
    f5f0:	d01c      	beq.n	f62c <placeTimer+0x44>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    f5f2:	6882      	ldr	r2, [r0, #8]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    f5f4:	6869      	ldr	r1, [r5, #4]
    f5f6:	428a      	cmp	r2, r1
    f5f8:	d309      	bcc.n	f60e <placeTimer+0x26>
    f5fa:	002c      	movs	r4, r5
				t->timeout -= timeout;
				break;
			} else {
				timeout -= t->timeout;
    f5fc:	1a52      	subs	r2, r2, r1
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    f5fe:	6823      	ldr	r3, [r4, #0]
    f600:	2b00      	cmp	r3, #0
    f602:	d008      	beq.n	f616 <placeTimer+0x2e>
			if (timeout < t->timeout) {
    f604:	6859      	ldr	r1, [r3, #4]
    f606:	4291      	cmp	r1, r2
    f608:	d803      	bhi.n	f612 <placeTimer+0x2a>
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    f60a:	001c      	movs	r4, r3
    f60c:	e7f6      	b.n	f5fc <placeTimer+0x14>
    f60e:	002b      	movs	r3, r5
		SYS_Timer_t *prev = NULL;
    f610:	2400      	movs	r4, #0
				t->timeout -= timeout;
    f612:	1a89      	subs	r1, r1, r2
    f614:	6059      	str	r1, [r3, #4]
			}

			prev = t;
		}

		timer->timeout = timeout;
    f616:	6042      	str	r2, [r0, #4]

		if (prev) {
    f618:	2c00      	cmp	r4, #0
    f61a:	d003      	beq.n	f624 <placeTimer+0x3c>
			timer->next = prev->next;
    f61c:	6823      	ldr	r3, [r4, #0]
    f61e:	6003      	str	r3, [r0, #0]
			prev->next = timer;
    f620:	6020      	str	r0, [r4, #0]
	} else {
		timer->next = NULL;
		timer->timeout = timer->interval;
		timers = timer;
	}
}
    f622:	bd30      	pop	{r4, r5, pc}
			timer->next = timers;
    f624:	6005      	str	r5, [r0, #0]
			timers = timer;
    f626:	4b05      	ldr	r3, [pc, #20]	; (f63c <placeTimer+0x54>)
    f628:	6018      	str	r0, [r3, #0]
    f62a:	e7fa      	b.n	f622 <placeTimer+0x3a>
		timer->next = NULL;
    f62c:	2300      	movs	r3, #0
    f62e:	6003      	str	r3, [r0, #0]
		timer->timeout = timer->interval;
    f630:	6883      	ldr	r3, [r0, #8]
    f632:	6043      	str	r3, [r0, #4]
		timers = timer;
    f634:	4b01      	ldr	r3, [pc, #4]	; (f63c <placeTimer+0x54>)
    f636:	6018      	str	r0, [r3, #0]
}
    f638:	e7f3      	b.n	f622 <placeTimer+0x3a>
    f63a:	46c0      	nop			; (mov r8, r8)
    f63c:	20001ff0 	.word	0x20001ff0

0000f640 <SYS_HwOverflow_Cb>:
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
}

void SYS_HwOverflow_Cb(void)
{
	timerExtension1++;
    f640:	4a06      	ldr	r2, [pc, #24]	; (f65c <SYS_HwOverflow_Cb+0x1c>)
    f642:	7813      	ldrb	r3, [r2, #0]
    f644:	3301      	adds	r3, #1
    f646:	b2db      	uxtb	r3, r3
    f648:	7013      	strb	r3, [r2, #0]
	if(timerExtension1 == 0)
    f64a:	7813      	ldrb	r3, [r2, #0]
    f64c:	2b00      	cmp	r3, #0
    f64e:	d104      	bne.n	f65a <SYS_HwOverflow_Cb+0x1a>
	{
		timerExtension2++;
    f650:	4a03      	ldr	r2, [pc, #12]	; (f660 <SYS_HwOverflow_Cb+0x20>)
    f652:	7813      	ldrb	r3, [r2, #0]
    f654:	3301      	adds	r3, #1
    f656:	b2db      	uxtb	r3, r3
    f658:	7013      	strb	r3, [r2, #0]
	}
}
    f65a:	4770      	bx	lr
    f65c:	20003798 	.word	0x20003798
    f660:	20003799 	.word	0x20003799

0000f664 <SYS_TimerStop>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    f664:	4b0e      	ldr	r3, [pc, #56]	; (f6a0 <SYS_TimerStop+0x3c>)
    f666:	681a      	ldr	r2, [r3, #0]
    f668:	2a00      	cmp	r2, #0
    f66a:	d014      	beq.n	f696 <SYS_TimerStop+0x32>
		if (t == timer) {
    f66c:	4282      	cmp	r2, r0
    f66e:	d013      	beq.n	f698 <SYS_TimerStop+0x34>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    f670:	6813      	ldr	r3, [r2, #0]
    f672:	2b00      	cmp	r3, #0
    f674:	d00f      	beq.n	f696 <SYS_TimerStop+0x32>
		if (t == timer) {
    f676:	4298      	cmp	r0, r3
    f678:	d001      	beq.n	f67e <SYS_TimerStop+0x1a>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    f67a:	001a      	movs	r2, r3
    f67c:	e7f8      	b.n	f670 <SYS_TimerStop+0xc>
			if (prev) {
    f67e:	2a00      	cmp	r2, #0
    f680:	d00a      	beq.n	f698 <SYS_TimerStop+0x34>
				prev->next = t->next;
    f682:	6803      	ldr	r3, [r0, #0]
    f684:	6013      	str	r3, [r2, #0]
			if (t->next) {
    f686:	6803      	ldr	r3, [r0, #0]
    f688:	2b00      	cmp	r3, #0
    f68a:	d004      	beq.n	f696 <SYS_TimerStop+0x32>
				t->next->timeout += timer->timeout;
    f68c:	6842      	ldr	r2, [r0, #4]
    f68e:	6859      	ldr	r1, [r3, #4]
    f690:	468c      	mov	ip, r1
    f692:	4462      	add	r2, ip
    f694:	605a      	str	r2, [r3, #4]
}
    f696:	4770      	bx	lr
				timers = t->next;
    f698:	4b01      	ldr	r3, [pc, #4]	; (f6a0 <SYS_TimerStop+0x3c>)
    f69a:	6802      	ldr	r2, [r0, #0]
    f69c:	601a      	str	r2, [r3, #0]
    f69e:	e7f2      	b.n	f686 <SYS_TimerStop+0x22>
    f6a0:	20001ff0 	.word	0x20001ff0

0000f6a4 <SYS_TimerStarted>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    f6a4:	4b09      	ldr	r3, [pc, #36]	; (f6cc <SYS_TimerStarted+0x28>)
    f6a6:	681b      	ldr	r3, [r3, #0]
    f6a8:	2b00      	cmp	r3, #0
    f6aa:	d00a      	beq.n	f6c2 <SYS_TimerStarted+0x1e>
		if (t == timer) {
    f6ac:	4283      	cmp	r3, r0
    f6ae:	d00a      	beq.n	f6c6 <SYS_TimerStarted+0x22>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    f6b0:	681b      	ldr	r3, [r3, #0]
    f6b2:	2b00      	cmp	r3, #0
    f6b4:	d003      	beq.n	f6be <SYS_TimerStarted+0x1a>
		if (t == timer) {
    f6b6:	4298      	cmp	r0, r3
    f6b8:	d1fa      	bne.n	f6b0 <SYS_TimerStarted+0xc>
			return true;
    f6ba:	2001      	movs	r0, #1
    f6bc:	e000      	b.n	f6c0 <SYS_TimerStarted+0x1c>
	return false;
    f6be:	2000      	movs	r0, #0
}
    f6c0:	4770      	bx	lr
	return false;
    f6c2:	2000      	movs	r0, #0
    f6c4:	e7fc      	b.n	f6c0 <SYS_TimerStarted+0x1c>
			return true;
    f6c6:	2001      	movs	r0, #1
    f6c8:	e7fa      	b.n	f6c0 <SYS_TimerStarted+0x1c>
    f6ca:	46c0      	nop			; (mov r8, r8)
    f6cc:	20001ff0 	.word	0x20001ff0

0000f6d0 <SYS_TimerStart>:
{
    f6d0:	b510      	push	{r4, lr}
    f6d2:	0004      	movs	r4, r0
	if (!SYS_TimerStarted(timer)) {
    f6d4:	4b04      	ldr	r3, [pc, #16]	; (f6e8 <SYS_TimerStart+0x18>)
    f6d6:	4798      	blx	r3
    f6d8:	2800      	cmp	r0, #0
    f6da:	d000      	beq.n	f6de <SYS_TimerStart+0xe>
}
    f6dc:	bd10      	pop	{r4, pc}
		placeTimer(timer);
    f6de:	0020      	movs	r0, r4
    f6e0:	4b02      	ldr	r3, [pc, #8]	; (f6ec <SYS_TimerStart+0x1c>)
    f6e2:	4798      	blx	r3
}
    f6e4:	e7fa      	b.n	f6dc <SYS_TimerStart+0xc>
    f6e6:	46c0      	nop			; (mov r8, r8)
    f6e8:	0000f6a5 	.word	0x0000f6a5
    f6ec:	0000f5e9 	.word	0x0000f5e9

0000f6f0 <MiWi_TickGet>:
{
    f6f0:	b570      	push	{r4, r5, r6, lr}
	uint8_t current_timerExtension1 = timerExtension1;
    f6f2:	4e11      	ldr	r6, [pc, #68]	; (f738 <MiWi_TickGet+0x48>)
    f6f4:	7835      	ldrb	r5, [r6, #0]
    f6f6:	b2ed      	uxtb	r5, r5
	tmr_disable_ovf_interrupt();
    f6f8:	4b10      	ldr	r3, [pc, #64]	; (f73c <MiWi_TickGet+0x4c>)
    f6fa:	4798      	blx	r3
	currentTime.word.w0 = common_tc_read_count();
    f6fc:	4b10      	ldr	r3, [pc, #64]	; (f740 <MiWi_TickGet+0x50>)
    f6fe:	4798      	blx	r3
    f700:	0004      	movs	r4, r0
	tmr_enable_ovf_interrupt();
    f702:	4b10      	ldr	r3, [pc, #64]	; (f744 <MiWi_TickGet+0x54>)
    f704:	4798      	blx	r3
  __ASM volatile ("nop");
    f706:	46c0      	nop			; (mov r8, r8)
	if (current_timerExtension1 != timerExtension1)
    f708:	7833      	ldrb	r3, [r6, #0]
    f70a:	b2db      	uxtb	r3, r3
    f70c:	429d      	cmp	r5, r3
    f70e:	d004      	beq.n	f71a <MiWi_TickGet+0x2a>
		currentTime.word.w0 = common_tc_read_count();
    f710:	4b0b      	ldr	r3, [pc, #44]	; (f740 <MiWi_TickGet+0x50>)
    f712:	4798      	blx	r3
    f714:	0c24      	lsrs	r4, r4, #16
    f716:	0424      	lsls	r4, r4, #16
    f718:	4304      	orrs	r4, r0
    currentTime.byte.b2 = timerExtension1;
    f71a:	4b07      	ldr	r3, [pc, #28]	; (f738 <MiWi_TickGet+0x48>)
    f71c:	781b      	ldrb	r3, [r3, #0]
    f71e:	041b      	lsls	r3, r3, #16
    f720:	4809      	ldr	r0, [pc, #36]	; (f748 <MiWi_TickGet+0x58>)
    f722:	4004      	ands	r4, r0
    f724:	431c      	orrs	r4, r3
    currentTime.byte.b3 = timerExtension2;
    f726:	4b09      	ldr	r3, [pc, #36]	; (f74c <MiWi_TickGet+0x5c>)
    f728:	781b      	ldrb	r3, [r3, #0]
    f72a:	061b      	lsls	r3, r3, #24
    f72c:	0224      	lsls	r4, r4, #8
    f72e:	0a24      	lsrs	r4, r4, #8
    f730:	431c      	orrs	r4, r3
}
    f732:	0020      	movs	r0, r4
    f734:	bd70      	pop	{r4, r5, r6, pc}
    f736:	46c0      	nop			; (mov r8, r8)
    f738:	20003798 	.word	0x20003798
    f73c:	0001128d 	.word	0x0001128d
    f740:	00014f41 	.word	0x00014f41
    f744:	000112a1 	.word	0x000112a1
    f748:	ff00ffff 	.word	0xff00ffff
    f74c:	20003799 	.word	0x20003799

0000f750 <MiWi_TickGetDiff>:
	if (current_tick.Val > previous_tick.Val)
    f750:	4288      	cmp	r0, r1
    f752:	d802      	bhi.n	f75a <MiWi_TickGetDiff+0xa>
		ret_val = (0xFFFFFFFF - previous_tick.Val) + current_tick.Val;
    f754:	3801      	subs	r0, #1
    f756:	1a40      	subs	r0, r0, r1
}
    f758:	4770      	bx	lr
		ret_val = current_tick.Val - previous_tick.Val;
    f75a:	1a40      	subs	r0, r0, r1
    f75c:	e7fc      	b.n	f758 <MiWi_TickGetDiff+0x8>
    f75e:	Address 0x0000f75e is out of bounds.


0000f760 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    f760:	b570      	push	{r4, r5, r6, lr}
    f762:	b082      	sub	sp, #8
    f764:	0005      	movs	r5, r0
    f766:	000e      	movs	r6, r1
	uint16_t temp = 0;
    f768:	2200      	movs	r2, #0
    f76a:	466b      	mov	r3, sp
    f76c:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    f76e:	4c06      	ldr	r4, [pc, #24]	; (f788 <usart_serial_getchar+0x28>)
    f770:	466b      	mov	r3, sp
    f772:	1d99      	adds	r1, r3, #6
    f774:	0028      	movs	r0, r5
    f776:	47a0      	blx	r4
    f778:	2800      	cmp	r0, #0
    f77a:	d1f9      	bne.n	f770 <usart_serial_getchar+0x10>

	*c = temp;
    f77c:	466b      	mov	r3, sp
    f77e:	3306      	adds	r3, #6
    f780:	881b      	ldrh	r3, [r3, #0]
    f782:	7033      	strb	r3, [r6, #0]
}
    f784:	b002      	add	sp, #8
    f786:	bd70      	pop	{r4, r5, r6, pc}
    f788:	00006721 	.word	0x00006721

0000f78c <usart_serial_putchar>:
{
    f78c:	b570      	push	{r4, r5, r6, lr}
    f78e:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    f790:	b28c      	uxth	r4, r1
    f792:	4e03      	ldr	r6, [pc, #12]	; (f7a0 <usart_serial_putchar+0x14>)
    f794:	0021      	movs	r1, r4
    f796:	0028      	movs	r0, r5
    f798:	47b0      	blx	r6
    f79a:	2800      	cmp	r0, #0
    f79c:	d1fa      	bne.n	f794 <usart_serial_putchar+0x8>
}
    f79e:	bd70      	pop	{r4, r5, r6, pc}
    f7a0:	000066f5 	.word	0x000066f5

0000f7a4 <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35 || WLR089
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    f7a4:	b510      	push	{r4, lr}
    f7a6:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
    f7a8:	466b      	mov	r3, sp
    f7aa:	1ddc      	adds	r4, r3, #7
    f7ac:	2201      	movs	r2, #1
    f7ae:	0021      	movs	r1, r4
    f7b0:	480f      	ldr	r0, [pc, #60]	; (f7f0 <USART_HOST_ISR_VECT+0x4c>)
    f7b2:	4b10      	ldr	r3, [pc, #64]	; (f7f4 <USART_HOST_ISR_VECT+0x50>)
    f7b4:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    f7b6:	b672      	cpsid	i
  __ASM volatile ("dmb");
    f7b8:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    f7bc:	2200      	movs	r2, #0
    f7be:	4b0e      	ldr	r3, [pc, #56]	; (f7f8 <USART_HOST_ISR_VECT+0x54>)
    f7c0:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
    f7c2:	4b0e      	ldr	r3, [pc, #56]	; (f7fc <USART_HOST_ISR_VECT+0x58>)
    f7c4:	781b      	ldrb	r3, [r3, #0]
    f7c6:	7821      	ldrb	r1, [r4, #0]
    f7c8:	4a0d      	ldr	r2, [pc, #52]	; (f800 <USART_HOST_ISR_VECT+0x5c>)
    f7ca:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    f7cc:	2b7f      	cmp	r3, #127	; 0x7f
    f7ce:	d00a      	beq.n	f7e6 <USART_HOST_ISR_VECT+0x42>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
    f7d0:	3301      	adds	r3, #1
    f7d2:	4a0a      	ldr	r2, [pc, #40]	; (f7fc <USART_HOST_ISR_VECT+0x58>)
    f7d4:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
    f7d6:	2201      	movs	r2, #1
    f7d8:	4b07      	ldr	r3, [pc, #28]	; (f7f8 <USART_HOST_ISR_VECT+0x54>)
    f7da:	701a      	strb	r2, [r3, #0]
    f7dc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    f7e0:	b662      	cpsie	i
}
    f7e2:	b002      	add	sp, #8
    f7e4:	bd10      	pop	{r4, pc}
		serial_rx_buf_tail = 0x00;
    f7e6:	2200      	movs	r2, #0
    f7e8:	4b04      	ldr	r3, [pc, #16]	; (f7fc <USART_HOST_ISR_VECT+0x58>)
    f7ea:	701a      	strb	r2, [r3, #0]
    f7ec:	e7f3      	b.n	f7d6 <USART_HOST_ISR_VECT+0x32>
    f7ee:	46c0      	nop			; (mov r8, r8)
    f7f0:	20001ff4 	.word	0x20001ff4
    f7f4:	00006851 	.word	0x00006851
    f7f8:	20000014 	.word	0x20000014
    f7fc:	200020a9 	.word	0x200020a9
    f800:	20002028 	.word	0x20002028

0000f804 <sio2host_init>:
{
    f804:	b5f0      	push	{r4, r5, r6, r7, lr}
    f806:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    f808:	2380      	movs	r3, #128	; 0x80
    f80a:	05db      	lsls	r3, r3, #23
    f80c:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    f80e:	2300      	movs	r3, #0
    f810:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    f812:	22ff      	movs	r2, #255	; 0xff
    f814:	4669      	mov	r1, sp
    f816:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    f818:	2200      	movs	r2, #0
    f81a:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    f81c:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    f81e:	2401      	movs	r4, #1
    f820:	2124      	movs	r1, #36	; 0x24
    f822:	4668      	mov	r0, sp
    f824:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    f826:	3101      	adds	r1, #1
    f828:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    f82a:	3101      	adds	r1, #1
    f82c:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    f82e:	3101      	adds	r1, #1
    f830:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    f832:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    f834:	3105      	adds	r1, #5
    f836:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    f838:	3101      	adds	r1, #1
    f83a:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    f83c:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    f83e:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    f840:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    f842:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    f844:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    f846:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    f848:	2313      	movs	r3, #19
    f84a:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    f84c:	7742      	strb	r2, [r0, #29]
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
    f84e:	2380      	movs	r3, #128	; 0x80
    f850:	035b      	lsls	r3, r3, #13
    f852:	9303      	str	r3, [sp, #12]
	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    f854:	4b2f      	ldr	r3, [pc, #188]	; (f914 <sio2host_init+0x110>)
    f856:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    f858:	4b2f      	ldr	r3, [pc, #188]	; (f918 <sio2host_init+0x114>)
    f85a:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    f85c:	2301      	movs	r3, #1
    f85e:	425b      	negs	r3, r3
    f860:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    f862:	930f      	str	r3, [sp, #60]	; 0x3c
	host_uart_config.baudrate    = USART_HOST_BAUDRATE;
    f864:	23e1      	movs	r3, #225	; 0xe1
    f866:	025b      	lsls	r3, r3, #9
    f868:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    f86a:	4d2c      	ldr	r5, [pc, #176]	; (f91c <sio2host_init+0x118>)
    f86c:	4b2c      	ldr	r3, [pc, #176]	; (f920 <sio2host_init+0x11c>)
    f86e:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    f870:	4a2c      	ldr	r2, [pc, #176]	; (f924 <sio2host_init+0x120>)
    f872:	4b2d      	ldr	r3, [pc, #180]	; (f928 <sio2host_init+0x124>)
    f874:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    f876:	4a2d      	ldr	r2, [pc, #180]	; (f92c <sio2host_init+0x128>)
    f878:	4b2d      	ldr	r3, [pc, #180]	; (f930 <sio2host_init+0x12c>)
    f87a:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    f87c:	466a      	mov	r2, sp
    f87e:	2184      	movs	r1, #132	; 0x84
    f880:	05c9      	lsls	r1, r1, #23
    f882:	0028      	movs	r0, r5
    f884:	4b2b      	ldr	r3, [pc, #172]	; (f934 <sio2host_init+0x130>)
    f886:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    f888:	4f2b      	ldr	r7, [pc, #172]	; (f938 <sio2host_init+0x134>)
    f88a:	683b      	ldr	r3, [r7, #0]
    f88c:	6898      	ldr	r0, [r3, #8]
    f88e:	2100      	movs	r1, #0
    f890:	4e2a      	ldr	r6, [pc, #168]	; (f93c <sio2host_init+0x138>)
    f892:	47b0      	blx	r6
	setbuf(stdin, NULL);
    f894:	683b      	ldr	r3, [r7, #0]
    f896:	6858      	ldr	r0, [r3, #4]
    f898:	2100      	movs	r1, #0
    f89a:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    f89c:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    f89e:	0030      	movs	r0, r6
    f8a0:	4b27      	ldr	r3, [pc, #156]	; (f940 <sio2host_init+0x13c>)
    f8a2:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    f8a4:	231f      	movs	r3, #31
    f8a6:	4018      	ands	r0, r3
    f8a8:	4084      	lsls	r4, r0
    f8aa:	4b26      	ldr	r3, [pc, #152]	; (f944 <sio2host_init+0x140>)
    f8ac:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    f8ae:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    f8b0:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    f8b2:	2b00      	cmp	r3, #0
    f8b4:	d1fc      	bne.n	f8b0 <sio2host_init+0xac>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    f8b6:	6833      	ldr	r3, [r6, #0]
    f8b8:	2202      	movs	r2, #2
    f8ba:	4313      	orrs	r3, r2
    f8bc:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    f8be:	4b17      	ldr	r3, [pc, #92]	; (f91c <sio2host_init+0x118>)
    f8c0:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    f8c2:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    f8c4:	2a00      	cmp	r2, #0
    f8c6:	d1fc      	bne.n	f8c2 <sio2host_init+0xbe>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    f8c8:	6859      	ldr	r1, [r3, #4]
    f8ca:	2280      	movs	r2, #128	; 0x80
    f8cc:	0252      	lsls	r2, r2, #9
    f8ce:	430a      	orrs	r2, r1
    f8d0:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    f8d2:	2101      	movs	r1, #1
    f8d4:	4a11      	ldr	r2, [pc, #68]	; (f91c <sio2host_init+0x118>)
    f8d6:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    f8d8:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    f8da:	2a00      	cmp	r2, #0
    f8dc:	d1fc      	bne.n	f8d8 <sio2host_init+0xd4>
	return (usart_hw->SYNCBUSY.reg);
    f8de:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    f8e0:	2a00      	cmp	r2, #0
    f8e2:	d1fc      	bne.n	f8de <sio2host_init+0xda>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    f8e4:	6859      	ldr	r1, [r3, #4]
    f8e6:	2280      	movs	r2, #128	; 0x80
    f8e8:	0292      	lsls	r2, r2, #10
    f8ea:	430a      	orrs	r2, r1
    f8ec:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    f8ee:	2101      	movs	r1, #1
    f8f0:	4a0a      	ldr	r2, [pc, #40]	; (f91c <sio2host_init+0x118>)
    f8f2:	7191      	strb	r1, [r2, #6]
	return (usart_hw->SYNCBUSY.reg);
    f8f4:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    f8f6:	2a00      	cmp	r2, #0
    f8f8:	d1fc      	bne.n	f8f4 <sio2host_init+0xf0>
	USART_HOST_RX_ISR_ENABLE();
    f8fa:	4913      	ldr	r1, [pc, #76]	; (f948 <sio2host_init+0x144>)
    f8fc:	2000      	movs	r0, #0
    f8fe:	4b13      	ldr	r3, [pc, #76]	; (f94c <sio2host_init+0x148>)
    f900:	4798      	blx	r3
    f902:	2204      	movs	r2, #4
    f904:	2384      	movs	r3, #132	; 0x84
    f906:	05db      	lsls	r3, r3, #23
    f908:	759a      	strb	r2, [r3, #22]
    f90a:	32fc      	adds	r2, #252	; 0xfc
    f90c:	4b0d      	ldr	r3, [pc, #52]	; (f944 <sio2host_init+0x140>)
    f90e:	601a      	str	r2, [r3, #0]
}
    f910:	b011      	add	sp, #68	; 0x44
    f912:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f914:	00040003 	.word	0x00040003
    f918:	00050003 	.word	0x00050003
    f91c:	20001ff4 	.word	0x20001ff4
    f920:	20002490 	.word	0x20002490
    f924:	0000f78d 	.word	0x0000f78d
    f928:	2000248c 	.word	0x2000248c
    f92c:	0000f761 	.word	0x0000f761
    f930:	20002488 	.word	0x20002488
    f934:	00006389 	.word	0x00006389
    f938:	2000002c 	.word	0x2000002c
    f93c:	00018b19 	.word	0x00018b19
    f940:	00005cb5 	.word	0x00005cb5
    f944:	e000e100 	.word	0xe000e100
    f948:	0000f7a5 	.word	0x0000f7a5
    f94c:	00005c79 	.word	0x00005c79

0000f950 <sio2host_tx>:
{
    f950:	b5f0      	push	{r4, r5, r6, r7, lr}
    f952:	b083      	sub	sp, #12
    f954:	0006      	movs	r6, r0
    f956:	9101      	str	r1, [sp, #4]
	return usart_write_buffer_wait(module, tx_data, length);
    f958:	466b      	mov	r3, sp
    f95a:	889d      	ldrh	r5, [r3, #4]
    f95c:	4c05      	ldr	r4, [pc, #20]	; (f974 <sio2host_tx+0x24>)
    f95e:	4f06      	ldr	r7, [pc, #24]	; (f978 <sio2host_tx+0x28>)
    f960:	002a      	movs	r2, r5
    f962:	0031      	movs	r1, r6
    f964:	0020      	movs	r0, r4
    f966:	47b8      	blx	r7
	} while (status != STATUS_OK);
    f968:	2800      	cmp	r0, #0
    f96a:	d1f9      	bne.n	f960 <sio2host_tx+0x10>
}
    f96c:	9801      	ldr	r0, [sp, #4]
    f96e:	b003      	add	sp, #12
    f970:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f972:	46c0      	nop			; (mov r8, r8)
    f974:	20001ff4 	.word	0x20001ff4
    f978:	00006791 	.word	0x00006791

0000f97c <sio2host_rx>:
{
    f97c:	b570      	push	{r4, r5, r6, lr}
    f97e:	0002      	movs	r2, r0
	if(serial_rx_buf_tail >= serial_rx_buf_head)
    f980:	4b1f      	ldr	r3, [pc, #124]	; (fa00 <sio2host_rx+0x84>)
    f982:	781c      	ldrb	r4, [r3, #0]
    f984:	4b1f      	ldr	r3, [pc, #124]	; (fa04 <sio2host_rx+0x88>)
    f986:	781b      	ldrb	r3, [r3, #0]
    f988:	429c      	cmp	r4, r3
    f98a:	d319      	bcc.n	f9c0 <sio2host_rx+0x44>
		serial_rx_count = serial_rx_buf_tail - serial_rx_buf_head;
    f98c:	1ae3      	subs	r3, r4, r3
    f98e:	481e      	ldr	r0, [pc, #120]	; (fa08 <sio2host_rx+0x8c>)
    f990:	7003      	strb	r3, [r0, #0]
	if (0 == serial_rx_count) {
    f992:	4b1d      	ldr	r3, [pc, #116]	; (fa08 <sio2host_rx+0x8c>)
    f994:	7818      	ldrb	r0, [r3, #0]
    f996:	2800      	cmp	r0, #0
    f998:	d031      	beq.n	f9fe <sio2host_rx+0x82>
	if (SERIAL_RX_BUF_SIZE_HOST <= serial_rx_count) {
    f99a:	b243      	sxtb	r3, r0
    f99c:	2b00      	cmp	r3, #0
    f99e:	db15      	blt.n	f9cc <sio2host_rx+0x50>
    f9a0:	1c03      	adds	r3, r0, #0
    f9a2:	4288      	cmp	r0, r1
    f9a4:	d900      	bls.n	f9a8 <sio2host_rx+0x2c>
    f9a6:	1c0b      	adds	r3, r1, #0
    f9a8:	b2d8      	uxtb	r0, r3
	while (max_length > 0) {
    f9aa:	2800      	cmp	r0, #0
    f9ac:	d027      	beq.n	f9fe <sio2host_rx+0x82>
    f9ae:	4b15      	ldr	r3, [pc, #84]	; (fa04 <sio2host_rx+0x88>)
    f9b0:	781b      	ldrb	r3, [r3, #0]
    f9b2:	1e44      	subs	r4, r0, #1
    f9b4:	b2e4      	uxtb	r4, r4
    f9b6:	3401      	adds	r4, #1
    f9b8:	1914      	adds	r4, r2, r4
		*data = serial_rx_buf[serial_rx_buf_head];
    f9ba:	4d14      	ldr	r5, [pc, #80]	; (fa0c <sio2host_rx+0x90>)
			serial_rx_buf_head = 0;
    f9bc:	2600      	movs	r6, #0
    f9be:	e014      	b.n	f9ea <sio2host_rx+0x6e>
		serial_rx_count = serial_rx_buf_tail + (SERIAL_RX_BUF_SIZE_HOST - serial_rx_buf_head);
    f9c0:	0020      	movs	r0, r4
    f9c2:	3880      	subs	r0, #128	; 0x80
    f9c4:	1ac3      	subs	r3, r0, r3
    f9c6:	4810      	ldr	r0, [pc, #64]	; (fa08 <sio2host_rx+0x8c>)
    f9c8:	7003      	strb	r3, [r0, #0]
    f9ca:	e7e2      	b.n	f992 <sio2host_rx+0x16>
		serial_rx_buf_head = serial_rx_buf_tail;
    f9cc:	4b0d      	ldr	r3, [pc, #52]	; (fa04 <sio2host_rx+0x88>)
    f9ce:	701c      	strb	r4, [r3, #0]
		serial_rx_count = SERIAL_RX_BUF_SIZE_HOST;
    f9d0:	2080      	movs	r0, #128	; 0x80
    f9d2:	4b0d      	ldr	r3, [pc, #52]	; (fa08 <sio2host_rx+0x8c>)
    f9d4:	7018      	strb	r0, [r3, #0]
		if (SERIAL_RX_BUF_SIZE_HOST <= max_length) {
    f9d6:	b24b      	sxtb	r3, r1
    f9d8:	2b00      	cmp	r3, #0
    f9da:	db01      	blt.n	f9e0 <sio2host_rx+0x64>
    f9dc:	0008      	movs	r0, r1
    f9de:	e7e4      	b.n	f9aa <sio2host_rx+0x2e>
			max_length = SERIAL_RX_BUF_SIZE_HOST;
    f9e0:	2080      	movs	r0, #128	; 0x80
    f9e2:	e7e4      	b.n	f9ae <sio2host_rx+0x32>
			serial_rx_buf_head = 0;
    f9e4:	0033      	movs	r3, r6
	while (max_length > 0) {
    f9e6:	4294      	cmp	r4, r2
    f9e8:	d007      	beq.n	f9fa <sio2host_rx+0x7e>
		*data = serial_rx_buf[serial_rx_buf_head];
    f9ea:	5ce9      	ldrb	r1, [r5, r3]
    f9ec:	7011      	strb	r1, [r2, #0]
		data++;
    f9ee:	3201      	adds	r2, #1
		if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_head) {
    f9f0:	2b7f      	cmp	r3, #127	; 0x7f
    f9f2:	d0f7      	beq.n	f9e4 <sio2host_rx+0x68>
			serial_rx_buf_head++;
    f9f4:	3301      	adds	r3, #1
    f9f6:	b2db      	uxtb	r3, r3
    f9f8:	e7f5      	b.n	f9e6 <sio2host_rx+0x6a>
    f9fa:	4a02      	ldr	r2, [pc, #8]	; (fa04 <sio2host_rx+0x88>)
    f9fc:	7013      	strb	r3, [r2, #0]
}
    f9fe:	bd70      	pop	{r4, r5, r6, pc}
    fa00:	200020a9 	.word	0x200020a9
    fa04:	200020a8 	.word	0x200020a8
    fa08:	200020aa 	.word	0x200020aa
    fa0c:	20002028 	.word	0x20002028

0000fa10 <sio2host_getchar>:
{
    fa10:	b510      	push	{r4, lr}
    fa12:	b082      	sub	sp, #8
	while (0 == sio2host_rx(&c, 1)) {
    fa14:	4c05      	ldr	r4, [pc, #20]	; (fa2c <sio2host_getchar+0x1c>)
    fa16:	2101      	movs	r1, #1
    fa18:	466b      	mov	r3, sp
    fa1a:	1dd8      	adds	r0, r3, #7
    fa1c:	47a0      	blx	r4
    fa1e:	2800      	cmp	r0, #0
    fa20:	d0f9      	beq.n	fa16 <sio2host_getchar+0x6>
	return c;
    fa22:	466b      	mov	r3, sp
    fa24:	79d8      	ldrb	r0, [r3, #7]
}
    fa26:	b002      	add	sp, #8
    fa28:	bd10      	pop	{r4, pc}
    fa2a:	46c0      	nop			; (mov r8, r8)
    fa2c:	0000f97d 	.word	0x0000f97d

0000fa30 <sio2host_putchar>:
{
    fa30:	b500      	push	{lr}
    fa32:	b083      	sub	sp, #12
    fa34:	466b      	mov	r3, sp
    fa36:	71d8      	strb	r0, [r3, #7]
    fa38:	3307      	adds	r3, #7
	sio2host_tx(&ch, 1);
    fa3a:	2101      	movs	r1, #1
    fa3c:	0018      	movs	r0, r3
    fa3e:	4b02      	ldr	r3, [pc, #8]	; (fa48 <sio2host_putchar+0x18>)
    fa40:	4798      	blx	r3
}
    fa42:	b003      	add	sp, #12
    fa44:	bd00      	pop	{pc}
    fa46:	46c0      	nop			; (mov r8, r8)
    fa48:	0000f951 	.word	0x0000f951

0000fa4c <HAL_SPISend>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    fa4c:	4b13      	ldr	r3, [pc, #76]	; (fa9c <HAL_SPISend+0x50>)
    fa4e:	681b      	ldr	r3, [r3, #0]
static uint8_t HAL_SPISend(uint8_t data)
{
	uint16_t read_val = 0;
	
	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master));
    fa50:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    fa52:	7e1a      	ldrb	r2, [r3, #24]
    fa54:	420a      	tst	r2, r1
    fa56:	d0fc      	beq.n	fa52 <HAL_SPISend+0x6>
    fa58:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    fa5a:	07d2      	lsls	r2, r2, #31
    fa5c:	d500      	bpl.n	fa60 <HAL_SPISend+0x14>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    fa5e:	6298      	str	r0, [r3, #40]	; 0x28
	spi_write(&master, data);
	while (!spi_is_write_complete(&master));
    fa60:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    fa62:	7e1a      	ldrb	r2, [r3, #24]
    fa64:	420a      	tst	r2, r1
    fa66:	d0fc      	beq.n	fa62 <HAL_SPISend+0x16>
	
	while (!spi_is_ready_to_read(&master));
    fa68:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    fa6a:	7e1a      	ldrb	r2, [r3, #24]
    fa6c:	420a      	tst	r2, r1
    fa6e:	d0fc      	beq.n	fa6a <HAL_SPISend+0x1e>
    fa70:	7e1a      	ldrb	r2, [r3, #24]
	uint16_t read_val = 0;
    fa72:	2000      	movs	r0, #0
	if (!spi_is_ready_to_read(module)) {
    fa74:	0752      	lsls	r2, r2, #29
    fa76:	d50a      	bpl.n	fa8e <HAL_SPISend+0x42>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    fa78:	8b5a      	ldrh	r2, [r3, #26]
    fa7a:	0752      	lsls	r2, r2, #29
    fa7c:	d501      	bpl.n	fa82 <HAL_SPISend+0x36>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    fa7e:	2204      	movs	r2, #4
    fa80:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    fa82:	4a06      	ldr	r2, [pc, #24]	; (fa9c <HAL_SPISend+0x50>)
    fa84:	7992      	ldrb	r2, [r2, #6]
    fa86:	2a01      	cmp	r2, #1
    fa88:	d003      	beq.n	fa92 <HAL_SPISend+0x46>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    fa8a:	6a98      	ldr	r0, [r3, #40]	; 0x28
    fa8c:	b2c0      	uxtb	r0, r0
	spi_read(&master, &read_val);
	
	return ((uint8_t)read_val);
    fa8e:	b2c0      	uxtb	r0, r0
}
    fa90:	4770      	bx	lr
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    fa92:	6a98      	ldr	r0, [r3, #40]	; 0x28
    fa94:	05c0      	lsls	r0, r0, #23
    fa96:	0dc0      	lsrs	r0, r0, #23
    fa98:	e7f9      	b.n	fa8e <HAL_SPISend+0x42>
    fa9a:	46c0      	nop			; (mov r8, r8)
    fa9c:	200020b8 	.word	0x200020b8

0000faa0 <HAL_ResetPinMakeOutput>:
{
    faa0:	b500      	push	{lr}
    faa2:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    faa4:	a901      	add	r1, sp, #4
    faa6:	2301      	movs	r3, #1
    faa8:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    faaa:	2200      	movs	r2, #0
    faac:	708a      	strb	r2, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    faae:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    fab0:	202f      	movs	r0, #47	; 0x2f
    fab2:	4b02      	ldr	r3, [pc, #8]	; (fabc <HAL_ResetPinMakeOutput+0x1c>)
    fab4:	4798      	blx	r3
}
    fab6:	b003      	add	sp, #12
    fab8:	bd00      	pop	{pc}
    faba:	46c0      	nop			; (mov r8, r8)
    fabc:	00005171 	.word	0x00005171

0000fac0 <HAL_RadioDIO2Callback>:
{
    fac0:	b510      	push	{r4, lr}
  if (interruptHandlerDio2)
    fac2:	4b05      	ldr	r3, [pc, #20]	; (fad8 <HAL_RadioDIO2Callback+0x18>)
    fac4:	681b      	ldr	r3, [r3, #0]
    fac6:	2b00      	cmp	r3, #0
    fac8:	d004      	beq.n	fad4 <HAL_RadioDIO2Callback+0x14>
	PMM_Wakeup();
    faca:	4b04      	ldr	r3, [pc, #16]	; (fadc <HAL_RadioDIO2Callback+0x1c>)
    facc:	4798      	blx	r3
    interruptHandlerDio2();
    face:	4b02      	ldr	r3, [pc, #8]	; (fad8 <HAL_RadioDIO2Callback+0x18>)
    fad0:	681b      	ldr	r3, [r3, #0]
    fad2:	4798      	blx	r3
}
    fad4:	bd10      	pop	{r4, pc}
    fad6:	46c0      	nop			; (mov r8, r8)
    fad8:	200020b4 	.word	0x200020b4
    fadc:	0000ff81 	.word	0x0000ff81

0000fae0 <HAL_RadioDIO1Callback>:
{
    fae0:	b510      	push	{r4, lr}
  if (interruptHandlerDio1)
    fae2:	4b05      	ldr	r3, [pc, #20]	; (faf8 <HAL_RadioDIO1Callback+0x18>)
    fae4:	681b      	ldr	r3, [r3, #0]
    fae6:	2b00      	cmp	r3, #0
    fae8:	d004      	beq.n	faf4 <HAL_RadioDIO1Callback+0x14>
	PMM_Wakeup();
    faea:	4b04      	ldr	r3, [pc, #16]	; (fafc <HAL_RadioDIO1Callback+0x1c>)
    faec:	4798      	blx	r3
    interruptHandlerDio1();
    faee:	4b02      	ldr	r3, [pc, #8]	; (faf8 <HAL_RadioDIO1Callback+0x18>)
    faf0:	681b      	ldr	r3, [r3, #0]
    faf2:	4798      	blx	r3
}
    faf4:	bd10      	pop	{r4, pc}
    faf6:	46c0      	nop			; (mov r8, r8)
    faf8:	200020b0 	.word	0x200020b0
    fafc:	0000ff81 	.word	0x0000ff81

0000fb00 <HAL_RadioDIO0Callback>:
{
    fb00:	b510      	push	{r4, lr}
  if (interruptHandlerDio0)
    fb02:	4b05      	ldr	r3, [pc, #20]	; (fb18 <HAL_RadioDIO0Callback+0x18>)
    fb04:	681b      	ldr	r3, [r3, #0]
    fb06:	2b00      	cmp	r3, #0
    fb08:	d004      	beq.n	fb14 <HAL_RadioDIO0Callback+0x14>
	PMM_Wakeup();
    fb0a:	4b04      	ldr	r3, [pc, #16]	; (fb1c <HAL_RadioDIO0Callback+0x1c>)
    fb0c:	4798      	blx	r3
    interruptHandlerDio0();
    fb0e:	4b02      	ldr	r3, [pc, #8]	; (fb18 <HAL_RadioDIO0Callback+0x18>)
    fb10:	681b      	ldr	r3, [r3, #0]
    fb12:	4798      	blx	r3
}
    fb14:	bd10      	pop	{r4, pc}
    fb16:	46c0      	nop			; (mov r8, r8)
    fb18:	200020ac 	.word	0x200020ac
    fb1c:	0000ff81 	.word	0x0000ff81

0000fb20 <HAL_SPICSAssert>:
{
    fb20:	b510      	push	{r4, lr}
	spi_select_slave(&master, &slave, true);
    fb22:	2201      	movs	r2, #1
    fb24:	4902      	ldr	r1, [pc, #8]	; (fb30 <HAL_SPICSAssert+0x10>)
    fb26:	4803      	ldr	r0, [pc, #12]	; (fb34 <HAL_SPICSAssert+0x14>)
    fb28:	4b03      	ldr	r3, [pc, #12]	; (fb38 <HAL_SPICSAssert+0x18>)
    fb2a:	4798      	blx	r3
}
    fb2c:	bd10      	pop	{r4, pc}
    fb2e:	46c0      	nop			; (mov r8, r8)
    fb30:	2000379c 	.word	0x2000379c
    fb34:	200020b8 	.word	0x200020b8
    fb38:	00006091 	.word	0x00006091

0000fb3c <HAL_SPICSDeassert>:
{
    fb3c:	b510      	push	{r4, lr}
	spi_select_slave(&master, &slave, false);
    fb3e:	2200      	movs	r2, #0
    fb40:	4902      	ldr	r1, [pc, #8]	; (fb4c <HAL_SPICSDeassert+0x10>)
    fb42:	4803      	ldr	r0, [pc, #12]	; (fb50 <HAL_SPICSDeassert+0x14>)
    fb44:	4b03      	ldr	r3, [pc, #12]	; (fb54 <HAL_SPICSDeassert+0x18>)
    fb46:	4798      	blx	r3
}
    fb48:	bd10      	pop	{r4, pc}
    fb4a:	46c0      	nop			; (mov r8, r8)
    fb4c:	2000379c 	.word	0x2000379c
    fb50:	200020b8 	.word	0x200020b8
    fb54:	00006091 	.word	0x00006091

0000fb58 <HAL_RadioInit>:
{
    fb58:	b5f0      	push	{r4, r5, r6, r7, lr}
    fb5a:	46d6      	mov	lr, sl
    fb5c:	464f      	mov	r7, r9
    fb5e:	4646      	mov	r6, r8
    fb60:	b5c0      	push	{r6, r7, lr}
    fb62:	b090      	sub	sp, #64	; 0x40
	config->input_pull = PORT_PIN_PULL_UP;
    fb64:	ac01      	add	r4, sp, #4
    fb66:	2601      	movs	r6, #1
    fb68:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    fb6a:	2500      	movs	r5, #0
    fb6c:	70a5      	strb	r5, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    fb6e:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(SX_RF_SPI_SCK, &pin_conf);
    fb70:	0021      	movs	r1, r4
    fb72:	2052      	movs	r0, #82	; 0x52
    fb74:	4f52      	ldr	r7, [pc, #328]	; (fcc0 <HAL_RadioInit+0x168>)
    fb76:	47b8      	blx	r7
	port_pin_set_config(SX_RF_SPI_MOSI, &pin_conf);
    fb78:	0021      	movs	r1, r4
    fb7a:	203e      	movs	r0, #62	; 0x3e
    fb7c:	47b8      	blx	r7
	port_pin_set_config(SX_RF_SPI_CS, &pin_conf);
    fb7e:	0021      	movs	r1, r4
    fb80:	203f      	movs	r0, #63	; 0x3f
    fb82:	47b8      	blx	r7
	port_pin_set_config(SX_RF_RESET_PIN, &pin_conf);
    fb84:	0021      	movs	r1, r4
    fb86:	202f      	movs	r0, #47	; 0x2f
    fb88:	47b8      	blx	r7
		port_base->OUTSET.reg = pin_mask;
    fb8a:	2280      	movs	r2, #128	; 0x80
    fb8c:	02d2      	lsls	r2, r2, #11
    fb8e:	4b4d      	ldr	r3, [pc, #308]	; (fcc4 <HAL_RadioInit+0x16c>)
    fb90:	619a      	str	r2, [r3, #24]
    fb92:	4b4d      	ldr	r3, [pc, #308]	; (fcc8 <HAL_RadioInit+0x170>)
    fb94:	2280      	movs	r2, #128	; 0x80
    fb96:	05d2      	lsls	r2, r2, #23
    fb98:	619a      	str	r2, [r3, #24]
    fb9a:	2280      	movs	r2, #128	; 0x80
    fb9c:	0612      	lsls	r2, r2, #24
    fb9e:	619a      	str	r2, [r3, #24]
    fba0:	2280      	movs	r2, #128	; 0x80
    fba2:	0212      	lsls	r2, r2, #8
    fba4:	619a      	str	r2, [r3, #24]
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    fba6:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(SX_RF_SPI_MISO, &pin_conf);
    fba8:	0021      	movs	r1, r4
    fbaa:	2053      	movs	r0, #83	; 0x53
    fbac:	47b8      	blx	r7
	extint_chan_get_config_defaults(&config_extint_chan);
    fbae:	ac02      	add	r4, sp, #8
    fbb0:	0020      	movs	r0, r4
    fbb2:	4b46      	ldr	r3, [pc, #280]	; (fccc <HAL_RadioInit+0x174>)
    fbb4:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO0_EIC_PIN;
    fbb6:	2330      	movs	r3, #48	; 0x30
    fbb8:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO0_EIC_MUX;
    fbba:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    fbbc:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    fbbe:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO0_EIC_LINE, &config_extint_chan);
    fbc0:	0021      	movs	r1, r4
    fbc2:	2000      	movs	r0, #0
    fbc4:	4b42      	ldr	r3, [pc, #264]	; (fcd0 <HAL_RadioInit+0x178>)
    fbc6:	469a      	mov	sl, r3
    fbc8:	4798      	blx	r3
	extint_register_callback(HAL_RadioDIO0Callback,DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    fbca:	2200      	movs	r2, #0
    fbcc:	2100      	movs	r1, #0
    fbce:	4841      	ldr	r0, [pc, #260]	; (fcd4 <HAL_RadioInit+0x17c>)
    fbd0:	4b41      	ldr	r3, [pc, #260]	; (fcd8 <HAL_RadioInit+0x180>)
    fbd2:	4699      	mov	r9, r3
    fbd4:	4798      	blx	r3
	extint_chan_enable_callback(DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    fbd6:	2100      	movs	r1, #0
    fbd8:	2000      	movs	r0, #0
    fbda:	4b40      	ldr	r3, [pc, #256]	; (fcdc <HAL_RadioInit+0x184>)
    fbdc:	4698      	mov	r8, r3
    fbde:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO1_EIC_PIN;
    fbe0:	230b      	movs	r3, #11
    fbe2:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO1_EIC_MUX;
    fbe4:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    fbe6:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    fbe8:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO1_EIC_LINE, &config_extint_chan);
    fbea:	0021      	movs	r1, r4
    fbec:	200b      	movs	r0, #11
    fbee:	47d0      	blx	sl
	extint_register_callback(HAL_RadioDIO1Callback,DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    fbf0:	2200      	movs	r2, #0
    fbf2:	210b      	movs	r1, #11
    fbf4:	483a      	ldr	r0, [pc, #232]	; (fce0 <HAL_RadioInit+0x188>)
    fbf6:	47c8      	blx	r9
	extint_chan_enable_callback(DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    fbf8:	2100      	movs	r1, #0
    fbfa:	200b      	movs	r0, #11
    fbfc:	47c0      	blx	r8
	config_extint_chan.gpio_pin           = DIO2_EIC_PIN;
    fbfe:	230c      	movs	r3, #12
    fc00:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO2_EIC_MUX;
    fc02:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    fc04:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    fc06:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO2_EIC_LINE, &config_extint_chan);
    fc08:	0021      	movs	r1, r4
    fc0a:	200c      	movs	r0, #12
    fc0c:	47d0      	blx	sl
	extint_register_callback(HAL_RadioDIO2Callback,DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    fc0e:	2200      	movs	r2, #0
    fc10:	210c      	movs	r1, #12
    fc12:	4834      	ldr	r0, [pc, #208]	; (fce4 <HAL_RadioInit+0x18c>)
    fc14:	47c8      	blx	r9
	extint_chan_enable_callback(DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    fc16:	2100      	movs	r1, #0
    fc18:	200c      	movs	r0, #12
    fc1a:	47c0      	blx	r8
	slave->ss_pin          = config->ss_pin;
    fc1c:	4b32      	ldr	r3, [pc, #200]	; (fce8 <HAL_RadioInit+0x190>)
    fc1e:	4698      	mov	r8, r3
    fc20:	233f      	movs	r3, #63	; 0x3f
    fc22:	4642      	mov	r2, r8
    fc24:	7013      	strb	r3, [r2, #0]
	slave->address_enabled = config->address_enabled;
    fc26:	7055      	strb	r5, [r2, #1]
	slave->address         = config->address;
    fc28:	7095      	strb	r5, [r2, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    fc2a:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    fc2c:	70a5      	strb	r5, [r4, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    fc2e:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    fc30:	0021      	movs	r1, r4
    fc32:	203f      	movs	r0, #63	; 0x3f
    fc34:	47b8      	blx	r7
	port_pin_set_output_level(slave->ss_pin, true);
    fc36:	4643      	mov	r3, r8
    fc38:	781a      	ldrb	r2, [r3, #0]
	if (port_index < PORT_INST_NUM) {
    fc3a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    fc3c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    fc3e:	2900      	cmp	r1, #0
    fc40:	d104      	bne.n	fc4c <HAL_RadioInit+0xf4>
		return &(ports[port_index]->Group[group_index]);
    fc42:	0953      	lsrs	r3, r2, #5
    fc44:	01db      	lsls	r3, r3, #7
    fc46:	4929      	ldr	r1, [pc, #164]	; (fcec <HAL_RadioInit+0x194>)
    fc48:	468c      	mov	ip, r1
    fc4a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    fc4c:	211f      	movs	r1, #31
    fc4e:	4011      	ands	r1, r2
    fc50:	2201      	movs	r2, #1
    fc52:	0010      	movs	r0, r2
    fc54:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    fc56:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    fc58:	ac02      	add	r4, sp, #8
    fc5a:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    fc5c:	2300      	movs	r3, #0
    fc5e:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    fc60:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    fc62:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    fc64:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    fc66:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    fc68:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    fc6a:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    fc6c:	3223      	adds	r2, #35	; 0x23
    fc6e:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    fc70:	3a18      	subs	r2, #24
    fc72:	2100      	movs	r1, #0
    fc74:	a808      	add	r0, sp, #32
    fc76:	4b1e      	ldr	r3, [pc, #120]	; (fcf0 <HAL_RadioInit+0x198>)
    fc78:	4798      	blx	r3
	config_spi_master.mode_specific.master.baudrate = SX_RF_SPI_BAUDRATE;
    fc7a:	4b1e      	ldr	r3, [pc, #120]	; (fcf4 <HAL_RadioInit+0x19c>)
    fc7c:	61a3      	str	r3, [r4, #24]
	config_spi_master.mux_setting = SX_RF_SPI_SERCOM_MUX_SETTING;
    fc7e:	2380      	movs	r3, #128	; 0x80
    fc80:	025b      	lsls	r3, r3, #9
    fc82:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = SX_RF_SPI_SERCOM_PINMUX_PAD0;
    fc84:	4b1c      	ldr	r3, [pc, #112]	; (fcf8 <HAL_RadioInit+0x1a0>)
    fc86:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = PINMUX_UNUSED;
    fc88:	2301      	movs	r3, #1
    fc8a:	425b      	negs	r3, r3
    fc8c:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = SX_RF_SPI_SERCOM_PINMUX_PAD2;
    fc8e:	4b1b      	ldr	r3, [pc, #108]	; (fcfc <HAL_RadioInit+0x1a4>)
    fc90:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = SX_RF_SPI_SERCOM_PINMUX_PAD3;
    fc92:	4b1b      	ldr	r3, [pc, #108]	; (fd00 <HAL_RadioInit+0x1a8>)
    fc94:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, SX_RF_SPI, &config_spi_master);	
    fc96:	4d1b      	ldr	r5, [pc, #108]	; (fd04 <HAL_RadioInit+0x1ac>)
    fc98:	0022      	movs	r2, r4
    fc9a:	491b      	ldr	r1, [pc, #108]	; (fd08 <HAL_RadioInit+0x1b0>)
    fc9c:	0028      	movs	r0, r5
    fc9e:	4b1b      	ldr	r3, [pc, #108]	; (fd0c <HAL_RadioInit+0x1b4>)
    fca0:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    fca2:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    fca4:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    fca6:	2b00      	cmp	r3, #0
    fca8:	d1fc      	bne.n	fca4 <HAL_RadioInit+0x14c>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    fcaa:	6813      	ldr	r3, [r2, #0]
    fcac:	2102      	movs	r1, #2
    fcae:	430b      	orrs	r3, r1
    fcb0:	6013      	str	r3, [r2, #0]
}
    fcb2:	b010      	add	sp, #64	; 0x40
    fcb4:	bc1c      	pop	{r2, r3, r4}
    fcb6:	4690      	mov	r8, r2
    fcb8:	4699      	mov	r9, r3
    fcba:	46a2      	mov	sl, r4
    fcbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fcbe:	46c0      	nop			; (mov r8, r8)
    fcc0:	00005171 	.word	0x00005171
    fcc4:	40002900 	.word	0x40002900
    fcc8:	40002880 	.word	0x40002880
    fccc:	00004ebd 	.word	0x00004ebd
    fcd0:	00004ed1 	.word	0x00004ed1
    fcd4:	0000fb01 	.word	0x0000fb01
    fcd8:	00004d5d 	.word	0x00004d5d
    fcdc:	00004d89 	.word	0x00004d89
    fce0:	0000fae1 	.word	0x0000fae1
    fce4:	0000fac1 	.word	0x0000fac1
    fce8:	2000379c 	.word	0x2000379c
    fcec:	40002800 	.word	0x40002800
    fcf0:	0001836d 	.word	0x0001836d
    fcf4:	001e8480 	.word	0x001e8480
    fcf8:	00530005 	.word	0x00530005
    fcfc:	003e0005 	.word	0x003e0005
    fd00:	00520005 	.word	0x00520005
    fd04:	200020b8 	.word	0x200020b8
    fd08:	42001000 	.word	0x42001000
    fd0c:	00005d45 	.word	0x00005d45

0000fd10 <RADIO_Reset>:
{
    fd10:	b570      	push	{r4, r5, r6, lr}
    fd12:	b082      	sub	sp, #8
	HAL_ResetPinMakeOutput();
    fd14:	4c0a      	ldr	r4, [pc, #40]	; (fd40 <RADIO_Reset+0x30>)
    fd16:	47a0      	blx	r4
		port_base->OUTCLR.reg = pin_mask;
    fd18:	4d0a      	ldr	r5, [pc, #40]	; (fd44 <RADIO_Reset+0x34>)
    fd1a:	2680      	movs	r6, #128	; 0x80
    fd1c:	0236      	lsls	r6, r6, #8
    fd1e:	616e      	str	r6, [r5, #20]
	SystemBlockingWaitMs(1);
    fd20:	2001      	movs	r0, #1
    fd22:	4b09      	ldr	r3, [pc, #36]	; (fd48 <RADIO_Reset+0x38>)
    fd24:	4798      	blx	r3
	config->direction  = PORT_PIN_DIR_INPUT;
    fd26:	a901      	add	r1, sp, #4
    fd28:	2300      	movs	r3, #0
    fd2a:	700b      	strb	r3, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    fd2c:	2201      	movs	r2, #1
    fd2e:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    fd30:	708b      	strb	r3, [r1, #2]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    fd32:	202f      	movs	r0, #47	; 0x2f
    fd34:	4b05      	ldr	r3, [pc, #20]	; (fd4c <RADIO_Reset+0x3c>)
    fd36:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    fd38:	61ae      	str	r6, [r5, #24]
	HAL_ResetPinMakeOutput();
    fd3a:	47a0      	blx	r4
}
    fd3c:	b002      	add	sp, #8
    fd3e:	bd70      	pop	{r4, r5, r6, pc}
    fd40:	0000faa1 	.word	0x0000faa1
    fd44:	40002880 	.word	0x40002880
    fd48:	0000ff4d 	.word	0x0000ff4d
    fd4c:	00005171 	.word	0x00005171

0000fd50 <RADIO_RegisterWrite>:
{
    fd50:	b570      	push	{r4, r5, r6, lr}
    fd52:	0004      	movs	r4, r0
    fd54:	000d      	movs	r5, r1
	HAL_SPICSAssert();
    fd56:	4b05      	ldr	r3, [pc, #20]	; (fd6c <RADIO_RegisterWrite+0x1c>)
    fd58:	4798      	blx	r3
	HAL_SPISend(REG_WRITE_CMD | reg);
    fd5a:	2080      	movs	r0, #128	; 0x80
    fd5c:	4320      	orrs	r0, r4
    fd5e:	4c04      	ldr	r4, [pc, #16]	; (fd70 <RADIO_RegisterWrite+0x20>)
    fd60:	47a0      	blx	r4
	HAL_SPISend(value);
    fd62:	0028      	movs	r0, r5
    fd64:	47a0      	blx	r4
	HAL_SPICSDeassert();
    fd66:	4b03      	ldr	r3, [pc, #12]	; (fd74 <RADIO_RegisterWrite+0x24>)
    fd68:	4798      	blx	r3
}
    fd6a:	bd70      	pop	{r4, r5, r6, pc}
    fd6c:	0000fb21 	.word	0x0000fb21
    fd70:	0000fa4d 	.word	0x0000fa4d
    fd74:	0000fb3d 	.word	0x0000fb3d

0000fd78 <RADIO_RegisterRead>:
{
    fd78:	b510      	push	{r4, lr}
    fd7a:	0004      	movs	r4, r0
	HAL_SPICSAssert();
    fd7c:	4b06      	ldr	r3, [pc, #24]	; (fd98 <RADIO_RegisterRead+0x20>)
    fd7e:	4798      	blx	r3
	HAL_SPISend(reg);
    fd80:	207f      	movs	r0, #127	; 0x7f
    fd82:	4020      	ands	r0, r4
    fd84:	4c05      	ldr	r4, [pc, #20]	; (fd9c <RADIO_RegisterRead+0x24>)
    fd86:	47a0      	blx	r4
	readValue = HAL_SPISend(0xFF);
    fd88:	20ff      	movs	r0, #255	; 0xff
    fd8a:	47a0      	blx	r4
    fd8c:	0004      	movs	r4, r0
	HAL_SPICSDeassert();
    fd8e:	4b04      	ldr	r3, [pc, #16]	; (fda0 <RADIO_RegisterRead+0x28>)
    fd90:	4798      	blx	r3
}
    fd92:	0020      	movs	r0, r4
    fd94:	bd10      	pop	{r4, pc}
    fd96:	46c0      	nop			; (mov r8, r8)
    fd98:	0000fb21 	.word	0x0000fb21
    fd9c:	0000fa4d 	.word	0x0000fa4d
    fda0:	0000fb3d 	.word	0x0000fb3d

0000fda4 <RADIO_FrameWrite>:
{
    fda4:	b570      	push	{r4, r5, r6, lr}
    fda6:	0004      	movs	r4, r0
    fda8:	000e      	movs	r6, r1
    fdaa:	0015      	movs	r5, r2
    HAL_SPICSAssert();
    fdac:	4b0a      	ldr	r3, [pc, #40]	; (fdd8 <RADIO_FrameWrite+0x34>)
    fdae:	4798      	blx	r3
    HAL_SPISend(REG_WRITE_CMD | offset);
    fdb0:	2080      	movs	r0, #128	; 0x80
    fdb2:	4320      	orrs	r0, r4
    fdb4:	4b09      	ldr	r3, [pc, #36]	; (fddc <RADIO_FrameWrite+0x38>)
    fdb6:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    fdb8:	2d00      	cmp	r5, #0
    fdba:	d00a      	beq.n	fdd2 <RADIO_FrameWrite+0x2e>
    fdbc:	0034      	movs	r4, r6
    fdbe:	3d01      	subs	r5, #1
    fdc0:	b2ed      	uxtb	r5, r5
    fdc2:	3501      	adds	r5, #1
    fdc4:	1975      	adds	r5, r6, r5
	    HAL_SPISend(buffer[i]);
    fdc6:	4e05      	ldr	r6, [pc, #20]	; (fddc <RADIO_FrameWrite+0x38>)
    fdc8:	7820      	ldrb	r0, [r4, #0]
    fdca:	47b0      	blx	r6
    fdcc:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < bufferLen; i++)
    fdce:	42ac      	cmp	r4, r5
    fdd0:	d1fa      	bne.n	fdc8 <RADIO_FrameWrite+0x24>
    HAL_SPICSDeassert();
    fdd2:	4b03      	ldr	r3, [pc, #12]	; (fde0 <RADIO_FrameWrite+0x3c>)
    fdd4:	4798      	blx	r3
}
    fdd6:	bd70      	pop	{r4, r5, r6, pc}
    fdd8:	0000fb21 	.word	0x0000fb21
    fddc:	0000fa4d 	.word	0x0000fa4d
    fde0:	0000fb3d 	.word	0x0000fb3d

0000fde4 <RADIO_FrameRead>:
{
    fde4:	b570      	push	{r4, r5, r6, lr}
    fde6:	0004      	movs	r4, r0
    fde8:	000e      	movs	r6, r1
    fdea:	0015      	movs	r5, r2
    HAL_SPICSAssert();
    fdec:	4b0a      	ldr	r3, [pc, #40]	; (fe18 <RADIO_FrameRead+0x34>)
    fdee:	4798      	blx	r3
    HAL_SPISend(offset);
    fdf0:	0020      	movs	r0, r4
    fdf2:	4b0a      	ldr	r3, [pc, #40]	; (fe1c <RADIO_FrameRead+0x38>)
    fdf4:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    fdf6:	2d00      	cmp	r5, #0
    fdf8:	d00b      	beq.n	fe12 <RADIO_FrameRead+0x2e>
    fdfa:	0034      	movs	r4, r6
    fdfc:	3d01      	subs	r5, #1
    fdfe:	b2ed      	uxtb	r5, r5
    fe00:	3501      	adds	r5, #1
    fe02:	1975      	adds	r5, r6, r5
	    buffer[i] = HAL_SPISend(0xFF);
    fe04:	4e05      	ldr	r6, [pc, #20]	; (fe1c <RADIO_FrameRead+0x38>)
    fe06:	20ff      	movs	r0, #255	; 0xff
    fe08:	47b0      	blx	r6
    fe0a:	7020      	strb	r0, [r4, #0]
    fe0c:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < bufferLen; i++)
    fe0e:	42ac      	cmp	r4, r5
    fe10:	d1f9      	bne.n	fe06 <RADIO_FrameRead+0x22>
    HAL_SPICSDeassert();
    fe12:	4b03      	ldr	r3, [pc, #12]	; (fe20 <RADIO_FrameRead+0x3c>)
    fe14:	4798      	blx	r3
}
    fe16:	bd70      	pop	{r4, r5, r6, pc}
    fe18:	0000fb21 	.word	0x0000fb21
    fe1c:	0000fa4d 	.word	0x0000fa4d
    fe20:	0000fb3d 	.word	0x0000fb3d

0000fe24 <HAL_EnableDIO0Interrupt>:
{
    fe24:	b510      	push	{r4, lr}
	extint_chan_enable_callback(DIO0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    fe26:	2100      	movs	r1, #0
    fe28:	2000      	movs	r0, #0
    fe2a:	4b01      	ldr	r3, [pc, #4]	; (fe30 <HAL_EnableDIO0Interrupt+0xc>)
    fe2c:	4798      	blx	r3
}
    fe2e:	bd10      	pop	{r4, pc}
    fe30:	00004d89 	.word	0x00004d89

0000fe34 <HAL_DisbleDIO0Interrupt>:
{
    fe34:	b510      	push	{r4, lr}
	extint_chan_disable_callback(DIO0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    fe36:	2100      	movs	r1, #0
    fe38:	2000      	movs	r0, #0
    fe3a:	4b01      	ldr	r3, [pc, #4]	; (fe40 <HAL_DisbleDIO0Interrupt+0xc>)
    fe3c:	4798      	blx	r3
}
    fe3e:	bd10      	pop	{r4, pc}
    fe40:	00004da9 	.word	0x00004da9

0000fe44 <HAL_EnableDIO1Interrupt>:
{
    fe44:	b510      	push	{r4, lr}
	extint_chan_enable_callback(DIO1_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    fe46:	2100      	movs	r1, #0
    fe48:	200b      	movs	r0, #11
    fe4a:	4b01      	ldr	r3, [pc, #4]	; (fe50 <HAL_EnableDIO1Interrupt+0xc>)
    fe4c:	4798      	blx	r3
}
    fe4e:	bd10      	pop	{r4, pc}
    fe50:	00004d89 	.word	0x00004d89

0000fe54 <HAL_DisbleDIO1Interrupt>:
{
    fe54:	b510      	push	{r4, lr}
	extint_chan_disable_callback(DIO1_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    fe56:	2100      	movs	r1, #0
    fe58:	200b      	movs	r0, #11
    fe5a:	4b01      	ldr	r3, [pc, #4]	; (fe60 <HAL_DisbleDIO1Interrupt+0xc>)
    fe5c:	4798      	blx	r3
}
    fe5e:	bd10      	pop	{r4, pc}
    fe60:	00004da9 	.word	0x00004da9

0000fe64 <HAL_EnableDIO2Interrupt>:
{
    fe64:	b510      	push	{r4, lr}
	extint_chan_enable_callback(DIO2_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    fe66:	2100      	movs	r1, #0
    fe68:	200c      	movs	r0, #12
    fe6a:	4b01      	ldr	r3, [pc, #4]	; (fe70 <HAL_EnableDIO2Interrupt+0xc>)
    fe6c:	4798      	blx	r3
}
    fe6e:	bd10      	pop	{r4, pc}
    fe70:	00004d89 	.word	0x00004d89

0000fe74 <HAL_DisbleDIO2Interrupt>:
{
    fe74:	b510      	push	{r4, lr}
	extint_chan_disable_callback(DIO2_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    fe76:	2100      	movs	r1, #0
    fe78:	200c      	movs	r0, #12
    fe7a:	4b01      	ldr	r3, [pc, #4]	; (fe80 <HAL_DisbleDIO2Interrupt+0xc>)
    fe7c:	4798      	blx	r3
}
    fe7e:	bd10      	pop	{r4, pc}
    fe80:	00004da9 	.word	0x00004da9

0000fe84 <HAL_RegisterDioInterruptHandler>:
 * \param[in] dioPin  - DIO pin
 * \param[in] handler - function to be called upon given DIO interrupt
 */
void HAL_RegisterDioInterruptHandler(uint8_t dioPin, DioInterruptHandler_t handler)
{
  switch (dioPin)
    fe84:	2802      	cmp	r0, #2
    fe86:	d007      	beq.n	fe98 <HAL_RegisterDioInterruptHandler+0x14>
    fe88:	2804      	cmp	r0, #4
    fe8a:	d008      	beq.n	fe9e <HAL_RegisterDioInterruptHandler+0x1a>
    fe8c:	2801      	cmp	r0, #1
    fe8e:	d000      	beq.n	fe92 <HAL_RegisterDioInterruptHandler+0xe>
#endif

    default:
      break;
  }
}
    fe90:	4770      	bx	lr
      interruptHandlerDio0 = handler;
    fe92:	4b04      	ldr	r3, [pc, #16]	; (fea4 <HAL_RegisterDioInterruptHandler+0x20>)
    fe94:	6019      	str	r1, [r3, #0]
      break;
    fe96:	e7fb      	b.n	fe90 <HAL_RegisterDioInterruptHandler+0xc>
      interruptHandlerDio1 = handler;
    fe98:	4b03      	ldr	r3, [pc, #12]	; (fea8 <HAL_RegisterDioInterruptHandler+0x24>)
    fe9a:	6019      	str	r1, [r3, #0]
      break;
    fe9c:	e7f8      	b.n	fe90 <HAL_RegisterDioInterruptHandler+0xc>
      interruptHandlerDio2 = handler;
    fe9e:	4b03      	ldr	r3, [pc, #12]	; (feac <HAL_RegisterDioInterruptHandler+0x28>)
    fea0:	6019      	str	r1, [r3, #0]
}
    fea2:	e7f5      	b.n	fe90 <HAL_RegisterDioInterruptHandler+0xc>
    fea4:	200020ac 	.word	0x200020ac
    fea8:	200020b0 	.word	0x200020b0
    feac:	200020b4 	.word	0x200020b4

0000feb0 <HAL_EnableRFCtrl>:

void HAL_EnableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
   if ((RFCtrl1 == RFO_HF) || (RFCtrl2 == RX))
    feb0:	2801      	cmp	r0, #1
    feb2:	d00a      	beq.n	feca <HAL_EnableRFCtrl+0x1a>
    feb4:	2900      	cmp	r1, #0
    feb6:	d008      	beq.n	feca <HAL_EnableRFCtrl+0x1a>
   {
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_ACTIVE);		
   }
   else if ((RFCtrl1 == PA_BOOST) && (RFCtrl2 == TX))
    feb8:	2802      	cmp	r0, #2
    feba:	d10a      	bne.n	fed2 <HAL_EnableRFCtrl+0x22>
    febc:	2901      	cmp	r1, #1
    febe:	d108      	bne.n	fed2 <HAL_EnableRFCtrl+0x22>
		port_base->OUTCLR.reg = pin_mask;
    fec0:	2280      	movs	r2, #128	; 0x80
    fec2:	0192      	lsls	r2, r2, #6
    fec4:	4b03      	ldr	r3, [pc, #12]	; (fed4 <HAL_EnableRFCtrl+0x24>)
    fec6:	615a      	str	r2, [r3, #20]
   {
	   port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);
   }
#endif	
}
    fec8:	e003      	b.n	fed2 <HAL_EnableRFCtrl+0x22>
		port_base->OUTSET.reg = pin_mask;
    feca:	2280      	movs	r2, #128	; 0x80
    fecc:	0192      	lsls	r2, r2, #6
    fece:	4b01      	ldr	r3, [pc, #4]	; (fed4 <HAL_EnableRFCtrl+0x24>)
    fed0:	619a      	str	r2, [r3, #24]
    fed2:	4770      	bx	lr
    fed4:	40002800 	.word	0x40002800

0000fed8 <HAL_DisableRFCtrl>:

void HAL_DisableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
	if ((RFCtrl1 == RFO_HF) || (RFCtrl2 == RX))
    fed8:	2801      	cmp	r0, #1
    feda:	d001      	beq.n	fee0 <HAL_DisableRFCtrl+0x8>
    fedc:	2900      	cmp	r1, #0
    fede:	d103      	bne.n	fee8 <HAL_DisableRFCtrl+0x10>
		port_base->OUTCLR.reg = pin_mask;
    fee0:	2280      	movs	r2, #128	; 0x80
    fee2:	0192      	lsls	r2, r2, #6
    fee4:	4b01      	ldr	r3, [pc, #4]	; (feec <HAL_DisableRFCtrl+0x14>)
    fee6:	615a      	str	r2, [r3, #20]
	{
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
	}
#endif	
}
    fee8:	4770      	bx	lr
    feea:	46c0      	nop			; (mov r8, r8)
    feec:	40002800 	.word	0x40002800

0000fef0 <HAL_GetRadioClkStabilizationDelay>:
 * \param[out] Time value in ms
 */
uint8_t HAL_GetRadioClkStabilizationDelay(void)
{
	return RADIO_CLK_STABILITATION_DELAY;
}
    fef0:	2002      	movs	r0, #2
    fef2:	4770      	bx	lr

0000fef4 <HAL_GetRadioClkSrc>:
 * \param[out] Type of clock source TCXO or XTAL
 */
RadioClockSources_t HAL_GetRadioClkSrc(void)
{
	return RADIO_CLK_SRC;
}
    fef4:	2000      	movs	r0, #0
    fef6:	4770      	bx	lr

0000fef8 <HAL_TCXOPowerOn>:
 *
 * \param[in] None
 * \param[out] None
 */
void HAL_TCXOPowerOn(void)
{
    fef8:	b510      	push	{r4, lr}
		port_base->OUTSET.reg = pin_mask;
    fefa:	2280      	movs	r2, #128	; 0x80
    fefc:	0092      	lsls	r2, r2, #2
    fefe:	4b03      	ldr	r3, [pc, #12]	; (ff0c <HAL_TCXOPowerOn+0x14>)
    ff00:	619a      	str	r2, [r3, #24]
#ifdef TCXO_ENABLE
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_ACTIVE);
	delay_ms(RADIO_CLK_STABILITATION_DELAY);
    ff02:	2002      	movs	r0, #2
    ff04:	4b02      	ldr	r3, [pc, #8]	; (ff10 <HAL_TCXOPowerOn+0x18>)
    ff06:	4798      	blx	r3
#endif
}
    ff08:	bd10      	pop	{r4, pc}
    ff0a:	46c0      	nop			; (mov r8, r8)
    ff0c:	40002800 	.word	0x40002800
    ff10:	00004719 	.word	0x00004719

0000ff14 <HAL_TCXOPowerOff>:
		port_base->OUTCLR.reg = pin_mask;
    ff14:	2280      	movs	r2, #128	; 0x80
    ff16:	0092      	lsls	r2, r2, #2
    ff18:	4b01      	ldr	r3, [pc, #4]	; (ff20 <HAL_TCXOPowerOff+0xc>)
    ff1a:	615a      	str	r2, [r3, #20]
#ifdef TCXO_ENABLE
#ifndef TCXO_ALWAYS_ON
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
#endif
#endif
}
    ff1c:	4770      	bx	lr
    ff1e:	46c0      	nop			; (mov r8, r8)
    ff20:	40002800 	.word	0x40002800

0000ff24 <SleepTimerGetElapsedTime>:
/**
* \brief Calculate the Elapsed Time from the previous call of this function
* \retval Elapsed time in ticks
*/
uint32_t SleepTimerGetElapsedTime(void)
{
    ff24:	b510      	push	{r4, lr}
	return rtc_count_get_count(&rtc);
    ff26:	4802      	ldr	r0, [pc, #8]	; (ff30 <SleepTimerGetElapsedTime+0xc>)
    ff28:	4b02      	ldr	r3, [pc, #8]	; (ff34 <SleepTimerGetElapsedTime+0x10>)
    ff2a:	4798      	blx	r3
}
    ff2c:	bd10      	pop	{r4, pc}
    ff2e:	46c0      	nop			; (mov r8, r8)
    ff30:	200037a0 	.word	0x200037a0
    ff34:	000051a1 	.word	0x000051a1

0000ff38 <SleepTimerStop>:

/**
* \brief Stop the sleep timer
*/
void SleepTimerStop(void)
{
    ff38:	b510      	push	{r4, lr}
	rtc_count_disable_callback(&rtc, RTC_COUNT_CALLBACK_COMPARE_0);
    ff3a:	2108      	movs	r1, #8
    ff3c:	4801      	ldr	r0, [pc, #4]	; (ff44 <SleepTimerStop+0xc>)
    ff3e:	4b02      	ldr	r3, [pc, #8]	; (ff48 <SleepTimerStop+0x10>)
    ff40:	4798      	blx	r3
}
    ff42:	bd10      	pop	{r4, pc}
    ff44:	200037a0 	.word	0x200037a0
    ff48:	000051cd 	.word	0x000051cd

0000ff4c <SystemBlockingWaitMs>:
 * waiting with the MCU in sleep.
 * Find out how long it takes the MCU to go to and wake up from sleep to see if
 * it makes sense to go to sleep at all 
 */
void SystemBlockingWaitMs(uint32_t ms)
{
    ff4c:	b510      	push	{r4, lr}
#ifndef UT
    delay_ms(ms);
    ff4e:	2800      	cmp	r0, #0
    ff50:	d103      	bne.n	ff5a <SystemBlockingWaitMs+0xe>
    ff52:	2001      	movs	r0, #1
    ff54:	4b02      	ldr	r3, [pc, #8]	; (ff60 <SystemBlockingWaitMs+0x14>)
    ff56:	4798      	blx	r3
#endif
}
    ff58:	bd10      	pop	{r4, pc}
    delay_ms(ms);
    ff5a:	4b02      	ldr	r3, [pc, #8]	; (ff64 <SystemBlockingWaitMs+0x18>)
    ff5c:	4798      	blx	r3
    ff5e:	e7fb      	b.n	ff58 <SystemBlockingWaitMs+0xc>
    ff60:	000046ed 	.word	0x000046ed
    ff64:	00004719 	.word	0x00004719

0000ff68 <system_enter_critical_section>:
{

}

void system_enter_critical_section(void)
{
    ff68:	b510      	push	{r4, lr}
	cpu_irq_enter_critical();
    ff6a:	4b01      	ldr	r3, [pc, #4]	; (ff70 <system_enter_critical_section+0x8>)
    ff6c:	4798      	blx	r3
#ifndef UT
	system_interrupt_enter_critical_section();
#endif
}
    ff6e:	bd10      	pop	{r4, pc}
    ff70:	00004aa1 	.word	0x00004aa1

0000ff74 <system_leave_critical_section>:

void system_leave_critical_section(void)
{
    ff74:	b510      	push	{r4, lr}
	cpu_irq_leave_critical();
    ff76:	4b01      	ldr	r3, [pc, #4]	; (ff7c <system_leave_critical_section+0x8>)
    ff78:	4798      	blx	r3
#ifndef UT
	system_interrupt_leave_critical_section();
#endif
}
    ff7a:	bd10      	pop	{r4, pc}
    ff7c:	00004ae1 	.word	0x00004ae1

0000ff80 <PMM_Wakeup>:

/**
* \brief Wakeup from sleep
*/
void PMM_Wakeup(void)
{
    ff80:	b570      	push	{r4, r5, r6, lr}
    uint64_t sleptTimeUs = 0;

    if (PMM_STATE_SLEEP == pmmState)
    ff82:	4b16      	ldr	r3, [pc, #88]	; (ffdc <PMM_Wakeup+0x5c>)
    ff84:	781b      	ldrb	r3, [r3, #0]
    ff86:	2b01      	cmp	r3, #1
    ff88:	d000      	beq.n	ff8c <PMM_Wakeup+0xc>
        {
            sleepReq->pmmWakeupCallback(US_TO_MS(sleptTimeUs));
            sleepReq = NULL;
        }
    }
}
    ff8a:	bd70      	pop	{r4, r5, r6, pc}
		pmmState = PMM_STATE_ACTIVE;
    ff8c:	2200      	movs	r2, #0
    ff8e:	4b13      	ldr	r3, [pc, #76]	; (ffdc <PMM_Wakeup+0x5c>)
    ff90:	701a      	strb	r2, [r3, #0]
        sleptTimeUs = SLEEP_TICKS_TO_US(SleepTimerGetElapsedTime());
    ff92:	4b13      	ldr	r3, [pc, #76]	; (ffe0 <PMM_Wakeup+0x60>)
    ff94:	4798      	blx	r3
    ff96:	4b13      	ldr	r3, [pc, #76]	; (ffe4 <PMM_Wakeup+0x64>)
    ff98:	4798      	blx	r3
    ff9a:	4913      	ldr	r1, [pc, #76]	; (ffe8 <PMM_Wakeup+0x68>)
    ff9c:	4b13      	ldr	r3, [pc, #76]	; (ffec <PMM_Wakeup+0x6c>)
    ff9e:	4798      	blx	r3
    ffa0:	4b13      	ldr	r3, [pc, #76]	; (fff0 <PMM_Wakeup+0x70>)
    ffa2:	4798      	blx	r3
    ffa4:	0004      	movs	r4, r0
    ffa6:	000d      	movs	r5, r1
        SleepTimerStop();
    ffa8:	4b12      	ldr	r3, [pc, #72]	; (fff4 <PMM_Wakeup+0x74>)
    ffaa:	4798      	blx	r3
        SystemTimerSync(sleptTimeUs);
    ffac:	0020      	movs	r0, r4
    ffae:	0029      	movs	r1, r5
    ffb0:	4b11      	ldr	r3, [pc, #68]	; (fff8 <PMM_Wakeup+0x78>)
    ffb2:	4798      	blx	r3
        if (sleepReq && sleepReq->pmmWakeupCallback)
    ffb4:	4b11      	ldr	r3, [pc, #68]	; (fffc <PMM_Wakeup+0x7c>)
    ffb6:	681b      	ldr	r3, [r3, #0]
    ffb8:	2b00      	cmp	r3, #0
    ffba:	d0e6      	beq.n	ff8a <PMM_Wakeup+0xa>
    ffbc:	689e      	ldr	r6, [r3, #8]
    ffbe:	2e00      	cmp	r6, #0
    ffc0:	d0e3      	beq.n	ff8a <PMM_Wakeup+0xa>
            sleepReq->pmmWakeupCallback(US_TO_MS(sleptTimeUs));
    ffc2:	22fa      	movs	r2, #250	; 0xfa
    ffc4:	0092      	lsls	r2, r2, #2
    ffc6:	2300      	movs	r3, #0
    ffc8:	0020      	movs	r0, r4
    ffca:	0029      	movs	r1, r5
    ffcc:	4c0c      	ldr	r4, [pc, #48]	; (10000 <PMM_Wakeup+0x80>)
    ffce:	47a0      	blx	r4
    ffd0:	47b0      	blx	r6
            sleepReq = NULL;
    ffd2:	2200      	movs	r2, #0
    ffd4:	4b09      	ldr	r3, [pc, #36]	; (fffc <PMM_Wakeup+0x7c>)
    ffd6:	601a      	str	r2, [r3, #0]
}
    ffd8:	e7d7      	b.n	ff8a <PMM_Wakeup+0xa>
    ffda:	46c0      	nop			; (mov r8, r8)
    ffdc:	200020c4 	.word	0x200020c4
    ffe0:	0000ff25 	.word	0x0000ff25
    ffe4:	000164f1 	.word	0x000164f1
    ffe8:	41f423d7 	.word	0x41f423d7
    ffec:	00015e99 	.word	0x00015e99
    fff0:	000155d5 	.word	0x000155d5
    fff4:	0000ff39 	.word	0x0000ff39
    fff8:	00010e5d 	.word	0x00010e5d
    fffc:	200020c8 	.word	0x200020c8
   10000:	000154d5 	.word	0x000154d5

00010004 <InitDefault868Channels>:
/*
 * \brief This function initializes all the EU868 Channels to default values
 */
#if (EU_BAND == 1)
void InitDefault868Channels (void)
{
   10004:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    memset (RegParams.pChParams, 0, sizeof(DefaultChannels868) );
   10006:	4c39      	ldr	r4, [pc, #228]	; (100ec <InitDefault868Channels+0xe8>)
   10008:	7920      	ldrb	r0, [r4, #4]
   1000a:	7963      	ldrb	r3, [r4, #5]
   1000c:	021b      	lsls	r3, r3, #8
   1000e:	4303      	orrs	r3, r0
   10010:	79a0      	ldrb	r0, [r4, #6]
   10012:	0400      	lsls	r0, r0, #16
   10014:	4303      	orrs	r3, r0
   10016:	79e0      	ldrb	r0, [r4, #7]
   10018:	0600      	lsls	r0, r0, #24
   1001a:	4318      	orrs	r0, r3
   1001c:	2206      	movs	r2, #6
   1001e:	2100      	movs	r1, #0
   10020:	4e33      	ldr	r6, [pc, #204]	; (100f0 <InitDefault868Channels+0xec>)
   10022:	47b0      	blx	r6
    memcpy (RegParams.pChParams, DefaultChannels868, sizeof(DefaultChannels868) );
   10024:	7920      	ldrb	r0, [r4, #4]
   10026:	7963      	ldrb	r3, [r4, #5]
   10028:	021b      	lsls	r3, r3, #8
   1002a:	4303      	orrs	r3, r0
   1002c:	79a0      	ldrb	r0, [r4, #6]
   1002e:	0400      	lsls	r0, r0, #16
   10030:	4303      	orrs	r3, r0
   10032:	79e0      	ldrb	r0, [r4, #7]
   10034:	0600      	lsls	r0, r0, #24
   10036:	4318      	orrs	r0, r3
   10038:	2206      	movs	r2, #6
   1003a:	492e      	ldr	r1, [pc, #184]	; (100f4 <InitDefault868Channels+0xf0>)
   1003c:	4d2e      	ldr	r5, [pc, #184]	; (100f8 <InitDefault868Channels+0xf4>)
   1003e:	47a8      	blx	r5
    memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels868) );
   10040:	7a20      	ldrb	r0, [r4, #8]
   10042:	7a63      	ldrb	r3, [r4, #9]
   10044:	021b      	lsls	r3, r3, #8
   10046:	4303      	orrs	r3, r0
   10048:	7aa0      	ldrb	r0, [r4, #10]
   1004a:	0400      	lsls	r0, r0, #16
   1004c:	4303      	orrs	r3, r0
   1004e:	7ae0      	ldrb	r0, [r4, #11]
   10050:	0600      	lsls	r0, r0, #24
   10052:	4318      	orrs	r0, r3
   10054:	2224      	movs	r2, #36	; 0x24
   10056:	2100      	movs	r1, #0
   10058:	47b0      	blx	r6
    memcpy (RegParams.pOtherChParams, AdvChannels868, sizeof(AdvChannels868) );	
   1005a:	7a20      	ldrb	r0, [r4, #8]
   1005c:	7a63      	ldrb	r3, [r4, #9]
   1005e:	021b      	lsls	r3, r3, #8
   10060:	4303      	orrs	r3, r0
   10062:	7aa0      	ldrb	r0, [r4, #10]
   10064:	0400      	lsls	r0, r0, #16
   10066:	4303      	orrs	r3, r0
   10068:	7ae0      	ldrb	r0, [r4, #11]
   1006a:	0600      	lsls	r0, r0, #24
   1006c:	4318      	orrs	r0, r3
   1006e:	2224      	movs	r2, #36	; 0x24
   10070:	4922      	ldr	r1, [pc, #136]	; (100fc <InitDefault868Channels+0xf8>)
   10072:	47a8      	blx	r5
	memset (RegParams.pSubBandParams, 0, sizeof(SubBandParams868) );
   10074:	7b20      	ldrb	r0, [r4, #12]
   10076:	7b63      	ldrb	r3, [r4, #13]
   10078:	021b      	lsls	r3, r3, #8
   1007a:	4303      	orrs	r3, r0
   1007c:	7ba0      	ldrb	r0, [r4, #14]
   1007e:	0400      	lsls	r0, r0, #16
   10080:	4303      	orrs	r3, r0
   10082:	7be0      	ldrb	r0, [r4, #15]
   10084:	0600      	lsls	r0, r0, #24
   10086:	4318      	orrs	r0, r3
   10088:	2248      	movs	r2, #72	; 0x48
   1008a:	2100      	movs	r1, #0
   1008c:	47b0      	blx	r6
	memcpy (RegParams.pSubBandParams, SubBandParams868, sizeof(SubBandParams868) );
   1008e:	7b20      	ldrb	r0, [r4, #12]
   10090:	7b63      	ldrb	r3, [r4, #13]
   10092:	021b      	lsls	r3, r3, #8
   10094:	4303      	orrs	r3, r0
   10096:	7ba0      	ldrb	r0, [r4, #14]
   10098:	0400      	lsls	r0, r0, #16
   1009a:	4303      	orrs	r3, r0
   1009c:	7be0      	ldrb	r0, [r4, #15]
   1009e:	0600      	lsls	r0, r0, #24
   100a0:	4318      	orrs	r0, r3
   100a2:	2248      	movs	r2, #72	; 0x48
   100a4:	4916      	ldr	r1, [pc, #88]	; (10100 <InitDefault868Channels+0xfc>)
   100a6:	47a8      	blx	r5
	memset(RegParams.cmnParams.paramsType2.subBandDutyCycle,0,sizeof(SubBandDutyCycle868));
	memcpy(RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycle868,sizeof(SubBandDutyCycle868));
   100a8:	0020      	movs	r0, r4
   100aa:	30af      	adds	r0, #175	; 0xaf
   100ac:	30ff      	adds	r0, #255	; 0xff
   100ae:	220c      	movs	r2, #12
   100b0:	4914      	ldr	r1, [pc, #80]	; (10104 <InitDefault868Channels+0x100>)
   100b2:	47a8      	blx	r5
    for (i = 3; i < RegParams.maxChannels; i++)
   100b4:	232a      	movs	r3, #42	; 0x2a
   100b6:	56e3      	ldrsb	r3, [r4, r3]
   100b8:	2b03      	cmp	r3, #3
   100ba:	dd15      	ble.n	100e8 <InitDefault868Channels+0xe4>
   100bc:	2303      	movs	r3, #3
    {
        // for undefined channels the duty cycle should be a very big value, and the data range a not-valid value
        //duty cycle 0 means no duty cycle limitation, the bigger the duty cycle value, the greater the limitation
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;		
   100be:	480b      	ldr	r0, [pc, #44]	; (100ec <InitDefault868Channels+0xe8>)
   100c0:	25ff      	movs	r5, #255	; 0xff
    for (i = 3; i < RegParams.maxChannels; i++)
   100c2:	242a      	movs	r4, #42	; 0x2a
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;		
   100c4:	7902      	ldrb	r2, [r0, #4]
   100c6:	7941      	ldrb	r1, [r0, #5]
   100c8:	0209      	lsls	r1, r1, #8
   100ca:	4311      	orrs	r1, r2
   100cc:	7982      	ldrb	r2, [r0, #6]
   100ce:	0412      	lsls	r2, r2, #16
   100d0:	4311      	orrs	r1, r2
   100d2:	79c2      	ldrb	r2, [r0, #7]
   100d4:	0612      	lsls	r2, r2, #24
   100d6:	430a      	orrs	r2, r1
   100d8:	0059      	lsls	r1, r3, #1
   100da:	188a      	adds	r2, r1, r2
   100dc:	7055      	strb	r5, [r2, #1]
    for (i = 3; i < RegParams.maxChannels; i++)
   100de:	3301      	adds	r3, #1
   100e0:	b2db      	uxtb	r3, r3
   100e2:	5702      	ldrsb	r2, [r0, r4]
   100e4:	4293      	cmp	r3, r2
   100e6:	dbed      	blt.n	100c4 <InitDefault868Channels+0xc0>
    }
}
   100e8:	bd70      	pop	{r4, r5, r6, pc}
   100ea:	46c0      	nop			; (mov r8, r8)
   100ec:	200037dc 	.word	0x200037dc
   100f0:	0001836d 	.word	0x0001836d
   100f4:	0001aeb8 	.word	0x0001aeb8
   100f8:	0001835b 	.word	0x0001835b
   100fc:	0001ae8c 	.word	0x0001ae8c
   10100:	0001aed8 	.word	0x0001aed8
   10104:	0001aec0 	.word	0x0001aec0

00010108 <InitDefault433Channels>:

/*
 * \brief This function initializes all the EU433 Channels to default values
 */
void InitDefault433Channels (void)
{
   10108:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    memset (RegParams.pChParams, 0, sizeof(DefaultChannels433) );
   1010a:	4c36      	ldr	r4, [pc, #216]	; (101e4 <InitDefault433Channels+0xdc>)
   1010c:	7920      	ldrb	r0, [r4, #4]
   1010e:	7963      	ldrb	r3, [r4, #5]
   10110:	021b      	lsls	r3, r3, #8
   10112:	4303      	orrs	r3, r0
   10114:	79a0      	ldrb	r0, [r4, #6]
   10116:	0400      	lsls	r0, r0, #16
   10118:	4303      	orrs	r3, r0
   1011a:	79e0      	ldrb	r0, [r4, #7]
   1011c:	0600      	lsls	r0, r0, #24
   1011e:	4318      	orrs	r0, r3
   10120:	2206      	movs	r2, #6
   10122:	2100      	movs	r1, #0
   10124:	4e30      	ldr	r6, [pc, #192]	; (101e8 <InitDefault433Channels+0xe0>)
   10126:	47b0      	blx	r6
    memcpy (RegParams.pChParams, DefaultChannels433, sizeof(DefaultChannels433) );
   10128:	7920      	ldrb	r0, [r4, #4]
   1012a:	7963      	ldrb	r3, [r4, #5]
   1012c:	021b      	lsls	r3, r3, #8
   1012e:	4303      	orrs	r3, r0
   10130:	79a0      	ldrb	r0, [r4, #6]
   10132:	0400      	lsls	r0, r0, #16
   10134:	4303      	orrs	r3, r0
   10136:	79e0      	ldrb	r0, [r4, #7]
   10138:	0600      	lsls	r0, r0, #24
   1013a:	4318      	orrs	r0, r3
   1013c:	2206      	movs	r2, #6
   1013e:	492b      	ldr	r1, [pc, #172]	; (101ec <InitDefault433Channels+0xe4>)
   10140:	4d2b      	ldr	r5, [pc, #172]	; (101f0 <InitDefault433Channels+0xe8>)
   10142:	47a8      	blx	r5
    memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels433) );
   10144:	7a20      	ldrb	r0, [r4, #8]
   10146:	7a63      	ldrb	r3, [r4, #9]
   10148:	021b      	lsls	r3, r3, #8
   1014a:	4303      	orrs	r3, r0
   1014c:	7aa0      	ldrb	r0, [r4, #10]
   1014e:	0400      	lsls	r0, r0, #16
   10150:	4303      	orrs	r3, r0
   10152:	7ae0      	ldrb	r0, [r4, #11]
   10154:	0600      	lsls	r0, r0, #24
   10156:	4318      	orrs	r0, r3
   10158:	2224      	movs	r2, #36	; 0x24
   1015a:	2100      	movs	r1, #0
   1015c:	47b0      	blx	r6
    memcpy (RegParams.pOtherChParams, AdvChannels433, sizeof(AdvChannels433) );
   1015e:	7a20      	ldrb	r0, [r4, #8]
   10160:	7a63      	ldrb	r3, [r4, #9]
   10162:	021b      	lsls	r3, r3, #8
   10164:	4303      	orrs	r3, r0
   10166:	7aa0      	ldrb	r0, [r4, #10]
   10168:	0400      	lsls	r0, r0, #16
   1016a:	4303      	orrs	r3, r0
   1016c:	7ae0      	ldrb	r0, [r4, #11]
   1016e:	0600      	lsls	r0, r0, #24
   10170:	4318      	orrs	r0, r3
   10172:	2224      	movs	r2, #36	; 0x24
   10174:	491f      	ldr	r1, [pc, #124]	; (101f4 <InitDefault433Channels+0xec>)
   10176:	47a8      	blx	r5
	memset (RegParams.pSubBandParams, 0, sizeof(SubBandParams433) );
   10178:	7b20      	ldrb	r0, [r4, #12]
   1017a:	7b63      	ldrb	r3, [r4, #13]
   1017c:	021b      	lsls	r3, r3, #8
   1017e:	4303      	orrs	r3, r0
   10180:	7ba0      	ldrb	r0, [r4, #14]
   10182:	0400      	lsls	r0, r0, #16
   10184:	4303      	orrs	r3, r0
   10186:	7be0      	ldrb	r0, [r4, #15]
   10188:	0600      	lsls	r0, r0, #24
   1018a:	4318      	orrs	r0, r3
   1018c:	220c      	movs	r2, #12
   1018e:	2100      	movs	r1, #0
   10190:	47b0      	blx	r6
	memcpy (RegParams.pSubBandParams, SubBandParams433, sizeof(SubBandParams433) );	
   10192:	7b20      	ldrb	r0, [r4, #12]
   10194:	7b63      	ldrb	r3, [r4, #13]
   10196:	021b      	lsls	r3, r3, #8
   10198:	4303      	orrs	r3, r0
   1019a:	7ba0      	ldrb	r0, [r4, #14]
   1019c:	0400      	lsls	r0, r0, #16
   1019e:	4303      	orrs	r3, r0
   101a0:	7be0      	ldrb	r0, [r4, #15]
   101a2:	0600      	lsls	r0, r0, #24
   101a4:	4318      	orrs	r0, r3
   101a6:	220c      	movs	r2, #12
   101a8:	4913      	ldr	r1, [pc, #76]	; (101f8 <InitDefault433Channels+0xf0>)
   101aa:	47a8      	blx	r5
	
    for (i = 3; i < RegParams.maxChannels; i++)
   101ac:	232a      	movs	r3, #42	; 0x2a
   101ae:	56e3      	ldrsb	r3, [r4, r3]
   101b0:	2b03      	cmp	r3, #3
   101b2:	dd15      	ble.n	101e0 <InitDefault433Channels+0xd8>
   101b4:	2303      	movs	r3, #3
    {
        // for undefined channels the duty cycle should be a very big value, and the data range a not-valid value
        //duty cycle 0 means no duty cycle limitation, the bigger the duty cycle value, the greater the limitation
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;
   101b6:	480b      	ldr	r0, [pc, #44]	; (101e4 <InitDefault433Channels+0xdc>)
   101b8:	25ff      	movs	r5, #255	; 0xff
    for (i = 3; i < RegParams.maxChannels; i++)
   101ba:	242a      	movs	r4, #42	; 0x2a
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;
   101bc:	7902      	ldrb	r2, [r0, #4]
   101be:	7941      	ldrb	r1, [r0, #5]
   101c0:	0209      	lsls	r1, r1, #8
   101c2:	4311      	orrs	r1, r2
   101c4:	7982      	ldrb	r2, [r0, #6]
   101c6:	0412      	lsls	r2, r2, #16
   101c8:	4311      	orrs	r1, r2
   101ca:	79c2      	ldrb	r2, [r0, #7]
   101cc:	0612      	lsls	r2, r2, #24
   101ce:	430a      	orrs	r2, r1
   101d0:	0059      	lsls	r1, r3, #1
   101d2:	188a      	adds	r2, r1, r2
   101d4:	7055      	strb	r5, [r2, #1]
    for (i = 3; i < RegParams.maxChannels; i++)
   101d6:	3301      	adds	r3, #1
   101d8:	b2db      	uxtb	r3, r3
   101da:	5702      	ldrsb	r2, [r0, r4]
   101dc:	4293      	cmp	r3, r2
   101de:	dbed      	blt.n	101bc <InitDefault433Channels+0xb4>
    }
}
   101e0:	bd70      	pop	{r4, r5, r6, pc}
   101e2:	46c0      	nop			; (mov r8, r8)
   101e4:	200037dc 	.word	0x200037dc
   101e8:	0001836d 	.word	0x0001836d
   101ec:	0001aeb0 	.word	0x0001aeb0
   101f0:	0001835b 	.word	0x0001835b
   101f4:	0001ae68 	.word	0x0001ae68
   101f8:	0001aecc 	.word	0x0001aecc

000101fc <InitDefault920Channels>:
/*
 * \brief This function initializes all the IN865 Channels to default values
 */
#if (JPN_BAND == 1)
void InitDefault920Channels (void)
{
   101fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
    memset (RegParams.pChParams, 0, sizeof(DefaultChannels923JP) );
   101fe:	4c40      	ldr	r4, [pc, #256]	; (10300 <InitDefault920Channels+0x104>)
   10200:	7920      	ldrb	r0, [r4, #4]
   10202:	7963      	ldrb	r3, [r4, #5]
   10204:	021b      	lsls	r3, r3, #8
   10206:	4303      	orrs	r3, r0
   10208:	79a0      	ldrb	r0, [r4, #6]
   1020a:	0400      	lsls	r0, r0, #16
   1020c:	4303      	orrs	r3, r0
   1020e:	79e0      	ldrb	r0, [r4, #7]
   10210:	0600      	lsls	r0, r0, #24
   10212:	4318      	orrs	r0, r3
   10214:	2204      	movs	r2, #4
   10216:	2100      	movs	r1, #0
   10218:	4e3a      	ldr	r6, [pc, #232]	; (10304 <InitDefault920Channels+0x108>)
   1021a:	47b0      	blx	r6
	memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels923JP) );
   1021c:	7a20      	ldrb	r0, [r4, #8]
   1021e:	7a63      	ldrb	r3, [r4, #9]
   10220:	021b      	lsls	r3, r3, #8
   10222:	4303      	orrs	r3, r0
   10224:	7aa0      	ldrb	r0, [r4, #10]
   10226:	0400      	lsls	r0, r0, #16
   10228:	4303      	orrs	r3, r0
   1022a:	7ae0      	ldrb	r0, [r4, #11]
   1022c:	0600      	lsls	r0, r0, #24
   1022e:	4318      	orrs	r0, r3
   10230:	2218      	movs	r2, #24
   10232:	2100      	movs	r1, #0
   10234:	47b0      	blx	r6
    memcpy (RegParams.pChParams, DefaultChannels923JP, sizeof(DefaultChannels923JP) );
   10236:	7920      	ldrb	r0, [r4, #4]
   10238:	7963      	ldrb	r3, [r4, #5]
   1023a:	021b      	lsls	r3, r3, #8
   1023c:	4303      	orrs	r3, r0
   1023e:	79a0      	ldrb	r0, [r4, #6]
   10240:	0400      	lsls	r0, r0, #16
   10242:	4303      	orrs	r3, r0
   10244:	79e0      	ldrb	r0, [r4, #7]
   10246:	0600      	lsls	r0, r0, #24
   10248:	4318      	orrs	r0, r3
   1024a:	2204      	movs	r2, #4
   1024c:	492e      	ldr	r1, [pc, #184]	; (10308 <InitDefault920Channels+0x10c>)
   1024e:	4d2f      	ldr	r5, [pc, #188]	; (1030c <InitDefault920Channels+0x110>)
   10250:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels923JP, sizeof(AdvChannels923JP) );
   10252:	7a20      	ldrb	r0, [r4, #8]
   10254:	7a63      	ldrb	r3, [r4, #9]
   10256:	021b      	lsls	r3, r3, #8
   10258:	4303      	orrs	r3, r0
   1025a:	7aa0      	ldrb	r0, [r4, #10]
   1025c:	0400      	lsls	r0, r0, #16
   1025e:	4303      	orrs	r3, r0
   10260:	7ae0      	ldrb	r0, [r4, #11]
   10262:	0600      	lsls	r0, r0, #24
   10264:	4318      	orrs	r0, r3
   10266:	2218      	movs	r2, #24
   10268:	4929      	ldr	r1, [pc, #164]	; (10310 <InitDefault920Channels+0x114>)
   1026a:	47a8      	blx	r5
	memset (RegParams.pSubBandParams, 0, sizeof(SubBandParamsJP923) );
   1026c:	7b20      	ldrb	r0, [r4, #12]
   1026e:	7b63      	ldrb	r3, [r4, #13]
   10270:	021b      	lsls	r3, r3, #8
   10272:	4303      	orrs	r3, r0
   10274:	7ba0      	ldrb	r0, [r4, #14]
   10276:	0400      	lsls	r0, r0, #16
   10278:	4303      	orrs	r3, r0
   1027a:	7be0      	ldrb	r0, [r4, #15]
   1027c:	0600      	lsls	r0, r0, #24
   1027e:	4318      	orrs	r0, r3
   10280:	2218      	movs	r2, #24
   10282:	2100      	movs	r1, #0
   10284:	47b0      	blx	r6
	memcpy (RegParams.pSubBandParams, SubBandParamsJP923, sizeof(SubBandParamsJP923) );
   10286:	7b20      	ldrb	r0, [r4, #12]
   10288:	7b63      	ldrb	r3, [r4, #13]
   1028a:	021b      	lsls	r3, r3, #8
   1028c:	4303      	orrs	r3, r0
   1028e:	7ba0      	ldrb	r0, [r4, #14]
   10290:	0400      	lsls	r0, r0, #16
   10292:	4303      	orrs	r3, r0
   10294:	7be0      	ldrb	r0, [r4, #15]
   10296:	0600      	lsls	r0, r0, #24
   10298:	4318      	orrs	r0, r3
   1029a:	2218      	movs	r2, #24
   1029c:	491d      	ldr	r1, [pc, #116]	; (10314 <InitDefault920Channels+0x118>)
   1029e:	47a8      	blx	r5
	memset (RegParams.cmnParams.paramsType2.subBandDutyCycle,0,sizeof(SubBandDutyCycleJP923));
	memcpy (RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycleJP923,sizeof(SubBandDutyCycleJP923));
   102a0:	0020      	movs	r0, r4
   102a2:	30af      	adds	r0, #175	; 0xaf
   102a4:	30ff      	adds	r0, #255	; 0xff
   102a6:	2204      	movs	r2, #4
   102a8:	491b      	ldr	r1, [pc, #108]	; (10318 <InitDefault920Channels+0x11c>)
   102aa:	47a8      	blx	r5
    for (i = 2; i < RegParams.maxChannels; i++)
   102ac:	232a      	movs	r3, #42	; 0x2a
   102ae:	56e3      	ldrsb	r3, [r4, r3]
   102b0:	2b02      	cmp	r3, #2
   102b2:	dd1f      	ble.n	102f4 <InitDefault920Channels+0xf8>
   102b4:	2302      	movs	r3, #2
   102b6:	2202      	movs	r2, #2
    {
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
   102b8:	4911      	ldr	r1, [pc, #68]	; (10300 <InitDefault920Channels+0x104>)
   102ba:	27ff      	movs	r7, #255	; 0xff
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
   102bc:	2500      	movs	r5, #0
    for (i = 2; i < RegParams.maxChannels; i++)
   102be:	262a      	movs	r6, #42	; 0x2a
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
   102c0:	7908      	ldrb	r0, [r1, #4]
   102c2:	794c      	ldrb	r4, [r1, #5]
   102c4:	0224      	lsls	r4, r4, #8
   102c6:	4304      	orrs	r4, r0
   102c8:	7988      	ldrb	r0, [r1, #6]
   102ca:	0400      	lsls	r0, r0, #16
   102cc:	4304      	orrs	r4, r0
   102ce:	79c8      	ldrb	r0, [r1, #7]
   102d0:	0600      	lsls	r0, r0, #24
   102d2:	4320      	orrs	r0, r4
   102d4:	0054      	lsls	r4, r2, #1
   102d6:	1820      	adds	r0, r4, r0
   102d8:	7047      	strb	r7, [r0, #1]
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
   102da:	3358      	adds	r3, #88	; 0x58
   102dc:	009b      	lsls	r3, r3, #2
   102de:	18cb      	adds	r3, r1, r3
   102e0:	725d      	strb	r5, [r3, #9]
   102e2:	729d      	strb	r5, [r3, #10]
   102e4:	72dd      	strb	r5, [r3, #11]
   102e6:	731d      	strb	r5, [r3, #12]
    for (i = 2; i < RegParams.maxChannels; i++)
   102e8:	3201      	adds	r2, #1
   102ea:	b2d2      	uxtb	r2, r2
   102ec:	0013      	movs	r3, r2
   102ee:	5788      	ldrsb	r0, [r1, r6]
   102f0:	4282      	cmp	r2, r0
   102f2:	dbe5      	blt.n	102c0 <InitDefault920Channels+0xc4>
    }
	RegParams.lastUsedChannelIndex = UINT8_MAX;
   102f4:	21ff      	movs	r1, #255	; 0xff
   102f6:	2330      	movs	r3, #48	; 0x30
   102f8:	4a01      	ldr	r2, [pc, #4]	; (10300 <InitDefault920Channels+0x104>)
   102fa:	54d1      	strb	r1, [r2, r3]
}
   102fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   102fe:	46c0      	nop			; (mov r8, r8)
   10300:	200037dc 	.word	0x200037dc
   10304:	0001836d 	.word	0x0001836d
   10308:	0001af38 	.word	0x0001af38
   1030c:	0001835b 	.word	0x0001835b
   10310:	0001af20 	.word	0x0001af20
   10314:	0001af40 	.word	0x0001af40
   10318:	0001af3c 	.word	0x0001af3c

0001031c <InitDefault920ChannelsKR>:
/*
 * \brief This function initializes all the IN865 Channels to default values
 */
#if (KR_BAND == 1)
void InitDefault920ChannelsKR (void)
{
   1031c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1031e:	46d6      	mov	lr, sl
   10320:	464f      	mov	r7, r9
   10322:	4646      	mov	r6, r8
   10324:	b5c0      	push	{r6, r7, lr}
    uint8_t i;
    memset (RegParams.pChParams, 0, sizeof(DefaultChannels920KR) );
   10326:	4c46      	ldr	r4, [pc, #280]	; (10440 <InitDefault920ChannelsKR+0x124>)
   10328:	7920      	ldrb	r0, [r4, #4]
   1032a:	7963      	ldrb	r3, [r4, #5]
   1032c:	021b      	lsls	r3, r3, #8
   1032e:	4303      	orrs	r3, r0
   10330:	79a0      	ldrb	r0, [r4, #6]
   10332:	0400      	lsls	r0, r0, #16
   10334:	4303      	orrs	r3, r0
   10336:	79e0      	ldrb	r0, [r4, #7]
   10338:	0600      	lsls	r0, r0, #24
   1033a:	4318      	orrs	r0, r3
   1033c:	2206      	movs	r2, #6
   1033e:	2100      	movs	r1, #0
   10340:	4d40      	ldr	r5, [pc, #256]	; (10444 <InitDefault920ChannelsKR+0x128>)
   10342:	47a8      	blx	r5
	memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels920KR) );
   10344:	7a20      	ldrb	r0, [r4, #8]
   10346:	7a63      	ldrb	r3, [r4, #9]
   10348:	021b      	lsls	r3, r3, #8
   1034a:	4303      	orrs	r3, r0
   1034c:	7aa0      	ldrb	r0, [r4, #10]
   1034e:	0400      	lsls	r0, r0, #16
   10350:	4303      	orrs	r3, r0
   10352:	7ae0      	ldrb	r0, [r4, #11]
   10354:	0600      	lsls	r0, r0, #24
   10356:	4318      	orrs	r0, r3
   10358:	2224      	movs	r2, #36	; 0x24
   1035a:	2100      	movs	r1, #0
   1035c:	47a8      	blx	r5
    memcpy (RegParams.pChParams, DefaultChannels920KR, sizeof(DefaultChannels920KR) );
   1035e:	7920      	ldrb	r0, [r4, #4]
   10360:	7963      	ldrb	r3, [r4, #5]
   10362:	021b      	lsls	r3, r3, #8
   10364:	4303      	orrs	r3, r0
   10366:	79a0      	ldrb	r0, [r4, #6]
   10368:	0400      	lsls	r0, r0, #16
   1036a:	4303      	orrs	r3, r0
   1036c:	79e0      	ldrb	r0, [r4, #7]
   1036e:	0600      	lsls	r0, r0, #24
   10370:	4318      	orrs	r0, r3
   10372:	2206      	movs	r2, #6
   10374:	4934      	ldr	r1, [pc, #208]	; (10448 <InitDefault920ChannelsKR+0x12c>)
   10376:	4d35      	ldr	r5, [pc, #212]	; (1044c <InitDefault920ChannelsKR+0x130>)
   10378:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels920KR, sizeof(AdvChannels920KR) );
   1037a:	7a20      	ldrb	r0, [r4, #8]
   1037c:	7a63      	ldrb	r3, [r4, #9]
   1037e:	021b      	lsls	r3, r3, #8
   10380:	4303      	orrs	r3, r0
   10382:	7aa0      	ldrb	r0, [r4, #10]
   10384:	0400      	lsls	r0, r0, #16
   10386:	4303      	orrs	r3, r0
   10388:	7ae0      	ldrb	r0, [r4, #11]
   1038a:	0600      	lsls	r0, r0, #24
   1038c:	4318      	orrs	r0, r3
   1038e:	2224      	movs	r2, #36	; 0x24
   10390:	492f      	ldr	r1, [pc, #188]	; (10450 <InitDefault920ChannelsKR+0x134>)
   10392:	47a8      	blx	r5
    for (i = 3; i < RegParams.maxChannels; i++)
   10394:	232a      	movs	r3, #42	; 0x2a
   10396:	56e3      	ldrsb	r3, [r4, r3]
   10398:	2b03      	cmp	r3, #3
   1039a:	dd48      	ble.n	1042e <InitDefault920ChannelsKR+0x112>
   1039c:	2103      	movs	r1, #3
   1039e:	2003      	movs	r0, #3
    {
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
   103a0:	4b27      	ldr	r3, [pc, #156]	; (10440 <InitDefault920ChannelsKR+0x124>)
   103a2:	26ff      	movs	r6, #255	; 0xff
		RegParams.pChParams[i].status = DISABLED;
   103a4:	2500      	movs	r5, #0
		RegParams.pOtherChParams[i].joinRequestChannel = DISABLED;
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = UINT8_MAX;
   103a6:	22e1      	movs	r2, #225	; 0xe1
   103a8:	0052      	lsls	r2, r2, #1
   103aa:	4690      	mov	r8, r2
   103ac:	46b4      	mov	ip, r6
    for (i = 3; i < RegParams.maxChannels; i++)
   103ae:	3a99      	subs	r2, #153	; 0x99
   103b0:	3aff      	subs	r2, #255	; 0xff
   103b2:	4692      	mov	sl, r2
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
   103b4:	0042      	lsls	r2, r0, #1
   103b6:	791c      	ldrb	r4, [r3, #4]
   103b8:	46a1      	mov	r9, r4
   103ba:	795c      	ldrb	r4, [r3, #5]
   103bc:	0224      	lsls	r4, r4, #8
   103be:	464f      	mov	r7, r9
   103c0:	4327      	orrs	r7, r4
   103c2:	799c      	ldrb	r4, [r3, #6]
   103c4:	0424      	lsls	r4, r4, #16
   103c6:	4327      	orrs	r7, r4
   103c8:	79dc      	ldrb	r4, [r3, #7]
   103ca:	0624      	lsls	r4, r4, #24
   103cc:	433c      	orrs	r4, r7
   103ce:	18a4      	adds	r4, r4, r2
   103d0:	7066      	strb	r6, [r4, #1]
		RegParams.pChParams[i].status = DISABLED;
   103d2:	791c      	ldrb	r4, [r3, #4]
   103d4:	46a1      	mov	r9, r4
   103d6:	795c      	ldrb	r4, [r3, #5]
   103d8:	0224      	lsls	r4, r4, #8
   103da:	464f      	mov	r7, r9
   103dc:	4327      	orrs	r7, r4
   103de:	799c      	ldrb	r4, [r3, #6]
   103e0:	0424      	lsls	r4, r4, #16
   103e2:	4327      	orrs	r7, r4
   103e4:	79dc      	ldrb	r4, [r3, #7]
   103e6:	0624      	lsls	r4, r4, #24
   103e8:	433c      	orrs	r4, r7
   103ea:	54a5      	strb	r5, [r4, r2]
		RegParams.pOtherChParams[i].joinRequestChannel = DISABLED;
   103ec:	7a1c      	ldrb	r4, [r3, #8]
   103ee:	46a1      	mov	r9, r4
   103f0:	7a5c      	ldrb	r4, [r3, #9]
   103f2:	0224      	lsls	r4, r4, #8
   103f4:	464f      	mov	r7, r9
   103f6:	4327      	orrs	r7, r4
   103f8:	7a9c      	ldrb	r4, [r3, #10]
   103fa:	0424      	lsls	r4, r4, #16
   103fc:	4327      	orrs	r7, r4
   103fe:	7adc      	ldrb	r4, [r3, #11]
   10400:	0624      	lsls	r4, r4, #24
   10402:	433c      	orrs	r4, r7
   10404:	1812      	adds	r2, r2, r0
   10406:	0092      	lsls	r2, r2, #2
   10408:	1912      	adds	r2, r2, r4
   1040a:	7255      	strb	r5, [r2, #9]
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = UINT8_MAX;
   1040c:	4642      	mov	r2, r8
   1040e:	4664      	mov	r4, ip
   10410:	549c      	strb	r4, [r3, r2]
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
   10412:	3158      	adds	r1, #88	; 0x58
   10414:	0089      	lsls	r1, r1, #2
   10416:	1859      	adds	r1, r3, r1
   10418:	724d      	strb	r5, [r1, #9]
   1041a:	728d      	strb	r5, [r1, #10]
   1041c:	72cd      	strb	r5, [r1, #11]
   1041e:	730d      	strb	r5, [r1, #12]
    for (i = 3; i < RegParams.maxChannels; i++)
   10420:	3001      	adds	r0, #1
   10422:	b2c0      	uxtb	r0, r0
   10424:	0001      	movs	r1, r0
   10426:	4652      	mov	r2, sl
   10428:	569a      	ldrsb	r2, [r3, r2]
   1042a:	4290      	cmp	r0, r2
   1042c:	dbc2      	blt.n	103b4 <InitDefault920ChannelsKR+0x98>
    }
	RegParams.lastUsedChannelIndex = UINT8_MAX;
   1042e:	21ff      	movs	r1, #255	; 0xff
   10430:	2330      	movs	r3, #48	; 0x30
   10432:	4a03      	ldr	r2, [pc, #12]	; (10440 <InitDefault920ChannelsKR+0x124>)
   10434:	54d1      	strb	r1, [r2, r3]
}
   10436:	bc1c      	pop	{r2, r3, r4}
   10438:	4690      	mov	r8, r2
   1043a:	4699      	mov	r9, r3
   1043c:	46a2      	mov	sl, r4
   1043e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10440:	200037dc 	.word	0x200037dc
   10444:	0001836d 	.word	0x0001836d
   10448:	0001af7c 	.word	0x0001af7c
   1044c:	0001835b 	.word	0x0001835b
   10450:	0001af58 	.word	0x0001af58

00010454 <LORAREG_GetAttr>:
 * \param[out] Result of the GET operation
 * \retval LORAWAN_SUCCESS : If GET is successful
 *	LORAWAN_INVALID_PARAMETER if the input attribute or the attribute type is invalid
 */
StackRetStatus_t LORAREG_GetAttr(LorawanRegionalAttributes_t attrType, void *attrInput, void *attrOutput)
{
   10454:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
   10456:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
   10458:	283c      	cmp	r0, #60	; 0x3c
   1045a:	d901      	bls.n	10460 <LORAREG_GetAttr+0xc>
	{
	    result = pGetAttr[attrType](attrType, attrInput,attrOutput);	
	}

	return result;
}
   1045c:	0018      	movs	r0, r3
   1045e:	bd10      	pop	{r4, pc}
	    result = pGetAttr[attrType](attrType, attrInput,attrOutput);	
   10460:	0084      	lsls	r4, r0, #2
   10462:	4b02      	ldr	r3, [pc, #8]	; (1046c <LORAREG_GetAttr+0x18>)
   10464:	58e3      	ldr	r3, [r4, r3]
   10466:	4798      	blx	r3
   10468:	0003      	movs	r3, r0
   1046a:	e7f7      	b.n	1045c <LORAREG_GetAttr+0x8>
   1046c:	200020cc 	.word	0x200020cc

00010470 <LORAREG_ValidateAttr>:
 * \param[in] attrInput Input used to validate the attribute value
 * \retval LORAWAN_SUCCESS : If Validate is successful
 *	LORAWAN_INVALID_PARAMETER if the input attribute or the attribute type is invalid
 */
StackRetStatus_t LORAREG_ValidateAttr(LorawanRegionalAttributes_t attrType, void *attrInput)
{
   10470:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
   10472:	230a      	movs	r3, #10
	
	if(attrType < REG_NUM_ATTRIBUTES)
   10474:	283c      	cmp	r0, #60	; 0x3c
   10476:	d901      	bls.n	1047c <LORAREG_ValidateAttr+0xc>
	{
	    result = pValidateAttr[attrType](attrType, attrInput);		
	}

	return result;
}
   10478:	0018      	movs	r0, r3
   1047a:	bd10      	pop	{r4, pc}
	    result = pValidateAttr[attrType](attrType, attrInput);		
   1047c:	0082      	lsls	r2, r0, #2
   1047e:	4b02      	ldr	r3, [pc, #8]	; (10488 <LORAREG_ValidateAttr+0x18>)
   10480:	58d3      	ldr	r3, [r2, r3]
   10482:	4798      	blx	r3
   10484:	0003      	movs	r3, r0
   10486:	e7f7      	b.n	10478 <LORAREG_ValidateAttr+0x8>
   10488:	200022b4 	.word	0x200022b4

0001048c <LORAREG_SetAttr>:
 * \param[in] attrInput Input used to update the attribute value
 * \retval LORAWAN_SUCCESS : If Update is successful
 *	LORAWAN_INVALID_PARAMETER if the input attribute or the attribute type is invalid
 */
StackRetStatus_t LORAREG_SetAttr(LorawanRegionalAttributes_t attrType, void *attrInput)
{
   1048c:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
   1048e:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
   10490:	283c      	cmp	r0, #60	; 0x3c
   10492:	d901      	bls.n	10498 <LORAREG_SetAttr+0xc>
	{
	    result = pSetAttr[attrType](attrType, attrInput);		
	}

	return result;
}
   10494:	0018      	movs	r0, r3
   10496:	bd10      	pop	{r4, pc}
	    result = pSetAttr[attrType](attrType, attrInput);		
   10498:	0082      	lsls	r2, r0, #2
   1049a:	4b02      	ldr	r3, [pc, #8]	; (104a4 <LORAREG_SetAttr+0x18>)
   1049c:	58d3      	ldr	r3, [r2, r3]
   1049e:	4798      	blx	r3
   104a0:	0003      	movs	r3, r0
   104a2:	e7f7      	b.n	10494 <LORAREG_SetAttr+0x8>
   104a4:	200021c0 	.word	0x200021c0

000104a8 <setDefaultTxPower>:
}
#endif
StackRetStatus_t setDefaultTxPower(IsmBand_t ismBand)
{   
	StackRetStatus_t result = LORAWAN_SUCCESS;
	if(ismBand == ISM_EU868)
   104a8:	2800      	cmp	r0, #0
   104aa:	d00e      	beq.n	104ca <setDefaultTxPower+0x22>
	{
			RegParams.MacTxPower = MAC_DEF_TX_POWER_EU;
	}
	else if(ismBand == ISM_JPN923)
   104ac:	2805      	cmp	r0, #5
   104ae:	d013      	beq.n	104d8 <setDefaultTxPower+0x30>
	{
		RegParams.MacTxPower = MAC_DEF_TX_POWER_JP;
	}
	else if (ismBand == ISM_KR920)
   104b0:	2804      	cmp	r0, #4
   104b2:	d017      	beq.n	104e4 <setDefaultTxPower+0x3c>
	}
	else if (ismBand == ISM_ASBAND)
	{
		RegParams.MacTxPower = MAC_DEF_TX_POWER_AS;
	}
	else if(ismBand == ISM_AU915)
   104b4:	2803      	cmp	r0, #3
   104b6:	d01b      	beq.n	104f0 <setDefaultTxPower+0x48>
	{
		RegParams.MacTxPower = MAC_DEF_TX_POWER_NA;
	}
	else
	{
		result = LORAWAN_INVALID_PARAMETER;
   104b8:	230a      	movs	r3, #10
	else if(ismBand == ISM_NA915)
   104ba:	2802      	cmp	r0, #2
   104bc:	d10a      	bne.n	104d4 <setDefaultTxPower+0x2c>
		RegParams.MacTxPower = MAC_DEF_TX_POWER_NA;
   104be:	2107      	movs	r1, #7
   104c0:	331d      	adds	r3, #29
   104c2:	4a0e      	ldr	r2, [pc, #56]	; (104fc <setDefaultTxPower+0x54>)
   104c4:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
   104c6:	3b1f      	subs	r3, #31
   104c8:	e004      	b.n	104d4 <setDefaultTxPower+0x2c>
			RegParams.MacTxPower = MAC_DEF_TX_POWER_EU;
   104ca:	2101      	movs	r1, #1
   104cc:	2327      	movs	r3, #39	; 0x27
   104ce:	4a0b      	ldr	r2, [pc, #44]	; (104fc <setDefaultTxPower+0x54>)
   104d0:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
   104d2:	3b1f      	subs	r3, #31
	}
#if (ENABLE_PDS==1)
	PDS_STORE(RegParams.MacTxPower);
#endif
	return result;
}
   104d4:	0018      	movs	r0, r3
   104d6:	4770      	bx	lr
		RegParams.MacTxPower = MAC_DEF_TX_POWER_JP;
   104d8:	2101      	movs	r1, #1
   104da:	2327      	movs	r3, #39	; 0x27
   104dc:	4a07      	ldr	r2, [pc, #28]	; (104fc <setDefaultTxPower+0x54>)
   104de:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
   104e0:	3b1f      	subs	r3, #31
   104e2:	e7f7      	b.n	104d4 <setDefaultTxPower+0x2c>
		RegParams.MacTxPower = MAC_DEF_TX_POWER_KR;
   104e4:	2101      	movs	r1, #1
   104e6:	2327      	movs	r3, #39	; 0x27
   104e8:	4a04      	ldr	r2, [pc, #16]	; (104fc <setDefaultTxPower+0x54>)
   104ea:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
   104ec:	3b1f      	subs	r3, #31
   104ee:	e7f1      	b.n	104d4 <setDefaultTxPower+0x2c>
		RegParams.MacTxPower = MAC_DEF_TX_POWER_AU;
   104f0:	2107      	movs	r1, #7
   104f2:	2327      	movs	r3, #39	; 0x27
   104f4:	4a01      	ldr	r2, [pc, #4]	; (104fc <setDefaultTxPower+0x54>)
   104f6:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
   104f8:	3b1f      	subs	r3, #31
   104fa:	e7eb      	b.n	104d4 <setDefaultTxPower+0x2c>
   104fc:	200037dc 	.word	0x200037dc

00010500 <Enableallchannels>:
	}
	return status;
}
#endif
void Enableallchannels()
{
   10500:	b510      	push	{r4, lr}
   10502:	2000      	movs	r0, #0
	for(uint8_t i = 0; i < (NO_OF_CH_IN_SUBBAND * (MAX_SUBBANDS + 1)); i++)
	{
		RegParams.pChParams[i].status = ENABLED;
   10504:	490a      	ldr	r1, [pc, #40]	; (10530 <Enableallchannels+0x30>)
   10506:	2401      	movs	r4, #1
   10508:	790b      	ldrb	r3, [r1, #4]
   1050a:	794a      	ldrb	r2, [r1, #5]
   1050c:	0212      	lsls	r2, r2, #8
   1050e:	431a      	orrs	r2, r3
   10510:	798b      	ldrb	r3, [r1, #6]
   10512:	041b      	lsls	r3, r3, #16
   10514:	431a      	orrs	r2, r3
   10516:	79cb      	ldrb	r3, [r1, #7]
   10518:	061b      	lsls	r3, r3, #24
   1051a:	4313      	orrs	r3, r2
   1051c:	541c      	strb	r4, [r3, r0]
   1051e:	3002      	adds	r0, #2
	for(uint8_t i = 0; i < (NO_OF_CH_IN_SUBBAND * (MAX_SUBBANDS + 1)); i++)
   10520:	2890      	cmp	r0, #144	; 0x90
   10522:	d1f1      	bne.n	10508 <Enableallchannels+0x8>
	}
	RegParams.cmnParams.paramsType1.lastUsedSB = 0;
   10524:	2100      	movs	r1, #0
   10526:	23ac      	movs	r3, #172	; 0xac
   10528:	005b      	lsls	r3, r3, #1
   1052a:	4a01      	ldr	r2, [pc, #4]	; (10530 <Enableallchannels+0x30>)
   1052c:	54d1      	strb	r1, [r2, r3]
#if (ENABLE_PDS == 1)
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
	PDS_STORE(RegParams.regParamItems.lastUsedSB);
#endif
}
   1052e:	bd10      	pop	{r4, pc}
   10530:	200037dc 	.word	0x200037dc

00010534 <LORAREG_EnableallChannels>:
StackRetStatus_t LORAREG_EnableallChannels(IsmBand_t ismBand)
{
   10534:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_SUCCESS;
	if(ismBand == ISM_EU868)
   10536:	2800      	cmp	r0, #0
   10538:	d00a      	beq.n	10550 <LORAREG_EnableallChannels+0x1c>
	{
		 InitDefault868Channels();
	}
	else if (ismBand == ISM_EU433)
   1053a:	2801      	cmp	r0, #1
   1053c:	d00b      	beq.n	10556 <LORAREG_EnableallChannels+0x22>
	{
		 InitDefault433Channels();
	}
	else if(ismBand == ISM_JPN923)
   1053e:	2805      	cmp	r0, #5
   10540:	d00c      	beq.n	1055c <LORAREG_EnableallChannels+0x28>
	{
		 InitDefault920Channels();	
	}
	else if (ismBand == ISM_KR920)
   10542:	2804      	cmp	r0, #4
   10544:	d00d      	beq.n	10562 <LORAREG_EnableallChannels+0x2e>
	}
	else if (ismBand == ISM_ASBAND)
	{
		 InitDefault923Channels ();
	}
	else if(ismBand == ISM_AU915 || ismBand == ISM_NA915)
   10546:	3802      	subs	r0, #2
   10548:	2801      	cmp	r0, #1
   1054a:	d90d      	bls.n	10568 <LORAREG_EnableallChannels+0x34>
	{
		 Enableallchannels();
	}
	return result;
}
   1054c:	2008      	movs	r0, #8
   1054e:	bd10      	pop	{r4, pc}
		 InitDefault868Channels();
   10550:	4b07      	ldr	r3, [pc, #28]	; (10570 <LORAREG_EnableallChannels+0x3c>)
   10552:	4798      	blx	r3
   10554:	e7fa      	b.n	1054c <LORAREG_EnableallChannels+0x18>
		 InitDefault433Channels();
   10556:	4b07      	ldr	r3, [pc, #28]	; (10574 <LORAREG_EnableallChannels+0x40>)
   10558:	4798      	blx	r3
   1055a:	e7f7      	b.n	1054c <LORAREG_EnableallChannels+0x18>
		 InitDefault920Channels();	
   1055c:	4b06      	ldr	r3, [pc, #24]	; (10578 <LORAREG_EnableallChannels+0x44>)
   1055e:	4798      	blx	r3
   10560:	e7f4      	b.n	1054c <LORAREG_EnableallChannels+0x18>
		 InitDefault920ChannelsKR();
   10562:	4b06      	ldr	r3, [pc, #24]	; (1057c <LORAREG_EnableallChannels+0x48>)
   10564:	4798      	blx	r3
   10566:	e7f1      	b.n	1054c <LORAREG_EnableallChannels+0x18>
		 Enableallchannels();
   10568:	4b05      	ldr	r3, [pc, #20]	; (10580 <LORAREG_EnableallChannels+0x4c>)
   1056a:	4798      	blx	r3
   1056c:	e7ee      	b.n	1054c <LORAREG_EnableallChannels+0x18>
   1056e:	46c0      	nop			; (mov r8, r8)
   10570:	00010005 	.word	0x00010005
   10574:	00010109 	.word	0x00010109
   10578:	000101fd 	.word	0x000101fd
   1057c:	0001031d 	.word	0x0001031d
   10580:	00010501 	.word	0x00010501

00010584 <AESEncode>:
 * \brief Encrypts the given block of data
 * \param[in,out] block Block of input data to be encrypted
 * \param[in] key Cryptographic key to be used in AES encryption
 */
void AESEncode(unsigned char* block, unsigned char* masterKey)
{
   10584:	b5f0      	push	{r4, r5, r6, r7, lr}
   10586:	b083      	sub	sp, #12
   10588:	0004      	movs	r4, r0
   1058a:	000e      	movs	r6, r1
#ifndef UT	
	
	/* Configure the AES. */
	g_aes_cfg.encrypt_mode = AES_ENCRYPTION;
   1058c:	4a2b      	ldr	r2, [pc, #172]	; (1063c <AESEncode+0xb8>)
   1058e:	2101      	movs	r1, #1
   10590:	7011      	strb	r1, [r2, #0]
	g_aes_cfg.key_size = AES_KEY_SIZE_128;
   10592:	2300      	movs	r3, #0
   10594:	7053      	strb	r3, [r2, #1]
	g_aes_cfg.start_mode = AES_AUTO_START;
   10596:	7091      	strb	r1, [r2, #2]
	g_aes_cfg.opmode = AES_ECB_MODE;
   10598:	70d3      	strb	r3, [r2, #3]
	g_aes_cfg.cfb_size = AES_CFB_SIZE_128;
   1059a:	7113      	strb	r3, [r2, #4]
	g_aes_cfg.lod = false;
   1059c:	7213      	strb	r3, [r2, #8]
	aes_set_config(&aes_instance,AES, &g_aes_cfg);
   1059e:	4928      	ldr	r1, [pc, #160]	; (10640 <AESEncode+0xbc>)
   105a0:	4828      	ldr	r0, [pc, #160]	; (10644 <AESEncode+0xc0>)
   105a2:	4b29      	ldr	r3, [pc, #164]	; (10648 <AESEncode+0xc4>)
   105a4:	4798      	blx	r3
   105a6:	2100      	movs	r1, #0
		uint8_t u8[4];
	}long_addr;
	uint8_t index;
	for (index = 0; index < 4; index++)
	{
		long_addr.u8[index] = *data++;
   105a8:	ad01      	add	r5, sp, #4
	
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
	{
		io_data[i] = convert_byte_array_to_32_bit(masterKey+(i*(sizeof(uint32_t))));
   105aa:	4f28      	ldr	r7, [pc, #160]	; (1064c <AESEncode+0xc8>)
   105ac:	1870      	adds	r0, r6, r1
   105ae:	2300      	movs	r3, #0
   105b0:	5cc2      	ldrb	r2, [r0, r3]
   105b2:	555a      	strb	r2, [r3, r5]
   105b4:	3301      	adds	r3, #1
	for (index = 0; index < 4; index++)
   105b6:	2b04      	cmp	r3, #4
   105b8:	d1fa      	bne.n	105b0 <AESEncode+0x2c>
   105ba:	9b01      	ldr	r3, [sp, #4]
   105bc:	51cb      	str	r3, [r1, r7]
   105be:	3104      	adds	r1, #4
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
   105c0:	2910      	cmp	r1, #16
   105c2:	d1f3      	bne.n	105ac <AESEncode+0x28>
	}
	
	/* Set the cryptographic key. */
	aes_write_key(&aes_instance, io_data);
   105c4:	4d1f      	ldr	r5, [pc, #124]	; (10644 <AESEncode+0xc0>)
   105c6:	4921      	ldr	r1, [pc, #132]	; (1064c <AESEncode+0xc8>)
   105c8:	0028      	movs	r0, r5
   105ca:	4b21      	ldr	r3, [pc, #132]	; (10650 <AESEncode+0xcc>)
   105cc:	4798      	blx	r3
 */
static inline void aes_set_new_message(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLB.reg |= AES_CTRLB_NEWMSG;
   105ce:	682a      	ldr	r2, [r5, #0]
   105d0:	7913      	ldrb	r3, [r2, #4]
   105d2:	2102      	movs	r1, #2
   105d4:	430b      	orrs	r3, r1
   105d6:	7113      	strb	r3, [r2, #4]
   105d8:	2100      	movs	r1, #0
		long_addr.u8[index] = *data++;
   105da:	ad01      	add	r5, sp, #4
	
	aes_set_new_message(&aes_instance);
	
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
	{
		io_data[i] = convert_byte_array_to_32_bit(block+(i*(sizeof(uint32_t))));			
   105dc:	4e1b      	ldr	r6, [pc, #108]	; (1064c <AESEncode+0xc8>)
   105de:	1860      	adds	r0, r4, r1
   105e0:	2300      	movs	r3, #0
   105e2:	5cc2      	ldrb	r2, [r0, r3]
   105e4:	555a      	strb	r2, [r3, r5]
   105e6:	3301      	adds	r3, #1
	for (index = 0; index < 4; index++)
   105e8:	2b04      	cmp	r3, #4
   105ea:	d1fa      	bne.n	105e2 <AESEncode+0x5e>
   105ec:	9b01      	ldr	r3, [sp, #4]
   105ee:	518b      	str	r3, [r1, r6]
   105f0:	3104      	adds	r1, #4
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
   105f2:	2910      	cmp	r1, #16
   105f4:	d1f3      	bne.n	105de <AESEncode+0x5a>
	}
		
	/* Write the data to be ciphered to the input data registers. */
	aes_write_input_data(&aes_instance, io_data);
   105f6:	4d13      	ldr	r5, [pc, #76]	; (10644 <AESEncode+0xc0>)
   105f8:	4914      	ldr	r1, [pc, #80]	; (1064c <AESEncode+0xc8>)
   105fa:	0028      	movs	r0, r5
   105fc:	4b15      	ldr	r3, [pc, #84]	; (10654 <AESEncode+0xd0>)
   105fe:	4798      	blx	r3
 */
static inline void aes_clear_new_message(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLB.reg &= ~AES_CTRLB_NEWMSG;
   10600:	682d      	ldr	r5, [r5, #0]
   10602:	792b      	ldrb	r3, [r5, #4]
   10604:	2202      	movs	r2, #2
   10606:	4393      	bics	r3, r2
   10608:	712b      	strb	r3, [r5, #4]
	Assert(module->hw);

	uint32_t int_flags = module->hw->INTFLAG.reg;
	uint32_t status_flags = 0;

	if (int_flags & AES_INTFLAG_ENCCMP) {
   1060a:	2101      	movs	r1, #1
		status_flags |= AES_ENCRYPTION_COMPLETE;
	}

	if (int_flags & AES_INTFLAG_GFMCMP) {
   1060c:	2002      	movs	r0, #2
   1060e:	e001      	b.n	10614 <AESEncode+0x90>
	aes_clear_new_message(&aes_instance);
	/* Wait for the end of the encryption process. */
	while (!(aes_get_status(&aes_instance) & AES_ENCRYPTION_COMPLETE)) {
   10610:	4211      	tst	r1, r2
   10612:	d107      	bne.n	10624 <AESEncode+0xa0>
	uint32_t int_flags = module->hw->INTFLAG.reg;
   10614:	79eb      	ldrb	r3, [r5, #7]
   10616:	b2db      	uxtb	r3, r3
	if (int_flags & AES_INTFLAG_ENCCMP) {
   10618:	000a      	movs	r2, r1
   1061a:	401a      	ands	r2, r3
	if (int_flags & AES_INTFLAG_GFMCMP) {
   1061c:	4218      	tst	r0, r3
   1061e:	d0f7      	beq.n	10610 <AESEncode+0x8c>
		status_flags |= AES_GF_MULTI_COMPLETE;
   10620:	4302      	orrs	r2, r0
   10622:	e7f5      	b.n	10610 <AESEncode+0x8c>
	}
	aes_read_output_data(&aes_instance,io_data);
   10624:	4d09      	ldr	r5, [pc, #36]	; (1064c <AESEncode+0xc8>)
   10626:	0029      	movs	r1, r5
   10628:	4806      	ldr	r0, [pc, #24]	; (10644 <AESEncode+0xc0>)
   1062a:	4b0b      	ldr	r3, [pc, #44]	; (10658 <AESEncode+0xd4>)
   1062c:	4798      	blx	r3
	
	memcpy(block,io_data,BLOCKSIZE);
   1062e:	2210      	movs	r2, #16
   10630:	0029      	movs	r1, r5
   10632:	0020      	movs	r0, r4
   10634:	4b09      	ldr	r3, [pc, #36]	; (1065c <AESEncode+0xd8>)
   10636:	4798      	blx	r3
#endif	
}
   10638:	b003      	add	sp, #12
   1063a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1063c:	200039e8 	.word	0x200039e8
   10640:	42003400 	.word	0x42003400
   10644:	200039f4 	.word	0x200039f4
   10648:	00004bb9 	.word	0x00004bb9
   1064c:	200023a8 	.word	0x200023a8
   10650:	00004c4d 	.word	0x00004c4d
   10654:	00004c81 	.word	0x00004c81
   10658:	00004cd1 	.word	0x00004cd1
   1065c:	0001835b 	.word	0x0001835b

00010660 <AESInit>:

/**
 * \brief Initializes the AES Engine.
 */
void AESInit(void)
{
   10660:	b570      	push	{r4, r5, r6, lr}
#ifndef UT	
	//! [setup_config]
	aes_get_config_defaults(&g_aes_cfg);
   10662:	4d07      	ldr	r5, [pc, #28]	; (10680 <AESInit+0x20>)
   10664:	0028      	movs	r0, r5
   10666:	4b07      	ldr	r3, [pc, #28]	; (10684 <AESInit+0x24>)
   10668:	4798      	blx	r3
	//! [setup_config]

	//! [setup_config_defaults]
	aes_init(&aes_instance,AES, &g_aes_cfg);
   1066a:	4c07      	ldr	r4, [pc, #28]	; (10688 <AESInit+0x28>)
   1066c:	002a      	movs	r2, r5
   1066e:	4907      	ldr	r1, [pc, #28]	; (1068c <AESInit+0x2c>)
   10670:	0020      	movs	r0, r4
   10672:	4b07      	ldr	r3, [pc, #28]	; (10690 <AESInit+0x30>)
   10674:	4798      	blx	r3
	//! [setup_config_defaults]
	//! [module_enable]
	aes_enable(&aes_instance);
   10676:	0020      	movs	r0, r4
   10678:	4b06      	ldr	r3, [pc, #24]	; (10694 <AESInit+0x34>)
   1067a:	4798      	blx	r3
#endif	
}
   1067c:	bd70      	pop	{r4, r5, r6, pc}
   1067e:	46c0      	nop			; (mov r8, r8)
   10680:	200039e8 	.word	0x200039e8
   10684:	00004b7d 	.word	0x00004b7d
   10688:	200039f4 	.word	0x200039f4
   1068c:	42003400 	.word	0x42003400
   10690:	00004c2d 	.word	0x00004c2d
   10694:	00004b97 	.word	0x00004b97

00010698 <hwTimerExpiryCallback>:
	SYS_HwOverflow_Cb();
}

/* ISR to handle CC0 interrupt from TC0 */
static void hwTimerExpiryCallback(void)
{
   10698:	b510      	push	{r4, lr}
    if (0 < runningTimers)
   1069a:	4b06      	ldr	r3, [pc, #24]	; (106b4 <hwTimerExpiryCallback+0x1c>)
   1069c:	781b      	ldrb	r3, [r3, #0]
   1069e:	2b00      	cmp	r3, #0
   106a0:	d100      	bne.n	106a4 <hwTimerExpiryCallback+0xc>
    {
        isTimerTriggered = true;
        SYSTEM_PostTask(TIMER_TASK_ID);
    }
}
   106a2:	bd10      	pop	{r4, pc}
        isTimerTriggered = true;
   106a4:	2201      	movs	r2, #1
   106a6:	4b04      	ldr	r3, [pc, #16]	; (106b8 <hwTimerExpiryCallback+0x20>)
   106a8:	701a      	strb	r2, [r3, #0]
        SYSTEM_PostTask(TIMER_TASK_ID);
   106aa:	2001      	movs	r0, #1
   106ac:	4b03      	ldr	r3, [pc, #12]	; (106bc <hwTimerExpiryCallback+0x24>)
   106ae:	4798      	blx	r3
}
   106b0:	e7f7      	b.n	106a2 <hwTimerExpiryCallback+0xa>
   106b2:	46c0      	nop			; (mov r8, r8)
   106b4:	200023c8 	.word	0x200023c8
   106b8:	20003ba2 	.word	0x20003ba2
   106bc:	00010fb5 	.word	0x00010fb5

000106c0 <hwTimerOverflowCallback>:
{
   106c0:	b510      	push	{r4, lr}
   106c2:	b082      	sub	sp, #8
    uint16_t temp = sysTime;
   106c4:	4925      	ldr	r1, [pc, #148]	; (1075c <hwTimerOverflowCallback+0x9c>)
   106c6:	880a      	ldrh	r2, [r1, #0]
   106c8:	b292      	uxth	r2, r2
    if (++sysTime < temp)
   106ca:	880b      	ldrh	r3, [r1, #0]
   106cc:	3301      	adds	r3, #1
   106ce:	b29b      	uxth	r3, r3
   106d0:	800b      	strh	r3, [r1, #0]
   106d2:	429a      	cmp	r2, r3
   106d4:	d903      	bls.n	106de <hwTimerOverflowCallback+0x1e>
        sysTimeOvf++;
   106d6:	4a22      	ldr	r2, [pc, #136]	; (10760 <hwTimerOverflowCallback+0xa0>)
   106d8:	6813      	ldr	r3, [r2, #0]
   106da:	3301      	adds	r3, #1
   106dc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   106de:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
   106e2:	425a      	negs	r2, r3
   106e4:	4153      	adcs	r3, r2
   106e6:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   106e8:	b672      	cpsid	i
   106ea:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   106ee:	2200      	movs	r2, #0
   106f0:	4b1c      	ldr	r3, [pc, #112]	; (10764 <hwTimerOverflowCallback+0xa4>)
   106f2:	701a      	strb	r2, [r3, #0]
	return flags;
   106f4:	9c01      	ldr	r4, [sp, #4]
{
    uint32_t tmo32;
    uint16_t tmoHigh16, tmoLow16;
    uint8_t flags = cpu_irq_save();

    if (SWTIMER_INVALID != runningTimerQueueHead && !swTimers[runningTimerQueueHead].loaded)
   106f6:	4b1c      	ldr	r3, [pc, #112]	; (10768 <hwTimerOverflowCallback+0xa8>)
   106f8:	681b      	ldr	r3, [r3, #0]
   106fa:	2bff      	cmp	r3, #255	; 0xff
   106fc:	d00d      	beq.n	1071a <hwTimerOverflowCallback+0x5a>
   106fe:	0119      	lsls	r1, r3, #4
   10700:	4a1a      	ldr	r2, [pc, #104]	; (1076c <hwTimerOverflowCallback+0xac>)
   10702:	1852      	adds	r2, r2, r1
   10704:	7b52      	ldrb	r2, [r2, #13]
   10706:	2a00      	cmp	r2, #0
   10708:	d107      	bne.n	1071a <hwTimerOverflowCallback+0x5a>
    {
        tmo32 = swTimers[runningTimerQueueHead].absoluteExpiryTime;
   1070a:	4a18      	ldr	r2, [pc, #96]	; (1076c <hwTimerOverflowCallback+0xac>)
   1070c:	5888      	ldr	r0, [r1, r2]
        tmoHigh16 = (uint16_t)(tmo32 >> SWTIMER_SYSTIME_SHIFTMASK);

        if (tmoHigh16 == sysTime)
   1070e:	4b13      	ldr	r3, [pc, #76]	; (1075c <hwTimerOverflowCallback+0x9c>)
   10710:	881b      	ldrh	r3, [r3, #0]
   10712:	b29b      	uxth	r3, r3
   10714:	0c02      	lsrs	r2, r0, #16
   10716:	429a      	cmp	r2, r3
   10718:	d00c      	beq.n	10734 <hwTimerOverflowCallback+0x74>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   1071a:	23ff      	movs	r3, #255	; 0xff
   1071c:	4223      	tst	r3, r4
   1071e:	d005      	beq.n	1072c <hwTimerOverflowCallback+0x6c>
		cpu_irq_enable();
   10720:	2201      	movs	r2, #1
   10722:	4b10      	ldr	r3, [pc, #64]	; (10764 <hwTimerOverflowCallback+0xa4>)
   10724:	701a      	strb	r2, [r3, #0]
   10726:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   1072a:	b662      	cpsie	i
	SYS_HwOverflow_Cb();
   1072c:	4b10      	ldr	r3, [pc, #64]	; (10770 <hwTimerOverflowCallback+0xb0>)
   1072e:	4798      	blx	r3
}
   10730:	b002      	add	sp, #8
   10732:	bd10      	pop	{r4, pc}
        {
            tmoLow16 = (uint16_t)(tmo32 & SWTIMER_HWTIME_MASK);
   10734:	b280      	uxth	r0, r0
            if (SWTIMER_MIN_TIMEOUT < tmoLow16)
   10736:	28ff      	cmp	r0, #255	; 0xff
   10738:	d909      	bls.n	1074e <hwTimerOverflowCallback+0x8e>
            {
                common_tc_delay(tmoLow16);
   1073a:	4b0e      	ldr	r3, [pc, #56]	; (10774 <hwTimerOverflowCallback+0xb4>)
   1073c:	4798      	blx	r3
                swTimers[runningTimerQueueHead].loaded = true;
   1073e:	4b0a      	ldr	r3, [pc, #40]	; (10768 <hwTimerOverflowCallback+0xa8>)
   10740:	681a      	ldr	r2, [r3, #0]
   10742:	0112      	lsls	r2, r2, #4
   10744:	4b09      	ldr	r3, [pc, #36]	; (1076c <hwTimerOverflowCallback+0xac>)
   10746:	189b      	adds	r3, r3, r2
   10748:	2201      	movs	r2, #1
   1074a:	735a      	strb	r2, [r3, #13]
   1074c:	e7e5      	b.n	1071a <hwTimerOverflowCallback+0x5a>
            }
            else
            {
                isTimerTriggered = true;
   1074e:	2201      	movs	r2, #1
   10750:	4b09      	ldr	r3, [pc, #36]	; (10778 <hwTimerOverflowCallback+0xb8>)
   10752:	701a      	strb	r2, [r3, #0]
                SYSTEM_PostTask(TIMER_TASK_ID);
   10754:	2001      	movs	r0, #1
   10756:	4b09      	ldr	r3, [pc, #36]	; (1077c <hwTimerOverflowCallback+0xbc>)
   10758:	4798      	blx	r3
   1075a:	e7de      	b.n	1071a <hwTimerOverflowCallback+0x5a>
   1075c:	20003ba0 	.word	0x20003ba0
   10760:	20003ba4 	.word	0x20003ba4
   10764:	20000014 	.word	0x20000014
   10768:	200023c4 	.word	0x200023c4
   1076c:	20003a10 	.word	0x20003a10
   10770:	0000f641 	.word	0x0000f641
   10774:	00014fb5 	.word	0x00014fb5
   10778:	20003ba2 	.word	0x20003ba2
   1077c:	00010fb5 	.word	0x00010fb5

00010780 <loadHwTimer>:
{
   10780:	b570      	push	{r4, r5, r6, lr}
   10782:	0004      	movs	r4, r0
    if (SWTIMER_INVALID != timerId)
   10784:	28ff      	cmp	r0, #255	; 0xff
   10786:	d030      	beq.n	107ea <loadHwTimer+0x6a>
    time |= ((uint64_t) sysTimeOvf) << 32;
   10788:	4b19      	ldr	r3, [pc, #100]	; (107f0 <loadHwTimer+0x70>)
   1078a:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
   1078c:	4b19      	ldr	r3, [pc, #100]	; (107f4 <loadHwTimer+0x74>)
   1078e:	881d      	ldrh	r5, [r3, #0]
   10790:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
   10792:	4b19      	ldr	r3, [pc, #100]	; (107f8 <loadHwTimer+0x78>)
   10794:	4798      	blx	r3
        uint32_t expiryTime = swTimers[timerId].absoluteExpiryTime;
   10796:	0123      	lsls	r3, r4, #4
    time |= (uint64_t) common_tc_read_count();
   10798:	4328      	orrs	r0, r5
    return ((t2 - t1) < INT32_MAX);
   1079a:	4a18      	ldr	r2, [pc, #96]	; (107fc <loadHwTimer+0x7c>)
   1079c:	589b      	ldr	r3, [r3, r2]
   1079e:	1a18      	subs	r0, r3, r0
        if (swtimerCompareTime(now, expiryTime))
   107a0:	4b17      	ldr	r3, [pc, #92]	; (10800 <loadHwTimer+0x80>)
   107a2:	4298      	cmp	r0, r3
   107a4:	d81a      	bhi.n	107dc <loadHwTimer+0x5c>
            if (!swTimers[timerId].loaded)
   107a6:	0122      	lsls	r2, r4, #4
   107a8:	4b14      	ldr	r3, [pc, #80]	; (107fc <loadHwTimer+0x7c>)
   107aa:	189b      	adds	r3, r3, r2
   107ac:	7b5b      	ldrb	r3, [r3, #13]
   107ae:	2b00      	cmp	r3, #0
   107b0:	d11d      	bne.n	107ee <loadHwTimer+0x6e>
                if (SWTIMER_MIN_TIMEOUT >= timeDiff)
   107b2:	28ff      	cmp	r0, #255	; 0xff
   107b4:	d90b      	bls.n	107ce <loadHwTimer+0x4e>
                else  if ((uint32_t)TIMER_PERIOD >= timeDiff)
   107b6:	4b13      	ldr	r3, [pc, #76]	; (10804 <loadHwTimer+0x84>)
   107b8:	4298      	cmp	r0, r3
   107ba:	d818      	bhi.n	107ee <loadHwTimer+0x6e>
                    common_tc_delay((uint16_t)timeDiff);
   107bc:	b280      	uxth	r0, r0
   107be:	4b12      	ldr	r3, [pc, #72]	; (10808 <loadHwTimer+0x88>)
   107c0:	4798      	blx	r3
                    swTimers[timerId].loaded = true;
   107c2:	0124      	lsls	r4, r4, #4
   107c4:	4b0d      	ldr	r3, [pc, #52]	; (107fc <loadHwTimer+0x7c>)
   107c6:	191c      	adds	r4, r3, r4
   107c8:	2301      	movs	r3, #1
   107ca:	7363      	strb	r3, [r4, #13]
   107cc:	e00f      	b.n	107ee <loadHwTimer+0x6e>
                    isTimerTriggered = true;
   107ce:	2201      	movs	r2, #1
   107d0:	4b0e      	ldr	r3, [pc, #56]	; (1080c <loadHwTimer+0x8c>)
   107d2:	701a      	strb	r2, [r3, #0]
                    SYSTEM_PostTask(TIMER_TASK_ID);
   107d4:	2001      	movs	r0, #1
   107d6:	4b0e      	ldr	r3, [pc, #56]	; (10810 <loadHwTimer+0x90>)
   107d8:	4798      	blx	r3
   107da:	e008      	b.n	107ee <loadHwTimer+0x6e>
            isTimerTriggered = true;
   107dc:	2201      	movs	r2, #1
   107de:	4b0b      	ldr	r3, [pc, #44]	; (1080c <loadHwTimer+0x8c>)
   107e0:	701a      	strb	r2, [r3, #0]
            SYSTEM_PostTask(TIMER_TASK_ID);
   107e2:	2001      	movs	r0, #1
   107e4:	4b0a      	ldr	r3, [pc, #40]	; (10810 <loadHwTimer+0x90>)
   107e6:	4798      	blx	r3
   107e8:	e001      	b.n	107ee <loadHwTimer+0x6e>
        common_tc_compare_stop();
   107ea:	4b0a      	ldr	r3, [pc, #40]	; (10814 <loadHwTimer+0x94>)
   107ec:	4798      	blx	r3
}
   107ee:	bd70      	pop	{r4, r5, r6, pc}
   107f0:	20003ba4 	.word	0x20003ba4
   107f4:	20003ba0 	.word	0x20003ba0
   107f8:	00014f41 	.word	0x00014f41
   107fc:	20003a10 	.word	0x20003a10
   10800:	7ffffffe 	.word	0x7ffffffe
   10804:	0000ffff 	.word	0x0000ffff
   10808:	00014fb5 	.word	0x00014fb5
   1080c:	20003ba2 	.word	0x20003ba2
   10810:	00010fb5 	.word	0x00010fb5
   10814:	00014f8d 	.word	0x00014f8d

00010818 <swtimerInternalHandler>:

/**************************************************************************//**
\brief Internal handler for the timer trigger
******************************************************************************/
static void swtimerInternalHandler(void)
{
   10818:	b510      	push	{r4, lr}
    if (isTimerTriggered)
   1081a:	4b1d      	ldr	r3, [pc, #116]	; (10890 <swtimerInternalHandler+0x78>)
   1081c:	781b      	ldrb	r3, [r3, #0]
   1081e:	2b00      	cmp	r3, #0
   10820:	d027      	beq.n	10872 <swtimerInternalHandler+0x5a>
    {
        isTimerTriggered = false;
   10822:	2200      	movs	r2, #0
   10824:	4b1a      	ldr	r3, [pc, #104]	; (10890 <swtimerInternalHandler+0x78>)
   10826:	701a      	strb	r2, [r3, #0]

        if (0 < runningTimers)
   10828:	4b1a      	ldr	r3, [pc, #104]	; (10894 <swtimerInternalHandler+0x7c>)
   1082a:	781b      	ldrb	r3, [r3, #0]
   1082c:	2b00      	cmp	r3, #0
   1082e:	d020      	beq.n	10872 <swtimerInternalHandler+0x5a>
        { /* Holds the number of running timers */
            if ((expiredTimerQueueHead == SWTIMER_INVALID) && \
   10830:	4b19      	ldr	r3, [pc, #100]	; (10898 <swtimerInternalHandler+0x80>)
   10832:	681b      	ldr	r3, [r3, #0]
   10834:	2bff      	cmp	r3, #255	; 0xff
   10836:	d01d      	beq.n	10874 <swtimerInternalHandler+0x5c>
                expiredTimerQueueHead = runningTimerQueueHead;
                expiredTimerQueueTail = runningTimerQueueHead;
            }
            else
            { /* there were already some timers expired before this one */
                swTimers[expiredTimerQueueTail].nextTimer = runningTimerQueueHead;
   10838:	4b18      	ldr	r3, [pc, #96]	; (1089c <swtimerInternalHandler+0x84>)
   1083a:	6818      	ldr	r0, [r3, #0]
   1083c:	4918      	ldr	r1, [pc, #96]	; (108a0 <swtimerInternalHandler+0x88>)
   1083e:	680b      	ldr	r3, [r1, #0]
   10840:	011a      	lsls	r2, r3, #4
   10842:	4b18      	ldr	r3, [pc, #96]	; (108a4 <swtimerInternalHandler+0x8c>)
   10844:	189b      	adds	r3, r3, r2
   10846:	7318      	strb	r0, [r3, #12]
                expiredTimerQueueTail = runningTimerQueueHead;
   10848:	6008      	str	r0, [r1, #0]
            }

            runningTimerQueueHead = swTimers[runningTimerQueueHead].nextTimer;
   1084a:	4a16      	ldr	r2, [pc, #88]	; (108a4 <swtimerInternalHandler+0x8c>)
   1084c:	4913      	ldr	r1, [pc, #76]	; (1089c <swtimerInternalHandler+0x84>)
   1084e:	680b      	ldr	r3, [r1, #0]
   10850:	011b      	lsls	r3, r3, #4
   10852:	18d3      	adds	r3, r2, r3
   10854:	7b18      	ldrb	r0, [r3, #12]
   10856:	6008      	str	r0, [r1, #0]

            swTimers[expiredTimerQueueTail].nextTimer = SWTIMER_INVALID;
   10858:	4b11      	ldr	r3, [pc, #68]	; (108a0 <swtimerInternalHandler+0x88>)
   1085a:	681b      	ldr	r3, [r3, #0]
   1085c:	011b      	lsls	r3, r3, #4
   1085e:	18d2      	adds	r2, r2, r3
   10860:	23ff      	movs	r3, #255	; 0xff
   10862:	7313      	strb	r3, [r2, #12]

            if ((--runningTimers) > 0)
   10864:	4a0b      	ldr	r2, [pc, #44]	; (10894 <swtimerInternalHandler+0x7c>)
   10866:	7813      	ldrb	r3, [r2, #0]
   10868:	3b01      	subs	r3, #1
   1086a:	b2db      	uxtb	r3, r3
   1086c:	7013      	strb	r3, [r2, #0]
   1086e:	2b00      	cmp	r3, #0
   10870:	d10b      	bne.n	1088a <swtimerInternalHandler+0x72>
            { /* keep the ball rolling! load the next head timer from the queue */
                loadHwTimer(runningTimerQueueHead);
            }
        }
    }
}
   10872:	bd10      	pop	{r4, pc}
                (expiredTimerQueueTail == SWTIMER_INVALID))
   10874:	4b0a      	ldr	r3, [pc, #40]	; (108a0 <swtimerInternalHandler+0x88>)
            if ((expiredTimerQueueHead == SWTIMER_INVALID) && \
   10876:	681b      	ldr	r3, [r3, #0]
   10878:	2bff      	cmp	r3, #255	; 0xff
   1087a:	d1dd      	bne.n	10838 <swtimerInternalHandler+0x20>
                expiredTimerQueueHead = runningTimerQueueHead;
   1087c:	4b07      	ldr	r3, [pc, #28]	; (1089c <swtimerInternalHandler+0x84>)
   1087e:	681b      	ldr	r3, [r3, #0]
   10880:	4a05      	ldr	r2, [pc, #20]	; (10898 <swtimerInternalHandler+0x80>)
   10882:	6013      	str	r3, [r2, #0]
                expiredTimerQueueTail = runningTimerQueueHead;
   10884:	4a06      	ldr	r2, [pc, #24]	; (108a0 <swtimerInternalHandler+0x88>)
   10886:	6013      	str	r3, [r2, #0]
   10888:	e7df      	b.n	1084a <swtimerInternalHandler+0x32>
                loadHwTimer(runningTimerQueueHead);
   1088a:	4b07      	ldr	r3, [pc, #28]	; (108a8 <swtimerInternalHandler+0x90>)
   1088c:	4798      	blx	r3
}
   1088e:	e7f0      	b.n	10872 <swtimerInternalHandler+0x5a>
   10890:	20003ba2 	.word	0x20003ba2
   10894:	200023c8 	.word	0x200023c8
   10898:	200023bc 	.word	0x200023bc
   1089c:	200023c4 	.word	0x200023c4
   108a0:	200023c0 	.word	0x200023c0
   108a4:	20003a10 	.word	0x20003a10
   108a8:	00010781 	.word	0x00010781

000108ac <SwTimerReset>:
    /*
    * Initialize the timer resources like timer arrays queues, timer registers
    */
    uint8_t index;

    runningTimers = 0u;
   108ac:	2300      	movs	r3, #0
   108ae:	4a0d      	ldr	r2, [pc, #52]	; (108e4 <SwTimerReset+0x38>)
   108b0:	7013      	strb	r3, [r2, #0]
    isTimerTriggered = false;
   108b2:	4a0d      	ldr	r2, [pc, #52]	; (108e8 <SwTimerReset+0x3c>)
   108b4:	7013      	strb	r3, [r2, #0]

    runningTimerQueueHead = SWTIMER_INVALID;
   108b6:	33ff      	adds	r3, #255	; 0xff
   108b8:	4a0c      	ldr	r2, [pc, #48]	; (108ec <SwTimerReset+0x40>)
   108ba:	6013      	str	r3, [r2, #0]
    expiredTimerQueueHead = SWTIMER_INVALID;
   108bc:	4a0c      	ldr	r2, [pc, #48]	; (108f0 <SwTimerReset+0x44>)
   108be:	6013      	str	r3, [r2, #0]
    expiredTimerQueueTail = SWTIMER_INVALID;
   108c0:	4a0c      	ldr	r2, [pc, #48]	; (108f4 <SwTimerReset+0x48>)
   108c2:	6013      	str	r3, [r2, #0]
   108c4:	4b0c      	ldr	r3, [pc, #48]	; (108f8 <SwTimerReset+0x4c>)
   108c6:	0018      	movs	r0, r3
   108c8:	3091      	adds	r0, #145	; 0x91
   108ca:	30ff      	adds	r0, #255	; 0xff

    for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++)
    {
        swTimers[index].nextTimer = SWTIMER_INVALID;
   108cc:	21ff      	movs	r1, #255	; 0xff
        swTimers[index].timerCb = NULL;
   108ce:	2200      	movs	r2, #0
        swTimers[index].nextTimer = SWTIMER_INVALID;
   108d0:	7219      	strb	r1, [r3, #8]
        swTimers[index].timerCb = NULL;
   108d2:	601a      	str	r2, [r3, #0]
   108d4:	3310      	adds	r3, #16
    for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++)
   108d6:	4283      	cmp	r3, r0
   108d8:	d1fa      	bne.n	108d0 <SwTimerReset+0x24>
    }

    allocatedTimerId = 0u;
   108da:	2200      	movs	r2, #0
   108dc:	4b07      	ldr	r3, [pc, #28]	; (108fc <SwTimerReset+0x50>)
   108de:	701a      	strb	r2, [r3, #0]
}
   108e0:	4770      	bx	lr
   108e2:	46c0      	nop			; (mov r8, r8)
   108e4:	200023c8 	.word	0x200023c8
   108e8:	20003ba2 	.word	0x20003ba2
   108ec:	200023c4 	.word	0x200023c4
   108f0:	200023bc 	.word	0x200023bc
   108f4:	200023c0 	.word	0x200023c0
   108f8:	20003a14 	.word	0x20003a14
   108fc:	200023b8 	.word	0x200023b8

00010900 <SystemTimerInit>:

/**************************************************************************//**
\brief Initializes the Software Timer module
******************************************************************************/
void SystemTimerInit(void)
{
   10900:	b510      	push	{r4, lr}
    SwTimerReset();
   10902:	4b08      	ldr	r3, [pc, #32]	; (10924 <SystemTimerInit+0x24>)
   10904:	4798      	blx	r3

    /* initialize system time parameters */
    sysTimeOvf = 0x00000000;
   10906:	2300      	movs	r3, #0
   10908:	4a07      	ldr	r2, [pc, #28]	; (10928 <SystemTimerInit+0x28>)
   1090a:	6013      	str	r3, [r2, #0]
    sysTime = 0x0000;
   1090c:	4a07      	ldr	r2, [pc, #28]	; (1092c <SystemTimerInit+0x2c>)
   1090e:	8013      	strh	r3, [r2, #0]

    common_tc_init();
   10910:	4b07      	ldr	r3, [pc, #28]	; (10930 <SystemTimerInit+0x30>)
   10912:	4798      	blx	r3
    set_common_tc_overflow_callback(hwTimerOverflowCallback);
   10914:	4807      	ldr	r0, [pc, #28]	; (10934 <SystemTimerInit+0x34>)
   10916:	4b08      	ldr	r3, [pc, #32]	; (10938 <SystemTimerInit+0x38>)
   10918:	4798      	blx	r3
    set_common_tc_expiry_callback(hwTimerExpiryCallback);
   1091a:	4808      	ldr	r0, [pc, #32]	; (1093c <SystemTimerInit+0x3c>)
   1091c:	4b08      	ldr	r3, [pc, #32]	; (10940 <SystemTimerInit+0x40>)
   1091e:	4798      	blx	r3
}
   10920:	bd10      	pop	{r4, pc}
   10922:	46c0      	nop			; (mov r8, r8)
   10924:	000108ad 	.word	0x000108ad
   10928:	20003ba4 	.word	0x20003ba4
   1092c:	20003ba0 	.word	0x20003ba0
   10930:	00015021 	.word	0x00015021
   10934:	000106c1 	.word	0x000106c1
   10938:	000150a5 	.word	0x000150a5
   1093c:	00010699 	.word	0x00010699
   10940:	000150b1 	.word	0x000150b1

00010944 <SwTimerGetTime>:
/**************************************************************************//**
\brief Get current system time.
\return Returns current system time in microseconds
******************************************************************************/
uint64_t SwTimerGetTime(void)
{
   10944:	b570      	push	{r4, r5, r6, lr}
    time |= ((uint64_t) sysTimeOvf) << 32;
   10946:	4b05      	ldr	r3, [pc, #20]	; (1095c <SwTimerGetTime+0x18>)
   10948:	681c      	ldr	r4, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
   1094a:	4b05      	ldr	r3, [pc, #20]	; (10960 <SwTimerGetTime+0x1c>)
   1094c:	881d      	ldrh	r5, [r3, #0]
   1094e:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
   10950:	4b04      	ldr	r3, [pc, #16]	; (10964 <SwTimerGetTime+0x20>)
   10952:	4798      	blx	r3
   10954:	4328      	orrs	r0, r5
    return gettime();
}
   10956:	0021      	movs	r1, r4
   10958:	bd70      	pop	{r4, r5, r6, pc}
   1095a:	46c0      	nop			; (mov r8, r8)
   1095c:	20003ba4 	.word	0x20003ba4
   10960:	20003ba0 	.word	0x20003ba0
   10964:	00014f41 	.word	0x00014f41

00010968 <SwTimerCreate>:

\return LORAWAN_SUCCESS if new timerId is allocated
        LORAWAN_RESOURCE_UNAVAILABLE if there is no more timerId to allocate
******************************************************************************/
StackRetStatus_t SwTimerCreate(uint8_t *timerId)
{
   10968:	b510      	push	{r4, lr}
   1096a:	0004      	movs	r4, r0
    StackRetStatus_t retVal = LORAWAN_SUCCESS;

    if (allocatedTimerId < TOTAL_NUMBER_OF_SW_TIMERS)
   1096c:	4b08      	ldr	r3, [pc, #32]	; (10990 <SwTimerCreate+0x28>)
   1096e:	781b      	ldrb	r3, [r3, #0]
        * If you reach this spot it means the TOTAL_NUMBER_OF_SW_TIMERS
        * is #defined to a lower value than the number of timers that have
        * been SwTimerCreate()
        */
        SYS_ASSERT_FATAL(ASSERT_HAL_TIMERID_EXHAUSTED);
        retVal = LORAWAN_RESOURCE_UNAVAILABLE;
   10970:	2014      	movs	r0, #20
    if (allocatedTimerId < TOTAL_NUMBER_OF_SW_TIMERS)
   10972:	2b18      	cmp	r3, #24
   10974:	d900      	bls.n	10978 <SwTimerCreate+0x10>
    }

    return retVal;
}
   10976:	bd10      	pop	{r4, pc}
        ATOMIC_SECTION_ENTER
   10978:	4b06      	ldr	r3, [pc, #24]	; (10994 <SwTimerCreate+0x2c>)
   1097a:	4798      	blx	r3
        *timerId = allocatedTimerId;
   1097c:	4a04      	ldr	r2, [pc, #16]	; (10990 <SwTimerCreate+0x28>)
   1097e:	7813      	ldrb	r3, [r2, #0]
   10980:	7023      	strb	r3, [r4, #0]
        allocatedTimerId++;
   10982:	3301      	adds	r3, #1
   10984:	7013      	strb	r3, [r2, #0]
        ATOMIC_SECTION_EXIT
   10986:	4b04      	ldr	r3, [pc, #16]	; (10998 <SwTimerCreate+0x30>)
   10988:	4798      	blx	r3
    StackRetStatus_t retVal = LORAWAN_SUCCESS;
   1098a:	2008      	movs	r0, #8
   1098c:	e7f3      	b.n	10976 <SwTimerCreate+0xe>
   1098e:	46c0      	nop			; (mov r8, r8)
   10990:	200023b8 	.word	0x200023b8
   10994:	0000ff69 	.word	0x0000ff69
   10998:	0000ff75 	.word	0x0000ff75

0001099c <SwTimerStart>:
        LORAWAN_INVALID_REQUEST if \timerId is already running
        LORAWAN_SUCCESS if \timerId is successfully queued for running
******************************************************************************/
StackRetStatus_t SwTimerStart(uint8_t timerId, uint32_t timerCount,
    SwTimeoutType_t timeoutType, void *timerCb, void *paramCb)
{
   1099c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1099e:	46d6      	mov	lr, sl
   109a0:	464f      	mov	r7, r9
   109a2:	4646      	mov	r6, r8
   109a4:	b5c0      	push	{r6, r7, lr}
   109a6:	b084      	sub	sp, #16
   109a8:	0007      	movs	r7, r0
   109aa:	000d      	movs	r5, r1
   109ac:	0016      	movs	r6, r2
   109ae:	001c      	movs	r4, r3
    uint32_t pointInTime;

    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId || NULL == timerCb)
    {
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
        return LORAWAN_INVALID_PARAMETER;
   109b0:	200a      	movs	r0, #10
    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId || NULL == timerCb)
   109b2:	2f18      	cmp	r7, #24
   109b4:	d809      	bhi.n	109ca <SwTimerStart+0x2e>
   109b6:	2b00      	cmp	r3, #0
   109b8:	d100      	bne.n	109bc <SwTimerStart+0x20>
   109ba:	e08c      	b.n	10ad6 <SwTimerStart+0x13a>
    }

    if (NULL != swTimers[timerId].timerCb)
   109bc:	013a      	lsls	r2, r7, #4
   109be:	4b52      	ldr	r3, [pc, #328]	; (10b08 <SwTimerStart+0x16c>)
   109c0:	189b      	adds	r3, r3, r2
   109c2:	685b      	ldr	r3, [r3, #4]
        /*
        * Timer is already running if the callback function of the
        * corresponding timer index in the timer array is not NULL.
        */
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
        return LORAWAN_INVALID_REQUEST;
   109c4:	300b      	adds	r0, #11
    if (NULL != swTimers[timerId].timerCb)
   109c6:	2b00      	cmp	r3, #0
   109c8:	d005      	beq.n	109d6 <SwTimerStart+0x3a>
        }
    }

    swtimerStartAbsoluteTimer(timerId, pointInTime, timerCb, paramCb);
    return LORAWAN_SUCCESS;
}
   109ca:	b004      	add	sp, #16
   109cc:	bc1c      	pop	{r2, r3, r4}
   109ce:	4690      	mov	r8, r2
   109d0:	4699      	mov	r9, r3
   109d2:	46a2      	mov	sl, r4
   109d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    time |= ((uint64_t) sysTimeOvf) << 32;
   109d6:	4b4d      	ldr	r3, [pc, #308]	; (10b0c <SwTimerStart+0x170>)
   109d8:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
   109da:	4b4d      	ldr	r3, [pc, #308]	; (10b10 <SwTimerStart+0x174>)
   109dc:	8818      	ldrh	r0, [r3, #0]
   109de:	0403      	lsls	r3, r0, #16
   109e0:	4698      	mov	r8, r3
    time |= (uint64_t) common_tc_read_count();
   109e2:	4b4c      	ldr	r3, [pc, #304]	; (10b14 <SwTimerStart+0x178>)
   109e4:	4798      	blx	r3
   109e6:	4643      	mov	r3, r8
   109e8:	4303      	orrs	r3, r0
    switch (timeoutType)
   109ea:	2e00      	cmp	r6, #0
   109ec:	d003      	beq.n	109f6 <SwTimerStart+0x5a>
   109ee:	2e01      	cmp	r6, #1
   109f0:	d038      	beq.n	10a64 <SwTimerStart+0xc8>
            return LORAWAN_INVALID_PARAMETER;
   109f2:	200a      	movs	r0, #10
   109f4:	e7e9      	b.n	109ca <SwTimerStart+0x2e>
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
   109f6:	4948      	ldr	r1, [pc, #288]	; (10b18 <SwTimerStart+0x17c>)
                return LORAWAN_INVALID_PARAMETER;
   109f8:	200a      	movs	r0, #10
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
   109fa:	002a      	movs	r2, r5
   109fc:	3aff      	subs	r2, #255	; 0xff
            pointInTime = ADD_TIME(timerCount, now);
   109fe:	18ed      	adds	r5, r5, r3
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
   10a00:	428a      	cmp	r2, r1
   10a02:	d8e2      	bhi.n	109ca <SwTimerStart+0x2e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   10a04:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   10a08:	425a      	negs	r2, r3
   10a0a:	4153      	adcs	r3, r2
   10a0c:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
   10a0e:	b672      	cpsid	i
   10a10:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   10a14:	2600      	movs	r6, #0
   10a16:	4b41      	ldr	r3, [pc, #260]	; (10b1c <SwTimerStart+0x180>)
   10a18:	701e      	strb	r6, [r3, #0]
	return flags;
   10a1a:	9b03      	ldr	r3, [sp, #12]
   10a1c:	4699      	mov	r9, r3
    swtimerInternalHandler();
   10a1e:	4b40      	ldr	r3, [pc, #256]	; (10b20 <SwTimerStart+0x184>)
   10a20:	4798      	blx	r3
    swTimers[timerId].absoluteExpiryTime = pointInTime;
   10a22:	4b39      	ldr	r3, [pc, #228]	; (10b08 <SwTimerStart+0x16c>)
   10a24:	013a      	lsls	r2, r7, #4
   10a26:	50d5      	str	r5, [r2, r3]
    swTimers[timerId].timerCb = (void (*)(void*))handlerCb;
   10a28:	189b      	adds	r3, r3, r2
   10a2a:	605c      	str	r4, [r3, #4]
    swTimers[timerId].paramCb = parameter;
   10a2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10a2e:	609a      	str	r2, [r3, #8]
    swTimers[timerId].loaded = false;
   10a30:	735e      	strb	r6, [r3, #13]
    runningTimers++;
   10a32:	4a3c      	ldr	r2, [pc, #240]	; (10b24 <SwTimerStart+0x188>)
   10a34:	7813      	ldrb	r3, [r2, #0]
   10a36:	3301      	adds	r3, #1
   10a38:	b2db      	uxtb	r3, r3
   10a3a:	7013      	strb	r3, [r2, #0]
    if (SWTIMER_INVALID == runningTimerQueueHead)
   10a3c:	4b3a      	ldr	r3, [pc, #232]	; (10b28 <SwTimerStart+0x18c>)
   10a3e:	681b      	ldr	r3, [r3, #0]
   10a40:	469a      	mov	sl, r3
   10a42:	2bff      	cmp	r3, #255	; 0xff
   10a44:	d016      	beq.n	10a74 <SwTimerStart+0xd8>
        uint8_t currIndex = runningTimerQueueHead;
   10a46:	466a      	mov	r2, sp
   10a48:	7013      	strb	r3, [r2, #0]
   10a4a:	7812      	ldrb	r2, [r2, #0]
        for (index = 0; index < runningTimers; index++)
   10a4c:	4b35      	ldr	r3, [pc, #212]	; (10b24 <SwTimerStart+0x188>)
   10a4e:	781b      	ldrb	r3, [r3, #0]
   10a50:	2b00      	cmp	r3, #0
   10a52:	d042      	beq.n	10ada <SwTimerStart+0x13e>
   10a54:	9200      	str	r2, [sp, #0]
   10a56:	2300      	movs	r3, #0
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
   10a58:	492b      	ldr	r1, [pc, #172]	; (10b08 <SwTimerStart+0x16c>)
   10a5a:	4688      	mov	r8, r1
   10a5c:	4833      	ldr	r0, [pc, #204]	; (10b2c <SwTimerStart+0x190>)
                    currIndex = swTimers[currIndex].nextTimer;
   10a5e:	468c      	mov	ip, r1
        for (index = 0; index < runningTimers; index++)
   10a60:	4c30      	ldr	r4, [pc, #192]	; (10b24 <SwTimerStart+0x188>)
   10a62:	e02a      	b.n	10aba <SwTimerStart+0x11e>
            if ((timeout > SWTIMER_MAX_TIMEOUT) || \
   10a64:	0028      	movs	r0, r5
   10a66:	38ff      	subs	r0, #255	; 0xff
   10a68:	1ac3      	subs	r3, r0, r3
   10a6a:	4a2b      	ldr	r2, [pc, #172]	; (10b18 <SwTimerStart+0x17c>)
                return LORAWAN_INVALID_PARAMETER;
   10a6c:	200a      	movs	r0, #10
            if ((timeout > SWTIMER_MAX_TIMEOUT) || \
   10a6e:	4293      	cmp	r3, r2
   10a70:	d9c8      	bls.n	10a04 <SwTimerStart+0x68>
   10a72:	e7aa      	b.n	109ca <SwTimerStart+0x2e>
        runningTimerQueueHead = timerId;
   10a74:	4b2c      	ldr	r3, [pc, #176]	; (10b28 <SwTimerStart+0x18c>)
   10a76:	601f      	str	r7, [r3, #0]
        loadHwTimer(runningTimerQueueHead);
   10a78:	0038      	movs	r0, r7
   10a7a:	4b2d      	ldr	r3, [pc, #180]	; (10b30 <SwTimerStart+0x194>)
   10a7c:	4798      	blx	r3
   10a7e:	e036      	b.n	10aee <SwTimerStart+0x152>
                    swTimers[timerId].nextTimer = currIndex;
   10a80:	4b21      	ldr	r3, [pc, #132]	; (10b08 <SwTimerStart+0x16c>)
   10a82:	013c      	lsls	r4, r7, #4
   10a84:	191c      	adds	r4, r3, r4
   10a86:	7322      	strb	r2, [r4, #12]
                    swTimers[currIndex].loaded = false;
   10a88:	9901      	ldr	r1, [sp, #4]
   10a8a:	0109      	lsls	r1, r1, #4
   10a8c:	1859      	adds	r1, r3, r1
   10a8e:	2300      	movs	r3, #0
   10a90:	734b      	strb	r3, [r1, #13]
                    if (runningTimerQueueHead == currIndex)
   10a92:	4592      	cmp	sl, r2
   10a94:	d005      	beq.n	10aa2 <SwTimerStart+0x106>
                        swTimers[prevIndex].nextTimer = timerId;
   10a96:	9b00      	ldr	r3, [sp, #0]
   10a98:	0118      	lsls	r0, r3, #4
   10a9a:	4b1b      	ldr	r3, [pc, #108]	; (10b08 <SwTimerStart+0x16c>)
   10a9c:	1818      	adds	r0, r3, r0
   10a9e:	7307      	strb	r7, [r0, #12]
   10aa0:	e025      	b.n	10aee <SwTimerStart+0x152>
                        runningTimerQueueHead = timerId;
   10aa2:	4b21      	ldr	r3, [pc, #132]	; (10b28 <SwTimerStart+0x18c>)
   10aa4:	601f      	str	r7, [r3, #0]
                        loadHwTimer(runningTimerQueueHead);
   10aa6:	0038      	movs	r0, r7
   10aa8:	4b21      	ldr	r3, [pc, #132]	; (10b30 <SwTimerStart+0x194>)
   10aaa:	4798      	blx	r3
   10aac:	e01f      	b.n	10aee <SwTimerStart+0x152>
        for (index = 0; index < runningTimers; index++)
   10aae:	3301      	adds	r3, #1
   10ab0:	b2db      	uxtb	r3, r3
   10ab2:	7821      	ldrb	r1, [r4, #0]
   10ab4:	b2c9      	uxtb	r1, r1
   10ab6:	428b      	cmp	r3, r1
   10ab8:	d210      	bcs.n	10adc <SwTimerStart+0x140>
            if (SWTIMER_INVALID != currIndex)
   10aba:	2aff      	cmp	r2, #255	; 0xff
   10abc:	d0f7      	beq.n	10aae <SwTimerStart+0x112>
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
   10abe:	9201      	str	r2, [sp, #4]
   10ac0:	0111      	lsls	r1, r2, #4
    return ((t2 - t1) < INT32_MAX);
   10ac2:	4646      	mov	r6, r8
   10ac4:	5989      	ldr	r1, [r1, r6]
   10ac6:	1a69      	subs	r1, r5, r1
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
   10ac8:	4281      	cmp	r1, r0
   10aca:	d8d9      	bhi.n	10a80 <SwTimerStart+0xe4>
                    currIndex = swTimers[currIndex].nextTimer;
   10acc:	0111      	lsls	r1, r2, #4
   10ace:	4461      	add	r1, ip
   10ad0:	9200      	str	r2, [sp, #0]
   10ad2:	7b0a      	ldrb	r2, [r1, #12]
   10ad4:	e7eb      	b.n	10aae <SwTimerStart+0x112>
        return LORAWAN_INVALID_PARAMETER;
   10ad6:	200a      	movs	r0, #10
   10ad8:	e777      	b.n	109ca <SwTimerStart+0x2e>
        uint8_t prevIndex = runningTimerQueueHead;
   10ada:	9200      	str	r2, [sp, #0]
            swTimers[prevIndex].nextTimer = timerId;
   10adc:	4b0a      	ldr	r3, [pc, #40]	; (10b08 <SwTimerStart+0x16c>)
   10ade:	9a00      	ldr	r2, [sp, #0]
   10ae0:	0110      	lsls	r0, r2, #4
   10ae2:	1818      	adds	r0, r3, r0
   10ae4:	7307      	strb	r7, [r0, #12]
            swTimers[timerId].nextTimer = SWTIMER_INVALID;
   10ae6:	013f      	lsls	r7, r7, #4
   10ae8:	19df      	adds	r7, r3, r7
   10aea:	23ff      	movs	r3, #255	; 0xff
   10aec:	733b      	strb	r3, [r7, #12]
	if (cpu_irq_is_enabled_flags(flags))
   10aee:	23ff      	movs	r3, #255	; 0xff
    return LORAWAN_SUCCESS;
   10af0:	2008      	movs	r0, #8
   10af2:	464a      	mov	r2, r9
   10af4:	4213      	tst	r3, r2
   10af6:	d100      	bne.n	10afa <SwTimerStart+0x15e>
   10af8:	e767      	b.n	109ca <SwTimerStart+0x2e>
		cpu_irq_enable();
   10afa:	2201      	movs	r2, #1
   10afc:	4b07      	ldr	r3, [pc, #28]	; (10b1c <SwTimerStart+0x180>)
   10afe:	701a      	strb	r2, [r3, #0]
   10b00:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   10b04:	b662      	cpsie	i
   10b06:	e760      	b.n	109ca <SwTimerStart+0x2e>
   10b08:	20003a10 	.word	0x20003a10
   10b0c:	20003ba4 	.word	0x20003ba4
   10b10:	20003ba0 	.word	0x20003ba0
   10b14:	00014f41 	.word	0x00014f41
   10b18:	7fffff00 	.word	0x7fffff00
   10b1c:	20000014 	.word	0x20000014
   10b20:	00010819 	.word	0x00010819
   10b24:	200023c8 	.word	0x200023c8
   10b28:	200023c4 	.word	0x200023c4
   10b2c:	7ffffffe 	.word	0x7ffffffe
   10b30:	00010781 	.word	0x00010781

00010b34 <SwTimerIsRunning>:
\param[in] timerId Timer ID to be checked for running
\return True if the timer is running else False
******************************************************************************/
bool SwTimerIsRunning(uint8_t timerId)
{
    if (NULL == swTimers[timerId].timerCb)
   10b34:	0103      	lsls	r3, r0, #4
   10b36:	4803      	ldr	r0, [pc, #12]	; (10b44 <SwTimerIsRunning+0x10>)
   10b38:	18c0      	adds	r0, r0, r3
   10b3a:	6840      	ldr	r0, [r0, #4]
   10b3c:	1e43      	subs	r3, r0, #1
   10b3e:	4198      	sbcs	r0, r3
   10b40:	b2c0      	uxtb	r0, r0
    {
        return false;
    }

    return true;
}
   10b42:	4770      	bx	lr
   10b44:	20003a10 	.word	0x20003a10

00010b48 <SwTimerReadValue>:
\brief Returns the remaining timeout for the given timerId
\param[in] timerId Timer ID to get the remaining time
\return Remaining time until expiry in microseconds
******************************************************************************/
uint32_t SwTimerReadValue(uint8_t timerId)
{
   10b48:	b570      	push	{r4, r5, r6, lr}
    uint32_t remainingTime = 0u;
    uint32_t timerExpiryTime = 0u;
    uint32_t currentSysTime = 0u;
    if ( NULL != swTimers[timerId].timerCb )
   10b4a:	0102      	lsls	r2, r0, #4
   10b4c:	4b0d      	ldr	r3, [pc, #52]	; (10b84 <SwTimerReadValue+0x3c>)
   10b4e:	189b      	adds	r3, r3, r2
   10b50:	685b      	ldr	r3, [r3, #4]
   10b52:	2b00      	cmp	r3, #0
   10b54:	d014      	beq.n	10b80 <SwTimerReadValue+0x38>
    {
	    timerExpiryTime = swTimers[timerId].absoluteExpiryTime;
   10b56:	4b0b      	ldr	r3, [pc, #44]	; (10b84 <SwTimerReadValue+0x3c>)
   10b58:	58d5      	ldr	r5, [r2, r3]
    time |= ((uint64_t) sysTimeOvf) << 32;
   10b5a:	4b0b      	ldr	r3, [pc, #44]	; (10b88 <SwTimerReadValue+0x40>)
   10b5c:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
   10b5e:	4b0b      	ldr	r3, [pc, #44]	; (10b8c <SwTimerReadValue+0x44>)
   10b60:	881c      	ldrh	r4, [r3, #0]
   10b62:	0424      	lsls	r4, r4, #16
    time |= (uint64_t) common_tc_read_count();
   10b64:	4b0a      	ldr	r3, [pc, #40]	; (10b90 <SwTimerReadValue+0x48>)
   10b66:	4798      	blx	r3
   10b68:	4320      	orrs	r0, r4
	    currentSysTime = (uint32_t) gettime();
	    if ( currentSysTime <= timerExpiryTime )
   10b6a:	4285      	cmp	r5, r0
   10b6c:	d305      	bcc.n	10b7a <SwTimerReadValue+0x32>
	    {
		    remainingTime = timerExpiryTime - currentSysTime;
   10b6e:	1a28      	subs	r0, r5, r0
	    else if ( currentSysTime > timerExpiryTime )
	    {
		    remainingTime = (UINT32_MAX - currentSysTime) + timerExpiryTime;
	    }

        if (remainingTime >= SWTIMER_MAX_TIMEOUT)
   10b70:	4b08      	ldr	r3, [pc, #32]	; (10b94 <SwTimerReadValue+0x4c>)
   10b72:	4298      	cmp	r0, r3
   10b74:	d900      	bls.n	10b78 <SwTimerReadValue+0x30>
        {
            /* Diff cannot be more than max timeout */
            remainingTime = 0;
   10b76:	2000      	movs	r0, #0
        }
    }
    return remainingTime;
}
   10b78:	bd70      	pop	{r4, r5, r6, pc}
		    remainingTime = (UINT32_MAX - currentSysTime) + timerExpiryTime;
   10b7a:	3d01      	subs	r5, #1
   10b7c:	1a28      	subs	r0, r5, r0
   10b7e:	e7f7      	b.n	10b70 <SwTimerReadValue+0x28>
    uint32_t remainingTime = 0u;
   10b80:	2000      	movs	r0, #0
    return remainingTime;
   10b82:	e7f9      	b.n	10b78 <SwTimerReadValue+0x30>
   10b84:	20003a10 	.word	0x20003a10
   10b88:	20003ba4 	.word	0x20003ba4
   10b8c:	20003ba0 	.word	0x20003ba0
   10b90:	00014f41 	.word	0x00014f41
   10b94:	7ffffffe 	.word	0x7ffffffe

00010b98 <SwTimerNextExpiryDuration>:
/**************************************************************************//**
\brief Returns the duration until the next timer expiry
\return Returns the duration until the next timeout in microseconds
******************************************************************************/
uint32_t SwTimerNextExpiryDuration(void)
{
   10b98:	b510      	push	{r4, lr}
    uint32_t duration = SWTIMER_INVALID_TIMEOUT;

    if (SWTIMER_INVALID != runningTimerQueueHead)
   10b9a:	4b05      	ldr	r3, [pc, #20]	; (10bb0 <SwTimerNextExpiryDuration+0x18>)
   10b9c:	6818      	ldr	r0, [r3, #0]
   10b9e:	28ff      	cmp	r0, #255	; 0xff
   10ba0:	d102      	bne.n	10ba8 <SwTimerNextExpiryDuration+0x10>
    uint32_t duration = SWTIMER_INVALID_TIMEOUT;
   10ba2:	2001      	movs	r0, #1
   10ba4:	4240      	negs	r0, r0
    {
        duration = SwTimerReadValue(runningTimerQueueHead);
    }

    return duration;
}
   10ba6:	bd10      	pop	{r4, pc}
        duration = SwTimerReadValue(runningTimerQueueHead);
   10ba8:	b2c0      	uxtb	r0, r0
   10baa:	4b02      	ldr	r3, [pc, #8]	; (10bb4 <SwTimerNextExpiryDuration+0x1c>)
   10bac:	4798      	blx	r3
   10bae:	e7fa      	b.n	10ba6 <SwTimerNextExpiryDuration+0xe>
   10bb0:	200023c4 	.word	0x200023c4
   10bb4:	00010b49 	.word	0x00010b49

00010bb8 <SwTimersExecute>:

/**************************************************************************//**
\brief Handles Queues and Callbacks for Expired Timers
******************************************************************************/
void SwTimersExecute(void)
{
   10bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   10bba:	46de      	mov	lr, fp
   10bbc:	4657      	mov	r7, sl
   10bbe:	464e      	mov	r6, r9
   10bc0:	4645      	mov	r5, r8
   10bc2:	b5e0      	push	{r5, r6, r7, lr}
   10bc4:	b083      	sub	sp, #12
    time |= ((uint64_t) sysTimeOvf) << 32;
   10bc6:	4b2f      	ldr	r3, [pc, #188]	; (10c84 <SwTimersExecute+0xcc>)
   10bc8:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
   10bca:	4b2f      	ldr	r3, [pc, #188]	; (10c88 <SwTimersExecute+0xd0>)
   10bcc:	881b      	ldrh	r3, [r3, #0]
    time |= (uint64_t) common_tc_read_count();
   10bce:	4b2f      	ldr	r3, [pc, #188]	; (10c8c <SwTimersExecute+0xd4>)
   10bd0:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   10bd2:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   10bd6:	4253      	negs	r3, r2
   10bd8:	4153      	adcs	r3, r2
   10bda:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
   10bdc:	b672      	cpsid	i
   10bde:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   10be2:	2200      	movs	r2, #0
   10be4:	4b2a      	ldr	r3, [pc, #168]	; (10c90 <SwTimersExecute+0xd8>)
   10be6:	701a      	strb	r2, [r3, #0]
	return flags;
   10be8:	9c00      	ldr	r4, [sp, #0]
    uint64_t now = gettime();

    uint8_t flags = cpu_irq_save();
    swtimerInternalHandler();
   10bea:	4b2a      	ldr	r3, [pc, #168]	; (10c94 <SwTimersExecute+0xdc>)
   10bec:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   10bee:	23ff      	movs	r3, #255	; 0xff
   10bf0:	4223      	tst	r3, r4
   10bf2:	d005      	beq.n	10c00 <SwTimersExecute+0x48>
		cpu_irq_enable();
   10bf4:	2201      	movs	r2, #1
   10bf6:	4b26      	ldr	r3, [pc, #152]	; (10c90 <SwTimersExecute+0xd8>)
   10bf8:	701a      	strb	r2, [r3, #0]
   10bfa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   10bfe:	b662      	cpsie	i
	cpu_irq_disable();
   10c00:	4b23      	ldr	r3, [pc, #140]	; (10c90 <SwTimersExecute+0xd8>)
   10c02:	469a      	mov	sl, r3
        /* Expired timer if any will be processed here */
        while (SWTIMER_INVALID != expiredTimerQueueHead)
        {
            flags = cpu_irq_save();

            nextExpiredTimer = swTimers[expiredTimerQueueHead].nextTimer;
   10c04:	4c24      	ldr	r4, [pc, #144]	; (10c98 <SwTimersExecute+0xe0>)
   10c06:	4b25      	ldr	r3, [pc, #148]	; (10c9c <SwTimersExecute+0xe4>)
   10c08:	4699      	mov	r9, r3
   10c0a:	2200      	movs	r2, #0

            /*
            * The expired timer's structure elements are updated
            * and the timer is taken out of expired timer queue
            */
            swTimers[expiredTimerQueueHead].nextTimer = SWTIMER_INVALID;
   10c0c:	20ff      	movs	r0, #255	; 0xff
            */
            expiredTimerQueueHead = nextExpiredTimer;

            if (SWTIMER_INVALID == expiredTimerQueueHead)
            {
                expiredTimerQueueTail = SWTIMER_INVALID;
   10c0e:	4b24      	ldr	r3, [pc, #144]	; (10ca0 <SwTimersExecute+0xe8>)
   10c10:	4698      	mov	r8, r3
		cpu_irq_enable();
   10c12:	4b1f      	ldr	r3, [pc, #124]	; (10c90 <SwTimersExecute+0xd8>)
   10c14:	469c      	mov	ip, r3
   10c16:	e004      	b.n	10c22 <SwTimersExecute+0x6a>
   10c18:	4643      	mov	r3, r8
   10c1a:	6018      	str	r0, [r3, #0]
   10c1c:	e01e      	b.n	10c5c <SwTimersExecute+0xa4>
            }

            cpu_irq_restore(flags);

            if (NULL != callback)
   10c1e:	2e00      	cmp	r6, #0
   10c20:	d125      	bne.n	10c6e <SwTimersExecute+0xb6>
        while (SWTIMER_INVALID != expiredTimerQueueHead)
   10c22:	4b1d      	ldr	r3, [pc, #116]	; (10c98 <SwTimersExecute+0xe0>)
   10c24:	681b      	ldr	r3, [r3, #0]
   10c26:	2bff      	cmp	r3, #255	; 0xff
   10c28:	d024      	beq.n	10c74 <SwTimersExecute+0xbc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   10c2a:	f3ef 8110 	mrs	r1, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   10c2e:	424b      	negs	r3, r1
   10c30:	414b      	adcs	r3, r1
   10c32:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   10c34:	b672      	cpsid	i
   10c36:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   10c3a:	4653      	mov	r3, sl
   10c3c:	701a      	strb	r2, [r3, #0]
	return flags;
   10c3e:	9f01      	ldr	r7, [sp, #4]
            nextExpiredTimer = swTimers[expiredTimerQueueHead].nextTimer;
   10c40:	6823      	ldr	r3, [r4, #0]
   10c42:	011b      	lsls	r3, r3, #4
   10c44:	444b      	add	r3, r9
   10c46:	7b19      	ldrb	r1, [r3, #12]
            callback = (SwTimerCallbackFunc_t)swTimers[expiredTimerQueueHead].timerCb;
   10c48:	685e      	ldr	r6, [r3, #4]
            cbParam = swTimers[expiredTimerQueueHead].paramCb;
   10c4a:	689d      	ldr	r5, [r3, #8]
   10c4c:	46ab      	mov	fp, r5
            swTimers[expiredTimerQueueHead].nextTimer = SWTIMER_INVALID;
   10c4e:	7318      	strb	r0, [r3, #12]
            swTimers[expiredTimerQueueHead].timerCb = NULL;
   10c50:	605a      	str	r2, [r3, #4]
            swTimers[expiredTimerQueueHead].paramCb = NULL;
   10c52:	609a      	str	r2, [r3, #8]
            swTimers[expiredTimerQueueHead].loaded = false;
   10c54:	735a      	strb	r2, [r3, #13]
            expiredTimerQueueHead = nextExpiredTimer;
   10c56:	6021      	str	r1, [r4, #0]
            if (SWTIMER_INVALID == expiredTimerQueueHead)
   10c58:	29ff      	cmp	r1, #255	; 0xff
   10c5a:	d0dd      	beq.n	10c18 <SwTimersExecute+0x60>
	if (cpu_irq_is_enabled_flags(flags))
   10c5c:	4238      	tst	r0, r7
   10c5e:	d0de      	beq.n	10c1e <SwTimersExecute+0x66>
		cpu_irq_enable();
   10c60:	2301      	movs	r3, #1
   10c62:	4661      	mov	r1, ip
   10c64:	700b      	strb	r3, [r1, #0]
   10c66:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   10c6a:	b662      	cpsie	i
   10c6c:	e7d7      	b.n	10c1e <SwTimersExecute+0x66>
            {
                /* Callback function is called */
                callback(cbParam);
   10c6e:	4658      	mov	r0, fp
   10c70:	47b0      	blx	r6
   10c72:	e7ca      	b.n	10c0a <SwTimersExecute+0x52>
                (void)now;
            }
        }
    }
}
   10c74:	b003      	add	sp, #12
   10c76:	bc3c      	pop	{r2, r3, r4, r5}
   10c78:	4690      	mov	r8, r2
   10c7a:	4699      	mov	r9, r3
   10c7c:	46a2      	mov	sl, r4
   10c7e:	46ab      	mov	fp, r5
   10c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10c82:	46c0      	nop			; (mov r8, r8)
   10c84:	20003ba4 	.word	0x20003ba4
   10c88:	20003ba0 	.word	0x20003ba0
   10c8c:	00014f41 	.word	0x00014f41
   10c90:	20000014 	.word	0x20000014
   10c94:	00010819 	.word	0x00010819
   10c98:	200023bc 	.word	0x200023bc
   10c9c:	20003a10 	.word	0x20003a10
   10ca0:	200023c0 	.word	0x200023c0

00010ca4 <TIMER_TaskHandler>:
{
   10ca4:	b510      	push	{r4, lr}
    SwTimersExecute();
   10ca6:	4b02      	ldr	r3, [pc, #8]	; (10cb0 <TIMER_TaskHandler+0xc>)
   10ca8:	4798      	blx	r3
}
   10caa:	2000      	movs	r0, #0
   10cac:	bd10      	pop	{r4, pc}
   10cae:	46c0      	nop			; (mov r8, r8)
   10cb0:	00010bb9 	.word	0x00010bb9

00010cb4 <SwTimerStop>:
        LORAWAN_INVALID_PARAMETER if timerId is not valid
        LORAWAN_INVALID_REQUEST if timerId was not started before
        LORAWAN_SUCCESS if it is successfully stopped
******************************************************************************/
StackRetStatus_t SwTimerStop(uint8_t timerId)
{
   10cb4:	b570      	push	{r4, r5, r6, lr}
   10cb6:	b082      	sub	sp, #8
   10cb8:	0004      	movs	r4, r0
    uint8_t prevIndex;

    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId)
    {
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_STOP_FAILURE);
        return LORAWAN_INVALID_PARAMETER;
   10cba:	200a      	movs	r0, #10
    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId)
   10cbc:	2c18      	cmp	r4, #24
   10cbe:	d901      	bls.n	10cc4 <SwTimerStop+0x10>
        return LORAWAN_SUCCESS;
    }

    SYS_ASSERT_INFO(ASSERT_HAL_TIMER_STOP_FAILURE);
    return LORAWAN_INVALID_REQUEST;
}
   10cc0:	b002      	add	sp, #8
   10cc2:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   10cc4:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   10cc8:	425a      	negs	r2, r3
   10cca:	4153      	adcs	r3, r2
   10ccc:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   10cce:	b672      	cpsid	i
   10cd0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   10cd4:	2200      	movs	r2, #0
   10cd6:	4b47      	ldr	r3, [pc, #284]	; (10df4 <SwTimerStop+0x140>)
   10cd8:	701a      	strb	r2, [r3, #0]
	return flags;
   10cda:	9d01      	ldr	r5, [sp, #4]
    swtimerInternalHandler();
   10cdc:	4b46      	ldr	r3, [pc, #280]	; (10df8 <SwTimerStop+0x144>)
   10cde:	4798      	blx	r3
    if (runningTimers > 0)
   10ce0:	4b46      	ldr	r3, [pc, #280]	; (10dfc <SwTimerStop+0x148>)
   10ce2:	781b      	ldrb	r3, [r3, #0]
   10ce4:	2b00      	cmp	r3, #0
   10ce6:	d040      	beq.n	10d6a <SwTimerStop+0xb6>
        uint8_t timer_count = runningTimers;
   10ce8:	4b44      	ldr	r3, [pc, #272]	; (10dfc <SwTimerStop+0x148>)
   10cea:	781b      	ldrb	r3, [r3, #0]
   10cec:	b2db      	uxtb	r3, r3
        prevIndex = currIndex = runningTimerQueueHead;
   10cee:	4a44      	ldr	r2, [pc, #272]	; (10e00 <SwTimerStop+0x14c>)
   10cf0:	6816      	ldr	r6, [r2, #0]
   10cf2:	b2f1      	uxtb	r1, r6
        while (timer_count > 0)
   10cf4:	2b00      	cmp	r3, #0
   10cf6:	d038      	beq.n	10d6a <SwTimerStop+0xb6>
            if (timerId == currIndex)
   10cf8:	428c      	cmp	r4, r1
   10cfa:	d00b      	beq.n	10d14 <SwTimerStop+0x60>
                currIndex = swTimers[currIndex].nextTimer;
   10cfc:	4841      	ldr	r0, [pc, #260]	; (10e04 <SwTimerStop+0x150>)
   10cfe:	010a      	lsls	r2, r1, #4
   10d00:	1882      	adds	r2, r0, r2
   10d02:	7b12      	ldrb	r2, [r2, #12]
            timer_count--;
   10d04:	3b01      	subs	r3, #1
   10d06:	b2db      	uxtb	r3, r3
        while (timer_count > 0)
   10d08:	2b00      	cmp	r3, #0
   10d0a:	d02e      	beq.n	10d6a <SwTimerStop+0xb6>
            if (timerId == currIndex)
   10d0c:	4294      	cmp	r4, r2
   10d0e:	d001      	beq.n	10d14 <SwTimerStop+0x60>
                currIndex = swTimers[currIndex].nextTimer;
   10d10:	0011      	movs	r1, r2
   10d12:	e7f4      	b.n	10cfe <SwTimerStop+0x4a>
                if (timerId == runningTimerQueueHead)
   10d14:	42a6      	cmp	r6, r4
   10d16:	d01d      	beq.n	10d54 <SwTimerStop+0xa0>
                    swTimers[prevIndex].nextTimer = swTimers[timerId].nextTimer;
   10d18:	4b3a      	ldr	r3, [pc, #232]	; (10e04 <SwTimerStop+0x150>)
   10d1a:	0122      	lsls	r2, r4, #4
   10d1c:	189a      	adds	r2, r3, r2
   10d1e:	7b12      	ldrb	r2, [r2, #12]
   10d20:	0109      	lsls	r1, r1, #4
   10d22:	1859      	adds	r1, r3, r1
   10d24:	730a      	strb	r2, [r1, #12]
                swTimers[timerId].nextTimer  = SWTIMER_INVALID;
   10d26:	0122      	lsls	r2, r4, #4
   10d28:	4b36      	ldr	r3, [pc, #216]	; (10e04 <SwTimerStop+0x150>)
   10d2a:	189b      	adds	r3, r3, r2
   10d2c:	22ff      	movs	r2, #255	; 0xff
   10d2e:	731a      	strb	r2, [r3, #12]
            runningTimers--;
   10d30:	4a32      	ldr	r2, [pc, #200]	; (10dfc <SwTimerStop+0x148>)
   10d32:	7813      	ldrb	r3, [r2, #0]
   10d34:	3b01      	subs	r3, #1
   10d36:	b2db      	uxtb	r3, r3
   10d38:	7013      	strb	r3, [r2, #0]
        swTimers[timerId].timerCb = NULL;
   10d3a:	0124      	lsls	r4, r4, #4
   10d3c:	4b31      	ldr	r3, [pc, #196]	; (10e04 <SwTimerStop+0x150>)
   10d3e:	191c      	adds	r4, r3, r4
   10d40:	2300      	movs	r3, #0
   10d42:	6063      	str	r3, [r4, #4]
        swTimers[timerId].paramCb = NULL;
   10d44:	60a3      	str	r3, [r4, #8]
        swTimers[timerId].loaded = false;
   10d46:	7363      	strb	r3, [r4, #13]
	if (cpu_irq_is_enabled_flags(flags))
   10d48:	33ff      	adds	r3, #255	; 0xff
        return LORAWAN_SUCCESS;
   10d4a:	2008      	movs	r0, #8
   10d4c:	422b      	tst	r3, r5
   10d4e:	d0b7      	beq.n	10cc0 <SwTimerStop+0xc>
   10d50:	2301      	movs	r3, #1
   10d52:	e040      	b.n	10dd6 <SwTimerStop+0x122>
                    common_tc_compare_stop();
   10d54:	4b2c      	ldr	r3, [pc, #176]	; (10e08 <SwTimerStop+0x154>)
   10d56:	4798      	blx	r3
                    runningTimerQueueHead = swTimers[timerId].nextTimer;
   10d58:	0122      	lsls	r2, r4, #4
   10d5a:	4b2a      	ldr	r3, [pc, #168]	; (10e04 <SwTimerStop+0x150>)
   10d5c:	189b      	adds	r3, r3, r2
   10d5e:	7b18      	ldrb	r0, [r3, #12]
   10d60:	4b27      	ldr	r3, [pc, #156]	; (10e00 <SwTimerStop+0x14c>)
   10d62:	6018      	str	r0, [r3, #0]
                    loadHwTimer(runningTimerQueueHead);
   10d64:	4b29      	ldr	r3, [pc, #164]	; (10e0c <SwTimerStop+0x158>)
   10d66:	4798      	blx	r3
   10d68:	e7dd      	b.n	10d26 <SwTimerStop+0x72>
        prevIndex = currIndex = expiredTimerQueueHead;
   10d6a:	4b29      	ldr	r3, [pc, #164]	; (10e10 <SwTimerStop+0x15c>)
   10d6c:	6818      	ldr	r0, [r3, #0]
   10d6e:	b2c2      	uxtb	r2, r0
        while (SWTIMER_INVALID != currIndex)
   10d70:	2aff      	cmp	r2, #255	; 0xff
   10d72:	d02c      	beq.n	10dce <SwTimerStop+0x11a>
            if (timerId == currIndex)
   10d74:	4294      	cmp	r4, r2
   10d76:	d009      	beq.n	10d8c <SwTimerStop+0xd8>
                currIndex = swTimers[currIndex].nextTimer;
   10d78:	4922      	ldr	r1, [pc, #136]	; (10e04 <SwTimerStop+0x150>)
   10d7a:	0113      	lsls	r3, r2, #4
   10d7c:	18cb      	adds	r3, r1, r3
   10d7e:	7b1b      	ldrb	r3, [r3, #12]
        while (SWTIMER_INVALID != currIndex)
   10d80:	2bff      	cmp	r3, #255	; 0xff
   10d82:	d024      	beq.n	10dce <SwTimerStop+0x11a>
            if (timerId == currIndex)
   10d84:	429c      	cmp	r4, r3
   10d86:	d001      	beq.n	10d8c <SwTimerStop+0xd8>
                currIndex = swTimers[currIndex].nextTimer;
   10d88:	001a      	movs	r2, r3
   10d8a:	e7f6      	b.n	10d7a <SwTimerStop+0xc6>
                if (timerId == expiredTimerQueueHead)
   10d8c:	42a0      	cmp	r0, r4
   10d8e:	d00d      	beq.n	10dac <SwTimerStop+0xf8>
                    swTimers[prevIndex].nextTimer = swTimers[timerId].nextTimer;
   10d90:	4b1c      	ldr	r3, [pc, #112]	; (10e04 <SwTimerStop+0x150>)
   10d92:	0121      	lsls	r1, r4, #4
   10d94:	1859      	adds	r1, r3, r1
   10d96:	7b09      	ldrb	r1, [r1, #12]
   10d98:	0110      	lsls	r0, r2, #4
   10d9a:	181b      	adds	r3, r3, r0
   10d9c:	7319      	strb	r1, [r3, #12]
                    if (timerId == expiredTimerQueueTail)
   10d9e:	4b1d      	ldr	r3, [pc, #116]	; (10e14 <SwTimerStop+0x160>)
   10da0:	681b      	ldr	r3, [r3, #0]
   10da2:	429c      	cmp	r4, r3
   10da4:	d1c9      	bne.n	10d3a <SwTimerStop+0x86>
                        expiredTimerQueueTail = prevIndex;
   10da6:	4b1b      	ldr	r3, [pc, #108]	; (10e14 <SwTimerStop+0x160>)
   10da8:	601a      	str	r2, [r3, #0]
   10daa:	e7c6      	b.n	10d3a <SwTimerStop+0x86>
                    if (expiredTimerQueueHead == expiredTimerQueueTail)
   10dac:	4b19      	ldr	r3, [pc, #100]	; (10e14 <SwTimerStop+0x160>)
   10dae:	681b      	ldr	r3, [r3, #0]
   10db0:	4298      	cmp	r0, r3
   10db2:	d006      	beq.n	10dc2 <SwTimerStop+0x10e>
                        expiredTimerQueueHead = swTimers[expiredTimerQueueHead].nextTimer;
   10db4:	0100      	lsls	r0, r0, #4
   10db6:	4b13      	ldr	r3, [pc, #76]	; (10e04 <SwTimerStop+0x150>)
   10db8:	1818      	adds	r0, r3, r0
   10dba:	7b02      	ldrb	r2, [r0, #12]
   10dbc:	4b14      	ldr	r3, [pc, #80]	; (10e10 <SwTimerStop+0x15c>)
   10dbe:	601a      	str	r2, [r3, #0]
   10dc0:	e7bb      	b.n	10d3a <SwTimerStop+0x86>
                        expiredTimerQueueHead = expiredTimerQueueTail = SWTIMER_INVALID;
   10dc2:	23ff      	movs	r3, #255	; 0xff
   10dc4:	4a13      	ldr	r2, [pc, #76]	; (10e14 <SwTimerStop+0x160>)
   10dc6:	6013      	str	r3, [r2, #0]
   10dc8:	4a11      	ldr	r2, [pc, #68]	; (10e10 <SwTimerStop+0x15c>)
   10dca:	6013      	str	r3, [r2, #0]
   10dcc:	e7b5      	b.n	10d3a <SwTimerStop+0x86>
   10dce:	23ff      	movs	r3, #255	; 0xff
   10dd0:	422b      	tst	r3, r5
   10dd2:	d00a      	beq.n	10dea <SwTimerStop+0x136>
   10dd4:	2300      	movs	r3, #0
		cpu_irq_enable();
   10dd6:	2101      	movs	r1, #1
   10dd8:	4a06      	ldr	r2, [pc, #24]	; (10df4 <SwTimerStop+0x140>)
   10dda:	7011      	strb	r1, [r2, #0]
   10ddc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   10de0:	b662      	cpsie	i
    if (timerStopReqStatus)
   10de2:	2b00      	cmp	r3, #0
   10de4:	d103      	bne.n	10dee <SwTimerStop+0x13a>
    return LORAWAN_INVALID_REQUEST;
   10de6:	2015      	movs	r0, #21
   10de8:	e76a      	b.n	10cc0 <SwTimerStop+0xc>
   10dea:	2015      	movs	r0, #21
   10dec:	e768      	b.n	10cc0 <SwTimerStop+0xc>
        return LORAWAN_SUCCESS;
   10dee:	2008      	movs	r0, #8
   10df0:	e766      	b.n	10cc0 <SwTimerStop+0xc>
   10df2:	46c0      	nop			; (mov r8, r8)
   10df4:	20000014 	.word	0x20000014
   10df8:	00010819 	.word	0x00010819
   10dfc:	200023c8 	.word	0x200023c8
   10e00:	200023c4 	.word	0x200023c4
   10e04:	20003a10 	.word	0x20003a10
   10e08:	00014f8d 	.word	0x00014f8d
   10e0c:	00010781 	.word	0x00010781
   10e10:	200023bc 	.word	0x200023bc
   10e14:	200023c0 	.word	0x200023c0

00010e18 <SwTimerRunRemainingTime>:
{
   10e18:	b5f0      	push	{r4, r5, r6, r7, lr}
   10e1a:	b083      	sub	sp, #12
   10e1c:	0005      	movs	r5, r0
    void * timerCb = (void*)(swTimers[runningTimerQueueHead].timerCb);
   10e1e:	4b0b      	ldr	r3, [pc, #44]	; (10e4c <SwTimerRunRemainingTime+0x34>)
   10e20:	681c      	ldr	r4, [r3, #0]
   10e22:	0122      	lsls	r2, r4, #4
   10e24:	4b0a      	ldr	r3, [pc, #40]	; (10e50 <SwTimerRunRemainingTime+0x38>)
   10e26:	189b      	adds	r3, r3, r2
   10e28:	685e      	ldr	r6, [r3, #4]
    void *paramCb = swTimers[runningTimerQueueHead].paramCb;
   10e2a:	689f      	ldr	r7, [r3, #8]
    uint8_t timerId = runningTimerQueueHead;
   10e2c:	b2e4      	uxtb	r4, r4
    if (LORAWAN_SUCCESS == SwTimerStop(runningTimerQueueHead))
   10e2e:	0020      	movs	r0, r4
   10e30:	4b08      	ldr	r3, [pc, #32]	; (10e54 <SwTimerRunRemainingTime+0x3c>)
   10e32:	4798      	blx	r3
   10e34:	2808      	cmp	r0, #8
   10e36:	d001      	beq.n	10e3c <SwTimerRunRemainingTime+0x24>
}
   10e38:	b003      	add	sp, #12
   10e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        SwTimerStart(timerId, offset, SW_TIMEOUT_RELATIVE, timerCb, paramCb);
   10e3c:	9700      	str	r7, [sp, #0]
   10e3e:	0033      	movs	r3, r6
   10e40:	2200      	movs	r2, #0
   10e42:	0029      	movs	r1, r5
   10e44:	0020      	movs	r0, r4
   10e46:	4c04      	ldr	r4, [pc, #16]	; (10e58 <SwTimerRunRemainingTime+0x40>)
   10e48:	47a0      	blx	r4
}
   10e4a:	e7f5      	b.n	10e38 <SwTimerRunRemainingTime+0x20>
   10e4c:	200023c4 	.word	0x200023c4
   10e50:	20003a10 	.word	0x20003a10
   10e54:	00010cb5 	.word	0x00010cb5
   10e58:	0001099d 	.word	0x0001099d

00010e5c <SystemTimerSync>:
/**************************************************************************//**
\brief Resumes the software timer by offseting it with given time
\param[in] timeToSync Amount of duration to offset from known system time
******************************************************************************/
void SystemTimerSync(uint64_t timeToSync)
{
   10e5c:	b570      	push	{r4, r5, r6, lr}
    uint8_t timerId;
    uint16_t adjustOffset;

    sysTimeLastKnown += timeToSync;
   10e5e:	4b22      	ldr	r3, [pc, #136]	; (10ee8 <SystemTimerSync+0x8c>)
   10e60:	681c      	ldr	r4, [r3, #0]
   10e62:	685d      	ldr	r5, [r3, #4]
   10e64:	1900      	adds	r0, r0, r4
   10e66:	4169      	adcs	r1, r5
   10e68:	6018      	str	r0, [r3, #0]
   10e6a:	6059      	str	r1, [r3, #4]

    /* 1. Update system time */
    sysTimeOvf = (uint32_t) (sysTimeLastKnown >> 32);
   10e6c:	4b1f      	ldr	r3, [pc, #124]	; (10eec <SystemTimerSync+0x90>)
   10e6e:	6019      	str	r1, [r3, #0]
    sysTime = (uint16_t) ((sysTimeLastKnown >> SWTIMER_SYSTIME_SHIFTMASK) & 0xffff);
   10e70:	0c02      	lsrs	r2, r0, #16
   10e72:	4b1f      	ldr	r3, [pc, #124]	; (10ef0 <SystemTimerSync+0x94>)
   10e74:	801a      	strh	r2, [r3, #0]

    /* 2. Adjust expiration of running timers */
    adjustOffset = (uint16_t) sysTimeLastKnown;
   10e76:	b280      	uxth	r0, r0
    timerId = runningTimerQueueHead;
   10e78:	4b1e      	ldr	r3, [pc, #120]	; (10ef4 <SystemTimerSync+0x98>)
   10e7a:	781b      	ldrb	r3, [r3, #0]
    for (uint8_t index = 0; index < runningTimers; index++)
   10e7c:	4a1e      	ldr	r2, [pc, #120]	; (10ef8 <SystemTimerSync+0x9c>)
   10e7e:	7812      	ldrb	r2, [r2, #0]
   10e80:	2a00      	cmp	r2, #0
   10e82:	d012      	beq.n	10eaa <SystemTimerSync+0x4e>
   10e84:	2200      	movs	r2, #0
    {
        if (SWTIMER_INVALID != timerId)
        {
            swTimers[timerId].absoluteExpiryTime -= adjustOffset;
   10e86:	4c1d      	ldr	r4, [pc, #116]	; (10efc <SystemTimerSync+0xa0>)
    for (uint8_t index = 0; index < runningTimers; index++)
   10e88:	4d1b      	ldr	r5, [pc, #108]	; (10ef8 <SystemTimerSync+0x9c>)
   10e8a:	e005      	b.n	10e98 <SystemTimerSync+0x3c>
   10e8c:	3201      	adds	r2, #1
   10e8e:	b2d2      	uxtb	r2, r2
   10e90:	7829      	ldrb	r1, [r5, #0]
   10e92:	b2c9      	uxtb	r1, r1
   10e94:	4291      	cmp	r1, r2
   10e96:	d908      	bls.n	10eaa <SystemTimerSync+0x4e>
        if (SWTIMER_INVALID != timerId)
   10e98:	2bff      	cmp	r3, #255	; 0xff
   10e9a:	d0f7      	beq.n	10e8c <SystemTimerSync+0x30>
            swTimers[timerId].absoluteExpiryTime -= adjustOffset;
   10e9c:	011b      	lsls	r3, r3, #4
   10e9e:	5919      	ldr	r1, [r3, r4]
   10ea0:	1a09      	subs	r1, r1, r0
   10ea2:	5119      	str	r1, [r3, r4]
            timerId = swTimers[timerId].nextTimer;
   10ea4:	18e3      	adds	r3, r4, r3
   10ea6:	7b1b      	ldrb	r3, [r3, #12]
   10ea8:	e7f0      	b.n	10e8c <SystemTimerSync+0x30>
        }
    }

    /* 3. Start hardware timer */
    common_tc_init();
   10eaa:	4b15      	ldr	r3, [pc, #84]	; (10f00 <SystemTimerSync+0xa4>)
   10eac:	4798      	blx	r3
    set_common_tc_overflow_callback(hwTimerOverflowCallback);
   10eae:	4815      	ldr	r0, [pc, #84]	; (10f04 <SystemTimerSync+0xa8>)
   10eb0:	4b15      	ldr	r3, [pc, #84]	; (10f08 <SystemTimerSync+0xac>)
   10eb2:	4798      	blx	r3
    set_common_tc_expiry_callback(hwTimerExpiryCallback);
   10eb4:	4815      	ldr	r0, [pc, #84]	; (10f0c <SystemTimerSync+0xb0>)
   10eb6:	4b16      	ldr	r3, [pc, #88]	; (10f10 <SystemTimerSync+0xb4>)
   10eb8:	4798      	blx	r3

    /* 4. Resume timer queue operations */
    if (runningTimers && (SWTIMER_INVALID != runningTimerQueueHead))
   10eba:	4b0f      	ldr	r3, [pc, #60]	; (10ef8 <SystemTimerSync+0x9c>)
   10ebc:	781b      	ldrb	r3, [r3, #0]
   10ebe:	2b00      	cmp	r3, #0
   10ec0:	d009      	beq.n	10ed6 <SystemTimerSync+0x7a>
   10ec2:	4b0c      	ldr	r3, [pc, #48]	; (10ef4 <SystemTimerSync+0x98>)
   10ec4:	681b      	ldr	r3, [r3, #0]
   10ec6:	2bff      	cmp	r3, #255	; 0xff
   10ec8:	d005      	beq.n	10ed6 <SystemTimerSync+0x7a>
    {
        uint32_t remainingTime = SwTimerNextExpiryDuration();
   10eca:	4b12      	ldr	r3, [pc, #72]	; (10f14 <SystemTimerSync+0xb8>)
   10ecc:	4798      	blx	r3

        if (SWTIMER_MIN_TIMEOUT > remainingTime)
   10ece:	28fe      	cmp	r0, #254	; 0xfe
   10ed0:	d902      	bls.n	10ed8 <SystemTimerSync+0x7c>
        else
        {
            /*
            * There is some time left in head timer, so restart it.
            */
            SwTimerRunRemainingTime(remainingTime);
   10ed2:	4b11      	ldr	r3, [pc, #68]	; (10f18 <SystemTimerSync+0xbc>)
   10ed4:	4798      	blx	r3
        }
    }
}
   10ed6:	bd70      	pop	{r4, r5, r6, pc}
            isTimerTriggered = true;
   10ed8:	2201      	movs	r2, #1
   10eda:	4b10      	ldr	r3, [pc, #64]	; (10f1c <SystemTimerSync+0xc0>)
   10edc:	701a      	strb	r2, [r3, #0]
            SYSTEM_PostTask(TIMER_TASK_ID);
   10ede:	2001      	movs	r0, #1
   10ee0:	4b0f      	ldr	r3, [pc, #60]	; (10f20 <SystemTimerSync+0xc4>)
   10ee2:	4798      	blx	r3
   10ee4:	e7f7      	b.n	10ed6 <SystemTimerSync+0x7a>
   10ee6:	46c0      	nop			; (mov r8, r8)
   10ee8:	200023d0 	.word	0x200023d0
   10eec:	20003ba4 	.word	0x20003ba4
   10ef0:	20003ba0 	.word	0x20003ba0
   10ef4:	200023c4 	.word	0x200023c4
   10ef8:	200023c8 	.word	0x200023c8
   10efc:	20003a10 	.word	0x20003a10
   10f00:	00015021 	.word	0x00015021
   10f04:	000106c1 	.word	0x000106c1
   10f08:	000150a5 	.word	0x000150a5
   10f0c:	00010699 	.word	0x00010699
   10f10:	000150b1 	.word	0x000150b1
   10f14:	00010b99 	.word	0x00010b99
   10f18:	00010e19 	.word	0x00010e19
   10f1c:	20003ba2 	.word	0x20003ba2
   10f20:	00010fb5 	.word	0x00010fb5

00010f24 <SwTimerWriteTimestamp>:
\param[in] index Index of the system timestamp
\param[in] *timestamp Pointer-to-timestamp to be stored in the given index
******************************************************************************/
void SwTimerWriteTimestamp(uint8_t index, SwTimestamp_t *timestamp)
{
    swTimestamp[index] = *timestamp;
   10f24:	680a      	ldr	r2, [r1, #0]
   10f26:	684b      	ldr	r3, [r1, #4]
   10f28:	00c1      	lsls	r1, r0, #3
   10f2a:	4802      	ldr	r0, [pc, #8]	; (10f34 <SwTimerWriteTimestamp+0x10>)
   10f2c:	1840      	adds	r0, r0, r1
   10f2e:	6002      	str	r2, [r0, #0]
   10f30:	6043      	str	r3, [r0, #4]
}
   10f32:	4770      	bx	lr
   10f34:	20003a00 	.word	0x20003a00

00010f38 <Stack_Init>:
/**************************************************************************//**
\brief Initializes the system. This is the first stack function to be called
       by the application in the main() function.
******************************************************************************/
void Stack_Init(void)
{
   10f38:	b510      	push	{r4, lr}
	
	/* LORAWAN_Init() should have been called form here, 
	   but parser application has a round-about way to call it now */
 
	/* Post application task to initiate the execution from there */
	SYSTEM_PostTask(APP_TASK_ID);
   10f3a:	2010      	movs	r0, #16
   10f3c:	4b01      	ldr	r3, [pc, #4]	; (10f44 <Stack_Init+0xc>)
   10f3e:	4798      	blx	r3
}
   10f40:	bd10      	pop	{r4, pc}
   10f42:	46c0      	nop			; (mov r8, r8)
   10f44:	00010fb5 	.word	0x00010fb5

00010f48 <SYSTEM_RunTasks>:
/************************************************************************/
/*********************************************************************//**
\brief System tasks execution entry point
*************************************************************************/
void SYSTEM_RunTasks(void)
{
   10f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if ((1 << SYSTEM_TASK_ID_COUNT) > sysTaskFlag)
   10f4a:	4b16      	ldr	r3, [pc, #88]	; (10fa4 <SYSTEM_RunTasks+0x5c>)
   10f4c:	881b      	ldrh	r3, [r3, #0]
   10f4e:	b29b      	uxth	r3, r3
   10f50:	2b1f      	cmp	r3, #31
   10f52:	d922      	bls.n	10f9a <SYSTEM_RunTasks+0x52>
   10f54:	e7fe      	b.n	10f54 <SYSTEM_RunTasks+0xc>
    { /* Only valid task bits are set */
        while (sysTaskFlag)
        { /* One or more task are pending to execute */
            for (uint16_t taskId = 0; taskId < SYSTEM_TASK_ID_COUNT; taskId++)
            {
                if ((1 << taskId) & sysTaskFlag)
   10f56:	2500      	movs	r5, #0
                    /*
                    * Reset the task bit since it is to be executed now.
                    * It is done inside atomic section to avoid any interrupt context
                    * corrupting the bits.
                    */
                    ATOMIC_SECTION_ENTER
   10f58:	4b13      	ldr	r3, [pc, #76]	; (10fa8 <SYSTEM_RunTasks+0x60>)
   10f5a:	4798      	blx	r3
                    sysTaskFlag &= ~(1 << taskId);
   10f5c:	4911      	ldr	r1, [pc, #68]	; (10fa4 <SYSTEM_RunTasks+0x5c>)
   10f5e:	880b      	ldrh	r3, [r1, #0]
   10f60:	2201      	movs	r2, #1
   10f62:	40aa      	lsls	r2, r5
   10f64:	4393      	bics	r3, r2
   10f66:	800b      	strh	r3, [r1, #0]
                    ATOMIC_SECTION_EXIT
   10f68:	4b10      	ldr	r3, [pc, #64]	; (10fac <SYSTEM_RunTasks+0x64>)
   10f6a:	4798      	blx	r3

                    /* Return value is not used now, can be used later */
                    taskHandlers[taskId]();
   10f6c:	00ad      	lsls	r5, r5, #2
   10f6e:	4b10      	ldr	r3, [pc, #64]	; (10fb0 <SYSTEM_RunTasks+0x68>)
   10f70:	58eb      	ldr	r3, [r5, r3]
   10f72:	4798      	blx	r3
                if ((1 << taskId) & sysTaskFlag)
   10f74:	2101      	movs	r1, #1
        while (sysTaskFlag)
   10f76:	883b      	ldrh	r3, [r7, #0]
   10f78:	b29b      	uxth	r3, r3
   10f7a:	2b00      	cmp	r3, #0
   10f7c:	d011      	beq.n	10fa2 <SYSTEM_RunTasks+0x5a>
                if ((1 << taskId) & sysTaskFlag)
   10f7e:	8823      	ldrh	r3, [r4, #0]
   10f80:	420b      	tst	r3, r1
   10f82:	d1e8      	bne.n	10f56 <SYSTEM_RunTasks+0xe>
   10f84:	2201      	movs	r2, #1
   10f86:	8833      	ldrh	r3, [r6, #0]
   10f88:	b29b      	uxth	r3, r3
   10f8a:	0015      	movs	r5, r2
   10f8c:	4113      	asrs	r3, r2
   10f8e:	4219      	tst	r1, r3
   10f90:	d1e2      	bne.n	10f58 <SYSTEM_RunTasks+0x10>
   10f92:	3201      	adds	r2, #1
            for (uint16_t taskId = 0; taskId < SYSTEM_TASK_ID_COUNT; taskId++)
   10f94:	2a05      	cmp	r2, #5
   10f96:	d1f6      	bne.n	10f86 <SYSTEM_RunTasks+0x3e>
   10f98:	e7ed      	b.n	10f76 <SYSTEM_RunTasks+0x2e>
        while (sysTaskFlag)
   10f9a:	4f02      	ldr	r7, [pc, #8]	; (10fa4 <SYSTEM_RunTasks+0x5c>)
                if ((1 << taskId) & sysTaskFlag)
   10f9c:	003c      	movs	r4, r7
   10f9e:	003e      	movs	r6, r7
   10fa0:	e7e8      	b.n	10f74 <SYSTEM_RunTasks+0x2c>
        * Can happen only due to corruption, so halt
        * TODO : replace this with assert implementation
        */
        while(1);
    }
}
   10fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10fa4:	200023d8 	.word	0x200023d8
   10fa8:	0000ff69 	.word	0x0000ff69
   10fac:	0000ff75 	.word	0x0000ff75
   10fb0:	0001af84 	.word	0x0001af84

00010fb4 <SYSTEM_PostTask>:

\param[in] task - ID of the posted task.
*************************************************************************/

void SYSTEM_PostTask(SYSTEM_Task_t task)
{
   10fb4:	b510      	push	{r4, lr}
   10fb6:	0004      	movs	r4, r0
    ATOMIC_SECTION_ENTER
   10fb8:	4b04      	ldr	r3, [pc, #16]	; (10fcc <SYSTEM_PostTask+0x18>)
   10fba:	4798      	blx	r3
    sysTaskFlag |= task;
   10fbc:	4b04      	ldr	r3, [pc, #16]	; (10fd0 <SYSTEM_PostTask+0x1c>)
   10fbe:	8818      	ldrh	r0, [r3, #0]
   10fc0:	4320      	orrs	r0, r4
   10fc2:	8018      	strh	r0, [r3, #0]
    ATOMIC_SECTION_EXIT
   10fc4:	4b03      	ldr	r3, [pc, #12]	; (10fd4 <SYSTEM_PostTask+0x20>)
   10fc6:	4798      	blx	r3
}
   10fc8:	bd10      	pop	{r4, pc}
   10fca:	46c0      	nop			; (mov r8, r8)
   10fcc:	0000ff69 	.word	0x0000ff69
   10fd0:	200023d8 	.word	0x200023d8
   10fd4:	0000ff75 	.word	0x0000ff75

00010fd8 <Radio_WriteMode>:
\param newModulation	- Sets the modulation.
\param blocking			- Sets if its blocking call or not.
\return					- none.
*************************************************************************/
void Radio_WriteMode(RadioMode_t newMode, RadioModulation_t newModulation, uint8_t blocking)
{
   10fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
   10fda:	46d6      	mov	lr, sl
   10fdc:	464f      	mov	r7, r9
   10fde:	b580      	push	{r7, lr}
   10fe0:	b083      	sub	sp, #12
   10fe2:	9201      	str	r2, [sp, #4]
    uint8_t opMode;
    uint8_t dioMapping;
    RadioModulation_t currentModulation;
    RadioMode_t currentMode;

    if ((MODULATION_FSK == newModulation) &&
   10fe4:	2900      	cmp	r1, #0
   10fe6:	d102      	bne.n	10fee <Radio_WriteMode+0x16>
   10fe8:	1f83      	subs	r3, r0, #6
   10fea:	2b01      	cmp	r3, #1
   10fec:	d92a      	bls.n	11044 <Radio_WriteMode+0x6c>
        // Unavailable modes for FSK. Just return.
        return;
    }

    // Sanity enforcement on parameters
    newMode &= 0x07;
   10fee:	2307      	movs	r3, #7
   10ff0:	4699      	mov	r9, r3
   10ff2:	001c      	movs	r4, r3
   10ff4:	4004      	ands	r4, r0
    newModulation &= 0x01;
   10ff6:	2601      	movs	r6, #1
   10ff8:	400e      	ands	r6, r1

    opMode = RADIO_RegisterRead(REG_OPMODE);
   10ffa:	2001      	movs	r0, #1
   10ffc:	4b2b      	ldr	r3, [pc, #172]	; (110ac <Radio_WriteMode+0xd4>)
   10ffe:	4798      	blx	r3
   11000:	0005      	movs	r5, r0
   11002:	0007      	movs	r7, r0

    if ((opMode & 0x80) != 0)
   11004:	b243      	sxtb	r3, r0
   11006:	469a      	mov	sl, r3
    else
    {
        currentModulation = MODULATION_FSK;
    }

    currentMode = opMode & 0x07;
   11008:	464b      	mov	r3, r9
   1100a:	4003      	ands	r3, r0

    // If we need to change modulation, we need to do this in sleep mode.
    // Otherwise, we can go straight to changing the current mode to newMode.
    if (newModulation != currentModulation)
   1100c:	4652      	mov	r2, sl
   1100e:	0fd2      	lsrs	r2, r2, #31
   11010:	4296      	cmp	r6, r2
   11012:	d00a      	beq.n	1102a <Radio_WriteMode+0x52>
    {
        // Go to sleep
        if (MODE_SLEEP != currentMode)
   11014:	2b00      	cmp	r3, #0
   11016:	d11a      	bne.n	1104e <Radio_WriteMode+0x76>
            // Clear mode bits, effectively going to sleep
            RADIO_RegisterWrite(REG_OPMODE, opMode & (~0x07));
            currentMode = MODE_SLEEP;
        }
        // Change modulation
        if (MODULATION_FSK == newModulation)
   11018:	2e00      	cmp	r6, #0
   1101a:	d11e      	bne.n	1105a <Radio_WriteMode+0x82>
        {
            // Clear MSB and sleep bits to make it stay in sleep
            opMode = opMode & (~0x87);
   1101c:	2778      	movs	r7, #120	; 0x78
   1101e:	402f      	ands	r7, r5
        else
        {
            // LoRa mode. Set MSB and clear sleep bits to make it stay in sleep
            opMode = 0x80 | (opMode & (~0x87));
        }
        RADIO_RegisterWrite(REG_OPMODE, opMode);
   11020:	0039      	movs	r1, r7
   11022:	2001      	movs	r0, #1
   11024:	4b22      	ldr	r3, [pc, #136]	; (110b0 <Radio_WriteMode+0xd8>)
   11026:	4798      	blx	r3
   11028:	2300      	movs	r3, #0

    // From here on currentModulation is no longer current, we will use
    // newModulation instead as it reflects the chip configuration.
    // opMode reflects the actual configuration of the chip.

    if (newMode != currentMode)
   1102a:	42a3      	cmp	r3, r4
   1102c:	d00a      	beq.n	11044 <Radio_WriteMode+0x6c>
    {
        // If we need to block until the mode switch is ready, configure the
        // DIO5 pin to relay this information.
        if ((MODE_SLEEP != newMode) && (1 == blocking))
   1102e:	2c00      	cmp	r4, #0
   11030:	d030      	beq.n	11094 <Radio_WriteMode+0xbc>
   11032:	9b01      	ldr	r3, [sp, #4]
   11034:	2b01      	cmp	r3, #1
   11036:	d016      	beq.n	11066 <Radio_WriteMode+0x8e>
            }
            RADIO_RegisterWrite(REG_DIOMAPPING2, dioMapping);
        }

        // Do the actual mode switch.
        opMode &= ~0x07;                // Clear old mode bits
   11038:	21f8      	movs	r1, #248	; 0xf8
   1103a:	4039      	ands	r1, r7
        opMode |= newMode;              // Set new mode bits
        RADIO_RegisterWrite(REG_OPMODE, opMode);
   1103c:	4321      	orrs	r1, r4
   1103e:	2001      	movs	r0, #1
   11040:	4b1b      	ldr	r3, [pc, #108]	; (110b0 <Radio_WriteMode+0xd8>)
   11042:	4798      	blx	r3
                SystemBlockingWaitMs(1);
            }
        }
    }
#endif
}
   11044:	b003      	add	sp, #12
   11046:	bc0c      	pop	{r2, r3}
   11048:	4691      	mov	r9, r2
   1104a:	469a      	mov	sl, r3
   1104c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            RADIO_RegisterWrite(REG_OPMODE, opMode & (~0x07));
   1104e:	21f8      	movs	r1, #248	; 0xf8
   11050:	4001      	ands	r1, r0
   11052:	2001      	movs	r0, #1
   11054:	4b16      	ldr	r3, [pc, #88]	; (110b0 <Radio_WriteMode+0xd8>)
   11056:	4798      	blx	r3
   11058:	e7de      	b.n	11018 <Radio_WriteMode+0x40>
            opMode = 0x80 | (opMode & (~0x87));
   1105a:	2778      	movs	r7, #120	; 0x78
   1105c:	4653      	mov	r3, sl
   1105e:	401f      	ands	r7, r3
   11060:	2180      	movs	r1, #128	; 0x80
   11062:	430f      	orrs	r7, r1
   11064:	e7dc      	b.n	11020 <Radio_WriteMode+0x48>
            dioMapping = RADIO_RegisterRead(REG_DIOMAPPING2);
   11066:	2041      	movs	r0, #65	; 0x41
   11068:	4b10      	ldr	r3, [pc, #64]	; (110ac <Radio_WriteMode+0xd4>)
   1106a:	4798      	blx	r3
            if (MODULATION_FSK == newModulation)
   1106c:	2e00      	cmp	r6, #0
   1106e:	d10e      	bne.n	1108e <Radio_WriteMode+0xb6>
                dioMapping |= 0x30;     // DIO5 = 11 means ModeReady in FSK mode
   11070:	2130      	movs	r1, #48	; 0x30
   11072:	4301      	orrs	r1, r0
   11074:	b2c9      	uxtb	r1, r1
            RADIO_RegisterWrite(REG_DIOMAPPING2, dioMapping);
   11076:	2041      	movs	r0, #65	; 0x41
   11078:	4d0d      	ldr	r5, [pc, #52]	; (110b0 <Radio_WriteMode+0xd8>)
   1107a:	47a8      	blx	r5
        opMode &= ~0x07;                // Clear old mode bits
   1107c:	21f8      	movs	r1, #248	; 0xf8
   1107e:	4039      	ands	r1, r7
        RADIO_RegisterWrite(REG_OPMODE, opMode);
   11080:	4321      	orrs	r1, r4
   11082:	2001      	movs	r0, #1
   11084:	47a8      	blx	r5
			   delay_ms(1);
   11086:	2001      	movs	r0, #1
   11088:	4b0a      	ldr	r3, [pc, #40]	; (110b4 <Radio_WriteMode+0xdc>)
   1108a:	4798      	blx	r3
   1108c:	e7da      	b.n	11044 <Radio_WriteMode+0x6c>
                dioMapping &= ~0x30;    // DIO5 = 00 means ModeReady in LoRa mode
   1108e:	21cf      	movs	r1, #207	; 0xcf
   11090:	4001      	ands	r1, r0
   11092:	e7f0      	b.n	11076 <Radio_WriteMode+0x9e>
        opMode &= ~0x07;                // Clear old mode bits
   11094:	21f8      	movs	r1, #248	; 0xf8
        RADIO_RegisterWrite(REG_OPMODE, opMode);
   11096:	4039      	ands	r1, r7
   11098:	2001      	movs	r0, #1
   1109a:	4b05      	ldr	r3, [pc, #20]	; (110b0 <Radio_WriteMode+0xd8>)
   1109c:	4798      	blx	r3
        if (1 == blocking)
   1109e:	9b01      	ldr	r3, [sp, #4]
   110a0:	2b01      	cmp	r3, #1
   110a2:	d1cf      	bne.n	11044 <Radio_WriteMode+0x6c>
                SystemBlockingWaitMs(1);
   110a4:	2001      	movs	r0, #1
   110a6:	4b04      	ldr	r3, [pc, #16]	; (110b8 <Radio_WriteMode+0xe0>)
   110a8:	4798      	blx	r3
   110aa:	e7cb      	b.n	11044 <Radio_WriteMode+0x6c>
   110ac:	0000fd79 	.word	0x0000fd79
   110b0:	0000fd51 	.word	0x0000fd51
   110b4:	00004719 	.word	0x00004719
   110b8:	0000ff4d 	.word	0x0000ff4d

000110bc <RADIO_FHSSChangeChannel>:

\param		- none	
\return		- none.
*************************************************************************/
void RADIO_FHSSChangeChannel(void)
{
   110bc:	b500      	push	{lr}
   110be:	b083      	sub	sp, #12
    uint32_t freq;
    RADIO_RegisterRead(REG_LORA_IRQFLAGS);
   110c0:	2012      	movs	r0, #18
   110c2:	4b0d      	ldr	r3, [pc, #52]	; (110f8 <RADIO_FHSSChangeChannel+0x3c>)
   110c4:	4798      	blx	r3

    if (radioConfiguration.frequencyHopPeriod)
   110c6:	4b0d      	ldr	r3, [pc, #52]	; (110fc <RADIO_FHSSChangeChannel+0x40>)
   110c8:	8adb      	ldrh	r3, [r3, #22]
   110ca:	2b00      	cmp	r3, #0
   110cc:	d007      	beq.n	110de <RADIO_FHSSChangeChannel+0x22>
    {
        if ((radioConfiguration.radioCallback) &&
   110ce:	4b0b      	ldr	r3, [pc, #44]	; (110fc <RADIO_FHSSChangeChannel+0x40>)
   110d0:	691b      	ldr	r3, [r3, #16]
   110d2:	2b00      	cmp	r3, #0
   110d4:	d003      	beq.n	110de <RADIO_FHSSChangeChannel+0x22>
            (1 == radioCallbackMask.BitMask.radioFhssfreqCallback))
   110d6:	4a0a      	ldr	r2, [pc, #40]	; (11100 <RADIO_FHSSChangeChannel+0x44>)
   110d8:	7812      	ldrb	r2, [r2, #0]
        if ((radioConfiguration.radioCallback) &&
   110da:	0692      	lsls	r2, r2, #26
   110dc:	d405      	bmi.n	110ea <RADIO_FHSSChangeChannel+0x2e>
            Radio_WriteFrequency(freq);
        }
    }

    // Clear FHSSChangeChannel interrupt
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 1 << SHIFT1);
   110de:	2102      	movs	r1, #2
   110e0:	2012      	movs	r0, #18
   110e2:	4b08      	ldr	r3, [pc, #32]	; (11104 <RADIO_FHSSChangeChannel+0x48>)
   110e4:	4798      	blx	r3
}
   110e6:	b003      	add	sp, #12
   110e8:	bd00      	pop	{pc}
            radioConfiguration.radioCallback(RADIO_FHSS_NEXT_FREQ_CALLBACK, (void *)&freq);
   110ea:	a901      	add	r1, sp, #4
   110ec:	2020      	movs	r0, #32
   110ee:	4798      	blx	r3
            Radio_WriteFrequency(freq);
   110f0:	9801      	ldr	r0, [sp, #4]
   110f2:	4b05      	ldr	r3, [pc, #20]	; (11108 <RADIO_FHSSChangeChannel+0x4c>)
   110f4:	4798      	blx	r3
   110f6:	e7f2      	b.n	110de <RADIO_FHSSChangeChannel+0x22>
   110f8:	0000fd79 	.word	0x0000fd79
   110fc:	20003ba8 	.word	0x20003ba8
   11100:	200025a8 	.word	0x200025a8
   11104:	0000fd51 	.word	0x0000fd51
   11108:	00007e39 	.word	0x00007e39

0001110c <RADIO_ReadRandom>:

\param		- none	
\return		- returns the random number generated.
*************************************************************************/
uint16_t RADIO_ReadRandom(void)
{
   1110c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
    uint16_t retVal;
    retVal = 0;
	
	// Turn on the RF switch.
	Radio_EnableRfControl(RADIO_RFCTRL_RX); 
   1110e:	2000      	movs	r0, #0
   11110:	4b1a      	ldr	r3, [pc, #104]	; (1117c <RADIO_ReadRandom+0x70>)
   11112:	4798      	blx	r3
	// Enabling Radio Clock
	Radio_SetClockInput();
   11114:	4b1a      	ldr	r3, [pc, #104]	; (11180 <RADIO_ReadRandom+0x74>)
   11116:	4798      	blx	r3
	
    // Mask all interrupts, do many measurements of RSSI
    Radio_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
   11118:	2201      	movs	r2, #1
   1111a:	2101      	movs	r1, #1
   1111c:	2000      	movs	r0, #0
   1111e:	4c19      	ldr	r4, [pc, #100]	; (11184 <RADIO_ReadRandom+0x78>)
   11120:	47a0      	blx	r4
    RADIO_RegisterWrite(REG_LORA_IRQFLAGSMASK, 0xFF);
   11122:	21ff      	movs	r1, #255	; 0xff
   11124:	2011      	movs	r0, #17
   11126:	4b18      	ldr	r3, [pc, #96]	; (11188 <RADIO_ReadRandom+0x7c>)
   11128:	4798      	blx	r3
    Radio_WriteMode(MODE_RXCONT, MODULATION_LORA, 1);
   1112a:	2201      	movs	r2, #1
   1112c:	2101      	movs	r1, #1
   1112e:	2005      	movs	r0, #5
   11130:	47a0      	blx	r4
   11132:	2410      	movs	r4, #16
    retVal = 0;
   11134:	2500      	movs	r5, #0
    for (i = 0; i < 16; i++)
    {
        SystemBlockingWaitMs(1);
   11136:	4f15      	ldr	r7, [pc, #84]	; (1118c <RADIO_ReadRandom+0x80>)
        retVal <<= SHIFT1;
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
   11138:	4e15      	ldr	r6, [pc, #84]	; (11190 <RADIO_ReadRandom+0x84>)
        SystemBlockingWaitMs(1);
   1113a:	2001      	movs	r0, #1
   1113c:	47b8      	blx	r7
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
   1113e:	202c      	movs	r0, #44	; 0x2c
   11140:	47b0      	blx	r6
   11142:	2301      	movs	r3, #1
   11144:	4018      	ands	r0, r3
        retVal <<= SHIFT1;
   11146:	006d      	lsls	r5, r5, #1
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
   11148:	4305      	orrs	r5, r0
   1114a:	b2ad      	uxth	r5, r5
   1114c:	3c01      	subs	r4, #1
   1114e:	b2e4      	uxtb	r4, r4
    for (i = 0; i < 16; i++)
   11150:	2c00      	cmp	r4, #0
   11152:	d1f2      	bne.n	1113a <RADIO_ReadRandom+0x2e>
    }
	
	// Turning off the RF switch now.
	Radio_DisableRfControl(RADIO_RFCTRL_RX);
   11154:	2000      	movs	r0, #0
   11156:	4b0f      	ldr	r3, [pc, #60]	; (11194 <RADIO_ReadRandom+0x88>)
   11158:	4798      	blx	r3
	
    // Return radio to sleep
    Radio_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
   1115a:	2201      	movs	r2, #1
   1115c:	2101      	movs	r1, #1
   1115e:	2000      	movs	r0, #0
   11160:	4b08      	ldr	r3, [pc, #32]	; (11184 <RADIO_ReadRandom+0x78>)
   11162:	4798      	blx	r3
    // Clear interrupts in case any have been generated
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 0xFF);
   11164:	21ff      	movs	r1, #255	; 0xff
   11166:	2012      	movs	r0, #18
   11168:	4c07      	ldr	r4, [pc, #28]	; (11188 <RADIO_ReadRandom+0x7c>)
   1116a:	47a0      	blx	r4
    // Unmask all interrupts
    RADIO_RegisterWrite(REG_LORA_IRQFLAGSMASK, 0x00);
   1116c:	2100      	movs	r1, #0
   1116e:	2011      	movs	r0, #17
   11170:	47a0      	blx	r4
	// Disabling Radio Clock save power
	Radio_ResetClockInput();
   11172:	4b09      	ldr	r3, [pc, #36]	; (11198 <RADIO_ReadRandom+0x8c>)
   11174:	4798      	blx	r3
	
    return retVal;
}
   11176:	0028      	movs	r0, r5
   11178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1117a:	46c0      	nop			; (mov r8, r8)
   1117c:	000089c5 	.word	0x000089c5
   11180:	00008de1 	.word	0x00008de1
   11184:	00010fd9 	.word	0x00010fd9
   11188:	0000fd51 	.word	0x0000fd51
   1118c:	0000ff4d 	.word	0x0000ff4d
   11190:	0000fd79 	.word	0x0000fd79
   11194:	000089fd 	.word	0x000089fd
   11198:	00008f39 	.word	0x00008f39

0001119c <Radio_ReadRssi>:

\param rssi	- The RSSI measured in the channel.
\return		- ERR_NONE. Other types are not used now.
*************************************************************************/
RadioError_t Radio_ReadRssi(int16_t *rssi)
{
   1119c:	b510      	push	{r4, lr}
   1119e:	0004      	movs	r4, r0
	if (MODULATION_LORA == radioConfiguration.modulation)
   111a0:	2334      	movs	r3, #52	; 0x34
   111a2:	4a11      	ldr	r2, [pc, #68]	; (111e8 <Radio_ReadRssi+0x4c>)
   111a4:	5cd3      	ldrb	r3, [r2, r3]
   111a6:	2b01      	cmp	r3, #1
   111a8:	d003      	beq.n	111b2 <Radio_ReadRssi+0x16>
		*rssi = -(RADIO_RegisterRead(REG_FSK_RSSIVALUE) >> 1);
	#endif // UT
	}
	else
	{
		return ERR_UNSUPPORTED_ATTR;
   111aa:	2006      	movs	r0, #6
	else if (MODULATION_FSK == radioConfiguration.modulation)
   111ac:	2b00      	cmp	r3, #0
   111ae:	d012      	beq.n	111d6 <Radio_ReadRssi+0x3a>
	}
	return ERR_NONE;
}
   111b0:	bd10      	pop	{r4, pc}
		if (radioConfiguration.frequency >= HF_FREQ_HZ)
   111b2:	4b0e      	ldr	r3, [pc, #56]	; (111ec <Radio_ReadRssi+0x50>)
   111b4:	6812      	ldr	r2, [r2, #0]
   111b6:	429a      	cmp	r2, r3
   111b8:	d906      	bls.n	111c8 <Radio_ReadRssi+0x2c>
			*rssi = RSSI_HF_OFFSET + RADIO_RegisterRead(REG_LORA_PKTRSSIVALUE);
   111ba:	201a      	movs	r0, #26
   111bc:	4b0c      	ldr	r3, [pc, #48]	; (111f0 <Radio_ReadRssi+0x54>)
   111be:	4798      	blx	r3
   111c0:	389d      	subs	r0, #157	; 0x9d
   111c2:	8020      	strh	r0, [r4, #0]
	return ERR_NONE;
   111c4:	2000      	movs	r0, #0
   111c6:	e7f3      	b.n	111b0 <Radio_ReadRssi+0x14>
			*rssi = RSSI_LF_OFFSET + RADIO_RegisterRead(REG_LORA_PKTRSSIVALUE);
   111c8:	201a      	movs	r0, #26
   111ca:	4b09      	ldr	r3, [pc, #36]	; (111f0 <Radio_ReadRssi+0x54>)
   111cc:	4798      	blx	r3
   111ce:	38a4      	subs	r0, #164	; 0xa4
   111d0:	8020      	strh	r0, [r4, #0]
	return ERR_NONE;
   111d2:	2000      	movs	r0, #0
   111d4:	e7ec      	b.n	111b0 <Radio_ReadRssi+0x14>
		*rssi = -(RADIO_RegisterRead(REG_FSK_RSSIVALUE) >> 1);
   111d6:	300b      	adds	r0, #11
   111d8:	4b05      	ldr	r3, [pc, #20]	; (111f0 <Radio_ReadRssi+0x54>)
   111da:	4798      	blx	r3
   111dc:	0840      	lsrs	r0, r0, #1
   111de:	b2c3      	uxtb	r3, r0
   111e0:	425b      	negs	r3, r3
   111e2:	8023      	strh	r3, [r4, #0]
	return ERR_NONE;
   111e4:	2000      	movs	r0, #0
   111e6:	e7e3      	b.n	111b0 <Radio_ReadRssi+0x14>
   111e8:	20003ba8 	.word	0x20003ba8
   111ec:	3361137f 	.word	0x3361137f
   111f0:	0000fd79 	.word	0x0000fd79

000111f4 <Radio_ReadFSKRssi>:

\param rssi	- The RSSI measured in the channel.
\return		- ERR_NONE. Other types are not used now.
*************************************************************************/
RadioError_t Radio_ReadFSKRssi(int16_t *rssi)
{	
   111f4:	b510      	push	{r4, lr}
   111f6:	0004      	movs	r4, r0
#ifdef UT
	*rssi = testRssi;
#else // UT
	*rssi = -(RADIO_RegisterRead(REG_FSK_RSSIVALUE) >> 1);
   111f8:	2011      	movs	r0, #17
   111fa:	4b04      	ldr	r3, [pc, #16]	; (1120c <Radio_ReadFSKRssi+0x18>)
   111fc:	4798      	blx	r3
   111fe:	0840      	lsrs	r0, r0, #1
   11200:	b2c0      	uxtb	r0, r0
   11202:	4240      	negs	r0, r0
   11204:	8020      	strh	r0, [r4, #0]
#endif // UT
	
	return ERR_NONE;
}
   11206:	2000      	movs	r0, #0
   11208:	bd10      	pop	{r4, pc}
   1120a:	46c0      	nop			; (mov r8, r8)
   1120c:	0000fd79 	.word	0x0000fd79

00011210 <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
   11210:	b510      	push	{r4, lr}
	tmr_cca_callback();
   11212:	4b01      	ldr	r3, [pc, #4]	; (11218 <tc_cca_callback+0x8>)
   11214:	4798      	blx	r3
}
   11216:	bd10      	pop	{r4, pc}
   11218:	00015089 	.word	0x00015089

0001121c <tc_ovf_callback>:
{
   1121c:	b510      	push	{r4, lr}
	tmr_ovf_callback();
   1121e:	4b01      	ldr	r3, [pc, #4]	; (11224 <tc_ovf_callback+0x8>)
   11220:	4798      	blx	r3
}
   11222:	bd10      	pop	{r4, pc}
   11224:	00015041 	.word	0x00015041

00011228 <tmr_read_count>:
{
   11228:	b510      	push	{r4, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
   1122a:	4802      	ldr	r0, [pc, #8]	; (11234 <tmr_read_count+0xc>)
   1122c:	4b02      	ldr	r3, [pc, #8]	; (11238 <tmr_read_count+0x10>)
   1122e:	4798      	blx	r3
   11230:	b280      	uxth	r0, r0
}
   11232:	bd10      	pop	{r4, pc}
   11234:	20003c3c 	.word	0x20003c3c
   11238:	00007601 	.word	0x00007601

0001123c <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
   1123c:	4b03      	ldr	r3, [pc, #12]	; (1124c <tmr_disable_cc_interrupt+0x10>)
   1123e:	2110      	movs	r1, #16
   11240:	681a      	ldr	r2, [r3, #0]
   11242:	7211      	strb	r1, [r2, #8]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
   11244:	7e5a      	ldrb	r2, [r3, #25]
   11246:	438a      	bics	r2, r1
   11248:	765a      	strb	r2, [r3, #25]
}
   1124a:	4770      	bx	lr
   1124c:	20003c3c 	.word	0x20003c3c

00011250 <tmr_enable_cc_interrupt>:
{
   11250:	b510      	push	{r4, lr}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
   11252:	4c0a      	ldr	r4, [pc, #40]	; (1127c <tmr_enable_cc_interrupt+0x2c>)
   11254:	6820      	ldr	r0, [r4, #0]
   11256:	4b0a      	ldr	r3, [pc, #40]	; (11280 <tmr_enable_cc_interrupt+0x30>)
   11258:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
   1125a:	4b0a      	ldr	r3, [pc, #40]	; (11284 <tmr_enable_cc_interrupt+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1125c:	5c1b      	ldrb	r3, [r3, r0]
   1125e:	221f      	movs	r2, #31
   11260:	401a      	ands	r2, r3
   11262:	2301      	movs	r3, #1
   11264:	4093      	lsls	r3, r2
   11266:	4a08      	ldr	r2, [pc, #32]	; (11288 <tmr_enable_cc_interrupt+0x38>)
   11268:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
   1126a:	7e63      	ldrb	r3, [r4, #25]
   1126c:	2210      	movs	r2, #16
   1126e:	4313      	orrs	r3, r2
   11270:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
   11272:	6823      	ldr	r3, [r4, #0]
   11274:	2210      	movs	r2, #16
   11276:	725a      	strb	r2, [r3, #9]
}
   11278:	bd10      	pop	{r4, pc}
   1127a:	46c0      	nop			; (mov r8, r8)
   1127c:	20003c3c 	.word	0x20003c3c
   11280:	000072d5 	.word	0x000072d5
   11284:	0001af98 	.word	0x0001af98
   11288:	e000e100 	.word	0xe000e100

0001128c <tmr_disable_ovf_interrupt>:
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(2);
		module->enable_callback_mask &= ~TC_INTFLAG_MC(2);
	}
	else {
		module->hw->COUNT8.INTENCLR.reg = (1 << callback_type);
   1128c:	4b03      	ldr	r3, [pc, #12]	; (1129c <tmr_disable_ovf_interrupt+0x10>)
   1128e:	2101      	movs	r1, #1
   11290:	681a      	ldr	r2, [r3, #0]
   11292:	7211      	strb	r1, [r2, #8]
		module->enable_callback_mask &= ~(1 << callback_type);
   11294:	7e5a      	ldrb	r2, [r3, #25]
   11296:	438a      	bics	r2, r1
   11298:	765a      	strb	r2, [r3, #25]
}
   1129a:	4770      	bx	lr
   1129c:	20003c3c 	.word	0x20003c3c

000112a0 <tmr_enable_ovf_interrupt>:
{
   112a0:	b510      	push	{r4, lr}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
   112a2:	4c0a      	ldr	r4, [pc, #40]	; (112cc <tmr_enable_ovf_interrupt+0x2c>)
   112a4:	6820      	ldr	r0, [r4, #0]
   112a6:	4b0a      	ldr	r3, [pc, #40]	; (112d0 <tmr_enable_ovf_interrupt+0x30>)
   112a8:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
   112aa:	4b0a      	ldr	r3, [pc, #40]	; (112d4 <tmr_enable_ovf_interrupt+0x34>)
   112ac:	5c1a      	ldrb	r2, [r3, r0]
   112ae:	231f      	movs	r3, #31
   112b0:	4013      	ands	r3, r2
   112b2:	2201      	movs	r2, #1
   112b4:	0011      	movs	r1, r2
   112b6:	4099      	lsls	r1, r3
   112b8:	4b07      	ldr	r3, [pc, #28]	; (112d8 <tmr_enable_ovf_interrupt+0x38>)
   112ba:	6019      	str	r1, [r3, #0]
		module->enable_callback_mask |= (1 << callback_type);
   112bc:	7e63      	ldrb	r3, [r4, #25]
   112be:	2101      	movs	r1, #1
   112c0:	430b      	orrs	r3, r1
   112c2:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
   112c4:	6823      	ldr	r3, [r4, #0]
   112c6:	725a      	strb	r2, [r3, #9]
}
   112c8:	bd10      	pop	{r4, pc}
   112ca:	46c0      	nop			; (mov r8, r8)
   112cc:	20003c3c 	.word	0x20003c3c
   112d0:	000072d5 	.word	0x000072d5
   112d4:	0001af98 	.word	0x0001af98
   112d8:	e000e100 	.word	0xe000e100

000112dc <tmr_write_cmpreg>:
{
   112dc:	b510      	push	{r4, lr}
   112de:	0002      	movs	r2, r0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
   112e0:	2100      	movs	r1, #0
   112e2:	4802      	ldr	r0, [pc, #8]	; (112ec <tmr_write_cmpreg+0x10>)
   112e4:	4b02      	ldr	r3, [pc, #8]	; (112f0 <tmr_write_cmpreg+0x14>)
   112e6:	4798      	blx	r3
}
   112e8:	bd10      	pop	{r4, pc}
   112ea:	46c0      	nop			; (mov r8, r8)
   112ec:	20003c3c 	.word	0x20003c3c
   112f0:	00007649 	.word	0x00007649

000112f4 <save_cpu_interrupt>:
{
   112f4:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   112f6:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   112fa:	425a      	negs	r2, r3
   112fc:	4153      	adcs	r3, r2
   112fe:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   11300:	b672      	cpsid	i
   11302:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   11306:	2200      	movs	r2, #0
   11308:	4b02      	ldr	r3, [pc, #8]	; (11314 <save_cpu_interrupt+0x20>)
   1130a:	701a      	strb	r2, [r3, #0]
	return flags;
   1130c:	9801      	ldr	r0, [sp, #4]
	return cpu_irq_save();
   1130e:	b2c0      	uxtb	r0, r0
}
   11310:	b002      	add	sp, #8
   11312:	4770      	bx	lr
   11314:	20000014 	.word	0x20000014

00011318 <restore_cpu_interrupt>:
	if (cpu_irq_is_enabled_flags(flags))
   11318:	2800      	cmp	r0, #0
   1131a:	d005      	beq.n	11328 <restore_cpu_interrupt+0x10>
		cpu_irq_enable();
   1131c:	2201      	movs	r2, #1
   1131e:	4b03      	ldr	r3, [pc, #12]	; (1132c <restore_cpu_interrupt+0x14>)
   11320:	701a      	strb	r2, [r3, #0]
   11322:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   11326:	b662      	cpsie	i
}
   11328:	4770      	bx	lr
   1132a:	46c0      	nop			; (mov r8, r8)
   1132c:	20000014 	.word	0x20000014

00011330 <tmr_init>:

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
   11330:	b570      	push	{r4, r5, r6, lr}
	config->clock_source               = GCLK_GENERATOR_0;
   11332:	4a33      	ldr	r2, [pc, #204]	; (11400 <tmr_init+0xd0>)
   11334:	2100      	movs	r1, #0
   11336:	2300      	movs	r3, #0
   11338:	7011      	strb	r1, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
   1133a:	70d1      	strb	r1, [r2, #3]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
   1133c:	2000      	movs	r0, #0
   1133e:	8091      	strh	r1, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
   11340:	7190      	strb	r0, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
   11342:	71d3      	strb	r3, [r2, #7]
	config->run_in_standby             = false;
   11344:	7053      	strb	r3, [r2, #1]
	config->on_demand                  = false;
   11346:	7093      	strb	r3, [r2, #2]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
   11348:	7213      	strb	r3, [r2, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
   1134a:	7253      	strb	r3, [r2, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
   1134c:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
   1134e:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
   11350:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
   11352:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
   11354:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
   11356:	7413      	strb	r3, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
   11358:	6151      	str	r1, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
   1135a:	6191      	str	r1, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
   1135c:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
   1135e:	6211      	str	r1, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
   11360:	6251      	str	r1, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
   11362:	8511      	strh	r1, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
   11364:	8591      	strh	r1, [r2, #44]	; 0x2c
	config->double_buffering_enabled = false;
   11366:	2334      	movs	r3, #52	; 0x34
   11368:	54d0      	strb	r0, [r2, r3]
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
   1136a:	3b35      	subs	r3, #53	; 0x35
   1136c:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
   1136e:	4c25      	ldr	r4, [pc, #148]	; (11404 <tmr_init+0xd4>)
   11370:	4925      	ldr	r1, [pc, #148]	; (11408 <tmr_init+0xd8>)
   11372:	0020      	movs	r0, r4
   11374:	4b25      	ldr	r3, [pc, #148]	; (1140c <tmr_init+0xdc>)
   11376:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
   11378:	2200      	movs	r2, #0
   1137a:	4925      	ldr	r1, [pc, #148]	; (11410 <tmr_init+0xe0>)
   1137c:	0020      	movs	r0, r4
   1137e:	4d25      	ldr	r5, [pc, #148]	; (11414 <tmr_init+0xe4>)
   11380:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
   11382:	2202      	movs	r2, #2
   11384:	4924      	ldr	r1, [pc, #144]	; (11418 <tmr_init+0xe8>)
   11386:	0020      	movs	r0, r4
   11388:	47a8      	blx	r5
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
   1138a:	6820      	ldr	r0, [r4, #0]
   1138c:	4b23      	ldr	r3, [pc, #140]	; (1141c <tmr_init+0xec>)
   1138e:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
   11390:	4b23      	ldr	r3, [pc, #140]	; (11420 <tmr_init+0xf0>)
   11392:	5c1a      	ldrb	r2, [r3, r0]
   11394:	231f      	movs	r3, #31
   11396:	4013      	ands	r3, r2
   11398:	2101      	movs	r1, #1
   1139a:	000a      	movs	r2, r1
   1139c:	409a      	lsls	r2, r3
   1139e:	4b21      	ldr	r3, [pc, #132]	; (11424 <tmr_init+0xf4>)
   113a0:	601a      	str	r2, [r3, #0]
		module->enable_callback_mask |= (1 << callback_type);
   113a2:	7e63      	ldrb	r3, [r4, #25]
   113a4:	2201      	movs	r2, #1
   113a6:	4313      	orrs	r3, r2
   113a8:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
   113aa:	6822      	ldr	r2, [r4, #0]
   113ac:	7251      	strb	r1, [r2, #9]
	return (tc_module->SYNCBUSY.reg);
   113ae:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
   113b0:	2b00      	cmp	r3, #0
   113b2:	d1fc      	bne.n	113ae <tmr_init+0x7e>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
   113b4:	6813      	ldr	r3, [r2, #0]
   113b6:	2102      	movs	r1, #2
   113b8:	430b      	orrs	r3, r1
   113ba:	6013      	str	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;	
   113bc:	2000      	movs	r0, #0
   113be:	4b1a      	ldr	r3, [pc, #104]	; (11428 <tmr_init+0xf8>)
   113c0:	4798      	blx	r3
   113c2:	4d1a      	ldr	r5, [pc, #104]	; (1142c <tmr_init+0xfc>)
   113c4:	47a8      	blx	r5
   113c6:	491a      	ldr	r1, [pc, #104]	; (11430 <tmr_init+0x100>)
   113c8:	4b1a      	ldr	r3, [pc, #104]	; (11434 <tmr_init+0x104>)
   113ca:	4798      	blx	r3
   113cc:	1c04      	adds	r4, r0, #0
	#endif
	
	if ((timer_multiplier - (uint32_t)timer_multiplier) >= 0.5f)
   113ce:	4b1a      	ldr	r3, [pc, #104]	; (11438 <tmr_init+0x108>)
   113d0:	4798      	blx	r3
   113d2:	47a8      	blx	r5
   113d4:	1c01      	adds	r1, r0, #0
   113d6:	1c20      	adds	r0, r4, #0
   113d8:	4b18      	ldr	r3, [pc, #96]	; (1143c <tmr_init+0x10c>)
   113da:	4798      	blx	r3
   113dc:	21fc      	movs	r1, #252	; 0xfc
   113de:	0589      	lsls	r1, r1, #22
   113e0:	4b17      	ldr	r3, [pc, #92]	; (11440 <tmr_init+0x110>)
   113e2:	4798      	blx	r3
   113e4:	2800      	cmp	r0, #0
   113e6:	d005      	beq.n	113f4 <tmr_init+0xc4>
	{
		timer_multiplier += 1.0f;
   113e8:	21fe      	movs	r1, #254	; 0xfe
   113ea:	0589      	lsls	r1, r1, #22
   113ec:	1c20      	adds	r0, r4, #0
   113ee:	4b15      	ldr	r3, [pc, #84]	; (11444 <tmr_init+0x114>)
   113f0:	4798      	blx	r3
   113f2:	1c04      	adds	r4, r0, #0
	}
	
	return (uint8_t) timer_multiplier;
   113f4:	1c20      	adds	r0, r4, #0
   113f6:	4b10      	ldr	r3, [pc, #64]	; (11438 <tmr_init+0x108>)
   113f8:	4798      	blx	r3
   113fa:	b2c0      	uxtb	r0, r0
}
   113fc:	bd70      	pop	{r4, r5, r6, pc}
   113fe:	46c0      	nop			; (mov r8, r8)
   11400:	20003c04 	.word	0x20003c04
   11404:	20003c3c 	.word	0x20003c3c
   11408:	42002000 	.word	0x42002000
   1140c:	00007311 	.word	0x00007311
   11410:	0001121d 	.word	0x0001121d
   11414:	0000720d 	.word	0x0000720d
   11418:	00011211 	.word	0x00011211
   1141c:	000072d5 	.word	0x000072d5
   11420:	0001af98 	.word	0x0001af98
   11424:	e000e100 	.word	0xe000e100
   11428:	00006fd5 	.word	0x00006fd5
   1142c:	000164f1 	.word	0x000164f1
   11430:	49742400 	.word	0x49742400
   11434:	00015ab9 	.word	0x00015ab9
   11438:	00015569 	.word	0x00015569
   1143c:	000160d9 	.word	0x000160d9
   11440:	000154c1 	.word	0x000154c1
   11444:	00015795 	.word	0x00015795

00011448 <edbg_eui_read_eui64>:
#define LEN_EUI    256
uint8_t readbuf[LEN_EUI];

uint8_t *
edbg_eui_read_eui64(void)
{
   11448:	b570      	push	{r4, r5, r6, lr}
   1144a:	b090      	sub	sp, #64	; 0x40
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   1144c:	aa03      	add	r2, sp, #12
   1144e:	2364      	movs	r3, #100	; 0x64
   11450:	9303      	str	r3, [sp, #12]
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   11452:	4b54      	ldr	r3, [pc, #336]	; (115a4 <edbg_eui_read_eui64+0x15c>)
   11454:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   11456:	2300      	movs	r3, #0
   11458:	6093      	str	r3, [r2, #8]
	config->generator_source = GCLK_GENERATOR_0;
   1145a:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
   1145c:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   1145e:	2180      	movs	r1, #128	; 0x80
   11460:	0389      	lsls	r1, r1, #14
   11462:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
   11464:	2101      	movs	r1, #1
   11466:	4249      	negs	r1, r1
   11468:	82d1      	strh	r1, [r2, #22]
	config->unknown_bus_state_timeout = 65535;
   1146a:	8291      	strh	r1, [r2, #20]
	config->scl_low_timeout  = false;
   1146c:	3125      	adds	r1, #37	; 0x25
   1146e:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
   11470:	6293      	str	r3, [r2, #40]	; 0x28
	config->scl_stretch_only_after_ack_bit = false;
   11472:	3108      	adds	r1, #8
   11474:	5453      	strb	r3, [r2, r1]
	config->slave_scl_low_extend_timeout   = false;
   11476:	3101      	adds	r1, #1
   11478:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
   1147a:	3101      	adds	r1, #1
   1147c:	5453      	strb	r3, [r2, r1]
	config->sda_scl_rise_time_ns = 215;
   1147e:	33d7      	adds	r3, #215	; 0xd7
   11480:	8613      	strh	r3, [r2, #48]	; 0x30
  int timeout2 = 0;
  bool random_mac_address = false;
  uint8_t edbg_status = 0xFF;
  struct i2c_master_config config_i2c_master;
  i2c_master_get_config_defaults(&config_i2c_master);
  config_i2c_master.pinmux_pad0  = EDBG_I2C_SERCOM_PINMUX_PAD0;
   11482:	4b49      	ldr	r3, [pc, #292]	; (115a8 <edbg_eui_read_eui64+0x160>)
   11484:	61d3      	str	r3, [r2, #28]
  config_i2c_master.pinmux_pad1  = EDBG_I2C_SERCOM_PINMUX_PAD1;
   11486:	4b49      	ldr	r3, [pc, #292]	; (115ac <edbg_eui_read_eui64+0x164>)
   11488:	6213      	str	r3, [r2, #32]

  i2c_master_init(&i2c_master_instance, EDBG_I2C_MODULE, &config_i2c_master);
   1148a:	4c49      	ldr	r4, [pc, #292]	; (115b0 <edbg_eui_read_eui64+0x168>)
   1148c:	4949      	ldr	r1, [pc, #292]	; (115b4 <edbg_eui_read_eui64+0x16c>)
   1148e:	0020      	movs	r0, r4
   11490:	4b49      	ldr	r3, [pc, #292]	; (115b8 <edbg_eui_read_eui64+0x170>)
   11492:	4798      	blx	r3
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   11494:	6822      	ldr	r2, [r4, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   11496:	2107      	movs	r1, #7
   11498:	69d3      	ldr	r3, [r2, #28]
	while (i2c_master_is_syncing(module)) {
   1149a:	4219      	tst	r1, r3
   1149c:	d1fc      	bne.n	11498 <edbg_eui_read_eui64+0x50>
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
   1149e:	6813      	ldr	r3, [r2, #0]
   114a0:	2102      	movs	r1, #2
   114a2:	430b      	orrs	r3, r1
   114a4:	6013      	str	r3, [r2, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   114a6:	4b42      	ldr	r3, [pc, #264]	; (115b0 <edbg_eui_read_eui64+0x168>)
   114a8:	88dc      	ldrh	r4, [r3, #6]
	uint32_t timeout_counter = 0;
   114aa:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   114ac:	2010      	movs	r0, #16
   114ae:	8b51      	ldrh	r1, [r2, #26]
   114b0:	4201      	tst	r1, r0
   114b2:	d104      	bne.n	114be <edbg_eui_read_eui64+0x76>
		timeout_counter++;
   114b4:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   114b6:	42a3      	cmp	r3, r4
   114b8:	d3f9      	bcc.n	114ae <edbg_eui_read_eui64+0x66>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
   114ba:	2310      	movs	r3, #16
   114bc:	8353      	strh	r3, [r2, #26]

  i2c_master_enable(&i2c_master_instance);

  struct i2c_master_packet packet = {
   114be:	466a      	mov	r2, sp
   114c0:	4b3e      	ldr	r3, [pc, #248]	; (115bc <edbg_eui_read_eui64+0x174>)
   114c2:	cb13      	ldmia	r3!, {r0, r1, r4}
   114c4:	c213      	stmia	r2!, {r0, r1, r4}
  int timeout2 = 0;
   114c6:	2600      	movs	r6, #0
    .hs_master_code  = 0x0,
  };
   
    do
    {
	    edbg_status = i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &packet);
   114c8:	4c39      	ldr	r4, [pc, #228]	; (115b0 <edbg_eui_read_eui64+0x168>)
   114ca:	4d3d      	ldr	r5, [pc, #244]	; (115c0 <edbg_eui_read_eui64+0x178>)
   114cc:	e003      	b.n	114d6 <edbg_eui_read_eui64+0x8e>
	    if(edbg_status == STATUS_ERR_BAD_ADDRESS)
		{
			if(timeout2++ == SLAVE_WAIT_TIMEOUT)
   114ce:	1c73      	adds	r3, r6, #1
   114d0:	2e0a      	cmp	r6, #10
   114d2:	d033      	beq.n	1153c <edbg_eui_read_eui64+0xf4>
   114d4:	001e      	movs	r6, r3
	    edbg_status = i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &packet);
   114d6:	4669      	mov	r1, sp
   114d8:	0020      	movs	r0, r4
   114da:	47a8      	blx	r5
	    if(edbg_status == STATUS_ERR_BAD_ADDRESS)
   114dc:	2818      	cmp	r0, #24
   114de:	d0f6      	beq.n	114ce <edbg_eui_read_eui64+0x86>
				random_mac_address = true;
				timeout2 = 0;
				break;
			}
		}
		else if(edbg_status == STATUS_ERR_TIMEOUT) {
   114e0:	2812      	cmp	r0, #18
   114e2:	d02f      	beq.n	11544 <edbg_eui_read_eui64+0xfc>
		PRINTF("Timeout 1\n");
		random_mac_address = true;	
		break;
		}
    } while (edbg_status!=STATUS_OK && edbg_status!=0xFF);
   114e4:	3801      	subs	r0, #1
   114e6:	b2c0      	uxtb	r0, r0
   114e8:	28fd      	cmp	r0, #253	; 0xfd
   114ea:	d9f4      	bls.n	114d6 <edbg_eui_read_eui64+0x8e>
	
  packet.data = readbuf;
   114ec:	4b35      	ldr	r3, [pc, #212]	; (115c4 <edbg_eui_read_eui64+0x17c>)
   114ee:	9301      	str	r3, [sp, #4]
  packet.data_length = sizeof(readbuf);
   114f0:	2380      	movs	r3, #128	; 0x80
   114f2:	005b      	lsls	r3, r3, #1
   114f4:	466a      	mov	r2, sp
   114f6:	8053      	strh	r3, [r2, #2]
if(random_mac_address == false)
{
  do 
  {
	  edbg_status = i2c_master_read_packet_wait(&i2c_master_instance, &packet) ;
   114f8:	4c2d      	ldr	r4, [pc, #180]	; (115b0 <edbg_eui_read_eui64+0x168>)
   114fa:	4d33      	ldr	r5, [pc, #204]	; (115c8 <edbg_eui_read_eui64+0x180>)
   114fc:	4669      	mov	r1, sp
   114fe:	0020      	movs	r0, r4
   11500:	47a8      	blx	r5
	    if(edbg_status==STATUS_ERR_BAD_ADDRESS)
   11502:	2818      	cmp	r0, #24
   11504:	d043      	beq.n	1158e <edbg_eui_read_eui64+0x146>
	    {			
			PRINTF("I2C Slave Not Available");
			random_mac_address = true;	
		    break;
	    }
		else if(edbg_status == STATUS_ERR_TIMEOUT) {
   11506:	2812      	cmp	r0, #18
   11508:	d048      	beq.n	1159c <edbg_eui_read_eui64+0x154>
			random_mac_address = true;	
			PRINTF("Timeout 2\n");
			break;
		}		
  } while (edbg_status!=STATUS_OK && edbg_status!=0xFF);
   1150a:	3801      	subs	r0, #1
   1150c:	b2c0      	uxtb	r0, r0
   1150e:	28fd      	cmp	r0, #253	; 0xfd
   11510:	d9f4      	bls.n	114fc <edbg_eui_read_eui64+0xb4>
}
  i2c_master_reset(&i2c_master_instance);
   11512:	4827      	ldr	r0, [pc, #156]	; (115b0 <edbg_eui_read_eui64+0x168>)
   11514:	4b2d      	ldr	r3, [pc, #180]	; (115cc <edbg_eui_read_eui64+0x184>)
   11516:	4798      	blx	r3
  if(random_mac_address || !(readbuf[0] ^ readbuf[1] ^ readbuf[2] ^ readbuf[3] ^ readbuf[4] ^ readbuf[5] ^ readbuf[6] ^ readbuf[7]))
   11518:	4a2a      	ldr	r2, [pc, #168]	; (115c4 <edbg_eui_read_eui64+0x17c>)
   1151a:	7813      	ldrb	r3, [r2, #0]
   1151c:	7851      	ldrb	r1, [r2, #1]
   1151e:	404b      	eors	r3, r1
   11520:	7891      	ldrb	r1, [r2, #2]
   11522:	404b      	eors	r3, r1
   11524:	78d1      	ldrb	r1, [r2, #3]
   11526:	404b      	eors	r3, r1
   11528:	7911      	ldrb	r1, [r2, #4]
   1152a:	404b      	eors	r3, r1
   1152c:	7951      	ldrb	r1, [r2, #5]
   1152e:	404b      	eors	r3, r1
   11530:	7991      	ldrb	r1, [r2, #6]
   11532:	79d2      	ldrb	r2, [r2, #7]
   11534:	404b      	eors	r3, r1
   11536:	429a      	cmp	r2, r3
   11538:	d126      	bne.n	11588 <edbg_eui_read_eui64+0x140>
   1153a:	e00f      	b.n	1155c <edbg_eui_read_eui64+0x114>
				PRINTF("I2C Slave Not Available");
   1153c:	4824      	ldr	r0, [pc, #144]	; (115d0 <edbg_eui_read_eui64+0x188>)
   1153e:	4b25      	ldr	r3, [pc, #148]	; (115d4 <edbg_eui_read_eui64+0x18c>)
   11540:	4798      	blx	r3
				break;
   11542:	e002      	b.n	1154a <edbg_eui_read_eui64+0x102>
		PRINTF("Timeout 1\n");
   11544:	4824      	ldr	r0, [pc, #144]	; (115d8 <edbg_eui_read_eui64+0x190>)
   11546:	4b25      	ldr	r3, [pc, #148]	; (115dc <edbg_eui_read_eui64+0x194>)
   11548:	4798      	blx	r3
  packet.data = readbuf;
   1154a:	4b1e      	ldr	r3, [pc, #120]	; (115c4 <edbg_eui_read_eui64+0x17c>)
   1154c:	9301      	str	r3, [sp, #4]
  packet.data_length = sizeof(readbuf);
   1154e:	2380      	movs	r3, #128	; 0x80
   11550:	005b      	lsls	r3, r3, #1
   11552:	466a      	mov	r2, sp
   11554:	8053      	strh	r3, [r2, #2]
  i2c_master_reset(&i2c_master_instance);
   11556:	4816      	ldr	r0, [pc, #88]	; (115b0 <edbg_eui_read_eui64+0x168>)
   11558:	4b1c      	ldr	r3, [pc, #112]	; (115cc <edbg_eui_read_eui64+0x184>)
   1155a:	4798      	blx	r3
  {
	  unsigned int seed;
	  seed = ((*S_NO_WORD0) ^ (*S_NO_WORD1) ^ (*S_NO_WORD2) ^ (*S_NO_WORD3));
   1155c:	4b20      	ldr	r3, [pc, #128]	; (115e0 <edbg_eui_read_eui64+0x198>)
   1155e:	6818      	ldr	r0, [r3, #0]
   11560:	4b20      	ldr	r3, [pc, #128]	; (115e4 <edbg_eui_read_eui64+0x19c>)
   11562:	681b      	ldr	r3, [r3, #0]
   11564:	4058      	eors	r0, r3
   11566:	4b20      	ldr	r3, [pc, #128]	; (115e8 <edbg_eui_read_eui64+0x1a0>)
   11568:	681b      	ldr	r3, [r3, #0]
   1156a:	4058      	eors	r0, r3
   1156c:	4b1f      	ldr	r3, [pc, #124]	; (115ec <edbg_eui_read_eui64+0x1a4>)
   1156e:	681b      	ldr	r3, [r3, #0]
   11570:	4058      	eors	r0, r3
	  srand(seed);
   11572:	4b1f      	ldr	r3, [pc, #124]	; (115f0 <edbg_eui_read_eui64+0x1a8>)
   11574:	4798      	blx	r3
   11576:	4c13      	ldr	r4, [pc, #76]	; (115c4 <edbg_eui_read_eui64+0x17c>)
   11578:	0026      	movs	r6, r4
   1157a:	3608      	adds	r6, #8
	  //printf("\r\n Generating Random MAC \r\n");
	  for (uint8_t i = 0; i < 8; i++) {
		  *(readbuf+i) = rand();
   1157c:	4d1d      	ldr	r5, [pc, #116]	; (115f4 <edbg_eui_read_eui64+0x1ac>)
   1157e:	47a8      	blx	r5
   11580:	7020      	strb	r0, [r4, #0]
   11582:	3401      	adds	r4, #1
	  for (uint8_t i = 0; i < 8; i++) {
   11584:	42a6      	cmp	r6, r4
   11586:	d1fa      	bne.n	1157e <edbg_eui_read_eui64+0x136>
	  }
	  
  }
  return readbuf;
}
   11588:	480e      	ldr	r0, [pc, #56]	; (115c4 <edbg_eui_read_eui64+0x17c>)
   1158a:	b010      	add	sp, #64	; 0x40
   1158c:	bd70      	pop	{r4, r5, r6, pc}
			PRINTF("I2C Slave Not Available");
   1158e:	4810      	ldr	r0, [pc, #64]	; (115d0 <edbg_eui_read_eui64+0x188>)
   11590:	4b10      	ldr	r3, [pc, #64]	; (115d4 <edbg_eui_read_eui64+0x18c>)
   11592:	4798      	blx	r3
  i2c_master_reset(&i2c_master_instance);
   11594:	4806      	ldr	r0, [pc, #24]	; (115b0 <edbg_eui_read_eui64+0x168>)
   11596:	4b0d      	ldr	r3, [pc, #52]	; (115cc <edbg_eui_read_eui64+0x184>)
   11598:	4798      	blx	r3
   1159a:	e7df      	b.n	1155c <edbg_eui_read_eui64+0x114>
			PRINTF("Timeout 2\n");
   1159c:	4816      	ldr	r0, [pc, #88]	; (115f8 <edbg_eui_read_eui64+0x1b0>)
   1159e:	4b0f      	ldr	r3, [pc, #60]	; (115dc <edbg_eui_read_eui64+0x194>)
   115a0:	4798      	blx	r3
			break;
   115a2:	e7f7      	b.n	11594 <edbg_eui_read_eui64+0x14c>
   115a4:	00000d48 	.word	0x00000d48
   115a8:	00100002 	.word	0x00100002
   115ac:	00110002 	.word	0x00110002
   115b0:	20003d58 	.word	0x20003d58
   115b4:	42000400 	.word	0x42000400
   115b8:	000052dd 	.word	0x000052dd
   115bc:	0001afa0 	.word	0x0001afa0
   115c0:	00005909 	.word	0x00005909
   115c4:	20003c58 	.word	0x20003c58
   115c8:	000058f5 	.word	0x000058f5
   115cc:	000055b9 	.word	0x000055b9
   115d0:	0001afac 	.word	0x0001afac
   115d4:	00018915 	.word	0x00018915
   115d8:	0001afc4 	.word	0x0001afc4
   115dc:	00018a31 	.word	0x00018a31
   115e0:	0080a00c 	.word	0x0080a00c
   115e4:	0080a040 	.word	0x0080a040
   115e8:	0080a044 	.word	0x0080a044
   115ec:	0080a048 	.word	0x0080a048
   115f0:	00018a45 	.word	0x00018a45
   115f4:	00018aa1 	.word	0x00018aa1
   115f8:	0001afd0 	.word	0x0001afd0

000115fc <LORAWAN_TxHandler>:
   115fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   115fe:	b087      	sub	sp, #28
   11600:	466b      	mov	r3, sp
   11602:	2501      	movs	r5, #1
   11604:	4c2f      	ldr	r4, [pc, #188]	; (116c4 <LORAWAN_TxHandler+0xc8>)
   11606:	701d      	strb	r5, [r3, #0]
   11608:	0023      	movs	r3, r4
   1160a:	466a      	mov	r2, sp
   1160c:	33e9      	adds	r3, #233	; 0xe9
   1160e:	781b      	ldrb	r3, [r3, #0]
   11610:	4669      	mov	r1, sp
   11612:	7053      	strb	r3, [r2, #1]
   11614:	0023      	movs	r3, r4
   11616:	33e7      	adds	r3, #231	; 0xe7
   11618:	781b      	ldrb	r3, [r3, #0]
   1161a:	202e      	movs	r0, #46	; 0x2e
   1161c:	7093      	strb	r3, [r2, #2]
   1161e:	aa03      	add	r2, sp, #12
   11620:	4b29      	ldr	r3, [pc, #164]	; (116c8 <LORAWAN_TxHandler+0xcc>)
   11622:	4798      	blx	r3
   11624:	2808      	cmp	r0, #8
   11626:	d004      	beq.n	11632 <LORAWAN_TxHandler+0x36>
   11628:	4b28      	ldr	r3, [pc, #160]	; (116cc <LORAWAN_TxHandler+0xd0>)
   1162a:	4798      	blx	r3
   1162c:	2000      	movs	r0, #0
   1162e:	b007      	add	sp, #28
   11630:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11632:	0023      	movs	r3, r4
   11634:	33fd      	adds	r3, #253	; 0xfd
   11636:	781b      	ldrb	r3, [r3, #0]
   11638:	ae01      	add	r6, sp, #4
   1163a:	2b04      	cmp	r3, #4
   1163c:	d103      	bne.n	11646 <LORAWAN_TxHandler+0x4a>
   1163e:	0030      	movs	r0, r6
   11640:	4b23      	ldr	r3, [pc, #140]	; (116d0 <LORAWAN_TxHandler+0xd4>)
   11642:	7035      	strb	r5, [r6, #0]
   11644:	4798      	blx	r3
   11646:	4b23      	ldr	r3, [pc, #140]	; (116d4 <LORAWAN_TxHandler+0xd8>)
   11648:	9803      	ldr	r0, [sp, #12]
   1164a:	9904      	ldr	r1, [sp, #16]
   1164c:	9a05      	ldr	r2, [sp, #20]
   1164e:	4798      	blx	r3
   11650:	0023      	movs	r3, r4
   11652:	33fc      	adds	r3, #252	; 0xfc
   11654:	68dd      	ldr	r5, [r3, #12]
   11656:	4f20      	ldr	r7, [pc, #128]	; (116d8 <LORAWAN_TxHandler+0xdc>)
   11658:	4b20      	ldr	r3, [pc, #128]	; (116dc <LORAWAN_TxHandler+0xe0>)
   1165a:	2d00      	cmp	r5, #0
   1165c:	d023      	beq.n	116a6 <LORAWAN_TxHandler+0xaa>
   1165e:	2201      	movs	r2, #1
   11660:	54e2      	strb	r2, [r4, r3]
   11662:	7828      	ldrb	r0, [r5, #0]
   11664:	7a2b      	ldrb	r3, [r5, #8]
   11666:	1e42      	subs	r2, r0, #1
   11668:	4190      	sbcs	r0, r2
   1166a:	7869      	ldrb	r1, [r5, #1]
   1166c:	686a      	ldr	r2, [r5, #4]
   1166e:	b2c0      	uxtb	r0, r0
   11670:	47b8      	blx	r7
   11672:	0023      	movs	r3, r4
   11674:	33ce      	adds	r3, #206	; 0xce
   11676:	881b      	ldrh	r3, [r3, #0]
   11678:	0030      	movs	r0, r6
   1167a:	7033      	strb	r3, [r6, #0]
   1167c:	4b18      	ldr	r3, [pc, #96]	; (116e0 <LORAWAN_TxHandler+0xe4>)
   1167e:	6073      	str	r3, [r6, #4]
   11680:	4b18      	ldr	r3, [pc, #96]	; (116e4 <LORAWAN_TxHandler+0xe8>)
   11682:	4798      	blx	r3
   11684:	2800      	cmp	r0, #0
   11686:	d114      	bne.n	116b2 <LORAWAN_TxHandler+0xb6>
   11688:	0021      	movs	r1, r4
   1168a:	220e      	movs	r2, #14
   1168c:	3184      	adds	r1, #132	; 0x84
   1168e:	780b      	ldrb	r3, [r1, #0]
   11690:	4393      	bics	r3, r2
   11692:	001a      	movs	r2, r3
   11694:	2302      	movs	r3, #2
   11696:	4313      	orrs	r3, r2
   11698:	700b      	strb	r3, [r1, #0]
   1169a:	2208      	movs	r2, #8
   1169c:	3494      	adds	r4, #148	; 0x94
   1169e:	7823      	ldrb	r3, [r4, #0]
   116a0:	4393      	bics	r3, r2
   116a2:	7023      	strb	r3, [r4, #0]
   116a4:	e7c2      	b.n	1162c <LORAWAN_TxHandler+0x30>
   116a6:	54e5      	strb	r5, [r4, r3]
   116a8:	002a      	movs	r2, r5
   116aa:	002b      	movs	r3, r5
   116ac:	0029      	movs	r1, r5
   116ae:	0028      	movs	r0, r5
   116b0:	e7de      	b.n	11670 <LORAWAN_TxHandler+0x74>
   116b2:	0022      	movs	r2, r4
   116b4:	2120      	movs	r1, #32
   116b6:	3294      	adds	r2, #148	; 0x94
   116b8:	7813      	ldrb	r3, [r2, #0]
   116ba:	438b      	bics	r3, r1
   116bc:	7013      	strb	r3, [r2, #0]
   116be:	4b03      	ldr	r3, [pc, #12]	; (116cc <LORAWAN_TxHandler+0xd0>)
   116c0:	4798      	blx	r3
   116c2:	e7ea      	b.n	1169a <LORAWAN_TxHandler+0x9e>
   116c4:	20003e8c 	.word	0x20003e8c
   116c8:	00010455 	.word	0x00010455
   116cc:	00012b2d 	.word	0x00012b2d
   116d0:	00009135 	.word	0x00009135
   116d4:	000126c5 	.word	0x000126c5
   116d8:	00014651 	.word	0x00014651
   116dc:	0000022a 	.word	0x0000022a
   116e0:	200040e4 	.word	0x200040e4
   116e4:	00008799 	.word	0x00008799

000116e8 <LORAWAN_JoinReqHandler>:
   116e8:	b530      	push	{r4, r5, lr}
   116ea:	b087      	sub	sp, #28
   116ec:	466a      	mov	r2, sp
   116ee:	2300      	movs	r3, #0
   116f0:	4c25      	ldr	r4, [pc, #148]	; (11788 <LORAWAN_JoinReqHandler+0xa0>)
   116f2:	7013      	strb	r3, [r2, #0]
   116f4:	0023      	movs	r3, r4
   116f6:	33e9      	adds	r3, #233	; 0xe9
   116f8:	781b      	ldrb	r3, [r3, #0]
   116fa:	7053      	strb	r3, [r2, #1]
   116fc:	0023      	movs	r3, r4
   116fe:	33e7      	adds	r3, #231	; 0xe7
   11700:	781b      	ldrb	r3, [r3, #0]
   11702:	7093      	strb	r3, [r2, #2]
   11704:	0023      	movs	r3, r4
   11706:	33ff      	adds	r3, #255	; 0xff
   11708:	7f5b      	ldrb	r3, [r3, #29]
   1170a:	069b      	lsls	r3, r3, #26
   1170c:	d507      	bpl.n	1171e <LORAWAN_JoinReqHandler+0x36>
   1170e:	6f63      	ldr	r3, [r4, #116]	; 0x74
   11710:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   11712:	4313      	orrs	r3, r2
   11714:	d103      	bne.n	1171e <LORAWAN_JoinReqHandler+0x36>
   11716:	0023      	movs	r3, r4
   11718:	2201      	movs	r2, #1
   1171a:	3380      	adds	r3, #128	; 0x80
   1171c:	701a      	strb	r2, [r3, #0]
   1171e:	aa03      	add	r2, sp, #12
   11720:	4669      	mov	r1, sp
   11722:	202e      	movs	r0, #46	; 0x2e
   11724:	4b19      	ldr	r3, [pc, #100]	; (1178c <LORAWAN_JoinReqHandler+0xa4>)
   11726:	4798      	blx	r3
   11728:	2808      	cmp	r0, #8
   1172a:	d004      	beq.n	11736 <LORAWAN_JoinReqHandler+0x4e>
   1172c:	4b18      	ldr	r3, [pc, #96]	; (11790 <LORAWAN_JoinReqHandler+0xa8>)
   1172e:	4798      	blx	r3
   11730:	2000      	movs	r0, #0
   11732:	b007      	add	sp, #28
   11734:	bd30      	pop	{r4, r5, pc}
   11736:	4b17      	ldr	r3, [pc, #92]	; (11794 <LORAWAN_JoinReqHandler+0xac>)
   11738:	9803      	ldr	r0, [sp, #12]
   1173a:	9904      	ldr	r1, [sp, #16]
   1173c:	9a05      	ldr	r2, [sp, #20]
   1173e:	4798      	blx	r3
   11740:	0023      	movs	r3, r4
   11742:	33fd      	adds	r3, #253	; 0xfd
   11744:	781b      	ldrb	r3, [r3, #0]
   11746:	ad01      	add	r5, sp, #4
   11748:	2b04      	cmp	r3, #4
   1174a:	d104      	bne.n	11756 <LORAWAN_JoinReqHandler+0x6e>
   1174c:	3b03      	subs	r3, #3
   1174e:	702b      	strb	r3, [r5, #0]
   11750:	0028      	movs	r0, r5
   11752:	4b11      	ldr	r3, [pc, #68]	; (11798 <LORAWAN_JoinReqHandler+0xb0>)
   11754:	4798      	blx	r3
   11756:	2200      	movs	r2, #0
   11758:	4b10      	ldr	r3, [pc, #64]	; (1179c <LORAWAN_JoinReqHandler+0xb4>)
   1175a:	54e2      	strb	r2, [r4, r3]
   1175c:	4b10      	ldr	r3, [pc, #64]	; (117a0 <LORAWAN_JoinReqHandler+0xb8>)
   1175e:	4798      	blx	r3
   11760:	4b10      	ldr	r3, [pc, #64]	; (117a4 <LORAWAN_JoinReqHandler+0xbc>)
   11762:	7028      	strb	r0, [r5, #0]
   11764:	606b      	str	r3, [r5, #4]
   11766:	0028      	movs	r0, r5
   11768:	4b0f      	ldr	r3, [pc, #60]	; (117a8 <LORAWAN_JoinReqHandler+0xc0>)
   1176a:	4798      	blx	r3
   1176c:	2800      	cmp	r0, #0
   1176e:	d001      	beq.n	11774 <LORAWAN_JoinReqHandler+0x8c>
   11770:	201b      	movs	r0, #27
   11772:	e7db      	b.n	1172c <LORAWAN_JoinReqHandler+0x44>
   11774:	220e      	movs	r2, #14
   11776:	3484      	adds	r4, #132	; 0x84
   11778:	7823      	ldrb	r3, [r4, #0]
   1177a:	4393      	bics	r3, r2
   1177c:	001a      	movs	r2, r3
   1177e:	2302      	movs	r3, #2
   11780:	4313      	orrs	r3, r2
   11782:	7023      	strb	r3, [r4, #0]
   11784:	e7d4      	b.n	11730 <LORAWAN_JoinReqHandler+0x48>
   11786:	46c0      	nop			; (mov r8, r8)
   11788:	20003e8c 	.word	0x20003e8c
   1178c:	00010455 	.word	0x00010455
   11790:	0001218d 	.word	0x0001218d
   11794:	000126c5 	.word	0x000126c5
   11798:	00009135 	.word	0x00009135
   1179c:	0000022a 	.word	0x0000022a
   117a0:	00012589 	.word	0x00012589
   117a4:	200040d4 	.word	0x200040d4
   117a8:	00008799 	.word	0x00008799

000117ac <LORAWAN_RxHandler>:
   117ac:	b513      	push	{r0, r1, r4, lr}
   117ae:	4b0c      	ldr	r3, [pc, #48]	; (117e0 <LORAWAN_RxHandler+0x34>)
   117b0:	781b      	ldrb	r3, [r3, #0]
   117b2:	2b08      	cmp	r3, #8
   117b4:	d011      	beq.n	117da <LORAWAN_RxHandler+0x2e>
   117b6:	2b10      	cmp	r3, #16
   117b8:	d001      	beq.n	117be <LORAWAN_RxHandler+0x12>
   117ba:	2b01      	cmp	r3, #1
   117bc:	d10b      	bne.n	117d6 <LORAWAN_RxHandler+0x2a>
   117be:	466b      	mov	r3, sp
   117c0:	1c9c      	adds	r4, r3, #2
   117c2:	0021      	movs	r1, r4
   117c4:	a801      	add	r0, sp, #4
   117c6:	4b07      	ldr	r3, [pc, #28]	; (117e4 <LORAWAN_RxHandler+0x38>)
   117c8:	4798      	blx	r3
   117ca:	9801      	ldr	r0, [sp, #4]
   117cc:	2800      	cmp	r0, #0
   117ce:	d002      	beq.n	117d6 <LORAWAN_RxHandler+0x2a>
   117d0:	7821      	ldrb	r1, [r4, #0]
   117d2:	4b05      	ldr	r3, [pc, #20]	; (117e8 <LORAWAN_RxHandler+0x3c>)
   117d4:	4798      	blx	r3
   117d6:	2000      	movs	r0, #0
   117d8:	bd16      	pop	{r1, r2, r4, pc}
   117da:	4b04      	ldr	r3, [pc, #16]	; (117ec <LORAWAN_RxHandler+0x40>)
   117dc:	4798      	blx	r3
   117de:	e7fa      	b.n	117d6 <LORAWAN_RxHandler+0x2a>
   117e0:	20002887 	.word	0x20002887
   117e4:	000089b1 	.word	0x000089b1
   117e8:	000135ad 	.word	0x000135ad
   117ec:	00012ec1 	.word	0x00012ec1

000117f0 <LORAWAN_PostTask>:
   117f0:	b510      	push	{r4, lr}
   117f2:	4b08      	ldr	r3, [pc, #32]	; (11814 <LORAWAN_PostTask+0x24>)
   117f4:	0004      	movs	r4, r0
   117f6:	4798      	blx	r3
   117f8:	2201      	movs	r2, #1
   117fa:	40a2      	lsls	r2, r4
   117fc:	4906      	ldr	r1, [pc, #24]	; (11818 <LORAWAN_PostTask+0x28>)
   117fe:	780b      	ldrb	r3, [r1, #0]
   11800:	4313      	orrs	r3, r2
   11802:	b2db      	uxtb	r3, r3
   11804:	700b      	strb	r3, [r1, #0]
   11806:	4b05      	ldr	r3, [pc, #20]	; (1181c <LORAWAN_PostTask+0x2c>)
   11808:	4798      	blx	r3
   1180a:	2004      	movs	r0, #4
   1180c:	4b04      	ldr	r3, [pc, #16]	; (11820 <LORAWAN_PostTask+0x30>)
   1180e:	4798      	blx	r3
   11810:	bd10      	pop	{r4, pc}
   11812:	46c0      	nop			; (mov r8, r8)
   11814:	0000ff69 	.word	0x0000ff69
   11818:	200023da 	.word	0x200023da
   1181c:	0000ff75 	.word	0x0000ff75
   11820:	00010fb5 	.word	0x00010fb5

00011824 <LORAWAN_TaskHandler>:
   11824:	b570      	push	{r4, r5, r6, lr}
   11826:	2601      	movs	r6, #1
   11828:	4d0e      	ldr	r5, [pc, #56]	; (11864 <LORAWAN_TaskHandler+0x40>)
   1182a:	e015      	b.n	11858 <LORAWAN_TaskHandler+0x34>
   1182c:	2400      	movs	r4, #0
   1182e:	782b      	ldrb	r3, [r5, #0]
   11830:	4123      	asrs	r3, r4
   11832:	4233      	tst	r3, r6
   11834:	d00d      	beq.n	11852 <LORAWAN_TaskHandler+0x2e>
   11836:	4b0c      	ldr	r3, [pc, #48]	; (11868 <LORAWAN_TaskHandler+0x44>)
   11838:	4798      	blx	r3
   1183a:	0032      	movs	r2, r6
   1183c:	40a2      	lsls	r2, r4
   1183e:	782b      	ldrb	r3, [r5, #0]
   11840:	00a4      	lsls	r4, r4, #2
   11842:	4393      	bics	r3, r2
   11844:	702b      	strb	r3, [r5, #0]
   11846:	4b09      	ldr	r3, [pc, #36]	; (1186c <LORAWAN_TaskHandler+0x48>)
   11848:	4798      	blx	r3
   1184a:	4b09      	ldr	r3, [pc, #36]	; (11870 <LORAWAN_TaskHandler+0x4c>)
   1184c:	58e3      	ldr	r3, [r4, r3]
   1184e:	4798      	blx	r3
   11850:	e7ea      	b.n	11828 <LORAWAN_TaskHandler+0x4>
   11852:	3401      	adds	r4, #1
   11854:	2c03      	cmp	r4, #3
   11856:	d1ea      	bne.n	1182e <LORAWAN_TaskHandler+0xa>
   11858:	7828      	ldrb	r0, [r5, #0]
   1185a:	b2c0      	uxtb	r0, r0
   1185c:	2800      	cmp	r0, #0
   1185e:	d1e5      	bne.n	1182c <LORAWAN_TaskHandler+0x8>
   11860:	bd70      	pop	{r4, r5, r6, pc}
   11862:	46c0      	nop			; (mov r8, r8)
   11864:	200023da 	.word	0x200023da
   11868:	0000ff69 	.word	0x0000ff69
   1186c:	0000ff75 	.word	0x0000ff75
   11870:	0001afdc 	.word	0x0001afdc

00011874 <MacClearCommands>:
   11874:	490e      	ldr	r1, [pc, #56]	; (118b0 <MacClearCommands+0x3c>)
   11876:	b570      	push	{r4, r5, r6, lr}
   11878:	000b      	movs	r3, r1
   1187a:	33e0      	adds	r3, #224	; 0xe0
   1187c:	7818      	ldrb	r0, [r3, #0]
   1187e:	2303      	movs	r3, #3
   11880:	25a4      	movs	r5, #164	; 0xa4
   11882:	4343      	muls	r3, r0
   11884:	2401      	movs	r4, #1
   11886:	20ff      	movs	r0, #255	; 0xff
   11888:	3399      	adds	r3, #153	; 0x99
   1188a:	4a0a      	ldr	r2, [pc, #40]	; (118b4 <MacClearCommands+0x40>)
   1188c:	185b      	adds	r3, r3, r1
   1188e:	00ed      	lsls	r5, r5, #3
   11890:	429a      	cmp	r2, r3
   11892:	d100      	bne.n	11896 <MacClearCommands+0x22>
   11894:	bd70      	pop	{r4, r5, r6, pc}
   11896:	7811      	ldrb	r1, [r2, #0]
   11898:	29ff      	cmp	r1, #255	; 0xff
   1189a:	d006      	beq.n	118aa <MacClearCommands+0x36>
   1189c:	290a      	cmp	r1, #10
   1189e:	d803      	bhi.n	118a8 <MacClearCommands+0x34>
   118a0:	0026      	movs	r6, r4
   118a2:	408e      	lsls	r6, r1
   118a4:	422e      	tst	r6, r5
   118a6:	d100      	bne.n	118aa <MacClearCommands+0x36>
   118a8:	7010      	strb	r0, [r2, #0]
   118aa:	3203      	adds	r2, #3
   118ac:	e7f0      	b.n	11890 <MacClearCommands+0x1c>
   118ae:	46c0      	nop			; (mov r8, r8)
   118b0:	20003e8c 	.word	0x20003e8c
   118b4:	20003f25 	.word	0x20003f25

000118b8 <CountfOptsLength>:
   118b8:	2200      	movs	r2, #0
   118ba:	490d      	ldr	r1, [pc, #52]	; (118f0 <CountfOptsLength+0x38>)
   118bc:	b570      	push	{r4, r5, r6, lr}
   118be:	000b      	movs	r3, r1
   118c0:	0010      	movs	r0, r2
   118c2:	2503      	movs	r5, #3
   118c4:	33e0      	adds	r3, #224	; 0xe0
   118c6:	781c      	ldrb	r4, [r3, #0]
   118c8:	4e0a      	ldr	r6, [pc, #40]	; (118f4 <CountfOptsLength+0x3c>)
   118ca:	b2d3      	uxtb	r3, r2
   118cc:	429c      	cmp	r4, r3
   118ce:	d800      	bhi.n	118d2 <CountfOptsLength+0x1a>
   118d0:	bd70      	pop	{r4, r5, r6, pc}
   118d2:	002b      	movs	r3, r5
   118d4:	4353      	muls	r3, r2
   118d6:	3399      	adds	r3, #153	; 0x99
   118d8:	5ccb      	ldrb	r3, [r1, r3]
   118da:	2bff      	cmp	r3, #255	; 0xff
   118dc:	d006      	beq.n	118ec <CountfOptsLength+0x34>
   118de:	18f3      	adds	r3, r6, r3
   118e0:	3b02      	subs	r3, #2
   118e2:	781b      	ldrb	r3, [r3, #0]
   118e4:	18c3      	adds	r3, r0, r3
   118e6:	2b0f      	cmp	r3, #15
   118e8:	dcf2      	bgt.n	118d0 <CountfOptsLength+0x18>
   118ea:	b2d8      	uxtb	r0, r3
   118ec:	3201      	adds	r2, #1
   118ee:	e7ec      	b.n	118ca <CountfOptsLength+0x12>
   118f0:	20003e8c 	.word	0x20003e8c
   118f4:	0001aff7 	.word	0x0001aff7

000118f8 <LorawanGetMaxPayloadSize>:
   118f8:	b513      	push	{r0, r1, r4, lr}
   118fa:	466b      	mov	r3, sp
   118fc:	1ddc      	adds	r4, r3, #7
   118fe:	2300      	movs	r3, #0
   11900:	0022      	movs	r2, r4
   11902:	7023      	strb	r3, [r4, #0]
   11904:	4903      	ldr	r1, [pc, #12]	; (11914 <LorawanGetMaxPayloadSize+0x1c>)
   11906:	4b04      	ldr	r3, [pc, #16]	; (11918 <LorawanGetMaxPayloadSize+0x20>)
   11908:	2005      	movs	r0, #5
   1190a:	4798      	blx	r3
   1190c:	7820      	ldrb	r0, [r4, #0]
   1190e:	3808      	subs	r0, #8
   11910:	b2c0      	uxtb	r0, r0
   11912:	bd16      	pop	{r1, r2, r4, pc}
   11914:	20003f73 	.word	0x20003f73
   11918:	00010455 	.word	0x00010455

0001191c <UpdateReceiveDelays>:
   1191c:	23fa      	movs	r3, #250	; 0xfa
   1191e:	b570      	push	{r4, r5, r6, lr}
   11920:	009b      	lsls	r3, r3, #2
   11922:	4c0b      	ldr	r4, [pc, #44]	; (11950 <UpdateReceiveDelays+0x34>)
   11924:	2800      	cmp	r0, #0
   11926:	d000      	beq.n	1192a <UpdateReceiveDelays+0xe>
   11928:	4343      	muls	r3, r0
   1192a:	0022      	movs	r2, r4
   1192c:	4d09      	ldr	r5, [pc, #36]	; (11954 <UpdateReceiveDelays+0x38>)
   1192e:	32d0      	adds	r2, #208	; 0xd0
   11930:	210c      	movs	r1, #12
   11932:	2000      	movs	r0, #0
   11934:	8013      	strh	r3, [r2, #0]
   11936:	47a8      	blx	r5
   11938:	0023      	movs	r3, r4
   1193a:	22fa      	movs	r2, #250	; 0xfa
   1193c:	33d0      	adds	r3, #208	; 0xd0
   1193e:	881b      	ldrh	r3, [r3, #0]
   11940:	0092      	lsls	r2, r2, #2
   11942:	189b      	adds	r3, r3, r2
   11944:	34d2      	adds	r4, #210	; 0xd2
   11946:	210d      	movs	r1, #13
   11948:	2000      	movs	r0, #0
   1194a:	8023      	strh	r3, [r4, #0]
   1194c:	47a8      	blx	r5
   1194e:	bd70      	pop	{r4, r5, r6, pc}
   11950:	20003e8c 	.word	0x20003e8c
   11954:	0000bbc5 	.word	0x0000bbc5

00011958 <IncludeMacCommandsResponse>:
   11958:	b5f0      	push	{r4, r5, r6, r7, lr}
   1195a:	0005      	movs	r5, r0
   1195c:	2600      	movs	r6, #0
   1195e:	b087      	sub	sp, #28
   11960:	880c      	ldrh	r4, [r1, #0]
   11962:	9101      	str	r1, [sp, #4]
   11964:	9203      	str	r2, [sp, #12]
   11966:	4f77      	ldr	r7, [pc, #476]	; (11b44 <IncludeMacCommandsResponse+0x1ec>)
   11968:	003b      	movs	r3, r7
   1196a:	33e0      	adds	r3, #224	; 0xe0
   1196c:	781b      	ldrb	r3, [r3, #0]
   1196e:	42b3      	cmp	r3, r6
   11970:	d913      	bls.n	1199a <IncludeMacCommandsResponse+0x42>
   11972:	9b03      	ldr	r3, [sp, #12]
   11974:	2b00      	cmp	r3, #0
   11976:	d019      	beq.n	119ac <IncludeMacCommandsResponse+0x54>
   11978:	2303      	movs	r3, #3
   1197a:	4373      	muls	r3, r6
   1197c:	18fb      	adds	r3, r7, r3
   1197e:	3399      	adds	r3, #153	; 0x99
   11980:	7819      	ldrb	r1, [r3, #0]
   11982:	29ff      	cmp	r1, #255	; 0xff
   11984:	d012      	beq.n	119ac <IncludeMacCommandsResponse+0x54>
   11986:	9b01      	ldr	r3, [sp, #4]
   11988:	881a      	ldrh	r2, [r3, #0]
   1198a:	4b6f      	ldr	r3, [pc, #444]	; (11b48 <IncludeMacCommandsResponse+0x1f0>)
   1198c:	1aa2      	subs	r2, r4, r2
   1198e:	185b      	adds	r3, r3, r1
   11990:	3b02      	subs	r3, #2
   11992:	781b      	ldrb	r3, [r3, #0]
   11994:	18d3      	adds	r3, r2, r3
   11996:	2b0f      	cmp	r3, #15
   11998:	dd08      	ble.n	119ac <IncludeMacCommandsResponse+0x54>
   1199a:	2207      	movs	r2, #7
   1199c:	2100      	movs	r1, #0
   1199e:	4b6b      	ldr	r3, [pc, #428]	; (11b4c <IncludeMacCommandsResponse+0x1f4>)
   119a0:	486b      	ldr	r0, [pc, #428]	; (11b50 <IncludeMacCommandsResponse+0x1f8>)
   119a2:	4798      	blx	r3
   119a4:	9b01      	ldr	r3, [sp, #4]
   119a6:	801c      	strh	r4, [r3, #0]
   119a8:	b007      	add	sp, #28
   119aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   119ac:	2303      	movs	r3, #3
   119ae:	4373      	muls	r3, r6
   119b0:	18fb      	adds	r3, r7, r3
   119b2:	3399      	adds	r3, #153	; 0x99
   119b4:	781b      	ldrb	r3, [r3, #0]
   119b6:	1e98      	subs	r0, r3, #2
   119b8:	280b      	cmp	r0, #11
   119ba:	d862      	bhi.n	11a82 <IncludeMacCommandsResponse+0x12a>
   119bc:	f003 fb7e 	bl	150bc <__gnu_thumb1_case_uqi>
   119c0:	27a20698 	.word	0x27a20698
   119c4:	7da26748 	.word	0x7da26748
   119c8:	a6616182 	.word	0xa6616182
   119cc:	2303      	movs	r3, #3
   119ce:	2200      	movs	r2, #0
   119d0:	552b      	strb	r3, [r5, r4]
   119d2:	1c63      	adds	r3, r4, #1
   119d4:	b29b      	uxth	r3, r3
   119d6:	18eb      	adds	r3, r5, r3
   119d8:	4f5a      	ldr	r7, [pc, #360]	; (11b44 <IncludeMacCommandsResponse+0x1ec>)
   119da:	485e      	ldr	r0, [pc, #376]	; (11b54 <IncludeMacCommandsResponse+0x1fc>)
   119dc:	701a      	strb	r2, [r3, #0]
   119de:	5c39      	ldrb	r1, [r7, r0]
   119e0:	3201      	adds	r2, #1
   119e2:	4011      	ands	r1, r2
   119e4:	466a      	mov	r2, sp
   119e6:	9102      	str	r1, [sp, #8]
   119e8:	7a12      	ldrb	r2, [r2, #8]
   119ea:	701a      	strb	r2, [r3, #0]
   119ec:	5c3a      	ldrb	r2, [r7, r0]
   119ee:	4694      	mov	ip, r2
   119f0:	2202      	movs	r2, #2
   119f2:	4661      	mov	r1, ip
   119f4:	4211      	tst	r1, r2
   119f6:	d002      	beq.n	119fe <IncludeMacCommandsResponse+0xa6>
   119f8:	9902      	ldr	r1, [sp, #8]
   119fa:	430a      	orrs	r2, r1
   119fc:	701a      	strb	r2, [r3, #0]
   119fe:	2204      	movs	r2, #4
   11a00:	5c39      	ldrb	r1, [r7, r0]
   11a02:	4211      	tst	r1, r2
   11a04:	d071      	beq.n	11aea <IncludeMacCommandsResponse+0x192>
   11a06:	7819      	ldrb	r1, [r3, #0]
   11a08:	430a      	orrs	r2, r1
   11a0a:	701a      	strb	r2, [r3, #0]
   11a0c:	e06d      	b.n	11aea <IncludeMacCommandsResponse+0x192>
   11a0e:	2305      	movs	r3, #5
   11a10:	2103      	movs	r1, #3
   11a12:	2200      	movs	r2, #0
   11a14:	552b      	strb	r3, [r5, r4]
   11a16:	1c63      	adds	r3, r4, #1
   11a18:	b29b      	uxth	r3, r3
   11a1a:	4371      	muls	r1, r6
   11a1c:	18eb      	adds	r3, r5, r3
   11a1e:	701a      	strb	r2, [r3, #0]
   11a20:	4a48      	ldr	r2, [pc, #288]	; (11b44 <IncludeMacCommandsResponse+0x1ec>)
   11a22:	1851      	adds	r1, r2, r1
   11a24:	3198      	adds	r1, #152	; 0x98
   11a26:	7888      	ldrb	r0, [r1, #2]
   11a28:	0700      	lsls	r0, r0, #28
   11a2a:	0fc0      	lsrs	r0, r0, #31
   11a2c:	7018      	strb	r0, [r3, #0]
   11a2e:	7889      	ldrb	r1, [r1, #2]
   11a30:	b2c7      	uxtb	r7, r0
   11a32:	06c9      	lsls	r1, r1, #27
   11a34:	d502      	bpl.n	11a3c <IncludeMacCommandsResponse+0xe4>
   11a36:	2102      	movs	r1, #2
   11a38:	4339      	orrs	r1, r7
   11a3a:	7019      	strb	r1, [r3, #0]
   11a3c:	2103      	movs	r1, #3
   11a3e:	4371      	muls	r1, r6
   11a40:	1852      	adds	r2, r2, r1
   11a42:	3298      	adds	r2, #152	; 0x98
   11a44:	7892      	ldrb	r2, [r2, #2]
   11a46:	0692      	lsls	r2, r2, #26
   11a48:	d54f      	bpl.n	11aea <IncludeMacCommandsResponse+0x192>
   11a4a:	7819      	ldrb	r1, [r3, #0]
   11a4c:	2204      	movs	r2, #4
   11a4e:	e7db      	b.n	11a08 <IncludeMacCommandsResponse+0xb0>
   11a50:	a904      	add	r1, sp, #16
   11a52:	4b41      	ldr	r3, [pc, #260]	; (11b58 <IncludeMacCommandsResponse+0x200>)
   11a54:	200e      	movs	r0, #14
   11a56:	4798      	blx	r3
   11a58:	2306      	movs	r3, #6
   11a5a:	4a3a      	ldr	r2, [pc, #232]	; (11b44 <IncludeMacCommandsResponse+0x1ec>)
   11a5c:	552b      	strb	r3, [r5, r4]
   11a5e:	32e8      	adds	r2, #232	; 0xe8
   11a60:	7811      	ldrb	r1, [r2, #0]
   11a62:	1c62      	adds	r2, r4, #1
   11a64:	b292      	uxth	r2, r2
   11a66:	54a9      	strb	r1, [r5, r2]
   11a68:	aa04      	add	r2, sp, #16
   11a6a:	7812      	ldrb	r2, [r2, #0]
   11a6c:	1ca3      	adds	r3, r4, #2
   11a6e:	0011      	movs	r1, r2
   11a70:	3120      	adds	r1, #32
   11a72:	3403      	adds	r4, #3
   11a74:	b2c9      	uxtb	r1, r1
   11a76:	b29b      	uxth	r3, r3
   11a78:	b2a4      	uxth	r4, r4
   11a7a:	293f      	cmp	r1, #63	; 0x3f
   11a7c:	d904      	bls.n	11a88 <IncludeMacCommandsResponse+0x130>
   11a7e:	2220      	movs	r2, #32
   11a80:	54ea      	strb	r2, [r5, r3]
   11a82:	3601      	adds	r6, #1
   11a84:	b2f6      	uxtb	r6, r6
   11a86:	e76e      	b.n	11966 <IncludeMacCommandsResponse+0xe>
   11a88:	213f      	movs	r1, #63	; 0x3f
   11a8a:	400a      	ands	r2, r1
   11a8c:	e7f8      	b.n	11a80 <IncludeMacCommandsResponse+0x128>
   11a8e:	2307      	movs	r3, #7
   11a90:	2103      	movs	r1, #3
   11a92:	2200      	movs	r2, #0
   11a94:	552b      	strb	r3, [r5, r4]
   11a96:	1c63      	adds	r3, r4, #1
   11a98:	4371      	muls	r1, r6
   11a9a:	b29b      	uxth	r3, r3
   11a9c:	18eb      	adds	r3, r5, r3
   11a9e:	701a      	strb	r2, [r3, #0]
   11aa0:	4a28      	ldr	r2, [pc, #160]	; (11b44 <IncludeMacCommandsResponse+0x1ec>)
   11aa2:	1852      	adds	r2, r2, r1
   11aa4:	3298      	adds	r2, #152	; 0x98
   11aa6:	7891      	ldrb	r1, [r2, #2]
   11aa8:	09c9      	lsrs	r1, r1, #7
   11aaa:	7019      	strb	r1, [r3, #0]
   11aac:	7892      	ldrb	r2, [r2, #2]
   11aae:	b2c8      	uxtb	r0, r1
   11ab0:	0652      	lsls	r2, r2, #25
   11ab2:	d51a      	bpl.n	11aea <IncludeMacCommandsResponse+0x192>
   11ab4:	2202      	movs	r2, #2
   11ab6:	4302      	orrs	r2, r0
   11ab8:	e7a7      	b.n	11a0a <IncludeMacCommandsResponse+0xb2>
   11aba:	2209      	movs	r2, #9
   11abc:	1c63      	adds	r3, r4, #1
   11abe:	552a      	strb	r2, [r5, r4]
   11ac0:	b29c      	uxth	r4, r3
   11ac2:	e7de      	b.n	11a82 <IncludeMacCommandsResponse+0x12a>
   11ac4:	230a      	movs	r3, #10
   11ac6:	2103      	movs	r1, #3
   11ac8:	2200      	movs	r2, #0
   11aca:	552b      	strb	r3, [r5, r4]
   11acc:	1c63      	adds	r3, r4, #1
   11ace:	4371      	muls	r1, r6
   11ad0:	b29b      	uxth	r3, r3
   11ad2:	18eb      	adds	r3, r5, r3
   11ad4:	701a      	strb	r2, [r3, #0]
   11ad6:	4a1b      	ldr	r2, [pc, #108]	; (11b44 <IncludeMacCommandsResponse+0x1ec>)
   11ad8:	1852      	adds	r2, r2, r1
   11ada:	3298      	adds	r2, #152	; 0x98
   11adc:	7891      	ldrb	r1, [r2, #2]
   11ade:	09c9      	lsrs	r1, r1, #7
   11ae0:	7019      	strb	r1, [r3, #0]
   11ae2:	78d2      	ldrb	r2, [r2, #3]
   11ae4:	b2c8      	uxtb	r0, r1
   11ae6:	07d2      	lsls	r2, r2, #31
   11ae8:	d4e4      	bmi.n	11ab4 <IncludeMacCommandsResponse+0x15c>
   11aea:	3402      	adds	r4, #2
   11aec:	b2a4      	uxth	r4, r4
   11aee:	e7c8      	b.n	11a82 <IncludeMacCommandsResponse+0x12a>
   11af0:	003b      	movs	r3, r7
   11af2:	22ff      	movs	r2, #255	; 0xff
   11af4:	33e5      	adds	r3, #229	; 0xe5
   11af6:	701a      	strb	r2, [r3, #0]
   11af8:	2300      	movs	r3, #0
   11afa:	37e6      	adds	r7, #230	; 0xe6
   11afc:	703b      	strb	r3, [r7, #0]
   11afe:	3afd      	subs	r2, #253	; 0xfd
   11b00:	1c63      	adds	r3, r4, #1
   11b02:	e7dc      	b.n	11abe <IncludeMacCommandsResponse+0x166>
   11b04:	1c62      	adds	r2, r4, #1
   11b06:	552b      	strb	r3, [r5, r4]
   11b08:	b294      	uxth	r4, r2
   11b0a:	e7ba      	b.n	11a82 <IncludeMacCommandsResponse+0x12a>
   11b0c:	2201      	movs	r2, #1
   11b0e:	4252      	negs	r2, r2
   11b10:	17d3      	asrs	r3, r2, #31
   11b12:	9204      	str	r2, [sp, #16]
   11b14:	9305      	str	r3, [sp, #20]
   11b16:	4b11      	ldr	r3, [pc, #68]	; (11b5c <IncludeMacCommandsResponse+0x204>)
   11b18:	a904      	add	r1, sp, #16
   11b1a:	5cf8      	ldrb	r0, [r7, r3]
   11b1c:	4b10      	ldr	r3, [pc, #64]	; (11b60 <IncludeMacCommandsResponse+0x208>)
   11b1e:	4798      	blx	r3
   11b20:	2301      	movs	r3, #1
   11b22:	228d      	movs	r2, #141	; 0x8d
   11b24:	425b      	negs	r3, r3
   11b26:	0092      	lsls	r2, r2, #2
   11b28:	50bb      	str	r3, [r7, r2]
   11b2a:	3204      	adds	r2, #4
   11b2c:	54bb      	strb	r3, [r7, r2]
   11b2e:	238c      	movs	r3, #140	; 0x8c
   11b30:	2201      	movs	r2, #1
   11b32:	009b      	lsls	r3, r3, #2
   11b34:	54fa      	strb	r2, [r7, r3]
   11b36:	2303      	movs	r3, #3
   11b38:	4373      	muls	r3, r6
   11b3a:	18ff      	adds	r7, r7, r3
   11b3c:	3799      	adds	r7, #153	; 0x99
   11b3e:	18a2      	adds	r2, r4, r2
   11b40:	783b      	ldrb	r3, [r7, #0]
   11b42:	e7e0      	b.n	11b06 <IncludeMacCommandsResponse+0x1ae>
   11b44:	20003e8c 	.word	0x20003e8c
   11b48:	0001aff7 	.word	0x0001aff7
   11b4c:	0001836d 	.word	0x0001836d
   11b50:	200040af 	.word	0x200040af
   11b54:	00000223 	.word	0x00000223
   11b58:	00007a6d 	.word	0x00007a6d
   11b5c:	00000231 	.word	0x00000231
   11b60:	00010f25 	.word	0x00010f25

00011b64 <UpdateJoinSuccessState>:
   11b64:	b5f0      	push	{r4, r5, r6, r7, lr}
   11b66:	4c32      	ldr	r4, [pc, #200]	; (11c30 <UpdateJoinSuccessState+0xcc>)
   11b68:	2104      	movs	r1, #4
   11b6a:	0022      	movs	r2, r4
   11b6c:	3294      	adds	r2, #148	; 0x94
   11b6e:	7813      	ldrb	r3, [r2, #0]
   11b70:	2001      	movs	r0, #1
   11b72:	438b      	bics	r3, r1
   11b74:	7013      	strb	r3, [r2, #0]
   11b76:	0022      	movs	r2, r4
   11b78:	3284      	adds	r2, #132	; 0x84
   11b7a:	7813      	ldrb	r3, [r2, #0]
   11b7c:	b087      	sub	sp, #28
   11b7e:	4303      	orrs	r3, r0
   11b80:	3107      	adds	r1, #7
   11b82:	4f2c      	ldr	r7, [pc, #176]	; (11c34 <UpdateJoinSuccessState+0xd0>)
   11b84:	7013      	strb	r3, [r2, #0]
   11b86:	2500      	movs	r5, #0
   11b88:	47b8      	blx	r7
   11b8a:	0023      	movs	r3, r4
   11b8c:	2115      	movs	r1, #21
   11b8e:	3388      	adds	r3, #136	; 0x88
   11b90:	0028      	movs	r0, r5
   11b92:	601d      	str	r5, [r3, #0]
   11b94:	47b8      	blx	r7
   11b96:	0023      	movs	r3, r4
   11b98:	2020      	movs	r0, #32
   11b9a:	33ff      	adds	r3, #255	; 0xff
   11b9c:	7f5b      	ldrb	r3, [r3, #29]
   11b9e:	4e26      	ldr	r6, [pc, #152]	; (11c38 <UpdateJoinSuccessState+0xd4>)
   11ba0:	4203      	tst	r3, r0
   11ba2:	d00c      	beq.n	11bbe <UpdateJoinSuccessState+0x5a>
   11ba4:	0023      	movs	r3, r4
   11ba6:	a904      	add	r1, sp, #16
   11ba8:	3380      	adds	r3, #128	; 0x80
   11baa:	710d      	strb	r5, [r1, #4]
   11bac:	701d      	strb	r5, [r3, #0]
   11bae:	6765      	str	r5, [r4, #116]	; 0x74
   11bb0:	67a5      	str	r5, [r4, #120]	; 0x78
   11bb2:	47b0      	blx	r6
   11bb4:	210f      	movs	r1, #15
   11bb6:	2021      	movs	r0, #33	; 0x21
   11bb8:	4469      	add	r1, sp
   11bba:	700d      	strb	r5, [r1, #0]
   11bbc:	47b0      	blx	r6
   11bbe:	0023      	movs	r3, r4
   11bc0:	2500      	movs	r5, #0
   11bc2:	338c      	adds	r3, #140	; 0x8c
   11bc4:	210a      	movs	r1, #10
   11bc6:	2001      	movs	r0, #1
   11bc8:	601d      	str	r5, [r3, #0]
   11bca:	47b8      	blx	r7
   11bcc:	0023      	movs	r3, r4
   11bce:	33ca      	adds	r3, #202	; 0xca
   11bd0:	801d      	strh	r5, [r3, #0]
   11bd2:	0022      	movs	r2, r4
   11bd4:	0023      	movs	r3, r4
   11bd6:	210e      	movs	r1, #14
   11bd8:	3284      	adds	r2, #132	; 0x84
   11bda:	33f6      	adds	r3, #246	; 0xf6
   11bdc:	701d      	strb	r5, [r3, #0]
   11bde:	7813      	ldrb	r3, [r2, #0]
   11be0:	2039      	movs	r0, #57	; 0x39
   11be2:	438b      	bics	r3, r1
   11be4:	0029      	movs	r1, r5
   11be6:	7013      	strb	r3, [r2, #0]
   11be8:	47b0      	blx	r6
   11bea:	0023      	movs	r3, r4
   11bec:	3385      	adds	r3, #133	; 0x85
   11bee:	781b      	ldrb	r3, [r3, #0]
   11bf0:	079b      	lsls	r3, r3, #30
   11bf2:	d50c      	bpl.n	11c0e <UpdateJoinSuccessState+0xaa>
   11bf4:	0023      	movs	r3, r4
   11bf6:	21fa      	movs	r1, #250	; 0xfa
   11bf8:	3390      	adds	r3, #144	; 0x90
   11bfa:	681b      	ldr	r3, [r3, #0]
   11bfc:	34f0      	adds	r4, #240	; 0xf0
   11bfe:	0089      	lsls	r1, r1, #2
   11c00:	7820      	ldrb	r0, [r4, #0]
   11c02:	4359      	muls	r1, r3
   11c04:	9500      	str	r5, [sp, #0]
   11c06:	4b0d      	ldr	r3, [pc, #52]	; (11c3c <UpdateJoinSuccessState+0xd8>)
   11c08:	002a      	movs	r2, r5
   11c0a:	4c0d      	ldr	r4, [pc, #52]	; (11c40 <UpdateJoinSuccessState+0xdc>)
   11c0c:	47a0      	blx	r4
   11c0e:	490d      	ldr	r1, [pc, #52]	; (11c44 <UpdateJoinSuccessState+0xe0>)
   11c10:	794a      	ldrb	r2, [r1, #5]
   11c12:	790b      	ldrb	r3, [r1, #4]
   11c14:	0212      	lsls	r2, r2, #8
   11c16:	431a      	orrs	r2, r3
   11c18:	798b      	ldrb	r3, [r1, #6]
   11c1a:	041b      	lsls	r3, r3, #16
   11c1c:	431a      	orrs	r2, r3
   11c1e:	79cb      	ldrb	r3, [r1, #7]
   11c20:	061b      	lsls	r3, r3, #24
   11c22:	4313      	orrs	r3, r2
   11c24:	d001      	beq.n	11c2a <UpdateJoinSuccessState+0xc6>
   11c26:	2008      	movs	r0, #8
   11c28:	4798      	blx	r3
   11c2a:	b007      	add	sp, #28
   11c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11c2e:	46c0      	nop			; (mov r8, r8)
   11c30:	20003e8c 	.word	0x20003e8c
   11c34:	0000bbc5 	.word	0x0000bbc5
   11c38:	0001048d 	.word	0x0001048d
   11c3c:	00011d85 	.word	0x00011d85
   11c40:	0001099d 	.word	0x0001099d
   11c44:	200041e8 	.word	0x200041e8

00011c48 <PrepareSessionKeys>:
   11c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11c4a:	0004      	movs	r4, r0
   11c4c:	2603      	movs	r6, #3
   11c4e:	000d      	movs	r5, r1
   11c50:	0017      	movs	r7, r2
   11c52:	4b09      	ldr	r3, [pc, #36]	; (11c78 <PrepareSessionKeys+0x30>)
   11c54:	2210      	movs	r2, #16
   11c56:	2100      	movs	r1, #0
   11c58:	4798      	blx	r3
   11c5a:	0032      	movs	r2, r6
   11c5c:	0029      	movs	r1, r5
   11c5e:	1c60      	adds	r0, r4, #1
   11c60:	4d06      	ldr	r5, [pc, #24]	; (11c7c <PrepareSessionKeys+0x34>)
   11c62:	47a8      	blx	r5
   11c64:	0032      	movs	r2, r6
   11c66:	0039      	movs	r1, r7
   11c68:	1d20      	adds	r0, r4, #4
   11c6a:	47a8      	blx	r5
   11c6c:	1de0      	adds	r0, r4, #7
   11c6e:	2202      	movs	r2, #2
   11c70:	4903      	ldr	r1, [pc, #12]	; (11c80 <PrepareSessionKeys+0x38>)
   11c72:	47a8      	blx	r5
   11c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11c76:	46c0      	nop			; (mov r8, r8)
   11c78:	0001836d 	.word	0x0001836d
   11c7c:	0001835b 	.word	0x0001835b
   11c80:	20003f58 	.word	0x20003f58

00011c84 <AssembleEncryptionBlock>:
   11c84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11c86:	001e      	movs	r6, r3
   11c88:	4c0b      	ldr	r4, [pc, #44]	; (11cb8 <AssembleEncryptionBlock+0x34>)
   11c8a:	0017      	movs	r7, r2
   11c8c:	4b0b      	ldr	r3, [pc, #44]	; (11cbc <AssembleEncryptionBlock+0x38>)
   11c8e:	0005      	movs	r5, r0
   11c90:	9101      	str	r1, [sp, #4]
   11c92:	2210      	movs	r2, #16
   11c94:	2100      	movs	r1, #0
   11c96:	0020      	movs	r0, r4
   11c98:	4798      	blx	r3
   11c9a:	7026      	strb	r6, [r4, #0]
   11c9c:	2604      	movs	r6, #4
   11c9e:	7165      	strb	r5, [r4, #5]
   11ca0:	0032      	movs	r2, r6
   11ca2:	4d07      	ldr	r5, [pc, #28]	; (11cc0 <AssembleEncryptionBlock+0x3c>)
   11ca4:	a908      	add	r1, sp, #32
   11ca6:	1da0      	adds	r0, r4, #6
   11ca8:	47a8      	blx	r5
   11caa:	0020      	movs	r0, r4
   11cac:	0032      	movs	r2, r6
   11cae:	a901      	add	r1, sp, #4
   11cb0:	300a      	adds	r0, #10
   11cb2:	47a8      	blx	r5
   11cb4:	73e7      	strb	r7, [r4, #15]
   11cb6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   11cb8:	200023db 	.word	0x200023db
   11cbc:	0001836d 	.word	0x0001836d
   11cc0:	0001835b 	.word	0x0001835b

00011cc4 <ConfigureRadio>:
   11cc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11cc6:	0001      	movs	r1, r0
   11cc8:	0005      	movs	r5, r0
   11cca:	4c11      	ldr	r4, [pc, #68]	; (11d10 <ConfigureRadio+0x4c>)
   11ccc:	3109      	adds	r1, #9
   11cce:	2009      	movs	r0, #9
   11cd0:	47a0      	blx	r4
   11cd2:	0029      	movs	r1, r5
   11cd4:	2001      	movs	r0, #1
   11cd6:	47a0      	blx	r4
   11cd8:	1d29      	adds	r1, r5, #4
   11cda:	200a      	movs	r0, #10
   11cdc:	47a0      	blx	r4
   11cde:	7a6b      	ldrb	r3, [r5, #9]
   11ce0:	2b01      	cmp	r3, #1
   11ce2:	d10b      	bne.n	11cfc <ConfigureRadio+0x38>
   11ce4:	0029      	movs	r1, r5
   11ce6:	2016      	movs	r0, #22
   11ce8:	310b      	adds	r1, #11
   11cea:	47a0      	blx	r4
   11cec:	0029      	movs	r1, r5
   11cee:	2007      	movs	r0, #7
   11cf0:	310a      	adds	r1, #10
   11cf2:	47a0      	blx	r4
   11cf4:	2000      	movs	r0, #0
   11cf6:	4907      	ldr	r1, [pc, #28]	; (11d14 <ConfigureRadio+0x50>)
   11cf8:	47a0      	blx	r4
   11cfa:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   11cfc:	466b      	mov	r3, sp
   11cfe:	1dd9      	adds	r1, r3, #7
   11d00:	2303      	movs	r3, #3
   11d02:	2013      	movs	r0, #19
   11d04:	700b      	strb	r3, [r1, #0]
   11d06:	47a0      	blx	r4
   11d08:	4903      	ldr	r1, [pc, #12]	; (11d18 <ConfigureRadio+0x54>)
   11d0a:	2012      	movs	r0, #18
   11d0c:	e7f4      	b.n	11cf8 <ConfigureRadio+0x34>
   11d0e:	46c0      	nop			; (mov r8, r8)
   11d10:	00007bb1 	.word	0x00007bb1
   11d14:	20003f8c 	.word	0x20003f8c
   11d18:	0001afe8 	.word	0x0001afe8

00011d1c <StopReceiveWindow2Timer>:
   11d1c:	b510      	push	{r4, lr}
   11d1e:	4c0b      	ldr	r4, [pc, #44]	; (11d4c <StopReceiveWindow2Timer+0x30>)
   11d20:	0022      	movs	r2, r4
   11d22:	32fd      	adds	r2, #253	; 0xfd
   11d24:	7812      	ldrb	r2, [r2, #0]
   11d26:	2a01      	cmp	r2, #1
   11d28:	d10e      	bne.n	11d48 <StopReceiveWindow2Timer+0x2c>
   11d2a:	0021      	movs	r1, r4
   11d2c:	200e      	movs	r0, #14
   11d2e:	3184      	adds	r1, #132	; 0x84
   11d30:	780a      	ldrb	r2, [r1, #0]
   11d32:	34ee      	adds	r4, #238	; 0xee
   11d34:	4382      	bics	r2, r0
   11d36:	700a      	strb	r2, [r1, #0]
   11d38:	7820      	ldrb	r0, [r4, #0]
   11d3a:	4b05      	ldr	r3, [pc, #20]	; (11d50 <StopReceiveWindow2Timer+0x34>)
   11d3c:	4798      	blx	r3
   11d3e:	2800      	cmp	r0, #0
   11d40:	d002      	beq.n	11d48 <StopReceiveWindow2Timer+0x2c>
   11d42:	7820      	ldrb	r0, [r4, #0]
   11d44:	4b03      	ldr	r3, [pc, #12]	; (11d54 <StopReceiveWindow2Timer+0x38>)
   11d46:	4798      	blx	r3
   11d48:	bd10      	pop	{r4, pc}
   11d4a:	46c0      	nop			; (mov r8, r8)
   11d4c:	20003e8c 	.word	0x20003e8c
   11d50:	00010b35 	.word	0x00010b35
   11d54:	00010cb5 	.word	0x00010cb5

00011d58 <LorawanLinkCheckCallback.part.1>:
   11d58:	4b07      	ldr	r3, [pc, #28]	; (11d78 <LorawanLinkCheckCallback.part.1+0x20>)
   11d5a:	b513      	push	{r0, r1, r4, lr}
   11d5c:	001a      	movs	r2, r3
   11d5e:	21fa      	movs	r1, #250	; 0xfa
   11d60:	3290      	adds	r2, #144	; 0x90
   11d62:	6812      	ldr	r2, [r2, #0]
   11d64:	0089      	lsls	r1, r1, #2
   11d66:	4351      	muls	r1, r2
   11d68:	2200      	movs	r2, #0
   11d6a:	33f0      	adds	r3, #240	; 0xf0
   11d6c:	7818      	ldrb	r0, [r3, #0]
   11d6e:	4c03      	ldr	r4, [pc, #12]	; (11d7c <LorawanLinkCheckCallback.part.1+0x24>)
   11d70:	9200      	str	r2, [sp, #0]
   11d72:	4b03      	ldr	r3, [pc, #12]	; (11d80 <LorawanLinkCheckCallback.part.1+0x28>)
   11d74:	47a0      	blx	r4
   11d76:	bd13      	pop	{r0, r1, r4, pc}
   11d78:	20003e8c 	.word	0x20003e8c
   11d7c:	0001099d 	.word	0x0001099d
   11d80:	00011d85 	.word	0x00011d85

00011d84 <LorawanLinkCheckCallback>:
   11d84:	4b17      	ldr	r3, [pc, #92]	; (11de4 <LorawanLinkCheckCallback+0x60>)
   11d86:	20a0      	movs	r0, #160	; 0xa0
   11d88:	001a      	movs	r2, r3
   11d8a:	2180      	movs	r1, #128	; 0x80
   11d8c:	b510      	push	{r4, lr}
   11d8e:	3284      	adds	r2, #132	; 0x84
   11d90:	8812      	ldrh	r2, [r2, #0]
   11d92:	0080      	lsls	r0, r0, #2
   11d94:	0089      	lsls	r1, r1, #2
   11d96:	4002      	ands	r2, r0
   11d98:	428a      	cmp	r2, r1
   11d9a:	d11c      	bne.n	11dd6 <LorawanLinkCheckCallback+0x52>
   11d9c:	001a      	movs	r2, r3
   11d9e:	32e0      	adds	r2, #224	; 0xe0
   11da0:	7810      	ldrb	r0, [r2, #0]
   11da2:	2403      	movs	r4, #3
   11da4:	2200      	movs	r2, #0
   11da6:	b2d1      	uxtb	r1, r2
   11da8:	4281      	cmp	r1, r0
   11daa:	d30d      	bcc.n	11dc8 <LorawanLinkCheckCallback+0x44>
   11dac:	d113      	bne.n	11dd6 <LorawanLinkCheckCallback+0x52>
   11dae:	2203      	movs	r2, #3
   11db0:	434a      	muls	r2, r1
   11db2:	2102      	movs	r1, #2
   11db4:	189a      	adds	r2, r3, r2
   11db6:	3299      	adds	r2, #153	; 0x99
   11db8:	7011      	strb	r1, [r2, #0]
   11dba:	280f      	cmp	r0, #15
   11dbc:	d80b      	bhi.n	11dd6 <LorawanLinkCheckCallback+0x52>
   11dbe:	001a      	movs	r2, r3
   11dc0:	3001      	adds	r0, #1
   11dc2:	32e0      	adds	r2, #224	; 0xe0
   11dc4:	7010      	strb	r0, [r2, #0]
   11dc6:	e006      	b.n	11dd6 <LorawanLinkCheckCallback+0x52>
   11dc8:	0021      	movs	r1, r4
   11dca:	3201      	adds	r2, #1
   11dcc:	4351      	muls	r1, r2
   11dce:	3196      	adds	r1, #150	; 0x96
   11dd0:	5c59      	ldrb	r1, [r3, r1]
   11dd2:	2902      	cmp	r1, #2
   11dd4:	d1e7      	bne.n	11da6 <LorawanLinkCheckCallback+0x22>
   11dd6:	3385      	adds	r3, #133	; 0x85
   11dd8:	781b      	ldrb	r3, [r3, #0]
   11dda:	079b      	lsls	r3, r3, #30
   11ddc:	d501      	bpl.n	11de2 <LorawanLinkCheckCallback+0x5e>
   11dde:	4b02      	ldr	r3, [pc, #8]	; (11de8 <LorawanLinkCheckCallback+0x64>)
   11de0:	4798      	blx	r3
   11de2:	bd10      	pop	{r4, pc}
   11de4:	20003e8c 	.word	0x20003e8c
   11de8:	00011d59 	.word	0x00011d59

00011dec <LORAWAN_Send>:
   11dec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11dee:	4c37      	ldr	r4, [pc, #220]	; (11ecc <LORAWAN_Send+0xe0>)
   11df0:	0006      	movs	r6, r0
   11df2:	0023      	movs	r3, r4
   11df4:	3384      	adds	r3, #132	; 0x84
   11df6:	781b      	ldrb	r3, [r3, #0]
   11df8:	250f      	movs	r5, #15
   11dfa:	b25a      	sxtb	r2, r3
   11dfc:	2a00      	cmp	r2, #0
   11dfe:	db0b      	blt.n	11e18 <LORAWAN_Send+0x2c>
   11e00:	3d03      	subs	r5, #3
   11e02:	065a      	lsls	r2, r3, #25
   11e04:	d408      	bmi.n	11e18 <LORAWAN_Send+0x2c>
   11e06:	3d03      	subs	r5, #3
   11e08:	07db      	lsls	r3, r3, #31
   11e0a:	d505      	bpl.n	11e18 <LORAWAN_Send+0x2c>
   11e0c:	2388      	movs	r3, #136	; 0x88
   11e0e:	009b      	lsls	r3, r3, #2
   11e10:	5ce7      	ldrb	r7, [r4, r3]
   11e12:	2f00      	cmp	r7, #0
   11e14:	d102      	bne.n	11e1c <LORAWAN_Send+0x30>
   11e16:	2511      	movs	r5, #17
   11e18:	0028      	movs	r0, r5
   11e1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   11e1c:	2800      	cmp	r0, #0
   11e1e:	d10f      	bne.n	11e40 <LORAWAN_Send+0x54>
   11e20:	2700      	movs	r7, #0
   11e22:	0023      	movs	r3, r4
   11e24:	3388      	adds	r3, #136	; 0x88
   11e26:	681b      	ldr	r3, [r3, #0]
   11e28:	3301      	adds	r3, #1
   11e2a:	d123      	bne.n	11e74 <LORAWAN_Send+0x88>
   11e2c:	2001      	movs	r0, #1
   11e2e:	3484      	adds	r4, #132	; 0x84
   11e30:	78a3      	ldrb	r3, [r4, #2]
   11e32:	210b      	movs	r1, #11
   11e34:	4303      	orrs	r3, r0
   11e36:	70a3      	strb	r3, [r4, #2]
   11e38:	4b25      	ldr	r3, [pc, #148]	; (11ed0 <LORAWAN_Send+0xe4>)
   11e3a:	4798      	blx	r3
   11e3c:	250d      	movs	r5, #13
   11e3e:	e7eb      	b.n	11e18 <LORAWAN_Send+0x2c>
   11e40:	7843      	ldrb	r3, [r0, #1]
   11e42:	7a02      	ldrb	r2, [r0, #8]
   11e44:	3b01      	subs	r3, #1
   11e46:	b2db      	uxtb	r3, r3
   11e48:	9201      	str	r2, [sp, #4]
   11e4a:	2bdf      	cmp	r3, #223	; 0xdf
   11e4c:	d902      	bls.n	11e54 <LORAWAN_Send+0x68>
   11e4e:	250a      	movs	r5, #10
   11e50:	2a00      	cmp	r2, #0
   11e52:	d1e1      	bne.n	11e18 <LORAWAN_Send+0x2c>
   11e54:	4b1f      	ldr	r3, [pc, #124]	; (11ed4 <LORAWAN_Send+0xe8>)
   11e56:	4798      	blx	r3
   11e58:	4684      	mov	ip, r0
   11e5a:	9b01      	ldr	r3, [sp, #4]
   11e5c:	9000      	str	r0, [sp, #0]
   11e5e:	4463      	add	r3, ip
   11e60:	001d      	movs	r5, r3
   11e62:	4b1d      	ldr	r3, [pc, #116]	; (11ed8 <LORAWAN_Send+0xec>)
   11e64:	4798      	blx	r3
   11e66:	4285      	cmp	r5, r0
   11e68:	ddda      	ble.n	11e20 <LORAWAN_Send+0x34>
   11e6a:	9b00      	ldr	r3, [sp, #0]
   11e6c:	250e      	movs	r5, #14
   11e6e:	2b00      	cmp	r3, #0
   11e70:	d0d2      	beq.n	11e18 <LORAWAN_Send+0x2c>
   11e72:	e7d6      	b.n	11e22 <LORAWAN_Send+0x36>
   11e74:	0023      	movs	r3, r4
   11e76:	33fd      	adds	r3, #253	; 0xfd
   11e78:	781b      	ldrb	r3, [r3, #0]
   11e7a:	2b04      	cmp	r3, #4
   11e7c:	d01d      	beq.n	11eba <LORAWAN_Send+0xce>
   11e7e:	0023      	movs	r3, r4
   11e80:	33fd      	adds	r3, #253	; 0xfd
   11e82:	781b      	ldrb	r3, [r3, #0]
   11e84:	2b01      	cmp	r3, #1
   11e86:	d105      	bne.n	11e94 <LORAWAN_Send+0xa8>
   11e88:	0023      	movs	r3, r4
   11e8a:	3384      	adds	r3, #132	; 0x84
   11e8c:	781a      	ldrb	r2, [r3, #0]
   11e8e:	230e      	movs	r3, #14
   11e90:	421a      	tst	r2, r3
   11e92:	d1c0      	bne.n	11e16 <LORAWAN_Send+0x2a>
   11e94:	0023      	movs	r3, r4
   11e96:	33fc      	adds	r3, #252	; 0xfc
   11e98:	2f00      	cmp	r7, #0
   11e9a:	d113      	bne.n	11ec4 <LORAWAN_Send+0xd8>
   11e9c:	2508      	movs	r5, #8
   11e9e:	60de      	str	r6, [r3, #12]
   11ea0:	2388      	movs	r3, #136	; 0x88
   11ea2:	2200      	movs	r2, #0
   11ea4:	009b      	lsls	r3, r3, #2
   11ea6:	54e2      	strb	r2, [r4, r3]
   11ea8:	2001      	movs	r0, #1
   11eaa:	4b0c      	ldr	r3, [pc, #48]	; (11edc <LORAWAN_Send+0xf0>)
   11eac:	4798      	blx	r3
   11eae:	2320      	movs	r3, #32
   11eb0:	3494      	adds	r4, #148	; 0x94
   11eb2:	7822      	ldrb	r2, [r4, #0]
   11eb4:	4313      	orrs	r3, r2
   11eb6:	7023      	strb	r3, [r4, #0]
   11eb8:	e7ae      	b.n	11e18 <LORAWAN_Send+0x2c>
   11eba:	4b09      	ldr	r3, [pc, #36]	; (11ee0 <LORAWAN_Send+0xf4>)
   11ebc:	4798      	blx	r3
   11ebe:	2808      	cmp	r0, #8
   11ec0:	d1a9      	bne.n	11e16 <LORAWAN_Send+0x2a>
   11ec2:	e7dc      	b.n	11e7e <LORAWAN_Send+0x92>
   11ec4:	2200      	movs	r2, #0
   11ec6:	2511      	movs	r5, #17
   11ec8:	60da      	str	r2, [r3, #12]
   11eca:	e7e9      	b.n	11ea0 <LORAWAN_Send+0xb4>
   11ecc:	20003e8c 	.word	0x20003e8c
   11ed0:	0000bbc5 	.word	0x0000bbc5
   11ed4:	000118b9 	.word	0x000118b9
   11ed8:	000118f9 	.word	0x000118f9
   11edc:	000117f1 	.word	0x000117f1
   11ee0:	00014a29 	.word	0x00014a29

00011ee4 <AutomaticReplyCallback>:
   11ee4:	b510      	push	{r4, lr}
   11ee6:	4c0d      	ldr	r4, [pc, #52]	; (11f1c <AutomaticReplyCallback+0x38>)
   11ee8:	0023      	movs	r3, r4
   11eea:	33fd      	adds	r3, #253	; 0xfd
   11eec:	781b      	ldrb	r3, [r3, #0]
   11eee:	2b01      	cmp	r3, #1
   11ef0:	d10e      	bne.n	11f10 <AutomaticReplyCallback+0x2c>
   11ef2:	0022      	movs	r2, r4
   11ef4:	210e      	movs	r1, #14
   11ef6:	3284      	adds	r2, #132	; 0x84
   11ef8:	7813      	ldrb	r3, [r2, #0]
   11efa:	438b      	bics	r3, r1
   11efc:	7013      	strb	r3, [r2, #0]
   11efe:	4b08      	ldr	r3, [pc, #32]	; (11f20 <AutomaticReplyCallback+0x3c>)
   11f00:	2000      	movs	r0, #0
   11f02:	4798      	blx	r3
   11f04:	2208      	movs	r2, #8
   11f06:	3494      	adds	r4, #148	; 0x94
   11f08:	7823      	ldrb	r3, [r4, #0]
   11f0a:	4393      	bics	r3, r2
   11f0c:	7023      	strb	r3, [r4, #0]
   11f0e:	bd10      	pop	{r4, pc}
   11f10:	2b04      	cmp	r3, #4
   11f12:	d1f4      	bne.n	11efe <AutomaticReplyCallback+0x1a>
   11f14:	4b03      	ldr	r3, [pc, #12]	; (11f24 <AutomaticReplyCallback+0x40>)
   11f16:	4798      	blx	r3
   11f18:	e7f1      	b.n	11efe <AutomaticReplyCallback+0x1a>
   11f1a:	46c0      	nop			; (mov r8, r8)
   11f1c:	20003e8c 	.word	0x20003e8c
   11f20:	00011ded 	.word	0x00011ded
   11f24:	0000877d 	.word	0x0000877d

00011f28 <LorawanLinkCheckConfigure>:
   11f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11f2a:	23fa      	movs	r3, #250	; 0xfa
   11f2c:	4c21      	ldr	r4, [pc, #132]	; (11fb4 <LorawanLinkCheckConfigure+0x8c>)
   11f2e:	009b      	lsls	r3, r3, #2
   11f30:	0022      	movs	r2, r4
   11f32:	0025      	movs	r5, r4
   11f34:	4343      	muls	r3, r0
   11f36:	3290      	adds	r2, #144	; 0x90
   11f38:	0006      	movs	r6, r0
   11f3a:	2102      	movs	r1, #2
   11f3c:	2000      	movs	r0, #0
   11f3e:	4f1e      	ldr	r7, [pc, #120]	; (11fb8 <LorawanLinkCheckConfigure+0x90>)
   11f40:	6013      	str	r3, [r2, #0]
   11f42:	3584      	adds	r5, #132	; 0x84
   11f44:	47b8      	blx	r7
   11f46:	2e00      	cmp	r6, #0
   11f48:	d127      	bne.n	11f9a <LorawanLinkCheckConfigure+0x72>
   11f4a:	0023      	movs	r3, r4
   11f4c:	33f0      	adds	r3, #240	; 0xf0
   11f4e:	7818      	ldrb	r0, [r3, #0]
   11f50:	4b1a      	ldr	r3, [pc, #104]	; (11fbc <LorawanLinkCheckConfigure+0x94>)
   11f52:	4798      	blx	r3
   11f54:	2202      	movs	r2, #2
   11f56:	786b      	ldrb	r3, [r5, #1]
   11f58:	210b      	movs	r1, #11
   11f5a:	4393      	bics	r3, r2
   11f5c:	706b      	strb	r3, [r5, #1]
   11f5e:	2001      	movs	r0, #1
   11f60:	47b8      	blx	r7
   11f62:	0023      	movs	r3, r4
   11f64:	2701      	movs	r7, #1
   11f66:	33e0      	adds	r3, #224	; 0xe0
   11f68:	781b      	ldrb	r3, [r3, #0]
   11f6a:	0030      	movs	r0, r6
   11f6c:	0032      	movs	r2, r6
   11f6e:	36ff      	adds	r6, #255	; 0xff
   11f70:	429a      	cmp	r2, r3
   11f72:	d304      	bcc.n	11f7e <LorawanLinkCheckConfigure+0x56>
   11f74:	2800      	cmp	r0, #0
   11f76:	d001      	beq.n	11f7c <LorawanLinkCheckConfigure+0x54>
   11f78:	34e0      	adds	r4, #224	; 0xe0
   11f7a:	7023      	strb	r3, [r4, #0]
   11f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11f7e:	2103      	movs	r1, #3
   11f80:	4351      	muls	r1, r2
   11f82:	1861      	adds	r1, r4, r1
   11f84:	3199      	adds	r1, #153	; 0x99
   11f86:	780d      	ldrb	r5, [r1, #0]
   11f88:	2d02      	cmp	r5, #2
   11f8a:	d103      	bne.n	11f94 <LorawanLinkCheckConfigure+0x6c>
   11f8c:	0038      	movs	r0, r7
   11f8e:	3b01      	subs	r3, #1
   11f90:	700e      	strb	r6, [r1, #0]
   11f92:	b2db      	uxtb	r3, r3
   11f94:	3201      	adds	r2, #1
   11f96:	b2d2      	uxtb	r2, r2
   11f98:	e7ea      	b.n	11f70 <LorawanLinkCheckConfigure+0x48>
   11f9a:	2302      	movs	r3, #2
   11f9c:	786a      	ldrb	r2, [r5, #1]
   11f9e:	210b      	movs	r1, #11
   11fa0:	4313      	orrs	r3, r2
   11fa2:	706b      	strb	r3, [r5, #1]
   11fa4:	2001      	movs	r0, #1
   11fa6:	47b8      	blx	r7
   11fa8:	782b      	ldrb	r3, [r5, #0]
   11faa:	07db      	lsls	r3, r3, #31
   11fac:	d5e6      	bpl.n	11f7c <LorawanLinkCheckConfigure+0x54>
   11fae:	4b04      	ldr	r3, [pc, #16]	; (11fc0 <LorawanLinkCheckConfigure+0x98>)
   11fb0:	4798      	blx	r3
   11fb2:	e7e3      	b.n	11f7c <LorawanLinkCheckConfigure+0x54>
   11fb4:	20003e8c 	.word	0x20003e8c
   11fb8:	0000bbc5 	.word	0x0000bbc5
   11fbc:	00010cb5 	.word	0x00010cb5
   11fc0:	00011d59 	.word	0x00011d59

00011fc4 <EncodeDeviceTimeReq>:
   11fc4:	4b08      	ldr	r3, [pc, #32]	; (11fe8 <EncodeDeviceTimeReq+0x24>)
   11fc6:	b510      	push	{r4, lr}
   11fc8:	001c      	movs	r4, r3
   11fca:	34e0      	adds	r4, #224	; 0xe0
   11fcc:	7822      	ldrb	r2, [r4, #0]
   11fce:	2015      	movs	r0, #21
   11fd0:	2a0f      	cmp	r2, #15
   11fd2:	d808      	bhi.n	11fe6 <EncodeDeviceTimeReq+0x22>
   11fd4:	2103      	movs	r1, #3
   11fd6:	4351      	muls	r1, r2
   11fd8:	185b      	adds	r3, r3, r1
   11fda:	210d      	movs	r1, #13
   11fdc:	3399      	adds	r3, #153	; 0x99
   11fde:	3201      	adds	r2, #1
   11fe0:	7019      	strb	r1, [r3, #0]
   11fe2:	7022      	strb	r2, [r4, #0]
   11fe4:	380d      	subs	r0, #13
   11fe6:	bd10      	pop	{r4, pc}
   11fe8:	20003e8c 	.word	0x20003e8c

00011fec <EncodeLinkCheckReq>:
   11fec:	4b08      	ldr	r3, [pc, #32]	; (12010 <EncodeLinkCheckReq+0x24>)
   11fee:	b510      	push	{r4, lr}
   11ff0:	001c      	movs	r4, r3
   11ff2:	34e0      	adds	r4, #224	; 0xe0
   11ff4:	7822      	ldrb	r2, [r4, #0]
   11ff6:	2015      	movs	r0, #21
   11ff8:	2a0f      	cmp	r2, #15
   11ffa:	d808      	bhi.n	1200e <EncodeLinkCheckReq+0x22>
   11ffc:	2103      	movs	r1, #3
   11ffe:	4351      	muls	r1, r2
   12000:	185b      	adds	r3, r3, r1
   12002:	2102      	movs	r1, #2
   12004:	3399      	adds	r3, #153	; 0x99
   12006:	3201      	adds	r2, #1
   12008:	7019      	strb	r1, [r3, #0]
   1200a:	7022      	strb	r2, [r4, #0]
   1200c:	380d      	subs	r0, #13
   1200e:	bd10      	pop	{r4, pc}
   12010:	20003e8c 	.word	0x20003e8c

00012014 <UpdateCurrentDataRate>:
   12014:	b510      	push	{r4, lr}
   12016:	4b04      	ldr	r3, [pc, #16]	; (12028 <UpdateCurrentDataRate+0x14>)
   12018:	210c      	movs	r1, #12
   1201a:	33e7      	adds	r3, #231	; 0xe7
   1201c:	7018      	strb	r0, [r3, #0]
   1201e:	2001      	movs	r0, #1
   12020:	4b02      	ldr	r3, [pc, #8]	; (1202c <UpdateCurrentDataRate+0x18>)
   12022:	4798      	blx	r3
   12024:	bd10      	pop	{r4, pc}
   12026:	46c0      	nop			; (mov r8, r8)
   12028:	20003e8c 	.word	0x20003e8c
   1202c:	0000bbc5 	.word	0x0000bbc5

00012030 <UpdateDLSettings>:
   12030:	b573      	push	{r0, r1, r4, r5, r6, lr}
   12032:	466b      	mov	r3, sp
   12034:	1dde      	adds	r6, r3, #7
   12036:	1d9c      	adds	r4, r3, #6
   12038:	71d8      	strb	r0, [r3, #7]
   1203a:	7021      	strb	r1, [r4, #0]
   1203c:	2017      	movs	r0, #23
   1203e:	0031      	movs	r1, r6
   12040:	4d0c      	ldr	r5, [pc, #48]	; (12074 <UpdateDLSettings+0x44>)
   12042:	47a8      	blx	r5
   12044:	2808      	cmp	r0, #8
   12046:	d107      	bne.n	12058 <UpdateDLSettings+0x28>
   12048:	4b0b      	ldr	r3, [pc, #44]	; (12078 <UpdateDLSettings+0x48>)
   1204a:	7832      	ldrb	r2, [r6, #0]
   1204c:	336e      	adds	r3, #110	; 0x6e
   1204e:	701a      	strb	r2, [r3, #0]
   12050:	2100      	movs	r1, #0
   12052:	3807      	subs	r0, #7
   12054:	4b09      	ldr	r3, [pc, #36]	; (1207c <UpdateDLSettings+0x4c>)
   12056:	4798      	blx	r3
   12058:	0021      	movs	r1, r4
   1205a:	2018      	movs	r0, #24
   1205c:	47a8      	blx	r5
   1205e:	2808      	cmp	r0, #8
   12060:	d107      	bne.n	12072 <UpdateDLSettings+0x42>
   12062:	2101      	movs	r1, #1
   12064:	4b04      	ldr	r3, [pc, #16]	; (12078 <UpdateDLSettings+0x48>)
   12066:	7822      	ldrb	r2, [r4, #0]
   12068:	33f7      	adds	r3, #247	; 0xf7
   1206a:	701a      	strb	r2, [r3, #0]
   1206c:	0008      	movs	r0, r1
   1206e:	4b03      	ldr	r3, [pc, #12]	; (1207c <UpdateDLSettings+0x4c>)
   12070:	4798      	blx	r3
   12072:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   12074:	00010471 	.word	0x00010471
   12078:	20003e8c 	.word	0x20003e8c
   1207c:	0000bbc5 	.word	0x0000bbc5

00012080 <UpdateTxPower>:
   12080:	b510      	push	{r4, lr}
   12082:	4b04      	ldr	r3, [pc, #16]	; (12094 <UpdateTxPower+0x14>)
   12084:	210a      	movs	r1, #10
   12086:	33e9      	adds	r3, #233	; 0xe9
   12088:	7018      	strb	r0, [r3, #0]
   1208a:	2000      	movs	r0, #0
   1208c:	4b02      	ldr	r3, [pc, #8]	; (12098 <UpdateTxPower+0x18>)
   1208e:	4798      	blx	r3
   12090:	bd10      	pop	{r4, pc}
   12092:	46c0      	nop			; (mov r8, r8)
   12094:	20003e8c 	.word	0x20003e8c
   12098:	0000bbc5 	.word	0x0000bbc5

0001209c <UpdateRetransmissionAckTimeoutState>:
   1209c:	4b10      	ldr	r3, [pc, #64]	; (120e0 <UpdateRetransmissionAckTimeoutState+0x44>)
   1209e:	b513      	push	{r0, r1, r4, lr}
   120a0:	001a      	movs	r2, r3
   120a2:	32fd      	adds	r2, #253	; 0xfd
   120a4:	7812      	ldrb	r2, [r2, #0]
   120a6:	2a01      	cmp	r2, #1
   120a8:	d108      	bne.n	120bc <UpdateRetransmissionAckTimeoutState+0x20>
   120aa:	0018      	movs	r0, r3
   120ac:	210e      	movs	r1, #14
   120ae:	3084      	adds	r0, #132	; 0x84
   120b0:	7802      	ldrb	r2, [r0, #0]
   120b2:	438a      	bics	r2, r1
   120b4:	0011      	movs	r1, r2
   120b6:	220c      	movs	r2, #12
   120b8:	430a      	orrs	r2, r1
   120ba:	7002      	strb	r2, [r0, #0]
   120bc:	001a      	movs	r2, r3
   120be:	32da      	adds	r2, #218	; 0xda
   120c0:	8811      	ldrh	r1, [r2, #0]
   120c2:	4a08      	ldr	r2, [pc, #32]	; (120e4 <UpdateRetransmissionAckTimeoutState+0x48>)
   120c4:	4c08      	ldr	r4, [pc, #32]	; (120e8 <UpdateRetransmissionAckTimeoutState+0x4c>)
   120c6:	5c9a      	ldrb	r2, [r3, r2]
   120c8:	33f1      	adds	r3, #241	; 0xf1
   120ca:	1a8a      	subs	r2, r1, r2
   120cc:	21fa      	movs	r1, #250	; 0xfa
   120ce:	0089      	lsls	r1, r1, #2
   120d0:	4351      	muls	r1, r2
   120d2:	2200      	movs	r2, #0
   120d4:	7818      	ldrb	r0, [r3, #0]
   120d6:	9200      	str	r2, [sp, #0]
   120d8:	4b04      	ldr	r3, [pc, #16]	; (120ec <UpdateRetransmissionAckTimeoutState+0x50>)
   120da:	47a0      	blx	r4
   120dc:	bd13      	pop	{r0, r1, r4, pc}
   120de:	46c0      	nop			; (mov r8, r8)
   120e0:	20003e8c 	.word	0x20003e8c
   120e4:	0000022b 	.word	0x0000022b
   120e8:	0001099d 	.word	0x0001099d
   120ec:	00012e2d 	.word	0x00012e2d

000120f0 <UpdateReceiveWindow2Parameters>:
   120f0:	4b0f      	ldr	r3, [pc, #60]	; (12130 <UpdateReceiveWindow2Parameters+0x40>)
   120f2:	b570      	push	{r4, r5, r6, lr}
   120f4:	001a      	movs	r2, r3
   120f6:	326e      	adds	r2, #110	; 0x6e
   120f8:	7011      	strb	r1, [r2, #0]
   120fa:	001a      	movs	r2, r3
   120fc:	0c04      	lsrs	r4, r0, #16
   120fe:	326a      	adds	r2, #106	; 0x6a
   12100:	8010      	strh	r0, [r2, #0]
   12102:	8054      	strh	r4, [r2, #2]
   12104:	001a      	movs	r2, r3
   12106:	25fd      	movs	r5, #253	; 0xfd
   12108:	32fd      	adds	r2, #253	; 0xfd
   1210a:	7812      	ldrb	r2, [r2, #0]
   1210c:	3a02      	subs	r2, #2
   1210e:	422a      	tst	r2, r5
   12110:	d109      	bne.n	12126 <UpdateReceiveWindow2Parameters+0x36>
   12112:	001a      	movs	r2, r3
   12114:	336f      	adds	r3, #111	; 0x6f
   12116:	3273      	adds	r2, #115	; 0x73
   12118:	7011      	strb	r1, [r2, #0]
   1211a:	7018      	strb	r0, [r3, #0]
   1211c:	0a02      	lsrs	r2, r0, #8
   1211e:	0e00      	lsrs	r0, r0, #24
   12120:	705a      	strb	r2, [r3, #1]
   12122:	709c      	strb	r4, [r3, #2]
   12124:	70d8      	strb	r0, [r3, #3]
   12126:	2100      	movs	r1, #0
   12128:	4b02      	ldr	r3, [pc, #8]	; (12134 <UpdateReceiveWindow2Parameters+0x44>)
   1212a:	2001      	movs	r0, #1
   1212c:	4798      	blx	r3
   1212e:	bd70      	pop	{r4, r5, r6, pc}
   12130:	20003e8c 	.word	0x20003e8c
   12134:	0000bbc5 	.word	0x0000bbc5

00012138 <ResetParametersForConfirmedTransmission>:
   12138:	4b0a      	ldr	r3, [pc, #40]	; (12164 <ResetParametersForConfirmedTransmission+0x2c>)
   1213a:	001a      	movs	r2, r3
   1213c:	32fd      	adds	r2, #253	; 0xfd
   1213e:	7812      	ldrb	r2, [r2, #0]
   12140:	2a01      	cmp	r2, #1
   12142:	d105      	bne.n	12150 <ResetParametersForConfirmedTransmission+0x18>
   12144:	0019      	movs	r1, r3
   12146:	200e      	movs	r0, #14
   12148:	3184      	adds	r1, #132	; 0x84
   1214a:	780a      	ldrb	r2, [r1, #0]
   1214c:	4382      	bics	r2, r0
   1214e:	700a      	strb	r2, [r1, #0]
   12150:	001a      	movs	r2, r3
   12152:	2100      	movs	r1, #0
   12154:	3394      	adds	r3, #148	; 0x94
   12156:	32e4      	adds	r2, #228	; 0xe4
   12158:	7011      	strb	r1, [r2, #0]
   1215a:	781a      	ldrb	r2, [r3, #0]
   1215c:	3101      	adds	r1, #1
   1215e:	438a      	bics	r2, r1
   12160:	701a      	strb	r2, [r3, #0]
   12162:	4770      	bx	lr
   12164:	20003e8c 	.word	0x20003e8c

00012168 <ResetParametersForUnconfirmedTransmission>:
   12168:	4b07      	ldr	r3, [pc, #28]	; (12188 <ResetParametersForUnconfirmedTransmission+0x20>)
   1216a:	001a      	movs	r2, r3
   1216c:	32fd      	adds	r2, #253	; 0xfd
   1216e:	7812      	ldrb	r2, [r2, #0]
   12170:	2a01      	cmp	r2, #1
   12172:	d105      	bne.n	12180 <ResetParametersForUnconfirmedTransmission+0x18>
   12174:	0019      	movs	r1, r3
   12176:	200e      	movs	r0, #14
   12178:	3184      	adds	r1, #132	; 0x84
   1217a:	780a      	ldrb	r2, [r1, #0]
   1217c:	4382      	bics	r2, r0
   1217e:	700a      	strb	r2, [r1, #0]
   12180:	2200      	movs	r2, #0
   12182:	33e3      	adds	r3, #227	; 0xe3
   12184:	701a      	strb	r2, [r3, #0]
   12186:	4770      	bx	lr
   12188:	20003e8c 	.word	0x20003e8c

0001218c <SetJoinFailState>:
   1218c:	b570      	push	{r4, r5, r6, lr}
   1218e:	4c15      	ldr	r4, [pc, #84]	; (121e4 <SetJoinFailState+0x58>)
   12190:	2604      	movs	r6, #4
   12192:	0025      	movs	r5, r4
   12194:	3594      	adds	r5, #148	; 0x94
   12196:	782a      	ldrb	r2, [r5, #0]
   12198:	0021      	movs	r1, r4
   1219a:	43b2      	bics	r2, r6
   1219c:	702a      	strb	r2, [r5, #0]
   1219e:	22f0      	movs	r2, #240	; 0xf0
   121a0:	3184      	adds	r1, #132	; 0x84
   121a2:	780b      	ldrb	r3, [r1, #0]
   121a4:	4013      	ands	r3, r2
   121a6:	700b      	strb	r3, [r1, #0]
   121a8:	0023      	movs	r3, r4
   121aa:	33ff      	adds	r3, #255	; 0xff
   121ac:	7f5b      	ldrb	r3, [r3, #29]
   121ae:	069b      	lsls	r3, r3, #26
   121b0:	d503      	bpl.n	121ba <SetJoinFailState+0x2e>
   121b2:	0023      	movs	r3, r4
   121b4:	2200      	movs	r2, #0
   121b6:	3380      	adds	r3, #128	; 0x80
   121b8:	701a      	strb	r2, [r3, #0]
   121ba:	490b      	ldr	r1, [pc, #44]	; (121e8 <SetJoinFailState+0x5c>)
   121bc:	794a      	ldrb	r2, [r1, #5]
   121be:	790b      	ldrb	r3, [r1, #4]
   121c0:	0212      	lsls	r2, r2, #8
   121c2:	431a      	orrs	r2, r3
   121c4:	798b      	ldrb	r3, [r1, #6]
   121c6:	041b      	lsls	r3, r3, #16
   121c8:	431a      	orrs	r2, r3
   121ca:	79cb      	ldrb	r3, [r1, #7]
   121cc:	061b      	lsls	r3, r3, #24
   121ce:	4313      	orrs	r3, r2
   121d0:	d000      	beq.n	121d4 <SetJoinFailState+0x48>
   121d2:	4798      	blx	r3
   121d4:	2300      	movs	r3, #0
   121d6:	34f9      	adds	r4, #249	; 0xf9
   121d8:	7023      	strb	r3, [r4, #0]
   121da:	210b      	movs	r1, #11
   121dc:	4b03      	ldr	r3, [pc, #12]	; (121ec <SetJoinFailState+0x60>)
   121de:	2001      	movs	r0, #1
   121e0:	4798      	blx	r3
   121e2:	bd70      	pop	{r4, r5, r6, pc}
   121e4:	20003e8c 	.word	0x20003e8c
   121e8:	200041e8 	.word	0x200041e8
   121ec:	0000bbc5 	.word	0x0000bbc5

000121f0 <ExecuteRxParamSetupReq>:
   121f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   121f2:	b085      	sub	sp, #20
   121f4:	7805      	ldrb	r5, [r0, #0]
   121f6:	0004      	movs	r4, r0
   121f8:	1c41      	adds	r1, r0, #1
   121fa:	2204      	movs	r2, #4
   121fc:	4b36      	ldr	r3, [pc, #216]	; (122d8 <ExecuteRxParamSetupReq+0xe8>)
   121fe:	a803      	add	r0, sp, #12
   12200:	4798      	blx	r3
   12202:	2264      	movs	r2, #100	; 0x64
   12204:	9b03      	ldr	r3, [sp, #12]
   12206:	a903      	add	r1, sp, #12
   12208:	021b      	lsls	r3, r3, #8
   1220a:	0a1b      	lsrs	r3, r3, #8
   1220c:	4353      	muls	r3, r2
   1220e:	9303      	str	r3, [sp, #12]
   12210:	1d23      	adds	r3, r4, #4
   12212:	9301      	str	r3, [sp, #4]
   12214:	072b      	lsls	r3, r5, #28
   12216:	0f1b      	lsrs	r3, r3, #28
   12218:	b2da      	uxtb	r2, r3
   1221a:	9200      	str	r2, [sp, #0]
   1221c:	aa02      	add	r2, sp, #8
   1221e:	1c96      	adds	r6, r2, #2
   12220:	066d      	lsls	r5, r5, #25
   12222:	7033      	strb	r3, [r6, #0]
   12224:	1cd7      	adds	r7, r2, #3
   12226:	0f6d      	lsrs	r5, r5, #29
   12228:	2001      	movs	r0, #1
   1222a:	4b2c      	ldr	r3, [pc, #176]	; (122dc <ExecuteRxParamSetupReq+0xec>)
   1222c:	703d      	strb	r5, [r7, #0]
   1222e:	4798      	blx	r3
   12230:	4c2b      	ldr	r4, [pc, #172]	; (122e0 <ExecuteRxParamSetupReq+0xf0>)
   12232:	2808      	cmp	r0, #8
   12234:	d109      	bne.n	1224a <ExecuteRxParamSetupReq+0x5a>
   12236:	0023      	movs	r3, r4
   12238:	33e0      	adds	r3, #224	; 0xe0
   1223a:	781a      	ldrb	r2, [r3, #0]
   1223c:	2303      	movs	r3, #3
   1223e:	4353      	muls	r3, r2
   12240:	18e3      	adds	r3, r4, r3
   12242:	3398      	adds	r3, #152	; 0x98
   12244:	789a      	ldrb	r2, [r3, #2]
   12246:	4310      	orrs	r0, r2
   12248:	7098      	strb	r0, [r3, #2]
   1224a:	0031      	movs	r1, r6
   1224c:	200f      	movs	r0, #15
   1224e:	4e23      	ldr	r6, [pc, #140]	; (122dc <ExecuteRxParamSetupReq+0xec>)
   12250:	47b0      	blx	r6
   12252:	2808      	cmp	r0, #8
   12254:	d10a      	bne.n	1226c <ExecuteRxParamSetupReq+0x7c>
   12256:	0023      	movs	r3, r4
   12258:	33e0      	adds	r3, #224	; 0xe0
   1225a:	781a      	ldrb	r2, [r3, #0]
   1225c:	2303      	movs	r3, #3
   1225e:	4353      	muls	r3, r2
   12260:	2210      	movs	r2, #16
   12262:	18e3      	adds	r3, r4, r3
   12264:	3398      	adds	r3, #152	; 0x98
   12266:	7899      	ldrb	r1, [r3, #2]
   12268:	430a      	orrs	r2, r1
   1226a:	709a      	strb	r2, [r3, #2]
   1226c:	0039      	movs	r1, r7
   1226e:	2018      	movs	r0, #24
   12270:	47b0      	blx	r6
   12272:	2808      	cmp	r0, #8
   12274:	d10a      	bne.n	1228c <ExecuteRxParamSetupReq+0x9c>
   12276:	0023      	movs	r3, r4
   12278:	33e0      	adds	r3, #224	; 0xe0
   1227a:	781a      	ldrb	r2, [r3, #0]
   1227c:	2303      	movs	r3, #3
   1227e:	4353      	muls	r3, r2
   12280:	2220      	movs	r2, #32
   12282:	18e3      	adds	r3, r4, r3
   12284:	3398      	adds	r3, #152	; 0x98
   12286:	7899      	ldrb	r1, [r3, #2]
   12288:	430a      	orrs	r2, r1
   1228a:	709a      	strb	r2, [r3, #2]
   1228c:	0023      	movs	r3, r4
   1228e:	33e0      	adds	r3, #224	; 0xe0
   12290:	781a      	ldrb	r2, [r3, #0]
   12292:	2303      	movs	r3, #3
   12294:	4353      	muls	r3, r2
   12296:	18e3      	adds	r3, r4, r3
   12298:	3398      	adds	r3, #152	; 0x98
   1229a:	789e      	ldrb	r6, [r3, #2]
   1229c:	06f3      	lsls	r3, r6, #27
   1229e:	d518      	bpl.n	122d2 <ExecuteRxParamSetupReq+0xe2>
   122a0:	0733      	lsls	r3, r6, #28
   122a2:	d516      	bpl.n	122d2 <ExecuteRxParamSetupReq+0xe2>
   122a4:	06b6      	lsls	r6, r6, #26
   122a6:	0ff6      	lsrs	r6, r6, #31
   122a8:	2e01      	cmp	r6, #1
   122aa:	d112      	bne.n	122d2 <ExecuteRxParamSetupReq+0xe2>
   122ac:	0023      	movs	r3, r4
   122ae:	33f7      	adds	r3, #247	; 0xf7
   122b0:	701d      	strb	r5, [r3, #0]
   122b2:	0031      	movs	r1, r6
   122b4:	0030      	movs	r0, r6
   122b6:	4d0b      	ldr	r5, [pc, #44]	; (122e4 <ExecuteRxParamSetupReq+0xf4>)
   122b8:	47a8      	blx	r5
   122ba:	9900      	ldr	r1, [sp, #0]
   122bc:	9803      	ldr	r0, [sp, #12]
   122be:	4b0a      	ldr	r3, [pc, #40]	; (122e8 <ExecuteRxParamSetupReq+0xf8>)
   122c0:	4798      	blx	r3
   122c2:	2340      	movs	r3, #64	; 0x40
   122c4:	3484      	adds	r4, #132	; 0x84
   122c6:	7862      	ldrb	r2, [r4, #1]
   122c8:	210b      	movs	r1, #11
   122ca:	4313      	orrs	r3, r2
   122cc:	7063      	strb	r3, [r4, #1]
   122ce:	0030      	movs	r0, r6
   122d0:	47a8      	blx	r5
   122d2:	9801      	ldr	r0, [sp, #4]
   122d4:	b005      	add	sp, #20
   122d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   122d8:	0001835b 	.word	0x0001835b
   122dc:	00010471 	.word	0x00010471
   122e0:	20003e8c 	.word	0x20003e8c
   122e4:	0000bbc5 	.word	0x0000bbc5
   122e8:	000120f1 	.word	0x000120f1

000122ec <ExecuteDutyCycle>:
   122ec:	b570      	push	{r4, r5, r6, lr}
   122ee:	7803      	ldrb	r3, [r0, #0]
   122f0:	1c46      	adds	r6, r0, #1
   122f2:	2b0f      	cmp	r3, #15
   122f4:	d80f      	bhi.n	12316 <ExecuteDutyCycle+0x2a>
   122f6:	4c09      	ldr	r4, [pc, #36]	; (1231c <ExecuteDutyCycle+0x30>)
   122f8:	210b      	movs	r1, #11
   122fa:	0022      	movs	r2, r4
   122fc:	2000      	movs	r0, #0
   122fe:	3298      	adds	r2, #152	; 0x98
   12300:	4d07      	ldr	r5, [pc, #28]	; (12320 <ExecuteDutyCycle+0x34>)
   12302:	7013      	strb	r3, [r2, #0]
   12304:	47a8      	blx	r5
   12306:	2320      	movs	r3, #32
   12308:	3484      	adds	r4, #132	; 0x84
   1230a:	7862      	ldrb	r2, [r4, #1]
   1230c:	210b      	movs	r1, #11
   1230e:	4313      	orrs	r3, r2
   12310:	7063      	strb	r3, [r4, #1]
   12312:	2001      	movs	r0, #1
   12314:	47a8      	blx	r5
   12316:	0030      	movs	r0, r6
   12318:	bd70      	pop	{r4, r5, r6, pc}
   1231a:	46c0      	nop			; (mov r8, r8)
   1231c:	20003e8c 	.word	0x20003e8c
   12320:	0000bbc5 	.word	0x0000bbc5

00012324 <ExecuteDlChannel>:
   12324:	b5f0      	push	{r4, r5, r6, r7, lr}
   12326:	b089      	sub	sp, #36	; 0x24
   12328:	7805      	ldrb	r5, [r0, #0]
   1232a:	ab02      	add	r3, sp, #8
   1232c:	1c41      	adds	r1, r0, #1
   1232e:	0007      	movs	r7, r0
   12330:	719d      	strb	r5, [r3, #6]
   12332:	1d9e      	adds	r6, r3, #6
   12334:	2204      	movs	r2, #4
   12336:	4b23      	ldr	r3, [pc, #140]	; (123c4 <ExecuteDlChannel+0xa0>)
   12338:	a805      	add	r0, sp, #20
   1233a:	4798      	blx	r3
   1233c:	9b05      	ldr	r3, [sp, #20]
   1233e:	a904      	add	r1, sp, #16
   12340:	021c      	lsls	r4, r3, #8
   12342:	2364      	movs	r3, #100	; 0x64
   12344:	0a24      	lsrs	r4, r4, #8
   12346:	435c      	muls	r4, r3
   12348:	1d3b      	adds	r3, r7, #4
   1234a:	9301      	str	r3, [sp, #4]
   1234c:	2301      	movs	r3, #1
   1234e:	2015      	movs	r0, #21
   12350:	704b      	strb	r3, [r1, #1]
   12352:	4b1d      	ldr	r3, [pc, #116]	; (123c8 <ExecuteDlChannel+0xa4>)
   12354:	9405      	str	r4, [sp, #20]
   12356:	700d      	strb	r5, [r1, #0]
   12358:	4798      	blx	r3
   1235a:	2808      	cmp	r0, #8
   1235c:	d12f      	bne.n	123be <ExecuteDlChannel+0x9a>
   1235e:	ab02      	add	r3, sp, #8
   12360:	1ddd      	adds	r5, r3, #7
   12362:	2300      	movs	r3, #0
   12364:	702b      	strb	r3, [r5, #0]
   12366:	7833      	ldrb	r3, [r6, #0]
   12368:	af06      	add	r7, sp, #24
   1236a:	713b      	strb	r3, [r7, #4]
   1236c:	002a      	movs	r2, r5
   1236e:	0031      	movs	r1, r6
   12370:	300e      	adds	r0, #14
   12372:	4b16      	ldr	r3, [pc, #88]	; (123cc <ExecuteDlChannel+0xa8>)
   12374:	9406      	str	r4, [sp, #24]
   12376:	4798      	blx	r3
   12378:	280a      	cmp	r0, #10
   1237a:	d00d      	beq.n	12398 <ExecuteDlChannel+0x74>
   1237c:	782a      	ldrb	r2, [r5, #0]
   1237e:	2a01      	cmp	r2, #1
   12380:	d10a      	bne.n	12398 <ExecuteDlChannel+0x74>
   12382:	4b13      	ldr	r3, [pc, #76]	; (123d0 <ExecuteDlChannel+0xac>)
   12384:	0019      	movs	r1, r3
   12386:	31e0      	adds	r1, #224	; 0xe0
   12388:	7808      	ldrb	r0, [r1, #0]
   1238a:	2103      	movs	r1, #3
   1238c:	4341      	muls	r1, r0
   1238e:	185b      	adds	r3, r3, r1
   12390:	3398      	adds	r3, #152	; 0x98
   12392:	78d9      	ldrb	r1, [r3, #3]
   12394:	430a      	orrs	r2, r1
   12396:	70da      	strb	r2, [r3, #3]
   12398:	0039      	movs	r1, r7
   1239a:	2033      	movs	r0, #51	; 0x33
   1239c:	4b0d      	ldr	r3, [pc, #52]	; (123d4 <ExecuteDlChannel+0xb0>)
   1239e:	4798      	blx	r3
   123a0:	2808      	cmp	r0, #8
   123a2:	d10c      	bne.n	123be <ExecuteDlChannel+0x9a>
   123a4:	4b0a      	ldr	r3, [pc, #40]	; (123d0 <ExecuteDlChannel+0xac>)
   123a6:	001a      	movs	r2, r3
   123a8:	32e0      	adds	r2, #224	; 0xe0
   123aa:	7811      	ldrb	r1, [r2, #0]
   123ac:	2203      	movs	r2, #3
   123ae:	434a      	muls	r2, r1
   123b0:	189b      	adds	r3, r3, r2
   123b2:	2280      	movs	r2, #128	; 0x80
   123b4:	3398      	adds	r3, #152	; 0x98
   123b6:	7899      	ldrb	r1, [r3, #2]
   123b8:	4252      	negs	r2, r2
   123ba:	430a      	orrs	r2, r1
   123bc:	709a      	strb	r2, [r3, #2]
   123be:	9801      	ldr	r0, [sp, #4]
   123c0:	b009      	add	sp, #36	; 0x24
   123c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   123c4:	0001835b 	.word	0x0001835b
   123c8:	00010471 	.word	0x00010471
   123cc:	00010455 	.word	0x00010455
   123d0:	20003e8c 	.word	0x20003e8c
   123d4:	0001048d 	.word	0x0001048d

000123d8 <ExecuteTxParamSetup>:
   123d8:	220f      	movs	r2, #15
   123da:	b513      	push	{r0, r1, r4, lr}
   123dc:	7803      	ldrb	r3, [r0, #0]
   123de:	4c0f      	ldr	r4, [pc, #60]	; (1241c <ExecuteTxParamSetup+0x44>)
   123e0:	401a      	ands	r2, r3
   123e2:	5ca2      	ldrb	r2, [r4, r2]
   123e4:	2401      	movs	r4, #1
   123e6:	a901      	add	r1, sp, #4
   123e8:	700a      	strb	r2, [r1, #0]
   123ea:	111a      	asrs	r2, r3, #4
   123ec:	115b      	asrs	r3, r3, #5
   123ee:	4023      	ands	r3, r4
   123f0:	40a3      	lsls	r3, r4
   123f2:	4022      	ands	r2, r4
   123f4:	4313      	orrs	r3, r2
   123f6:	704b      	strb	r3, [r1, #1]
   123f8:	1904      	adds	r4, r0, r4
   123fa:	4b09      	ldr	r3, [pc, #36]	; (12420 <ExecuteTxParamSetup+0x48>)
   123fc:	2034      	movs	r0, #52	; 0x34
   123fe:	4798      	blx	r3
   12400:	2808      	cmp	r0, #8
   12402:	d009      	beq.n	12418 <ExecuteTxParamSetup+0x40>
   12404:	4b07      	ldr	r3, [pc, #28]	; (12424 <ExecuteTxParamSetup+0x4c>)
   12406:	001a      	movs	r2, r3
   12408:	32e0      	adds	r2, #224	; 0xe0
   1240a:	7811      	ldrb	r1, [r2, #0]
   1240c:	2203      	movs	r2, #3
   1240e:	434a      	muls	r2, r1
   12410:	189b      	adds	r3, r3, r2
   12412:	22ff      	movs	r2, #255	; 0xff
   12414:	3399      	adds	r3, #153	; 0x99
   12416:	701a      	strb	r2, [r3, #0]
   12418:	0020      	movs	r0, r4
   1241a:	bd16      	pop	{r1, r2, r4, pc}
   1241c:	0001b009 	.word	0x0001b009
   12420:	0001048d 	.word	0x0001048d
   12424:	20003e8c 	.word	0x20003e8c

00012428 <ExecuteLinkAdr>:
   12428:	220f      	movs	r2, #15
   1242a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1242c:	0006      	movs	r6, r0
   1242e:	7803      	ldrb	r3, [r0, #0]
   12430:	b089      	sub	sp, #36	; 0x24
   12432:	401a      	ands	r2, r3
   12434:	a905      	add	r1, sp, #20
   12436:	700a      	strb	r2, [r1, #0]
   12438:	aa04      	add	r2, sp, #16
   1243a:	1d97      	adds	r7, r2, #6
   1243c:	091b      	lsrs	r3, r3, #4
   1243e:	7153      	strb	r3, [r2, #5]
   12440:	1c41      	adds	r1, r0, #1
   12442:	2202      	movs	r2, #2
   12444:	0038      	movs	r0, r7
   12446:	4b3d      	ldr	r3, [pc, #244]	; (1253c <ExecuteLinkAdr+0x114>)
   12448:	4798      	blx	r3
   1244a:	2201      	movs	r2, #1
   1244c:	1d33      	adds	r3, r6, #4
   1244e:	9303      	str	r3, [sp, #12]
   12450:	78f3      	ldrb	r3, [r6, #3]
   12452:	4c3b      	ldr	r4, [pc, #236]	; (12540 <ExecuteLinkAdr+0x118>)
   12454:	4d3b      	ldr	r5, [pc, #236]	; (12544 <ExecuteLinkAdr+0x11c>)
   12456:	065b      	lsls	r3, r3, #25
   12458:	0f5b      	lsrs	r3, r3, #29
   1245a:	9300      	str	r3, [sp, #0]
   1245c:	5d63      	ldrb	r3, [r4, r5]
   1245e:	a906      	add	r1, sp, #24
   12460:	4393      	bics	r3, r2
   12462:	1892      	adds	r2, r2, r2
   12464:	4393      	bics	r3, r2
   12466:	3202      	adds	r2, #2
   12468:	4393      	bics	r3, r2
   1246a:	5563      	strb	r3, [r4, r5]
   1246c:	883b      	ldrh	r3, [r7, #0]
   1246e:	2037      	movs	r0, #55	; 0x37
   12470:	9302      	str	r3, [sp, #8]
   12472:	466b      	mov	r3, sp
   12474:	891b      	ldrh	r3, [r3, #8]
   12476:	4f34      	ldr	r7, [pc, #208]	; (12548 <ExecuteLinkAdr+0x120>)
   12478:	804b      	strh	r3, [r1, #2]
   1247a:	466b      	mov	r3, sp
   1247c:	781b      	ldrb	r3, [r3, #0]
   1247e:	700b      	strb	r3, [r1, #0]
   12480:	47b8      	blx	r7
   12482:	2808      	cmp	r0, #8
   12484:	d117      	bne.n	124b6 <ExecuteLinkAdr+0x8e>
   12486:	466b      	mov	r3, sp
   12488:	891b      	ldrh	r3, [r3, #8]
   1248a:	a907      	add	r1, sp, #28
   1248c:	800b      	strh	r3, [r1, #0]
   1248e:	466b      	mov	r3, sp
   12490:	781b      	ldrb	r3, [r3, #0]
   12492:	3014      	adds	r0, #20
   12494:	708b      	strb	r3, [r1, #2]
   12496:	4b2d      	ldr	r3, [pc, #180]	; (1254c <ExecuteLinkAdr+0x124>)
   12498:	4798      	blx	r3
   1249a:	2201      	movs	r2, #1
   1249c:	5d63      	ldrb	r3, [r4, r5]
   1249e:	2010      	movs	r0, #16
   124a0:	4313      	orrs	r3, r2
   124a2:	5563      	strb	r3, [r4, r5]
   124a4:	ab04      	add	r3, sp, #16
   124a6:	1d59      	adds	r1, r3, #5
   124a8:	47b8      	blx	r7
   124aa:	2808      	cmp	r0, #8
   124ac:	d103      	bne.n	124b6 <ExecuteLinkAdr+0x8e>
   124ae:	2202      	movs	r2, #2
   124b0:	5d63      	ldrb	r3, [r4, r5]
   124b2:	4313      	orrs	r3, r2
   124b4:	5563      	strb	r3, [r4, r5]
   124b6:	af05      	add	r7, sp, #20
   124b8:	4b23      	ldr	r3, [pc, #140]	; (12548 <ExecuteLinkAdr+0x120>)
   124ba:	0039      	movs	r1, r7
   124bc:	201d      	movs	r0, #29
   124be:	4798      	blx	r3
   124c0:	4b1f      	ldr	r3, [pc, #124]	; (12540 <ExecuteLinkAdr+0x118>)
   124c2:	2808      	cmp	r0, #8
   124c4:	d103      	bne.n	124ce <ExecuteLinkAdr+0xa6>
   124c6:	2204      	movs	r2, #4
   124c8:	5d59      	ldrb	r1, [r3, r5]
   124ca:	430a      	orrs	r2, r1
   124cc:	555a      	strb	r2, [r3, r5]
   124ce:	5d5a      	ldrb	r2, [r3, r5]
   124d0:	43d2      	mvns	r2, r2
   124d2:	0752      	lsls	r2, r2, #29
   124d4:	d12a      	bne.n	1252c <ExecuteLinkAdr+0x104>
   124d6:	4669      	mov	r1, sp
   124d8:	4a1d      	ldr	r2, [pc, #116]	; (12550 <ExecuteLinkAdr+0x128>)
   124da:	7a09      	ldrb	r1, [r1, #8]
   124dc:	5499      	strb	r1, [r3, r2]
   124de:	9a02      	ldr	r2, [sp, #8]
   124e0:	491b      	ldr	r1, [pc, #108]	; (12550 <ExecuteLinkAdr+0x128>)
   124e2:	0a12      	lsrs	r2, r2, #8
   124e4:	1859      	adds	r1, r3, r1
   124e6:	704a      	strb	r2, [r1, #1]
   124e8:	aa04      	add	r2, sp, #16
   124ea:	3205      	adds	r2, #5
   124ec:	7812      	ldrb	r2, [r2, #0]
   124ee:	2a0f      	cmp	r2, #15
   124f0:	d101      	bne.n	124f6 <ExecuteLinkAdr+0xce>
   124f2:	33e7      	adds	r3, #231	; 0xe7
   124f4:	781a      	ldrb	r2, [r3, #0]
   124f6:	2389      	movs	r3, #137	; 0x89
   124f8:	2170      	movs	r1, #112	; 0x70
   124fa:	2070      	movs	r0, #112	; 0x70
   124fc:	009b      	lsls	r3, r3, #2
   124fe:	54e2      	strb	r2, [r4, r3]
   12500:	78f3      	ldrb	r3, [r6, #3]
   12502:	4a14      	ldr	r2, [pc, #80]	; (12554 <ExecuteLinkAdr+0x12c>)
   12504:	4019      	ands	r1, r3
   12506:	5ca3      	ldrb	r3, [r4, r2]
   12508:	4383      	bics	r3, r0
   1250a:	430b      	orrs	r3, r1
   1250c:	54a3      	strb	r3, [r4, r2]
   1250e:	78f1      	ldrb	r1, [r6, #3]
   12510:	3861      	subs	r0, #97	; 0x61
   12512:	b2db      	uxtb	r3, r3
   12514:	4001      	ands	r1, r0
   12516:	4383      	bics	r3, r0
   12518:	430b      	orrs	r3, r1
   1251a:	54a3      	strb	r3, [r4, r2]
   1251c:	783b      	ldrb	r3, [r7, #0]
   1251e:	4283      	cmp	r3, r0
   12520:	d101      	bne.n	12526 <ExecuteLinkAdr+0xfe>
   12522:	34e9      	adds	r4, #233	; 0xe9
   12524:	7823      	ldrb	r3, [r4, #0]
   12526:	4a0c      	ldr	r2, [pc, #48]	; (12558 <ExecuteLinkAdr+0x130>)
   12528:	4905      	ldr	r1, [pc, #20]	; (12540 <ExecuteLinkAdr+0x118>)
   1252a:	548b      	strb	r3, [r1, r2]
   1252c:	4904      	ldr	r1, [pc, #16]	; (12540 <ExecuteLinkAdr+0x118>)
   1252e:	4a0b      	ldr	r2, [pc, #44]	; (1255c <ExecuteLinkAdr+0x134>)
   12530:	9803      	ldr	r0, [sp, #12]
   12532:	5c8b      	ldrb	r3, [r1, r2]
   12534:	3301      	adds	r3, #1
   12536:	548b      	strb	r3, [r1, r2]
   12538:	b009      	add	sp, #36	; 0x24
   1253a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1253c:	0001835b 	.word	0x0001835b
   12540:	20003e8c 	.word	0x20003e8c
   12544:	00000223 	.word	0x00000223
   12548:	00010471 	.word	0x00010471
   1254c:	0001048d 	.word	0x0001048d
   12550:	00000227 	.word	0x00000227
   12554:	00000229 	.word	0x00000229
   12558:	00000225 	.word	0x00000225
   1255c:	00000226 	.word	0x00000226

00012560 <ExecuteDevTimeAns>:
   12560:	b510      	push	{r4, lr}
   12562:	0001      	movs	r1, r0
   12564:	0004      	movs	r4, r0
   12566:	2204      	movs	r2, #4
   12568:	4b04      	ldr	r3, [pc, #16]	; (1257c <ExecuteDevTimeAns+0x1c>)
   1256a:	4805      	ldr	r0, [pc, #20]	; (12580 <ExecuteDevTimeAns+0x20>)
   1256c:	4798      	blx	r3
   1256e:	238e      	movs	r3, #142	; 0x8e
   12570:	7921      	ldrb	r1, [r4, #4]
   12572:	4a04      	ldr	r2, [pc, #16]	; (12584 <ExecuteDevTimeAns+0x24>)
   12574:	009b      	lsls	r3, r3, #2
   12576:	1d60      	adds	r0, r4, #5
   12578:	54d1      	strb	r1, [r2, r3]
   1257a:	bd10      	pop	{r4, pc}
   1257c:	0001835b 	.word	0x0001835b
   12580:	200040c0 	.word	0x200040c0
   12584:	20003e8c 	.word	0x20003e8c

00012588 <PrepareJoinRequestFrame>:
   12588:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1258a:	2210      	movs	r2, #16
   1258c:	4d22      	ldr	r5, [pc, #136]	; (12618 <PrepareJoinRequestFrame+0x90>)
   1258e:	4b23      	ldr	r3, [pc, #140]	; (1261c <PrepareJoinRequestFrame+0x94>)
   12590:	32ff      	adds	r2, #255	; 0xff
   12592:	2100      	movs	r1, #0
   12594:	0028      	movs	r0, r5
   12596:	4798      	blx	r3
   12598:	2300      	movs	r3, #0
   1259a:	4c21      	ldr	r4, [pc, #132]	; (12620 <PrepareJoinRequestFrame+0x98>)
   1259c:	702b      	strb	r3, [r5, #0]
   1259e:	4b21      	ldr	r3, [pc, #132]	; (12624 <PrepareJoinRequestFrame+0x9c>)
   125a0:	5ce3      	ldrb	r3, [r4, r3]
   125a2:	2b00      	cmp	r3, #0
   125a4:	d006      	beq.n	125b4 <PrepareJoinRequestFrame+0x2c>
   125a6:	4920      	ldr	r1, [pc, #128]	; (12628 <PrepareJoinRequestFrame+0xa0>)
   125a8:	2006      	movs	r0, #6
   125aa:	4e20      	ldr	r6, [pc, #128]	; (1262c <PrepareJoinRequestFrame+0xa4>)
   125ac:	47b0      	blx	r6
   125ae:	4920      	ldr	r1, [pc, #128]	; (12630 <PrepareJoinRequestFrame+0xa8>)
   125b0:	2007      	movs	r0, #7
   125b2:	47b0      	blx	r6
   125b4:	2300      	movs	r3, #0
   125b6:	205c      	movs	r0, #92	; 0x5c
   125b8:	1ac1      	subs	r1, r0, r3
   125ba:	5c61      	ldrb	r1, [r4, r1]
   125bc:	18ea      	adds	r2, r5, r3
   125be:	3301      	adds	r3, #1
   125c0:	7051      	strb	r1, [r2, #1]
   125c2:	2b08      	cmp	r3, #8
   125c4:	d1f8      	bne.n	125b8 <PrepareJoinRequestFrame+0x30>
   125c6:	2300      	movs	r3, #0
   125c8:	2064      	movs	r0, #100	; 0x64
   125ca:	1ac1      	subs	r1, r0, r3
   125cc:	5c61      	ldrb	r1, [r4, r1]
   125ce:	18ea      	adds	r2, r5, r3
   125d0:	3301      	adds	r3, #1
   125d2:	7251      	strb	r1, [r2, #9]
   125d4:	2b08      	cmp	r3, #8
   125d6:	d1f8      	bne.n	125ca <PrepareJoinRequestFrame+0x42>
   125d8:	4b16      	ldr	r3, [pc, #88]	; (12634 <PrepareJoinRequestFrame+0xac>)
   125da:	4798      	blx	r3
   125dc:	4b16      	ldr	r3, [pc, #88]	; (12638 <PrepareJoinRequestFrame+0xb0>)
   125de:	4917      	ldr	r1, [pc, #92]	; (1263c <PrepareJoinRequestFrame+0xb4>)
   125e0:	4798      	blx	r3
   125e2:	34cc      	adds	r4, #204	; 0xcc
   125e4:	8021      	strh	r1, [r4, #0]
   125e6:	2202      	movs	r2, #2
   125e8:	0021      	movs	r1, r4
   125ea:	4815      	ldr	r0, [pc, #84]	; (12640 <PrepareJoinRequestFrame+0xb8>)
   125ec:	4c15      	ldr	r4, [pc, #84]	; (12644 <PrepareJoinRequestFrame+0xbc>)
   125ee:	47a0      	blx	r4
   125f0:	2313      	movs	r3, #19
   125f2:	4e15      	ldr	r6, [pc, #84]	; (12648 <PrepareJoinRequestFrame+0xc0>)
   125f4:	9300      	str	r3, [sp, #0]
   125f6:	0032      	movs	r2, r6
   125f8:	002b      	movs	r3, r5
   125fa:	2100      	movs	r1, #0
   125fc:	4d13      	ldr	r5, [pc, #76]	; (1264c <PrepareJoinRequestFrame+0xc4>)
   125fe:	4814      	ldr	r0, [pc, #80]	; (12650 <PrepareJoinRequestFrame+0xc8>)
   12600:	47a8      	blx	r5
   12602:	0031      	movs	r1, r6
   12604:	2204      	movs	r2, #4
   12606:	a803      	add	r0, sp, #12
   12608:	47a0      	blx	r4
   1260a:	2204      	movs	r2, #4
   1260c:	a903      	add	r1, sp, #12
   1260e:	4811      	ldr	r0, [pc, #68]	; (12654 <PrepareJoinRequestFrame+0xcc>)
   12610:	47a0      	blx	r4
   12612:	2017      	movs	r0, #23
   12614:	b004      	add	sp, #16
   12616:	bd70      	pop	{r4, r5, r6, pc}
   12618:	200040d4 	.word	0x200040d4
   1261c:	0001836d 	.word	0x0001836d
   12620:	20003e8c 	.word	0x20003e8c
   12624:	0000022d 	.word	0x0000022d
   12628:	20003ee1 	.word	0x20003ee1
   1262c:	000078a1 	.word	0x000078a1
   12630:	20003ee9 	.word	0x20003ee9
   12634:	00018aa1 	.word	0x00018aa1
   12638:	000153d9 	.word	0x000153d9
   1263c:	0000ffff 	.word	0x0000ffff
   12640:	200040e5 	.word	0x200040e5
   12644:	0001835b 	.word	0x0001835b
   12648:	200023db 	.word	0x200023db
   1264c:	000078a5 	.word	0x000078a5
   12650:	20003ed1 	.word	0x20003ed1
   12654:	200040e7 	.word	0x200040e7

00012658 <ConfigureRadioRx>:
   12658:	b5f0      	push	{r4, r5, r6, r7, lr}
   1265a:	b087      	sub	sp, #28
   1265c:	466b      	mov	r3, sp
   1265e:	2600      	movs	r6, #0
   12660:	1ddc      	adds	r4, r3, #7
   12662:	71d8      	strb	r0, [r3, #7]
   12664:	729e      	strb	r6, [r3, #10]
   12666:	466a      	mov	r2, sp
   12668:	2301      	movs	r3, #1
   1266a:	72d3      	strb	r3, [r2, #11]
   1266c:	2215      	movs	r2, #21
   1266e:	ad03      	add	r5, sp, #12
   12670:	4f11      	ldr	r7, [pc, #68]	; (126b8 <ConfigureRadioRx+0x60>)
   12672:	9100      	str	r1, [sp, #0]
   12674:	446a      	add	r2, sp
   12676:	0021      	movs	r1, r4
   12678:	2023      	movs	r0, #35	; 0x23
   1267a:	80ae      	strh	r6, [r5, #4]
   1267c:	47b8      	blx	r7
   1267e:	2216      	movs	r2, #22
   12680:	0021      	movs	r1, r4
   12682:	446a      	add	r2, sp
   12684:	2024      	movs	r0, #36	; 0x24
   12686:	47b8      	blx	r7
   12688:	2217      	movs	r2, #23
   1268a:	0021      	movs	r1, r4
   1268c:	446a      	add	r2, sp
   1268e:	2025      	movs	r0, #37	; 0x25
   12690:	47b8      	blx	r7
   12692:	9b00      	ldr	r3, [sp, #0]
   12694:	0028      	movs	r0, r5
   12696:	9303      	str	r3, [sp, #12]
   12698:	4b08      	ldr	r3, [pc, #32]	; (126bc <ConfigureRadioRx+0x64>)
   1269a:	80ae      	strh	r6, [r5, #4]
   1269c:	4798      	blx	r3
   1269e:	230a      	movs	r3, #10
   126a0:	446b      	add	r3, sp
   126a2:	0019      	movs	r1, r3
   126a4:	4c06      	ldr	r4, [pc, #24]	; (126c0 <ConfigureRadioRx+0x68>)
   126a6:	2014      	movs	r0, #20
   126a8:	47a0      	blx	r4
   126aa:	230b      	movs	r3, #11
   126ac:	446b      	add	r3, sp
   126ae:	0019      	movs	r1, r3
   126b0:	2006      	movs	r0, #6
   126b2:	47a0      	blx	r4
   126b4:	b007      	add	sp, #28
   126b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   126b8:	00010455 	.word	0x00010455
   126bc:	00011cc5 	.word	0x00011cc5
   126c0:	00007bb1 	.word	0x00007bb1

000126c4 <ConfigureRadioTx>:
   126c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   126c6:	2517      	movs	r5, #23
   126c8:	2300      	movs	r3, #0
   126ca:	2616      	movs	r6, #22
   126cc:	2701      	movs	r7, #1
   126ce:	b087      	sub	sp, #28
   126d0:	ac01      	add	r4, sp, #4
   126d2:	446d      	add	r5, sp
   126d4:	9001      	str	r0, [sp, #4]
   126d6:	702b      	strb	r3, [r5, #0]
   126d8:	0020      	movs	r0, r4
   126da:	4b10      	ldr	r3, [pc, #64]	; (1271c <ConfigureRadioTx+0x58>)
   126dc:	446e      	add	r6, sp
   126de:	9102      	str	r1, [sp, #8]
   126e0:	9203      	str	r2, [sp, #12]
   126e2:	7037      	strb	r7, [r6, #0]
   126e4:	4798      	blx	r3
   126e6:	79e3      	ldrb	r3, [r4, #7]
   126e8:	4c0d      	ldr	r4, [pc, #52]	; (12720 <ConfigureRadioTx+0x5c>)
   126ea:	2b00      	cmp	r3, #0
   126ec:	d00a      	beq.n	12704 <ConfigureRadioTx+0x40>
   126ee:	4b0d      	ldr	r3, [pc, #52]	; (12724 <ConfigureRadioTx+0x60>)
   126f0:	4a0d      	ldr	r2, [pc, #52]	; (12728 <ConfigureRadioTx+0x64>)
   126f2:	490e      	ldr	r1, [pc, #56]	; (1272c <ConfigureRadioTx+0x68>)
   126f4:	54d7      	strb	r7, [r2, r3]
   126f6:	200b      	movs	r0, #11
   126f8:	4b0d      	ldr	r3, [pc, #52]	; (12730 <ConfigureRadioTx+0x6c>)
   126fa:	4798      	blx	r3
   126fc:	210a      	movs	r1, #10
   126fe:	200b      	movs	r0, #11
   12700:	4469      	add	r1, sp
   12702:	47a0      	blx	r4
   12704:	a903      	add	r1, sp, #12
   12706:	2004      	movs	r0, #4
   12708:	47a0      	blx	r4
   1270a:	0031      	movs	r1, r6
   1270c:	2014      	movs	r0, #20
   1270e:	47a0      	blx	r4
   12710:	0029      	movs	r1, r5
   12712:	2006      	movs	r0, #6
   12714:	47a0      	blx	r4
   12716:	b007      	add	sp, #28
   12718:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1271a:	46c0      	nop			; (mov r8, r8)
   1271c:	00011cc5 	.word	0x00011cc5
   12720:	00007bb1 	.word	0x00007bb1
   12724:	00000222 	.word	0x00000222
   12728:	20003e8c 	.word	0x20003e8c
   1272c:	200040ad 	.word	0x200040ad
   12730:	00007a6d 	.word	0x00007a6d

00012734 <LorawanGetChAndInitiateRadioTransmit>:
   12734:	2301      	movs	r3, #1
   12736:	b530      	push	{r4, r5, lr}
   12738:	4c46      	ldr	r4, [pc, #280]	; (12854 <LorawanGetChAndInitiateRadioTransmit+0x120>)
   1273a:	b089      	sub	sp, #36	; 0x24
   1273c:	a902      	add	r1, sp, #8
   1273e:	700b      	strb	r3, [r1, #0]
   12740:	0023      	movs	r3, r4
   12742:	33e9      	adds	r3, #233	; 0xe9
   12744:	781b      	ldrb	r3, [r3, #0]
   12746:	704b      	strb	r3, [r1, #1]
   12748:	0023      	movs	r3, r4
   1274a:	33e7      	adds	r3, #231	; 0xe7
   1274c:	781b      	ldrb	r3, [r3, #0]
   1274e:	708b      	strb	r3, [r1, #2]
   12750:	0023      	movs	r3, r4
   12752:	33fd      	adds	r3, #253	; 0xfd
   12754:	781b      	ldrb	r3, [r3, #0]
   12756:	2b01      	cmp	r3, #1
   12758:	d108      	bne.n	1276c <LorawanGetChAndInitiateRadioTransmit+0x38>
   1275a:	0020      	movs	r0, r4
   1275c:	220e      	movs	r2, #14
   1275e:	3084      	adds	r0, #132	; 0x84
   12760:	7803      	ldrb	r3, [r0, #0]
   12762:	4393      	bics	r3, r2
   12764:	001a      	movs	r2, r3
   12766:	230c      	movs	r3, #12
   12768:	4313      	orrs	r3, r2
   1276a:	7003      	strb	r3, [r0, #0]
   1276c:	aa05      	add	r2, sp, #20
   1276e:	202e      	movs	r0, #46	; 0x2e
   12770:	4d39      	ldr	r5, [pc, #228]	; (12858 <LorawanGetChAndInitiateRadioTransmit+0x124>)
   12772:	47a8      	blx	r5
   12774:	0023      	movs	r3, r4
   12776:	2808      	cmp	r0, #8
   12778:	d135      	bne.n	127e6 <LorawanGetChAndInitiateRadioTransmit+0xb2>
   1277a:	33fd      	adds	r3, #253	; 0xfd
   1277c:	781b      	ldrb	r3, [r3, #0]
   1277e:	ad03      	add	r5, sp, #12
   12780:	2b04      	cmp	r3, #4
   12782:	d108      	bne.n	12796 <LorawanGetChAndInitiateRadioTransmit+0x62>
   12784:	2390      	movs	r3, #144	; 0x90
   12786:	2200      	movs	r2, #0
   12788:	009b      	lsls	r3, r3, #2
   1278a:	54e2      	strb	r2, [r4, r3]
   1278c:	2301      	movs	r3, #1
   1278e:	0028      	movs	r0, r5
   12790:	702b      	strb	r3, [r5, #0]
   12792:	4b32      	ldr	r3, [pc, #200]	; (1285c <LorawanGetChAndInitiateRadioTransmit+0x128>)
   12794:	4798      	blx	r3
   12796:	9805      	ldr	r0, [sp, #20]
   12798:	4b31      	ldr	r3, [pc, #196]	; (12860 <LorawanGetChAndInitiateRadioTransmit+0x12c>)
   1279a:	9906      	ldr	r1, [sp, #24]
   1279c:	9a07      	ldr	r2, [sp, #28]
   1279e:	4798      	blx	r3
   127a0:	0023      	movs	r3, r4
   127a2:	33ce      	adds	r3, #206	; 0xce
   127a4:	881b      	ldrh	r3, [r3, #0]
   127a6:	0028      	movs	r0, r5
   127a8:	702b      	strb	r3, [r5, #0]
   127aa:	4b2e      	ldr	r3, [pc, #184]	; (12864 <LorawanGetChAndInitiateRadioTransmit+0x130>)
   127ac:	606b      	str	r3, [r5, #4]
   127ae:	4b2e      	ldr	r3, [pc, #184]	; (12868 <LorawanGetChAndInitiateRadioTransmit+0x134>)
   127b0:	4798      	blx	r3
   127b2:	2800      	cmp	r0, #0
   127b4:	d109      	bne.n	127ca <LorawanGetChAndInitiateRadioTransmit+0x96>
   127b6:	220e      	movs	r2, #14
   127b8:	3484      	adds	r4, #132	; 0x84
   127ba:	7823      	ldrb	r3, [r4, #0]
   127bc:	4393      	bics	r3, r2
   127be:	001a      	movs	r2, r3
   127c0:	2302      	movs	r3, #2
   127c2:	4313      	orrs	r3, r2
   127c4:	7023      	strb	r3, [r4, #0]
   127c6:	b009      	add	sp, #36	; 0x24
   127c8:	bd30      	pop	{r4, r5, pc}
   127ca:	2200      	movs	r2, #0
   127cc:	4b27      	ldr	r3, [pc, #156]	; (1286c <LorawanGetChAndInitiateRadioTransmit+0x138>)
   127ce:	4928      	ldr	r1, [pc, #160]	; (12870 <LorawanGetChAndInitiateRadioTransmit+0x13c>)
   127d0:	5ce3      	ldrb	r3, [r4, r3]
   127d2:	34fc      	adds	r4, #252	; 0xfc
   127d4:	4359      	muls	r1, r3
   127d6:	4b27      	ldr	r3, [pc, #156]	; (12874 <LorawanGetChAndInitiateRadioTransmit+0x140>)
   127d8:	7820      	ldrb	r0, [r4, #0]
   127da:	18c9      	adds	r1, r1, r3
   127dc:	4b26      	ldr	r3, [pc, #152]	; (12878 <LorawanGetChAndInitiateRadioTransmit+0x144>)
   127de:	9200      	str	r2, [sp, #0]
   127e0:	4c26      	ldr	r4, [pc, #152]	; (1287c <LorawanGetChAndInitiateRadioTransmit+0x148>)
   127e2:	47a0      	blx	r4
   127e4:	e7ef      	b.n	127c6 <LorawanGetChAndInitiateRadioTransmit+0x92>
   127e6:	33ff      	adds	r3, #255	; 0xff
   127e8:	7f5b      	ldrb	r3, [r3, #29]
   127ea:	079a      	lsls	r2, r3, #30
   127ec:	d515      	bpl.n	1281a <LorawanGetChAndInitiateRadioTransmit+0xe6>
   127ee:	aa03      	add	r2, sp, #12
   127f0:	4923      	ldr	r1, [pc, #140]	; (12880 <LorawanGetChAndInitiateRadioTransmit+0x14c>)
   127f2:	2026      	movs	r0, #38	; 0x26
   127f4:	47a8      	blx	r5
   127f6:	9b03      	ldr	r3, [sp, #12]
   127f8:	1c5a      	adds	r2, r3, #1
   127fa:	d001      	beq.n	12800 <LorawanGetChAndInitiateRadioTransmit+0xcc>
   127fc:	3314      	adds	r3, #20
   127fe:	9303      	str	r3, [sp, #12]
   12800:	21fa      	movs	r1, #250	; 0xfa
   12802:	4b1a      	ldr	r3, [pc, #104]	; (1286c <LorawanGetChAndInitiateRadioTransmit+0x138>)
   12804:	9a03      	ldr	r2, [sp, #12]
   12806:	5ce3      	ldrb	r3, [r4, r3]
   12808:	0089      	lsls	r1, r1, #2
   1280a:	1ad3      	subs	r3, r2, r3
   1280c:	2200      	movs	r2, #0
   1280e:	4359      	muls	r1, r3
   12810:	34f2      	adds	r4, #242	; 0xf2
   12812:	7820      	ldrb	r0, [r4, #0]
   12814:	9200      	str	r2, [sp, #0]
   12816:	4b1b      	ldr	r3, [pc, #108]	; (12884 <LorawanGetChAndInitiateRadioTransmit+0x150>)
   12818:	e7e2      	b.n	127e0 <LorawanGetChAndInitiateRadioTransmit+0xac>
   1281a:	075b      	lsls	r3, r3, #29
   1281c:	d508      	bpl.n	12830 <LorawanGetChAndInitiateRadioTransmit+0xfc>
   1281e:	aa03      	add	r2, sp, #12
   12820:	4917      	ldr	r1, [pc, #92]	; (12880 <LorawanGetChAndInitiateRadioTransmit+0x14c>)
   12822:	2032      	movs	r0, #50	; 0x32
   12824:	47a8      	blx	r5
   12826:	9b03      	ldr	r3, [sp, #12]
   12828:	1c5a      	adds	r2, r3, #1
   1282a:	d0e9      	beq.n	12800 <LorawanGetChAndInitiateRadioTransmit+0xcc>
   1282c:	3301      	adds	r3, #1
   1282e:	e7e6      	b.n	127fe <LorawanGetChAndInitiateRadioTransmit+0xca>
   12830:	0023      	movs	r3, r4
   12832:	2201      	movs	r2, #1
   12834:	3394      	adds	r3, #148	; 0x94
   12836:	781b      	ldrb	r3, [r3, #0]
   12838:	401a      	ands	r2, r3
   1283a:	d108      	bne.n	1284e <LorawanGetChAndInitiateRadioTransmit+0x11a>
   1283c:	4b0b      	ldr	r3, [pc, #44]	; (1286c <LorawanGetChAndInitiateRadioTransmit+0x138>)
   1283e:	490c      	ldr	r1, [pc, #48]	; (12870 <LorawanGetChAndInitiateRadioTransmit+0x13c>)
   12840:	5ce3      	ldrb	r3, [r4, r3]
   12842:	34f2      	adds	r4, #242	; 0xf2
   12844:	4359      	muls	r1, r3
   12846:	4b0b      	ldr	r3, [pc, #44]	; (12874 <LorawanGetChAndInitiateRadioTransmit+0x140>)
   12848:	7820      	ldrb	r0, [r4, #0]
   1284a:	18c9      	adds	r1, r1, r3
   1284c:	e7e2      	b.n	12814 <LorawanGetChAndInitiateRadioTransmit+0xe0>
   1284e:	4b0e      	ldr	r3, [pc, #56]	; (12888 <LorawanGetChAndInitiateRadioTransmit+0x154>)
   12850:	4798      	blx	r3
   12852:	e7b8      	b.n	127c6 <LorawanGetChAndInitiateRadioTransmit+0x92>
   12854:	20003e8c 	.word	0x20003e8c
   12858:	00010455 	.word	0x00010455
   1285c:	00009135 	.word	0x00009135
   12860:	000126c5 	.word	0x000126c5
   12864:	200040e4 	.word	0x200040e4
   12868:	00008799 	.word	0x00008799
   1286c:	0000022b 	.word	0x0000022b
   12870:	fffffc18 	.word	0xfffffc18
   12874:	001e8480 	.word	0x001e8480
   12878:	0001288d 	.word	0x0001288d
   1287c:	0001099d 	.word	0x0001099d
   12880:	20003f73 	.word	0x20003f73
   12884:	00012945 	.word	0x00012945
   12888:	0001209d 	.word	0x0001209d

0001288c <TransmissionErrorCallback>:
   1288c:	b530      	push	{r4, r5, lr}
   1288e:	4c22      	ldr	r4, [pc, #136]	; (12918 <TransmissionErrorCallback+0x8c>)
   12890:	2501      	movs	r5, #1
   12892:	0023      	movs	r3, r4
   12894:	b08b      	sub	sp, #44	; 0x2c
   12896:	a903      	add	r1, sp, #12
   12898:	700d      	strb	r5, [r1, #0]
   1289a:	33e9      	adds	r3, #233	; 0xe9
   1289c:	781b      	ldrb	r3, [r3, #0]
   1289e:	aa07      	add	r2, sp, #28
   128a0:	704b      	strb	r3, [r1, #1]
   128a2:	0023      	movs	r3, r4
   128a4:	33e7      	adds	r3, #231	; 0xe7
   128a6:	781b      	ldrb	r3, [r3, #0]
   128a8:	202e      	movs	r0, #46	; 0x2e
   128aa:	708b      	strb	r3, [r1, #2]
   128ac:	4b1b      	ldr	r3, [pc, #108]	; (1291c <TransmissionErrorCallback+0x90>)
   128ae:	4798      	blx	r3
   128b0:	2808      	cmp	r0, #8
   128b2:	d121      	bne.n	128f8 <TransmissionErrorCallback+0x6c>
   128b4:	a804      	add	r0, sp, #16
   128b6:	4b1a      	ldr	r3, [pc, #104]	; (12920 <TransmissionErrorCallback+0x94>)
   128b8:	7005      	strb	r5, [r0, #0]
   128ba:	4798      	blx	r3
   128bc:	9807      	ldr	r0, [sp, #28]
   128be:	4b19      	ldr	r3, [pc, #100]	; (12924 <TransmissionErrorCallback+0x98>)
   128c0:	9908      	ldr	r1, [sp, #32]
   128c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   128c4:	4798      	blx	r3
   128c6:	0023      	movs	r3, r4
   128c8:	33ce      	adds	r3, #206	; 0xce
   128ca:	881b      	ldrh	r3, [r3, #0]
   128cc:	a805      	add	r0, sp, #20
   128ce:	7003      	strb	r3, [r0, #0]
   128d0:	4b15      	ldr	r3, [pc, #84]	; (12928 <TransmissionErrorCallback+0x9c>)
   128d2:	6043      	str	r3, [r0, #4]
   128d4:	4b15      	ldr	r3, [pc, #84]	; (1292c <TransmissionErrorCallback+0xa0>)
   128d6:	4798      	blx	r3
   128d8:	2800      	cmp	r0, #0
   128da:	d01a      	beq.n	12912 <TransmissionErrorCallback+0x86>
   128dc:	0023      	movs	r3, r4
   128de:	33fd      	adds	r3, #253	; 0xfd
   128e0:	781b      	ldrb	r3, [r3, #0]
   128e2:	42ab      	cmp	r3, r5
   128e4:	d108      	bne.n	128f8 <TransmissionErrorCallback+0x6c>
   128e6:	0021      	movs	r1, r4
   128e8:	220e      	movs	r2, #14
   128ea:	3184      	adds	r1, #132	; 0x84
   128ec:	780b      	ldrb	r3, [r1, #0]
   128ee:	4393      	bics	r3, r2
   128f0:	001a      	movs	r2, r3
   128f2:	230c      	movs	r3, #12
   128f4:	4313      	orrs	r3, r2
   128f6:	700b      	strb	r3, [r1, #0]
   128f8:	2200      	movs	r2, #0
   128fa:	4b0d      	ldr	r3, [pc, #52]	; (12930 <TransmissionErrorCallback+0xa4>)
   128fc:	490d      	ldr	r1, [pc, #52]	; (12934 <TransmissionErrorCallback+0xa8>)
   128fe:	5ce3      	ldrb	r3, [r4, r3]
   12900:	34fc      	adds	r4, #252	; 0xfc
   12902:	4359      	muls	r1, r3
   12904:	4b0c      	ldr	r3, [pc, #48]	; (12938 <TransmissionErrorCallback+0xac>)
   12906:	7820      	ldrb	r0, [r4, #0]
   12908:	18c9      	adds	r1, r1, r3
   1290a:	9200      	str	r2, [sp, #0]
   1290c:	4b0b      	ldr	r3, [pc, #44]	; (1293c <TransmissionErrorCallback+0xb0>)
   1290e:	4c0c      	ldr	r4, [pc, #48]	; (12940 <TransmissionErrorCallback+0xb4>)
   12910:	47a0      	blx	r4
   12912:	b00b      	add	sp, #44	; 0x2c
   12914:	bd30      	pop	{r4, r5, pc}
   12916:	46c0      	nop			; (mov r8, r8)
   12918:	20003e8c 	.word	0x20003e8c
   1291c:	00010455 	.word	0x00010455
   12920:	00009135 	.word	0x00009135
   12924:	000126c5 	.word	0x000126c5
   12928:	200040e4 	.word	0x200040e4
   1292c:	00008799 	.word	0x00008799
   12930:	0000022b 	.word	0x0000022b
   12934:	fffffc18 	.word	0xfffffc18
   12938:	001e8480 	.word	0x001e8480
   1293c:	0001288d 	.word	0x0001288d
   12940:	0001099d 	.word	0x0001099d

00012944 <UnconfirmedTransmissionCallback>:
   12944:	b5f0      	push	{r4, r5, r6, r7, lr}
   12946:	4c3a      	ldr	r4, [pc, #232]	; (12a30 <UnconfirmedTransmissionCallback+0xec>)
   12948:	b08b      	sub	sp, #44	; 0x2c
   1294a:	0023      	movs	r3, r4
   1294c:	33ce      	adds	r3, #206	; 0xce
   1294e:	881b      	ldrh	r3, [r3, #0]
   12950:	af05      	add	r7, sp, #20
   12952:	703b      	strb	r3, [r7, #0]
   12954:	4b37      	ldr	r3, [pc, #220]	; (12a34 <UnconfirmedTransmissionCallback+0xf0>)
   12956:	a903      	add	r1, sp, #12
   12958:	9306      	str	r3, [sp, #24]
   1295a:	2301      	movs	r3, #1
   1295c:	700b      	strb	r3, [r1, #0]
   1295e:	0023      	movs	r3, r4
   12960:	0026      	movs	r6, r4
   12962:	33e9      	adds	r3, #233	; 0xe9
   12964:	781b      	ldrb	r3, [r3, #0]
   12966:	36e7      	adds	r6, #231	; 0xe7
   12968:	704b      	strb	r3, [r1, #1]
   1296a:	7833      	ldrb	r3, [r6, #0]
   1296c:	aa07      	add	r2, sp, #28
   1296e:	202e      	movs	r0, #46	; 0x2e
   12970:	4d31      	ldr	r5, [pc, #196]	; (12a38 <UnconfirmedTransmissionCallback+0xf4>)
   12972:	708b      	strb	r3, [r1, #2]
   12974:	47a8      	blx	r5
   12976:	2808      	cmp	r0, #8
   12978:	d12b      	bne.n	129d2 <UnconfirmedTransmissionCallback+0x8e>
   1297a:	2301      	movs	r3, #1
   1297c:	a804      	add	r0, sp, #16
   1297e:	7003      	strb	r3, [r0, #0]
   12980:	4b2e      	ldr	r3, [pc, #184]	; (12a3c <UnconfirmedTransmissionCallback+0xf8>)
   12982:	4798      	blx	r3
   12984:	9807      	ldr	r0, [sp, #28]
   12986:	4b2e      	ldr	r3, [pc, #184]	; (12a40 <UnconfirmedTransmissionCallback+0xfc>)
   12988:	9908      	ldr	r1, [sp, #32]
   1298a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1298c:	4798      	blx	r3
   1298e:	0038      	movs	r0, r7
   12990:	4b2c      	ldr	r3, [pc, #176]	; (12a44 <UnconfirmedTransmissionCallback+0x100>)
   12992:	4798      	blx	r3
   12994:	2800      	cmp	r0, #0
   12996:	d01a      	beq.n	129ce <UnconfirmedTransmissionCallback+0x8a>
   12998:	0023      	movs	r3, r4
   1299a:	33fd      	adds	r3, #253	; 0xfd
   1299c:	781b      	ldrb	r3, [r3, #0]
   1299e:	2b01      	cmp	r3, #1
   129a0:	d108      	bne.n	129b4 <UnconfirmedTransmissionCallback+0x70>
   129a2:	0021      	movs	r1, r4
   129a4:	220e      	movs	r2, #14
   129a6:	3184      	adds	r1, #132	; 0x84
   129a8:	780b      	ldrb	r3, [r1, #0]
   129aa:	4393      	bics	r3, r2
   129ac:	001a      	movs	r2, r3
   129ae:	230c      	movs	r3, #12
   129b0:	4313      	orrs	r3, r2
   129b2:	700b      	strb	r3, [r1, #0]
   129b4:	2200      	movs	r2, #0
   129b6:	4b24      	ldr	r3, [pc, #144]	; (12a48 <UnconfirmedTransmissionCallback+0x104>)
   129b8:	4924      	ldr	r1, [pc, #144]	; (12a4c <UnconfirmedTransmissionCallback+0x108>)
   129ba:	5ce3      	ldrb	r3, [r4, r3]
   129bc:	34fc      	adds	r4, #252	; 0xfc
   129be:	4359      	muls	r1, r3
   129c0:	4b23      	ldr	r3, [pc, #140]	; (12a50 <UnconfirmedTransmissionCallback+0x10c>)
   129c2:	7820      	ldrb	r0, [r4, #0]
   129c4:	18c9      	adds	r1, r1, r3
   129c6:	4b23      	ldr	r3, [pc, #140]	; (12a54 <UnconfirmedTransmissionCallback+0x110>)
   129c8:	9200      	str	r2, [sp, #0]
   129ca:	4c23      	ldr	r4, [pc, #140]	; (12a58 <UnconfirmedTransmissionCallback+0x114>)
   129cc:	47a0      	blx	r4
   129ce:	b00b      	add	sp, #44	; 0x2c
   129d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   129d2:	4b22      	ldr	r3, [pc, #136]	; (12a5c <UnconfirmedTransmissionCallback+0x118>)
   129d4:	4798      	blx	r3
   129d6:	4b22      	ldr	r3, [pc, #136]	; (12a60 <UnconfirmedTransmissionCallback+0x11c>)
   129d8:	4922      	ldr	r1, [pc, #136]	; (12a64 <UnconfirmedTransmissionCallback+0x120>)
   129da:	4798      	blx	r3
   129dc:	23fa      	movs	r3, #250	; 0xfa
   129de:	009b      	lsls	r3, r3, #2
   129e0:	18c9      	adds	r1, r1, r3
   129e2:	0023      	movs	r3, r4
   129e4:	9104      	str	r1, [sp, #16]
   129e6:	33ff      	adds	r3, #255	; 0xff
   129e8:	7f5b      	ldrb	r3, [r3, #29]
   129ea:	079a      	lsls	r2, r3, #30
   129ec:	d515      	bpl.n	12a1a <UnconfirmedTransmissionCallback+0xd6>
   129ee:	aa04      	add	r2, sp, #16
   129f0:	0031      	movs	r1, r6
   129f2:	2026      	movs	r0, #38	; 0x26
   129f4:	47a8      	blx	r5
   129f6:	9b04      	ldr	r3, [sp, #16]
   129f8:	1c5a      	adds	r2, r3, #1
   129fa:	d001      	beq.n	12a00 <UnconfirmedTransmissionCallback+0xbc>
   129fc:	3314      	adds	r3, #20
   129fe:	9304      	str	r3, [sp, #16]
   12a00:	4b11      	ldr	r3, [pc, #68]	; (12a48 <UnconfirmedTransmissionCallback+0x104>)
   12a02:	9a04      	ldr	r2, [sp, #16]
   12a04:	5ce3      	ldrb	r3, [r4, r3]
   12a06:	21fa      	movs	r1, #250	; 0xfa
   12a08:	1ad3      	subs	r3, r2, r3
   12a0a:	2200      	movs	r2, #0
   12a0c:	0089      	lsls	r1, r1, #2
   12a0e:	34f2      	adds	r4, #242	; 0xf2
   12a10:	4359      	muls	r1, r3
   12a12:	7820      	ldrb	r0, [r4, #0]
   12a14:	4b14      	ldr	r3, [pc, #80]	; (12a68 <UnconfirmedTransmissionCallback+0x124>)
   12a16:	9200      	str	r2, [sp, #0]
   12a18:	e7d7      	b.n	129ca <UnconfirmedTransmissionCallback+0x86>
   12a1a:	075b      	lsls	r3, r3, #29
   12a1c:	d5f0      	bpl.n	12a00 <UnconfirmedTransmissionCallback+0xbc>
   12a1e:	aa04      	add	r2, sp, #16
   12a20:	0031      	movs	r1, r6
   12a22:	2032      	movs	r0, #50	; 0x32
   12a24:	47a8      	blx	r5
   12a26:	9b04      	ldr	r3, [sp, #16]
   12a28:	1c5a      	adds	r2, r3, #1
   12a2a:	d0e9      	beq.n	12a00 <UnconfirmedTransmissionCallback+0xbc>
   12a2c:	3301      	adds	r3, #1
   12a2e:	e7e6      	b.n	129fe <UnconfirmedTransmissionCallback+0xba>
   12a30:	20003e8c 	.word	0x20003e8c
   12a34:	200040e4 	.word	0x200040e4
   12a38:	00010455 	.word	0x00010455
   12a3c:	00009135 	.word	0x00009135
   12a40:	000126c5 	.word	0x000126c5
   12a44:	00008799 	.word	0x00008799
   12a48:	0000022b 	.word	0x0000022b
   12a4c:	fffffc18 	.word	0xfffffc18
   12a50:	001e8480 	.word	0x001e8480
   12a54:	0001288d 	.word	0x0001288d
   12a58:	0001099d 	.word	0x0001099d
   12a5c:	00018aa1 	.word	0x00018aa1
   12a60:	000153d9 	.word	0x000153d9
   12a64:	000007d1 	.word	0x000007d1
   12a68:	00012945 	.word	0x00012945

00012a6c <EncryptFRMPayload>:
   12a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   12a6e:	0007      	movs	r7, r0
   12a70:	2401      	movs	r4, #1
   12a72:	b089      	sub	sp, #36	; 0x24
   12a74:	9306      	str	r3, [sp, #24]
   12a76:	ab10      	add	r3, sp, #64	; 0x40
   12a78:	881d      	ldrh	r5, [r3, #0]
   12a7a:	090b      	lsrs	r3, r1, #4
   12a7c:	9104      	str	r1, [sp, #16]
   12a7e:	9205      	str	r2, [sp, #20]
   12a80:	9303      	str	r3, [sp, #12]
   12a82:	9b03      	ldr	r3, [sp, #12]
   12a84:	429c      	cmp	r4, r3
   12a86:	d907      	bls.n	12a98 <EncryptFRMPayload+0x2c>
   12a88:	260f      	movs	r6, #15
   12a8a:	9b04      	ldr	r3, [sp, #16]
   12a8c:	4033      	ands	r3, r6
   12a8e:	1e1e      	subs	r6, r3, #0
   12a90:	d126      	bne.n	12ae0 <EncryptFRMPayload+0x74>
   12a92:	2000      	movs	r0, #0
   12a94:	b009      	add	sp, #36	; 0x24
   12a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12a98:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12a9a:	0022      	movs	r2, r4
   12a9c:	9300      	str	r3, [sp, #0]
   12a9e:	9906      	ldr	r1, [sp, #24]
   12aa0:	2301      	movs	r3, #1
   12aa2:	9805      	ldr	r0, [sp, #20]
   12aa4:	4e1e      	ldr	r6, [pc, #120]	; (12b20 <EncryptFRMPayload+0xb4>)
   12aa6:	47b0      	blx	r6
   12aa8:	4e1e      	ldr	r6, [pc, #120]	; (12b24 <EncryptFRMPayload+0xb8>)
   12aaa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   12aac:	2101      	movs	r1, #1
   12aae:	0030      	movs	r0, r6
   12ab0:	4b1d      	ldr	r3, [pc, #116]	; (12b28 <EncryptFRMPayload+0xbc>)
   12ab2:	4798      	blx	r3
   12ab4:	2800      	cmp	r0, #0
   12ab6:	d1ed      	bne.n	12a94 <EncryptFRMPayload+0x28>
   12ab8:	1e63      	subs	r3, r4, #1
   12aba:	011b      	lsls	r3, r3, #4
   12abc:	18fb      	adds	r3, r7, r3
   12abe:	9307      	str	r3, [sp, #28]
   12ac0:	9b07      	ldr	r3, [sp, #28]
   12ac2:	182a      	adds	r2, r5, r0
   12ac4:	5c19      	ldrb	r1, [r3, r0]
   12ac6:	5d83      	ldrb	r3, [r0, r6]
   12ac8:	b292      	uxth	r2, r2
   12aca:	4059      	eors	r1, r3
   12acc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   12ace:	3001      	adds	r0, #1
   12ad0:	5499      	strb	r1, [r3, r2]
   12ad2:	2810      	cmp	r0, #16
   12ad4:	d1f4      	bne.n	12ac0 <EncryptFRMPayload+0x54>
   12ad6:	3510      	adds	r5, #16
   12ad8:	3401      	adds	r4, #1
   12ada:	b2ad      	uxth	r5, r5
   12adc:	b2e4      	uxtb	r4, r4
   12ade:	e7d0      	b.n	12a82 <EncryptFRMPayload+0x16>
   12ae0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12ae2:	0022      	movs	r2, r4
   12ae4:	9300      	str	r3, [sp, #0]
   12ae6:	9906      	ldr	r1, [sp, #24]
   12ae8:	2301      	movs	r3, #1
   12aea:	9805      	ldr	r0, [sp, #20]
   12aec:	4c0c      	ldr	r4, [pc, #48]	; (12b20 <EncryptFRMPayload+0xb4>)
   12aee:	47a0      	blx	r4
   12af0:	4c0c      	ldr	r4, [pc, #48]	; (12b24 <EncryptFRMPayload+0xb8>)
   12af2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   12af4:	2101      	movs	r1, #1
   12af6:	0020      	movs	r0, r4
   12af8:	4b0b      	ldr	r3, [pc, #44]	; (12b28 <EncryptFRMPayload+0xbc>)
   12afa:	4798      	blx	r3
   12afc:	2800      	cmp	r0, #0
   12afe:	d1c9      	bne.n	12a94 <EncryptFRMPayload+0x28>
   12b00:	9b03      	ldr	r3, [sp, #12]
   12b02:	011b      	lsls	r3, r3, #4
   12b04:	18fb      	adds	r3, r7, r3
   12b06:	5d07      	ldrb	r7, [r0, r4]
   12b08:	5c19      	ldrb	r1, [r3, r0]
   12b0a:	182a      	adds	r2, r5, r0
   12b0c:	4079      	eors	r1, r7
   12b0e:	9f11      	ldr	r7, [sp, #68]	; 0x44
   12b10:	b292      	uxth	r2, r2
   12b12:	3001      	adds	r0, #1
   12b14:	54b9      	strb	r1, [r7, r2]
   12b16:	b2c2      	uxtb	r2, r0
   12b18:	4296      	cmp	r6, r2
   12b1a:	d8f4      	bhi.n	12b06 <EncryptFRMPayload+0x9a>
   12b1c:	e7b9      	b.n	12a92 <EncryptFRMPayload+0x26>
   12b1e:	46c0      	nop			; (mov r8, r8)
   12b20:	00011c85 	.word	0x00011c85
   12b24:	200023db 	.word	0x200023db
   12b28:	0000786d 	.word	0x0000786d

00012b2c <UpdateTransactionCompleteCbParams>:
   12b2c:	2388      	movs	r3, #136	; 0x88
   12b2e:	2201      	movs	r2, #1
   12b30:	b570      	push	{r4, r5, r6, lr}
   12b32:	0001      	movs	r1, r0
   12b34:	4c13      	ldr	r4, [pc, #76]	; (12b84 <UpdateTransactionCompleteCbParams+0x58>)
   12b36:	4814      	ldr	r0, [pc, #80]	; (12b88 <UpdateTransactionCompleteCbParams+0x5c>)
   12b38:	009b      	lsls	r3, r3, #2
   12b3a:	54e2      	strb	r2, [r4, r3]
   12b3c:	7842      	ldrb	r2, [r0, #1]
   12b3e:	7803      	ldrb	r3, [r0, #0]
   12b40:	0212      	lsls	r2, r2, #8
   12b42:	431a      	orrs	r2, r3
   12b44:	7883      	ldrb	r3, [r0, #2]
   12b46:	041b      	lsls	r3, r3, #16
   12b48:	431a      	orrs	r2, r3
   12b4a:	78c3      	ldrb	r3, [r0, #3]
   12b4c:	061b      	lsls	r3, r3, #24
   12b4e:	4313      	orrs	r3, r2
   12b50:	d00e      	beq.n	12b70 <UpdateTransactionCompleteCbParams+0x44>
   12b52:	0022      	movs	r2, r4
   12b54:	2504      	movs	r5, #4
   12b56:	32fc      	adds	r2, #252	; 0xfc
   12b58:	6890      	ldr	r0, [r2, #8]
   12b5a:	4228      	tst	r0, r5
   12b5c:	d008      	beq.n	12b70 <UpdateTransactionCompleteCbParams+0x44>
   12b5e:	68d0      	ldr	r0, [r2, #12]
   12b60:	2800      	cmp	r0, #0
   12b62:	d005      	beq.n	12b70 <UpdateTransactionCompleteCbParams+0x44>
   12b64:	0022      	movs	r2, r4
   12b66:	32ff      	adds	r2, #255	; 0xff
   12b68:	7451      	strb	r1, [r2, #17]
   12b6a:	7355      	strb	r5, [r2, #13]
   12b6c:	4907      	ldr	r1, [pc, #28]	; (12b8c <UpdateTransactionCompleteCbParams+0x60>)
   12b6e:	4798      	blx	r3
   12b70:	2388      	movs	r3, #136	; 0x88
   12b72:	009b      	lsls	r3, r3, #2
   12b74:	5ce3      	ldrb	r3, [r4, r3]
   12b76:	2b00      	cmp	r3, #0
   12b78:	d002      	beq.n	12b80 <UpdateTransactionCompleteCbParams+0x54>
   12b7a:	2300      	movs	r3, #0
   12b7c:	34fc      	adds	r4, #252	; 0xfc
   12b7e:	60e3      	str	r3, [r4, #12]
   12b80:	bd70      	pop	{r4, r5, r6, pc}
   12b82:	46c0      	nop			; (mov r8, r8)
   12b84:	20003e8c 	.word	0x20003e8c
   12b88:	200041e8 	.word	0x200041e8
   12b8c:	20003f98 	.word	0x20003f98

00012b90 <UpdateRxDataAvailableCbParams>:
   12b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12b92:	4e0f      	ldr	r6, [pc, #60]	; (12bd0 <UpdateRxDataAvailableCbParams+0x40>)
   12b94:	469c      	mov	ip, r3
   12b96:	7875      	ldrb	r5, [r6, #1]
   12b98:	7834      	ldrb	r4, [r6, #0]
   12b9a:	022d      	lsls	r5, r5, #8
   12b9c:	4325      	orrs	r5, r4
   12b9e:	78b4      	ldrb	r4, [r6, #2]
   12ba0:	0424      	lsls	r4, r4, #16
   12ba2:	4325      	orrs	r5, r4
   12ba4:	78f4      	ldrb	r4, [r6, #3]
   12ba6:	0624      	lsls	r4, r4, #24
   12ba8:	432c      	orrs	r4, r5
   12baa:	d010      	beq.n	12bce <UpdateRxDataAvailableCbParams+0x3e>
   12bac:	4d09      	ldr	r5, [pc, #36]	; (12bd4 <UpdateRxDataAvailableCbParams+0x44>)
   12bae:	2702      	movs	r7, #2
   12bb0:	002e      	movs	r6, r5
   12bb2:	36fc      	adds	r6, #252	; 0xfc
   12bb4:	68b3      	ldr	r3, [r6, #8]
   12bb6:	423b      	tst	r3, r7
   12bb8:	d009      	beq.n	12bce <UpdateRxDataAvailableCbParams+0x3e>
   12bba:	4663      	mov	r3, ip
   12bbc:	35ff      	adds	r5, #255	; 0xff
   12bbe:	6170      	str	r0, [r6, #20]
   12bc0:	61b1      	str	r1, [r6, #24]
   12bc2:	736f      	strb	r7, [r5, #13]
   12bc4:	766a      	strb	r2, [r5, #25]
   12bc6:	76ab      	strb	r3, [r5, #26]
   12bc8:	4903      	ldr	r1, [pc, #12]	; (12bd8 <UpdateRxDataAvailableCbParams+0x48>)
   12bca:	68f0      	ldr	r0, [r6, #12]
   12bcc:	47a0      	blx	r4
   12bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12bd0:	200041e8 	.word	0x200041e8
   12bd4:	20003e8c 	.word	0x20003e8c
   12bd8:	20003f98 	.word	0x20003f98

00012bdc <LorawanNotifyAppOnRxdone>:
   12bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12bde:	4c25      	ldr	r4, [pc, #148]	; (12c74 <LorawanNotifyAppOnRxdone+0x98>)
   12be0:	0007      	movs	r7, r0
   12be2:	0023      	movs	r3, r4
   12be4:	33fd      	adds	r3, #253	; 0xfd
   12be6:	781b      	ldrb	r3, [r3, #0]
   12be8:	000d      	movs	r5, r1
   12bea:	0016      	movs	r6, r2
   12bec:	2b01      	cmp	r3, #1
   12bee:	d136      	bne.n	12c5e <LorawanNotifyAppOnRxdone+0x82>
   12bf0:	0022      	movs	r2, r4
   12bf2:	210e      	movs	r1, #14
   12bf4:	3284      	adds	r2, #132	; 0x84
   12bf6:	7813      	ldrb	r3, [r2, #0]
   12bf8:	438b      	bics	r3, r1
   12bfa:	7013      	strb	r3, [r2, #0]
   12bfc:	491e      	ldr	r1, [pc, #120]	; (12c78 <LorawanNotifyAppOnRxdone+0x9c>)
   12bfe:	784a      	ldrb	r2, [r1, #1]
   12c00:	780b      	ldrb	r3, [r1, #0]
   12c02:	0212      	lsls	r2, r2, #8
   12c04:	431a      	orrs	r2, r3
   12c06:	788b      	ldrb	r3, [r1, #2]
   12c08:	041b      	lsls	r3, r3, #16
   12c0a:	431a      	orrs	r2, r3
   12c0c:	78cb      	ldrb	r3, [r1, #3]
   12c0e:	061b      	lsls	r3, r3, #24
   12c10:	4313      	orrs	r3, r2
   12c12:	d023      	beq.n	12c5c <LorawanNotifyAppOnRxdone+0x80>
   12c14:	0022      	movs	r2, r4
   12c16:	2120      	movs	r1, #32
   12c18:	3294      	adds	r2, #148	; 0x94
   12c1a:	7813      	ldrb	r3, [r2, #0]
   12c1c:	438b      	bics	r3, r1
   12c1e:	7013      	strb	r3, [r2, #0]
   12c20:	0023      	movs	r3, r4
   12c22:	33fd      	adds	r3, #253	; 0xfd
   12c24:	781b      	ldrb	r3, [r3, #0]
   12c26:	7878      	ldrb	r0, [r7, #1]
   12c28:	469c      	mov	ip, r3
   12c2a:	78fa      	ldrb	r2, [r7, #3]
   12c2c:	78b9      	ldrb	r1, [r7, #2]
   12c2e:	793b      	ldrb	r3, [r7, #4]
   12c30:	4667      	mov	r7, ip
   12c32:	0209      	lsls	r1, r1, #8
   12c34:	4301      	orrs	r1, r0
   12c36:	0410      	lsls	r0, r2, #16
   12c38:	4308      	orrs	r0, r1
   12c3a:	061b      	lsls	r3, r3, #24
   12c3c:	4318      	orrs	r0, r3
   12c3e:	0032      	movs	r2, r6
   12c40:	2308      	movs	r3, #8
   12c42:	0029      	movs	r1, r5
   12c44:	2f04      	cmp	r7, #4
   12c46:	d112      	bne.n	12c6e <LorawanNotifyAppOnRxdone+0x92>
   12c48:	4d0c      	ldr	r5, [pc, #48]	; (12c7c <LorawanNotifyAppOnRxdone+0xa0>)
   12c4a:	47a8      	blx	r5
   12c4c:	2388      	movs	r3, #136	; 0x88
   12c4e:	009b      	lsls	r3, r3, #2
   12c50:	5ce3      	ldrb	r3, [r4, r3]
   12c52:	2b00      	cmp	r3, #0
   12c54:	d102      	bne.n	12c5c <LorawanNotifyAppOnRxdone+0x80>
   12c56:	2008      	movs	r0, #8
   12c58:	4b09      	ldr	r3, [pc, #36]	; (12c80 <LorawanNotifyAppOnRxdone+0xa4>)
   12c5a:	4798      	blx	r3
   12c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12c5e:	2b04      	cmp	r3, #4
   12c60:	d1cc      	bne.n	12bfc <LorawanNotifyAppOnRxdone+0x20>
   12c62:	0023      	movs	r3, r4
   12c64:	33f1      	adds	r3, #241	; 0xf1
   12c66:	7818      	ldrb	r0, [r3, #0]
   12c68:	4b06      	ldr	r3, [pc, #24]	; (12c84 <LorawanNotifyAppOnRxdone+0xa8>)
   12c6a:	4798      	blx	r3
   12c6c:	e7c6      	b.n	12bfc <LorawanNotifyAppOnRxdone+0x20>
   12c6e:	4d06      	ldr	r5, [pc, #24]	; (12c88 <LorawanNotifyAppOnRxdone+0xac>)
   12c70:	47a8      	blx	r5
   12c72:	e7eb      	b.n	12c4c <LorawanNotifyAppOnRxdone+0x70>
   12c74:	20003e8c 	.word	0x20003e8c
   12c78:	200041e8 	.word	0x200041e8
   12c7c:	00014b35 	.word	0x00014b35
   12c80:	00012b2d 	.word	0x00012b2d
   12c84:	00010cb5 	.word	0x00010cb5
   12c88:	00012b91 	.word	0x00012b91

00012c8c <LorawanSetReceiveWindow2Parameters>:
   12c8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   12c8e:	466b      	mov	r3, sp
   12c90:	1cdd      	adds	r5, r3, #3
   12c92:	9001      	str	r0, [sp, #4]
   12c94:	7029      	strb	r1, [r5, #0]
   12c96:	2001      	movs	r0, #1
   12c98:	a901      	add	r1, sp, #4
   12c9a:	4c09      	ldr	r4, [pc, #36]	; (12cc0 <LorawanSetReceiveWindow2Parameters+0x34>)
   12c9c:	47a0      	blx	r4
   12c9e:	2808      	cmp	r0, #8
   12ca0:	d002      	beq.n	12ca8 <LorawanSetReceiveWindow2Parameters+0x1c>
   12ca2:	240a      	movs	r4, #10
   12ca4:	0020      	movs	r0, r4
   12ca6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   12ca8:	0029      	movs	r1, r5
   12caa:	200f      	movs	r0, #15
   12cac:	47a0      	blx	r4
   12cae:	0004      	movs	r4, r0
   12cb0:	2808      	cmp	r0, #8
   12cb2:	d1f6      	bne.n	12ca2 <LorawanSetReceiveWindow2Parameters+0x16>
   12cb4:	7829      	ldrb	r1, [r5, #0]
   12cb6:	9801      	ldr	r0, [sp, #4]
   12cb8:	4b02      	ldr	r3, [pc, #8]	; (12cc4 <LorawanSetReceiveWindow2Parameters+0x38>)
   12cba:	4798      	blx	r3
   12cbc:	e7f2      	b.n	12ca4 <LorawanSetReceiveWindow2Parameters+0x18>
   12cbe:	46c0      	nop			; (mov r8, r8)
   12cc0:	00010471 	.word	0x00010471
   12cc4:	000120f1 	.word	0x000120f1

00012cc8 <LorawanSetReceiveWindowCParameters>:
   12cc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   12cca:	466b      	mov	r3, sp
   12ccc:	1cdc      	adds	r4, r3, #3
   12cce:	9001      	str	r0, [sp, #4]
   12cd0:	7021      	strb	r1, [r4, #0]
   12cd2:	2001      	movs	r0, #1
   12cd4:	a901      	add	r1, sp, #4
   12cd6:	4d0d      	ldr	r5, [pc, #52]	; (12d0c <LorawanSetReceiveWindowCParameters+0x44>)
   12cd8:	47a8      	blx	r5
   12cda:	2808      	cmp	r0, #8
   12cdc:	d001      	beq.n	12ce2 <LorawanSetReceiveWindowCParameters+0x1a>
   12cde:	200a      	movs	r0, #10
   12ce0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   12ce2:	0021      	movs	r1, r4
   12ce4:	200f      	movs	r0, #15
   12ce6:	47a8      	blx	r5
   12ce8:	2808      	cmp	r0, #8
   12cea:	d1f8      	bne.n	12cde <LorawanSetReceiveWindowCParameters+0x16>
   12cec:	4b08      	ldr	r3, [pc, #32]	; (12d10 <LorawanSetReceiveWindowCParameters+0x48>)
   12cee:	9a01      	ldr	r2, [sp, #4]
   12cf0:	0019      	movs	r1, r3
   12cf2:	7824      	ldrb	r4, [r4, #0]
   12cf4:	3173      	adds	r1, #115	; 0x73
   12cf6:	336f      	adds	r3, #111	; 0x6f
   12cf8:	700c      	strb	r4, [r1, #0]
   12cfa:	0a11      	lsrs	r1, r2, #8
   12cfc:	701a      	strb	r2, [r3, #0]
   12cfe:	7059      	strb	r1, [r3, #1]
   12d00:	0c11      	lsrs	r1, r2, #16
   12d02:	0e12      	lsrs	r2, r2, #24
   12d04:	7099      	strb	r1, [r3, #2]
   12d06:	70da      	strb	r2, [r3, #3]
   12d08:	e7ea      	b.n	12ce0 <LorawanSetReceiveWindowCParameters+0x18>
   12d0a:	46c0      	nop			; (mov r8, r8)
   12d0c:	00010471 	.word	0x00010471
   12d10:	20003e8c 	.word	0x20003e8c

00012d14 <LorawanSetFrequency>:
   12d14:	b507      	push	{r0, r1, r2, lr}
   12d16:	466b      	mov	r3, sp
   12d18:	9100      	str	r1, [sp, #0]
   12d1a:	7118      	strb	r0, [r3, #4]
   12d1c:	4669      	mov	r1, sp
   12d1e:	2000      	movs	r0, #0
   12d20:	4b01      	ldr	r3, [pc, #4]	; (12d28 <LorawanSetFrequency+0x14>)
   12d22:	4798      	blx	r3
   12d24:	bd0e      	pop	{r1, r2, r3, pc}
   12d26:	46c0      	nop			; (mov r8, r8)
   12d28:	0001048d 	.word	0x0001048d

00012d2c <LorawanCheckAndDoRetryOnTimeout>:
   12d2c:	b513      	push	{r0, r1, r4, lr}
   12d2e:	4c33      	ldr	r4, [pc, #204]	; (12dfc <LorawanCheckAndDoRetryOnTimeout+0xd0>)
   12d30:	0023      	movs	r3, r4
   12d32:	3394      	adds	r3, #148	; 0x94
   12d34:	781b      	ldrb	r3, [r3, #0]
   12d36:	0022      	movs	r2, r4
   12d38:	07db      	lsls	r3, r3, #31
   12d3a:	d54b      	bpl.n	12dd4 <LorawanCheckAndDoRetryOnTimeout+0xa8>
   12d3c:	0023      	movs	r3, r4
   12d3e:	32e4      	adds	r2, #228	; 0xe4
   12d40:	33e2      	adds	r3, #226	; 0xe2
   12d42:	7812      	ldrb	r2, [r2, #0]
   12d44:	781b      	ldrb	r3, [r3, #0]
   12d46:	429a      	cmp	r2, r3
   12d48:	d836      	bhi.n	12db8 <LorawanCheckAndDoRetryOnTimeout+0x8c>
   12d4a:	4b2d      	ldr	r3, [pc, #180]	; (12e00 <LorawanCheckAndDoRetryOnTimeout+0xd4>)
   12d4c:	5ce3      	ldrb	r3, [r4, r3]
   12d4e:	2b00      	cmp	r3, #0
   12d50:	d032      	beq.n	12db8 <LorawanCheckAndDoRetryOnTimeout+0x8c>
   12d52:	0023      	movs	r3, r4
   12d54:	33fd      	adds	r3, #253	; 0xfd
   12d56:	781b      	ldrb	r3, [r3, #0]
   12d58:	2b01      	cmp	r3, #1
   12d5a:	d119      	bne.n	12d90 <LorawanCheckAndDoRetryOnTimeout+0x64>
   12d5c:	0021      	movs	r1, r4
   12d5e:	220e      	movs	r2, #14
   12d60:	3184      	adds	r1, #132	; 0x84
   12d62:	780b      	ldrb	r3, [r1, #0]
   12d64:	4393      	bics	r3, r2
   12d66:	001a      	movs	r2, r3
   12d68:	230c      	movs	r3, #12
   12d6a:	4313      	orrs	r3, r2
   12d6c:	700b      	strb	r3, [r1, #0]
   12d6e:	0023      	movs	r3, r4
   12d70:	33da      	adds	r3, #218	; 0xda
   12d72:	8819      	ldrh	r1, [r3, #0]
   12d74:	4b23      	ldr	r3, [pc, #140]	; (12e04 <LorawanCheckAndDoRetryOnTimeout+0xd8>)
   12d76:	2200      	movs	r2, #0
   12d78:	5ce3      	ldrb	r3, [r4, r3]
   12d7a:	34f1      	adds	r4, #241	; 0xf1
   12d7c:	1acb      	subs	r3, r1, r3
   12d7e:	21fa      	movs	r1, #250	; 0xfa
   12d80:	0089      	lsls	r1, r1, #2
   12d82:	7820      	ldrb	r0, [r4, #0]
   12d84:	4359      	muls	r1, r3
   12d86:	9200      	str	r2, [sp, #0]
   12d88:	4b1f      	ldr	r3, [pc, #124]	; (12e08 <LorawanCheckAndDoRetryOnTimeout+0xdc>)
   12d8a:	4c20      	ldr	r4, [pc, #128]	; (12e0c <LorawanCheckAndDoRetryOnTimeout+0xe0>)
   12d8c:	47a0      	blx	r4
   12d8e:	bd13      	pop	{r0, r1, r4, pc}
   12d90:	2b04      	cmp	r3, #4
   12d92:	d1fc      	bne.n	12d8e <LorawanCheckAndDoRetryOnTimeout+0x62>
   12d94:	4b1e      	ldr	r3, [pc, #120]	; (12e10 <LorawanCheckAndDoRetryOnTimeout+0xe4>)
   12d96:	4798      	blx	r3
   12d98:	34ce      	adds	r4, #206	; 0xce
   12d9a:	300d      	adds	r0, #13
   12d9c:	8823      	ldrh	r3, [r4, #0]
   12d9e:	b280      	uxth	r0, r0
   12da0:	4283      	cmp	r3, r0
   12da2:	d802      	bhi.n	12daa <LorawanCheckAndDoRetryOnTimeout+0x7e>
   12da4:	4b1b      	ldr	r3, [pc, #108]	; (12e14 <LorawanCheckAndDoRetryOnTimeout+0xe8>)
   12da6:	4798      	blx	r3
   12da8:	e7f1      	b.n	12d8e <LorawanCheckAndDoRetryOnTimeout+0x62>
   12daa:	200e      	movs	r0, #14
   12dac:	4b1a      	ldr	r3, [pc, #104]	; (12e18 <LorawanCheckAndDoRetryOnTimeout+0xec>)
   12dae:	4798      	blx	r3
   12db0:	4b1a      	ldr	r3, [pc, #104]	; (12e1c <LorawanCheckAndDoRetryOnTimeout+0xf0>)
   12db2:	4798      	blx	r3
   12db4:	4b1a      	ldr	r3, [pc, #104]	; (12e20 <LorawanCheckAndDoRetryOnTimeout+0xf4>)
   12db6:	e7f6      	b.n	12da6 <LorawanCheckAndDoRetryOnTimeout+0x7a>
   12db8:	2012      	movs	r0, #18
   12dba:	4b17      	ldr	r3, [pc, #92]	; (12e18 <LorawanCheckAndDoRetryOnTimeout+0xec>)
   12dbc:	4798      	blx	r3
   12dbe:	4b17      	ldr	r3, [pc, #92]	; (12e1c <LorawanCheckAndDoRetryOnTimeout+0xf0>)
   12dc0:	4798      	blx	r3
   12dc2:	34fd      	adds	r4, #253	; 0xfd
   12dc4:	4b16      	ldr	r3, [pc, #88]	; (12e20 <LorawanCheckAndDoRetryOnTimeout+0xf4>)
   12dc6:	4798      	blx	r3
   12dc8:	7823      	ldrb	r3, [r4, #0]
   12dca:	2b04      	cmp	r3, #4
   12dcc:	d1df      	bne.n	12d8e <LorawanCheckAndDoRetryOnTimeout+0x62>
   12dce:	4b15      	ldr	r3, [pc, #84]	; (12e24 <LorawanCheckAndDoRetryOnTimeout+0xf8>)
   12dd0:	4798      	blx	r3
   12dd2:	e7dc      	b.n	12d8e <LorawanCheckAndDoRetryOnTimeout+0x62>
   12dd4:	0023      	movs	r3, r4
   12dd6:	32e3      	adds	r2, #227	; 0xe3
   12dd8:	33e1      	adds	r3, #225	; 0xe1
   12dda:	7812      	ldrb	r2, [r2, #0]
   12ddc:	781b      	ldrb	r3, [r3, #0]
   12dde:	429a      	cmp	r2, r3
   12de0:	d803      	bhi.n	12dea <LorawanCheckAndDoRetryOnTimeout+0xbe>
   12de2:	4b07      	ldr	r3, [pc, #28]	; (12e00 <LorawanCheckAndDoRetryOnTimeout+0xd4>)
   12de4:	5ce3      	ldrb	r3, [r4, r3]
   12de6:	2b00      	cmp	r3, #0
   12de8:	d1dc      	bne.n	12da4 <LorawanCheckAndDoRetryOnTimeout+0x78>
   12dea:	4b0f      	ldr	r3, [pc, #60]	; (12e28 <LorawanCheckAndDoRetryOnTimeout+0xfc>)
   12dec:	4798      	blx	r3
   12dee:	4b0c      	ldr	r3, [pc, #48]	; (12e20 <LorawanCheckAndDoRetryOnTimeout+0xf4>)
   12df0:	4798      	blx	r3
   12df2:	2008      	movs	r0, #8
   12df4:	4b08      	ldr	r3, [pc, #32]	; (12e18 <LorawanCheckAndDoRetryOnTimeout+0xec>)
   12df6:	4798      	blx	r3
   12df8:	e7c9      	b.n	12d8e <LorawanCheckAndDoRetryOnTimeout+0x62>
   12dfa:	46c0      	nop			; (mov r8, r8)
   12dfc:	20003e8c 	.word	0x20003e8c
   12e00:	0000022a 	.word	0x0000022a
   12e04:	0000022b 	.word	0x0000022b
   12e08:	00012e2d 	.word	0x00012e2d
   12e0c:	0001099d 	.word	0x0001099d
   12e10:	000118f9 	.word	0x000118f9
   12e14:	00012735 	.word	0x00012735
   12e18:	00012b2d 	.word	0x00012b2d
   12e1c:	00012139 	.word	0x00012139
   12e20:	00011875 	.word	0x00011875
   12e24:	0000877d 	.word	0x0000877d
   12e28:	00012169 	.word	0x00012169

00012e2c <AckRetransmissionCallback>:
   12e2c:	b510      	push	{r4, lr}
   12e2e:	4c1c      	ldr	r4, [pc, #112]	; (12ea0 <AckRetransmissionCallback+0x74>)
   12e30:	0023      	movs	r3, r4
   12e32:	3384      	adds	r3, #132	; 0x84
   12e34:	781b      	ldrb	r3, [r3, #0]
   12e36:	2b7f      	cmp	r3, #127	; 0x7f
   12e38:	d82d      	bhi.n	12e96 <AckRetransmissionCallback+0x6a>
   12e3a:	0023      	movs	r3, r4
   12e3c:	33fd      	adds	r3, #253	; 0xfd
   12e3e:	781b      	ldrb	r3, [r3, #0]
   12e40:	2b04      	cmp	r3, #4
   12e42:	d102      	bne.n	12e4a <AckRetransmissionCallback+0x1e>
   12e44:	4b17      	ldr	r3, [pc, #92]	; (12ea4 <AckRetransmissionCallback+0x78>)
   12e46:	4798      	blx	r3
   12e48:	e01e      	b.n	12e88 <AckRetransmissionCallback+0x5c>
   12e4a:	2b01      	cmp	r3, #1
   12e4c:	d11c      	bne.n	12e88 <AckRetransmissionCallback+0x5c>
   12e4e:	0022      	movs	r2, r4
   12e50:	0023      	movs	r3, r4
   12e52:	32e4      	adds	r2, #228	; 0xe4
   12e54:	33e2      	adds	r3, #226	; 0xe2
   12e56:	7812      	ldrb	r2, [r2, #0]
   12e58:	781b      	ldrb	r3, [r3, #0]
   12e5a:	429a      	cmp	r2, r3
   12e5c:	d815      	bhi.n	12e8a <AckRetransmissionCallback+0x5e>
   12e5e:	4b12      	ldr	r3, [pc, #72]	; (12ea8 <AckRetransmissionCallback+0x7c>)
   12e60:	5ce3      	ldrb	r3, [r4, r3]
   12e62:	2b00      	cmp	r3, #0
   12e64:	d011      	beq.n	12e8a <AckRetransmissionCallback+0x5e>
   12e66:	4b11      	ldr	r3, [pc, #68]	; (12eac <AckRetransmissionCallback+0x80>)
   12e68:	4798      	blx	r3
   12e6a:	34ce      	adds	r4, #206	; 0xce
   12e6c:	300d      	adds	r0, #13
   12e6e:	8823      	ldrh	r3, [r4, #0]
   12e70:	b280      	uxth	r0, r0
   12e72:	4283      	cmp	r3, r0
   12e74:	d801      	bhi.n	12e7a <AckRetransmissionCallback+0x4e>
   12e76:	4b0e      	ldr	r3, [pc, #56]	; (12eb0 <AckRetransmissionCallback+0x84>)
   12e78:	e7e5      	b.n	12e46 <AckRetransmissionCallback+0x1a>
   12e7a:	4b0e      	ldr	r3, [pc, #56]	; (12eb4 <AckRetransmissionCallback+0x88>)
   12e7c:	4798      	blx	r3
   12e7e:	4b0e      	ldr	r3, [pc, #56]	; (12eb8 <AckRetransmissionCallback+0x8c>)
   12e80:	4798      	blx	r3
   12e82:	200e      	movs	r0, #14
   12e84:	4b0d      	ldr	r3, [pc, #52]	; (12ebc <AckRetransmissionCallback+0x90>)
   12e86:	4798      	blx	r3
   12e88:	bd10      	pop	{r4, pc}
   12e8a:	4b0a      	ldr	r3, [pc, #40]	; (12eb4 <AckRetransmissionCallback+0x88>)
   12e8c:	4798      	blx	r3
   12e8e:	4b0a      	ldr	r3, [pc, #40]	; (12eb8 <AckRetransmissionCallback+0x8c>)
   12e90:	4798      	blx	r3
   12e92:	2012      	movs	r0, #18
   12e94:	e7f6      	b.n	12e84 <AckRetransmissionCallback+0x58>
   12e96:	4b07      	ldr	r3, [pc, #28]	; (12eb4 <AckRetransmissionCallback+0x88>)
   12e98:	4798      	blx	r3
   12e9a:	4b07      	ldr	r3, [pc, #28]	; (12eb8 <AckRetransmissionCallback+0x8c>)
   12e9c:	e7d3      	b.n	12e46 <AckRetransmissionCallback+0x1a>
   12e9e:	46c0      	nop			; (mov r8, r8)
   12ea0:	20003e8c 	.word	0x20003e8c
   12ea4:	00012d2d 	.word	0x00012d2d
   12ea8:	0000022a 	.word	0x0000022a
   12eac:	000118f9 	.word	0x000118f9
   12eb0:	00012735 	.word	0x00012735
   12eb4:	00012139 	.word	0x00012139
   12eb8:	00011875 	.word	0x00011875
   12ebc:	00012b2d 	.word	0x00012b2d

00012ec0 <LORAWAN_RxTimeout>:
   12ec0:	4b24      	ldr	r3, [pc, #144]	; (12f54 <LORAWAN_RxTimeout+0x94>)
   12ec2:	b510      	push	{r4, lr}
   12ec4:	001a      	movs	r2, r3
   12ec6:	3284      	adds	r2, #132	; 0x84
   12ec8:	7812      	ldrb	r2, [r2, #0]
   12eca:	b251      	sxtb	r1, r2
   12ecc:	2900      	cmp	r1, #0
   12ece:	db27      	blt.n	12f20 <LORAWAN_RxTimeout+0x60>
   12ed0:	0019      	movs	r1, r3
   12ed2:	31fd      	adds	r1, #253	; 0xfd
   12ed4:	7809      	ldrb	r1, [r1, #0]
   12ed6:	2904      	cmp	r1, #4
   12ed8:	d108      	bne.n	12eec <LORAWAN_RxTimeout+0x2c>
   12eda:	3903      	subs	r1, #3
   12edc:	420a      	tst	r2, r1
   12ede:	d005      	beq.n	12eec <LORAWAN_RxTimeout+0x2c>
   12ee0:	2290      	movs	r2, #144	; 0x90
   12ee2:	0092      	lsls	r2, r2, #2
   12ee4:	5499      	strb	r1, [r3, r2]
   12ee6:	4b1c      	ldr	r3, [pc, #112]	; (12f58 <LORAWAN_RxTimeout+0x98>)
   12ee8:	4798      	blx	r3
   12eea:	bd10      	pop	{r4, pc}
   12eec:	210e      	movs	r1, #14
   12eee:	0010      	movs	r0, r2
   12ef0:	4008      	ands	r0, r1
   12ef2:	2806      	cmp	r0, #6
   12ef4:	d107      	bne.n	12f06 <LORAWAN_RxTimeout+0x46>
   12ef6:	3384      	adds	r3, #132	; 0x84
   12ef8:	781a      	ldrb	r2, [r3, #0]
   12efa:	438a      	bics	r2, r1
   12efc:	0011      	movs	r1, r2
   12efe:	2208      	movs	r2, #8
   12f00:	430a      	orrs	r2, r1
   12f02:	701a      	strb	r2, [r3, #0]
   12f04:	e7f1      	b.n	12eea <LORAWAN_RxTimeout+0x2a>
   12f06:	2004      	movs	r0, #4
   12f08:	3394      	adds	r3, #148	; 0x94
   12f0a:	781b      	ldrb	r3, [r3, #0]
   12f0c:	4203      	tst	r3, r0
   12f0e:	d002      	beq.n	12f16 <LORAWAN_RxTimeout+0x56>
   12f10:	4b12      	ldr	r3, [pc, #72]	; (12f5c <LORAWAN_RxTimeout+0x9c>)
   12f12:	4798      	blx	r3
   12f14:	e7e9      	b.n	12eea <LORAWAN_RxTimeout+0x2a>
   12f16:	07d3      	lsls	r3, r2, #31
   12f18:	d5e7      	bpl.n	12eea <LORAWAN_RxTimeout+0x2a>
   12f1a:	4b11      	ldr	r3, [pc, #68]	; (12f60 <LORAWAN_RxTimeout+0xa0>)
   12f1c:	4798      	blx	r3
   12f1e:	e7e4      	b.n	12eea <LORAWAN_RxTimeout+0x2a>
   12f20:	4810      	ldr	r0, [pc, #64]	; (12f64 <LORAWAN_RxTimeout+0xa4>)
   12f22:	7841      	ldrb	r1, [r0, #1]
   12f24:	7802      	ldrb	r2, [r0, #0]
   12f26:	0209      	lsls	r1, r1, #8
   12f28:	4311      	orrs	r1, r2
   12f2a:	7882      	ldrb	r2, [r0, #2]
   12f2c:	0412      	lsls	r2, r2, #16
   12f2e:	4311      	orrs	r1, r2
   12f30:	78c2      	ldrb	r2, [r0, #3]
   12f32:	0612      	lsls	r2, r2, #24
   12f34:	430a      	orrs	r2, r1
   12f36:	d0d8      	beq.n	12eea <LORAWAN_RxTimeout+0x2a>
   12f38:	2188      	movs	r1, #136	; 0x88
   12f3a:	2001      	movs	r0, #1
   12f3c:	0089      	lsls	r1, r1, #2
   12f3e:	5458      	strb	r0, [r3, r1]
   12f40:	0019      	movs	r1, r3
   12f42:	2404      	movs	r4, #4
   12f44:	31ff      	adds	r1, #255	; 0xff
   12f46:	33fc      	adds	r3, #252	; 0xfc
   12f48:	734c      	strb	r4, [r1, #13]
   12f4a:	7448      	strb	r0, [r1, #17]
   12f4c:	4906      	ldr	r1, [pc, #24]	; (12f68 <LORAWAN_RxTimeout+0xa8>)
   12f4e:	68d8      	ldr	r0, [r3, #12]
   12f50:	4790      	blx	r2
   12f52:	e7ca      	b.n	12eea <LORAWAN_RxTimeout+0x2a>
   12f54:	20003e8c 	.word	0x20003e8c
   12f58:	00014af9 	.word	0x00014af9
   12f5c:	0001218d 	.word	0x0001218d
   12f60:	00012d2d 	.word	0x00012d2d
   12f64:	200041e8 	.word	0x200041e8
   12f68:	20003f98 	.word	0x20003f98

00012f6c <LorawanConfigureRadioForRX2>:
   12f6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12f6e:	466b      	mov	r3, sp
   12f70:	1cdd      	adds	r5, r3, #3
   12f72:	2300      	movs	r3, #0
   12f74:	702b      	strb	r3, [r5, #0]
   12f76:	2390      	movs	r3, #144	; 0x90
   12f78:	4c29      	ldr	r4, [pc, #164]	; (13020 <LorawanConfigureRadioForRX2+0xb4>)
   12f7a:	009b      	lsls	r3, r3, #2
   12f7c:	5ce1      	ldrb	r1, [r4, r3]
   12f7e:	0006      	movs	r6, r0
   12f80:	0023      	movs	r3, r4
   12f82:	2900      	cmp	r1, #0
   12f84:	d02f      	beq.n	12fe6 <LorawanConfigureRadioForRX2+0x7a>
   12f86:	3373      	adds	r3, #115	; 0x73
   12f88:	781b      	ldrb	r3, [r3, #0]
   12f8a:	702b      	strb	r3, [r5, #0]
   12f8c:	0023      	movs	r3, r4
   12f8e:	6f22      	ldr	r2, [r4, #112]	; 0x70
   12f90:	336f      	adds	r3, #111	; 0x6f
   12f92:	781b      	ldrb	r3, [r3, #0]
   12f94:	0211      	lsls	r1, r2, #8
   12f96:	4319      	orrs	r1, r3
   12f98:	7828      	ldrb	r0, [r5, #0]
   12f9a:	4b22      	ldr	r3, [pc, #136]	; (13024 <LorawanConfigureRadioForRX2+0xb8>)
   12f9c:	4798      	blx	r3
   12f9e:	2300      	movs	r3, #0
   12fa0:	0022      	movs	r2, r4
   12fa2:	af01      	add	r7, sp, #4
   12fa4:	703b      	strb	r3, [r7, #0]
   12fa6:	32fd      	adds	r2, #253	; 0xfd
   12fa8:	7812      	ldrb	r2, [r2, #0]
   12faa:	2a04      	cmp	r2, #4
   12fac:	d130      	bne.n	13010 <LorawanConfigureRadioForRX2+0xa4>
   12fae:	0022      	movs	r2, r4
   12fb0:	3284      	adds	r2, #132	; 0x84
   12fb2:	7812      	ldrb	r2, [r2, #0]
   12fb4:	07d2      	lsls	r2, r2, #31
   12fb6:	d52b      	bpl.n	13010 <LorawanConfigureRadioForRX2+0xa4>
   12fb8:	2290      	movs	r2, #144	; 0x90
   12fba:	0092      	lsls	r2, r2, #2
   12fbc:	5ca2      	ldrb	r2, [r4, r2]
   12fbe:	429a      	cmp	r2, r3
   12fc0:	d026      	beq.n	13010 <LorawanConfigureRadioForRX2+0xa4>
   12fc2:	807b      	strh	r3, [r7, #2]
   12fc4:	0038      	movs	r0, r7
   12fc6:	4b18      	ldr	r3, [pc, #96]	; (13028 <LorawanConfigureRadioForRX2+0xbc>)
   12fc8:	4798      	blx	r3
   12fca:	1e04      	subs	r4, r0, #0
   12fcc:	d00a      	beq.n	12fe4 <LorawanConfigureRadioForRX2+0x78>
   12fce:	4b17      	ldr	r3, [pc, #92]	; (1302c <LorawanConfigureRadioForRX2+0xc0>)
   12fd0:	4798      	blx	r3
   12fd2:	4b17      	ldr	r3, [pc, #92]	; (13030 <LorawanConfigureRadioForRX2+0xc4>)
   12fd4:	4798      	blx	r3
   12fd6:	4b17      	ldr	r3, [pc, #92]	; (13034 <LorawanConfigureRadioForRX2+0xc8>)
   12fd8:	4798      	blx	r3
   12fda:	2e00      	cmp	r6, #0
   12fdc:	d002      	beq.n	12fe4 <LorawanConfigureRadioForRX2+0x78>
   12fde:	0020      	movs	r0, r4
   12fe0:	4b15      	ldr	r3, [pc, #84]	; (13038 <LorawanConfigureRadioForRX2+0xcc>)
   12fe2:	4798      	blx	r3
   12fe4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   12fe6:	3394      	adds	r3, #148	; 0x94
   12fe8:	781b      	ldrb	r3, [r3, #0]
   12fea:	075b      	lsls	r3, r3, #29
   12fec:	d50b      	bpl.n	13006 <LorawanConfigureRadioForRX2+0x9a>
   12fee:	002a      	movs	r2, r5
   12ff0:	2009      	movs	r0, #9
   12ff2:	4b12      	ldr	r3, [pc, #72]	; (1303c <LorawanConfigureRadioForRX2+0xd0>)
   12ff4:	4798      	blx	r3
   12ff6:	0022      	movs	r2, r4
   12ff8:	0023      	movs	r3, r4
   12ffa:	326c      	adds	r2, #108	; 0x6c
   12ffc:	8811      	ldrh	r1, [r2, #0]
   12ffe:	336a      	adds	r3, #106	; 0x6a
   13000:	881b      	ldrh	r3, [r3, #0]
   13002:	0409      	lsls	r1, r1, #16
   13004:	e7c7      	b.n	12f96 <LorawanConfigureRadioForRX2+0x2a>
   13006:	0023      	movs	r3, r4
   13008:	336e      	adds	r3, #110	; 0x6e
   1300a:	781b      	ldrb	r3, [r3, #0]
   1300c:	702b      	strb	r3, [r5, #0]
   1300e:	e7f2      	b.n	12ff6 <LorawanConfigureRadioForRX2+0x8a>
   13010:	466b      	mov	r3, sp
   13012:	0029      	movs	r1, r5
   13014:	1d9a      	adds	r2, r3, #6
   13016:	2003      	movs	r0, #3
   13018:	4b08      	ldr	r3, [pc, #32]	; (1303c <LorawanConfigureRadioForRX2+0xd0>)
   1301a:	4798      	blx	r3
   1301c:	e7d2      	b.n	12fc4 <LorawanConfigureRadioForRX2+0x58>
   1301e:	46c0      	nop			; (mov r8, r8)
   13020:	20003e8c 	.word	0x20003e8c
   13024:	00012659 	.word	0x00012659
   13028:	00009135 	.word	0x00009135
   1302c:	00012139 	.word	0x00012139
   13030:	00012169 	.word	0x00012169
   13034:	00011875 	.word	0x00011875
   13038:	00012b2d 	.word	0x00012b2d
   1303c:	00010455 	.word	0x00010455

00013040 <SetReceptionNotOkState>:
   13040:	4a0c      	ldr	r2, [pc, #48]	; (13074 <SetReceptionNotOkState+0x34>)
   13042:	b510      	push	{r4, lr}
   13044:	0013      	movs	r3, r2
   13046:	33fd      	adds	r3, #253	; 0xfd
   13048:	7819      	ldrb	r1, [r3, #0]
   1304a:	0013      	movs	r3, r2
   1304c:	4c0a      	ldr	r4, [pc, #40]	; (13078 <SetReceptionNotOkState+0x38>)
   1304e:	3384      	adds	r3, #132	; 0x84
   13050:	2904      	cmp	r1, #4
   13052:	d105      	bne.n	13060 <SetReceptionNotOkState+0x20>
   13054:	2088      	movs	r0, #136	; 0x88
   13056:	3903      	subs	r1, #3
   13058:	0080      	lsls	r0, r0, #2
   1305a:	5411      	strb	r1, [r2, r0]
   1305c:	3020      	adds	r0, #32
   1305e:	5411      	strb	r1, [r2, r0]
   13060:	210e      	movs	r1, #14
   13062:	781a      	ldrb	r2, [r3, #0]
   13064:	2000      	movs	r0, #0
   13066:	438a      	bics	r2, r1
   13068:	0011      	movs	r1, r2
   1306a:	220a      	movs	r2, #10
   1306c:	430a      	orrs	r2, r1
   1306e:	701a      	strb	r2, [r3, #0]
   13070:	47a0      	blx	r4
   13072:	bd10      	pop	{r4, pc}
   13074:	20003e8c 	.word	0x20003e8c
   13078:	00012f6d 	.word	0x00012f6d

0001307c <LorawanProcessFcntDown>:
   1307c:	b570      	push	{r4, r5, r6, lr}
   1307e:	79c3      	ldrb	r3, [r0, #7]
   13080:	7982      	ldrb	r2, [r0, #6]
   13082:	4c1f      	ldr	r4, [pc, #124]	; (13100 <LorawanProcessFcntDown+0x84>)
   13084:	021b      	lsls	r3, r3, #8
   13086:	4313      	orrs	r3, r2
   13088:	0022      	movs	r2, r4
   1308a:	218b      	movs	r1, #139	; 0x8b
   1308c:	328c      	adds	r2, #140	; 0x8c
   1308e:	8810      	ldrh	r0, [r2, #0]
   13090:	0089      	lsls	r1, r1, #2
   13092:	8013      	strh	r3, [r2, #0]
   13094:	4298      	cmp	r0, r3
   13096:	d80f      	bhi.n	130b8 <LorawanProcessFcntDown+0x3c>
   13098:	5c61      	ldrb	r1, [r4, r1]
   1309a:	2900      	cmp	r1, #0
   1309c:	d007      	beq.n	130ae <LorawanProcessFcntDown+0x32>
   1309e:	2301      	movs	r3, #1
   130a0:	408b      	lsls	r3, r1
   130a2:	6812      	ldr	r2, [r2, #0]
   130a4:	3b01      	subs	r3, #1
   130a6:	421a      	tst	r2, r3
   130a8:	d001      	beq.n	130ae <LorawanProcessFcntDown+0x32>
   130aa:	2008      	movs	r0, #8
   130ac:	bd70      	pop	{r4, r5, r6, pc}
   130ae:	210a      	movs	r1, #10
   130b0:	4b14      	ldr	r3, [pc, #80]	; (13104 <LorawanProcessFcntDown+0x88>)
   130b2:	2001      	movs	r0, #1
   130b4:	4798      	blx	r3
   130b6:	e7f8      	b.n	130aa <LorawanProcessFcntDown+0x2e>
   130b8:	0020      	movs	r0, r4
   130ba:	308e      	adds	r0, #142	; 0x8e
   130bc:	8803      	ldrh	r3, [r0, #0]
   130be:	3301      	adds	r3, #1
   130c0:	8003      	strh	r3, [r0, #0]
   130c2:	5c61      	ldrb	r1, [r4, r1]
   130c4:	2900      	cmp	r1, #0
   130c6:	d005      	beq.n	130d4 <LorawanProcessFcntDown+0x58>
   130c8:	2301      	movs	r3, #1
   130ca:	408b      	lsls	r3, r1
   130cc:	6812      	ldr	r2, [r2, #0]
   130ce:	3b01      	subs	r3, #1
   130d0:	421a      	tst	r2, r3
   130d2:	d103      	bne.n	130dc <LorawanProcessFcntDown+0x60>
   130d4:	210a      	movs	r1, #10
   130d6:	2001      	movs	r0, #1
   130d8:	4b0a      	ldr	r3, [pc, #40]	; (13104 <LorawanProcessFcntDown+0x88>)
   130da:	4798      	blx	r3
   130dc:	0023      	movs	r3, r4
   130de:	338c      	adds	r3, #140	; 0x8c
   130e0:	681b      	ldr	r3, [r3, #0]
   130e2:	3301      	adds	r3, #1
   130e4:	d1e1      	bne.n	130aa <LorawanProcessFcntDown+0x2e>
   130e6:	2501      	movs	r5, #1
   130e8:	3484      	adds	r4, #132	; 0x84
   130ea:	78a3      	ldrb	r3, [r4, #2]
   130ec:	432b      	orrs	r3, r5
   130ee:	70a3      	strb	r3, [r4, #2]
   130f0:	4b05      	ldr	r3, [pc, #20]	; (13108 <LorawanProcessFcntDown+0x8c>)
   130f2:	4798      	blx	r3
   130f4:	210b      	movs	r1, #11
   130f6:	0028      	movs	r0, r5
   130f8:	4b02      	ldr	r3, [pc, #8]	; (13104 <LorawanProcessFcntDown+0x88>)
   130fa:	4798      	blx	r3
   130fc:	200d      	movs	r0, #13
   130fe:	e7d5      	b.n	130ac <LorawanProcessFcntDown+0x30>
   13100:	20003e8c 	.word	0x20003e8c
   13104:	0000bbc5 	.word	0x0000bbc5
   13108:	00013041 	.word	0x00013041

0001310c <UpdateCurrentDataRateAfterDataRangeChanges>:
   1310c:	4b09      	ldr	r3, [pc, #36]	; (13134 <UpdateCurrentDataRateAfterDataRangeChanges+0x28>)
   1310e:	001a      	movs	r2, r3
   13110:	32f4      	adds	r2, #244	; 0xf4
   13112:	7811      	ldrb	r1, [r2, #0]
   13114:	001a      	movs	r2, r3
   13116:	32e7      	adds	r2, #231	; 0xe7
   13118:	7810      	ldrb	r0, [r2, #0]
   1311a:	4288      	cmp	r0, r1
   1311c:	d900      	bls.n	13120 <UpdateCurrentDataRateAfterDataRangeChanges+0x14>
   1311e:	7011      	strb	r1, [r2, #0]
   13120:	001a      	movs	r2, r3
   13122:	33e7      	adds	r3, #231	; 0xe7
   13124:	32f3      	adds	r2, #243	; 0xf3
   13126:	7812      	ldrb	r2, [r2, #0]
   13128:	7819      	ldrb	r1, [r3, #0]
   1312a:	4291      	cmp	r1, r2
   1312c:	d200      	bcs.n	13130 <UpdateCurrentDataRateAfterDataRangeChanges+0x24>
   1312e:	701a      	strb	r2, [r3, #0]
   13130:	4770      	bx	lr
   13132:	46c0      	nop			; (mov r8, r8)
   13134:	20003e8c 	.word	0x20003e8c

00013138 <ExecuteNewChannel>:
   13138:	b5f0      	push	{r4, r5, r6, r7, lr}
   1313a:	b08d      	sub	sp, #52	; 0x34
   1313c:	7807      	ldrb	r7, [r0, #0]
   1313e:	ab02      	add	r3, sp, #8
   13140:	0006      	movs	r6, r0
   13142:	71df      	strb	r7, [r3, #7]
   13144:	1c41      	adds	r1, r0, #1
   13146:	4b59      	ldr	r3, [pc, #356]	; (132ac <ExecuteNewChannel+0x174>)
   13148:	2204      	movs	r2, #4
   1314a:	a808      	add	r0, sp, #32
   1314c:	4798      	blx	r3
   1314e:	9b08      	ldr	r3, [sp, #32]
   13150:	4c57      	ldr	r4, [pc, #348]	; (132b0 <ExecuteNewChannel+0x178>)
   13152:	021d      	lsls	r5, r3, #8
   13154:	2364      	movs	r3, #100	; 0x64
   13156:	0a2d      	lsrs	r5, r5, #8
   13158:	435d      	muls	r5, r3
   1315a:	1d73      	adds	r3, r6, #5
   1315c:	9301      	str	r3, [sp, #4]
   1315e:	0023      	movs	r3, r4
   13160:	9508      	str	r5, [sp, #32]
   13162:	33ff      	adds	r3, #255	; 0xff
   13164:	781b      	ldrb	r3, [r3, #0]
   13166:	3b02      	subs	r3, #2
   13168:	2b01      	cmp	r3, #1
   1316a:	d800      	bhi.n	1316e <ExecuteNewChannel+0x36>
   1316c:	e092      	b.n	13294 <ExecuteNewChannel+0x15c>
   1316e:	7933      	ldrb	r3, [r6, #4]
   13170:	a904      	add	r1, sp, #16
   13172:	9300      	str	r3, [sp, #0]
   13174:	2300      	movs	r3, #0
   13176:	2015      	movs	r0, #21
   13178:	4e4e      	ldr	r6, [pc, #312]	; (132b4 <ExecuteNewChannel+0x17c>)
   1317a:	700f      	strb	r7, [r1, #0]
   1317c:	704b      	strb	r3, [r1, #1]
   1317e:	47b0      	blx	r6
   13180:	2808      	cmp	r0, #8
   13182:	d12b      	bne.n	131dc <ExecuteNewChannel+0xa4>
   13184:	466a      	mov	r2, sp
   13186:	ab02      	add	r3, sp, #8
   13188:	79db      	ldrb	r3, [r3, #7]
   1318a:	7812      	ldrb	r2, [r2, #0]
   1318c:	af06      	add	r7, sp, #24
   1318e:	a90a      	add	r1, sp, #40	; 0x28
   13190:	3806      	subs	r0, #6
   13192:	703b      	strb	r3, [r7, #0]
   13194:	707a      	strb	r2, [r7, #1]
   13196:	710b      	strb	r3, [r1, #4]
   13198:	950a      	str	r5, [sp, #40]	; 0x28
   1319a:	47b0      	blx	r6
   1319c:	2808      	cmp	r0, #8
   1319e:	d001      	beq.n	131a4 <ExecuteNewChannel+0x6c>
   131a0:	2d00      	cmp	r5, #0
   131a2:	d10b      	bne.n	131bc <ExecuteNewChannel+0x84>
   131a4:	0023      	movs	r3, r4
   131a6:	33e0      	adds	r3, #224	; 0xe0
   131a8:	781a      	ldrb	r2, [r3, #0]
   131aa:	2303      	movs	r3, #3
   131ac:	4353      	muls	r3, r2
   131ae:	2280      	movs	r2, #128	; 0x80
   131b0:	18e3      	adds	r3, r4, r3
   131b2:	3398      	adds	r3, #152	; 0x98
   131b4:	7899      	ldrb	r1, [r3, #2]
   131b6:	4252      	negs	r2, r2
   131b8:	430a      	orrs	r2, r1
   131ba:	709a      	strb	r2, [r3, #2]
   131bc:	0039      	movs	r1, r7
   131be:	2012      	movs	r0, #18
   131c0:	47b0      	blx	r6
   131c2:	2808      	cmp	r0, #8
   131c4:	d10a      	bne.n	131dc <ExecuteNewChannel+0xa4>
   131c6:	0023      	movs	r3, r4
   131c8:	33e0      	adds	r3, #224	; 0xe0
   131ca:	781a      	ldrb	r2, [r3, #0]
   131cc:	2303      	movs	r3, #3
   131ce:	4353      	muls	r3, r2
   131d0:	2240      	movs	r2, #64	; 0x40
   131d2:	18e3      	adds	r3, r4, r3
   131d4:	3398      	adds	r3, #152	; 0x98
   131d6:	7899      	ldrb	r1, [r3, #2]
   131d8:	430a      	orrs	r2, r1
   131da:	709a      	strb	r2, [r3, #2]
   131dc:	0023      	movs	r3, r4
   131de:	33e0      	adds	r3, #224	; 0xe0
   131e0:	781a      	ldrb	r2, [r3, #0]
   131e2:	2303      	movs	r3, #3
   131e4:	4353      	muls	r3, r2
   131e6:	18e3      	adds	r3, r4, r3
   131e8:	3398      	adds	r3, #152	; 0x98
   131ea:	789b      	ldrb	r3, [r3, #2]
   131ec:	09da      	lsrs	r2, r3, #7
   131ee:	2a01      	cmp	r2, #1
   131f0:	d150      	bne.n	13294 <ExecuteNewChannel+0x15c>
   131f2:	065b      	lsls	r3, r3, #25
   131f4:	d54e      	bpl.n	13294 <ExecuteNewChannel+0x15c>
   131f6:	4e30      	ldr	r6, [pc, #192]	; (132b8 <ExecuteNewChannel+0x180>)
   131f8:	2d00      	cmp	r5, #0
   131fa:	d04e      	beq.n	1329a <ExecuteNewChannel+0x162>
   131fc:	a906      	add	r1, sp, #24
   131fe:	2012      	movs	r0, #18
   13200:	47b0      	blx	r6
   13202:	ad07      	add	r5, sp, #28
   13204:	a90a      	add	r1, sp, #40	; 0x28
   13206:	2000      	movs	r0, #0
   13208:	47b0      	blx	r6
   1320a:	002a      	movs	r2, r5
   1320c:	2100      	movs	r1, #0
   1320e:	2014      	movs	r0, #20
   13210:	4f2a      	ldr	r7, [pc, #168]	; (132bc <ExecuteNewChannel+0x184>)
   13212:	47b8      	blx	r7
   13214:	0023      	movs	r3, r4
   13216:	782a      	ldrb	r2, [r5, #0]
   13218:	33f3      	adds	r3, #243	; 0xf3
   1321a:	701a      	strb	r2, [r3, #0]
   1321c:	0023      	movs	r3, r4
   1321e:	786a      	ldrb	r2, [r5, #1]
   13220:	33f4      	adds	r3, #244	; 0xf4
   13222:	701a      	strb	r2, [r3, #0]
   13224:	34ff      	adds	r4, #255	; 0xff
   13226:	4b26      	ldr	r3, [pc, #152]	; (132c0 <ExecuteNewChannel+0x188>)
   13228:	4798      	blx	r3
   1322a:	7f63      	ldrb	r3, [r4, #29]
   1322c:	079b      	lsls	r3, r3, #30
   1322e:	d50e      	bpl.n	1324e <ExecuteNewChannel+0x116>
   13230:	2416      	movs	r4, #22
   13232:	ab02      	add	r3, sp, #8
   13234:	18e4      	adds	r4, r4, r3
   13236:	1dd9      	adds	r1, r3, #7
   13238:	0022      	movs	r2, r4
   1323a:	201e      	movs	r0, #30
   1323c:	47b8      	blx	r7
   1323e:	ab02      	add	r3, sp, #8
   13240:	79db      	ldrb	r3, [r3, #7]
   13242:	a909      	add	r1, sp, #36	; 0x24
   13244:	708b      	strb	r3, [r1, #2]
   13246:	8823      	ldrh	r3, [r4, #0]
   13248:	201e      	movs	r0, #30
   1324a:	800b      	strh	r3, [r1, #0]
   1324c:	47b0      	blx	r6
   1324e:	ab02      	add	r3, sp, #8
   13250:	79db      	ldrb	r3, [r3, #7]
   13252:	a905      	add	r1, sp, #20
   13254:	700b      	strb	r3, [r1, #0]
   13256:	2301      	movs	r3, #1
   13258:	2016      	movs	r0, #22
   1325a:	704b      	strb	r3, [r1, #1]
   1325c:	4b16      	ldr	r3, [pc, #88]	; (132b8 <ExecuteNewChannel+0x180>)
   1325e:	4798      	blx	r3
   13260:	ad09      	add	r5, sp, #36	; 0x24
   13262:	2100      	movs	r1, #0
   13264:	002a      	movs	r2, r5
   13266:	4b15      	ldr	r3, [pc, #84]	; (132bc <ExecuteNewChannel+0x184>)
   13268:	2014      	movs	r0, #20
   1326a:	4798      	blx	r3
   1326c:	4c10      	ldr	r4, [pc, #64]	; (132b0 <ExecuteNewChannel+0x178>)
   1326e:	782a      	ldrb	r2, [r5, #0]
   13270:	0023      	movs	r3, r4
   13272:	33f3      	adds	r3, #243	; 0xf3
   13274:	701a      	strb	r2, [r3, #0]
   13276:	0023      	movs	r3, r4
   13278:	786a      	ldrb	r2, [r5, #1]
   1327a:	33f4      	adds	r3, #244	; 0xf4
   1327c:	701a      	strb	r2, [r3, #0]
   1327e:	4b10      	ldr	r3, [pc, #64]	; (132c0 <ExecuteNewChannel+0x188>)
   13280:	4798      	blx	r3
   13282:	2304      	movs	r3, #4
   13284:	3484      	adds	r4, #132	; 0x84
   13286:	7862      	ldrb	r2, [r4, #1]
   13288:	210b      	movs	r1, #11
   1328a:	4313      	orrs	r3, r2
   1328c:	7063      	strb	r3, [r4, #1]
   1328e:	2001      	movs	r0, #1
   13290:	4b0c      	ldr	r3, [pc, #48]	; (132c4 <ExecuteNewChannel+0x18c>)
   13292:	4798      	blx	r3
   13294:	9801      	ldr	r0, [sp, #4]
   13296:	b00d      	add	sp, #52	; 0x34
   13298:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1329a:	ab02      	add	r3, sp, #8
   1329c:	79db      	ldrb	r3, [r3, #7]
   1329e:	a905      	add	r1, sp, #20
   132a0:	2016      	movs	r0, #22
   132a2:	700b      	strb	r3, [r1, #0]
   132a4:	704d      	strb	r5, [r1, #1]
   132a6:	47b0      	blx	r6
   132a8:	e7da      	b.n	13260 <ExecuteNewChannel+0x128>
   132aa:	46c0      	nop			; (mov r8, r8)
   132ac:	0001835b 	.word	0x0001835b
   132b0:	20003e8c 	.word	0x20003e8c
   132b4:	00010471 	.word	0x00010471
   132b8:	0001048d 	.word	0x0001048d
   132bc:	00010455 	.word	0x00010455
   132c0:	0001310d 	.word	0x0001310d
   132c4:	0000bbc5 	.word	0x0000bbc5

000132c8 <MacExecuteCommands>:
   132c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   132ca:	1843      	adds	r3, r0, r1
   132cc:	b087      	sub	sp, #28
   132ce:	9301      	str	r3, [sp, #4]
   132d0:	2300      	movs	r3, #0
   132d2:	0007      	movs	r7, r0
   132d4:	2501      	movs	r5, #1
   132d6:	9302      	str	r3, [sp, #8]
   132d8:	9b01      	ldr	r3, [sp, #4]
   132da:	4e71      	ldr	r6, [pc, #452]	; (134a0 <MacExecuteCommands+0x1d8>)
   132dc:	429f      	cmp	r7, r3
   132de:	d362      	bcc.n	133a6 <MacExecuteCommands+0xde>
   132e0:	4b70      	ldr	r3, [pc, #448]	; (134a4 <MacExecuteCommands+0x1dc>)
   132e2:	5cf3      	ldrb	r3, [r6, r3]
   132e4:	2b00      	cmp	r3, #0
   132e6:	d000      	beq.n	132ea <MacExecuteCommands+0x22>
   132e8:	e08f      	b.n	1340a <MacExecuteCommands+0x142>
   132ea:	0038      	movs	r0, r7
   132ec:	b007      	add	sp, #28
   132ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   132f0:	0032      	movs	r2, r6
   132f2:	7879      	ldrb	r1, [r7, #1]
   132f4:	32e5      	adds	r2, #229	; 0xe5
   132f6:	7011      	strb	r1, [r2, #0]
   132f8:	0032      	movs	r2, r6
   132fa:	78b9      	ldrb	r1, [r7, #2]
   132fc:	32e6      	adds	r2, #230	; 0xe6
   132fe:	1cfc      	adds	r4, r7, #3
   13300:	7011      	strb	r1, [r2, #0]
   13302:	2203      	movs	r2, #3
   13304:	4353      	muls	r3, r2
   13306:	18f3      	adds	r3, r6, r3
   13308:	3399      	adds	r3, #153	; 0x99
   1330a:	32fc      	adds	r2, #252	; 0xfc
   1330c:	701a      	strb	r2, [r3, #0]
   1330e:	e020      	b.n	13352 <MacExecuteCommands+0x8a>
   13310:	0020      	movs	r0, r4
   13312:	4b65      	ldr	r3, [pc, #404]	; (134a8 <MacExecuteCommands+0x1e0>)
   13314:	4798      	blx	r3
   13316:	0004      	movs	r4, r0
   13318:	e01b      	b.n	13352 <MacExecuteCommands+0x8a>
   1331a:	0020      	movs	r0, r4
   1331c:	4b63      	ldr	r3, [pc, #396]	; (134ac <MacExecuteCommands+0x1e4>)
   1331e:	e7f9      	b.n	13314 <MacExecuteCommands+0x4c>
   13320:	0020      	movs	r0, r4
   13322:	4b63      	ldr	r3, [pc, #396]	; (134b0 <MacExecuteCommands+0x1e8>)
   13324:	e7f6      	b.n	13314 <MacExecuteCommands+0x4c>
   13326:	0020      	movs	r0, r4
   13328:	4b62      	ldr	r3, [pc, #392]	; (134b4 <MacExecuteCommands+0x1ec>)
   1332a:	e7f3      	b.n	13314 <MacExecuteCommands+0x4c>
   1332c:	7878      	ldrb	r0, [r7, #1]
   1332e:	230f      	movs	r3, #15
   13330:	0002      	movs	r2, r0
   13332:	1cbc      	adds	r4, r7, #2
   13334:	439a      	bics	r2, r3
   13336:	d10c      	bne.n	13352 <MacExecuteCommands+0x8a>
   13338:	4b5f      	ldr	r3, [pc, #380]	; (134b8 <MacExecuteCommands+0x1f0>)
   1333a:	4798      	blx	r3
   1333c:	0032      	movs	r2, r6
   1333e:	2380      	movs	r3, #128	; 0x80
   13340:	3284      	adds	r2, #132	; 0x84
   13342:	7851      	ldrb	r1, [r2, #1]
   13344:	425b      	negs	r3, r3
   13346:	430b      	orrs	r3, r1
   13348:	7053      	strb	r3, [r2, #1]
   1334a:	210b      	movs	r1, #11
   1334c:	0028      	movs	r0, r5
   1334e:	4b5b      	ldr	r3, [pc, #364]	; (134bc <MacExecuteCommands+0x1f4>)
   13350:	4798      	blx	r3
   13352:	0032      	movs	r2, r6
   13354:	2103      	movs	r1, #3
   13356:	32e0      	adds	r2, #224	; 0xe0
   13358:	7813      	ldrb	r3, [r2, #0]
   1335a:	4359      	muls	r1, r3
   1335c:	1876      	adds	r6, r6, r1
   1335e:	3699      	adds	r6, #153	; 0x99
   13360:	7831      	ldrb	r1, [r6, #0]
   13362:	29ff      	cmp	r1, #255	; 0xff
   13364:	d003      	beq.n	1336e <MacExecuteCommands+0xa6>
   13366:	2b0f      	cmp	r3, #15
   13368:	d801      	bhi.n	1336e <MacExecuteCommands+0xa6>
   1336a:	3301      	adds	r3, #1
   1336c:	7013      	strb	r3, [r2, #0]
   1336e:	0027      	movs	r7, r4
   13370:	e7b2      	b.n	132d8 <MacExecuteCommands+0x10>
   13372:	0020      	movs	r0, r4
   13374:	4b52      	ldr	r3, [pc, #328]	; (134c0 <MacExecuteCommands+0x1f8>)
   13376:	e7cd      	b.n	13314 <MacExecuteCommands+0x4c>
   13378:	0020      	movs	r0, r4
   1337a:	4b52      	ldr	r3, [pc, #328]	; (134c4 <MacExecuteCommands+0x1fc>)
   1337c:	e7ca      	b.n	13314 <MacExecuteCommands+0x4c>
   1337e:	0020      	movs	r0, r4
   13380:	4b51      	ldr	r3, [pc, #324]	; (134c8 <MacExecuteCommands+0x200>)
   13382:	4798      	blx	r3
   13384:	0033      	movs	r3, r6
   13386:	33e0      	adds	r3, #224	; 0xe0
   13388:	0004      	movs	r4, r0
   1338a:	781b      	ldrb	r3, [r3, #0]
   1338c:	e7b9      	b.n	13302 <MacExecuteCommands+0x3a>
   1338e:	2203      	movs	r2, #3
   13390:	4353      	muls	r3, r2
   13392:	18f3      	adds	r3, r6, r3
   13394:	3399      	adds	r3, #153	; 0x99
   13396:	32fc      	adds	r2, #252	; 0xfc
   13398:	701a      	strb	r2, [r3, #0]
   1339a:	9c01      	ldr	r4, [sp, #4]
   1339c:	9502      	str	r5, [sp, #8]
   1339e:	e7d8      	b.n	13352 <MacExecuteCommands+0x8a>
   133a0:	23ff      	movs	r3, #255	; 0xff
   133a2:	7013      	strb	r3, [r2, #0]
   133a4:	e7f9      	b.n	1339a <MacExecuteCommands+0xd2>
   133a6:	9b02      	ldr	r3, [sp, #8]
   133a8:	2b00      	cmp	r3, #0
   133aa:	d199      	bne.n	132e0 <MacExecuteCommands+0x18>
   133ac:	0033      	movs	r3, r6
   133ae:	2203      	movs	r2, #3
   133b0:	33e0      	adds	r3, #224	; 0xe0
   133b2:	781b      	ldrb	r3, [r3, #0]
   133b4:	2401      	movs	r4, #1
   133b6:	435a      	muls	r2, r3
   133b8:	18b2      	adds	r2, r6, r2
   133ba:	0010      	movs	r0, r2
   133bc:	3098      	adds	r0, #152	; 0x98
   133be:	7881      	ldrb	r1, [r0, #2]
   133c0:	3299      	adds	r2, #153	; 0x99
   133c2:	43a9      	bics	r1, r5
   133c4:	4021      	ands	r1, r4
   133c6:	7081      	strb	r1, [r0, #2]
   133c8:	78c1      	ldrb	r1, [r0, #3]
   133ca:	193c      	adds	r4, r7, r4
   133cc:	43a9      	bics	r1, r5
   133ce:	70c1      	strb	r1, [r0, #3]
   133d0:	7839      	ldrb	r1, [r7, #0]
   133d2:	7011      	strb	r1, [r2, #0]
   133d4:	7838      	ldrb	r0, [r7, #0]
   133d6:	493d      	ldr	r1, [pc, #244]	; (134cc <MacExecuteCommands+0x204>)
   133d8:	1809      	adds	r1, r1, r0
   133da:	3902      	subs	r1, #2
   133dc:	7809      	ldrb	r1, [r1, #0]
   133de:	1861      	adds	r1, r4, r1
   133e0:	468c      	mov	ip, r1
   133e2:	9901      	ldr	r1, [sp, #4]
   133e4:	4561      	cmp	r1, ip
   133e6:	d3db      	bcc.n	133a0 <MacExecuteCommands+0xd8>
   133e8:	3802      	subs	r0, #2
   133ea:	280b      	cmp	r0, #11
   133ec:	d8cf      	bhi.n	1338e <MacExecuteCommands+0xc6>
   133ee:	f001 fe6f 	bl	150d0 <__gnu_thumb1_case_shi>
   133f2:	ff7f      	.short	0xff7f
   133f4:	ff94ff8f 	.word	0xff94ff8f
   133f8:	ffb0ff97 	.word	0xffb0ff97
   133fc:	ff9dff9a 	.word	0xff9dff9a
   13400:	ffc3ffc0 	.word	0xffc3ffc0
   13404:	ffceffce 	.word	0xffceffce
   13408:	ffc6      	.short	0xffc6
   1340a:	4b31      	ldr	r3, [pc, #196]	; (134d0 <MacExecuteCommands+0x208>)
   1340c:	5cf3      	ldrb	r3, [r6, r3]
   1340e:	43db      	mvns	r3, r3
   13410:	075b      	lsls	r3, r3, #29
   13412:	d000      	beq.n	13416 <MacExecuteCommands+0x14e>
   13414:	e769      	b.n	132ea <MacExecuteCommands+0x22>
   13416:	4b2f      	ldr	r3, [pc, #188]	; (134d4 <MacExecuteCommands+0x20c>)
   13418:	ad05      	add	r5, sp, #20
   1341a:	5cf4      	ldrb	r4, [r6, r3]
   1341c:	2100      	movs	r1, #0
   1341e:	0724      	lsls	r4, r4, #28
   13420:	0f24      	lsrs	r4, r4, #28
   13422:	b2e3      	uxtb	r3, r4
   13424:	9301      	str	r3, [sp, #4]
   13426:	4b2c      	ldr	r3, [pc, #176]	; (134d8 <MacExecuteCommands+0x210>)
   13428:	002a      	movs	r2, r5
   1342a:	5cf3      	ldrb	r3, [r6, r3]
   1342c:	2014      	movs	r0, #20
   1342e:	9302      	str	r3, [sp, #8]
   13430:	2389      	movs	r3, #137	; 0x89
   13432:	009b      	lsls	r3, r3, #2
   13434:	5cf3      	ldrb	r3, [r6, r3]
   13436:	9303      	str	r3, [sp, #12]
   13438:	4b28      	ldr	r3, [pc, #160]	; (134dc <MacExecuteCommands+0x214>)
   1343a:	4798      	blx	r3
   1343c:	0033      	movs	r3, r6
   1343e:	782a      	ldrb	r2, [r5, #0]
   13440:	33f3      	adds	r3, #243	; 0xf3
   13442:	701a      	strb	r2, [r3, #0]
   13444:	0033      	movs	r3, r6
   13446:	786a      	ldrb	r2, [r5, #1]
   13448:	33f4      	adds	r3, #244	; 0xf4
   1344a:	701a      	strb	r2, [r3, #0]
   1344c:	4b24      	ldr	r3, [pc, #144]	; (134e0 <MacExecuteCommands+0x218>)
   1344e:	4798      	blx	r3
   13450:	9802      	ldr	r0, [sp, #8]
   13452:	4b24      	ldr	r3, [pc, #144]	; (134e4 <MacExecuteCommands+0x21c>)
   13454:	4798      	blx	r3
   13456:	0032      	movs	r2, r6
   13458:	2308      	movs	r3, #8
   1345a:	3284      	adds	r2, #132	; 0x84
   1345c:	7851      	ldrb	r1, [r2, #1]
   1345e:	430b      	orrs	r3, r1
   13460:	7053      	strb	r3, [r2, #1]
   13462:	9803      	ldr	r0, [sp, #12]
   13464:	4b20      	ldr	r3, [pc, #128]	; (134e8 <MacExecuteCommands+0x220>)
   13466:	4798      	blx	r3
   13468:	0033      	movs	r3, r6
   1346a:	b2e2      	uxtb	r2, r4
   1346c:	33e1      	adds	r3, #225	; 0xe1
   1346e:	2a00      	cmp	r2, #0
   13470:	d10e      	bne.n	13490 <MacExecuteCommands+0x1c8>
   13472:	701c      	strb	r4, [r3, #0]
   13474:	2113      	movs	r1, #19
   13476:	4c11      	ldr	r4, [pc, #68]	; (134bc <MacExecuteCommands+0x1f4>)
   13478:	2000      	movs	r0, #0
   1347a:	47a0      	blx	r4
   1347c:	2210      	movs	r2, #16
   1347e:	4b08      	ldr	r3, [pc, #32]	; (134a0 <MacExecuteCommands+0x1d8>)
   13480:	2001      	movs	r0, #1
   13482:	3384      	adds	r3, #132	; 0x84
   13484:	7859      	ldrb	r1, [r3, #1]
   13486:	430a      	orrs	r2, r1
   13488:	705a      	strb	r2, [r3, #1]
   1348a:	210b      	movs	r1, #11
   1348c:	47a0      	blx	r4
   1348e:	e72c      	b.n	132ea <MacExecuteCommands+0x22>
   13490:	9a01      	ldr	r2, [sp, #4]
   13492:	3a01      	subs	r2, #1
   13494:	b2d2      	uxtb	r2, r2
   13496:	701a      	strb	r2, [r3, #0]
   13498:	0033      	movs	r3, r6
   1349a:	33e2      	adds	r3, #226	; 0xe2
   1349c:	701a      	strb	r2, [r3, #0]
   1349e:	e7e9      	b.n	13474 <MacExecuteCommands+0x1ac>
   134a0:	20003e8c 	.word	0x20003e8c
   134a4:	00000226 	.word	0x00000226
   134a8:	00012429 	.word	0x00012429
   134ac:	000122ed 	.word	0x000122ed
   134b0:	000121f1 	.word	0x000121f1
   134b4:	00013139 	.word	0x00013139
   134b8:	0001191d 	.word	0x0001191d
   134bc:	0000bbc5 	.word	0x0000bbc5
   134c0:	000123d9 	.word	0x000123d9
   134c4:	00012325 	.word	0x00012325
   134c8:	00012561 	.word	0x00012561
   134cc:	0001afeb 	.word	0x0001afeb
   134d0:	00000223 	.word	0x00000223
   134d4:	00000229 	.word	0x00000229
   134d8:	00000225 	.word	0x00000225
   134dc:	00010455 	.word	0x00010455
   134e0:	0001310d 	.word	0x0001310d
   134e4:	00012081 	.word	0x00012081
   134e8:	00012015 	.word	0x00012015

000134ec <LorawanSetDataRange>:
   134ec:	2201      	movs	r2, #1
   134ee:	b530      	push	{r4, r5, lr}
   134f0:	b085      	sub	sp, #20
   134f2:	ab01      	add	r3, sp, #4
   134f4:	ac02      	add	r4, sp, #8
   134f6:	7018      	strb	r0, [r3, #0]
   134f8:	7020      	strb	r0, [r4, #0]
   134fa:	7061      	strb	r1, [r4, #1]
   134fc:	2015      	movs	r0, #21
   134fe:	0019      	movs	r1, r3
   13500:	4d11      	ldr	r5, [pc, #68]	; (13548 <LorawanSetDataRange+0x5c>)
   13502:	705a      	strb	r2, [r3, #1]
   13504:	47a8      	blx	r5
   13506:	2808      	cmp	r0, #8
   13508:	d003      	beq.n	13512 <LorawanSetDataRange+0x26>
   1350a:	250a      	movs	r5, #10
   1350c:	0028      	movs	r0, r5
   1350e:	b005      	add	sp, #20
   13510:	bd30      	pop	{r4, r5, pc}
   13512:	0021      	movs	r1, r4
   13514:	2012      	movs	r0, #18
   13516:	47a8      	blx	r5
   13518:	0005      	movs	r5, r0
   1351a:	2808      	cmp	r0, #8
   1351c:	d1f5      	bne.n	1350a <LorawanSetDataRange+0x1e>
   1351e:	0021      	movs	r1, r4
   13520:	4b0a      	ldr	r3, [pc, #40]	; (1354c <LorawanSetDataRange+0x60>)
   13522:	ac03      	add	r4, sp, #12
   13524:	2012      	movs	r0, #18
   13526:	4798      	blx	r3
   13528:	0022      	movs	r2, r4
   1352a:	2100      	movs	r1, #0
   1352c:	4b08      	ldr	r3, [pc, #32]	; (13550 <LorawanSetDataRange+0x64>)
   1352e:	2014      	movs	r0, #20
   13530:	4798      	blx	r3
   13532:	4b08      	ldr	r3, [pc, #32]	; (13554 <LorawanSetDataRange+0x68>)
   13534:	7821      	ldrb	r1, [r4, #0]
   13536:	001a      	movs	r2, r3
   13538:	32f3      	adds	r2, #243	; 0xf3
   1353a:	7011      	strb	r1, [r2, #0]
   1353c:	7862      	ldrb	r2, [r4, #1]
   1353e:	33f4      	adds	r3, #244	; 0xf4
   13540:	701a      	strb	r2, [r3, #0]
   13542:	4b05      	ldr	r3, [pc, #20]	; (13558 <LorawanSetDataRange+0x6c>)
   13544:	4798      	blx	r3
   13546:	e7e1      	b.n	1350c <LorawanSetDataRange+0x20>
   13548:	00010471 	.word	0x00010471
   1354c:	0001048d 	.word	0x0001048d
   13550:	00010455 	.word	0x00010455
   13554:	20003e8c 	.word	0x20003e8c
   13558:	0001310d 	.word	0x0001310d

0001355c <LorawanSetChannelIdStatus>:
   1355c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1355e:	466b      	mov	r3, sp
   13560:	7018      	strb	r0, [r3, #0]
   13562:	7059      	strb	r1, [r3, #1]
   13564:	2016      	movs	r0, #22
   13566:	4669      	mov	r1, sp
   13568:	4b0c      	ldr	r3, [pc, #48]	; (1359c <LorawanSetChannelIdStatus+0x40>)
   1356a:	4798      	blx	r3
   1356c:	0004      	movs	r4, r0
   1356e:	2808      	cmp	r0, #8
   13570:	d111      	bne.n	13596 <LorawanSetChannelIdStatus+0x3a>
   13572:	ad01      	add	r5, sp, #4
   13574:	002a      	movs	r2, r5
   13576:	2100      	movs	r1, #0
   13578:	4b09      	ldr	r3, [pc, #36]	; (135a0 <LorawanSetChannelIdStatus+0x44>)
   1357a:	2014      	movs	r0, #20
   1357c:	4798      	blx	r3
   1357e:	4b09      	ldr	r3, [pc, #36]	; (135a4 <LorawanSetChannelIdStatus+0x48>)
   13580:	7829      	ldrb	r1, [r5, #0]
   13582:	001a      	movs	r2, r3
   13584:	32f3      	adds	r2, #243	; 0xf3
   13586:	7011      	strb	r1, [r2, #0]
   13588:	786a      	ldrb	r2, [r5, #1]
   1358a:	33f4      	adds	r3, #244	; 0xf4
   1358c:	701a      	strb	r2, [r3, #0]
   1358e:	4b06      	ldr	r3, [pc, #24]	; (135a8 <LorawanSetChannelIdStatus+0x4c>)
   13590:	4798      	blx	r3
   13592:	0020      	movs	r0, r4
   13594:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   13596:	240a      	movs	r4, #10
   13598:	e7fb      	b.n	13592 <LorawanSetChannelIdStatus+0x36>
   1359a:	46c0      	nop			; (mov r8, r8)
   1359c:	0001048d 	.word	0x0001048d
   135a0:	00010455 	.word	0x00010455
   135a4:	20003e8c 	.word	0x20003e8c
   135a8:	0001310d 	.word	0x0001310d

000135ac <LORAWAN_RxDone>:
   135ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   135ae:	4bc4      	ldr	r3, [pc, #784]	; (138c0 <LORAWAN_RxDone+0x314>)
   135b0:	b093      	sub	sp, #76	; 0x4c
   135b2:	781b      	ldrb	r3, [r3, #0]
   135b4:	0007      	movs	r7, r0
   135b6:	b25a      	sxtb	r2, r3
   135b8:	9106      	str	r1, [sp, #24]
   135ba:	4cc2      	ldr	r4, [pc, #776]	; (138c4 <LORAWAN_RxDone+0x318>)
   135bc:	2a00      	cmp	r2, #0
   135be:	da01      	bge.n	135c4 <LORAWAN_RxDone+0x18>
   135c0:	f000 fc86 	bl	13ed0 <LORAWAN_RxDone+0x924>
   135c4:	7801      	ldrb	r1, [r0, #0]
   135c6:	221f      	movs	r2, #31
   135c8:	000e      	movs	r6, r1
   135ca:	4396      	bics	r6, r2
   135cc:	2e20      	cmp	r6, #32
   135ce:	d000      	beq.n	135d2 <LORAWAN_RxDone+0x26>
   135d0:	e1ae      	b.n	13930 <LORAWAN_RxDone+0x384>
   135d2:	7822      	ldrb	r2, [r4, #0]
   135d4:	2a00      	cmp	r2, #0
   135d6:	d001      	beq.n	135dc <LORAWAN_RxDone+0x30>
   135d8:	f000 fc66 	bl	13ea8 <LORAWAN_RxDone+0x8fc>
   135dc:	0022      	movs	r2, r4
   135de:	3294      	adds	r2, #148	; 0x94
   135e0:	7812      	ldrb	r2, [r2, #0]
   135e2:	0752      	lsls	r2, r2, #29
   135e4:	d401      	bmi.n	135ea <LORAWAN_RxDone+0x3e>
   135e6:	f000 fc5f 	bl	13ea8 <LORAWAN_RxDone+0x8fc>
   135ea:	9b06      	ldr	r3, [sp, #24]
   135ec:	3b01      	subs	r3, #1
   135ee:	b2db      	uxtb	r3, r3
   135f0:	9307      	str	r3, [sp, #28]
   135f2:	4bb5      	ldr	r3, [pc, #724]	; (138c8 <LORAWAN_RxDone+0x31c>)
   135f4:	469c      	mov	ip, r3
   135f6:	9b07      	ldr	r3, [sp, #28]
   135f8:	2b00      	cmp	r3, #0
   135fa:	d12c      	bne.n	13656 <LORAWAN_RxDone+0xaa>
   135fc:	9b06      	ldr	r3, [sp, #24]
   135fe:	4660      	mov	r0, ip
   13600:	1f1d      	subs	r5, r3, #4
   13602:	b2eb      	uxtb	r3, r5
   13604:	9300      	str	r3, [sp, #0]
   13606:	4ab1      	ldr	r2, [pc, #708]	; (138cc <LORAWAN_RxDone+0x320>)
   13608:	003b      	movs	r3, r7
   1360a:	9907      	ldr	r1, [sp, #28]
   1360c:	4eb0      	ldr	r6, [pc, #704]	; (138d0 <LORAWAN_RxDone+0x324>)
   1360e:	47b0      	blx	r6
   13610:	2204      	movs	r2, #4
   13612:	49ae      	ldr	r1, [pc, #696]	; (138cc <LORAWAN_RxDone+0x320>)
   13614:	4baf      	ldr	r3, [pc, #700]	; (138d4 <LORAWAN_RxDone+0x328>)
   13616:	a810      	add	r0, sp, #64	; 0x40
   13618:	4798      	blx	r3
   1361a:	9e10      	ldr	r6, [sp, #64]	; 0x40
   1361c:	1979      	adds	r1, r7, r5
   1361e:	2204      	movs	r2, #4
   13620:	4bac      	ldr	r3, [pc, #688]	; (138d4 <LORAWAN_RxDone+0x328>)
   13622:	a810      	add	r0, sp, #64	; 0x40
   13624:	960d      	str	r6, [sp, #52]	; 0x34
   13626:	4798      	blx	r3
   13628:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1362a:	4ba6      	ldr	r3, [pc, #664]	; (138c4 <LORAWAN_RxDone+0x318>)
   1362c:	210e      	movs	r1, #14
   1362e:	42b2      	cmp	r2, r6
   13630:	d029      	beq.n	13686 <LORAWAN_RxDone+0xda>
   13632:	001a      	movs	r2, r3
   13634:	3284      	adds	r2, #132	; 0x84
   13636:	7812      	ldrb	r2, [r2, #0]
   13638:	400a      	ands	r2, r1
   1363a:	2a0a      	cmp	r2, #10
   1363c:	d005      	beq.n	1364a <LORAWAN_RxDone+0x9e>
   1363e:	2a06      	cmp	r2, #6
   13640:	d106      	bne.n	13650 <LORAWAN_RxDone+0xa4>
   13642:	33f9      	adds	r3, #249	; 0xf9
   13644:	781b      	ldrb	r3, [r3, #0]
   13646:	2b00      	cmp	r3, #0
   13648:	d002      	beq.n	13650 <LORAWAN_RxDone+0xa4>
   1364a:	2018      	movs	r0, #24
   1364c:	4ba2      	ldr	r3, [pc, #648]	; (138d8 <LORAWAN_RxDone+0x32c>)
   1364e:	4798      	blx	r3
   13650:	4ba2      	ldr	r3, [pc, #648]	; (138dc <LORAWAN_RxDone+0x330>)
   13652:	4798      	blx	r3
   13654:	e1d0      	b.n	139f8 <LORAWAN_RxDone+0x44c>
   13656:	9b06      	ldr	r3, [sp, #24]
   13658:	9a07      	ldr	r2, [sp, #28]
   1365a:	2100      	movs	r1, #0
   1365c:	1a98      	subs	r0, r3, r2
   1365e:	1838      	adds	r0, r7, r0
   13660:	4662      	mov	r2, ip
   13662:	4b9f      	ldr	r3, [pc, #636]	; (138e0 <LORAWAN_RxDone+0x334>)
   13664:	4798      	blx	r3
   13666:	2800      	cmp	r0, #0
   13668:	d006      	beq.n	13678 <LORAWAN_RxDone+0xcc>
   1366a:	4b9b      	ldr	r3, [pc, #620]	; (138d8 <LORAWAN_RxDone+0x32c>)
   1366c:	4798      	blx	r3
   1366e:	4b9b      	ldr	r3, [pc, #620]	; (138dc <LORAWAN_RxDone+0x330>)
   13670:	4798      	blx	r3
   13672:	201f      	movs	r0, #31
   13674:	b013      	add	sp, #76	; 0x4c
   13676:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13678:	9b07      	ldr	r3, [sp, #28]
   1367a:	2b10      	cmp	r3, #16
   1367c:	d901      	bls.n	13682 <LORAWAN_RxDone+0xd6>
   1367e:	3b10      	subs	r3, #16
   13680:	e7b5      	b.n	135ee <LORAWAN_RxDone+0x42>
   13682:	9007      	str	r0, [sp, #28]
   13684:	e7b5      	b.n	135f2 <LORAWAN_RxDone+0x46>
   13686:	001a      	movs	r2, r3
   13688:	3284      	adds	r2, #132	; 0x84
   1368a:	7812      	ldrb	r2, [r2, #0]
   1368c:	400a      	ands	r2, r1
   1368e:	2a06      	cmp	r2, #6
   13690:	d103      	bne.n	1369a <LORAWAN_RxDone+0xee>
   13692:	33ec      	adds	r3, #236	; 0xec
   13694:	7818      	ldrb	r0, [r3, #0]
   13696:	4b93      	ldr	r3, [pc, #588]	; (138e4 <LORAWAN_RxDone+0x338>)
   13698:	4798      	blx	r3
   1369a:	7a3a      	ldrb	r2, [r7, #8]
   1369c:	79fb      	ldrb	r3, [r7, #7]
   1369e:	0212      	lsls	r2, r2, #8
   136a0:	431a      	orrs	r2, r3
   136a2:	7a7b      	ldrb	r3, [r7, #9]
   136a4:	2001      	movs	r0, #1
   136a6:	041b      	lsls	r3, r3, #16
   136a8:	431a      	orrs	r2, r3
   136aa:	7abb      	ldrb	r3, [r7, #10]
   136ac:	061b      	lsls	r3, r3, #24
   136ae:	4313      	orrs	r3, r2
   136b0:	0a19      	lsrs	r1, r3, #8
   136b2:	7063      	strb	r3, [r4, #1]
   136b4:	70a1      	strb	r1, [r4, #2]
   136b6:	0c19      	lsrs	r1, r3, #16
   136b8:	0e1b      	lsrs	r3, r3, #24
   136ba:	70e1      	strb	r1, [r4, #3]
   136bc:	7123      	strb	r3, [r4, #4]
   136be:	240f      	movs	r4, #15
   136c0:	2103      	movs	r1, #3
   136c2:	4b89      	ldr	r3, [pc, #548]	; (138e8 <LORAWAN_RxDone+0x33c>)
   136c4:	4798      	blx	r3
   136c6:	7b38      	ldrb	r0, [r7, #12]
   136c8:	4b88      	ldr	r3, [pc, #544]	; (138ec <LORAWAN_RxDone+0x340>)
   136ca:	4020      	ands	r0, r4
   136cc:	4798      	blx	r3
   136ce:	7af8      	ldrb	r0, [r7, #11]
   136d0:	4b87      	ldr	r3, [pc, #540]	; (138f0 <LORAWAN_RxDone+0x344>)
   136d2:	0641      	lsls	r1, r0, #25
   136d4:	0700      	lsls	r0, r0, #28
   136d6:	0f49      	lsrs	r1, r1, #29
   136d8:	0f00      	lsrs	r0, r0, #28
   136da:	4798      	blx	r3
   136dc:	4b85      	ldr	r3, [pc, #532]	; (138f4 <LORAWAN_RxDone+0x348>)
   136de:	2100      	movs	r1, #0
   136e0:	203b      	movs	r0, #59	; 0x3b
   136e2:	4798      	blx	r3
   136e4:	9b06      	ldr	r3, [sp, #24]
   136e6:	2b21      	cmp	r3, #33	; 0x21
   136e8:	d000      	beq.n	136ec <LORAWAN_RxDone+0x140>
   136ea:	e08c      	b.n	13806 <LORAWAN_RxDone+0x25a>
   136ec:	251a      	movs	r5, #26
   136ee:	ab04      	add	r3, sp, #16
   136f0:	18ed      	adds	r5, r5, r3
   136f2:	002a      	movs	r2, r5
   136f4:	4b80      	ldr	r3, [pc, #512]	; (138f8 <LORAWAN_RxDone+0x34c>)
   136f6:	4981      	ldr	r1, [pc, #516]	; (138fc <LORAWAN_RxDone+0x350>)
   136f8:	2007      	movs	r0, #7
   136fa:	4798      	blx	r3
   136fc:	782b      	ldrb	r3, [r5, #0]
   136fe:	2bff      	cmp	r3, #255	; 0xff
   13700:	d100      	bne.n	13704 <LORAWAN_RxDone+0x158>
   13702:	e080      	b.n	13806 <LORAWAN_RxDone+0x25a>
   13704:	2350      	movs	r3, #80	; 0x50
   13706:	43a3      	bics	r3, r4
   13708:	9308      	str	r3, [sp, #32]
   1370a:	003b      	movs	r3, r7
   1370c:	330d      	adds	r3, #13
   1370e:	9306      	str	r3, [sp, #24]
   13710:	2600      	movs	r6, #0
   13712:	2203      	movs	r2, #3
   13714:	9906      	ldr	r1, [sp, #24]
   13716:	4b6f      	ldr	r3, [pc, #444]	; (138d4 <LORAWAN_RxDone+0x328>)
   13718:	a80e      	add	r0, sp, #56	; 0x38
   1371a:	960e      	str	r6, [sp, #56]	; 0x38
   1371c:	4798      	blx	r3
   1371e:	2364      	movs	r3, #100	; 0x64
   13720:	990e      	ldr	r1, [sp, #56]	; 0x38
   13722:	aa04      	add	r2, sp, #16
   13724:	4359      	muls	r1, r3
   13726:	3b4a      	subs	r3, #74	; 0x4a
   13728:	189b      	adds	r3, r3, r2
   1372a:	7818      	ldrb	r0, [r3, #0]
   1372c:	9b07      	ldr	r3, [sp, #28]
   1372e:	910e      	str	r1, [sp, #56]	; 0x38
   13730:	1818      	adds	r0, r3, r0
   13732:	b2c0      	uxtb	r0, r0
   13734:	76d0      	strb	r0, [r2, #27]
   13736:	42b1      	cmp	r1, r6
   13738:	d100      	bne.n	1373c <LORAWAN_RxDone+0x190>
   1373a:	e0a7      	b.n	1388c <LORAWAN_RxDone+0x2e0>
   1373c:	466b      	mov	r3, sp
   1373e:	2220      	movs	r2, #32
   13740:	189b      	adds	r3, r3, r2
   13742:	781b      	ldrb	r3, [r3, #0]
   13744:	ad10      	add	r5, sp, #64	; 0x40
   13746:	ac0b      	add	r4, sp, #44	; 0x2c
   13748:	7128      	strb	r0, [r5, #4]
   1374a:	9110      	str	r1, [sp, #64]	; 0x40
   1374c:	7020      	strb	r0, [r4, #0]
   1374e:	7063      	strb	r3, [r4, #1]
   13750:	0029      	movs	r1, r5
   13752:	2002      	movs	r0, #2
   13754:	4b6a      	ldr	r3, [pc, #424]	; (13900 <LORAWAN_RxDone+0x354>)
   13756:	4798      	blx	r3
   13758:	2808      	cmp	r0, #8
   1375a:	d140      	bne.n	137de <LORAWAN_RxDone+0x232>
   1375c:	0029      	movs	r1, r5
   1375e:	0030      	movs	r0, r6
   13760:	4b64      	ldr	r3, [pc, #400]	; (138f4 <LORAWAN_RxDone+0x348>)
   13762:	4798      	blx	r3
   13764:	ad0c      	add	r5, sp, #48	; 0x30
   13766:	0021      	movs	r1, r4
   13768:	4b62      	ldr	r3, [pc, #392]	; (138f4 <LORAWAN_RxDone+0x348>)
   1376a:	2012      	movs	r0, #18
   1376c:	4798      	blx	r3
   1376e:	0031      	movs	r1, r6
   13770:	002a      	movs	r2, r5
   13772:	4e61      	ldr	r6, [pc, #388]	; (138f8 <LORAWAN_RxDone+0x34c>)
   13774:	2014      	movs	r0, #20
   13776:	47b0      	blx	r6
   13778:	4c52      	ldr	r4, [pc, #328]	; (138c4 <LORAWAN_RxDone+0x318>)
   1377a:	782a      	ldrb	r2, [r5, #0]
   1377c:	0023      	movs	r3, r4
   1377e:	33f3      	adds	r3, #243	; 0xf3
   13780:	701a      	strb	r2, [r3, #0]
   13782:	0023      	movs	r3, r4
   13784:	786a      	ldrb	r2, [r5, #1]
   13786:	2522      	movs	r5, #34	; 0x22
   13788:	33f4      	adds	r3, #244	; 0xf4
   1378a:	701a      	strb	r2, [r3, #0]
   1378c:	4b5d      	ldr	r3, [pc, #372]	; (13904 <LORAWAN_RxDone+0x358>)
   1378e:	4798      	blx	r3
   13790:	ab04      	add	r3, sp, #16
   13792:	18ed      	adds	r5, r5, r3
   13794:	231b      	movs	r3, #27
   13796:	a904      	add	r1, sp, #16
   13798:	185b      	adds	r3, r3, r1
   1379a:	0019      	movs	r1, r3
   1379c:	002a      	movs	r2, r5
   1379e:	201e      	movs	r0, #30
   137a0:	47b0      	blx	r6
   137a2:	0023      	movs	r3, r4
   137a4:	33ff      	adds	r3, #255	; 0xff
   137a6:	7f5b      	ldrb	r3, [r3, #29]
   137a8:	079b      	lsls	r3, r3, #30
   137aa:	d508      	bpl.n	137be <LORAWAN_RxDone+0x212>
   137ac:	ab04      	add	r3, sp, #16
   137ae:	7edb      	ldrb	r3, [r3, #27]
   137b0:	a90f      	add	r1, sp, #60	; 0x3c
   137b2:	708b      	strb	r3, [r1, #2]
   137b4:	882b      	ldrh	r3, [r5, #0]
   137b6:	201e      	movs	r0, #30
   137b8:	800b      	strh	r3, [r1, #0]
   137ba:	4b4e      	ldr	r3, [pc, #312]	; (138f4 <LORAWAN_RxDone+0x348>)
   137bc:	4798      	blx	r3
   137be:	231b      	movs	r3, #27
   137c0:	aa04      	add	r2, sp, #16
   137c2:	189b      	adds	r3, r3, r2
   137c4:	7818      	ldrb	r0, [r3, #0]
   137c6:	2101      	movs	r1, #1
   137c8:	4b4f      	ldr	r3, [pc, #316]	; (13908 <LORAWAN_RxDone+0x35c>)
   137ca:	4798      	blx	r3
   137cc:	2204      	movs	r2, #4
   137ce:	3484      	adds	r4, #132	; 0x84
   137d0:	7863      	ldrb	r3, [r4, #1]
   137d2:	210b      	movs	r1, #11
   137d4:	4313      	orrs	r3, r2
   137d6:	7063      	strb	r3, [r4, #1]
   137d8:	2001      	movs	r0, #1
   137da:	4b43      	ldr	r3, [pc, #268]	; (138e8 <LORAWAN_RxDone+0x33c>)
   137dc:	4798      	blx	r3
   137de:	9b07      	ldr	r3, [sp, #28]
   137e0:	3301      	adds	r3, #1
   137e2:	b2db      	uxtb	r3, r3
   137e4:	9307      	str	r3, [sp, #28]
   137e6:	9b06      	ldr	r3, [sp, #24]
   137e8:	3303      	adds	r3, #3
   137ea:	9306      	str	r3, [sp, #24]
   137ec:	9b07      	ldr	r3, [sp, #28]
   137ee:	2b05      	cmp	r3, #5
   137f0:	d18e      	bne.n	13710 <LORAWAN_RxDone+0x164>
   137f2:	2204      	movs	r2, #4
   137f4:	4b33      	ldr	r3, [pc, #204]	; (138c4 <LORAWAN_RxDone+0x318>)
   137f6:	2001      	movs	r0, #1
   137f8:	3384      	adds	r3, #132	; 0x84
   137fa:	7859      	ldrb	r1, [r3, #1]
   137fc:	430a      	orrs	r2, r1
   137fe:	705a      	strb	r2, [r3, #1]
   13800:	210b      	movs	r1, #11
   13802:	4b39      	ldr	r3, [pc, #228]	; (138e8 <LORAWAN_RxDone+0x33c>)
   13804:	4798      	blx	r3
   13806:	4d41      	ldr	r5, [pc, #260]	; (1390c <LORAWAN_RxDone+0x360>)
   13808:	1c7e      	adds	r6, r7, #1
   1380a:	3704      	adds	r7, #4
   1380c:	0028      	movs	r0, r5
   1380e:	003a      	movs	r2, r7
   13810:	0031      	movs	r1, r6
   13812:	4b3f      	ldr	r3, [pc, #252]	; (13910 <LORAWAN_RxDone+0x364>)
   13814:	4798      	blx	r3
   13816:	2302      	movs	r3, #2
   13818:	4c2a      	ldr	r4, [pc, #168]	; (138c4 <LORAWAN_RxDone+0x318>)
   1381a:	0028      	movs	r0, r5
   1381c:	7563      	strb	r3, [r4, #21]
   1381e:	4a2a      	ldr	r2, [pc, #168]	; (138c8 <LORAWAN_RxDone+0x31c>)
   13820:	3b01      	subs	r3, #1
   13822:	2100      	movs	r1, #0
   13824:	4d3b      	ldr	r5, [pc, #236]	; (13914 <LORAWAN_RxDone+0x368>)
   13826:	47a8      	blx	r5
   13828:	2800      	cmp	r0, #0
   1382a:	d003      	beq.n	13834 <LORAWAN_RxDone+0x288>
   1382c:	4b2a      	ldr	r3, [pc, #168]	; (138d8 <LORAWAN_RxDone+0x32c>)
   1382e:	4798      	blx	r3
   13830:	4b2a      	ldr	r3, [pc, #168]	; (138dc <LORAWAN_RxDone+0x330>)
   13832:	4798      	blx	r3
   13834:	2105      	movs	r1, #5
   13836:	4b2c      	ldr	r3, [pc, #176]	; (138e8 <LORAWAN_RxDone+0x33c>)
   13838:	2001      	movs	r0, #1
   1383a:	4798      	blx	r3
   1383c:	4d36      	ldr	r5, [pc, #216]	; (13918 <LORAWAN_RxDone+0x36c>)
   1383e:	003a      	movs	r2, r7
   13840:	0028      	movs	r0, r5
   13842:	0031      	movs	r1, r6
   13844:	4b32      	ldr	r3, [pc, #200]	; (13910 <LORAWAN_RxDone+0x364>)
   13846:	4798      	blx	r3
   13848:	2301      	movs	r3, #1
   1384a:	0028      	movs	r0, r5
   1384c:	7163      	strb	r3, [r4, #5]
   1384e:	4a1e      	ldr	r2, [pc, #120]	; (138c8 <LORAWAN_RxDone+0x31c>)
   13850:	18db      	adds	r3, r3, r3
   13852:	2100      	movs	r1, #0
   13854:	4d2f      	ldr	r5, [pc, #188]	; (13914 <LORAWAN_RxDone+0x368>)
   13856:	47a8      	blx	r5
   13858:	2800      	cmp	r0, #0
   1385a:	d003      	beq.n	13864 <LORAWAN_RxDone+0x2b8>
   1385c:	4b1e      	ldr	r3, [pc, #120]	; (138d8 <LORAWAN_RxDone+0x32c>)
   1385e:	4798      	blx	r3
   13860:	4b1e      	ldr	r3, [pc, #120]	; (138dc <LORAWAN_RxDone+0x330>)
   13862:	4798      	blx	r3
   13864:	4b20      	ldr	r3, [pc, #128]	; (138e8 <LORAWAN_RxDone+0x33c>)
   13866:	2104      	movs	r1, #4
   13868:	2001      	movs	r0, #1
   1386a:	4798      	blx	r3
   1386c:	4b2b      	ldr	r3, [pc, #172]	; (1391c <LORAWAN_RxDone+0x370>)
   1386e:	5ce3      	ldrb	r3, [r4, r3]
   13870:	2b00      	cmp	r3, #0
   13872:	d017      	beq.n	138a4 <LORAWAN_RxDone+0x2f8>
   13874:	492a      	ldr	r1, [pc, #168]	; (13920 <LORAWAN_RxDone+0x374>)
   13876:	2002      	movs	r0, #2
   13878:	4c2a      	ldr	r4, [pc, #168]	; (13924 <LORAWAN_RxDone+0x378>)
   1387a:	47a0      	blx	r4
   1387c:	2800      	cmp	r0, #0
   1387e:	d008      	beq.n	13892 <LORAWAN_RxDone+0x2e6>
   13880:	4b15      	ldr	r3, [pc, #84]	; (138d8 <LORAWAN_RxDone+0x32c>)
   13882:	4798      	blx	r3
   13884:	4b15      	ldr	r3, [pc, #84]	; (138dc <LORAWAN_RxDone+0x330>)
   13886:	4798      	blx	r3
   13888:	2023      	movs	r0, #35	; 0x23
   1388a:	e6f3      	b.n	13674 <LORAWAN_RxDone+0xc8>
   1388c:	4b1e      	ldr	r3, [pc, #120]	; (13908 <LORAWAN_RxDone+0x35c>)
   1388e:	4798      	blx	r3
   13890:	e7a5      	b.n	137de <LORAWAN_RxDone+0x232>
   13892:	4925      	ldr	r1, [pc, #148]	; (13928 <LORAWAN_RxDone+0x37c>)
   13894:	2001      	movs	r0, #1
   13896:	47a0      	blx	r4
   13898:	2800      	cmp	r0, #0
   1389a:	d1f1      	bne.n	13880 <LORAWAN_RxDone+0x2d4>
   1389c:	4b23      	ldr	r3, [pc, #140]	; (1392c <LORAWAN_RxDone+0x380>)
   1389e:	4798      	blx	r3
   138a0:	2008      	movs	r0, #8
   138a2:	e6e7      	b.n	13674 <LORAWAN_RxDone+0xc8>
   138a4:	0020      	movs	r0, r4
   138a6:	0021      	movs	r1, r4
   138a8:	2210      	movs	r2, #16
   138aa:	3115      	adds	r1, #21
   138ac:	4d09      	ldr	r5, [pc, #36]	; (138d4 <LORAWAN_RxDone+0x328>)
   138ae:	3035      	adds	r0, #53	; 0x35
   138b0:	47a8      	blx	r5
   138b2:	0020      	movs	r0, r4
   138b4:	1d61      	adds	r1, r4, #5
   138b6:	2210      	movs	r2, #16
   138b8:	3025      	adds	r0, #37	; 0x25
   138ba:	47a8      	blx	r5
   138bc:	e7ee      	b.n	1389c <LORAWAN_RxDone+0x2f0>
   138be:	46c0      	nop			; (mov r8, r8)
   138c0:	20003f10 	.word	0x20003f10
   138c4:	20003e8c 	.word	0x20003e8c
   138c8:	20003ed1 	.word	0x20003ed1
   138cc:	200023db 	.word	0x200023db
   138d0:	000078a5 	.word	0x000078a5
   138d4:	0001835b 	.word	0x0001835b
   138d8:	0001218d 	.word	0x0001218d
   138dc:	00013041 	.word	0x00013041
   138e0:	0000786d 	.word	0x0000786d
   138e4:	00010cb5 	.word	0x00010cb5
   138e8:	0000bbc5 	.word	0x0000bbc5
   138ec:	0001191d 	.word	0x0001191d
   138f0:	00012031 	.word	0x00012031
   138f4:	0001048d 	.word	0x0001048d
   138f8:	00010455 	.word	0x00010455
   138fc:	20003f73 	.word	0x20003f73
   13900:	00010471 	.word	0x00010471
   13904:	0001310d 	.word	0x0001310d
   13908:	0001355d 	.word	0x0001355d
   1390c:	20003ea1 	.word	0x20003ea1
   13910:	00011c49 	.word	0x00011c49
   13914:	00007895 	.word	0x00007895
   13918:	20003e91 	.word	0x20003e91
   1391c:	0000022d 	.word	0x0000022d
   13920:	20003eb1 	.word	0x20003eb1
   13924:	000078a1 	.word	0x000078a1
   13928:	20003ec1 	.word	0x20003ec1
   1392c:	00011b65 	.word	0x00011b65
   13930:	22bf      	movs	r2, #191	; 0xbf
   13932:	3e60      	subs	r6, #96	; 0x60
   13934:	4016      	ands	r6, r2
   13936:	d000      	beq.n	1393a <LORAWAN_RxDone+0x38e>
   13938:	e2b6      	b.n	13ea8 <LORAWAN_RxDone+0x8fc>
   1393a:	2501      	movs	r5, #1
   1393c:	422b      	tst	r3, r5
   1393e:	d100      	bne.n	13942 <LORAWAN_RxDone+0x396>
   13940:	e2b2      	b.n	13ea8 <LORAWAN_RxDone+0x8fc>
   13942:	7922      	ldrb	r2, [r4, #4]
   13944:	6823      	ldr	r3, [r4, #0]
   13946:	0612      	lsls	r2, r2, #24
   13948:	0a1b      	lsrs	r3, r3, #8
   1394a:	431a      	orrs	r2, r3
   1394c:	0023      	movs	r3, r4
   1394e:	33e0      	adds	r3, #224	; 0xe0
   13950:	701e      	strb	r6, [r3, #0]
   13952:	9207      	str	r2, [sp, #28]
   13954:	7882      	ldrb	r2, [r0, #2]
   13956:	7843      	ldrb	r3, [r0, #1]
   13958:	0212      	lsls	r2, r2, #8
   1395a:	431a      	orrs	r2, r3
   1395c:	78c3      	ldrb	r3, [r0, #3]
   1395e:	041b      	lsls	r3, r3, #16
   13960:	431a      	orrs	r2, r3
   13962:	7903      	ldrb	r3, [r0, #4]
   13964:	061b      	lsls	r3, r3, #24
   13966:	4313      	orrs	r3, r2
   13968:	9a07      	ldr	r2, [sp, #28]
   1396a:	429a      	cmp	r2, r3
   1396c:	d100      	bne.n	13970 <LORAWAN_RxDone+0x3c4>
   1396e:	e2cc      	b.n	13f0a <LORAWAN_RxDone+0x95e>
   13970:	ab04      	add	r3, sp, #16
   13972:	3521      	adds	r5, #33	; 0x21
   13974:	18ed      	adds	r5, r5, r3
   13976:	7a02      	ldrb	r2, [r0, #8]
   13978:	0949      	lsrs	r1, r1, #5
   1397a:	002b      	movs	r3, r5
   1397c:	4eda      	ldr	r6, [pc, #872]	; (13ce8 <LORAWAN_RxDone+0x73c>)
   1397e:	47b0      	blx	r6
   13980:	2808      	cmp	r0, #8
   13982:	d131      	bne.n	139e8 <LORAWAN_RxDone+0x43c>
   13984:	233c      	movs	r3, #60	; 0x3c
   13986:	7829      	ldrb	r1, [r5, #0]
   13988:	434b      	muls	r3, r1
   1398a:	001d      	movs	r5, r3
   1398c:	3535      	adds	r5, #53	; 0x35
   1398e:	35ff      	adds	r5, #255	; 0xff
   13990:	192d      	adds	r5, r5, r4
   13992:	18e4      	adds	r4, r4, r3
   13994:	0023      	movs	r3, r4
   13996:	33fc      	adds	r3, #252	; 0xfc
   13998:	6b58      	ldr	r0, [r3, #52]	; 0x34
   1399a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   1399c:	9308      	str	r3, [sp, #32]
   1399e:	79fb      	ldrb	r3, [r7, #7]
   139a0:	79ba      	ldrb	r2, [r7, #6]
   139a2:	021b      	lsls	r3, r3, #8
   139a4:	4313      	orrs	r3, r2
   139a6:	0022      	movs	r2, r4
   139a8:	3255      	adds	r2, #85	; 0x55
   139aa:	32ff      	adds	r2, #255	; 0xff
   139ac:	8816      	ldrh	r6, [r2, #0]
   139ae:	429e      	cmp	r6, r3
   139b0:	d908      	bls.n	139c4 <LORAWAN_RxDone+0x418>
   139b2:	3457      	adds	r4, #87	; 0x57
   139b4:	34ff      	adds	r4, #255	; 0xff
   139b6:	8823      	ldrh	r3, [r4, #0]
   139b8:	3301      	adds	r3, #1
   139ba:	8023      	strh	r3, [r4, #0]
   139bc:	79fb      	ldrb	r3, [r7, #7]
   139be:	79bc      	ldrb	r4, [r7, #6]
   139c0:	021b      	lsls	r3, r3, #8
   139c2:	4323      	orrs	r3, r4
   139c4:	8013      	strh	r3, [r2, #0]
   139c6:	9b06      	ldr	r3, [sp, #24]
   139c8:	9000      	str	r0, [sp, #0]
   139ca:	1f1a      	subs	r2, r3, #4
   139cc:	233c      	movs	r3, #60	; 0x3c
   139ce:	434b      	muls	r3, r1
   139d0:	49c6      	ldr	r1, [pc, #792]	; (13cec <LORAWAN_RxDone+0x740>)
   139d2:	b2d2      	uxtb	r2, r2
   139d4:	18c9      	adds	r1, r1, r3
   139d6:	31fc      	adds	r1, #252	; 0xfc
   139d8:	2349      	movs	r3, #73	; 0x49
   139da:	6d89      	ldr	r1, [r1, #88]	; 0x58
   139dc:	2001      	movs	r0, #1
   139de:	4cc4      	ldr	r4, [pc, #784]	; (13cf0 <LORAWAN_RxDone+0x744>)
   139e0:	47a0      	blx	r4
   139e2:	2301      	movs	r3, #1
   139e4:	9307      	str	r3, [sp, #28]
   139e6:	e2a6      	b.n	13f36 <LORAWAN_RxDone+0x98a>
   139e8:	220e      	movs	r2, #14
   139ea:	4bc2      	ldr	r3, [pc, #776]	; (13cf4 <LORAWAN_RxDone+0x748>)
   139ec:	781b      	ldrb	r3, [r3, #0]
   139ee:	4013      	ands	r3, r2
   139f0:	2b0a      	cmp	r3, #10
   139f2:	d008      	beq.n	13a06 <LORAWAN_RxDone+0x45a>
   139f4:	2b06      	cmp	r3, #6
   139f6:	d001      	beq.n	139fc <LORAWAN_RxDone+0x450>
   139f8:	200a      	movs	r0, #10
   139fa:	e63b      	b.n	13674 <LORAWAN_RxDone+0xc8>
   139fc:	0023      	movs	r3, r4
   139fe:	33f9      	adds	r3, #249	; 0xf9
   13a00:	781b      	ldrb	r3, [r3, #0]
   13a02:	2b00      	cmp	r3, #0
   13a04:	d0f8      	beq.n	139f8 <LORAWAN_RxDone+0x44c>
   13a06:	2220      	movs	r2, #32
   13a08:	201e      	movs	r0, #30
   13a0a:	3494      	adds	r4, #148	; 0x94
   13a0c:	7823      	ldrb	r3, [r4, #0]
   13a0e:	4393      	bics	r3, r2
   13a10:	7023      	strb	r3, [r4, #0]
   13a12:	4bb9      	ldr	r3, [pc, #740]	; (13cf8 <LORAWAN_RxDone+0x74c>)
   13a14:	e61b      	b.n	1364e <LORAWAN_RxDone+0xa2>
   13a16:	0022      	movs	r2, r4
   13a18:	2102      	movs	r1, #2
   13a1a:	e2a6      	b.n	13f6a <LORAWAN_RxDone+0x9be>
   13a1c:	9b08      	ldr	r3, [sp, #32]
   13a1e:	328c      	adds	r2, #140	; 0x8c
   13a20:	6013      	str	r3, [r2, #0]
   13a22:	e2e3      	b.n	13fec <LORAWAN_RxDone+0xa40>
   13a24:	9b07      	ldr	r3, [sp, #28]
   13a26:	4cb1      	ldr	r4, [pc, #708]	; (13cec <LORAWAN_RxDone+0x740>)
   13a28:	2b00      	cmp	r3, #0
   13a2a:	d000      	beq.n	13a2e <LORAWAN_RxDone+0x482>
   13a2c:	e224      	b.n	13e78 <LORAWAN_RxDone+0x8cc>
   13a2e:	466a      	mov	r2, sp
   13a30:	0023      	movs	r3, r4
   13a32:	7f12      	ldrb	r2, [r2, #28]
   13a34:	33e3      	adds	r3, #227	; 0xe3
   13a36:	701a      	strb	r2, [r3, #0]
   13a38:	797b      	ldrb	r3, [r7, #5]
   13a3a:	2b7f      	cmp	r3, #127	; 0x7f
   13a3c:	d909      	bls.n	13a52 <LORAWAN_RxDone+0x4a6>
   13a3e:	0022      	movs	r2, r4
   13a40:	2320      	movs	r3, #32
   13a42:	3284      	adds	r2, #132	; 0x84
   13a44:	7811      	ldrb	r1, [r2, #0]
   13a46:	2001      	movs	r0, #1
   13a48:	430b      	orrs	r3, r1
   13a4a:	7013      	strb	r3, [r2, #0]
   13a4c:	210b      	movs	r1, #11
   13a4e:	4bab      	ldr	r3, [pc, #684]	; (13cfc <LORAWAN_RxDone+0x750>)
   13a50:	4798      	blx	r3
   13a52:	797b      	ldrb	r3, [r7, #5]
   13a54:	06db      	lsls	r3, r3, #27
   13a56:	d505      	bpl.n	13a64 <LORAWAN_RxDone+0x4b8>
   13a58:	0022      	movs	r2, r4
   13a5a:	2308      	movs	r3, #8
   13a5c:	3294      	adds	r2, #148	; 0x94
   13a5e:	7811      	ldrb	r1, [r2, #0]
   13a60:	430b      	orrs	r3, r1
   13a62:	7013      	strb	r3, [r2, #0]
   13a64:	797b      	ldrb	r3, [r7, #5]
   13a66:	065b      	lsls	r3, r3, #25
   13a68:	d505      	bpl.n	13a76 <LORAWAN_RxDone+0x4ca>
   13a6a:	0022      	movs	r2, r4
   13a6c:	2310      	movs	r3, #16
   13a6e:	3294      	adds	r2, #148	; 0x94
   13a70:	7811      	ldrb	r1, [r2, #0]
   13a72:	430b      	orrs	r3, r1
   13a74:	7013      	strb	r3, [r2, #0]
   13a76:	221f      	movs	r2, #31
   13a78:	783b      	ldrb	r3, [r7, #0]
   13a7a:	4393      	bics	r3, r2
   13a7c:	2ba0      	cmp	r3, #160	; 0xa0
   13a7e:	d105      	bne.n	13a8c <LORAWAN_RxDone+0x4e0>
   13a80:	0022      	movs	r2, r4
   13a82:	3294      	adds	r2, #148	; 0x94
   13a84:	7811      	ldrb	r1, [r2, #0]
   13a86:	3b9e      	subs	r3, #158	; 0x9e
   13a88:	430b      	orrs	r3, r1
   13a8a:	7013      	strb	r3, [r2, #0]
   13a8c:	7979      	ldrb	r1, [r7, #5]
   13a8e:	070b      	lsls	r3, r1, #28
   13a90:	d100      	bne.n	13a94 <LORAWAN_RxDone+0x4e8>
   13a92:	e0d4      	b.n	13c3e <LORAWAN_RxDone+0x692>
   13a94:	0709      	lsls	r1, r1, #28
   13a96:	0f09      	lsrs	r1, r1, #28
   13a98:	187b      	adds	r3, r7, r1
   13a9a:	7a1b      	ldrb	r3, [r3, #8]
   13a9c:	2b00      	cmp	r3, #0
   13a9e:	d100      	bne.n	13aa2 <LORAWAN_RxDone+0x4f6>
   13aa0:	e0a9      	b.n	13bf6 <LORAWAN_RxDone+0x64a>
   13aa2:	0038      	movs	r0, r7
   13aa4:	4b96      	ldr	r3, [pc, #600]	; (13d00 <LORAWAN_RxDone+0x754>)
   13aa6:	3008      	adds	r0, #8
   13aa8:	4798      	blx	r3
   13aaa:	2301      	movs	r3, #1
   13aac:	0006      	movs	r6, r0
   13aae:	9307      	str	r3, [sp, #28]
   13ab0:	7978      	ldrb	r0, [r7, #5]
   13ab2:	9906      	ldr	r1, [sp, #24]
   13ab4:	0703      	lsls	r3, r0, #28
   13ab6:	0f1b      	lsrs	r3, r3, #28
   13ab8:	001a      	movs	r2, r3
   13aba:	320c      	adds	r2, #12
   13abc:	4291      	cmp	r1, r2
   13abe:	d100      	bne.n	13ac2 <LORAWAN_RxDone+0x516>
   13ac0:	e0f1      	b.n	13ca6 <LORAWAN_RxDone+0x6fa>
   13ac2:	7832      	ldrb	r2, [r6, #0]
   13ac4:	1ac9      	subs	r1, r1, r3
   13ac6:	b2c9      	uxtb	r1, r1
   13ac8:	9208      	str	r2, [sp, #32]
   13aca:	000a      	movs	r2, r1
   13acc:	3319      	adds	r3, #25
   13ace:	3a0c      	subs	r2, #12
   13ad0:	469c      	mov	ip, r3
   13ad2:	9b08      	ldr	r3, [sp, #32]
   13ad4:	b2d2      	uxtb	r2, r2
   13ad6:	9206      	str	r2, [sp, #24]
   13ad8:	1c75      	adds	r5, r6, #1
   13ada:	4a84      	ldr	r2, [pc, #528]	; (13cec <LORAWAN_RxDone+0x740>)
   13adc:	2b00      	cmp	r3, #0
   13ade:	d100      	bne.n	13ae2 <LORAWAN_RxDone+0x536>
   13ae0:	e0b0      	b.n	13c44 <LORAWAN_RxDone+0x698>
   13ae2:	6813      	ldr	r3, [r2, #0]
   13ae4:	0010      	movs	r0, r2
   13ae6:	7912      	ldrb	r2, [r2, #4]
   13ae8:	0a1c      	lsrs	r4, r3, #8
   13aea:	0612      	lsls	r2, r2, #24
   13aec:	4322      	orrs	r2, r4
   13aee:	9204      	str	r2, [sp, #16]
   13af0:	4a84      	ldr	r2, [pc, #528]	; (13d04 <LORAWAN_RxDone+0x758>)
   13af2:	4663      	mov	r3, ip
   13af4:	9203      	str	r2, [sp, #12]
   13af6:	466a      	mov	r2, sp
   13af8:	8493      	strh	r3, [r2, #36]	; 0x24
   13afa:	8c93      	ldrh	r3, [r2, #36]	; 0x24
   13afc:	2201      	movs	r2, #1
   13afe:	9302      	str	r3, [sp, #8]
   13b00:	4b81      	ldr	r3, [pc, #516]	; (13d08 <LORAWAN_RxDone+0x75c>)
   13b02:	308c      	adds	r0, #140	; 0x8c
   13b04:	390d      	subs	r1, #13
   13b06:	9201      	str	r2, [sp, #4]
   13b08:	9300      	str	r3, [sp, #0]
   13b0a:	6803      	ldr	r3, [r0, #0]
   13b0c:	b2c9      	uxtb	r1, r1
   13b0e:	0028      	movs	r0, r5
   13b10:	4c7e      	ldr	r4, [pc, #504]	; (13d0c <LORAWAN_RxDone+0x760>)
   13b12:	47a0      	blx	r4
   13b14:	2800      	cmp	r0, #0
   13b16:	d004      	beq.n	13b22 <LORAWAN_RxDone+0x576>
   13b18:	4b7d      	ldr	r3, [pc, #500]	; (13d10 <LORAWAN_RxDone+0x764>)
   13b1a:	4798      	blx	r3
   13b1c:	201f      	movs	r0, #31
   13b1e:	4b76      	ldr	r3, [pc, #472]	; (13cf8 <LORAWAN_RxDone+0x74c>)
   13b20:	4798      	blx	r3
   13b22:	4c72      	ldr	r4, [pc, #456]	; (13cec <LORAWAN_RxDone+0x740>)
   13b24:	2300      	movs	r3, #0
   13b26:	0022      	movs	r2, r4
   13b28:	32ca      	adds	r2, #202	; 0xca
   13b2a:	8013      	strh	r3, [r2, #0]
   13b2c:	0022      	movs	r2, r4
   13b2e:	32f6      	adds	r2, #246	; 0xf6
   13b30:	7013      	strb	r3, [r2, #0]
   13b32:	0022      	movs	r2, r4
   13b34:	2110      	movs	r1, #16
   13b36:	3294      	adds	r2, #148	; 0x94
   13b38:	7813      	ldrb	r3, [r2, #0]
   13b3a:	438b      	bics	r3, r1
   13b3c:	7013      	strb	r3, [r2, #0]
   13b3e:	0023      	movs	r3, r4
   13b40:	2201      	movs	r2, #1
   13b42:	3384      	adds	r3, #132	; 0x84
   13b44:	7859      	ldrb	r1, [r3, #1]
   13b46:	430a      	orrs	r2, r1
   13b48:	705a      	strb	r2, [r3, #1]
   13b4a:	220e      	movs	r2, #14
   13b4c:	781b      	ldrb	r3, [r3, #0]
   13b4e:	4013      	ands	r3, r2
   13b50:	2b06      	cmp	r3, #6
   13b52:	d104      	bne.n	13b5e <LORAWAN_RxDone+0x5b2>
   13b54:	0023      	movs	r3, r4
   13b56:	33ee      	adds	r3, #238	; 0xee
   13b58:	7818      	ldrb	r0, [r3, #0]
   13b5a:	4b6e      	ldr	r3, [pc, #440]	; (13d14 <LORAWAN_RxDone+0x768>)
   13b5c:	4798      	blx	r3
   13b5e:	0025      	movs	r5, r4
   13b60:	2201      	movs	r2, #1
   13b62:	3594      	adds	r5, #148	; 0x94
   13b64:	782b      	ldrb	r3, [r5, #0]
   13b66:	4213      	tst	r3, r2
   13b68:	d100      	bne.n	13b6c <LORAWAN_RxDone+0x5c0>
   13b6a:	e107      	b.n	13d7c <LORAWAN_RxDone+0x7d0>
   13b6c:	797b      	ldrb	r3, [r7, #5]
   13b6e:	321f      	adds	r2, #31
   13b70:	4213      	tst	r3, r2
   13b72:	d100      	bne.n	13b76 <LORAWAN_RxDone+0x5ca>
   13b74:	e0e8      	b.n	13d48 <LORAWAN_RxDone+0x79c>
   13b76:	4b68      	ldr	r3, [pc, #416]	; (13d18 <LORAWAN_RxDone+0x76c>)
   13b78:	4798      	blx	r3
   13b7a:	0023      	movs	r3, r4
   13b7c:	2101      	movs	r1, #1
   13b7e:	3384      	adds	r3, #132	; 0x84
   13b80:	785a      	ldrb	r2, [r3, #1]
   13b82:	438a      	bics	r2, r1
   13b84:	705a      	strb	r2, [r3, #1]
   13b86:	9a08      	ldr	r2, [sp, #32]
   13b88:	2a00      	cmp	r2, #0
   13b8a:	d100      	bne.n	13b8e <LORAWAN_RxDone+0x5e2>
   13b8c:	e093      	b.n	13cb6 <LORAWAN_RxDone+0x70a>
   13b8e:	9a06      	ldr	r2, [sp, #24]
   13b90:	0031      	movs	r1, r6
   13b92:	0038      	movs	r0, r7
   13b94:	4b61      	ldr	r3, [pc, #388]	; (13d1c <LORAWAN_RxDone+0x770>)
   13b96:	4798      	blx	r3
   13b98:	4b56      	ldr	r3, [pc, #344]	; (13cf4 <LORAWAN_RxDone+0x748>)
   13b9a:	4d54      	ldr	r5, [pc, #336]	; (13cec <LORAWAN_RxDone+0x740>)
   13b9c:	781b      	ldrb	r3, [r3, #0]
   13b9e:	06db      	lsls	r3, r3, #27
   13ba0:	d400      	bmi.n	13ba4 <LORAWAN_RxDone+0x5f8>
   13ba2:	e160      	b.n	13e66 <LORAWAN_RxDone+0x8ba>
   13ba4:	2220      	movs	r2, #32
   13ba6:	4b5e      	ldr	r3, [pc, #376]	; (13d20 <LORAWAN_RxDone+0x774>)
   13ba8:	781b      	ldrb	r3, [r3, #0]
   13baa:	401a      	ands	r2, r3
   13bac:	9206      	str	r2, [sp, #24]
   13bae:	d000      	beq.n	13bb2 <LORAWAN_RxDone+0x606>
   13bb0:	e159      	b.n	13e66 <LORAWAN_RxDone+0x8ba>
   13bb2:	320a      	adds	r2, #10
   13bb4:	4213      	tst	r3, r2
   13bb6:	d100      	bne.n	13bba <LORAWAN_RxDone+0x60e>
   13bb8:	e155      	b.n	13e66 <LORAWAN_RxDone+0x8ba>
   13bba:	002b      	movs	r3, r5
   13bbc:	33f5      	adds	r3, #245	; 0xf5
   13bbe:	781b      	ldrb	r3, [r3, #0]
   13bc0:	a90f      	add	r1, sp, #60	; 0x3c
   13bc2:	704b      	strb	r3, [r1, #1]
   13bc4:	002e      	movs	r6, r5
   13bc6:	2301      	movs	r3, #1
   13bc8:	36e7      	adds	r6, #231	; 0xe7
   13bca:	700b      	strb	r3, [r1, #0]
   13bcc:	7833      	ldrb	r3, [r6, #0]
   13bce:	aa0e      	add	r2, sp, #56	; 0x38
   13bd0:	202f      	movs	r0, #47	; 0x2f
   13bd2:	4f54      	ldr	r7, [pc, #336]	; (13d24 <LORAWAN_RxDone+0x778>)
   13bd4:	708b      	strb	r3, [r1, #2]
   13bd6:	47b8      	blx	r7
   13bd8:	9007      	str	r0, [sp, #28]
   13bda:	2808      	cmp	r0, #8
   13bdc:	d000      	beq.n	13be0 <LORAWAN_RxDone+0x634>
   13bde:	e0fb      	b.n	13dd8 <LORAWAN_RxDone+0x82c>
   13be0:	4b51      	ldr	r3, [pc, #324]	; (13d28 <LORAWAN_RxDone+0x77c>)
   13be2:	9806      	ldr	r0, [sp, #24]
   13be4:	4798      	blx	r3
   13be6:	4b4e      	ldr	r3, [pc, #312]	; (13d20 <LORAWAN_RxDone+0x774>)
   13be8:	9a07      	ldr	r2, [sp, #28]
   13bea:	781b      	ldrb	r3, [r3, #0]
   13bec:	4393      	bics	r3, r2
   13bee:	4a4c      	ldr	r2, [pc, #304]	; (13d20 <LORAWAN_RxDone+0x774>)
   13bf0:	7013      	strb	r3, [r2, #0]
   13bf2:	2001      	movs	r0, #1
   13bf4:	e53e      	b.n	13674 <LORAWAN_RxDone+0xc8>
   13bf6:	0023      	movs	r3, r4
   13bf8:	220e      	movs	r2, #14
   13bfa:	3384      	adds	r3, #132	; 0x84
   13bfc:	781b      	ldrb	r3, [r3, #0]
   13bfe:	4013      	ands	r3, r2
   13c00:	2b06      	cmp	r3, #6
   13c02:	d101      	bne.n	13c08 <LORAWAN_RxDone+0x65c>
   13c04:	4b49      	ldr	r3, [pc, #292]	; (13d2c <LORAWAN_RxDone+0x780>)
   13c06:	4798      	blx	r3
   13c08:	4949      	ldr	r1, [pc, #292]	; (13d30 <LORAWAN_RxDone+0x784>)
   13c0a:	784a      	ldrb	r2, [r1, #1]
   13c0c:	780b      	ldrb	r3, [r1, #0]
   13c0e:	0212      	lsls	r2, r2, #8
   13c10:	431a      	orrs	r2, r3
   13c12:	788b      	ldrb	r3, [r1, #2]
   13c14:	041b      	lsls	r3, r3, #16
   13c16:	431a      	orrs	r2, r3
   13c18:	78cb      	ldrb	r3, [r1, #3]
   13c1a:	061b      	lsls	r3, r3, #24
   13c1c:	4313      	orrs	r3, r2
   13c1e:	d008      	beq.n	13c32 <LORAWAN_RxDone+0x686>
   13c20:	0022      	movs	r2, r4
   13c22:	2120      	movs	r1, #32
   13c24:	3294      	adds	r2, #148	; 0x94
   13c26:	7813      	ldrb	r3, [r2, #0]
   13c28:	201e      	movs	r0, #30
   13c2a:	438b      	bics	r3, r1
   13c2c:	7013      	strb	r3, [r2, #0]
   13c2e:	4b32      	ldr	r3, [pc, #200]	; (13cf8 <LORAWAN_RxDone+0x74c>)
   13c30:	4798      	blx	r3
   13c32:	2300      	movs	r3, #0
   13c34:	34e0      	adds	r4, #224	; 0xe0
   13c36:	7023      	strb	r3, [r4, #0]
   13c38:	4b35      	ldr	r3, [pc, #212]	; (13d10 <LORAWAN_RxDone+0x764>)
   13c3a:	4798      	blx	r3
   13c3c:	e7d9      	b.n	13bf2 <LORAWAN_RxDone+0x646>
   13c3e:	003e      	movs	r6, r7
   13c40:	3608      	adds	r6, #8
   13c42:	e735      	b.n	13ab0 <LORAWAN_RxDone+0x504>
   13c44:	9b06      	ldr	r3, [sp, #24]
   13c46:	2b00      	cmp	r3, #0
   13c48:	d031      	beq.n	13cae <LORAWAN_RxDone+0x702>
   13c4a:	0703      	lsls	r3, r0, #28
   13c4c:	d1d3      	bne.n	13bf6 <LORAWAN_RxDone+0x64a>
   13c4e:	390d      	subs	r1, #13
   13c50:	6813      	ldr	r3, [r2, #0]
   13c52:	b2cc      	uxtb	r4, r1
   13c54:	0011      	movs	r1, r2
   13c56:	7912      	ldrb	r2, [r2, #4]
   13c58:	0a18      	lsrs	r0, r3, #8
   13c5a:	0612      	lsls	r2, r2, #24
   13c5c:	4302      	orrs	r2, r0
   13c5e:	9204      	str	r2, [sp, #16]
   13c60:	4a28      	ldr	r2, [pc, #160]	; (13d04 <LORAWAN_RxDone+0x758>)
   13c62:	4663      	mov	r3, ip
   13c64:	9203      	str	r2, [sp, #12]
   13c66:	466a      	mov	r2, sp
   13c68:	8313      	strh	r3, [r2, #24]
   13c6a:	8b13      	ldrh	r3, [r2, #24]
   13c6c:	318c      	adds	r1, #140	; 0x8c
   13c6e:	9302      	str	r3, [sp, #8]
   13c70:	2302      	movs	r3, #2
   13c72:	9301      	str	r3, [sp, #4]
   13c74:	4b2f      	ldr	r3, [pc, #188]	; (13d34 <LORAWAN_RxDone+0x788>)
   13c76:	2201      	movs	r2, #1
   13c78:	9300      	str	r3, [sp, #0]
   13c7a:	680b      	ldr	r3, [r1, #0]
   13c7c:	0028      	movs	r0, r5
   13c7e:	0021      	movs	r1, r4
   13c80:	4e22      	ldr	r6, [pc, #136]	; (13d0c <LORAWAN_RxDone+0x760>)
   13c82:	47b0      	blx	r6
   13c84:	2800      	cmp	r0, #0
   13c86:	d004      	beq.n	13c92 <LORAWAN_RxDone+0x6e6>
   13c88:	4b21      	ldr	r3, [pc, #132]	; (13d10 <LORAWAN_RxDone+0x764>)
   13c8a:	4798      	blx	r3
   13c8c:	201f      	movs	r0, #31
   13c8e:	4b1a      	ldr	r3, [pc, #104]	; (13cf8 <LORAWAN_RxDone+0x74c>)
   13c90:	4798      	blx	r3
   13c92:	4b1b      	ldr	r3, [pc, #108]	; (13d00 <LORAWAN_RxDone+0x754>)
   13c94:	0021      	movs	r1, r4
   13c96:	0028      	movs	r0, r5
   13c98:	4798      	blx	r3
   13c9a:	2300      	movs	r3, #0
   13c9c:	9306      	str	r3, [sp, #24]
   13c9e:	3301      	adds	r3, #1
   13ca0:	9307      	str	r3, [sp, #28]
   13ca2:	2600      	movs	r6, #0
   13ca4:	e73d      	b.n	13b22 <LORAWAN_RxDone+0x576>
   13ca6:	2600      	movs	r6, #0
   13ca8:	9608      	str	r6, [sp, #32]
   13caa:	9606      	str	r6, [sp, #24]
   13cac:	e739      	b.n	13b22 <LORAWAN_RxDone+0x576>
   13cae:	9b06      	ldr	r3, [sp, #24]
   13cb0:	9308      	str	r3, [sp, #32]
   13cb2:	001e      	movs	r6, r3
   13cb4:	e735      	b.n	13b22 <LORAWAN_RxDone+0x576>
   13cb6:	2120      	movs	r1, #32
   13cb8:	782a      	ldrb	r2, [r5, #0]
   13cba:	438a      	bics	r2, r1
   13cbc:	702a      	strb	r2, [r5, #0]
   13cbe:	0022      	movs	r2, r4
   13cc0:	32fd      	adds	r2, #253	; 0xfd
   13cc2:	7812      	ldrb	r2, [r2, #0]
   13cc4:	2a01      	cmp	r2, #1
   13cc6:	d137      	bne.n	13d38 <LORAWAN_RxDone+0x78c>
   13cc8:	781a      	ldrb	r2, [r3, #0]
   13cca:	3912      	subs	r1, #18
   13ccc:	438a      	bics	r2, r1
   13cce:	701a      	strb	r2, [r3, #0]
   13cd0:	2388      	movs	r3, #136	; 0x88
   13cd2:	4a06      	ldr	r2, [pc, #24]	; (13cec <LORAWAN_RxDone+0x740>)
   13cd4:	009b      	lsls	r3, r3, #2
   13cd6:	5cd3      	ldrb	r3, [r2, r3]
   13cd8:	2b00      	cmp	r3, #0
   13cda:	d000      	beq.n	13cde <LORAWAN_RxDone+0x732>
   13cdc:	e75c      	b.n	13b98 <LORAWAN_RxDone+0x5ec>
   13cde:	2008      	movs	r0, #8
   13ce0:	4b05      	ldr	r3, [pc, #20]	; (13cf8 <LORAWAN_RxDone+0x74c>)
   13ce2:	4798      	blx	r3
   13ce4:	e758      	b.n	13b98 <LORAWAN_RxDone+0x5ec>
   13ce6:	46c0      	nop			; (mov r8, r8)
   13ce8:	00014be1 	.word	0x00014be1
   13cec:	20003e8c 	.word	0x20003e8c
   13cf0:	00011c85 	.word	0x00011c85
   13cf4:	20003f10 	.word	0x20003f10
   13cf8:	00012b2d 	.word	0x00012b2d
   13cfc:	0000bbc5 	.word	0x0000bbc5
   13d00:	000132c9 	.word	0x000132c9
   13d04:	20002494 	.word	0x20002494
   13d08:	20003ec1 	.word	0x20003ec1
   13d0c:	00012a6d 	.word	0x00012a6d
   13d10:	00013041 	.word	0x00013041
   13d14:	00010cb5 	.word	0x00010cb5
   13d18:	00012139 	.word	0x00012139
   13d1c:	00012bdd 	.word	0x00012bdd
   13d20:	20003f20 	.word	0x20003f20
   13d24:	00010455 	.word	0x00010455
   13d28:	00011ded 	.word	0x00011ded
   13d2c:	00011d1d 	.word	0x00011d1d
   13d30:	200041e8 	.word	0x200041e8
   13d34:	20003eb1 	.word	0x20003eb1
   13d38:	2a04      	cmp	r2, #4
   13d3a:	d1c9      	bne.n	13cd0 <LORAWAN_RxDone+0x724>
   13d3c:	0023      	movs	r3, r4
   13d3e:	33f1      	adds	r3, #241	; 0xf1
   13d40:	7818      	ldrb	r0, [r3, #0]
   13d42:	4bab      	ldr	r3, [pc, #684]	; (13ff0 <LORAWAN_RxDone+0xa44>)
   13d44:	4798      	blx	r3
   13d46:	e7c3      	b.n	13cd0 <LORAWAN_RxDone+0x724>
   13d48:	9b07      	ldr	r3, [sp, #28]
   13d4a:	2b00      	cmp	r3, #0
   13d4c:	d013      	beq.n	13d76 <LORAWAN_RxDone+0x7ca>
   13d4e:	0023      	movs	r3, r4
   13d50:	33fd      	adds	r3, #253	; 0xfd
   13d52:	781e      	ldrb	r6, [r3, #0]
   13d54:	2e01      	cmp	r6, #1
   13d56:	d10e      	bne.n	13d76 <LORAWAN_RxDone+0x7ca>
   13d58:	4ba6      	ldr	r3, [pc, #664]	; (13ff4 <LORAWAN_RxDone+0xa48>)
   13d5a:	4798      	blx	r3
   13d5c:	0022      	movs	r2, r4
   13d5e:	3284      	adds	r2, #132	; 0x84
   13d60:	7853      	ldrb	r3, [r2, #1]
   13d62:	43b3      	bics	r3, r6
   13d64:	7053      	strb	r3, [r2, #1]
   13d66:	2220      	movs	r2, #32
   13d68:	782b      	ldrb	r3, [r5, #0]
   13d6a:	4393      	bics	r3, r2
   13d6c:	702b      	strb	r3, [r5, #0]
   13d6e:	2388      	movs	r3, #136	; 0x88
   13d70:	009b      	lsls	r3, r3, #2
   13d72:	5ce3      	ldrb	r3, [r4, r3]
   13d74:	e7b0      	b.n	13cd8 <LORAWAN_RxDone+0x72c>
   13d76:	4ba0      	ldr	r3, [pc, #640]	; (13ff8 <LORAWAN_RxDone+0xa4c>)
   13d78:	4798      	blx	r3
   13d7a:	e70d      	b.n	13b98 <LORAWAN_RxDone+0x5ec>
   13d7c:	9a08      	ldr	r2, [sp, #32]
   13d7e:	2a00      	cmp	r2, #0
   13d80:	d00b      	beq.n	13d9a <LORAWAN_RxDone+0x7ee>
   13d82:	9a06      	ldr	r2, [sp, #24]
   13d84:	0031      	movs	r1, r6
   13d86:	0038      	movs	r0, r7
   13d88:	4b9c      	ldr	r3, [pc, #624]	; (13ffc <LORAWAN_RxDone+0xa50>)
   13d8a:	4798      	blx	r3
   13d8c:	0022      	movs	r2, r4
   13d8e:	2101      	movs	r1, #1
   13d90:	3284      	adds	r2, #132	; 0x84
   13d92:	7853      	ldrb	r3, [r2, #1]
   13d94:	438b      	bics	r3, r1
   13d96:	7053      	strb	r3, [r2, #1]
   13d98:	e6fe      	b.n	13b98 <LORAWAN_RxDone+0x5ec>
   13d9a:	2220      	movs	r2, #32
   13d9c:	4393      	bics	r3, r2
   13d9e:	702b      	strb	r3, [r5, #0]
   13da0:	0023      	movs	r3, r4
   13da2:	33fd      	adds	r3, #253	; 0xfd
   13da4:	781b      	ldrb	r3, [r3, #0]
   13da6:	2b01      	cmp	r3, #1
   13da8:	d10e      	bne.n	13dc8 <LORAWAN_RxDone+0x81c>
   13daa:	0022      	movs	r2, r4
   13dac:	210e      	movs	r1, #14
   13dae:	3284      	adds	r2, #132	; 0x84
   13db0:	7813      	ldrb	r3, [r2, #0]
   13db2:	438b      	bics	r3, r1
   13db4:	7013      	strb	r3, [r2, #0]
   13db6:	2388      	movs	r3, #136	; 0x88
   13db8:	009b      	lsls	r3, r3, #2
   13dba:	5ce3      	ldrb	r3, [r4, r3]
   13dbc:	2b00      	cmp	r3, #0
   13dbe:	d1e5      	bne.n	13d8c <LORAWAN_RxDone+0x7e0>
   13dc0:	2008      	movs	r0, #8
   13dc2:	4b8f      	ldr	r3, [pc, #572]	; (14000 <LORAWAN_RxDone+0xa54>)
   13dc4:	4798      	blx	r3
   13dc6:	e7e1      	b.n	13d8c <LORAWAN_RxDone+0x7e0>
   13dc8:	2b04      	cmp	r3, #4
   13dca:	d1f4      	bne.n	13db6 <LORAWAN_RxDone+0x80a>
   13dcc:	0023      	movs	r3, r4
   13dce:	33f1      	adds	r3, #241	; 0xf1
   13dd0:	7818      	ldrb	r0, [r3, #0]
   13dd2:	4b87      	ldr	r3, [pc, #540]	; (13ff0 <LORAWAN_RxDone+0xa44>)
   13dd4:	4798      	blx	r3
   13dd6:	e7ee      	b.n	13db6 <LORAWAN_RxDone+0x80a>
   13dd8:	35ff      	adds	r5, #255	; 0xff
   13dda:	7f6b      	ldrb	r3, [r5, #29]
   13ddc:	079a      	lsls	r2, r3, #30
   13dde:	d520      	bpl.n	13e22 <LORAWAN_RxDone+0x876>
   13de0:	aa10      	add	r2, sp, #64	; 0x40
   13de2:	0031      	movs	r1, r6
   13de4:	2026      	movs	r0, #38	; 0x26
   13de6:	47b8      	blx	r7
   13de8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   13dea:	1c5a      	adds	r2, r3, #1
   13dec:	d001      	beq.n	13df2 <LORAWAN_RxDone+0x846>
   13dee:	3314      	adds	r3, #20
   13df0:	9310      	str	r3, [sp, #64]	; 0x40
   13df2:	0021      	movs	r1, r4
   13df4:	220e      	movs	r2, #14
   13df6:	3184      	adds	r1, #132	; 0x84
   13df8:	780b      	ldrb	r3, [r1, #0]
   13dfa:	4393      	bics	r3, r2
   13dfc:	001a      	movs	r2, r3
   13dfe:	230c      	movs	r3, #12
   13e00:	4313      	orrs	r3, r2
   13e02:	700b      	strb	r3, [r1, #0]
   13e04:	4b7f      	ldr	r3, [pc, #508]	; (14004 <LORAWAN_RxDone+0xa58>)
   13e06:	9a10      	ldr	r2, [sp, #64]	; 0x40
   13e08:	5ce3      	ldrb	r3, [r4, r3]
   13e0a:	21fa      	movs	r1, #250	; 0xfa
   13e0c:	1ad3      	subs	r3, r2, r3
   13e0e:	2200      	movs	r2, #0
   13e10:	0089      	lsls	r1, r1, #2
   13e12:	4359      	muls	r1, r3
   13e14:	34ef      	adds	r4, #239	; 0xef
   13e16:	4b7c      	ldr	r3, [pc, #496]	; (14008 <LORAWAN_RxDone+0xa5c>)
   13e18:	7820      	ldrb	r0, [r4, #0]
   13e1a:	9200      	str	r2, [sp, #0]
   13e1c:	4c7b      	ldr	r4, [pc, #492]	; (1400c <LORAWAN_RxDone+0xa60>)
   13e1e:	47a0      	blx	r4
   13e20:	e6e7      	b.n	13bf2 <LORAWAN_RxDone+0x646>
   13e22:	075b      	lsls	r3, r3, #29
   13e24:	d400      	bmi.n	13e28 <LORAWAN_RxDone+0x87c>
   13e26:	e6e4      	b.n	13bf2 <LORAWAN_RxDone+0x646>
   13e28:	aa10      	add	r2, sp, #64	; 0x40
   13e2a:	0031      	movs	r1, r6
   13e2c:	2032      	movs	r0, #50	; 0x32
   13e2e:	47b8      	blx	r7
   13e30:	220e      	movs	r2, #14
   13e32:	4b77      	ldr	r3, [pc, #476]	; (14010 <LORAWAN_RxDone+0xa64>)
   13e34:	781b      	ldrb	r3, [r3, #0]
   13e36:	4393      	bics	r3, r2
   13e38:	001a      	movs	r2, r3
   13e3a:	230c      	movs	r3, #12
   13e3c:	4313      	orrs	r3, r2
   13e3e:	4a74      	ldr	r2, [pc, #464]	; (14010 <LORAWAN_RxDone+0xa64>)
   13e40:	7013      	strb	r3, [r2, #0]
   13e42:	9b10      	ldr	r3, [sp, #64]	; 0x40
   13e44:	1c5a      	adds	r2, r3, #1
   13e46:	d001      	beq.n	13e4c <LORAWAN_RxDone+0x8a0>
   13e48:	3301      	adds	r3, #1
   13e4a:	9310      	str	r3, [sp, #64]	; 0x40
   13e4c:	4b6d      	ldr	r3, [pc, #436]	; (14004 <LORAWAN_RxDone+0xa58>)
   13e4e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   13e50:	5ce3      	ldrb	r3, [r4, r3]
   13e52:	21fa      	movs	r1, #250	; 0xfa
   13e54:	1ad3      	subs	r3, r2, r3
   13e56:	2200      	movs	r2, #0
   13e58:	0089      	lsls	r1, r1, #2
   13e5a:	34f2      	adds	r4, #242	; 0xf2
   13e5c:	4359      	muls	r1, r3
   13e5e:	7820      	ldrb	r0, [r4, #0]
   13e60:	4b6c      	ldr	r3, [pc, #432]	; (14014 <LORAWAN_RxDone+0xa68>)
   13e62:	9200      	str	r2, [sp, #0]
   13e64:	e7da      	b.n	13e1c <LORAWAN_RxDone+0x870>
   13e66:	35fd      	adds	r5, #253	; 0xfd
   13e68:	782b      	ldrb	r3, [r5, #0]
   13e6a:	2b04      	cmp	r3, #4
   13e6c:	d000      	beq.n	13e70 <LORAWAN_RxDone+0x8c4>
   13e6e:	e6c0      	b.n	13bf2 <LORAWAN_RxDone+0x646>
   13e70:	0038      	movs	r0, r7
   13e72:	4b69      	ldr	r3, [pc, #420]	; (14018 <LORAWAN_RxDone+0xa6c>)
   13e74:	4798      	blx	r3
   13e76:	e6bc      	b.n	13bf2 <LORAWAN_RxDone+0x646>
   13e78:	2390      	movs	r3, #144	; 0x90
   13e7a:	009b      	lsls	r3, r3, #2
   13e7c:	5ce3      	ldrb	r3, [r4, r3]
   13e7e:	2b00      	cmp	r3, #0
   13e80:	d009      	beq.n	13e96 <LORAWAN_RxDone+0x8ea>
   13e82:	2322      	movs	r3, #34	; 0x22
   13e84:	aa04      	add	r2, sp, #16
   13e86:	189b      	adds	r3, r3, r2
   13e88:	781b      	ldrb	r3, [r3, #0]
   13e8a:	003a      	movs	r2, r7
   13e8c:	9906      	ldr	r1, [sp, #24]
   13e8e:	0038      	movs	r0, r7
   13e90:	4c62      	ldr	r4, [pc, #392]	; (1401c <LORAWAN_RxDone+0xa70>)
   13e92:	47a0      	blx	r4
   13e94:	e6ad      	b.n	13bf2 <LORAWAN_RxDone+0x646>
   13e96:	2220      	movs	r2, #32
   13e98:	3494      	adds	r4, #148	; 0x94
   13e9a:	7823      	ldrb	r3, [r4, #0]
   13e9c:	201e      	movs	r0, #30
   13e9e:	4393      	bics	r3, r2
   13ea0:	7023      	strb	r3, [r4, #0]
   13ea2:	4b57      	ldr	r3, [pc, #348]	; (14000 <LORAWAN_RxDone+0xa54>)
   13ea4:	4798      	blx	r3
   13ea6:	e6c7      	b.n	13c38 <LORAWAN_RxDone+0x68c>
   13ea8:	220e      	movs	r2, #14
   13eaa:	4013      	ands	r3, r2
   13eac:	2b0a      	cmp	r3, #10
   13eae:	d008      	beq.n	13ec2 <LORAWAN_RxDone+0x916>
   13eb0:	2b06      	cmp	r3, #6
   13eb2:	d000      	beq.n	13eb6 <LORAWAN_RxDone+0x90a>
   13eb4:	e5a0      	b.n	139f8 <LORAWAN_RxDone+0x44c>
   13eb6:	0023      	movs	r3, r4
   13eb8:	33f9      	adds	r3, #249	; 0xf9
   13eba:	781b      	ldrb	r3, [r3, #0]
   13ebc:	2b00      	cmp	r3, #0
   13ebe:	d100      	bne.n	13ec2 <LORAWAN_RxDone+0x916>
   13ec0:	e59a      	b.n	139f8 <LORAWAN_RxDone+0x44c>
   13ec2:	2220      	movs	r2, #32
   13ec4:	3494      	adds	r4, #148	; 0x94
   13ec6:	7823      	ldrb	r3, [r4, #0]
   13ec8:	2019      	movs	r0, #25
   13eca:	4393      	bics	r3, r2
   13ecc:	7023      	strb	r3, [r4, #0]
   13ece:	e5a0      	b.n	13a12 <LORAWAN_RxDone+0x466>
   13ed0:	4953      	ldr	r1, [pc, #332]	; (14020 <LORAWAN_RxDone+0xa74>)
   13ed2:	784a      	ldrb	r2, [r1, #1]
   13ed4:	780b      	ldrb	r3, [r1, #0]
   13ed6:	0212      	lsls	r2, r2, #8
   13ed8:	431a      	orrs	r2, r3
   13eda:	788b      	ldrb	r3, [r1, #2]
   13edc:	041b      	lsls	r3, r3, #16
   13ede:	431a      	orrs	r2, r3
   13ee0:	78cb      	ldrb	r3, [r1, #3]
   13ee2:	061b      	lsls	r3, r3, #24
   13ee4:	4313      	orrs	r3, r2
   13ee6:	d100      	bne.n	13eea <LORAWAN_RxDone+0x93e>
   13ee8:	e683      	b.n	13bf2 <LORAWAN_RxDone+0x646>
   13eea:	4b4e      	ldr	r3, [pc, #312]	; (14024 <LORAWAN_RxDone+0xa78>)
   13eec:	4c4e      	ldr	r4, [pc, #312]	; (14028 <LORAWAN_RxDone+0xa7c>)
   13eee:	781b      	ldrb	r3, [r3, #0]
   13ef0:	2b10      	cmp	r3, #16
   13ef2:	d105      	bne.n	13f00 <LORAWAN_RxDone+0x954>
   13ef4:	0001      	movs	r1, r0
   13ef6:	2000      	movs	r0, #0
   13ef8:	9a06      	ldr	r2, [sp, #24]
   13efa:	3b0c      	subs	r3, #12
   13efc:	47a0      	blx	r4
   13efe:	e678      	b.n	13bf2 <LORAWAN_RxDone+0x646>
   13f00:	2300      	movs	r3, #0
   13f02:	0001      	movs	r1, r0
   13f04:	9a06      	ldr	r2, [sp, #24]
   13f06:	0018      	movs	r0, r3
   13f08:	e7f8      	b.n	13efc <LORAWAN_RxDone+0x950>
   13f0a:	348c      	adds	r4, #140	; 0x8c
   13f0c:	6823      	ldr	r3, [r4, #0]
   13f0e:	0031      	movs	r1, r6
   13f10:	9308      	str	r3, [sp, #32]
   13f12:	4b46      	ldr	r3, [pc, #280]	; (1402c <LORAWAN_RxDone+0xa80>)
   13f14:	4798      	blx	r3
   13f16:	2808      	cmp	r0, #8
   13f18:	d001      	beq.n	13f1e <LORAWAN_RxDone+0x972>
   13f1a:	f7ff fbab 	bl	13674 <LORAWAN_RxDone+0xc8>
   13f1e:	9b06      	ldr	r3, [sp, #24]
   13f20:	0028      	movs	r0, r5
   13f22:	1f1a      	subs	r2, r3, #4
   13f24:	9b07      	ldr	r3, [sp, #28]
   13f26:	b2d2      	uxtb	r2, r2
   13f28:	9300      	str	r3, [sp, #0]
   13f2a:	6821      	ldr	r1, [r4, #0]
   13f2c:	2349      	movs	r3, #73	; 0x49
   13f2e:	4c40      	ldr	r4, [pc, #256]	; (14030 <LORAWAN_RxDone+0xa84>)
   13f30:	47a0      	blx	r4
   13f32:	4d40      	ldr	r5, [pc, #256]	; (14034 <LORAWAN_RxDone+0xa88>)
   13f34:	9607      	str	r6, [sp, #28]
   13f36:	4e40      	ldr	r6, [pc, #256]	; (14038 <LORAWAN_RxDone+0xa8c>)
   13f38:	4c40      	ldr	r4, [pc, #256]	; (1403c <LORAWAN_RxDone+0xa90>)
   13f3a:	2210      	movs	r2, #16
   13f3c:	0021      	movs	r1, r4
   13f3e:	4b40      	ldr	r3, [pc, #256]	; (14040 <LORAWAN_RxDone+0xa94>)
   13f40:	0030      	movs	r0, r6
   13f42:	4798      	blx	r3
   13f44:	9b06      	ldr	r3, [sp, #24]
   13f46:	0039      	movs	r1, r7
   13f48:	3b04      	subs	r3, #4
   13f4a:	001a      	movs	r2, r3
   13f4c:	9309      	str	r3, [sp, #36]	; 0x24
   13f4e:	483d      	ldr	r0, [pc, #244]	; (14044 <LORAWAN_RxDone+0xa98>)
   13f50:	4b3b      	ldr	r3, [pc, #236]	; (14040 <LORAWAN_RxDone+0xa94>)
   13f52:	4798      	blx	r3
   13f54:	9b06      	ldr	r3, [sp, #24]
   13f56:	9a07      	ldr	r2, [sp, #28]
   13f58:	330c      	adds	r3, #12
   13f5a:	b29b      	uxth	r3, r3
   13f5c:	9300      	str	r3, [sp, #0]
   13f5e:	0033      	movs	r3, r6
   13f60:	2a00      	cmp	r2, #0
   13f62:	d100      	bne.n	13f66 <LORAWAN_RxDone+0x9ba>
   13f64:	e557      	b.n	13a16 <LORAWAN_RxDone+0x46a>
   13f66:	0022      	movs	r2, r4
   13f68:	2104      	movs	r1, #4
   13f6a:	4c37      	ldr	r4, [pc, #220]	; (14048 <LORAWAN_RxDone+0xa9c>)
   13f6c:	0028      	movs	r0, r5
   13f6e:	47a0      	blx	r4
   13f70:	2204      	movs	r2, #4
   13f72:	4932      	ldr	r1, [pc, #200]	; (1403c <LORAWAN_RxDone+0xa90>)
   13f74:	4c32      	ldr	r4, [pc, #200]	; (14040 <LORAWAN_RxDone+0xa94>)
   13f76:	a80d      	add	r0, sp, #52	; 0x34
   13f78:	47a0      	blx	r4
   13f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13f7c:	2204      	movs	r2, #4
   13f7e:	18f9      	adds	r1, r7, r3
   13f80:	a810      	add	r0, sp, #64	; 0x40
   13f82:	47a0      	blx	r4
   13f84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13f86:	9a10      	ldr	r2, [sp, #64]	; 0x40
   13f88:	4293      	cmp	r3, r2
   13f8a:	d100      	bne.n	13f8e <LORAWAN_RxDone+0x9e2>
   13f8c:	e54a      	b.n	13a24 <LORAWAN_RxDone+0x478>
   13f8e:	9b07      	ldr	r3, [sp, #28]
   13f90:	2b00      	cmp	r3, #0
   13f92:	d108      	bne.n	13fa6 <LORAWAN_RxDone+0x9fa>
   13f94:	220e      	movs	r2, #14
   13f96:	4b2d      	ldr	r3, [pc, #180]	; (1404c <LORAWAN_RxDone+0xaa0>)
   13f98:	3384      	adds	r3, #132	; 0x84
   13f9a:	781b      	ldrb	r3, [r3, #0]
   13f9c:	4013      	ands	r3, r2
   13f9e:	2b06      	cmp	r3, #6
   13fa0:	d101      	bne.n	13fa6 <LORAWAN_RxDone+0x9fa>
   13fa2:	4b2b      	ldr	r3, [pc, #172]	; (14050 <LORAWAN_RxDone+0xaa4>)
   13fa4:	4798      	blx	r3
   13fa6:	491e      	ldr	r1, [pc, #120]	; (14020 <LORAWAN_RxDone+0xa74>)
   13fa8:	784a      	ldrb	r2, [r1, #1]
   13faa:	780b      	ldrb	r3, [r1, #0]
   13fac:	0212      	lsls	r2, r2, #8
   13fae:	431a      	orrs	r2, r3
   13fb0:	788b      	ldrb	r3, [r1, #2]
   13fb2:	041b      	lsls	r3, r3, #16
   13fb4:	431a      	orrs	r2, r3
   13fb6:	78cb      	ldrb	r3, [r1, #3]
   13fb8:	061b      	lsls	r3, r3, #24
   13fba:	4313      	orrs	r3, r2
   13fbc:	d101      	bne.n	13fc2 <LORAWAN_RxDone+0xa16>
   13fbe:	f7ff fb47 	bl	13650 <LORAWAN_RxDone+0xa4>
   13fc2:	4a22      	ldr	r2, [pc, #136]	; (1404c <LORAWAN_RxDone+0xaa0>)
   13fc4:	2020      	movs	r0, #32
   13fc6:	0011      	movs	r1, r2
   13fc8:	3194      	adds	r1, #148	; 0x94
   13fca:	780b      	ldrb	r3, [r1, #0]
   13fcc:	4383      	bics	r3, r0
   13fce:	700b      	strb	r3, [r1, #0]
   13fd0:	9b07      	ldr	r3, [sp, #28]
   13fd2:	2b00      	cmp	r3, #0
   13fd4:	d100      	bne.n	13fd8 <LORAWAN_RxDone+0xa2c>
   13fd6:	e521      	b.n	13a1c <LORAWAN_RxDone+0x470>
   13fd8:	2322      	movs	r3, #34	; 0x22
   13fda:	a904      	add	r1, sp, #16
   13fdc:	185b      	adds	r3, r3, r1
   13fde:	7819      	ldrb	r1, [r3, #0]
   13fe0:	233c      	movs	r3, #60	; 0x3c
   13fe2:	434b      	muls	r3, r1
   13fe4:	18d3      	adds	r3, r2, r3
   13fe6:	9a08      	ldr	r2, [sp, #32]
   13fe8:	33fc      	adds	r3, #252	; 0xfc
   13fea:	659a      	str	r2, [r3, #88]	; 0x58
   13fec:	2018      	movs	r0, #24
   13fee:	e510      	b.n	13a12 <LORAWAN_RxDone+0x466>
   13ff0:	00010cb5 	.word	0x00010cb5
   13ff4:	00012139 	.word	0x00012139
   13ff8:	0001209d 	.word	0x0001209d
   13ffc:	00012bdd 	.word	0x00012bdd
   14000:	00012b2d 	.word	0x00012b2d
   14004:	0000022b 	.word	0x0000022b
   14008:	00011ee5 	.word	0x00011ee5
   1400c:	0001099d 	.word	0x0001099d
   14010:	20003f10 	.word	0x20003f10
   14014:	00012945 	.word	0x00012945
   14018:	00014a61 	.word	0x00014a61
   1401c:	00014c55 	.word	0x00014c55
   14020:	200041e8 	.word	0x200041e8
   14024:	20002887 	.word	0x20002887
   14028:	00012b91 	.word	0x00012b91
   1402c:	0001307d 	.word	0x0001307d
   14030:	00011c85 	.word	0x00011c85
   14034:	20003eb1 	.word	0x20003eb1
   14038:	20002494 	.word	0x20002494
   1403c:	200023db 	.word	0x200023db
   14040:	0001835b 	.word	0x0001835b
   14044:	200024a4 	.word	0x200024a4
   14048:	000078a5 	.word	0x000078a5
   1404c:	20003e8c 	.word	0x20003e8c
   14050:	00011d1d 	.word	0x00011d1d

00014054 <LorawanSetEdClass>:
   14054:	2388      	movs	r3, #136	; 0x88
   14056:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14058:	4d1a      	ldr	r5, [pc, #104]	; (140c4 <LorawanSetEdClass+0x70>)
   1405a:	009b      	lsls	r3, r3, #2
   1405c:	5ceb      	ldrb	r3, [r5, r3]
   1405e:	0004      	movs	r4, r0
   14060:	2011      	movs	r0, #17
   14062:	2b00      	cmp	r3, #0
   14064:	d013      	beq.n	1408e <LorawanSetEdClass+0x3a>
   14066:	002b      	movs	r3, r5
   14068:	33fe      	adds	r3, #254	; 0xfe
   1406a:	781b      	ldrb	r3, [r3, #0]
   1406c:	3807      	subs	r0, #7
   1406e:	4223      	tst	r3, r4
   14070:	d00d      	beq.n	1408e <LorawanSetEdClass+0x3a>
   14072:	002b      	movs	r3, r5
   14074:	33fd      	adds	r3, #253	; 0xfd
   14076:	7819      	ldrb	r1, [r3, #0]
   14078:	428c      	cmp	r4, r1
   1407a:	d007      	beq.n	1408c <LorawanSetEdClass+0x38>
   1407c:	2901      	cmp	r1, #1
   1407e:	d107      	bne.n	14090 <LorawanSetEdClass+0x3c>
   14080:	2c04      	cmp	r4, #4
   14082:	d104      	bne.n	1408e <LorawanSetEdClass+0x3a>
   14084:	701c      	strb	r4, [r3, #0]
   14086:	2000      	movs	r0, #0
   14088:	4b0f      	ldr	r3, [pc, #60]	; (140c8 <LorawanSetEdClass+0x74>)
   1408a:	4798      	blx	r3
   1408c:	2008      	movs	r0, #8
   1408e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   14090:	2904      	cmp	r1, #4
   14092:	d1fc      	bne.n	1408e <LorawanSetEdClass+0x3a>
   14094:	2c01      	cmp	r4, #1
   14096:	d1fa      	bne.n	1408e <LorawanSetEdClass+0x3a>
   14098:	701c      	strb	r4, [r3, #0]
   1409a:	0021      	movs	r1, r4
   1409c:	4b0a      	ldr	r3, [pc, #40]	; (140c8 <LorawanSetEdClass+0x74>)
   1409e:	2000      	movs	r0, #0
   140a0:	4798      	blx	r3
   140a2:	002a      	movs	r2, r5
   140a4:	210e      	movs	r1, #14
   140a6:	3284      	adds	r2, #132	; 0x84
   140a8:	7813      	ldrb	r3, [r2, #0]
   140aa:	a801      	add	r0, sp, #4
   140ac:	438b      	bics	r3, r1
   140ae:	7013      	strb	r3, [r2, #0]
   140b0:	4b06      	ldr	r3, [pc, #24]	; (140cc <LorawanSetEdClass+0x78>)
   140b2:	7004      	strb	r4, [r0, #0]
   140b4:	4798      	blx	r3
   140b6:	2394      	movs	r3, #148	; 0x94
   140b8:	005b      	lsls	r3, r3, #1
   140ba:	5ce8      	ldrb	r0, [r5, r3]
   140bc:	4b04      	ldr	r3, [pc, #16]	; (140d0 <LorawanSetEdClass+0x7c>)
   140be:	4798      	blx	r3
   140c0:	e7e4      	b.n	1408c <LorawanSetEdClass+0x38>
   140c2:	46c0      	nop			; (mov r8, r8)
   140c4:	20003e8c 	.word	0x20003e8c
   140c8:	0000bbc5 	.word	0x0000bbc5
   140cc:	00009135 	.word	0x00009135
   140d0:	00010cb5 	.word	0x00010cb5

000140d4 <LORAWAN_SetAttr>:
   140d4:	2388      	movs	r3, #136	; 0x88
   140d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   140d8:	4cbb      	ldr	r4, [pc, #748]	; (143c8 <LORAWAN_SetAttr+0x2f4>)
   140da:	009b      	lsls	r3, r3, #2
   140dc:	5ce3      	ldrb	r3, [r4, r3]
   140de:	000d      	movs	r5, r1
   140e0:	2611      	movs	r6, #17
   140e2:	2b00      	cmp	r3, #0
   140e4:	d100      	bne.n	140e8 <LORAWAN_SetAttr+0x14>
   140e6:	e11f      	b.n	14328 <LORAWAN_SetAttr+0x254>
   140e8:	2846      	cmp	r0, #70	; 0x46
   140ea:	d878      	bhi.n	141de <LORAWAN_SetAttr+0x10a>
   140ec:	f000 fffa 	bl	150e4 <__gnu_thumb1_case_uhi>
   140f0:	00930047 	.word	0x00930047
   140f4:	00fc00b2 	.word	0x00fc00b2
   140f8:	00e600c5 	.word	0x00e600c5
   140fc:	0134011e 	.word	0x0134011e
   14100:	01660154 	.word	0x01660154
   14104:	01830178 	.word	0x01830178
   14108:	01a6018d 	.word	0x01a6018d
   1410c:	007701ab 	.word	0x007701ab
   14110:	01b501b0 	.word	0x01b501b0
   14114:	01bf01ba 	.word	0x01bf01ba
   14118:	01e601c4 	.word	0x01e601c4
   1411c:	01cb01eb 	.word	0x01cb01eb
   14120:	01fc01c8 	.word	0x01fc01c8
   14124:	01e101f8 	.word	0x01e101f8
   14128:	01d701dd 	.word	0x01d701dd
   1412c:	00770077 	.word	0x00770077
   14130:	0077019e 	.word	0x0077019e
   14134:	00770077 	.word	0x00770077
   14138:	00770077 	.word	0x00770077
   1413c:	02000077 	.word	0x02000077
   14140:	02030066 	.word	0x02030066
   14144:	020d0211 	.word	0x020d0211
   14148:	00770208 	.word	0x00770208
   1414c:	02190215 	.word	0x02190215
   14150:	0221021d 	.word	0x0221021d
   14154:	02290225 	.word	0x02290225
   14158:	00770249 	.word	0x00770249
   1415c:	00770077 	.word	0x00770077
   14160:	00770077 	.word	0x00770077
   14164:	00770077 	.word	0x00770077
   14168:	00770077 	.word	0x00770077
   1416c:	02600077 	.word	0x02600077
   14170:	026e026a 	.word	0x026e026a
   14174:	00770077 	.word	0x00770077
   14178:	02730077 	.word	0x02730077
   1417c:	0271      	.short	0x0271
   1417e:	260a      	movs	r6, #10
   14180:	2900      	cmp	r1, #0
   14182:	d100      	bne.n	14186 <LORAWAN_SetAttr+0xb2>
   14184:	e0d0      	b.n	14328 <LORAWAN_SetAttr+0x254>
   14186:	0020      	movs	r0, r4
   14188:	2208      	movs	r2, #8
   1418a:	4b90      	ldr	r3, [pc, #576]	; (143cc <LORAWAN_SetAttr+0x2f8>)
   1418c:	305d      	adds	r0, #93	; 0x5d
   1418e:	4798      	blx	r3
   14190:	2108      	movs	r1, #8
   14192:	4e8f      	ldr	r6, [pc, #572]	; (143d0 <LORAWAN_SetAttr+0x2fc>)
   14194:	2001      	movs	r0, #1
   14196:	47b0      	blx	r6
   14198:	0022      	movs	r2, r4
   1419a:	2501      	movs	r5, #1
   1419c:	32de      	adds	r2, #222	; 0xde
   1419e:	7813      	ldrb	r3, [r2, #0]
   141a0:	2109      	movs	r1, #9
   141a2:	432b      	orrs	r3, r5
   141a4:	3484      	adds	r4, #132	; 0x84
   141a6:	0028      	movs	r0, r5
   141a8:	7013      	strb	r3, [r2, #0]
   141aa:	47b0      	blx	r6
   141ac:	7823      	ldrb	r3, [r4, #0]
   141ae:	210b      	movs	r1, #11
   141b0:	43ab      	bics	r3, r5
   141b2:	0028      	movs	r0, r5
   141b4:	7023      	strb	r3, [r4, #0]
   141b6:	47b0      	blx	r6
   141b8:	2608      	movs	r6, #8
   141ba:	e0b5      	b.n	14328 <LORAWAN_SetAttr+0x254>
   141bc:	0023      	movs	r3, r4
   141be:	33ff      	adds	r3, #255	; 0xff
   141c0:	7f5b      	ldrb	r3, [r3, #29]
   141c2:	260a      	movs	r6, #10
   141c4:	075b      	lsls	r3, r3, #29
   141c6:	d400      	bmi.n	141ca <LORAWAN_SetAttr+0xf6>
   141c8:	e0ae      	b.n	14328 <LORAWAN_SetAttr+0x254>
   141ca:	79ca      	ldrb	r2, [r1, #7]
   141cc:	4b81      	ldr	r3, [pc, #516]	; (143d4 <LORAWAN_SetAttr+0x300>)
   141ce:	2a00      	cmp	r2, #0
   141d0:	d10e      	bne.n	141f0 <LORAWAN_SetAttr+0x11c>
   141d2:	4669      	mov	r1, sp
   141d4:	201d      	movs	r0, #29
   141d6:	714a      	strb	r2, [r1, #5]
   141d8:	4798      	blx	r3
   141da:	2800      	cmp	r0, #0
   141dc:	d001      	beq.n	141e2 <LORAWAN_SetAttr+0x10e>
   141de:	260a      	movs	r6, #10
   141e0:	e0a2      	b.n	14328 <LORAWAN_SetAttr+0x254>
   141e2:	2109      	movs	r1, #9
   141e4:	34fe      	adds	r4, #254	; 0xfe
   141e6:	8460      	strh	r0, [r4, #34]	; 0x22
   141e8:	8420      	strh	r0, [r4, #32]
   141ea:	4b79      	ldr	r3, [pc, #484]	; (143d0 <LORAWAN_SetAttr+0x2fc>)
   141ec:	4798      	blx	r3
   141ee:	e7e3      	b.n	141b8 <LORAWAN_SetAttr+0xe4>
   141f0:	2002      	movs	r0, #2
   141f2:	5e2a      	ldrsh	r2, [r5, r0]
   141f4:	88ae      	ldrh	r6, [r5, #4]
   141f6:	79a8      	ldrb	r0, [r5, #6]
   141f8:	466d      	mov	r5, sp
   141fa:	806a      	strh	r2, [r5, #2]
   141fc:	2201      	movs	r2, #1
   141fe:	8809      	ldrh	r1, [r1, #0]
   14200:	7128      	strb	r0, [r5, #4]
   14202:	8029      	strh	r1, [r5, #0]
   14204:	201d      	movs	r0, #29
   14206:	4669      	mov	r1, sp
   14208:	716a      	strb	r2, [r5, #5]
   1420a:	4798      	blx	r3
   1420c:	2800      	cmp	r0, #0
   1420e:	d1e6      	bne.n	141de <LORAWAN_SetAttr+0x10a>
   14210:	34fe      	adds	r4, #254	; 0xfe
   14212:	8466      	strh	r6, [r4, #34]	; 0x22
   14214:	e7d0      	b.n	141b8 <LORAWAN_SetAttr+0xe4>
   14216:	260a      	movs	r6, #10
   14218:	2900      	cmp	r1, #0
   1421a:	d100      	bne.n	1421e <LORAWAN_SetAttr+0x14a>
   1421c:	e084      	b.n	14328 <LORAWAN_SetAttr+0x254>
   1421e:	0020      	movs	r0, r4
   14220:	2208      	movs	r2, #8
   14222:	4b6a      	ldr	r3, [pc, #424]	; (143cc <LORAWAN_SetAttr+0x2f8>)
   14224:	3055      	adds	r0, #85	; 0x55
   14226:	4798      	blx	r3
   14228:	2107      	movs	r1, #7
   1422a:	4d69      	ldr	r5, [pc, #420]	; (143d0 <LORAWAN_SetAttr+0x2fc>)
   1422c:	2001      	movs	r0, #1
   1422e:	47a8      	blx	r5
   14230:	0022      	movs	r2, r4
   14232:	2302      	movs	r3, #2
   14234:	32de      	adds	r2, #222	; 0xde
   14236:	7811      	ldrb	r1, [r2, #0]
   14238:	2001      	movs	r0, #1
   1423a:	430b      	orrs	r3, r1
   1423c:	2109      	movs	r1, #9
   1423e:	7013      	strb	r3, [r2, #0]
   14240:	47a8      	blx	r5
   14242:	2001      	movs	r0, #1
   14244:	3484      	adds	r4, #132	; 0x84
   14246:	7823      	ldrb	r3, [r4, #0]
   14248:	210b      	movs	r1, #11
   1424a:	4383      	bics	r3, r0
   1424c:	7023      	strb	r3, [r4, #0]
   1424e:	47a8      	blx	r5
   14250:	3e02      	subs	r6, #2
   14252:	e069      	b.n	14328 <LORAWAN_SetAttr+0x254>
   14254:	680b      	ldr	r3, [r1, #0]
   14256:	2001      	movs	r0, #1
   14258:	0a19      	lsrs	r1, r3, #8
   1425a:	70a1      	strb	r1, [r4, #2]
   1425c:	0c19      	lsrs	r1, r3, #16
   1425e:	7063      	strb	r3, [r4, #1]
   14260:	70e1      	strb	r1, [r4, #3]
   14262:	0e1b      	lsrs	r3, r3, #24
   14264:	2103      	movs	r1, #3
   14266:	4d5a      	ldr	r5, [pc, #360]	; (143d0 <LORAWAN_SetAttr+0x2fc>)
   14268:	7123      	strb	r3, [r4, #4]
   1426a:	47a8      	blx	r5
   1426c:	0022      	movs	r2, r4
   1426e:	2304      	movs	r3, #4
   14270:	32de      	adds	r2, #222	; 0xde
   14272:	7811      	ldrb	r1, [r2, #0]
   14274:	430b      	orrs	r3, r1
   14276:	7013      	strb	r3, [r2, #0]
   14278:	e015      	b.n	142a6 <LORAWAN_SetAttr+0x1d2>
   1427a:	260a      	movs	r6, #10
   1427c:	2900      	cmp	r1, #0
   1427e:	d053      	beq.n	14328 <LORAWAN_SetAttr+0x254>
   14280:	3606      	adds	r6, #6
   14282:	0032      	movs	r2, r6
   14284:	4f51      	ldr	r7, [pc, #324]	; (143cc <LORAWAN_SetAttr+0x2f8>)
   14286:	1d60      	adds	r0, r4, #5
   14288:	47b8      	blx	r7
   1428a:	0020      	movs	r0, r4
   1428c:	0032      	movs	r2, r6
   1428e:	0029      	movs	r1, r5
   14290:	3025      	adds	r0, #37	; 0x25
   14292:	47b8      	blx	r7
   14294:	2104      	movs	r1, #4
   14296:	2001      	movs	r0, #1
   14298:	4d4d      	ldr	r5, [pc, #308]	; (143d0 <LORAWAN_SetAttr+0x2fc>)
   1429a:	47a8      	blx	r5
   1429c:	0023      	movs	r3, r4
   1429e:	33de      	adds	r3, #222	; 0xde
   142a0:	781a      	ldrb	r2, [r3, #0]
   142a2:	4316      	orrs	r6, r2
   142a4:	701e      	strb	r6, [r3, #0]
   142a6:	2109      	movs	r1, #9
   142a8:	2001      	movs	r0, #1
   142aa:	47a8      	blx	r5
   142ac:	2001      	movs	r0, #1
   142ae:	210b      	movs	r1, #11
   142b0:	3484      	adds	r4, #132	; 0x84
   142b2:	7823      	ldrb	r3, [r4, #0]
   142b4:	4383      	bics	r3, r0
   142b6:	7023      	strb	r3, [r4, #0]
   142b8:	47a8      	blx	r5
   142ba:	e77d      	b.n	141b8 <LORAWAN_SetAttr+0xe4>
   142bc:	260a      	movs	r6, #10
   142be:	2900      	cmp	r1, #0
   142c0:	d032      	beq.n	14328 <LORAWAN_SetAttr+0x254>
   142c2:	0020      	movs	r0, r4
   142c4:	2210      	movs	r2, #16
   142c6:	4e41      	ldr	r6, [pc, #260]	; (143cc <LORAWAN_SetAttr+0x2f8>)
   142c8:	3015      	adds	r0, #21
   142ca:	47b0      	blx	r6
   142cc:	0020      	movs	r0, r4
   142ce:	2210      	movs	r2, #16
   142d0:	0029      	movs	r1, r5
   142d2:	3035      	adds	r0, #53	; 0x35
   142d4:	47b0      	blx	r6
   142d6:	2105      	movs	r1, #5
   142d8:	2001      	movs	r0, #1
   142da:	4d3d      	ldr	r5, [pc, #244]	; (143d0 <LORAWAN_SetAttr+0x2fc>)
   142dc:	47a8      	blx	r5
   142de:	0022      	movs	r2, r4
   142e0:	32de      	adds	r2, #222	; 0xde
   142e2:	7811      	ldrb	r1, [r2, #0]
   142e4:	2320      	movs	r3, #32
   142e6:	e7c5      	b.n	14274 <LORAWAN_SetAttr+0x1a0>
   142e8:	260a      	movs	r6, #10
   142ea:	2900      	cmp	r1, #0
   142ec:	d01c      	beq.n	14328 <LORAWAN_SetAttr+0x254>
   142ee:	4b3a      	ldr	r3, [pc, #232]	; (143d8 <LORAWAN_SetAttr+0x304>)
   142f0:	3e02      	subs	r6, #2
   142f2:	5ce3      	ldrb	r3, [r4, r3]
   142f4:	2b00      	cmp	r3, #0
   142f6:	d117      	bne.n	14328 <LORAWAN_SetAttr+0x254>
   142f8:	0020      	movs	r0, r4
   142fa:	2210      	movs	r2, #16
   142fc:	4b33      	ldr	r3, [pc, #204]	; (143cc <LORAWAN_SetAttr+0x2f8>)
   142fe:	3045      	adds	r0, #69	; 0x45
   14300:	4798      	blx	r3
   14302:	2106      	movs	r1, #6
   14304:	4d32      	ldr	r5, [pc, #200]	; (143d0 <LORAWAN_SetAttr+0x2fc>)
   14306:	2001      	movs	r0, #1
   14308:	47a8      	blx	r5
   1430a:	0022      	movs	r2, r4
   1430c:	32de      	adds	r2, #222	; 0xde
   1430e:	7813      	ldrb	r3, [r2, #0]
   14310:	2109      	movs	r1, #9
   14312:	4333      	orrs	r3, r6
   14314:	2001      	movs	r0, #1
   14316:	7013      	strb	r3, [r2, #0]
   14318:	47a8      	blx	r5
   1431a:	2001      	movs	r0, #1
   1431c:	3484      	adds	r4, #132	; 0x84
   1431e:	7823      	ldrb	r3, [r4, #0]
   14320:	210b      	movs	r1, #11
   14322:	4383      	bics	r3, r0
   14324:	7023      	strb	r3, [r4, #0]
   14326:	47a8      	blx	r5
   14328:	0030      	movs	r0, r6
   1432a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1432c:	780b      	ldrb	r3, [r1, #0]
   1432e:	2001      	movs	r0, #1
   14330:	0021      	movs	r1, r4
   14332:	2520      	movs	r5, #32
   14334:	3184      	adds	r1, #132	; 0x84
   14336:	4003      	ands	r3, r0
   14338:	015a      	lsls	r2, r3, #5
   1433a:	780b      	ldrb	r3, [r1, #0]
   1433c:	43ab      	bics	r3, r5
   1433e:	4313      	orrs	r3, r2
   14340:	700b      	strb	r3, [r1, #0]
   14342:	0023      	movs	r3, r4
   14344:	2200      	movs	r2, #0
   14346:	33ca      	adds	r3, #202	; 0xca
   14348:	3494      	adds	r4, #148	; 0x94
   1434a:	801a      	strh	r2, [r3, #0]
   1434c:	7823      	ldrb	r3, [r4, #0]
   1434e:	3210      	adds	r2, #16
   14350:	4393      	bics	r3, r2
   14352:	7023      	strb	r3, [r4, #0]
   14354:	210b      	movs	r1, #11
   14356:	e748      	b.n	141ea <LORAWAN_SetAttr+0x116>
   14358:	466a      	mov	r2, sp
   1435a:	780b      	ldrb	r3, [r1, #0]
   1435c:	7013      	strb	r3, [r2, #0]
   1435e:	0022      	movs	r2, r4
   14360:	32f3      	adds	r2, #243	; 0xf3
   14362:	7812      	ldrb	r2, [r2, #0]
   14364:	429a      	cmp	r2, r3
   14366:	d900      	bls.n	1436a <LORAWAN_SetAttr+0x296>
   14368:	e739      	b.n	141de <LORAWAN_SetAttr+0x10a>
   1436a:	0022      	movs	r2, r4
   1436c:	32f4      	adds	r2, #244	; 0xf4
   1436e:	7812      	ldrb	r2, [r2, #0]
   14370:	429a      	cmp	r2, r3
   14372:	d200      	bcs.n	14376 <LORAWAN_SetAttr+0x2a2>
   14374:	e733      	b.n	141de <LORAWAN_SetAttr+0x10a>
   14376:	4669      	mov	r1, sp
   14378:	2010      	movs	r0, #16
   1437a:	4b18      	ldr	r3, [pc, #96]	; (143dc <LORAWAN_SetAttr+0x308>)
   1437c:	4798      	blx	r3
   1437e:	0006      	movs	r6, r0
   14380:	2808      	cmp	r0, #8
   14382:	d000      	beq.n	14386 <LORAWAN_SetAttr+0x2b2>
   14384:	e72b      	b.n	141de <LORAWAN_SetAttr+0x10a>
   14386:	466b      	mov	r3, sp
   14388:	210c      	movs	r1, #12
   1438a:	2001      	movs	r0, #1
   1438c:	781b      	ldrb	r3, [r3, #0]
   1438e:	34e7      	adds	r4, #231	; 0xe7
   14390:	7023      	strb	r3, [r4, #0]
   14392:	4b0f      	ldr	r3, [pc, #60]	; (143d0 <LORAWAN_SetAttr+0x2fc>)
   14394:	4798      	blx	r3
   14396:	e7c7      	b.n	14328 <LORAWAN_SetAttr+0x254>
   14398:	466a      	mov	r2, sp
   1439a:	780b      	ldrb	r3, [r1, #0]
   1439c:	201d      	movs	r0, #29
   1439e:	7013      	strb	r3, [r2, #0]
   143a0:	4669      	mov	r1, sp
   143a2:	4b0e      	ldr	r3, [pc, #56]	; (143dc <LORAWAN_SetAttr+0x308>)
   143a4:	4798      	blx	r3
   143a6:	0006      	movs	r6, r0
   143a8:	2808      	cmp	r0, #8
   143aa:	d000      	beq.n	143ae <LORAWAN_SetAttr+0x2da>
   143ac:	e717      	b.n	141de <LORAWAN_SetAttr+0x10a>
   143ae:	466b      	mov	r3, sp
   143b0:	781b      	ldrb	r3, [r3, #0]
   143b2:	34e9      	adds	r4, #233	; 0xe9
   143b4:	7023      	strb	r3, [r4, #0]
   143b6:	210a      	movs	r1, #10
   143b8:	2000      	movs	r0, #0
   143ba:	e7ea      	b.n	14392 <LORAWAN_SetAttr+0x2be>
   143bc:	780b      	ldrb	r3, [r1, #0]
   143be:	2103      	movs	r1, #3
   143c0:	34ff      	adds	r4, #255	; 0xff
   143c2:	7063      	strb	r3, [r4, #1]
   143c4:	2000      	movs	r0, #0
   143c6:	e710      	b.n	141ea <LORAWAN_SetAttr+0x116>
   143c8:	20003e8c 	.word	0x20003e8c
   143cc:	0001835b 	.word	0x0001835b
   143d0:	0000bbc5 	.word	0x0000bbc5
   143d4:	00007bb1 	.word	0x00007bb1
   143d8:	0000022d 	.word	0x0000022d
   143dc:	00010471 	.word	0x00010471
   143e0:	680b      	ldr	r3, [r1, #0]
   143e2:	260a      	movs	r6, #10
   143e4:	1c5a      	adds	r2, r3, #1
   143e6:	d09f      	beq.n	14328 <LORAWAN_SetAttr+0x254>
   143e8:	2115      	movs	r1, #21
   143ea:	2000      	movs	r0, #0
   143ec:	3488      	adds	r4, #136	; 0x88
   143ee:	6023      	str	r3, [r4, #0]
   143f0:	4b7f      	ldr	r3, [pc, #508]	; (145f0 <LORAWAN_SetAttr+0x51c>)
   143f2:	4798      	blx	r3
   143f4:	e72c      	b.n	14250 <LORAWAN_SetAttr+0x17c>
   143f6:	680b      	ldr	r3, [r1, #0]
   143f8:	260a      	movs	r6, #10
   143fa:	1c5a      	adds	r2, r3, #1
   143fc:	d100      	bne.n	14400 <LORAWAN_SetAttr+0x32c>
   143fe:	e793      	b.n	14328 <LORAWAN_SetAttr+0x254>
   14400:	0031      	movs	r1, r6
   14402:	348c      	adds	r4, #140	; 0x8c
   14404:	6023      	str	r3, [r4, #0]
   14406:	2001      	movs	r0, #1
   14408:	e7f2      	b.n	143f0 <LORAWAN_SetAttr+0x31c>
   1440a:	0026      	movs	r6, r4
   1440c:	880b      	ldrh	r3, [r1, #0]
   1440e:	36d0      	adds	r6, #208	; 0xd0
   14410:	210c      	movs	r1, #12
   14412:	2000      	movs	r0, #0
   14414:	4d76      	ldr	r5, [pc, #472]	; (145f0 <LORAWAN_SetAttr+0x51c>)
   14416:	8033      	strh	r3, [r6, #0]
   14418:	47a8      	blx	r5
   1441a:	22fa      	movs	r2, #250	; 0xfa
   1441c:	8833      	ldrh	r3, [r6, #0]
   1441e:	0092      	lsls	r2, r2, #2
   14420:	189b      	adds	r3, r3, r2
   14422:	34d2      	adds	r4, #210	; 0xd2
   14424:	8023      	strh	r3, [r4, #0]
   14426:	210d      	movs	r1, #13
   14428:	2000      	movs	r0, #0
   1442a:	e745      	b.n	142b8 <LORAWAN_SetAttr+0x1e4>
   1442c:	780b      	ldrb	r3, [r1, #0]
   1442e:	260a      	movs	r6, #10
   14430:	2b0f      	cmp	r3, #15
   14432:	d900      	bls.n	14436 <LORAWAN_SetAttr+0x362>
   14434:	e778      	b.n	14328 <LORAWAN_SetAttr+0x254>
   14436:	3498      	adds	r4, #152	; 0x98
   14438:	7023      	strb	r3, [r4, #0]
   1443a:	e709      	b.n	14250 <LORAWAN_SetAttr+0x17c>
   1443c:	880b      	ldrh	r3, [r1, #0]
   1443e:	34d4      	adds	r4, #212	; 0xd4
   14440:	8023      	strh	r3, [r4, #0]
   14442:	210e      	movs	r1, #14
   14444:	e7be      	b.n	143c4 <LORAWAN_SetAttr+0x2f0>
   14446:	880b      	ldrh	r3, [r1, #0]
   14448:	34d6      	adds	r4, #214	; 0xd6
   1444a:	8023      	strh	r3, [r4, #0]
   1444c:	210f      	movs	r1, #15
   1444e:	e7b9      	b.n	143c4 <LORAWAN_SetAttr+0x2f0>
   14450:	780b      	ldrb	r3, [r1, #0]
   14452:	34dc      	adds	r4, #220	; 0xdc
   14454:	7023      	strb	r3, [r4, #0]
   14456:	2111      	movs	r1, #17
   14458:	e7b4      	b.n	143c4 <LORAWAN_SetAttr+0x2f0>
   1445a:	780b      	ldrb	r3, [r1, #0]
   1445c:	34dd      	adds	r4, #221	; 0xdd
   1445e:	7023      	strb	r3, [r4, #0]
   14460:	2112      	movs	r1, #18
   14462:	e7af      	b.n	143c4 <LORAWAN_SetAttr+0x2f0>
   14464:	880b      	ldrh	r3, [r1, #0]
   14466:	34da      	adds	r4, #218	; 0xda
   14468:	8023      	strh	r3, [r4, #0]
   1446a:	2110      	movs	r1, #16
   1446c:	e7aa      	b.n	143c4 <LORAWAN_SetAttr+0x2f0>
   1446e:	780b      	ldrb	r3, [r1, #0]
   14470:	34e2      	adds	r4, #226	; 0xe2
   14472:	7023      	strb	r3, [r4, #0]
   14474:	2114      	movs	r1, #20
   14476:	e7a5      	b.n	143c4 <LORAWAN_SetAttr+0x2f0>
   14478:	780b      	ldrb	r3, [r1, #0]
   1447a:	34e1      	adds	r4, #225	; 0xe1
   1447c:	7023      	strb	r3, [r4, #0]
   1447e:	e69b      	b.n	141b8 <LORAWAN_SetAttr+0xe4>
   14480:	780b      	ldrb	r3, [r1, #0]
   14482:	34e8      	adds	r4, #232	; 0xe8
   14484:	e7fa      	b.n	1447c <LORAWAN_SetAttr+0x3a8>
   14486:	2001      	movs	r0, #1
   14488:	780b      	ldrb	r3, [r1, #0]
   1448a:	2110      	movs	r1, #16
   1448c:	3484      	adds	r4, #132	; 0x84
   1448e:	4003      	ands	r3, r0
   14490:	011a      	lsls	r2, r3, #4
   14492:	7823      	ldrb	r3, [r4, #0]
   14494:	438b      	bics	r3, r1
   14496:	4313      	orrs	r3, r2
   14498:	7023      	strb	r3, [r4, #0]
   1449a:	3905      	subs	r1, #5
   1449c:	e6a5      	b.n	141ea <LORAWAN_SetAttr+0x116>
   1449e:	7909      	ldrb	r1, [r1, #4]
   144a0:	7828      	ldrb	r0, [r5, #0]
   144a2:	4b54      	ldr	r3, [pc, #336]	; (145f4 <LORAWAN_SetAttr+0x520>)
   144a4:	4798      	blx	r3
   144a6:	0006      	movs	r6, r0
   144a8:	e73e      	b.n	14328 <LORAWAN_SetAttr+0x254>
   144aa:	7909      	ldrb	r1, [r1, #4]
   144ac:	7828      	ldrb	r0, [r5, #0]
   144ae:	4b52      	ldr	r3, [pc, #328]	; (145f8 <LORAWAN_SetAttr+0x524>)
   144b0:	e7f8      	b.n	144a4 <LORAWAN_SetAttr+0x3d0>
   144b2:	7808      	ldrb	r0, [r1, #0]
   144b4:	4b51      	ldr	r3, [pc, #324]	; (145fc <LORAWAN_SetAttr+0x528>)
   144b6:	6849      	ldr	r1, [r1, #4]
   144b8:	4798      	blx	r3
   144ba:	e7f4      	b.n	144a6 <LORAWAN_SetAttr+0x3d2>
   144bc:	7909      	ldrb	r1, [r1, #4]
   144be:	6828      	ldr	r0, [r5, #0]
   144c0:	4b4f      	ldr	r3, [pc, #316]	; (14600 <LORAWAN_SetAttr+0x52c>)
   144c2:	4798      	blx	r3
   144c4:	e7ef      	b.n	144a6 <LORAWAN_SetAttr+0x3d2>
   144c6:	786b      	ldrb	r3, [r5, #1]
   144c8:	7828      	ldrb	r0, [r5, #0]
   144ca:	021b      	lsls	r3, r3, #8
   144cc:	4303      	orrs	r3, r0
   144ce:	78a8      	ldrb	r0, [r5, #2]
   144d0:	7909      	ldrb	r1, [r1, #4]
   144d2:	0400      	lsls	r0, r0, #16
   144d4:	4303      	orrs	r3, r0
   144d6:	78e8      	ldrb	r0, [r5, #3]
   144d8:	0600      	lsls	r0, r0, #24
   144da:	4318      	orrs	r0, r3
   144dc:	4b49      	ldr	r3, [pc, #292]	; (14604 <LORAWAN_SetAttr+0x530>)
   144de:	e7f0      	b.n	144c2 <LORAWAN_SetAttr+0x3ee>
   144e0:	7808      	ldrb	r0, [r1, #0]
   144e2:	4b49      	ldr	r3, [pc, #292]	; (14608 <LORAWAN_SetAttr+0x534>)
   144e4:	4798      	blx	r3
   144e6:	e7de      	b.n	144a6 <LORAWAN_SetAttr+0x3d2>
   144e8:	8808      	ldrh	r0, [r1, #0]
   144ea:	4b48      	ldr	r3, [pc, #288]	; (1460c <LORAWAN_SetAttr+0x538>)
   144ec:	4798      	blx	r3
   144ee:	e663      	b.n	141b8 <LORAWAN_SetAttr+0xe4>
   144f0:	4b47      	ldr	r3, [pc, #284]	; (14610 <LORAWAN_SetAttr+0x53c>)
   144f2:	6019      	str	r1, [r3, #0]
   144f4:	e673      	b.n	141de <LORAWAN_SetAttr+0x10a>
   144f6:	7809      	ldrb	r1, [r1, #0]
   144f8:	7868      	ldrb	r0, [r5, #1]
   144fa:	4b46      	ldr	r3, [pc, #280]	; (14614 <LORAWAN_SetAttr+0x540>)
   144fc:	4798      	blx	r3
   144fe:	e7d2      	b.n	144a6 <LORAWAN_SetAttr+0x3d2>
   14500:	7809      	ldrb	r1, [r1, #0]
   14502:	4b45      	ldr	r3, [pc, #276]	; (14618 <LORAWAN_SetAttr+0x544>)
   14504:	1c68      	adds	r0, r5, #1
   14506:	4798      	blx	r3
   14508:	e7cd      	b.n	144a6 <LORAWAN_SetAttr+0x3d2>
   1450a:	7809      	ldrb	r1, [r1, #0]
   1450c:	1c68      	adds	r0, r5, #1
   1450e:	4b43      	ldr	r3, [pc, #268]	; (1461c <LORAWAN_SetAttr+0x548>)
   14510:	e7f9      	b.n	14506 <LORAWAN_SetAttr+0x432>
   14512:	7809      	ldrb	r1, [r1, #0]
   14514:	6868      	ldr	r0, [r5, #4]
   14516:	4b42      	ldr	r3, [pc, #264]	; (14620 <LORAWAN_SetAttr+0x54c>)
   14518:	e7f5      	b.n	14506 <LORAWAN_SetAttr+0x432>
   1451a:	7809      	ldrb	r1, [r1, #0]
   1451c:	6868      	ldr	r0, [r5, #4]
   1451e:	4b41      	ldr	r3, [pc, #260]	; (14624 <LORAWAN_SetAttr+0x550>)
   14520:	e7f1      	b.n	14506 <LORAWAN_SetAttr+0x432>
   14522:	7809      	ldrb	r1, [r1, #0]
   14524:	6868      	ldr	r0, [r5, #4]
   14526:	4b40      	ldr	r3, [pc, #256]	; (14628 <LORAWAN_SetAttr+0x554>)
   14528:	e7ed      	b.n	14506 <LORAWAN_SetAttr+0x432>
   1452a:	7809      	ldrb	r1, [r1, #0]
   1452c:	6868      	ldr	r0, [r5, #4]
   1452e:	4b3f      	ldr	r3, [pc, #252]	; (1462c <LORAWAN_SetAttr+0x558>)
   14530:	e7e9      	b.n	14506 <LORAWAN_SetAttr+0x432>
   14532:	7809      	ldrb	r1, [r1, #0]
   14534:	7868      	ldrb	r0, [r5, #1]
   14536:	4b3e      	ldr	r3, [pc, #248]	; (14630 <LORAWAN_SetAttr+0x55c>)
   14538:	e7e0      	b.n	144fc <LORAWAN_SetAttr+0x428>
   1453a:	7809      	ldrb	r1, [r1, #0]
   1453c:	7868      	ldrb	r0, [r5, #1]
   1453e:	4b3d      	ldr	r3, [pc, #244]	; (14634 <LORAWAN_SetAttr+0x560>)
   14540:	e7dc      	b.n	144fc <LORAWAN_SetAttr+0x428>
   14542:	2300      	movs	r3, #0
   14544:	466a      	mov	r2, sp
   14546:	7809      	ldrb	r1, [r1, #0]
   14548:	7013      	strb	r3, [r2, #0]
   1454a:	4299      	cmp	r1, r3
   1454c:	d014      	beq.n	14578 <LORAWAN_SetAttr+0x4a4>
   1454e:	0022      	movs	r2, r4
   14550:	2102      	movs	r1, #2
   14552:	32ff      	adds	r2, #255	; 0xff
   14554:	7f53      	ldrb	r3, [r2, #29]
   14556:	420b      	tst	r3, r1
   14558:	d001      	beq.n	1455e <LORAWAN_SetAttr+0x48a>
   1455a:	438b      	bics	r3, r1
   1455c:	7753      	strb	r3, [r2, #29]
   1455e:	2220      	movs	r2, #32
   14560:	34ff      	adds	r4, #255	; 0xff
   14562:	7f63      	ldrb	r3, [r4, #29]
   14564:	4213      	tst	r3, r2
   14566:	d100      	bne.n	1456a <LORAWAN_SetAttr+0x496>
   14568:	e626      	b.n	141b8 <LORAWAN_SetAttr+0xe4>
   1456a:	4393      	bics	r3, r2
   1456c:	7763      	strb	r3, [r4, #29]
   1456e:	4669      	mov	r1, sp
   14570:	4b31      	ldr	r3, [pc, #196]	; (14638 <LORAWAN_SetAttr+0x564>)
   14572:	2038      	movs	r0, #56	; 0x38
   14574:	4798      	blx	r3
   14576:	e61f      	b.n	141b8 <LORAWAN_SetAttr+0xe4>
   14578:	4a30      	ldr	r2, [pc, #192]	; (1463c <LORAWAN_SetAttr+0x568>)
   1457a:	4b31      	ldr	r3, [pc, #196]	; (14640 <LORAWAN_SetAttr+0x56c>)
   1457c:	200e      	movs	r0, #14
   1457e:	4798      	blx	r3
   14580:	e61a      	b.n	141b8 <LORAWAN_SetAttr+0xe4>
   14582:	466b      	mov	r3, sp
   14584:	780a      	ldrb	r2, [r1, #0]
   14586:	34ff      	adds	r4, #255	; 0xff
   14588:	701a      	strb	r2, [r3, #0]
   1458a:	2320      	movs	r3, #32
   1458c:	2a00      	cmp	r2, #0
   1458e:	d007      	beq.n	145a0 <LORAWAN_SetAttr+0x4cc>
   14590:	7f62      	ldrb	r2, [r4, #29]
   14592:	4313      	orrs	r3, r2
   14594:	7763      	strb	r3, [r4, #29]
   14596:	4669      	mov	r1, sp
   14598:	4b27      	ldr	r3, [pc, #156]	; (14638 <LORAWAN_SetAttr+0x564>)
   1459a:	2038      	movs	r0, #56	; 0x38
   1459c:	4798      	blx	r3
   1459e:	e782      	b.n	144a6 <LORAWAN_SetAttr+0x3d2>
   145a0:	7f62      	ldrb	r2, [r4, #29]
   145a2:	260a      	movs	r6, #10
   145a4:	421a      	tst	r2, r3
   145a6:	d100      	bne.n	145aa <LORAWAN_SetAttr+0x4d6>
   145a8:	e6be      	b.n	14328 <LORAWAN_SetAttr+0x254>
   145aa:	439a      	bics	r2, r3
   145ac:	7762      	strb	r2, [r4, #29]
   145ae:	e7f2      	b.n	14596 <LORAWAN_SetAttr+0x4c2>
   145b0:	780b      	ldrb	r3, [r1, #0]
   145b2:	260a      	movs	r6, #10
   145b4:	2b08      	cmp	r3, #8
   145b6:	d900      	bls.n	145ba <LORAWAN_SetAttr+0x4e6>
   145b8:	e6b6      	b.n	14328 <LORAWAN_SetAttr+0x254>
   145ba:	228b      	movs	r2, #139	; 0x8b
   145bc:	0092      	lsls	r2, r2, #2
   145be:	54a3      	strb	r3, [r4, r2]
   145c0:	210d      	movs	r1, #13
   145c2:	e720      	b.n	14406 <LORAWAN_SetAttr+0x332>
   145c4:	780a      	ldrb	r2, [r1, #0]
   145c6:	4b1f      	ldr	r3, [pc, #124]	; (14644 <LORAWAN_SetAttr+0x570>)
   145c8:	54e2      	strb	r2, [r4, r3]
   145ca:	e5f5      	b.n	141b8 <LORAWAN_SetAttr+0xe4>
   145cc:	4b1e      	ldr	r3, [pc, #120]	; (14648 <LORAWAN_SetAttr+0x574>)
   145ce:	4798      	blx	r3
   145d0:	e769      	b.n	144a6 <LORAWAN_SetAttr+0x3d2>
   145d2:	4b1e      	ldr	r3, [pc, #120]	; (1464c <LORAWAN_SetAttr+0x578>)
   145d4:	e7fb      	b.n	145ce <LORAWAN_SetAttr+0x4fa>
   145d6:	780a      	ldrb	r2, [r1, #0]
   145d8:	2302      	movs	r3, #2
   145da:	34ff      	adds	r4, #255	; 0xff
   145dc:	2a00      	cmp	r2, #0
   145de:	d003      	beq.n	145e8 <LORAWAN_SetAttr+0x514>
   145e0:	7f62      	ldrb	r2, [r4, #29]
   145e2:	4313      	orrs	r3, r2
   145e4:	7763      	strb	r3, [r4, #29]
   145e6:	e5e7      	b.n	141b8 <LORAWAN_SetAttr+0xe4>
   145e8:	7f62      	ldrb	r2, [r4, #29]
   145ea:	439a      	bics	r2, r3
   145ec:	7762      	strb	r2, [r4, #29]
   145ee:	e5e3      	b.n	141b8 <LORAWAN_SetAttr+0xe4>
   145f0:	0000bbc5 	.word	0x0000bbc5
   145f4:	0001355d 	.word	0x0001355d
   145f8:	000134ed 	.word	0x000134ed
   145fc:	00012d15 	.word	0x00012d15
   14600:	00012c8d 	.word	0x00012c8d
   14604:	00012cc9 	.word	0x00012cc9
   14608:	00014055 	.word	0x00014055
   1460c:	00011f29 	.word	0x00011f29
   14610:	200041e4 	.word	0x200041e4
   14614:	00014b69 	.word	0x00014b69
   14618:	00014dc9 	.word	0x00014dc9
   1461c:	00014e15 	.word	0x00014e15
   14620:	00014d81 	.word	0x00014d81
   14624:	00014e61 	.word	0x00014e61
   14628:	00014e81 	.word	0x00014e81
   1462c:	00014e9d 	.word	0x00014e9d
   14630:	00014ee1 	.word	0x00014ee1
   14634:	00014f1d 	.word	0x00014f1d
   14638:	0001048d 	.word	0x0001048d
   1463c:	20003fa8 	.word	0x20003fa8
   14640:	00010455 	.word	0x00010455
   14644:	0000022d 	.word	0x0000022d
   14648:	00011fc5 	.word	0x00011fc5
   1464c:	00011fed 	.word	0x00011fed

00014650 <AssemblePacket>:
   14650:	b5f0      	push	{r4, r5, r6, r7, lr}
   14652:	2710      	movs	r7, #16
   14654:	b08f      	sub	sp, #60	; 0x3c
   14656:	9308      	str	r3, [sp, #32]
   14658:	ab0d      	add	r3, sp, #52	; 0x34
   1465a:	801f      	strh	r7, [r3, #0]
   1465c:	231e      	movs	r3, #30
   1465e:	920a      	str	r2, [sp, #40]	; 0x28
   14660:	aa06      	add	r2, sp, #24
   14662:	189b      	adds	r3, r3, r2
   14664:	2500      	movs	r5, #0
   14666:	2210      	movs	r2, #16
   14668:	ac0c      	add	r4, sp, #48	; 0x30
   1466a:	9006      	str	r0, [sp, #24]
   1466c:	910b      	str	r1, [sp, #44]	; 0x2c
   1466e:	32ff      	adds	r2, #255	; 0xff
   14670:	0029      	movs	r1, r5
   14672:	4ed1      	ldr	r6, [pc, #836]	; (149b8 <AssemblePacket+0x368>)
   14674:	7025      	strb	r5, [r4, #0]
   14676:	48d1      	ldr	r0, [pc, #836]	; (149bc <AssemblePacket+0x36c>)
   14678:	801d      	strh	r5, [r3, #0]
   1467a:	47b0      	blx	r6
   1467c:	003a      	movs	r2, r7
   1467e:	0029      	movs	r1, r5
   14680:	48cf      	ldr	r0, [pc, #828]	; (149c0 <AssemblePacket+0x370>)
   14682:	47b0      	blx	r6
   14684:	221f      	movs	r2, #31
   14686:	7823      	ldrb	r3, [r4, #0]
   14688:	9906      	ldr	r1, [sp, #24]
   1468a:	4013      	ands	r3, r2
   1468c:	42a9      	cmp	r1, r5
   1468e:	d100      	bne.n	14692 <AssemblePacket+0x42>
   14690:	e0dc      	b.n	1484c <AssemblePacket+0x1fc>
   14692:	3a9f      	subs	r2, #159	; 0x9f
   14694:	4313      	orrs	r3, r2
   14696:	7023      	strb	r3, [r4, #0]
   14698:	4bca      	ldr	r3, [pc, #808]	; (149c4 <AssemblePacket+0x374>)
   1469a:	3281      	adds	r2, #129	; 0x81
   1469c:	3394      	adds	r3, #148	; 0x94
   1469e:	7819      	ldrb	r1, [r3, #0]
   146a0:	430a      	orrs	r2, r1
   146a2:	701a      	strb	r2, [r3, #0]
   146a4:	22e0      	movs	r2, #224	; 0xe0
   146a6:	7823      	ldrb	r3, [r4, #0]
   146a8:	48c4      	ldr	r0, [pc, #784]	; (149bc <AssemblePacket+0x36c>)
   146aa:	4013      	ands	r3, r2
   146ac:	7023      	strb	r3, [r4, #0]
   146ae:	4cc5      	ldr	r4, [pc, #788]	; (149c4 <AssemblePacket+0x374>)
   146b0:	7403      	strb	r3, [r0, #16]
   146b2:	3adc      	subs	r2, #220	; 0xdc
   146b4:	4bc4      	ldr	r3, [pc, #784]	; (149c8 <AssemblePacket+0x378>)
   146b6:	3011      	adds	r0, #17
   146b8:	1c61      	adds	r1, r4, #1
   146ba:	4798      	blx	r3
   146bc:	2215      	movs	r2, #21
   146be:	ab0d      	add	r3, sp, #52	; 0x34
   146c0:	0025      	movs	r5, r4
   146c2:	801a      	strh	r2, [r3, #0]
   146c4:	2600      	movs	r6, #0
   146c6:	466b      	mov	r3, sp
   146c8:	3584      	adds	r5, #132	; 0x84
   146ca:	761e      	strb	r6, [r3, #24]
   146cc:	782b      	ldrb	r3, [r5, #0]
   146ce:	069b      	lsls	r3, r3, #26
   146d0:	d400      	bmi.n	146d4 <AssemblePacket+0x84>
   146d2:	e130      	b.n	14936 <AssemblePacket+0x2e6>
   146d4:	0027      	movs	r7, r4
   146d6:	4bbd      	ldr	r3, [pc, #756]	; (149cc <AssemblePacket+0x37c>)
   146d8:	37f3      	adds	r7, #243	; 0xf3
   146da:	781a      	ldrb	r2, [r3, #0]
   146dc:	783b      	ldrb	r3, [r7, #0]
   146de:	429a      	cmp	r2, r3
   146e0:	d31e      	bcc.n	14720 <AssemblePacket+0xd0>
   146e2:	2180      	movs	r1, #128	; 0x80
   146e4:	466b      	mov	r3, sp
   146e6:	0022      	movs	r2, r4
   146e8:	4249      	negs	r1, r1
   146ea:	32ca      	adds	r2, #202	; 0xca
   146ec:	7619      	strb	r1, [r3, #24]
   146ee:	8813      	ldrh	r3, [r2, #0]
   146f0:	3301      	adds	r3, #1
   146f2:	b29b      	uxth	r3, r3
   146f4:	8013      	strh	r3, [r2, #0]
   146f6:	0022      	movs	r2, r4
   146f8:	32dc      	adds	r2, #220	; 0xdc
   146fa:	7812      	ldrb	r2, [r2, #0]
   146fc:	4293      	cmp	r3, r2
   146fe:	d30f      	bcc.n	14720 <AssemblePacket+0xd0>
   14700:	2040      	movs	r0, #64	; 0x40
   14702:	4308      	orrs	r0, r1
   14704:	9006      	str	r0, [sp, #24]
   14706:	0020      	movs	r0, r4
   14708:	3094      	adds	r0, #148	; 0x94
   1470a:	7801      	ldrb	r1, [r0, #0]
   1470c:	4684      	mov	ip, r0
   1470e:	2010      	movs	r0, #16
   14710:	4301      	orrs	r1, r0
   14712:	4660      	mov	r0, ip
   14714:	7001      	strb	r1, [r0, #0]
   14716:	4293      	cmp	r3, r2
   14718:	d000      	beq.n	1471c <AssemblePacket+0xcc>
   1471a:	e09b      	b.n	14854 <AssemblePacket+0x204>
   1471c:	34f6      	adds	r4, #246	; 0xf6
   1471e:	7026      	strb	r6, [r4, #0]
   14720:	4da8      	ldr	r5, [pc, #672]	; (149c4 <AssemblePacket+0x374>)
   14722:	2102      	movs	r1, #2
   14724:	002a      	movs	r2, r5
   14726:	3294      	adds	r2, #148	; 0x94
   14728:	7813      	ldrb	r3, [r2, #0]
   1472a:	420b      	tst	r3, r1
   1472c:	d005      	beq.n	1473a <AssemblePacket+0xea>
   1472e:	2020      	movs	r0, #32
   14730:	9c06      	ldr	r4, [sp, #24]
   14732:	438b      	bics	r3, r1
   14734:	4304      	orrs	r4, r0
   14736:	9406      	str	r4, [sp, #24]
   14738:	7013      	strb	r3, [r2, #0]
   1473a:	2310      	movs	r3, #16
   1473c:	9c06      	ldr	r4, [sp, #24]
   1473e:	439c      	bics	r4, r3
   14740:	002b      	movs	r3, r5
   14742:	33e0      	adds	r3, #224	; 0xe0
   14744:	781b      	ldrb	r3, [r3, #0]
   14746:	9309      	str	r3, [sp, #36]	; 0x24
   14748:	2b00      	cmp	r3, #0
   1474a:	d003      	beq.n	14754 <AssemblePacket+0x104>
   1474c:	9b08      	ldr	r3, [sp, #32]
   1474e:	2b00      	cmp	r3, #0
   14750:	d000      	beq.n	14754 <AssemblePacket+0x104>
   14752:	e0f6      	b.n	14942 <AssemblePacket+0x2f2>
   14754:	230f      	movs	r3, #15
   14756:	439c      	bics	r4, r3
   14758:	466b      	mov	r3, sp
   1475a:	9406      	str	r4, [sp, #24]
   1475c:	ac0d      	add	r4, sp, #52	; 0x34
   1475e:	8826      	ldrh	r6, [r4, #0]
   14760:	4f96      	ldr	r7, [pc, #600]	; (149bc <AssemblePacket+0x36c>)
   14762:	7e1b      	ldrb	r3, [r3, #24]
   14764:	1c70      	adds	r0, r6, #1
   14766:	b280      	uxth	r0, r0
   14768:	55bb      	strb	r3, [r7, r6]
   1476a:	19c0      	adds	r0, r0, r7
   1476c:	4b96      	ldr	r3, [pc, #600]	; (149c8 <AssemblePacket+0x378>)
   1476e:	2202      	movs	r2, #2
   14770:	4997      	ldr	r1, [pc, #604]	; (149d0 <AssemblePacket+0x380>)
   14772:	4798      	blx	r3
   14774:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14776:	3603      	adds	r6, #3
   14778:	8026      	strh	r6, [r4, #0]
   1477a:	2b00      	cmp	r3, #0
   1477c:	d100      	bne.n	14780 <AssemblePacket+0x130>
   1477e:	e0e7      	b.n	14950 <AssemblePacket+0x300>
   14780:	9b08      	ldr	r3, [sp, #32]
   14782:	2b00      	cmp	r3, #0
   14784:	d004      	beq.n	14790 <AssemblePacket+0x140>
   14786:	2201      	movs	r2, #1
   14788:	0021      	movs	r1, r4
   1478a:	0038      	movs	r0, r7
   1478c:	4b91      	ldr	r3, [pc, #580]	; (149d4 <AssemblePacket+0x384>)
   1478e:	4798      	blx	r3
   14790:	466a      	mov	r2, sp
   14792:	212c      	movs	r1, #44	; 0x2c
   14794:	1852      	adds	r2, r2, r1
   14796:	8823      	ldrh	r3, [r4, #0]
   14798:	7812      	ldrb	r2, [r2, #0]
   1479a:	1c5e      	adds	r6, r3, #1
   1479c:	54fa      	strb	r2, [r7, r3]
   1479e:	9b08      	ldr	r3, [sp, #32]
   147a0:	b2b6      	uxth	r6, r6
   147a2:	8026      	strh	r6, [r4, #0]
   147a4:	2b00      	cmp	r3, #0
   147a6:	d100      	bne.n	147aa <AssemblePacket+0x15a>
   147a8:	e0d6      	b.n	14958 <AssemblePacket+0x308>
   147aa:	001a      	movs	r2, r3
   147ac:	990a      	ldr	r1, [sp, #40]	; 0x28
   147ae:	4b86      	ldr	r3, [pc, #536]	; (149c8 <AssemblePacket+0x378>)
   147b0:	19b8      	adds	r0, r7, r6
   147b2:	4798      	blx	r3
   147b4:	2120      	movs	r1, #32
   147b6:	466b      	mov	r3, sp
   147b8:	185b      	adds	r3, r3, r1
   147ba:	7819      	ldrb	r1, [r3, #0]
   147bc:	682b      	ldr	r3, [r5, #0]
   147be:	002a      	movs	r2, r5
   147c0:	0a18      	lsrs	r0, r3, #8
   147c2:	792b      	ldrb	r3, [r5, #4]
   147c4:	3288      	adds	r2, #136	; 0x88
   147c6:	061b      	lsls	r3, r3, #24
   147c8:	4303      	orrs	r3, r0
   147ca:	9304      	str	r3, [sp, #16]
   147cc:	2301      	movs	r3, #1
   147ce:	9301      	str	r3, [sp, #4]
   147d0:	4b81      	ldr	r3, [pc, #516]	; (149d8 <AssemblePacket+0x388>)
   147d2:	9703      	str	r7, [sp, #12]
   147d4:	9602      	str	r6, [sp, #8]
   147d6:	9300      	str	r3, [sp, #0]
   147d8:	6813      	ldr	r3, [r2, #0]
   147da:	980a      	ldr	r0, [sp, #40]	; 0x28
   147dc:	2200      	movs	r2, #0
   147de:	4c7f      	ldr	r4, [pc, #508]	; (149dc <AssemblePacket+0x38c>)
   147e0:	47a0      	blx	r4
   147e2:	2800      	cmp	r0, #0
   147e4:	d002      	beq.n	147ec <AssemblePacket+0x19c>
   147e6:	2020      	movs	r0, #32
   147e8:	4b7d      	ldr	r3, [pc, #500]	; (149e0 <AssemblePacket+0x390>)
   147ea:	4798      	blx	r3
   147ec:	aa0d      	add	r2, sp, #52	; 0x34
   147ee:	8813      	ldrh	r3, [r2, #0]
   147f0:	9908      	ldr	r1, [sp, #32]
   147f2:	18cb      	adds	r3, r1, r3
   147f4:	8013      	strh	r3, [r2, #0]
   147f6:	4c73      	ldr	r4, [pc, #460]	; (149c4 <AssemblePacket+0x374>)
   147f8:	ae0d      	add	r6, sp, #52	; 0x34
   147fa:	0021      	movs	r1, r4
   147fc:	6823      	ldr	r3, [r4, #0]
   147fe:	8832      	ldrh	r2, [r6, #0]
   14800:	0a18      	lsrs	r0, r3, #8
   14802:	7923      	ldrb	r3, [r4, #4]
   14804:	3a10      	subs	r2, #16
   14806:	061b      	lsls	r3, r3, #24
   14808:	4303      	orrs	r3, r0
   1480a:	9300      	str	r3, [sp, #0]
   1480c:	3188      	adds	r1, #136	; 0x88
   1480e:	b2d2      	uxtb	r2, r2
   14810:	2349      	movs	r3, #73	; 0x49
   14812:	6809      	ldr	r1, [r1, #0]
   14814:	2000      	movs	r0, #0
   14816:	4d73      	ldr	r5, [pc, #460]	; (149e4 <AssemblePacket+0x394>)
   14818:	47a8      	blx	r5
   1481a:	4f68      	ldr	r7, [pc, #416]	; (149bc <AssemblePacket+0x36c>)
   1481c:	2210      	movs	r2, #16
   1481e:	4968      	ldr	r1, [pc, #416]	; (149c0 <AssemblePacket+0x370>)
   14820:	0038      	movs	r0, r7
   14822:	4b69      	ldr	r3, [pc, #420]	; (149c8 <AssemblePacket+0x378>)
   14824:	4798      	blx	r3
   14826:	8833      	ldrh	r3, [r6, #0]
   14828:	4a65      	ldr	r2, [pc, #404]	; (149c0 <AssemblePacket+0x370>)
   1482a:	9300      	str	r3, [sp, #0]
   1482c:	2102      	movs	r1, #2
   1482e:	003b      	movs	r3, r7
   14830:	4d6d      	ldr	r5, [pc, #436]	; (149e8 <AssemblePacket+0x398>)
   14832:	486e      	ldr	r0, [pc, #440]	; (149ec <AssemblePacket+0x39c>)
   14834:	47a8      	blx	r5
   14836:	8836      	ldrh	r6, [r6, #0]
   14838:	2204      	movs	r2, #4
   1483a:	19f0      	adds	r0, r6, r7
   1483c:	4960      	ldr	r1, [pc, #384]	; (149c0 <AssemblePacket+0x370>)
   1483e:	4b62      	ldr	r3, [pc, #392]	; (149c8 <AssemblePacket+0x378>)
   14840:	4798      	blx	r3
   14842:	3e0c      	subs	r6, #12
   14844:	34ce      	adds	r4, #206	; 0xce
   14846:	8026      	strh	r6, [r4, #0]
   14848:	b00f      	add	sp, #60	; 0x3c
   1484a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1484c:	2240      	movs	r2, #64	; 0x40
   1484e:	4313      	orrs	r3, r2
   14850:	7023      	strb	r3, [r4, #0]
   14852:	e727      	b.n	146a4 <AssemblePacket+0x54>
   14854:	4293      	cmp	r3, r2
   14856:	d800      	bhi.n	1485a <AssemblePacket+0x20a>
   14858:	e762      	b.n	14720 <AssemblePacket+0xd0>
   1485a:	0022      	movs	r2, r4
   1485c:	0021      	movs	r1, r4
   1485e:	32f6      	adds	r2, #246	; 0xf6
   14860:	7813      	ldrb	r3, [r2, #0]
   14862:	31dd      	adds	r1, #221	; 0xdd
   14864:	3301      	adds	r3, #1
   14866:	b2db      	uxtb	r3, r3
   14868:	7013      	strb	r3, [r2, #0]
   1486a:	7809      	ldrb	r1, [r1, #0]
   1486c:	4299      	cmp	r1, r3
   1486e:	d900      	bls.n	14872 <AssemblePacket+0x222>
   14870:	e756      	b.n	14720 <AssemblePacket+0xd0>
   14872:	231a      	movs	r3, #26
   14874:	7016      	strb	r6, [r2, #0]
   14876:	aa06      	add	r2, sp, #24
   14878:	189b      	adds	r3, r3, r2
   1487a:	001a      	movs	r2, r3
   1487c:	0031      	movs	r1, r6
   1487e:	4b5c      	ldr	r3, [pc, #368]	; (149f0 <AssemblePacket+0x3a0>)
   14880:	203c      	movs	r0, #60	; 0x3c
   14882:	4798      	blx	r3
   14884:	4b5b      	ldr	r3, [pc, #364]	; (149f4 <AssemblePacket+0x3a4>)
   14886:	781a      	ldrb	r2, [r3, #0]
   14888:	ab06      	add	r3, sp, #24
   1488a:	7e9b      	ldrb	r3, [r3, #26]
   1488c:	429a      	cmp	r2, r3
   1488e:	d00d      	beq.n	148ac <AssemblePacket+0x25c>
   14890:	34ff      	adds	r4, #255	; 0xff
   14892:	7820      	ldrb	r0, [r4, #0]
   14894:	4b58      	ldr	r3, [pc, #352]	; (149f8 <AssemblePacket+0x3a8>)
   14896:	4798      	blx	r3
   14898:	0031      	movs	r1, r6
   1489a:	4a56      	ldr	r2, [pc, #344]	; (149f4 <AssemblePacket+0x3a4>)
   1489c:	4b54      	ldr	r3, [pc, #336]	; (149f0 <AssemblePacket+0x3a0>)
   1489e:	2035      	movs	r0, #53	; 0x35
   148a0:	4798      	blx	r3
   148a2:	210a      	movs	r1, #10
   148a4:	0030      	movs	r0, r6
   148a6:	4b55      	ldr	r3, [pc, #340]	; (149fc <AssemblePacket+0x3ac>)
   148a8:	4798      	blx	r3
   148aa:	e739      	b.n	14720 <AssemblePacket+0xd0>
   148ac:	4b47      	ldr	r3, [pc, #284]	; (149cc <AssemblePacket+0x37c>)
   148ae:	783a      	ldrb	r2, [r7, #0]
   148b0:	781b      	ldrb	r3, [r3, #0]
   148b2:	4293      	cmp	r3, r2
   148b4:	d022      	beq.n	148fc <AssemblePacket+0x2ac>
   148b6:	d800      	bhi.n	148ba <AssemblePacket+0x26a>
   148b8:	e732      	b.n	14720 <AssemblePacket+0xd0>
   148ba:	221b      	movs	r2, #27
   148bc:	003d      	movs	r5, r7
   148be:	a906      	add	r1, sp, #24
   148c0:	3b01      	subs	r3, #1
   148c2:	1852      	adds	r2, r2, r1
   148c4:	7013      	strb	r3, [r2, #0]
   148c6:	261b      	movs	r6, #27
   148c8:	ab06      	add	r3, sp, #24
   148ca:	18f6      	adds	r6, r6, r3
   148cc:	782a      	ldrb	r2, [r5, #0]
   148ce:	7833      	ldrb	r3, [r6, #0]
   148d0:	429a      	cmp	r2, r3
   148d2:	d900      	bls.n	148d6 <AssemblePacket+0x286>
   148d4:	e724      	b.n	14720 <AssemblePacket+0xd0>
   148d6:	0031      	movs	r1, r6
   148d8:	2010      	movs	r0, #16
   148da:	4f49      	ldr	r7, [pc, #292]	; (14a00 <AssemblePacket+0x3b0>)
   148dc:	47b8      	blx	r7
   148de:	2808      	cmp	r0, #8
   148e0:	d000      	beq.n	148e4 <AssemblePacket+0x294>
   148e2:	e71d      	b.n	14720 <AssemblePacket+0xd0>
   148e4:	0031      	movs	r1, r6
   148e6:	3009      	adds	r0, #9
   148e8:	47b8      	blx	r7
   148ea:	7833      	ldrb	r3, [r6, #0]
   148ec:	2808      	cmp	r0, #8
   148ee:	d061      	beq.n	149b4 <AssemblePacket+0x364>
   148f0:	782a      	ldrb	r2, [r5, #0]
   148f2:	429a      	cmp	r2, r3
   148f4:	d2e7      	bcs.n	148c6 <AssemblePacket+0x276>
   148f6:	3b01      	subs	r3, #1
   148f8:	7033      	strb	r3, [r6, #0]
   148fa:	e7e4      	b.n	148c6 <AssemblePacket+0x276>
   148fc:	34ff      	adds	r4, #255	; 0xff
   148fe:	7820      	ldrb	r0, [r4, #0]
   14900:	4b40      	ldr	r3, [pc, #256]	; (14a04 <AssemblePacket+0x3b4>)
   14902:	4798      	blx	r3
   14904:	231b      	movs	r3, #27
   14906:	aa06      	add	r2, sp, #24
   14908:	189b      	adds	r3, r3, r2
   1490a:	0019      	movs	r1, r3
   1490c:	4c3e      	ldr	r4, [pc, #248]	; (14a08 <AssemblePacket+0x3b8>)
   1490e:	2013      	movs	r0, #19
   14910:	47a0      	blx	r4
   14912:	231b      	movs	r3, #27
   14914:	aa06      	add	r2, sp, #24
   14916:	189b      	adds	r3, r3, r2
   14918:	0019      	movs	r1, r3
   1491a:	2014      	movs	r0, #20
   1491c:	47a0      	blx	r4
   1491e:	2113      	movs	r1, #19
   14920:	0030      	movs	r0, r6
   14922:	4c36      	ldr	r4, [pc, #216]	; (149fc <AssemblePacket+0x3ac>)
   14924:	47a0      	blx	r4
   14926:	2210      	movs	r2, #16
   14928:	786b      	ldrb	r3, [r5, #1]
   1492a:	210b      	movs	r1, #11
   1492c:	4313      	orrs	r3, r2
   1492e:	706b      	strb	r3, [r5, #1]
   14930:	2001      	movs	r0, #1
   14932:	47a0      	blx	r4
   14934:	e6f4      	b.n	14720 <AssemblePacket+0xd0>
   14936:	2210      	movs	r2, #16
   14938:	3494      	adds	r4, #148	; 0x94
   1493a:	7823      	ldrb	r3, [r4, #0]
   1493c:	4393      	bics	r3, r2
   1493e:	7023      	strb	r3, [r4, #0]
   14940:	e6ee      	b.n	14720 <AssemblePacket+0xd0>
   14942:	4b32      	ldr	r3, [pc, #200]	; (14a0c <AssemblePacket+0x3bc>)
   14944:	4798      	blx	r3
   14946:	230f      	movs	r3, #15
   14948:	4018      	ands	r0, r3
   1494a:	439c      	bics	r4, r3
   1494c:	4304      	orrs	r4, r0
   1494e:	e703      	b.n	14758 <AssemblePacket+0x108>
   14950:	9b08      	ldr	r3, [sp, #32]
   14952:	2b00      	cmp	r3, #0
   14954:	d000      	beq.n	14958 <AssemblePacket+0x308>
   14956:	e71b      	b.n	14790 <AssemblePacket+0x140>
   14958:	4d1a      	ldr	r5, [pc, #104]	; (149c4 <AssemblePacket+0x374>)
   1495a:	002b      	movs	r3, r5
   1495c:	33e0      	adds	r3, #224	; 0xe0
   1495e:	781b      	ldrb	r3, [r3, #0]
   14960:	2b00      	cmp	r3, #0
   14962:	d100      	bne.n	14966 <AssemblePacket+0x316>
   14964:	e747      	b.n	147f6 <AssemblePacket+0x1a6>
   14966:	261e      	movs	r6, #30
   14968:	ab06      	add	r3, sp, #24
   1496a:	18f6      	adds	r6, r6, r3
   1496c:	2200      	movs	r2, #0
   1496e:	0031      	movs	r1, r6
   14970:	4827      	ldr	r0, [pc, #156]	; (14a10 <AssemblePacket+0x3c0>)
   14972:	4b18      	ldr	r3, [pc, #96]	; (149d4 <AssemblePacket+0x384>)
   14974:	4798      	blx	r3
   14976:	682b      	ldr	r3, [r5, #0]
   14978:	7831      	ldrb	r1, [r6, #0]
   1497a:	0a18      	lsrs	r0, r3, #8
   1497c:	792b      	ldrb	r3, [r5, #4]
   1497e:	9703      	str	r7, [sp, #12]
   14980:	061b      	lsls	r3, r3, #24
   14982:	4303      	orrs	r3, r0
   14984:	9304      	str	r3, [sp, #16]
   14986:	8823      	ldrh	r3, [r4, #0]
   14988:	002a      	movs	r2, r5
   1498a:	9302      	str	r3, [sp, #8]
   1498c:	2302      	movs	r3, #2
   1498e:	9301      	str	r3, [sp, #4]
   14990:	4b16      	ldr	r3, [pc, #88]	; (149ec <AssemblePacket+0x39c>)
   14992:	3288      	adds	r2, #136	; 0x88
   14994:	9300      	str	r3, [sp, #0]
   14996:	6813      	ldr	r3, [r2, #0]
   14998:	481d      	ldr	r0, [pc, #116]	; (14a10 <AssemblePacket+0x3c0>)
   1499a:	2200      	movs	r2, #0
   1499c:	4d0f      	ldr	r5, [pc, #60]	; (149dc <AssemblePacket+0x38c>)
   1499e:	47a8      	blx	r5
   149a0:	2800      	cmp	r0, #0
   149a2:	d002      	beq.n	149aa <AssemblePacket+0x35a>
   149a4:	2020      	movs	r0, #32
   149a6:	4b0e      	ldr	r3, [pc, #56]	; (149e0 <AssemblePacket+0x390>)
   149a8:	4798      	blx	r3
   149aa:	8823      	ldrh	r3, [r4, #0]
   149ac:	8832      	ldrh	r2, [r6, #0]
   149ae:	189b      	adds	r3, r3, r2
   149b0:	8023      	strh	r3, [r4, #0]
   149b2:	e720      	b.n	147f6 <AssemblePacket+0x1a6>
   149b4:	34e7      	adds	r4, #231	; 0xe7
   149b6:	e7c2      	b.n	1493e <AssemblePacket+0x2ee>
   149b8:	0001836d 	.word	0x0001836d
   149bc:	200040d4 	.word	0x200040d4
   149c0:	200023db 	.word	0x200023db
   149c4:	20003e8c 	.word	0x20003e8c
   149c8:	0001835b 	.word	0x0001835b
   149cc:	20003f73 	.word	0x20003f73
   149d0:	20003f14 	.word	0x20003f14
   149d4:	00011959 	.word	0x00011959
   149d8:	20003ec1 	.word	0x20003ec1
   149dc:	00012a6d 	.word	0x00012a6d
   149e0:	00012b2d 	.word	0x00012b2d
   149e4:	00011c85 	.word	0x00011c85
   149e8:	000078a5 	.word	0x000078a5
   149ec:	20003eb1 	.word	0x20003eb1
   149f0:	00010455 	.word	0x00010455
   149f4:	20003f75 	.word	0x20003f75
   149f8:	000104a9 	.word	0x000104a9
   149fc:	0000bbc5 	.word	0x0000bbc5
   14a00:	00010471 	.word	0x00010471
   14a04:	00010535 	.word	0x00010535
   14a08:	000140d5 	.word	0x000140d5
   14a0c:	000118b9 	.word	0x000118b9
   14a10:	20002494 	.word	0x20002494

00014a14 <LorawanClasscUlAckTimerCallback>:
   14a14:	2102      	movs	r1, #2
   14a16:	4b03      	ldr	r3, [pc, #12]	; (14a24 <LorawanClasscUlAckTimerCallback+0x10>)
   14a18:	3394      	adds	r3, #148	; 0x94
   14a1a:	781a      	ldrb	r2, [r3, #0]
   14a1c:	438a      	bics	r2, r1
   14a1e:	701a      	strb	r2, [r3, #0]
   14a20:	4770      	bx	lr
   14a22:	46c0      	nop			; (mov r8, r8)
   14a24:	20003e8c 	.word	0x20003e8c

00014a28 <LorawanClasscValidateSend>:
   14a28:	2388      	movs	r3, #136	; 0x88
   14a2a:	b510      	push	{r4, lr}
   14a2c:	4c0a      	ldr	r4, [pc, #40]	; (14a58 <LorawanClasscValidateSend+0x30>)
   14a2e:	009b      	lsls	r3, r3, #2
   14a30:	5ce3      	ldrb	r3, [r4, r3]
   14a32:	2b00      	cmp	r3, #0
   14a34:	d008      	beq.n	14a48 <LorawanClasscValidateSend+0x20>
   14a36:	220e      	movs	r2, #14
   14a38:	3484      	adds	r4, #132	; 0x84
   14a3a:	7823      	ldrb	r3, [r4, #0]
   14a3c:	2008      	movs	r0, #8
   14a3e:	4013      	ands	r3, r2
   14a40:	2b02      	cmp	r3, #2
   14a42:	d100      	bne.n	14a46 <LorawanClasscValidateSend+0x1e>
   14a44:	2011      	movs	r0, #17
   14a46:	bd10      	pop	{r4, pc}
   14a48:	2394      	movs	r3, #148	; 0x94
   14a4a:	005b      	lsls	r3, r3, #1
   14a4c:	5ce0      	ldrb	r0, [r4, r3]
   14a4e:	4b03      	ldr	r3, [pc, #12]	; (14a5c <LorawanClasscValidateSend+0x34>)
   14a50:	4798      	blx	r3
   14a52:	2800      	cmp	r0, #0
   14a54:	d1ef      	bne.n	14a36 <LorawanClasscValidateSend+0xe>
   14a56:	e7f5      	b.n	14a44 <LorawanClasscValidateSend+0x1c>
   14a58:	20003e8c 	.word	0x20003e8c
   14a5c:	00010b35 	.word	0x00010b35

00014a60 <LorawanClasscRxDone>:
   14a60:	221f      	movs	r2, #31
   14a62:	b573      	push	{r0, r1, r4, r5, r6, lr}
   14a64:	7803      	ldrb	r3, [r0, #0]
   14a66:	4c1c      	ldr	r4, [pc, #112]	; (14ad8 <LorawanClasscRxDone+0x78>)
   14a68:	4393      	bics	r3, r2
   14a6a:	2ba0      	cmp	r3, #160	; 0xa0
   14a6c:	d10c      	bne.n	14a88 <LorawanClasscRxDone+0x28>
   14a6e:	2694      	movs	r6, #148	; 0x94
   14a70:	0076      	lsls	r6, r6, #1
   14a72:	5da0      	ldrb	r0, [r4, r6]
   14a74:	4b19      	ldr	r3, [pc, #100]	; (14adc <LorawanClasscRxDone+0x7c>)
   14a76:	4798      	blx	r3
   14a78:	1e05      	subs	r5, r0, #0
   14a7a:	d019      	beq.n	14ab0 <LorawanClasscRxDone+0x50>
   14a7c:	0022      	movs	r2, r4
   14a7e:	2102      	movs	r1, #2
   14a80:	3294      	adds	r2, #148	; 0x94
   14a82:	7813      	ldrb	r3, [r2, #0]
   14a84:	438b      	bics	r3, r1
   14a86:	7013      	strb	r3, [r2, #0]
   14a88:	0021      	movs	r1, r4
   14a8a:	3184      	adds	r1, #132	; 0x84
   14a8c:	780b      	ldrb	r3, [r1, #0]
   14a8e:	220e      	movs	r2, #14
   14a90:	0018      	movs	r0, r3
   14a92:	4010      	ands	r0, r2
   14a94:	2806      	cmp	r0, #6
   14a96:	d103      	bne.n	14aa0 <LorawanClasscRxDone+0x40>
   14a98:	4393      	bics	r3, r2
   14a9a:	3a04      	subs	r2, #4
   14a9c:	4313      	orrs	r3, r2
   14a9e:	700b      	strb	r3, [r1, #0]
   14aa0:	2390      	movs	r3, #144	; 0x90
   14aa2:	2201      	movs	r2, #1
   14aa4:	009b      	lsls	r3, r3, #2
   14aa6:	54e2      	strb	r2, [r4, r3]
   14aa8:	2000      	movs	r0, #0
   14aaa:	4b0d      	ldr	r3, [pc, #52]	; (14ae0 <LorawanClasscRxDone+0x80>)
   14aac:	4798      	blx	r3
   14aae:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   14ab0:	4b0c      	ldr	r3, [pc, #48]	; (14ae4 <LorawanClasscRxDone+0x84>)
   14ab2:	5da6      	ldrb	r6, [r4, r6]
   14ab4:	4798      	blx	r3
   14ab6:	4b0c      	ldr	r3, [pc, #48]	; (14ae8 <LorawanClasscRxDone+0x88>)
   14ab8:	490c      	ldr	r1, [pc, #48]	; (14aec <LorawanClasscRxDone+0x8c>)
   14aba:	4798      	blx	r3
   14abc:	23fa      	movs	r3, #250	; 0xfa
   14abe:	009b      	lsls	r3, r3, #2
   14ac0:	18cb      	adds	r3, r1, r3
   14ac2:	21fa      	movs	r1, #250	; 0xfa
   14ac4:	0089      	lsls	r1, r1, #2
   14ac6:	4359      	muls	r1, r3
   14ac8:	9500      	str	r5, [sp, #0]
   14aca:	002a      	movs	r2, r5
   14acc:	4b08      	ldr	r3, [pc, #32]	; (14af0 <LorawanClasscRxDone+0x90>)
   14ace:	0030      	movs	r0, r6
   14ad0:	4d08      	ldr	r5, [pc, #32]	; (14af4 <LorawanClasscRxDone+0x94>)
   14ad2:	47a8      	blx	r5
   14ad4:	e7d8      	b.n	14a88 <LorawanClasscRxDone+0x28>
   14ad6:	46c0      	nop			; (mov r8, r8)
   14ad8:	20003e8c 	.word	0x20003e8c
   14adc:	00010b35 	.word	0x00010b35
   14ae0:	00012f6d 	.word	0x00012f6d
   14ae4:	00018aa1 	.word	0x00018aa1
   14ae8:	000153d9 	.word	0x000153d9
   14aec:	000007d1 	.word	0x000007d1
   14af0:	00014a15 	.word	0x00014a15
   14af4:	0001099d 	.word	0x0001099d

00014af8 <LorawanClasscRxTimeout>:
   14af8:	4a0c      	ldr	r2, [pc, #48]	; (14b2c <LorawanClasscRxTimeout+0x34>)
   14afa:	b510      	push	{r4, lr}
   14afc:	0010      	movs	r0, r2
   14afe:	3084      	adds	r0, #132	; 0x84
   14b00:	7803      	ldrb	r3, [r0, #0]
   14b02:	240e      	movs	r4, #14
   14b04:	0019      	movs	r1, r3
   14b06:	4021      	ands	r1, r4
   14b08:	2906      	cmp	r1, #6
   14b0a:	d107      	bne.n	14b1c <LorawanClasscRxTimeout+0x24>
   14b0c:	2208      	movs	r2, #8
   14b0e:	43a3      	bics	r3, r4
   14b10:	4313      	orrs	r3, r2
   14b12:	7003      	strb	r3, [r0, #0]
   14b14:	2000      	movs	r0, #0
   14b16:	4b06      	ldr	r3, [pc, #24]	; (14b30 <LorawanClasscRxTimeout+0x38>)
   14b18:	4798      	blx	r3
   14b1a:	e006      	b.n	14b2a <LorawanClasscRxTimeout+0x32>
   14b1c:	290a      	cmp	r1, #10
   14b1e:	d1f9      	bne.n	14b14 <LorawanClasscRxTimeout+0x1c>
   14b20:	2388      	movs	r3, #136	; 0x88
   14b22:	009b      	lsls	r3, r3, #2
   14b24:	5cd3      	ldrb	r3, [r2, r3]
   14b26:	2b00      	cmp	r3, #0
   14b28:	d0f4      	beq.n	14b14 <LorawanClasscRxTimeout+0x1c>
   14b2a:	bd10      	pop	{r4, pc}
   14b2c:	20003e8c 	.word	0x20003e8c
   14b30:	00012f6d 	.word	0x00012f6d

00014b34 <LorawanClasscNotifyAppOnReceive>:
   14b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14b36:	001f      	movs	r7, r3
   14b38:	2394      	movs	r3, #148	; 0x94
   14b3a:	0016      	movs	r6, r2
   14b3c:	4a07      	ldr	r2, [pc, #28]	; (14b5c <LorawanClasscNotifyAppOnReceive+0x28>)
   14b3e:	005b      	lsls	r3, r3, #1
   14b40:	0004      	movs	r4, r0
   14b42:	5cd0      	ldrb	r0, [r2, r3]
   14b44:	4b06      	ldr	r3, [pc, #24]	; (14b60 <LorawanClasscNotifyAppOnReceive+0x2c>)
   14b46:	000d      	movs	r5, r1
   14b48:	4798      	blx	r3
   14b4a:	2800      	cmp	r0, #0
   14b4c:	d105      	bne.n	14b5a <LorawanClasscNotifyAppOnReceive+0x26>
   14b4e:	0020      	movs	r0, r4
   14b50:	003b      	movs	r3, r7
   14b52:	0032      	movs	r2, r6
   14b54:	0029      	movs	r1, r5
   14b56:	4c03      	ldr	r4, [pc, #12]	; (14b64 <LorawanClasscNotifyAppOnReceive+0x30>)
   14b58:	47a0      	blx	r4
   14b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14b5c:	20003e8c 	.word	0x20003e8c
   14b60:	00010b35 	.word	0x00010b35
   14b64:	00012b91 	.word	0x00012b91

00014b68 <LorawanMcastEnable>:
   14b68:	0002      	movs	r2, r0
   14b6a:	b510      	push	{r4, lr}
   14b6c:	200a      	movs	r0, #10
   14b6e:	2903      	cmp	r1, #3
   14b70:	d822      	bhi.n	14bb8 <LorawanMcastEnable+0x50>
   14b72:	4b1a      	ldr	r3, [pc, #104]	; (14bdc <LorawanMcastEnable+0x74>)
   14b74:	2a00      	cmp	r2, #0
   14b76:	d020      	beq.n	14bba <LorawanMcastEnable+0x52>
   14b78:	223c      	movs	r2, #60	; 0x3c
   14b7a:	434a      	muls	r2, r1
   14b7c:	189a      	adds	r2, r3, r2
   14b7e:	3259      	adds	r2, #89	; 0x59
   14b80:	32ff      	adds	r2, #255	; 0xff
   14b82:	7a12      	ldrb	r2, [r2, #8]
   14b84:	0754      	lsls	r4, r2, #29
   14b86:	d512      	bpl.n	14bae <LorawanMcastEnable+0x46>
   14b88:	0794      	lsls	r4, r2, #30
   14b8a:	d510      	bpl.n	14bae <LorawanMcastEnable+0x46>
   14b8c:	07d2      	lsls	r2, r2, #31
   14b8e:	0fd2      	lsrs	r2, r2, #31
   14b90:	2a01      	cmp	r2, #1
   14b92:	d10c      	bne.n	14bae <LorawanMcastEnable+0x46>
   14b94:	001c      	movs	r4, r3
   14b96:	34fd      	adds	r4, #253	; 0xfd
   14b98:	7824      	ldrb	r4, [r4, #0]
   14b9a:	0764      	lsls	r4, r4, #29
   14b9c:	d007      	beq.n	14bae <LorawanMcastEnable+0x46>
   14b9e:	202e      	movs	r0, #46	; 0x2e
   14ba0:	408a      	lsls	r2, r1
   14ba2:	30ff      	adds	r0, #255	; 0xff
   14ba4:	5c19      	ldrb	r1, [r3, r0]
   14ba6:	430a      	orrs	r2, r1
   14ba8:	541a      	strb	r2, [r3, r0]
   14baa:	3826      	subs	r0, #38	; 0x26
   14bac:	38ff      	subs	r0, #255	; 0xff
   14bae:	2196      	movs	r1, #150	; 0x96
   14bb0:	0049      	lsls	r1, r1, #1
   14bb2:	5c5a      	ldrb	r2, [r3, r1]
   14bb4:	3201      	adds	r2, #1
   14bb6:	545a      	strb	r2, [r3, r1]
   14bb8:	bd10      	pop	{r4, pc}
   14bba:	2201      	movs	r2, #1
   14bbc:	408a      	lsls	r2, r1
   14bbe:	202e      	movs	r0, #46	; 0x2e
   14bc0:	0011      	movs	r1, r2
   14bc2:	30ff      	adds	r0, #255	; 0xff
   14bc4:	5c1a      	ldrb	r2, [r3, r0]
   14bc6:	438a      	bics	r2, r1
   14bc8:	2196      	movs	r1, #150	; 0x96
   14bca:	541a      	strb	r2, [r3, r0]
   14bcc:	0049      	lsls	r1, r1, #1
   14bce:	5c5a      	ldrb	r2, [r3, r1]
   14bd0:	3826      	subs	r0, #38	; 0x26
   14bd2:	3a01      	subs	r2, #1
   14bd4:	545a      	strb	r2, [r3, r1]
   14bd6:	38ff      	subs	r0, #255	; 0xff
   14bd8:	e7ee      	b.n	14bb8 <LorawanMcastEnable+0x50>
   14bda:	46c0      	nop			; (mov r8, r8)
   14bdc:	20003e8c 	.word	0x20003e8c

00014be0 <LorawanMcastValidateHdr>:
   14be0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14be2:	469c      	mov	ip, r3
   14be4:	2400      	movs	r4, #0
   14be6:	230a      	movs	r3, #10
   14be8:	4f18      	ldr	r7, [pc, #96]	; (14c4c <LorawanMcastValidateHdr+0x6c>)
   14bea:	b2e5      	uxtb	r5, r4
   14bec:	9501      	str	r5, [sp, #4]
   14bee:	252e      	movs	r5, #46	; 0x2e
   14bf0:	35ff      	adds	r5, #255	; 0xff
   14bf2:	5d7d      	ldrb	r5, [r7, r5]
   14bf4:	2601      	movs	r6, #1
   14bf6:	4125      	asrs	r5, r4
   14bf8:	4235      	tst	r5, r6
   14bfa:	d022      	beq.n	14c42 <LorawanMcastValidateHdr+0x62>
   14bfc:	7886      	ldrb	r6, [r0, #2]
   14bfe:	7845      	ldrb	r5, [r0, #1]
   14c00:	0236      	lsls	r6, r6, #8
   14c02:	432e      	orrs	r6, r5
   14c04:	78c5      	ldrb	r5, [r0, #3]
   14c06:	042d      	lsls	r5, r5, #16
   14c08:	432e      	orrs	r6, r5
   14c0a:	7905      	ldrb	r5, [r0, #4]
   14c0c:	062d      	lsls	r5, r5, #24
   14c0e:	4335      	orrs	r5, r6
   14c10:	263c      	movs	r6, #60	; 0x3c
   14c12:	4366      	muls	r6, r4
   14c14:	3631      	adds	r6, #49	; 0x31
   14c16:	36ff      	adds	r6, #255	; 0xff
   14c18:	59be      	ldr	r6, [r7, r6]
   14c1a:	42b5      	cmp	r5, r6
   14c1c:	d111      	bne.n	14c42 <LorawanMcastValidateHdr+0x62>
   14c1e:	4d0c      	ldr	r5, [pc, #48]	; (14c50 <LorawanMcastValidateHdr+0x70>)
   14c20:	782e      	ldrb	r6, [r5, #0]
   14c22:	2506      	movs	r5, #6
   14c24:	422e      	tst	r6, r5
   14c26:	d00c      	beq.n	14c42 <LorawanMcastValidateHdr+0x62>
   14c28:	2a00      	cmp	r2, #0
   14c2a:	d00a      	beq.n	14c42 <LorawanMcastValidateHdr+0x62>
   14c2c:	7946      	ldrb	r6, [r0, #5]
   14c2e:	3569      	adds	r5, #105	; 0x69
   14c30:	422e      	tst	r6, r5
   14c32:	d106      	bne.n	14c42 <LorawanMcastValidateHdr+0x62>
   14c34:	2903      	cmp	r1, #3
   14c36:	d104      	bne.n	14c42 <LorawanMcastValidateHdr+0x62>
   14c38:	466d      	mov	r5, sp
   14c3a:	4663      	mov	r3, ip
   14c3c:	792d      	ldrb	r5, [r5, #4]
   14c3e:	701d      	strb	r5, [r3, #0]
   14c40:	2308      	movs	r3, #8
   14c42:	3401      	adds	r4, #1
   14c44:	2c04      	cmp	r4, #4
   14c46:	d1d0      	bne.n	14bea <LorawanMcastValidateHdr+0xa>
   14c48:	0018      	movs	r0, r3
   14c4a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   14c4c:	20003e8c 	.word	0x20003e8c
   14c50:	20003f89 	.word	0x20003f89

00014c54 <LorawanMcastProcessPkt>:
   14c54:	b5f0      	push	{r4, r5, r6, r7, lr}
   14c56:	0015      	movs	r5, r2
   14c58:	223c      	movs	r2, #60	; 0x3c
   14c5a:	435a      	muls	r2, r3
   14c5c:	b089      	sub	sp, #36	; 0x24
   14c5e:	9107      	str	r1, [sp, #28]
   14c60:	493f      	ldr	r1, [pc, #252]	; (14d60 <LorawanMcastProcessPkt+0x10c>)
   14c62:	9006      	str	r0, [sp, #24]
   14c64:	1889      	adds	r1, r1, r2
   14c66:	31fc      	adds	r1, #252	; 0xfc
   14c68:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
   14c6a:	6e08      	ldr	r0, [r1, #96]	; 0x60
   14c6c:	6d8a      	ldr	r2, [r1, #88]	; 0x58
   14c6e:	4284      	cmp	r4, r0
   14c70:	d224      	bcs.n	14cbc <LorawanMcastProcessPkt+0x68>
   14c72:	2100      	movs	r1, #0
   14c74:	4294      	cmp	r4, r2
   14c76:	d802      	bhi.n	14c7e <LorawanMcastProcessPkt+0x2a>
   14c78:	4282      	cmp	r2, r0
   14c7a:	4192      	sbcs	r2, r2
   14c7c:	4251      	negs	r1, r2
   14c7e:	270a      	movs	r7, #10
   14c80:	2900      	cmp	r1, #0
   14c82:	d11d      	bne.n	14cc0 <LorawanMcastProcessPkt+0x6c>
   14c84:	4a36      	ldr	r2, [pc, #216]	; (14d60 <LorawanMcastProcessPkt+0x10c>)
   14c86:	210e      	movs	r1, #14
   14c88:	0010      	movs	r0, r2
   14c8a:	3084      	adds	r0, #132	; 0x84
   14c8c:	7803      	ldrb	r3, [r0, #0]
   14c8e:	001c      	movs	r4, r3
   14c90:	400c      	ands	r4, r1
   14c92:	2c06      	cmp	r4, #6
   14c94:	d108      	bne.n	14ca8 <LorawanMcastProcessPkt+0x54>
   14c96:	0014      	movs	r4, r2
   14c98:	34fd      	adds	r4, #253	; 0xfd
   14c9a:	7824      	ldrb	r4, [r4, #0]
   14c9c:	2c04      	cmp	r4, #4
   14c9e:	d103      	bne.n	14ca8 <LorawanMcastProcessPkt+0x54>
   14ca0:	438b      	bics	r3, r1
   14ca2:	3904      	subs	r1, #4
   14ca4:	430b      	orrs	r3, r1
   14ca6:	7003      	strb	r3, [r0, #0]
   14ca8:	2390      	movs	r3, #144	; 0x90
   14caa:	2101      	movs	r1, #1
   14cac:	009b      	lsls	r3, r3, #2
   14cae:	54d1      	strb	r1, [r2, r3]
   14cb0:	2000      	movs	r0, #0
   14cb2:	4b2c      	ldr	r3, [pc, #176]	; (14d64 <LorawanMcastProcessPkt+0x110>)
   14cb4:	4798      	blx	r3
   14cb6:	0038      	movs	r0, r7
   14cb8:	b009      	add	sp, #36	; 0x24
   14cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14cbc:	4294      	cmp	r4, r2
   14cbe:	d8db      	bhi.n	14c78 <LorawanMcastProcessPkt+0x24>
   14cc0:	243c      	movs	r4, #60	; 0x3c
   14cc2:	435c      	muls	r4, r3
   14cc4:	4e26      	ldr	r6, [pc, #152]	; (14d60 <LorawanMcastProcessPkt+0x10c>)
   14cc6:	79ea      	ldrb	r2, [r5, #7]
   14cc8:	1937      	adds	r7, r6, r4
   14cca:	003b      	movs	r3, r7
   14ccc:	79a9      	ldrb	r1, [r5, #6]
   14cce:	0212      	lsls	r2, r2, #8
   14cd0:	3355      	adds	r3, #85	; 0x55
   14cd2:	430a      	orrs	r2, r1
   14cd4:	33ff      	adds	r3, #255	; 0xff
   14cd6:	801a      	strh	r2, [r3, #0]
   14cd8:	2105      	movs	r1, #5
   14cda:	4b23      	ldr	r3, [pc, #140]	; (14d68 <LorawanMcastProcessPkt+0x114>)
   14cdc:	37fc      	adds	r7, #252	; 0xfc
   14cde:	2000      	movs	r0, #0
   14ce0:	4798      	blx	r3
   14ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14ce4:	3445      	adds	r4, #69	; 0x45
   14ce6:	9304      	str	r3, [sp, #16]
   14ce8:	4b20      	ldr	r3, [pc, #128]	; (14d6c <LorawanMcastProcessPkt+0x118>)
   14cea:	9907      	ldr	r1, [sp, #28]
   14cec:	9303      	str	r3, [sp, #12]
   14cee:	2319      	movs	r3, #25
   14cf0:	34ff      	adds	r4, #255	; 0xff
   14cf2:	9302      	str	r3, [sp, #8]
   14cf4:	19a4      	adds	r4, r4, r6
   14cf6:	3b16      	subs	r3, #22
   14cf8:	9806      	ldr	r0, [sp, #24]
   14cfa:	9400      	str	r4, [sp, #0]
   14cfc:	390d      	subs	r1, #13
   14cfe:	9301      	str	r3, [sp, #4]
   14d00:	b2c9      	uxtb	r1, r1
   14d02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   14d04:	2201      	movs	r2, #1
   14d06:	3009      	adds	r0, #9
   14d08:	4c19      	ldr	r4, [pc, #100]	; (14d70 <LorawanMcastProcessPkt+0x11c>)
   14d0a:	47a0      	blx	r4
   14d0c:	2800      	cmp	r0, #0
   14d0e:	d002      	beq.n	14d16 <LorawanMcastProcessPkt+0xc2>
   14d10:	201f      	movs	r0, #31
   14d12:	4b18      	ldr	r3, [pc, #96]	; (14d74 <LorawanMcastProcessPkt+0x120>)
   14d14:	4798      	blx	r3
   14d16:	4918      	ldr	r1, [pc, #96]	; (14d78 <LorawanMcastProcessPkt+0x124>)
   14d18:	2708      	movs	r7, #8
   14d1a:	784a      	ldrb	r2, [r1, #1]
   14d1c:	780b      	ldrb	r3, [r1, #0]
   14d1e:	0212      	lsls	r2, r2, #8
   14d20:	431a      	orrs	r2, r3
   14d22:	788b      	ldrb	r3, [r1, #2]
   14d24:	041b      	lsls	r3, r3, #16
   14d26:	431a      	orrs	r2, r3
   14d28:	78cb      	ldrb	r3, [r1, #3]
   14d2a:	061b      	lsls	r3, r3, #24
   14d2c:	4313      	orrs	r3, r2
   14d2e:	d0a9      	beq.n	14c84 <LorawanMcastProcessPkt+0x30>
   14d30:	2220      	movs	r2, #32
   14d32:	3694      	adds	r6, #148	; 0x94
   14d34:	7833      	ldrb	r3, [r6, #0]
   14d36:	9906      	ldr	r1, [sp, #24]
   14d38:	4393      	bics	r3, r2
   14d3a:	7033      	strb	r3, [r6, #0]
   14d3c:	78ab      	ldrb	r3, [r5, #2]
   14d3e:	7868      	ldrb	r0, [r5, #1]
   14d40:	40bb      	lsls	r3, r7
   14d42:	4303      	orrs	r3, r0
   14d44:	78e8      	ldrb	r0, [r5, #3]
   14d46:	9a07      	ldr	r2, [sp, #28]
   14d48:	0400      	lsls	r0, r0, #16
   14d4a:	4303      	orrs	r3, r0
   14d4c:	7928      	ldrb	r0, [r5, #4]
   14d4e:	3a0c      	subs	r2, #12
   14d50:	0600      	lsls	r0, r0, #24
   14d52:	4318      	orrs	r0, r3
   14d54:	b2d2      	uxtb	r2, r2
   14d56:	19c9      	adds	r1, r1, r7
   14d58:	003b      	movs	r3, r7
   14d5a:	4c08      	ldr	r4, [pc, #32]	; (14d7c <LorawanMcastProcessPkt+0x128>)
   14d5c:	47a0      	blx	r4
   14d5e:	e791      	b.n	14c84 <LorawanMcastProcessPkt+0x30>
   14d60:	20003e8c 	.word	0x20003e8c
   14d64:	00012f6d 	.word	0x00012f6d
   14d68:	0000bbc5 	.word	0x0000bbc5
   14d6c:	20002494 	.word	0x20002494
   14d70:	00012a6d 	.word	0x00012a6d
   14d74:	00012b2d 	.word	0x00012b2d
   14d78:	200041e8 	.word	0x200041e8
   14d7c:	00012b91 	.word	0x00012b91

00014d80 <LorawanAddMcastAddr>:
   14d80:	b570      	push	{r4, r5, r6, lr}
   14d82:	260a      	movs	r6, #10
   14d84:	2903      	cmp	r1, #3
   14d86:	d818      	bhi.n	14dba <LorawanAddMcastAddr+0x3a>
   14d88:	4b0d      	ldr	r3, [pc, #52]	; (14dc0 <LorawanAddMcastAddr+0x40>)
   14d8a:	681a      	ldr	r2, [r3, #0]
   14d8c:	0a15      	lsrs	r5, r2, #8
   14d8e:	791a      	ldrb	r2, [r3, #4]
   14d90:	0612      	lsls	r2, r2, #24
   14d92:	432a      	orrs	r2, r5
   14d94:	4282      	cmp	r2, r0
   14d96:	d010      	beq.n	14dba <LorawanAddMcastAddr+0x3a>
   14d98:	243c      	movs	r4, #60	; 0x3c
   14d9a:	434c      	muls	r4, r1
   14d9c:	191c      	adds	r4, r3, r4
   14d9e:	0023      	movs	r3, r4
   14da0:	33fc      	adds	r3, #252	; 0xfc
   14da2:	6358      	str	r0, [r3, #52]	; 0x34
   14da4:	2106      	movs	r1, #6
   14da6:	2000      	movs	r0, #0
   14da8:	4b06      	ldr	r3, [pc, #24]	; (14dc4 <LorawanAddMcastAddr+0x44>)
   14daa:	4798      	blx	r3
   14dac:	2201      	movs	r2, #1
   14dae:	3459      	adds	r4, #89	; 0x59
   14db0:	34ff      	adds	r4, #255	; 0xff
   14db2:	7a21      	ldrb	r1, [r4, #8]
   14db4:	3e02      	subs	r6, #2
   14db6:	430a      	orrs	r2, r1
   14db8:	7222      	strb	r2, [r4, #8]
   14dba:	0030      	movs	r0, r6
   14dbc:	bd70      	pop	{r4, r5, r6, pc}
   14dbe:	46c0      	nop			; (mov r8, r8)
   14dc0:	20003e8c 	.word	0x20003e8c
   14dc4:	0000bbc5 	.word	0x0000bbc5

00014dc8 <LorawanAddMcastAppskey>:
   14dc8:	b570      	push	{r4, r5, r6, lr}
   14dca:	0006      	movs	r6, r0
   14dcc:	200a      	movs	r0, #10
   14dce:	2903      	cmp	r1, #3
   14dd0:	d818      	bhi.n	14e04 <LorawanAddMcastAppskey+0x3c>
   14dd2:	2e00      	cmp	r6, #0
   14dd4:	d016      	beq.n	14e04 <LorawanAddMcastAppskey+0x3c>
   14dd6:	253c      	movs	r5, #60	; 0x3c
   14dd8:	434d      	muls	r5, r1
   14dda:	0028      	movs	r0, r5
   14ddc:	4c0a      	ldr	r4, [pc, #40]	; (14e08 <LorawanAddMcastAppskey+0x40>)
   14dde:	3045      	adds	r0, #69	; 0x45
   14de0:	30ff      	adds	r0, #255	; 0xff
   14de2:	2210      	movs	r2, #16
   14de4:	1900      	adds	r0, r0, r4
   14de6:	0031      	movs	r1, r6
   14de8:	4b08      	ldr	r3, [pc, #32]	; (14e0c <LorawanAddMcastAppskey+0x44>)
   14dea:	4798      	blx	r3
   14dec:	4b08      	ldr	r3, [pc, #32]	; (14e10 <LorawanAddMcastAppskey+0x48>)
   14dee:	2107      	movs	r1, #7
   14df0:	2000      	movs	r0, #0
   14df2:	4798      	blx	r3
   14df4:	2304      	movs	r3, #4
   14df6:	2008      	movs	r0, #8
   14df8:	1964      	adds	r4, r4, r5
   14dfa:	3459      	adds	r4, #89	; 0x59
   14dfc:	34ff      	adds	r4, #255	; 0xff
   14dfe:	7a22      	ldrb	r2, [r4, #8]
   14e00:	4313      	orrs	r3, r2
   14e02:	7223      	strb	r3, [r4, #8]
   14e04:	bd70      	pop	{r4, r5, r6, pc}
   14e06:	46c0      	nop			; (mov r8, r8)
   14e08:	20003e8c 	.word	0x20003e8c
   14e0c:	0001835b 	.word	0x0001835b
   14e10:	0000bbc5 	.word	0x0000bbc5

00014e14 <LorawanAddMcastNwkskey>:
   14e14:	b570      	push	{r4, r5, r6, lr}
   14e16:	0006      	movs	r6, r0
   14e18:	200a      	movs	r0, #10
   14e1a:	2903      	cmp	r1, #3
   14e1c:	d818      	bhi.n	14e50 <LorawanAddMcastNwkskey+0x3c>
   14e1e:	2e00      	cmp	r6, #0
   14e20:	d016      	beq.n	14e50 <LorawanAddMcastNwkskey+0x3c>
   14e22:	253c      	movs	r5, #60	; 0x3c
   14e24:	434d      	muls	r5, r1
   14e26:	0028      	movs	r0, r5
   14e28:	4c0a      	ldr	r4, [pc, #40]	; (14e54 <LorawanAddMcastNwkskey+0x40>)
   14e2a:	3035      	adds	r0, #53	; 0x35
   14e2c:	30ff      	adds	r0, #255	; 0xff
   14e2e:	2210      	movs	r2, #16
   14e30:	1900      	adds	r0, r0, r4
   14e32:	0031      	movs	r1, r6
   14e34:	4b08      	ldr	r3, [pc, #32]	; (14e58 <LorawanAddMcastNwkskey+0x44>)
   14e36:	4798      	blx	r3
   14e38:	4b08      	ldr	r3, [pc, #32]	; (14e5c <LorawanAddMcastNwkskey+0x48>)
   14e3a:	2108      	movs	r1, #8
   14e3c:	2000      	movs	r0, #0
   14e3e:	4798      	blx	r3
   14e40:	2302      	movs	r3, #2
   14e42:	2008      	movs	r0, #8
   14e44:	1964      	adds	r4, r4, r5
   14e46:	3459      	adds	r4, #89	; 0x59
   14e48:	34ff      	adds	r4, #255	; 0xff
   14e4a:	7a22      	ldrb	r2, [r4, #8]
   14e4c:	4313      	orrs	r3, r2
   14e4e:	7223      	strb	r3, [r4, #8]
   14e50:	bd70      	pop	{r4, r5, r6, pc}
   14e52:	46c0      	nop			; (mov r8, r8)
   14e54:	20003e8c 	.word	0x20003e8c
   14e58:	0001835b 	.word	0x0001835b
   14e5c:	0000bbc5 	.word	0x0000bbc5

00014e60 <LorawanAddMcastFcntMin>:
   14e60:	220a      	movs	r2, #10
   14e62:	2903      	cmp	r1, #3
   14e64:	d807      	bhi.n	14e76 <LorawanAddMcastFcntMin+0x16>
   14e66:	233c      	movs	r3, #60	; 0x3c
   14e68:	434b      	muls	r3, r1
   14e6a:	4904      	ldr	r1, [pc, #16]	; (14e7c <LorawanAddMcastFcntMin+0x1c>)
   14e6c:	3a02      	subs	r2, #2
   14e6e:	18c9      	adds	r1, r1, r3
   14e70:	31fc      	adds	r1, #252	; 0xfc
   14e72:	65c8      	str	r0, [r1, #92]	; 0x5c
   14e74:	6588      	str	r0, [r1, #88]	; 0x58
   14e76:	0010      	movs	r0, r2
   14e78:	4770      	bx	lr
   14e7a:	46c0      	nop			; (mov r8, r8)
   14e7c:	20003e8c 	.word	0x20003e8c

00014e80 <LorawanAddMcastFcntMax>:
   14e80:	220a      	movs	r2, #10
   14e82:	2903      	cmp	r1, #3
   14e84:	d806      	bhi.n	14e94 <LorawanAddMcastFcntMax+0x14>
   14e86:	233c      	movs	r3, #60	; 0x3c
   14e88:	434b      	muls	r3, r1
   14e8a:	4903      	ldr	r1, [pc, #12]	; (14e98 <LorawanAddMcastFcntMax+0x18>)
   14e8c:	3a02      	subs	r2, #2
   14e8e:	18c9      	adds	r1, r1, r3
   14e90:	31fc      	adds	r1, #252	; 0xfc
   14e92:	6608      	str	r0, [r1, #96]	; 0x60
   14e94:	0010      	movs	r0, r2
   14e96:	4770      	bx	lr
   14e98:	20003e8c 	.word	0x20003e8c

00014e9c <LorawanAddMcastDlFrequency>:
   14e9c:	b513      	push	{r0, r1, r4, lr}
   14e9e:	000c      	movs	r4, r1
   14ea0:	9001      	str	r0, [sp, #4]
   14ea2:	2903      	cmp	r1, #3
   14ea4:	d901      	bls.n	14eaa <LorawanAddMcastDlFrequency+0xe>
   14ea6:	200a      	movs	r0, #10
   14ea8:	bd16      	pop	{r1, r2, r4, pc}
   14eaa:	a901      	add	r1, sp, #4
   14eac:	2001      	movs	r0, #1
   14eae:	4b0a      	ldr	r3, [pc, #40]	; (14ed8 <LorawanAddMcastDlFrequency+0x3c>)
   14eb0:	4798      	blx	r3
   14eb2:	2808      	cmp	r0, #8
   14eb4:	d1f7      	bne.n	14ea6 <LorawanAddMcastDlFrequency+0xa>
   14eb6:	213c      	movs	r1, #60	; 0x3c
   14eb8:	4361      	muls	r1, r4
   14eba:	4b08      	ldr	r3, [pc, #32]	; (14edc <LorawanAddMcastDlFrequency+0x40>)
   14ebc:	9a01      	ldr	r2, [sp, #4]
   14ebe:	1859      	adds	r1, r3, r1
   14ec0:	31fc      	adds	r1, #252	; 0xfc
   14ec2:	336f      	adds	r3, #111	; 0x6f
   14ec4:	668a      	str	r2, [r1, #104]	; 0x68
   14ec6:	0a11      	lsrs	r1, r2, #8
   14ec8:	701a      	strb	r2, [r3, #0]
   14eca:	7059      	strb	r1, [r3, #1]
   14ecc:	0c11      	lsrs	r1, r2, #16
   14ece:	0e12      	lsrs	r2, r2, #24
   14ed0:	7099      	strb	r1, [r3, #2]
   14ed2:	70da      	strb	r2, [r3, #3]
   14ed4:	e7e8      	b.n	14ea8 <LorawanAddMcastDlFrequency+0xc>
   14ed6:	46c0      	nop			; (mov r8, r8)
   14ed8:	00010471 	.word	0x00010471
   14edc:	20003e8c 	.word	0x20003e8c

00014ee0 <LorawanAddMcastDatarate>:
   14ee0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14ee2:	466b      	mov	r3, sp
   14ee4:	1ddd      	adds	r5, r3, #7
   14ee6:	000c      	movs	r4, r1
   14ee8:	7028      	strb	r0, [r5, #0]
   14eea:	2903      	cmp	r1, #3
   14eec:	d901      	bls.n	14ef2 <LorawanAddMcastDatarate+0x12>
   14eee:	200a      	movs	r0, #10
   14ef0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   14ef2:	0029      	movs	r1, r5
   14ef4:	200f      	movs	r0, #15
   14ef6:	4b07      	ldr	r3, [pc, #28]	; (14f14 <LorawanAddMcastDatarate+0x34>)
   14ef8:	4798      	blx	r3
   14efa:	2808      	cmp	r0, #8
   14efc:	d1f7      	bne.n	14eee <LorawanAddMcastDatarate+0xe>
   14efe:	213c      	movs	r1, #60	; 0x3c
   14f00:	4361      	muls	r1, r4
   14f02:	4b05      	ldr	r3, [pc, #20]	; (14f18 <LorawanAddMcastDatarate+0x38>)
   14f04:	782a      	ldrb	r2, [r5, #0]
   14f06:	1859      	adds	r1, r3, r1
   14f08:	3169      	adds	r1, #105	; 0x69
   14f0a:	31ff      	adds	r1, #255	; 0xff
   14f0c:	3373      	adds	r3, #115	; 0x73
   14f0e:	700a      	strb	r2, [r1, #0]
   14f10:	701a      	strb	r2, [r3, #0]
   14f12:	e7ed      	b.n	14ef0 <LorawanAddMcastDatarate+0x10>
   14f14:	00010471 	.word	0x00010471
   14f18:	20003e8c 	.word	0x20003e8c

00014f1c <LorawanAddMcastPeriodicity>:
   14f1c:	220a      	movs	r2, #10
   14f1e:	2903      	cmp	r1, #3
   14f20:	d809      	bhi.n	14f36 <LorawanAddMcastPeriodicity+0x1a>
   14f22:	2807      	cmp	r0, #7
   14f24:	d807      	bhi.n	14f36 <LorawanAddMcastPeriodicity+0x1a>
   14f26:	233c      	movs	r3, #60	; 0x3c
   14f28:	434b      	muls	r3, r1
   14f2a:	4904      	ldr	r1, [pc, #16]	; (14f3c <LorawanAddMcastPeriodicity+0x20>)
   14f2c:	3a02      	subs	r2, #2
   14f2e:	18c9      	adds	r1, r1, r3
   14f30:	316a      	adds	r1, #106	; 0x6a
   14f32:	31ff      	adds	r1, #255	; 0xff
   14f34:	7008      	strb	r0, [r1, #0]
   14f36:	0010      	movs	r0, r2
   14f38:	4770      	bx	lr
   14f3a:	46c0      	nop			; (mov r8, r8)
   14f3c:	20003e8c 	.word	0x20003e8c

00014f40 <common_tc_read_count>:
   14f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14f42:	4b0d      	ldr	r3, [pc, #52]	; (14f78 <common_tc_read_count+0x38>)
   14f44:	4798      	blx	r3
   14f46:	4b0d      	ldr	r3, [pc, #52]	; (14f7c <common_tc_read_count+0x3c>)
   14f48:	781b      	ldrb	r3, [r3, #0]
   14f4a:	2b00      	cmp	r3, #0
   14f4c:	d00e      	beq.n	14f6c <common_tc_read_count+0x2c>
   14f4e:	4b0c      	ldr	r3, [pc, #48]	; (14f80 <common_tc_read_count+0x40>)
   14f50:	781d      	ldrb	r5, [r3, #0]
   14f52:	4b0a      	ldr	r3, [pc, #40]	; (14f7c <common_tc_read_count+0x3c>)
   14f54:	781f      	ldrb	r7, [r3, #0]
   14f56:	4c0b      	ldr	r4, [pc, #44]	; (14f84 <common_tc_read_count+0x44>)
   14f58:	1c29      	adds	r1, r5, #0
   14f5a:	47a0      	blx	r4
   14f5c:	1c06      	adds	r6, r0, #0
   14f5e:	480a      	ldr	r0, [pc, #40]	; (14f88 <common_tc_read_count+0x48>)
   14f60:	1c29      	adds	r1, r5, #0
   14f62:	47a0      	blx	r4
   14f64:	4378      	muls	r0, r7
   14f66:	1830      	adds	r0, r6, r0
   14f68:	b280      	uxth	r0, r0
   14f6a:	e004      	b.n	14f76 <common_tc_read_count+0x36>
   14f6c:	4b04      	ldr	r3, [pc, #16]	; (14f80 <common_tc_read_count+0x40>)
   14f6e:	7819      	ldrb	r1, [r3, #0]
   14f70:	4b04      	ldr	r3, [pc, #16]	; (14f84 <common_tc_read_count+0x44>)
   14f72:	4798      	blx	r3
   14f74:	b280      	uxth	r0, r0
   14f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14f78:	00011229 	.word	0x00011229
   14f7c:	200023ec 	.word	0x200023ec
   14f80:	200041f0 	.word	0x200041f0
   14f84:	0001520d 	.word	0x0001520d
   14f88:	0000ffff 	.word	0x0000ffff

00014f8c <common_tc_compare_stop>:
   14f8c:	b508      	push	{r3, lr}
   14f8e:	4b05      	ldr	r3, [pc, #20]	; (14fa4 <common_tc_compare_stop+0x18>)
   14f90:	4798      	blx	r3
   14f92:	4b05      	ldr	r3, [pc, #20]	; (14fa8 <common_tc_compare_stop+0x1c>)
   14f94:	4798      	blx	r3
   14f96:	4b05      	ldr	r3, [pc, #20]	; (14fac <common_tc_compare_stop+0x20>)
   14f98:	2200      	movs	r2, #0
   14f9a:	605a      	str	r2, [r3, #4]
   14f9c:	811a      	strh	r2, [r3, #8]
   14f9e:	4b04      	ldr	r3, [pc, #16]	; (14fb0 <common_tc_compare_stop+0x24>)
   14fa0:	4798      	blx	r3
   14fa2:	bd08      	pop	{r3, pc}
   14fa4:	0001123d 	.word	0x0001123d
   14fa8:	000112f5 	.word	0x000112f5
   14fac:	200023ec 	.word	0x200023ec
   14fb0:	00011319 	.word	0x00011319

00014fb4 <common_tc_delay>:
   14fb4:	b510      	push	{r4, lr}
   14fb6:	1c04      	adds	r4, r0, #0
   14fb8:	4b13      	ldr	r3, [pc, #76]	; (15008 <common_tc_delay+0x54>)
   14fba:	4798      	blx	r3
   14fbc:	4b13      	ldr	r3, [pc, #76]	; (1500c <common_tc_delay+0x58>)
   14fbe:	781a      	ldrb	r2, [r3, #0]
   14fc0:	4362      	muls	r2, r4
   14fc2:	1881      	adds	r1, r0, r2
   14fc4:	4b12      	ldr	r3, [pc, #72]	; (15010 <common_tc_delay+0x5c>)
   14fc6:	6059      	str	r1, [r3, #4]
   14fc8:	6859      	ldr	r1, [r3, #4]
   14fca:	0c09      	lsrs	r1, r1, #16
   14fcc:	6059      	str	r1, [r3, #4]
   14fce:	685b      	ldr	r3, [r3, #4]
   14fd0:	2b00      	cmp	r3, #0
   14fd2:	d007      	beq.n	14fe4 <common_tc_delay+0x30>
   14fd4:	4b0e      	ldr	r3, [pc, #56]	; (15010 <common_tc_delay+0x5c>)
   14fd6:	6859      	ldr	r1, [r3, #4]
   14fd8:	3201      	adds	r2, #1
   14fda:	1880      	adds	r0, r0, r2
   14fdc:	8118      	strh	r0, [r3, #8]
   14fde:	4b0d      	ldr	r3, [pc, #52]	; (15014 <common_tc_delay+0x60>)
   14fe0:	4798      	blx	r3
   14fe2:	e004      	b.n	14fee <common_tc_delay+0x3a>
   14fe4:	1882      	adds	r2, r0, r2
   14fe6:	4b0a      	ldr	r3, [pc, #40]	; (15010 <common_tc_delay+0x5c>)
   14fe8:	811a      	strh	r2, [r3, #8]
   14fea:	4b0b      	ldr	r3, [pc, #44]	; (15018 <common_tc_delay+0x64>)
   14fec:	4798      	blx	r3
   14fee:	4b08      	ldr	r3, [pc, #32]	; (15010 <common_tc_delay+0x5c>)
   14ff0:	891b      	ldrh	r3, [r3, #8]
   14ff2:	2b63      	cmp	r3, #99	; 0x63
   14ff4:	d802      	bhi.n	14ffc <common_tc_delay+0x48>
   14ff6:	3364      	adds	r3, #100	; 0x64
   14ff8:	4a05      	ldr	r2, [pc, #20]	; (15010 <common_tc_delay+0x5c>)
   14ffa:	8113      	strh	r3, [r2, #8]
   14ffc:	4b04      	ldr	r3, [pc, #16]	; (15010 <common_tc_delay+0x5c>)
   14ffe:	8918      	ldrh	r0, [r3, #8]
   15000:	4b06      	ldr	r3, [pc, #24]	; (1501c <common_tc_delay+0x68>)
   15002:	4798      	blx	r3
   15004:	bd10      	pop	{r4, pc}
   15006:	46c0      	nop			; (mov r8, r8)
   15008:	00011229 	.word	0x00011229
   1500c:	200041f0 	.word	0x200041f0
   15010:	200023ec 	.word	0x200023ec
   15014:	0001123d 	.word	0x0001123d
   15018:	00011251 	.word	0x00011251
   1501c:	000112dd 	.word	0x000112dd

00015020 <common_tc_init>:
   15020:	b508      	push	{r3, lr}
   15022:	2200      	movs	r2, #0
   15024:	4b03      	ldr	r3, [pc, #12]	; (15034 <common_tc_init+0x14>)
   15026:	701a      	strb	r2, [r3, #0]
   15028:	4b03      	ldr	r3, [pc, #12]	; (15038 <common_tc_init+0x18>)
   1502a:	4798      	blx	r3
   1502c:	4b03      	ldr	r3, [pc, #12]	; (1503c <common_tc_init+0x1c>)
   1502e:	7018      	strb	r0, [r3, #0]
   15030:	bd08      	pop	{r3, pc}
   15032:	46c0      	nop			; (mov r8, r8)
   15034:	200023ec 	.word	0x200023ec
   15038:	00011331 	.word	0x00011331
   1503c:	200041f0 	.word	0x200041f0

00015040 <tmr_ovf_callback>:
   15040:	b508      	push	{r3, lr}
   15042:	4b0e      	ldr	r3, [pc, #56]	; (1507c <tmr_ovf_callback+0x3c>)
   15044:	685b      	ldr	r3, [r3, #4]
   15046:	2b00      	cmp	r3, #0
   15048:	d007      	beq.n	1505a <tmr_ovf_callback+0x1a>
   1504a:	4a0c      	ldr	r2, [pc, #48]	; (1507c <tmr_ovf_callback+0x3c>)
   1504c:	6853      	ldr	r3, [r2, #4]
   1504e:	3b01      	subs	r3, #1
   15050:	6053      	str	r3, [r2, #4]
   15052:	2b00      	cmp	r3, #0
   15054:	d101      	bne.n	1505a <tmr_ovf_callback+0x1a>
   15056:	4b0a      	ldr	r3, [pc, #40]	; (15080 <tmr_ovf_callback+0x40>)
   15058:	4798      	blx	r3
   1505a:	4a08      	ldr	r2, [pc, #32]	; (1507c <tmr_ovf_callback+0x3c>)
   1505c:	7813      	ldrb	r3, [r2, #0]
   1505e:	3301      	adds	r3, #1
   15060:	b2db      	uxtb	r3, r3
   15062:	7013      	strb	r3, [r2, #0]
   15064:	4a07      	ldr	r2, [pc, #28]	; (15084 <tmr_ovf_callback+0x44>)
   15066:	7812      	ldrb	r2, [r2, #0]
   15068:	429a      	cmp	r2, r3
   1506a:	d806      	bhi.n	1507a <tmr_ovf_callback+0x3a>
   1506c:	4b03      	ldr	r3, [pc, #12]	; (1507c <tmr_ovf_callback+0x3c>)
   1506e:	2200      	movs	r2, #0
   15070:	701a      	strb	r2, [r3, #0]
   15072:	68db      	ldr	r3, [r3, #12]
   15074:	2b00      	cmp	r3, #0
   15076:	d000      	beq.n	1507a <tmr_ovf_callback+0x3a>
   15078:	4798      	blx	r3
   1507a:	bd08      	pop	{r3, pc}
   1507c:	200023ec 	.word	0x200023ec
   15080:	00011251 	.word	0x00011251
   15084:	200041f0 	.word	0x200041f0

00015088 <tmr_cca_callback>:
   15088:	b508      	push	{r3, lr}
   1508a:	4b04      	ldr	r3, [pc, #16]	; (1509c <tmr_cca_callback+0x14>)
   1508c:	4798      	blx	r3
   1508e:	4b04      	ldr	r3, [pc, #16]	; (150a0 <tmr_cca_callback+0x18>)
   15090:	691b      	ldr	r3, [r3, #16]
   15092:	2b00      	cmp	r3, #0
   15094:	d000      	beq.n	15098 <tmr_cca_callback+0x10>
   15096:	4798      	blx	r3
   15098:	bd08      	pop	{r3, pc}
   1509a:	46c0      	nop			; (mov r8, r8)
   1509c:	0001123d 	.word	0x0001123d
   150a0:	200023ec 	.word	0x200023ec

000150a4 <set_common_tc_overflow_callback>:
   150a4:	4b01      	ldr	r3, [pc, #4]	; (150ac <set_common_tc_overflow_callback+0x8>)
   150a6:	60d8      	str	r0, [r3, #12]
   150a8:	4770      	bx	lr
   150aa:	46c0      	nop			; (mov r8, r8)
   150ac:	200023ec 	.word	0x200023ec

000150b0 <set_common_tc_expiry_callback>:
   150b0:	4b01      	ldr	r3, [pc, #4]	; (150b8 <set_common_tc_expiry_callback+0x8>)
   150b2:	6118      	str	r0, [r3, #16]
   150b4:	4770      	bx	lr
   150b6:	46c0      	nop			; (mov r8, r8)
   150b8:	200023ec 	.word	0x200023ec

000150bc <__gnu_thumb1_case_uqi>:
   150bc:	b402      	push	{r1}
   150be:	4671      	mov	r1, lr
   150c0:	0849      	lsrs	r1, r1, #1
   150c2:	0049      	lsls	r1, r1, #1
   150c4:	5c09      	ldrb	r1, [r1, r0]
   150c6:	0049      	lsls	r1, r1, #1
   150c8:	448e      	add	lr, r1
   150ca:	bc02      	pop	{r1}
   150cc:	4770      	bx	lr
   150ce:	46c0      	nop			; (mov r8, r8)

000150d0 <__gnu_thumb1_case_shi>:
   150d0:	b403      	push	{r0, r1}
   150d2:	4671      	mov	r1, lr
   150d4:	0849      	lsrs	r1, r1, #1
   150d6:	0040      	lsls	r0, r0, #1
   150d8:	0049      	lsls	r1, r1, #1
   150da:	5e09      	ldrsh	r1, [r1, r0]
   150dc:	0049      	lsls	r1, r1, #1
   150de:	448e      	add	lr, r1
   150e0:	bc03      	pop	{r0, r1}
   150e2:	4770      	bx	lr

000150e4 <__gnu_thumb1_case_uhi>:
   150e4:	b403      	push	{r0, r1}
   150e6:	4671      	mov	r1, lr
   150e8:	0849      	lsrs	r1, r1, #1
   150ea:	0040      	lsls	r0, r0, #1
   150ec:	0049      	lsls	r1, r1, #1
   150ee:	5a09      	ldrh	r1, [r1, r0]
   150f0:	0049      	lsls	r1, r1, #1
   150f2:	448e      	add	lr, r1
   150f4:	bc03      	pop	{r0, r1}
   150f6:	4770      	bx	lr

000150f8 <__udivsi3>:
   150f8:	2200      	movs	r2, #0
   150fa:	0843      	lsrs	r3, r0, #1
   150fc:	428b      	cmp	r3, r1
   150fe:	d374      	bcc.n	151ea <__udivsi3+0xf2>
   15100:	0903      	lsrs	r3, r0, #4
   15102:	428b      	cmp	r3, r1
   15104:	d35f      	bcc.n	151c6 <__udivsi3+0xce>
   15106:	0a03      	lsrs	r3, r0, #8
   15108:	428b      	cmp	r3, r1
   1510a:	d344      	bcc.n	15196 <__udivsi3+0x9e>
   1510c:	0b03      	lsrs	r3, r0, #12
   1510e:	428b      	cmp	r3, r1
   15110:	d328      	bcc.n	15164 <__udivsi3+0x6c>
   15112:	0c03      	lsrs	r3, r0, #16
   15114:	428b      	cmp	r3, r1
   15116:	d30d      	bcc.n	15134 <__udivsi3+0x3c>
   15118:	22ff      	movs	r2, #255	; 0xff
   1511a:	0209      	lsls	r1, r1, #8
   1511c:	ba12      	rev	r2, r2
   1511e:	0c03      	lsrs	r3, r0, #16
   15120:	428b      	cmp	r3, r1
   15122:	d302      	bcc.n	1512a <__udivsi3+0x32>
   15124:	1212      	asrs	r2, r2, #8
   15126:	0209      	lsls	r1, r1, #8
   15128:	d065      	beq.n	151f6 <__udivsi3+0xfe>
   1512a:	0b03      	lsrs	r3, r0, #12
   1512c:	428b      	cmp	r3, r1
   1512e:	d319      	bcc.n	15164 <__udivsi3+0x6c>
   15130:	e000      	b.n	15134 <__udivsi3+0x3c>
   15132:	0a09      	lsrs	r1, r1, #8
   15134:	0bc3      	lsrs	r3, r0, #15
   15136:	428b      	cmp	r3, r1
   15138:	d301      	bcc.n	1513e <__udivsi3+0x46>
   1513a:	03cb      	lsls	r3, r1, #15
   1513c:	1ac0      	subs	r0, r0, r3
   1513e:	4152      	adcs	r2, r2
   15140:	0b83      	lsrs	r3, r0, #14
   15142:	428b      	cmp	r3, r1
   15144:	d301      	bcc.n	1514a <__udivsi3+0x52>
   15146:	038b      	lsls	r3, r1, #14
   15148:	1ac0      	subs	r0, r0, r3
   1514a:	4152      	adcs	r2, r2
   1514c:	0b43      	lsrs	r3, r0, #13
   1514e:	428b      	cmp	r3, r1
   15150:	d301      	bcc.n	15156 <__udivsi3+0x5e>
   15152:	034b      	lsls	r3, r1, #13
   15154:	1ac0      	subs	r0, r0, r3
   15156:	4152      	adcs	r2, r2
   15158:	0b03      	lsrs	r3, r0, #12
   1515a:	428b      	cmp	r3, r1
   1515c:	d301      	bcc.n	15162 <__udivsi3+0x6a>
   1515e:	030b      	lsls	r3, r1, #12
   15160:	1ac0      	subs	r0, r0, r3
   15162:	4152      	adcs	r2, r2
   15164:	0ac3      	lsrs	r3, r0, #11
   15166:	428b      	cmp	r3, r1
   15168:	d301      	bcc.n	1516e <__udivsi3+0x76>
   1516a:	02cb      	lsls	r3, r1, #11
   1516c:	1ac0      	subs	r0, r0, r3
   1516e:	4152      	adcs	r2, r2
   15170:	0a83      	lsrs	r3, r0, #10
   15172:	428b      	cmp	r3, r1
   15174:	d301      	bcc.n	1517a <__udivsi3+0x82>
   15176:	028b      	lsls	r3, r1, #10
   15178:	1ac0      	subs	r0, r0, r3
   1517a:	4152      	adcs	r2, r2
   1517c:	0a43      	lsrs	r3, r0, #9
   1517e:	428b      	cmp	r3, r1
   15180:	d301      	bcc.n	15186 <__udivsi3+0x8e>
   15182:	024b      	lsls	r3, r1, #9
   15184:	1ac0      	subs	r0, r0, r3
   15186:	4152      	adcs	r2, r2
   15188:	0a03      	lsrs	r3, r0, #8
   1518a:	428b      	cmp	r3, r1
   1518c:	d301      	bcc.n	15192 <__udivsi3+0x9a>
   1518e:	020b      	lsls	r3, r1, #8
   15190:	1ac0      	subs	r0, r0, r3
   15192:	4152      	adcs	r2, r2
   15194:	d2cd      	bcs.n	15132 <__udivsi3+0x3a>
   15196:	09c3      	lsrs	r3, r0, #7
   15198:	428b      	cmp	r3, r1
   1519a:	d301      	bcc.n	151a0 <__udivsi3+0xa8>
   1519c:	01cb      	lsls	r3, r1, #7
   1519e:	1ac0      	subs	r0, r0, r3
   151a0:	4152      	adcs	r2, r2
   151a2:	0983      	lsrs	r3, r0, #6
   151a4:	428b      	cmp	r3, r1
   151a6:	d301      	bcc.n	151ac <__udivsi3+0xb4>
   151a8:	018b      	lsls	r3, r1, #6
   151aa:	1ac0      	subs	r0, r0, r3
   151ac:	4152      	adcs	r2, r2
   151ae:	0943      	lsrs	r3, r0, #5
   151b0:	428b      	cmp	r3, r1
   151b2:	d301      	bcc.n	151b8 <__udivsi3+0xc0>
   151b4:	014b      	lsls	r3, r1, #5
   151b6:	1ac0      	subs	r0, r0, r3
   151b8:	4152      	adcs	r2, r2
   151ba:	0903      	lsrs	r3, r0, #4
   151bc:	428b      	cmp	r3, r1
   151be:	d301      	bcc.n	151c4 <__udivsi3+0xcc>
   151c0:	010b      	lsls	r3, r1, #4
   151c2:	1ac0      	subs	r0, r0, r3
   151c4:	4152      	adcs	r2, r2
   151c6:	08c3      	lsrs	r3, r0, #3
   151c8:	428b      	cmp	r3, r1
   151ca:	d301      	bcc.n	151d0 <__udivsi3+0xd8>
   151cc:	00cb      	lsls	r3, r1, #3
   151ce:	1ac0      	subs	r0, r0, r3
   151d0:	4152      	adcs	r2, r2
   151d2:	0883      	lsrs	r3, r0, #2
   151d4:	428b      	cmp	r3, r1
   151d6:	d301      	bcc.n	151dc <__udivsi3+0xe4>
   151d8:	008b      	lsls	r3, r1, #2
   151da:	1ac0      	subs	r0, r0, r3
   151dc:	4152      	adcs	r2, r2
   151de:	0843      	lsrs	r3, r0, #1
   151e0:	428b      	cmp	r3, r1
   151e2:	d301      	bcc.n	151e8 <__udivsi3+0xf0>
   151e4:	004b      	lsls	r3, r1, #1
   151e6:	1ac0      	subs	r0, r0, r3
   151e8:	4152      	adcs	r2, r2
   151ea:	1a41      	subs	r1, r0, r1
   151ec:	d200      	bcs.n	151f0 <__udivsi3+0xf8>
   151ee:	4601      	mov	r1, r0
   151f0:	4152      	adcs	r2, r2
   151f2:	4610      	mov	r0, r2
   151f4:	4770      	bx	lr
   151f6:	e7ff      	b.n	151f8 <__udivsi3+0x100>
   151f8:	b501      	push	{r0, lr}
   151fa:	2000      	movs	r0, #0
   151fc:	f000 f8f0 	bl	153e0 <__aeabi_idiv0>
   15200:	bd02      	pop	{r1, pc}
   15202:	46c0      	nop			; (mov r8, r8)

00015204 <__aeabi_uidivmod>:
   15204:	2900      	cmp	r1, #0
   15206:	d0f7      	beq.n	151f8 <__udivsi3+0x100>
   15208:	e776      	b.n	150f8 <__udivsi3>
   1520a:	4770      	bx	lr

0001520c <__divsi3>:
   1520c:	4603      	mov	r3, r0
   1520e:	430b      	orrs	r3, r1
   15210:	d47f      	bmi.n	15312 <__divsi3+0x106>
   15212:	2200      	movs	r2, #0
   15214:	0843      	lsrs	r3, r0, #1
   15216:	428b      	cmp	r3, r1
   15218:	d374      	bcc.n	15304 <__divsi3+0xf8>
   1521a:	0903      	lsrs	r3, r0, #4
   1521c:	428b      	cmp	r3, r1
   1521e:	d35f      	bcc.n	152e0 <__divsi3+0xd4>
   15220:	0a03      	lsrs	r3, r0, #8
   15222:	428b      	cmp	r3, r1
   15224:	d344      	bcc.n	152b0 <__divsi3+0xa4>
   15226:	0b03      	lsrs	r3, r0, #12
   15228:	428b      	cmp	r3, r1
   1522a:	d328      	bcc.n	1527e <__divsi3+0x72>
   1522c:	0c03      	lsrs	r3, r0, #16
   1522e:	428b      	cmp	r3, r1
   15230:	d30d      	bcc.n	1524e <__divsi3+0x42>
   15232:	22ff      	movs	r2, #255	; 0xff
   15234:	0209      	lsls	r1, r1, #8
   15236:	ba12      	rev	r2, r2
   15238:	0c03      	lsrs	r3, r0, #16
   1523a:	428b      	cmp	r3, r1
   1523c:	d302      	bcc.n	15244 <__divsi3+0x38>
   1523e:	1212      	asrs	r2, r2, #8
   15240:	0209      	lsls	r1, r1, #8
   15242:	d065      	beq.n	15310 <__divsi3+0x104>
   15244:	0b03      	lsrs	r3, r0, #12
   15246:	428b      	cmp	r3, r1
   15248:	d319      	bcc.n	1527e <__divsi3+0x72>
   1524a:	e000      	b.n	1524e <__divsi3+0x42>
   1524c:	0a09      	lsrs	r1, r1, #8
   1524e:	0bc3      	lsrs	r3, r0, #15
   15250:	428b      	cmp	r3, r1
   15252:	d301      	bcc.n	15258 <__divsi3+0x4c>
   15254:	03cb      	lsls	r3, r1, #15
   15256:	1ac0      	subs	r0, r0, r3
   15258:	4152      	adcs	r2, r2
   1525a:	0b83      	lsrs	r3, r0, #14
   1525c:	428b      	cmp	r3, r1
   1525e:	d301      	bcc.n	15264 <__divsi3+0x58>
   15260:	038b      	lsls	r3, r1, #14
   15262:	1ac0      	subs	r0, r0, r3
   15264:	4152      	adcs	r2, r2
   15266:	0b43      	lsrs	r3, r0, #13
   15268:	428b      	cmp	r3, r1
   1526a:	d301      	bcc.n	15270 <__divsi3+0x64>
   1526c:	034b      	lsls	r3, r1, #13
   1526e:	1ac0      	subs	r0, r0, r3
   15270:	4152      	adcs	r2, r2
   15272:	0b03      	lsrs	r3, r0, #12
   15274:	428b      	cmp	r3, r1
   15276:	d301      	bcc.n	1527c <__divsi3+0x70>
   15278:	030b      	lsls	r3, r1, #12
   1527a:	1ac0      	subs	r0, r0, r3
   1527c:	4152      	adcs	r2, r2
   1527e:	0ac3      	lsrs	r3, r0, #11
   15280:	428b      	cmp	r3, r1
   15282:	d301      	bcc.n	15288 <__divsi3+0x7c>
   15284:	02cb      	lsls	r3, r1, #11
   15286:	1ac0      	subs	r0, r0, r3
   15288:	4152      	adcs	r2, r2
   1528a:	0a83      	lsrs	r3, r0, #10
   1528c:	428b      	cmp	r3, r1
   1528e:	d301      	bcc.n	15294 <__divsi3+0x88>
   15290:	028b      	lsls	r3, r1, #10
   15292:	1ac0      	subs	r0, r0, r3
   15294:	4152      	adcs	r2, r2
   15296:	0a43      	lsrs	r3, r0, #9
   15298:	428b      	cmp	r3, r1
   1529a:	d301      	bcc.n	152a0 <__divsi3+0x94>
   1529c:	024b      	lsls	r3, r1, #9
   1529e:	1ac0      	subs	r0, r0, r3
   152a0:	4152      	adcs	r2, r2
   152a2:	0a03      	lsrs	r3, r0, #8
   152a4:	428b      	cmp	r3, r1
   152a6:	d301      	bcc.n	152ac <__divsi3+0xa0>
   152a8:	020b      	lsls	r3, r1, #8
   152aa:	1ac0      	subs	r0, r0, r3
   152ac:	4152      	adcs	r2, r2
   152ae:	d2cd      	bcs.n	1524c <__divsi3+0x40>
   152b0:	09c3      	lsrs	r3, r0, #7
   152b2:	428b      	cmp	r3, r1
   152b4:	d301      	bcc.n	152ba <__divsi3+0xae>
   152b6:	01cb      	lsls	r3, r1, #7
   152b8:	1ac0      	subs	r0, r0, r3
   152ba:	4152      	adcs	r2, r2
   152bc:	0983      	lsrs	r3, r0, #6
   152be:	428b      	cmp	r3, r1
   152c0:	d301      	bcc.n	152c6 <__divsi3+0xba>
   152c2:	018b      	lsls	r3, r1, #6
   152c4:	1ac0      	subs	r0, r0, r3
   152c6:	4152      	adcs	r2, r2
   152c8:	0943      	lsrs	r3, r0, #5
   152ca:	428b      	cmp	r3, r1
   152cc:	d301      	bcc.n	152d2 <__divsi3+0xc6>
   152ce:	014b      	lsls	r3, r1, #5
   152d0:	1ac0      	subs	r0, r0, r3
   152d2:	4152      	adcs	r2, r2
   152d4:	0903      	lsrs	r3, r0, #4
   152d6:	428b      	cmp	r3, r1
   152d8:	d301      	bcc.n	152de <__divsi3+0xd2>
   152da:	010b      	lsls	r3, r1, #4
   152dc:	1ac0      	subs	r0, r0, r3
   152de:	4152      	adcs	r2, r2
   152e0:	08c3      	lsrs	r3, r0, #3
   152e2:	428b      	cmp	r3, r1
   152e4:	d301      	bcc.n	152ea <__divsi3+0xde>
   152e6:	00cb      	lsls	r3, r1, #3
   152e8:	1ac0      	subs	r0, r0, r3
   152ea:	4152      	adcs	r2, r2
   152ec:	0883      	lsrs	r3, r0, #2
   152ee:	428b      	cmp	r3, r1
   152f0:	d301      	bcc.n	152f6 <__divsi3+0xea>
   152f2:	008b      	lsls	r3, r1, #2
   152f4:	1ac0      	subs	r0, r0, r3
   152f6:	4152      	adcs	r2, r2
   152f8:	0843      	lsrs	r3, r0, #1
   152fa:	428b      	cmp	r3, r1
   152fc:	d301      	bcc.n	15302 <__divsi3+0xf6>
   152fe:	004b      	lsls	r3, r1, #1
   15300:	1ac0      	subs	r0, r0, r3
   15302:	4152      	adcs	r2, r2
   15304:	1a41      	subs	r1, r0, r1
   15306:	d200      	bcs.n	1530a <__divsi3+0xfe>
   15308:	4601      	mov	r1, r0
   1530a:	4152      	adcs	r2, r2
   1530c:	4610      	mov	r0, r2
   1530e:	4770      	bx	lr
   15310:	e05d      	b.n	153ce <__divsi3+0x1c2>
   15312:	0fca      	lsrs	r2, r1, #31
   15314:	d000      	beq.n	15318 <__divsi3+0x10c>
   15316:	4249      	negs	r1, r1
   15318:	1003      	asrs	r3, r0, #32
   1531a:	d300      	bcc.n	1531e <__divsi3+0x112>
   1531c:	4240      	negs	r0, r0
   1531e:	4053      	eors	r3, r2
   15320:	2200      	movs	r2, #0
   15322:	469c      	mov	ip, r3
   15324:	0903      	lsrs	r3, r0, #4
   15326:	428b      	cmp	r3, r1
   15328:	d32d      	bcc.n	15386 <__divsi3+0x17a>
   1532a:	0a03      	lsrs	r3, r0, #8
   1532c:	428b      	cmp	r3, r1
   1532e:	d312      	bcc.n	15356 <__divsi3+0x14a>
   15330:	22fc      	movs	r2, #252	; 0xfc
   15332:	0189      	lsls	r1, r1, #6
   15334:	ba12      	rev	r2, r2
   15336:	0a03      	lsrs	r3, r0, #8
   15338:	428b      	cmp	r3, r1
   1533a:	d30c      	bcc.n	15356 <__divsi3+0x14a>
   1533c:	0189      	lsls	r1, r1, #6
   1533e:	1192      	asrs	r2, r2, #6
   15340:	428b      	cmp	r3, r1
   15342:	d308      	bcc.n	15356 <__divsi3+0x14a>
   15344:	0189      	lsls	r1, r1, #6
   15346:	1192      	asrs	r2, r2, #6
   15348:	428b      	cmp	r3, r1
   1534a:	d304      	bcc.n	15356 <__divsi3+0x14a>
   1534c:	0189      	lsls	r1, r1, #6
   1534e:	d03a      	beq.n	153c6 <__divsi3+0x1ba>
   15350:	1192      	asrs	r2, r2, #6
   15352:	e000      	b.n	15356 <__divsi3+0x14a>
   15354:	0989      	lsrs	r1, r1, #6
   15356:	09c3      	lsrs	r3, r0, #7
   15358:	428b      	cmp	r3, r1
   1535a:	d301      	bcc.n	15360 <__divsi3+0x154>
   1535c:	01cb      	lsls	r3, r1, #7
   1535e:	1ac0      	subs	r0, r0, r3
   15360:	4152      	adcs	r2, r2
   15362:	0983      	lsrs	r3, r0, #6
   15364:	428b      	cmp	r3, r1
   15366:	d301      	bcc.n	1536c <__divsi3+0x160>
   15368:	018b      	lsls	r3, r1, #6
   1536a:	1ac0      	subs	r0, r0, r3
   1536c:	4152      	adcs	r2, r2
   1536e:	0943      	lsrs	r3, r0, #5
   15370:	428b      	cmp	r3, r1
   15372:	d301      	bcc.n	15378 <__divsi3+0x16c>
   15374:	014b      	lsls	r3, r1, #5
   15376:	1ac0      	subs	r0, r0, r3
   15378:	4152      	adcs	r2, r2
   1537a:	0903      	lsrs	r3, r0, #4
   1537c:	428b      	cmp	r3, r1
   1537e:	d301      	bcc.n	15384 <__divsi3+0x178>
   15380:	010b      	lsls	r3, r1, #4
   15382:	1ac0      	subs	r0, r0, r3
   15384:	4152      	adcs	r2, r2
   15386:	08c3      	lsrs	r3, r0, #3
   15388:	428b      	cmp	r3, r1
   1538a:	d301      	bcc.n	15390 <__divsi3+0x184>
   1538c:	00cb      	lsls	r3, r1, #3
   1538e:	1ac0      	subs	r0, r0, r3
   15390:	4152      	adcs	r2, r2
   15392:	0883      	lsrs	r3, r0, #2
   15394:	428b      	cmp	r3, r1
   15396:	d301      	bcc.n	1539c <__divsi3+0x190>
   15398:	008b      	lsls	r3, r1, #2
   1539a:	1ac0      	subs	r0, r0, r3
   1539c:	4152      	adcs	r2, r2
   1539e:	d2d9      	bcs.n	15354 <__divsi3+0x148>
   153a0:	0843      	lsrs	r3, r0, #1
   153a2:	428b      	cmp	r3, r1
   153a4:	d301      	bcc.n	153aa <__divsi3+0x19e>
   153a6:	004b      	lsls	r3, r1, #1
   153a8:	1ac0      	subs	r0, r0, r3
   153aa:	4152      	adcs	r2, r2
   153ac:	1a41      	subs	r1, r0, r1
   153ae:	d200      	bcs.n	153b2 <__divsi3+0x1a6>
   153b0:	4601      	mov	r1, r0
   153b2:	4663      	mov	r3, ip
   153b4:	4152      	adcs	r2, r2
   153b6:	105b      	asrs	r3, r3, #1
   153b8:	4610      	mov	r0, r2
   153ba:	d301      	bcc.n	153c0 <__divsi3+0x1b4>
   153bc:	4240      	negs	r0, r0
   153be:	2b00      	cmp	r3, #0
   153c0:	d500      	bpl.n	153c4 <__divsi3+0x1b8>
   153c2:	4249      	negs	r1, r1
   153c4:	4770      	bx	lr
   153c6:	4663      	mov	r3, ip
   153c8:	105b      	asrs	r3, r3, #1
   153ca:	d300      	bcc.n	153ce <__divsi3+0x1c2>
   153cc:	4240      	negs	r0, r0
   153ce:	b501      	push	{r0, lr}
   153d0:	2000      	movs	r0, #0
   153d2:	f000 f805 	bl	153e0 <__aeabi_idiv0>
   153d6:	bd02      	pop	{r1, pc}

000153d8 <__aeabi_idivmod>:
   153d8:	2900      	cmp	r1, #0
   153da:	d0f8      	beq.n	153ce <__divsi3+0x1c2>
   153dc:	e716      	b.n	1520c <__divsi3>
   153de:	4770      	bx	lr

000153e0 <__aeabi_idiv0>:
   153e0:	4770      	bx	lr
   153e2:	46c0      	nop			; (mov r8, r8)

000153e4 <__aeabi_cdrcmple>:
   153e4:	4684      	mov	ip, r0
   153e6:	1c10      	adds	r0, r2, #0
   153e8:	4662      	mov	r2, ip
   153ea:	468c      	mov	ip, r1
   153ec:	1c19      	adds	r1, r3, #0
   153ee:	4663      	mov	r3, ip
   153f0:	e000      	b.n	153f4 <__aeabi_cdcmpeq>
   153f2:	46c0      	nop			; (mov r8, r8)

000153f4 <__aeabi_cdcmpeq>:
   153f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   153f6:	f001 ffa3 	bl	17340 <__ledf2>
   153fa:	2800      	cmp	r0, #0
   153fc:	d401      	bmi.n	15402 <__aeabi_cdcmpeq+0xe>
   153fe:	2100      	movs	r1, #0
   15400:	42c8      	cmn	r0, r1
   15402:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00015404 <__aeabi_dcmpeq>:
   15404:	b510      	push	{r4, lr}
   15406:	f001 fefd 	bl	17204 <__eqdf2>
   1540a:	4240      	negs	r0, r0
   1540c:	3001      	adds	r0, #1
   1540e:	bd10      	pop	{r4, pc}

00015410 <__aeabi_dcmplt>:
   15410:	b510      	push	{r4, lr}
   15412:	f001 ff95 	bl	17340 <__ledf2>
   15416:	2800      	cmp	r0, #0
   15418:	db01      	blt.n	1541e <__aeabi_dcmplt+0xe>
   1541a:	2000      	movs	r0, #0
   1541c:	bd10      	pop	{r4, pc}
   1541e:	2001      	movs	r0, #1
   15420:	bd10      	pop	{r4, pc}
   15422:	46c0      	nop			; (mov r8, r8)

00015424 <__aeabi_dcmple>:
   15424:	b510      	push	{r4, lr}
   15426:	f001 ff8b 	bl	17340 <__ledf2>
   1542a:	2800      	cmp	r0, #0
   1542c:	dd01      	ble.n	15432 <__aeabi_dcmple+0xe>
   1542e:	2000      	movs	r0, #0
   15430:	bd10      	pop	{r4, pc}
   15432:	2001      	movs	r0, #1
   15434:	bd10      	pop	{r4, pc}
   15436:	46c0      	nop			; (mov r8, r8)

00015438 <__aeabi_dcmpgt>:
   15438:	b510      	push	{r4, lr}
   1543a:	f001 ff1d 	bl	17278 <__gedf2>
   1543e:	2800      	cmp	r0, #0
   15440:	dc01      	bgt.n	15446 <__aeabi_dcmpgt+0xe>
   15442:	2000      	movs	r0, #0
   15444:	bd10      	pop	{r4, pc}
   15446:	2001      	movs	r0, #1
   15448:	bd10      	pop	{r4, pc}
   1544a:	46c0      	nop			; (mov r8, r8)

0001544c <__aeabi_dcmpge>:
   1544c:	b510      	push	{r4, lr}
   1544e:	f001 ff13 	bl	17278 <__gedf2>
   15452:	2800      	cmp	r0, #0
   15454:	da01      	bge.n	1545a <__aeabi_dcmpge+0xe>
   15456:	2000      	movs	r0, #0
   15458:	bd10      	pop	{r4, pc}
   1545a:	2001      	movs	r0, #1
   1545c:	bd10      	pop	{r4, pc}
   1545e:	46c0      	nop			; (mov r8, r8)

00015460 <__aeabi_cfrcmple>:
   15460:	4684      	mov	ip, r0
   15462:	1c08      	adds	r0, r1, #0
   15464:	4661      	mov	r1, ip
   15466:	e7ff      	b.n	15468 <__aeabi_cfcmpeq>

00015468 <__aeabi_cfcmpeq>:
   15468:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1546a:	f000 fcd3 	bl	15e14 <__lesf2>
   1546e:	2800      	cmp	r0, #0
   15470:	d401      	bmi.n	15476 <__aeabi_cfcmpeq+0xe>
   15472:	2100      	movs	r1, #0
   15474:	42c8      	cmn	r0, r1
   15476:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00015478 <__aeabi_fcmpeq>:
   15478:	b510      	push	{r4, lr}
   1547a:	f000 fc65 	bl	15d48 <__eqsf2>
   1547e:	4240      	negs	r0, r0
   15480:	3001      	adds	r0, #1
   15482:	bd10      	pop	{r4, pc}

00015484 <__aeabi_fcmplt>:
   15484:	b510      	push	{r4, lr}
   15486:	f000 fcc5 	bl	15e14 <__lesf2>
   1548a:	2800      	cmp	r0, #0
   1548c:	db01      	blt.n	15492 <__aeabi_fcmplt+0xe>
   1548e:	2000      	movs	r0, #0
   15490:	bd10      	pop	{r4, pc}
   15492:	2001      	movs	r0, #1
   15494:	bd10      	pop	{r4, pc}
   15496:	46c0      	nop			; (mov r8, r8)

00015498 <__aeabi_fcmple>:
   15498:	b510      	push	{r4, lr}
   1549a:	f000 fcbb 	bl	15e14 <__lesf2>
   1549e:	2800      	cmp	r0, #0
   154a0:	dd01      	ble.n	154a6 <__aeabi_fcmple+0xe>
   154a2:	2000      	movs	r0, #0
   154a4:	bd10      	pop	{r4, pc}
   154a6:	2001      	movs	r0, #1
   154a8:	bd10      	pop	{r4, pc}
   154aa:	46c0      	nop			; (mov r8, r8)

000154ac <__aeabi_fcmpgt>:
   154ac:	b510      	push	{r4, lr}
   154ae:	f000 fc71 	bl	15d94 <__gesf2>
   154b2:	2800      	cmp	r0, #0
   154b4:	dc01      	bgt.n	154ba <__aeabi_fcmpgt+0xe>
   154b6:	2000      	movs	r0, #0
   154b8:	bd10      	pop	{r4, pc}
   154ba:	2001      	movs	r0, #1
   154bc:	bd10      	pop	{r4, pc}
   154be:	46c0      	nop			; (mov r8, r8)

000154c0 <__aeabi_fcmpge>:
   154c0:	b510      	push	{r4, lr}
   154c2:	f000 fc67 	bl	15d94 <__gesf2>
   154c6:	2800      	cmp	r0, #0
   154c8:	da01      	bge.n	154ce <__aeabi_fcmpge+0xe>
   154ca:	2000      	movs	r0, #0
   154cc:	bd10      	pop	{r4, pc}
   154ce:	2001      	movs	r0, #1
   154d0:	bd10      	pop	{r4, pc}
   154d2:	46c0      	nop			; (mov r8, r8)

000154d4 <__aeabi_uldivmod>:
   154d4:	2b00      	cmp	r3, #0
   154d6:	d111      	bne.n	154fc <__aeabi_uldivmod+0x28>
   154d8:	2a00      	cmp	r2, #0
   154da:	d10f      	bne.n	154fc <__aeabi_uldivmod+0x28>
   154dc:	2900      	cmp	r1, #0
   154de:	d100      	bne.n	154e2 <__aeabi_uldivmod+0xe>
   154e0:	2800      	cmp	r0, #0
   154e2:	d002      	beq.n	154ea <__aeabi_uldivmod+0x16>
   154e4:	2100      	movs	r1, #0
   154e6:	43c9      	mvns	r1, r1
   154e8:	1c08      	adds	r0, r1, #0
   154ea:	b407      	push	{r0, r1, r2}
   154ec:	4802      	ldr	r0, [pc, #8]	; (154f8 <__aeabi_uldivmod+0x24>)
   154ee:	a102      	add	r1, pc, #8	; (adr r1, 154f8 <__aeabi_uldivmod+0x24>)
   154f0:	1840      	adds	r0, r0, r1
   154f2:	9002      	str	r0, [sp, #8]
   154f4:	bd03      	pop	{r0, r1, pc}
   154f6:	46c0      	nop			; (mov r8, r8)
   154f8:	fffffee9 	.word	0xfffffee9
   154fc:	b403      	push	{r0, r1}
   154fe:	4668      	mov	r0, sp
   15500:	b501      	push	{r0, lr}
   15502:	9802      	ldr	r0, [sp, #8]
   15504:	f000 f886 	bl	15614 <__udivmoddi4>
   15508:	9b01      	ldr	r3, [sp, #4]
   1550a:	469e      	mov	lr, r3
   1550c:	b002      	add	sp, #8
   1550e:	bc0c      	pop	{r2, r3}
   15510:	4770      	bx	lr
   15512:	46c0      	nop			; (mov r8, r8)

00015514 <__aeabi_lmul>:
   15514:	b5f0      	push	{r4, r5, r6, r7, lr}
   15516:	46ce      	mov	lr, r9
   15518:	4647      	mov	r7, r8
   1551a:	0415      	lsls	r5, r2, #16
   1551c:	0c2d      	lsrs	r5, r5, #16
   1551e:	002e      	movs	r6, r5
   15520:	b580      	push	{r7, lr}
   15522:	0407      	lsls	r7, r0, #16
   15524:	0c14      	lsrs	r4, r2, #16
   15526:	0c3f      	lsrs	r7, r7, #16
   15528:	4699      	mov	r9, r3
   1552a:	0c03      	lsrs	r3, r0, #16
   1552c:	437e      	muls	r6, r7
   1552e:	435d      	muls	r5, r3
   15530:	4367      	muls	r7, r4
   15532:	4363      	muls	r3, r4
   15534:	197f      	adds	r7, r7, r5
   15536:	0c34      	lsrs	r4, r6, #16
   15538:	19e4      	adds	r4, r4, r7
   1553a:	469c      	mov	ip, r3
   1553c:	42a5      	cmp	r5, r4
   1553e:	d903      	bls.n	15548 <__aeabi_lmul+0x34>
   15540:	2380      	movs	r3, #128	; 0x80
   15542:	025b      	lsls	r3, r3, #9
   15544:	4698      	mov	r8, r3
   15546:	44c4      	add	ip, r8
   15548:	464b      	mov	r3, r9
   1554a:	4351      	muls	r1, r2
   1554c:	4343      	muls	r3, r0
   1554e:	0436      	lsls	r6, r6, #16
   15550:	0c36      	lsrs	r6, r6, #16
   15552:	0c25      	lsrs	r5, r4, #16
   15554:	0424      	lsls	r4, r4, #16
   15556:	4465      	add	r5, ip
   15558:	19a4      	adds	r4, r4, r6
   1555a:	1859      	adds	r1, r3, r1
   1555c:	1949      	adds	r1, r1, r5
   1555e:	0020      	movs	r0, r4
   15560:	bc0c      	pop	{r2, r3}
   15562:	4690      	mov	r8, r2
   15564:	4699      	mov	r9, r3
   15566:	bdf0      	pop	{r4, r5, r6, r7, pc}

00015568 <__aeabi_f2uiz>:
   15568:	219e      	movs	r1, #158	; 0x9e
   1556a:	b510      	push	{r4, lr}
   1556c:	05c9      	lsls	r1, r1, #23
   1556e:	1c04      	adds	r4, r0, #0
   15570:	f7ff ffa6 	bl	154c0 <__aeabi_fcmpge>
   15574:	2800      	cmp	r0, #0
   15576:	d103      	bne.n	15580 <__aeabi_f2uiz+0x18>
   15578:	1c20      	adds	r0, r4, #0
   1557a:	f000 ff49 	bl	16410 <__aeabi_f2iz>
   1557e:	bd10      	pop	{r4, pc}
   15580:	219e      	movs	r1, #158	; 0x9e
   15582:	1c20      	adds	r0, r4, #0
   15584:	05c9      	lsls	r1, r1, #23
   15586:	f000 fda7 	bl	160d8 <__aeabi_fsub>
   1558a:	f000 ff41 	bl	16410 <__aeabi_f2iz>
   1558e:	2380      	movs	r3, #128	; 0x80
   15590:	061b      	lsls	r3, r3, #24
   15592:	469c      	mov	ip, r3
   15594:	4460      	add	r0, ip
   15596:	e7f2      	b.n	1557e <__aeabi_f2uiz+0x16>

00015598 <__aeabi_d2uiz>:
   15598:	b570      	push	{r4, r5, r6, lr}
   1559a:	2200      	movs	r2, #0
   1559c:	4b0c      	ldr	r3, [pc, #48]	; (155d0 <__aeabi_d2uiz+0x38>)
   1559e:	0004      	movs	r4, r0
   155a0:	000d      	movs	r5, r1
   155a2:	f7ff ff53 	bl	1544c <__aeabi_dcmpge>
   155a6:	2800      	cmp	r0, #0
   155a8:	d104      	bne.n	155b4 <__aeabi_d2uiz+0x1c>
   155aa:	0020      	movs	r0, r4
   155ac:	0029      	movs	r1, r5
   155ae:	f002 fcbf 	bl	17f30 <__aeabi_d2iz>
   155b2:	bd70      	pop	{r4, r5, r6, pc}
   155b4:	4b06      	ldr	r3, [pc, #24]	; (155d0 <__aeabi_d2uiz+0x38>)
   155b6:	2200      	movs	r2, #0
   155b8:	0020      	movs	r0, r4
   155ba:	0029      	movs	r1, r5
   155bc:	f002 f9a2 	bl	17904 <__aeabi_dsub>
   155c0:	f002 fcb6 	bl	17f30 <__aeabi_d2iz>
   155c4:	2380      	movs	r3, #128	; 0x80
   155c6:	061b      	lsls	r3, r3, #24
   155c8:	469c      	mov	ip, r3
   155ca:	4460      	add	r0, ip
   155cc:	e7f1      	b.n	155b2 <__aeabi_d2uiz+0x1a>
   155ce:	46c0      	nop			; (mov r8, r8)
   155d0:	41e00000 	.word	0x41e00000

000155d4 <__aeabi_f2ulz>:
   155d4:	b570      	push	{r4, r5, r6, lr}
   155d6:	f002 fd59 	bl	1808c <__aeabi_f2d>
   155da:	2200      	movs	r2, #0
   155dc:	4b0b      	ldr	r3, [pc, #44]	; (1560c <__aeabi_f2ulz+0x38>)
   155de:	000d      	movs	r5, r1
   155e0:	0004      	movs	r4, r0
   155e2:	f001 ff0f 	bl	17404 <__aeabi_dmul>
   155e6:	f7ff ffd7 	bl	15598 <__aeabi_d2uiz>
   155ea:	0006      	movs	r6, r0
   155ec:	f002 fd16 	bl	1801c <__aeabi_ui2d>
   155f0:	2200      	movs	r2, #0
   155f2:	4b07      	ldr	r3, [pc, #28]	; (15610 <__aeabi_f2ulz+0x3c>)
   155f4:	f001 ff06 	bl	17404 <__aeabi_dmul>
   155f8:	0002      	movs	r2, r0
   155fa:	000b      	movs	r3, r1
   155fc:	0020      	movs	r0, r4
   155fe:	0029      	movs	r1, r5
   15600:	f002 f980 	bl	17904 <__aeabi_dsub>
   15604:	f7ff ffc8 	bl	15598 <__aeabi_d2uiz>
   15608:	0031      	movs	r1, r6
   1560a:	bd70      	pop	{r4, r5, r6, pc}
   1560c:	3df00000 	.word	0x3df00000
   15610:	41f00000 	.word	0x41f00000

00015614 <__udivmoddi4>:
   15614:	b5f0      	push	{r4, r5, r6, r7, lr}
   15616:	4657      	mov	r7, sl
   15618:	464e      	mov	r6, r9
   1561a:	4645      	mov	r5, r8
   1561c:	46de      	mov	lr, fp
   1561e:	b5e0      	push	{r5, r6, r7, lr}
   15620:	0004      	movs	r4, r0
   15622:	b083      	sub	sp, #12
   15624:	000d      	movs	r5, r1
   15626:	4692      	mov	sl, r2
   15628:	4699      	mov	r9, r3
   1562a:	428b      	cmp	r3, r1
   1562c:	d82f      	bhi.n	1568e <__udivmoddi4+0x7a>
   1562e:	d02c      	beq.n	1568a <__udivmoddi4+0x76>
   15630:	4649      	mov	r1, r9
   15632:	4650      	mov	r0, sl
   15634:	f002 fe24 	bl	18280 <__clzdi2>
   15638:	0029      	movs	r1, r5
   1563a:	0006      	movs	r6, r0
   1563c:	0020      	movs	r0, r4
   1563e:	f002 fe1f 	bl	18280 <__clzdi2>
   15642:	1a33      	subs	r3, r6, r0
   15644:	4698      	mov	r8, r3
   15646:	3b20      	subs	r3, #32
   15648:	469b      	mov	fp, r3
   1564a:	d500      	bpl.n	1564e <__udivmoddi4+0x3a>
   1564c:	e074      	b.n	15738 <__udivmoddi4+0x124>
   1564e:	4653      	mov	r3, sl
   15650:	465a      	mov	r2, fp
   15652:	4093      	lsls	r3, r2
   15654:	001f      	movs	r7, r3
   15656:	4653      	mov	r3, sl
   15658:	4642      	mov	r2, r8
   1565a:	4093      	lsls	r3, r2
   1565c:	001e      	movs	r6, r3
   1565e:	42af      	cmp	r7, r5
   15660:	d829      	bhi.n	156b6 <__udivmoddi4+0xa2>
   15662:	d026      	beq.n	156b2 <__udivmoddi4+0x9e>
   15664:	465b      	mov	r3, fp
   15666:	1ba4      	subs	r4, r4, r6
   15668:	41bd      	sbcs	r5, r7
   1566a:	2b00      	cmp	r3, #0
   1566c:	da00      	bge.n	15670 <__udivmoddi4+0x5c>
   1566e:	e079      	b.n	15764 <__udivmoddi4+0x150>
   15670:	2200      	movs	r2, #0
   15672:	2300      	movs	r3, #0
   15674:	9200      	str	r2, [sp, #0]
   15676:	9301      	str	r3, [sp, #4]
   15678:	2301      	movs	r3, #1
   1567a:	465a      	mov	r2, fp
   1567c:	4093      	lsls	r3, r2
   1567e:	9301      	str	r3, [sp, #4]
   15680:	2301      	movs	r3, #1
   15682:	4642      	mov	r2, r8
   15684:	4093      	lsls	r3, r2
   15686:	9300      	str	r3, [sp, #0]
   15688:	e019      	b.n	156be <__udivmoddi4+0xaa>
   1568a:	4282      	cmp	r2, r0
   1568c:	d9d0      	bls.n	15630 <__udivmoddi4+0x1c>
   1568e:	2200      	movs	r2, #0
   15690:	2300      	movs	r3, #0
   15692:	9200      	str	r2, [sp, #0]
   15694:	9301      	str	r3, [sp, #4]
   15696:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15698:	2b00      	cmp	r3, #0
   1569a:	d001      	beq.n	156a0 <__udivmoddi4+0x8c>
   1569c:	601c      	str	r4, [r3, #0]
   1569e:	605d      	str	r5, [r3, #4]
   156a0:	9800      	ldr	r0, [sp, #0]
   156a2:	9901      	ldr	r1, [sp, #4]
   156a4:	b003      	add	sp, #12
   156a6:	bc3c      	pop	{r2, r3, r4, r5}
   156a8:	4690      	mov	r8, r2
   156aa:	4699      	mov	r9, r3
   156ac:	46a2      	mov	sl, r4
   156ae:	46ab      	mov	fp, r5
   156b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   156b2:	42a3      	cmp	r3, r4
   156b4:	d9d6      	bls.n	15664 <__udivmoddi4+0x50>
   156b6:	2200      	movs	r2, #0
   156b8:	2300      	movs	r3, #0
   156ba:	9200      	str	r2, [sp, #0]
   156bc:	9301      	str	r3, [sp, #4]
   156be:	4643      	mov	r3, r8
   156c0:	2b00      	cmp	r3, #0
   156c2:	d0e8      	beq.n	15696 <__udivmoddi4+0x82>
   156c4:	07fb      	lsls	r3, r7, #31
   156c6:	0872      	lsrs	r2, r6, #1
   156c8:	431a      	orrs	r2, r3
   156ca:	4646      	mov	r6, r8
   156cc:	087b      	lsrs	r3, r7, #1
   156ce:	e00e      	b.n	156ee <__udivmoddi4+0xda>
   156d0:	42ab      	cmp	r3, r5
   156d2:	d101      	bne.n	156d8 <__udivmoddi4+0xc4>
   156d4:	42a2      	cmp	r2, r4
   156d6:	d80c      	bhi.n	156f2 <__udivmoddi4+0xde>
   156d8:	1aa4      	subs	r4, r4, r2
   156da:	419d      	sbcs	r5, r3
   156dc:	2001      	movs	r0, #1
   156de:	1924      	adds	r4, r4, r4
   156e0:	416d      	adcs	r5, r5
   156e2:	2100      	movs	r1, #0
   156e4:	3e01      	subs	r6, #1
   156e6:	1824      	adds	r4, r4, r0
   156e8:	414d      	adcs	r5, r1
   156ea:	2e00      	cmp	r6, #0
   156ec:	d006      	beq.n	156fc <__udivmoddi4+0xe8>
   156ee:	42ab      	cmp	r3, r5
   156f0:	d9ee      	bls.n	156d0 <__udivmoddi4+0xbc>
   156f2:	3e01      	subs	r6, #1
   156f4:	1924      	adds	r4, r4, r4
   156f6:	416d      	adcs	r5, r5
   156f8:	2e00      	cmp	r6, #0
   156fa:	d1f8      	bne.n	156ee <__udivmoddi4+0xda>
   156fc:	465b      	mov	r3, fp
   156fe:	9800      	ldr	r0, [sp, #0]
   15700:	9901      	ldr	r1, [sp, #4]
   15702:	1900      	adds	r0, r0, r4
   15704:	4169      	adcs	r1, r5
   15706:	2b00      	cmp	r3, #0
   15708:	db22      	blt.n	15750 <__udivmoddi4+0x13c>
   1570a:	002b      	movs	r3, r5
   1570c:	465a      	mov	r2, fp
   1570e:	40d3      	lsrs	r3, r2
   15710:	002a      	movs	r2, r5
   15712:	4644      	mov	r4, r8
   15714:	40e2      	lsrs	r2, r4
   15716:	001c      	movs	r4, r3
   15718:	465b      	mov	r3, fp
   1571a:	0015      	movs	r5, r2
   1571c:	2b00      	cmp	r3, #0
   1571e:	db2c      	blt.n	1577a <__udivmoddi4+0x166>
   15720:	0026      	movs	r6, r4
   15722:	409e      	lsls	r6, r3
   15724:	0033      	movs	r3, r6
   15726:	0026      	movs	r6, r4
   15728:	4647      	mov	r7, r8
   1572a:	40be      	lsls	r6, r7
   1572c:	0032      	movs	r2, r6
   1572e:	1a80      	subs	r0, r0, r2
   15730:	4199      	sbcs	r1, r3
   15732:	9000      	str	r0, [sp, #0]
   15734:	9101      	str	r1, [sp, #4]
   15736:	e7ae      	b.n	15696 <__udivmoddi4+0x82>
   15738:	4642      	mov	r2, r8
   1573a:	2320      	movs	r3, #32
   1573c:	1a9b      	subs	r3, r3, r2
   1573e:	4652      	mov	r2, sl
   15740:	40da      	lsrs	r2, r3
   15742:	4641      	mov	r1, r8
   15744:	0013      	movs	r3, r2
   15746:	464a      	mov	r2, r9
   15748:	408a      	lsls	r2, r1
   1574a:	0017      	movs	r7, r2
   1574c:	431f      	orrs	r7, r3
   1574e:	e782      	b.n	15656 <__udivmoddi4+0x42>
   15750:	4642      	mov	r2, r8
   15752:	2320      	movs	r3, #32
   15754:	1a9b      	subs	r3, r3, r2
   15756:	002a      	movs	r2, r5
   15758:	4646      	mov	r6, r8
   1575a:	409a      	lsls	r2, r3
   1575c:	0023      	movs	r3, r4
   1575e:	40f3      	lsrs	r3, r6
   15760:	4313      	orrs	r3, r2
   15762:	e7d5      	b.n	15710 <__udivmoddi4+0xfc>
   15764:	4642      	mov	r2, r8
   15766:	2320      	movs	r3, #32
   15768:	2100      	movs	r1, #0
   1576a:	1a9b      	subs	r3, r3, r2
   1576c:	2200      	movs	r2, #0
   1576e:	9100      	str	r1, [sp, #0]
   15770:	9201      	str	r2, [sp, #4]
   15772:	2201      	movs	r2, #1
   15774:	40da      	lsrs	r2, r3
   15776:	9201      	str	r2, [sp, #4]
   15778:	e782      	b.n	15680 <__udivmoddi4+0x6c>
   1577a:	4642      	mov	r2, r8
   1577c:	2320      	movs	r3, #32
   1577e:	0026      	movs	r6, r4
   15780:	1a9b      	subs	r3, r3, r2
   15782:	40de      	lsrs	r6, r3
   15784:	002f      	movs	r7, r5
   15786:	46b4      	mov	ip, r6
   15788:	4097      	lsls	r7, r2
   1578a:	4666      	mov	r6, ip
   1578c:	003b      	movs	r3, r7
   1578e:	4333      	orrs	r3, r6
   15790:	e7c9      	b.n	15726 <__udivmoddi4+0x112>
   15792:	46c0      	nop			; (mov r8, r8)

00015794 <__aeabi_fadd>:
   15794:	b5f0      	push	{r4, r5, r6, r7, lr}
   15796:	46c6      	mov	lr, r8
   15798:	024e      	lsls	r6, r1, #9
   1579a:	0247      	lsls	r7, r0, #9
   1579c:	0a76      	lsrs	r6, r6, #9
   1579e:	0a7b      	lsrs	r3, r7, #9
   157a0:	0044      	lsls	r4, r0, #1
   157a2:	0fc5      	lsrs	r5, r0, #31
   157a4:	00f7      	lsls	r7, r6, #3
   157a6:	0048      	lsls	r0, r1, #1
   157a8:	4698      	mov	r8, r3
   157aa:	b500      	push	{lr}
   157ac:	0e24      	lsrs	r4, r4, #24
   157ae:	002a      	movs	r2, r5
   157b0:	00db      	lsls	r3, r3, #3
   157b2:	0e00      	lsrs	r0, r0, #24
   157b4:	0fc9      	lsrs	r1, r1, #31
   157b6:	46bc      	mov	ip, r7
   157b8:	428d      	cmp	r5, r1
   157ba:	d067      	beq.n	1588c <__aeabi_fadd+0xf8>
   157bc:	1a22      	subs	r2, r4, r0
   157be:	2a00      	cmp	r2, #0
   157c0:	dc00      	bgt.n	157c4 <__aeabi_fadd+0x30>
   157c2:	e0a5      	b.n	15910 <__aeabi_fadd+0x17c>
   157c4:	2800      	cmp	r0, #0
   157c6:	d13a      	bne.n	1583e <__aeabi_fadd+0xaa>
   157c8:	2f00      	cmp	r7, #0
   157ca:	d100      	bne.n	157ce <__aeabi_fadd+0x3a>
   157cc:	e093      	b.n	158f6 <__aeabi_fadd+0x162>
   157ce:	1e51      	subs	r1, r2, #1
   157d0:	2900      	cmp	r1, #0
   157d2:	d000      	beq.n	157d6 <__aeabi_fadd+0x42>
   157d4:	e0bc      	b.n	15950 <__aeabi_fadd+0x1bc>
   157d6:	2401      	movs	r4, #1
   157d8:	1bdb      	subs	r3, r3, r7
   157da:	015a      	lsls	r2, r3, #5
   157dc:	d546      	bpl.n	1586c <__aeabi_fadd+0xd8>
   157de:	019b      	lsls	r3, r3, #6
   157e0:	099e      	lsrs	r6, r3, #6
   157e2:	0030      	movs	r0, r6
   157e4:	f002 fd2e 	bl	18244 <__clzsi2>
   157e8:	3805      	subs	r0, #5
   157ea:	4086      	lsls	r6, r0
   157ec:	4284      	cmp	r4, r0
   157ee:	dd00      	ble.n	157f2 <__aeabi_fadd+0x5e>
   157f0:	e09d      	b.n	1592e <__aeabi_fadd+0x19a>
   157f2:	1b04      	subs	r4, r0, r4
   157f4:	0032      	movs	r2, r6
   157f6:	2020      	movs	r0, #32
   157f8:	3401      	adds	r4, #1
   157fa:	40e2      	lsrs	r2, r4
   157fc:	1b04      	subs	r4, r0, r4
   157fe:	40a6      	lsls	r6, r4
   15800:	0033      	movs	r3, r6
   15802:	1e5e      	subs	r6, r3, #1
   15804:	41b3      	sbcs	r3, r6
   15806:	2400      	movs	r4, #0
   15808:	4313      	orrs	r3, r2
   1580a:	075a      	lsls	r2, r3, #29
   1580c:	d004      	beq.n	15818 <__aeabi_fadd+0x84>
   1580e:	220f      	movs	r2, #15
   15810:	401a      	ands	r2, r3
   15812:	2a04      	cmp	r2, #4
   15814:	d000      	beq.n	15818 <__aeabi_fadd+0x84>
   15816:	3304      	adds	r3, #4
   15818:	015a      	lsls	r2, r3, #5
   1581a:	d529      	bpl.n	15870 <__aeabi_fadd+0xdc>
   1581c:	3401      	adds	r4, #1
   1581e:	2cff      	cmp	r4, #255	; 0xff
   15820:	d100      	bne.n	15824 <__aeabi_fadd+0x90>
   15822:	e081      	b.n	15928 <__aeabi_fadd+0x194>
   15824:	002a      	movs	r2, r5
   15826:	019b      	lsls	r3, r3, #6
   15828:	0a5b      	lsrs	r3, r3, #9
   1582a:	b2e4      	uxtb	r4, r4
   1582c:	025b      	lsls	r3, r3, #9
   1582e:	05e4      	lsls	r4, r4, #23
   15830:	0a58      	lsrs	r0, r3, #9
   15832:	07d2      	lsls	r2, r2, #31
   15834:	4320      	orrs	r0, r4
   15836:	4310      	orrs	r0, r2
   15838:	bc04      	pop	{r2}
   1583a:	4690      	mov	r8, r2
   1583c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1583e:	2cff      	cmp	r4, #255	; 0xff
   15840:	d0e3      	beq.n	1580a <__aeabi_fadd+0x76>
   15842:	2180      	movs	r1, #128	; 0x80
   15844:	0038      	movs	r0, r7
   15846:	04c9      	lsls	r1, r1, #19
   15848:	4308      	orrs	r0, r1
   1584a:	4684      	mov	ip, r0
   1584c:	2a1b      	cmp	r2, #27
   1584e:	dd00      	ble.n	15852 <__aeabi_fadd+0xbe>
   15850:	e082      	b.n	15958 <__aeabi_fadd+0x1c4>
   15852:	2020      	movs	r0, #32
   15854:	4661      	mov	r1, ip
   15856:	40d1      	lsrs	r1, r2
   15858:	1a82      	subs	r2, r0, r2
   1585a:	4660      	mov	r0, ip
   1585c:	4090      	lsls	r0, r2
   1585e:	0002      	movs	r2, r0
   15860:	1e50      	subs	r0, r2, #1
   15862:	4182      	sbcs	r2, r0
   15864:	430a      	orrs	r2, r1
   15866:	1a9b      	subs	r3, r3, r2
   15868:	015a      	lsls	r2, r3, #5
   1586a:	d4b8      	bmi.n	157de <__aeabi_fadd+0x4a>
   1586c:	075a      	lsls	r2, r3, #29
   1586e:	d1ce      	bne.n	1580e <__aeabi_fadd+0x7a>
   15870:	08de      	lsrs	r6, r3, #3
   15872:	002a      	movs	r2, r5
   15874:	2cff      	cmp	r4, #255	; 0xff
   15876:	d13a      	bne.n	158ee <__aeabi_fadd+0x15a>
   15878:	2e00      	cmp	r6, #0
   1587a:	d100      	bne.n	1587e <__aeabi_fadd+0xea>
   1587c:	e0ae      	b.n	159dc <__aeabi_fadd+0x248>
   1587e:	2380      	movs	r3, #128	; 0x80
   15880:	03db      	lsls	r3, r3, #15
   15882:	4333      	orrs	r3, r6
   15884:	025b      	lsls	r3, r3, #9
   15886:	0a5b      	lsrs	r3, r3, #9
   15888:	24ff      	movs	r4, #255	; 0xff
   1588a:	e7cf      	b.n	1582c <__aeabi_fadd+0x98>
   1588c:	1a21      	subs	r1, r4, r0
   1588e:	2900      	cmp	r1, #0
   15890:	dd52      	ble.n	15938 <__aeabi_fadd+0x1a4>
   15892:	2800      	cmp	r0, #0
   15894:	d031      	beq.n	158fa <__aeabi_fadd+0x166>
   15896:	2cff      	cmp	r4, #255	; 0xff
   15898:	d0b7      	beq.n	1580a <__aeabi_fadd+0x76>
   1589a:	2080      	movs	r0, #128	; 0x80
   1589c:	003e      	movs	r6, r7
   1589e:	04c0      	lsls	r0, r0, #19
   158a0:	4306      	orrs	r6, r0
   158a2:	46b4      	mov	ip, r6
   158a4:	291b      	cmp	r1, #27
   158a6:	dd00      	ble.n	158aa <__aeabi_fadd+0x116>
   158a8:	e0aa      	b.n	15a00 <__aeabi_fadd+0x26c>
   158aa:	2620      	movs	r6, #32
   158ac:	4660      	mov	r0, ip
   158ae:	40c8      	lsrs	r0, r1
   158b0:	1a71      	subs	r1, r6, r1
   158b2:	4666      	mov	r6, ip
   158b4:	408e      	lsls	r6, r1
   158b6:	0031      	movs	r1, r6
   158b8:	1e4e      	subs	r6, r1, #1
   158ba:	41b1      	sbcs	r1, r6
   158bc:	4301      	orrs	r1, r0
   158be:	185b      	adds	r3, r3, r1
   158c0:	0159      	lsls	r1, r3, #5
   158c2:	d5d3      	bpl.n	1586c <__aeabi_fadd+0xd8>
   158c4:	3401      	adds	r4, #1
   158c6:	2cff      	cmp	r4, #255	; 0xff
   158c8:	d100      	bne.n	158cc <__aeabi_fadd+0x138>
   158ca:	e087      	b.n	159dc <__aeabi_fadd+0x248>
   158cc:	2201      	movs	r2, #1
   158ce:	4978      	ldr	r1, [pc, #480]	; (15ab0 <__aeabi_fadd+0x31c>)
   158d0:	401a      	ands	r2, r3
   158d2:	085b      	lsrs	r3, r3, #1
   158d4:	400b      	ands	r3, r1
   158d6:	4313      	orrs	r3, r2
   158d8:	e797      	b.n	1580a <__aeabi_fadd+0x76>
   158da:	2c00      	cmp	r4, #0
   158dc:	d000      	beq.n	158e0 <__aeabi_fadd+0x14c>
   158de:	e0a7      	b.n	15a30 <__aeabi_fadd+0x29c>
   158e0:	2b00      	cmp	r3, #0
   158e2:	d000      	beq.n	158e6 <__aeabi_fadd+0x152>
   158e4:	e0b6      	b.n	15a54 <__aeabi_fadd+0x2c0>
   158e6:	1e3b      	subs	r3, r7, #0
   158e8:	d162      	bne.n	159b0 <__aeabi_fadd+0x21c>
   158ea:	2600      	movs	r6, #0
   158ec:	2200      	movs	r2, #0
   158ee:	0273      	lsls	r3, r6, #9
   158f0:	0a5b      	lsrs	r3, r3, #9
   158f2:	b2e4      	uxtb	r4, r4
   158f4:	e79a      	b.n	1582c <__aeabi_fadd+0x98>
   158f6:	0014      	movs	r4, r2
   158f8:	e787      	b.n	1580a <__aeabi_fadd+0x76>
   158fa:	2f00      	cmp	r7, #0
   158fc:	d04d      	beq.n	1599a <__aeabi_fadd+0x206>
   158fe:	1e48      	subs	r0, r1, #1
   15900:	2800      	cmp	r0, #0
   15902:	d157      	bne.n	159b4 <__aeabi_fadd+0x220>
   15904:	4463      	add	r3, ip
   15906:	2401      	movs	r4, #1
   15908:	015a      	lsls	r2, r3, #5
   1590a:	d5af      	bpl.n	1586c <__aeabi_fadd+0xd8>
   1590c:	2402      	movs	r4, #2
   1590e:	e7dd      	b.n	158cc <__aeabi_fadd+0x138>
   15910:	2a00      	cmp	r2, #0
   15912:	d124      	bne.n	1595e <__aeabi_fadd+0x1ca>
   15914:	1c62      	adds	r2, r4, #1
   15916:	b2d2      	uxtb	r2, r2
   15918:	2a01      	cmp	r2, #1
   1591a:	ddde      	ble.n	158da <__aeabi_fadd+0x146>
   1591c:	1bde      	subs	r6, r3, r7
   1591e:	0172      	lsls	r2, r6, #5
   15920:	d535      	bpl.n	1598e <__aeabi_fadd+0x1fa>
   15922:	1afe      	subs	r6, r7, r3
   15924:	000d      	movs	r5, r1
   15926:	e75c      	b.n	157e2 <__aeabi_fadd+0x4e>
   15928:	002a      	movs	r2, r5
   1592a:	2300      	movs	r3, #0
   1592c:	e77e      	b.n	1582c <__aeabi_fadd+0x98>
   1592e:	0033      	movs	r3, r6
   15930:	4a60      	ldr	r2, [pc, #384]	; (15ab4 <__aeabi_fadd+0x320>)
   15932:	1a24      	subs	r4, r4, r0
   15934:	4013      	ands	r3, r2
   15936:	e768      	b.n	1580a <__aeabi_fadd+0x76>
   15938:	2900      	cmp	r1, #0
   1593a:	d163      	bne.n	15a04 <__aeabi_fadd+0x270>
   1593c:	1c61      	adds	r1, r4, #1
   1593e:	b2c8      	uxtb	r0, r1
   15940:	2801      	cmp	r0, #1
   15942:	dd4e      	ble.n	159e2 <__aeabi_fadd+0x24e>
   15944:	29ff      	cmp	r1, #255	; 0xff
   15946:	d049      	beq.n	159dc <__aeabi_fadd+0x248>
   15948:	4463      	add	r3, ip
   1594a:	085b      	lsrs	r3, r3, #1
   1594c:	000c      	movs	r4, r1
   1594e:	e75c      	b.n	1580a <__aeabi_fadd+0x76>
   15950:	2aff      	cmp	r2, #255	; 0xff
   15952:	d041      	beq.n	159d8 <__aeabi_fadd+0x244>
   15954:	000a      	movs	r2, r1
   15956:	e779      	b.n	1584c <__aeabi_fadd+0xb8>
   15958:	2201      	movs	r2, #1
   1595a:	1a9b      	subs	r3, r3, r2
   1595c:	e784      	b.n	15868 <__aeabi_fadd+0xd4>
   1595e:	2c00      	cmp	r4, #0
   15960:	d01d      	beq.n	1599e <__aeabi_fadd+0x20a>
   15962:	28ff      	cmp	r0, #255	; 0xff
   15964:	d022      	beq.n	159ac <__aeabi_fadd+0x218>
   15966:	2480      	movs	r4, #128	; 0x80
   15968:	04e4      	lsls	r4, r4, #19
   1596a:	4252      	negs	r2, r2
   1596c:	4323      	orrs	r3, r4
   1596e:	2a1b      	cmp	r2, #27
   15970:	dd00      	ble.n	15974 <__aeabi_fadd+0x1e0>
   15972:	e08a      	b.n	15a8a <__aeabi_fadd+0x2f6>
   15974:	001c      	movs	r4, r3
   15976:	2520      	movs	r5, #32
   15978:	40d4      	lsrs	r4, r2
   1597a:	1aaa      	subs	r2, r5, r2
   1597c:	4093      	lsls	r3, r2
   1597e:	1e5a      	subs	r2, r3, #1
   15980:	4193      	sbcs	r3, r2
   15982:	4323      	orrs	r3, r4
   15984:	4662      	mov	r2, ip
   15986:	0004      	movs	r4, r0
   15988:	1ad3      	subs	r3, r2, r3
   1598a:	000d      	movs	r5, r1
   1598c:	e725      	b.n	157da <__aeabi_fadd+0x46>
   1598e:	2e00      	cmp	r6, #0
   15990:	d000      	beq.n	15994 <__aeabi_fadd+0x200>
   15992:	e726      	b.n	157e2 <__aeabi_fadd+0x4e>
   15994:	2200      	movs	r2, #0
   15996:	2400      	movs	r4, #0
   15998:	e7a9      	b.n	158ee <__aeabi_fadd+0x15a>
   1599a:	000c      	movs	r4, r1
   1599c:	e735      	b.n	1580a <__aeabi_fadd+0x76>
   1599e:	2b00      	cmp	r3, #0
   159a0:	d04d      	beq.n	15a3e <__aeabi_fadd+0x2aa>
   159a2:	43d2      	mvns	r2, r2
   159a4:	2a00      	cmp	r2, #0
   159a6:	d0ed      	beq.n	15984 <__aeabi_fadd+0x1f0>
   159a8:	28ff      	cmp	r0, #255	; 0xff
   159aa:	d1e0      	bne.n	1596e <__aeabi_fadd+0x1da>
   159ac:	4663      	mov	r3, ip
   159ae:	24ff      	movs	r4, #255	; 0xff
   159b0:	000d      	movs	r5, r1
   159b2:	e72a      	b.n	1580a <__aeabi_fadd+0x76>
   159b4:	29ff      	cmp	r1, #255	; 0xff
   159b6:	d00f      	beq.n	159d8 <__aeabi_fadd+0x244>
   159b8:	0001      	movs	r1, r0
   159ba:	e773      	b.n	158a4 <__aeabi_fadd+0x110>
   159bc:	2b00      	cmp	r3, #0
   159be:	d061      	beq.n	15a84 <__aeabi_fadd+0x2f0>
   159c0:	24ff      	movs	r4, #255	; 0xff
   159c2:	2f00      	cmp	r7, #0
   159c4:	d100      	bne.n	159c8 <__aeabi_fadd+0x234>
   159c6:	e720      	b.n	1580a <__aeabi_fadd+0x76>
   159c8:	2280      	movs	r2, #128	; 0x80
   159ca:	4641      	mov	r1, r8
   159cc:	03d2      	lsls	r2, r2, #15
   159ce:	4211      	tst	r1, r2
   159d0:	d002      	beq.n	159d8 <__aeabi_fadd+0x244>
   159d2:	4216      	tst	r6, r2
   159d4:	d100      	bne.n	159d8 <__aeabi_fadd+0x244>
   159d6:	003b      	movs	r3, r7
   159d8:	24ff      	movs	r4, #255	; 0xff
   159da:	e716      	b.n	1580a <__aeabi_fadd+0x76>
   159dc:	24ff      	movs	r4, #255	; 0xff
   159de:	2300      	movs	r3, #0
   159e0:	e724      	b.n	1582c <__aeabi_fadd+0x98>
   159e2:	2c00      	cmp	r4, #0
   159e4:	d1ea      	bne.n	159bc <__aeabi_fadd+0x228>
   159e6:	2b00      	cmp	r3, #0
   159e8:	d058      	beq.n	15a9c <__aeabi_fadd+0x308>
   159ea:	2f00      	cmp	r7, #0
   159ec:	d100      	bne.n	159f0 <__aeabi_fadd+0x25c>
   159ee:	e70c      	b.n	1580a <__aeabi_fadd+0x76>
   159f0:	4463      	add	r3, ip
   159f2:	015a      	lsls	r2, r3, #5
   159f4:	d400      	bmi.n	159f8 <__aeabi_fadd+0x264>
   159f6:	e739      	b.n	1586c <__aeabi_fadd+0xd8>
   159f8:	4a2e      	ldr	r2, [pc, #184]	; (15ab4 <__aeabi_fadd+0x320>)
   159fa:	000c      	movs	r4, r1
   159fc:	4013      	ands	r3, r2
   159fe:	e704      	b.n	1580a <__aeabi_fadd+0x76>
   15a00:	2101      	movs	r1, #1
   15a02:	e75c      	b.n	158be <__aeabi_fadd+0x12a>
   15a04:	2c00      	cmp	r4, #0
   15a06:	d11e      	bne.n	15a46 <__aeabi_fadd+0x2b2>
   15a08:	2b00      	cmp	r3, #0
   15a0a:	d040      	beq.n	15a8e <__aeabi_fadd+0x2fa>
   15a0c:	43c9      	mvns	r1, r1
   15a0e:	2900      	cmp	r1, #0
   15a10:	d00b      	beq.n	15a2a <__aeabi_fadd+0x296>
   15a12:	28ff      	cmp	r0, #255	; 0xff
   15a14:	d036      	beq.n	15a84 <__aeabi_fadd+0x2f0>
   15a16:	291b      	cmp	r1, #27
   15a18:	dc47      	bgt.n	15aaa <__aeabi_fadd+0x316>
   15a1a:	001c      	movs	r4, r3
   15a1c:	2620      	movs	r6, #32
   15a1e:	40cc      	lsrs	r4, r1
   15a20:	1a71      	subs	r1, r6, r1
   15a22:	408b      	lsls	r3, r1
   15a24:	1e59      	subs	r1, r3, #1
   15a26:	418b      	sbcs	r3, r1
   15a28:	4323      	orrs	r3, r4
   15a2a:	4463      	add	r3, ip
   15a2c:	0004      	movs	r4, r0
   15a2e:	e747      	b.n	158c0 <__aeabi_fadd+0x12c>
   15a30:	2b00      	cmp	r3, #0
   15a32:	d118      	bne.n	15a66 <__aeabi_fadd+0x2d2>
   15a34:	1e3b      	subs	r3, r7, #0
   15a36:	d02d      	beq.n	15a94 <__aeabi_fadd+0x300>
   15a38:	000d      	movs	r5, r1
   15a3a:	24ff      	movs	r4, #255	; 0xff
   15a3c:	e6e5      	b.n	1580a <__aeabi_fadd+0x76>
   15a3e:	003b      	movs	r3, r7
   15a40:	0004      	movs	r4, r0
   15a42:	000d      	movs	r5, r1
   15a44:	e6e1      	b.n	1580a <__aeabi_fadd+0x76>
   15a46:	28ff      	cmp	r0, #255	; 0xff
   15a48:	d01c      	beq.n	15a84 <__aeabi_fadd+0x2f0>
   15a4a:	2480      	movs	r4, #128	; 0x80
   15a4c:	04e4      	lsls	r4, r4, #19
   15a4e:	4249      	negs	r1, r1
   15a50:	4323      	orrs	r3, r4
   15a52:	e7e0      	b.n	15a16 <__aeabi_fadd+0x282>
   15a54:	2f00      	cmp	r7, #0
   15a56:	d100      	bne.n	15a5a <__aeabi_fadd+0x2c6>
   15a58:	e6d7      	b.n	1580a <__aeabi_fadd+0x76>
   15a5a:	1bde      	subs	r6, r3, r7
   15a5c:	0172      	lsls	r2, r6, #5
   15a5e:	d51f      	bpl.n	15aa0 <__aeabi_fadd+0x30c>
   15a60:	1afb      	subs	r3, r7, r3
   15a62:	000d      	movs	r5, r1
   15a64:	e6d1      	b.n	1580a <__aeabi_fadd+0x76>
   15a66:	24ff      	movs	r4, #255	; 0xff
   15a68:	2f00      	cmp	r7, #0
   15a6a:	d100      	bne.n	15a6e <__aeabi_fadd+0x2da>
   15a6c:	e6cd      	b.n	1580a <__aeabi_fadd+0x76>
   15a6e:	2280      	movs	r2, #128	; 0x80
   15a70:	4640      	mov	r0, r8
   15a72:	03d2      	lsls	r2, r2, #15
   15a74:	4210      	tst	r0, r2
   15a76:	d0af      	beq.n	159d8 <__aeabi_fadd+0x244>
   15a78:	4216      	tst	r6, r2
   15a7a:	d1ad      	bne.n	159d8 <__aeabi_fadd+0x244>
   15a7c:	003b      	movs	r3, r7
   15a7e:	000d      	movs	r5, r1
   15a80:	24ff      	movs	r4, #255	; 0xff
   15a82:	e6c2      	b.n	1580a <__aeabi_fadd+0x76>
   15a84:	4663      	mov	r3, ip
   15a86:	24ff      	movs	r4, #255	; 0xff
   15a88:	e6bf      	b.n	1580a <__aeabi_fadd+0x76>
   15a8a:	2301      	movs	r3, #1
   15a8c:	e77a      	b.n	15984 <__aeabi_fadd+0x1f0>
   15a8e:	003b      	movs	r3, r7
   15a90:	0004      	movs	r4, r0
   15a92:	e6ba      	b.n	1580a <__aeabi_fadd+0x76>
   15a94:	2680      	movs	r6, #128	; 0x80
   15a96:	2200      	movs	r2, #0
   15a98:	03f6      	lsls	r6, r6, #15
   15a9a:	e6f0      	b.n	1587e <__aeabi_fadd+0xea>
   15a9c:	003b      	movs	r3, r7
   15a9e:	e6b4      	b.n	1580a <__aeabi_fadd+0x76>
   15aa0:	1e33      	subs	r3, r6, #0
   15aa2:	d000      	beq.n	15aa6 <__aeabi_fadd+0x312>
   15aa4:	e6e2      	b.n	1586c <__aeabi_fadd+0xd8>
   15aa6:	2200      	movs	r2, #0
   15aa8:	e721      	b.n	158ee <__aeabi_fadd+0x15a>
   15aaa:	2301      	movs	r3, #1
   15aac:	e7bd      	b.n	15a2a <__aeabi_fadd+0x296>
   15aae:	46c0      	nop			; (mov r8, r8)
   15ab0:	7dffffff 	.word	0x7dffffff
   15ab4:	fbffffff 	.word	0xfbffffff

00015ab8 <__aeabi_fdiv>:
   15ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
   15aba:	4657      	mov	r7, sl
   15abc:	464e      	mov	r6, r9
   15abe:	46de      	mov	lr, fp
   15ac0:	4645      	mov	r5, r8
   15ac2:	b5e0      	push	{r5, r6, r7, lr}
   15ac4:	0244      	lsls	r4, r0, #9
   15ac6:	0043      	lsls	r3, r0, #1
   15ac8:	0fc6      	lsrs	r6, r0, #31
   15aca:	b083      	sub	sp, #12
   15acc:	1c0f      	adds	r7, r1, #0
   15ace:	0a64      	lsrs	r4, r4, #9
   15ad0:	0e1b      	lsrs	r3, r3, #24
   15ad2:	46b2      	mov	sl, r6
   15ad4:	d053      	beq.n	15b7e <__aeabi_fdiv+0xc6>
   15ad6:	2bff      	cmp	r3, #255	; 0xff
   15ad8:	d027      	beq.n	15b2a <__aeabi_fdiv+0x72>
   15ada:	2280      	movs	r2, #128	; 0x80
   15adc:	00e4      	lsls	r4, r4, #3
   15ade:	04d2      	lsls	r2, r2, #19
   15ae0:	4314      	orrs	r4, r2
   15ae2:	227f      	movs	r2, #127	; 0x7f
   15ae4:	4252      	negs	r2, r2
   15ae6:	4690      	mov	r8, r2
   15ae8:	4498      	add	r8, r3
   15aea:	2300      	movs	r3, #0
   15aec:	4699      	mov	r9, r3
   15aee:	469b      	mov	fp, r3
   15af0:	027d      	lsls	r5, r7, #9
   15af2:	0078      	lsls	r0, r7, #1
   15af4:	0ffb      	lsrs	r3, r7, #31
   15af6:	0a6d      	lsrs	r5, r5, #9
   15af8:	0e00      	lsrs	r0, r0, #24
   15afa:	9300      	str	r3, [sp, #0]
   15afc:	d024      	beq.n	15b48 <__aeabi_fdiv+0x90>
   15afe:	28ff      	cmp	r0, #255	; 0xff
   15b00:	d046      	beq.n	15b90 <__aeabi_fdiv+0xd8>
   15b02:	2380      	movs	r3, #128	; 0x80
   15b04:	2100      	movs	r1, #0
   15b06:	00ed      	lsls	r5, r5, #3
   15b08:	04db      	lsls	r3, r3, #19
   15b0a:	431d      	orrs	r5, r3
   15b0c:	387f      	subs	r0, #127	; 0x7f
   15b0e:	4647      	mov	r7, r8
   15b10:	1a38      	subs	r0, r7, r0
   15b12:	464f      	mov	r7, r9
   15b14:	430f      	orrs	r7, r1
   15b16:	00bf      	lsls	r7, r7, #2
   15b18:	46b9      	mov	r9, r7
   15b1a:	0033      	movs	r3, r6
   15b1c:	9a00      	ldr	r2, [sp, #0]
   15b1e:	4f87      	ldr	r7, [pc, #540]	; (15d3c <__aeabi_fdiv+0x284>)
   15b20:	4053      	eors	r3, r2
   15b22:	464a      	mov	r2, r9
   15b24:	58ba      	ldr	r2, [r7, r2]
   15b26:	9301      	str	r3, [sp, #4]
   15b28:	4697      	mov	pc, r2
   15b2a:	2c00      	cmp	r4, #0
   15b2c:	d14e      	bne.n	15bcc <__aeabi_fdiv+0x114>
   15b2e:	2308      	movs	r3, #8
   15b30:	4699      	mov	r9, r3
   15b32:	33f7      	adds	r3, #247	; 0xf7
   15b34:	4698      	mov	r8, r3
   15b36:	3bfd      	subs	r3, #253	; 0xfd
   15b38:	469b      	mov	fp, r3
   15b3a:	027d      	lsls	r5, r7, #9
   15b3c:	0078      	lsls	r0, r7, #1
   15b3e:	0ffb      	lsrs	r3, r7, #31
   15b40:	0a6d      	lsrs	r5, r5, #9
   15b42:	0e00      	lsrs	r0, r0, #24
   15b44:	9300      	str	r3, [sp, #0]
   15b46:	d1da      	bne.n	15afe <__aeabi_fdiv+0x46>
   15b48:	2d00      	cmp	r5, #0
   15b4a:	d126      	bne.n	15b9a <__aeabi_fdiv+0xe2>
   15b4c:	2000      	movs	r0, #0
   15b4e:	2101      	movs	r1, #1
   15b50:	0033      	movs	r3, r6
   15b52:	9a00      	ldr	r2, [sp, #0]
   15b54:	4f7a      	ldr	r7, [pc, #488]	; (15d40 <__aeabi_fdiv+0x288>)
   15b56:	4053      	eors	r3, r2
   15b58:	4642      	mov	r2, r8
   15b5a:	1a10      	subs	r0, r2, r0
   15b5c:	464a      	mov	r2, r9
   15b5e:	430a      	orrs	r2, r1
   15b60:	0092      	lsls	r2, r2, #2
   15b62:	58ba      	ldr	r2, [r7, r2]
   15b64:	001d      	movs	r5, r3
   15b66:	4697      	mov	pc, r2
   15b68:	9b00      	ldr	r3, [sp, #0]
   15b6a:	002c      	movs	r4, r5
   15b6c:	469a      	mov	sl, r3
   15b6e:	468b      	mov	fp, r1
   15b70:	465b      	mov	r3, fp
   15b72:	2b02      	cmp	r3, #2
   15b74:	d131      	bne.n	15bda <__aeabi_fdiv+0x122>
   15b76:	4653      	mov	r3, sl
   15b78:	21ff      	movs	r1, #255	; 0xff
   15b7a:	2400      	movs	r4, #0
   15b7c:	e038      	b.n	15bf0 <__aeabi_fdiv+0x138>
   15b7e:	2c00      	cmp	r4, #0
   15b80:	d117      	bne.n	15bb2 <__aeabi_fdiv+0xfa>
   15b82:	2304      	movs	r3, #4
   15b84:	4699      	mov	r9, r3
   15b86:	2300      	movs	r3, #0
   15b88:	4698      	mov	r8, r3
   15b8a:	3301      	adds	r3, #1
   15b8c:	469b      	mov	fp, r3
   15b8e:	e7af      	b.n	15af0 <__aeabi_fdiv+0x38>
   15b90:	20ff      	movs	r0, #255	; 0xff
   15b92:	2d00      	cmp	r5, #0
   15b94:	d10b      	bne.n	15bae <__aeabi_fdiv+0xf6>
   15b96:	2102      	movs	r1, #2
   15b98:	e7da      	b.n	15b50 <__aeabi_fdiv+0x98>
   15b9a:	0028      	movs	r0, r5
   15b9c:	f002 fb52 	bl	18244 <__clzsi2>
   15ba0:	1f43      	subs	r3, r0, #5
   15ba2:	409d      	lsls	r5, r3
   15ba4:	2376      	movs	r3, #118	; 0x76
   15ba6:	425b      	negs	r3, r3
   15ba8:	1a18      	subs	r0, r3, r0
   15baa:	2100      	movs	r1, #0
   15bac:	e7af      	b.n	15b0e <__aeabi_fdiv+0x56>
   15bae:	2103      	movs	r1, #3
   15bb0:	e7ad      	b.n	15b0e <__aeabi_fdiv+0x56>
   15bb2:	0020      	movs	r0, r4
   15bb4:	f002 fb46 	bl	18244 <__clzsi2>
   15bb8:	1f43      	subs	r3, r0, #5
   15bba:	409c      	lsls	r4, r3
   15bbc:	2376      	movs	r3, #118	; 0x76
   15bbe:	425b      	negs	r3, r3
   15bc0:	1a1b      	subs	r3, r3, r0
   15bc2:	4698      	mov	r8, r3
   15bc4:	2300      	movs	r3, #0
   15bc6:	4699      	mov	r9, r3
   15bc8:	469b      	mov	fp, r3
   15bca:	e791      	b.n	15af0 <__aeabi_fdiv+0x38>
   15bcc:	230c      	movs	r3, #12
   15bce:	4699      	mov	r9, r3
   15bd0:	33f3      	adds	r3, #243	; 0xf3
   15bd2:	4698      	mov	r8, r3
   15bd4:	3bfc      	subs	r3, #252	; 0xfc
   15bd6:	469b      	mov	fp, r3
   15bd8:	e78a      	b.n	15af0 <__aeabi_fdiv+0x38>
   15bda:	2b03      	cmp	r3, #3
   15bdc:	d100      	bne.n	15be0 <__aeabi_fdiv+0x128>
   15bde:	e0a5      	b.n	15d2c <__aeabi_fdiv+0x274>
   15be0:	4655      	mov	r5, sl
   15be2:	2b01      	cmp	r3, #1
   15be4:	d000      	beq.n	15be8 <__aeabi_fdiv+0x130>
   15be6:	e081      	b.n	15cec <__aeabi_fdiv+0x234>
   15be8:	2301      	movs	r3, #1
   15bea:	2100      	movs	r1, #0
   15bec:	2400      	movs	r4, #0
   15bee:	402b      	ands	r3, r5
   15bf0:	0264      	lsls	r4, r4, #9
   15bf2:	05c9      	lsls	r1, r1, #23
   15bf4:	0a60      	lsrs	r0, r4, #9
   15bf6:	07db      	lsls	r3, r3, #31
   15bf8:	4308      	orrs	r0, r1
   15bfa:	4318      	orrs	r0, r3
   15bfc:	b003      	add	sp, #12
   15bfe:	bc3c      	pop	{r2, r3, r4, r5}
   15c00:	4690      	mov	r8, r2
   15c02:	4699      	mov	r9, r3
   15c04:	46a2      	mov	sl, r4
   15c06:	46ab      	mov	fp, r5
   15c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15c0a:	2480      	movs	r4, #128	; 0x80
   15c0c:	2300      	movs	r3, #0
   15c0e:	03e4      	lsls	r4, r4, #15
   15c10:	21ff      	movs	r1, #255	; 0xff
   15c12:	e7ed      	b.n	15bf0 <__aeabi_fdiv+0x138>
   15c14:	21ff      	movs	r1, #255	; 0xff
   15c16:	2400      	movs	r4, #0
   15c18:	e7ea      	b.n	15bf0 <__aeabi_fdiv+0x138>
   15c1a:	2301      	movs	r3, #1
   15c1c:	1a59      	subs	r1, r3, r1
   15c1e:	291b      	cmp	r1, #27
   15c20:	dd66      	ble.n	15cf0 <__aeabi_fdiv+0x238>
   15c22:	9a01      	ldr	r2, [sp, #4]
   15c24:	4013      	ands	r3, r2
   15c26:	2100      	movs	r1, #0
   15c28:	2400      	movs	r4, #0
   15c2a:	e7e1      	b.n	15bf0 <__aeabi_fdiv+0x138>
   15c2c:	2380      	movs	r3, #128	; 0x80
   15c2e:	03db      	lsls	r3, r3, #15
   15c30:	421c      	tst	r4, r3
   15c32:	d038      	beq.n	15ca6 <__aeabi_fdiv+0x1ee>
   15c34:	421d      	tst	r5, r3
   15c36:	d051      	beq.n	15cdc <__aeabi_fdiv+0x224>
   15c38:	431c      	orrs	r4, r3
   15c3a:	0264      	lsls	r4, r4, #9
   15c3c:	0a64      	lsrs	r4, r4, #9
   15c3e:	0033      	movs	r3, r6
   15c40:	21ff      	movs	r1, #255	; 0xff
   15c42:	e7d5      	b.n	15bf0 <__aeabi_fdiv+0x138>
   15c44:	0163      	lsls	r3, r4, #5
   15c46:	016c      	lsls	r4, r5, #5
   15c48:	42a3      	cmp	r3, r4
   15c4a:	d23b      	bcs.n	15cc4 <__aeabi_fdiv+0x20c>
   15c4c:	261b      	movs	r6, #27
   15c4e:	2100      	movs	r1, #0
   15c50:	3801      	subs	r0, #1
   15c52:	2501      	movs	r5, #1
   15c54:	001f      	movs	r7, r3
   15c56:	0049      	lsls	r1, r1, #1
   15c58:	005b      	lsls	r3, r3, #1
   15c5a:	2f00      	cmp	r7, #0
   15c5c:	db01      	blt.n	15c62 <__aeabi_fdiv+0x1aa>
   15c5e:	429c      	cmp	r4, r3
   15c60:	d801      	bhi.n	15c66 <__aeabi_fdiv+0x1ae>
   15c62:	1b1b      	subs	r3, r3, r4
   15c64:	4329      	orrs	r1, r5
   15c66:	3e01      	subs	r6, #1
   15c68:	2e00      	cmp	r6, #0
   15c6a:	d1f3      	bne.n	15c54 <__aeabi_fdiv+0x19c>
   15c6c:	001c      	movs	r4, r3
   15c6e:	1e63      	subs	r3, r4, #1
   15c70:	419c      	sbcs	r4, r3
   15c72:	430c      	orrs	r4, r1
   15c74:	0001      	movs	r1, r0
   15c76:	317f      	adds	r1, #127	; 0x7f
   15c78:	2900      	cmp	r1, #0
   15c7a:	ddce      	ble.n	15c1a <__aeabi_fdiv+0x162>
   15c7c:	0763      	lsls	r3, r4, #29
   15c7e:	d004      	beq.n	15c8a <__aeabi_fdiv+0x1d2>
   15c80:	230f      	movs	r3, #15
   15c82:	4023      	ands	r3, r4
   15c84:	2b04      	cmp	r3, #4
   15c86:	d000      	beq.n	15c8a <__aeabi_fdiv+0x1d2>
   15c88:	3404      	adds	r4, #4
   15c8a:	0123      	lsls	r3, r4, #4
   15c8c:	d503      	bpl.n	15c96 <__aeabi_fdiv+0x1de>
   15c8e:	0001      	movs	r1, r0
   15c90:	4b2c      	ldr	r3, [pc, #176]	; (15d44 <__aeabi_fdiv+0x28c>)
   15c92:	3180      	adds	r1, #128	; 0x80
   15c94:	401c      	ands	r4, r3
   15c96:	29fe      	cmp	r1, #254	; 0xfe
   15c98:	dd0d      	ble.n	15cb6 <__aeabi_fdiv+0x1fe>
   15c9a:	2301      	movs	r3, #1
   15c9c:	9a01      	ldr	r2, [sp, #4]
   15c9e:	21ff      	movs	r1, #255	; 0xff
   15ca0:	4013      	ands	r3, r2
   15ca2:	2400      	movs	r4, #0
   15ca4:	e7a4      	b.n	15bf0 <__aeabi_fdiv+0x138>
   15ca6:	2380      	movs	r3, #128	; 0x80
   15ca8:	03db      	lsls	r3, r3, #15
   15caa:	431c      	orrs	r4, r3
   15cac:	0264      	lsls	r4, r4, #9
   15cae:	0a64      	lsrs	r4, r4, #9
   15cb0:	0033      	movs	r3, r6
   15cb2:	21ff      	movs	r1, #255	; 0xff
   15cb4:	e79c      	b.n	15bf0 <__aeabi_fdiv+0x138>
   15cb6:	2301      	movs	r3, #1
   15cb8:	9a01      	ldr	r2, [sp, #4]
   15cba:	01a4      	lsls	r4, r4, #6
   15cbc:	0a64      	lsrs	r4, r4, #9
   15cbe:	b2c9      	uxtb	r1, r1
   15cc0:	4013      	ands	r3, r2
   15cc2:	e795      	b.n	15bf0 <__aeabi_fdiv+0x138>
   15cc4:	1b1b      	subs	r3, r3, r4
   15cc6:	261a      	movs	r6, #26
   15cc8:	2101      	movs	r1, #1
   15cca:	e7c2      	b.n	15c52 <__aeabi_fdiv+0x19a>
   15ccc:	9b00      	ldr	r3, [sp, #0]
   15cce:	468b      	mov	fp, r1
   15cd0:	469a      	mov	sl, r3
   15cd2:	2400      	movs	r4, #0
   15cd4:	e74c      	b.n	15b70 <__aeabi_fdiv+0xb8>
   15cd6:	0263      	lsls	r3, r4, #9
   15cd8:	d5e5      	bpl.n	15ca6 <__aeabi_fdiv+0x1ee>
   15cda:	2500      	movs	r5, #0
   15cdc:	2480      	movs	r4, #128	; 0x80
   15cde:	03e4      	lsls	r4, r4, #15
   15ce0:	432c      	orrs	r4, r5
   15ce2:	0264      	lsls	r4, r4, #9
   15ce4:	0a64      	lsrs	r4, r4, #9
   15ce6:	9b00      	ldr	r3, [sp, #0]
   15ce8:	21ff      	movs	r1, #255	; 0xff
   15cea:	e781      	b.n	15bf0 <__aeabi_fdiv+0x138>
   15cec:	9501      	str	r5, [sp, #4]
   15cee:	e7c1      	b.n	15c74 <__aeabi_fdiv+0x1bc>
   15cf0:	0023      	movs	r3, r4
   15cf2:	2020      	movs	r0, #32
   15cf4:	40cb      	lsrs	r3, r1
   15cf6:	1a41      	subs	r1, r0, r1
   15cf8:	408c      	lsls	r4, r1
   15cfa:	1e61      	subs	r1, r4, #1
   15cfc:	418c      	sbcs	r4, r1
   15cfe:	431c      	orrs	r4, r3
   15d00:	0763      	lsls	r3, r4, #29
   15d02:	d004      	beq.n	15d0e <__aeabi_fdiv+0x256>
   15d04:	230f      	movs	r3, #15
   15d06:	4023      	ands	r3, r4
   15d08:	2b04      	cmp	r3, #4
   15d0a:	d000      	beq.n	15d0e <__aeabi_fdiv+0x256>
   15d0c:	3404      	adds	r4, #4
   15d0e:	0163      	lsls	r3, r4, #5
   15d10:	d505      	bpl.n	15d1e <__aeabi_fdiv+0x266>
   15d12:	2301      	movs	r3, #1
   15d14:	9a01      	ldr	r2, [sp, #4]
   15d16:	2101      	movs	r1, #1
   15d18:	4013      	ands	r3, r2
   15d1a:	2400      	movs	r4, #0
   15d1c:	e768      	b.n	15bf0 <__aeabi_fdiv+0x138>
   15d1e:	2301      	movs	r3, #1
   15d20:	9a01      	ldr	r2, [sp, #4]
   15d22:	01a4      	lsls	r4, r4, #6
   15d24:	0a64      	lsrs	r4, r4, #9
   15d26:	4013      	ands	r3, r2
   15d28:	2100      	movs	r1, #0
   15d2a:	e761      	b.n	15bf0 <__aeabi_fdiv+0x138>
   15d2c:	2380      	movs	r3, #128	; 0x80
   15d2e:	03db      	lsls	r3, r3, #15
   15d30:	431c      	orrs	r4, r3
   15d32:	0264      	lsls	r4, r4, #9
   15d34:	0a64      	lsrs	r4, r4, #9
   15d36:	4653      	mov	r3, sl
   15d38:	21ff      	movs	r1, #255	; 0xff
   15d3a:	e759      	b.n	15bf0 <__aeabi_fdiv+0x138>
   15d3c:	0001b01c 	.word	0x0001b01c
   15d40:	0001b05c 	.word	0x0001b05c
   15d44:	f7ffffff 	.word	0xf7ffffff

00015d48 <__eqsf2>:
   15d48:	b570      	push	{r4, r5, r6, lr}
   15d4a:	0042      	lsls	r2, r0, #1
   15d4c:	0245      	lsls	r5, r0, #9
   15d4e:	024e      	lsls	r6, r1, #9
   15d50:	004c      	lsls	r4, r1, #1
   15d52:	0fc3      	lsrs	r3, r0, #31
   15d54:	0a6d      	lsrs	r5, r5, #9
   15d56:	0e12      	lsrs	r2, r2, #24
   15d58:	0a76      	lsrs	r6, r6, #9
   15d5a:	0e24      	lsrs	r4, r4, #24
   15d5c:	0fc9      	lsrs	r1, r1, #31
   15d5e:	2001      	movs	r0, #1
   15d60:	2aff      	cmp	r2, #255	; 0xff
   15d62:	d006      	beq.n	15d72 <__eqsf2+0x2a>
   15d64:	2cff      	cmp	r4, #255	; 0xff
   15d66:	d003      	beq.n	15d70 <__eqsf2+0x28>
   15d68:	42a2      	cmp	r2, r4
   15d6a:	d101      	bne.n	15d70 <__eqsf2+0x28>
   15d6c:	42b5      	cmp	r5, r6
   15d6e:	d006      	beq.n	15d7e <__eqsf2+0x36>
   15d70:	bd70      	pop	{r4, r5, r6, pc}
   15d72:	2d00      	cmp	r5, #0
   15d74:	d1fc      	bne.n	15d70 <__eqsf2+0x28>
   15d76:	2cff      	cmp	r4, #255	; 0xff
   15d78:	d1fa      	bne.n	15d70 <__eqsf2+0x28>
   15d7a:	2e00      	cmp	r6, #0
   15d7c:	d1f8      	bne.n	15d70 <__eqsf2+0x28>
   15d7e:	428b      	cmp	r3, r1
   15d80:	d006      	beq.n	15d90 <__eqsf2+0x48>
   15d82:	2001      	movs	r0, #1
   15d84:	2a00      	cmp	r2, #0
   15d86:	d1f3      	bne.n	15d70 <__eqsf2+0x28>
   15d88:	0028      	movs	r0, r5
   15d8a:	1e45      	subs	r5, r0, #1
   15d8c:	41a8      	sbcs	r0, r5
   15d8e:	e7ef      	b.n	15d70 <__eqsf2+0x28>
   15d90:	2000      	movs	r0, #0
   15d92:	e7ed      	b.n	15d70 <__eqsf2+0x28>

00015d94 <__gesf2>:
   15d94:	b5f0      	push	{r4, r5, r6, r7, lr}
   15d96:	0042      	lsls	r2, r0, #1
   15d98:	0245      	lsls	r5, r0, #9
   15d9a:	024c      	lsls	r4, r1, #9
   15d9c:	0fc3      	lsrs	r3, r0, #31
   15d9e:	0048      	lsls	r0, r1, #1
   15da0:	0a6d      	lsrs	r5, r5, #9
   15da2:	0e12      	lsrs	r2, r2, #24
   15da4:	0a64      	lsrs	r4, r4, #9
   15da6:	0e00      	lsrs	r0, r0, #24
   15da8:	0fc9      	lsrs	r1, r1, #31
   15daa:	2aff      	cmp	r2, #255	; 0xff
   15dac:	d01e      	beq.n	15dec <__gesf2+0x58>
   15dae:	28ff      	cmp	r0, #255	; 0xff
   15db0:	d021      	beq.n	15df6 <__gesf2+0x62>
   15db2:	2a00      	cmp	r2, #0
   15db4:	d10a      	bne.n	15dcc <__gesf2+0x38>
   15db6:	426e      	negs	r6, r5
   15db8:	416e      	adcs	r6, r5
   15dba:	b2f6      	uxtb	r6, r6
   15dbc:	2800      	cmp	r0, #0
   15dbe:	d10f      	bne.n	15de0 <__gesf2+0x4c>
   15dc0:	2c00      	cmp	r4, #0
   15dc2:	d10d      	bne.n	15de0 <__gesf2+0x4c>
   15dc4:	2000      	movs	r0, #0
   15dc6:	2d00      	cmp	r5, #0
   15dc8:	d009      	beq.n	15dde <__gesf2+0x4a>
   15dca:	e005      	b.n	15dd8 <__gesf2+0x44>
   15dcc:	2800      	cmp	r0, #0
   15dce:	d101      	bne.n	15dd4 <__gesf2+0x40>
   15dd0:	2c00      	cmp	r4, #0
   15dd2:	d001      	beq.n	15dd8 <__gesf2+0x44>
   15dd4:	428b      	cmp	r3, r1
   15dd6:	d011      	beq.n	15dfc <__gesf2+0x68>
   15dd8:	2101      	movs	r1, #1
   15dda:	4258      	negs	r0, r3
   15ddc:	4308      	orrs	r0, r1
   15dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15de0:	2e00      	cmp	r6, #0
   15de2:	d0f7      	beq.n	15dd4 <__gesf2+0x40>
   15de4:	2001      	movs	r0, #1
   15de6:	3901      	subs	r1, #1
   15de8:	4308      	orrs	r0, r1
   15dea:	e7f8      	b.n	15dde <__gesf2+0x4a>
   15dec:	2d00      	cmp	r5, #0
   15dee:	d0de      	beq.n	15dae <__gesf2+0x1a>
   15df0:	2002      	movs	r0, #2
   15df2:	4240      	negs	r0, r0
   15df4:	e7f3      	b.n	15dde <__gesf2+0x4a>
   15df6:	2c00      	cmp	r4, #0
   15df8:	d0db      	beq.n	15db2 <__gesf2+0x1e>
   15dfa:	e7f9      	b.n	15df0 <__gesf2+0x5c>
   15dfc:	4282      	cmp	r2, r0
   15dfe:	dceb      	bgt.n	15dd8 <__gesf2+0x44>
   15e00:	db04      	blt.n	15e0c <__gesf2+0x78>
   15e02:	42a5      	cmp	r5, r4
   15e04:	d8e8      	bhi.n	15dd8 <__gesf2+0x44>
   15e06:	2000      	movs	r0, #0
   15e08:	42a5      	cmp	r5, r4
   15e0a:	d2e8      	bcs.n	15dde <__gesf2+0x4a>
   15e0c:	2101      	movs	r1, #1
   15e0e:	1e58      	subs	r0, r3, #1
   15e10:	4308      	orrs	r0, r1
   15e12:	e7e4      	b.n	15dde <__gesf2+0x4a>

00015e14 <__lesf2>:
   15e14:	b5f0      	push	{r4, r5, r6, r7, lr}
   15e16:	0042      	lsls	r2, r0, #1
   15e18:	024d      	lsls	r5, r1, #9
   15e1a:	004c      	lsls	r4, r1, #1
   15e1c:	0246      	lsls	r6, r0, #9
   15e1e:	0a76      	lsrs	r6, r6, #9
   15e20:	0e12      	lsrs	r2, r2, #24
   15e22:	0fc3      	lsrs	r3, r0, #31
   15e24:	0a6d      	lsrs	r5, r5, #9
   15e26:	0e24      	lsrs	r4, r4, #24
   15e28:	0fc9      	lsrs	r1, r1, #31
   15e2a:	2aff      	cmp	r2, #255	; 0xff
   15e2c:	d016      	beq.n	15e5c <__lesf2+0x48>
   15e2e:	2cff      	cmp	r4, #255	; 0xff
   15e30:	d018      	beq.n	15e64 <__lesf2+0x50>
   15e32:	2a00      	cmp	r2, #0
   15e34:	d10a      	bne.n	15e4c <__lesf2+0x38>
   15e36:	4270      	negs	r0, r6
   15e38:	4170      	adcs	r0, r6
   15e3a:	b2c0      	uxtb	r0, r0
   15e3c:	2c00      	cmp	r4, #0
   15e3e:	d015      	beq.n	15e6c <__lesf2+0x58>
   15e40:	2800      	cmp	r0, #0
   15e42:	d005      	beq.n	15e50 <__lesf2+0x3c>
   15e44:	2001      	movs	r0, #1
   15e46:	3901      	subs	r1, #1
   15e48:	4308      	orrs	r0, r1
   15e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15e4c:	2c00      	cmp	r4, #0
   15e4e:	d013      	beq.n	15e78 <__lesf2+0x64>
   15e50:	4299      	cmp	r1, r3
   15e52:	d014      	beq.n	15e7e <__lesf2+0x6a>
   15e54:	2001      	movs	r0, #1
   15e56:	425b      	negs	r3, r3
   15e58:	4318      	orrs	r0, r3
   15e5a:	e7f6      	b.n	15e4a <__lesf2+0x36>
   15e5c:	2002      	movs	r0, #2
   15e5e:	2e00      	cmp	r6, #0
   15e60:	d1f3      	bne.n	15e4a <__lesf2+0x36>
   15e62:	e7e4      	b.n	15e2e <__lesf2+0x1a>
   15e64:	2002      	movs	r0, #2
   15e66:	2d00      	cmp	r5, #0
   15e68:	d1ef      	bne.n	15e4a <__lesf2+0x36>
   15e6a:	e7e2      	b.n	15e32 <__lesf2+0x1e>
   15e6c:	2d00      	cmp	r5, #0
   15e6e:	d1e7      	bne.n	15e40 <__lesf2+0x2c>
   15e70:	2000      	movs	r0, #0
   15e72:	2e00      	cmp	r6, #0
   15e74:	d0e9      	beq.n	15e4a <__lesf2+0x36>
   15e76:	e7ed      	b.n	15e54 <__lesf2+0x40>
   15e78:	2d00      	cmp	r5, #0
   15e7a:	d1e9      	bne.n	15e50 <__lesf2+0x3c>
   15e7c:	e7ea      	b.n	15e54 <__lesf2+0x40>
   15e7e:	42a2      	cmp	r2, r4
   15e80:	dc06      	bgt.n	15e90 <__lesf2+0x7c>
   15e82:	dbdf      	blt.n	15e44 <__lesf2+0x30>
   15e84:	42ae      	cmp	r6, r5
   15e86:	d803      	bhi.n	15e90 <__lesf2+0x7c>
   15e88:	2000      	movs	r0, #0
   15e8a:	42ae      	cmp	r6, r5
   15e8c:	d3da      	bcc.n	15e44 <__lesf2+0x30>
   15e8e:	e7dc      	b.n	15e4a <__lesf2+0x36>
   15e90:	2001      	movs	r0, #1
   15e92:	4249      	negs	r1, r1
   15e94:	4308      	orrs	r0, r1
   15e96:	e7d8      	b.n	15e4a <__lesf2+0x36>

00015e98 <__aeabi_fmul>:
   15e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15e9a:	4657      	mov	r7, sl
   15e9c:	464e      	mov	r6, r9
   15e9e:	4645      	mov	r5, r8
   15ea0:	46de      	mov	lr, fp
   15ea2:	b5e0      	push	{r5, r6, r7, lr}
   15ea4:	0247      	lsls	r7, r0, #9
   15ea6:	0046      	lsls	r6, r0, #1
   15ea8:	4688      	mov	r8, r1
   15eaa:	0a7f      	lsrs	r7, r7, #9
   15eac:	0e36      	lsrs	r6, r6, #24
   15eae:	0fc4      	lsrs	r4, r0, #31
   15eb0:	2e00      	cmp	r6, #0
   15eb2:	d047      	beq.n	15f44 <__aeabi_fmul+0xac>
   15eb4:	2eff      	cmp	r6, #255	; 0xff
   15eb6:	d024      	beq.n	15f02 <__aeabi_fmul+0x6a>
   15eb8:	00fb      	lsls	r3, r7, #3
   15eba:	2780      	movs	r7, #128	; 0x80
   15ebc:	04ff      	lsls	r7, r7, #19
   15ebe:	431f      	orrs	r7, r3
   15ec0:	2300      	movs	r3, #0
   15ec2:	4699      	mov	r9, r3
   15ec4:	469a      	mov	sl, r3
   15ec6:	3e7f      	subs	r6, #127	; 0x7f
   15ec8:	4643      	mov	r3, r8
   15eca:	025d      	lsls	r5, r3, #9
   15ecc:	0058      	lsls	r0, r3, #1
   15ece:	0fdb      	lsrs	r3, r3, #31
   15ed0:	0a6d      	lsrs	r5, r5, #9
   15ed2:	0e00      	lsrs	r0, r0, #24
   15ed4:	4698      	mov	r8, r3
   15ed6:	d043      	beq.n	15f60 <__aeabi_fmul+0xc8>
   15ed8:	28ff      	cmp	r0, #255	; 0xff
   15eda:	d03b      	beq.n	15f54 <__aeabi_fmul+0xbc>
   15edc:	00eb      	lsls	r3, r5, #3
   15ede:	2580      	movs	r5, #128	; 0x80
   15ee0:	2200      	movs	r2, #0
   15ee2:	04ed      	lsls	r5, r5, #19
   15ee4:	431d      	orrs	r5, r3
   15ee6:	387f      	subs	r0, #127	; 0x7f
   15ee8:	1836      	adds	r6, r6, r0
   15eea:	1c73      	adds	r3, r6, #1
   15eec:	4641      	mov	r1, r8
   15eee:	469b      	mov	fp, r3
   15ef0:	464b      	mov	r3, r9
   15ef2:	4061      	eors	r1, r4
   15ef4:	4313      	orrs	r3, r2
   15ef6:	2b0f      	cmp	r3, #15
   15ef8:	d864      	bhi.n	15fc4 <__aeabi_fmul+0x12c>
   15efa:	4875      	ldr	r0, [pc, #468]	; (160d0 <__aeabi_fmul+0x238>)
   15efc:	009b      	lsls	r3, r3, #2
   15efe:	58c3      	ldr	r3, [r0, r3]
   15f00:	469f      	mov	pc, r3
   15f02:	2f00      	cmp	r7, #0
   15f04:	d142      	bne.n	15f8c <__aeabi_fmul+0xf4>
   15f06:	2308      	movs	r3, #8
   15f08:	4699      	mov	r9, r3
   15f0a:	3b06      	subs	r3, #6
   15f0c:	26ff      	movs	r6, #255	; 0xff
   15f0e:	469a      	mov	sl, r3
   15f10:	e7da      	b.n	15ec8 <__aeabi_fmul+0x30>
   15f12:	4641      	mov	r1, r8
   15f14:	2a02      	cmp	r2, #2
   15f16:	d028      	beq.n	15f6a <__aeabi_fmul+0xd2>
   15f18:	2a03      	cmp	r2, #3
   15f1a:	d100      	bne.n	15f1e <__aeabi_fmul+0x86>
   15f1c:	e0ce      	b.n	160bc <__aeabi_fmul+0x224>
   15f1e:	2a01      	cmp	r2, #1
   15f20:	d000      	beq.n	15f24 <__aeabi_fmul+0x8c>
   15f22:	e0ac      	b.n	1607e <__aeabi_fmul+0x1e6>
   15f24:	4011      	ands	r1, r2
   15f26:	2000      	movs	r0, #0
   15f28:	2200      	movs	r2, #0
   15f2a:	b2cc      	uxtb	r4, r1
   15f2c:	0240      	lsls	r0, r0, #9
   15f2e:	05d2      	lsls	r2, r2, #23
   15f30:	0a40      	lsrs	r0, r0, #9
   15f32:	07e4      	lsls	r4, r4, #31
   15f34:	4310      	orrs	r0, r2
   15f36:	4320      	orrs	r0, r4
   15f38:	bc3c      	pop	{r2, r3, r4, r5}
   15f3a:	4690      	mov	r8, r2
   15f3c:	4699      	mov	r9, r3
   15f3e:	46a2      	mov	sl, r4
   15f40:	46ab      	mov	fp, r5
   15f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15f44:	2f00      	cmp	r7, #0
   15f46:	d115      	bne.n	15f74 <__aeabi_fmul+0xdc>
   15f48:	2304      	movs	r3, #4
   15f4a:	4699      	mov	r9, r3
   15f4c:	3b03      	subs	r3, #3
   15f4e:	2600      	movs	r6, #0
   15f50:	469a      	mov	sl, r3
   15f52:	e7b9      	b.n	15ec8 <__aeabi_fmul+0x30>
   15f54:	20ff      	movs	r0, #255	; 0xff
   15f56:	2202      	movs	r2, #2
   15f58:	2d00      	cmp	r5, #0
   15f5a:	d0c5      	beq.n	15ee8 <__aeabi_fmul+0x50>
   15f5c:	2203      	movs	r2, #3
   15f5e:	e7c3      	b.n	15ee8 <__aeabi_fmul+0x50>
   15f60:	2d00      	cmp	r5, #0
   15f62:	d119      	bne.n	15f98 <__aeabi_fmul+0x100>
   15f64:	2000      	movs	r0, #0
   15f66:	2201      	movs	r2, #1
   15f68:	e7be      	b.n	15ee8 <__aeabi_fmul+0x50>
   15f6a:	2401      	movs	r4, #1
   15f6c:	22ff      	movs	r2, #255	; 0xff
   15f6e:	400c      	ands	r4, r1
   15f70:	2000      	movs	r0, #0
   15f72:	e7db      	b.n	15f2c <__aeabi_fmul+0x94>
   15f74:	0038      	movs	r0, r7
   15f76:	f002 f965 	bl	18244 <__clzsi2>
   15f7a:	2676      	movs	r6, #118	; 0x76
   15f7c:	1f43      	subs	r3, r0, #5
   15f7e:	409f      	lsls	r7, r3
   15f80:	2300      	movs	r3, #0
   15f82:	4276      	negs	r6, r6
   15f84:	1a36      	subs	r6, r6, r0
   15f86:	4699      	mov	r9, r3
   15f88:	469a      	mov	sl, r3
   15f8a:	e79d      	b.n	15ec8 <__aeabi_fmul+0x30>
   15f8c:	230c      	movs	r3, #12
   15f8e:	4699      	mov	r9, r3
   15f90:	3b09      	subs	r3, #9
   15f92:	26ff      	movs	r6, #255	; 0xff
   15f94:	469a      	mov	sl, r3
   15f96:	e797      	b.n	15ec8 <__aeabi_fmul+0x30>
   15f98:	0028      	movs	r0, r5
   15f9a:	f002 f953 	bl	18244 <__clzsi2>
   15f9e:	1f43      	subs	r3, r0, #5
   15fa0:	409d      	lsls	r5, r3
   15fa2:	2376      	movs	r3, #118	; 0x76
   15fa4:	425b      	negs	r3, r3
   15fa6:	1a18      	subs	r0, r3, r0
   15fa8:	2200      	movs	r2, #0
   15faa:	e79d      	b.n	15ee8 <__aeabi_fmul+0x50>
   15fac:	2080      	movs	r0, #128	; 0x80
   15fae:	2400      	movs	r4, #0
   15fb0:	03c0      	lsls	r0, r0, #15
   15fb2:	22ff      	movs	r2, #255	; 0xff
   15fb4:	e7ba      	b.n	15f2c <__aeabi_fmul+0x94>
   15fb6:	003d      	movs	r5, r7
   15fb8:	4652      	mov	r2, sl
   15fba:	e7ab      	b.n	15f14 <__aeabi_fmul+0x7c>
   15fbc:	003d      	movs	r5, r7
   15fbe:	0021      	movs	r1, r4
   15fc0:	4652      	mov	r2, sl
   15fc2:	e7a7      	b.n	15f14 <__aeabi_fmul+0x7c>
   15fc4:	0c3b      	lsrs	r3, r7, #16
   15fc6:	469c      	mov	ip, r3
   15fc8:	042a      	lsls	r2, r5, #16
   15fca:	0c12      	lsrs	r2, r2, #16
   15fcc:	0c2b      	lsrs	r3, r5, #16
   15fce:	0014      	movs	r4, r2
   15fd0:	4660      	mov	r0, ip
   15fd2:	4665      	mov	r5, ip
   15fd4:	043f      	lsls	r7, r7, #16
   15fd6:	0c3f      	lsrs	r7, r7, #16
   15fd8:	437c      	muls	r4, r7
   15fda:	4342      	muls	r2, r0
   15fdc:	435d      	muls	r5, r3
   15fde:	437b      	muls	r3, r7
   15fe0:	0c27      	lsrs	r7, r4, #16
   15fe2:	189b      	adds	r3, r3, r2
   15fe4:	18ff      	adds	r7, r7, r3
   15fe6:	42ba      	cmp	r2, r7
   15fe8:	d903      	bls.n	15ff2 <__aeabi_fmul+0x15a>
   15fea:	2380      	movs	r3, #128	; 0x80
   15fec:	025b      	lsls	r3, r3, #9
   15fee:	469c      	mov	ip, r3
   15ff0:	4465      	add	r5, ip
   15ff2:	0424      	lsls	r4, r4, #16
   15ff4:	043a      	lsls	r2, r7, #16
   15ff6:	0c24      	lsrs	r4, r4, #16
   15ff8:	1912      	adds	r2, r2, r4
   15ffa:	0193      	lsls	r3, r2, #6
   15ffc:	1e5c      	subs	r4, r3, #1
   15ffe:	41a3      	sbcs	r3, r4
   16000:	0c3f      	lsrs	r7, r7, #16
   16002:	0e92      	lsrs	r2, r2, #26
   16004:	197d      	adds	r5, r7, r5
   16006:	431a      	orrs	r2, r3
   16008:	01ad      	lsls	r5, r5, #6
   1600a:	4315      	orrs	r5, r2
   1600c:	012b      	lsls	r3, r5, #4
   1600e:	d504      	bpl.n	1601a <__aeabi_fmul+0x182>
   16010:	2301      	movs	r3, #1
   16012:	465e      	mov	r6, fp
   16014:	086a      	lsrs	r2, r5, #1
   16016:	401d      	ands	r5, r3
   16018:	4315      	orrs	r5, r2
   1601a:	0032      	movs	r2, r6
   1601c:	327f      	adds	r2, #127	; 0x7f
   1601e:	2a00      	cmp	r2, #0
   16020:	dd25      	ble.n	1606e <__aeabi_fmul+0x1d6>
   16022:	076b      	lsls	r3, r5, #29
   16024:	d004      	beq.n	16030 <__aeabi_fmul+0x198>
   16026:	230f      	movs	r3, #15
   16028:	402b      	ands	r3, r5
   1602a:	2b04      	cmp	r3, #4
   1602c:	d000      	beq.n	16030 <__aeabi_fmul+0x198>
   1602e:	3504      	adds	r5, #4
   16030:	012b      	lsls	r3, r5, #4
   16032:	d503      	bpl.n	1603c <__aeabi_fmul+0x1a4>
   16034:	0032      	movs	r2, r6
   16036:	4b27      	ldr	r3, [pc, #156]	; (160d4 <__aeabi_fmul+0x23c>)
   16038:	3280      	adds	r2, #128	; 0x80
   1603a:	401d      	ands	r5, r3
   1603c:	2afe      	cmp	r2, #254	; 0xfe
   1603e:	dc94      	bgt.n	15f6a <__aeabi_fmul+0xd2>
   16040:	2401      	movs	r4, #1
   16042:	01a8      	lsls	r0, r5, #6
   16044:	0a40      	lsrs	r0, r0, #9
   16046:	b2d2      	uxtb	r2, r2
   16048:	400c      	ands	r4, r1
   1604a:	e76f      	b.n	15f2c <__aeabi_fmul+0x94>
   1604c:	2080      	movs	r0, #128	; 0x80
   1604e:	03c0      	lsls	r0, r0, #15
   16050:	4207      	tst	r7, r0
   16052:	d007      	beq.n	16064 <__aeabi_fmul+0x1cc>
   16054:	4205      	tst	r5, r0
   16056:	d105      	bne.n	16064 <__aeabi_fmul+0x1cc>
   16058:	4328      	orrs	r0, r5
   1605a:	0240      	lsls	r0, r0, #9
   1605c:	0a40      	lsrs	r0, r0, #9
   1605e:	4644      	mov	r4, r8
   16060:	22ff      	movs	r2, #255	; 0xff
   16062:	e763      	b.n	15f2c <__aeabi_fmul+0x94>
   16064:	4338      	orrs	r0, r7
   16066:	0240      	lsls	r0, r0, #9
   16068:	0a40      	lsrs	r0, r0, #9
   1606a:	22ff      	movs	r2, #255	; 0xff
   1606c:	e75e      	b.n	15f2c <__aeabi_fmul+0x94>
   1606e:	2401      	movs	r4, #1
   16070:	1aa3      	subs	r3, r4, r2
   16072:	2b1b      	cmp	r3, #27
   16074:	dd05      	ble.n	16082 <__aeabi_fmul+0x1ea>
   16076:	400c      	ands	r4, r1
   16078:	2200      	movs	r2, #0
   1607a:	2000      	movs	r0, #0
   1607c:	e756      	b.n	15f2c <__aeabi_fmul+0x94>
   1607e:	465e      	mov	r6, fp
   16080:	e7cb      	b.n	1601a <__aeabi_fmul+0x182>
   16082:	002a      	movs	r2, r5
   16084:	2020      	movs	r0, #32
   16086:	40da      	lsrs	r2, r3
   16088:	1ac3      	subs	r3, r0, r3
   1608a:	409d      	lsls	r5, r3
   1608c:	002b      	movs	r3, r5
   1608e:	1e5d      	subs	r5, r3, #1
   16090:	41ab      	sbcs	r3, r5
   16092:	4313      	orrs	r3, r2
   16094:	075a      	lsls	r2, r3, #29
   16096:	d004      	beq.n	160a2 <__aeabi_fmul+0x20a>
   16098:	220f      	movs	r2, #15
   1609a:	401a      	ands	r2, r3
   1609c:	2a04      	cmp	r2, #4
   1609e:	d000      	beq.n	160a2 <__aeabi_fmul+0x20a>
   160a0:	3304      	adds	r3, #4
   160a2:	015a      	lsls	r2, r3, #5
   160a4:	d504      	bpl.n	160b0 <__aeabi_fmul+0x218>
   160a6:	2401      	movs	r4, #1
   160a8:	2201      	movs	r2, #1
   160aa:	400c      	ands	r4, r1
   160ac:	2000      	movs	r0, #0
   160ae:	e73d      	b.n	15f2c <__aeabi_fmul+0x94>
   160b0:	2401      	movs	r4, #1
   160b2:	019b      	lsls	r3, r3, #6
   160b4:	0a58      	lsrs	r0, r3, #9
   160b6:	400c      	ands	r4, r1
   160b8:	2200      	movs	r2, #0
   160ba:	e737      	b.n	15f2c <__aeabi_fmul+0x94>
   160bc:	2080      	movs	r0, #128	; 0x80
   160be:	2401      	movs	r4, #1
   160c0:	03c0      	lsls	r0, r0, #15
   160c2:	4328      	orrs	r0, r5
   160c4:	0240      	lsls	r0, r0, #9
   160c6:	0a40      	lsrs	r0, r0, #9
   160c8:	400c      	ands	r4, r1
   160ca:	22ff      	movs	r2, #255	; 0xff
   160cc:	e72e      	b.n	15f2c <__aeabi_fmul+0x94>
   160ce:	46c0      	nop			; (mov r8, r8)
   160d0:	0001b09c 	.word	0x0001b09c
   160d4:	f7ffffff 	.word	0xf7ffffff

000160d8 <__aeabi_fsub>:
   160d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   160da:	464f      	mov	r7, r9
   160dc:	46d6      	mov	lr, sl
   160de:	4646      	mov	r6, r8
   160e0:	0044      	lsls	r4, r0, #1
   160e2:	b5c0      	push	{r6, r7, lr}
   160e4:	0fc2      	lsrs	r2, r0, #31
   160e6:	0247      	lsls	r7, r0, #9
   160e8:	0248      	lsls	r0, r1, #9
   160ea:	0a40      	lsrs	r0, r0, #9
   160ec:	4684      	mov	ip, r0
   160ee:	4666      	mov	r6, ip
   160f0:	0a7b      	lsrs	r3, r7, #9
   160f2:	0048      	lsls	r0, r1, #1
   160f4:	0fc9      	lsrs	r1, r1, #31
   160f6:	469a      	mov	sl, r3
   160f8:	0e24      	lsrs	r4, r4, #24
   160fa:	0015      	movs	r5, r2
   160fc:	00db      	lsls	r3, r3, #3
   160fe:	0e00      	lsrs	r0, r0, #24
   16100:	4689      	mov	r9, r1
   16102:	00f6      	lsls	r6, r6, #3
   16104:	28ff      	cmp	r0, #255	; 0xff
   16106:	d100      	bne.n	1610a <__aeabi_fsub+0x32>
   16108:	e08f      	b.n	1622a <__aeabi_fsub+0x152>
   1610a:	2101      	movs	r1, #1
   1610c:	464f      	mov	r7, r9
   1610e:	404f      	eors	r7, r1
   16110:	0039      	movs	r1, r7
   16112:	4291      	cmp	r1, r2
   16114:	d066      	beq.n	161e4 <__aeabi_fsub+0x10c>
   16116:	1a22      	subs	r2, r4, r0
   16118:	2a00      	cmp	r2, #0
   1611a:	dc00      	bgt.n	1611e <__aeabi_fsub+0x46>
   1611c:	e09d      	b.n	1625a <__aeabi_fsub+0x182>
   1611e:	2800      	cmp	r0, #0
   16120:	d13d      	bne.n	1619e <__aeabi_fsub+0xc6>
   16122:	2e00      	cmp	r6, #0
   16124:	d100      	bne.n	16128 <__aeabi_fsub+0x50>
   16126:	e08b      	b.n	16240 <__aeabi_fsub+0x168>
   16128:	1e51      	subs	r1, r2, #1
   1612a:	2900      	cmp	r1, #0
   1612c:	d000      	beq.n	16130 <__aeabi_fsub+0x58>
   1612e:	e0b5      	b.n	1629c <__aeabi_fsub+0x1c4>
   16130:	2401      	movs	r4, #1
   16132:	1b9b      	subs	r3, r3, r6
   16134:	015a      	lsls	r2, r3, #5
   16136:	d544      	bpl.n	161c2 <__aeabi_fsub+0xea>
   16138:	019b      	lsls	r3, r3, #6
   1613a:	099f      	lsrs	r7, r3, #6
   1613c:	0038      	movs	r0, r7
   1613e:	f002 f881 	bl	18244 <__clzsi2>
   16142:	3805      	subs	r0, #5
   16144:	4087      	lsls	r7, r0
   16146:	4284      	cmp	r4, r0
   16148:	dd00      	ble.n	1614c <__aeabi_fsub+0x74>
   1614a:	e096      	b.n	1627a <__aeabi_fsub+0x1a2>
   1614c:	1b04      	subs	r4, r0, r4
   1614e:	003a      	movs	r2, r7
   16150:	2020      	movs	r0, #32
   16152:	3401      	adds	r4, #1
   16154:	40e2      	lsrs	r2, r4
   16156:	1b04      	subs	r4, r0, r4
   16158:	40a7      	lsls	r7, r4
   1615a:	003b      	movs	r3, r7
   1615c:	1e5f      	subs	r7, r3, #1
   1615e:	41bb      	sbcs	r3, r7
   16160:	2400      	movs	r4, #0
   16162:	4313      	orrs	r3, r2
   16164:	075a      	lsls	r2, r3, #29
   16166:	d004      	beq.n	16172 <__aeabi_fsub+0x9a>
   16168:	220f      	movs	r2, #15
   1616a:	401a      	ands	r2, r3
   1616c:	2a04      	cmp	r2, #4
   1616e:	d000      	beq.n	16172 <__aeabi_fsub+0x9a>
   16170:	3304      	adds	r3, #4
   16172:	015a      	lsls	r2, r3, #5
   16174:	d527      	bpl.n	161c6 <__aeabi_fsub+0xee>
   16176:	3401      	adds	r4, #1
   16178:	2cff      	cmp	r4, #255	; 0xff
   1617a:	d100      	bne.n	1617e <__aeabi_fsub+0xa6>
   1617c:	e079      	b.n	16272 <__aeabi_fsub+0x19a>
   1617e:	2201      	movs	r2, #1
   16180:	019b      	lsls	r3, r3, #6
   16182:	0a5b      	lsrs	r3, r3, #9
   16184:	b2e4      	uxtb	r4, r4
   16186:	402a      	ands	r2, r5
   16188:	025b      	lsls	r3, r3, #9
   1618a:	05e4      	lsls	r4, r4, #23
   1618c:	0a58      	lsrs	r0, r3, #9
   1618e:	07d2      	lsls	r2, r2, #31
   16190:	4320      	orrs	r0, r4
   16192:	4310      	orrs	r0, r2
   16194:	bc1c      	pop	{r2, r3, r4}
   16196:	4690      	mov	r8, r2
   16198:	4699      	mov	r9, r3
   1619a:	46a2      	mov	sl, r4
   1619c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1619e:	2cff      	cmp	r4, #255	; 0xff
   161a0:	d0e0      	beq.n	16164 <__aeabi_fsub+0x8c>
   161a2:	2180      	movs	r1, #128	; 0x80
   161a4:	04c9      	lsls	r1, r1, #19
   161a6:	430e      	orrs	r6, r1
   161a8:	2a1b      	cmp	r2, #27
   161aa:	dc7b      	bgt.n	162a4 <__aeabi_fsub+0x1cc>
   161ac:	0031      	movs	r1, r6
   161ae:	2020      	movs	r0, #32
   161b0:	40d1      	lsrs	r1, r2
   161b2:	1a82      	subs	r2, r0, r2
   161b4:	4096      	lsls	r6, r2
   161b6:	1e72      	subs	r2, r6, #1
   161b8:	4196      	sbcs	r6, r2
   161ba:	430e      	orrs	r6, r1
   161bc:	1b9b      	subs	r3, r3, r6
   161be:	015a      	lsls	r2, r3, #5
   161c0:	d4ba      	bmi.n	16138 <__aeabi_fsub+0x60>
   161c2:	075a      	lsls	r2, r3, #29
   161c4:	d1d0      	bne.n	16168 <__aeabi_fsub+0x90>
   161c6:	2201      	movs	r2, #1
   161c8:	08df      	lsrs	r7, r3, #3
   161ca:	402a      	ands	r2, r5
   161cc:	2cff      	cmp	r4, #255	; 0xff
   161ce:	d133      	bne.n	16238 <__aeabi_fsub+0x160>
   161d0:	2f00      	cmp	r7, #0
   161d2:	d100      	bne.n	161d6 <__aeabi_fsub+0xfe>
   161d4:	e0a8      	b.n	16328 <__aeabi_fsub+0x250>
   161d6:	2380      	movs	r3, #128	; 0x80
   161d8:	03db      	lsls	r3, r3, #15
   161da:	433b      	orrs	r3, r7
   161dc:	025b      	lsls	r3, r3, #9
   161de:	0a5b      	lsrs	r3, r3, #9
   161e0:	24ff      	movs	r4, #255	; 0xff
   161e2:	e7d1      	b.n	16188 <__aeabi_fsub+0xb0>
   161e4:	1a21      	subs	r1, r4, r0
   161e6:	2900      	cmp	r1, #0
   161e8:	dd4c      	ble.n	16284 <__aeabi_fsub+0x1ac>
   161ea:	2800      	cmp	r0, #0
   161ec:	d02a      	beq.n	16244 <__aeabi_fsub+0x16c>
   161ee:	2cff      	cmp	r4, #255	; 0xff
   161f0:	d0b8      	beq.n	16164 <__aeabi_fsub+0x8c>
   161f2:	2080      	movs	r0, #128	; 0x80
   161f4:	04c0      	lsls	r0, r0, #19
   161f6:	4306      	orrs	r6, r0
   161f8:	291b      	cmp	r1, #27
   161fa:	dd00      	ble.n	161fe <__aeabi_fsub+0x126>
   161fc:	e0af      	b.n	1635e <__aeabi_fsub+0x286>
   161fe:	0030      	movs	r0, r6
   16200:	2720      	movs	r7, #32
   16202:	40c8      	lsrs	r0, r1
   16204:	1a79      	subs	r1, r7, r1
   16206:	408e      	lsls	r6, r1
   16208:	1e71      	subs	r1, r6, #1
   1620a:	418e      	sbcs	r6, r1
   1620c:	4306      	orrs	r6, r0
   1620e:	199b      	adds	r3, r3, r6
   16210:	0159      	lsls	r1, r3, #5
   16212:	d5d6      	bpl.n	161c2 <__aeabi_fsub+0xea>
   16214:	3401      	adds	r4, #1
   16216:	2cff      	cmp	r4, #255	; 0xff
   16218:	d100      	bne.n	1621c <__aeabi_fsub+0x144>
   1621a:	e085      	b.n	16328 <__aeabi_fsub+0x250>
   1621c:	2201      	movs	r2, #1
   1621e:	497a      	ldr	r1, [pc, #488]	; (16408 <__aeabi_fsub+0x330>)
   16220:	401a      	ands	r2, r3
   16222:	085b      	lsrs	r3, r3, #1
   16224:	400b      	ands	r3, r1
   16226:	4313      	orrs	r3, r2
   16228:	e79c      	b.n	16164 <__aeabi_fsub+0x8c>
   1622a:	2e00      	cmp	r6, #0
   1622c:	d000      	beq.n	16230 <__aeabi_fsub+0x158>
   1622e:	e770      	b.n	16112 <__aeabi_fsub+0x3a>
   16230:	e76b      	b.n	1610a <__aeabi_fsub+0x32>
   16232:	1e3b      	subs	r3, r7, #0
   16234:	d1c5      	bne.n	161c2 <__aeabi_fsub+0xea>
   16236:	2200      	movs	r2, #0
   16238:	027b      	lsls	r3, r7, #9
   1623a:	0a5b      	lsrs	r3, r3, #9
   1623c:	b2e4      	uxtb	r4, r4
   1623e:	e7a3      	b.n	16188 <__aeabi_fsub+0xb0>
   16240:	0014      	movs	r4, r2
   16242:	e78f      	b.n	16164 <__aeabi_fsub+0x8c>
   16244:	2e00      	cmp	r6, #0
   16246:	d04d      	beq.n	162e4 <__aeabi_fsub+0x20c>
   16248:	1e48      	subs	r0, r1, #1
   1624a:	2800      	cmp	r0, #0
   1624c:	d157      	bne.n	162fe <__aeabi_fsub+0x226>
   1624e:	199b      	adds	r3, r3, r6
   16250:	2401      	movs	r4, #1
   16252:	015a      	lsls	r2, r3, #5
   16254:	d5b5      	bpl.n	161c2 <__aeabi_fsub+0xea>
   16256:	2402      	movs	r4, #2
   16258:	e7e0      	b.n	1621c <__aeabi_fsub+0x144>
   1625a:	2a00      	cmp	r2, #0
   1625c:	d125      	bne.n	162aa <__aeabi_fsub+0x1d2>
   1625e:	1c62      	adds	r2, r4, #1
   16260:	b2d2      	uxtb	r2, r2
   16262:	2a01      	cmp	r2, #1
   16264:	dd72      	ble.n	1634c <__aeabi_fsub+0x274>
   16266:	1b9f      	subs	r7, r3, r6
   16268:	017a      	lsls	r2, r7, #5
   1626a:	d535      	bpl.n	162d8 <__aeabi_fsub+0x200>
   1626c:	1af7      	subs	r7, r6, r3
   1626e:	000d      	movs	r5, r1
   16270:	e764      	b.n	1613c <__aeabi_fsub+0x64>
   16272:	2201      	movs	r2, #1
   16274:	2300      	movs	r3, #0
   16276:	402a      	ands	r2, r5
   16278:	e786      	b.n	16188 <__aeabi_fsub+0xb0>
   1627a:	003b      	movs	r3, r7
   1627c:	4a63      	ldr	r2, [pc, #396]	; (1640c <__aeabi_fsub+0x334>)
   1627e:	1a24      	subs	r4, r4, r0
   16280:	4013      	ands	r3, r2
   16282:	e76f      	b.n	16164 <__aeabi_fsub+0x8c>
   16284:	2900      	cmp	r1, #0
   16286:	d16c      	bne.n	16362 <__aeabi_fsub+0x28a>
   16288:	1c61      	adds	r1, r4, #1
   1628a:	b2c8      	uxtb	r0, r1
   1628c:	2801      	cmp	r0, #1
   1628e:	dd4e      	ble.n	1632e <__aeabi_fsub+0x256>
   16290:	29ff      	cmp	r1, #255	; 0xff
   16292:	d049      	beq.n	16328 <__aeabi_fsub+0x250>
   16294:	199b      	adds	r3, r3, r6
   16296:	085b      	lsrs	r3, r3, #1
   16298:	000c      	movs	r4, r1
   1629a:	e763      	b.n	16164 <__aeabi_fsub+0x8c>
   1629c:	2aff      	cmp	r2, #255	; 0xff
   1629e:	d041      	beq.n	16324 <__aeabi_fsub+0x24c>
   162a0:	000a      	movs	r2, r1
   162a2:	e781      	b.n	161a8 <__aeabi_fsub+0xd0>
   162a4:	2601      	movs	r6, #1
   162a6:	1b9b      	subs	r3, r3, r6
   162a8:	e789      	b.n	161be <__aeabi_fsub+0xe6>
   162aa:	2c00      	cmp	r4, #0
   162ac:	d01c      	beq.n	162e8 <__aeabi_fsub+0x210>
   162ae:	28ff      	cmp	r0, #255	; 0xff
   162b0:	d021      	beq.n	162f6 <__aeabi_fsub+0x21e>
   162b2:	2480      	movs	r4, #128	; 0x80
   162b4:	04e4      	lsls	r4, r4, #19
   162b6:	4252      	negs	r2, r2
   162b8:	4323      	orrs	r3, r4
   162ba:	2a1b      	cmp	r2, #27
   162bc:	dd00      	ble.n	162c0 <__aeabi_fsub+0x1e8>
   162be:	e096      	b.n	163ee <__aeabi_fsub+0x316>
   162c0:	001c      	movs	r4, r3
   162c2:	2520      	movs	r5, #32
   162c4:	40d4      	lsrs	r4, r2
   162c6:	1aaa      	subs	r2, r5, r2
   162c8:	4093      	lsls	r3, r2
   162ca:	1e5a      	subs	r2, r3, #1
   162cc:	4193      	sbcs	r3, r2
   162ce:	4323      	orrs	r3, r4
   162d0:	1af3      	subs	r3, r6, r3
   162d2:	0004      	movs	r4, r0
   162d4:	000d      	movs	r5, r1
   162d6:	e72d      	b.n	16134 <__aeabi_fsub+0x5c>
   162d8:	2f00      	cmp	r7, #0
   162da:	d000      	beq.n	162de <__aeabi_fsub+0x206>
   162dc:	e72e      	b.n	1613c <__aeabi_fsub+0x64>
   162de:	2200      	movs	r2, #0
   162e0:	2400      	movs	r4, #0
   162e2:	e7a9      	b.n	16238 <__aeabi_fsub+0x160>
   162e4:	000c      	movs	r4, r1
   162e6:	e73d      	b.n	16164 <__aeabi_fsub+0x8c>
   162e8:	2b00      	cmp	r3, #0
   162ea:	d058      	beq.n	1639e <__aeabi_fsub+0x2c6>
   162ec:	43d2      	mvns	r2, r2
   162ee:	2a00      	cmp	r2, #0
   162f0:	d0ee      	beq.n	162d0 <__aeabi_fsub+0x1f8>
   162f2:	28ff      	cmp	r0, #255	; 0xff
   162f4:	d1e1      	bne.n	162ba <__aeabi_fsub+0x1e2>
   162f6:	0033      	movs	r3, r6
   162f8:	24ff      	movs	r4, #255	; 0xff
   162fa:	000d      	movs	r5, r1
   162fc:	e732      	b.n	16164 <__aeabi_fsub+0x8c>
   162fe:	29ff      	cmp	r1, #255	; 0xff
   16300:	d010      	beq.n	16324 <__aeabi_fsub+0x24c>
   16302:	0001      	movs	r1, r0
   16304:	e778      	b.n	161f8 <__aeabi_fsub+0x120>
   16306:	2b00      	cmp	r3, #0
   16308:	d06e      	beq.n	163e8 <__aeabi_fsub+0x310>
   1630a:	24ff      	movs	r4, #255	; 0xff
   1630c:	2e00      	cmp	r6, #0
   1630e:	d100      	bne.n	16312 <__aeabi_fsub+0x23a>
   16310:	e728      	b.n	16164 <__aeabi_fsub+0x8c>
   16312:	2280      	movs	r2, #128	; 0x80
   16314:	4651      	mov	r1, sl
   16316:	03d2      	lsls	r2, r2, #15
   16318:	4211      	tst	r1, r2
   1631a:	d003      	beq.n	16324 <__aeabi_fsub+0x24c>
   1631c:	4661      	mov	r1, ip
   1631e:	4211      	tst	r1, r2
   16320:	d100      	bne.n	16324 <__aeabi_fsub+0x24c>
   16322:	0033      	movs	r3, r6
   16324:	24ff      	movs	r4, #255	; 0xff
   16326:	e71d      	b.n	16164 <__aeabi_fsub+0x8c>
   16328:	24ff      	movs	r4, #255	; 0xff
   1632a:	2300      	movs	r3, #0
   1632c:	e72c      	b.n	16188 <__aeabi_fsub+0xb0>
   1632e:	2c00      	cmp	r4, #0
   16330:	d1e9      	bne.n	16306 <__aeabi_fsub+0x22e>
   16332:	2b00      	cmp	r3, #0
   16334:	d063      	beq.n	163fe <__aeabi_fsub+0x326>
   16336:	2e00      	cmp	r6, #0
   16338:	d100      	bne.n	1633c <__aeabi_fsub+0x264>
   1633a:	e713      	b.n	16164 <__aeabi_fsub+0x8c>
   1633c:	199b      	adds	r3, r3, r6
   1633e:	015a      	lsls	r2, r3, #5
   16340:	d400      	bmi.n	16344 <__aeabi_fsub+0x26c>
   16342:	e73e      	b.n	161c2 <__aeabi_fsub+0xea>
   16344:	4a31      	ldr	r2, [pc, #196]	; (1640c <__aeabi_fsub+0x334>)
   16346:	000c      	movs	r4, r1
   16348:	4013      	ands	r3, r2
   1634a:	e70b      	b.n	16164 <__aeabi_fsub+0x8c>
   1634c:	2c00      	cmp	r4, #0
   1634e:	d11e      	bne.n	1638e <__aeabi_fsub+0x2b6>
   16350:	2b00      	cmp	r3, #0
   16352:	d12f      	bne.n	163b4 <__aeabi_fsub+0x2dc>
   16354:	2e00      	cmp	r6, #0
   16356:	d04f      	beq.n	163f8 <__aeabi_fsub+0x320>
   16358:	0033      	movs	r3, r6
   1635a:	000d      	movs	r5, r1
   1635c:	e702      	b.n	16164 <__aeabi_fsub+0x8c>
   1635e:	2601      	movs	r6, #1
   16360:	e755      	b.n	1620e <__aeabi_fsub+0x136>
   16362:	2c00      	cmp	r4, #0
   16364:	d11f      	bne.n	163a6 <__aeabi_fsub+0x2ce>
   16366:	2b00      	cmp	r3, #0
   16368:	d043      	beq.n	163f2 <__aeabi_fsub+0x31a>
   1636a:	43c9      	mvns	r1, r1
   1636c:	2900      	cmp	r1, #0
   1636e:	d00b      	beq.n	16388 <__aeabi_fsub+0x2b0>
   16370:	28ff      	cmp	r0, #255	; 0xff
   16372:	d039      	beq.n	163e8 <__aeabi_fsub+0x310>
   16374:	291b      	cmp	r1, #27
   16376:	dc44      	bgt.n	16402 <__aeabi_fsub+0x32a>
   16378:	001c      	movs	r4, r3
   1637a:	2720      	movs	r7, #32
   1637c:	40cc      	lsrs	r4, r1
   1637e:	1a79      	subs	r1, r7, r1
   16380:	408b      	lsls	r3, r1
   16382:	1e59      	subs	r1, r3, #1
   16384:	418b      	sbcs	r3, r1
   16386:	4323      	orrs	r3, r4
   16388:	199b      	adds	r3, r3, r6
   1638a:	0004      	movs	r4, r0
   1638c:	e740      	b.n	16210 <__aeabi_fsub+0x138>
   1638e:	2b00      	cmp	r3, #0
   16390:	d11a      	bne.n	163c8 <__aeabi_fsub+0x2f0>
   16392:	2e00      	cmp	r6, #0
   16394:	d124      	bne.n	163e0 <__aeabi_fsub+0x308>
   16396:	2780      	movs	r7, #128	; 0x80
   16398:	2200      	movs	r2, #0
   1639a:	03ff      	lsls	r7, r7, #15
   1639c:	e71b      	b.n	161d6 <__aeabi_fsub+0xfe>
   1639e:	0033      	movs	r3, r6
   163a0:	0004      	movs	r4, r0
   163a2:	000d      	movs	r5, r1
   163a4:	e6de      	b.n	16164 <__aeabi_fsub+0x8c>
   163a6:	28ff      	cmp	r0, #255	; 0xff
   163a8:	d01e      	beq.n	163e8 <__aeabi_fsub+0x310>
   163aa:	2480      	movs	r4, #128	; 0x80
   163ac:	04e4      	lsls	r4, r4, #19
   163ae:	4249      	negs	r1, r1
   163b0:	4323      	orrs	r3, r4
   163b2:	e7df      	b.n	16374 <__aeabi_fsub+0x29c>
   163b4:	2e00      	cmp	r6, #0
   163b6:	d100      	bne.n	163ba <__aeabi_fsub+0x2e2>
   163b8:	e6d4      	b.n	16164 <__aeabi_fsub+0x8c>
   163ba:	1b9f      	subs	r7, r3, r6
   163bc:	017a      	lsls	r2, r7, #5
   163be:	d400      	bmi.n	163c2 <__aeabi_fsub+0x2ea>
   163c0:	e737      	b.n	16232 <__aeabi_fsub+0x15a>
   163c2:	1af3      	subs	r3, r6, r3
   163c4:	000d      	movs	r5, r1
   163c6:	e6cd      	b.n	16164 <__aeabi_fsub+0x8c>
   163c8:	24ff      	movs	r4, #255	; 0xff
   163ca:	2e00      	cmp	r6, #0
   163cc:	d100      	bne.n	163d0 <__aeabi_fsub+0x2f8>
   163ce:	e6c9      	b.n	16164 <__aeabi_fsub+0x8c>
   163d0:	2280      	movs	r2, #128	; 0x80
   163d2:	4650      	mov	r0, sl
   163d4:	03d2      	lsls	r2, r2, #15
   163d6:	4210      	tst	r0, r2
   163d8:	d0a4      	beq.n	16324 <__aeabi_fsub+0x24c>
   163da:	4660      	mov	r0, ip
   163dc:	4210      	tst	r0, r2
   163de:	d1a1      	bne.n	16324 <__aeabi_fsub+0x24c>
   163e0:	0033      	movs	r3, r6
   163e2:	000d      	movs	r5, r1
   163e4:	24ff      	movs	r4, #255	; 0xff
   163e6:	e6bd      	b.n	16164 <__aeabi_fsub+0x8c>
   163e8:	0033      	movs	r3, r6
   163ea:	24ff      	movs	r4, #255	; 0xff
   163ec:	e6ba      	b.n	16164 <__aeabi_fsub+0x8c>
   163ee:	2301      	movs	r3, #1
   163f0:	e76e      	b.n	162d0 <__aeabi_fsub+0x1f8>
   163f2:	0033      	movs	r3, r6
   163f4:	0004      	movs	r4, r0
   163f6:	e6b5      	b.n	16164 <__aeabi_fsub+0x8c>
   163f8:	2700      	movs	r7, #0
   163fa:	2200      	movs	r2, #0
   163fc:	e71c      	b.n	16238 <__aeabi_fsub+0x160>
   163fe:	0033      	movs	r3, r6
   16400:	e6b0      	b.n	16164 <__aeabi_fsub+0x8c>
   16402:	2301      	movs	r3, #1
   16404:	e7c0      	b.n	16388 <__aeabi_fsub+0x2b0>
   16406:	46c0      	nop			; (mov r8, r8)
   16408:	7dffffff 	.word	0x7dffffff
   1640c:	fbffffff 	.word	0xfbffffff

00016410 <__aeabi_f2iz>:
   16410:	0241      	lsls	r1, r0, #9
   16412:	0043      	lsls	r3, r0, #1
   16414:	0fc2      	lsrs	r2, r0, #31
   16416:	0a49      	lsrs	r1, r1, #9
   16418:	0e1b      	lsrs	r3, r3, #24
   1641a:	2000      	movs	r0, #0
   1641c:	2b7e      	cmp	r3, #126	; 0x7e
   1641e:	dd0d      	ble.n	1643c <__aeabi_f2iz+0x2c>
   16420:	2b9d      	cmp	r3, #157	; 0x9d
   16422:	dc0c      	bgt.n	1643e <__aeabi_f2iz+0x2e>
   16424:	2080      	movs	r0, #128	; 0x80
   16426:	0400      	lsls	r0, r0, #16
   16428:	4301      	orrs	r1, r0
   1642a:	2b95      	cmp	r3, #149	; 0x95
   1642c:	dc0a      	bgt.n	16444 <__aeabi_f2iz+0x34>
   1642e:	2096      	movs	r0, #150	; 0x96
   16430:	1ac3      	subs	r3, r0, r3
   16432:	40d9      	lsrs	r1, r3
   16434:	4248      	negs	r0, r1
   16436:	2a00      	cmp	r2, #0
   16438:	d100      	bne.n	1643c <__aeabi_f2iz+0x2c>
   1643a:	0008      	movs	r0, r1
   1643c:	4770      	bx	lr
   1643e:	4b03      	ldr	r3, [pc, #12]	; (1644c <__aeabi_f2iz+0x3c>)
   16440:	18d0      	adds	r0, r2, r3
   16442:	e7fb      	b.n	1643c <__aeabi_f2iz+0x2c>
   16444:	3b96      	subs	r3, #150	; 0x96
   16446:	4099      	lsls	r1, r3
   16448:	e7f4      	b.n	16434 <__aeabi_f2iz+0x24>
   1644a:	46c0      	nop			; (mov r8, r8)
   1644c:	7fffffff 	.word	0x7fffffff

00016450 <__aeabi_i2f>:
   16450:	b570      	push	{r4, r5, r6, lr}
   16452:	2800      	cmp	r0, #0
   16454:	d030      	beq.n	164b8 <__aeabi_i2f+0x68>
   16456:	17c3      	asrs	r3, r0, #31
   16458:	18c4      	adds	r4, r0, r3
   1645a:	405c      	eors	r4, r3
   1645c:	0fc5      	lsrs	r5, r0, #31
   1645e:	0020      	movs	r0, r4
   16460:	f001 fef0 	bl	18244 <__clzsi2>
   16464:	239e      	movs	r3, #158	; 0x9e
   16466:	1a1b      	subs	r3, r3, r0
   16468:	2b96      	cmp	r3, #150	; 0x96
   1646a:	dc0d      	bgt.n	16488 <__aeabi_i2f+0x38>
   1646c:	2296      	movs	r2, #150	; 0x96
   1646e:	1ad2      	subs	r2, r2, r3
   16470:	4094      	lsls	r4, r2
   16472:	002a      	movs	r2, r5
   16474:	0264      	lsls	r4, r4, #9
   16476:	0a64      	lsrs	r4, r4, #9
   16478:	b2db      	uxtb	r3, r3
   1647a:	0264      	lsls	r4, r4, #9
   1647c:	05db      	lsls	r3, r3, #23
   1647e:	0a60      	lsrs	r0, r4, #9
   16480:	07d2      	lsls	r2, r2, #31
   16482:	4318      	orrs	r0, r3
   16484:	4310      	orrs	r0, r2
   16486:	bd70      	pop	{r4, r5, r6, pc}
   16488:	2b99      	cmp	r3, #153	; 0x99
   1648a:	dc19      	bgt.n	164c0 <__aeabi_i2f+0x70>
   1648c:	2299      	movs	r2, #153	; 0x99
   1648e:	1ad2      	subs	r2, r2, r3
   16490:	2a00      	cmp	r2, #0
   16492:	dd29      	ble.n	164e8 <__aeabi_i2f+0x98>
   16494:	4094      	lsls	r4, r2
   16496:	0022      	movs	r2, r4
   16498:	4c14      	ldr	r4, [pc, #80]	; (164ec <__aeabi_i2f+0x9c>)
   1649a:	4014      	ands	r4, r2
   1649c:	0751      	lsls	r1, r2, #29
   1649e:	d004      	beq.n	164aa <__aeabi_i2f+0x5a>
   164a0:	210f      	movs	r1, #15
   164a2:	400a      	ands	r2, r1
   164a4:	2a04      	cmp	r2, #4
   164a6:	d000      	beq.n	164aa <__aeabi_i2f+0x5a>
   164a8:	3404      	adds	r4, #4
   164aa:	0162      	lsls	r2, r4, #5
   164ac:	d413      	bmi.n	164d6 <__aeabi_i2f+0x86>
   164ae:	01a4      	lsls	r4, r4, #6
   164b0:	0a64      	lsrs	r4, r4, #9
   164b2:	b2db      	uxtb	r3, r3
   164b4:	002a      	movs	r2, r5
   164b6:	e7e0      	b.n	1647a <__aeabi_i2f+0x2a>
   164b8:	2200      	movs	r2, #0
   164ba:	2300      	movs	r3, #0
   164bc:	2400      	movs	r4, #0
   164be:	e7dc      	b.n	1647a <__aeabi_i2f+0x2a>
   164c0:	2205      	movs	r2, #5
   164c2:	0021      	movs	r1, r4
   164c4:	1a12      	subs	r2, r2, r0
   164c6:	40d1      	lsrs	r1, r2
   164c8:	22b9      	movs	r2, #185	; 0xb9
   164ca:	1ad2      	subs	r2, r2, r3
   164cc:	4094      	lsls	r4, r2
   164ce:	1e62      	subs	r2, r4, #1
   164d0:	4194      	sbcs	r4, r2
   164d2:	430c      	orrs	r4, r1
   164d4:	e7da      	b.n	1648c <__aeabi_i2f+0x3c>
   164d6:	4b05      	ldr	r3, [pc, #20]	; (164ec <__aeabi_i2f+0x9c>)
   164d8:	002a      	movs	r2, r5
   164da:	401c      	ands	r4, r3
   164dc:	239f      	movs	r3, #159	; 0x9f
   164de:	01a4      	lsls	r4, r4, #6
   164e0:	1a1b      	subs	r3, r3, r0
   164e2:	0a64      	lsrs	r4, r4, #9
   164e4:	b2db      	uxtb	r3, r3
   164e6:	e7c8      	b.n	1647a <__aeabi_i2f+0x2a>
   164e8:	0022      	movs	r2, r4
   164ea:	e7d5      	b.n	16498 <__aeabi_i2f+0x48>
   164ec:	fbffffff 	.word	0xfbffffff

000164f0 <__aeabi_ui2f>:
   164f0:	b510      	push	{r4, lr}
   164f2:	1e04      	subs	r4, r0, #0
   164f4:	d027      	beq.n	16546 <__aeabi_ui2f+0x56>
   164f6:	f001 fea5 	bl	18244 <__clzsi2>
   164fa:	239e      	movs	r3, #158	; 0x9e
   164fc:	1a1b      	subs	r3, r3, r0
   164fe:	2b96      	cmp	r3, #150	; 0x96
   16500:	dc0a      	bgt.n	16518 <__aeabi_ui2f+0x28>
   16502:	2296      	movs	r2, #150	; 0x96
   16504:	1ad2      	subs	r2, r2, r3
   16506:	4094      	lsls	r4, r2
   16508:	0264      	lsls	r4, r4, #9
   1650a:	0a64      	lsrs	r4, r4, #9
   1650c:	b2db      	uxtb	r3, r3
   1650e:	0264      	lsls	r4, r4, #9
   16510:	05db      	lsls	r3, r3, #23
   16512:	0a60      	lsrs	r0, r4, #9
   16514:	4318      	orrs	r0, r3
   16516:	bd10      	pop	{r4, pc}
   16518:	2b99      	cmp	r3, #153	; 0x99
   1651a:	dc17      	bgt.n	1654c <__aeabi_ui2f+0x5c>
   1651c:	2299      	movs	r2, #153	; 0x99
   1651e:	1ad2      	subs	r2, r2, r3
   16520:	2a00      	cmp	r2, #0
   16522:	dd27      	ble.n	16574 <__aeabi_ui2f+0x84>
   16524:	4094      	lsls	r4, r2
   16526:	0022      	movs	r2, r4
   16528:	4c13      	ldr	r4, [pc, #76]	; (16578 <__aeabi_ui2f+0x88>)
   1652a:	4014      	ands	r4, r2
   1652c:	0751      	lsls	r1, r2, #29
   1652e:	d004      	beq.n	1653a <__aeabi_ui2f+0x4a>
   16530:	210f      	movs	r1, #15
   16532:	400a      	ands	r2, r1
   16534:	2a04      	cmp	r2, #4
   16536:	d000      	beq.n	1653a <__aeabi_ui2f+0x4a>
   16538:	3404      	adds	r4, #4
   1653a:	0162      	lsls	r2, r4, #5
   1653c:	d412      	bmi.n	16564 <__aeabi_ui2f+0x74>
   1653e:	01a4      	lsls	r4, r4, #6
   16540:	0a64      	lsrs	r4, r4, #9
   16542:	b2db      	uxtb	r3, r3
   16544:	e7e3      	b.n	1650e <__aeabi_ui2f+0x1e>
   16546:	2300      	movs	r3, #0
   16548:	2400      	movs	r4, #0
   1654a:	e7e0      	b.n	1650e <__aeabi_ui2f+0x1e>
   1654c:	22b9      	movs	r2, #185	; 0xb9
   1654e:	0021      	movs	r1, r4
   16550:	1ad2      	subs	r2, r2, r3
   16552:	4091      	lsls	r1, r2
   16554:	000a      	movs	r2, r1
   16556:	1e51      	subs	r1, r2, #1
   16558:	418a      	sbcs	r2, r1
   1655a:	2105      	movs	r1, #5
   1655c:	1a09      	subs	r1, r1, r0
   1655e:	40cc      	lsrs	r4, r1
   16560:	4314      	orrs	r4, r2
   16562:	e7db      	b.n	1651c <__aeabi_ui2f+0x2c>
   16564:	4b04      	ldr	r3, [pc, #16]	; (16578 <__aeabi_ui2f+0x88>)
   16566:	401c      	ands	r4, r3
   16568:	239f      	movs	r3, #159	; 0x9f
   1656a:	01a4      	lsls	r4, r4, #6
   1656c:	1a1b      	subs	r3, r3, r0
   1656e:	0a64      	lsrs	r4, r4, #9
   16570:	b2db      	uxtb	r3, r3
   16572:	e7cc      	b.n	1650e <__aeabi_ui2f+0x1e>
   16574:	0022      	movs	r2, r4
   16576:	e7d7      	b.n	16528 <__aeabi_ui2f+0x38>
   16578:	fbffffff 	.word	0xfbffffff

0001657c <__aeabi_dadd>:
   1657c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1657e:	4645      	mov	r5, r8
   16580:	46de      	mov	lr, fp
   16582:	4657      	mov	r7, sl
   16584:	464e      	mov	r6, r9
   16586:	030c      	lsls	r4, r1, #12
   16588:	b5e0      	push	{r5, r6, r7, lr}
   1658a:	004e      	lsls	r6, r1, #1
   1658c:	0fc9      	lsrs	r1, r1, #31
   1658e:	4688      	mov	r8, r1
   16590:	000d      	movs	r5, r1
   16592:	0a61      	lsrs	r1, r4, #9
   16594:	0f44      	lsrs	r4, r0, #29
   16596:	430c      	orrs	r4, r1
   16598:	00c7      	lsls	r7, r0, #3
   1659a:	0319      	lsls	r1, r3, #12
   1659c:	0058      	lsls	r0, r3, #1
   1659e:	0fdb      	lsrs	r3, r3, #31
   165a0:	469b      	mov	fp, r3
   165a2:	0a4b      	lsrs	r3, r1, #9
   165a4:	0f51      	lsrs	r1, r2, #29
   165a6:	430b      	orrs	r3, r1
   165a8:	0d76      	lsrs	r6, r6, #21
   165aa:	0d40      	lsrs	r0, r0, #21
   165ac:	0019      	movs	r1, r3
   165ae:	00d2      	lsls	r2, r2, #3
   165b0:	45d8      	cmp	r8, fp
   165b2:	d100      	bne.n	165b6 <__aeabi_dadd+0x3a>
   165b4:	e0ae      	b.n	16714 <__aeabi_dadd+0x198>
   165b6:	1a35      	subs	r5, r6, r0
   165b8:	2d00      	cmp	r5, #0
   165ba:	dc00      	bgt.n	165be <__aeabi_dadd+0x42>
   165bc:	e0f6      	b.n	167ac <__aeabi_dadd+0x230>
   165be:	2800      	cmp	r0, #0
   165c0:	d10f      	bne.n	165e2 <__aeabi_dadd+0x66>
   165c2:	4313      	orrs	r3, r2
   165c4:	d100      	bne.n	165c8 <__aeabi_dadd+0x4c>
   165c6:	e0db      	b.n	16780 <__aeabi_dadd+0x204>
   165c8:	1e6b      	subs	r3, r5, #1
   165ca:	2b00      	cmp	r3, #0
   165cc:	d000      	beq.n	165d0 <__aeabi_dadd+0x54>
   165ce:	e137      	b.n	16840 <__aeabi_dadd+0x2c4>
   165d0:	1aba      	subs	r2, r7, r2
   165d2:	4297      	cmp	r7, r2
   165d4:	41bf      	sbcs	r7, r7
   165d6:	1a64      	subs	r4, r4, r1
   165d8:	427f      	negs	r7, r7
   165da:	1be4      	subs	r4, r4, r7
   165dc:	2601      	movs	r6, #1
   165de:	0017      	movs	r7, r2
   165e0:	e024      	b.n	1662c <__aeabi_dadd+0xb0>
   165e2:	4bc6      	ldr	r3, [pc, #792]	; (168fc <__aeabi_dadd+0x380>)
   165e4:	429e      	cmp	r6, r3
   165e6:	d04d      	beq.n	16684 <__aeabi_dadd+0x108>
   165e8:	2380      	movs	r3, #128	; 0x80
   165ea:	041b      	lsls	r3, r3, #16
   165ec:	4319      	orrs	r1, r3
   165ee:	2d38      	cmp	r5, #56	; 0x38
   165f0:	dd00      	ble.n	165f4 <__aeabi_dadd+0x78>
   165f2:	e107      	b.n	16804 <__aeabi_dadd+0x288>
   165f4:	2d1f      	cmp	r5, #31
   165f6:	dd00      	ble.n	165fa <__aeabi_dadd+0x7e>
   165f8:	e138      	b.n	1686c <__aeabi_dadd+0x2f0>
   165fa:	2020      	movs	r0, #32
   165fc:	1b43      	subs	r3, r0, r5
   165fe:	469a      	mov	sl, r3
   16600:	000b      	movs	r3, r1
   16602:	4650      	mov	r0, sl
   16604:	4083      	lsls	r3, r0
   16606:	4699      	mov	r9, r3
   16608:	0013      	movs	r3, r2
   1660a:	4648      	mov	r0, r9
   1660c:	40eb      	lsrs	r3, r5
   1660e:	4318      	orrs	r0, r3
   16610:	0003      	movs	r3, r0
   16612:	4650      	mov	r0, sl
   16614:	4082      	lsls	r2, r0
   16616:	1e50      	subs	r0, r2, #1
   16618:	4182      	sbcs	r2, r0
   1661a:	40e9      	lsrs	r1, r5
   1661c:	431a      	orrs	r2, r3
   1661e:	1aba      	subs	r2, r7, r2
   16620:	1a61      	subs	r1, r4, r1
   16622:	4297      	cmp	r7, r2
   16624:	41a4      	sbcs	r4, r4
   16626:	0017      	movs	r7, r2
   16628:	4264      	negs	r4, r4
   1662a:	1b0c      	subs	r4, r1, r4
   1662c:	0223      	lsls	r3, r4, #8
   1662e:	d562      	bpl.n	166f6 <__aeabi_dadd+0x17a>
   16630:	0264      	lsls	r4, r4, #9
   16632:	0a65      	lsrs	r5, r4, #9
   16634:	2d00      	cmp	r5, #0
   16636:	d100      	bne.n	1663a <__aeabi_dadd+0xbe>
   16638:	e0df      	b.n	167fa <__aeabi_dadd+0x27e>
   1663a:	0028      	movs	r0, r5
   1663c:	f001 fe02 	bl	18244 <__clzsi2>
   16640:	0003      	movs	r3, r0
   16642:	3b08      	subs	r3, #8
   16644:	2b1f      	cmp	r3, #31
   16646:	dd00      	ble.n	1664a <__aeabi_dadd+0xce>
   16648:	e0d2      	b.n	167f0 <__aeabi_dadd+0x274>
   1664a:	2220      	movs	r2, #32
   1664c:	003c      	movs	r4, r7
   1664e:	1ad2      	subs	r2, r2, r3
   16650:	409d      	lsls	r5, r3
   16652:	40d4      	lsrs	r4, r2
   16654:	409f      	lsls	r7, r3
   16656:	4325      	orrs	r5, r4
   16658:	429e      	cmp	r6, r3
   1665a:	dd00      	ble.n	1665e <__aeabi_dadd+0xe2>
   1665c:	e0c4      	b.n	167e8 <__aeabi_dadd+0x26c>
   1665e:	1b9e      	subs	r6, r3, r6
   16660:	1c73      	adds	r3, r6, #1
   16662:	2b1f      	cmp	r3, #31
   16664:	dd00      	ble.n	16668 <__aeabi_dadd+0xec>
   16666:	e0f1      	b.n	1684c <__aeabi_dadd+0x2d0>
   16668:	2220      	movs	r2, #32
   1666a:	0038      	movs	r0, r7
   1666c:	0029      	movs	r1, r5
   1666e:	1ad2      	subs	r2, r2, r3
   16670:	40d8      	lsrs	r0, r3
   16672:	4091      	lsls	r1, r2
   16674:	4097      	lsls	r7, r2
   16676:	002c      	movs	r4, r5
   16678:	4301      	orrs	r1, r0
   1667a:	1e78      	subs	r0, r7, #1
   1667c:	4187      	sbcs	r7, r0
   1667e:	40dc      	lsrs	r4, r3
   16680:	2600      	movs	r6, #0
   16682:	430f      	orrs	r7, r1
   16684:	077b      	lsls	r3, r7, #29
   16686:	d009      	beq.n	1669c <__aeabi_dadd+0x120>
   16688:	230f      	movs	r3, #15
   1668a:	403b      	ands	r3, r7
   1668c:	2b04      	cmp	r3, #4
   1668e:	d005      	beq.n	1669c <__aeabi_dadd+0x120>
   16690:	1d3b      	adds	r3, r7, #4
   16692:	42bb      	cmp	r3, r7
   16694:	41bf      	sbcs	r7, r7
   16696:	427f      	negs	r7, r7
   16698:	19e4      	adds	r4, r4, r7
   1669a:	001f      	movs	r7, r3
   1669c:	0223      	lsls	r3, r4, #8
   1669e:	d52c      	bpl.n	166fa <__aeabi_dadd+0x17e>
   166a0:	4b96      	ldr	r3, [pc, #600]	; (168fc <__aeabi_dadd+0x380>)
   166a2:	3601      	adds	r6, #1
   166a4:	429e      	cmp	r6, r3
   166a6:	d100      	bne.n	166aa <__aeabi_dadd+0x12e>
   166a8:	e09a      	b.n	167e0 <__aeabi_dadd+0x264>
   166aa:	4645      	mov	r5, r8
   166ac:	4b94      	ldr	r3, [pc, #592]	; (16900 <__aeabi_dadd+0x384>)
   166ae:	08ff      	lsrs	r7, r7, #3
   166b0:	401c      	ands	r4, r3
   166b2:	0760      	lsls	r0, r4, #29
   166b4:	0576      	lsls	r6, r6, #21
   166b6:	0264      	lsls	r4, r4, #9
   166b8:	4307      	orrs	r7, r0
   166ba:	0b24      	lsrs	r4, r4, #12
   166bc:	0d76      	lsrs	r6, r6, #21
   166be:	2100      	movs	r1, #0
   166c0:	0324      	lsls	r4, r4, #12
   166c2:	0b23      	lsrs	r3, r4, #12
   166c4:	0d0c      	lsrs	r4, r1, #20
   166c6:	4a8f      	ldr	r2, [pc, #572]	; (16904 <__aeabi_dadd+0x388>)
   166c8:	0524      	lsls	r4, r4, #20
   166ca:	431c      	orrs	r4, r3
   166cc:	4014      	ands	r4, r2
   166ce:	0533      	lsls	r3, r6, #20
   166d0:	4323      	orrs	r3, r4
   166d2:	005b      	lsls	r3, r3, #1
   166d4:	07ed      	lsls	r5, r5, #31
   166d6:	085b      	lsrs	r3, r3, #1
   166d8:	432b      	orrs	r3, r5
   166da:	0038      	movs	r0, r7
   166dc:	0019      	movs	r1, r3
   166de:	bc3c      	pop	{r2, r3, r4, r5}
   166e0:	4690      	mov	r8, r2
   166e2:	4699      	mov	r9, r3
   166e4:	46a2      	mov	sl, r4
   166e6:	46ab      	mov	fp, r5
   166e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   166ea:	4664      	mov	r4, ip
   166ec:	4304      	orrs	r4, r0
   166ee:	d100      	bne.n	166f2 <__aeabi_dadd+0x176>
   166f0:	e211      	b.n	16b16 <__aeabi_dadd+0x59a>
   166f2:	0004      	movs	r4, r0
   166f4:	4667      	mov	r7, ip
   166f6:	077b      	lsls	r3, r7, #29
   166f8:	d1c6      	bne.n	16688 <__aeabi_dadd+0x10c>
   166fa:	4645      	mov	r5, r8
   166fc:	0760      	lsls	r0, r4, #29
   166fe:	08ff      	lsrs	r7, r7, #3
   16700:	4307      	orrs	r7, r0
   16702:	08e4      	lsrs	r4, r4, #3
   16704:	4b7d      	ldr	r3, [pc, #500]	; (168fc <__aeabi_dadd+0x380>)
   16706:	429e      	cmp	r6, r3
   16708:	d030      	beq.n	1676c <__aeabi_dadd+0x1f0>
   1670a:	0324      	lsls	r4, r4, #12
   1670c:	0576      	lsls	r6, r6, #21
   1670e:	0b24      	lsrs	r4, r4, #12
   16710:	0d76      	lsrs	r6, r6, #21
   16712:	e7d4      	b.n	166be <__aeabi_dadd+0x142>
   16714:	1a33      	subs	r3, r6, r0
   16716:	469a      	mov	sl, r3
   16718:	2b00      	cmp	r3, #0
   1671a:	dd78      	ble.n	1680e <__aeabi_dadd+0x292>
   1671c:	2800      	cmp	r0, #0
   1671e:	d031      	beq.n	16784 <__aeabi_dadd+0x208>
   16720:	4876      	ldr	r0, [pc, #472]	; (168fc <__aeabi_dadd+0x380>)
   16722:	4286      	cmp	r6, r0
   16724:	d0ae      	beq.n	16684 <__aeabi_dadd+0x108>
   16726:	2080      	movs	r0, #128	; 0x80
   16728:	0400      	lsls	r0, r0, #16
   1672a:	4301      	orrs	r1, r0
   1672c:	4653      	mov	r3, sl
   1672e:	2b38      	cmp	r3, #56	; 0x38
   16730:	dc00      	bgt.n	16734 <__aeabi_dadd+0x1b8>
   16732:	e0e9      	b.n	16908 <__aeabi_dadd+0x38c>
   16734:	430a      	orrs	r2, r1
   16736:	1e51      	subs	r1, r2, #1
   16738:	418a      	sbcs	r2, r1
   1673a:	2100      	movs	r1, #0
   1673c:	19d2      	adds	r2, r2, r7
   1673e:	42ba      	cmp	r2, r7
   16740:	41bf      	sbcs	r7, r7
   16742:	1909      	adds	r1, r1, r4
   16744:	427c      	negs	r4, r7
   16746:	0017      	movs	r7, r2
   16748:	190c      	adds	r4, r1, r4
   1674a:	0223      	lsls	r3, r4, #8
   1674c:	d5d3      	bpl.n	166f6 <__aeabi_dadd+0x17a>
   1674e:	4b6b      	ldr	r3, [pc, #428]	; (168fc <__aeabi_dadd+0x380>)
   16750:	3601      	adds	r6, #1
   16752:	429e      	cmp	r6, r3
   16754:	d100      	bne.n	16758 <__aeabi_dadd+0x1dc>
   16756:	e13a      	b.n	169ce <__aeabi_dadd+0x452>
   16758:	2001      	movs	r0, #1
   1675a:	4b69      	ldr	r3, [pc, #420]	; (16900 <__aeabi_dadd+0x384>)
   1675c:	401c      	ands	r4, r3
   1675e:	087b      	lsrs	r3, r7, #1
   16760:	4007      	ands	r7, r0
   16762:	431f      	orrs	r7, r3
   16764:	07e0      	lsls	r0, r4, #31
   16766:	4307      	orrs	r7, r0
   16768:	0864      	lsrs	r4, r4, #1
   1676a:	e78b      	b.n	16684 <__aeabi_dadd+0x108>
   1676c:	0023      	movs	r3, r4
   1676e:	433b      	orrs	r3, r7
   16770:	d100      	bne.n	16774 <__aeabi_dadd+0x1f8>
   16772:	e1cb      	b.n	16b0c <__aeabi_dadd+0x590>
   16774:	2280      	movs	r2, #128	; 0x80
   16776:	0312      	lsls	r2, r2, #12
   16778:	4314      	orrs	r4, r2
   1677a:	0324      	lsls	r4, r4, #12
   1677c:	0b24      	lsrs	r4, r4, #12
   1677e:	e79e      	b.n	166be <__aeabi_dadd+0x142>
   16780:	002e      	movs	r6, r5
   16782:	e77f      	b.n	16684 <__aeabi_dadd+0x108>
   16784:	0008      	movs	r0, r1
   16786:	4310      	orrs	r0, r2
   16788:	d100      	bne.n	1678c <__aeabi_dadd+0x210>
   1678a:	e0b4      	b.n	168f6 <__aeabi_dadd+0x37a>
   1678c:	1e58      	subs	r0, r3, #1
   1678e:	2800      	cmp	r0, #0
   16790:	d000      	beq.n	16794 <__aeabi_dadd+0x218>
   16792:	e0de      	b.n	16952 <__aeabi_dadd+0x3d6>
   16794:	18ba      	adds	r2, r7, r2
   16796:	42ba      	cmp	r2, r7
   16798:	419b      	sbcs	r3, r3
   1679a:	1864      	adds	r4, r4, r1
   1679c:	425b      	negs	r3, r3
   1679e:	18e4      	adds	r4, r4, r3
   167a0:	0017      	movs	r7, r2
   167a2:	2601      	movs	r6, #1
   167a4:	0223      	lsls	r3, r4, #8
   167a6:	d5a6      	bpl.n	166f6 <__aeabi_dadd+0x17a>
   167a8:	2602      	movs	r6, #2
   167aa:	e7d5      	b.n	16758 <__aeabi_dadd+0x1dc>
   167ac:	2d00      	cmp	r5, #0
   167ae:	d16e      	bne.n	1688e <__aeabi_dadd+0x312>
   167b0:	1c70      	adds	r0, r6, #1
   167b2:	0540      	lsls	r0, r0, #21
   167b4:	0d40      	lsrs	r0, r0, #21
   167b6:	2801      	cmp	r0, #1
   167b8:	dc00      	bgt.n	167bc <__aeabi_dadd+0x240>
   167ba:	e0f9      	b.n	169b0 <__aeabi_dadd+0x434>
   167bc:	1ab8      	subs	r0, r7, r2
   167be:	4684      	mov	ip, r0
   167c0:	4287      	cmp	r7, r0
   167c2:	4180      	sbcs	r0, r0
   167c4:	1ae5      	subs	r5, r4, r3
   167c6:	4240      	negs	r0, r0
   167c8:	1a2d      	subs	r5, r5, r0
   167ca:	0228      	lsls	r0, r5, #8
   167cc:	d400      	bmi.n	167d0 <__aeabi_dadd+0x254>
   167ce:	e089      	b.n	168e4 <__aeabi_dadd+0x368>
   167d0:	1bd7      	subs	r7, r2, r7
   167d2:	42ba      	cmp	r2, r7
   167d4:	4192      	sbcs	r2, r2
   167d6:	1b1c      	subs	r4, r3, r4
   167d8:	4252      	negs	r2, r2
   167da:	1aa5      	subs	r5, r4, r2
   167dc:	46d8      	mov	r8, fp
   167de:	e729      	b.n	16634 <__aeabi_dadd+0xb8>
   167e0:	4645      	mov	r5, r8
   167e2:	2400      	movs	r4, #0
   167e4:	2700      	movs	r7, #0
   167e6:	e76a      	b.n	166be <__aeabi_dadd+0x142>
   167e8:	4c45      	ldr	r4, [pc, #276]	; (16900 <__aeabi_dadd+0x384>)
   167ea:	1af6      	subs	r6, r6, r3
   167ec:	402c      	ands	r4, r5
   167ee:	e749      	b.n	16684 <__aeabi_dadd+0x108>
   167f0:	003d      	movs	r5, r7
   167f2:	3828      	subs	r0, #40	; 0x28
   167f4:	4085      	lsls	r5, r0
   167f6:	2700      	movs	r7, #0
   167f8:	e72e      	b.n	16658 <__aeabi_dadd+0xdc>
   167fa:	0038      	movs	r0, r7
   167fc:	f001 fd22 	bl	18244 <__clzsi2>
   16800:	3020      	adds	r0, #32
   16802:	e71d      	b.n	16640 <__aeabi_dadd+0xc4>
   16804:	430a      	orrs	r2, r1
   16806:	1e51      	subs	r1, r2, #1
   16808:	418a      	sbcs	r2, r1
   1680a:	2100      	movs	r1, #0
   1680c:	e707      	b.n	1661e <__aeabi_dadd+0xa2>
   1680e:	2b00      	cmp	r3, #0
   16810:	d000      	beq.n	16814 <__aeabi_dadd+0x298>
   16812:	e0f3      	b.n	169fc <__aeabi_dadd+0x480>
   16814:	1c70      	adds	r0, r6, #1
   16816:	0543      	lsls	r3, r0, #21
   16818:	0d5b      	lsrs	r3, r3, #21
   1681a:	2b01      	cmp	r3, #1
   1681c:	dc00      	bgt.n	16820 <__aeabi_dadd+0x2a4>
   1681e:	e0ad      	b.n	1697c <__aeabi_dadd+0x400>
   16820:	4b36      	ldr	r3, [pc, #216]	; (168fc <__aeabi_dadd+0x380>)
   16822:	4298      	cmp	r0, r3
   16824:	d100      	bne.n	16828 <__aeabi_dadd+0x2ac>
   16826:	e0d1      	b.n	169cc <__aeabi_dadd+0x450>
   16828:	18ba      	adds	r2, r7, r2
   1682a:	42ba      	cmp	r2, r7
   1682c:	41bf      	sbcs	r7, r7
   1682e:	1864      	adds	r4, r4, r1
   16830:	427f      	negs	r7, r7
   16832:	19e4      	adds	r4, r4, r7
   16834:	07e7      	lsls	r7, r4, #31
   16836:	0852      	lsrs	r2, r2, #1
   16838:	4317      	orrs	r7, r2
   1683a:	0864      	lsrs	r4, r4, #1
   1683c:	0006      	movs	r6, r0
   1683e:	e721      	b.n	16684 <__aeabi_dadd+0x108>
   16840:	482e      	ldr	r0, [pc, #184]	; (168fc <__aeabi_dadd+0x380>)
   16842:	4285      	cmp	r5, r0
   16844:	d100      	bne.n	16848 <__aeabi_dadd+0x2cc>
   16846:	e093      	b.n	16970 <__aeabi_dadd+0x3f4>
   16848:	001d      	movs	r5, r3
   1684a:	e6d0      	b.n	165ee <__aeabi_dadd+0x72>
   1684c:	0029      	movs	r1, r5
   1684e:	3e1f      	subs	r6, #31
   16850:	40f1      	lsrs	r1, r6
   16852:	2b20      	cmp	r3, #32
   16854:	d100      	bne.n	16858 <__aeabi_dadd+0x2dc>
   16856:	e08d      	b.n	16974 <__aeabi_dadd+0x3f8>
   16858:	2240      	movs	r2, #64	; 0x40
   1685a:	1ad3      	subs	r3, r2, r3
   1685c:	409d      	lsls	r5, r3
   1685e:	432f      	orrs	r7, r5
   16860:	1e7d      	subs	r5, r7, #1
   16862:	41af      	sbcs	r7, r5
   16864:	2400      	movs	r4, #0
   16866:	430f      	orrs	r7, r1
   16868:	2600      	movs	r6, #0
   1686a:	e744      	b.n	166f6 <__aeabi_dadd+0x17a>
   1686c:	002b      	movs	r3, r5
   1686e:	0008      	movs	r0, r1
   16870:	3b20      	subs	r3, #32
   16872:	40d8      	lsrs	r0, r3
   16874:	0003      	movs	r3, r0
   16876:	2d20      	cmp	r5, #32
   16878:	d100      	bne.n	1687c <__aeabi_dadd+0x300>
   1687a:	e07d      	b.n	16978 <__aeabi_dadd+0x3fc>
   1687c:	2040      	movs	r0, #64	; 0x40
   1687e:	1b45      	subs	r5, r0, r5
   16880:	40a9      	lsls	r1, r5
   16882:	430a      	orrs	r2, r1
   16884:	1e51      	subs	r1, r2, #1
   16886:	418a      	sbcs	r2, r1
   16888:	2100      	movs	r1, #0
   1688a:	431a      	orrs	r2, r3
   1688c:	e6c7      	b.n	1661e <__aeabi_dadd+0xa2>
   1688e:	2e00      	cmp	r6, #0
   16890:	d050      	beq.n	16934 <__aeabi_dadd+0x3b8>
   16892:	4e1a      	ldr	r6, [pc, #104]	; (168fc <__aeabi_dadd+0x380>)
   16894:	42b0      	cmp	r0, r6
   16896:	d057      	beq.n	16948 <__aeabi_dadd+0x3cc>
   16898:	2680      	movs	r6, #128	; 0x80
   1689a:	426b      	negs	r3, r5
   1689c:	4699      	mov	r9, r3
   1689e:	0436      	lsls	r6, r6, #16
   168a0:	4334      	orrs	r4, r6
   168a2:	464b      	mov	r3, r9
   168a4:	2b38      	cmp	r3, #56	; 0x38
   168a6:	dd00      	ble.n	168aa <__aeabi_dadd+0x32e>
   168a8:	e0d6      	b.n	16a58 <__aeabi_dadd+0x4dc>
   168aa:	2b1f      	cmp	r3, #31
   168ac:	dd00      	ble.n	168b0 <__aeabi_dadd+0x334>
   168ae:	e135      	b.n	16b1c <__aeabi_dadd+0x5a0>
   168b0:	2620      	movs	r6, #32
   168b2:	1af5      	subs	r5, r6, r3
   168b4:	0026      	movs	r6, r4
   168b6:	40ae      	lsls	r6, r5
   168b8:	46b2      	mov	sl, r6
   168ba:	003e      	movs	r6, r7
   168bc:	40de      	lsrs	r6, r3
   168be:	46ac      	mov	ip, r5
   168c0:	0035      	movs	r5, r6
   168c2:	4656      	mov	r6, sl
   168c4:	432e      	orrs	r6, r5
   168c6:	4665      	mov	r5, ip
   168c8:	40af      	lsls	r7, r5
   168ca:	1e7d      	subs	r5, r7, #1
   168cc:	41af      	sbcs	r7, r5
   168ce:	40dc      	lsrs	r4, r3
   168d0:	4337      	orrs	r7, r6
   168d2:	1bd7      	subs	r7, r2, r7
   168d4:	42ba      	cmp	r2, r7
   168d6:	4192      	sbcs	r2, r2
   168d8:	1b0c      	subs	r4, r1, r4
   168da:	4252      	negs	r2, r2
   168dc:	1aa4      	subs	r4, r4, r2
   168de:	0006      	movs	r6, r0
   168e0:	46d8      	mov	r8, fp
   168e2:	e6a3      	b.n	1662c <__aeabi_dadd+0xb0>
   168e4:	4664      	mov	r4, ip
   168e6:	4667      	mov	r7, ip
   168e8:	432c      	orrs	r4, r5
   168ea:	d000      	beq.n	168ee <__aeabi_dadd+0x372>
   168ec:	e6a2      	b.n	16634 <__aeabi_dadd+0xb8>
   168ee:	2500      	movs	r5, #0
   168f0:	2600      	movs	r6, #0
   168f2:	2700      	movs	r7, #0
   168f4:	e706      	b.n	16704 <__aeabi_dadd+0x188>
   168f6:	001e      	movs	r6, r3
   168f8:	e6c4      	b.n	16684 <__aeabi_dadd+0x108>
   168fa:	46c0      	nop			; (mov r8, r8)
   168fc:	000007ff 	.word	0x000007ff
   16900:	ff7fffff 	.word	0xff7fffff
   16904:	800fffff 	.word	0x800fffff
   16908:	2b1f      	cmp	r3, #31
   1690a:	dc63      	bgt.n	169d4 <__aeabi_dadd+0x458>
   1690c:	2020      	movs	r0, #32
   1690e:	1ac3      	subs	r3, r0, r3
   16910:	0008      	movs	r0, r1
   16912:	4098      	lsls	r0, r3
   16914:	469c      	mov	ip, r3
   16916:	4683      	mov	fp, r0
   16918:	4653      	mov	r3, sl
   1691a:	0010      	movs	r0, r2
   1691c:	40d8      	lsrs	r0, r3
   1691e:	0003      	movs	r3, r0
   16920:	4658      	mov	r0, fp
   16922:	4318      	orrs	r0, r3
   16924:	4663      	mov	r3, ip
   16926:	409a      	lsls	r2, r3
   16928:	1e53      	subs	r3, r2, #1
   1692a:	419a      	sbcs	r2, r3
   1692c:	4653      	mov	r3, sl
   1692e:	4302      	orrs	r2, r0
   16930:	40d9      	lsrs	r1, r3
   16932:	e703      	b.n	1673c <__aeabi_dadd+0x1c0>
   16934:	0026      	movs	r6, r4
   16936:	433e      	orrs	r6, r7
   16938:	d006      	beq.n	16948 <__aeabi_dadd+0x3cc>
   1693a:	43eb      	mvns	r3, r5
   1693c:	4699      	mov	r9, r3
   1693e:	2b00      	cmp	r3, #0
   16940:	d0c7      	beq.n	168d2 <__aeabi_dadd+0x356>
   16942:	4e94      	ldr	r6, [pc, #592]	; (16b94 <__aeabi_dadd+0x618>)
   16944:	42b0      	cmp	r0, r6
   16946:	d1ac      	bne.n	168a2 <__aeabi_dadd+0x326>
   16948:	000c      	movs	r4, r1
   1694a:	0017      	movs	r7, r2
   1694c:	0006      	movs	r6, r0
   1694e:	46d8      	mov	r8, fp
   16950:	e698      	b.n	16684 <__aeabi_dadd+0x108>
   16952:	4b90      	ldr	r3, [pc, #576]	; (16b94 <__aeabi_dadd+0x618>)
   16954:	459a      	cmp	sl, r3
   16956:	d00b      	beq.n	16970 <__aeabi_dadd+0x3f4>
   16958:	4682      	mov	sl, r0
   1695a:	e6e7      	b.n	1672c <__aeabi_dadd+0x1b0>
   1695c:	2800      	cmp	r0, #0
   1695e:	d000      	beq.n	16962 <__aeabi_dadd+0x3e6>
   16960:	e09e      	b.n	16aa0 <__aeabi_dadd+0x524>
   16962:	0018      	movs	r0, r3
   16964:	4310      	orrs	r0, r2
   16966:	d100      	bne.n	1696a <__aeabi_dadd+0x3ee>
   16968:	e0e9      	b.n	16b3e <__aeabi_dadd+0x5c2>
   1696a:	001c      	movs	r4, r3
   1696c:	0017      	movs	r7, r2
   1696e:	46d8      	mov	r8, fp
   16970:	4e88      	ldr	r6, [pc, #544]	; (16b94 <__aeabi_dadd+0x618>)
   16972:	e687      	b.n	16684 <__aeabi_dadd+0x108>
   16974:	2500      	movs	r5, #0
   16976:	e772      	b.n	1685e <__aeabi_dadd+0x2e2>
   16978:	2100      	movs	r1, #0
   1697a:	e782      	b.n	16882 <__aeabi_dadd+0x306>
   1697c:	0023      	movs	r3, r4
   1697e:	433b      	orrs	r3, r7
   16980:	2e00      	cmp	r6, #0
   16982:	d000      	beq.n	16986 <__aeabi_dadd+0x40a>
   16984:	e0ab      	b.n	16ade <__aeabi_dadd+0x562>
   16986:	2b00      	cmp	r3, #0
   16988:	d100      	bne.n	1698c <__aeabi_dadd+0x410>
   1698a:	e0e7      	b.n	16b5c <__aeabi_dadd+0x5e0>
   1698c:	000b      	movs	r3, r1
   1698e:	4313      	orrs	r3, r2
   16990:	d100      	bne.n	16994 <__aeabi_dadd+0x418>
   16992:	e677      	b.n	16684 <__aeabi_dadd+0x108>
   16994:	18ba      	adds	r2, r7, r2
   16996:	42ba      	cmp	r2, r7
   16998:	41bf      	sbcs	r7, r7
   1699a:	1864      	adds	r4, r4, r1
   1699c:	427f      	negs	r7, r7
   1699e:	19e4      	adds	r4, r4, r7
   169a0:	0223      	lsls	r3, r4, #8
   169a2:	d400      	bmi.n	169a6 <__aeabi_dadd+0x42a>
   169a4:	e0f2      	b.n	16b8c <__aeabi_dadd+0x610>
   169a6:	4b7c      	ldr	r3, [pc, #496]	; (16b98 <__aeabi_dadd+0x61c>)
   169a8:	0017      	movs	r7, r2
   169aa:	401c      	ands	r4, r3
   169ac:	0006      	movs	r6, r0
   169ae:	e669      	b.n	16684 <__aeabi_dadd+0x108>
   169b0:	0020      	movs	r0, r4
   169b2:	4338      	orrs	r0, r7
   169b4:	2e00      	cmp	r6, #0
   169b6:	d1d1      	bne.n	1695c <__aeabi_dadd+0x3e0>
   169b8:	2800      	cmp	r0, #0
   169ba:	d15b      	bne.n	16a74 <__aeabi_dadd+0x4f8>
   169bc:	001c      	movs	r4, r3
   169be:	4314      	orrs	r4, r2
   169c0:	d100      	bne.n	169c4 <__aeabi_dadd+0x448>
   169c2:	e0a8      	b.n	16b16 <__aeabi_dadd+0x59a>
   169c4:	001c      	movs	r4, r3
   169c6:	0017      	movs	r7, r2
   169c8:	46d8      	mov	r8, fp
   169ca:	e65b      	b.n	16684 <__aeabi_dadd+0x108>
   169cc:	0006      	movs	r6, r0
   169ce:	2400      	movs	r4, #0
   169d0:	2700      	movs	r7, #0
   169d2:	e697      	b.n	16704 <__aeabi_dadd+0x188>
   169d4:	4650      	mov	r0, sl
   169d6:	000b      	movs	r3, r1
   169d8:	3820      	subs	r0, #32
   169da:	40c3      	lsrs	r3, r0
   169dc:	4699      	mov	r9, r3
   169de:	4653      	mov	r3, sl
   169e0:	2b20      	cmp	r3, #32
   169e2:	d100      	bne.n	169e6 <__aeabi_dadd+0x46a>
   169e4:	e095      	b.n	16b12 <__aeabi_dadd+0x596>
   169e6:	2340      	movs	r3, #64	; 0x40
   169e8:	4650      	mov	r0, sl
   169ea:	1a1b      	subs	r3, r3, r0
   169ec:	4099      	lsls	r1, r3
   169ee:	430a      	orrs	r2, r1
   169f0:	1e51      	subs	r1, r2, #1
   169f2:	418a      	sbcs	r2, r1
   169f4:	464b      	mov	r3, r9
   169f6:	2100      	movs	r1, #0
   169f8:	431a      	orrs	r2, r3
   169fa:	e69f      	b.n	1673c <__aeabi_dadd+0x1c0>
   169fc:	2e00      	cmp	r6, #0
   169fe:	d130      	bne.n	16a62 <__aeabi_dadd+0x4e6>
   16a00:	0026      	movs	r6, r4
   16a02:	433e      	orrs	r6, r7
   16a04:	d067      	beq.n	16ad6 <__aeabi_dadd+0x55a>
   16a06:	43db      	mvns	r3, r3
   16a08:	469a      	mov	sl, r3
   16a0a:	2b00      	cmp	r3, #0
   16a0c:	d01c      	beq.n	16a48 <__aeabi_dadd+0x4cc>
   16a0e:	4e61      	ldr	r6, [pc, #388]	; (16b94 <__aeabi_dadd+0x618>)
   16a10:	42b0      	cmp	r0, r6
   16a12:	d060      	beq.n	16ad6 <__aeabi_dadd+0x55a>
   16a14:	4653      	mov	r3, sl
   16a16:	2b38      	cmp	r3, #56	; 0x38
   16a18:	dd00      	ble.n	16a1c <__aeabi_dadd+0x4a0>
   16a1a:	e096      	b.n	16b4a <__aeabi_dadd+0x5ce>
   16a1c:	2b1f      	cmp	r3, #31
   16a1e:	dd00      	ble.n	16a22 <__aeabi_dadd+0x4a6>
   16a20:	e09f      	b.n	16b62 <__aeabi_dadd+0x5e6>
   16a22:	2620      	movs	r6, #32
   16a24:	1af3      	subs	r3, r6, r3
   16a26:	0026      	movs	r6, r4
   16a28:	409e      	lsls	r6, r3
   16a2a:	469c      	mov	ip, r3
   16a2c:	46b3      	mov	fp, r6
   16a2e:	4653      	mov	r3, sl
   16a30:	003e      	movs	r6, r7
   16a32:	40de      	lsrs	r6, r3
   16a34:	0033      	movs	r3, r6
   16a36:	465e      	mov	r6, fp
   16a38:	431e      	orrs	r6, r3
   16a3a:	4663      	mov	r3, ip
   16a3c:	409f      	lsls	r7, r3
   16a3e:	1e7b      	subs	r3, r7, #1
   16a40:	419f      	sbcs	r7, r3
   16a42:	4653      	mov	r3, sl
   16a44:	40dc      	lsrs	r4, r3
   16a46:	4337      	orrs	r7, r6
   16a48:	18bf      	adds	r7, r7, r2
   16a4a:	4297      	cmp	r7, r2
   16a4c:	4192      	sbcs	r2, r2
   16a4e:	1864      	adds	r4, r4, r1
   16a50:	4252      	negs	r2, r2
   16a52:	18a4      	adds	r4, r4, r2
   16a54:	0006      	movs	r6, r0
   16a56:	e678      	b.n	1674a <__aeabi_dadd+0x1ce>
   16a58:	4327      	orrs	r7, r4
   16a5a:	1e7c      	subs	r4, r7, #1
   16a5c:	41a7      	sbcs	r7, r4
   16a5e:	2400      	movs	r4, #0
   16a60:	e737      	b.n	168d2 <__aeabi_dadd+0x356>
   16a62:	4e4c      	ldr	r6, [pc, #304]	; (16b94 <__aeabi_dadd+0x618>)
   16a64:	42b0      	cmp	r0, r6
   16a66:	d036      	beq.n	16ad6 <__aeabi_dadd+0x55a>
   16a68:	2680      	movs	r6, #128	; 0x80
   16a6a:	425b      	negs	r3, r3
   16a6c:	0436      	lsls	r6, r6, #16
   16a6e:	469a      	mov	sl, r3
   16a70:	4334      	orrs	r4, r6
   16a72:	e7cf      	b.n	16a14 <__aeabi_dadd+0x498>
   16a74:	0018      	movs	r0, r3
   16a76:	4310      	orrs	r0, r2
   16a78:	d100      	bne.n	16a7c <__aeabi_dadd+0x500>
   16a7a:	e603      	b.n	16684 <__aeabi_dadd+0x108>
   16a7c:	1ab8      	subs	r0, r7, r2
   16a7e:	4684      	mov	ip, r0
   16a80:	4567      	cmp	r7, ip
   16a82:	41ad      	sbcs	r5, r5
   16a84:	1ae0      	subs	r0, r4, r3
   16a86:	426d      	negs	r5, r5
   16a88:	1b40      	subs	r0, r0, r5
   16a8a:	0205      	lsls	r5, r0, #8
   16a8c:	d400      	bmi.n	16a90 <__aeabi_dadd+0x514>
   16a8e:	e62c      	b.n	166ea <__aeabi_dadd+0x16e>
   16a90:	1bd7      	subs	r7, r2, r7
   16a92:	42ba      	cmp	r2, r7
   16a94:	4192      	sbcs	r2, r2
   16a96:	1b1c      	subs	r4, r3, r4
   16a98:	4252      	negs	r2, r2
   16a9a:	1aa4      	subs	r4, r4, r2
   16a9c:	46d8      	mov	r8, fp
   16a9e:	e5f1      	b.n	16684 <__aeabi_dadd+0x108>
   16aa0:	0018      	movs	r0, r3
   16aa2:	4310      	orrs	r0, r2
   16aa4:	d100      	bne.n	16aa8 <__aeabi_dadd+0x52c>
   16aa6:	e763      	b.n	16970 <__aeabi_dadd+0x3f4>
   16aa8:	08f8      	lsrs	r0, r7, #3
   16aaa:	0767      	lsls	r7, r4, #29
   16aac:	4307      	orrs	r7, r0
   16aae:	2080      	movs	r0, #128	; 0x80
   16ab0:	08e4      	lsrs	r4, r4, #3
   16ab2:	0300      	lsls	r0, r0, #12
   16ab4:	4204      	tst	r4, r0
   16ab6:	d008      	beq.n	16aca <__aeabi_dadd+0x54e>
   16ab8:	08dd      	lsrs	r5, r3, #3
   16aba:	4205      	tst	r5, r0
   16abc:	d105      	bne.n	16aca <__aeabi_dadd+0x54e>
   16abe:	08d2      	lsrs	r2, r2, #3
   16ac0:	0759      	lsls	r1, r3, #29
   16ac2:	4311      	orrs	r1, r2
   16ac4:	000f      	movs	r7, r1
   16ac6:	002c      	movs	r4, r5
   16ac8:	46d8      	mov	r8, fp
   16aca:	0f7b      	lsrs	r3, r7, #29
   16acc:	00e4      	lsls	r4, r4, #3
   16ace:	431c      	orrs	r4, r3
   16ad0:	00ff      	lsls	r7, r7, #3
   16ad2:	4e30      	ldr	r6, [pc, #192]	; (16b94 <__aeabi_dadd+0x618>)
   16ad4:	e5d6      	b.n	16684 <__aeabi_dadd+0x108>
   16ad6:	000c      	movs	r4, r1
   16ad8:	0017      	movs	r7, r2
   16ada:	0006      	movs	r6, r0
   16adc:	e5d2      	b.n	16684 <__aeabi_dadd+0x108>
   16ade:	2b00      	cmp	r3, #0
   16ae0:	d038      	beq.n	16b54 <__aeabi_dadd+0x5d8>
   16ae2:	000b      	movs	r3, r1
   16ae4:	4313      	orrs	r3, r2
   16ae6:	d100      	bne.n	16aea <__aeabi_dadd+0x56e>
   16ae8:	e742      	b.n	16970 <__aeabi_dadd+0x3f4>
   16aea:	08f8      	lsrs	r0, r7, #3
   16aec:	0767      	lsls	r7, r4, #29
   16aee:	4307      	orrs	r7, r0
   16af0:	2080      	movs	r0, #128	; 0x80
   16af2:	08e4      	lsrs	r4, r4, #3
   16af4:	0300      	lsls	r0, r0, #12
   16af6:	4204      	tst	r4, r0
   16af8:	d0e7      	beq.n	16aca <__aeabi_dadd+0x54e>
   16afa:	08cb      	lsrs	r3, r1, #3
   16afc:	4203      	tst	r3, r0
   16afe:	d1e4      	bne.n	16aca <__aeabi_dadd+0x54e>
   16b00:	08d2      	lsrs	r2, r2, #3
   16b02:	0749      	lsls	r1, r1, #29
   16b04:	4311      	orrs	r1, r2
   16b06:	000f      	movs	r7, r1
   16b08:	001c      	movs	r4, r3
   16b0a:	e7de      	b.n	16aca <__aeabi_dadd+0x54e>
   16b0c:	2700      	movs	r7, #0
   16b0e:	2400      	movs	r4, #0
   16b10:	e5d5      	b.n	166be <__aeabi_dadd+0x142>
   16b12:	2100      	movs	r1, #0
   16b14:	e76b      	b.n	169ee <__aeabi_dadd+0x472>
   16b16:	2500      	movs	r5, #0
   16b18:	2700      	movs	r7, #0
   16b1a:	e5f3      	b.n	16704 <__aeabi_dadd+0x188>
   16b1c:	464e      	mov	r6, r9
   16b1e:	0025      	movs	r5, r4
   16b20:	3e20      	subs	r6, #32
   16b22:	40f5      	lsrs	r5, r6
   16b24:	464b      	mov	r3, r9
   16b26:	002e      	movs	r6, r5
   16b28:	2b20      	cmp	r3, #32
   16b2a:	d02d      	beq.n	16b88 <__aeabi_dadd+0x60c>
   16b2c:	2540      	movs	r5, #64	; 0x40
   16b2e:	1aed      	subs	r5, r5, r3
   16b30:	40ac      	lsls	r4, r5
   16b32:	4327      	orrs	r7, r4
   16b34:	1e7c      	subs	r4, r7, #1
   16b36:	41a7      	sbcs	r7, r4
   16b38:	2400      	movs	r4, #0
   16b3a:	4337      	orrs	r7, r6
   16b3c:	e6c9      	b.n	168d2 <__aeabi_dadd+0x356>
   16b3e:	2480      	movs	r4, #128	; 0x80
   16b40:	2500      	movs	r5, #0
   16b42:	0324      	lsls	r4, r4, #12
   16b44:	4e13      	ldr	r6, [pc, #76]	; (16b94 <__aeabi_dadd+0x618>)
   16b46:	2700      	movs	r7, #0
   16b48:	e5dc      	b.n	16704 <__aeabi_dadd+0x188>
   16b4a:	4327      	orrs	r7, r4
   16b4c:	1e7c      	subs	r4, r7, #1
   16b4e:	41a7      	sbcs	r7, r4
   16b50:	2400      	movs	r4, #0
   16b52:	e779      	b.n	16a48 <__aeabi_dadd+0x4cc>
   16b54:	000c      	movs	r4, r1
   16b56:	0017      	movs	r7, r2
   16b58:	4e0e      	ldr	r6, [pc, #56]	; (16b94 <__aeabi_dadd+0x618>)
   16b5a:	e593      	b.n	16684 <__aeabi_dadd+0x108>
   16b5c:	000c      	movs	r4, r1
   16b5e:	0017      	movs	r7, r2
   16b60:	e590      	b.n	16684 <__aeabi_dadd+0x108>
   16b62:	4656      	mov	r6, sl
   16b64:	0023      	movs	r3, r4
   16b66:	3e20      	subs	r6, #32
   16b68:	40f3      	lsrs	r3, r6
   16b6a:	4699      	mov	r9, r3
   16b6c:	4653      	mov	r3, sl
   16b6e:	2b20      	cmp	r3, #32
   16b70:	d00e      	beq.n	16b90 <__aeabi_dadd+0x614>
   16b72:	2340      	movs	r3, #64	; 0x40
   16b74:	4656      	mov	r6, sl
   16b76:	1b9b      	subs	r3, r3, r6
   16b78:	409c      	lsls	r4, r3
   16b7a:	4327      	orrs	r7, r4
   16b7c:	1e7c      	subs	r4, r7, #1
   16b7e:	41a7      	sbcs	r7, r4
   16b80:	464b      	mov	r3, r9
   16b82:	2400      	movs	r4, #0
   16b84:	431f      	orrs	r7, r3
   16b86:	e75f      	b.n	16a48 <__aeabi_dadd+0x4cc>
   16b88:	2400      	movs	r4, #0
   16b8a:	e7d2      	b.n	16b32 <__aeabi_dadd+0x5b6>
   16b8c:	0017      	movs	r7, r2
   16b8e:	e5b2      	b.n	166f6 <__aeabi_dadd+0x17a>
   16b90:	2400      	movs	r4, #0
   16b92:	e7f2      	b.n	16b7a <__aeabi_dadd+0x5fe>
   16b94:	000007ff 	.word	0x000007ff
   16b98:	ff7fffff 	.word	0xff7fffff

00016b9c <__aeabi_ddiv>:
   16b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   16b9e:	4657      	mov	r7, sl
   16ba0:	4645      	mov	r5, r8
   16ba2:	46de      	mov	lr, fp
   16ba4:	464e      	mov	r6, r9
   16ba6:	b5e0      	push	{r5, r6, r7, lr}
   16ba8:	004c      	lsls	r4, r1, #1
   16baa:	030e      	lsls	r6, r1, #12
   16bac:	b087      	sub	sp, #28
   16bae:	4683      	mov	fp, r0
   16bb0:	4692      	mov	sl, r2
   16bb2:	001d      	movs	r5, r3
   16bb4:	4680      	mov	r8, r0
   16bb6:	0b36      	lsrs	r6, r6, #12
   16bb8:	0d64      	lsrs	r4, r4, #21
   16bba:	0fcf      	lsrs	r7, r1, #31
   16bbc:	2c00      	cmp	r4, #0
   16bbe:	d04f      	beq.n	16c60 <__aeabi_ddiv+0xc4>
   16bc0:	4b6f      	ldr	r3, [pc, #444]	; (16d80 <__aeabi_ddiv+0x1e4>)
   16bc2:	429c      	cmp	r4, r3
   16bc4:	d035      	beq.n	16c32 <__aeabi_ddiv+0x96>
   16bc6:	2380      	movs	r3, #128	; 0x80
   16bc8:	0f42      	lsrs	r2, r0, #29
   16bca:	041b      	lsls	r3, r3, #16
   16bcc:	00f6      	lsls	r6, r6, #3
   16bce:	4313      	orrs	r3, r2
   16bd0:	4333      	orrs	r3, r6
   16bd2:	4699      	mov	r9, r3
   16bd4:	00c3      	lsls	r3, r0, #3
   16bd6:	4698      	mov	r8, r3
   16bd8:	4b6a      	ldr	r3, [pc, #424]	; (16d84 <__aeabi_ddiv+0x1e8>)
   16bda:	2600      	movs	r6, #0
   16bdc:	469c      	mov	ip, r3
   16bde:	2300      	movs	r3, #0
   16be0:	4464      	add	r4, ip
   16be2:	9303      	str	r3, [sp, #12]
   16be4:	032b      	lsls	r3, r5, #12
   16be6:	0b1b      	lsrs	r3, r3, #12
   16be8:	469b      	mov	fp, r3
   16bea:	006b      	lsls	r3, r5, #1
   16bec:	0fed      	lsrs	r5, r5, #31
   16bee:	4650      	mov	r0, sl
   16bf0:	0d5b      	lsrs	r3, r3, #21
   16bf2:	9501      	str	r5, [sp, #4]
   16bf4:	d05e      	beq.n	16cb4 <__aeabi_ddiv+0x118>
   16bf6:	4a62      	ldr	r2, [pc, #392]	; (16d80 <__aeabi_ddiv+0x1e4>)
   16bf8:	4293      	cmp	r3, r2
   16bfa:	d053      	beq.n	16ca4 <__aeabi_ddiv+0x108>
   16bfc:	465a      	mov	r2, fp
   16bfe:	00d1      	lsls	r1, r2, #3
   16c00:	2280      	movs	r2, #128	; 0x80
   16c02:	0f40      	lsrs	r0, r0, #29
   16c04:	0412      	lsls	r2, r2, #16
   16c06:	4302      	orrs	r2, r0
   16c08:	430a      	orrs	r2, r1
   16c0a:	4693      	mov	fp, r2
   16c0c:	4652      	mov	r2, sl
   16c0e:	00d1      	lsls	r1, r2, #3
   16c10:	4a5c      	ldr	r2, [pc, #368]	; (16d84 <__aeabi_ddiv+0x1e8>)
   16c12:	4694      	mov	ip, r2
   16c14:	2200      	movs	r2, #0
   16c16:	4463      	add	r3, ip
   16c18:	0038      	movs	r0, r7
   16c1a:	4068      	eors	r0, r5
   16c1c:	4684      	mov	ip, r0
   16c1e:	9002      	str	r0, [sp, #8]
   16c20:	1ae4      	subs	r4, r4, r3
   16c22:	4316      	orrs	r6, r2
   16c24:	2e0f      	cmp	r6, #15
   16c26:	d900      	bls.n	16c2a <__aeabi_ddiv+0x8e>
   16c28:	e0b4      	b.n	16d94 <__aeabi_ddiv+0x1f8>
   16c2a:	4b57      	ldr	r3, [pc, #348]	; (16d88 <__aeabi_ddiv+0x1ec>)
   16c2c:	00b6      	lsls	r6, r6, #2
   16c2e:	599b      	ldr	r3, [r3, r6]
   16c30:	469f      	mov	pc, r3
   16c32:	0003      	movs	r3, r0
   16c34:	4333      	orrs	r3, r6
   16c36:	4699      	mov	r9, r3
   16c38:	d16c      	bne.n	16d14 <__aeabi_ddiv+0x178>
   16c3a:	2300      	movs	r3, #0
   16c3c:	4698      	mov	r8, r3
   16c3e:	3302      	adds	r3, #2
   16c40:	2608      	movs	r6, #8
   16c42:	9303      	str	r3, [sp, #12]
   16c44:	e7ce      	b.n	16be4 <__aeabi_ddiv+0x48>
   16c46:	46cb      	mov	fp, r9
   16c48:	4641      	mov	r1, r8
   16c4a:	9a03      	ldr	r2, [sp, #12]
   16c4c:	9701      	str	r7, [sp, #4]
   16c4e:	2a02      	cmp	r2, #2
   16c50:	d165      	bne.n	16d1e <__aeabi_ddiv+0x182>
   16c52:	9b01      	ldr	r3, [sp, #4]
   16c54:	4c4a      	ldr	r4, [pc, #296]	; (16d80 <__aeabi_ddiv+0x1e4>)
   16c56:	469c      	mov	ip, r3
   16c58:	2300      	movs	r3, #0
   16c5a:	2200      	movs	r2, #0
   16c5c:	4698      	mov	r8, r3
   16c5e:	e06b      	b.n	16d38 <__aeabi_ddiv+0x19c>
   16c60:	0003      	movs	r3, r0
   16c62:	4333      	orrs	r3, r6
   16c64:	4699      	mov	r9, r3
   16c66:	d04e      	beq.n	16d06 <__aeabi_ddiv+0x16a>
   16c68:	2e00      	cmp	r6, #0
   16c6a:	d100      	bne.n	16c6e <__aeabi_ddiv+0xd2>
   16c6c:	e1bc      	b.n	16fe8 <__aeabi_ddiv+0x44c>
   16c6e:	0030      	movs	r0, r6
   16c70:	f001 fae8 	bl	18244 <__clzsi2>
   16c74:	0003      	movs	r3, r0
   16c76:	3b0b      	subs	r3, #11
   16c78:	2b1c      	cmp	r3, #28
   16c7a:	dd00      	ble.n	16c7e <__aeabi_ddiv+0xe2>
   16c7c:	e1ac      	b.n	16fd8 <__aeabi_ddiv+0x43c>
   16c7e:	221d      	movs	r2, #29
   16c80:	1ad3      	subs	r3, r2, r3
   16c82:	465a      	mov	r2, fp
   16c84:	0001      	movs	r1, r0
   16c86:	40da      	lsrs	r2, r3
   16c88:	3908      	subs	r1, #8
   16c8a:	408e      	lsls	r6, r1
   16c8c:	0013      	movs	r3, r2
   16c8e:	4333      	orrs	r3, r6
   16c90:	4699      	mov	r9, r3
   16c92:	465b      	mov	r3, fp
   16c94:	408b      	lsls	r3, r1
   16c96:	4698      	mov	r8, r3
   16c98:	2300      	movs	r3, #0
   16c9a:	4c3c      	ldr	r4, [pc, #240]	; (16d8c <__aeabi_ddiv+0x1f0>)
   16c9c:	2600      	movs	r6, #0
   16c9e:	1a24      	subs	r4, r4, r0
   16ca0:	9303      	str	r3, [sp, #12]
   16ca2:	e79f      	b.n	16be4 <__aeabi_ddiv+0x48>
   16ca4:	4651      	mov	r1, sl
   16ca6:	465a      	mov	r2, fp
   16ca8:	4311      	orrs	r1, r2
   16caa:	d129      	bne.n	16d00 <__aeabi_ddiv+0x164>
   16cac:	2200      	movs	r2, #0
   16cae:	4693      	mov	fp, r2
   16cb0:	3202      	adds	r2, #2
   16cb2:	e7b1      	b.n	16c18 <__aeabi_ddiv+0x7c>
   16cb4:	4659      	mov	r1, fp
   16cb6:	4301      	orrs	r1, r0
   16cb8:	d01e      	beq.n	16cf8 <__aeabi_ddiv+0x15c>
   16cba:	465b      	mov	r3, fp
   16cbc:	2b00      	cmp	r3, #0
   16cbe:	d100      	bne.n	16cc2 <__aeabi_ddiv+0x126>
   16cc0:	e19e      	b.n	17000 <__aeabi_ddiv+0x464>
   16cc2:	4658      	mov	r0, fp
   16cc4:	f001 fabe 	bl	18244 <__clzsi2>
   16cc8:	0003      	movs	r3, r0
   16cca:	3b0b      	subs	r3, #11
   16ccc:	2b1c      	cmp	r3, #28
   16cce:	dd00      	ble.n	16cd2 <__aeabi_ddiv+0x136>
   16cd0:	e18f      	b.n	16ff2 <__aeabi_ddiv+0x456>
   16cd2:	0002      	movs	r2, r0
   16cd4:	4659      	mov	r1, fp
   16cd6:	3a08      	subs	r2, #8
   16cd8:	4091      	lsls	r1, r2
   16cda:	468b      	mov	fp, r1
   16cdc:	211d      	movs	r1, #29
   16cde:	1acb      	subs	r3, r1, r3
   16ce0:	4651      	mov	r1, sl
   16ce2:	40d9      	lsrs	r1, r3
   16ce4:	000b      	movs	r3, r1
   16ce6:	4659      	mov	r1, fp
   16ce8:	430b      	orrs	r3, r1
   16cea:	4651      	mov	r1, sl
   16cec:	469b      	mov	fp, r3
   16cee:	4091      	lsls	r1, r2
   16cf0:	4b26      	ldr	r3, [pc, #152]	; (16d8c <__aeabi_ddiv+0x1f0>)
   16cf2:	2200      	movs	r2, #0
   16cf4:	1a1b      	subs	r3, r3, r0
   16cf6:	e78f      	b.n	16c18 <__aeabi_ddiv+0x7c>
   16cf8:	2300      	movs	r3, #0
   16cfa:	2201      	movs	r2, #1
   16cfc:	469b      	mov	fp, r3
   16cfe:	e78b      	b.n	16c18 <__aeabi_ddiv+0x7c>
   16d00:	4651      	mov	r1, sl
   16d02:	2203      	movs	r2, #3
   16d04:	e788      	b.n	16c18 <__aeabi_ddiv+0x7c>
   16d06:	2300      	movs	r3, #0
   16d08:	4698      	mov	r8, r3
   16d0a:	3301      	adds	r3, #1
   16d0c:	2604      	movs	r6, #4
   16d0e:	2400      	movs	r4, #0
   16d10:	9303      	str	r3, [sp, #12]
   16d12:	e767      	b.n	16be4 <__aeabi_ddiv+0x48>
   16d14:	2303      	movs	r3, #3
   16d16:	46b1      	mov	r9, r6
   16d18:	9303      	str	r3, [sp, #12]
   16d1a:	260c      	movs	r6, #12
   16d1c:	e762      	b.n	16be4 <__aeabi_ddiv+0x48>
   16d1e:	2a03      	cmp	r2, #3
   16d20:	d100      	bne.n	16d24 <__aeabi_ddiv+0x188>
   16d22:	e25c      	b.n	171de <__aeabi_ddiv+0x642>
   16d24:	9b01      	ldr	r3, [sp, #4]
   16d26:	2a01      	cmp	r2, #1
   16d28:	d000      	beq.n	16d2c <__aeabi_ddiv+0x190>
   16d2a:	e1e4      	b.n	170f6 <__aeabi_ddiv+0x55a>
   16d2c:	4013      	ands	r3, r2
   16d2e:	469c      	mov	ip, r3
   16d30:	2300      	movs	r3, #0
   16d32:	2400      	movs	r4, #0
   16d34:	2200      	movs	r2, #0
   16d36:	4698      	mov	r8, r3
   16d38:	2100      	movs	r1, #0
   16d3a:	0312      	lsls	r2, r2, #12
   16d3c:	0b13      	lsrs	r3, r2, #12
   16d3e:	0d0a      	lsrs	r2, r1, #20
   16d40:	0512      	lsls	r2, r2, #20
   16d42:	431a      	orrs	r2, r3
   16d44:	0523      	lsls	r3, r4, #20
   16d46:	4c12      	ldr	r4, [pc, #72]	; (16d90 <__aeabi_ddiv+0x1f4>)
   16d48:	4640      	mov	r0, r8
   16d4a:	4022      	ands	r2, r4
   16d4c:	4313      	orrs	r3, r2
   16d4e:	4662      	mov	r2, ip
   16d50:	005b      	lsls	r3, r3, #1
   16d52:	07d2      	lsls	r2, r2, #31
   16d54:	085b      	lsrs	r3, r3, #1
   16d56:	4313      	orrs	r3, r2
   16d58:	0019      	movs	r1, r3
   16d5a:	b007      	add	sp, #28
   16d5c:	bc3c      	pop	{r2, r3, r4, r5}
   16d5e:	4690      	mov	r8, r2
   16d60:	4699      	mov	r9, r3
   16d62:	46a2      	mov	sl, r4
   16d64:	46ab      	mov	fp, r5
   16d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16d68:	2300      	movs	r3, #0
   16d6a:	2280      	movs	r2, #128	; 0x80
   16d6c:	469c      	mov	ip, r3
   16d6e:	0312      	lsls	r2, r2, #12
   16d70:	4698      	mov	r8, r3
   16d72:	4c03      	ldr	r4, [pc, #12]	; (16d80 <__aeabi_ddiv+0x1e4>)
   16d74:	e7e0      	b.n	16d38 <__aeabi_ddiv+0x19c>
   16d76:	2300      	movs	r3, #0
   16d78:	4c01      	ldr	r4, [pc, #4]	; (16d80 <__aeabi_ddiv+0x1e4>)
   16d7a:	2200      	movs	r2, #0
   16d7c:	4698      	mov	r8, r3
   16d7e:	e7db      	b.n	16d38 <__aeabi_ddiv+0x19c>
   16d80:	000007ff 	.word	0x000007ff
   16d84:	fffffc01 	.word	0xfffffc01
   16d88:	0001b0dc 	.word	0x0001b0dc
   16d8c:	fffffc0d 	.word	0xfffffc0d
   16d90:	800fffff 	.word	0x800fffff
   16d94:	45d9      	cmp	r9, fp
   16d96:	d900      	bls.n	16d9a <__aeabi_ddiv+0x1fe>
   16d98:	e139      	b.n	1700e <__aeabi_ddiv+0x472>
   16d9a:	d100      	bne.n	16d9e <__aeabi_ddiv+0x202>
   16d9c:	e134      	b.n	17008 <__aeabi_ddiv+0x46c>
   16d9e:	2300      	movs	r3, #0
   16da0:	4646      	mov	r6, r8
   16da2:	464d      	mov	r5, r9
   16da4:	469a      	mov	sl, r3
   16da6:	3c01      	subs	r4, #1
   16da8:	465b      	mov	r3, fp
   16daa:	0e0a      	lsrs	r2, r1, #24
   16dac:	021b      	lsls	r3, r3, #8
   16dae:	431a      	orrs	r2, r3
   16db0:	020b      	lsls	r3, r1, #8
   16db2:	0c17      	lsrs	r7, r2, #16
   16db4:	9303      	str	r3, [sp, #12]
   16db6:	0413      	lsls	r3, r2, #16
   16db8:	0c1b      	lsrs	r3, r3, #16
   16dba:	0039      	movs	r1, r7
   16dbc:	0028      	movs	r0, r5
   16dbe:	4690      	mov	r8, r2
   16dc0:	9301      	str	r3, [sp, #4]
   16dc2:	f7fe f999 	bl	150f8 <__udivsi3>
   16dc6:	0002      	movs	r2, r0
   16dc8:	9b01      	ldr	r3, [sp, #4]
   16dca:	4683      	mov	fp, r0
   16dcc:	435a      	muls	r2, r3
   16dce:	0028      	movs	r0, r5
   16dd0:	0039      	movs	r1, r7
   16dd2:	4691      	mov	r9, r2
   16dd4:	f7fe fa16 	bl	15204 <__aeabi_uidivmod>
   16dd8:	0c35      	lsrs	r5, r6, #16
   16dda:	0409      	lsls	r1, r1, #16
   16ddc:	430d      	orrs	r5, r1
   16dde:	45a9      	cmp	r9, r5
   16de0:	d90d      	bls.n	16dfe <__aeabi_ddiv+0x262>
   16de2:	465b      	mov	r3, fp
   16de4:	4445      	add	r5, r8
   16de6:	3b01      	subs	r3, #1
   16de8:	45a8      	cmp	r8, r5
   16dea:	d900      	bls.n	16dee <__aeabi_ddiv+0x252>
   16dec:	e13a      	b.n	17064 <__aeabi_ddiv+0x4c8>
   16dee:	45a9      	cmp	r9, r5
   16df0:	d800      	bhi.n	16df4 <__aeabi_ddiv+0x258>
   16df2:	e137      	b.n	17064 <__aeabi_ddiv+0x4c8>
   16df4:	2302      	movs	r3, #2
   16df6:	425b      	negs	r3, r3
   16df8:	469c      	mov	ip, r3
   16dfa:	4445      	add	r5, r8
   16dfc:	44e3      	add	fp, ip
   16dfe:	464b      	mov	r3, r9
   16e00:	1aeb      	subs	r3, r5, r3
   16e02:	0039      	movs	r1, r7
   16e04:	0018      	movs	r0, r3
   16e06:	9304      	str	r3, [sp, #16]
   16e08:	f7fe f976 	bl	150f8 <__udivsi3>
   16e0c:	9b01      	ldr	r3, [sp, #4]
   16e0e:	0005      	movs	r5, r0
   16e10:	4343      	muls	r3, r0
   16e12:	0039      	movs	r1, r7
   16e14:	9804      	ldr	r0, [sp, #16]
   16e16:	4699      	mov	r9, r3
   16e18:	f7fe f9f4 	bl	15204 <__aeabi_uidivmod>
   16e1c:	0433      	lsls	r3, r6, #16
   16e1e:	0409      	lsls	r1, r1, #16
   16e20:	0c1b      	lsrs	r3, r3, #16
   16e22:	430b      	orrs	r3, r1
   16e24:	4599      	cmp	r9, r3
   16e26:	d909      	bls.n	16e3c <__aeabi_ddiv+0x2a0>
   16e28:	4443      	add	r3, r8
   16e2a:	1e6a      	subs	r2, r5, #1
   16e2c:	4598      	cmp	r8, r3
   16e2e:	d900      	bls.n	16e32 <__aeabi_ddiv+0x296>
   16e30:	e11a      	b.n	17068 <__aeabi_ddiv+0x4cc>
   16e32:	4599      	cmp	r9, r3
   16e34:	d800      	bhi.n	16e38 <__aeabi_ddiv+0x29c>
   16e36:	e117      	b.n	17068 <__aeabi_ddiv+0x4cc>
   16e38:	3d02      	subs	r5, #2
   16e3a:	4443      	add	r3, r8
   16e3c:	464a      	mov	r2, r9
   16e3e:	1a9b      	subs	r3, r3, r2
   16e40:	465a      	mov	r2, fp
   16e42:	0412      	lsls	r2, r2, #16
   16e44:	432a      	orrs	r2, r5
   16e46:	9903      	ldr	r1, [sp, #12]
   16e48:	4693      	mov	fp, r2
   16e4a:	0c10      	lsrs	r0, r2, #16
   16e4c:	0c0a      	lsrs	r2, r1, #16
   16e4e:	4691      	mov	r9, r2
   16e50:	0409      	lsls	r1, r1, #16
   16e52:	465a      	mov	r2, fp
   16e54:	0c09      	lsrs	r1, r1, #16
   16e56:	464e      	mov	r6, r9
   16e58:	000d      	movs	r5, r1
   16e5a:	0412      	lsls	r2, r2, #16
   16e5c:	0c12      	lsrs	r2, r2, #16
   16e5e:	4345      	muls	r5, r0
   16e60:	9105      	str	r1, [sp, #20]
   16e62:	4351      	muls	r1, r2
   16e64:	4372      	muls	r2, r6
   16e66:	4370      	muls	r0, r6
   16e68:	1952      	adds	r2, r2, r5
   16e6a:	0c0e      	lsrs	r6, r1, #16
   16e6c:	18b2      	adds	r2, r6, r2
   16e6e:	4295      	cmp	r5, r2
   16e70:	d903      	bls.n	16e7a <__aeabi_ddiv+0x2de>
   16e72:	2580      	movs	r5, #128	; 0x80
   16e74:	026d      	lsls	r5, r5, #9
   16e76:	46ac      	mov	ip, r5
   16e78:	4460      	add	r0, ip
   16e7a:	0c15      	lsrs	r5, r2, #16
   16e7c:	0409      	lsls	r1, r1, #16
   16e7e:	0412      	lsls	r2, r2, #16
   16e80:	0c09      	lsrs	r1, r1, #16
   16e82:	1828      	adds	r0, r5, r0
   16e84:	1852      	adds	r2, r2, r1
   16e86:	4283      	cmp	r3, r0
   16e88:	d200      	bcs.n	16e8c <__aeabi_ddiv+0x2f0>
   16e8a:	e0ce      	b.n	1702a <__aeabi_ddiv+0x48e>
   16e8c:	d100      	bne.n	16e90 <__aeabi_ddiv+0x2f4>
   16e8e:	e0c8      	b.n	17022 <__aeabi_ddiv+0x486>
   16e90:	1a1d      	subs	r5, r3, r0
   16e92:	4653      	mov	r3, sl
   16e94:	1a9e      	subs	r6, r3, r2
   16e96:	45b2      	cmp	sl, r6
   16e98:	4192      	sbcs	r2, r2
   16e9a:	4252      	negs	r2, r2
   16e9c:	1aab      	subs	r3, r5, r2
   16e9e:	469a      	mov	sl, r3
   16ea0:	4598      	cmp	r8, r3
   16ea2:	d100      	bne.n	16ea6 <__aeabi_ddiv+0x30a>
   16ea4:	e117      	b.n	170d6 <__aeabi_ddiv+0x53a>
   16ea6:	0039      	movs	r1, r7
   16ea8:	0018      	movs	r0, r3
   16eaa:	f7fe f925 	bl	150f8 <__udivsi3>
   16eae:	9b01      	ldr	r3, [sp, #4]
   16eb0:	0005      	movs	r5, r0
   16eb2:	4343      	muls	r3, r0
   16eb4:	0039      	movs	r1, r7
   16eb6:	4650      	mov	r0, sl
   16eb8:	9304      	str	r3, [sp, #16]
   16eba:	f7fe f9a3 	bl	15204 <__aeabi_uidivmod>
   16ebe:	9804      	ldr	r0, [sp, #16]
   16ec0:	040b      	lsls	r3, r1, #16
   16ec2:	0c31      	lsrs	r1, r6, #16
   16ec4:	4319      	orrs	r1, r3
   16ec6:	4288      	cmp	r0, r1
   16ec8:	d909      	bls.n	16ede <__aeabi_ddiv+0x342>
   16eca:	4441      	add	r1, r8
   16ecc:	1e6b      	subs	r3, r5, #1
   16ece:	4588      	cmp	r8, r1
   16ed0:	d900      	bls.n	16ed4 <__aeabi_ddiv+0x338>
   16ed2:	e107      	b.n	170e4 <__aeabi_ddiv+0x548>
   16ed4:	4288      	cmp	r0, r1
   16ed6:	d800      	bhi.n	16eda <__aeabi_ddiv+0x33e>
   16ed8:	e104      	b.n	170e4 <__aeabi_ddiv+0x548>
   16eda:	3d02      	subs	r5, #2
   16edc:	4441      	add	r1, r8
   16ede:	9b04      	ldr	r3, [sp, #16]
   16ee0:	1acb      	subs	r3, r1, r3
   16ee2:	0018      	movs	r0, r3
   16ee4:	0039      	movs	r1, r7
   16ee6:	9304      	str	r3, [sp, #16]
   16ee8:	f7fe f906 	bl	150f8 <__udivsi3>
   16eec:	9b01      	ldr	r3, [sp, #4]
   16eee:	4682      	mov	sl, r0
   16ef0:	4343      	muls	r3, r0
   16ef2:	0039      	movs	r1, r7
   16ef4:	9804      	ldr	r0, [sp, #16]
   16ef6:	9301      	str	r3, [sp, #4]
   16ef8:	f7fe f984 	bl	15204 <__aeabi_uidivmod>
   16efc:	9801      	ldr	r0, [sp, #4]
   16efe:	040b      	lsls	r3, r1, #16
   16f00:	0431      	lsls	r1, r6, #16
   16f02:	0c09      	lsrs	r1, r1, #16
   16f04:	4319      	orrs	r1, r3
   16f06:	4288      	cmp	r0, r1
   16f08:	d90d      	bls.n	16f26 <__aeabi_ddiv+0x38a>
   16f0a:	4653      	mov	r3, sl
   16f0c:	4441      	add	r1, r8
   16f0e:	3b01      	subs	r3, #1
   16f10:	4588      	cmp	r8, r1
   16f12:	d900      	bls.n	16f16 <__aeabi_ddiv+0x37a>
   16f14:	e0e8      	b.n	170e8 <__aeabi_ddiv+0x54c>
   16f16:	4288      	cmp	r0, r1
   16f18:	d800      	bhi.n	16f1c <__aeabi_ddiv+0x380>
   16f1a:	e0e5      	b.n	170e8 <__aeabi_ddiv+0x54c>
   16f1c:	2302      	movs	r3, #2
   16f1e:	425b      	negs	r3, r3
   16f20:	469c      	mov	ip, r3
   16f22:	4441      	add	r1, r8
   16f24:	44e2      	add	sl, ip
   16f26:	9b01      	ldr	r3, [sp, #4]
   16f28:	042d      	lsls	r5, r5, #16
   16f2a:	1ace      	subs	r6, r1, r3
   16f2c:	4651      	mov	r1, sl
   16f2e:	4329      	orrs	r1, r5
   16f30:	9d05      	ldr	r5, [sp, #20]
   16f32:	464f      	mov	r7, r9
   16f34:	002a      	movs	r2, r5
   16f36:	040b      	lsls	r3, r1, #16
   16f38:	0c08      	lsrs	r0, r1, #16
   16f3a:	0c1b      	lsrs	r3, r3, #16
   16f3c:	435a      	muls	r2, r3
   16f3e:	4345      	muls	r5, r0
   16f40:	437b      	muls	r3, r7
   16f42:	4378      	muls	r0, r7
   16f44:	195b      	adds	r3, r3, r5
   16f46:	0c17      	lsrs	r7, r2, #16
   16f48:	18fb      	adds	r3, r7, r3
   16f4a:	429d      	cmp	r5, r3
   16f4c:	d903      	bls.n	16f56 <__aeabi_ddiv+0x3ba>
   16f4e:	2580      	movs	r5, #128	; 0x80
   16f50:	026d      	lsls	r5, r5, #9
   16f52:	46ac      	mov	ip, r5
   16f54:	4460      	add	r0, ip
   16f56:	0c1d      	lsrs	r5, r3, #16
   16f58:	0412      	lsls	r2, r2, #16
   16f5a:	041b      	lsls	r3, r3, #16
   16f5c:	0c12      	lsrs	r2, r2, #16
   16f5e:	1828      	adds	r0, r5, r0
   16f60:	189b      	adds	r3, r3, r2
   16f62:	4286      	cmp	r6, r0
   16f64:	d200      	bcs.n	16f68 <__aeabi_ddiv+0x3cc>
   16f66:	e093      	b.n	17090 <__aeabi_ddiv+0x4f4>
   16f68:	d100      	bne.n	16f6c <__aeabi_ddiv+0x3d0>
   16f6a:	e08e      	b.n	1708a <__aeabi_ddiv+0x4ee>
   16f6c:	2301      	movs	r3, #1
   16f6e:	4319      	orrs	r1, r3
   16f70:	4ba0      	ldr	r3, [pc, #640]	; (171f4 <__aeabi_ddiv+0x658>)
   16f72:	18e3      	adds	r3, r4, r3
   16f74:	2b00      	cmp	r3, #0
   16f76:	dc00      	bgt.n	16f7a <__aeabi_ddiv+0x3de>
   16f78:	e099      	b.n	170ae <__aeabi_ddiv+0x512>
   16f7a:	074a      	lsls	r2, r1, #29
   16f7c:	d000      	beq.n	16f80 <__aeabi_ddiv+0x3e4>
   16f7e:	e09e      	b.n	170be <__aeabi_ddiv+0x522>
   16f80:	465a      	mov	r2, fp
   16f82:	01d2      	lsls	r2, r2, #7
   16f84:	d506      	bpl.n	16f94 <__aeabi_ddiv+0x3f8>
   16f86:	465a      	mov	r2, fp
   16f88:	4b9b      	ldr	r3, [pc, #620]	; (171f8 <__aeabi_ddiv+0x65c>)
   16f8a:	401a      	ands	r2, r3
   16f8c:	2380      	movs	r3, #128	; 0x80
   16f8e:	4693      	mov	fp, r2
   16f90:	00db      	lsls	r3, r3, #3
   16f92:	18e3      	adds	r3, r4, r3
   16f94:	4a99      	ldr	r2, [pc, #612]	; (171fc <__aeabi_ddiv+0x660>)
   16f96:	4293      	cmp	r3, r2
   16f98:	dd68      	ble.n	1706c <__aeabi_ddiv+0x4d0>
   16f9a:	2301      	movs	r3, #1
   16f9c:	9a02      	ldr	r2, [sp, #8]
   16f9e:	4c98      	ldr	r4, [pc, #608]	; (17200 <__aeabi_ddiv+0x664>)
   16fa0:	401a      	ands	r2, r3
   16fa2:	2300      	movs	r3, #0
   16fa4:	4694      	mov	ip, r2
   16fa6:	4698      	mov	r8, r3
   16fa8:	2200      	movs	r2, #0
   16faa:	e6c5      	b.n	16d38 <__aeabi_ddiv+0x19c>
   16fac:	2280      	movs	r2, #128	; 0x80
   16fae:	464b      	mov	r3, r9
   16fb0:	0312      	lsls	r2, r2, #12
   16fb2:	4213      	tst	r3, r2
   16fb4:	d00a      	beq.n	16fcc <__aeabi_ddiv+0x430>
   16fb6:	465b      	mov	r3, fp
   16fb8:	4213      	tst	r3, r2
   16fba:	d106      	bne.n	16fca <__aeabi_ddiv+0x42e>
   16fbc:	431a      	orrs	r2, r3
   16fbe:	0312      	lsls	r2, r2, #12
   16fc0:	0b12      	lsrs	r2, r2, #12
   16fc2:	46ac      	mov	ip, r5
   16fc4:	4688      	mov	r8, r1
   16fc6:	4c8e      	ldr	r4, [pc, #568]	; (17200 <__aeabi_ddiv+0x664>)
   16fc8:	e6b6      	b.n	16d38 <__aeabi_ddiv+0x19c>
   16fca:	464b      	mov	r3, r9
   16fcc:	431a      	orrs	r2, r3
   16fce:	0312      	lsls	r2, r2, #12
   16fd0:	0b12      	lsrs	r2, r2, #12
   16fd2:	46bc      	mov	ip, r7
   16fd4:	4c8a      	ldr	r4, [pc, #552]	; (17200 <__aeabi_ddiv+0x664>)
   16fd6:	e6af      	b.n	16d38 <__aeabi_ddiv+0x19c>
   16fd8:	0003      	movs	r3, r0
   16fda:	465a      	mov	r2, fp
   16fdc:	3b28      	subs	r3, #40	; 0x28
   16fde:	409a      	lsls	r2, r3
   16fe0:	2300      	movs	r3, #0
   16fe2:	4691      	mov	r9, r2
   16fe4:	4698      	mov	r8, r3
   16fe6:	e657      	b.n	16c98 <__aeabi_ddiv+0xfc>
   16fe8:	4658      	mov	r0, fp
   16fea:	f001 f92b 	bl	18244 <__clzsi2>
   16fee:	3020      	adds	r0, #32
   16ff0:	e640      	b.n	16c74 <__aeabi_ddiv+0xd8>
   16ff2:	0003      	movs	r3, r0
   16ff4:	4652      	mov	r2, sl
   16ff6:	3b28      	subs	r3, #40	; 0x28
   16ff8:	409a      	lsls	r2, r3
   16ffa:	2100      	movs	r1, #0
   16ffc:	4693      	mov	fp, r2
   16ffe:	e677      	b.n	16cf0 <__aeabi_ddiv+0x154>
   17000:	f001 f920 	bl	18244 <__clzsi2>
   17004:	3020      	adds	r0, #32
   17006:	e65f      	b.n	16cc8 <__aeabi_ddiv+0x12c>
   17008:	4588      	cmp	r8, r1
   1700a:	d200      	bcs.n	1700e <__aeabi_ddiv+0x472>
   1700c:	e6c7      	b.n	16d9e <__aeabi_ddiv+0x202>
   1700e:	464b      	mov	r3, r9
   17010:	07de      	lsls	r6, r3, #31
   17012:	085d      	lsrs	r5, r3, #1
   17014:	4643      	mov	r3, r8
   17016:	085b      	lsrs	r3, r3, #1
   17018:	431e      	orrs	r6, r3
   1701a:	4643      	mov	r3, r8
   1701c:	07db      	lsls	r3, r3, #31
   1701e:	469a      	mov	sl, r3
   17020:	e6c2      	b.n	16da8 <__aeabi_ddiv+0x20c>
   17022:	2500      	movs	r5, #0
   17024:	4592      	cmp	sl, r2
   17026:	d300      	bcc.n	1702a <__aeabi_ddiv+0x48e>
   17028:	e733      	b.n	16e92 <__aeabi_ddiv+0x2f6>
   1702a:	9e03      	ldr	r6, [sp, #12]
   1702c:	4659      	mov	r1, fp
   1702e:	46b4      	mov	ip, r6
   17030:	44e2      	add	sl, ip
   17032:	45b2      	cmp	sl, r6
   17034:	41ad      	sbcs	r5, r5
   17036:	426d      	negs	r5, r5
   17038:	4445      	add	r5, r8
   1703a:	18eb      	adds	r3, r5, r3
   1703c:	3901      	subs	r1, #1
   1703e:	4598      	cmp	r8, r3
   17040:	d207      	bcs.n	17052 <__aeabi_ddiv+0x4b6>
   17042:	4298      	cmp	r0, r3
   17044:	d900      	bls.n	17048 <__aeabi_ddiv+0x4ac>
   17046:	e07f      	b.n	17148 <__aeabi_ddiv+0x5ac>
   17048:	d100      	bne.n	1704c <__aeabi_ddiv+0x4b0>
   1704a:	e0bc      	b.n	171c6 <__aeabi_ddiv+0x62a>
   1704c:	1a1d      	subs	r5, r3, r0
   1704e:	468b      	mov	fp, r1
   17050:	e71f      	b.n	16e92 <__aeabi_ddiv+0x2f6>
   17052:	4598      	cmp	r8, r3
   17054:	d1fa      	bne.n	1704c <__aeabi_ddiv+0x4b0>
   17056:	9d03      	ldr	r5, [sp, #12]
   17058:	4555      	cmp	r5, sl
   1705a:	d9f2      	bls.n	17042 <__aeabi_ddiv+0x4a6>
   1705c:	4643      	mov	r3, r8
   1705e:	468b      	mov	fp, r1
   17060:	1a1d      	subs	r5, r3, r0
   17062:	e716      	b.n	16e92 <__aeabi_ddiv+0x2f6>
   17064:	469b      	mov	fp, r3
   17066:	e6ca      	b.n	16dfe <__aeabi_ddiv+0x262>
   17068:	0015      	movs	r5, r2
   1706a:	e6e7      	b.n	16e3c <__aeabi_ddiv+0x2a0>
   1706c:	465a      	mov	r2, fp
   1706e:	08c9      	lsrs	r1, r1, #3
   17070:	0752      	lsls	r2, r2, #29
   17072:	430a      	orrs	r2, r1
   17074:	055b      	lsls	r3, r3, #21
   17076:	4690      	mov	r8, r2
   17078:	0d5c      	lsrs	r4, r3, #21
   1707a:	465a      	mov	r2, fp
   1707c:	2301      	movs	r3, #1
   1707e:	9902      	ldr	r1, [sp, #8]
   17080:	0252      	lsls	r2, r2, #9
   17082:	4019      	ands	r1, r3
   17084:	0b12      	lsrs	r2, r2, #12
   17086:	468c      	mov	ip, r1
   17088:	e656      	b.n	16d38 <__aeabi_ddiv+0x19c>
   1708a:	2b00      	cmp	r3, #0
   1708c:	d100      	bne.n	17090 <__aeabi_ddiv+0x4f4>
   1708e:	e76f      	b.n	16f70 <__aeabi_ddiv+0x3d4>
   17090:	4446      	add	r6, r8
   17092:	1e4a      	subs	r2, r1, #1
   17094:	45b0      	cmp	r8, r6
   17096:	d929      	bls.n	170ec <__aeabi_ddiv+0x550>
   17098:	0011      	movs	r1, r2
   1709a:	4286      	cmp	r6, r0
   1709c:	d000      	beq.n	170a0 <__aeabi_ddiv+0x504>
   1709e:	e765      	b.n	16f6c <__aeabi_ddiv+0x3d0>
   170a0:	9a03      	ldr	r2, [sp, #12]
   170a2:	4293      	cmp	r3, r2
   170a4:	d000      	beq.n	170a8 <__aeabi_ddiv+0x50c>
   170a6:	e761      	b.n	16f6c <__aeabi_ddiv+0x3d0>
   170a8:	e762      	b.n	16f70 <__aeabi_ddiv+0x3d4>
   170aa:	2101      	movs	r1, #1
   170ac:	4249      	negs	r1, r1
   170ae:	2001      	movs	r0, #1
   170b0:	1ac2      	subs	r2, r0, r3
   170b2:	2a38      	cmp	r2, #56	; 0x38
   170b4:	dd21      	ble.n	170fa <__aeabi_ddiv+0x55e>
   170b6:	9b02      	ldr	r3, [sp, #8]
   170b8:	4003      	ands	r3, r0
   170ba:	469c      	mov	ip, r3
   170bc:	e638      	b.n	16d30 <__aeabi_ddiv+0x194>
   170be:	220f      	movs	r2, #15
   170c0:	400a      	ands	r2, r1
   170c2:	2a04      	cmp	r2, #4
   170c4:	d100      	bne.n	170c8 <__aeabi_ddiv+0x52c>
   170c6:	e75b      	b.n	16f80 <__aeabi_ddiv+0x3e4>
   170c8:	000a      	movs	r2, r1
   170ca:	1d11      	adds	r1, r2, #4
   170cc:	4291      	cmp	r1, r2
   170ce:	4192      	sbcs	r2, r2
   170d0:	4252      	negs	r2, r2
   170d2:	4493      	add	fp, r2
   170d4:	e754      	b.n	16f80 <__aeabi_ddiv+0x3e4>
   170d6:	4b47      	ldr	r3, [pc, #284]	; (171f4 <__aeabi_ddiv+0x658>)
   170d8:	18e3      	adds	r3, r4, r3
   170da:	2b00      	cmp	r3, #0
   170dc:	dde5      	ble.n	170aa <__aeabi_ddiv+0x50e>
   170de:	2201      	movs	r2, #1
   170e0:	4252      	negs	r2, r2
   170e2:	e7f2      	b.n	170ca <__aeabi_ddiv+0x52e>
   170e4:	001d      	movs	r5, r3
   170e6:	e6fa      	b.n	16ede <__aeabi_ddiv+0x342>
   170e8:	469a      	mov	sl, r3
   170ea:	e71c      	b.n	16f26 <__aeabi_ddiv+0x38a>
   170ec:	42b0      	cmp	r0, r6
   170ee:	d839      	bhi.n	17164 <__aeabi_ddiv+0x5c8>
   170f0:	d06e      	beq.n	171d0 <__aeabi_ddiv+0x634>
   170f2:	0011      	movs	r1, r2
   170f4:	e73a      	b.n	16f6c <__aeabi_ddiv+0x3d0>
   170f6:	9302      	str	r3, [sp, #8]
   170f8:	e73a      	b.n	16f70 <__aeabi_ddiv+0x3d4>
   170fa:	2a1f      	cmp	r2, #31
   170fc:	dc3c      	bgt.n	17178 <__aeabi_ddiv+0x5dc>
   170fe:	2320      	movs	r3, #32
   17100:	1a9b      	subs	r3, r3, r2
   17102:	000c      	movs	r4, r1
   17104:	4658      	mov	r0, fp
   17106:	4099      	lsls	r1, r3
   17108:	4098      	lsls	r0, r3
   1710a:	1e4b      	subs	r3, r1, #1
   1710c:	4199      	sbcs	r1, r3
   1710e:	465b      	mov	r3, fp
   17110:	40d4      	lsrs	r4, r2
   17112:	40d3      	lsrs	r3, r2
   17114:	4320      	orrs	r0, r4
   17116:	4308      	orrs	r0, r1
   17118:	001a      	movs	r2, r3
   1711a:	0743      	lsls	r3, r0, #29
   1711c:	d009      	beq.n	17132 <__aeabi_ddiv+0x596>
   1711e:	230f      	movs	r3, #15
   17120:	4003      	ands	r3, r0
   17122:	2b04      	cmp	r3, #4
   17124:	d005      	beq.n	17132 <__aeabi_ddiv+0x596>
   17126:	0001      	movs	r1, r0
   17128:	1d08      	adds	r0, r1, #4
   1712a:	4288      	cmp	r0, r1
   1712c:	419b      	sbcs	r3, r3
   1712e:	425b      	negs	r3, r3
   17130:	18d2      	adds	r2, r2, r3
   17132:	0213      	lsls	r3, r2, #8
   17134:	d53a      	bpl.n	171ac <__aeabi_ddiv+0x610>
   17136:	2301      	movs	r3, #1
   17138:	9a02      	ldr	r2, [sp, #8]
   1713a:	2401      	movs	r4, #1
   1713c:	401a      	ands	r2, r3
   1713e:	2300      	movs	r3, #0
   17140:	4694      	mov	ip, r2
   17142:	4698      	mov	r8, r3
   17144:	2200      	movs	r2, #0
   17146:	e5f7      	b.n	16d38 <__aeabi_ddiv+0x19c>
   17148:	2102      	movs	r1, #2
   1714a:	4249      	negs	r1, r1
   1714c:	468c      	mov	ip, r1
   1714e:	9d03      	ldr	r5, [sp, #12]
   17150:	44e3      	add	fp, ip
   17152:	46ac      	mov	ip, r5
   17154:	44e2      	add	sl, ip
   17156:	45aa      	cmp	sl, r5
   17158:	41ad      	sbcs	r5, r5
   1715a:	426d      	negs	r5, r5
   1715c:	4445      	add	r5, r8
   1715e:	18ed      	adds	r5, r5, r3
   17160:	1a2d      	subs	r5, r5, r0
   17162:	e696      	b.n	16e92 <__aeabi_ddiv+0x2f6>
   17164:	1e8a      	subs	r2, r1, #2
   17166:	9903      	ldr	r1, [sp, #12]
   17168:	004d      	lsls	r5, r1, #1
   1716a:	428d      	cmp	r5, r1
   1716c:	4189      	sbcs	r1, r1
   1716e:	4249      	negs	r1, r1
   17170:	4441      	add	r1, r8
   17172:	1876      	adds	r6, r6, r1
   17174:	9503      	str	r5, [sp, #12]
   17176:	e78f      	b.n	17098 <__aeabi_ddiv+0x4fc>
   17178:	201f      	movs	r0, #31
   1717a:	4240      	negs	r0, r0
   1717c:	1ac3      	subs	r3, r0, r3
   1717e:	4658      	mov	r0, fp
   17180:	40d8      	lsrs	r0, r3
   17182:	0003      	movs	r3, r0
   17184:	2a20      	cmp	r2, #32
   17186:	d028      	beq.n	171da <__aeabi_ddiv+0x63e>
   17188:	2040      	movs	r0, #64	; 0x40
   1718a:	465d      	mov	r5, fp
   1718c:	1a82      	subs	r2, r0, r2
   1718e:	4095      	lsls	r5, r2
   17190:	4329      	orrs	r1, r5
   17192:	1e4a      	subs	r2, r1, #1
   17194:	4191      	sbcs	r1, r2
   17196:	4319      	orrs	r1, r3
   17198:	2307      	movs	r3, #7
   1719a:	2200      	movs	r2, #0
   1719c:	400b      	ands	r3, r1
   1719e:	d009      	beq.n	171b4 <__aeabi_ddiv+0x618>
   171a0:	230f      	movs	r3, #15
   171a2:	2200      	movs	r2, #0
   171a4:	400b      	ands	r3, r1
   171a6:	0008      	movs	r0, r1
   171a8:	2b04      	cmp	r3, #4
   171aa:	d1bd      	bne.n	17128 <__aeabi_ddiv+0x58c>
   171ac:	0001      	movs	r1, r0
   171ae:	0753      	lsls	r3, r2, #29
   171b0:	0252      	lsls	r2, r2, #9
   171b2:	0b12      	lsrs	r2, r2, #12
   171b4:	08c9      	lsrs	r1, r1, #3
   171b6:	4319      	orrs	r1, r3
   171b8:	2301      	movs	r3, #1
   171ba:	4688      	mov	r8, r1
   171bc:	9902      	ldr	r1, [sp, #8]
   171be:	2400      	movs	r4, #0
   171c0:	4019      	ands	r1, r3
   171c2:	468c      	mov	ip, r1
   171c4:	e5b8      	b.n	16d38 <__aeabi_ddiv+0x19c>
   171c6:	4552      	cmp	r2, sl
   171c8:	d8be      	bhi.n	17148 <__aeabi_ddiv+0x5ac>
   171ca:	468b      	mov	fp, r1
   171cc:	2500      	movs	r5, #0
   171ce:	e660      	b.n	16e92 <__aeabi_ddiv+0x2f6>
   171d0:	9d03      	ldr	r5, [sp, #12]
   171d2:	429d      	cmp	r5, r3
   171d4:	d3c6      	bcc.n	17164 <__aeabi_ddiv+0x5c8>
   171d6:	0011      	movs	r1, r2
   171d8:	e762      	b.n	170a0 <__aeabi_ddiv+0x504>
   171da:	2500      	movs	r5, #0
   171dc:	e7d8      	b.n	17190 <__aeabi_ddiv+0x5f4>
   171de:	2280      	movs	r2, #128	; 0x80
   171e0:	465b      	mov	r3, fp
   171e2:	0312      	lsls	r2, r2, #12
   171e4:	431a      	orrs	r2, r3
   171e6:	9b01      	ldr	r3, [sp, #4]
   171e8:	0312      	lsls	r2, r2, #12
   171ea:	0b12      	lsrs	r2, r2, #12
   171ec:	469c      	mov	ip, r3
   171ee:	4688      	mov	r8, r1
   171f0:	4c03      	ldr	r4, [pc, #12]	; (17200 <__aeabi_ddiv+0x664>)
   171f2:	e5a1      	b.n	16d38 <__aeabi_ddiv+0x19c>
   171f4:	000003ff 	.word	0x000003ff
   171f8:	feffffff 	.word	0xfeffffff
   171fc:	000007fe 	.word	0x000007fe
   17200:	000007ff 	.word	0x000007ff

00017204 <__eqdf2>:
   17204:	b5f0      	push	{r4, r5, r6, r7, lr}
   17206:	464f      	mov	r7, r9
   17208:	4646      	mov	r6, r8
   1720a:	46d6      	mov	lr, sl
   1720c:	005c      	lsls	r4, r3, #1
   1720e:	b5c0      	push	{r6, r7, lr}
   17210:	031f      	lsls	r7, r3, #12
   17212:	0fdb      	lsrs	r3, r3, #31
   17214:	469a      	mov	sl, r3
   17216:	4b17      	ldr	r3, [pc, #92]	; (17274 <__eqdf2+0x70>)
   17218:	030e      	lsls	r6, r1, #12
   1721a:	004d      	lsls	r5, r1, #1
   1721c:	4684      	mov	ip, r0
   1721e:	4680      	mov	r8, r0
   17220:	0b36      	lsrs	r6, r6, #12
   17222:	0d6d      	lsrs	r5, r5, #21
   17224:	0fc9      	lsrs	r1, r1, #31
   17226:	4691      	mov	r9, r2
   17228:	0b3f      	lsrs	r7, r7, #12
   1722a:	0d64      	lsrs	r4, r4, #21
   1722c:	2001      	movs	r0, #1
   1722e:	429d      	cmp	r5, r3
   17230:	d008      	beq.n	17244 <__eqdf2+0x40>
   17232:	429c      	cmp	r4, r3
   17234:	d001      	beq.n	1723a <__eqdf2+0x36>
   17236:	42a5      	cmp	r5, r4
   17238:	d00b      	beq.n	17252 <__eqdf2+0x4e>
   1723a:	bc1c      	pop	{r2, r3, r4}
   1723c:	4690      	mov	r8, r2
   1723e:	4699      	mov	r9, r3
   17240:	46a2      	mov	sl, r4
   17242:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17244:	4663      	mov	r3, ip
   17246:	4333      	orrs	r3, r6
   17248:	d1f7      	bne.n	1723a <__eqdf2+0x36>
   1724a:	42ac      	cmp	r4, r5
   1724c:	d1f5      	bne.n	1723a <__eqdf2+0x36>
   1724e:	433a      	orrs	r2, r7
   17250:	d1f3      	bne.n	1723a <__eqdf2+0x36>
   17252:	2001      	movs	r0, #1
   17254:	42be      	cmp	r6, r7
   17256:	d1f0      	bne.n	1723a <__eqdf2+0x36>
   17258:	45c8      	cmp	r8, r9
   1725a:	d1ee      	bne.n	1723a <__eqdf2+0x36>
   1725c:	4551      	cmp	r1, sl
   1725e:	d007      	beq.n	17270 <__eqdf2+0x6c>
   17260:	2d00      	cmp	r5, #0
   17262:	d1ea      	bne.n	1723a <__eqdf2+0x36>
   17264:	4663      	mov	r3, ip
   17266:	431e      	orrs	r6, r3
   17268:	0030      	movs	r0, r6
   1726a:	1e46      	subs	r6, r0, #1
   1726c:	41b0      	sbcs	r0, r6
   1726e:	e7e4      	b.n	1723a <__eqdf2+0x36>
   17270:	2000      	movs	r0, #0
   17272:	e7e2      	b.n	1723a <__eqdf2+0x36>
   17274:	000007ff 	.word	0x000007ff

00017278 <__gedf2>:
   17278:	b5f0      	push	{r4, r5, r6, r7, lr}
   1727a:	4645      	mov	r5, r8
   1727c:	46de      	mov	lr, fp
   1727e:	4657      	mov	r7, sl
   17280:	464e      	mov	r6, r9
   17282:	b5e0      	push	{r5, r6, r7, lr}
   17284:	031f      	lsls	r7, r3, #12
   17286:	0b3d      	lsrs	r5, r7, #12
   17288:	4f2c      	ldr	r7, [pc, #176]	; (1733c <__gedf2+0xc4>)
   1728a:	030e      	lsls	r6, r1, #12
   1728c:	004c      	lsls	r4, r1, #1
   1728e:	46ab      	mov	fp, r5
   17290:	005d      	lsls	r5, r3, #1
   17292:	4684      	mov	ip, r0
   17294:	0b36      	lsrs	r6, r6, #12
   17296:	0d64      	lsrs	r4, r4, #21
   17298:	0fc9      	lsrs	r1, r1, #31
   1729a:	4690      	mov	r8, r2
   1729c:	0d6d      	lsrs	r5, r5, #21
   1729e:	0fdb      	lsrs	r3, r3, #31
   172a0:	42bc      	cmp	r4, r7
   172a2:	d02a      	beq.n	172fa <__gedf2+0x82>
   172a4:	4f25      	ldr	r7, [pc, #148]	; (1733c <__gedf2+0xc4>)
   172a6:	42bd      	cmp	r5, r7
   172a8:	d02d      	beq.n	17306 <__gedf2+0x8e>
   172aa:	2c00      	cmp	r4, #0
   172ac:	d10f      	bne.n	172ce <__gedf2+0x56>
   172ae:	4330      	orrs	r0, r6
   172b0:	0007      	movs	r7, r0
   172b2:	4681      	mov	r9, r0
   172b4:	4278      	negs	r0, r7
   172b6:	4178      	adcs	r0, r7
   172b8:	b2c0      	uxtb	r0, r0
   172ba:	2d00      	cmp	r5, #0
   172bc:	d117      	bne.n	172ee <__gedf2+0x76>
   172be:	465f      	mov	r7, fp
   172c0:	433a      	orrs	r2, r7
   172c2:	d114      	bne.n	172ee <__gedf2+0x76>
   172c4:	464b      	mov	r3, r9
   172c6:	2000      	movs	r0, #0
   172c8:	2b00      	cmp	r3, #0
   172ca:	d00a      	beq.n	172e2 <__gedf2+0x6a>
   172cc:	e006      	b.n	172dc <__gedf2+0x64>
   172ce:	2d00      	cmp	r5, #0
   172d0:	d102      	bne.n	172d8 <__gedf2+0x60>
   172d2:	4658      	mov	r0, fp
   172d4:	4302      	orrs	r2, r0
   172d6:	d001      	beq.n	172dc <__gedf2+0x64>
   172d8:	4299      	cmp	r1, r3
   172da:	d018      	beq.n	1730e <__gedf2+0x96>
   172dc:	4248      	negs	r0, r1
   172de:	2101      	movs	r1, #1
   172e0:	4308      	orrs	r0, r1
   172e2:	bc3c      	pop	{r2, r3, r4, r5}
   172e4:	4690      	mov	r8, r2
   172e6:	4699      	mov	r9, r3
   172e8:	46a2      	mov	sl, r4
   172ea:	46ab      	mov	fp, r5
   172ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   172ee:	2800      	cmp	r0, #0
   172f0:	d0f2      	beq.n	172d8 <__gedf2+0x60>
   172f2:	2001      	movs	r0, #1
   172f4:	3b01      	subs	r3, #1
   172f6:	4318      	orrs	r0, r3
   172f8:	e7f3      	b.n	172e2 <__gedf2+0x6a>
   172fa:	0037      	movs	r7, r6
   172fc:	4307      	orrs	r7, r0
   172fe:	d0d1      	beq.n	172a4 <__gedf2+0x2c>
   17300:	2002      	movs	r0, #2
   17302:	4240      	negs	r0, r0
   17304:	e7ed      	b.n	172e2 <__gedf2+0x6a>
   17306:	465f      	mov	r7, fp
   17308:	4317      	orrs	r7, r2
   1730a:	d0ce      	beq.n	172aa <__gedf2+0x32>
   1730c:	e7f8      	b.n	17300 <__gedf2+0x88>
   1730e:	42ac      	cmp	r4, r5
   17310:	dce4      	bgt.n	172dc <__gedf2+0x64>
   17312:	da03      	bge.n	1731c <__gedf2+0xa4>
   17314:	1e48      	subs	r0, r1, #1
   17316:	2101      	movs	r1, #1
   17318:	4308      	orrs	r0, r1
   1731a:	e7e2      	b.n	172e2 <__gedf2+0x6a>
   1731c:	455e      	cmp	r6, fp
   1731e:	d8dd      	bhi.n	172dc <__gedf2+0x64>
   17320:	d006      	beq.n	17330 <__gedf2+0xb8>
   17322:	2000      	movs	r0, #0
   17324:	455e      	cmp	r6, fp
   17326:	d2dc      	bcs.n	172e2 <__gedf2+0x6a>
   17328:	2301      	movs	r3, #1
   1732a:	1e48      	subs	r0, r1, #1
   1732c:	4318      	orrs	r0, r3
   1732e:	e7d8      	b.n	172e2 <__gedf2+0x6a>
   17330:	45c4      	cmp	ip, r8
   17332:	d8d3      	bhi.n	172dc <__gedf2+0x64>
   17334:	2000      	movs	r0, #0
   17336:	45c4      	cmp	ip, r8
   17338:	d3f6      	bcc.n	17328 <__gedf2+0xb0>
   1733a:	e7d2      	b.n	172e2 <__gedf2+0x6a>
   1733c:	000007ff 	.word	0x000007ff

00017340 <__ledf2>:
   17340:	b5f0      	push	{r4, r5, r6, r7, lr}
   17342:	464e      	mov	r6, r9
   17344:	4645      	mov	r5, r8
   17346:	46de      	mov	lr, fp
   17348:	4657      	mov	r7, sl
   1734a:	005c      	lsls	r4, r3, #1
   1734c:	b5e0      	push	{r5, r6, r7, lr}
   1734e:	031f      	lsls	r7, r3, #12
   17350:	0fdb      	lsrs	r3, r3, #31
   17352:	4699      	mov	r9, r3
   17354:	4b2a      	ldr	r3, [pc, #168]	; (17400 <__ledf2+0xc0>)
   17356:	030e      	lsls	r6, r1, #12
   17358:	004d      	lsls	r5, r1, #1
   1735a:	0fc9      	lsrs	r1, r1, #31
   1735c:	4684      	mov	ip, r0
   1735e:	0b36      	lsrs	r6, r6, #12
   17360:	0d6d      	lsrs	r5, r5, #21
   17362:	468b      	mov	fp, r1
   17364:	4690      	mov	r8, r2
   17366:	0b3f      	lsrs	r7, r7, #12
   17368:	0d64      	lsrs	r4, r4, #21
   1736a:	429d      	cmp	r5, r3
   1736c:	d020      	beq.n	173b0 <__ledf2+0x70>
   1736e:	4b24      	ldr	r3, [pc, #144]	; (17400 <__ledf2+0xc0>)
   17370:	429c      	cmp	r4, r3
   17372:	d022      	beq.n	173ba <__ledf2+0x7a>
   17374:	2d00      	cmp	r5, #0
   17376:	d112      	bne.n	1739e <__ledf2+0x5e>
   17378:	4330      	orrs	r0, r6
   1737a:	4243      	negs	r3, r0
   1737c:	4143      	adcs	r3, r0
   1737e:	b2db      	uxtb	r3, r3
   17380:	2c00      	cmp	r4, #0
   17382:	d01f      	beq.n	173c4 <__ledf2+0x84>
   17384:	2b00      	cmp	r3, #0
   17386:	d00c      	beq.n	173a2 <__ledf2+0x62>
   17388:	464b      	mov	r3, r9
   1738a:	2001      	movs	r0, #1
   1738c:	3b01      	subs	r3, #1
   1738e:	4303      	orrs	r3, r0
   17390:	0018      	movs	r0, r3
   17392:	bc3c      	pop	{r2, r3, r4, r5}
   17394:	4690      	mov	r8, r2
   17396:	4699      	mov	r9, r3
   17398:	46a2      	mov	sl, r4
   1739a:	46ab      	mov	fp, r5
   1739c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1739e:	2c00      	cmp	r4, #0
   173a0:	d016      	beq.n	173d0 <__ledf2+0x90>
   173a2:	45cb      	cmp	fp, r9
   173a4:	d017      	beq.n	173d6 <__ledf2+0x96>
   173a6:	465b      	mov	r3, fp
   173a8:	4259      	negs	r1, r3
   173aa:	2301      	movs	r3, #1
   173ac:	430b      	orrs	r3, r1
   173ae:	e7ef      	b.n	17390 <__ledf2+0x50>
   173b0:	0031      	movs	r1, r6
   173b2:	2302      	movs	r3, #2
   173b4:	4301      	orrs	r1, r0
   173b6:	d1eb      	bne.n	17390 <__ledf2+0x50>
   173b8:	e7d9      	b.n	1736e <__ledf2+0x2e>
   173ba:	0039      	movs	r1, r7
   173bc:	2302      	movs	r3, #2
   173be:	4311      	orrs	r1, r2
   173c0:	d1e6      	bne.n	17390 <__ledf2+0x50>
   173c2:	e7d7      	b.n	17374 <__ledf2+0x34>
   173c4:	433a      	orrs	r2, r7
   173c6:	d1dd      	bne.n	17384 <__ledf2+0x44>
   173c8:	2300      	movs	r3, #0
   173ca:	2800      	cmp	r0, #0
   173cc:	d0e0      	beq.n	17390 <__ledf2+0x50>
   173ce:	e7ea      	b.n	173a6 <__ledf2+0x66>
   173d0:	433a      	orrs	r2, r7
   173d2:	d1e6      	bne.n	173a2 <__ledf2+0x62>
   173d4:	e7e7      	b.n	173a6 <__ledf2+0x66>
   173d6:	42a5      	cmp	r5, r4
   173d8:	dce5      	bgt.n	173a6 <__ledf2+0x66>
   173da:	db05      	blt.n	173e8 <__ledf2+0xa8>
   173dc:	42be      	cmp	r6, r7
   173de:	d8e2      	bhi.n	173a6 <__ledf2+0x66>
   173e0:	d007      	beq.n	173f2 <__ledf2+0xb2>
   173e2:	2300      	movs	r3, #0
   173e4:	42be      	cmp	r6, r7
   173e6:	d2d3      	bcs.n	17390 <__ledf2+0x50>
   173e8:	4659      	mov	r1, fp
   173ea:	2301      	movs	r3, #1
   173ec:	3901      	subs	r1, #1
   173ee:	430b      	orrs	r3, r1
   173f0:	e7ce      	b.n	17390 <__ledf2+0x50>
   173f2:	45c4      	cmp	ip, r8
   173f4:	d8d7      	bhi.n	173a6 <__ledf2+0x66>
   173f6:	2300      	movs	r3, #0
   173f8:	45c4      	cmp	ip, r8
   173fa:	d3f5      	bcc.n	173e8 <__ledf2+0xa8>
   173fc:	e7c8      	b.n	17390 <__ledf2+0x50>
   173fe:	46c0      	nop			; (mov r8, r8)
   17400:	000007ff 	.word	0x000007ff

00017404 <__aeabi_dmul>:
   17404:	b5f0      	push	{r4, r5, r6, r7, lr}
   17406:	4657      	mov	r7, sl
   17408:	4645      	mov	r5, r8
   1740a:	46de      	mov	lr, fp
   1740c:	464e      	mov	r6, r9
   1740e:	b5e0      	push	{r5, r6, r7, lr}
   17410:	030c      	lsls	r4, r1, #12
   17412:	4698      	mov	r8, r3
   17414:	004e      	lsls	r6, r1, #1
   17416:	0b23      	lsrs	r3, r4, #12
   17418:	b087      	sub	sp, #28
   1741a:	0007      	movs	r7, r0
   1741c:	4692      	mov	sl, r2
   1741e:	469b      	mov	fp, r3
   17420:	0d76      	lsrs	r6, r6, #21
   17422:	0fcd      	lsrs	r5, r1, #31
   17424:	2e00      	cmp	r6, #0
   17426:	d06b      	beq.n	17500 <__aeabi_dmul+0xfc>
   17428:	4b6d      	ldr	r3, [pc, #436]	; (175e0 <__aeabi_dmul+0x1dc>)
   1742a:	429e      	cmp	r6, r3
   1742c:	d035      	beq.n	1749a <__aeabi_dmul+0x96>
   1742e:	2480      	movs	r4, #128	; 0x80
   17430:	465b      	mov	r3, fp
   17432:	0f42      	lsrs	r2, r0, #29
   17434:	0424      	lsls	r4, r4, #16
   17436:	00db      	lsls	r3, r3, #3
   17438:	4314      	orrs	r4, r2
   1743a:	431c      	orrs	r4, r3
   1743c:	00c3      	lsls	r3, r0, #3
   1743e:	4699      	mov	r9, r3
   17440:	4b68      	ldr	r3, [pc, #416]	; (175e4 <__aeabi_dmul+0x1e0>)
   17442:	46a3      	mov	fp, r4
   17444:	469c      	mov	ip, r3
   17446:	2300      	movs	r3, #0
   17448:	2700      	movs	r7, #0
   1744a:	4466      	add	r6, ip
   1744c:	9302      	str	r3, [sp, #8]
   1744e:	4643      	mov	r3, r8
   17450:	031c      	lsls	r4, r3, #12
   17452:	005a      	lsls	r2, r3, #1
   17454:	0fdb      	lsrs	r3, r3, #31
   17456:	4650      	mov	r0, sl
   17458:	0b24      	lsrs	r4, r4, #12
   1745a:	0d52      	lsrs	r2, r2, #21
   1745c:	4698      	mov	r8, r3
   1745e:	d100      	bne.n	17462 <__aeabi_dmul+0x5e>
   17460:	e076      	b.n	17550 <__aeabi_dmul+0x14c>
   17462:	4b5f      	ldr	r3, [pc, #380]	; (175e0 <__aeabi_dmul+0x1dc>)
   17464:	429a      	cmp	r2, r3
   17466:	d06d      	beq.n	17544 <__aeabi_dmul+0x140>
   17468:	2380      	movs	r3, #128	; 0x80
   1746a:	0f41      	lsrs	r1, r0, #29
   1746c:	041b      	lsls	r3, r3, #16
   1746e:	430b      	orrs	r3, r1
   17470:	495c      	ldr	r1, [pc, #368]	; (175e4 <__aeabi_dmul+0x1e0>)
   17472:	00e4      	lsls	r4, r4, #3
   17474:	468c      	mov	ip, r1
   17476:	431c      	orrs	r4, r3
   17478:	00c3      	lsls	r3, r0, #3
   1747a:	2000      	movs	r0, #0
   1747c:	4462      	add	r2, ip
   1747e:	4641      	mov	r1, r8
   17480:	18b6      	adds	r6, r6, r2
   17482:	4069      	eors	r1, r5
   17484:	1c72      	adds	r2, r6, #1
   17486:	9101      	str	r1, [sp, #4]
   17488:	4694      	mov	ip, r2
   1748a:	4307      	orrs	r7, r0
   1748c:	2f0f      	cmp	r7, #15
   1748e:	d900      	bls.n	17492 <__aeabi_dmul+0x8e>
   17490:	e0b0      	b.n	175f4 <__aeabi_dmul+0x1f0>
   17492:	4a55      	ldr	r2, [pc, #340]	; (175e8 <__aeabi_dmul+0x1e4>)
   17494:	00bf      	lsls	r7, r7, #2
   17496:	59d2      	ldr	r2, [r2, r7]
   17498:	4697      	mov	pc, r2
   1749a:	465b      	mov	r3, fp
   1749c:	4303      	orrs	r3, r0
   1749e:	4699      	mov	r9, r3
   174a0:	d000      	beq.n	174a4 <__aeabi_dmul+0xa0>
   174a2:	e087      	b.n	175b4 <__aeabi_dmul+0x1b0>
   174a4:	2300      	movs	r3, #0
   174a6:	469b      	mov	fp, r3
   174a8:	3302      	adds	r3, #2
   174aa:	2708      	movs	r7, #8
   174ac:	9302      	str	r3, [sp, #8]
   174ae:	e7ce      	b.n	1744e <__aeabi_dmul+0x4a>
   174b0:	4642      	mov	r2, r8
   174b2:	9201      	str	r2, [sp, #4]
   174b4:	2802      	cmp	r0, #2
   174b6:	d067      	beq.n	17588 <__aeabi_dmul+0x184>
   174b8:	2803      	cmp	r0, #3
   174ba:	d100      	bne.n	174be <__aeabi_dmul+0xba>
   174bc:	e20e      	b.n	178dc <__aeabi_dmul+0x4d8>
   174be:	2801      	cmp	r0, #1
   174c0:	d000      	beq.n	174c4 <__aeabi_dmul+0xc0>
   174c2:	e162      	b.n	1778a <__aeabi_dmul+0x386>
   174c4:	2300      	movs	r3, #0
   174c6:	2400      	movs	r4, #0
   174c8:	2200      	movs	r2, #0
   174ca:	4699      	mov	r9, r3
   174cc:	9901      	ldr	r1, [sp, #4]
   174ce:	4001      	ands	r1, r0
   174d0:	b2cd      	uxtb	r5, r1
   174d2:	2100      	movs	r1, #0
   174d4:	0312      	lsls	r2, r2, #12
   174d6:	0d0b      	lsrs	r3, r1, #20
   174d8:	0b12      	lsrs	r2, r2, #12
   174da:	051b      	lsls	r3, r3, #20
   174dc:	4313      	orrs	r3, r2
   174de:	4a43      	ldr	r2, [pc, #268]	; (175ec <__aeabi_dmul+0x1e8>)
   174e0:	0524      	lsls	r4, r4, #20
   174e2:	4013      	ands	r3, r2
   174e4:	431c      	orrs	r4, r3
   174e6:	0064      	lsls	r4, r4, #1
   174e8:	07ed      	lsls	r5, r5, #31
   174ea:	0864      	lsrs	r4, r4, #1
   174ec:	432c      	orrs	r4, r5
   174ee:	4648      	mov	r0, r9
   174f0:	0021      	movs	r1, r4
   174f2:	b007      	add	sp, #28
   174f4:	bc3c      	pop	{r2, r3, r4, r5}
   174f6:	4690      	mov	r8, r2
   174f8:	4699      	mov	r9, r3
   174fa:	46a2      	mov	sl, r4
   174fc:	46ab      	mov	fp, r5
   174fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17500:	4303      	orrs	r3, r0
   17502:	4699      	mov	r9, r3
   17504:	d04f      	beq.n	175a6 <__aeabi_dmul+0x1a2>
   17506:	465b      	mov	r3, fp
   17508:	2b00      	cmp	r3, #0
   1750a:	d100      	bne.n	1750e <__aeabi_dmul+0x10a>
   1750c:	e189      	b.n	17822 <__aeabi_dmul+0x41e>
   1750e:	4658      	mov	r0, fp
   17510:	f000 fe98 	bl	18244 <__clzsi2>
   17514:	0003      	movs	r3, r0
   17516:	3b0b      	subs	r3, #11
   17518:	2b1c      	cmp	r3, #28
   1751a:	dd00      	ble.n	1751e <__aeabi_dmul+0x11a>
   1751c:	e17a      	b.n	17814 <__aeabi_dmul+0x410>
   1751e:	221d      	movs	r2, #29
   17520:	1ad3      	subs	r3, r2, r3
   17522:	003a      	movs	r2, r7
   17524:	0001      	movs	r1, r0
   17526:	465c      	mov	r4, fp
   17528:	40da      	lsrs	r2, r3
   1752a:	3908      	subs	r1, #8
   1752c:	408c      	lsls	r4, r1
   1752e:	0013      	movs	r3, r2
   17530:	408f      	lsls	r7, r1
   17532:	4323      	orrs	r3, r4
   17534:	469b      	mov	fp, r3
   17536:	46b9      	mov	r9, r7
   17538:	2300      	movs	r3, #0
   1753a:	4e2d      	ldr	r6, [pc, #180]	; (175f0 <__aeabi_dmul+0x1ec>)
   1753c:	2700      	movs	r7, #0
   1753e:	1a36      	subs	r6, r6, r0
   17540:	9302      	str	r3, [sp, #8]
   17542:	e784      	b.n	1744e <__aeabi_dmul+0x4a>
   17544:	4653      	mov	r3, sl
   17546:	4323      	orrs	r3, r4
   17548:	d12a      	bne.n	175a0 <__aeabi_dmul+0x19c>
   1754a:	2400      	movs	r4, #0
   1754c:	2002      	movs	r0, #2
   1754e:	e796      	b.n	1747e <__aeabi_dmul+0x7a>
   17550:	4653      	mov	r3, sl
   17552:	4323      	orrs	r3, r4
   17554:	d020      	beq.n	17598 <__aeabi_dmul+0x194>
   17556:	2c00      	cmp	r4, #0
   17558:	d100      	bne.n	1755c <__aeabi_dmul+0x158>
   1755a:	e157      	b.n	1780c <__aeabi_dmul+0x408>
   1755c:	0020      	movs	r0, r4
   1755e:	f000 fe71 	bl	18244 <__clzsi2>
   17562:	0003      	movs	r3, r0
   17564:	3b0b      	subs	r3, #11
   17566:	2b1c      	cmp	r3, #28
   17568:	dd00      	ble.n	1756c <__aeabi_dmul+0x168>
   1756a:	e149      	b.n	17800 <__aeabi_dmul+0x3fc>
   1756c:	211d      	movs	r1, #29
   1756e:	1acb      	subs	r3, r1, r3
   17570:	4651      	mov	r1, sl
   17572:	0002      	movs	r2, r0
   17574:	40d9      	lsrs	r1, r3
   17576:	4653      	mov	r3, sl
   17578:	3a08      	subs	r2, #8
   1757a:	4094      	lsls	r4, r2
   1757c:	4093      	lsls	r3, r2
   1757e:	430c      	orrs	r4, r1
   17580:	4a1b      	ldr	r2, [pc, #108]	; (175f0 <__aeabi_dmul+0x1ec>)
   17582:	1a12      	subs	r2, r2, r0
   17584:	2000      	movs	r0, #0
   17586:	e77a      	b.n	1747e <__aeabi_dmul+0x7a>
   17588:	2501      	movs	r5, #1
   1758a:	9b01      	ldr	r3, [sp, #4]
   1758c:	4c14      	ldr	r4, [pc, #80]	; (175e0 <__aeabi_dmul+0x1dc>)
   1758e:	401d      	ands	r5, r3
   17590:	2300      	movs	r3, #0
   17592:	2200      	movs	r2, #0
   17594:	4699      	mov	r9, r3
   17596:	e79c      	b.n	174d2 <__aeabi_dmul+0xce>
   17598:	2400      	movs	r4, #0
   1759a:	2200      	movs	r2, #0
   1759c:	2001      	movs	r0, #1
   1759e:	e76e      	b.n	1747e <__aeabi_dmul+0x7a>
   175a0:	4653      	mov	r3, sl
   175a2:	2003      	movs	r0, #3
   175a4:	e76b      	b.n	1747e <__aeabi_dmul+0x7a>
   175a6:	2300      	movs	r3, #0
   175a8:	469b      	mov	fp, r3
   175aa:	3301      	adds	r3, #1
   175ac:	2704      	movs	r7, #4
   175ae:	2600      	movs	r6, #0
   175b0:	9302      	str	r3, [sp, #8]
   175b2:	e74c      	b.n	1744e <__aeabi_dmul+0x4a>
   175b4:	2303      	movs	r3, #3
   175b6:	4681      	mov	r9, r0
   175b8:	270c      	movs	r7, #12
   175ba:	9302      	str	r3, [sp, #8]
   175bc:	e747      	b.n	1744e <__aeabi_dmul+0x4a>
   175be:	2280      	movs	r2, #128	; 0x80
   175c0:	2300      	movs	r3, #0
   175c2:	2500      	movs	r5, #0
   175c4:	0312      	lsls	r2, r2, #12
   175c6:	4699      	mov	r9, r3
   175c8:	4c05      	ldr	r4, [pc, #20]	; (175e0 <__aeabi_dmul+0x1dc>)
   175ca:	e782      	b.n	174d2 <__aeabi_dmul+0xce>
   175cc:	465c      	mov	r4, fp
   175ce:	464b      	mov	r3, r9
   175d0:	9802      	ldr	r0, [sp, #8]
   175d2:	e76f      	b.n	174b4 <__aeabi_dmul+0xb0>
   175d4:	465c      	mov	r4, fp
   175d6:	464b      	mov	r3, r9
   175d8:	9501      	str	r5, [sp, #4]
   175da:	9802      	ldr	r0, [sp, #8]
   175dc:	e76a      	b.n	174b4 <__aeabi_dmul+0xb0>
   175de:	46c0      	nop			; (mov r8, r8)
   175e0:	000007ff 	.word	0x000007ff
   175e4:	fffffc01 	.word	0xfffffc01
   175e8:	0001b11c 	.word	0x0001b11c
   175ec:	800fffff 	.word	0x800fffff
   175f0:	fffffc0d 	.word	0xfffffc0d
   175f4:	464a      	mov	r2, r9
   175f6:	4649      	mov	r1, r9
   175f8:	0c17      	lsrs	r7, r2, #16
   175fa:	0c1a      	lsrs	r2, r3, #16
   175fc:	041b      	lsls	r3, r3, #16
   175fe:	0c1b      	lsrs	r3, r3, #16
   17600:	0408      	lsls	r0, r1, #16
   17602:	0019      	movs	r1, r3
   17604:	0c00      	lsrs	r0, r0, #16
   17606:	4341      	muls	r1, r0
   17608:	0015      	movs	r5, r2
   1760a:	4688      	mov	r8, r1
   1760c:	0019      	movs	r1, r3
   1760e:	437d      	muls	r5, r7
   17610:	4379      	muls	r1, r7
   17612:	9503      	str	r5, [sp, #12]
   17614:	4689      	mov	r9, r1
   17616:	0029      	movs	r1, r5
   17618:	0015      	movs	r5, r2
   1761a:	4345      	muls	r5, r0
   1761c:	444d      	add	r5, r9
   1761e:	9502      	str	r5, [sp, #8]
   17620:	4645      	mov	r5, r8
   17622:	0c2d      	lsrs	r5, r5, #16
   17624:	46aa      	mov	sl, r5
   17626:	9d02      	ldr	r5, [sp, #8]
   17628:	4455      	add	r5, sl
   1762a:	45a9      	cmp	r9, r5
   1762c:	d906      	bls.n	1763c <__aeabi_dmul+0x238>
   1762e:	468a      	mov	sl, r1
   17630:	2180      	movs	r1, #128	; 0x80
   17632:	0249      	lsls	r1, r1, #9
   17634:	4689      	mov	r9, r1
   17636:	44ca      	add	sl, r9
   17638:	4651      	mov	r1, sl
   1763a:	9103      	str	r1, [sp, #12]
   1763c:	0c29      	lsrs	r1, r5, #16
   1763e:	9104      	str	r1, [sp, #16]
   17640:	4641      	mov	r1, r8
   17642:	0409      	lsls	r1, r1, #16
   17644:	042d      	lsls	r5, r5, #16
   17646:	0c09      	lsrs	r1, r1, #16
   17648:	4688      	mov	r8, r1
   1764a:	0029      	movs	r1, r5
   1764c:	0c25      	lsrs	r5, r4, #16
   1764e:	0424      	lsls	r4, r4, #16
   17650:	4441      	add	r1, r8
   17652:	0c24      	lsrs	r4, r4, #16
   17654:	9105      	str	r1, [sp, #20]
   17656:	0021      	movs	r1, r4
   17658:	4341      	muls	r1, r0
   1765a:	4688      	mov	r8, r1
   1765c:	0021      	movs	r1, r4
   1765e:	4379      	muls	r1, r7
   17660:	468a      	mov	sl, r1
   17662:	4368      	muls	r0, r5
   17664:	4641      	mov	r1, r8
   17666:	4450      	add	r0, sl
   17668:	4681      	mov	r9, r0
   1766a:	0c08      	lsrs	r0, r1, #16
   1766c:	4448      	add	r0, r9
   1766e:	436f      	muls	r7, r5
   17670:	4582      	cmp	sl, r0
   17672:	d903      	bls.n	1767c <__aeabi_dmul+0x278>
   17674:	2180      	movs	r1, #128	; 0x80
   17676:	0249      	lsls	r1, r1, #9
   17678:	4689      	mov	r9, r1
   1767a:	444f      	add	r7, r9
   1767c:	0c01      	lsrs	r1, r0, #16
   1767e:	4689      	mov	r9, r1
   17680:	0039      	movs	r1, r7
   17682:	4449      	add	r1, r9
   17684:	9102      	str	r1, [sp, #8]
   17686:	4641      	mov	r1, r8
   17688:	040f      	lsls	r7, r1, #16
   1768a:	9904      	ldr	r1, [sp, #16]
   1768c:	0c3f      	lsrs	r7, r7, #16
   1768e:	4688      	mov	r8, r1
   17690:	0400      	lsls	r0, r0, #16
   17692:	19c0      	adds	r0, r0, r7
   17694:	4480      	add	r8, r0
   17696:	4641      	mov	r1, r8
   17698:	9104      	str	r1, [sp, #16]
   1769a:	4659      	mov	r1, fp
   1769c:	0c0f      	lsrs	r7, r1, #16
   1769e:	0409      	lsls	r1, r1, #16
   176a0:	0c09      	lsrs	r1, r1, #16
   176a2:	4688      	mov	r8, r1
   176a4:	4359      	muls	r1, r3
   176a6:	468a      	mov	sl, r1
   176a8:	0039      	movs	r1, r7
   176aa:	4351      	muls	r1, r2
   176ac:	4689      	mov	r9, r1
   176ae:	4641      	mov	r1, r8
   176b0:	434a      	muls	r2, r1
   176b2:	4651      	mov	r1, sl
   176b4:	0c09      	lsrs	r1, r1, #16
   176b6:	468b      	mov	fp, r1
   176b8:	437b      	muls	r3, r7
   176ba:	18d2      	adds	r2, r2, r3
   176bc:	445a      	add	r2, fp
   176be:	4293      	cmp	r3, r2
   176c0:	d903      	bls.n	176ca <__aeabi_dmul+0x2c6>
   176c2:	2380      	movs	r3, #128	; 0x80
   176c4:	025b      	lsls	r3, r3, #9
   176c6:	469b      	mov	fp, r3
   176c8:	44d9      	add	r9, fp
   176ca:	4651      	mov	r1, sl
   176cc:	0409      	lsls	r1, r1, #16
   176ce:	0c09      	lsrs	r1, r1, #16
   176d0:	468a      	mov	sl, r1
   176d2:	4641      	mov	r1, r8
   176d4:	4361      	muls	r1, r4
   176d6:	437c      	muls	r4, r7
   176d8:	0c13      	lsrs	r3, r2, #16
   176da:	0412      	lsls	r2, r2, #16
   176dc:	444b      	add	r3, r9
   176de:	4452      	add	r2, sl
   176e0:	46a1      	mov	r9, r4
   176e2:	468a      	mov	sl, r1
   176e4:	003c      	movs	r4, r7
   176e6:	4641      	mov	r1, r8
   176e8:	436c      	muls	r4, r5
   176ea:	434d      	muls	r5, r1
   176ec:	4651      	mov	r1, sl
   176ee:	444d      	add	r5, r9
   176f0:	0c0f      	lsrs	r7, r1, #16
   176f2:	197d      	adds	r5, r7, r5
   176f4:	45a9      	cmp	r9, r5
   176f6:	d903      	bls.n	17700 <__aeabi_dmul+0x2fc>
   176f8:	2180      	movs	r1, #128	; 0x80
   176fa:	0249      	lsls	r1, r1, #9
   176fc:	4688      	mov	r8, r1
   176fe:	4444      	add	r4, r8
   17700:	9f04      	ldr	r7, [sp, #16]
   17702:	9903      	ldr	r1, [sp, #12]
   17704:	46b8      	mov	r8, r7
   17706:	4441      	add	r1, r8
   17708:	468b      	mov	fp, r1
   1770a:	4583      	cmp	fp, r0
   1770c:	4180      	sbcs	r0, r0
   1770e:	4241      	negs	r1, r0
   17710:	4688      	mov	r8, r1
   17712:	4651      	mov	r1, sl
   17714:	0408      	lsls	r0, r1, #16
   17716:	042f      	lsls	r7, r5, #16
   17718:	0c00      	lsrs	r0, r0, #16
   1771a:	183f      	adds	r7, r7, r0
   1771c:	4658      	mov	r0, fp
   1771e:	9902      	ldr	r1, [sp, #8]
   17720:	1810      	adds	r0, r2, r0
   17722:	4689      	mov	r9, r1
   17724:	4290      	cmp	r0, r2
   17726:	4192      	sbcs	r2, r2
   17728:	444f      	add	r7, r9
   1772a:	46ba      	mov	sl, r7
   1772c:	4252      	negs	r2, r2
   1772e:	4699      	mov	r9, r3
   17730:	4693      	mov	fp, r2
   17732:	44c2      	add	sl, r8
   17734:	44d1      	add	r9, sl
   17736:	44cb      	add	fp, r9
   17738:	428f      	cmp	r7, r1
   1773a:	41bf      	sbcs	r7, r7
   1773c:	45c2      	cmp	sl, r8
   1773e:	4189      	sbcs	r1, r1
   17740:	4599      	cmp	r9, r3
   17742:	419b      	sbcs	r3, r3
   17744:	4593      	cmp	fp, r2
   17746:	4192      	sbcs	r2, r2
   17748:	427f      	negs	r7, r7
   1774a:	4249      	negs	r1, r1
   1774c:	0c2d      	lsrs	r5, r5, #16
   1774e:	4252      	negs	r2, r2
   17750:	430f      	orrs	r7, r1
   17752:	425b      	negs	r3, r3
   17754:	4313      	orrs	r3, r2
   17756:	197f      	adds	r7, r7, r5
   17758:	18ff      	adds	r7, r7, r3
   1775a:	465b      	mov	r3, fp
   1775c:	193c      	adds	r4, r7, r4
   1775e:	0ddb      	lsrs	r3, r3, #23
   17760:	9a05      	ldr	r2, [sp, #20]
   17762:	0264      	lsls	r4, r4, #9
   17764:	431c      	orrs	r4, r3
   17766:	0243      	lsls	r3, r0, #9
   17768:	4313      	orrs	r3, r2
   1776a:	1e5d      	subs	r5, r3, #1
   1776c:	41ab      	sbcs	r3, r5
   1776e:	465a      	mov	r2, fp
   17770:	0dc0      	lsrs	r0, r0, #23
   17772:	4303      	orrs	r3, r0
   17774:	0252      	lsls	r2, r2, #9
   17776:	4313      	orrs	r3, r2
   17778:	01e2      	lsls	r2, r4, #7
   1777a:	d556      	bpl.n	1782a <__aeabi_dmul+0x426>
   1777c:	2001      	movs	r0, #1
   1777e:	085a      	lsrs	r2, r3, #1
   17780:	4003      	ands	r3, r0
   17782:	4313      	orrs	r3, r2
   17784:	07e2      	lsls	r2, r4, #31
   17786:	4313      	orrs	r3, r2
   17788:	0864      	lsrs	r4, r4, #1
   1778a:	485a      	ldr	r0, [pc, #360]	; (178f4 <__aeabi_dmul+0x4f0>)
   1778c:	4460      	add	r0, ip
   1778e:	2800      	cmp	r0, #0
   17790:	dd4d      	ble.n	1782e <__aeabi_dmul+0x42a>
   17792:	075a      	lsls	r2, r3, #29
   17794:	d009      	beq.n	177aa <__aeabi_dmul+0x3a6>
   17796:	220f      	movs	r2, #15
   17798:	401a      	ands	r2, r3
   1779a:	2a04      	cmp	r2, #4
   1779c:	d005      	beq.n	177aa <__aeabi_dmul+0x3a6>
   1779e:	1d1a      	adds	r2, r3, #4
   177a0:	429a      	cmp	r2, r3
   177a2:	419b      	sbcs	r3, r3
   177a4:	425b      	negs	r3, r3
   177a6:	18e4      	adds	r4, r4, r3
   177a8:	0013      	movs	r3, r2
   177aa:	01e2      	lsls	r2, r4, #7
   177ac:	d504      	bpl.n	177b8 <__aeabi_dmul+0x3b4>
   177ae:	2080      	movs	r0, #128	; 0x80
   177b0:	4a51      	ldr	r2, [pc, #324]	; (178f8 <__aeabi_dmul+0x4f4>)
   177b2:	00c0      	lsls	r0, r0, #3
   177b4:	4014      	ands	r4, r2
   177b6:	4460      	add	r0, ip
   177b8:	4a50      	ldr	r2, [pc, #320]	; (178fc <__aeabi_dmul+0x4f8>)
   177ba:	4290      	cmp	r0, r2
   177bc:	dd00      	ble.n	177c0 <__aeabi_dmul+0x3bc>
   177be:	e6e3      	b.n	17588 <__aeabi_dmul+0x184>
   177c0:	2501      	movs	r5, #1
   177c2:	08db      	lsrs	r3, r3, #3
   177c4:	0762      	lsls	r2, r4, #29
   177c6:	431a      	orrs	r2, r3
   177c8:	0264      	lsls	r4, r4, #9
   177ca:	9b01      	ldr	r3, [sp, #4]
   177cc:	4691      	mov	r9, r2
   177ce:	0b22      	lsrs	r2, r4, #12
   177d0:	0544      	lsls	r4, r0, #21
   177d2:	0d64      	lsrs	r4, r4, #21
   177d4:	401d      	ands	r5, r3
   177d6:	e67c      	b.n	174d2 <__aeabi_dmul+0xce>
   177d8:	2280      	movs	r2, #128	; 0x80
   177da:	4659      	mov	r1, fp
   177dc:	0312      	lsls	r2, r2, #12
   177de:	4211      	tst	r1, r2
   177e0:	d008      	beq.n	177f4 <__aeabi_dmul+0x3f0>
   177e2:	4214      	tst	r4, r2
   177e4:	d106      	bne.n	177f4 <__aeabi_dmul+0x3f0>
   177e6:	4322      	orrs	r2, r4
   177e8:	0312      	lsls	r2, r2, #12
   177ea:	0b12      	lsrs	r2, r2, #12
   177ec:	4645      	mov	r5, r8
   177ee:	4699      	mov	r9, r3
   177f0:	4c43      	ldr	r4, [pc, #268]	; (17900 <__aeabi_dmul+0x4fc>)
   177f2:	e66e      	b.n	174d2 <__aeabi_dmul+0xce>
   177f4:	465b      	mov	r3, fp
   177f6:	431a      	orrs	r2, r3
   177f8:	0312      	lsls	r2, r2, #12
   177fa:	0b12      	lsrs	r2, r2, #12
   177fc:	4c40      	ldr	r4, [pc, #256]	; (17900 <__aeabi_dmul+0x4fc>)
   177fe:	e668      	b.n	174d2 <__aeabi_dmul+0xce>
   17800:	0003      	movs	r3, r0
   17802:	4654      	mov	r4, sl
   17804:	3b28      	subs	r3, #40	; 0x28
   17806:	409c      	lsls	r4, r3
   17808:	2300      	movs	r3, #0
   1780a:	e6b9      	b.n	17580 <__aeabi_dmul+0x17c>
   1780c:	f000 fd1a 	bl	18244 <__clzsi2>
   17810:	3020      	adds	r0, #32
   17812:	e6a6      	b.n	17562 <__aeabi_dmul+0x15e>
   17814:	0003      	movs	r3, r0
   17816:	3b28      	subs	r3, #40	; 0x28
   17818:	409f      	lsls	r7, r3
   1781a:	2300      	movs	r3, #0
   1781c:	46bb      	mov	fp, r7
   1781e:	4699      	mov	r9, r3
   17820:	e68a      	b.n	17538 <__aeabi_dmul+0x134>
   17822:	f000 fd0f 	bl	18244 <__clzsi2>
   17826:	3020      	adds	r0, #32
   17828:	e674      	b.n	17514 <__aeabi_dmul+0x110>
   1782a:	46b4      	mov	ip, r6
   1782c:	e7ad      	b.n	1778a <__aeabi_dmul+0x386>
   1782e:	2501      	movs	r5, #1
   17830:	1a2a      	subs	r2, r5, r0
   17832:	2a38      	cmp	r2, #56	; 0x38
   17834:	dd06      	ble.n	17844 <__aeabi_dmul+0x440>
   17836:	9b01      	ldr	r3, [sp, #4]
   17838:	2400      	movs	r4, #0
   1783a:	401d      	ands	r5, r3
   1783c:	2300      	movs	r3, #0
   1783e:	2200      	movs	r2, #0
   17840:	4699      	mov	r9, r3
   17842:	e646      	b.n	174d2 <__aeabi_dmul+0xce>
   17844:	2a1f      	cmp	r2, #31
   17846:	dc21      	bgt.n	1788c <__aeabi_dmul+0x488>
   17848:	2520      	movs	r5, #32
   1784a:	0020      	movs	r0, r4
   1784c:	1aad      	subs	r5, r5, r2
   1784e:	001e      	movs	r6, r3
   17850:	40ab      	lsls	r3, r5
   17852:	40a8      	lsls	r0, r5
   17854:	40d6      	lsrs	r6, r2
   17856:	1e5d      	subs	r5, r3, #1
   17858:	41ab      	sbcs	r3, r5
   1785a:	4330      	orrs	r0, r6
   1785c:	4318      	orrs	r0, r3
   1785e:	40d4      	lsrs	r4, r2
   17860:	0743      	lsls	r3, r0, #29
   17862:	d009      	beq.n	17878 <__aeabi_dmul+0x474>
   17864:	230f      	movs	r3, #15
   17866:	4003      	ands	r3, r0
   17868:	2b04      	cmp	r3, #4
   1786a:	d005      	beq.n	17878 <__aeabi_dmul+0x474>
   1786c:	0003      	movs	r3, r0
   1786e:	1d18      	adds	r0, r3, #4
   17870:	4298      	cmp	r0, r3
   17872:	419b      	sbcs	r3, r3
   17874:	425b      	negs	r3, r3
   17876:	18e4      	adds	r4, r4, r3
   17878:	0223      	lsls	r3, r4, #8
   1787a:	d521      	bpl.n	178c0 <__aeabi_dmul+0x4bc>
   1787c:	2501      	movs	r5, #1
   1787e:	9b01      	ldr	r3, [sp, #4]
   17880:	2401      	movs	r4, #1
   17882:	401d      	ands	r5, r3
   17884:	2300      	movs	r3, #0
   17886:	2200      	movs	r2, #0
   17888:	4699      	mov	r9, r3
   1788a:	e622      	b.n	174d2 <__aeabi_dmul+0xce>
   1788c:	251f      	movs	r5, #31
   1788e:	0021      	movs	r1, r4
   17890:	426d      	negs	r5, r5
   17892:	1a28      	subs	r0, r5, r0
   17894:	40c1      	lsrs	r1, r0
   17896:	0008      	movs	r0, r1
   17898:	2a20      	cmp	r2, #32
   1789a:	d01d      	beq.n	178d8 <__aeabi_dmul+0x4d4>
   1789c:	355f      	adds	r5, #95	; 0x5f
   1789e:	1aaa      	subs	r2, r5, r2
   178a0:	4094      	lsls	r4, r2
   178a2:	4323      	orrs	r3, r4
   178a4:	1e5c      	subs	r4, r3, #1
   178a6:	41a3      	sbcs	r3, r4
   178a8:	2507      	movs	r5, #7
   178aa:	4303      	orrs	r3, r0
   178ac:	401d      	ands	r5, r3
   178ae:	2200      	movs	r2, #0
   178b0:	2d00      	cmp	r5, #0
   178b2:	d009      	beq.n	178c8 <__aeabi_dmul+0x4c4>
   178b4:	220f      	movs	r2, #15
   178b6:	2400      	movs	r4, #0
   178b8:	401a      	ands	r2, r3
   178ba:	0018      	movs	r0, r3
   178bc:	2a04      	cmp	r2, #4
   178be:	d1d6      	bne.n	1786e <__aeabi_dmul+0x46a>
   178c0:	0003      	movs	r3, r0
   178c2:	0765      	lsls	r5, r4, #29
   178c4:	0264      	lsls	r4, r4, #9
   178c6:	0b22      	lsrs	r2, r4, #12
   178c8:	08db      	lsrs	r3, r3, #3
   178ca:	432b      	orrs	r3, r5
   178cc:	2501      	movs	r5, #1
   178ce:	4699      	mov	r9, r3
   178d0:	9b01      	ldr	r3, [sp, #4]
   178d2:	2400      	movs	r4, #0
   178d4:	401d      	ands	r5, r3
   178d6:	e5fc      	b.n	174d2 <__aeabi_dmul+0xce>
   178d8:	2400      	movs	r4, #0
   178da:	e7e2      	b.n	178a2 <__aeabi_dmul+0x49e>
   178dc:	2280      	movs	r2, #128	; 0x80
   178de:	2501      	movs	r5, #1
   178e0:	0312      	lsls	r2, r2, #12
   178e2:	4322      	orrs	r2, r4
   178e4:	9901      	ldr	r1, [sp, #4]
   178e6:	0312      	lsls	r2, r2, #12
   178e8:	0b12      	lsrs	r2, r2, #12
   178ea:	400d      	ands	r5, r1
   178ec:	4699      	mov	r9, r3
   178ee:	4c04      	ldr	r4, [pc, #16]	; (17900 <__aeabi_dmul+0x4fc>)
   178f0:	e5ef      	b.n	174d2 <__aeabi_dmul+0xce>
   178f2:	46c0      	nop			; (mov r8, r8)
   178f4:	000003ff 	.word	0x000003ff
   178f8:	feffffff 	.word	0xfeffffff
   178fc:	000007fe 	.word	0x000007fe
   17900:	000007ff 	.word	0x000007ff

00017904 <__aeabi_dsub>:
   17904:	b5f0      	push	{r4, r5, r6, r7, lr}
   17906:	4646      	mov	r6, r8
   17908:	46d6      	mov	lr, sl
   1790a:	464f      	mov	r7, r9
   1790c:	030c      	lsls	r4, r1, #12
   1790e:	b5c0      	push	{r6, r7, lr}
   17910:	0fcd      	lsrs	r5, r1, #31
   17912:	004e      	lsls	r6, r1, #1
   17914:	0a61      	lsrs	r1, r4, #9
   17916:	0f44      	lsrs	r4, r0, #29
   17918:	430c      	orrs	r4, r1
   1791a:	00c1      	lsls	r1, r0, #3
   1791c:	0058      	lsls	r0, r3, #1
   1791e:	0d40      	lsrs	r0, r0, #21
   17920:	4684      	mov	ip, r0
   17922:	468a      	mov	sl, r1
   17924:	000f      	movs	r7, r1
   17926:	0319      	lsls	r1, r3, #12
   17928:	0f50      	lsrs	r0, r2, #29
   1792a:	0a49      	lsrs	r1, r1, #9
   1792c:	4301      	orrs	r1, r0
   1792e:	48c6      	ldr	r0, [pc, #792]	; (17c48 <__aeabi_dsub+0x344>)
   17930:	0d76      	lsrs	r6, r6, #21
   17932:	46a8      	mov	r8, r5
   17934:	0fdb      	lsrs	r3, r3, #31
   17936:	00d2      	lsls	r2, r2, #3
   17938:	4584      	cmp	ip, r0
   1793a:	d100      	bne.n	1793e <__aeabi_dsub+0x3a>
   1793c:	e0d8      	b.n	17af0 <__aeabi_dsub+0x1ec>
   1793e:	2001      	movs	r0, #1
   17940:	4043      	eors	r3, r0
   17942:	42ab      	cmp	r3, r5
   17944:	d100      	bne.n	17948 <__aeabi_dsub+0x44>
   17946:	e0a6      	b.n	17a96 <__aeabi_dsub+0x192>
   17948:	4660      	mov	r0, ip
   1794a:	1a35      	subs	r5, r6, r0
   1794c:	2d00      	cmp	r5, #0
   1794e:	dc00      	bgt.n	17952 <__aeabi_dsub+0x4e>
   17950:	e105      	b.n	17b5e <__aeabi_dsub+0x25a>
   17952:	2800      	cmp	r0, #0
   17954:	d110      	bne.n	17978 <__aeabi_dsub+0x74>
   17956:	000b      	movs	r3, r1
   17958:	4313      	orrs	r3, r2
   1795a:	d100      	bne.n	1795e <__aeabi_dsub+0x5a>
   1795c:	e0d7      	b.n	17b0e <__aeabi_dsub+0x20a>
   1795e:	1e6b      	subs	r3, r5, #1
   17960:	2b00      	cmp	r3, #0
   17962:	d000      	beq.n	17966 <__aeabi_dsub+0x62>
   17964:	e14b      	b.n	17bfe <__aeabi_dsub+0x2fa>
   17966:	4653      	mov	r3, sl
   17968:	1a9f      	subs	r7, r3, r2
   1796a:	45ba      	cmp	sl, r7
   1796c:	4180      	sbcs	r0, r0
   1796e:	1a64      	subs	r4, r4, r1
   17970:	4240      	negs	r0, r0
   17972:	1a24      	subs	r4, r4, r0
   17974:	2601      	movs	r6, #1
   17976:	e01e      	b.n	179b6 <__aeabi_dsub+0xb2>
   17978:	4bb3      	ldr	r3, [pc, #716]	; (17c48 <__aeabi_dsub+0x344>)
   1797a:	429e      	cmp	r6, r3
   1797c:	d048      	beq.n	17a10 <__aeabi_dsub+0x10c>
   1797e:	2380      	movs	r3, #128	; 0x80
   17980:	041b      	lsls	r3, r3, #16
   17982:	4319      	orrs	r1, r3
   17984:	2d38      	cmp	r5, #56	; 0x38
   17986:	dd00      	ble.n	1798a <__aeabi_dsub+0x86>
   17988:	e119      	b.n	17bbe <__aeabi_dsub+0x2ba>
   1798a:	2d1f      	cmp	r5, #31
   1798c:	dd00      	ble.n	17990 <__aeabi_dsub+0x8c>
   1798e:	e14c      	b.n	17c2a <__aeabi_dsub+0x326>
   17990:	2320      	movs	r3, #32
   17992:	000f      	movs	r7, r1
   17994:	1b5b      	subs	r3, r3, r5
   17996:	0010      	movs	r0, r2
   17998:	409a      	lsls	r2, r3
   1799a:	409f      	lsls	r7, r3
   1799c:	40e8      	lsrs	r0, r5
   1799e:	1e53      	subs	r3, r2, #1
   179a0:	419a      	sbcs	r2, r3
   179a2:	40e9      	lsrs	r1, r5
   179a4:	4307      	orrs	r7, r0
   179a6:	4317      	orrs	r7, r2
   179a8:	4653      	mov	r3, sl
   179aa:	1bdf      	subs	r7, r3, r7
   179ac:	1a61      	subs	r1, r4, r1
   179ae:	45ba      	cmp	sl, r7
   179b0:	41a4      	sbcs	r4, r4
   179b2:	4264      	negs	r4, r4
   179b4:	1b0c      	subs	r4, r1, r4
   179b6:	0223      	lsls	r3, r4, #8
   179b8:	d400      	bmi.n	179bc <__aeabi_dsub+0xb8>
   179ba:	e0c5      	b.n	17b48 <__aeabi_dsub+0x244>
   179bc:	0264      	lsls	r4, r4, #9
   179be:	0a65      	lsrs	r5, r4, #9
   179c0:	2d00      	cmp	r5, #0
   179c2:	d100      	bne.n	179c6 <__aeabi_dsub+0xc2>
   179c4:	e0f6      	b.n	17bb4 <__aeabi_dsub+0x2b0>
   179c6:	0028      	movs	r0, r5
   179c8:	f000 fc3c 	bl	18244 <__clzsi2>
   179cc:	0003      	movs	r3, r0
   179ce:	3b08      	subs	r3, #8
   179d0:	2b1f      	cmp	r3, #31
   179d2:	dd00      	ble.n	179d6 <__aeabi_dsub+0xd2>
   179d4:	e0e9      	b.n	17baa <__aeabi_dsub+0x2a6>
   179d6:	2220      	movs	r2, #32
   179d8:	003c      	movs	r4, r7
   179da:	1ad2      	subs	r2, r2, r3
   179dc:	409d      	lsls	r5, r3
   179de:	40d4      	lsrs	r4, r2
   179e0:	409f      	lsls	r7, r3
   179e2:	4325      	orrs	r5, r4
   179e4:	429e      	cmp	r6, r3
   179e6:	dd00      	ble.n	179ea <__aeabi_dsub+0xe6>
   179e8:	e0db      	b.n	17ba2 <__aeabi_dsub+0x29e>
   179ea:	1b9e      	subs	r6, r3, r6
   179ec:	1c73      	adds	r3, r6, #1
   179ee:	2b1f      	cmp	r3, #31
   179f0:	dd00      	ble.n	179f4 <__aeabi_dsub+0xf0>
   179f2:	e10a      	b.n	17c0a <__aeabi_dsub+0x306>
   179f4:	2220      	movs	r2, #32
   179f6:	0038      	movs	r0, r7
   179f8:	1ad2      	subs	r2, r2, r3
   179fa:	0029      	movs	r1, r5
   179fc:	4097      	lsls	r7, r2
   179fe:	002c      	movs	r4, r5
   17a00:	4091      	lsls	r1, r2
   17a02:	40d8      	lsrs	r0, r3
   17a04:	1e7a      	subs	r2, r7, #1
   17a06:	4197      	sbcs	r7, r2
   17a08:	40dc      	lsrs	r4, r3
   17a0a:	2600      	movs	r6, #0
   17a0c:	4301      	orrs	r1, r0
   17a0e:	430f      	orrs	r7, r1
   17a10:	077b      	lsls	r3, r7, #29
   17a12:	d009      	beq.n	17a28 <__aeabi_dsub+0x124>
   17a14:	230f      	movs	r3, #15
   17a16:	403b      	ands	r3, r7
   17a18:	2b04      	cmp	r3, #4
   17a1a:	d005      	beq.n	17a28 <__aeabi_dsub+0x124>
   17a1c:	1d3b      	adds	r3, r7, #4
   17a1e:	42bb      	cmp	r3, r7
   17a20:	41bf      	sbcs	r7, r7
   17a22:	427f      	negs	r7, r7
   17a24:	19e4      	adds	r4, r4, r7
   17a26:	001f      	movs	r7, r3
   17a28:	0223      	lsls	r3, r4, #8
   17a2a:	d525      	bpl.n	17a78 <__aeabi_dsub+0x174>
   17a2c:	4b86      	ldr	r3, [pc, #536]	; (17c48 <__aeabi_dsub+0x344>)
   17a2e:	3601      	adds	r6, #1
   17a30:	429e      	cmp	r6, r3
   17a32:	d100      	bne.n	17a36 <__aeabi_dsub+0x132>
   17a34:	e0af      	b.n	17b96 <__aeabi_dsub+0x292>
   17a36:	4b85      	ldr	r3, [pc, #532]	; (17c4c <__aeabi_dsub+0x348>)
   17a38:	2501      	movs	r5, #1
   17a3a:	401c      	ands	r4, r3
   17a3c:	4643      	mov	r3, r8
   17a3e:	0762      	lsls	r2, r4, #29
   17a40:	08ff      	lsrs	r7, r7, #3
   17a42:	0264      	lsls	r4, r4, #9
   17a44:	0576      	lsls	r6, r6, #21
   17a46:	4317      	orrs	r7, r2
   17a48:	0b24      	lsrs	r4, r4, #12
   17a4a:	0d76      	lsrs	r6, r6, #21
   17a4c:	401d      	ands	r5, r3
   17a4e:	2100      	movs	r1, #0
   17a50:	0324      	lsls	r4, r4, #12
   17a52:	0b23      	lsrs	r3, r4, #12
   17a54:	0d0c      	lsrs	r4, r1, #20
   17a56:	4a7e      	ldr	r2, [pc, #504]	; (17c50 <__aeabi_dsub+0x34c>)
   17a58:	0524      	lsls	r4, r4, #20
   17a5a:	431c      	orrs	r4, r3
   17a5c:	4014      	ands	r4, r2
   17a5e:	0533      	lsls	r3, r6, #20
   17a60:	4323      	orrs	r3, r4
   17a62:	005b      	lsls	r3, r3, #1
   17a64:	07ed      	lsls	r5, r5, #31
   17a66:	085b      	lsrs	r3, r3, #1
   17a68:	432b      	orrs	r3, r5
   17a6a:	0038      	movs	r0, r7
   17a6c:	0019      	movs	r1, r3
   17a6e:	bc1c      	pop	{r2, r3, r4}
   17a70:	4690      	mov	r8, r2
   17a72:	4699      	mov	r9, r3
   17a74:	46a2      	mov	sl, r4
   17a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17a78:	2501      	movs	r5, #1
   17a7a:	4643      	mov	r3, r8
   17a7c:	0762      	lsls	r2, r4, #29
   17a7e:	08ff      	lsrs	r7, r7, #3
   17a80:	4317      	orrs	r7, r2
   17a82:	08e4      	lsrs	r4, r4, #3
   17a84:	401d      	ands	r5, r3
   17a86:	4b70      	ldr	r3, [pc, #448]	; (17c48 <__aeabi_dsub+0x344>)
   17a88:	429e      	cmp	r6, r3
   17a8a:	d036      	beq.n	17afa <__aeabi_dsub+0x1f6>
   17a8c:	0324      	lsls	r4, r4, #12
   17a8e:	0576      	lsls	r6, r6, #21
   17a90:	0b24      	lsrs	r4, r4, #12
   17a92:	0d76      	lsrs	r6, r6, #21
   17a94:	e7db      	b.n	17a4e <__aeabi_dsub+0x14a>
   17a96:	4663      	mov	r3, ip
   17a98:	1af3      	subs	r3, r6, r3
   17a9a:	2b00      	cmp	r3, #0
   17a9c:	dc00      	bgt.n	17aa0 <__aeabi_dsub+0x19c>
   17a9e:	e094      	b.n	17bca <__aeabi_dsub+0x2c6>
   17aa0:	4660      	mov	r0, ip
   17aa2:	2800      	cmp	r0, #0
   17aa4:	d035      	beq.n	17b12 <__aeabi_dsub+0x20e>
   17aa6:	4868      	ldr	r0, [pc, #416]	; (17c48 <__aeabi_dsub+0x344>)
   17aa8:	4286      	cmp	r6, r0
   17aaa:	d0b1      	beq.n	17a10 <__aeabi_dsub+0x10c>
   17aac:	2780      	movs	r7, #128	; 0x80
   17aae:	043f      	lsls	r7, r7, #16
   17ab0:	4339      	orrs	r1, r7
   17ab2:	2b38      	cmp	r3, #56	; 0x38
   17ab4:	dc00      	bgt.n	17ab8 <__aeabi_dsub+0x1b4>
   17ab6:	e0fd      	b.n	17cb4 <__aeabi_dsub+0x3b0>
   17ab8:	430a      	orrs	r2, r1
   17aba:	0017      	movs	r7, r2
   17abc:	2100      	movs	r1, #0
   17abe:	1e7a      	subs	r2, r7, #1
   17ac0:	4197      	sbcs	r7, r2
   17ac2:	4457      	add	r7, sl
   17ac4:	4557      	cmp	r7, sl
   17ac6:	4180      	sbcs	r0, r0
   17ac8:	1909      	adds	r1, r1, r4
   17aca:	4244      	negs	r4, r0
   17acc:	190c      	adds	r4, r1, r4
   17ace:	0223      	lsls	r3, r4, #8
   17ad0:	d53a      	bpl.n	17b48 <__aeabi_dsub+0x244>
   17ad2:	4b5d      	ldr	r3, [pc, #372]	; (17c48 <__aeabi_dsub+0x344>)
   17ad4:	3601      	adds	r6, #1
   17ad6:	429e      	cmp	r6, r3
   17ad8:	d100      	bne.n	17adc <__aeabi_dsub+0x1d8>
   17ada:	e14b      	b.n	17d74 <__aeabi_dsub+0x470>
   17adc:	2201      	movs	r2, #1
   17ade:	4b5b      	ldr	r3, [pc, #364]	; (17c4c <__aeabi_dsub+0x348>)
   17ae0:	401c      	ands	r4, r3
   17ae2:	087b      	lsrs	r3, r7, #1
   17ae4:	4017      	ands	r7, r2
   17ae6:	431f      	orrs	r7, r3
   17ae8:	07e2      	lsls	r2, r4, #31
   17aea:	4317      	orrs	r7, r2
   17aec:	0864      	lsrs	r4, r4, #1
   17aee:	e78f      	b.n	17a10 <__aeabi_dsub+0x10c>
   17af0:	0008      	movs	r0, r1
   17af2:	4310      	orrs	r0, r2
   17af4:	d000      	beq.n	17af8 <__aeabi_dsub+0x1f4>
   17af6:	e724      	b.n	17942 <__aeabi_dsub+0x3e>
   17af8:	e721      	b.n	1793e <__aeabi_dsub+0x3a>
   17afa:	0023      	movs	r3, r4
   17afc:	433b      	orrs	r3, r7
   17afe:	d100      	bne.n	17b02 <__aeabi_dsub+0x1fe>
   17b00:	e1b9      	b.n	17e76 <__aeabi_dsub+0x572>
   17b02:	2280      	movs	r2, #128	; 0x80
   17b04:	0312      	lsls	r2, r2, #12
   17b06:	4314      	orrs	r4, r2
   17b08:	0324      	lsls	r4, r4, #12
   17b0a:	0b24      	lsrs	r4, r4, #12
   17b0c:	e79f      	b.n	17a4e <__aeabi_dsub+0x14a>
   17b0e:	002e      	movs	r6, r5
   17b10:	e77e      	b.n	17a10 <__aeabi_dsub+0x10c>
   17b12:	0008      	movs	r0, r1
   17b14:	4310      	orrs	r0, r2
   17b16:	d100      	bne.n	17b1a <__aeabi_dsub+0x216>
   17b18:	e0ca      	b.n	17cb0 <__aeabi_dsub+0x3ac>
   17b1a:	1e58      	subs	r0, r3, #1
   17b1c:	4684      	mov	ip, r0
   17b1e:	2800      	cmp	r0, #0
   17b20:	d000      	beq.n	17b24 <__aeabi_dsub+0x220>
   17b22:	e0e7      	b.n	17cf4 <__aeabi_dsub+0x3f0>
   17b24:	4452      	add	r2, sl
   17b26:	4552      	cmp	r2, sl
   17b28:	4180      	sbcs	r0, r0
   17b2a:	1864      	adds	r4, r4, r1
   17b2c:	4240      	negs	r0, r0
   17b2e:	1824      	adds	r4, r4, r0
   17b30:	0017      	movs	r7, r2
   17b32:	2601      	movs	r6, #1
   17b34:	0223      	lsls	r3, r4, #8
   17b36:	d507      	bpl.n	17b48 <__aeabi_dsub+0x244>
   17b38:	2602      	movs	r6, #2
   17b3a:	e7cf      	b.n	17adc <__aeabi_dsub+0x1d8>
   17b3c:	4664      	mov	r4, ip
   17b3e:	432c      	orrs	r4, r5
   17b40:	d100      	bne.n	17b44 <__aeabi_dsub+0x240>
   17b42:	e1b3      	b.n	17eac <__aeabi_dsub+0x5a8>
   17b44:	002c      	movs	r4, r5
   17b46:	4667      	mov	r7, ip
   17b48:	077b      	lsls	r3, r7, #29
   17b4a:	d000      	beq.n	17b4e <__aeabi_dsub+0x24a>
   17b4c:	e762      	b.n	17a14 <__aeabi_dsub+0x110>
   17b4e:	0763      	lsls	r3, r4, #29
   17b50:	08ff      	lsrs	r7, r7, #3
   17b52:	431f      	orrs	r7, r3
   17b54:	2501      	movs	r5, #1
   17b56:	4643      	mov	r3, r8
   17b58:	08e4      	lsrs	r4, r4, #3
   17b5a:	401d      	ands	r5, r3
   17b5c:	e793      	b.n	17a86 <__aeabi_dsub+0x182>
   17b5e:	2d00      	cmp	r5, #0
   17b60:	d178      	bne.n	17c54 <__aeabi_dsub+0x350>
   17b62:	1c75      	adds	r5, r6, #1
   17b64:	056d      	lsls	r5, r5, #21
   17b66:	0d6d      	lsrs	r5, r5, #21
   17b68:	2d01      	cmp	r5, #1
   17b6a:	dc00      	bgt.n	17b6e <__aeabi_dsub+0x26a>
   17b6c:	e0f2      	b.n	17d54 <__aeabi_dsub+0x450>
   17b6e:	4650      	mov	r0, sl
   17b70:	1a80      	subs	r0, r0, r2
   17b72:	4582      	cmp	sl, r0
   17b74:	41bf      	sbcs	r7, r7
   17b76:	1a65      	subs	r5, r4, r1
   17b78:	427f      	negs	r7, r7
   17b7a:	1bed      	subs	r5, r5, r7
   17b7c:	4684      	mov	ip, r0
   17b7e:	0228      	lsls	r0, r5, #8
   17b80:	d400      	bmi.n	17b84 <__aeabi_dsub+0x280>
   17b82:	e08c      	b.n	17c9e <__aeabi_dsub+0x39a>
   17b84:	4650      	mov	r0, sl
   17b86:	1a17      	subs	r7, r2, r0
   17b88:	42ba      	cmp	r2, r7
   17b8a:	4192      	sbcs	r2, r2
   17b8c:	1b0c      	subs	r4, r1, r4
   17b8e:	4255      	negs	r5, r2
   17b90:	1b65      	subs	r5, r4, r5
   17b92:	4698      	mov	r8, r3
   17b94:	e714      	b.n	179c0 <__aeabi_dsub+0xbc>
   17b96:	2501      	movs	r5, #1
   17b98:	4643      	mov	r3, r8
   17b9a:	2400      	movs	r4, #0
   17b9c:	401d      	ands	r5, r3
   17b9e:	2700      	movs	r7, #0
   17ba0:	e755      	b.n	17a4e <__aeabi_dsub+0x14a>
   17ba2:	4c2a      	ldr	r4, [pc, #168]	; (17c4c <__aeabi_dsub+0x348>)
   17ba4:	1af6      	subs	r6, r6, r3
   17ba6:	402c      	ands	r4, r5
   17ba8:	e732      	b.n	17a10 <__aeabi_dsub+0x10c>
   17baa:	003d      	movs	r5, r7
   17bac:	3828      	subs	r0, #40	; 0x28
   17bae:	4085      	lsls	r5, r0
   17bb0:	2700      	movs	r7, #0
   17bb2:	e717      	b.n	179e4 <__aeabi_dsub+0xe0>
   17bb4:	0038      	movs	r0, r7
   17bb6:	f000 fb45 	bl	18244 <__clzsi2>
   17bba:	3020      	adds	r0, #32
   17bbc:	e706      	b.n	179cc <__aeabi_dsub+0xc8>
   17bbe:	430a      	orrs	r2, r1
   17bc0:	0017      	movs	r7, r2
   17bc2:	2100      	movs	r1, #0
   17bc4:	1e7a      	subs	r2, r7, #1
   17bc6:	4197      	sbcs	r7, r2
   17bc8:	e6ee      	b.n	179a8 <__aeabi_dsub+0xa4>
   17bca:	2b00      	cmp	r3, #0
   17bcc:	d000      	beq.n	17bd0 <__aeabi_dsub+0x2cc>
   17bce:	e0e5      	b.n	17d9c <__aeabi_dsub+0x498>
   17bd0:	1c73      	adds	r3, r6, #1
   17bd2:	469c      	mov	ip, r3
   17bd4:	055b      	lsls	r3, r3, #21
   17bd6:	0d5b      	lsrs	r3, r3, #21
   17bd8:	2b01      	cmp	r3, #1
   17bda:	dc00      	bgt.n	17bde <__aeabi_dsub+0x2da>
   17bdc:	e09f      	b.n	17d1e <__aeabi_dsub+0x41a>
   17bde:	4b1a      	ldr	r3, [pc, #104]	; (17c48 <__aeabi_dsub+0x344>)
   17be0:	459c      	cmp	ip, r3
   17be2:	d100      	bne.n	17be6 <__aeabi_dsub+0x2e2>
   17be4:	e0c5      	b.n	17d72 <__aeabi_dsub+0x46e>
   17be6:	4452      	add	r2, sl
   17be8:	4552      	cmp	r2, sl
   17bea:	4180      	sbcs	r0, r0
   17bec:	1864      	adds	r4, r4, r1
   17bee:	4240      	negs	r0, r0
   17bf0:	1824      	adds	r4, r4, r0
   17bf2:	07e7      	lsls	r7, r4, #31
   17bf4:	0852      	lsrs	r2, r2, #1
   17bf6:	4317      	orrs	r7, r2
   17bf8:	0864      	lsrs	r4, r4, #1
   17bfa:	4666      	mov	r6, ip
   17bfc:	e708      	b.n	17a10 <__aeabi_dsub+0x10c>
   17bfe:	4812      	ldr	r0, [pc, #72]	; (17c48 <__aeabi_dsub+0x344>)
   17c00:	4285      	cmp	r5, r0
   17c02:	d100      	bne.n	17c06 <__aeabi_dsub+0x302>
   17c04:	e085      	b.n	17d12 <__aeabi_dsub+0x40e>
   17c06:	001d      	movs	r5, r3
   17c08:	e6bc      	b.n	17984 <__aeabi_dsub+0x80>
   17c0a:	0029      	movs	r1, r5
   17c0c:	3e1f      	subs	r6, #31
   17c0e:	40f1      	lsrs	r1, r6
   17c10:	2b20      	cmp	r3, #32
   17c12:	d100      	bne.n	17c16 <__aeabi_dsub+0x312>
   17c14:	e07f      	b.n	17d16 <__aeabi_dsub+0x412>
   17c16:	2240      	movs	r2, #64	; 0x40
   17c18:	1ad3      	subs	r3, r2, r3
   17c1a:	409d      	lsls	r5, r3
   17c1c:	432f      	orrs	r7, r5
   17c1e:	1e7d      	subs	r5, r7, #1
   17c20:	41af      	sbcs	r7, r5
   17c22:	2400      	movs	r4, #0
   17c24:	430f      	orrs	r7, r1
   17c26:	2600      	movs	r6, #0
   17c28:	e78e      	b.n	17b48 <__aeabi_dsub+0x244>
   17c2a:	002b      	movs	r3, r5
   17c2c:	000f      	movs	r7, r1
   17c2e:	3b20      	subs	r3, #32
   17c30:	40df      	lsrs	r7, r3
   17c32:	2d20      	cmp	r5, #32
   17c34:	d071      	beq.n	17d1a <__aeabi_dsub+0x416>
   17c36:	2340      	movs	r3, #64	; 0x40
   17c38:	1b5d      	subs	r5, r3, r5
   17c3a:	40a9      	lsls	r1, r5
   17c3c:	430a      	orrs	r2, r1
   17c3e:	1e51      	subs	r1, r2, #1
   17c40:	418a      	sbcs	r2, r1
   17c42:	2100      	movs	r1, #0
   17c44:	4317      	orrs	r7, r2
   17c46:	e6af      	b.n	179a8 <__aeabi_dsub+0xa4>
   17c48:	000007ff 	.word	0x000007ff
   17c4c:	ff7fffff 	.word	0xff7fffff
   17c50:	800fffff 	.word	0x800fffff
   17c54:	2e00      	cmp	r6, #0
   17c56:	d03e      	beq.n	17cd6 <__aeabi_dsub+0x3d2>
   17c58:	4eb3      	ldr	r6, [pc, #716]	; (17f28 <__aeabi_dsub+0x624>)
   17c5a:	45b4      	cmp	ip, r6
   17c5c:	d045      	beq.n	17cea <__aeabi_dsub+0x3e6>
   17c5e:	2680      	movs	r6, #128	; 0x80
   17c60:	0436      	lsls	r6, r6, #16
   17c62:	426d      	negs	r5, r5
   17c64:	4334      	orrs	r4, r6
   17c66:	2d38      	cmp	r5, #56	; 0x38
   17c68:	dd00      	ble.n	17c6c <__aeabi_dsub+0x368>
   17c6a:	e0a8      	b.n	17dbe <__aeabi_dsub+0x4ba>
   17c6c:	2d1f      	cmp	r5, #31
   17c6e:	dd00      	ble.n	17c72 <__aeabi_dsub+0x36e>
   17c70:	e11f      	b.n	17eb2 <__aeabi_dsub+0x5ae>
   17c72:	2620      	movs	r6, #32
   17c74:	0027      	movs	r7, r4
   17c76:	4650      	mov	r0, sl
   17c78:	1b76      	subs	r6, r6, r5
   17c7a:	40b7      	lsls	r7, r6
   17c7c:	40e8      	lsrs	r0, r5
   17c7e:	4307      	orrs	r7, r0
   17c80:	4650      	mov	r0, sl
   17c82:	40b0      	lsls	r0, r6
   17c84:	1e46      	subs	r6, r0, #1
   17c86:	41b0      	sbcs	r0, r6
   17c88:	40ec      	lsrs	r4, r5
   17c8a:	4338      	orrs	r0, r7
   17c8c:	1a17      	subs	r7, r2, r0
   17c8e:	42ba      	cmp	r2, r7
   17c90:	4192      	sbcs	r2, r2
   17c92:	1b0c      	subs	r4, r1, r4
   17c94:	4252      	negs	r2, r2
   17c96:	1aa4      	subs	r4, r4, r2
   17c98:	4666      	mov	r6, ip
   17c9a:	4698      	mov	r8, r3
   17c9c:	e68b      	b.n	179b6 <__aeabi_dsub+0xb2>
   17c9e:	4664      	mov	r4, ip
   17ca0:	4667      	mov	r7, ip
   17ca2:	432c      	orrs	r4, r5
   17ca4:	d000      	beq.n	17ca8 <__aeabi_dsub+0x3a4>
   17ca6:	e68b      	b.n	179c0 <__aeabi_dsub+0xbc>
   17ca8:	2500      	movs	r5, #0
   17caa:	2600      	movs	r6, #0
   17cac:	2700      	movs	r7, #0
   17cae:	e6ea      	b.n	17a86 <__aeabi_dsub+0x182>
   17cb0:	001e      	movs	r6, r3
   17cb2:	e6ad      	b.n	17a10 <__aeabi_dsub+0x10c>
   17cb4:	2b1f      	cmp	r3, #31
   17cb6:	dc60      	bgt.n	17d7a <__aeabi_dsub+0x476>
   17cb8:	2720      	movs	r7, #32
   17cba:	1af8      	subs	r0, r7, r3
   17cbc:	000f      	movs	r7, r1
   17cbe:	4684      	mov	ip, r0
   17cc0:	4087      	lsls	r7, r0
   17cc2:	0010      	movs	r0, r2
   17cc4:	40d8      	lsrs	r0, r3
   17cc6:	4307      	orrs	r7, r0
   17cc8:	4660      	mov	r0, ip
   17cca:	4082      	lsls	r2, r0
   17ccc:	1e50      	subs	r0, r2, #1
   17cce:	4182      	sbcs	r2, r0
   17cd0:	40d9      	lsrs	r1, r3
   17cd2:	4317      	orrs	r7, r2
   17cd4:	e6f5      	b.n	17ac2 <__aeabi_dsub+0x1be>
   17cd6:	0026      	movs	r6, r4
   17cd8:	4650      	mov	r0, sl
   17cda:	4306      	orrs	r6, r0
   17cdc:	d005      	beq.n	17cea <__aeabi_dsub+0x3e6>
   17cde:	43ed      	mvns	r5, r5
   17ce0:	2d00      	cmp	r5, #0
   17ce2:	d0d3      	beq.n	17c8c <__aeabi_dsub+0x388>
   17ce4:	4e90      	ldr	r6, [pc, #576]	; (17f28 <__aeabi_dsub+0x624>)
   17ce6:	45b4      	cmp	ip, r6
   17ce8:	d1bd      	bne.n	17c66 <__aeabi_dsub+0x362>
   17cea:	000c      	movs	r4, r1
   17cec:	0017      	movs	r7, r2
   17cee:	4666      	mov	r6, ip
   17cf0:	4698      	mov	r8, r3
   17cf2:	e68d      	b.n	17a10 <__aeabi_dsub+0x10c>
   17cf4:	488c      	ldr	r0, [pc, #560]	; (17f28 <__aeabi_dsub+0x624>)
   17cf6:	4283      	cmp	r3, r0
   17cf8:	d00b      	beq.n	17d12 <__aeabi_dsub+0x40e>
   17cfa:	4663      	mov	r3, ip
   17cfc:	e6d9      	b.n	17ab2 <__aeabi_dsub+0x1ae>
   17cfe:	2d00      	cmp	r5, #0
   17d00:	d000      	beq.n	17d04 <__aeabi_dsub+0x400>
   17d02:	e096      	b.n	17e32 <__aeabi_dsub+0x52e>
   17d04:	0008      	movs	r0, r1
   17d06:	4310      	orrs	r0, r2
   17d08:	d100      	bne.n	17d0c <__aeabi_dsub+0x408>
   17d0a:	e0e2      	b.n	17ed2 <__aeabi_dsub+0x5ce>
   17d0c:	000c      	movs	r4, r1
   17d0e:	0017      	movs	r7, r2
   17d10:	4698      	mov	r8, r3
   17d12:	4e85      	ldr	r6, [pc, #532]	; (17f28 <__aeabi_dsub+0x624>)
   17d14:	e67c      	b.n	17a10 <__aeabi_dsub+0x10c>
   17d16:	2500      	movs	r5, #0
   17d18:	e780      	b.n	17c1c <__aeabi_dsub+0x318>
   17d1a:	2100      	movs	r1, #0
   17d1c:	e78e      	b.n	17c3c <__aeabi_dsub+0x338>
   17d1e:	0023      	movs	r3, r4
   17d20:	4650      	mov	r0, sl
   17d22:	4303      	orrs	r3, r0
   17d24:	2e00      	cmp	r6, #0
   17d26:	d000      	beq.n	17d2a <__aeabi_dsub+0x426>
   17d28:	e0a8      	b.n	17e7c <__aeabi_dsub+0x578>
   17d2a:	2b00      	cmp	r3, #0
   17d2c:	d100      	bne.n	17d30 <__aeabi_dsub+0x42c>
   17d2e:	e0de      	b.n	17eee <__aeabi_dsub+0x5ea>
   17d30:	000b      	movs	r3, r1
   17d32:	4313      	orrs	r3, r2
   17d34:	d100      	bne.n	17d38 <__aeabi_dsub+0x434>
   17d36:	e66b      	b.n	17a10 <__aeabi_dsub+0x10c>
   17d38:	4452      	add	r2, sl
   17d3a:	4552      	cmp	r2, sl
   17d3c:	4180      	sbcs	r0, r0
   17d3e:	1864      	adds	r4, r4, r1
   17d40:	4240      	negs	r0, r0
   17d42:	1824      	adds	r4, r4, r0
   17d44:	0017      	movs	r7, r2
   17d46:	0223      	lsls	r3, r4, #8
   17d48:	d400      	bmi.n	17d4c <__aeabi_dsub+0x448>
   17d4a:	e6fd      	b.n	17b48 <__aeabi_dsub+0x244>
   17d4c:	4b77      	ldr	r3, [pc, #476]	; (17f2c <__aeabi_dsub+0x628>)
   17d4e:	4666      	mov	r6, ip
   17d50:	401c      	ands	r4, r3
   17d52:	e65d      	b.n	17a10 <__aeabi_dsub+0x10c>
   17d54:	0025      	movs	r5, r4
   17d56:	4650      	mov	r0, sl
   17d58:	4305      	orrs	r5, r0
   17d5a:	2e00      	cmp	r6, #0
   17d5c:	d1cf      	bne.n	17cfe <__aeabi_dsub+0x3fa>
   17d5e:	2d00      	cmp	r5, #0
   17d60:	d14f      	bne.n	17e02 <__aeabi_dsub+0x4fe>
   17d62:	000c      	movs	r4, r1
   17d64:	4314      	orrs	r4, r2
   17d66:	d100      	bne.n	17d6a <__aeabi_dsub+0x466>
   17d68:	e0a0      	b.n	17eac <__aeabi_dsub+0x5a8>
   17d6a:	000c      	movs	r4, r1
   17d6c:	0017      	movs	r7, r2
   17d6e:	4698      	mov	r8, r3
   17d70:	e64e      	b.n	17a10 <__aeabi_dsub+0x10c>
   17d72:	4666      	mov	r6, ip
   17d74:	2400      	movs	r4, #0
   17d76:	2700      	movs	r7, #0
   17d78:	e685      	b.n	17a86 <__aeabi_dsub+0x182>
   17d7a:	001f      	movs	r7, r3
   17d7c:	0008      	movs	r0, r1
   17d7e:	3f20      	subs	r7, #32
   17d80:	40f8      	lsrs	r0, r7
   17d82:	0007      	movs	r7, r0
   17d84:	2b20      	cmp	r3, #32
   17d86:	d100      	bne.n	17d8a <__aeabi_dsub+0x486>
   17d88:	e08e      	b.n	17ea8 <__aeabi_dsub+0x5a4>
   17d8a:	2040      	movs	r0, #64	; 0x40
   17d8c:	1ac3      	subs	r3, r0, r3
   17d8e:	4099      	lsls	r1, r3
   17d90:	430a      	orrs	r2, r1
   17d92:	1e51      	subs	r1, r2, #1
   17d94:	418a      	sbcs	r2, r1
   17d96:	2100      	movs	r1, #0
   17d98:	4317      	orrs	r7, r2
   17d9a:	e692      	b.n	17ac2 <__aeabi_dsub+0x1be>
   17d9c:	2e00      	cmp	r6, #0
   17d9e:	d114      	bne.n	17dca <__aeabi_dsub+0x4c6>
   17da0:	0026      	movs	r6, r4
   17da2:	4650      	mov	r0, sl
   17da4:	4306      	orrs	r6, r0
   17da6:	d062      	beq.n	17e6e <__aeabi_dsub+0x56a>
   17da8:	43db      	mvns	r3, r3
   17daa:	2b00      	cmp	r3, #0
   17dac:	d15c      	bne.n	17e68 <__aeabi_dsub+0x564>
   17dae:	1887      	adds	r7, r0, r2
   17db0:	4297      	cmp	r7, r2
   17db2:	4192      	sbcs	r2, r2
   17db4:	1864      	adds	r4, r4, r1
   17db6:	4252      	negs	r2, r2
   17db8:	18a4      	adds	r4, r4, r2
   17dba:	4666      	mov	r6, ip
   17dbc:	e687      	b.n	17ace <__aeabi_dsub+0x1ca>
   17dbe:	4650      	mov	r0, sl
   17dc0:	4320      	orrs	r0, r4
   17dc2:	1e44      	subs	r4, r0, #1
   17dc4:	41a0      	sbcs	r0, r4
   17dc6:	2400      	movs	r4, #0
   17dc8:	e760      	b.n	17c8c <__aeabi_dsub+0x388>
   17dca:	4e57      	ldr	r6, [pc, #348]	; (17f28 <__aeabi_dsub+0x624>)
   17dcc:	45b4      	cmp	ip, r6
   17dce:	d04e      	beq.n	17e6e <__aeabi_dsub+0x56a>
   17dd0:	2680      	movs	r6, #128	; 0x80
   17dd2:	0436      	lsls	r6, r6, #16
   17dd4:	425b      	negs	r3, r3
   17dd6:	4334      	orrs	r4, r6
   17dd8:	2b38      	cmp	r3, #56	; 0x38
   17dda:	dd00      	ble.n	17dde <__aeabi_dsub+0x4da>
   17ddc:	e07f      	b.n	17ede <__aeabi_dsub+0x5da>
   17dde:	2b1f      	cmp	r3, #31
   17de0:	dd00      	ble.n	17de4 <__aeabi_dsub+0x4e0>
   17de2:	e08b      	b.n	17efc <__aeabi_dsub+0x5f8>
   17de4:	2620      	movs	r6, #32
   17de6:	0027      	movs	r7, r4
   17de8:	4650      	mov	r0, sl
   17dea:	1af6      	subs	r6, r6, r3
   17dec:	40b7      	lsls	r7, r6
   17dee:	40d8      	lsrs	r0, r3
   17df0:	4307      	orrs	r7, r0
   17df2:	4650      	mov	r0, sl
   17df4:	40b0      	lsls	r0, r6
   17df6:	1e46      	subs	r6, r0, #1
   17df8:	41b0      	sbcs	r0, r6
   17dfa:	4307      	orrs	r7, r0
   17dfc:	40dc      	lsrs	r4, r3
   17dfe:	18bf      	adds	r7, r7, r2
   17e00:	e7d6      	b.n	17db0 <__aeabi_dsub+0x4ac>
   17e02:	000d      	movs	r5, r1
   17e04:	4315      	orrs	r5, r2
   17e06:	d100      	bne.n	17e0a <__aeabi_dsub+0x506>
   17e08:	e602      	b.n	17a10 <__aeabi_dsub+0x10c>
   17e0a:	4650      	mov	r0, sl
   17e0c:	1a80      	subs	r0, r0, r2
   17e0e:	4582      	cmp	sl, r0
   17e10:	41bf      	sbcs	r7, r7
   17e12:	1a65      	subs	r5, r4, r1
   17e14:	427f      	negs	r7, r7
   17e16:	1bed      	subs	r5, r5, r7
   17e18:	4684      	mov	ip, r0
   17e1a:	0228      	lsls	r0, r5, #8
   17e1c:	d400      	bmi.n	17e20 <__aeabi_dsub+0x51c>
   17e1e:	e68d      	b.n	17b3c <__aeabi_dsub+0x238>
   17e20:	4650      	mov	r0, sl
   17e22:	1a17      	subs	r7, r2, r0
   17e24:	42ba      	cmp	r2, r7
   17e26:	4192      	sbcs	r2, r2
   17e28:	1b0c      	subs	r4, r1, r4
   17e2a:	4252      	negs	r2, r2
   17e2c:	1aa4      	subs	r4, r4, r2
   17e2e:	4698      	mov	r8, r3
   17e30:	e5ee      	b.n	17a10 <__aeabi_dsub+0x10c>
   17e32:	000d      	movs	r5, r1
   17e34:	4315      	orrs	r5, r2
   17e36:	d100      	bne.n	17e3a <__aeabi_dsub+0x536>
   17e38:	e76b      	b.n	17d12 <__aeabi_dsub+0x40e>
   17e3a:	4650      	mov	r0, sl
   17e3c:	0767      	lsls	r7, r4, #29
   17e3e:	08c0      	lsrs	r0, r0, #3
   17e40:	4307      	orrs	r7, r0
   17e42:	2080      	movs	r0, #128	; 0x80
   17e44:	08e4      	lsrs	r4, r4, #3
   17e46:	0300      	lsls	r0, r0, #12
   17e48:	4204      	tst	r4, r0
   17e4a:	d007      	beq.n	17e5c <__aeabi_dsub+0x558>
   17e4c:	08cd      	lsrs	r5, r1, #3
   17e4e:	4205      	tst	r5, r0
   17e50:	d104      	bne.n	17e5c <__aeabi_dsub+0x558>
   17e52:	002c      	movs	r4, r5
   17e54:	4698      	mov	r8, r3
   17e56:	08d7      	lsrs	r7, r2, #3
   17e58:	0749      	lsls	r1, r1, #29
   17e5a:	430f      	orrs	r7, r1
   17e5c:	0f7b      	lsrs	r3, r7, #29
   17e5e:	00e4      	lsls	r4, r4, #3
   17e60:	431c      	orrs	r4, r3
   17e62:	00ff      	lsls	r7, r7, #3
   17e64:	4e30      	ldr	r6, [pc, #192]	; (17f28 <__aeabi_dsub+0x624>)
   17e66:	e5d3      	b.n	17a10 <__aeabi_dsub+0x10c>
   17e68:	4e2f      	ldr	r6, [pc, #188]	; (17f28 <__aeabi_dsub+0x624>)
   17e6a:	45b4      	cmp	ip, r6
   17e6c:	d1b4      	bne.n	17dd8 <__aeabi_dsub+0x4d4>
   17e6e:	000c      	movs	r4, r1
   17e70:	0017      	movs	r7, r2
   17e72:	4666      	mov	r6, ip
   17e74:	e5cc      	b.n	17a10 <__aeabi_dsub+0x10c>
   17e76:	2700      	movs	r7, #0
   17e78:	2400      	movs	r4, #0
   17e7a:	e5e8      	b.n	17a4e <__aeabi_dsub+0x14a>
   17e7c:	2b00      	cmp	r3, #0
   17e7e:	d039      	beq.n	17ef4 <__aeabi_dsub+0x5f0>
   17e80:	000b      	movs	r3, r1
   17e82:	4313      	orrs	r3, r2
   17e84:	d100      	bne.n	17e88 <__aeabi_dsub+0x584>
   17e86:	e744      	b.n	17d12 <__aeabi_dsub+0x40e>
   17e88:	08c0      	lsrs	r0, r0, #3
   17e8a:	0767      	lsls	r7, r4, #29
   17e8c:	4307      	orrs	r7, r0
   17e8e:	2080      	movs	r0, #128	; 0x80
   17e90:	08e4      	lsrs	r4, r4, #3
   17e92:	0300      	lsls	r0, r0, #12
   17e94:	4204      	tst	r4, r0
   17e96:	d0e1      	beq.n	17e5c <__aeabi_dsub+0x558>
   17e98:	08cb      	lsrs	r3, r1, #3
   17e9a:	4203      	tst	r3, r0
   17e9c:	d1de      	bne.n	17e5c <__aeabi_dsub+0x558>
   17e9e:	08d7      	lsrs	r7, r2, #3
   17ea0:	0749      	lsls	r1, r1, #29
   17ea2:	430f      	orrs	r7, r1
   17ea4:	001c      	movs	r4, r3
   17ea6:	e7d9      	b.n	17e5c <__aeabi_dsub+0x558>
   17ea8:	2100      	movs	r1, #0
   17eaa:	e771      	b.n	17d90 <__aeabi_dsub+0x48c>
   17eac:	2500      	movs	r5, #0
   17eae:	2700      	movs	r7, #0
   17eb0:	e5e9      	b.n	17a86 <__aeabi_dsub+0x182>
   17eb2:	002e      	movs	r6, r5
   17eb4:	0027      	movs	r7, r4
   17eb6:	3e20      	subs	r6, #32
   17eb8:	40f7      	lsrs	r7, r6
   17eba:	2d20      	cmp	r5, #32
   17ebc:	d02f      	beq.n	17f1e <__aeabi_dsub+0x61a>
   17ebe:	2640      	movs	r6, #64	; 0x40
   17ec0:	1b75      	subs	r5, r6, r5
   17ec2:	40ac      	lsls	r4, r5
   17ec4:	4650      	mov	r0, sl
   17ec6:	4320      	orrs	r0, r4
   17ec8:	1e44      	subs	r4, r0, #1
   17eca:	41a0      	sbcs	r0, r4
   17ecc:	2400      	movs	r4, #0
   17ece:	4338      	orrs	r0, r7
   17ed0:	e6dc      	b.n	17c8c <__aeabi_dsub+0x388>
   17ed2:	2480      	movs	r4, #128	; 0x80
   17ed4:	2500      	movs	r5, #0
   17ed6:	0324      	lsls	r4, r4, #12
   17ed8:	4e13      	ldr	r6, [pc, #76]	; (17f28 <__aeabi_dsub+0x624>)
   17eda:	2700      	movs	r7, #0
   17edc:	e5d3      	b.n	17a86 <__aeabi_dsub+0x182>
   17ede:	4650      	mov	r0, sl
   17ee0:	4320      	orrs	r0, r4
   17ee2:	0007      	movs	r7, r0
   17ee4:	1e78      	subs	r0, r7, #1
   17ee6:	4187      	sbcs	r7, r0
   17ee8:	2400      	movs	r4, #0
   17eea:	18bf      	adds	r7, r7, r2
   17eec:	e760      	b.n	17db0 <__aeabi_dsub+0x4ac>
   17eee:	000c      	movs	r4, r1
   17ef0:	0017      	movs	r7, r2
   17ef2:	e58d      	b.n	17a10 <__aeabi_dsub+0x10c>
   17ef4:	000c      	movs	r4, r1
   17ef6:	0017      	movs	r7, r2
   17ef8:	4e0b      	ldr	r6, [pc, #44]	; (17f28 <__aeabi_dsub+0x624>)
   17efa:	e589      	b.n	17a10 <__aeabi_dsub+0x10c>
   17efc:	001e      	movs	r6, r3
   17efe:	0027      	movs	r7, r4
   17f00:	3e20      	subs	r6, #32
   17f02:	40f7      	lsrs	r7, r6
   17f04:	2b20      	cmp	r3, #32
   17f06:	d00c      	beq.n	17f22 <__aeabi_dsub+0x61e>
   17f08:	2640      	movs	r6, #64	; 0x40
   17f0a:	1af3      	subs	r3, r6, r3
   17f0c:	409c      	lsls	r4, r3
   17f0e:	4650      	mov	r0, sl
   17f10:	4320      	orrs	r0, r4
   17f12:	1e44      	subs	r4, r0, #1
   17f14:	41a0      	sbcs	r0, r4
   17f16:	4307      	orrs	r7, r0
   17f18:	2400      	movs	r4, #0
   17f1a:	18bf      	adds	r7, r7, r2
   17f1c:	e748      	b.n	17db0 <__aeabi_dsub+0x4ac>
   17f1e:	2400      	movs	r4, #0
   17f20:	e7d0      	b.n	17ec4 <__aeabi_dsub+0x5c0>
   17f22:	2400      	movs	r4, #0
   17f24:	e7f3      	b.n	17f0e <__aeabi_dsub+0x60a>
   17f26:	46c0      	nop			; (mov r8, r8)
   17f28:	000007ff 	.word	0x000007ff
   17f2c:	ff7fffff 	.word	0xff7fffff

00017f30 <__aeabi_d2iz>:
   17f30:	b530      	push	{r4, r5, lr}
   17f32:	4d13      	ldr	r5, [pc, #76]	; (17f80 <__aeabi_d2iz+0x50>)
   17f34:	030a      	lsls	r2, r1, #12
   17f36:	004b      	lsls	r3, r1, #1
   17f38:	0b12      	lsrs	r2, r2, #12
   17f3a:	0d5b      	lsrs	r3, r3, #21
   17f3c:	0fc9      	lsrs	r1, r1, #31
   17f3e:	2400      	movs	r4, #0
   17f40:	42ab      	cmp	r3, r5
   17f42:	dd10      	ble.n	17f66 <__aeabi_d2iz+0x36>
   17f44:	4c0f      	ldr	r4, [pc, #60]	; (17f84 <__aeabi_d2iz+0x54>)
   17f46:	42a3      	cmp	r3, r4
   17f48:	dc0f      	bgt.n	17f6a <__aeabi_d2iz+0x3a>
   17f4a:	2480      	movs	r4, #128	; 0x80
   17f4c:	4d0e      	ldr	r5, [pc, #56]	; (17f88 <__aeabi_d2iz+0x58>)
   17f4e:	0364      	lsls	r4, r4, #13
   17f50:	4322      	orrs	r2, r4
   17f52:	1aed      	subs	r5, r5, r3
   17f54:	2d1f      	cmp	r5, #31
   17f56:	dd0b      	ble.n	17f70 <__aeabi_d2iz+0x40>
   17f58:	480c      	ldr	r0, [pc, #48]	; (17f8c <__aeabi_d2iz+0x5c>)
   17f5a:	1ac3      	subs	r3, r0, r3
   17f5c:	40da      	lsrs	r2, r3
   17f5e:	4254      	negs	r4, r2
   17f60:	2900      	cmp	r1, #0
   17f62:	d100      	bne.n	17f66 <__aeabi_d2iz+0x36>
   17f64:	0014      	movs	r4, r2
   17f66:	0020      	movs	r0, r4
   17f68:	bd30      	pop	{r4, r5, pc}
   17f6a:	4b09      	ldr	r3, [pc, #36]	; (17f90 <__aeabi_d2iz+0x60>)
   17f6c:	18cc      	adds	r4, r1, r3
   17f6e:	e7fa      	b.n	17f66 <__aeabi_d2iz+0x36>
   17f70:	4c08      	ldr	r4, [pc, #32]	; (17f94 <__aeabi_d2iz+0x64>)
   17f72:	40e8      	lsrs	r0, r5
   17f74:	46a4      	mov	ip, r4
   17f76:	4463      	add	r3, ip
   17f78:	409a      	lsls	r2, r3
   17f7a:	4302      	orrs	r2, r0
   17f7c:	e7ef      	b.n	17f5e <__aeabi_d2iz+0x2e>
   17f7e:	46c0      	nop			; (mov r8, r8)
   17f80:	000003fe 	.word	0x000003fe
   17f84:	0000041d 	.word	0x0000041d
   17f88:	00000433 	.word	0x00000433
   17f8c:	00000413 	.word	0x00000413
   17f90:	7fffffff 	.word	0x7fffffff
   17f94:	fffffbed 	.word	0xfffffbed

00017f98 <__aeabi_i2d>:
   17f98:	b570      	push	{r4, r5, r6, lr}
   17f9a:	2800      	cmp	r0, #0
   17f9c:	d030      	beq.n	18000 <__aeabi_i2d+0x68>
   17f9e:	17c3      	asrs	r3, r0, #31
   17fa0:	18c4      	adds	r4, r0, r3
   17fa2:	405c      	eors	r4, r3
   17fa4:	0fc5      	lsrs	r5, r0, #31
   17fa6:	0020      	movs	r0, r4
   17fa8:	f000 f94c 	bl	18244 <__clzsi2>
   17fac:	4b17      	ldr	r3, [pc, #92]	; (1800c <__aeabi_i2d+0x74>)
   17fae:	4a18      	ldr	r2, [pc, #96]	; (18010 <__aeabi_i2d+0x78>)
   17fb0:	1a1b      	subs	r3, r3, r0
   17fb2:	1ad2      	subs	r2, r2, r3
   17fb4:	2a1f      	cmp	r2, #31
   17fb6:	dd18      	ble.n	17fea <__aeabi_i2d+0x52>
   17fb8:	4a16      	ldr	r2, [pc, #88]	; (18014 <__aeabi_i2d+0x7c>)
   17fba:	1ad2      	subs	r2, r2, r3
   17fbc:	4094      	lsls	r4, r2
   17fbe:	2200      	movs	r2, #0
   17fc0:	0324      	lsls	r4, r4, #12
   17fc2:	055b      	lsls	r3, r3, #21
   17fc4:	0b24      	lsrs	r4, r4, #12
   17fc6:	0d5b      	lsrs	r3, r3, #21
   17fc8:	2100      	movs	r1, #0
   17fca:	0010      	movs	r0, r2
   17fcc:	0324      	lsls	r4, r4, #12
   17fce:	0d0a      	lsrs	r2, r1, #20
   17fd0:	0b24      	lsrs	r4, r4, #12
   17fd2:	0512      	lsls	r2, r2, #20
   17fd4:	4322      	orrs	r2, r4
   17fd6:	4c10      	ldr	r4, [pc, #64]	; (18018 <__aeabi_i2d+0x80>)
   17fd8:	051b      	lsls	r3, r3, #20
   17fda:	4022      	ands	r2, r4
   17fdc:	4313      	orrs	r3, r2
   17fde:	005b      	lsls	r3, r3, #1
   17fe0:	07ed      	lsls	r5, r5, #31
   17fe2:	085b      	lsrs	r3, r3, #1
   17fe4:	432b      	orrs	r3, r5
   17fe6:	0019      	movs	r1, r3
   17fe8:	bd70      	pop	{r4, r5, r6, pc}
   17fea:	0021      	movs	r1, r4
   17fec:	4091      	lsls	r1, r2
   17fee:	000a      	movs	r2, r1
   17ff0:	210b      	movs	r1, #11
   17ff2:	1a08      	subs	r0, r1, r0
   17ff4:	40c4      	lsrs	r4, r0
   17ff6:	055b      	lsls	r3, r3, #21
   17ff8:	0324      	lsls	r4, r4, #12
   17ffa:	0b24      	lsrs	r4, r4, #12
   17ffc:	0d5b      	lsrs	r3, r3, #21
   17ffe:	e7e3      	b.n	17fc8 <__aeabi_i2d+0x30>
   18000:	2500      	movs	r5, #0
   18002:	2300      	movs	r3, #0
   18004:	2400      	movs	r4, #0
   18006:	2200      	movs	r2, #0
   18008:	e7de      	b.n	17fc8 <__aeabi_i2d+0x30>
   1800a:	46c0      	nop			; (mov r8, r8)
   1800c:	0000041e 	.word	0x0000041e
   18010:	00000433 	.word	0x00000433
   18014:	00000413 	.word	0x00000413
   18018:	800fffff 	.word	0x800fffff

0001801c <__aeabi_ui2d>:
   1801c:	b510      	push	{r4, lr}
   1801e:	1e04      	subs	r4, r0, #0
   18020:	d028      	beq.n	18074 <__aeabi_ui2d+0x58>
   18022:	f000 f90f 	bl	18244 <__clzsi2>
   18026:	4b15      	ldr	r3, [pc, #84]	; (1807c <__aeabi_ui2d+0x60>)
   18028:	4a15      	ldr	r2, [pc, #84]	; (18080 <__aeabi_ui2d+0x64>)
   1802a:	1a1b      	subs	r3, r3, r0
   1802c:	1ad2      	subs	r2, r2, r3
   1802e:	2a1f      	cmp	r2, #31
   18030:	dd15      	ble.n	1805e <__aeabi_ui2d+0x42>
   18032:	4a14      	ldr	r2, [pc, #80]	; (18084 <__aeabi_ui2d+0x68>)
   18034:	1ad2      	subs	r2, r2, r3
   18036:	4094      	lsls	r4, r2
   18038:	2200      	movs	r2, #0
   1803a:	0324      	lsls	r4, r4, #12
   1803c:	055b      	lsls	r3, r3, #21
   1803e:	0b24      	lsrs	r4, r4, #12
   18040:	0d5b      	lsrs	r3, r3, #21
   18042:	2100      	movs	r1, #0
   18044:	0010      	movs	r0, r2
   18046:	0324      	lsls	r4, r4, #12
   18048:	0d0a      	lsrs	r2, r1, #20
   1804a:	0b24      	lsrs	r4, r4, #12
   1804c:	0512      	lsls	r2, r2, #20
   1804e:	4322      	orrs	r2, r4
   18050:	4c0d      	ldr	r4, [pc, #52]	; (18088 <__aeabi_ui2d+0x6c>)
   18052:	051b      	lsls	r3, r3, #20
   18054:	4022      	ands	r2, r4
   18056:	4313      	orrs	r3, r2
   18058:	005b      	lsls	r3, r3, #1
   1805a:	0859      	lsrs	r1, r3, #1
   1805c:	bd10      	pop	{r4, pc}
   1805e:	0021      	movs	r1, r4
   18060:	4091      	lsls	r1, r2
   18062:	000a      	movs	r2, r1
   18064:	210b      	movs	r1, #11
   18066:	1a08      	subs	r0, r1, r0
   18068:	40c4      	lsrs	r4, r0
   1806a:	055b      	lsls	r3, r3, #21
   1806c:	0324      	lsls	r4, r4, #12
   1806e:	0b24      	lsrs	r4, r4, #12
   18070:	0d5b      	lsrs	r3, r3, #21
   18072:	e7e6      	b.n	18042 <__aeabi_ui2d+0x26>
   18074:	2300      	movs	r3, #0
   18076:	2400      	movs	r4, #0
   18078:	2200      	movs	r2, #0
   1807a:	e7e2      	b.n	18042 <__aeabi_ui2d+0x26>
   1807c:	0000041e 	.word	0x0000041e
   18080:	00000433 	.word	0x00000433
   18084:	00000413 	.word	0x00000413
   18088:	800fffff 	.word	0x800fffff

0001808c <__aeabi_f2d>:
   1808c:	0041      	lsls	r1, r0, #1
   1808e:	0e09      	lsrs	r1, r1, #24
   18090:	1c4b      	adds	r3, r1, #1
   18092:	b570      	push	{r4, r5, r6, lr}
   18094:	b2db      	uxtb	r3, r3
   18096:	0246      	lsls	r6, r0, #9
   18098:	0a75      	lsrs	r5, r6, #9
   1809a:	0fc4      	lsrs	r4, r0, #31
   1809c:	2b01      	cmp	r3, #1
   1809e:	dd14      	ble.n	180ca <__aeabi_f2d+0x3e>
   180a0:	23e0      	movs	r3, #224	; 0xe0
   180a2:	009b      	lsls	r3, r3, #2
   180a4:	076d      	lsls	r5, r5, #29
   180a6:	0b36      	lsrs	r6, r6, #12
   180a8:	18cb      	adds	r3, r1, r3
   180aa:	2100      	movs	r1, #0
   180ac:	0d0a      	lsrs	r2, r1, #20
   180ae:	0028      	movs	r0, r5
   180b0:	0512      	lsls	r2, r2, #20
   180b2:	4d1c      	ldr	r5, [pc, #112]	; (18124 <__aeabi_f2d+0x98>)
   180b4:	4332      	orrs	r2, r6
   180b6:	055b      	lsls	r3, r3, #21
   180b8:	402a      	ands	r2, r5
   180ba:	085b      	lsrs	r3, r3, #1
   180bc:	4313      	orrs	r3, r2
   180be:	005b      	lsls	r3, r3, #1
   180c0:	07e4      	lsls	r4, r4, #31
   180c2:	085b      	lsrs	r3, r3, #1
   180c4:	4323      	orrs	r3, r4
   180c6:	0019      	movs	r1, r3
   180c8:	bd70      	pop	{r4, r5, r6, pc}
   180ca:	2900      	cmp	r1, #0
   180cc:	d114      	bne.n	180f8 <__aeabi_f2d+0x6c>
   180ce:	2d00      	cmp	r5, #0
   180d0:	d01e      	beq.n	18110 <__aeabi_f2d+0x84>
   180d2:	0028      	movs	r0, r5
   180d4:	f000 f8b6 	bl	18244 <__clzsi2>
   180d8:	280a      	cmp	r0, #10
   180da:	dc1c      	bgt.n	18116 <__aeabi_f2d+0x8a>
   180dc:	230b      	movs	r3, #11
   180de:	002a      	movs	r2, r5
   180e0:	1a1b      	subs	r3, r3, r0
   180e2:	40da      	lsrs	r2, r3
   180e4:	0003      	movs	r3, r0
   180e6:	3315      	adds	r3, #21
   180e8:	409d      	lsls	r5, r3
   180ea:	4b0f      	ldr	r3, [pc, #60]	; (18128 <__aeabi_f2d+0x9c>)
   180ec:	0312      	lsls	r2, r2, #12
   180ee:	1a1b      	subs	r3, r3, r0
   180f0:	055b      	lsls	r3, r3, #21
   180f2:	0b16      	lsrs	r6, r2, #12
   180f4:	0d5b      	lsrs	r3, r3, #21
   180f6:	e7d8      	b.n	180aa <__aeabi_f2d+0x1e>
   180f8:	2d00      	cmp	r5, #0
   180fa:	d006      	beq.n	1810a <__aeabi_f2d+0x7e>
   180fc:	0b32      	lsrs	r2, r6, #12
   180fe:	2680      	movs	r6, #128	; 0x80
   18100:	0336      	lsls	r6, r6, #12
   18102:	076d      	lsls	r5, r5, #29
   18104:	4316      	orrs	r6, r2
   18106:	4b09      	ldr	r3, [pc, #36]	; (1812c <__aeabi_f2d+0xa0>)
   18108:	e7cf      	b.n	180aa <__aeabi_f2d+0x1e>
   1810a:	4b08      	ldr	r3, [pc, #32]	; (1812c <__aeabi_f2d+0xa0>)
   1810c:	2600      	movs	r6, #0
   1810e:	e7cc      	b.n	180aa <__aeabi_f2d+0x1e>
   18110:	2300      	movs	r3, #0
   18112:	2600      	movs	r6, #0
   18114:	e7c9      	b.n	180aa <__aeabi_f2d+0x1e>
   18116:	0003      	movs	r3, r0
   18118:	002a      	movs	r2, r5
   1811a:	3b0b      	subs	r3, #11
   1811c:	409a      	lsls	r2, r3
   1811e:	2500      	movs	r5, #0
   18120:	e7e3      	b.n	180ea <__aeabi_f2d+0x5e>
   18122:	46c0      	nop			; (mov r8, r8)
   18124:	800fffff 	.word	0x800fffff
   18128:	00000389 	.word	0x00000389
   1812c:	000007ff 	.word	0x000007ff

00018130 <__aeabi_d2f>:
   18130:	b5f0      	push	{r4, r5, r6, r7, lr}
   18132:	004c      	lsls	r4, r1, #1
   18134:	0d64      	lsrs	r4, r4, #21
   18136:	030b      	lsls	r3, r1, #12
   18138:	1c62      	adds	r2, r4, #1
   1813a:	0f45      	lsrs	r5, r0, #29
   1813c:	0a5b      	lsrs	r3, r3, #9
   1813e:	0552      	lsls	r2, r2, #21
   18140:	432b      	orrs	r3, r5
   18142:	0fc9      	lsrs	r1, r1, #31
   18144:	00c5      	lsls	r5, r0, #3
   18146:	0d52      	lsrs	r2, r2, #21
   18148:	2a01      	cmp	r2, #1
   1814a:	dd28      	ble.n	1819e <__aeabi_d2f+0x6e>
   1814c:	4a3a      	ldr	r2, [pc, #232]	; (18238 <__aeabi_d2f+0x108>)
   1814e:	18a6      	adds	r6, r4, r2
   18150:	2efe      	cmp	r6, #254	; 0xfe
   18152:	dc1b      	bgt.n	1818c <__aeabi_d2f+0x5c>
   18154:	2e00      	cmp	r6, #0
   18156:	dd3e      	ble.n	181d6 <__aeabi_d2f+0xa6>
   18158:	0180      	lsls	r0, r0, #6
   1815a:	0002      	movs	r2, r0
   1815c:	1e50      	subs	r0, r2, #1
   1815e:	4182      	sbcs	r2, r0
   18160:	0f6d      	lsrs	r5, r5, #29
   18162:	432a      	orrs	r2, r5
   18164:	00db      	lsls	r3, r3, #3
   18166:	4313      	orrs	r3, r2
   18168:	075a      	lsls	r2, r3, #29
   1816a:	d004      	beq.n	18176 <__aeabi_d2f+0x46>
   1816c:	220f      	movs	r2, #15
   1816e:	401a      	ands	r2, r3
   18170:	2a04      	cmp	r2, #4
   18172:	d000      	beq.n	18176 <__aeabi_d2f+0x46>
   18174:	3304      	adds	r3, #4
   18176:	2280      	movs	r2, #128	; 0x80
   18178:	04d2      	lsls	r2, r2, #19
   1817a:	401a      	ands	r2, r3
   1817c:	d05a      	beq.n	18234 <__aeabi_d2f+0x104>
   1817e:	3601      	adds	r6, #1
   18180:	2eff      	cmp	r6, #255	; 0xff
   18182:	d003      	beq.n	1818c <__aeabi_d2f+0x5c>
   18184:	019b      	lsls	r3, r3, #6
   18186:	0a5b      	lsrs	r3, r3, #9
   18188:	b2f4      	uxtb	r4, r6
   1818a:	e001      	b.n	18190 <__aeabi_d2f+0x60>
   1818c:	24ff      	movs	r4, #255	; 0xff
   1818e:	2300      	movs	r3, #0
   18190:	0258      	lsls	r0, r3, #9
   18192:	05e4      	lsls	r4, r4, #23
   18194:	0a40      	lsrs	r0, r0, #9
   18196:	07c9      	lsls	r1, r1, #31
   18198:	4320      	orrs	r0, r4
   1819a:	4308      	orrs	r0, r1
   1819c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1819e:	2c00      	cmp	r4, #0
   181a0:	d007      	beq.n	181b2 <__aeabi_d2f+0x82>
   181a2:	431d      	orrs	r5, r3
   181a4:	d0f2      	beq.n	1818c <__aeabi_d2f+0x5c>
   181a6:	2080      	movs	r0, #128	; 0x80
   181a8:	00db      	lsls	r3, r3, #3
   181aa:	0480      	lsls	r0, r0, #18
   181ac:	4303      	orrs	r3, r0
   181ae:	26ff      	movs	r6, #255	; 0xff
   181b0:	e7da      	b.n	18168 <__aeabi_d2f+0x38>
   181b2:	432b      	orrs	r3, r5
   181b4:	d003      	beq.n	181be <__aeabi_d2f+0x8e>
   181b6:	2305      	movs	r3, #5
   181b8:	08db      	lsrs	r3, r3, #3
   181ba:	2cff      	cmp	r4, #255	; 0xff
   181bc:	d003      	beq.n	181c6 <__aeabi_d2f+0x96>
   181be:	025b      	lsls	r3, r3, #9
   181c0:	0a5b      	lsrs	r3, r3, #9
   181c2:	b2e4      	uxtb	r4, r4
   181c4:	e7e4      	b.n	18190 <__aeabi_d2f+0x60>
   181c6:	2b00      	cmp	r3, #0
   181c8:	d032      	beq.n	18230 <__aeabi_d2f+0x100>
   181ca:	2080      	movs	r0, #128	; 0x80
   181cc:	03c0      	lsls	r0, r0, #15
   181ce:	4303      	orrs	r3, r0
   181d0:	025b      	lsls	r3, r3, #9
   181d2:	0a5b      	lsrs	r3, r3, #9
   181d4:	e7dc      	b.n	18190 <__aeabi_d2f+0x60>
   181d6:	0032      	movs	r2, r6
   181d8:	3217      	adds	r2, #23
   181da:	db14      	blt.n	18206 <__aeabi_d2f+0xd6>
   181dc:	2280      	movs	r2, #128	; 0x80
   181de:	271e      	movs	r7, #30
   181e0:	0412      	lsls	r2, r2, #16
   181e2:	4313      	orrs	r3, r2
   181e4:	1bbf      	subs	r7, r7, r6
   181e6:	2f1f      	cmp	r7, #31
   181e8:	dc0f      	bgt.n	1820a <__aeabi_d2f+0xda>
   181ea:	4a14      	ldr	r2, [pc, #80]	; (1823c <__aeabi_d2f+0x10c>)
   181ec:	4694      	mov	ip, r2
   181ee:	4464      	add	r4, ip
   181f0:	002a      	movs	r2, r5
   181f2:	40a5      	lsls	r5, r4
   181f4:	002e      	movs	r6, r5
   181f6:	40a3      	lsls	r3, r4
   181f8:	1e75      	subs	r5, r6, #1
   181fa:	41ae      	sbcs	r6, r5
   181fc:	40fa      	lsrs	r2, r7
   181fe:	4333      	orrs	r3, r6
   18200:	4313      	orrs	r3, r2
   18202:	2600      	movs	r6, #0
   18204:	e7b0      	b.n	18168 <__aeabi_d2f+0x38>
   18206:	2400      	movs	r4, #0
   18208:	e7d5      	b.n	181b6 <__aeabi_d2f+0x86>
   1820a:	2202      	movs	r2, #2
   1820c:	4252      	negs	r2, r2
   1820e:	1b96      	subs	r6, r2, r6
   18210:	001a      	movs	r2, r3
   18212:	40f2      	lsrs	r2, r6
   18214:	2f20      	cmp	r7, #32
   18216:	d009      	beq.n	1822c <__aeabi_d2f+0xfc>
   18218:	4809      	ldr	r0, [pc, #36]	; (18240 <__aeabi_d2f+0x110>)
   1821a:	4684      	mov	ip, r0
   1821c:	4464      	add	r4, ip
   1821e:	40a3      	lsls	r3, r4
   18220:	432b      	orrs	r3, r5
   18222:	1e5d      	subs	r5, r3, #1
   18224:	41ab      	sbcs	r3, r5
   18226:	2600      	movs	r6, #0
   18228:	4313      	orrs	r3, r2
   1822a:	e79d      	b.n	18168 <__aeabi_d2f+0x38>
   1822c:	2300      	movs	r3, #0
   1822e:	e7f7      	b.n	18220 <__aeabi_d2f+0xf0>
   18230:	2300      	movs	r3, #0
   18232:	e7ad      	b.n	18190 <__aeabi_d2f+0x60>
   18234:	0034      	movs	r4, r6
   18236:	e7bf      	b.n	181b8 <__aeabi_d2f+0x88>
   18238:	fffffc80 	.word	0xfffffc80
   1823c:	fffffc82 	.word	0xfffffc82
   18240:	fffffca2 	.word	0xfffffca2

00018244 <__clzsi2>:
   18244:	211c      	movs	r1, #28
   18246:	2301      	movs	r3, #1
   18248:	041b      	lsls	r3, r3, #16
   1824a:	4298      	cmp	r0, r3
   1824c:	d301      	bcc.n	18252 <__clzsi2+0xe>
   1824e:	0c00      	lsrs	r0, r0, #16
   18250:	3910      	subs	r1, #16
   18252:	0a1b      	lsrs	r3, r3, #8
   18254:	4298      	cmp	r0, r3
   18256:	d301      	bcc.n	1825c <__clzsi2+0x18>
   18258:	0a00      	lsrs	r0, r0, #8
   1825a:	3908      	subs	r1, #8
   1825c:	091b      	lsrs	r3, r3, #4
   1825e:	4298      	cmp	r0, r3
   18260:	d301      	bcc.n	18266 <__clzsi2+0x22>
   18262:	0900      	lsrs	r0, r0, #4
   18264:	3904      	subs	r1, #4
   18266:	a202      	add	r2, pc, #8	; (adr r2, 18270 <__clzsi2+0x2c>)
   18268:	5c10      	ldrb	r0, [r2, r0]
   1826a:	1840      	adds	r0, r0, r1
   1826c:	4770      	bx	lr
   1826e:	46c0      	nop			; (mov r8, r8)
   18270:	02020304 	.word	0x02020304
   18274:	01010101 	.word	0x01010101
	...

00018280 <__clzdi2>:
   18280:	b510      	push	{r4, lr}
   18282:	2900      	cmp	r1, #0
   18284:	d103      	bne.n	1828e <__clzdi2+0xe>
   18286:	f7ff ffdd 	bl	18244 <__clzsi2>
   1828a:	3020      	adds	r0, #32
   1828c:	e002      	b.n	18294 <__clzdi2+0x14>
   1828e:	1c08      	adds	r0, r1, #0
   18290:	f7ff ffd8 	bl	18244 <__clzsi2>
   18294:	bd10      	pop	{r4, pc}
   18296:	46c0      	nop			; (mov r8, r8)

00018298 <__assert_func>:
   18298:	b530      	push	{r4, r5, lr}
   1829a:	001c      	movs	r4, r3
   1829c:	4b09      	ldr	r3, [pc, #36]	; (182c4 <__assert_func+0x2c>)
   1829e:	0005      	movs	r5, r0
   182a0:	681b      	ldr	r3, [r3, #0]
   182a2:	b085      	sub	sp, #20
   182a4:	68d8      	ldr	r0, [r3, #12]
   182a6:	4b08      	ldr	r3, [pc, #32]	; (182c8 <__assert_func+0x30>)
   182a8:	2a00      	cmp	r2, #0
   182aa:	d101      	bne.n	182b0 <__assert_func+0x18>
   182ac:	4b07      	ldr	r3, [pc, #28]	; (182cc <__assert_func+0x34>)
   182ae:	001a      	movs	r2, r3
   182b0:	9202      	str	r2, [sp, #8]
   182b2:	9301      	str	r3, [sp, #4]
   182b4:	9100      	str	r1, [sp, #0]
   182b6:	002b      	movs	r3, r5
   182b8:	0022      	movs	r2, r4
   182ba:	4905      	ldr	r1, [pc, #20]	; (182d0 <__assert_func+0x38>)
   182bc:	f000 f80a 	bl	182d4 <fiprintf>
   182c0:	f000 fdde 	bl	18e80 <abort>
   182c4:	2000002c 	.word	0x2000002c
   182c8:	0001b15c 	.word	0x0001b15c
   182cc:	0001b197 	.word	0x0001b197
   182d0:	0001b169 	.word	0x0001b169

000182d4 <fiprintf>:
   182d4:	b40e      	push	{r1, r2, r3}
   182d6:	b503      	push	{r0, r1, lr}
   182d8:	0001      	movs	r1, r0
   182da:	ab03      	add	r3, sp, #12
   182dc:	4804      	ldr	r0, [pc, #16]	; (182f0 <fiprintf+0x1c>)
   182de:	cb04      	ldmia	r3!, {r2}
   182e0:	6800      	ldr	r0, [r0, #0]
   182e2:	9301      	str	r3, [sp, #4]
   182e4:	f000 f872 	bl	183cc <_vfiprintf_r>
   182e8:	b002      	add	sp, #8
   182ea:	bc08      	pop	{r3}
   182ec:	b003      	add	sp, #12
   182ee:	4718      	bx	r3
   182f0:	2000002c 	.word	0x2000002c

000182f4 <__libc_init_array>:
   182f4:	b570      	push	{r4, r5, r6, lr}
   182f6:	2600      	movs	r6, #0
   182f8:	4d0c      	ldr	r5, [pc, #48]	; (1832c <__libc_init_array+0x38>)
   182fa:	4c0d      	ldr	r4, [pc, #52]	; (18330 <__libc_init_array+0x3c>)
   182fc:	1b64      	subs	r4, r4, r5
   182fe:	10a4      	asrs	r4, r4, #2
   18300:	42a6      	cmp	r6, r4
   18302:	d109      	bne.n	18318 <__libc_init_array+0x24>
   18304:	2600      	movs	r6, #0
   18306:	f002 ff93 	bl	1b230 <_init>
   1830a:	4d0a      	ldr	r5, [pc, #40]	; (18334 <__libc_init_array+0x40>)
   1830c:	4c0a      	ldr	r4, [pc, #40]	; (18338 <__libc_init_array+0x44>)
   1830e:	1b64      	subs	r4, r4, r5
   18310:	10a4      	asrs	r4, r4, #2
   18312:	42a6      	cmp	r6, r4
   18314:	d105      	bne.n	18322 <__libc_init_array+0x2e>
   18316:	bd70      	pop	{r4, r5, r6, pc}
   18318:	00b3      	lsls	r3, r6, #2
   1831a:	58eb      	ldr	r3, [r5, r3]
   1831c:	4798      	blx	r3
   1831e:	3601      	adds	r6, #1
   18320:	e7ee      	b.n	18300 <__libc_init_array+0xc>
   18322:	00b3      	lsls	r3, r6, #2
   18324:	58eb      	ldr	r3, [r5, r3]
   18326:	4798      	blx	r3
   18328:	3601      	adds	r6, #1
   1832a:	e7f2      	b.n	18312 <__libc_init_array+0x1e>
   1832c:	0001b23c 	.word	0x0001b23c
   18330:	0001b23c 	.word	0x0001b23c
   18334:	0001b23c 	.word	0x0001b23c
   18338:	0001b240 	.word	0x0001b240

0001833c <memcmp>:
   1833c:	b530      	push	{r4, r5, lr}
   1833e:	2400      	movs	r4, #0
   18340:	42a2      	cmp	r2, r4
   18342:	d101      	bne.n	18348 <memcmp+0xc>
   18344:	2000      	movs	r0, #0
   18346:	e005      	b.n	18354 <memcmp+0x18>
   18348:	5d03      	ldrb	r3, [r0, r4]
   1834a:	1c65      	adds	r5, r4, #1
   1834c:	5d0c      	ldrb	r4, [r1, r4]
   1834e:	42a3      	cmp	r3, r4
   18350:	d001      	beq.n	18356 <memcmp+0x1a>
   18352:	1b18      	subs	r0, r3, r4
   18354:	bd30      	pop	{r4, r5, pc}
   18356:	002c      	movs	r4, r5
   18358:	e7f2      	b.n	18340 <memcmp+0x4>

0001835a <memcpy>:
   1835a:	2300      	movs	r3, #0
   1835c:	b510      	push	{r4, lr}
   1835e:	429a      	cmp	r2, r3
   18360:	d100      	bne.n	18364 <memcpy+0xa>
   18362:	bd10      	pop	{r4, pc}
   18364:	5ccc      	ldrb	r4, [r1, r3]
   18366:	54c4      	strb	r4, [r0, r3]
   18368:	3301      	adds	r3, #1
   1836a:	e7f8      	b.n	1835e <memcpy+0x4>

0001836c <memset>:
   1836c:	0003      	movs	r3, r0
   1836e:	1882      	adds	r2, r0, r2
   18370:	4293      	cmp	r3, r2
   18372:	d100      	bne.n	18376 <memset+0xa>
   18374:	4770      	bx	lr
   18376:	7019      	strb	r1, [r3, #0]
   18378:	3301      	adds	r3, #1
   1837a:	e7f9      	b.n	18370 <memset+0x4>

0001837c <__sfputc_r>:
   1837c:	6893      	ldr	r3, [r2, #8]
   1837e:	b510      	push	{r4, lr}
   18380:	3b01      	subs	r3, #1
   18382:	6093      	str	r3, [r2, #8]
   18384:	2b00      	cmp	r3, #0
   18386:	da05      	bge.n	18394 <__sfputc_r+0x18>
   18388:	6994      	ldr	r4, [r2, #24]
   1838a:	42a3      	cmp	r3, r4
   1838c:	db08      	blt.n	183a0 <__sfputc_r+0x24>
   1838e:	b2cb      	uxtb	r3, r1
   18390:	2b0a      	cmp	r3, #10
   18392:	d005      	beq.n	183a0 <__sfputc_r+0x24>
   18394:	6813      	ldr	r3, [r2, #0]
   18396:	1c58      	adds	r0, r3, #1
   18398:	6010      	str	r0, [r2, #0]
   1839a:	7019      	strb	r1, [r3, #0]
   1839c:	b2c8      	uxtb	r0, r1
   1839e:	bd10      	pop	{r4, pc}
   183a0:	f000 fca2 	bl	18ce8 <__swbuf_r>
   183a4:	e7fb      	b.n	1839e <__sfputc_r+0x22>

000183a6 <__sfputs_r>:
   183a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   183a8:	0006      	movs	r6, r0
   183aa:	000f      	movs	r7, r1
   183ac:	0014      	movs	r4, r2
   183ae:	18d5      	adds	r5, r2, r3
   183b0:	42ac      	cmp	r4, r5
   183b2:	d101      	bne.n	183b8 <__sfputs_r+0x12>
   183b4:	2000      	movs	r0, #0
   183b6:	e007      	b.n	183c8 <__sfputs_r+0x22>
   183b8:	7821      	ldrb	r1, [r4, #0]
   183ba:	003a      	movs	r2, r7
   183bc:	0030      	movs	r0, r6
   183be:	f7ff ffdd 	bl	1837c <__sfputc_r>
   183c2:	3401      	adds	r4, #1
   183c4:	1c43      	adds	r3, r0, #1
   183c6:	d1f3      	bne.n	183b0 <__sfputs_r+0xa>
   183c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   183ca:	Address 0x000183ca is out of bounds.


000183cc <_vfiprintf_r>:
   183cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   183ce:	b09f      	sub	sp, #124	; 0x7c
   183d0:	0006      	movs	r6, r0
   183d2:	000f      	movs	r7, r1
   183d4:	0014      	movs	r4, r2
   183d6:	9305      	str	r3, [sp, #20]
   183d8:	2800      	cmp	r0, #0
   183da:	d004      	beq.n	183e6 <_vfiprintf_r+0x1a>
   183dc:	6983      	ldr	r3, [r0, #24]
   183de:	2b00      	cmp	r3, #0
   183e0:	d101      	bne.n	183e6 <_vfiprintf_r+0x1a>
   183e2:	f000 fe4d 	bl	19080 <__sinit>
   183e6:	4b7f      	ldr	r3, [pc, #508]	; (185e4 <_vfiprintf_r+0x218>)
   183e8:	429f      	cmp	r7, r3
   183ea:	d15c      	bne.n	184a6 <_vfiprintf_r+0xda>
   183ec:	6877      	ldr	r7, [r6, #4]
   183ee:	89bb      	ldrh	r3, [r7, #12]
   183f0:	071b      	lsls	r3, r3, #28
   183f2:	d562      	bpl.n	184ba <_vfiprintf_r+0xee>
   183f4:	693b      	ldr	r3, [r7, #16]
   183f6:	2b00      	cmp	r3, #0
   183f8:	d05f      	beq.n	184ba <_vfiprintf_r+0xee>
   183fa:	2300      	movs	r3, #0
   183fc:	ad06      	add	r5, sp, #24
   183fe:	616b      	str	r3, [r5, #20]
   18400:	3320      	adds	r3, #32
   18402:	766b      	strb	r3, [r5, #25]
   18404:	3310      	adds	r3, #16
   18406:	76ab      	strb	r3, [r5, #26]
   18408:	9402      	str	r4, [sp, #8]
   1840a:	9c02      	ldr	r4, [sp, #8]
   1840c:	7823      	ldrb	r3, [r4, #0]
   1840e:	2b00      	cmp	r3, #0
   18410:	d15d      	bne.n	184ce <_vfiprintf_r+0x102>
   18412:	9b02      	ldr	r3, [sp, #8]
   18414:	1ae3      	subs	r3, r4, r3
   18416:	9304      	str	r3, [sp, #16]
   18418:	d00d      	beq.n	18436 <_vfiprintf_r+0x6a>
   1841a:	9b04      	ldr	r3, [sp, #16]
   1841c:	9a02      	ldr	r2, [sp, #8]
   1841e:	0039      	movs	r1, r7
   18420:	0030      	movs	r0, r6
   18422:	f7ff ffc0 	bl	183a6 <__sfputs_r>
   18426:	1c43      	adds	r3, r0, #1
   18428:	d100      	bne.n	1842c <_vfiprintf_r+0x60>
   1842a:	e0cc      	b.n	185c6 <_vfiprintf_r+0x1fa>
   1842c:	696a      	ldr	r2, [r5, #20]
   1842e:	9b04      	ldr	r3, [sp, #16]
   18430:	4694      	mov	ip, r2
   18432:	4463      	add	r3, ip
   18434:	616b      	str	r3, [r5, #20]
   18436:	7823      	ldrb	r3, [r4, #0]
   18438:	2b00      	cmp	r3, #0
   1843a:	d100      	bne.n	1843e <_vfiprintf_r+0x72>
   1843c:	e0c3      	b.n	185c6 <_vfiprintf_r+0x1fa>
   1843e:	2201      	movs	r2, #1
   18440:	2300      	movs	r3, #0
   18442:	4252      	negs	r2, r2
   18444:	606a      	str	r2, [r5, #4]
   18446:	a902      	add	r1, sp, #8
   18448:	3254      	adds	r2, #84	; 0x54
   1844a:	1852      	adds	r2, r2, r1
   1844c:	3401      	adds	r4, #1
   1844e:	602b      	str	r3, [r5, #0]
   18450:	60eb      	str	r3, [r5, #12]
   18452:	60ab      	str	r3, [r5, #8]
   18454:	7013      	strb	r3, [r2, #0]
   18456:	65ab      	str	r3, [r5, #88]	; 0x58
   18458:	7821      	ldrb	r1, [r4, #0]
   1845a:	2205      	movs	r2, #5
   1845c:	4862      	ldr	r0, [pc, #392]	; (185e8 <_vfiprintf_r+0x21c>)
   1845e:	f000 ff1b 	bl	19298 <memchr>
   18462:	1c63      	adds	r3, r4, #1
   18464:	469c      	mov	ip, r3
   18466:	2800      	cmp	r0, #0
   18468:	d135      	bne.n	184d6 <_vfiprintf_r+0x10a>
   1846a:	6829      	ldr	r1, [r5, #0]
   1846c:	06cb      	lsls	r3, r1, #27
   1846e:	d504      	bpl.n	1847a <_vfiprintf_r+0xae>
   18470:	2353      	movs	r3, #83	; 0x53
   18472:	aa02      	add	r2, sp, #8
   18474:	3020      	adds	r0, #32
   18476:	189b      	adds	r3, r3, r2
   18478:	7018      	strb	r0, [r3, #0]
   1847a:	070b      	lsls	r3, r1, #28
   1847c:	d504      	bpl.n	18488 <_vfiprintf_r+0xbc>
   1847e:	2353      	movs	r3, #83	; 0x53
   18480:	202b      	movs	r0, #43	; 0x2b
   18482:	aa02      	add	r2, sp, #8
   18484:	189b      	adds	r3, r3, r2
   18486:	7018      	strb	r0, [r3, #0]
   18488:	7823      	ldrb	r3, [r4, #0]
   1848a:	2b2a      	cmp	r3, #42	; 0x2a
   1848c:	d02c      	beq.n	184e8 <_vfiprintf_r+0x11c>
   1848e:	2000      	movs	r0, #0
   18490:	210a      	movs	r1, #10
   18492:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18494:	7822      	ldrb	r2, [r4, #0]
   18496:	3a30      	subs	r2, #48	; 0x30
   18498:	2a09      	cmp	r2, #9
   1849a:	d800      	bhi.n	1849e <_vfiprintf_r+0xd2>
   1849c:	e06b      	b.n	18576 <_vfiprintf_r+0x1aa>
   1849e:	2800      	cmp	r0, #0
   184a0:	d02a      	beq.n	184f8 <_vfiprintf_r+0x12c>
   184a2:	9309      	str	r3, [sp, #36]	; 0x24
   184a4:	e028      	b.n	184f8 <_vfiprintf_r+0x12c>
   184a6:	4b51      	ldr	r3, [pc, #324]	; (185ec <_vfiprintf_r+0x220>)
   184a8:	429f      	cmp	r7, r3
   184aa:	d101      	bne.n	184b0 <_vfiprintf_r+0xe4>
   184ac:	68b7      	ldr	r7, [r6, #8]
   184ae:	e79e      	b.n	183ee <_vfiprintf_r+0x22>
   184b0:	4b4f      	ldr	r3, [pc, #316]	; (185f0 <_vfiprintf_r+0x224>)
   184b2:	429f      	cmp	r7, r3
   184b4:	d19b      	bne.n	183ee <_vfiprintf_r+0x22>
   184b6:	68f7      	ldr	r7, [r6, #12]
   184b8:	e799      	b.n	183ee <_vfiprintf_r+0x22>
   184ba:	0039      	movs	r1, r7
   184bc:	0030      	movs	r0, r6
   184be:	f000 fc69 	bl	18d94 <__swsetup_r>
   184c2:	2800      	cmp	r0, #0
   184c4:	d099      	beq.n	183fa <_vfiprintf_r+0x2e>
   184c6:	2001      	movs	r0, #1
   184c8:	4240      	negs	r0, r0
   184ca:	b01f      	add	sp, #124	; 0x7c
   184cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   184ce:	2b25      	cmp	r3, #37	; 0x25
   184d0:	d09f      	beq.n	18412 <_vfiprintf_r+0x46>
   184d2:	3401      	adds	r4, #1
   184d4:	e79a      	b.n	1840c <_vfiprintf_r+0x40>
   184d6:	4b44      	ldr	r3, [pc, #272]	; (185e8 <_vfiprintf_r+0x21c>)
   184d8:	6829      	ldr	r1, [r5, #0]
   184da:	1ac0      	subs	r0, r0, r3
   184dc:	2301      	movs	r3, #1
   184de:	4083      	lsls	r3, r0
   184e0:	430b      	orrs	r3, r1
   184e2:	602b      	str	r3, [r5, #0]
   184e4:	4664      	mov	r4, ip
   184e6:	e7b7      	b.n	18458 <_vfiprintf_r+0x8c>
   184e8:	9b05      	ldr	r3, [sp, #20]
   184ea:	1d18      	adds	r0, r3, #4
   184ec:	681b      	ldr	r3, [r3, #0]
   184ee:	9005      	str	r0, [sp, #20]
   184f0:	2b00      	cmp	r3, #0
   184f2:	db3a      	blt.n	1856a <_vfiprintf_r+0x19e>
   184f4:	9309      	str	r3, [sp, #36]	; 0x24
   184f6:	4664      	mov	r4, ip
   184f8:	7823      	ldrb	r3, [r4, #0]
   184fa:	2b2e      	cmp	r3, #46	; 0x2e
   184fc:	d10b      	bne.n	18516 <_vfiprintf_r+0x14a>
   184fe:	7863      	ldrb	r3, [r4, #1]
   18500:	1c62      	adds	r2, r4, #1
   18502:	2b2a      	cmp	r3, #42	; 0x2a
   18504:	d13f      	bne.n	18586 <_vfiprintf_r+0x1ba>
   18506:	9b05      	ldr	r3, [sp, #20]
   18508:	3402      	adds	r4, #2
   1850a:	1d1a      	adds	r2, r3, #4
   1850c:	681b      	ldr	r3, [r3, #0]
   1850e:	9205      	str	r2, [sp, #20]
   18510:	2b00      	cmp	r3, #0
   18512:	db35      	blt.n	18580 <_vfiprintf_r+0x1b4>
   18514:	9307      	str	r3, [sp, #28]
   18516:	7821      	ldrb	r1, [r4, #0]
   18518:	2203      	movs	r2, #3
   1851a:	4836      	ldr	r0, [pc, #216]	; (185f4 <_vfiprintf_r+0x228>)
   1851c:	f000 febc 	bl	19298 <memchr>
   18520:	2800      	cmp	r0, #0
   18522:	d007      	beq.n	18534 <_vfiprintf_r+0x168>
   18524:	4b33      	ldr	r3, [pc, #204]	; (185f4 <_vfiprintf_r+0x228>)
   18526:	682a      	ldr	r2, [r5, #0]
   18528:	1ac0      	subs	r0, r0, r3
   1852a:	2340      	movs	r3, #64	; 0x40
   1852c:	4083      	lsls	r3, r0
   1852e:	4313      	orrs	r3, r2
   18530:	602b      	str	r3, [r5, #0]
   18532:	3401      	adds	r4, #1
   18534:	7821      	ldrb	r1, [r4, #0]
   18536:	1c63      	adds	r3, r4, #1
   18538:	2206      	movs	r2, #6
   1853a:	482f      	ldr	r0, [pc, #188]	; (185f8 <_vfiprintf_r+0x22c>)
   1853c:	9302      	str	r3, [sp, #8]
   1853e:	7629      	strb	r1, [r5, #24]
   18540:	f000 feaa 	bl	19298 <memchr>
   18544:	2800      	cmp	r0, #0
   18546:	d044      	beq.n	185d2 <_vfiprintf_r+0x206>
   18548:	4b2c      	ldr	r3, [pc, #176]	; (185fc <_vfiprintf_r+0x230>)
   1854a:	2b00      	cmp	r3, #0
   1854c:	d12f      	bne.n	185ae <_vfiprintf_r+0x1e2>
   1854e:	6829      	ldr	r1, [r5, #0]
   18550:	9b05      	ldr	r3, [sp, #20]
   18552:	2207      	movs	r2, #7
   18554:	05c9      	lsls	r1, r1, #23
   18556:	d528      	bpl.n	185aa <_vfiprintf_r+0x1de>
   18558:	189b      	adds	r3, r3, r2
   1855a:	4393      	bics	r3, r2
   1855c:	3308      	adds	r3, #8
   1855e:	9305      	str	r3, [sp, #20]
   18560:	696b      	ldr	r3, [r5, #20]
   18562:	9a03      	ldr	r2, [sp, #12]
   18564:	189b      	adds	r3, r3, r2
   18566:	616b      	str	r3, [r5, #20]
   18568:	e74f      	b.n	1840a <_vfiprintf_r+0x3e>
   1856a:	425b      	negs	r3, r3
   1856c:	60eb      	str	r3, [r5, #12]
   1856e:	2302      	movs	r3, #2
   18570:	430b      	orrs	r3, r1
   18572:	602b      	str	r3, [r5, #0]
   18574:	e7bf      	b.n	184f6 <_vfiprintf_r+0x12a>
   18576:	434b      	muls	r3, r1
   18578:	3401      	adds	r4, #1
   1857a:	189b      	adds	r3, r3, r2
   1857c:	2001      	movs	r0, #1
   1857e:	e789      	b.n	18494 <_vfiprintf_r+0xc8>
   18580:	2301      	movs	r3, #1
   18582:	425b      	negs	r3, r3
   18584:	e7c6      	b.n	18514 <_vfiprintf_r+0x148>
   18586:	2300      	movs	r3, #0
   18588:	0014      	movs	r4, r2
   1858a:	200a      	movs	r0, #10
   1858c:	001a      	movs	r2, r3
   1858e:	606b      	str	r3, [r5, #4]
   18590:	7821      	ldrb	r1, [r4, #0]
   18592:	3930      	subs	r1, #48	; 0x30
   18594:	2909      	cmp	r1, #9
   18596:	d903      	bls.n	185a0 <_vfiprintf_r+0x1d4>
   18598:	2b00      	cmp	r3, #0
   1859a:	d0bc      	beq.n	18516 <_vfiprintf_r+0x14a>
   1859c:	9207      	str	r2, [sp, #28]
   1859e:	e7ba      	b.n	18516 <_vfiprintf_r+0x14a>
   185a0:	4342      	muls	r2, r0
   185a2:	3401      	adds	r4, #1
   185a4:	1852      	adds	r2, r2, r1
   185a6:	2301      	movs	r3, #1
   185a8:	e7f2      	b.n	18590 <_vfiprintf_r+0x1c4>
   185aa:	3307      	adds	r3, #7
   185ac:	e7d5      	b.n	1855a <_vfiprintf_r+0x18e>
   185ae:	ab05      	add	r3, sp, #20
   185b0:	9300      	str	r3, [sp, #0]
   185b2:	003a      	movs	r2, r7
   185b4:	4b12      	ldr	r3, [pc, #72]	; (18600 <_vfiprintf_r+0x234>)
   185b6:	0029      	movs	r1, r5
   185b8:	0030      	movs	r0, r6
   185ba:	e000      	b.n	185be <_vfiprintf_r+0x1f2>
   185bc:	bf00      	nop
   185be:	9003      	str	r0, [sp, #12]
   185c0:	9b03      	ldr	r3, [sp, #12]
   185c2:	3301      	adds	r3, #1
   185c4:	d1cc      	bne.n	18560 <_vfiprintf_r+0x194>
   185c6:	89bb      	ldrh	r3, [r7, #12]
   185c8:	065b      	lsls	r3, r3, #25
   185ca:	d500      	bpl.n	185ce <_vfiprintf_r+0x202>
   185cc:	e77b      	b.n	184c6 <_vfiprintf_r+0xfa>
   185ce:	980b      	ldr	r0, [sp, #44]	; 0x2c
   185d0:	e77b      	b.n	184ca <_vfiprintf_r+0xfe>
   185d2:	ab05      	add	r3, sp, #20
   185d4:	9300      	str	r3, [sp, #0]
   185d6:	003a      	movs	r2, r7
   185d8:	4b09      	ldr	r3, [pc, #36]	; (18600 <_vfiprintf_r+0x234>)
   185da:	0029      	movs	r1, r5
   185dc:	0030      	movs	r0, r6
   185de:	f000 f87f 	bl	186e0 <_printf_i>
   185e2:	e7ec      	b.n	185be <_vfiprintf_r+0x1f2>
   185e4:	0001b1f0 	.word	0x0001b1f0
   185e8:	0001b19c 	.word	0x0001b19c
   185ec:	0001b210 	.word	0x0001b210
   185f0:	0001b1d0 	.word	0x0001b1d0
   185f4:	0001b1a2 	.word	0x0001b1a2
   185f8:	0001b1a6 	.word	0x0001b1a6
   185fc:	00000000 	.word	0x00000000
   18600:	000183a7 	.word	0x000183a7

00018604 <_printf_common>:
   18604:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18606:	0015      	movs	r5, r2
   18608:	9301      	str	r3, [sp, #4]
   1860a:	688a      	ldr	r2, [r1, #8]
   1860c:	690b      	ldr	r3, [r1, #16]
   1860e:	9000      	str	r0, [sp, #0]
   18610:	000c      	movs	r4, r1
   18612:	4293      	cmp	r3, r2
   18614:	da00      	bge.n	18618 <_printf_common+0x14>
   18616:	0013      	movs	r3, r2
   18618:	0022      	movs	r2, r4
   1861a:	602b      	str	r3, [r5, #0]
   1861c:	3243      	adds	r2, #67	; 0x43
   1861e:	7812      	ldrb	r2, [r2, #0]
   18620:	2a00      	cmp	r2, #0
   18622:	d001      	beq.n	18628 <_printf_common+0x24>
   18624:	3301      	adds	r3, #1
   18626:	602b      	str	r3, [r5, #0]
   18628:	6823      	ldr	r3, [r4, #0]
   1862a:	069b      	lsls	r3, r3, #26
   1862c:	d502      	bpl.n	18634 <_printf_common+0x30>
   1862e:	682b      	ldr	r3, [r5, #0]
   18630:	3302      	adds	r3, #2
   18632:	602b      	str	r3, [r5, #0]
   18634:	2706      	movs	r7, #6
   18636:	6823      	ldr	r3, [r4, #0]
   18638:	401f      	ands	r7, r3
   1863a:	d027      	beq.n	1868c <_printf_common+0x88>
   1863c:	0023      	movs	r3, r4
   1863e:	3343      	adds	r3, #67	; 0x43
   18640:	781b      	ldrb	r3, [r3, #0]
   18642:	1e5a      	subs	r2, r3, #1
   18644:	4193      	sbcs	r3, r2
   18646:	6822      	ldr	r2, [r4, #0]
   18648:	0692      	lsls	r2, r2, #26
   1864a:	d430      	bmi.n	186ae <_printf_common+0xaa>
   1864c:	0022      	movs	r2, r4
   1864e:	9901      	ldr	r1, [sp, #4]
   18650:	3243      	adds	r2, #67	; 0x43
   18652:	9800      	ldr	r0, [sp, #0]
   18654:	9e08      	ldr	r6, [sp, #32]
   18656:	47b0      	blx	r6
   18658:	1c43      	adds	r3, r0, #1
   1865a:	d025      	beq.n	186a8 <_printf_common+0xa4>
   1865c:	2306      	movs	r3, #6
   1865e:	6820      	ldr	r0, [r4, #0]
   18660:	682a      	ldr	r2, [r5, #0]
   18662:	68e1      	ldr	r1, [r4, #12]
   18664:	4003      	ands	r3, r0
   18666:	2500      	movs	r5, #0
   18668:	2b04      	cmp	r3, #4
   1866a:	d103      	bne.n	18674 <_printf_common+0x70>
   1866c:	1a8d      	subs	r5, r1, r2
   1866e:	43eb      	mvns	r3, r5
   18670:	17db      	asrs	r3, r3, #31
   18672:	401d      	ands	r5, r3
   18674:	68a3      	ldr	r3, [r4, #8]
   18676:	6922      	ldr	r2, [r4, #16]
   18678:	4293      	cmp	r3, r2
   1867a:	dd01      	ble.n	18680 <_printf_common+0x7c>
   1867c:	1a9b      	subs	r3, r3, r2
   1867e:	18ed      	adds	r5, r5, r3
   18680:	2700      	movs	r7, #0
   18682:	42bd      	cmp	r5, r7
   18684:	d120      	bne.n	186c8 <_printf_common+0xc4>
   18686:	2000      	movs	r0, #0
   18688:	e010      	b.n	186ac <_printf_common+0xa8>
   1868a:	3701      	adds	r7, #1
   1868c:	68e3      	ldr	r3, [r4, #12]
   1868e:	682a      	ldr	r2, [r5, #0]
   18690:	1a9b      	subs	r3, r3, r2
   18692:	429f      	cmp	r7, r3
   18694:	dad2      	bge.n	1863c <_printf_common+0x38>
   18696:	0022      	movs	r2, r4
   18698:	2301      	movs	r3, #1
   1869a:	3219      	adds	r2, #25
   1869c:	9901      	ldr	r1, [sp, #4]
   1869e:	9800      	ldr	r0, [sp, #0]
   186a0:	9e08      	ldr	r6, [sp, #32]
   186a2:	47b0      	blx	r6
   186a4:	1c43      	adds	r3, r0, #1
   186a6:	d1f0      	bne.n	1868a <_printf_common+0x86>
   186a8:	2001      	movs	r0, #1
   186aa:	4240      	negs	r0, r0
   186ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   186ae:	2030      	movs	r0, #48	; 0x30
   186b0:	18e1      	adds	r1, r4, r3
   186b2:	3143      	adds	r1, #67	; 0x43
   186b4:	7008      	strb	r0, [r1, #0]
   186b6:	0021      	movs	r1, r4
   186b8:	1c5a      	adds	r2, r3, #1
   186ba:	3145      	adds	r1, #69	; 0x45
   186bc:	7809      	ldrb	r1, [r1, #0]
   186be:	18a2      	adds	r2, r4, r2
   186c0:	3243      	adds	r2, #67	; 0x43
   186c2:	3302      	adds	r3, #2
   186c4:	7011      	strb	r1, [r2, #0]
   186c6:	e7c1      	b.n	1864c <_printf_common+0x48>
   186c8:	0022      	movs	r2, r4
   186ca:	2301      	movs	r3, #1
   186cc:	321a      	adds	r2, #26
   186ce:	9901      	ldr	r1, [sp, #4]
   186d0:	9800      	ldr	r0, [sp, #0]
   186d2:	9e08      	ldr	r6, [sp, #32]
   186d4:	47b0      	blx	r6
   186d6:	1c43      	adds	r3, r0, #1
   186d8:	d0e6      	beq.n	186a8 <_printf_common+0xa4>
   186da:	3701      	adds	r7, #1
   186dc:	e7d1      	b.n	18682 <_printf_common+0x7e>
   186de:	Address 0x000186de is out of bounds.


000186e0 <_printf_i>:
   186e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   186e2:	b08b      	sub	sp, #44	; 0x2c
   186e4:	9206      	str	r2, [sp, #24]
   186e6:	000a      	movs	r2, r1
   186e8:	3243      	adds	r2, #67	; 0x43
   186ea:	9307      	str	r3, [sp, #28]
   186ec:	9005      	str	r0, [sp, #20]
   186ee:	9204      	str	r2, [sp, #16]
   186f0:	7e0a      	ldrb	r2, [r1, #24]
   186f2:	000c      	movs	r4, r1
   186f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   186f6:	2a6e      	cmp	r2, #110	; 0x6e
   186f8:	d100      	bne.n	186fc <_printf_i+0x1c>
   186fa:	e08f      	b.n	1881c <_printf_i+0x13c>
   186fc:	d817      	bhi.n	1872e <_printf_i+0x4e>
   186fe:	2a63      	cmp	r2, #99	; 0x63
   18700:	d02c      	beq.n	1875c <_printf_i+0x7c>
   18702:	d808      	bhi.n	18716 <_printf_i+0x36>
   18704:	2a00      	cmp	r2, #0
   18706:	d100      	bne.n	1870a <_printf_i+0x2a>
   18708:	e099      	b.n	1883e <_printf_i+0x15e>
   1870a:	2a58      	cmp	r2, #88	; 0x58
   1870c:	d054      	beq.n	187b8 <_printf_i+0xd8>
   1870e:	0026      	movs	r6, r4
   18710:	3642      	adds	r6, #66	; 0x42
   18712:	7032      	strb	r2, [r6, #0]
   18714:	e029      	b.n	1876a <_printf_i+0x8a>
   18716:	2a64      	cmp	r2, #100	; 0x64
   18718:	d001      	beq.n	1871e <_printf_i+0x3e>
   1871a:	2a69      	cmp	r2, #105	; 0x69
   1871c:	d1f7      	bne.n	1870e <_printf_i+0x2e>
   1871e:	6821      	ldr	r1, [r4, #0]
   18720:	681a      	ldr	r2, [r3, #0]
   18722:	0608      	lsls	r0, r1, #24
   18724:	d523      	bpl.n	1876e <_printf_i+0x8e>
   18726:	1d11      	adds	r1, r2, #4
   18728:	6019      	str	r1, [r3, #0]
   1872a:	6815      	ldr	r5, [r2, #0]
   1872c:	e025      	b.n	1877a <_printf_i+0x9a>
   1872e:	2a73      	cmp	r2, #115	; 0x73
   18730:	d100      	bne.n	18734 <_printf_i+0x54>
   18732:	e088      	b.n	18846 <_printf_i+0x166>
   18734:	d808      	bhi.n	18748 <_printf_i+0x68>
   18736:	2a6f      	cmp	r2, #111	; 0x6f
   18738:	d029      	beq.n	1878e <_printf_i+0xae>
   1873a:	2a70      	cmp	r2, #112	; 0x70
   1873c:	d1e7      	bne.n	1870e <_printf_i+0x2e>
   1873e:	2220      	movs	r2, #32
   18740:	6809      	ldr	r1, [r1, #0]
   18742:	430a      	orrs	r2, r1
   18744:	6022      	str	r2, [r4, #0]
   18746:	e003      	b.n	18750 <_printf_i+0x70>
   18748:	2a75      	cmp	r2, #117	; 0x75
   1874a:	d020      	beq.n	1878e <_printf_i+0xae>
   1874c:	2a78      	cmp	r2, #120	; 0x78
   1874e:	d1de      	bne.n	1870e <_printf_i+0x2e>
   18750:	0022      	movs	r2, r4
   18752:	2178      	movs	r1, #120	; 0x78
   18754:	3245      	adds	r2, #69	; 0x45
   18756:	7011      	strb	r1, [r2, #0]
   18758:	4a6c      	ldr	r2, [pc, #432]	; (1890c <_printf_i+0x22c>)
   1875a:	e030      	b.n	187be <_printf_i+0xde>
   1875c:	000e      	movs	r6, r1
   1875e:	681a      	ldr	r2, [r3, #0]
   18760:	3642      	adds	r6, #66	; 0x42
   18762:	1d11      	adds	r1, r2, #4
   18764:	6019      	str	r1, [r3, #0]
   18766:	6813      	ldr	r3, [r2, #0]
   18768:	7033      	strb	r3, [r6, #0]
   1876a:	2301      	movs	r3, #1
   1876c:	e079      	b.n	18862 <_printf_i+0x182>
   1876e:	0649      	lsls	r1, r1, #25
   18770:	d5d9      	bpl.n	18726 <_printf_i+0x46>
   18772:	1d11      	adds	r1, r2, #4
   18774:	6019      	str	r1, [r3, #0]
   18776:	2300      	movs	r3, #0
   18778:	5ed5      	ldrsh	r5, [r2, r3]
   1877a:	2d00      	cmp	r5, #0
   1877c:	da03      	bge.n	18786 <_printf_i+0xa6>
   1877e:	232d      	movs	r3, #45	; 0x2d
   18780:	9a04      	ldr	r2, [sp, #16]
   18782:	426d      	negs	r5, r5
   18784:	7013      	strb	r3, [r2, #0]
   18786:	4b62      	ldr	r3, [pc, #392]	; (18910 <_printf_i+0x230>)
   18788:	270a      	movs	r7, #10
   1878a:	9303      	str	r3, [sp, #12]
   1878c:	e02f      	b.n	187ee <_printf_i+0x10e>
   1878e:	6820      	ldr	r0, [r4, #0]
   18790:	6819      	ldr	r1, [r3, #0]
   18792:	0605      	lsls	r5, r0, #24
   18794:	d503      	bpl.n	1879e <_printf_i+0xbe>
   18796:	1d08      	adds	r0, r1, #4
   18798:	6018      	str	r0, [r3, #0]
   1879a:	680d      	ldr	r5, [r1, #0]
   1879c:	e005      	b.n	187aa <_printf_i+0xca>
   1879e:	0640      	lsls	r0, r0, #25
   187a0:	d5f9      	bpl.n	18796 <_printf_i+0xb6>
   187a2:	680d      	ldr	r5, [r1, #0]
   187a4:	1d08      	adds	r0, r1, #4
   187a6:	6018      	str	r0, [r3, #0]
   187a8:	b2ad      	uxth	r5, r5
   187aa:	4b59      	ldr	r3, [pc, #356]	; (18910 <_printf_i+0x230>)
   187ac:	2708      	movs	r7, #8
   187ae:	9303      	str	r3, [sp, #12]
   187b0:	2a6f      	cmp	r2, #111	; 0x6f
   187b2:	d018      	beq.n	187e6 <_printf_i+0x106>
   187b4:	270a      	movs	r7, #10
   187b6:	e016      	b.n	187e6 <_printf_i+0x106>
   187b8:	3145      	adds	r1, #69	; 0x45
   187ba:	700a      	strb	r2, [r1, #0]
   187bc:	4a54      	ldr	r2, [pc, #336]	; (18910 <_printf_i+0x230>)
   187be:	9203      	str	r2, [sp, #12]
   187c0:	681a      	ldr	r2, [r3, #0]
   187c2:	6821      	ldr	r1, [r4, #0]
   187c4:	1d10      	adds	r0, r2, #4
   187c6:	6018      	str	r0, [r3, #0]
   187c8:	6815      	ldr	r5, [r2, #0]
   187ca:	0608      	lsls	r0, r1, #24
   187cc:	d522      	bpl.n	18814 <_printf_i+0x134>
   187ce:	07cb      	lsls	r3, r1, #31
   187d0:	d502      	bpl.n	187d8 <_printf_i+0xf8>
   187d2:	2320      	movs	r3, #32
   187d4:	4319      	orrs	r1, r3
   187d6:	6021      	str	r1, [r4, #0]
   187d8:	2710      	movs	r7, #16
   187da:	2d00      	cmp	r5, #0
   187dc:	d103      	bne.n	187e6 <_printf_i+0x106>
   187de:	2320      	movs	r3, #32
   187e0:	6822      	ldr	r2, [r4, #0]
   187e2:	439a      	bics	r2, r3
   187e4:	6022      	str	r2, [r4, #0]
   187e6:	0023      	movs	r3, r4
   187e8:	2200      	movs	r2, #0
   187ea:	3343      	adds	r3, #67	; 0x43
   187ec:	701a      	strb	r2, [r3, #0]
   187ee:	6863      	ldr	r3, [r4, #4]
   187f0:	60a3      	str	r3, [r4, #8]
   187f2:	2b00      	cmp	r3, #0
   187f4:	db5c      	blt.n	188b0 <_printf_i+0x1d0>
   187f6:	2204      	movs	r2, #4
   187f8:	6821      	ldr	r1, [r4, #0]
   187fa:	4391      	bics	r1, r2
   187fc:	6021      	str	r1, [r4, #0]
   187fe:	2d00      	cmp	r5, #0
   18800:	d158      	bne.n	188b4 <_printf_i+0x1d4>
   18802:	9e04      	ldr	r6, [sp, #16]
   18804:	2b00      	cmp	r3, #0
   18806:	d064      	beq.n	188d2 <_printf_i+0x1f2>
   18808:	0026      	movs	r6, r4
   1880a:	9b03      	ldr	r3, [sp, #12]
   1880c:	3642      	adds	r6, #66	; 0x42
   1880e:	781b      	ldrb	r3, [r3, #0]
   18810:	7033      	strb	r3, [r6, #0]
   18812:	e05e      	b.n	188d2 <_printf_i+0x1f2>
   18814:	0648      	lsls	r0, r1, #25
   18816:	d5da      	bpl.n	187ce <_printf_i+0xee>
   18818:	b2ad      	uxth	r5, r5
   1881a:	e7d8      	b.n	187ce <_printf_i+0xee>
   1881c:	6809      	ldr	r1, [r1, #0]
   1881e:	681a      	ldr	r2, [r3, #0]
   18820:	0608      	lsls	r0, r1, #24
   18822:	d505      	bpl.n	18830 <_printf_i+0x150>
   18824:	1d11      	adds	r1, r2, #4
   18826:	6019      	str	r1, [r3, #0]
   18828:	6813      	ldr	r3, [r2, #0]
   1882a:	6962      	ldr	r2, [r4, #20]
   1882c:	601a      	str	r2, [r3, #0]
   1882e:	e006      	b.n	1883e <_printf_i+0x15e>
   18830:	0649      	lsls	r1, r1, #25
   18832:	d5f7      	bpl.n	18824 <_printf_i+0x144>
   18834:	1d11      	adds	r1, r2, #4
   18836:	6019      	str	r1, [r3, #0]
   18838:	6813      	ldr	r3, [r2, #0]
   1883a:	8aa2      	ldrh	r2, [r4, #20]
   1883c:	801a      	strh	r2, [r3, #0]
   1883e:	2300      	movs	r3, #0
   18840:	9e04      	ldr	r6, [sp, #16]
   18842:	6123      	str	r3, [r4, #16]
   18844:	e054      	b.n	188f0 <_printf_i+0x210>
   18846:	681a      	ldr	r2, [r3, #0]
   18848:	1d11      	adds	r1, r2, #4
   1884a:	6019      	str	r1, [r3, #0]
   1884c:	6816      	ldr	r6, [r2, #0]
   1884e:	2100      	movs	r1, #0
   18850:	6862      	ldr	r2, [r4, #4]
   18852:	0030      	movs	r0, r6
   18854:	f000 fd20 	bl	19298 <memchr>
   18858:	2800      	cmp	r0, #0
   1885a:	d001      	beq.n	18860 <_printf_i+0x180>
   1885c:	1b80      	subs	r0, r0, r6
   1885e:	6060      	str	r0, [r4, #4]
   18860:	6863      	ldr	r3, [r4, #4]
   18862:	6123      	str	r3, [r4, #16]
   18864:	2300      	movs	r3, #0
   18866:	9a04      	ldr	r2, [sp, #16]
   18868:	7013      	strb	r3, [r2, #0]
   1886a:	e041      	b.n	188f0 <_printf_i+0x210>
   1886c:	6923      	ldr	r3, [r4, #16]
   1886e:	0032      	movs	r2, r6
   18870:	9906      	ldr	r1, [sp, #24]
   18872:	9805      	ldr	r0, [sp, #20]
   18874:	9d07      	ldr	r5, [sp, #28]
   18876:	47a8      	blx	r5
   18878:	1c43      	adds	r3, r0, #1
   1887a:	d043      	beq.n	18904 <_printf_i+0x224>
   1887c:	6823      	ldr	r3, [r4, #0]
   1887e:	2500      	movs	r5, #0
   18880:	079b      	lsls	r3, r3, #30
   18882:	d40f      	bmi.n	188a4 <_printf_i+0x1c4>
   18884:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18886:	68e0      	ldr	r0, [r4, #12]
   18888:	4298      	cmp	r0, r3
   1888a:	da3d      	bge.n	18908 <_printf_i+0x228>
   1888c:	0018      	movs	r0, r3
   1888e:	e03b      	b.n	18908 <_printf_i+0x228>
   18890:	0022      	movs	r2, r4
   18892:	2301      	movs	r3, #1
   18894:	3219      	adds	r2, #25
   18896:	9906      	ldr	r1, [sp, #24]
   18898:	9805      	ldr	r0, [sp, #20]
   1889a:	9e07      	ldr	r6, [sp, #28]
   1889c:	47b0      	blx	r6
   1889e:	1c43      	adds	r3, r0, #1
   188a0:	d030      	beq.n	18904 <_printf_i+0x224>
   188a2:	3501      	adds	r5, #1
   188a4:	68e3      	ldr	r3, [r4, #12]
   188a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   188a8:	1a9b      	subs	r3, r3, r2
   188aa:	429d      	cmp	r5, r3
   188ac:	dbf0      	blt.n	18890 <_printf_i+0x1b0>
   188ae:	e7e9      	b.n	18884 <_printf_i+0x1a4>
   188b0:	2d00      	cmp	r5, #0
   188b2:	d0a9      	beq.n	18808 <_printf_i+0x128>
   188b4:	9e04      	ldr	r6, [sp, #16]
   188b6:	0028      	movs	r0, r5
   188b8:	0039      	movs	r1, r7
   188ba:	f7fc fca3 	bl	15204 <__aeabi_uidivmod>
   188be:	9b03      	ldr	r3, [sp, #12]
   188c0:	3e01      	subs	r6, #1
   188c2:	5c5b      	ldrb	r3, [r3, r1]
   188c4:	0028      	movs	r0, r5
   188c6:	7033      	strb	r3, [r6, #0]
   188c8:	0039      	movs	r1, r7
   188ca:	f7fc fc15 	bl	150f8 <__udivsi3>
   188ce:	1e05      	subs	r5, r0, #0
   188d0:	d1f1      	bne.n	188b6 <_printf_i+0x1d6>
   188d2:	2f08      	cmp	r7, #8
   188d4:	d109      	bne.n	188ea <_printf_i+0x20a>
   188d6:	6823      	ldr	r3, [r4, #0]
   188d8:	07db      	lsls	r3, r3, #31
   188da:	d506      	bpl.n	188ea <_printf_i+0x20a>
   188dc:	6863      	ldr	r3, [r4, #4]
   188de:	6922      	ldr	r2, [r4, #16]
   188e0:	4293      	cmp	r3, r2
   188e2:	dc02      	bgt.n	188ea <_printf_i+0x20a>
   188e4:	2330      	movs	r3, #48	; 0x30
   188e6:	3e01      	subs	r6, #1
   188e8:	7033      	strb	r3, [r6, #0]
   188ea:	9b04      	ldr	r3, [sp, #16]
   188ec:	1b9b      	subs	r3, r3, r6
   188ee:	6123      	str	r3, [r4, #16]
   188f0:	9b07      	ldr	r3, [sp, #28]
   188f2:	aa09      	add	r2, sp, #36	; 0x24
   188f4:	9300      	str	r3, [sp, #0]
   188f6:	0021      	movs	r1, r4
   188f8:	9b06      	ldr	r3, [sp, #24]
   188fa:	9805      	ldr	r0, [sp, #20]
   188fc:	f7ff fe82 	bl	18604 <_printf_common>
   18900:	1c43      	adds	r3, r0, #1
   18902:	d1b3      	bne.n	1886c <_printf_i+0x18c>
   18904:	2001      	movs	r0, #1
   18906:	4240      	negs	r0, r0
   18908:	b00b      	add	sp, #44	; 0x2c
   1890a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1890c:	0001b1be 	.word	0x0001b1be
   18910:	0001b1ad 	.word	0x0001b1ad

00018914 <iprintf>:
   18914:	b40f      	push	{r0, r1, r2, r3}
   18916:	4b0b      	ldr	r3, [pc, #44]	; (18944 <iprintf+0x30>)
   18918:	b513      	push	{r0, r1, r4, lr}
   1891a:	681c      	ldr	r4, [r3, #0]
   1891c:	2c00      	cmp	r4, #0
   1891e:	d005      	beq.n	1892c <iprintf+0x18>
   18920:	69a3      	ldr	r3, [r4, #24]
   18922:	2b00      	cmp	r3, #0
   18924:	d102      	bne.n	1892c <iprintf+0x18>
   18926:	0020      	movs	r0, r4
   18928:	f000 fbaa 	bl	19080 <__sinit>
   1892c:	ab05      	add	r3, sp, #20
   1892e:	9a04      	ldr	r2, [sp, #16]
   18930:	68a1      	ldr	r1, [r4, #8]
   18932:	0020      	movs	r0, r4
   18934:	9301      	str	r3, [sp, #4]
   18936:	f7ff fd49 	bl	183cc <_vfiprintf_r>
   1893a:	bc16      	pop	{r1, r2, r4}
   1893c:	bc08      	pop	{r3}
   1893e:	b004      	add	sp, #16
   18940:	4718      	bx	r3
   18942:	46c0      	nop			; (mov r8, r8)
   18944:	2000002c 	.word	0x2000002c

00018948 <putchar>:
   18948:	4b08      	ldr	r3, [pc, #32]	; (1896c <putchar+0x24>)
   1894a:	b570      	push	{r4, r5, r6, lr}
   1894c:	681c      	ldr	r4, [r3, #0]
   1894e:	0005      	movs	r5, r0
   18950:	2c00      	cmp	r4, #0
   18952:	d005      	beq.n	18960 <putchar+0x18>
   18954:	69a3      	ldr	r3, [r4, #24]
   18956:	2b00      	cmp	r3, #0
   18958:	d102      	bne.n	18960 <putchar+0x18>
   1895a:	0020      	movs	r0, r4
   1895c:	f000 fb90 	bl	19080 <__sinit>
   18960:	0029      	movs	r1, r5
   18962:	68a2      	ldr	r2, [r4, #8]
   18964:	0020      	movs	r0, r4
   18966:	f000 fee9 	bl	1973c <_putc_r>
   1896a:	bd70      	pop	{r4, r5, r6, pc}
   1896c:	2000002c 	.word	0x2000002c

00018970 <_puts_r>:
   18970:	b570      	push	{r4, r5, r6, lr}
   18972:	0005      	movs	r5, r0
   18974:	000e      	movs	r6, r1
   18976:	2800      	cmp	r0, #0
   18978:	d004      	beq.n	18984 <_puts_r+0x14>
   1897a:	6983      	ldr	r3, [r0, #24]
   1897c:	2b00      	cmp	r3, #0
   1897e:	d101      	bne.n	18984 <_puts_r+0x14>
   18980:	f000 fb7e 	bl	19080 <__sinit>
   18984:	69ab      	ldr	r3, [r5, #24]
   18986:	68ac      	ldr	r4, [r5, #8]
   18988:	2b00      	cmp	r3, #0
   1898a:	d102      	bne.n	18992 <_puts_r+0x22>
   1898c:	0028      	movs	r0, r5
   1898e:	f000 fb77 	bl	19080 <__sinit>
   18992:	4b24      	ldr	r3, [pc, #144]	; (18a24 <_puts_r+0xb4>)
   18994:	429c      	cmp	r4, r3
   18996:	d10f      	bne.n	189b8 <_puts_r+0x48>
   18998:	686c      	ldr	r4, [r5, #4]
   1899a:	89a3      	ldrh	r3, [r4, #12]
   1899c:	071b      	lsls	r3, r3, #28
   1899e:	d502      	bpl.n	189a6 <_puts_r+0x36>
   189a0:	6923      	ldr	r3, [r4, #16]
   189a2:	2b00      	cmp	r3, #0
   189a4:	d120      	bne.n	189e8 <_puts_r+0x78>
   189a6:	0021      	movs	r1, r4
   189a8:	0028      	movs	r0, r5
   189aa:	f000 f9f3 	bl	18d94 <__swsetup_r>
   189ae:	2800      	cmp	r0, #0
   189b0:	d01a      	beq.n	189e8 <_puts_r+0x78>
   189b2:	2001      	movs	r0, #1
   189b4:	4240      	negs	r0, r0
   189b6:	bd70      	pop	{r4, r5, r6, pc}
   189b8:	4b1b      	ldr	r3, [pc, #108]	; (18a28 <_puts_r+0xb8>)
   189ba:	429c      	cmp	r4, r3
   189bc:	d101      	bne.n	189c2 <_puts_r+0x52>
   189be:	68ac      	ldr	r4, [r5, #8]
   189c0:	e7eb      	b.n	1899a <_puts_r+0x2a>
   189c2:	4b1a      	ldr	r3, [pc, #104]	; (18a2c <_puts_r+0xbc>)
   189c4:	429c      	cmp	r4, r3
   189c6:	d1e8      	bne.n	1899a <_puts_r+0x2a>
   189c8:	68ec      	ldr	r4, [r5, #12]
   189ca:	e7e6      	b.n	1899a <_puts_r+0x2a>
   189cc:	3b01      	subs	r3, #1
   189ce:	3601      	adds	r6, #1
   189d0:	60a3      	str	r3, [r4, #8]
   189d2:	2b00      	cmp	r3, #0
   189d4:	da04      	bge.n	189e0 <_puts_r+0x70>
   189d6:	69a2      	ldr	r2, [r4, #24]
   189d8:	4293      	cmp	r3, r2
   189da:	db16      	blt.n	18a0a <_puts_r+0x9a>
   189dc:	290a      	cmp	r1, #10
   189de:	d014      	beq.n	18a0a <_puts_r+0x9a>
   189e0:	6823      	ldr	r3, [r4, #0]
   189e2:	1c5a      	adds	r2, r3, #1
   189e4:	6022      	str	r2, [r4, #0]
   189e6:	7019      	strb	r1, [r3, #0]
   189e8:	7831      	ldrb	r1, [r6, #0]
   189ea:	68a3      	ldr	r3, [r4, #8]
   189ec:	2900      	cmp	r1, #0
   189ee:	d1ed      	bne.n	189cc <_puts_r+0x5c>
   189f0:	3b01      	subs	r3, #1
   189f2:	60a3      	str	r3, [r4, #8]
   189f4:	2b00      	cmp	r3, #0
   189f6:	da0f      	bge.n	18a18 <_puts_r+0xa8>
   189f8:	0022      	movs	r2, r4
   189fa:	310a      	adds	r1, #10
   189fc:	0028      	movs	r0, r5
   189fe:	f000 f973 	bl	18ce8 <__swbuf_r>
   18a02:	1c43      	adds	r3, r0, #1
   18a04:	d0d5      	beq.n	189b2 <_puts_r+0x42>
   18a06:	200a      	movs	r0, #10
   18a08:	e7d5      	b.n	189b6 <_puts_r+0x46>
   18a0a:	0022      	movs	r2, r4
   18a0c:	0028      	movs	r0, r5
   18a0e:	f000 f96b 	bl	18ce8 <__swbuf_r>
   18a12:	1c43      	adds	r3, r0, #1
   18a14:	d1e8      	bne.n	189e8 <_puts_r+0x78>
   18a16:	e7cc      	b.n	189b2 <_puts_r+0x42>
   18a18:	200a      	movs	r0, #10
   18a1a:	6823      	ldr	r3, [r4, #0]
   18a1c:	1c5a      	adds	r2, r3, #1
   18a1e:	6022      	str	r2, [r4, #0]
   18a20:	7018      	strb	r0, [r3, #0]
   18a22:	e7c8      	b.n	189b6 <_puts_r+0x46>
   18a24:	0001b1f0 	.word	0x0001b1f0
   18a28:	0001b210 	.word	0x0001b210
   18a2c:	0001b1d0 	.word	0x0001b1d0

00018a30 <puts>:
   18a30:	b510      	push	{r4, lr}
   18a32:	4b03      	ldr	r3, [pc, #12]	; (18a40 <puts+0x10>)
   18a34:	0001      	movs	r1, r0
   18a36:	6818      	ldr	r0, [r3, #0]
   18a38:	f7ff ff9a 	bl	18970 <_puts_r>
   18a3c:	bd10      	pop	{r4, pc}
   18a3e:	46c0      	nop			; (mov r8, r8)
   18a40:	2000002c 	.word	0x2000002c

00018a44 <srand>:
   18a44:	4b10      	ldr	r3, [pc, #64]	; (18a88 <srand+0x44>)
   18a46:	b570      	push	{r4, r5, r6, lr}
   18a48:	681c      	ldr	r4, [r3, #0]
   18a4a:	0005      	movs	r5, r0
   18a4c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   18a4e:	2b00      	cmp	r3, #0
   18a50:	d115      	bne.n	18a7e <srand+0x3a>
   18a52:	2018      	movs	r0, #24
   18a54:	f000 fc16 	bl	19284 <malloc>
   18a58:	4b0c      	ldr	r3, [pc, #48]	; (18a8c <srand+0x48>)
   18a5a:	63a0      	str	r0, [r4, #56]	; 0x38
   18a5c:	8003      	strh	r3, [r0, #0]
   18a5e:	4b0c      	ldr	r3, [pc, #48]	; (18a90 <srand+0x4c>)
   18a60:	2201      	movs	r2, #1
   18a62:	8043      	strh	r3, [r0, #2]
   18a64:	4b0b      	ldr	r3, [pc, #44]	; (18a94 <srand+0x50>)
   18a66:	8083      	strh	r3, [r0, #4]
   18a68:	4b0b      	ldr	r3, [pc, #44]	; (18a98 <srand+0x54>)
   18a6a:	80c3      	strh	r3, [r0, #6]
   18a6c:	4b0b      	ldr	r3, [pc, #44]	; (18a9c <srand+0x58>)
   18a6e:	8103      	strh	r3, [r0, #8]
   18a70:	2305      	movs	r3, #5
   18a72:	8143      	strh	r3, [r0, #10]
   18a74:	3306      	adds	r3, #6
   18a76:	8183      	strh	r3, [r0, #12]
   18a78:	2300      	movs	r3, #0
   18a7a:	6102      	str	r2, [r0, #16]
   18a7c:	6143      	str	r3, [r0, #20]
   18a7e:	2200      	movs	r2, #0
   18a80:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   18a82:	611d      	str	r5, [r3, #16]
   18a84:	615a      	str	r2, [r3, #20]
   18a86:	bd70      	pop	{r4, r5, r6, pc}
   18a88:	2000002c 	.word	0x2000002c
   18a8c:	0000330e 	.word	0x0000330e
   18a90:	ffffabcd 	.word	0xffffabcd
   18a94:	00001234 	.word	0x00001234
   18a98:	ffffe66d 	.word	0xffffe66d
   18a9c:	ffffdeec 	.word	0xffffdeec

00018aa0 <rand>:
   18aa0:	4b15      	ldr	r3, [pc, #84]	; (18af8 <rand+0x58>)
   18aa2:	b510      	push	{r4, lr}
   18aa4:	681c      	ldr	r4, [r3, #0]
   18aa6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   18aa8:	2b00      	cmp	r3, #0
   18aaa:	d115      	bne.n	18ad8 <rand+0x38>
   18aac:	2018      	movs	r0, #24
   18aae:	f000 fbe9 	bl	19284 <malloc>
   18ab2:	4b12      	ldr	r3, [pc, #72]	; (18afc <rand+0x5c>)
   18ab4:	63a0      	str	r0, [r4, #56]	; 0x38
   18ab6:	8003      	strh	r3, [r0, #0]
   18ab8:	4b11      	ldr	r3, [pc, #68]	; (18b00 <rand+0x60>)
   18aba:	2201      	movs	r2, #1
   18abc:	8043      	strh	r3, [r0, #2]
   18abe:	4b11      	ldr	r3, [pc, #68]	; (18b04 <rand+0x64>)
   18ac0:	8083      	strh	r3, [r0, #4]
   18ac2:	4b11      	ldr	r3, [pc, #68]	; (18b08 <rand+0x68>)
   18ac4:	80c3      	strh	r3, [r0, #6]
   18ac6:	4b11      	ldr	r3, [pc, #68]	; (18b0c <rand+0x6c>)
   18ac8:	8103      	strh	r3, [r0, #8]
   18aca:	2305      	movs	r3, #5
   18acc:	8143      	strh	r3, [r0, #10]
   18ace:	3306      	adds	r3, #6
   18ad0:	8183      	strh	r3, [r0, #12]
   18ad2:	2300      	movs	r3, #0
   18ad4:	6102      	str	r2, [r0, #16]
   18ad6:	6143      	str	r3, [r0, #20]
   18ad8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   18ada:	4a0d      	ldr	r2, [pc, #52]	; (18b10 <rand+0x70>)
   18adc:	6920      	ldr	r0, [r4, #16]
   18ade:	6961      	ldr	r1, [r4, #20]
   18ae0:	4b0c      	ldr	r3, [pc, #48]	; (18b14 <rand+0x74>)
   18ae2:	f7fc fd17 	bl	15514 <__aeabi_lmul>
   18ae6:	2201      	movs	r2, #1
   18ae8:	2300      	movs	r3, #0
   18aea:	1880      	adds	r0, r0, r2
   18aec:	4159      	adcs	r1, r3
   18aee:	6120      	str	r0, [r4, #16]
   18af0:	6161      	str	r1, [r4, #20]
   18af2:	0048      	lsls	r0, r1, #1
   18af4:	0840      	lsrs	r0, r0, #1
   18af6:	bd10      	pop	{r4, pc}
   18af8:	2000002c 	.word	0x2000002c
   18afc:	0000330e 	.word	0x0000330e
   18b00:	ffffabcd 	.word	0xffffabcd
   18b04:	00001234 	.word	0x00001234
   18b08:	ffffe66d 	.word	0xffffe66d
   18b0c:	ffffdeec 	.word	0xffffdeec
   18b10:	4c957f2d 	.word	0x4c957f2d
   18b14:	5851f42d 	.word	0x5851f42d

00018b18 <setbuf>:
   18b18:	424a      	negs	r2, r1
   18b1a:	414a      	adcs	r2, r1
   18b1c:	2380      	movs	r3, #128	; 0x80
   18b1e:	b510      	push	{r4, lr}
   18b20:	0052      	lsls	r2, r2, #1
   18b22:	00db      	lsls	r3, r3, #3
   18b24:	f000 f802 	bl	18b2c <setvbuf>
   18b28:	bd10      	pop	{r4, pc}
   18b2a:	Address 0x00018b2a is out of bounds.


00018b2c <setvbuf>:
   18b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   18b2e:	001d      	movs	r5, r3
   18b30:	4b4f      	ldr	r3, [pc, #316]	; (18c70 <setvbuf+0x144>)
   18b32:	b085      	sub	sp, #20
   18b34:	681e      	ldr	r6, [r3, #0]
   18b36:	0004      	movs	r4, r0
   18b38:	000f      	movs	r7, r1
   18b3a:	9200      	str	r2, [sp, #0]
   18b3c:	2e00      	cmp	r6, #0
   18b3e:	d005      	beq.n	18b4c <setvbuf+0x20>
   18b40:	69b3      	ldr	r3, [r6, #24]
   18b42:	2b00      	cmp	r3, #0
   18b44:	d102      	bne.n	18b4c <setvbuf+0x20>
   18b46:	0030      	movs	r0, r6
   18b48:	f000 fa9a 	bl	19080 <__sinit>
   18b4c:	4b49      	ldr	r3, [pc, #292]	; (18c74 <setvbuf+0x148>)
   18b4e:	429c      	cmp	r4, r3
   18b50:	d150      	bne.n	18bf4 <setvbuf+0xc8>
   18b52:	6874      	ldr	r4, [r6, #4]
   18b54:	9b00      	ldr	r3, [sp, #0]
   18b56:	2b02      	cmp	r3, #2
   18b58:	d005      	beq.n	18b66 <setvbuf+0x3a>
   18b5a:	2b01      	cmp	r3, #1
   18b5c:	d900      	bls.n	18b60 <setvbuf+0x34>
   18b5e:	e084      	b.n	18c6a <setvbuf+0x13e>
   18b60:	2d00      	cmp	r5, #0
   18b62:	da00      	bge.n	18b66 <setvbuf+0x3a>
   18b64:	e081      	b.n	18c6a <setvbuf+0x13e>
   18b66:	0021      	movs	r1, r4
   18b68:	0030      	movs	r0, r6
   18b6a:	f000 fa1b 	bl	18fa4 <_fflush_r>
   18b6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   18b70:	2900      	cmp	r1, #0
   18b72:	d008      	beq.n	18b86 <setvbuf+0x5a>
   18b74:	0023      	movs	r3, r4
   18b76:	3344      	adds	r3, #68	; 0x44
   18b78:	4299      	cmp	r1, r3
   18b7a:	d002      	beq.n	18b82 <setvbuf+0x56>
   18b7c:	0030      	movs	r0, r6
   18b7e:	f000 fba9 	bl	192d4 <_free_r>
   18b82:	2300      	movs	r3, #0
   18b84:	6363      	str	r3, [r4, #52]	; 0x34
   18b86:	2300      	movs	r3, #0
   18b88:	61a3      	str	r3, [r4, #24]
   18b8a:	6063      	str	r3, [r4, #4]
   18b8c:	89a3      	ldrh	r3, [r4, #12]
   18b8e:	061b      	lsls	r3, r3, #24
   18b90:	d503      	bpl.n	18b9a <setvbuf+0x6e>
   18b92:	6921      	ldr	r1, [r4, #16]
   18b94:	0030      	movs	r0, r6
   18b96:	f000 fb9d 	bl	192d4 <_free_r>
   18b9a:	89a3      	ldrh	r3, [r4, #12]
   18b9c:	4a36      	ldr	r2, [pc, #216]	; (18c78 <setvbuf+0x14c>)
   18b9e:	4013      	ands	r3, r2
   18ba0:	81a3      	strh	r3, [r4, #12]
   18ba2:	9b00      	ldr	r3, [sp, #0]
   18ba4:	2b02      	cmp	r3, #2
   18ba6:	d05a      	beq.n	18c5e <setvbuf+0x132>
   18ba8:	ab03      	add	r3, sp, #12
   18baa:	aa02      	add	r2, sp, #8
   18bac:	0021      	movs	r1, r4
   18bae:	0030      	movs	r0, r6
   18bb0:	f000 fafc 	bl	191ac <__swhatbuf_r>
   18bb4:	89a3      	ldrh	r3, [r4, #12]
   18bb6:	4318      	orrs	r0, r3
   18bb8:	81a0      	strh	r0, [r4, #12]
   18bba:	2d00      	cmp	r5, #0
   18bbc:	d124      	bne.n	18c08 <setvbuf+0xdc>
   18bbe:	9d02      	ldr	r5, [sp, #8]
   18bc0:	0028      	movs	r0, r5
   18bc2:	f000 fb5f 	bl	19284 <malloc>
   18bc6:	9501      	str	r5, [sp, #4]
   18bc8:	1e07      	subs	r7, r0, #0
   18bca:	d142      	bne.n	18c52 <setvbuf+0x126>
   18bcc:	9b02      	ldr	r3, [sp, #8]
   18bce:	9301      	str	r3, [sp, #4]
   18bd0:	42ab      	cmp	r3, r5
   18bd2:	d139      	bne.n	18c48 <setvbuf+0x11c>
   18bd4:	2001      	movs	r0, #1
   18bd6:	4240      	negs	r0, r0
   18bd8:	2302      	movs	r3, #2
   18bda:	89a2      	ldrh	r2, [r4, #12]
   18bdc:	4313      	orrs	r3, r2
   18bde:	81a3      	strh	r3, [r4, #12]
   18be0:	2300      	movs	r3, #0
   18be2:	60a3      	str	r3, [r4, #8]
   18be4:	0023      	movs	r3, r4
   18be6:	3347      	adds	r3, #71	; 0x47
   18be8:	6023      	str	r3, [r4, #0]
   18bea:	6123      	str	r3, [r4, #16]
   18bec:	2301      	movs	r3, #1
   18bee:	6163      	str	r3, [r4, #20]
   18bf0:	b005      	add	sp, #20
   18bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18bf4:	4b21      	ldr	r3, [pc, #132]	; (18c7c <setvbuf+0x150>)
   18bf6:	429c      	cmp	r4, r3
   18bf8:	d101      	bne.n	18bfe <setvbuf+0xd2>
   18bfa:	68b4      	ldr	r4, [r6, #8]
   18bfc:	e7aa      	b.n	18b54 <setvbuf+0x28>
   18bfe:	4b20      	ldr	r3, [pc, #128]	; (18c80 <setvbuf+0x154>)
   18c00:	429c      	cmp	r4, r3
   18c02:	d1a7      	bne.n	18b54 <setvbuf+0x28>
   18c04:	68f4      	ldr	r4, [r6, #12]
   18c06:	e7a5      	b.n	18b54 <setvbuf+0x28>
   18c08:	2f00      	cmp	r7, #0
   18c0a:	d0d9      	beq.n	18bc0 <setvbuf+0x94>
   18c0c:	69b3      	ldr	r3, [r6, #24]
   18c0e:	2b00      	cmp	r3, #0
   18c10:	d102      	bne.n	18c18 <setvbuf+0xec>
   18c12:	0030      	movs	r0, r6
   18c14:	f000 fa34 	bl	19080 <__sinit>
   18c18:	9b00      	ldr	r3, [sp, #0]
   18c1a:	2b01      	cmp	r3, #1
   18c1c:	d103      	bne.n	18c26 <setvbuf+0xfa>
   18c1e:	89a3      	ldrh	r3, [r4, #12]
   18c20:	9a00      	ldr	r2, [sp, #0]
   18c22:	431a      	orrs	r2, r3
   18c24:	81a2      	strh	r2, [r4, #12]
   18c26:	2008      	movs	r0, #8
   18c28:	89a3      	ldrh	r3, [r4, #12]
   18c2a:	6027      	str	r7, [r4, #0]
   18c2c:	6127      	str	r7, [r4, #16]
   18c2e:	6165      	str	r5, [r4, #20]
   18c30:	4018      	ands	r0, r3
   18c32:	d018      	beq.n	18c66 <setvbuf+0x13a>
   18c34:	2001      	movs	r0, #1
   18c36:	4018      	ands	r0, r3
   18c38:	2300      	movs	r3, #0
   18c3a:	4298      	cmp	r0, r3
   18c3c:	d011      	beq.n	18c62 <setvbuf+0x136>
   18c3e:	426d      	negs	r5, r5
   18c40:	60a3      	str	r3, [r4, #8]
   18c42:	61a5      	str	r5, [r4, #24]
   18c44:	0018      	movs	r0, r3
   18c46:	e7d3      	b.n	18bf0 <setvbuf+0xc4>
   18c48:	9801      	ldr	r0, [sp, #4]
   18c4a:	f000 fb1b 	bl	19284 <malloc>
   18c4e:	1e07      	subs	r7, r0, #0
   18c50:	d0c0      	beq.n	18bd4 <setvbuf+0xa8>
   18c52:	2380      	movs	r3, #128	; 0x80
   18c54:	89a2      	ldrh	r2, [r4, #12]
   18c56:	9d01      	ldr	r5, [sp, #4]
   18c58:	4313      	orrs	r3, r2
   18c5a:	81a3      	strh	r3, [r4, #12]
   18c5c:	e7d6      	b.n	18c0c <setvbuf+0xe0>
   18c5e:	2000      	movs	r0, #0
   18c60:	e7ba      	b.n	18bd8 <setvbuf+0xac>
   18c62:	60a5      	str	r5, [r4, #8]
   18c64:	e7c4      	b.n	18bf0 <setvbuf+0xc4>
   18c66:	60a0      	str	r0, [r4, #8]
   18c68:	e7c2      	b.n	18bf0 <setvbuf+0xc4>
   18c6a:	2001      	movs	r0, #1
   18c6c:	4240      	negs	r0, r0
   18c6e:	e7bf      	b.n	18bf0 <setvbuf+0xc4>
   18c70:	2000002c 	.word	0x2000002c
   18c74:	0001b1f0 	.word	0x0001b1f0
   18c78:	fffff35c 	.word	0xfffff35c
   18c7c:	0001b210 	.word	0x0001b210
   18c80:	0001b1d0 	.word	0x0001b1d0

00018c84 <sniprintf>:
   18c84:	b40c      	push	{r2, r3}
   18c86:	b530      	push	{r4, r5, lr}
   18c88:	4b16      	ldr	r3, [pc, #88]	; (18ce4 <sniprintf+0x60>)
   18c8a:	b09d      	sub	sp, #116	; 0x74
   18c8c:	1e0c      	subs	r4, r1, #0
   18c8e:	681d      	ldr	r5, [r3, #0]
   18c90:	da08      	bge.n	18ca4 <sniprintf+0x20>
   18c92:	238b      	movs	r3, #139	; 0x8b
   18c94:	2001      	movs	r0, #1
   18c96:	602b      	str	r3, [r5, #0]
   18c98:	4240      	negs	r0, r0
   18c9a:	b01d      	add	sp, #116	; 0x74
   18c9c:	bc30      	pop	{r4, r5}
   18c9e:	bc08      	pop	{r3}
   18ca0:	b002      	add	sp, #8
   18ca2:	4718      	bx	r3
   18ca4:	2382      	movs	r3, #130	; 0x82
   18ca6:	a902      	add	r1, sp, #8
   18ca8:	009b      	lsls	r3, r3, #2
   18caa:	818b      	strh	r3, [r1, #12]
   18cac:	2300      	movs	r3, #0
   18cae:	9002      	str	r0, [sp, #8]
   18cb0:	6108      	str	r0, [r1, #16]
   18cb2:	429c      	cmp	r4, r3
   18cb4:	d000      	beq.n	18cb8 <sniprintf+0x34>
   18cb6:	1e63      	subs	r3, r4, #1
   18cb8:	608b      	str	r3, [r1, #8]
   18cba:	614b      	str	r3, [r1, #20]
   18cbc:	2301      	movs	r3, #1
   18cbe:	425b      	negs	r3, r3
   18cc0:	81cb      	strh	r3, [r1, #14]
   18cc2:	9a20      	ldr	r2, [sp, #128]	; 0x80
   18cc4:	ab21      	add	r3, sp, #132	; 0x84
   18cc6:	0028      	movs	r0, r5
   18cc8:	9301      	str	r3, [sp, #4]
   18cca:	f000 fc33 	bl	19534 <_svfiprintf_r>
   18cce:	1c43      	adds	r3, r0, #1
   18cd0:	da01      	bge.n	18cd6 <sniprintf+0x52>
   18cd2:	238b      	movs	r3, #139	; 0x8b
   18cd4:	602b      	str	r3, [r5, #0]
   18cd6:	2c00      	cmp	r4, #0
   18cd8:	d0df      	beq.n	18c9a <sniprintf+0x16>
   18cda:	2300      	movs	r3, #0
   18cdc:	9a02      	ldr	r2, [sp, #8]
   18cde:	7013      	strb	r3, [r2, #0]
   18ce0:	e7db      	b.n	18c9a <sniprintf+0x16>
   18ce2:	46c0      	nop			; (mov r8, r8)
   18ce4:	2000002c 	.word	0x2000002c

00018ce8 <__swbuf_r>:
   18ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18cea:	0005      	movs	r5, r0
   18cec:	000e      	movs	r6, r1
   18cee:	0014      	movs	r4, r2
   18cf0:	2800      	cmp	r0, #0
   18cf2:	d004      	beq.n	18cfe <__swbuf_r+0x16>
   18cf4:	6983      	ldr	r3, [r0, #24]
   18cf6:	2b00      	cmp	r3, #0
   18cf8:	d101      	bne.n	18cfe <__swbuf_r+0x16>
   18cfa:	f000 f9c1 	bl	19080 <__sinit>
   18cfe:	4b22      	ldr	r3, [pc, #136]	; (18d88 <__swbuf_r+0xa0>)
   18d00:	429c      	cmp	r4, r3
   18d02:	d12d      	bne.n	18d60 <__swbuf_r+0x78>
   18d04:	686c      	ldr	r4, [r5, #4]
   18d06:	69a3      	ldr	r3, [r4, #24]
   18d08:	60a3      	str	r3, [r4, #8]
   18d0a:	89a3      	ldrh	r3, [r4, #12]
   18d0c:	071b      	lsls	r3, r3, #28
   18d0e:	d531      	bpl.n	18d74 <__swbuf_r+0x8c>
   18d10:	6923      	ldr	r3, [r4, #16]
   18d12:	2b00      	cmp	r3, #0
   18d14:	d02e      	beq.n	18d74 <__swbuf_r+0x8c>
   18d16:	6823      	ldr	r3, [r4, #0]
   18d18:	6922      	ldr	r2, [r4, #16]
   18d1a:	b2f7      	uxtb	r7, r6
   18d1c:	1a98      	subs	r0, r3, r2
   18d1e:	6963      	ldr	r3, [r4, #20]
   18d20:	b2f6      	uxtb	r6, r6
   18d22:	4298      	cmp	r0, r3
   18d24:	db05      	blt.n	18d32 <__swbuf_r+0x4a>
   18d26:	0021      	movs	r1, r4
   18d28:	0028      	movs	r0, r5
   18d2a:	f000 f93b 	bl	18fa4 <_fflush_r>
   18d2e:	2800      	cmp	r0, #0
   18d30:	d126      	bne.n	18d80 <__swbuf_r+0x98>
   18d32:	68a3      	ldr	r3, [r4, #8]
   18d34:	3001      	adds	r0, #1
   18d36:	3b01      	subs	r3, #1
   18d38:	60a3      	str	r3, [r4, #8]
   18d3a:	6823      	ldr	r3, [r4, #0]
   18d3c:	1c5a      	adds	r2, r3, #1
   18d3e:	6022      	str	r2, [r4, #0]
   18d40:	701f      	strb	r7, [r3, #0]
   18d42:	6963      	ldr	r3, [r4, #20]
   18d44:	4298      	cmp	r0, r3
   18d46:	d004      	beq.n	18d52 <__swbuf_r+0x6a>
   18d48:	89a3      	ldrh	r3, [r4, #12]
   18d4a:	07db      	lsls	r3, r3, #31
   18d4c:	d51a      	bpl.n	18d84 <__swbuf_r+0x9c>
   18d4e:	2e0a      	cmp	r6, #10
   18d50:	d118      	bne.n	18d84 <__swbuf_r+0x9c>
   18d52:	0021      	movs	r1, r4
   18d54:	0028      	movs	r0, r5
   18d56:	f000 f925 	bl	18fa4 <_fflush_r>
   18d5a:	2800      	cmp	r0, #0
   18d5c:	d012      	beq.n	18d84 <__swbuf_r+0x9c>
   18d5e:	e00f      	b.n	18d80 <__swbuf_r+0x98>
   18d60:	4b0a      	ldr	r3, [pc, #40]	; (18d8c <__swbuf_r+0xa4>)
   18d62:	429c      	cmp	r4, r3
   18d64:	d101      	bne.n	18d6a <__swbuf_r+0x82>
   18d66:	68ac      	ldr	r4, [r5, #8]
   18d68:	e7cd      	b.n	18d06 <__swbuf_r+0x1e>
   18d6a:	4b09      	ldr	r3, [pc, #36]	; (18d90 <__swbuf_r+0xa8>)
   18d6c:	429c      	cmp	r4, r3
   18d6e:	d1ca      	bne.n	18d06 <__swbuf_r+0x1e>
   18d70:	68ec      	ldr	r4, [r5, #12]
   18d72:	e7c8      	b.n	18d06 <__swbuf_r+0x1e>
   18d74:	0021      	movs	r1, r4
   18d76:	0028      	movs	r0, r5
   18d78:	f000 f80c 	bl	18d94 <__swsetup_r>
   18d7c:	2800      	cmp	r0, #0
   18d7e:	d0ca      	beq.n	18d16 <__swbuf_r+0x2e>
   18d80:	2601      	movs	r6, #1
   18d82:	4276      	negs	r6, r6
   18d84:	0030      	movs	r0, r6
   18d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18d88:	0001b1f0 	.word	0x0001b1f0
   18d8c:	0001b210 	.word	0x0001b210
   18d90:	0001b1d0 	.word	0x0001b1d0

00018d94 <__swsetup_r>:
   18d94:	4b36      	ldr	r3, [pc, #216]	; (18e70 <__swsetup_r+0xdc>)
   18d96:	b570      	push	{r4, r5, r6, lr}
   18d98:	681d      	ldr	r5, [r3, #0]
   18d9a:	0006      	movs	r6, r0
   18d9c:	000c      	movs	r4, r1
   18d9e:	2d00      	cmp	r5, #0
   18da0:	d005      	beq.n	18dae <__swsetup_r+0x1a>
   18da2:	69ab      	ldr	r3, [r5, #24]
   18da4:	2b00      	cmp	r3, #0
   18da6:	d102      	bne.n	18dae <__swsetup_r+0x1a>
   18da8:	0028      	movs	r0, r5
   18daa:	f000 f969 	bl	19080 <__sinit>
   18dae:	4b31      	ldr	r3, [pc, #196]	; (18e74 <__swsetup_r+0xe0>)
   18db0:	429c      	cmp	r4, r3
   18db2:	d10f      	bne.n	18dd4 <__swsetup_r+0x40>
   18db4:	686c      	ldr	r4, [r5, #4]
   18db6:	230c      	movs	r3, #12
   18db8:	5ee2      	ldrsh	r2, [r4, r3]
   18dba:	b293      	uxth	r3, r2
   18dbc:	0719      	lsls	r1, r3, #28
   18dbe:	d42d      	bmi.n	18e1c <__swsetup_r+0x88>
   18dc0:	06d9      	lsls	r1, r3, #27
   18dc2:	d411      	bmi.n	18de8 <__swsetup_r+0x54>
   18dc4:	2309      	movs	r3, #9
   18dc6:	2001      	movs	r0, #1
   18dc8:	6033      	str	r3, [r6, #0]
   18dca:	3337      	adds	r3, #55	; 0x37
   18dcc:	4313      	orrs	r3, r2
   18dce:	81a3      	strh	r3, [r4, #12]
   18dd0:	4240      	negs	r0, r0
   18dd2:	bd70      	pop	{r4, r5, r6, pc}
   18dd4:	4b28      	ldr	r3, [pc, #160]	; (18e78 <__swsetup_r+0xe4>)
   18dd6:	429c      	cmp	r4, r3
   18dd8:	d101      	bne.n	18dde <__swsetup_r+0x4a>
   18dda:	68ac      	ldr	r4, [r5, #8]
   18ddc:	e7eb      	b.n	18db6 <__swsetup_r+0x22>
   18dde:	4b27      	ldr	r3, [pc, #156]	; (18e7c <__swsetup_r+0xe8>)
   18de0:	429c      	cmp	r4, r3
   18de2:	d1e8      	bne.n	18db6 <__swsetup_r+0x22>
   18de4:	68ec      	ldr	r4, [r5, #12]
   18de6:	e7e6      	b.n	18db6 <__swsetup_r+0x22>
   18de8:	075b      	lsls	r3, r3, #29
   18dea:	d513      	bpl.n	18e14 <__swsetup_r+0x80>
   18dec:	6b61      	ldr	r1, [r4, #52]	; 0x34
   18dee:	2900      	cmp	r1, #0
   18df0:	d008      	beq.n	18e04 <__swsetup_r+0x70>
   18df2:	0023      	movs	r3, r4
   18df4:	3344      	adds	r3, #68	; 0x44
   18df6:	4299      	cmp	r1, r3
   18df8:	d002      	beq.n	18e00 <__swsetup_r+0x6c>
   18dfa:	0030      	movs	r0, r6
   18dfc:	f000 fa6a 	bl	192d4 <_free_r>
   18e00:	2300      	movs	r3, #0
   18e02:	6363      	str	r3, [r4, #52]	; 0x34
   18e04:	2224      	movs	r2, #36	; 0x24
   18e06:	89a3      	ldrh	r3, [r4, #12]
   18e08:	4393      	bics	r3, r2
   18e0a:	81a3      	strh	r3, [r4, #12]
   18e0c:	2300      	movs	r3, #0
   18e0e:	6063      	str	r3, [r4, #4]
   18e10:	6923      	ldr	r3, [r4, #16]
   18e12:	6023      	str	r3, [r4, #0]
   18e14:	2308      	movs	r3, #8
   18e16:	89a2      	ldrh	r2, [r4, #12]
   18e18:	4313      	orrs	r3, r2
   18e1a:	81a3      	strh	r3, [r4, #12]
   18e1c:	6923      	ldr	r3, [r4, #16]
   18e1e:	2b00      	cmp	r3, #0
   18e20:	d10b      	bne.n	18e3a <__swsetup_r+0xa6>
   18e22:	21a0      	movs	r1, #160	; 0xa0
   18e24:	2280      	movs	r2, #128	; 0x80
   18e26:	89a3      	ldrh	r3, [r4, #12]
   18e28:	0089      	lsls	r1, r1, #2
   18e2a:	0092      	lsls	r2, r2, #2
   18e2c:	400b      	ands	r3, r1
   18e2e:	4293      	cmp	r3, r2
   18e30:	d003      	beq.n	18e3a <__swsetup_r+0xa6>
   18e32:	0021      	movs	r1, r4
   18e34:	0030      	movs	r0, r6
   18e36:	f000 f9e1 	bl	191fc <__smakebuf_r>
   18e3a:	2301      	movs	r3, #1
   18e3c:	89a2      	ldrh	r2, [r4, #12]
   18e3e:	4013      	ands	r3, r2
   18e40:	d011      	beq.n	18e66 <__swsetup_r+0xd2>
   18e42:	2300      	movs	r3, #0
   18e44:	60a3      	str	r3, [r4, #8]
   18e46:	6963      	ldr	r3, [r4, #20]
   18e48:	425b      	negs	r3, r3
   18e4a:	61a3      	str	r3, [r4, #24]
   18e4c:	2000      	movs	r0, #0
   18e4e:	6923      	ldr	r3, [r4, #16]
   18e50:	4283      	cmp	r3, r0
   18e52:	d1be      	bne.n	18dd2 <__swsetup_r+0x3e>
   18e54:	230c      	movs	r3, #12
   18e56:	5ee2      	ldrsh	r2, [r4, r3]
   18e58:	0613      	lsls	r3, r2, #24
   18e5a:	d5ba      	bpl.n	18dd2 <__swsetup_r+0x3e>
   18e5c:	2340      	movs	r3, #64	; 0x40
   18e5e:	4313      	orrs	r3, r2
   18e60:	81a3      	strh	r3, [r4, #12]
   18e62:	3801      	subs	r0, #1
   18e64:	e7b5      	b.n	18dd2 <__swsetup_r+0x3e>
   18e66:	0792      	lsls	r2, r2, #30
   18e68:	d400      	bmi.n	18e6c <__swsetup_r+0xd8>
   18e6a:	6963      	ldr	r3, [r4, #20]
   18e6c:	60a3      	str	r3, [r4, #8]
   18e6e:	e7ed      	b.n	18e4c <__swsetup_r+0xb8>
   18e70:	2000002c 	.word	0x2000002c
   18e74:	0001b1f0 	.word	0x0001b1f0
   18e78:	0001b210 	.word	0x0001b210
   18e7c:	0001b1d0 	.word	0x0001b1d0

00018e80 <abort>:
   18e80:	b510      	push	{r4, lr}
   18e82:	2006      	movs	r0, #6
   18e84:	f000 fccc 	bl	19820 <raise>
   18e88:	2001      	movs	r0, #1
   18e8a:	f7ee fcd7 	bl	783c <_exit>
   18e8e:	Address 0x00018e8e is out of bounds.


00018e90 <__sflush_r>:
   18e90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18e92:	898a      	ldrh	r2, [r1, #12]
   18e94:	0005      	movs	r5, r0
   18e96:	000c      	movs	r4, r1
   18e98:	0713      	lsls	r3, r2, #28
   18e9a:	d460      	bmi.n	18f5e <__sflush_r+0xce>
   18e9c:	684b      	ldr	r3, [r1, #4]
   18e9e:	2b00      	cmp	r3, #0
   18ea0:	dc04      	bgt.n	18eac <__sflush_r+0x1c>
   18ea2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   18ea4:	2b00      	cmp	r3, #0
   18ea6:	dc01      	bgt.n	18eac <__sflush_r+0x1c>
   18ea8:	2000      	movs	r0, #0
   18eaa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   18eac:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   18eae:	2f00      	cmp	r7, #0
   18eb0:	d0fa      	beq.n	18ea8 <__sflush_r+0x18>
   18eb2:	2300      	movs	r3, #0
   18eb4:	682e      	ldr	r6, [r5, #0]
   18eb6:	602b      	str	r3, [r5, #0]
   18eb8:	2380      	movs	r3, #128	; 0x80
   18eba:	015b      	lsls	r3, r3, #5
   18ebc:	401a      	ands	r2, r3
   18ebe:	d034      	beq.n	18f2a <__sflush_r+0x9a>
   18ec0:	6d60      	ldr	r0, [r4, #84]	; 0x54
   18ec2:	89a3      	ldrh	r3, [r4, #12]
   18ec4:	075b      	lsls	r3, r3, #29
   18ec6:	d506      	bpl.n	18ed6 <__sflush_r+0x46>
   18ec8:	6863      	ldr	r3, [r4, #4]
   18eca:	1ac0      	subs	r0, r0, r3
   18ecc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   18ece:	2b00      	cmp	r3, #0
   18ed0:	d001      	beq.n	18ed6 <__sflush_r+0x46>
   18ed2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   18ed4:	1ac0      	subs	r0, r0, r3
   18ed6:	0002      	movs	r2, r0
   18ed8:	6a21      	ldr	r1, [r4, #32]
   18eda:	2300      	movs	r3, #0
   18edc:	0028      	movs	r0, r5
   18ede:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   18ee0:	47b8      	blx	r7
   18ee2:	89a1      	ldrh	r1, [r4, #12]
   18ee4:	1c43      	adds	r3, r0, #1
   18ee6:	d106      	bne.n	18ef6 <__sflush_r+0x66>
   18ee8:	682b      	ldr	r3, [r5, #0]
   18eea:	2b1d      	cmp	r3, #29
   18eec:	d831      	bhi.n	18f52 <__sflush_r+0xc2>
   18eee:	4a2c      	ldr	r2, [pc, #176]	; (18fa0 <__sflush_r+0x110>)
   18ef0:	40da      	lsrs	r2, r3
   18ef2:	07d3      	lsls	r3, r2, #31
   18ef4:	d52d      	bpl.n	18f52 <__sflush_r+0xc2>
   18ef6:	2300      	movs	r3, #0
   18ef8:	6063      	str	r3, [r4, #4]
   18efa:	6923      	ldr	r3, [r4, #16]
   18efc:	6023      	str	r3, [r4, #0]
   18efe:	04cb      	lsls	r3, r1, #19
   18f00:	d505      	bpl.n	18f0e <__sflush_r+0x7e>
   18f02:	1c43      	adds	r3, r0, #1
   18f04:	d102      	bne.n	18f0c <__sflush_r+0x7c>
   18f06:	682b      	ldr	r3, [r5, #0]
   18f08:	2b00      	cmp	r3, #0
   18f0a:	d100      	bne.n	18f0e <__sflush_r+0x7e>
   18f0c:	6560      	str	r0, [r4, #84]	; 0x54
   18f0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   18f10:	602e      	str	r6, [r5, #0]
   18f12:	2900      	cmp	r1, #0
   18f14:	d0c8      	beq.n	18ea8 <__sflush_r+0x18>
   18f16:	0023      	movs	r3, r4
   18f18:	3344      	adds	r3, #68	; 0x44
   18f1a:	4299      	cmp	r1, r3
   18f1c:	d002      	beq.n	18f24 <__sflush_r+0x94>
   18f1e:	0028      	movs	r0, r5
   18f20:	f000 f9d8 	bl	192d4 <_free_r>
   18f24:	2000      	movs	r0, #0
   18f26:	6360      	str	r0, [r4, #52]	; 0x34
   18f28:	e7bf      	b.n	18eaa <__sflush_r+0x1a>
   18f2a:	2301      	movs	r3, #1
   18f2c:	6a21      	ldr	r1, [r4, #32]
   18f2e:	0028      	movs	r0, r5
   18f30:	47b8      	blx	r7
   18f32:	1c43      	adds	r3, r0, #1
   18f34:	d1c5      	bne.n	18ec2 <__sflush_r+0x32>
   18f36:	682b      	ldr	r3, [r5, #0]
   18f38:	2b00      	cmp	r3, #0
   18f3a:	d0c2      	beq.n	18ec2 <__sflush_r+0x32>
   18f3c:	2b1d      	cmp	r3, #29
   18f3e:	d001      	beq.n	18f44 <__sflush_r+0xb4>
   18f40:	2b16      	cmp	r3, #22
   18f42:	d101      	bne.n	18f48 <__sflush_r+0xb8>
   18f44:	602e      	str	r6, [r5, #0]
   18f46:	e7af      	b.n	18ea8 <__sflush_r+0x18>
   18f48:	2340      	movs	r3, #64	; 0x40
   18f4a:	89a2      	ldrh	r2, [r4, #12]
   18f4c:	4313      	orrs	r3, r2
   18f4e:	81a3      	strh	r3, [r4, #12]
   18f50:	e7ab      	b.n	18eaa <__sflush_r+0x1a>
   18f52:	2340      	movs	r3, #64	; 0x40
   18f54:	430b      	orrs	r3, r1
   18f56:	2001      	movs	r0, #1
   18f58:	81a3      	strh	r3, [r4, #12]
   18f5a:	4240      	negs	r0, r0
   18f5c:	e7a5      	b.n	18eaa <__sflush_r+0x1a>
   18f5e:	690f      	ldr	r7, [r1, #16]
   18f60:	2f00      	cmp	r7, #0
   18f62:	d0a1      	beq.n	18ea8 <__sflush_r+0x18>
   18f64:	680b      	ldr	r3, [r1, #0]
   18f66:	600f      	str	r7, [r1, #0]
   18f68:	1bdb      	subs	r3, r3, r7
   18f6a:	9301      	str	r3, [sp, #4]
   18f6c:	2300      	movs	r3, #0
   18f6e:	0792      	lsls	r2, r2, #30
   18f70:	d100      	bne.n	18f74 <__sflush_r+0xe4>
   18f72:	694b      	ldr	r3, [r1, #20]
   18f74:	60a3      	str	r3, [r4, #8]
   18f76:	9b01      	ldr	r3, [sp, #4]
   18f78:	2b00      	cmp	r3, #0
   18f7a:	dc00      	bgt.n	18f7e <__sflush_r+0xee>
   18f7c:	e794      	b.n	18ea8 <__sflush_r+0x18>
   18f7e:	9b01      	ldr	r3, [sp, #4]
   18f80:	003a      	movs	r2, r7
   18f82:	6a21      	ldr	r1, [r4, #32]
   18f84:	0028      	movs	r0, r5
   18f86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   18f88:	47b0      	blx	r6
   18f8a:	2800      	cmp	r0, #0
   18f8c:	dc03      	bgt.n	18f96 <__sflush_r+0x106>
   18f8e:	2340      	movs	r3, #64	; 0x40
   18f90:	89a2      	ldrh	r2, [r4, #12]
   18f92:	4313      	orrs	r3, r2
   18f94:	e7df      	b.n	18f56 <__sflush_r+0xc6>
   18f96:	9b01      	ldr	r3, [sp, #4]
   18f98:	183f      	adds	r7, r7, r0
   18f9a:	1a1b      	subs	r3, r3, r0
   18f9c:	9301      	str	r3, [sp, #4]
   18f9e:	e7ea      	b.n	18f76 <__sflush_r+0xe6>
   18fa0:	20400001 	.word	0x20400001

00018fa4 <_fflush_r>:
   18fa4:	690b      	ldr	r3, [r1, #16]
   18fa6:	b570      	push	{r4, r5, r6, lr}
   18fa8:	0005      	movs	r5, r0
   18faa:	000c      	movs	r4, r1
   18fac:	2b00      	cmp	r3, #0
   18fae:	d101      	bne.n	18fb4 <_fflush_r+0x10>
   18fb0:	2000      	movs	r0, #0
   18fb2:	bd70      	pop	{r4, r5, r6, pc}
   18fb4:	2800      	cmp	r0, #0
   18fb6:	d004      	beq.n	18fc2 <_fflush_r+0x1e>
   18fb8:	6983      	ldr	r3, [r0, #24]
   18fba:	2b00      	cmp	r3, #0
   18fbc:	d101      	bne.n	18fc2 <_fflush_r+0x1e>
   18fbe:	f000 f85f 	bl	19080 <__sinit>
   18fc2:	4b0b      	ldr	r3, [pc, #44]	; (18ff0 <_fflush_r+0x4c>)
   18fc4:	429c      	cmp	r4, r3
   18fc6:	d109      	bne.n	18fdc <_fflush_r+0x38>
   18fc8:	686c      	ldr	r4, [r5, #4]
   18fca:	220c      	movs	r2, #12
   18fcc:	5ea3      	ldrsh	r3, [r4, r2]
   18fce:	2b00      	cmp	r3, #0
   18fd0:	d0ee      	beq.n	18fb0 <_fflush_r+0xc>
   18fd2:	0021      	movs	r1, r4
   18fd4:	0028      	movs	r0, r5
   18fd6:	f7ff ff5b 	bl	18e90 <__sflush_r>
   18fda:	e7ea      	b.n	18fb2 <_fflush_r+0xe>
   18fdc:	4b05      	ldr	r3, [pc, #20]	; (18ff4 <_fflush_r+0x50>)
   18fde:	429c      	cmp	r4, r3
   18fe0:	d101      	bne.n	18fe6 <_fflush_r+0x42>
   18fe2:	68ac      	ldr	r4, [r5, #8]
   18fe4:	e7f1      	b.n	18fca <_fflush_r+0x26>
   18fe6:	4b04      	ldr	r3, [pc, #16]	; (18ff8 <_fflush_r+0x54>)
   18fe8:	429c      	cmp	r4, r3
   18fea:	d1ee      	bne.n	18fca <_fflush_r+0x26>
   18fec:	68ec      	ldr	r4, [r5, #12]
   18fee:	e7ec      	b.n	18fca <_fflush_r+0x26>
   18ff0:	0001b1f0 	.word	0x0001b1f0
   18ff4:	0001b210 	.word	0x0001b210
   18ff8:	0001b1d0 	.word	0x0001b1d0

00018ffc <_cleanup_r>:
   18ffc:	b510      	push	{r4, lr}
   18ffe:	4902      	ldr	r1, [pc, #8]	; (19008 <_cleanup_r+0xc>)
   19000:	f000 f8b2 	bl	19168 <_fwalk_reent>
   19004:	bd10      	pop	{r4, pc}
   19006:	46c0      	nop			; (mov r8, r8)
   19008:	00018fa5 	.word	0x00018fa5

0001900c <std.isra.0>:
   1900c:	2300      	movs	r3, #0
   1900e:	b510      	push	{r4, lr}
   19010:	0004      	movs	r4, r0
   19012:	6003      	str	r3, [r0, #0]
   19014:	6043      	str	r3, [r0, #4]
   19016:	6083      	str	r3, [r0, #8]
   19018:	8181      	strh	r1, [r0, #12]
   1901a:	6643      	str	r3, [r0, #100]	; 0x64
   1901c:	81c2      	strh	r2, [r0, #14]
   1901e:	6103      	str	r3, [r0, #16]
   19020:	6143      	str	r3, [r0, #20]
   19022:	6183      	str	r3, [r0, #24]
   19024:	0019      	movs	r1, r3
   19026:	2208      	movs	r2, #8
   19028:	305c      	adds	r0, #92	; 0x5c
   1902a:	f7ff f99f 	bl	1836c <memset>
   1902e:	4b05      	ldr	r3, [pc, #20]	; (19044 <std.isra.0+0x38>)
   19030:	6224      	str	r4, [r4, #32]
   19032:	6263      	str	r3, [r4, #36]	; 0x24
   19034:	4b04      	ldr	r3, [pc, #16]	; (19048 <std.isra.0+0x3c>)
   19036:	62a3      	str	r3, [r4, #40]	; 0x28
   19038:	4b04      	ldr	r3, [pc, #16]	; (1904c <std.isra.0+0x40>)
   1903a:	62e3      	str	r3, [r4, #44]	; 0x2c
   1903c:	4b04      	ldr	r3, [pc, #16]	; (19050 <std.isra.0+0x44>)
   1903e:	6323      	str	r3, [r4, #48]	; 0x30
   19040:	bd10      	pop	{r4, pc}
   19042:	46c0      	nop			; (mov r8, r8)
   19044:	00019861 	.word	0x00019861
   19048:	00019889 	.word	0x00019889
   1904c:	000198c1 	.word	0x000198c1
   19050:	000198ed 	.word	0x000198ed

00019054 <__sfmoreglue>:
   19054:	b570      	push	{r4, r5, r6, lr}
   19056:	2568      	movs	r5, #104	; 0x68
   19058:	1e4a      	subs	r2, r1, #1
   1905a:	4355      	muls	r5, r2
   1905c:	000e      	movs	r6, r1
   1905e:	0029      	movs	r1, r5
   19060:	3174      	adds	r1, #116	; 0x74
   19062:	f000 f981 	bl	19368 <_malloc_r>
   19066:	1e04      	subs	r4, r0, #0
   19068:	d008      	beq.n	1907c <__sfmoreglue+0x28>
   1906a:	2100      	movs	r1, #0
   1906c:	002a      	movs	r2, r5
   1906e:	6001      	str	r1, [r0, #0]
   19070:	6046      	str	r6, [r0, #4]
   19072:	300c      	adds	r0, #12
   19074:	60a0      	str	r0, [r4, #8]
   19076:	3268      	adds	r2, #104	; 0x68
   19078:	f7ff f978 	bl	1836c <memset>
   1907c:	0020      	movs	r0, r4
   1907e:	bd70      	pop	{r4, r5, r6, pc}

00019080 <__sinit>:
   19080:	6983      	ldr	r3, [r0, #24]
   19082:	b513      	push	{r0, r1, r4, lr}
   19084:	0004      	movs	r4, r0
   19086:	2b00      	cmp	r3, #0
   19088:	d128      	bne.n	190dc <__sinit+0x5c>
   1908a:	6483      	str	r3, [r0, #72]	; 0x48
   1908c:	64c3      	str	r3, [r0, #76]	; 0x4c
   1908e:	6503      	str	r3, [r0, #80]	; 0x50
   19090:	4b13      	ldr	r3, [pc, #76]	; (190e0 <__sinit+0x60>)
   19092:	4a14      	ldr	r2, [pc, #80]	; (190e4 <__sinit+0x64>)
   19094:	681b      	ldr	r3, [r3, #0]
   19096:	6282      	str	r2, [r0, #40]	; 0x28
   19098:	9301      	str	r3, [sp, #4]
   1909a:	4298      	cmp	r0, r3
   1909c:	d101      	bne.n	190a2 <__sinit+0x22>
   1909e:	2301      	movs	r3, #1
   190a0:	6183      	str	r3, [r0, #24]
   190a2:	0020      	movs	r0, r4
   190a4:	f000 f820 	bl	190e8 <__sfp>
   190a8:	6060      	str	r0, [r4, #4]
   190aa:	0020      	movs	r0, r4
   190ac:	f000 f81c 	bl	190e8 <__sfp>
   190b0:	60a0      	str	r0, [r4, #8]
   190b2:	0020      	movs	r0, r4
   190b4:	f000 f818 	bl	190e8 <__sfp>
   190b8:	2200      	movs	r2, #0
   190ba:	60e0      	str	r0, [r4, #12]
   190bc:	2104      	movs	r1, #4
   190be:	6860      	ldr	r0, [r4, #4]
   190c0:	f7ff ffa4 	bl	1900c <std.isra.0>
   190c4:	2201      	movs	r2, #1
   190c6:	2109      	movs	r1, #9
   190c8:	68a0      	ldr	r0, [r4, #8]
   190ca:	f7ff ff9f 	bl	1900c <std.isra.0>
   190ce:	2202      	movs	r2, #2
   190d0:	2112      	movs	r1, #18
   190d2:	68e0      	ldr	r0, [r4, #12]
   190d4:	f7ff ff9a 	bl	1900c <std.isra.0>
   190d8:	2301      	movs	r3, #1
   190da:	61a3      	str	r3, [r4, #24]
   190dc:	bd13      	pop	{r0, r1, r4, pc}
   190de:	46c0      	nop			; (mov r8, r8)
   190e0:	0001b198 	.word	0x0001b198
   190e4:	00018ffd 	.word	0x00018ffd

000190e8 <__sfp>:
   190e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   190ea:	4b1e      	ldr	r3, [pc, #120]	; (19164 <__sfp+0x7c>)
   190ec:	0007      	movs	r7, r0
   190ee:	681e      	ldr	r6, [r3, #0]
   190f0:	69b3      	ldr	r3, [r6, #24]
   190f2:	2b00      	cmp	r3, #0
   190f4:	d102      	bne.n	190fc <__sfp+0x14>
   190f6:	0030      	movs	r0, r6
   190f8:	f7ff ffc2 	bl	19080 <__sinit>
   190fc:	3648      	adds	r6, #72	; 0x48
   190fe:	68b4      	ldr	r4, [r6, #8]
   19100:	6873      	ldr	r3, [r6, #4]
   19102:	3b01      	subs	r3, #1
   19104:	d504      	bpl.n	19110 <__sfp+0x28>
   19106:	6833      	ldr	r3, [r6, #0]
   19108:	2b00      	cmp	r3, #0
   1910a:	d007      	beq.n	1911c <__sfp+0x34>
   1910c:	6836      	ldr	r6, [r6, #0]
   1910e:	e7f6      	b.n	190fe <__sfp+0x16>
   19110:	220c      	movs	r2, #12
   19112:	5ea5      	ldrsh	r5, [r4, r2]
   19114:	2d00      	cmp	r5, #0
   19116:	d00d      	beq.n	19134 <__sfp+0x4c>
   19118:	3468      	adds	r4, #104	; 0x68
   1911a:	e7f2      	b.n	19102 <__sfp+0x1a>
   1911c:	2104      	movs	r1, #4
   1911e:	0038      	movs	r0, r7
   19120:	f7ff ff98 	bl	19054 <__sfmoreglue>
   19124:	6030      	str	r0, [r6, #0]
   19126:	2800      	cmp	r0, #0
   19128:	d1f0      	bne.n	1910c <__sfp+0x24>
   1912a:	230c      	movs	r3, #12
   1912c:	0004      	movs	r4, r0
   1912e:	603b      	str	r3, [r7, #0]
   19130:	0020      	movs	r0, r4
   19132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19134:	2301      	movs	r3, #1
   19136:	0020      	movs	r0, r4
   19138:	425b      	negs	r3, r3
   1913a:	81e3      	strh	r3, [r4, #14]
   1913c:	3302      	adds	r3, #2
   1913e:	81a3      	strh	r3, [r4, #12]
   19140:	6665      	str	r5, [r4, #100]	; 0x64
   19142:	6025      	str	r5, [r4, #0]
   19144:	60a5      	str	r5, [r4, #8]
   19146:	6065      	str	r5, [r4, #4]
   19148:	6125      	str	r5, [r4, #16]
   1914a:	6165      	str	r5, [r4, #20]
   1914c:	61a5      	str	r5, [r4, #24]
   1914e:	2208      	movs	r2, #8
   19150:	0029      	movs	r1, r5
   19152:	305c      	adds	r0, #92	; 0x5c
   19154:	f7ff f90a 	bl	1836c <memset>
   19158:	6365      	str	r5, [r4, #52]	; 0x34
   1915a:	63a5      	str	r5, [r4, #56]	; 0x38
   1915c:	64a5      	str	r5, [r4, #72]	; 0x48
   1915e:	64e5      	str	r5, [r4, #76]	; 0x4c
   19160:	e7e6      	b.n	19130 <__sfp+0x48>
   19162:	46c0      	nop			; (mov r8, r8)
   19164:	0001b198 	.word	0x0001b198

00019168 <_fwalk_reent>:
   19168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1916a:	0004      	movs	r4, r0
   1916c:	0007      	movs	r7, r0
   1916e:	2600      	movs	r6, #0
   19170:	9101      	str	r1, [sp, #4]
   19172:	3448      	adds	r4, #72	; 0x48
   19174:	2c00      	cmp	r4, #0
   19176:	d101      	bne.n	1917c <_fwalk_reent+0x14>
   19178:	0030      	movs	r0, r6
   1917a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1917c:	6863      	ldr	r3, [r4, #4]
   1917e:	68a5      	ldr	r5, [r4, #8]
   19180:	9300      	str	r3, [sp, #0]
   19182:	9b00      	ldr	r3, [sp, #0]
   19184:	3b01      	subs	r3, #1
   19186:	9300      	str	r3, [sp, #0]
   19188:	d501      	bpl.n	1918e <_fwalk_reent+0x26>
   1918a:	6824      	ldr	r4, [r4, #0]
   1918c:	e7f2      	b.n	19174 <_fwalk_reent+0xc>
   1918e:	89ab      	ldrh	r3, [r5, #12]
   19190:	2b01      	cmp	r3, #1
   19192:	d908      	bls.n	191a6 <_fwalk_reent+0x3e>
   19194:	220e      	movs	r2, #14
   19196:	5eab      	ldrsh	r3, [r5, r2]
   19198:	3301      	adds	r3, #1
   1919a:	d004      	beq.n	191a6 <_fwalk_reent+0x3e>
   1919c:	0029      	movs	r1, r5
   1919e:	0038      	movs	r0, r7
   191a0:	9b01      	ldr	r3, [sp, #4]
   191a2:	4798      	blx	r3
   191a4:	4306      	orrs	r6, r0
   191a6:	3568      	adds	r5, #104	; 0x68
   191a8:	e7eb      	b.n	19182 <_fwalk_reent+0x1a>
   191aa:	Address 0x000191aa is out of bounds.


000191ac <__swhatbuf_r>:
   191ac:	b570      	push	{r4, r5, r6, lr}
   191ae:	000e      	movs	r6, r1
   191b0:	001d      	movs	r5, r3
   191b2:	230e      	movs	r3, #14
   191b4:	5ec9      	ldrsh	r1, [r1, r3]
   191b6:	b090      	sub	sp, #64	; 0x40
   191b8:	0014      	movs	r4, r2
   191ba:	2900      	cmp	r1, #0
   191bc:	da07      	bge.n	191ce <__swhatbuf_r+0x22>
   191be:	2300      	movs	r3, #0
   191c0:	602b      	str	r3, [r5, #0]
   191c2:	89b3      	ldrh	r3, [r6, #12]
   191c4:	061b      	lsls	r3, r3, #24
   191c6:	d411      	bmi.n	191ec <__swhatbuf_r+0x40>
   191c8:	2380      	movs	r3, #128	; 0x80
   191ca:	00db      	lsls	r3, r3, #3
   191cc:	e00f      	b.n	191ee <__swhatbuf_r+0x42>
   191ce:	aa01      	add	r2, sp, #4
   191d0:	f000 fbb8 	bl	19944 <_fstat_r>
   191d4:	2800      	cmp	r0, #0
   191d6:	dbf2      	blt.n	191be <__swhatbuf_r+0x12>
   191d8:	22f0      	movs	r2, #240	; 0xf0
   191da:	9b02      	ldr	r3, [sp, #8]
   191dc:	0212      	lsls	r2, r2, #8
   191de:	4013      	ands	r3, r2
   191e0:	4a05      	ldr	r2, [pc, #20]	; (191f8 <__swhatbuf_r+0x4c>)
   191e2:	189b      	adds	r3, r3, r2
   191e4:	425a      	negs	r2, r3
   191e6:	4153      	adcs	r3, r2
   191e8:	602b      	str	r3, [r5, #0]
   191ea:	e7ed      	b.n	191c8 <__swhatbuf_r+0x1c>
   191ec:	2340      	movs	r3, #64	; 0x40
   191ee:	2000      	movs	r0, #0
   191f0:	6023      	str	r3, [r4, #0]
   191f2:	b010      	add	sp, #64	; 0x40
   191f4:	bd70      	pop	{r4, r5, r6, pc}
   191f6:	46c0      	nop			; (mov r8, r8)
   191f8:	ffffe000 	.word	0xffffe000

000191fc <__smakebuf_r>:
   191fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   191fe:	2602      	movs	r6, #2
   19200:	898b      	ldrh	r3, [r1, #12]
   19202:	0005      	movs	r5, r0
   19204:	000c      	movs	r4, r1
   19206:	4233      	tst	r3, r6
   19208:	d006      	beq.n	19218 <__smakebuf_r+0x1c>
   1920a:	0023      	movs	r3, r4
   1920c:	3347      	adds	r3, #71	; 0x47
   1920e:	6023      	str	r3, [r4, #0]
   19210:	6123      	str	r3, [r4, #16]
   19212:	2301      	movs	r3, #1
   19214:	6163      	str	r3, [r4, #20]
   19216:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   19218:	ab01      	add	r3, sp, #4
   1921a:	466a      	mov	r2, sp
   1921c:	f7ff ffc6 	bl	191ac <__swhatbuf_r>
   19220:	9900      	ldr	r1, [sp, #0]
   19222:	0007      	movs	r7, r0
   19224:	0028      	movs	r0, r5
   19226:	f000 f89f 	bl	19368 <_malloc_r>
   1922a:	2800      	cmp	r0, #0
   1922c:	d108      	bne.n	19240 <__smakebuf_r+0x44>
   1922e:	220c      	movs	r2, #12
   19230:	5ea3      	ldrsh	r3, [r4, r2]
   19232:	059a      	lsls	r2, r3, #22
   19234:	d4ef      	bmi.n	19216 <__smakebuf_r+0x1a>
   19236:	2203      	movs	r2, #3
   19238:	4393      	bics	r3, r2
   1923a:	431e      	orrs	r6, r3
   1923c:	81a6      	strh	r6, [r4, #12]
   1923e:	e7e4      	b.n	1920a <__smakebuf_r+0xe>
   19240:	4b0f      	ldr	r3, [pc, #60]	; (19280 <__smakebuf_r+0x84>)
   19242:	62ab      	str	r3, [r5, #40]	; 0x28
   19244:	2380      	movs	r3, #128	; 0x80
   19246:	89a2      	ldrh	r2, [r4, #12]
   19248:	6020      	str	r0, [r4, #0]
   1924a:	4313      	orrs	r3, r2
   1924c:	81a3      	strh	r3, [r4, #12]
   1924e:	9b00      	ldr	r3, [sp, #0]
   19250:	6120      	str	r0, [r4, #16]
   19252:	6163      	str	r3, [r4, #20]
   19254:	9b01      	ldr	r3, [sp, #4]
   19256:	2b00      	cmp	r3, #0
   19258:	d00d      	beq.n	19276 <__smakebuf_r+0x7a>
   1925a:	230e      	movs	r3, #14
   1925c:	5ee1      	ldrsh	r1, [r4, r3]
   1925e:	0028      	movs	r0, r5
   19260:	f000 fb82 	bl	19968 <_isatty_r>
   19264:	2800      	cmp	r0, #0
   19266:	d006      	beq.n	19276 <__smakebuf_r+0x7a>
   19268:	2203      	movs	r2, #3
   1926a:	89a3      	ldrh	r3, [r4, #12]
   1926c:	4393      	bics	r3, r2
   1926e:	001a      	movs	r2, r3
   19270:	2301      	movs	r3, #1
   19272:	4313      	orrs	r3, r2
   19274:	81a3      	strh	r3, [r4, #12]
   19276:	89a0      	ldrh	r0, [r4, #12]
   19278:	4338      	orrs	r0, r7
   1927a:	81a0      	strh	r0, [r4, #12]
   1927c:	e7cb      	b.n	19216 <__smakebuf_r+0x1a>
   1927e:	46c0      	nop			; (mov r8, r8)
   19280:	00018ffd 	.word	0x00018ffd

00019284 <malloc>:
   19284:	b510      	push	{r4, lr}
   19286:	4b03      	ldr	r3, [pc, #12]	; (19294 <malloc+0x10>)
   19288:	0001      	movs	r1, r0
   1928a:	6818      	ldr	r0, [r3, #0]
   1928c:	f000 f86c 	bl	19368 <_malloc_r>
   19290:	bd10      	pop	{r4, pc}
   19292:	46c0      	nop			; (mov r8, r8)
   19294:	2000002c 	.word	0x2000002c

00019298 <memchr>:
   19298:	b2c9      	uxtb	r1, r1
   1929a:	1882      	adds	r2, r0, r2
   1929c:	4290      	cmp	r0, r2
   1929e:	d101      	bne.n	192a4 <memchr+0xc>
   192a0:	2000      	movs	r0, #0
   192a2:	4770      	bx	lr
   192a4:	7803      	ldrb	r3, [r0, #0]
   192a6:	428b      	cmp	r3, r1
   192a8:	d0fb      	beq.n	192a2 <memchr+0xa>
   192aa:	3001      	adds	r0, #1
   192ac:	e7f6      	b.n	1929c <memchr+0x4>

000192ae <memmove>:
   192ae:	b510      	push	{r4, lr}
   192b0:	4288      	cmp	r0, r1
   192b2:	d902      	bls.n	192ba <memmove+0xc>
   192b4:	188b      	adds	r3, r1, r2
   192b6:	4298      	cmp	r0, r3
   192b8:	d308      	bcc.n	192cc <memmove+0x1e>
   192ba:	2300      	movs	r3, #0
   192bc:	429a      	cmp	r2, r3
   192be:	d007      	beq.n	192d0 <memmove+0x22>
   192c0:	5ccc      	ldrb	r4, [r1, r3]
   192c2:	54c4      	strb	r4, [r0, r3]
   192c4:	3301      	adds	r3, #1
   192c6:	e7f9      	b.n	192bc <memmove+0xe>
   192c8:	5c8b      	ldrb	r3, [r1, r2]
   192ca:	5483      	strb	r3, [r0, r2]
   192cc:	3a01      	subs	r2, #1
   192ce:	d2fb      	bcs.n	192c8 <memmove+0x1a>
   192d0:	bd10      	pop	{r4, pc}
   192d2:	Address 0x000192d2 is out of bounds.


000192d4 <_free_r>:
   192d4:	b570      	push	{r4, r5, r6, lr}
   192d6:	0005      	movs	r5, r0
   192d8:	2900      	cmp	r1, #0
   192da:	d010      	beq.n	192fe <_free_r+0x2a>
   192dc:	1f0c      	subs	r4, r1, #4
   192de:	6823      	ldr	r3, [r4, #0]
   192e0:	2b00      	cmp	r3, #0
   192e2:	da00      	bge.n	192e6 <_free_r+0x12>
   192e4:	18e4      	adds	r4, r4, r3
   192e6:	0028      	movs	r0, r5
   192e8:	f000 fb64 	bl	199b4 <__malloc_lock>
   192ec:	4a1d      	ldr	r2, [pc, #116]	; (19364 <_free_r+0x90>)
   192ee:	6813      	ldr	r3, [r2, #0]
   192f0:	2b00      	cmp	r3, #0
   192f2:	d105      	bne.n	19300 <_free_r+0x2c>
   192f4:	6063      	str	r3, [r4, #4]
   192f6:	6014      	str	r4, [r2, #0]
   192f8:	0028      	movs	r0, r5
   192fa:	f000 fb5c 	bl	199b6 <__malloc_unlock>
   192fe:	bd70      	pop	{r4, r5, r6, pc}
   19300:	42a3      	cmp	r3, r4
   19302:	d909      	bls.n	19318 <_free_r+0x44>
   19304:	6821      	ldr	r1, [r4, #0]
   19306:	1860      	adds	r0, r4, r1
   19308:	4283      	cmp	r3, r0
   1930a:	d1f3      	bne.n	192f4 <_free_r+0x20>
   1930c:	6818      	ldr	r0, [r3, #0]
   1930e:	685b      	ldr	r3, [r3, #4]
   19310:	1841      	adds	r1, r0, r1
   19312:	6021      	str	r1, [r4, #0]
   19314:	e7ee      	b.n	192f4 <_free_r+0x20>
   19316:	0013      	movs	r3, r2
   19318:	685a      	ldr	r2, [r3, #4]
   1931a:	2a00      	cmp	r2, #0
   1931c:	d001      	beq.n	19322 <_free_r+0x4e>
   1931e:	42a2      	cmp	r2, r4
   19320:	d9f9      	bls.n	19316 <_free_r+0x42>
   19322:	6819      	ldr	r1, [r3, #0]
   19324:	1858      	adds	r0, r3, r1
   19326:	42a0      	cmp	r0, r4
   19328:	d10b      	bne.n	19342 <_free_r+0x6e>
   1932a:	6820      	ldr	r0, [r4, #0]
   1932c:	1809      	adds	r1, r1, r0
   1932e:	1858      	adds	r0, r3, r1
   19330:	6019      	str	r1, [r3, #0]
   19332:	4282      	cmp	r2, r0
   19334:	d1e0      	bne.n	192f8 <_free_r+0x24>
   19336:	6810      	ldr	r0, [r2, #0]
   19338:	6852      	ldr	r2, [r2, #4]
   1933a:	1841      	adds	r1, r0, r1
   1933c:	6019      	str	r1, [r3, #0]
   1933e:	605a      	str	r2, [r3, #4]
   19340:	e7da      	b.n	192f8 <_free_r+0x24>
   19342:	42a0      	cmp	r0, r4
   19344:	d902      	bls.n	1934c <_free_r+0x78>
   19346:	230c      	movs	r3, #12
   19348:	602b      	str	r3, [r5, #0]
   1934a:	e7d5      	b.n	192f8 <_free_r+0x24>
   1934c:	6821      	ldr	r1, [r4, #0]
   1934e:	1860      	adds	r0, r4, r1
   19350:	4282      	cmp	r2, r0
   19352:	d103      	bne.n	1935c <_free_r+0x88>
   19354:	6810      	ldr	r0, [r2, #0]
   19356:	6852      	ldr	r2, [r2, #4]
   19358:	1841      	adds	r1, r0, r1
   1935a:	6021      	str	r1, [r4, #0]
   1935c:	6062      	str	r2, [r4, #4]
   1935e:	605c      	str	r4, [r3, #4]
   19360:	e7ca      	b.n	192f8 <_free_r+0x24>
   19362:	46c0      	nop			; (mov r8, r8)
   19364:	20002400 	.word	0x20002400

00019368 <_malloc_r>:
   19368:	2303      	movs	r3, #3
   1936a:	b570      	push	{r4, r5, r6, lr}
   1936c:	1ccd      	adds	r5, r1, #3
   1936e:	439d      	bics	r5, r3
   19370:	3508      	adds	r5, #8
   19372:	0006      	movs	r6, r0
   19374:	2d0c      	cmp	r5, #12
   19376:	d21e      	bcs.n	193b6 <_malloc_r+0x4e>
   19378:	250c      	movs	r5, #12
   1937a:	42a9      	cmp	r1, r5
   1937c:	d81d      	bhi.n	193ba <_malloc_r+0x52>
   1937e:	0030      	movs	r0, r6
   19380:	f000 fb18 	bl	199b4 <__malloc_lock>
   19384:	4a25      	ldr	r2, [pc, #148]	; (1941c <_malloc_r+0xb4>)
   19386:	6814      	ldr	r4, [r2, #0]
   19388:	0021      	movs	r1, r4
   1938a:	2900      	cmp	r1, #0
   1938c:	d119      	bne.n	193c2 <_malloc_r+0x5a>
   1938e:	4c24      	ldr	r4, [pc, #144]	; (19420 <_malloc_r+0xb8>)
   19390:	6823      	ldr	r3, [r4, #0]
   19392:	2b00      	cmp	r3, #0
   19394:	d103      	bne.n	1939e <_malloc_r+0x36>
   19396:	0030      	movs	r0, r6
   19398:	f000 fa06 	bl	197a8 <_sbrk_r>
   1939c:	6020      	str	r0, [r4, #0]
   1939e:	0029      	movs	r1, r5
   193a0:	0030      	movs	r0, r6
   193a2:	f000 fa01 	bl	197a8 <_sbrk_r>
   193a6:	1c43      	adds	r3, r0, #1
   193a8:	d12c      	bne.n	19404 <_malloc_r+0x9c>
   193aa:	230c      	movs	r3, #12
   193ac:	0030      	movs	r0, r6
   193ae:	6033      	str	r3, [r6, #0]
   193b0:	f000 fb01 	bl	199b6 <__malloc_unlock>
   193b4:	e003      	b.n	193be <_malloc_r+0x56>
   193b6:	2d00      	cmp	r5, #0
   193b8:	dadf      	bge.n	1937a <_malloc_r+0x12>
   193ba:	230c      	movs	r3, #12
   193bc:	6033      	str	r3, [r6, #0]
   193be:	2000      	movs	r0, #0
   193c0:	bd70      	pop	{r4, r5, r6, pc}
   193c2:	680b      	ldr	r3, [r1, #0]
   193c4:	1b5b      	subs	r3, r3, r5
   193c6:	d41a      	bmi.n	193fe <_malloc_r+0x96>
   193c8:	2b0b      	cmp	r3, #11
   193ca:	d903      	bls.n	193d4 <_malloc_r+0x6c>
   193cc:	600b      	str	r3, [r1, #0]
   193ce:	18cc      	adds	r4, r1, r3
   193d0:	6025      	str	r5, [r4, #0]
   193d2:	e003      	b.n	193dc <_malloc_r+0x74>
   193d4:	428c      	cmp	r4, r1
   193d6:	d10e      	bne.n	193f6 <_malloc_r+0x8e>
   193d8:	6863      	ldr	r3, [r4, #4]
   193da:	6013      	str	r3, [r2, #0]
   193dc:	0030      	movs	r0, r6
   193de:	f000 faea 	bl	199b6 <__malloc_unlock>
   193e2:	0020      	movs	r0, r4
   193e4:	2207      	movs	r2, #7
   193e6:	300b      	adds	r0, #11
   193e8:	1d23      	adds	r3, r4, #4
   193ea:	4390      	bics	r0, r2
   193ec:	1ac3      	subs	r3, r0, r3
   193ee:	d0e7      	beq.n	193c0 <_malloc_r+0x58>
   193f0:	425a      	negs	r2, r3
   193f2:	50e2      	str	r2, [r4, r3]
   193f4:	e7e4      	b.n	193c0 <_malloc_r+0x58>
   193f6:	684b      	ldr	r3, [r1, #4]
   193f8:	6063      	str	r3, [r4, #4]
   193fa:	000c      	movs	r4, r1
   193fc:	e7ee      	b.n	193dc <_malloc_r+0x74>
   193fe:	000c      	movs	r4, r1
   19400:	6849      	ldr	r1, [r1, #4]
   19402:	e7c2      	b.n	1938a <_malloc_r+0x22>
   19404:	2303      	movs	r3, #3
   19406:	1cc4      	adds	r4, r0, #3
   19408:	439c      	bics	r4, r3
   1940a:	42a0      	cmp	r0, r4
   1940c:	d0e0      	beq.n	193d0 <_malloc_r+0x68>
   1940e:	1a21      	subs	r1, r4, r0
   19410:	0030      	movs	r0, r6
   19412:	f000 f9c9 	bl	197a8 <_sbrk_r>
   19416:	1c43      	adds	r3, r0, #1
   19418:	d1da      	bne.n	193d0 <_malloc_r+0x68>
   1941a:	e7c6      	b.n	193aa <_malloc_r+0x42>
   1941c:	20002400 	.word	0x20002400
   19420:	20002404 	.word	0x20002404

00019424 <_realloc_r>:
   19424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19426:	0007      	movs	r7, r0
   19428:	000d      	movs	r5, r1
   1942a:	0016      	movs	r6, r2
   1942c:	2900      	cmp	r1, #0
   1942e:	d105      	bne.n	1943c <_realloc_r+0x18>
   19430:	0011      	movs	r1, r2
   19432:	f7ff ff99 	bl	19368 <_malloc_r>
   19436:	0004      	movs	r4, r0
   19438:	0020      	movs	r0, r4
   1943a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1943c:	2a00      	cmp	r2, #0
   1943e:	d103      	bne.n	19448 <_realloc_r+0x24>
   19440:	f7ff ff48 	bl	192d4 <_free_r>
   19444:	0034      	movs	r4, r6
   19446:	e7f7      	b.n	19438 <_realloc_r+0x14>
   19448:	f000 fab6 	bl	199b8 <_malloc_usable_size_r>
   1944c:	002c      	movs	r4, r5
   1944e:	4286      	cmp	r6, r0
   19450:	d9f2      	bls.n	19438 <_realloc_r+0x14>
   19452:	0031      	movs	r1, r6
   19454:	0038      	movs	r0, r7
   19456:	f7ff ff87 	bl	19368 <_malloc_r>
   1945a:	1e04      	subs	r4, r0, #0
   1945c:	d0ec      	beq.n	19438 <_realloc_r+0x14>
   1945e:	0029      	movs	r1, r5
   19460:	0032      	movs	r2, r6
   19462:	f7fe ff7a 	bl	1835a <memcpy>
   19466:	0029      	movs	r1, r5
   19468:	0038      	movs	r0, r7
   1946a:	f7ff ff33 	bl	192d4 <_free_r>
   1946e:	e7e3      	b.n	19438 <_realloc_r+0x14>

00019470 <__ssputs_r>:
   19470:	b5f0      	push	{r4, r5, r6, r7, lr}
   19472:	688e      	ldr	r6, [r1, #8]
   19474:	b085      	sub	sp, #20
   19476:	0007      	movs	r7, r0
   19478:	000c      	movs	r4, r1
   1947a:	9203      	str	r2, [sp, #12]
   1947c:	9301      	str	r3, [sp, #4]
   1947e:	429e      	cmp	r6, r3
   19480:	d839      	bhi.n	194f6 <__ssputs_r+0x86>
   19482:	2390      	movs	r3, #144	; 0x90
   19484:	898a      	ldrh	r2, [r1, #12]
   19486:	00db      	lsls	r3, r3, #3
   19488:	421a      	tst	r2, r3
   1948a:	d034      	beq.n	194f6 <__ssputs_r+0x86>
   1948c:	2503      	movs	r5, #3
   1948e:	6909      	ldr	r1, [r1, #16]
   19490:	6823      	ldr	r3, [r4, #0]
   19492:	1a5b      	subs	r3, r3, r1
   19494:	9302      	str	r3, [sp, #8]
   19496:	6963      	ldr	r3, [r4, #20]
   19498:	9802      	ldr	r0, [sp, #8]
   1949a:	435d      	muls	r5, r3
   1949c:	0feb      	lsrs	r3, r5, #31
   1949e:	195d      	adds	r5, r3, r5
   194a0:	9b01      	ldr	r3, [sp, #4]
   194a2:	106d      	asrs	r5, r5, #1
   194a4:	3301      	adds	r3, #1
   194a6:	181b      	adds	r3, r3, r0
   194a8:	42ab      	cmp	r3, r5
   194aa:	d900      	bls.n	194ae <__ssputs_r+0x3e>
   194ac:	001d      	movs	r5, r3
   194ae:	0553      	lsls	r3, r2, #21
   194b0:	d532      	bpl.n	19518 <__ssputs_r+0xa8>
   194b2:	0029      	movs	r1, r5
   194b4:	0038      	movs	r0, r7
   194b6:	f7ff ff57 	bl	19368 <_malloc_r>
   194ba:	1e06      	subs	r6, r0, #0
   194bc:	d109      	bne.n	194d2 <__ssputs_r+0x62>
   194be:	230c      	movs	r3, #12
   194c0:	603b      	str	r3, [r7, #0]
   194c2:	2340      	movs	r3, #64	; 0x40
   194c4:	2001      	movs	r0, #1
   194c6:	89a2      	ldrh	r2, [r4, #12]
   194c8:	4240      	negs	r0, r0
   194ca:	4313      	orrs	r3, r2
   194cc:	81a3      	strh	r3, [r4, #12]
   194ce:	b005      	add	sp, #20
   194d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   194d2:	9a02      	ldr	r2, [sp, #8]
   194d4:	6921      	ldr	r1, [r4, #16]
   194d6:	f7fe ff40 	bl	1835a <memcpy>
   194da:	89a3      	ldrh	r3, [r4, #12]
   194dc:	4a14      	ldr	r2, [pc, #80]	; (19530 <__ssputs_r+0xc0>)
   194de:	401a      	ands	r2, r3
   194e0:	2380      	movs	r3, #128	; 0x80
   194e2:	4313      	orrs	r3, r2
   194e4:	81a3      	strh	r3, [r4, #12]
   194e6:	9b02      	ldr	r3, [sp, #8]
   194e8:	6126      	str	r6, [r4, #16]
   194ea:	18f6      	adds	r6, r6, r3
   194ec:	6026      	str	r6, [r4, #0]
   194ee:	6165      	str	r5, [r4, #20]
   194f0:	9e01      	ldr	r6, [sp, #4]
   194f2:	1aed      	subs	r5, r5, r3
   194f4:	60a5      	str	r5, [r4, #8]
   194f6:	9b01      	ldr	r3, [sp, #4]
   194f8:	42b3      	cmp	r3, r6
   194fa:	d200      	bcs.n	194fe <__ssputs_r+0x8e>
   194fc:	001e      	movs	r6, r3
   194fe:	0032      	movs	r2, r6
   19500:	9903      	ldr	r1, [sp, #12]
   19502:	6820      	ldr	r0, [r4, #0]
   19504:	f7ff fed3 	bl	192ae <memmove>
   19508:	68a3      	ldr	r3, [r4, #8]
   1950a:	2000      	movs	r0, #0
   1950c:	1b9b      	subs	r3, r3, r6
   1950e:	60a3      	str	r3, [r4, #8]
   19510:	6823      	ldr	r3, [r4, #0]
   19512:	199e      	adds	r6, r3, r6
   19514:	6026      	str	r6, [r4, #0]
   19516:	e7da      	b.n	194ce <__ssputs_r+0x5e>
   19518:	002a      	movs	r2, r5
   1951a:	0038      	movs	r0, r7
   1951c:	f7ff ff82 	bl	19424 <_realloc_r>
   19520:	1e06      	subs	r6, r0, #0
   19522:	d1e0      	bne.n	194e6 <__ssputs_r+0x76>
   19524:	6921      	ldr	r1, [r4, #16]
   19526:	0038      	movs	r0, r7
   19528:	f7ff fed4 	bl	192d4 <_free_r>
   1952c:	e7c7      	b.n	194be <__ssputs_r+0x4e>
   1952e:	46c0      	nop			; (mov r8, r8)
   19530:	fffffb7f 	.word	0xfffffb7f

00019534 <_svfiprintf_r>:
   19534:	b5f0      	push	{r4, r5, r6, r7, lr}
   19536:	b09f      	sub	sp, #124	; 0x7c
   19538:	9002      	str	r0, [sp, #8]
   1953a:	9305      	str	r3, [sp, #20]
   1953c:	898b      	ldrh	r3, [r1, #12]
   1953e:	000f      	movs	r7, r1
   19540:	0016      	movs	r6, r2
   19542:	061b      	lsls	r3, r3, #24
   19544:	d511      	bpl.n	1956a <_svfiprintf_r+0x36>
   19546:	690b      	ldr	r3, [r1, #16]
   19548:	2b00      	cmp	r3, #0
   1954a:	d10e      	bne.n	1956a <_svfiprintf_r+0x36>
   1954c:	2140      	movs	r1, #64	; 0x40
   1954e:	f7ff ff0b 	bl	19368 <_malloc_r>
   19552:	6038      	str	r0, [r7, #0]
   19554:	6138      	str	r0, [r7, #16]
   19556:	2800      	cmp	r0, #0
   19558:	d105      	bne.n	19566 <_svfiprintf_r+0x32>
   1955a:	230c      	movs	r3, #12
   1955c:	9a02      	ldr	r2, [sp, #8]
   1955e:	3801      	subs	r0, #1
   19560:	6013      	str	r3, [r2, #0]
   19562:	b01f      	add	sp, #124	; 0x7c
   19564:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19566:	2340      	movs	r3, #64	; 0x40
   19568:	617b      	str	r3, [r7, #20]
   1956a:	2300      	movs	r3, #0
   1956c:	ad06      	add	r5, sp, #24
   1956e:	616b      	str	r3, [r5, #20]
   19570:	3320      	adds	r3, #32
   19572:	766b      	strb	r3, [r5, #25]
   19574:	3310      	adds	r3, #16
   19576:	76ab      	strb	r3, [r5, #26]
   19578:	0034      	movs	r4, r6
   1957a:	7823      	ldrb	r3, [r4, #0]
   1957c:	2b00      	cmp	r3, #0
   1957e:	d147      	bne.n	19610 <_svfiprintf_r+0xdc>
   19580:	1ba3      	subs	r3, r4, r6
   19582:	9304      	str	r3, [sp, #16]
   19584:	d00d      	beq.n	195a2 <_svfiprintf_r+0x6e>
   19586:	1ba3      	subs	r3, r4, r6
   19588:	0032      	movs	r2, r6
   1958a:	0039      	movs	r1, r7
   1958c:	9802      	ldr	r0, [sp, #8]
   1958e:	f7ff ff6f 	bl	19470 <__ssputs_r>
   19592:	1c43      	adds	r3, r0, #1
   19594:	d100      	bne.n	19598 <_svfiprintf_r+0x64>
   19596:	e0b5      	b.n	19704 <_svfiprintf_r+0x1d0>
   19598:	696a      	ldr	r2, [r5, #20]
   1959a:	9b04      	ldr	r3, [sp, #16]
   1959c:	4694      	mov	ip, r2
   1959e:	4463      	add	r3, ip
   195a0:	616b      	str	r3, [r5, #20]
   195a2:	7823      	ldrb	r3, [r4, #0]
   195a4:	2b00      	cmp	r3, #0
   195a6:	d100      	bne.n	195aa <_svfiprintf_r+0x76>
   195a8:	e0ac      	b.n	19704 <_svfiprintf_r+0x1d0>
   195aa:	2201      	movs	r2, #1
   195ac:	2300      	movs	r3, #0
   195ae:	4252      	negs	r2, r2
   195b0:	606a      	str	r2, [r5, #4]
   195b2:	a902      	add	r1, sp, #8
   195b4:	3254      	adds	r2, #84	; 0x54
   195b6:	1852      	adds	r2, r2, r1
   195b8:	3401      	adds	r4, #1
   195ba:	602b      	str	r3, [r5, #0]
   195bc:	60eb      	str	r3, [r5, #12]
   195be:	60ab      	str	r3, [r5, #8]
   195c0:	7013      	strb	r3, [r2, #0]
   195c2:	65ab      	str	r3, [r5, #88]	; 0x58
   195c4:	4e58      	ldr	r6, [pc, #352]	; (19728 <_svfiprintf_r+0x1f4>)
   195c6:	2205      	movs	r2, #5
   195c8:	7821      	ldrb	r1, [r4, #0]
   195ca:	0030      	movs	r0, r6
   195cc:	f7ff fe64 	bl	19298 <memchr>
   195d0:	1c62      	adds	r2, r4, #1
   195d2:	2800      	cmp	r0, #0
   195d4:	d120      	bne.n	19618 <_svfiprintf_r+0xe4>
   195d6:	6829      	ldr	r1, [r5, #0]
   195d8:	06cb      	lsls	r3, r1, #27
   195da:	d504      	bpl.n	195e6 <_svfiprintf_r+0xb2>
   195dc:	2353      	movs	r3, #83	; 0x53
   195de:	ae02      	add	r6, sp, #8
   195e0:	3020      	adds	r0, #32
   195e2:	199b      	adds	r3, r3, r6
   195e4:	7018      	strb	r0, [r3, #0]
   195e6:	070b      	lsls	r3, r1, #28
   195e8:	d504      	bpl.n	195f4 <_svfiprintf_r+0xc0>
   195ea:	2353      	movs	r3, #83	; 0x53
   195ec:	202b      	movs	r0, #43	; 0x2b
   195ee:	ae02      	add	r6, sp, #8
   195f0:	199b      	adds	r3, r3, r6
   195f2:	7018      	strb	r0, [r3, #0]
   195f4:	7823      	ldrb	r3, [r4, #0]
   195f6:	2b2a      	cmp	r3, #42	; 0x2a
   195f8:	d016      	beq.n	19628 <_svfiprintf_r+0xf4>
   195fa:	2000      	movs	r0, #0
   195fc:	210a      	movs	r1, #10
   195fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19600:	7822      	ldrb	r2, [r4, #0]
   19602:	3a30      	subs	r2, #48	; 0x30
   19604:	2a09      	cmp	r2, #9
   19606:	d955      	bls.n	196b4 <_svfiprintf_r+0x180>
   19608:	2800      	cmp	r0, #0
   1960a:	d015      	beq.n	19638 <_svfiprintf_r+0x104>
   1960c:	9309      	str	r3, [sp, #36]	; 0x24
   1960e:	e013      	b.n	19638 <_svfiprintf_r+0x104>
   19610:	2b25      	cmp	r3, #37	; 0x25
   19612:	d0b5      	beq.n	19580 <_svfiprintf_r+0x4c>
   19614:	3401      	adds	r4, #1
   19616:	e7b0      	b.n	1957a <_svfiprintf_r+0x46>
   19618:	2301      	movs	r3, #1
   1961a:	1b80      	subs	r0, r0, r6
   1961c:	4083      	lsls	r3, r0
   1961e:	6829      	ldr	r1, [r5, #0]
   19620:	0014      	movs	r4, r2
   19622:	430b      	orrs	r3, r1
   19624:	602b      	str	r3, [r5, #0]
   19626:	e7cd      	b.n	195c4 <_svfiprintf_r+0x90>
   19628:	9b05      	ldr	r3, [sp, #20]
   1962a:	1d18      	adds	r0, r3, #4
   1962c:	681b      	ldr	r3, [r3, #0]
   1962e:	9005      	str	r0, [sp, #20]
   19630:	2b00      	cmp	r3, #0
   19632:	db39      	blt.n	196a8 <_svfiprintf_r+0x174>
   19634:	9309      	str	r3, [sp, #36]	; 0x24
   19636:	0014      	movs	r4, r2
   19638:	7823      	ldrb	r3, [r4, #0]
   1963a:	2b2e      	cmp	r3, #46	; 0x2e
   1963c:	d10b      	bne.n	19656 <_svfiprintf_r+0x122>
   1963e:	7863      	ldrb	r3, [r4, #1]
   19640:	1c62      	adds	r2, r4, #1
   19642:	2b2a      	cmp	r3, #42	; 0x2a
   19644:	d13e      	bne.n	196c4 <_svfiprintf_r+0x190>
   19646:	9b05      	ldr	r3, [sp, #20]
   19648:	3402      	adds	r4, #2
   1964a:	1d1a      	adds	r2, r3, #4
   1964c:	681b      	ldr	r3, [r3, #0]
   1964e:	9205      	str	r2, [sp, #20]
   19650:	2b00      	cmp	r3, #0
   19652:	db34      	blt.n	196be <_svfiprintf_r+0x18a>
   19654:	9307      	str	r3, [sp, #28]
   19656:	4e35      	ldr	r6, [pc, #212]	; (1972c <_svfiprintf_r+0x1f8>)
   19658:	7821      	ldrb	r1, [r4, #0]
   1965a:	2203      	movs	r2, #3
   1965c:	0030      	movs	r0, r6
   1965e:	f7ff fe1b 	bl	19298 <memchr>
   19662:	2800      	cmp	r0, #0
   19664:	d006      	beq.n	19674 <_svfiprintf_r+0x140>
   19666:	2340      	movs	r3, #64	; 0x40
   19668:	1b80      	subs	r0, r0, r6
   1966a:	4083      	lsls	r3, r0
   1966c:	682a      	ldr	r2, [r5, #0]
   1966e:	3401      	adds	r4, #1
   19670:	4313      	orrs	r3, r2
   19672:	602b      	str	r3, [r5, #0]
   19674:	7821      	ldrb	r1, [r4, #0]
   19676:	2206      	movs	r2, #6
   19678:	482d      	ldr	r0, [pc, #180]	; (19730 <_svfiprintf_r+0x1fc>)
   1967a:	1c66      	adds	r6, r4, #1
   1967c:	7629      	strb	r1, [r5, #24]
   1967e:	f7ff fe0b 	bl	19298 <memchr>
   19682:	2800      	cmp	r0, #0
   19684:	d046      	beq.n	19714 <_svfiprintf_r+0x1e0>
   19686:	4b2b      	ldr	r3, [pc, #172]	; (19734 <_svfiprintf_r+0x200>)
   19688:	2b00      	cmp	r3, #0
   1968a:	d12f      	bne.n	196ec <_svfiprintf_r+0x1b8>
   1968c:	6829      	ldr	r1, [r5, #0]
   1968e:	9b05      	ldr	r3, [sp, #20]
   19690:	2207      	movs	r2, #7
   19692:	05c9      	lsls	r1, r1, #23
   19694:	d528      	bpl.n	196e8 <_svfiprintf_r+0x1b4>
   19696:	189b      	adds	r3, r3, r2
   19698:	4393      	bics	r3, r2
   1969a:	3308      	adds	r3, #8
   1969c:	9305      	str	r3, [sp, #20]
   1969e:	696b      	ldr	r3, [r5, #20]
   196a0:	9a03      	ldr	r2, [sp, #12]
   196a2:	189b      	adds	r3, r3, r2
   196a4:	616b      	str	r3, [r5, #20]
   196a6:	e767      	b.n	19578 <_svfiprintf_r+0x44>
   196a8:	425b      	negs	r3, r3
   196aa:	60eb      	str	r3, [r5, #12]
   196ac:	2302      	movs	r3, #2
   196ae:	430b      	orrs	r3, r1
   196b0:	602b      	str	r3, [r5, #0]
   196b2:	e7c0      	b.n	19636 <_svfiprintf_r+0x102>
   196b4:	434b      	muls	r3, r1
   196b6:	3401      	adds	r4, #1
   196b8:	189b      	adds	r3, r3, r2
   196ba:	2001      	movs	r0, #1
   196bc:	e7a0      	b.n	19600 <_svfiprintf_r+0xcc>
   196be:	2301      	movs	r3, #1
   196c0:	425b      	negs	r3, r3
   196c2:	e7c7      	b.n	19654 <_svfiprintf_r+0x120>
   196c4:	2300      	movs	r3, #0
   196c6:	0014      	movs	r4, r2
   196c8:	200a      	movs	r0, #10
   196ca:	001a      	movs	r2, r3
   196cc:	606b      	str	r3, [r5, #4]
   196ce:	7821      	ldrb	r1, [r4, #0]
   196d0:	3930      	subs	r1, #48	; 0x30
   196d2:	2909      	cmp	r1, #9
   196d4:	d903      	bls.n	196de <_svfiprintf_r+0x1aa>
   196d6:	2b00      	cmp	r3, #0
   196d8:	d0bd      	beq.n	19656 <_svfiprintf_r+0x122>
   196da:	9207      	str	r2, [sp, #28]
   196dc:	e7bb      	b.n	19656 <_svfiprintf_r+0x122>
   196de:	4342      	muls	r2, r0
   196e0:	3401      	adds	r4, #1
   196e2:	1852      	adds	r2, r2, r1
   196e4:	2301      	movs	r3, #1
   196e6:	e7f2      	b.n	196ce <_svfiprintf_r+0x19a>
   196e8:	3307      	adds	r3, #7
   196ea:	e7d5      	b.n	19698 <_svfiprintf_r+0x164>
   196ec:	ab05      	add	r3, sp, #20
   196ee:	9300      	str	r3, [sp, #0]
   196f0:	003a      	movs	r2, r7
   196f2:	4b11      	ldr	r3, [pc, #68]	; (19738 <_svfiprintf_r+0x204>)
   196f4:	0029      	movs	r1, r5
   196f6:	9802      	ldr	r0, [sp, #8]
   196f8:	e000      	b.n	196fc <_svfiprintf_r+0x1c8>
   196fa:	bf00      	nop
   196fc:	9003      	str	r0, [sp, #12]
   196fe:	9b03      	ldr	r3, [sp, #12]
   19700:	3301      	adds	r3, #1
   19702:	d1cc      	bne.n	1969e <_svfiprintf_r+0x16a>
   19704:	89bb      	ldrh	r3, [r7, #12]
   19706:	980b      	ldr	r0, [sp, #44]	; 0x2c
   19708:	065b      	lsls	r3, r3, #25
   1970a:	d400      	bmi.n	1970e <_svfiprintf_r+0x1da>
   1970c:	e729      	b.n	19562 <_svfiprintf_r+0x2e>
   1970e:	2001      	movs	r0, #1
   19710:	4240      	negs	r0, r0
   19712:	e726      	b.n	19562 <_svfiprintf_r+0x2e>
   19714:	ab05      	add	r3, sp, #20
   19716:	9300      	str	r3, [sp, #0]
   19718:	003a      	movs	r2, r7
   1971a:	4b07      	ldr	r3, [pc, #28]	; (19738 <_svfiprintf_r+0x204>)
   1971c:	0029      	movs	r1, r5
   1971e:	9802      	ldr	r0, [sp, #8]
   19720:	f7fe ffde 	bl	186e0 <_printf_i>
   19724:	e7ea      	b.n	196fc <_svfiprintf_r+0x1c8>
   19726:	46c0      	nop			; (mov r8, r8)
   19728:	0001b19c 	.word	0x0001b19c
   1972c:	0001b1a2 	.word	0x0001b1a2
   19730:	0001b1a6 	.word	0x0001b1a6
   19734:	00000000 	.word	0x00000000
   19738:	00019471 	.word	0x00019471

0001973c <_putc_r>:
   1973c:	b570      	push	{r4, r5, r6, lr}
   1973e:	0006      	movs	r6, r0
   19740:	000d      	movs	r5, r1
   19742:	0014      	movs	r4, r2
   19744:	2800      	cmp	r0, #0
   19746:	d004      	beq.n	19752 <_putc_r+0x16>
   19748:	6983      	ldr	r3, [r0, #24]
   1974a:	2b00      	cmp	r3, #0
   1974c:	d101      	bne.n	19752 <_putc_r+0x16>
   1974e:	f7ff fc97 	bl	19080 <__sinit>
   19752:	4b12      	ldr	r3, [pc, #72]	; (1979c <_putc_r+0x60>)
   19754:	429c      	cmp	r4, r3
   19756:	d111      	bne.n	1977c <_putc_r+0x40>
   19758:	6874      	ldr	r4, [r6, #4]
   1975a:	68a3      	ldr	r3, [r4, #8]
   1975c:	3b01      	subs	r3, #1
   1975e:	60a3      	str	r3, [r4, #8]
   19760:	2b00      	cmp	r3, #0
   19762:	da05      	bge.n	19770 <_putc_r+0x34>
   19764:	69a2      	ldr	r2, [r4, #24]
   19766:	4293      	cmp	r3, r2
   19768:	db12      	blt.n	19790 <_putc_r+0x54>
   1976a:	b2eb      	uxtb	r3, r5
   1976c:	2b0a      	cmp	r3, #10
   1976e:	d00f      	beq.n	19790 <_putc_r+0x54>
   19770:	6823      	ldr	r3, [r4, #0]
   19772:	b2e8      	uxtb	r0, r5
   19774:	1c5a      	adds	r2, r3, #1
   19776:	6022      	str	r2, [r4, #0]
   19778:	701d      	strb	r5, [r3, #0]
   1977a:	bd70      	pop	{r4, r5, r6, pc}
   1977c:	4b08      	ldr	r3, [pc, #32]	; (197a0 <_putc_r+0x64>)
   1977e:	429c      	cmp	r4, r3
   19780:	d101      	bne.n	19786 <_putc_r+0x4a>
   19782:	68b4      	ldr	r4, [r6, #8]
   19784:	e7e9      	b.n	1975a <_putc_r+0x1e>
   19786:	4b07      	ldr	r3, [pc, #28]	; (197a4 <_putc_r+0x68>)
   19788:	429c      	cmp	r4, r3
   1978a:	d1e6      	bne.n	1975a <_putc_r+0x1e>
   1978c:	68f4      	ldr	r4, [r6, #12]
   1978e:	e7e4      	b.n	1975a <_putc_r+0x1e>
   19790:	0022      	movs	r2, r4
   19792:	0029      	movs	r1, r5
   19794:	0030      	movs	r0, r6
   19796:	f7ff faa7 	bl	18ce8 <__swbuf_r>
   1979a:	e7ee      	b.n	1977a <_putc_r+0x3e>
   1979c:	0001b1f0 	.word	0x0001b1f0
   197a0:	0001b210 	.word	0x0001b210
   197a4:	0001b1d0 	.word	0x0001b1d0

000197a8 <_sbrk_r>:
   197a8:	2300      	movs	r3, #0
   197aa:	b570      	push	{r4, r5, r6, lr}
   197ac:	4c06      	ldr	r4, [pc, #24]	; (197c8 <_sbrk_r+0x20>)
   197ae:	0005      	movs	r5, r0
   197b0:	0008      	movs	r0, r1
   197b2:	6023      	str	r3, [r4, #0]
   197b4:	f7ee f824 	bl	7800 <_sbrk>
   197b8:	1c43      	adds	r3, r0, #1
   197ba:	d103      	bne.n	197c4 <_sbrk_r+0x1c>
   197bc:	6823      	ldr	r3, [r4, #0]
   197be:	2b00      	cmp	r3, #0
   197c0:	d000      	beq.n	197c4 <_sbrk_r+0x1c>
   197c2:	602b      	str	r3, [r5, #0]
   197c4:	bd70      	pop	{r4, r5, r6, pc}
   197c6:	46c0      	nop			; (mov r8, r8)
   197c8:	200041f4 	.word	0x200041f4

000197cc <_raise_r>:
   197cc:	b570      	push	{r4, r5, r6, lr}
   197ce:	0004      	movs	r4, r0
   197d0:	000d      	movs	r5, r1
   197d2:	291f      	cmp	r1, #31
   197d4:	d904      	bls.n	197e0 <_raise_r+0x14>
   197d6:	2316      	movs	r3, #22
   197d8:	6003      	str	r3, [r0, #0]
   197da:	2001      	movs	r0, #1
   197dc:	4240      	negs	r0, r0
   197de:	bd70      	pop	{r4, r5, r6, pc}
   197e0:	6c43      	ldr	r3, [r0, #68]	; 0x44
   197e2:	2b00      	cmp	r3, #0
   197e4:	d004      	beq.n	197f0 <_raise_r+0x24>
   197e6:	008a      	lsls	r2, r1, #2
   197e8:	189b      	adds	r3, r3, r2
   197ea:	681a      	ldr	r2, [r3, #0]
   197ec:	2a00      	cmp	r2, #0
   197ee:	d108      	bne.n	19802 <_raise_r+0x36>
   197f0:	0020      	movs	r0, r4
   197f2:	f000 f831 	bl	19858 <_getpid_r>
   197f6:	002a      	movs	r2, r5
   197f8:	0001      	movs	r1, r0
   197fa:	0020      	movs	r0, r4
   197fc:	f000 f81a 	bl	19834 <_kill_r>
   19800:	e7ed      	b.n	197de <_raise_r+0x12>
   19802:	2000      	movs	r0, #0
   19804:	2a01      	cmp	r2, #1
   19806:	d0ea      	beq.n	197de <_raise_r+0x12>
   19808:	1c51      	adds	r1, r2, #1
   1980a:	d103      	bne.n	19814 <_raise_r+0x48>
   1980c:	2316      	movs	r3, #22
   1980e:	3001      	adds	r0, #1
   19810:	6023      	str	r3, [r4, #0]
   19812:	e7e4      	b.n	197de <_raise_r+0x12>
   19814:	2400      	movs	r4, #0
   19816:	0028      	movs	r0, r5
   19818:	601c      	str	r4, [r3, #0]
   1981a:	4790      	blx	r2
   1981c:	0020      	movs	r0, r4
   1981e:	e7de      	b.n	197de <_raise_r+0x12>

00019820 <raise>:
   19820:	b510      	push	{r4, lr}
   19822:	4b03      	ldr	r3, [pc, #12]	; (19830 <raise+0x10>)
   19824:	0001      	movs	r1, r0
   19826:	6818      	ldr	r0, [r3, #0]
   19828:	f7ff ffd0 	bl	197cc <_raise_r>
   1982c:	bd10      	pop	{r4, pc}
   1982e:	46c0      	nop			; (mov r8, r8)
   19830:	2000002c 	.word	0x2000002c

00019834 <_kill_r>:
   19834:	2300      	movs	r3, #0
   19836:	b570      	push	{r4, r5, r6, lr}
   19838:	4c06      	ldr	r4, [pc, #24]	; (19854 <_kill_r+0x20>)
   1983a:	0005      	movs	r5, r0
   1983c:	0008      	movs	r0, r1
   1983e:	0011      	movs	r1, r2
   19840:	6023      	str	r3, [r4, #0]
   19842:	f7ed fffd 	bl	7840 <_kill>
   19846:	1c43      	adds	r3, r0, #1
   19848:	d103      	bne.n	19852 <_kill_r+0x1e>
   1984a:	6823      	ldr	r3, [r4, #0]
   1984c:	2b00      	cmp	r3, #0
   1984e:	d000      	beq.n	19852 <_kill_r+0x1e>
   19850:	602b      	str	r3, [r5, #0]
   19852:	bd70      	pop	{r4, r5, r6, pc}
   19854:	200041f4 	.word	0x200041f4

00019858 <_getpid_r>:
   19858:	b510      	push	{r4, lr}
   1985a:	f7ed fff2 	bl	7842 <_getpid>
   1985e:	bd10      	pop	{r4, pc}

00019860 <__sread>:
   19860:	b570      	push	{r4, r5, r6, lr}
   19862:	000c      	movs	r4, r1
   19864:	250e      	movs	r5, #14
   19866:	5f49      	ldrsh	r1, [r1, r5]
   19868:	f000 f8ae 	bl	199c8 <_read_r>
   1986c:	2800      	cmp	r0, #0
   1986e:	db03      	blt.n	19878 <__sread+0x18>
   19870:	6d63      	ldr	r3, [r4, #84]	; 0x54
   19872:	181b      	adds	r3, r3, r0
   19874:	6563      	str	r3, [r4, #84]	; 0x54
   19876:	bd70      	pop	{r4, r5, r6, pc}
   19878:	89a3      	ldrh	r3, [r4, #12]
   1987a:	4a02      	ldr	r2, [pc, #8]	; (19884 <__sread+0x24>)
   1987c:	4013      	ands	r3, r2
   1987e:	81a3      	strh	r3, [r4, #12]
   19880:	e7f9      	b.n	19876 <__sread+0x16>
   19882:	46c0      	nop			; (mov r8, r8)
   19884:	ffffefff 	.word	0xffffefff

00019888 <__swrite>:
   19888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1988a:	001f      	movs	r7, r3
   1988c:	898b      	ldrh	r3, [r1, #12]
   1988e:	0005      	movs	r5, r0
   19890:	000c      	movs	r4, r1
   19892:	0016      	movs	r6, r2
   19894:	05db      	lsls	r3, r3, #23
   19896:	d505      	bpl.n	198a4 <__swrite+0x1c>
   19898:	230e      	movs	r3, #14
   1989a:	5ec9      	ldrsh	r1, [r1, r3]
   1989c:	2200      	movs	r2, #0
   1989e:	2302      	movs	r3, #2
   198a0:	f000 f874 	bl	1998c <_lseek_r>
   198a4:	89a3      	ldrh	r3, [r4, #12]
   198a6:	4a05      	ldr	r2, [pc, #20]	; (198bc <__swrite+0x34>)
   198a8:	0028      	movs	r0, r5
   198aa:	4013      	ands	r3, r2
   198ac:	81a3      	strh	r3, [r4, #12]
   198ae:	0032      	movs	r2, r6
   198b0:	230e      	movs	r3, #14
   198b2:	5ee1      	ldrsh	r1, [r4, r3]
   198b4:	003b      	movs	r3, r7
   198b6:	f000 f81f 	bl	198f8 <_write_r>
   198ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   198bc:	ffffefff 	.word	0xffffefff

000198c0 <__sseek>:
   198c0:	b570      	push	{r4, r5, r6, lr}
   198c2:	000c      	movs	r4, r1
   198c4:	250e      	movs	r5, #14
   198c6:	5f49      	ldrsh	r1, [r1, r5]
   198c8:	f000 f860 	bl	1998c <_lseek_r>
   198cc:	89a3      	ldrh	r3, [r4, #12]
   198ce:	1c42      	adds	r2, r0, #1
   198d0:	d103      	bne.n	198da <__sseek+0x1a>
   198d2:	4a05      	ldr	r2, [pc, #20]	; (198e8 <__sseek+0x28>)
   198d4:	4013      	ands	r3, r2
   198d6:	81a3      	strh	r3, [r4, #12]
   198d8:	bd70      	pop	{r4, r5, r6, pc}
   198da:	2280      	movs	r2, #128	; 0x80
   198dc:	0152      	lsls	r2, r2, #5
   198de:	4313      	orrs	r3, r2
   198e0:	81a3      	strh	r3, [r4, #12]
   198e2:	6560      	str	r0, [r4, #84]	; 0x54
   198e4:	e7f8      	b.n	198d8 <__sseek+0x18>
   198e6:	46c0      	nop			; (mov r8, r8)
   198e8:	ffffefff 	.word	0xffffefff

000198ec <__sclose>:
   198ec:	b510      	push	{r4, lr}
   198ee:	230e      	movs	r3, #14
   198f0:	5ec9      	ldrsh	r1, [r1, r3]
   198f2:	f000 f815 	bl	19920 <_close_r>
   198f6:	bd10      	pop	{r4, pc}

000198f8 <_write_r>:
   198f8:	b570      	push	{r4, r5, r6, lr}
   198fa:	0005      	movs	r5, r0
   198fc:	0008      	movs	r0, r1
   198fe:	0011      	movs	r1, r2
   19900:	2200      	movs	r2, #0
   19902:	4c06      	ldr	r4, [pc, #24]	; (1991c <_write_r+0x24>)
   19904:	6022      	str	r2, [r4, #0]
   19906:	001a      	movs	r2, r3
   19908:	f7ed ff52 	bl	77b0 <_write>
   1990c:	1c43      	adds	r3, r0, #1
   1990e:	d103      	bne.n	19918 <_write_r+0x20>
   19910:	6823      	ldr	r3, [r4, #0]
   19912:	2b00      	cmp	r3, #0
   19914:	d000      	beq.n	19918 <_write_r+0x20>
   19916:	602b      	str	r3, [r5, #0]
   19918:	bd70      	pop	{r4, r5, r6, pc}
   1991a:	46c0      	nop			; (mov r8, r8)
   1991c:	200041f4 	.word	0x200041f4

00019920 <_close_r>:
   19920:	2300      	movs	r3, #0
   19922:	b570      	push	{r4, r5, r6, lr}
   19924:	4c06      	ldr	r4, [pc, #24]	; (19940 <_close_r+0x20>)
   19926:	0005      	movs	r5, r0
   19928:	0008      	movs	r0, r1
   1992a:	6023      	str	r3, [r4, #0]
   1992c:	f7ed ff7a 	bl	7824 <_close>
   19930:	1c43      	adds	r3, r0, #1
   19932:	d103      	bne.n	1993c <_close_r+0x1c>
   19934:	6823      	ldr	r3, [r4, #0]
   19936:	2b00      	cmp	r3, #0
   19938:	d000      	beq.n	1993c <_close_r+0x1c>
   1993a:	602b      	str	r3, [r5, #0]
   1993c:	bd70      	pop	{r4, r5, r6, pc}
   1993e:	46c0      	nop			; (mov r8, r8)
   19940:	200041f4 	.word	0x200041f4

00019944 <_fstat_r>:
   19944:	2300      	movs	r3, #0
   19946:	b570      	push	{r4, r5, r6, lr}
   19948:	4c06      	ldr	r4, [pc, #24]	; (19964 <_fstat_r+0x20>)
   1994a:	0005      	movs	r5, r0
   1994c:	0008      	movs	r0, r1
   1994e:	0011      	movs	r1, r2
   19950:	6023      	str	r3, [r4, #0]
   19952:	f7ed ff6a 	bl	782a <_fstat>
   19956:	1c43      	adds	r3, r0, #1
   19958:	d103      	bne.n	19962 <_fstat_r+0x1e>
   1995a:	6823      	ldr	r3, [r4, #0]
   1995c:	2b00      	cmp	r3, #0
   1995e:	d000      	beq.n	19962 <_fstat_r+0x1e>
   19960:	602b      	str	r3, [r5, #0]
   19962:	bd70      	pop	{r4, r5, r6, pc}
   19964:	200041f4 	.word	0x200041f4

00019968 <_isatty_r>:
   19968:	2300      	movs	r3, #0
   1996a:	b570      	push	{r4, r5, r6, lr}
   1996c:	4c06      	ldr	r4, [pc, #24]	; (19988 <_isatty_r+0x20>)
   1996e:	0005      	movs	r5, r0
   19970:	0008      	movs	r0, r1
   19972:	6023      	str	r3, [r4, #0]
   19974:	f7ed ff5e 	bl	7834 <_isatty>
   19978:	1c43      	adds	r3, r0, #1
   1997a:	d103      	bne.n	19984 <_isatty_r+0x1c>
   1997c:	6823      	ldr	r3, [r4, #0]
   1997e:	2b00      	cmp	r3, #0
   19980:	d000      	beq.n	19984 <_isatty_r+0x1c>
   19982:	602b      	str	r3, [r5, #0]
   19984:	bd70      	pop	{r4, r5, r6, pc}
   19986:	46c0      	nop			; (mov r8, r8)
   19988:	200041f4 	.word	0x200041f4

0001998c <_lseek_r>:
   1998c:	b570      	push	{r4, r5, r6, lr}
   1998e:	0005      	movs	r5, r0
   19990:	0008      	movs	r0, r1
   19992:	0011      	movs	r1, r2
   19994:	2200      	movs	r2, #0
   19996:	4c06      	ldr	r4, [pc, #24]	; (199b0 <_lseek_r+0x24>)
   19998:	6022      	str	r2, [r4, #0]
   1999a:	001a      	movs	r2, r3
   1999c:	f7ed ff4c 	bl	7838 <_lseek>
   199a0:	1c43      	adds	r3, r0, #1
   199a2:	d103      	bne.n	199ac <_lseek_r+0x20>
   199a4:	6823      	ldr	r3, [r4, #0]
   199a6:	2b00      	cmp	r3, #0
   199a8:	d000      	beq.n	199ac <_lseek_r+0x20>
   199aa:	602b      	str	r3, [r5, #0]
   199ac:	bd70      	pop	{r4, r5, r6, pc}
   199ae:	46c0      	nop			; (mov r8, r8)
   199b0:	200041f4 	.word	0x200041f4

000199b4 <__malloc_lock>:
   199b4:	4770      	bx	lr

000199b6 <__malloc_unlock>:
   199b6:	4770      	bx	lr

000199b8 <_malloc_usable_size_r>:
   199b8:	1f0b      	subs	r3, r1, #4
   199ba:	681b      	ldr	r3, [r3, #0]
   199bc:	1f18      	subs	r0, r3, #4
   199be:	2b00      	cmp	r3, #0
   199c0:	da01      	bge.n	199c6 <_malloc_usable_size_r+0xe>
   199c2:	580b      	ldr	r3, [r1, r0]
   199c4:	18c0      	adds	r0, r0, r3
   199c6:	4770      	bx	lr

000199c8 <_read_r>:
   199c8:	b570      	push	{r4, r5, r6, lr}
   199ca:	0005      	movs	r5, r0
   199cc:	0008      	movs	r0, r1
   199ce:	0011      	movs	r1, r2
   199d0:	2200      	movs	r2, #0
   199d2:	4c06      	ldr	r4, [pc, #24]	; (199ec <_read_r+0x24>)
   199d4:	6022      	str	r2, [r4, #0]
   199d6:	001a      	movs	r2, r3
   199d8:	f7ed fec8 	bl	776c <_read>
   199dc:	1c43      	adds	r3, r0, #1
   199de:	d103      	bne.n	199e8 <_read_r+0x20>
   199e0:	6823      	ldr	r3, [r4, #0]
   199e2:	2b00      	cmp	r3, #0
   199e4:	d000      	beq.n	199e8 <_read_r+0x20>
   199e6:	602b      	str	r3, [r5, #0]
   199e8:	bd70      	pop	{r4, r5, r6, pc}
   199ea:	46c0      	nop			; (mov r8, r8)
   199ec:	200041f4 	.word	0x200041f4

000199f0 <sysfont_glyphs>:
   199f0:	00000000 20000000 20202020 50502000     .......     . PP
   19a00:	00000050 f8505000 5050f850 70a07820     P....PP.P.PP x.p
   19a10:	c020f028 402010c8 90601898 90a840a0     (. ... @..`..@..
   19a20:	40206068 00000000 40402010 40102040     h` @..... @@@ .@
   19a30:	10101020 50004020 5020f820 20200000      ... @.P . P..  
   19a40:	002020f8 00000000 00402060 00f80000     .  .....` @.....
   19a50:	00000000 60000000 10080060 00804020     .......``... @..
   19a60:	a8988870 207088c8 20202060 88707020     p.....p `    pp.
   19a70:	40201008 2010f8f8 70880810 90503010     .. @... ...p.0P.
   19a80:	f81010f8 0808f080 40307088 8888f080     .........p0@....
   19a90:	1008f870 40404020 70888870 70708888     p... @@@p..p..pp
   19aa0:	08788888 60006010 60600060 60600000     ..x..`.``.``..``
   19ab0:	40206000 40201008 00081020 f800f800     .` @.. @ .......
   19ac0:	40800000 40201020 08887080 20002010     ...@ . @.p... . 
   19ad0:	68088870 7070a8a8 f8888888 88f08888     p..h..pp........
   19ae0:	8888f088 808870f0 70888080 888890e0     .....p.....p....
   19af0:	f8e09088 80f08080 80f8f880 8080e080     ................
   19b00:	80887080 70889880 f8888888 70888888     .p.....p.......p
   19b10:	20202020 10387020 90101010 a0908860          p8.....`...
   19b20:	8890a0c0 80808080 88f88080 8888a8d8     ................
   19b30:	88888888 8898a8c8 88887088 70888888     .........p.....p
   19b40:	f08888f0 70808080 a8888888 88f06890     .......p.....h..
   19b50:	90a0f088 80807888 f0080870 202020f8     .....x..p....   
   19b60:	88202020 88888888 88887088 50888888        ......p.....P
   19b70:	88888820 88d8a8a8 20508888 88888850      .........P P...
   19b80:	20205088 08f82020 80402010 202038f8     .P    ... @..8  
   19b90:	38202020 20408000 e0000810 20202020        8..@ ....    
   19ba0:	5020e020 00000088 00000000 f8000000      . P............
   19bb0:	00102040 00000000 78087000 80807888     @ .......p.x.x..
   19bc0:	8888c8b0 700000f0 70888080 98680808     .......p...p..h.
   19bd0:	00788888 f8887000 48307080 4040e040     ..x..p...p0H@.@@
   19be0:	78000040 30087888 c8b08080 20888888     @..x.x.0....... 
   19bf0:	20206000 00107020 90101030 48404060     .`   p..0...`@@H
   19c00:	48506050 20202060 00702020 a8a8d000     P`PH`     p.....
   19c10:	00008888 8888c8b0 70000088 70888888     ...........p...p
   19c20:	88f00000 008080f0 78986800 00000808     .........h.x....
   19c30:	8080c8b0 70000080 f0087080 40e04040     .......p.p..@@.@
   19c40:	00304840 88888800 00006898 50888888     @H0......h.....P
   19c50:	88000020 50a8a888 50880000 00885020      ......P...P P..
   19c60:	78888800 00007008 402010f8 202010f8     ...x.p.... @..  
   19c70:	10202040 20202020 40202020 20102020     @  .       @  . 
   19c80:	ffff4020 00004fee 00004fee 00004fca      @...O...O...O..
   19c90:	00004fee 00004fca 00004fb0 00004fb0     .O...O...O...O..
   19ca0:	00004fee 00004fee 00004fee 00004fee     .O...O...O...O..
   19cb0:	00004fee 00004fee 00004fee 00004fee     .O...O...O...O..
   19cc0:	00004fee 00004fee 00004fee 00004fee     .O...O...O...O..
   19cd0:	00004fee 00004fee 00004fee 00004fee     .O...O...O...O..
   19ce0:	00004fee 00004fee 00004fee 00004fca     .O...O...O...O..
   19cf0:	00004fee 00004fca 00004fee 00004fee     .O...O...O...O..
   19d00:	00004fee 00004fee 00004fee 00004fee     .O...O...O...O..
   19d10:	00004fee 00004fee 00004fee 00004fee     .O...O...O...O..
   19d20:	00004fee 00004fee 00004fee 00004fee     .O...O...O...O..
   19d30:	00004fee 00004fee 00004fee 00004fee     .O...O...O...O..
   19d40:	00004fee 00004fee 00004fee 00004fee     .O...O...O...O..
   19d50:	00004fee 00004fee 00004fee 00004fee     .O...O...O...O..
   19d60:	00004fee 00004fee 00004fee 00004fee     .O...O...O...O..
   19d70:	00004fee 00004fee 00004fee 00004fee     .O...O...O...O..
   19d80:	00004fee 00004fca 00004fca 00004fd2     .O...O...O...O..
   19d90:	00004fd2 00004fd2 00004fd2 42000000     .O...O...O.....B
   19da0:	42000400 42000800 42000c00 42001000     ...B...B...B...B
   19db0:	43000400 00006a8e 00006a8a 00006a8a     ...C.j...j...j..
   19dc0:	00006af0 00006af0 00006aa4 00006a94     .j...j...j...j..
   19dd0:	00006aaa 00006ade 00006c0c 00006bec     .j...j...l...k..
   19de0:	00006bec 00006c86 00006bfe 00006c1a     .k...l...k...l..
   19df0:	00006bf0 00006c28 00006c6a 00006cc4     .k..(l..jl...l..
   19e00:	00006d06 00006d06 00006d06 00006cb6     .m...m...m...l..
   19e10:	00006cd2 00006ca8 00006ce0 00006cf6     .l...l...l...l..
   19e20:	00007402 000074f8 00007502 0000750c     .t...t...u...u..
   19e30:	00007516 00007548 00007552 0000755c     .u..Hu..Ru..\u..
   19e40:	00007566 00007570 42002000 42002400     fu..pu... .B.$.B
   19e50:	42002800 42002c00 43000800 00000002     .(.B.,.B...C....
   19e60:	00000100 00000002 00000200 00000002     ................
   19e70:	00000400 00000002 00000800 00000003     ................
   19e80:	00000004 00007a82 00007a8c 00007a96     .....z...z...z..
   19e90:	00007aa0 00007aaa 00007b9e 00007ac2     .z...z...{...z..
   19ea0:	00007ace 00007ada 00007ae6 00007af2     .z...z...z...z..
   19eb0:	00007afc 00007b08 00007b12 00007b5e     .z...{...{..^{..
   19ec0:	00007b1c 00007b28 00007b34 00007b40     .{..({..4{..@{..
   19ed0:	00007b52 00007ab6 00007b9e 00007b6a     R{...z...{..j{..
   19ee0:	00007b9e 00007b9e 00007b9e 00007a7e     .{...{...{..~z..
   19ef0:	00007b9e 00007b9e 00007b76 00007b86     .{...{..v{...{..
   19f00:	00007b92 00007c44 00007c4e 00007c78     .{..D|..N|..x|..
   19f10:	00007c82 00007c8c 00007d9e 00007cac     .|...|...}...|..
   19f20:	00007cc0 00007cd6 00007ce2 00007cf6     .|...|...|...|..
   19f30:	00007d00 00007d16 00007d1c 00007d9e     .}...}...}...}..
   19f40:	00007d26 00007d3a 00007d50 00007d66     &}..:}..P}..f}..
   19f50:	00007d74 00007c98 00007d9e 00007d88     t}...|...}...}..
   19f60:	00007d9e 00007d9e 00007d9e 00007bda     .}...}...}...{..
   19f70:	00007d9e 00007d9e 00007be8 fffffffd     .}...}...{......

00019f80 <radioTaskHandlers>:
   19f80:	00009429 00009529 00009201 00008e19     )...)...........
   19f90:	00008585 72420a0d 6364616f 20747361     ......Broadcast 
   19fa0:	6c696146 000d6465 6f724220 61636461     Failed.. Broadca
   19fb0:	46207473 656c6961 ffff0064 6e6e6f43     st Failed...Conn
   19fc0:	69746365 5020676e 20726565 0a206e6f     ecting Peer on .
   19fd0:	61684320 6c656e6e 00000020 6f430a0d      Channel .....Co
   19fe0:	63656e6e 676e6974 65655020 6e6f2072     nnecting Peer on
   19ff0:	61684320 6c656e6e 00000020 00006425      Channel ...%d..
   1a000:	6e6e6f43 65746365 65502064 6f207265     Connected Peer o
   1a010:	200a206e 6e616843 206c656e 00000000     n . Channel ....
   1a020:	6f430a0d 63656e6e 20646574 72656550     ..Connected Peer
   1a030:	206e6f20 6e616843 206c656e ffffff00      on Channel ....
   1a040:	65530a0d 7463656c 206e6f69 6320666f     ..Selection of c
   1a050:	6e6e6168 00206c65 20736920 20746f6e     hannel . is not 
   1a060:	70707573 6574726f 6e692064 72756320     supported in cur
   1a070:	746e6572 6e6f6320 75676966 69746172     rent configurati
   1a080:	0d2e6e6f ffffff00 706d6953 4c20656c     on......Simple L
   1a090:	2061526f 52415453 6d654420 6e6f206f     oRa STAR Demo on
   1a0a0:	53200a20 33524d41 6f4e2034 00206564      . SAMR34 Node .
   1a0b0:	2d2d0d0a 2d2d2d2d 2d2d2d2d 2d2d2d2d     ..--------------
   1a0c0:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   1a0d0:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   1a0e0:	2d2d2d2d 0a2d2d2d 2d2d2d0d 2d2d2d2d     -------..-------
   1a0f0:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   1a100:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   1a110:	2d2d2d2d 2d2d2d2d 2d2d2d2d 00002d2d     --------------..
   1a120:	74530a0d 69747261 4e20676e 2065646f     ..Starting Node 
   1a130:	666f2031 6d695320 20656c70 6f6d6544     1 of Simple Demo
   1a140:	726f6620 526f4c20 74532061 53207261      for LoRa Star S
   1a150:	6b636174 2e2e2e20 00000000 75460a0d     tack .........Fu
   1a160:	46206c6c 74636e75 206e6f69 69766544     ll Function Devi
   1a170:	28206563 29444646 65706f20 69746172     ce (FFD) operati
   1a180:	00736e6f 20200a0d 52202020 72542046     ons...     RF Tr
   1a190:	63736e61 65766965 53203a72 32315f58     ansceiver: SX_12
   1a1a0:	00003637 20200a0d 44202020 206f6d65     76....     Demo 
   1a1b0:	74736e49 74637572 3a6e6f69 00000000     Instruction:....
   1a1c0:	20200a0d 20202020 20202020 20202020     ..              
   1a1d0:	20202020 50202020 7265776f 206e6f20            Power on 
   1a1e0:	20656874 72616f62 6e752064 206c6974     the board until 
   1a1f0:	2044454c 696c2031 73746867 00707520     LED 1 lights up.
   1a200:	20200a0d 20202020 20202020 20202020     ..              
   1a210:	20202020 74202020 6e69206f 61636964            to indica
   1a220:	63206574 656e6e6f 6e697463 69772067     te connecting wi
   1a230:	70206874 2e726565 00000000 20200a0d     th peer.......  
   1a240:	20202020 20202020 20202020 20202020                     
   1a250:	50202020 20687375 74747542 31206e6f        Push Button 1
   1a260:	206f7420 616f7262 73616364 656d2074      to broadcast me
   1a270:	67617373 00002e65 20200a0d 20202020     ssage.....      
   1a280:	20202020 20202020 20202020 4c202020                    L
   1a290:	31204445 6c697720 6562206c 676f7420     ED 1 will be tog
   1a2a0:	64656c67 6f707520 6572206e 76696563     gled upon receiv
   1a2b0:	20676e69 7373656d 73656761 0000202e     ing messages. ..
   1a2c0:	000d0a0d 69726550 6369646f 61725420     ....Periodic Tra
   1a2d0:	696d736e 6f697373 203d206e 62616e45     nsmission = Enab
   1a2e0:	000d656c 79747544 63794320 676e696c     le..Duty Cycling
   1a2f0:	70757320 74726f70 44203d20 62617369      support = Disab
   1a300:	000d656c 2054424c 70707573 2074726f     le..LBT support 
   1a310:	6944203d 6c626173 ff000d65 75636553     = Disable...Secu
   1a320:	20646572 00000000 616f7242 73616364     red ....Broadcas
   1a330:	61502074 74656b63 74697720 53522068     t Packet with RS
   1a340:	00204953 63696e55 20747361 6b636150     SI .Unicast Pack
   1a350:	77207465 20687469 49535352 00000020     et with RSSI ...
   1a360:	78323025 00000000 6f726620 0000206d     %02x.... from ..
   1a370:	00007825 ff00203a 6e550a0d 73616369     %x..: ....Unicas
   1a380:	61462074 64656c69 0000000d 696e5520     t Failed.... Uni
   1a390:	74736163 69614620 0064656c 3a204350     cast Failed.PC :
   1a3a0:	20305753 42206f74 64616f72 74736163     SW0 to Broadcast
   1a3b0:	00000000 3a305753 6e552020 73616369     ....SW0:  Unicas
   1a3c0:	420a2074 4f545455 203a314e 7478654e     t .BUTTON1: Next
   1a3d0:	646f4e20 ffff0065 61746144 63615020      Node...Data Pac
   1a3e0:	2074656b 6d6f7266 6441200a 73657264     ket from. Addres
   1a3f0:	30253a73 30257832 30257832 ff007832     s:%02x%02x%02x..
   1a400:	6b636150 72207465 69656365 20646576     Packet received 
   1a410:	6d6f7266 68746f20 53207265 6372756f     from other Sourc
   1a420:	41502065 4449204e 30203a20 25782578     e PAN ID : 0x%x%
   1a430:	000a0d78 7461440a 6f432061 7269666e     x....Data Confir
   1a440:	48203a6d 6c646e61 25203a65 74732064     m: Handle: %d st
   1a450:	73757461 2064253a ff000a0d 58323025     atus:%d ....%02X
   1a460:	00000000 74614420 6320736f 61686361     .... Datos cacha
   1a470:	20736f64 20726f70 65746e69 63707572     dos por interupc
   1a480:	3a6e6f69 33302520 44202c64 736f7461     ion: %03d, Datos
   1a490:	6c656420 6e656d20 656a6173 3025203a      del mensaje: %0
   1a4a0:	202c6433 00000000 63656863 6d75736b     3d, ....checksum
   1a4b0:	6c616320 616c7563 203a6f64 58323025      calculado: %02X
   1a4c0:	6863202c 736b6365 65206d75 736d206e     , checksum en ms
   1a4d0:	25203a6a 0d583230 ffff000a 65530a0d     j: %02X.......Se
   1a4e0:	6e69646e 6e752067 73616369 656d2074     nding unicast me
   1a4f0:	67617373 6f742065 4e415020 3230252d     ssage to PAN-%02
   1a500:	32302578 32302578 000a0d78 65530a0d     x%02x%02x.....Se
   1a510:	6e69646e 72622067 6364616f 20747361     nding broadcast 
   1a520:	7373656d 0d656761 00000000 4d207854     message.....Tx M
   1a530:	61737365 3a736567 20642520 7852202d     essages: %d - Rx
   1a540:	73654d20 65676173 25203a73 000a0d64      Messages: %d...
   1a550:	6c6c6548 726f576f 6548646c 576f6c6c     HelloWorldHelloW
   1a560:	646c726f 6c6c6548 726f576f 6548646c     orldHelloWorldHe
   1a570:	576f6c6c 646c726f 00000000 69726550     lloWorld....Peri
   1a580:	6369646f 61727420 696d736e 6f697373     odic transmissio
   1a590:	6974206e 2072656d 6f6c6572 64656461     n timer reloaded
   1a5a0:	206f7420 6d206425 000a0d73 3a305753      to %d ms...SW0:
   1a5b0:	64323025 3230252d 32302578 32302578     %02d-%02x%02x%02
   1a5c0:	656d2d78 55420a20 4e4f5454 43203a31     x-me .BUTTON1: C
   1a5d0:	676e6168 6f6e2065 00006564 3a305753     hange node..SW0:
   1a5e0:	64323025 3230252d 32302578 32302578     %02d-%02x%02x%02
   1a5f0:	420a2078 4f545455 203a314e 6e616843     x .BUTTON1: Chan
   1a600:	6e206567 0065646f 6572500a 756f6976     ge node..Previou
   1a610:	72542073 61736e61 6f697463 7369206e     s Transaction is
   1a620:	676e6f20 676e696f 00000d0a 656c6f52      ongoing....Role
   1a630:	3230253a 00000064 444e450a 5645445f     :%02d....END_DEV
   1a640:	53454349 30253a20 ff006432 6f430a0d     ICES :%02d....Co
   1a650:	63656e6e 704f2074 74617265 206e6f69     nnect Operation 
   1a660:	74617453 203a7375 000a6425 74530a0d     Status: %d....St
   1a670:	65747261 69572064 656c6572 43207373     arted Wireless C
   1a680:	756d6d6f 6163696e 6e6f6974 206e6f20     ommunication on 
   1a690:	6e616843 206c656e 0a0d7525 ffffff00     Channel %u......
   1a6a0:	6f636552 63656e6e 0a646574 ffff000d     Reconnected.....
   1a6b0:	2d2d0a0d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ..--------------
   1a6c0:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   1a6d0:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   1a6e0:	2d2d2d2d 0d2d2d2d 00000000 50204652     -------.....RF P
   1a6f0:	6d617261 72657465 00000d73 54202d20     arameters... - T
   1a700:	756f2078 74757074 776f7020 203a7265     x output power: 
   1a710:	0a0d6425 00000000 50202d20 6f622041     %d...... - PA bo
   1a720:	3a74736f 0d642520 0000000a 53202d20     ost: %d..... - S
   1a730:	61657270 676e6964 63616620 3a726f74     preading factor:
   1a740:	25465320 000a0d64 42202d20 77646e61      SF%d... - Bandw
   1a750:	68746469 32312820 7a486b35 202c373d     idth (125kHz=7, 
   1a760:	6b303532 383d7a48 3035202c 7a486b30     250kHz=8, 500kHz
   1a770:	3a29393d 00642520 4d205854 61737365     =9): %d.TX Messa
   1a780:	3a736567 20642520 2058520a 7373654d     ges: %d .RX Mess
   1a790:	73656761 6425203a ffffff00 626d756e     ages: %d....numb
   1a7a0:	664f7265 65747942 00000073 732f2e2e     erOfBytes...../s
   1a7b0:	412f6372 742f4653 64726968 74726170     rc/ASF/thirdpart
   1a7c0:	69772f79 656c6572 4c2f7373 5f61526f     y/wireless/LoRa_
   1a7d0:	2f503250 76726573 73656369 7364702f     P2P/services/pds
   1a7e0:	6372732f 2f766e2f 764e5f44 0000632e     /src/nv/D_Nv.c..
   1a7f0:	72646461 20737365 44203d3c 5f564e5f     address <= D_NV_
   1a800:	4f4d454d 455f5952 0000444e 64646128     MEMORY_END..(add
   1a810:	73736572 6e202b20 65626d75 42664f72     ress + numberOfB
   1a820:	73657479 3d3c2029 5f442820 4d5f564e     ytes) <= (D_NV_M
   1a830:	524f4d45 4e455f59 202b2044 00295531     EMORY_END + 1U).
   1a840:	66666f28 20746573 756e202b 7265626d     (offset + number
   1a850:	7942664f 29736574 203d3c20 564e5f44     OfBytes) <= D_NV
   1a860:	4345535f 5f524f54 455a4953 ffffff00     _SECTOR_SIZE....

0001a870 <__func__.13289>:
   1a870:	764e5f44 6165525f 6d495f64 ff006c70     D_Nv_Read_Impl..

0001a880 <__func__.13302>:
   1a880:	764e5f44 6972575f 495f6574 006c706d     D_Nv_Write_Impl.

0001a890 <__func__.13314>:
   1a890:	764e5f44 6172455f 65536573 726f7463     D_Nv_EraseSector
   1a8a0:	706d495f ffff006c                       _Impl...

0001a8a8 <__func__.13327>:
   1a8a8:	706d6f43 44657261 00617461 68636163     CompareData.cach
   1a8b8:	3d212065 4c554e20 ffff004c 736c6166     e != NULL...fals
   1a8c8:	ffff0065 646e6946 6d657449 68636143     e...FindItemCach
   1a8d8:	64692865 3d3d2029 4c554e20 0000004c     e(id) == NULL...
   1a8e8:	74695f73 6f436d65 20746e75 414d203c     s_itemCount < MA
   1a8f8:	54495f58 435f4d45 544e554f ffffff00     X_ITEM_COUNT....
   1a908:	68636163 6c3e2d65 42747361 6b636f6c     cache->lastBlock
   1a918:	203d2120 30307830 00003030 732f2e2e      != 0x0000..../s
   1a928:	412f6372 742f4653 64726968 74726170     rc/ASF/thirdpart
   1a938:	69772f79 656c6572 4c2f7373 5f61526f     y/wireless/LoRa_
   1a948:	2f503250 76726573 73656369 7364702f     P2P/services/pds
   1a958:	6372732f 2f766e2f 764e5f53 6d61532d     /src/nv/S_Nv-Sam
   1a968:	2e313252 ffff0063 20646928 30203d21     R21.c...(id != 0
   1a978:	26202975 69282026 203c2064 30467830     u) && (id < 0xF0
   1a988:	29753030 20262620 65746928 6e654c6d     00u) && (itemLen
   1a998:	20687467 4d203d3c 495f5841 5f4d4554     gth <= MAX_ITEM_
   1a9a8:	474e454c 00294854 21206469 7530203d     LENGTH).id != 0u
   1a9b8:	ffffff00 20646928 30203d21 26202975     ....(id != 0u) &
   1a9c8:	70282026 61746144 203d2120 4c4c554e     & (pData != NULL
   1a9d8:	ffff0029                                )...

0001a9dc <__func__.13291>:
   1a9dc:	706d6f63 53746361 6f746365 6d695472     compactSectorTim
   1a9ec:	69467265 00646572                       erFired.

0001a9f4 <__func__.13327>:
   1a9f4:	646e6946 6d657449 68636143 ffff0065     FindItemCache...

0001aa04 <__func__.13334>:
   1aa04:	61657243 74496574 61436d65 00656863     CreateItemCache.

0001aa14 <__func__.13454>:
   1aa14:	706d6f43 53746361 6f746365 ffff0072     CompactSector...

0001aa24 <__func__.13474>:
   1aa24:	706d6f43 53746361 6f746365 4e664972     CompactSectorIfN
   1aa34:	65646565 ffff0064                       eeded...

0001aa3c <__func__.13481>:
   1aa3c:	706d6f43 49746361 006d6574              CompactItem.

0001aa48 <__func__.13515>:
   1aa48:	764e5f53 6574495f 696e496d 6d495f74     S_Nv_ItemInit_Im
   1aa58:	ff006c70                                pl..

0001aa5c <__func__.13528>:
   1aa5c:	764e5f53 6972575f 495f6574 006c706d     S_Nv_Write_Impl.

0001aa6c <__func__.13539>:
   1aa6c:	764e5f53 6165525f 6d495f64 ff006c70     S_Nv_Read_Impl..

0001aa7c <__func__.13544>:
   1aa7c:	764e5f53 6574495f 6e654c6d 5f687467     S_Nv_ItemLength_
   1aa8c:	6c706d49 ffffff00 20553028 69203d21     Impl....(0U != i
   1aa9c:	446d6574 72637365 6574692e 7a69536d     temDescr.itemSiz
   1aaac:	26202965 4e282026 204c4c55 69203d21     e) && (NULL != i
   1aabc:	446d6574 72637365 6574692e 7461446d     temDescr.itemDat
   1aacc:	00002961 732f2e2e 412f6372 742f4653     a)..../src/ASF/t
   1aadc:	64726968 74726170 69772f79 656c6572     hirdparty/wirele
   1aaec:	4c2f7373 5f61526f 2f503250 76726573     ss/LoRa_P2P/serv
   1aafc:	73656369 7364702f 6372732f 2f6c772f     ices/pds/src/wl/
   1ab0c:	64506c77 74614473 72655361 2e726576     wlPdsDataServer.
   1ab1c:	00000063 4e5f5328 65525f76 6e727574     c...(S_Nv_Return
   1ab2c:	756c6156 69445f65 746f4e64 73697845     Value_DidNotExis
   1ab3c:	3d3d2074 74657220 7c7c2029 5f532820     t == ret) || (S_
   1ab4c:	525f764e 72757465 6c61566e 4f5f6575     Nv_ReturnValue_O
   1ab5c:	3d3d206b 74657220 ffff0029              k == ret)...

0001ab68 <__func__.13204>:
   1ab68:	53736470 65726f74 6d657449 6b736154     pdsStoreItemTask
   1ab78:	646e6148 0072656c                       Handler.

0001ab80 <__func__.13224>:
   1ab80:	53736470 65726f74 6d657449 ffffff00     pdsStoreItem....
   1ab90:	20746572 53203d3d 5f764e5f 75746552     ret == S_Nv_Retu
   1aba0:	61566e72 5f65756c ff006b4f              rnValue_Ok..

0001abac <mySecurityKey>:
   1abac:	03020100 07060504 0b0a0908 0f0e0d0c     ................
   1abbc:	0000cf24 0000cf34 0000cf3a 0000cf40     $...4...:...@...
   1abcc:	0000cf46 0000cf4c 0000cf52 0000cf58     F...L...R...X...
   1abdc:	0000cf5e 0000cf64 0000cf6a 0000cf70     ^...d...j...p...
   1abec:	0000cf76 0000cf7c 0000cf82 0000cf88     v...|...........
   1abfc:	0000cf8e 0000cf94 0000cf9a 0000cfa0     ................
   1ac0c:	0000cfa6 0000cfac 0000cfb2 0000cfb8     ................
   1ac1c:	0000cfbe 0000cfc4 0000d108 0000d068     ............h...
   1ac2c:	0000d0e8 0000d108 0000d0e8 0000d108     ................
   1ac3c:	0000d108 0000d108 0000d068 0000d108     ........h.......
   1ac4c:	0000d108 0000d108 0000d108 0000d108     ................
   1ac5c:	0000d108 0000d108 0000d130 0a0d0a0d     ........0.......
   1ac6c:	4120794d 65726464 203a7373 00007830     My Address: 0x..
   1ac7c:	41502020 3a44494e 00783020 68432020       PANID: 0x.  Ch
   1ac8c:	656e6e61 00203a6c 6f430a0d 63656e6e     annel: ...Connec
   1ac9c:	6e6f6974 65500920 6f4c7265 6441676e     tion .PeerLongAd
   1acac:	73657264 50092073 49726565 206f666e     dress .PeerInfo 
   1acbc:	4f785209 6174536e 31737574 0000000d     .RxOnStatus1....
   1accc:	00090909 0000742f 0a0d0a0d 6e6e6f43     ..../t......Conn
   1acdc:	69746365 20206e6f 50202020 4c726565     ection     PeerL
   1acec:	41676e6f 65726464 20207373 50202020     ongAddress     P
   1acfc:	49726565 096f666e 6e4f7852 74617453     eerInfo.RxOnStat
   1ad0c:	000d7375 20202020 20202020 20202020     us..            
   1ad1c:	00000020 20202020 ffffff00 5f503250      ...    ....P2P_
   1ad2c:	4e4e4f43 49544345 525f4e4f 564f4d45     CONNECTION_REMOV
   1ad3c:	525f4c41 45555145 0a315453 ffff000d     AL_REQUEST1.....
   1ad4c:	41200a0d 54206b63 6f656d69 000d7475     .. Ack Timeout..
   1ad5c:	61747365 206e6520 65646f6d 6e617020     esta en mode pan
   1ad6c:	6f6f6320 6e696472 726f7461 00000000      coordinator....
   1ad7c:	6365520a 65766965 6f662064 72617772     .Received forwar
   1ad8c:	61502064 74656b63 71657220 74736575     d Packet request
   1ad9c:	00000d0a 69646e49 74636572 73656d20     ....Indirect mes
   1adac:	65676173 65755120 0a646575 ffff000d     sage Queued.....
   1adbc:	2d2d2d0a 2d2d2d2d 2d2d2d2d 2d2d2d2d     .---------------
   1adcc:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   1addc:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   1adec:	200d0a2d 20202020 20202020 43202020     -..            C
   1adfc:	656e6e6f 6f697463 6174206e 0a656c62     onnection table.
   1ae0c:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   1ae1c:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   1ae2c:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   1ae3c:	00000d0a 0944490a 69766544 41206563     .....ID.Device A
   1ae4c:	65726464 09207373 61747309 20737574     ddress ..status 
   1ae5c:	4e415009 20444920 ffffff00              .PAN ID ....

0001ae68 <AdvChannels433>:
   1ae68:	19d1b9d8 19d1b9d8 ff0c0101 19d4c718     ................
   1ae78:	19d4c718 ff0c0101 19d7d458 19d7d458     ........X...X...
   1ae88:	ff0c0101                                ....

0001ae8c <AdvChannels868>:
   1ae8c:	33be27a0 33be27a0 ff100101 33c134e0     .'.3.'.3.....4.3
   1ae9c:	33c134e0 ff100101 33c44220 33c44220     .4.3.... B.3 B.3
   1aeac:	ff100101                                ....

0001aeb0 <DefaultChannels433>:
   1aeb0:	50015001 ffff5001                       .P.P.P..

0001aeb8 <DefaultChannels868>:
   1aeb8:	50015001 ffff5001                       .P.P.P..

0001aec0 <SubBandDutyCycle868>:
   1aec0:	006403e8 03e80064 0064000a              ..d.d.....d.

0001aecc <SubBandParams433>:
   1aecc:	19cf0e40 19ea8580 00000000              @...........

0001aed8 <SubBandParams868>:
   1aed8:	337055c0 338eda40 00000000 338eda41     .Up3@..3....A..3
   1aee8:	33bca100 00000000 33bca101 33c5c8c0     ...3.......3...3
   1aef8:	00000000 33c74f60 33cef080 00000000     ....`O.3...3....
   1af08:	33d1fdc0 33d5ce50 00000000 33d691a0     ...3P..3.......3
   1af18:	33db2580 00000000                       .%.3....

0001af20 <AdvChannels923JP>:
   1af20:	3706ea00 3706ea00 ff100101 3709f740     ...7...7....@..7
   1af30:	3709f740 ff100101                       @..7....

0001af38 <DefaultChannels923JP>:
   1af38:	50015001                                .P.P

0001af3c <SubBandDutyCycleJP923>:
   1af3c:	000a0064                                d...

0001af40 <SubBandParamsJP923>:
   1af40:	36d61600 36f7a7c0 00000000 36fab500     ...6...6.......6
   1af50:	37502800 00000000                       .(P7....

0001af58 <AdvChannels920KR>:
   1af58:	36f62120 36f62120 ff0e0100 36f92e60      !.6 !.6....`..6
   1af68:	36f92e60 ff0e0100 36fc3ba0 36fc3ba0     `..6.....;.6.;.6
   1af78:	ff0e0100                                ....

0001af7c <DefaultChannels920KR>:
   1af7c:	50015001 ffff5001                       .P.P.P..

0001af84 <taskHandlers>:
   1af84:	00010ca5 000086fd 00011825 0000bd8d     ........%.......
   1af94:	00009b91                                ....

0001af98 <tc_interrupt_vectors.13447>:
   1af98:	00151211 ffffff00 00020028 20000028     ........(...(.. 
   1afa8:	00000000 20433249 76616c53 6f4e2065     ....I2C Slave No
   1afb8:	76412074 616c6961 00656c62 656d6954     t Available.Time
   1afc8:	2074756f 00000031 656d6954 2074756f     out 1...Timeout 
   1afd8:	00000032                                2...

0001afdc <lorawanHandlers>:
   1afdc:	000116e9 000115fd 000117ad              ............

0001afe8 <FskSyncWordBuff>:
   1afe8:	02c194c1                                         ...

0001afeb <macEndDevCmdInputLen>:
   1afeb:	04010402 01010500 05000004              ............

0001aff7 <macEndDevCmdReplyLen>:
   1aff7:	02010201 01010203 01000002 02020000     ................
   1b007:	0a080200                                         ..

0001b009 <maxEIRPTable>:
   1b009:	0d0c0a08 1412100e 1b1a1815 24211e1d     ..............!$
   1b019:	44ffffff 1400015c 2600015c 6800015c     ...D\...\..&\..h
   1b029:	2600015b 0a00015c 2600015c 6800015c     [..&\...\..&\..h
   1b039:	1400015b 1400015c 0a00015c 6800015c     [...\...\...\..h
   1b049:	7000015b 7000015b 7000015b 2c00015b     [..p[..p[..p[..,
   1b059:	1400015c 1400015c e800015c cc00015b     \...\...\...[...
   1b069:	e800015c 0a00015b e800015c cc00015b     \...[...\...[...
   1b079:	1400015c 1400015c 0a00015c cc00015c     \...\...\...\...
   1b089:	7000015c 7000015b 7000015b d600015b     \..p[..p[..p[...
   1b099:	c400015c 1400015f 1400015f 1200015f     \..._..._..._...
   1b0a9:	b600015f b600015f ac00015f 1200015f     _..._..._..._...
   1b0b9:	b600015f ac00015f b600015f 1200015f     _..._..._..._...
   1b0c9:	bc00015f bc00015f bc00015f 4c00015f     _..._..._..._..L
   1b0d9:	94000160 7600016d 3000016d 4e00016d     `...m..vm..0m..N
   1b0e9:	3000016c 6800016d 3000016d 4e00016d     l..0m..hm..0m..N
   1b0f9:	7600016c 7600016d 6800016d 4e00016d     l..vm..vm..hm..N
   1b109:	4600016c 4600016c 4600016c ac00016c     l..Fl..Fl..Fl...
   1b119:	f400016f b4000175 b4000174 b0000174     o...u...t...t...
   1b129:	cc000174 cc000175 be000175 b0000175     t...u...u...u...
   1b139:	cc000174 be000175 cc000175 b0000175     t...u...u...u...
   1b149:	d4000174 d4000175 d4000175 d8000175     t...u...u...u...
   1b159:	2c000177 6e756620 6f697463 00203a6e     w.., function: .
   1b169:	65737361 6f697472 2522206e 66202273     assertion "%s" f
   1b179:	656c6961 66203a64 20656c69 22732522     ailed: file "%s"
   1b189:	696c202c 2520656e 25732564 30000a73              , line %d%s%s..

0001b198 <_global_impure_ptr>:
   1b198:	20000030 2b302d23 6c680020 6665004c     0.. #-0+ .hlL.ef
   1b1a8:	47464567 32313000 36353433 41393837     gEFG.0123456789A
   1b1b8:	45444342 31300046 35343332 39383736     BCDEF.0123456789
   1b1c8:	64636261 ff006665                       abcdef..

0001b1d0 <__sf_fake_stderr>:
	...

0001b1f0 <__sf_fake_stdin>:
	...

0001b210 <__sf_fake_stdout>:
	...

0001b230 <_init>:
   1b230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b232:	46c0      	nop			; (mov r8, r8)
   1b234:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1b236:	bc08      	pop	{r3}
   1b238:	469e      	mov	lr, r3
   1b23a:	4770      	bx	lr

0001b23c <__init_array_start>:
   1b23c:	00004429 	.word	0x00004429

0001b240 <_fini>:
   1b240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b242:	46c0      	nop			; (mov r8, r8)
   1b244:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1b246:	bc08      	pop	{r3}
   1b248:	469e      	mov	lr, r3
   1b24a:	4770      	bx	lr

0001b24c <__fini_array_start>:
   1b24c:	00004401 	.word	0x00004401
